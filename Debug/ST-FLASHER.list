
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d730  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800d8dc  0800d8dc  0000e8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d978  0800d978  0000f0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d978  0800d978  0000e978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d980  0800d980  0000f0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d980  0800d980  0000e980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d984  0800d984  0000e984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800d988  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0fc  2**0
                  CONTENTS
 10 .bss          00000eec  200000fc  200000fc  0000f0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20000fe8  20000fe8  0000f0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4a0  00000000  00000000  0000f12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c7d  00000000  00000000  0002e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  00033250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014dc  00000000  00000000  00034d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a8d  00000000  00000000  00036264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023e3b  00000000  00000000  0003ccf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4546  00000000  00000000  00060b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145072  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007170  00000000  00000000  001450b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d8c4 	.word	0x0800d8c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	0800d8c4 	.word	0x0800d8c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fdec 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f814 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fa14 	bl	8000914 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f9ea 	bl	80008c4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80004f0:	f000 f87a 	bl	80005e8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80004f4:	f000 f8d0 	bl	8000698 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 f96e 	bl	80007d8 <MX_TIM2_Init>
  MX_SPI1_Init();
 80004fc:	f000 f896 	bl	800062c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f9b6 	bl	8000870 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000504:	f008 ff6a 	bl	80093dc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000508:	f00c fcd8 	bl	800cebc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x30>

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	@ 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f00d f9a4 	bl	800d86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <SystemClock_Config+0xd0>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a28      	ldr	r2, [pc, #160]	@ (80005e0 <SystemClock_Config+0xd0>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <SystemClock_Config+0xd4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800055c:	4a21      	ldr	r2, [pc, #132]	@ (80005e4 <SystemClock_Config+0xd4>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000588:	2378      	movs	r3, #120	@ 0x78
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000590:	2305      	movs	r3, #5
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f002 ffc3 	bl	8003524 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a4:	f000 fa8e 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2103      	movs	r1, #3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fa24 	bl	8003a14 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d2:	f000 fa77 	bl	8000ac4 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	@ 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <MX_SDIO_SD_Init+0x40>)
 80005f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 8000606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800060a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000612:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <MX_SDIO_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000118 	.word	0x20000118
 8000628:	40012c00 	.word	0x40012c00

0800062c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000632:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <MX_SPI1_Init+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800063c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000660:	2210      	movs	r2, #16
 8000662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_SPI1_Init+0x64>)
 8000678:	220a      	movs	r2, #10
 800067a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_SPI1_Init+0x64>)
 800067e:	f004 ff23 	bl	80054c8 <HAL_SPI_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 fa1c 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000025c 	.word	0x2000025c
 8000694:	40013000 	.word	0x40013000

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	@ 0x58
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2220      	movs	r2, #32
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00d f8cb 	bl	800d86c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d6:	4b3e      	ldr	r3, [pc, #248]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006d8:	4a3e      	ldr	r2, [pc, #248]	@ (80007d4 <MX_TIM1_Init+0x13c>)
 80006da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80006dc:	4b3c      	ldr	r3, [pc, #240]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006de:	2277      	movs	r2, #119	@ 0x77
 80006e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b3b      	ldr	r3, [pc, #236]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f6:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000702:	4833      	ldr	r0, [pc, #204]	@ (80007d0 <MX_TIM1_Init+0x138>)
 8000704:	f004 ff69 	bl	80055da <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800070e:	f000 f9d9 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800071c:	4619      	mov	r1, r3
 800071e:	482c      	ldr	r0, [pc, #176]	@ (80007d0 <MX_TIM1_Init+0x138>)
 8000720:	f005 f9b6 	bl	8005a90 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800072a:	f000 f9cb 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800072e:	4828      	ldr	r0, [pc, #160]	@ (80007d0 <MX_TIM1_Init+0x138>)
 8000730:	f004 ffa2 	bl	8005678 <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800073a:	f000 f9c3 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000746:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074a:	4619      	mov	r1, r3
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <MX_TIM1_Init+0x138>)
 800074e:	f005 fd8f 	bl	8006270 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000758:	f000 f9b4 	bl	8000ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	2360      	movs	r3, #96	@ 0x60
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000768:	2300      	movs	r3, #0
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077c:	2208      	movs	r2, #8
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <MX_TIM1_Init+0x138>)
 8000782:	f005 f8c3 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800078c:	f000 f99a 	bl	8000ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80007b4:	f005 fdd8 	bl	8006368 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80007be:	f000 f981 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <MX_TIM1_Init+0x138>)
 80007c4:	f000 fb38 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 80007c8:	bf00      	nop
 80007ca:	3758      	adds	r7, #88	@ 0x58
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200002b4 	.word	0x200002b4
 80007d4:	40010000 	.word	0x40010000

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_TIM2_Init+0x94>)
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_TIM2_Init+0x94>)
 80007fe:	223b      	movs	r2, #59	@ 0x3b
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_TIM2_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_TIM2_Init+0x94>)
 800080a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_TIM2_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_TIM2_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <MX_TIM2_Init+0x94>)
 800081e:	f004 fedc 	bl	80055da <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000828:	f000 f94c 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_TIM2_Init+0x94>)
 800083a:	f005 f929 	bl	8005a90 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f93e 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_TIM2_Init+0x94>)
 8000856:	f005 fd0b 	bl	8006270 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f930 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200002fc 	.word	0x200002fc

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART1_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART1_UART_Init+0x4c>)
 80008a8:	f005 fdc4 	bl	8006434 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f907 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000344 	.word	0x20000344
 80008c0:	40011000 	.word	0x40011000

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_DMA_Init+0x4c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000910 <MX_DMA_Init+0x4c>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_DMA_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2106      	movs	r1, #6
 80008ea:	203b      	movs	r0, #59	@ 0x3b
 80008ec:	f000 fd57 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008f0:	203b      	movs	r0, #59	@ 0x3b
 80008f2:	f000 fd70 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2106      	movs	r1, #6
 80008fa:	2045      	movs	r0, #69	@ 0x45
 80008fc:	f000 fd4f 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000900:	2045      	movs	r0, #69	@ 0x45
 8000902:	f000 fd68 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	@ 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b60      	ldr	r3, [pc, #384]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a5f      	ldr	r2, [pc, #380]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b59      	ldr	r3, [pc, #356]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a58      	ldr	r2, [pc, #352]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b56      	ldr	r3, [pc, #344]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b52      	ldr	r3, [pc, #328]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a51      	ldr	r2, [pc, #324]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b4f      	ldr	r3, [pc, #316]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a4a      	ldr	r2, [pc, #296]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b48      	ldr	r3, [pc, #288]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b44      	ldr	r3, [pc, #272]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a43      	ldr	r2, [pc, #268]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b41      	ldr	r3, [pc, #260]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab0 <MX_GPIO_Init+0x19c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	211c      	movs	r1, #28
 80009d6:	4837      	ldr	r0, [pc, #220]	@ (8000ab4 <MX_GPIO_Init+0x1a0>)
 80009d8:	f001 faea 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009e2:	4835      	ldr	r0, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0x1a4>)
 80009e4:	f001 fae4 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SWD_CLK_Pin|SWD_IO_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80009ee:	4833      	ldr	r0, [pc, #204]	@ (8000abc <MX_GPIO_Init+0x1a8>)
 80009f0:	f001 fade 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_ORANGE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_ORANGE_Pin|LED_GREEN_Pin;
 80009f4:	231c      	movs	r3, #28
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482a      	ldr	r0, [pc, #168]	@ (8000ab4 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f001 f90c 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin TARGET_RST_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 8000a10:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0x1a4>)
 8000a2a:	f001 f8fd 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROGRAM_BTN_Pin */
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <MX_GPIO_Init+0x1a8>)
 8000a44:	f001 f8f0 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTION_PROG_DIP_SW_Pin */
  GPIO_InitStruct.Pin = OPTION_PROG_DIP_SW_Pin;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OPTION_PROG_DIP_SW_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <MX_GPIO_Init+0x1a8>)
 8000a5c:	f001 f8e4 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <MX_GPIO_Init+0x1ac>)
 8000a74:	f001 f8d8 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWD_CLK_Pin SWD_IO_Pin */
  GPIO_InitStruct.Pin = SWD_CLK_Pin|SWD_IO_Pin;
 8000a78:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480a      	ldr	r0, [pc, #40]	@ (8000abc <MX_GPIO_Init+0x1a8>)
 8000a92:	f001 f8c9 	bl	8001c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2006      	movs	r0, #6
 8000a9c:	f000 fc7f 	bl	800139e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aa0:	2006      	movs	r0, #6
 8000aa2:	f000 fc98 	bl	80013d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a68      	ldr	r2, [pc, #416]	@ (8000ce0 <HAL_SD_MspInit+0x1c0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	f040 80c9 	bne.w	8000cd6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b66      	ldr	r3, [pc, #408]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4c:	4a65      	ldr	r2, [pc, #404]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b54:	4b63      	ldr	r3, [pc, #396]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b5f      	ldr	r3, [pc, #380]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a5e      	ldr	r2, [pc, #376]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b58      	ldr	r3, [pc, #352]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a57      	ldr	r2, [pc, #348]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b55      	ldr	r3, [pc, #340]	@ (8000ce4 <HAL_SD_MspInit+0x1c4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b98:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000b9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000baa:	230c      	movs	r3, #12
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	484c      	ldr	r0, [pc, #304]	@ (8000ce8 <HAL_SD_MspInit+0x1c8>)
 8000bb6:	f001 f837 	bl	8001c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4845      	ldr	r0, [pc, #276]	@ (8000cec <HAL_SD_MspInit+0x1cc>)
 8000bd6:	f001 f827 	bl	8001c28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000bda:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000bdc:	4a45      	ldr	r2, [pc, #276]	@ (8000cf4 <HAL_SD_MspInit+0x1d4>)
 8000bde:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000be0:	4b43      	ldr	r3, [pc, #268]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000be2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000be6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be8:	4b41      	ldr	r3, [pc, #260]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000bfe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c04:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000c0c:	4b38      	ldr	r3, [pc, #224]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c0e:	2220      	movs	r2, #32
 8000c10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c18:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c1e:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c24:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c2c:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c2e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c32:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000c34:	482e      	ldr	r0, [pc, #184]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c36:	f000 fbe9 	bl	800140c <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000c40:	f7ff ff40 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c48:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c4a:	4a29      	ldr	r2, [pc, #164]	@ (8000cf0 <HAL_SD_MspInit+0x1d0>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c52:	4a2a      	ldr	r2, [pc, #168]	@ (8000cfc <HAL_SD_MspInit+0x1dc>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c60:	2240      	movs	r2, #64	@ 0x40
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c70:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c78:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c80:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c84:	2220      	movs	r2, #32
 8000c86:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000c9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000ca4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000caa:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000cac:	f000 fbae 	bl	800140c <HAL_DMA_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000cb6:	f7ff ff05 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <HAL_SD_MspInit+0x1d8>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	2031      	movs	r0, #49	@ 0x31
 8000ccc:	f000 fb67 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000cd0:	2031      	movs	r0, #49	@ 0x31
 8000cd2:	f000 fb80 	bl	80013d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012c00 	.word	0x40012c00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	2000019c 	.word	0x2000019c
 8000cf4:	40026458 	.word	0x40026458
 8000cf8:	200001fc 	.word	0x200001fc
 8000cfc:	400264a0 	.word	0x400264a0

08000d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <HAL_SPI_MspInit+0xa4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d13b      	bne.n	8000d9a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d32:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a18      	ldr	r2, [pc, #96]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_SPI_MspInit+0xa8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d5a:	23a0      	movs	r3, #160	@ 0xa0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <HAL_SPI_MspInit+0xac>)
 8000d76:	f000 ff57 	bl	8001c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_SPI_MspInit+0xac>)
 8000d96:	f000 ff47 	bl	8001c28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40013000 	.word	0x40013000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <HAL_TIM_Base_MspInit+0x80>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d116      	bne.n	8000df0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a1a      	ldr	r2, [pc, #104]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2019      	movs	r0, #25
 8000de4:	f000 fadb 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000de8:	2019      	movs	r0, #25
 8000dea:	f000 faf4 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dee:	e01a      	b.n	8000e26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df8:	d115      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a0c      	ldr	r2, [pc, #48]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_TIM_Base_MspInit+0x84>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	201c      	movs	r0, #28
 8000e1c:	f000 fabf 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e20:	201c      	movs	r0, #28
 8000e22:	f000 fad8 	bl	80013d6 <HAL_NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11e      	bne.n	8000e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = BEEP_Pin;
 8000e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_TIM_MspPostInit+0x70>)
 8000e94:	f000 fec8 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <HAL_UART_MspInit+0x94>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d134      	bne.n	8000f38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_UART_MspInit+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <HAL_UART_MspInit+0x9c>)
 8000f24:	f000 fe80 	bl	8001c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2025      	movs	r0, #37	@ 0x25
 8000f2e:	f000 fa36 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f32:	2025      	movs	r0, #37	@ 0x25
 8000f34:	f000 fa4f 	bl	80013d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	@ 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40011000 	.word	0x40011000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f8dd 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROGRAM_BTN_Pin);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f001 f818 	bl	8001fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fbe:	f004 fbb4 	bl	800572a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002b4 	.word	0x200002b4

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f004 fbaa 	bl	800572a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002fc 	.word	0x200002fc

08000fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <USART1_IRQHandler+0x10>)
 8000fe6:	f005 fa75 	bl	80064d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000344 	.word	0x20000344

08000ff4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <SDIO_IRQHandler+0x10>)
 8000ffa:	f003 f9a3 	bl	8004344 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000118 	.word	0x20000118

08001008 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <DMA2_Stream3_IRQHandler+0x10>)
 800100e:	f000 fb95 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000019c 	.word	0x2000019c

0800101c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <OTG_FS_IRQHandler+0x10>)
 8001022:	f001 f946 	bl	80022b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000088c 	.word	0x2000088c

08001030 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <DMA2_Stream6_IRQHandler+0x10>)
 8001036:	f000 fb81 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001fc 	.word	0x200001fc

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001096:	f00c fbf1 	bl	800d87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fa1f 	bl	80004dc <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80010ac:	0800d988 	.word	0x0800d988
  ldr r2, =_sbss
 80010b0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010b4:	20000fe8 	.word	0x20000fe8

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f94f 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fcee 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f967 	bl	80013f2 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f92f 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	2000038c 	.word	0x2000038c

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000038c 	.word	0x2000038c

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff feb6 	bl	8001188 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e099      	b.n	800155c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e00f      	b.n	800146a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fe9d 	bl	8001188 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d908      	bls.n	800146a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e078      	b.n	800155c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e8      	bne.n	800144a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_DMA_Init+0x158>)
 8001484:	4013      	ands	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d117      	bne.n	800152e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb0d 	bl	8001b30 <DMA_CheckFifoParam>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800152a:	2301      	movs	r3, #1
 800152c:	e016      	b.n	800155c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fac4 	bl	8001ac4 <DMA_CalcBaseAndBitshift>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001544:	223f      	movs	r2, #63	@ 0x3f
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	f010803f 	.word	0xf010803f

08001568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_DMA_Start_IT+0x26>
 800158a:	2302      	movs	r3, #2
 800158c:	e040      	b.n	8001610 <HAL_DMA_Start_IT+0xa8>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d12f      	bne.n	8001602 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fa56 	bl	8001a68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	223f      	movs	r2, #63	@ 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0216 	orr.w	r2, r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0208 	orr.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e005      	b.n	800160e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001624:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001626:	f7ff fdaf 	bl	8001188 <HAL_GetTick>
 800162a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d008      	beq.n	800164a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e052      	b.n	80016f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0216 	bic.w	r2, r2, #22
 8001658:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001668:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_DMA_Abort+0x62>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	e013      	b.n	80016c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169c:	f7ff fd74 	bl	8001188 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d90c      	bls.n	80016c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e015      	b.n	80016f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e4      	bne.n	800169c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	223f      	movs	r2, #63	@ 0x3f
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d004      	beq.n	8001716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00c      	b.n	8001730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001748:	4b8e      	ldr	r3, [pc, #568]	@ (8001984 <HAL_DMA_IRQHandler+0x248>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a8e      	ldr	r2, [pc, #568]	@ (8001988 <HAL_DMA_IRQHandler+0x24c>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a9b      	lsrs	r3, r3, #10
 8001754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	2208      	movs	r2, #8
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001794:	2208      	movs	r2, #8
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	2201      	movs	r2, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d012      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e2:	2204      	movs	r2, #4
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d012      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	2204      	movs	r2, #4
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180c:	f043 0204 	orr.w	r2, r3, #4
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	2210      	movs	r2, #16
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d043      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03c      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	2210      	movs	r2, #16
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d018      	beq.n	800187e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d024      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
 800186a:	e01f      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e016      	b.n	80018ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	2220      	movs	r2, #32
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808f 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8087 	beq.w	80019dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	2220      	movs	r2, #32
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d136      	bne.n	8001954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0216 	bic.w	r2, r2, #22
 80018f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_DMA_IRQHandler+0x1da>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192a:	223f      	movs	r2, #63	@ 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001946:	2b00      	cmp	r3, #0
 8001948:	d07e      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
        }
        return;
 8001952:	e079      	b.n	8001a48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01d      	beq.n	800199e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	2b00      	cmp	r3, #0
 8001976:	d031      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
 8001980:	e02c      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e01e      	b.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0210 	bic.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d022      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d307      	bcc.n	8001a24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f2      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x2cc>
 8001a22:	e000      	b.n	8001a26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
 8001a46:	e000      	b.n	8001a4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a48:	bf00      	nop
    }
  }
}
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b40      	cmp	r3, #64	@ 0x40
 8001a94:	d108      	bne.n	8001aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aa6:	e007      	b.n	8001ab8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3b10      	subs	r3, #16
 8001ad4:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <DMA_CalcBaseAndBitshift+0x64>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <DMA_CalcBaseAndBitshift+0x68>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d909      	bls.n	8001b06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	1d1a      	adds	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b04:	e007      	b.n	8001b16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	aaaaaaab 	.word	0xaaaaaaab
 8001b2c:	0800d938 	.word	0x0800d938

08001b30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d11f      	bne.n	8001b8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d856      	bhi.n	8001bfe <DMA_CheckFifoParam+0xce>
 8001b50:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <DMA_CheckFifoParam+0x28>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b7b 	.word	0x08001b7b
 8001b60:	08001b69 	.word	0x08001b69
 8001b64:	08001bff 	.word	0x08001bff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d046      	beq.n	8001c02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b78:	e043      	b.n	8001c02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b82:	d140      	bne.n	8001c06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e03d      	b.n	8001c06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b92:	d121      	bne.n	8001bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d837      	bhi.n	8001c0a <DMA_CheckFifoParam+0xda>
 8001b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <DMA_CheckFifoParam+0x70>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bb7 	.word	0x08001bb7
 8001ba8:	08001bb1 	.word	0x08001bb1
 8001bac:	08001bc9 	.word	0x08001bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb4:	e030      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d025      	beq.n	8001c0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc6:	e022      	b.n	8001c0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bd0:	d11f      	bne.n	8001c12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bd6:	e01c      	b.n	8001c12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d903      	bls.n	8001be6 <DMA_CheckFifoParam+0xb6>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d003      	beq.n	8001bec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be4:	e018      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bea:	e015      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bfc:	e00b      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e00a      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
 8001c04:	e008      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e006      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e004      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e002      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <DMA_CheckFifoParam+0xe8>
      break;
 8001c16:	bf00      	nop
    }
  } 
  
  return status; 
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e177      	b.n	8001f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8166 	bne.w	8001f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80c0 	beq.w	8001f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b66      	ldr	r3, [pc, #408]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_GPIO_Init+0x324>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a61      	ldr	r2, [pc, #388]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	@ (8001f54 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d037      	beq.n	8001e66 <HAL_GPIO_Init+0x23e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a57      	ldr	r2, [pc, #348]	@ (8001f58 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0x23a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a56      	ldr	r2, [pc, #344]	@ (8001f5c <HAL_GPIO_Init+0x334>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x236>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a55      	ldr	r2, [pc, #340]	@ (8001f60 <HAL_GPIO_Init+0x338>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x232>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a54      	ldr	r2, [pc, #336]	@ (8001f64 <HAL_GPIO_Init+0x33c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x22e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a53      	ldr	r2, [pc, #332]	@ (8001f68 <HAL_GPIO_Init+0x340>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x22a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <HAL_GPIO_Init+0x344>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <HAL_GPIO_Init+0x348>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a50      	ldr	r2, [pc, #320]	@ (8001f74 <HAL_GPIO_Init+0x34c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <HAL_GPIO_Init+0x350>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e3e:	2309      	movs	r3, #9
 8001e40:	e012      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e42:	230a      	movs	r3, #10
 8001e44:	e010      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00e      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x240>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	@ (8001f50 <HAL_GPIO_Init+0x328>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a34      	ldr	r2, [pc, #208]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_GPIO_Init+0x354>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f ae84 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022400 	.word	0x40022400
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e001      	b.n	8001fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f806 	bl	8002014 <HAL_GPIO_EXTI_Callback>
  }
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40013c00 	.word	0x40013c00

08002014 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af02      	add	r7, sp, #8
 8002030:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e101      	b.n	8002240 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00b f8d4 	bl	800d204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2203      	movs	r2, #3
 8002060:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800206a:	d102      	bne.n	8002072 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f005 ff85 	bl	8007f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7c1a      	ldrb	r2, [r3, #16]
 8002084:	f88d 2000 	strb.w	r2, [sp]
 8002088:	3304      	adds	r3, #4
 800208a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800208c:	f005 fe64 	bl	8007d58 <USB_CoreInit>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0ce      	b.n	8002240 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f005 ff7d 	bl	8007fa8 <USB_SetCurrentMode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0bf      	b.n	8002240 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e04a      	b.n	800215c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3315      	adds	r3, #21
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3314      	adds	r3, #20
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	b298      	uxth	r0, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	332e      	adds	r3, #46	@ 0x2e
 8002102:	4602      	mov	r2, r0
 8002104:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3318      	adds	r3, #24
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	331c      	adds	r3, #28
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3320      	adds	r3, #32
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3324      	adds	r3, #36	@ 0x24
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3af      	bcc.n	80020c6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e044      	b.n	80021f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3b5      	bcc.n	800216c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7c1a      	ldrb	r2, [r3, #16]
 8002208:	f88d 2000 	strb.w	r2, [sp]
 800220c:	3304      	adds	r3, #4
 800220e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002210:	f005 ff16 	bl	8008040 <USB_DevInit>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00c      	b.n	8002240 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f006 ff5a 	bl	80090f2 <USB_DevDisconnect>

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_PCD_Start+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e022      	b.n	80022aa <HAL_PCD_Start+0x62>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fe67 	bl	8007f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f006 ff08 	bl	80090b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b08d      	sub	sp, #52	@ 0x34
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f006 ffc6 	bl	800925a <USB_GetMode>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 848c 	bne.w	8002bee <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f006 ff2a 	bl	8009134 <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8482 	beq.w	8002bec <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f006 ff17 	bl	8009134 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d107      	bne.n	8002320 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f002 0202 	and.w	r2, r2, #2
 800231e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f006 ff05 	bl	8009134 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b10      	cmp	r3, #16
 8002332:	d161      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0210 	bic.w	r2, r2, #16
 8002342:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 020f 	and.w	r2, r3, #15
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	0c5b      	lsrs	r3, r3, #17
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2b02      	cmp	r3, #2
 800236e:	d124      	bne.n	80023ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d035      	beq.n	80023e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	6a38      	ldr	r0, [r7, #32]
 8002390:	f006 fd3c 	bl	8008e0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a0:	441a      	add	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	441a      	add	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	e016      	b.n	80023e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	0c5b      	lsrs	r3, r3, #17
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d110      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023cc:	2208      	movs	r2, #8
 80023ce:	4619      	mov	r1, r3
 80023d0:	6a38      	ldr	r0, [r7, #32]
 80023d2:	f006 fd1b 	bl	8008e0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e2:	441a      	add	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0210 	orr.w	r2, r2, #16
 80023f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f006 fe99 	bl	8009134 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800240c:	f040 80a7 	bne.w	800255e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f006 fe9e 	bl	800915a <USB_ReadDevAllOutEpInterrupt>
 800241e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002420:	e099      	b.n	8002556 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 808e 	beq.w	800254a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f006 fec2 	bl	80091c2 <USB_ReadDevOutEPInterrupt>
 800243e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002456:	461a      	mov	r2, r3
 8002458:	2301      	movs	r3, #1
 800245a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800245c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fece 	bl	8003200 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	2308      	movs	r3, #8
 800247e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 ffa4 	bl	80033d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800249e:	461a      	mov	r2, r3
 80024a0:	2310      	movs	r3, #16
 80024a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d030      	beq.n	8002510 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b6:	2b80      	cmp	r3, #128	@ 0x80
 80024b8:	d109      	bne.n	80024ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	78db      	ldrb	r3, [r3, #3]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2200      	movs	r2, #0
 80024f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f00a ff89 	bl	800d410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	2302      	movs	r3, #2
 800250e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002526:	461a      	mov	r2, r3
 8002528:	2320      	movs	r3, #32
 800252a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002542:	461a      	mov	r2, r3
 8002544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002548:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f af62 	bne.w	8002422 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fde6 	bl	8009134 <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002572:	f040 80db 	bne.w	800272c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f006 fe07 	bl	800918e <USB_ReadDevAllInEpInterrupt>
 8002580:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002586:	e0cd      	b.n	8002724 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80c2 	beq.w	8002718 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f006 fe2d 	bl	80091fe <USB_ReadDevInEPInterrupt>
 80025a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d057      	beq.n	8002660 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	2201      	movs	r2, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69f9      	ldr	r1, [r7, #28]
 80025cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025d0:	4013      	ands	r3, r2
 80025d2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025e0:	461a      	mov	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d132      	bne.n	8002654 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3320      	adds	r3, #32
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4403      	add	r3, r0
 800260e:	331c      	adds	r3, #28
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4419      	add	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4403      	add	r3, r0
 8002622:	3320      	adds	r3, #32
 8002624:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d113      	bne.n	8002654 <HAL_PCD_IRQHandler+0x3a2>
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3324      	adds	r3, #36	@ 0x24
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800264c:	461a      	mov	r2, r3
 800264e:	2101      	movs	r1, #1
 8002650:	f006 fe34 	bl	80092bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f00a fe53 	bl	800d306 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002676:	461a      	mov	r2, r3
 8002678:	2308      	movs	r3, #8
 800267a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002692:	461a      	mov	r2, r3
 8002694:	2310      	movs	r3, #16
 8002696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ae:	461a      	mov	r2, r3
 80026b0:	2340      	movs	r3, #64	@ 0x40
 80026b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d023      	beq.n	8002706 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c0:	6a38      	ldr	r0, [r7, #32]
 80026c2:	f005 fe21 	bl	8008308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3310      	adds	r3, #16
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	78db      	ldrb	r3, [r3, #3]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2200      	movs	r2, #0
 80026e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f00a fea0 	bl	800d434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002700:	461a      	mov	r2, r3
 8002702:	2302      	movs	r3, #2
 8002704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fce8 	bl	80030e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	f47f af2e 	bne.w	8002588 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f006 fcff 	bl	8009134 <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800273c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002740:	d122      	bne.n	8002788 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002768:	2100      	movs	r1, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fece 	bl	800350c <HAL_PCDEx_LPM_Callback>
 8002770:	e002      	b.n	8002778 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f00a fe3e 	bl	800d3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f006 fcd1 	bl	8009134 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800279c:	d112      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f00a fdfa 	bl	800d3a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027c2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fcb3 	bl	8009134 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d8:	f040 80b7 	bne.w	800294a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2110      	movs	r1, #16
 80027f6:	4618      	mov	r0, r3
 80027f8:	f005 fd86 	bl	8008308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002800:	e046      	b.n	8002890 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002814:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	440a      	add	r2, r1
 800282c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002830:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002834:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002842:	461a      	mov	r2, r3
 8002844:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002848:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800285a:	0151      	lsls	r1, r2, #5
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	440a      	add	r2, r1
 8002860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002864:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800286a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	440a      	add	r2, r1
 8002880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002888:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	3301      	adds	r3, #1
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	791b      	ldrb	r3, [r3, #4]
 8002894:	461a      	mov	r2, r3
 8002896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002898:	4293      	cmp	r3, r2
 800289a:	d3b2      	bcc.n	8002802 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028aa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7bdb      	ldrb	r3, [r3, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d016      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028c8:	f043 030b 	orr.w	r3, r3, #11
 80028cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028de:	f043 030b 	orr.w	r3, r3, #11
 80028e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80028e4:	e015      	b.n	8002912 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028f8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800290c:	f043 030b 	orr.w	r3, r3, #11
 8002910:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002920:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002924:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002934:	461a      	mov	r2, r3
 8002936:	f006 fcc1 	bl	80092bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f006 fbf0 	bl	8009134 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295e:	d123      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f006 fc86 	bl	8009276 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f005 fd43 	bl	80083fa <USB_GetDevSpeed>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681c      	ldr	r4, [r3, #0]
 8002980:	f001 fa34 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8002984:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800298a:	461a      	mov	r2, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f005 fa47 	bl	8007e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f00a fcdf 	bl	800d356 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f006 fbc1 	bl	8009134 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d10a      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f00a fcbc 	bl	800d33a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 0208 	and.w	r2, r2, #8
 80029d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 fbac 	bl	8009134 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b80      	cmp	r3, #128	@ 0x80
 80029e4:	d123      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f2:	2301      	movs	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f6:	e014      	b.n	8002a22 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fb08 	bl	800302c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	3301      	adds	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	791b      	ldrb	r3, [r3, #4]
 8002a26:	461a      	mov	r2, r3
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d3e4      	bcc.n	80029f8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 fb7e 	bl	8009134 <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a42:	d13c      	bne.n	8002abe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a44:	2301      	movs	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a48:	e02b      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3318      	adds	r3, #24
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d115      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	da12      	bge.n	8002a9c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3317      	adds	r3, #23
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fac8 	bl	800302c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d3cd      	bcc.n	8002a4a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f006 fb36 	bl	8009134 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ad2:	d156      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad8:	e045      	b.n	8002b66 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d12e      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da2b      	bge.n	8002b60 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b14:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d121      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5c:	6053      	str	r3, [r2, #4]
            break;
 8002b5e:	e008      	b.n	8002b72 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	3301      	adds	r3, #1
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d3b3      	bcc.n	8002ada <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 fad4 	bl	8009134 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b96:	d10a      	bne.n	8002bae <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f00a fc5d 	bl	800d458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f006 fabe 	bl	8009134 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d115      	bne.n	8002bee <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f00a fc4d 	bl	800d474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e000      	b.n	8002bee <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bec:	bf00      	nop
    }
  }
}
 8002bee:	3734      	adds	r7, #52	@ 0x34
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}

08002bf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_PCD_SetAddress+0x1a>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e012      	b.n	8002c34 <HAL_PCD_SetAddress+0x40>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f006 fa1d 	bl	8009064 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	70fb      	strb	r3, [r7, #3]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	803b      	strh	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da0f      	bge.n	8002c82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3310      	adds	r3, #16
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	705a      	strb	r2, [r3, #1]
 8002c80:	e00f      	b.n	8002ca2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cae:	883a      	ldrh	r2, [r7, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	78ba      	ldrb	r2, [r7, #2]
 8002cb8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ccc:	78bb      	ldrb	r3, [r7, #2]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_PCD_EP_Open+0xaa>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e00e      	b.n	8002d04 <HAL_PCD_EP_Open+0xc8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68f9      	ldr	r1, [r7, #12]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 fba5 	bl	8008444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da0f      	bge.n	8002d40 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 020f 	and.w	r2, r3, #15
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	3310      	adds	r3, #16
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	705a      	strb	r2, [r3, #1]
 8002d3e:	e00f      	b.n	8002d60 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_EP_Close+0x6e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e00e      	b.n	8002d98 <HAL_PCD_EP_Close+0x8c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f005 fbe3 	bl	8008554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	460b      	mov	r3, r1
 8002dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db0:	7afb      	ldrb	r3, [r7, #11]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	799b      	ldrb	r3, [r3, #6]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	799b      	ldrb	r3, [r3, #6]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	f005 fc80 	bl	800870c <USB_EPStartXfer>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3310      	adds	r3, #16
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2201      	movs	r2, #1
 8002e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	799b      	ldrb	r3, [r3, #6]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d102      	bne.n	8002ea0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	799b      	ldrb	r3, [r3, #6]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	f005 fc2e 	bl	800870c <USB_EPStartXfer>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	7912      	ldrb	r2, [r2, #4]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e04f      	b.n	8002f78 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da0f      	bge.n	8002f00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3310      	adds	r3, #16
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	705a      	strb	r2, [r3, #1]
 8002efe:	e00d      	b.n	8002f1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_EP_SetStall+0x82>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e01d      	b.n	8002f78 <HAL_PCD_EP_SetStall+0xbe>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 ffb6 	bl	8008ebc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7999      	ldrb	r1, [r3, #6]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f006 f9a7 	bl	80092bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	7912      	ldrb	r2, [r2, #4]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e042      	b.n	8003024 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da0f      	bge.n	8002fc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	705a      	strb	r2, [r3, #1]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_EP_ClrStall+0x86>
 8003002:	2302      	movs	r3, #2
 8003004:	e00e      	b.n	8003024 <HAL_PCD_EP_ClrStall+0xa4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f005 ffbf 	bl	8008f98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da0c      	bge.n	800305a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3310      	adds	r3, #16
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e00c      	b.n	8003074 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 020f 	and.w	r2, r3, #15
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	3304      	adds	r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	4618      	mov	r0, r3
 800307c:	f005 fdde 	bl	8008c3c <USB_EPStopXfer>
 8003080:	4603      	mov	r3, r0
 8003082:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003084:	7afb      	ldrb	r3, [r7, #11]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_PCD_EP_Flush+0x1a>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e01b      	b.n	80030e0 <HAL_PCD_EP_Flush+0x52>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da09      	bge.n	80030cc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f005 f91f 	bl	8008308 <USB_FlushTxFifo>
 80030ca:	e004      	b.n	80030d6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f005 f94b 	bl	800836c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	3310      	adds	r3, #16
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d901      	bls.n	8003120 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e06b      	b.n	80031f8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d902      	bls.n	800313c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3303      	adds	r3, #3
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003144:	e02a      	b.n	800319c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	429a      	cmp	r2, r3
 800315a:	d902      	bls.n	8003162 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3303      	adds	r3, #3
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f005 fe06 	bl	8008d90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	441a      	add	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d809      	bhi.n	80031c6 <PCD_WriteEmptyTxFifo+0xde>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d203      	bcs.n	80031c6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1bf      	bne.n	8003146 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d811      	bhi.n	80031f6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	2201      	movs	r2, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	6939      	ldr	r1, [r7, #16]
 80031ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f2:	4013      	ands	r3, r2
 80031f4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	333c      	adds	r3, #60	@ 0x3c
 8003218:	3304      	adds	r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	799b      	ldrb	r3, [r3, #6]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d17b      	bne.n	800332e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4a61      	ldr	r2, [pc, #388]	@ (80033c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	f240 80b9 	bls.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80b3 	beq.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	e0a7      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	2320      	movs	r3, #32
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	e098      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8093 	bne.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	4a4b      	ldr	r2, [pc, #300]	@ (80033c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d90f      	bls.n	80032be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ba:	6093      	str	r3, [r2, #8]
 80032bc:	e07e      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	0159      	lsls	r1, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	440b      	add	r3, r1
 80032e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d114      	bne.n	8003320 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003308:	461a      	mov	r2, r3
 800330a:	2101      	movs	r1, #1
 800330c:	f005 ffd6 	bl	80092bc <USB_EP0_OutStart>
 8003310:	e006      	b.n	8003320 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	441a      	add	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f009 ffd2 	bl	800d2d0 <HAL_PCD_DataOutStageCallback>
 800332c:	e046      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a26      	ldr	r2, [pc, #152]	@ (80033cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d124      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e032      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2320      	movs	r3, #32
 8003370:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f009 ffa9 	bl	800d2d0 <HAL_PCD_DataOutStageCallback>
 800337e:	e01d      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d114      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033a8:	461a      	mov	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f005 ff86 	bl	80092bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f009 ff8a 	bl	800d2d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	4f54300a 	.word	0x4f54300a
 80033cc:	4f54310a 	.word	0x4f54310a

080033d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	333c      	adds	r3, #60	@ 0x3c
 80033e8:	3304      	adds	r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a15      	ldr	r2, [pc, #84]	@ (8003458 <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90e      	bls.n	8003424 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f009 ff41 	bl	800d2ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <PCD_EP_OutSetupPacket_int+0x88>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d90c      	bls.n	800344c <PCD_EP_OutSetupPacket_int+0x7c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	799b      	ldrb	r3, [r3, #6]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003444:	461a      	mov	r2, r3
 8003446:	2101      	movs	r1, #1
 8003448:	f005 ff38 	bl	80092bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	4f54300a 	.word	0x4f54300a

0800345c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
 8003468:	4613      	mov	r3, r2
 800346a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d107      	bne.n	800348a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800347a:	883b      	ldrh	r3, [r7, #0]
 800347c:	0419      	lsls	r1, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	430a      	orrs	r2, r1
 8003486:	629a      	str	r2, [r3, #40]	@ 0x28
 8003488:	e028      	b.n	80034dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e00d      	b.n	80034ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	3340      	adds	r3, #64	@ 0x40
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4413      	add	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	3301      	adds	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	3b01      	subs	r3, #1
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3ec      	bcc.n	800349e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034c4:	883b      	ldrh	r3, [r7, #0]
 80034c6:	0418      	lsls	r0, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	4302      	orrs	r2, r0
 80034d4:	3340      	adds	r3, #64	@ 0x40
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e267      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d075      	beq.n	800362e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003542:	4b88      	ldr	r3, [pc, #544]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d00c      	beq.n	8003568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b85      	ldr	r3, [pc, #532]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d112      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b82      	ldr	r3, [pc, #520]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003566:	d10b      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	4b7e      	ldr	r3, [pc, #504]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05b      	beq.n	800362c <HAL_RCC_OscConfig+0x108>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d157      	bne.n	800362c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e242      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003588:	d106      	bne.n	8003598 <HAL_RCC_OscConfig+0x74>
 800358a:	4b76      	ldr	r3, [pc, #472]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a75      	ldr	r2, [pc, #468]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e01d      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x98>
 80035a2:	4b70      	ldr	r3, [pc, #448]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 80035bc:	4b69      	ldr	r3, [pc, #420]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a68      	ldr	r2, [pc, #416]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b66      	ldr	r3, [pc, #408]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a65      	ldr	r2, [pc, #404]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fdd4 	bl	8001188 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fdd0 	bl	8001188 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e207      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0xc0>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fdc0 	bl	8001188 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360c:	f7fd fdbc 	bl	8001188 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1f3      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	4b51      	ldr	r3, [pc, #324]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0xe8>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d063      	beq.n	8003702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363a:	4b4a      	ldr	r3, [pc, #296]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364e:	2b08      	cmp	r3, #8
 8003650:	d11c      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b44      	ldr	r3, [pc, #272]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d116      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	4b41      	ldr	r3, [pc, #260]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e1c7      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4937      	ldr	r1, [pc, #220]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	e03a      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003694:	4b34      	ldr	r3, [pc, #208]	@ (8003768 <HAL_RCC_OscConfig+0x244>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fd fd75 	bl	8001188 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fd fd71 	bl	8001188 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1a8      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4925      	ldr	r1, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d6:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <HAL_RCC_OscConfig+0x244>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fd fd54 	bl	8001188 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e4:	f7fd fd50 	bl	8001188 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e187      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d036      	beq.n	800377c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_RCC_OscConfig+0x248>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd fd34 	bl	8001188 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003724:	f7fd fd30 	bl	8001188 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e167      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x200>
 8003742:	e01b      	b.n	800377c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_OscConfig+0x248>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fd fd1d 	bl	8001188 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	e00e      	b.n	8003770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003752:	f7fd fd19 	bl	8001188 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d907      	bls.n	8003770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e150      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
 8003764:	40023800 	.word	0x40023800
 8003768:	42470000 	.word	0x42470000
 800376c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b88      	ldr	r3, [pc, #544]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ea      	bne.n	8003752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8097 	beq.w	80038b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378e:	4b81      	ldr	r3, [pc, #516]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	4b7d      	ldr	r3, [pc, #500]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b77      	ldr	r3, [pc, #476]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b74      	ldr	r3, [pc, #464]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a73      	ldr	r2, [pc, #460]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fd fcd9 	bl	8001188 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7fd fcd5 	bl	8001188 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e10c      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x2ea>
 8003800:	4b64      	ldr	r3, [pc, #400]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003804:	4a63      	ldr	r2, [pc, #396]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	@ 0x70
 800380c:	e01c      	b.n	8003848 <HAL_RCC_OscConfig+0x324>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x30c>
 8003816:	4b5f      	ldr	r3, [pc, #380]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	4a5e      	ldr	r2, [pc, #376]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	6713      	str	r3, [r2, #112]	@ 0x70
 8003822:	4b5c      	ldr	r3, [pc, #368]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
 800382e:	e00b      	b.n	8003848 <HAL_RCC_OscConfig+0x324>
 8003830:	4b58      	ldr	r3, [pc, #352]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	4a57      	ldr	r2, [pc, #348]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	@ 0x70
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	4a54      	ldr	r2, [pc, #336]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 0304 	bic.w	r3, r3, #4
 8003846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fd fc9a 	bl	8001188 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fc96 	bl	8001188 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0cb      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386e:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ee      	beq.n	8003858 <HAL_RCC_OscConfig+0x334>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387c:	f7fd fc84 	bl	8001188 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	e00a      	b.n	800389a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fd fc80 	bl	8001188 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0b5      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389a:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ee      	bne.n	8003884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ac:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a1 	beq.w	8003a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c2:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d05c      	beq.n	8003988 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d141      	bne.n	800395a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fd fc54 	bl	8001188 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd fc50 	bl	8001188 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e087      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	019b      	lsls	r3, r3, #6
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	3b01      	subs	r3, #1
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	491b      	ldr	r1, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd fc29 	bl	8001188 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fc25 	bl	8001188 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e05c      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x416>
 8003958:	e054      	b.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd fc12 	bl	8001188 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fc0e 	bl	8001188 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e045      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x444>
 8003986:	e03d      	b.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e038      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x4ec>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d121      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d11a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0cc      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90c      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b65      	ldr	r3, [pc, #404]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a52      	ldr	r2, [pc, #328]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d044      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d119      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e067      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b37      	ldr	r3, [pc, #220]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4934      	ldr	r1, [pc, #208]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fb40 	bl	8001188 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fb3c 	bl	8001188 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e04f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d20c      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f821 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490a      	ldr	r1, [pc, #40]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd faa0 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800d920 	.word	0x0800d920
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000004 	.word	0x20000004

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be4:	b094      	sub	sp, #80	@ 0x50
 8003be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bec:	2300      	movs	r3, #0
 8003bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf8:	4b79      	ldr	r3, [pc, #484]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d00d      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x40>
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	f200 80e1 	bhi.w	8003dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c12:	e0db      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b73      	ldr	r3, [pc, #460]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c18:	e0db      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1a:	4b73      	ldr	r3, [pc, #460]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1e:	e0d8      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c20:	4b6f      	ldr	r3, [pc, #444]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d063      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c36:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	099b      	lsrs	r3, r3, #6
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c52:	4622      	mov	r2, r4
 8003c54:	462b      	mov	r3, r5
 8003c56:	f04f 0000 	mov.w	r0, #0
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	0159      	lsls	r1, r3, #5
 8003c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c64:	0150      	lsls	r0, r2, #5
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	1a51      	subs	r1, r2, r1
 8003c6e:	6139      	str	r1, [r7, #16]
 8003c70:	4629      	mov	r1, r5
 8003c72:	eb63 0301 	sbc.w	r3, r3, r1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c84:	4659      	mov	r1, fp
 8003c86:	018b      	lsls	r3, r1, #6
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8e:	4651      	mov	r1, sl
 8003c90:	018a      	lsls	r2, r1, #6
 8003c92:	4651      	mov	r1, sl
 8003c94:	ebb2 0801 	subs.w	r8, r2, r1
 8003c98:	4659      	mov	r1, fp
 8003c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb2:	4690      	mov	r8, r2
 8003cb4:	4699      	mov	r9, r3
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	eb18 0303 	adds.w	r3, r8, r3
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	eb49 0303 	adc.w	r3, r9, r3
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	024b      	lsls	r3, r1, #9
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cdc:	4621      	mov	r1, r4
 8003cde:	024a      	lsls	r2, r1, #9
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cf0:	f7fc fa7c 	bl	80001ec <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cfc:	e058      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfe:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	2200      	movs	r2, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	4611      	mov	r1, r2
 8003d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	0159      	lsls	r1, r3, #5
 8003d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2a:	0150      	lsls	r0, r2, #5
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4641      	mov	r1, r8
 8003d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d50:	ebb2 040a 	subs.w	r4, r2, sl
 8003d54:	eb63 050b 	sbc.w	r5, r3, fp
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	00eb      	lsls	r3, r5, #3
 8003d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d66:	00e2      	lsls	r2, r4, #3
 8003d68:	4614      	mov	r4, r2
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	4643      	mov	r3, r8
 8003d6e:	18e3      	adds	r3, r4, r3
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	464b      	mov	r3, r9
 8003d74:	eb45 0303 	adc.w	r3, r5, r3
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d86:	4629      	mov	r1, r5
 8003d88:	028b      	lsls	r3, r1, #10
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d90:	4621      	mov	r1, r4
 8003d92:	028a      	lsls	r2, r1, #10
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	61fa      	str	r2, [r7, #28]
 8003da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da4:	f7fc fa22 	bl	80001ec <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3750      	adds	r7, #80	@ 0x50
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	007a1200 	.word	0x007a1200

08003dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df0:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000000 	.word	0x20000000

08003e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e08:	f7ff fff0 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	0a9b      	lsrs	r3, r3, #10
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	@ (8003e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40023800 	.word	0x40023800
 8003e28:	0800d930 	.word	0x0800d930

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e30:	f7ff ffdc 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0b5b      	lsrs	r3, r3, #13
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	@ (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0800d930 	.word	0x0800d930

08003e54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e022      	b.n	8003eac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fc fe51 	bl	8000b20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2203      	movs	r2, #3
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f814 	bl	8003eb4 <HAL_SD_InitCard>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00a      	b.n	8003eac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003eb4:	b5b0      	push	{r4, r5, r7, lr}
 8003eb6:	b08e      	sub	sp, #56	@ 0x38
 8003eb8:	af04      	add	r7, sp, #16
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ed0:	2376      	movs	r3, #118	@ 0x76
 8003ed2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681d      	ldr	r5, [r3, #0]
 8003ed8:	466c      	mov	r4, sp
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eec:	4628      	mov	r0, r5
 8003eee:	f003 f9bf 	bl	8007270 <SDIO_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04f      	b.n	8003fa4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003f04:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_SD_InitCard+0xf8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 f9f7 	bl	8007302 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_SD_InitCard+0xf8>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f7fd f940 	bl	80011a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 f805 	bl	8004f30 <SD_PowerON>
 8003f26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e02e      	b.n	8003fa4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 ff24 	bl	8004d94 <SD_InitCard>
 8003f4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e01b      	b.n	8003fa4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 fa56 	bl	8007426 <SDMMC_CmdBlockLength>
 8003f7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00f      	beq.n	8003fa2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <HAL_SD_InitCard+0xfc>)
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	@ 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}
 8003fac:	422580a0 	.word	0x422580a0
 8003fb0:	004005ff 	.word	0x004005ff

08003fb4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	@ 0x30
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0c0      	b.n	800415e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 80b9 	bne.w	800415c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d907      	bls.n	800400e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0a7      	b.n	800415e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a4c      	ldr	r2, [pc, #304]	@ (8004168 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a4b      	ldr	r2, [pc, #300]	@ (800416c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004040:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2200      	movs	r2, #0
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3380      	adds	r3, #128	@ 0x80
 8004078:	4619      	mov	r1, r3
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	025b      	lsls	r3, r3, #9
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f7fd fa71 	bl	8001568 <HAL_DMA_Start_IT>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e050      	b.n	800415e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80040bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d002      	beq.n	80040d0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	025b      	lsls	r3, r3, #9
 80040da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040dc:	2390      	movs	r3, #144	@ 0x90
 80040de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80040e0:	2302      	movs	r3, #2
 80040e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f107 0210 	add.w	r2, r7, #16
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f003 f969 	bl	80073ce <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d90a      	bls.n	8004118 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2282      	movs	r2, #130	@ 0x82
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800410e:	4618      	mov	r0, r3
 8004110:	f003 f9cd 	bl	80074ae <SDMMC_CmdReadMultiBlock>
 8004114:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004116:	e009      	b.n	800412c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2281      	movs	r2, #129	@ 0x81
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004124:	4618      	mov	r0, r3
 8004126:	f003 f9a0 	bl	800746a <SDMMC_CmdReadSingleBlock>
 800412a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a0e      	ldr	r2, [pc, #56]	@ (8004170 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e002      	b.n	800415e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3730      	adds	r7, #48	@ 0x30
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	08004ba3 	.word	0x08004ba3
 800416c:	08004c15 	.word	0x08004c15
 8004170:	004005ff 	.word	0x004005ff
 8004174:	4225858c 	.word	0x4225858c

08004178 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	@ 0x30
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0c5      	b.n	800432c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 80be 	bne.w	800432a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d907      	bls.n	80041d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0ac      	b.n	800432c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2203      	movs	r2, #3
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004334 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80041fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	4a4d      	ldr	r2, [pc, #308]	@ (8004338 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004204:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	2200      	movs	r2, #0
 800420c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	025b      	lsls	r3, r3, #9
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d90a      	bls.n	8004238 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22a0      	movs	r2, #160	@ 0xa0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422e:	4618      	mov	r0, r3
 8004230:	f003 f981 	bl	8007536 <SDMMC_CmdWriteMultiBlock>
 8004234:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004236:	e009      	b.n	800424c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2290      	movs	r2, #144	@ 0x90
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004244:	4618      	mov	r0, r3
 8004246:	f003 f954 	bl	80074f2 <SDMMC_CmdWriteSingleBlock>
 800424a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a39      	ldr	r2, [pc, #228]	@ (800433c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e059      	b.n	800432c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004278:	4b31      	ldr	r3, [pc, #196]	@ (8004340 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	2240      	movs	r2, #64	@ 0x40
 8004284:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3380      	adds	r3, #128	@ 0x80
 80042ae:	461a      	mov	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	025b      	lsls	r3, r3, #9
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	f7fd f957 	bl	8001568 <HAL_DMA_Start_IT>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01c      	beq.n	80042fa <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80042ce:	f023 0302 	bic.w	r3, r3, #2
 80042d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a18      	ldr	r2, [pc, #96]	@ (800433c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e018      	b.n	800432c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	025b      	lsls	r3, r3, #9
 8004304:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004306:	2390      	movs	r3, #144	@ 0x90
 8004308:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004312:	2301      	movs	r3, #1
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f107 0210 	add.w	r2, r7, #16
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f003 f854 	bl	80073ce <SDIO_ConfigData>

      return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3730      	adds	r7, #48	@ 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	08004b79 	.word	0x08004b79
 8004338:	08004c15 	.word	0x08004c15
 800433c:	004005ff 	.word	0x004005ff
 8004340:	4225858c 	.word	0x4225858c

08004344 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_SD_IRQHandler+0x2e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f806 	bl	800537c <SD_Read_IT>
 8004370:	e165      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 808f 	beq.w	80044a0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800439a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800439e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d039      	beq.n	800442e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_SD_IRQHandler+0x8a>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 f8d2 	bl	800757c <SDMMC_CmdStopTransfer>
 80043d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f92f 	bl	8004650 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_SD_IRQHandler+0xda>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f005 f87a 	bl	8009518 <HAL_SD_RxCpltCallback>
 8004424:	e10b      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f005 f86c 	bl	8009504 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800442c:	e107      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8102 	beq.w	800463e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d011      	beq.n	8004468 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f003 f897 	bl	800757c <SDMMC_CmdStopTransfer>
 800444e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8f4 	bl	8004650 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80e5 	bne.w	800463e <HAL_SD_IRQHandler+0x2fa>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 80df 	bne.w	800463e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0208 	bic.w	r2, r2, #8
 800448e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f005 f833 	bl	8009504 <HAL_SD_TxCpltCallback>
}
 800449e:	e0ce      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_SD_IRQHandler+0x17c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 ffb0 	bl	800541e <SD_Write_IT>
 80044be:	e0be      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044c6:	f240 233a 	movw	r3, #570	@ 0x23a
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80b6 	beq.w	800463e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	f043 0202 	orr.w	r2, r3, #2
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	f043 0208 	orr.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	f043 0208 	orr.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f240 723a 	movw	r2, #1850	@ 0x73a
 800455c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800456c:	f023 0302 	bic.w	r3, r3, #2
 8004570:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f003 f800 	bl	800757c <SDMMC_CmdStopTransfer>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f855 	bl	8004650 <HAL_SD_ErrorCallback>
}
 80045a6:	e04a      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d045      	beq.n	800463e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_SD_IRQHandler+0x282>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004648 <HAL_SD_IRQHandler+0x304>)
 80045cc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd f890 	bl	80016f8 <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02f      	beq.n	800463e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fb68 	bl	8004cb8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045e8:	e029      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_SD_IRQHandler+0x2ba>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d011      	beq.n	8004622 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	4a12      	ldr	r2, [pc, #72]	@ (800464c <HAL_SD_IRQHandler+0x308>)
 8004604:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	4618      	mov	r0, r3
 800460c:	f7fd f874 	bl	80016f8 <HAL_DMA_Abort_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d013      	beq.n	800463e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fb83 	bl	8004d26 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004620:	e00d      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f004 ff5a 	bl	80094f0 <HAL_SD_AbortCallback>
}
 800463c:	e7ff      	b.n	800463e <HAL_SD_IRQHandler+0x2fa>
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	08004cb9 	.word	0x08004cb9
 800464c:	08004d27 	.word	0x08004d27

08004650 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004672:	0f9b      	lsrs	r3, r3, #30
 8004674:	b2da      	uxtb	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	b2da      	uxtb	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2da      	uxtb	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c4:	0d1b      	lsrs	r3, r3, #20
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e2:	0bdb      	lsrs	r3, r3, #15
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f4:	0b9b      	lsrs	r3, r3, #14
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004706:	0b5b      	lsrs	r3, r3, #13
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	0b1b      	lsrs	r3, r3, #12
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2200      	movs	r2, #0
 800472a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	2b00      	cmp	r3, #0
 8004732:	d163      	bne.n	80047fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004744:	0f92      	lsrs	r2, r2, #30
 8004746:	431a      	orrs	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004750:	0edb      	lsrs	r3, r3, #27
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	b2da      	uxtb	r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004762:	0e1b      	lsrs	r3, r3, #24
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004774:	0d5b      	lsrs	r3, r3, #21
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	b2da      	uxtb	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004798:	0bdb      	lsrs	r3, r3, #15
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	3302      	adds	r3, #2
 80047bc:	2201      	movs	r2, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047c6:	fb03 f202 	mul.w	r2, r3, r2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	7a1b      	ldrb	r3, [r3, #8]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047e8:	0a52      	lsrs	r2, r2, #9
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80047fa:	e031      	b.n	8004860 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11d      	bne.n	8004840 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	3301      	adds	r3, #1
 8004820:	029a      	lsls	r2, r3, #10
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004834:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	661a      	str	r2, [r3, #96]	@ 0x60
 800483e:	e00f      	b.n	8004860 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a58      	ldr	r2, [pc, #352]	@ (80049a8 <HAL_SD_GetCardCSD+0x344>)
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e09d      	b.n	800499c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004864:	0b9b      	lsrs	r3, r3, #14
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487e:	b2da      	uxtb	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488e:	b2da      	uxtb	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	0fdb      	lsrs	r3, r3, #31
 800489a:	b2da      	uxtb	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	0f5b      	lsrs	r3, r3, #29
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	0e9b      	lsrs	r3, r3, #26
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c8:	0d9b      	lsrs	r3, r3, #22
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	0d5b      	lsrs	r3, r3, #21
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	0bdb      	lsrs	r3, r3, #15
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	0b9b      	lsrs	r3, r3, #14
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	0b5b      	lsrs	r3, r3, #13
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004946:	0b1b      	lsrs	r3, r3, #12
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	b2da      	uxtb	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	b2da      	uxtb	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498a:	b2da      	uxtb	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	004005ff 	.word	0x004005ff

080049ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b08e      	sub	sp, #56	@ 0x38
 8004a08:	af04      	add	r7, sp, #16
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2203      	movs	r2, #3
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d02e      	beq.n	8004a82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2a:	d106      	bne.n	8004a3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a38:	e029      	b.n	8004a8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a40:	d10a      	bne.n	8004a58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fb2a 	bl	800509c <SD_WideBus_Enable>
 8004a48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a56:	e01a      	b.n	8004a8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fb67 	bl	8005132 <SD_WideBus_Disable>
 8004a64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a72:	e00c      	b.n	8004a8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a80:	e005      	b.n	8004a8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004aac:	e01f      	b.n	8004aee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681d      	ldr	r5, [r3, #0]
 8004ad4:	466c      	mov	r4, sp
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f002 fbc1 	bl	8007270 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004af6:	4618      	mov	r0, r3
 8004af8:	f002 fc95 	bl	8007426 <SDMMC_CmdBlockLength>
 8004afc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0a      	ldr	r2, [pc, #40]	@ (8004b34 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3728      	adds	r7, #40	@ 0x28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bdb0      	pop	{r4, r5, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	004005ff 	.word	0x004005ff

08004b38 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa7e 	bl	800504c <SD_SendStatus>
 8004b50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	0a5b      	lsrs	r3, r3, #9
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004b6e:	693b      	ldr	r3, [r7, #16]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b94:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004b96:	bf00      	nop
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	2b82      	cmp	r3, #130	@ 0x82
 8004bb6:	d111      	bne.n	8004bdc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fcdd 	bl	800757c <SDMMC_CmdStopTransfer>
 8004bc2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fd3a 	bl	8004650 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0208 	bic.w	r2, r2, #8
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004bf4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f004 fc87 	bl	8009518 <HAL_SD_RxCpltCallback>
#endif
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc ff14 	bl	8001a50 <HAL_DMA_GetError>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d03e      	beq.n	8004cac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c34:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d002      	beq.n	8004c4a <SD_DMAError+0x36>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d12d      	bne.n	8004ca6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <SD_DMAError+0xa0>)
 8004c50:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004c60:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff62 	bl	8004b38 <HAL_SD_GetCardState>
 8004c74:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b06      	cmp	r3, #6
 8004c7a:	d002      	beq.n	8004c82 <SD_DMAError+0x6e>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d10a      	bne.n	8004c98 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f002 fc78 	bl	800757c <SDMMC_CmdStopTransfer>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	431a      	orrs	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7ff fcd2 	bl	8004650 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004cac:	bf00      	nop
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	004005ff 	.word	0x004005ff

08004cb8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ff31 	bl	8004b38 <HAL_SD_GetCardState>
 8004cd6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d002      	beq.n	8004cf2 <SD_DMATxAbort+0x3a>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10a      	bne.n	8004d08 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f002 fc40 	bl	800757c <SDMMC_CmdStopTransfer>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f004 fbed 	bl	80094f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004d16:	e002      	b.n	8004d1e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fc99 	bl	8004650 <HAL_SD_ErrorCallback>
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fefa 	bl	8004b38 <HAL_SD_GetCardState>
 8004d44:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d002      	beq.n	8004d60 <SD_DMARxAbort+0x3a>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d10a      	bne.n	8004d76 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fc09 	bl	800757c <SDMMC_CmdStopTransfer>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f004 fbb6 	bl	80094f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004d84:	e002      	b.n	8004d8c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fc62 	bl	8004650 <HAL_SD_ErrorCallback>
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d94:	b5b0      	push	{r4, r5, r7, lr}
 8004d96:	b094      	sub	sp, #80	@ 0x50
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 faba 	bl	800731e <SDIO_GetPowerState>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004db0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004db4:	e0b8      	b.n	8004f28 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d02f      	beq.n	8004e1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f002 fce4 	bl	8007790 <SDMMC_CmdSendCID>
 8004dc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <SD_InitCard+0x40>
    {
      return errorstate;
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd2:	e0a9      	b.n	8004f28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f002 fae4 	bl	80073a8 <SDIO_GetResponse>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2104      	movs	r1, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f002 fadb 	bl	80073a8 <SDIO_GetResponse>
 8004df2:	4602      	mov	r2, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2108      	movs	r1, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 fad2 	bl	80073a8 <SDIO_GetResponse>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	210c      	movs	r1, #12
 8004e10:	4618      	mov	r0, r3
 8004e12:	f002 fac9 	bl	80073a8 <SDIO_GetResponse>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d00d      	beq.n	8004e42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f107 020e 	add.w	r2, r7, #14
 8004e2e:	4611      	mov	r1, r2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f002 fcea 	bl	800780a <SDMMC_CmdSetRelAdd>
 8004e36:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <SD_InitCard+0xae>
    {
      return errorstate;
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e40:	e072      	b.n	8004f28 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d036      	beq.n	8004eb8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f002 fcb4 	bl	80077cc <SDMMC_CmdSendCSD>
 8004e64:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6e:	e05b      	b.n	8004f28 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 fa96 	bl	80073a8 <SDIO_GetResponse>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2104      	movs	r1, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f002 fa8d 	bl	80073a8 <SDIO_GetResponse>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2108      	movs	r1, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fa84 	bl	80073a8 <SDIO_GetResponse>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	210c      	movs	r1, #12
 8004eac:	4618      	mov	r0, r3
 8004eae:	f002 fa7b 	bl	80073a8 <SDIO_GetResponse>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 fa72 	bl	80073a8 <SDIO_GetResponse>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	0d1a      	lsrs	r2, r3, #20
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fbc6 	bl	8004664 <HAL_SD_GetCardCSD>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ede:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ee2:	e021      	b.n	8004f28 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6819      	ldr	r1, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	2200      	movs	r2, #0
 8004ef0:	461c      	mov	r4, r3
 8004ef2:	4615      	mov	r5, r2
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	4608      	mov	r0, r1
 8004efa:	f002 fb61 	bl	80075c0 <SDMMC_CmdSelDesel>
 8004efe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <SD_InitCard+0x176>
  {
    return errorstate;
 8004f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f08:	e00e      	b.n	8004f28 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681d      	ldr	r5, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	466c      	mov	r4, sp
 8004f12:	f103 0210 	add.w	r2, r3, #16
 8004f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f20:	4628      	mov	r0, r5
 8004f22:	f002 f9a5 	bl	8007270 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3740      	adds	r7, #64	@ 0x40
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bdb0      	pop	{r4, r5, r7, pc}

08004f30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f002 fb5c 	bl	8007606 <SDMMC_CmdGoIdleState>
 8004f4e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	e072      	b.n	8005040 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f002 fb6f 	bl	8007642 <SDMMC_CmdOperCond>
 8004f64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f002 fb45 	bl	8007606 <SDMMC_CmdGoIdleState>
 8004f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	e05b      	b.n	8005040 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d137      	bne.n	8005006 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 fb6f 	bl	8007680 <SDMMC_CmdAppCommand>
 8004fa2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02d      	beq.n	8005006 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004faa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004fae:	e047      	b.n	8005040 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 fb62 	bl	8007680 <SDMMC_CmdAppCommand>
 8004fbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e03b      	b.n	8005040 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	491e      	ldr	r1, [pc, #120]	@ (8005048 <SD_PowerON+0x118>)
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f002 fb78 	bl	80076c4 <SDMMC_CmdAppOperCommand>
 8004fd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fdc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004fe0:	e02e      	b.n	8005040 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 f9dd 	bl	80073a8 <SDIO_GetResponse>
 8004fee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	0fdb      	lsrs	r3, r3, #31
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <SD_PowerON+0xcc>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <SD_PowerON+0xce>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

    count++;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3301      	adds	r3, #1
 8005004:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800500c:	4293      	cmp	r3, r2
 800500e:	d802      	bhi.n	8005016 <SD_PowerON+0xe6>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0cc      	beq.n	8004fb0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800501c:	4293      	cmp	r3, r2
 800501e:	d902      	bls.n	8005026 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005024:	e00c      	b.n	8005040 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
 8005036:	e002      	b.n	800503e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	c1100000 	.word	0xc1100000

0800504c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d102      	bne.n	8005062 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800505c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005060:	e018      	b.n	8005094 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f002 fbec 	bl	800784c <SDMMC_CmdSendStatus>
 8005074:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <SD_SendStatus+0x34>
  {
    return errorstate;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	e009      	b.n	8005094 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f002 f98e 	bl	80073a8 <SDIO_GetResponse>
 800508c:	4602      	mov	r2, r0
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 f978 	bl	80073a8 <SDIO_GetResponse>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050c2:	d102      	bne.n	80050ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050c8:	e02f      	b.n	800512a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f879 	bl	80051c8 <SD_FindSCR>
 80050d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	e023      	b.n	800512a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f002 fac1 	bl	8007680 <SDMMC_CmdAppCommand>
 80050fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e00f      	b.n	800512a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2102      	movs	r1, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f002 fafa 	bl	800770a <SDMMC_CmdBusWidth>
 8005116:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	e003      	b.n	800512a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	e001      	b.n	800512a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005126:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f002 f92d 	bl	80073a8 <SDIO_GetResponse>
 800514e:	4603      	mov	r3, r0
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005158:	d102      	bne.n	8005160 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800515a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800515e:	e02f      	b.n	80051c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f82e 	bl	80051c8 <SD_FindSCR>
 800516c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	e023      	b.n	80051c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01c      	beq.n	80051bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f002 fa76 	bl	8007680 <SDMMC_CmdAppCommand>
 8005194:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	e00f      	b.n	80051c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f002 faaf 	bl	800770a <SDMMC_CmdBusWidth>
 80051ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	e003      	b.n	80051c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e001      	b.n	80051c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b08f      	sub	sp, #60	@ 0x3c
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051d2:	f7fb ffd9 	bl	8001188 <HAL_GetTick>
 80051d6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80051dc:	2300      	movs	r3, #0
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2108      	movs	r1, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f002 f919 	bl	8007426 <SDMMC_CmdBlockLength>
 80051f4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <SD_FindSCR+0x38>
  {
    return errorstate;
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	e0b9      	b.n	8005374 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f002 fa37 	bl	8007680 <SDMMC_CmdAppCommand>
 8005212:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <SD_FindSCR+0x56>
  {
    return errorstate;
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	e0aa      	b.n	8005374 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005224:	2308      	movs	r3, #8
 8005226:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005228:	2330      	movs	r3, #48	@ 0x30
 800522a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800522c:	2302      	movs	r3, #2
 800522e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005230:	2300      	movs	r3, #0
 8005232:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005234:	2301      	movs	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f107 0210 	add.w	r2, r7, #16
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f002 f8c3 	bl	80073ce <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fa7e 	bl	800774e <SDMMC_CmdSendSCR>
 8005252:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02a      	beq.n	80052b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	e08a      	b.n	8005374 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	f107 0208 	add.w	r2, r7, #8
 8005278:	18d4      	adds	r4, r2, r3
 800527a:	4608      	mov	r0, r1
 800527c:	f002 f823 	bl	80072c6 <SDIO_ReadFIFO>
 8005280:	4603      	mov	r3, r0
 8005282:	6023      	str	r3, [r4, #0]
      index++;
 8005284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005286:	3301      	adds	r3, #1
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
 800528a:	e006      	b.n	800529a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d012      	beq.n	80052c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800529a:	f7fb ff75 	bl	8001188 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d102      	bne.n	80052b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80052aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052ae:	e061      	b.n	8005374 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0cf      	beq.n	800525e <SD_FindSCR+0x96>
 80052be:	e000      	b.n	80052c2 <SD_FindSCR+0xfa>
      break;
 80052c0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <SD_FindSCR+0x116>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2208      	movs	r2, #8
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80052e6:	2308      	movs	r3, #8
 80052e8:	e044      	b.n	8005374 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2202      	movs	r2, #2
 80052fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005300:	2302      	movs	r3, #2
 8005302:	e037      	b.n	8005374 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2220      	movs	r2, #32
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800531a:	2320      	movs	r3, #32
 800531c:	e02a      	b.n	8005374 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005326:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	061a      	lsls	r2, r3, #24
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005334:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800533e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	0e1b      	lsrs	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	601a      	str	r2, [r3, #0]
    scr++;
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	3304      	adds	r3, #4
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	061a      	lsls	r2, r3, #24
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800535c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005366:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0e1b      	lsrs	r3, r3, #24
 800536c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	373c      	adds	r7, #60	@ 0x3c
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}

0800537c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d03f      	beq.n	8005416 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e033      	b.n	8005404 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 ff90 	bl	80072c6 <SDIO_ReadFIFO>
 80053a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	0e1b      	lsrs	r3, r3, #24
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b07      	cmp	r3, #7
 8005408:	d9c8      	bls.n	800539c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d043      	beq.n	80054c0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e037      	b.n	80054ae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3b01      	subs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4313      	orrs	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	3b01      	subs	r3, #1
 8005466:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3b01      	subs	r3, #1
 800547e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	061a      	lsls	r2, r3, #24
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3b01      	subs	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f107 0208 	add.w	r2, r7, #8
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 ff1c 	bl	80072e0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d9c4      	bls.n	800543e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e07b      	b.n	80055d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d108      	bne.n	80054f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ea:	d009      	beq.n	8005500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	61da      	str	r2, [r3, #28]
 80054f2:	e005      	b.n	8005500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fbf0 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	f003 0104 	and.w	r1, r3, #4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	f003 0210 	and.w	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e041      	b.n	8005670 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fb fbd5 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 fb33 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e041      	b.n	800570e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f839 	bl	8005716 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fae4 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01b      	beq.n	800578e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0202 	mvn.w	r2, #2
 800575e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa66 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 800577a:	e005      	b.n	8005788 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa58 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa69 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01b      	beq.n	80057da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0204 	mvn.w	r2, #4
 80057aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa40 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 80057c6:	e005      	b.n	80057d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa32 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa43 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d020      	beq.n	8005826 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01b      	beq.n	8005826 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0208 	mvn.w	r2, #8
 80057f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2204      	movs	r2, #4
 80057fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa1a 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 8005812:	e005      	b.n	8005820 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa0c 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa1d 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d01b      	beq.n	8005872 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0210 	mvn.w	r2, #16
 8005842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2208      	movs	r2, #8
 8005848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f9f4 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 800585e:	e005      	b.n	800586c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9e6 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9f7 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0201 	mvn.w	r2, #1
 800588e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f9c4 	bl	8005c1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fdb3 	bl	8006420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9c8 	bl	8005c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0220 	mvn.w	r2, #32
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fd85 	bl	800640c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005926:	2302      	movs	r3, #2
 8005928:	e0ae      	b.n	8005a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b0c      	cmp	r3, #12
 8005936:	f200 809f 	bhi.w	8005a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800593a:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005975 	.word	0x08005975
 8005944:	08005a79 	.word	0x08005a79
 8005948:	08005a79 	.word	0x08005a79
 800594c:	08005a79 	.word	0x08005a79
 8005950:	080059b5 	.word	0x080059b5
 8005954:	08005a79 	.word	0x08005a79
 8005958:	08005a79 	.word	0x08005a79
 800595c:	08005a79 	.word	0x08005a79
 8005960:	080059f7 	.word	0x080059f7
 8005964:	08005a79 	.word	0x08005a79
 8005968:	08005a79 	.word	0x08005a79
 800596c:	08005a79 	.word	0x08005a79
 8005970:	08005a37 	.word	0x08005a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fa2e 	bl	8005ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0208 	orr.w	r2, r2, #8
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0204 	bic.w	r2, r2, #4
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	619a      	str	r2, [r3, #24]
      break;
 80059b2:	e064      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fa7e 	bl	8005ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	619a      	str	r2, [r3, #24]
      break;
 80059f4:	e043      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fad3 	bl	8005fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0208 	orr.w	r2, r2, #8
 8005a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0204 	bic.w	r2, r2, #4
 8005a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	61da      	str	r2, [r3, #28]
      break;
 8005a34:	e023      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fb27 	bl	8006090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69d9      	ldr	r1, [r3, #28]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	021a      	lsls	r2, r3, #8
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	61da      	str	r2, [r3, #28]
      break;
 8005a76:	e002      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_ConfigClockSource+0x1c>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0b4      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x186>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae4:	d03e      	beq.n	8005b64 <HAL_TIM_ConfigClockSource+0xd4>
 8005ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aea:	f200 8087 	bhi.w	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af2:	f000 8086 	beq.w	8005c02 <HAL_TIM_ConfigClockSource+0x172>
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afa:	d87f      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b70      	cmp	r3, #112	@ 0x70
 8005afe:	d01a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0xa6>
 8005b00:	2b70      	cmp	r3, #112	@ 0x70
 8005b02:	d87b      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b60      	cmp	r3, #96	@ 0x60
 8005b06:	d050      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0x11a>
 8005b08:	2b60      	cmp	r3, #96	@ 0x60
 8005b0a:	d877      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b50      	cmp	r3, #80	@ 0x50
 8005b0e:	d03c      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0xfa>
 8005b10:	2b50      	cmp	r3, #80	@ 0x50
 8005b12:	d873      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d058      	beq.n	8005bca <HAL_TIM_ConfigClockSource+0x13a>
 8005b18:	2b40      	cmp	r3, #64	@ 0x40
 8005b1a:	d86f      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b1c:	2b30      	cmp	r3, #48	@ 0x30
 8005b1e:	d064      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x15a>
 8005b20:	2b30      	cmp	r3, #48	@ 0x30
 8005b22:	d86b      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d060      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x15a>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d867      	bhi.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d05c      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x15a>
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d05a      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x15a>
 8005b34:	e062      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b46:	f000 fb73 	bl	8006230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	609a      	str	r2, [r3, #8]
      break;
 8005b62:	e04f      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	f000 fb5c 	bl	8006230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b86:	609a      	str	r2, [r3, #8]
      break;
 8005b88:	e03c      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	461a      	mov	r2, r3
 8005b98:	f000 fad0 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2150      	movs	r1, #80	@ 0x50
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fb29 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005ba8:	e02c      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f000 faef 	bl	800619a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2160      	movs	r1, #96	@ 0x60
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fb19 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005bc8:	e01c      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f000 fab0 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2140      	movs	r1, #64	@ 0x40
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fb09 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005be8:	e00c      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f000 fb00 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005bfa:	e003      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005c00:	e000      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a46      	ldr	r2, [pc, #280]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a43      	ldr	r2, [pc, #268]	@ (8005db4 <TIM_Base_SetConfig+0x130>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a42      	ldr	r2, [pc, #264]	@ (8005db8 <TIM_Base_SetConfig+0x134>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a41      	ldr	r2, [pc, #260]	@ (8005dbc <TIM_Base_SetConfig+0x138>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a40      	ldr	r2, [pc, #256]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a35      	ldr	r2, [pc, #212]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d027      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a32      	ldr	r2, [pc, #200]	@ (8005db4 <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d023      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	@ (8005db8 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	@ (8005dbc <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc4 <TIM_Base_SetConfig+0x140>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc8 <TIM_Base_SetConfig+0x144>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2c      	ldr	r2, [pc, #176]	@ (8005dcc <TIM_Base_SetConfig+0x148>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd0 <TIM_Base_SetConfig+0x14c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd4 <TIM_Base_SetConfig+0x150>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <TIM_Base_SetConfig+0x154>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a10      	ldr	r2, [pc, #64]	@ (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d105      	bne.n	8005da2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]
  }
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800
 8005dd0:	40001800 	.word	0x40001800
 8005dd4:	40001c00 	.word	0x40001c00
 8005dd8:	40002000 	.word	0x40002000

08005ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f023 0201 	bic.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0302 	bic.w	r3, r3, #2
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a20      	ldr	r2, [pc, #128]	@ (8005eb4 <TIM_OC1_SetConfig+0xd8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC1_SetConfig+0x64>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb8 <TIM_OC1_SetConfig+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10c      	bne.n	8005e5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0308 	bic.w	r3, r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0304 	bic.w	r3, r3, #4
 8005e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <TIM_OC1_SetConfig+0xd8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_OC1_SetConfig+0x8e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a14      	ldr	r2, [pc, #80]	@ (8005eb8 <TIM_OC1_SetConfig+0xdc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d111      	bne.n	8005e8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	40010400 	.word	0x40010400

08005ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0210 	bic.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0320 	bic.w	r3, r3, #32
 8005f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a22      	ldr	r2, [pc, #136]	@ (8005fa0 <TIM_OC2_SetConfig+0xe4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC2_SetConfig+0x68>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a21      	ldr	r2, [pc, #132]	@ (8005fa4 <TIM_OC2_SetConfig+0xe8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10d      	bne.n	8005f40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a17      	ldr	r2, [pc, #92]	@ (8005fa0 <TIM_OC2_SetConfig+0xe4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC2_SetConfig+0x94>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a16      	ldr	r2, [pc, #88]	@ (8005fa4 <TIM_OC2_SetConfig+0xe8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d113      	bne.n	8005f78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010400 	.word	0x40010400

08005fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a21      	ldr	r2, [pc, #132]	@ (8006088 <TIM_OC3_SetConfig+0xe0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d003      	beq.n	800600e <TIM_OC3_SetConfig+0x66>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a20      	ldr	r2, [pc, #128]	@ (800608c <TIM_OC3_SetConfig+0xe4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d10d      	bne.n	800602a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a16      	ldr	r2, [pc, #88]	@ (8006088 <TIM_OC3_SetConfig+0xe0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC3_SetConfig+0x92>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a15      	ldr	r2, [pc, #84]	@ (800608c <TIM_OC3_SetConfig+0xe4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40010000 	.word	0x40010000
 800608c:	40010400 	.word	0x40010400

08006090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a12      	ldr	r2, [pc, #72]	@ (8006134 <TIM_OC4_SetConfig+0xa4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_OC4_SetConfig+0x68>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a11      	ldr	r2, [pc, #68]	@ (8006138 <TIM_OC4_SetConfig+0xa8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d109      	bne.n	800610c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40010400 	.word	0x40010400

0800613c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f023 0210 	bic.w	r2, r3, #16
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	f043 0307 	orr.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006284:	2302      	movs	r3, #2
 8006286:	e05a      	b.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a21      	ldr	r2, [pc, #132]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d4:	d01d      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1d      	ldr	r2, [pc, #116]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a18      	ldr	r2, [pc, #96]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10c      	bne.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	4313      	orrs	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40010400 	.word	0x40010400
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006380:	2302      	movs	r3, #2
 8006382:	e03d      	b.n	8006400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e042      	b.n	80064cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fa fd26 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	@ 0x24
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc85 	bl	8006d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800648c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800649c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b0ba      	sub	sp, #232	@ 0xe8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10f      	bne.n	800653a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_UART_IRQHandler+0x66>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb69 	bl	8006c0a <UART_Receive_IT>
      return;
 8006538:	e25b      	b.n	80069f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80de 	beq.w	8006700 <HAL_UART_IRQHandler+0x22c>
 8006544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006554:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80d1 	beq.w	8006700 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_UART_IRQHandler+0xae>
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657a:	f043 0201 	orr.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_UART_IRQHandler+0xd2>
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f043 0202 	orr.w	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <HAL_UART_IRQHandler+0xf6>
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c2:	f043 0204 	orr.w	r2, r3, #4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <HAL_UART_IRQHandler+0x126>
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f043 0208 	orr.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 81f2 	beq.w	80069e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_UART_IRQHandler+0x14e>
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 faf4 	bl	8006c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662c:	2b40      	cmp	r3, #64	@ 0x40
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_UART_IRQHandler+0x17a>
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d04f      	beq.n	80066ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9fc 	bl	8006a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665e:	2b40      	cmp	r3, #64	@ 0x40
 8006660:	d141      	bne.n	80066e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006678:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800667c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800668e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006692:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800669a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1d9      	bne.n	8006662 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ba:	4a7e      	ldr	r2, [pc, #504]	@ (80068b4 <HAL_UART_IRQHandler+0x3e0>)
 80066bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fb f818 	bl	80016f8 <HAL_DMA_Abort_IT>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066dc:	e00e      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f99e 	bl	8006a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	e00a      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f99a 	bl	8006a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e006      	b.n	80066fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f996 	bl	8006a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80066fa:	e175      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	bf00      	nop
    return;
 80066fe:	e173      	b.n	80069e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 814f 	bne.w	80069a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8148 	beq.w	80069a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8141 	beq.w	80069a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006746:	2b40      	cmp	r3, #64	@ 0x40
 8006748:	f040 80b6 	bne.w	80068b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8145 	beq.w	80069ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800676a:	429a      	cmp	r2, r3
 800676c:	f080 813e 	bcs.w	80069ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006776:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006782:	f000 8088 	beq.w	8006896 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1d9      	bne.n	8006786 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e1      	bne.n	80067d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800681e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3314      	adds	r3, #20
 800682e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006832:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006834:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006838:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006866:	f023 0310 	bic.w	r3, r3, #16
 800686a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006878:	65ba      	str	r2, [r7, #88]	@ 0x58
 800687a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800687e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e3      	bne.n	8006854 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	4618      	mov	r0, r3
 8006892:	f7fa fec1 	bl	8001618 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2202      	movs	r2, #2
 800689a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f8c1 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b2:	e09b      	b.n	80069ec <HAL_UART_IRQHandler+0x518>
 80068b4:	08006b13 	.word	0x08006b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 808e 	beq.w	80069f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8089 	beq.w	80069f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006902:	647a      	str	r2, [r7, #68]	@ 0x44
 8006904:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3314      	adds	r3, #20
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	623b      	str	r3, [r7, #32]
   return(result);
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800693a:	633a      	str	r2, [r7, #48]	@ 0x30
 800693c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e3      	bne.n	8006916 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	60fb      	str	r3, [r7, #12]
   return(result);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0310 	bic.w	r3, r3, #16
 8006972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	69b9      	ldr	r1, [r7, #24]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	617b      	str	r3, [r7, #20]
   return(result);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e3      	bne.n	800695c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800699a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f847 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a6:	e023      	b.n	80069f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_UART_IRQHandler+0x4f4>
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f8ba 	bl	8006b3a <UART_Transmit_IT>
    return;
 80069c6:	e014      	b.n	80069f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <HAL_UART_IRQHandler+0x51e>
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8fa 	bl	8006bda <UART_EndTransmit_IT>
    return;
 80069e6:	e004      	b.n	80069f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069f0:	bf00      	nop
  }
}
 80069f2:	37e8      	adds	r7, #232	@ 0xe8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b095      	sub	sp, #84	@ 0x54
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a74:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d119      	bne.n	8006af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae4:	61ba      	str	r2, [r7, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	613b      	str	r3, [r7, #16]
   return(result);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b06:	bf00      	nop
 8006b08:	3754      	adds	r7, #84	@ 0x54
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff ff77 	bl	8006a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b21      	cmp	r3, #33	@ 0x21
 8006b4c:	d13e      	bne.n	8006bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b56:	d114      	bne.n	8006b82 <UART_Transmit_IT+0x48>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d110      	bne.n	8006b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	621a      	str	r2, [r3, #32]
 8006b80:	e008      	b.n	8006b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6211      	str	r1, [r2, #32]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fefc 	bl	80069f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b08c      	sub	sp, #48	@ 0x30
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b22      	cmp	r3, #34	@ 0x22
 8006c1c:	f040 80ae 	bne.w	8006d7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c28:	d117      	bne.n	8006c5a <UART_Receive_IT+0x50>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d113      	bne.n	8006c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c58:	e026      	b.n	8006ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6c:	d007      	beq.n	8006c7e <UART_Receive_IT+0x74>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <UART_Receive_IT+0x82>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e008      	b.n	8006c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d15d      	bne.n	8006d78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0220 	bic.w	r2, r2, #32
 8006cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d135      	bne.n	8006d6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	613b      	str	r3, [r7, #16]
   return(result);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d28:	623a      	str	r2, [r7, #32]
 8006d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	69f9      	ldr	r1, [r7, #28]
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d10a      	bne.n	8006d60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fe64 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
 8006d6c:	e002      	b.n	8006d74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fe4c 	bl	8006a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e002      	b.n	8006d7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	@ 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d8c:	b0c0      	sub	sp, #256	@ 0x100
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	ea40 0301 	orr.w	r3, r0, r1
 8006db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006de0:	f021 010c 	bic.w	r1, r1, #12
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dee:	430b      	orrs	r3, r1
 8006df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e02:	6999      	ldr	r1, [r3, #24]
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	ea40 0301 	orr.w	r3, r0, r1
 8006e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b8f      	ldr	r3, [pc, #572]	@ (8007054 <UART_SetConfig+0x2cc>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d005      	beq.n	8006e28 <UART_SetConfig+0xa0>
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <UART_SetConfig+0x2d0>)
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d104      	bne.n	8006e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fd f800 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8006e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e30:	e003      	b.n	8006e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e32:	f7fc ffe7 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 8006e36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e44:	f040 810c 	bne.w	8007060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	1891      	adds	r1, r2, r2
 8006e60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e62:	415b      	adcs	r3, r3
 8006e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	eb12 0801 	adds.w	r8, r2, r1
 8006e70:	4629      	mov	r1, r5
 8006e72:	eb43 0901 	adc.w	r9, r3, r1
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e8a:	4690      	mov	r8, r2
 8006e8c:	4699      	mov	r9, r3
 8006e8e:	4623      	mov	r3, r4
 8006e90:	eb18 0303 	adds.w	r3, r8, r3
 8006e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e98:	462b      	mov	r3, r5
 8006e9a:	eb49 0303 	adc.w	r3, r9, r3
 8006e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	18db      	adds	r3, r3, r3
 8006eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	eb42 0303 	adc.w	r3, r2, r3
 8006ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ecc:	f7f9 f98e 	bl	80001ec <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4b61      	ldr	r3, [pc, #388]	@ (800705c <UART_SetConfig+0x2d4>)
 8006ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	011c      	lsls	r4, r3, #4
 8006ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	1891      	adds	r1, r2, r2
 8006ef6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef8:	415b      	adcs	r3, r3
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f00:	4641      	mov	r1, r8
 8006f02:	eb12 0a01 	adds.w	sl, r2, r1
 8006f06:	4649      	mov	r1, r9
 8006f08:	eb43 0b01 	adc.w	fp, r3, r1
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f20:	4692      	mov	sl, r2
 8006f22:	469b      	mov	fp, r3
 8006f24:	4643      	mov	r3, r8
 8006f26:	eb1a 0303 	adds.w	r3, sl, r3
 8006f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	eb4b 0303 	adc.w	r3, fp, r3
 8006f34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	18db      	adds	r3, r3, r3
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f52:	4613      	mov	r3, r2
 8006f54:	eb42 0303 	adc.w	r3, r2, r3
 8006f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f62:	f7f9 f943 	bl	80001ec <__aeabi_uldivmod>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800705c <UART_SetConfig+0x2d4>)
 8006f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	2264      	movs	r2, #100	@ 0x64
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	1acb      	subs	r3, r1, r3
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f82:	4b36      	ldr	r3, [pc, #216]	@ (800705c <UART_SetConfig+0x2d4>)
 8006f84:	fba3 2302 	umull	r2, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f90:	441c      	add	r4, r3
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	1891      	adds	r1, r2, r2
 8006faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fac:	415b      	adcs	r3, r3
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	1851      	adds	r1, r2, r1
 8006fb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fba:	4649      	mov	r1, r9
 8006fbc:	414b      	adcs	r3, r1
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fcc:	4659      	mov	r1, fp
 8006fce:	00cb      	lsls	r3, r1, #3
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd6:	4651      	mov	r1, sl
 8006fd8:	00ca      	lsls	r2, r1, #3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe8:	464b      	mov	r3, r9
 8006fea:	460a      	mov	r2, r1
 8006fec:	eb42 0303 	adc.w	r3, r2, r3
 8006ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007000:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007008:	460b      	mov	r3, r1
 800700a:	18db      	adds	r3, r3, r3
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700e:	4613      	mov	r3, r2
 8007010:	eb42 0303 	adc.w	r3, r2, r3
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800701a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800701e:	f7f9 f8e5 	bl	80001ec <__aeabi_uldivmod>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <UART_SetConfig+0x2d4>)
 8007028:	fba3 1302 	umull	r1, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	2164      	movs	r1, #100	@ 0x64
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	3332      	adds	r3, #50	@ 0x32
 800703a:	4a08      	ldr	r2, [pc, #32]	@ (800705c <UART_SetConfig+0x2d4>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f003 0207 	and.w	r2, r3, #7
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4422      	add	r2, r4
 800704e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007050:	e106      	b.n	8007260 <UART_SetConfig+0x4d8>
 8007052:	bf00      	nop
 8007054:	40011000 	.word	0x40011000
 8007058:	40011400 	.word	0x40011400
 800705c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007064:	2200      	movs	r2, #0
 8007066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800706a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800706e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007072:	4642      	mov	r2, r8
 8007074:	464b      	mov	r3, r9
 8007076:	1891      	adds	r1, r2, r2
 8007078:	6239      	str	r1, [r7, #32]
 800707a:	415b      	adcs	r3, r3
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
 800707e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007082:	4641      	mov	r1, r8
 8007084:	1854      	adds	r4, r2, r1
 8007086:	4649      	mov	r1, r9
 8007088:	eb43 0501 	adc.w	r5, r3, r1
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	00eb      	lsls	r3, r5, #3
 8007096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800709a:	00e2      	lsls	r2, r4, #3
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	4643      	mov	r3, r8
 80070a2:	18e3      	adds	r3, r4, r3
 80070a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a8:	464b      	mov	r3, r9
 80070aa:	eb45 0303 	adc.w	r3, r5, r3
 80070ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ce:	4629      	mov	r1, r5
 80070d0:	008b      	lsls	r3, r1, #2
 80070d2:	4621      	mov	r1, r4
 80070d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d8:	4621      	mov	r1, r4
 80070da:	008a      	lsls	r2, r1, #2
 80070dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070e0:	f7f9 f884 	bl	80001ec <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b60      	ldr	r3, [pc, #384]	@ (800726c <UART_SetConfig+0x4e4>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011c      	lsls	r4, r3, #4
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007104:	4642      	mov	r2, r8
 8007106:	464b      	mov	r3, r9
 8007108:	1891      	adds	r1, r2, r2
 800710a:	61b9      	str	r1, [r7, #24]
 800710c:	415b      	adcs	r3, r3
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007114:	4641      	mov	r1, r8
 8007116:	1851      	adds	r1, r2, r1
 8007118:	6139      	str	r1, [r7, #16]
 800711a:	4649      	mov	r1, r9
 800711c:	414b      	adcs	r3, r1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800712c:	4659      	mov	r1, fp
 800712e:	00cb      	lsls	r3, r1, #3
 8007130:	4651      	mov	r1, sl
 8007132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007136:	4651      	mov	r1, sl
 8007138:	00ca      	lsls	r2, r1, #3
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	4603      	mov	r3, r0
 8007140:	4642      	mov	r2, r8
 8007142:	189b      	adds	r3, r3, r2
 8007144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007148:	464b      	mov	r3, r9
 800714a:	460a      	mov	r2, r1
 800714c:	eb42 0303 	adc.w	r3, r2, r3
 8007150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800715e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800716c:	4649      	mov	r1, r9
 800716e:	008b      	lsls	r3, r1, #2
 8007170:	4641      	mov	r1, r8
 8007172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007176:	4641      	mov	r1, r8
 8007178:	008a      	lsls	r2, r1, #2
 800717a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800717e:	f7f9 f835 	bl	80001ec <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4611      	mov	r1, r2
 8007188:	4b38      	ldr	r3, [pc, #224]	@ (800726c <UART_SetConfig+0x4e4>)
 800718a:	fba3 2301 	umull	r2, r3, r3, r1
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2264      	movs	r2, #100	@ 0x64
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	1acb      	subs	r3, r1, r3
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	3332      	adds	r3, #50	@ 0x32
 800719c:	4a33      	ldr	r2, [pc, #204]	@ (800726c <UART_SetConfig+0x4e4>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a8:	441c      	add	r4, r3
 80071aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ae:	2200      	movs	r2, #0
 80071b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80071b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80071b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	415b      	adcs	r3, r3
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071fa:	464b      	mov	r3, r9
 80071fc:	460a      	mov	r2, r1
 80071fe:	eb42 0303 	adc.w	r3, r2, r3
 8007202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	663b      	str	r3, [r7, #96]	@ 0x60
 800720e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800721c:	4649      	mov	r1, r9
 800721e:	008b      	lsls	r3, r1, #2
 8007220:	4641      	mov	r1, r8
 8007222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007226:	4641      	mov	r1, r8
 8007228:	008a      	lsls	r2, r1, #2
 800722a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800722e:	f7f8 ffdd 	bl	80001ec <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <UART_SetConfig+0x4e4>)
 8007238:	fba3 1302 	umull	r1, r3, r3, r2
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	2164      	movs	r1, #100	@ 0x64
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	3332      	adds	r3, #50	@ 0x32
 800724a:	4a08      	ldr	r2, [pc, #32]	@ (800726c <UART_SetConfig+0x4e4>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4422      	add	r2, r4
 800725e:	609a      	str	r2, [r3, #8]
}
 8007260:	bf00      	nop
 8007262:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726c:	51eb851f 	.word	0x51eb851f

08007270 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007270:	b084      	sub	sp, #16
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	f107 001c 	add.w	r0, r7, #28
 800727e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007286:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007288:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800728a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800728e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007292:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007296:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800729a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80072aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	b004      	add	sp, #16
 80072c4:	4770      	bx	lr

080072c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2203      	movs	r2, #3
 800730e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0303 	and.w	r3, r3, #3
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007358:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800735e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007364:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007374:	f023 030f 	bic.w	r3, r3, #15
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	b2db      	uxtb	r3, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3314      	adds	r3, #20
 80073b6:	461a      	mov	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4413      	add	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
}  
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073f4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80073fa:	431a      	orrs	r2, r3
                       Data->DPSM);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007400:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007418:	2300      	movs	r3, #0

}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b088      	sub	sp, #32
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007434:	2310      	movs	r3, #16
 8007436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007438:	2340      	movs	r3, #64	@ 0x40
 800743a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007444:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff74 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007456:	2110      	movs	r1, #16
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa19 	bl	8007890 <SDMMC_GetCmdResp1>
 800745e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007460:	69fb      	ldr	r3, [r7, #28]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007478:	2311      	movs	r3, #17
 800747a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800747c:	2340      	movs	r3, #64	@ 0x40
 800747e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007488:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800748a:	f107 0308 	add.w	r3, r7, #8
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff52 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749a:	2111      	movs	r1, #17
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f9f7 	bl	8007890 <SDMMC_GetCmdResp1>
 80074a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a4:	69fb      	ldr	r3, [r7, #28]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b088      	sub	sp, #32
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80074bc:	2312      	movs	r3, #18
 80074be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074c0:	2340      	movs	r3, #64	@ 0x40
 80074c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff ff30 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80074da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074de:	2112      	movs	r1, #18
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f9d5 	bl	8007890 <SDMMC_GetCmdResp1>
 80074e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074e8:	69fb      	ldr	r3, [r7, #28]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b088      	sub	sp, #32
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007500:	2318      	movs	r3, #24
 8007502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007504:	2340      	movs	r3, #64	@ 0x40
 8007506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800750c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007510:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ff0e 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800751e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007522:	2118      	movs	r1, #24
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9b3 	bl	8007890 <SDMMC_GetCmdResp1>
 800752a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800752c:	69fb      	ldr	r3, [r7, #28]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3720      	adds	r7, #32
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b088      	sub	sp, #32
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007544:	2319      	movs	r3, #25
 8007546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007548:	2340      	movs	r3, #64	@ 0x40
 800754a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007554:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007556:	f107 0308 	add.w	r3, r7, #8
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff feec 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007566:	2119      	movs	r1, #25
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f991 	bl	8007890 <SDMMC_GetCmdResp1>
 800756e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007570:	69fb      	ldr	r3, [r7, #28]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007588:	230c      	movs	r3, #12
 800758a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800758c:	2340      	movs	r3, #64	@ 0x40
 800758e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007598:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff feca 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80075a6:	4a05      	ldr	r2, [pc, #20]	@ (80075bc <SDMMC_CmdStopTransfer+0x40>)
 80075a8:	210c      	movs	r1, #12
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f970 	bl	8007890 <SDMMC_GetCmdResp1>
 80075b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b2:	69fb      	ldr	r3, [r7, #28]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	05f5e100 	.word	0x05f5e100

080075c0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	@ 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80075d0:	2307      	movs	r3, #7
 80075d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075d4:	2340      	movs	r3, #64	@ 0x40
 80075d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075e0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075e2:	f107 0310 	add.w	r3, r7, #16
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff fea6 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80075ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075f2:	2107      	movs	r1, #7
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f94b 	bl	8007890 <SDMMC_GetCmdResp1>
 80075fa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3728      	adds	r7, #40	@ 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800761e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fe85 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb65 	bl	8007d00 <SDMMC_GetCmdError>
 8007636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007638:	69fb      	ldr	r3, [r7, #28]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b088      	sub	sp, #32
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800764a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800764e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007650:	2308      	movs	r3, #8
 8007652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007654:	2340      	movs	r3, #64	@ 0x40
 8007656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800765c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007660:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fe66 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 faf8 	bl	8007c64 <SDMMC_GetCmdResp7>
 8007674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007676:	69fb      	ldr	r3, [r7, #28]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800768e:	2337      	movs	r3, #55	@ 0x37
 8007690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007692:	2340      	movs	r3, #64	@ 0x40
 8007694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800769a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800769e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fe47 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80076ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b0:	2137      	movs	r1, #55	@ 0x37
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f8ec 	bl	8007890 <SDMMC_GetCmdResp1>
 80076b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ba:	69fb      	ldr	r3, [r7, #28]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80076da:	2329      	movs	r3, #41	@ 0x29
 80076dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076de:	2340      	movs	r3, #64	@ 0x40
 80076e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076ec:	f107 0308 	add.w	r3, r7, #8
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fe21 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f9ff 	bl	8007afc <SDMMC_GetCmdResp3>
 80076fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007700:	69fb      	ldr	r3, [r7, #28]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b088      	sub	sp, #32
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007718:	2306      	movs	r3, #6
 800771a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800771c:	2340      	movs	r3, #64	@ 0x40
 800771e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800772a:	f107 0308 	add.w	r3, r7, #8
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff fe02 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773a:	2106      	movs	r1, #6
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f8a7 	bl	8007890 <SDMMC_GetCmdResp1>
 8007742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007744:	69fb      	ldr	r3, [r7, #28]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b088      	sub	sp, #32
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800775a:	2333      	movs	r3, #51	@ 0x33
 800775c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800775e:	2340      	movs	r3, #64	@ 0x40
 8007760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800776a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800776c:	f107 0308 	add.w	r3, r7, #8
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fde1 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800777c:	2133      	movs	r1, #51	@ 0x33
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f886 	bl	8007890 <SDMMC_GetCmdResp1>
 8007784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007786:	69fb      	ldr	r3, [r7, #28]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800779c:	2302      	movs	r3, #2
 800779e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80077a0:	23c0      	movs	r3, #192	@ 0xc0
 80077a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fdc0 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f956 	bl	8007a6c <SDMMC_GetCmdResp2>
 80077c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c2:	69fb      	ldr	r3, [r7, #28]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80077da:	2309      	movs	r3, #9
 80077dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80077de:	23c0      	movs	r3, #192	@ 0xc0
 80077e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fda1 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f937 	bl	8007a6c <SDMMC_GetCmdResp2>
 80077fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007800:	69fb      	ldr	r3, [r7, #28]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b088      	sub	sp, #32
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007818:	2303      	movs	r3, #3
 800781a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800781c:	2340      	movs	r3, #64	@ 0x40
 800781e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fd82 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	2103      	movs	r1, #3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f99c 	bl	8007b78 <SDMMC_GetCmdResp6>
 8007840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007842:	69fb      	ldr	r3, [r7, #28]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800785a:	230d      	movs	r3, #13
 800785c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800785e:	2340      	movs	r3, #64	@ 0x40
 8007860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800786a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fd61 	bl	800733a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787c:	210d      	movs	r1, #13
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f806 	bl	8007890 <SDMMC_GetCmdResp1>
 8007884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007886:	69fb      	ldr	r3, [r7, #28]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3720      	adds	r7, #32
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	460b      	mov	r3, r1
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800789e:	4b70      	ldr	r3, [pc, #448]	@ (8007a60 <SDMMC_GetCmdResp1+0x1d0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a70      	ldr	r2, [pc, #448]	@ (8007a64 <SDMMC_GetCmdResp1+0x1d4>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	0a5a      	lsrs	r2, r3, #9
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	61fa      	str	r2, [r7, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078c0:	e0c9      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0ef      	beq.n	80078b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ea      	bne.n	80078b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2204      	movs	r2, #4
 80078ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078ee:	2304      	movs	r3, #4
 80078f0:	e0b1      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007904:	2301      	movs	r3, #1
 8007906:	e0a6      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	22c5      	movs	r2, #197	@ 0xc5
 800790c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fd3d 	bl	800738e <SDIO_GetCommandResponse>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	4293      	cmp	r3, r2
 800791c:	d001      	beq.n	8007922 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800791e:	2301      	movs	r3, #1
 8007920:	e099      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fd3f 	bl	80073a8 <SDIO_GetResponse>
 800792a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a68 <SDMMC_GetCmdResp1+0x1d8>)
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007936:	2300      	movs	r3, #0
 8007938:	e08d      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	da02      	bge.n	8007946 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007944:	e087      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	e080      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800795e:	2380      	movs	r3, #128	@ 0x80
 8007960:	e079      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800796c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007970:	e071      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800797c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007980:	e069      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800798c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007990:	e061      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800799c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079a0:	e059      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079b0:	e051      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80079c0:	e049      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80079d0:	e041      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80079dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079e0:	e039      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80079f0:	e031      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007a00:	e029      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a10:	e021      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007a20:	e019      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007a30:	e011      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007a3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007a40:	e009      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a4c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007a50:	e001      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000000 	.word	0x20000000
 8007a64:	10624dd3 	.word	0x10624dd3
 8007a68:	fdffe008 	.word	0xfdffe008

08007a6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a74:	4b1f      	ldr	r3, [pc, #124]	@ (8007af4 <SDMMC_GetCmdResp2+0x88>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1f      	ldr	r2, [pc, #124]	@ (8007af8 <SDMMC_GetCmdResp2+0x8c>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	0a5b      	lsrs	r3, r3, #9
 8007a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	60fa      	str	r2, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a98:	e026      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0ef      	beq.n	8007a8a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1ea      	bne.n	8007a8a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ac6:	2304      	movs	r3, #4
 8007ac8:	e00e      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e003      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	22c5      	movs	r2, #197	@ 0xc5
 8007ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	20000000 	.word	0x20000000
 8007af8:	10624dd3 	.word	0x10624dd3

08007afc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b04:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <SDMMC_GetCmdResp3+0x74>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1a      	ldr	r2, [pc, #104]	@ (8007b74 <SDMMC_GetCmdResp3+0x78>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	0a5b      	lsrs	r3, r3, #9
 8007b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1e5a      	subs	r2, r3, #1
 8007b1e:	60fa      	str	r2, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b28:	e01b      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ef      	beq.n	8007b1a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1ea      	bne.n	8007b1a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b56:	2304      	movs	r3, #4
 8007b58:	e003      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	22c5      	movs	r2, #197	@ 0xc5
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000000 	.word	0x20000000
 8007b74:	10624dd3 	.word	0x10624dd3

08007b78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	460b      	mov	r3, r1
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b86:	4b35      	ldr	r3, [pc, #212]	@ (8007c5c <SDMMC_GetCmdResp6+0xe4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a35      	ldr	r2, [pc, #212]	@ (8007c60 <SDMMC_GetCmdResp6+0xe8>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	0a5b      	lsrs	r3, r3, #9
 8007b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	61fa      	str	r2, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ba6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007baa:	e052      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0ef      	beq.n	8007b9c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1ea      	bne.n	8007b9c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bd8:	2304      	movs	r3, #4
 8007bda:	e03a      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e02f      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fbcb 	bl	800738e <SDIO_GetCommandResponse>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d001      	beq.n	8007c06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e025      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22c5      	movs	r2, #197	@ 0xc5
 8007c0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fbca 	bl	80073a8 <SDIO_GetResponse>
 8007c14:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e011      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c3c:	e009      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c4c:	e001      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000000 	.word	0x20000000
 8007c60:	10624dd3 	.word	0x10624dd3

08007c64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c6c:	4b22      	ldr	r3, [pc, #136]	@ (8007cf8 <SDMMC_GetCmdResp7+0x94>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	@ (8007cfc <SDMMC_GetCmdResp7+0x98>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	0a5b      	lsrs	r3, r3, #9
 8007c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1e5a      	subs	r2, r3, #1
 8007c86:	60fa      	str	r2, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d102      	bne.n	8007c92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c90:	e02c      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0ef      	beq.n	8007c82 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1ea      	bne.n	8007c82 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	e014      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e009      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2240      	movs	r2, #64	@ 0x40
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
  
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20000000 	.word	0x20000000
 8007cfc:	10624dd3 	.word	0x10624dd3

08007d00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d08:	4b11      	ldr	r3, [pc, #68]	@ (8007d50 <SDMMC_GetCmdError+0x50>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a11      	ldr	r2, [pc, #68]	@ (8007d54 <SDMMC_GetCmdError+0x54>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	0a5b      	lsrs	r3, r3, #9
 8007d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1e5a      	subs	r2, r3, #1
 8007d22:	60fa      	str	r2, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d2c:	e009      	b.n	8007d42 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f1      	beq.n	8007d1e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	22c5      	movs	r2, #197	@ 0xc5
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000000 	.word	0x20000000
 8007d54:	10624dd3 	.word	0x10624dd3

08007d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 001c 	add.w	r0, r7, #28
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d123      	bne.n	8007dba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d105      	bne.n	8007dae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 fae2 	bl	8009378 <USB_CoreReset>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e01b      	b.n	8007df2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fad6 	bl	8009378 <USB_CoreReset>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007dd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007de4:	e005      	b.n	8007df2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007df2:	7fbb      	ldrb	r3, [r7, #30]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10b      	bne.n	8007e10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f043 0206 	orr.w	r2, r3, #6
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e1c:	b004      	add	sp, #16
 8007e1e:	4770      	bx	lr

08007e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d165      	bne.n	8007f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4a41      	ldr	r2, [pc, #260]	@ (8007f3c <USB_SetTurnaroundTime+0x11c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d906      	bls.n	8007e4a <USB_SetTurnaroundTime+0x2a>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4a40      	ldr	r2, [pc, #256]	@ (8007f40 <USB_SetTurnaroundTime+0x120>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d202      	bcs.n	8007e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e44:	230f      	movs	r3, #15
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e062      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f40 <USB_SetTurnaroundTime+0x120>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d306      	bcc.n	8007e60 <USB_SetTurnaroundTime+0x40>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4a3b      	ldr	r2, [pc, #236]	@ (8007f44 <USB_SetTurnaroundTime+0x124>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d202      	bcs.n	8007e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e5a:	230e      	movs	r3, #14
 8007e5c:	617b      	str	r3, [r7, #20]
 8007e5e:	e057      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a38      	ldr	r2, [pc, #224]	@ (8007f44 <USB_SetTurnaroundTime+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d306      	bcc.n	8007e76 <USB_SetTurnaroundTime+0x56>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4a37      	ldr	r2, [pc, #220]	@ (8007f48 <USB_SetTurnaroundTime+0x128>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d202      	bcs.n	8007e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e70:	230d      	movs	r3, #13
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e04c      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4a33      	ldr	r2, [pc, #204]	@ (8007f48 <USB_SetTurnaroundTime+0x128>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d306      	bcc.n	8007e8c <USB_SetTurnaroundTime+0x6c>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4a32      	ldr	r2, [pc, #200]	@ (8007f4c <USB_SetTurnaroundTime+0x12c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d802      	bhi.n	8007e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e86:	230c      	movs	r3, #12
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	e041      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8007f4c <USB_SetTurnaroundTime+0x12c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d906      	bls.n	8007ea2 <USB_SetTurnaroundTime+0x82>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4a2e      	ldr	r2, [pc, #184]	@ (8007f50 <USB_SetTurnaroundTime+0x130>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d802      	bhi.n	8007ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e9c:	230b      	movs	r3, #11
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e036      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f50 <USB_SetTurnaroundTime+0x130>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d906      	bls.n	8007eb8 <USB_SetTurnaroundTime+0x98>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4a29      	ldr	r2, [pc, #164]	@ (8007f54 <USB_SetTurnaroundTime+0x134>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d802      	bhi.n	8007eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	e02b      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a26      	ldr	r2, [pc, #152]	@ (8007f54 <USB_SetTurnaroundTime+0x134>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d906      	bls.n	8007ece <USB_SetTurnaroundTime+0xae>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4a25      	ldr	r2, [pc, #148]	@ (8007f58 <USB_SetTurnaroundTime+0x138>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d202      	bcs.n	8007ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ec8:	2309      	movs	r3, #9
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e020      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4a21      	ldr	r2, [pc, #132]	@ (8007f58 <USB_SetTurnaroundTime+0x138>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d306      	bcc.n	8007ee4 <USB_SetTurnaroundTime+0xc4>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4a20      	ldr	r2, [pc, #128]	@ (8007f5c <USB_SetTurnaroundTime+0x13c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d802      	bhi.n	8007ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ede:	2308      	movs	r3, #8
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e015      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f5c <USB_SetTurnaroundTime+0x13c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d906      	bls.n	8007efa <USB_SetTurnaroundTime+0xda>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4a1c      	ldr	r2, [pc, #112]	@ (8007f60 <USB_SetTurnaroundTime+0x140>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d202      	bcs.n	8007efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ef4:	2307      	movs	r3, #7
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	e00a      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007efa:	2306      	movs	r3, #6
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e007      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f06:	2309      	movs	r3, #9
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	e001      	b.n	8007f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f0c:	2309      	movs	r3, #9
 8007f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	029b      	lsls	r3, r3, #10
 8007f24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	00d8acbf 	.word	0x00d8acbf
 8007f40:	00e4e1c0 	.word	0x00e4e1c0
 8007f44:	00f42400 	.word	0x00f42400
 8007f48:	01067380 	.word	0x01067380
 8007f4c:	011a499f 	.word	0x011a499f
 8007f50:	01312cff 	.word	0x01312cff
 8007f54:	014ca43f 	.word	0x014ca43f
 8007f58:	016e3600 	.word	0x016e3600
 8007f5c:	01a6ab1f 	.word	0x01a6ab1f
 8007f60:	01e84800 	.word	0x01e84800

08007f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f043 0201 	orr.w	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d115      	bne.n	8007ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fd6:	200a      	movs	r0, #10
 8007fd8:	f7f9 f8e2 	bl	80011a0 <HAL_Delay>
      ms += 10U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	330a      	adds	r3, #10
 8007fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f939 	bl	800925a <USB_GetMode>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d01e      	beq.n	800802c <USB_SetCurrentMode+0x84>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ff2:	d9f0      	bls.n	8007fd6 <USB_SetCurrentMode+0x2e>
 8007ff4:	e01a      	b.n	800802c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d115      	bne.n	8008028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008008:	200a      	movs	r0, #10
 800800a:	f7f9 f8c9 	bl	80011a0 <HAL_Delay>
      ms += 10U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	330a      	adds	r3, #10
 8008012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f920 	bl	800925a <USB_GetMode>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <USB_SetCurrentMode+0x84>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2bc7      	cmp	r3, #199	@ 0xc7
 8008024:	d9f0      	bls.n	8008008 <USB_SetCurrentMode+0x60>
 8008026:	e001      	b.n	800802c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e005      	b.n	8008038 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008030:	d101      	bne.n	8008036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008040:	b084      	sub	sp, #16
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800804e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e009      	b.n	8008074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3340      	adds	r3, #64	@ 0x40
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b0e      	cmp	r3, #14
 8008078:	d9f2      	bls.n	8008060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800807a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800807e:	2b00      	cmp	r3, #0
 8008080:	d11c      	bne.n	80080bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008090:	f043 0302 	orr.w	r3, r3, #2
 8008094:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80080ba:	e00b      	b.n	80080d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080da:	461a      	mov	r2, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d10d      	bne.n	8008104 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080f0:	2100      	movs	r1, #0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f968 	bl	80083c8 <USB_SetDevSpeed>
 80080f8:	e008      	b.n	800810c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080fa:	2101      	movs	r1, #1
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f963 	bl	80083c8 <USB_SetDevSpeed>
 8008102:	e003      	b.n	800810c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008104:	2103      	movs	r1, #3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f95e 	bl	80083c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800810c:	2110      	movs	r1, #16
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8fa 	bl	8008308 <USB_FlushTxFifo>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f924 	bl	800836c <USB_FlushRxFifo>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814c:	461a      	mov	r2, r3
 800814e:	2300      	movs	r3, #0
 8008150:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	e043      	b.n	80081e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800816a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800816e:	d118      	bne.n	80081a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008182:	461a      	mov	r2, r3
 8008184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e013      	b.n	80081b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008198:	461a      	mov	r2, r3
 800819a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	e008      	b.n	80081b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ae:	461a      	mov	r2, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	461a      	mov	r2, r3
 80081c2:	2300      	movs	r3, #0
 80081c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d2:	461a      	mov	r2, r3
 80081d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	3301      	adds	r3, #1
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081e4:	461a      	mov	r2, r3
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d3b5      	bcc.n	8008158 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e043      	b.n	800827a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008208:	d118      	bne.n	800823c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800821c:	461a      	mov	r2, r3
 800821e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	e013      	b.n	800824e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008232:	461a      	mov	r2, r3
 8008234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e008      	b.n	800824e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008248:	461a      	mov	r2, r3
 800824a:	2300      	movs	r3, #0
 800824c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825a:	461a      	mov	r2, r3
 800825c:	2300      	movs	r3, #0
 800825e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	461a      	mov	r2, r3
 800826e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800827e:	461a      	mov	r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	4293      	cmp	r3, r2
 8008284:	d3b5      	bcc.n	80081f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008298:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d105      	bne.n	80082bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f043 0210 	orr.w	r2, r3, #16
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	4b10      	ldr	r3, [pc, #64]	@ (8008304 <USB_DevInit+0x2c4>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f043 0208 	orr.w	r2, r3, #8
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d107      	bne.n	80082f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082ec:	f043 0304 	orr.w	r3, r3, #4
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008300:	b004      	add	sp, #16
 8008302:	4770      	bx	lr
 8008304:	803c3800 	.word	0x803c3800

08008308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008322:	d901      	bls.n	8008328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e01b      	b.n	8008360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	daf2      	bge.n	8008316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	019b      	lsls	r3, r3, #6
 8008338:	f043 0220 	orr.w	r2, r3, #32
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800834c:	d901      	bls.n	8008352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e006      	b.n	8008360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b20      	cmp	r3, #32
 800835c:	d0f0      	beq.n	8008340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3301      	adds	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008384:	d901      	bls.n	800838a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e018      	b.n	80083bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	daf2      	bge.n	8008378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2210      	movs	r2, #16
 800839a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083a8:	d901      	bls.n	80083ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e006      	b.n	80083bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b10      	cmp	r3, #16
 80083b8:	d0f0      	beq.n	800839c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083e8:	4313      	orrs	r3, r2
 80083ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b087      	sub	sp, #28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 0306 	and.w	r3, r3, #6
 8008412:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]
 800841e:	e00a      	b.n	8008436 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d002      	beq.n	800842c <USB_GetDevSpeed+0x32>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b06      	cmp	r3, #6
 800842a:	d102      	bne.n	8008432 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800842c:	2302      	movs	r3, #2
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	e001      	b.n	8008436 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008432:	230f      	movs	r3, #15
 8008434:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d13a      	bne.n	80084d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	2101      	movs	r1, #1
 8008472:	fa01 f303 	lsl.w	r3, r1, r3
 8008476:	b29b      	uxth	r3, r3
 8008478:	68f9      	ldr	r1, [r7, #12]
 800847a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800847e:	4313      	orrs	r3, r2
 8008480:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d155      	bne.n	8008544 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	791b      	ldrb	r3, [r3, #4]
 80084b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	059b      	lsls	r3, r3, #22
 80084ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084bc:	4313      	orrs	r3, r2
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e036      	b.n	8008544 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084dc:	69da      	ldr	r2, [r3, #28]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	2101      	movs	r1, #1
 80084e8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	68f9      	ldr	r1, [r7, #12]
 80084f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d11a      	bne.n	8008544 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	791b      	ldrb	r3, [r3, #4]
 8008528:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800852a:	430b      	orrs	r3, r1
 800852c:	4313      	orrs	r3, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800853e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008542:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d161      	bne.n	8008634 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008586:	d11f      	bne.n	80085c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	2101      	movs	r1, #1
 80085da:	fa01 f303 	lsl.w	r3, r1, r3
 80085de:	b29b      	uxth	r3, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085e8:	4013      	ands	r3, r2
 80085ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	69da      	ldr	r2, [r3, #28]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008602:	b29b      	uxth	r3, r3
 8008604:	43db      	mvns	r3, r3
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800860c:	4013      	ands	r3, r2
 800860e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	0159      	lsls	r1, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	440b      	add	r3, r1
 8008626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800862a:	4619      	mov	r1, r3
 800862c:	4b35      	ldr	r3, [pc, #212]	@ (8008704 <USB_DeactivateEndpoint+0x1b0>)
 800862e:	4013      	ands	r3, r2
 8008630:	600b      	str	r3, [r1, #0]
 8008632:	e060      	b.n	80086f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800864a:	d11f      	bne.n	800868c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	440a      	add	r2, r1
 8008662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008666:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800866a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008686:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800868a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	2101      	movs	r1, #1
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	43db      	mvns	r3, r3
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086ac:	4013      	ands	r3, r2
 80086ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b6:	69da      	ldr	r2, [r3, #28]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	2101      	movs	r1, #1
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	041b      	lsls	r3, r3, #16
 80086c8:	43db      	mvns	r3, r3
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086d0:	4013      	ands	r3, r2
 80086d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	0159      	lsls	r1, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	440b      	add	r3, r1
 80086ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ee:	4619      	mov	r1, r3
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <USB_DeactivateEndpoint+0x1b4>)
 80086f2:	4013      	ands	r3, r2
 80086f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	ec337800 	.word	0xec337800
 8008708:	eff37800 	.word	0xeff37800

0800870c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	@ 0x28
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b01      	cmp	r3, #1
 800872a:	f040 817a 	bne.w	8008a22 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d132      	bne.n	800879c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008750:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008754:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008774:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008794:	0cdb      	lsrs	r3, r3, #19
 8008796:	04db      	lsls	r3, r3, #19
 8008798:	6113      	str	r3, [r2, #16]
 800879a:	e092      	b.n	80088c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087b6:	0cdb      	lsrs	r3, r3, #19
 80087b8:	04db      	lsls	r3, r3, #19
 80087ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d11a      	bne.n	800881c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d903      	bls.n	80087fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008814:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008818:	6113      	str	r3, [r2, #16]
 800881a:	e01b      	b.n	8008854 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008828:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6919      	ldr	r1, [r3, #16]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	440b      	add	r3, r1
 8008834:	1e59      	subs	r1, r3, #1
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	fbb1 f3f3 	udiv	r3, r1, r3
 800883e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008840:	4ba2      	ldr	r3, [pc, #648]	@ (8008acc <USB_EPStartXfer+0x3c0>)
 8008842:	400b      	ands	r3, r1
 8008844:	69b9      	ldr	r1, [r7, #24]
 8008846:	0148      	lsls	r0, r1, #5
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	4401      	add	r1, r0
 800884c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008850:	4313      	orrs	r3, r2
 8008852:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800886a:	69b9      	ldr	r1, [r7, #24]
 800886c:	0148      	lsls	r0, r1, #5
 800886e:	69f9      	ldr	r1, [r7, #28]
 8008870:	4401      	add	r1, r0
 8008872:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008876:	4313      	orrs	r3, r2
 8008878:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	791b      	ldrb	r3, [r3, #4]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d11f      	bne.n	80088c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800889c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80088a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	0151      	lsls	r1, r2, #5
 80088b4:	69fa      	ldr	r2, [r7, #28]
 80088b6:	440a      	add	r2, r1
 80088b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d14b      	bne.n	8008960 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088dc:	461a      	mov	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	791b      	ldrb	r3, [r3, #4]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d128      	bne.n	800893e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d110      	bne.n	800891e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008916:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	e00f      	b.n	800893e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800893c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008958:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	e165      	b.n	8008c2c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800897a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800897e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	791b      	ldrb	r3, [r3, #4]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d015      	beq.n	80089b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 814d 	beq.w	8008c2c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	2101      	movs	r1, #1
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	69f9      	ldr	r1, [r7, #28]
 80089aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089ae:	4313      	orrs	r3, r2
 80089b0:	634b      	str	r3, [r1, #52]	@ 0x34
 80089b2:	e13b      	b.n	8008c2c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d110      	bne.n	80089e6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	0151      	lsls	r1, r2, #5
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	440a      	add	r2, r1
 80089da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	e00f      	b.n	8008a06 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	0151      	lsls	r1, r2, #5
 80089f8:	69fa      	ldr	r2, [r7, #28]
 80089fa:	440a      	add	r2, r1
 80089fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	68d9      	ldr	r1, [r3, #12]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	b298      	uxth	r0, r3
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4603      	mov	r3, r0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f9b8 	bl	8008d90 <USB_WritePacket>
 8008a20:	e104      	b.n	8008c2c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	69fa      	ldr	r2, [r7, #28]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a3c:	0cdb      	lsrs	r3, r3, #19
 8008a3e:	04db      	lsls	r3, r3, #19
 8008a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a64:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d131      	bne.n	8008ad0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a9a:	69b9      	ldr	r1, [r7, #24]
 8008a9c:	0148      	lsls	r0, r1, #5
 8008a9e:	69f9      	ldr	r1, [r7, #28]
 8008aa0:	4401      	add	r1, r0
 8008aa2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ac8:	6113      	str	r3, [r2, #16]
 8008aca:	e061      	b.n	8008b90 <USB_EPStartXfer+0x484>
 8008acc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d123      	bne.n	8008b20 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	0148      	lsls	r0, r1, #5
 8008af2:	69f9      	ldr	r1, [r7, #28]
 8008af4:	4401      	add	r1, r0
 8008af6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008afa:	4313      	orrs	r3, r2
 8008afc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b1c:	6113      	str	r3, [r2, #16]
 8008b1e:	e037      	b.n	8008b90 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	691a      	ldr	r2, [r3, #16]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	1e5a      	subs	r2, r3, #1
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	8afa      	ldrh	r2, [r7, #22]
 8008b3c:	fb03 f202 	mul.w	r2, r3, r2
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b50:	691a      	ldr	r2, [r3, #16]
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	04d9      	lsls	r1, r3, #19
 8008b56:	4b38      	ldr	r3, [pc, #224]	@ (8008c38 <USB_EPStartXfer+0x52c>)
 8008b58:	400b      	ands	r3, r1
 8008b5a:	69b9      	ldr	r1, [r7, #24]
 8008b5c:	0148      	lsls	r0, r1, #5
 8008b5e:	69f9      	ldr	r1, [r7, #28]
 8008b60:	4401      	add	r1, r0
 8008b62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b66:	4313      	orrs	r3, r2
 8008b68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b76:	691a      	ldr	r2, [r3, #16]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b80:	69b9      	ldr	r1, [r7, #24]
 8008b82:	0148      	lsls	r0, r1, #5
 8008b84:	69f9      	ldr	r1, [r7, #28]
 8008b86:	4401      	add	r1, r0
 8008b88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d10d      	bne.n	8008bb2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	68d9      	ldr	r1, [r3, #12]
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bae:	460a      	mov	r2, r1
 8008bb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	791b      	ldrb	r3, [r3, #4]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d128      	bne.n	8008c0c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d110      	bne.n	8008bec <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e00f      	b.n	8008c0c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	69fa      	ldr	r2, [r7, #28]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	1ff80000 	.word	0x1ff80000

08008c3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d14a      	bne.n	8008cf0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c72:	f040 8086 	bne.w	8008d82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	7812      	ldrb	r2, [r2, #0]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d902      	bls.n	8008cd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd2:	e056      	b.n	8008d82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cec:	d0e7      	beq.n	8008cbe <USB_EPStopXfer+0x82>
 8008cee:	e048      	b.n	8008d82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d08:	d13b      	bne.n	8008d82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	0151      	lsls	r1, r2, #5
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	440a      	add	r2, r1
 8008d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d902      	bls.n	8008d68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
          break;
 8008d66:	e00c      	b.n	8008d82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d80:	d0e7      	beq.n	8008d52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b089      	sub	sp, #36	@ 0x24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	460b      	mov	r3, r1
 8008da0:	71fb      	strb	r3, [r7, #7]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d123      	bne.n	8008dfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008db6:	88bb      	ldrh	r3, [r7, #4]
 8008db8:	3303      	adds	r3, #3
 8008dba:	089b      	lsrs	r3, r3, #2
 8008dbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61bb      	str	r3, [r7, #24]
 8008dc2:	e018      	b.n	8008df6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	031a      	lsls	r2, r3, #12
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3301      	adds	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	3301      	adds	r3, #1
 8008de8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d3e2      	bcc.n	8008dc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3724      	adds	r7, #36	@ 0x24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b08b      	sub	sp, #44	@ 0x2c
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	089b      	lsrs	r3, r3, #2
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e32:	2300      	movs	r3, #0
 8008e34:	623b      	str	r3, [r7, #32]
 8008e36:	e014      	b.n	8008e62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	3301      	adds	r3, #1
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	3301      	adds	r3, #1
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	3301      	adds	r3, #1
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	623b      	str	r3, [r7, #32]
 8008e62:	6a3a      	ldr	r2, [r7, #32]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d3e6      	bcc.n	8008e38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e6a:	8bfb      	ldrh	r3, [r7, #30]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	6812      	ldr	r2, [r2, #0]
 8008e82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	701a      	strb	r2, [r3, #0]
      i++;
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ea2:	8bfb      	ldrh	r3, [r7, #30]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ea8:	8bfb      	ldrh	r3, [r7, #30]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1ea      	bne.n	8008e84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	372c      	adds	r7, #44	@ 0x2c
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d12c      	bne.n	8008f32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	db12      	blt.n	8008f10 <USB_EPSetStall+0x54>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00f      	beq.n	8008f10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e02b      	b.n	8008f8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	db12      	blt.n	8008f6a <USB_EPSetStall+0xae>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00f      	beq.n	8008f6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d128      	bne.n	8009006 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	791b      	ldrb	r3, [r3, #4]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d003      	beq.n	8008fe4 <USB_EPClearStall+0x4c>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	791b      	ldrb	r3, [r3, #4]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d138      	bne.n	8009056 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e027      	b.n	8009056 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009020:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009024:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	791b      	ldrb	r3, [r3, #4]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d003      	beq.n	8009036 <USB_EPClearStall+0x9e>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d10f      	bne.n	8009056 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009054:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009082:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009086:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009098:	68f9      	ldr	r1, [r7, #12]
 800909a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800909e:	4313      	orrs	r3, r2
 80090a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090ca:	f023 0303 	bic.w	r3, r3, #3
 80090ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090de:	f023 0302 	bic.w	r3, r3, #2
 80090e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009120:	f043 0302 	orr.w	r3, r3, #2
 8009124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4013      	ands	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800914c:	68fb      	ldr	r3, [r7, #12]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	4013      	ands	r3, r2
 800917c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0c1b      	lsrs	r3, r3, #16
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	b29b      	uxth	r3, r3
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4013      	ands	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091f0:	68bb      	ldr	r3, [r7, #8]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091fe:	b480      	push	{r7}
 8009200:	b087      	sub	sp, #28
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009220:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	fa22 f303 	lsr.w	r3, r2, r3
 800922e:	01db      	lsls	r3, r3, #7
 8009230:	b2db      	uxtb	r3, r3
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4013      	ands	r3, r2
 800924a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800924c:	68bb      	ldr	r3, [r7, #8]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f003 0301 	and.w	r3, r3, #1
}
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009276:	b480      	push	{r7}
 8009278:	b085      	sub	sp, #20
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009290:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	460b      	mov	r3, r1
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	333c      	adds	r3, #60	@ 0x3c
 80092d2:	3304      	adds	r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	4a26      	ldr	r2, [pc, #152]	@ (8009374 <USB_EP0_OutStart+0xb8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d90a      	bls.n	80092f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092f0:	d101      	bne.n	80092f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e037      	b.n	8009366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fc:	461a      	mov	r2, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009324:	f043 0318 	orr.w	r3, r3, #24
 8009328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009338:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800933c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d10f      	bne.n	8009364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800935e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	4f54300a 	.word	0x4f54300a

08009378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009390:	d901      	bls.n	8009396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e01b      	b.n	80093ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	daf2      	bge.n	8009384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f043 0201 	orr.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093ba:	d901      	bls.n	80093c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e006      	b.n	80093ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d0f0      	beq.n	80093ae <USB_CoreReset+0x36>

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80093e0:	4904      	ldr	r1, [pc, #16]	@ (80093f4 <MX_FATFS_Init+0x18>)
 80093e2:	4805      	ldr	r0, [pc, #20]	@ (80093f8 <MX_FATFS_Init+0x1c>)
 80093e4:	f003 fd5a 	bl	800ce9c <FATFS_LinkDriver>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	4b03      	ldr	r3, [pc, #12]	@ (80093fc <MX_FATFS_Init+0x20>)
 80093ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000394 	.word	0x20000394
 80093f8:	0800d940 	.word	0x0800d940
 80093fc:	20000390 	.word	0x20000390

08009400 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800940a:	f000 f896 	bl	800953a <BSP_SD_IsDetected>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e012      	b.n	800943e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009418:	480b      	ldr	r0, [pc, #44]	@ (8009448 <BSP_SD_Init+0x48>)
 800941a:	f7fa fd1b 	bl	8003e54 <HAL_SD_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009428:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800942c:	4806      	ldr	r0, [pc, #24]	@ (8009448 <BSP_SD_Init+0x48>)
 800942e:	f7fb fae9 	bl	8004a04 <HAL_SD_ConfigWideBusOperation>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800943c:	79fb      	ldrb	r3, [r7, #7]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20000118 	.word	0x20000118

0800944c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	68f9      	ldr	r1, [r7, #12]
 8009462:	4806      	ldr	r0, [pc, #24]	@ (800947c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009464:	f7fa fda6 	bl	8003fb4 <HAL_SD_ReadBlocks_DMA>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20000118 	.word	0x20000118

08009480 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	4806      	ldr	r0, [pc, #24]	@ (80094b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009498:	f7fa fe6e 	bl	8004178 <HAL_SD_WriteBlocks_DMA>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20000118 	.word	0x20000118

080094b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094b8:	4805      	ldr	r0, [pc, #20]	@ (80094d0 <BSP_SD_GetCardState+0x1c>)
 80094ba:	f7fb fb3d 	bl	8004b38 <HAL_SD_GetCardState>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	bf14      	ite	ne
 80094c4:	2301      	movne	r3, #1
 80094c6:	2300      	moveq	r3, #0
 80094c8:	b2db      	uxtb	r3, r3
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000118 	.word	0x20000118

080094d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80094dc:	6879      	ldr	r1, [r7, #4]
 80094de:	4803      	ldr	r0, [pc, #12]	@ (80094ec <BSP_SD_GetCardInfo+0x18>)
 80094e0:	f7fb fa64 	bl	80049ac <HAL_SD_GetCardInfo>
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000118 	.word	0x20000118

080094f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80094f8:	f000 f818 	bl	800952c <BSP_SD_AbortCallback>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800950c:	f000 f9a8 	bl	8009860 <BSP_SD_WriteCpltCallback>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009520:	f000 f9aa 	bl	8009878 <BSP_SD_ReadCpltCallback>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0

}
 8009530:	bf00      	nop
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009540:	2301      	movs	r3, #1
 8009542:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009544:	f000 f80c 	bl	8009560 <BSP_PlatformIsDetected>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800954e:	2300      	movs	r3, #0
 8009550:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	b2db      	uxtb	r3, r3
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009566:	2301      	movs	r3, #1
 8009568:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800956a:	2180      	movs	r1, #128	@ 0x80
 800956c:	4806      	ldr	r0, [pc, #24]	@ (8009588 <BSP_PlatformIsDetected+0x28>)
 800956e:	f7f8 fd07 	bl	8001f80 <HAL_GPIO_ReadPin>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009578:	2300      	movs	r3, #0
 800957a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800957c:	79fb      	ldrb	r3, [r7, #7]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	40020800 	.word	0x40020800

0800958c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009594:	f7f7 fdf8 	bl	8001188 <HAL_GetTick>
 8009598:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800959a:	e006      	b.n	80095aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800959c:	f7ff ff8a 	bl	80094b4 <BSP_SD_GetCardState>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e009      	b.n	80095be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80095aa:	f7f7 fded 	bl	8001188 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d8f0      	bhi.n	800959c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009600 <SD_CheckStatus+0x38>)
 80095d4:	2201      	movs	r2, #1
 80095d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80095d8:	f7ff ff6c 	bl	80094b4 <BSP_SD_GetCardState>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d107      	bne.n	80095f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80095e2:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <SD_CheckStatus+0x38>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f023 0301 	bic.w	r3, r3, #1
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <SD_CheckStatus+0x38>)
 80095f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80095f2:	4b03      	ldr	r3, [pc, #12]	@ (8009600 <SD_CheckStatus+0x38>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	b2db      	uxtb	r3, r3
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000009 	.word	0x20000009

08009604 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800960e:	f7ff fef7 	bl	8009400 <BSP_SD_Init>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d107      	bne.n	8009628 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff ffd4 	bl	80095c8 <SD_CheckStatus>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <SD_initialize+0x34>)
 8009626:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009628:	4b03      	ldr	r3, [pc, #12]	@ (8009638 <SD_initialize+0x34>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	b2db      	uxtb	r3, r3
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000009 	.word	0x20000009

0800963c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff ffbd 	bl	80095c8 <SD_CheckStatus>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800966c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009670:	f7ff ff8c 	bl	800958c <SD_CheckStatusWithTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	da01      	bge.n	800967e <SD_read+0x26>
  {
    return res;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	e03b      	b.n	80096f6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	68b8      	ldr	r0, [r7, #8]
 8009684:	f7ff fee2 	bl	800944c <BSP_SD_ReadBlocks_DMA>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d132      	bne.n	80096f4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800968e:	4b1c      	ldr	r3, [pc, #112]	@ (8009700 <SD_read+0xa8>)
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009694:	f7f7 fd78 	bl	8001188 <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800969a:	bf00      	nop
 800969c:	4b18      	ldr	r3, [pc, #96]	@ (8009700 <SD_read+0xa8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d108      	bne.n	80096b6 <SD_read+0x5e>
 80096a4:	f7f7 fd70 	bl	8001188 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d9f2      	bls.n	800969c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80096b6:	4b12      	ldr	r3, [pc, #72]	@ (8009700 <SD_read+0xa8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
 80096c2:	e017      	b.n	80096f4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80096c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009700 <SD_read+0xa8>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80096ca:	f7f7 fd5d 	bl	8001188 <HAL_GetTick>
 80096ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096d0:	e007      	b.n	80096e2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096d2:	f7ff feef 	bl	80094b4 <BSP_SD_GetCardState>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <SD_read+0x8a>
          {
            res = RES_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80096e0:	e008      	b.n	80096f4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096e2:	f7f7 fd51 	bl	8001188 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d9ee      	bls.n	80096d2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	2000039c 	.word	0x2000039c

08009704 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009718:	4b24      	ldr	r3, [pc, #144]	@ (80097ac <SD_write+0xa8>)
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800971e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009722:	f7ff ff33 	bl	800958c <SD_CheckStatusWithTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	da01      	bge.n	8009730 <SD_write+0x2c>
  {
    return res;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	e038      	b.n	80097a2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	68b8      	ldr	r0, [r7, #8]
 8009736:	f7ff fea3 	bl	8009480 <BSP_SD_WriteBlocks_DMA>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d12f      	bne.n	80097a0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009740:	f7f7 fd22 	bl	8001188 <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009746:	bf00      	nop
 8009748:	4b18      	ldr	r3, [pc, #96]	@ (80097ac <SD_write+0xa8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d108      	bne.n	8009762 <SD_write+0x5e>
 8009750:	f7f7 fd1a 	bl	8001188 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800975e:	4293      	cmp	r3, r2
 8009760:	d9f2      	bls.n	8009748 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009762:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <SD_write+0xa8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
 800976e:	e017      	b.n	80097a0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009770:	4b0e      	ldr	r3, [pc, #56]	@ (80097ac <SD_write+0xa8>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009776:	f7f7 fd07 	bl	8001188 <HAL_GetTick>
 800977a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800977c:	e007      	b.n	800978e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800977e:	f7ff fe99 	bl	80094b4 <BSP_SD_GetCardState>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <SD_write+0x8a>
          {
            res = RES_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	75fb      	strb	r3, [r7, #23]
            break;
 800978c:	e008      	b.n	80097a0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800978e:	f7f7 fcfb 	bl	8001188 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	f247 522f 	movw	r2, #29999	@ 0x752f
 800979c:	4293      	cmp	r3, r2
 800979e:	d9ee      	bls.n	800977e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000398 	.word	0x20000398

080097b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08c      	sub	sp, #48	@ 0x30
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	603a      	str	r2, [r7, #0]
 80097ba:	71fb      	strb	r3, [r7, #7]
 80097bc:	460b      	mov	r3, r1
 80097be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097c6:	4b25      	ldr	r3, [pc, #148]	@ (800985c <SD_ioctl+0xac>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <SD_ioctl+0x28>
 80097d4:	2303      	movs	r3, #3
 80097d6:	e03c      	b.n	8009852 <SD_ioctl+0xa2>

  switch (cmd)
 80097d8:	79bb      	ldrb	r3, [r7, #6]
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d834      	bhi.n	8009848 <SD_ioctl+0x98>
 80097de:	a201      	add	r2, pc, #4	@ (adr r2, 80097e4 <SD_ioctl+0x34>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	080097fd 	.word	0x080097fd
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800982f 	.word	0x0800982f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80097fa:	e028      	b.n	800984e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80097fc:	f107 030c 	add.w	r3, r7, #12
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fe67 	bl	80094d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009812:	e01c      	b.n	800984e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009814:	f107 030c 	add.w	r3, r7, #12
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fe5b 	bl	80094d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009820:	b29a      	uxth	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800982c:	e00f      	b.n	800984e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff fe4e 	bl	80094d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983a:	0a5a      	lsrs	r2, r3, #9
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009846:	e002      	b.n	800984e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009848:	2304      	movs	r3, #4
 800984a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800984e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009852:	4618      	mov	r0, r3
 8009854:	3730      	adds	r7, #48	@ 0x30
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000009 	.word	0x20000009

08009860 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009860:	b480      	push	{r7}
 8009862:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009864:	4b03      	ldr	r3, [pc, #12]	@ (8009874 <BSP_SD_WriteCpltCallback+0x14>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000398 	.word	0x20000398

08009878 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800987c:	4b03      	ldr	r3, [pc, #12]	@ (800988c <BSP_SD_ReadCpltCallback+0x14>)
 800987e:	2201      	movs	r2, #1
 8009880:	601a      	str	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	2000039c 	.word	0x2000039c

08009890 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800989c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80098a0:	f003 ffa0 	bl	800d7e4 <USBD_static_malloc>
 80098a4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32b0      	adds	r2, #176	@ 0xb0
 80098b6:	2100      	movs	r1, #0
 80098b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098bc:	2302      	movs	r3, #2
 80098be:	e06e      	b.n	800999e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	32b0      	adds	r2, #176	@ 0xb0
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32b0      	adds	r2, #176	@ 0xb0
 80098da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	7c1b      	ldrb	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d12b      	bne.n	8009944 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80098ec:	4b2e      	ldr	r3, [pc, #184]	@ (80099a8 <USBD_MSC_Init+0x118>)
 80098ee:	7819      	ldrb	r1, [r3, #0]
 80098f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098f4:	2202      	movs	r2, #2
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f003 fe31 	bl	800d55e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80098fc:	4b2a      	ldr	r3, [pc, #168]	@ (80099a8 <USBD_MSC_Init+0x118>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 020f 	and.w	r2, r3, #15
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	440b      	add	r3, r1
 8009910:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009914:	2201      	movs	r2, #1
 8009916:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009918:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <USBD_MSC_Init+0x11c>)
 800991a:	7819      	ldrb	r1, [r3, #0]
 800991c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009920:	2202      	movs	r2, #2
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f003 fe1b 	bl	800d55e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009928:	4b20      	ldr	r3, [pc, #128]	@ (80099ac <USBD_MSC_Init+0x11c>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 020f 	and.w	r2, r3, #15
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	440b      	add	r3, r1
 800993c:	3324      	adds	r3, #36	@ 0x24
 800993e:	2201      	movs	r2, #1
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	e028      	b.n	8009996 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009944:	4b18      	ldr	r3, [pc, #96]	@ (80099a8 <USBD_MSC_Init+0x118>)
 8009946:	7819      	ldrb	r1, [r3, #0]
 8009948:	2340      	movs	r3, #64	@ 0x40
 800994a:	2202      	movs	r2, #2
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f003 fe06 	bl	800d55e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009952:	4b15      	ldr	r3, [pc, #84]	@ (80099a8 <USBD_MSC_Init+0x118>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	f003 020f 	and.w	r2, r3, #15
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	440b      	add	r3, r1
 8009966:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800996a:	2201      	movs	r2, #1
 800996c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800996e:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <USBD_MSC_Init+0x11c>)
 8009970:	7819      	ldrb	r1, [r3, #0]
 8009972:	2340      	movs	r3, #64	@ 0x40
 8009974:	2202      	movs	r2, #2
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f003 fdf1 	bl	800d55e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800997c:	4b0b      	ldr	r3, [pc, #44]	@ (80099ac <USBD_MSC_Init+0x11c>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 020f 	and.w	r2, r3, #15
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	3324      	adds	r3, #36	@ 0x24
 8009992:	2201      	movs	r2, #1
 8009994:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fa2c 	bl	8009df4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2000006f 	.word	0x2000006f
 80099ac:	2000006e 	.word	0x2000006e

080099b0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80099bc:	4b26      	ldr	r3, [pc, #152]	@ (8009a58 <USBD_MSC_DeInit+0xa8>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f003 fdf1 	bl	800d5aa <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80099c8:	4b23      	ldr	r3, [pc, #140]	@ (8009a58 <USBD_MSC_DeInit+0xa8>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099e0:	2200      	movs	r2, #0
 80099e2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80099e4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <USBD_MSC_DeInit+0xac>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f003 fddd 	bl	800d5aa <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80099f0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a5c <USBD_MSC_DeInit+0xac>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f003 020f 	and.w	r2, r3, #15
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	3324      	adds	r3, #36	@ 0x24
 8009a06:	2200      	movs	r2, #0
 8009a08:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	32b0      	adds	r2, #176	@ 0xb0
 8009a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d018      	beq.n	8009a4e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fa67 	bl	8009ef0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32b0      	adds	r2, #176	@ 0xb0
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f003 fee5 	bl	800d800 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	32b0      	adds	r2, #176	@ 0xb0
 8009a40:	2100      	movs	r1, #0
 8009a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	2000006f 	.word	0x2000006f
 8009a5c:	2000006e 	.word	0x2000006e

08009a60 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	32b0      	adds	r2, #176	@ 0xb0
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e0e1      	b.n	8009c50 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d053      	beq.n	8009b40 <USBD_MSC_Setup+0xe0>
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	f040 80d1 	bne.w	8009c40 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2bfe      	cmp	r3, #254	@ 0xfe
 8009aa4:	d002      	beq.n	8009aac <USBD_MSC_Setup+0x4c>
 8009aa6:	2bff      	cmp	r3, #255	@ 0xff
 8009aa8:	d02a      	beq.n	8009b00 <USBD_MSC_Setup+0xa0>
 8009aaa:	e041      	b.n	8009b30 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11e      	bne.n	8009af2 <USBD_MSC_Setup+0x92>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	88db      	ldrh	r3, [r3, #6]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d11a      	bne.n	8009af2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da15      	bge.n	8009af2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	33b0      	adds	r3, #176	@ 0xb0
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	4798      	blx	r3
 8009ada:	4603      	mov	r3, r0
 8009adc:	461a      	mov	r2, r3
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f003 f927 	bl	800cd3c <USBD_CtlSendData>
 8009aee:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009af0:	e025      	b.n	8009b3e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f003 f8b0 	bl	800cc5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	75fb      	strb	r3, [r7, #23]
          break;
 8009afe:	e01e      	b.n	8009b3e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	885b      	ldrh	r3, [r3, #2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10c      	bne.n	8009b22 <USBD_MSC_Setup+0xc2>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	88db      	ldrh	r3, [r3, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d108      	bne.n	8009b22 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	db03      	blt.n	8009b22 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9b4 	bl	8009e88 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b20:	e00d      	b.n	8009b3e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f003 f898 	bl	800cc5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b2e:	e006      	b.n	8009b3e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f003 f891 	bl	800cc5a <USBD_CtlError>
          ret = USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b3c:	bf00      	nop
      }
      break;
 8009b3e:	e086      	b.n	8009c4e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b0b      	cmp	r3, #11
 8009b46:	d872      	bhi.n	8009c2e <USBD_MSC_Setup+0x1ce>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <USBD_MSC_Setup+0xf0>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009bfd 	.word	0x08009bfd
 8009b58:	08009c2f 	.word	0x08009c2f
 8009b5c:	08009c2f 	.word	0x08009c2f
 8009b60:	08009c2f 	.word	0x08009c2f
 8009b64:	08009c2f 	.word	0x08009c2f
 8009b68:	08009c2f 	.word	0x08009c2f
 8009b6c:	08009c2f 	.word	0x08009c2f
 8009b70:	08009c2f 	.word	0x08009c2f
 8009b74:	08009c2f 	.word	0x08009c2f
 8009b78:	08009bab 	.word	0x08009bab
 8009b7c:	08009bd5 	.word	0x08009bd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d107      	bne.n	8009b9c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b8c:	f107 030e 	add.w	r3, r7, #14
 8009b90:	2202      	movs	r2, #2
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f003 f8d1 	bl	800cd3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b9a:	e050      	b.n	8009c3e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f003 f85b 	bl	800cc5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
          break;
 8009ba8:	e049      	b.n	8009c3e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d107      	bne.n	8009bc6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f003 f8bc 	bl	800cd3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bc4:	e03b      	b.n	8009c3e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f003 f846 	bl	800cc5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009bd2:	e034      	b.n	8009c3e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d106      	bne.n	8009bee <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	885b      	ldrh	r3, [r3, #2]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bec:	e027      	b.n	8009c3e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f003 f832 	bl	800cc5a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bfa:	e020      	b.n	8009c3e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d119      	bne.n	8009c3c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	885b      	ldrh	r3, [r3, #2]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d115      	bne.n	8009c3c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	889b      	ldrh	r3, [r3, #4]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f003 fce5 	bl	800d5e8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	889b      	ldrh	r3, [r3, #4]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fb2e 	bl	800a288 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009c2c:	e006      	b.n	8009c3c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f003 f812 	bl	800cc5a <USBD_CtlError>
          ret = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	75fb      	strb	r3, [r7, #23]
          break;
 8009c3a:	e000      	b.n	8009c3e <USBD_MSC_Setup+0x1de>
          break;
 8009c3c:	bf00      	nop
      }
      break;
 8009c3e:	e006      	b.n	8009c4e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f003 f809 	bl	800cc5a <USBD_CtlError>
      ret = USBD_FAIL;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f959 	bl	8009f20 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f983 	bl	8009f94 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009ca0:	2181      	movs	r1, #129	@ 0x81
 8009ca2:	4812      	ldr	r0, [pc, #72]	@ (8009cec <USBD_MSC_GetHSCfgDesc+0x54>)
 8009ca4:	f002 f9a4 	bl	800bff0 <USBD_GetEpDesc>
 8009ca8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009caa:	2101      	movs	r1, #1
 8009cac:	480f      	ldr	r0, [pc, #60]	@ (8009cec <USBD_MSC_GetHSCfgDesc+0x54>)
 8009cae:	f002 f99f 	bl	800bff0 <USBD_GetEpDesc>
 8009cb2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d006      	beq.n	8009cc8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	711a      	strb	r2, [r3, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f042 0202 	orr.w	r2, r2, #2
 8009cc6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d006      	beq.n	8009cdc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	711a      	strb	r2, [r3, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f042 0202 	orr.w	r2, r2, #2
 8009cda:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009ce2:	4b02      	ldr	r3, [pc, #8]	@ (8009cec <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20000044 	.word	0x20000044

08009cf0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009cf8:	2181      	movs	r1, #129	@ 0x81
 8009cfa:	4812      	ldr	r0, [pc, #72]	@ (8009d44 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009cfc:	f002 f978 	bl	800bff0 <USBD_GetEpDesc>
 8009d00:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009d02:	2101      	movs	r1, #1
 8009d04:	480f      	ldr	r0, [pc, #60]	@ (8009d44 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009d06:	f002 f973 	bl	800bff0 <USBD_GetEpDesc>
 8009d0a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d1a:	711a      	strb	r2, [r3, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d006      	beq.n	8009d34 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d2e:	711a      	strb	r2, [r3, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009d3a:	4b02      	ldr	r3, [pc, #8]	@ (8009d44 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20000044 	.word	0x20000044

08009d48 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009d50:	2181      	movs	r1, #129	@ 0x81
 8009d52:	4812      	ldr	r0, [pc, #72]	@ (8009d9c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009d54:	f002 f94c 	bl	800bff0 <USBD_GetEpDesc>
 8009d58:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	480f      	ldr	r0, [pc, #60]	@ (8009d9c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009d5e:	f002 f947 	bl	800bff0 <USBD_GetEpDesc>
 8009d62:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d006      	beq.n	8009d78 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d72:	711a      	strb	r2, [r3, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d86:	711a      	strb	r2, [r3, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009d92:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000044 	.word	0x20000044

08009da0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	220a      	movs	r2, #10
 8009dac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009dae:	4b03      	ldr	r3, [pc, #12]	@ (8009dbc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000064 	.word	0x20000064

08009dc0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e009      	b.n	8009de8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	33b0      	adds	r3, #176	@ 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	32b0      	adds	r2, #176	@ 0xb0
 8009e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d032      	beq.n	8009e78 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	33b0      	adds	r3, #176	@ 0xb0
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <MSC_BOT_Init+0x8c>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f003 fbc8 	bl	800d5e8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009e58:	4b0a      	ldr	r3, [pc, #40]	@ (8009e84 <MSC_BOT_Init+0x90>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f003 fbc2 	bl	800d5e8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009e64:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <MSC_BOT_Init+0x8c>)
 8009e66:	7819      	ldrb	r1, [r3, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009e6e:	231f      	movs	r3, #31
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f003 fc82 	bl	800d77a <USBD_LL_PrepareReceive>
 8009e76:	e000      	b.n	8009e7a <MSC_BOT_Init+0x86>
    return;
 8009e78:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	2000006f 	.word	0x2000006f
 8009e84:	2000006e 	.word	0x2000006e

08009e88 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	32b0      	adds	r2, #176	@ 0xb0
 8009e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01b      	beq.n	8009ede <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <MSC_BOT_Reset+0x60>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f003 fbd3 	bl	800d664 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <MSC_BOT_Reset+0x64>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f003 fbcd 	bl	800d664 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009eca:	4b08      	ldr	r3, [pc, #32]	@ (8009eec <MSC_BOT_Reset+0x64>)
 8009ecc:	7819      	ldrb	r1, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009ed4:	231f      	movs	r3, #31
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f003 fc4f 	bl	800d77a <USBD_LL_PrepareReceive>
 8009edc:	e000      	b.n	8009ee0 <MSC_BOT_Reset+0x58>
    return;
 8009ede:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000006e 	.word	0x2000006e
 8009eec:	2000006f 	.word	0x2000006f

08009ef0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32b0      	adds	r2, #176	@ 0xb0
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	721a      	strb	r2, [r3, #8]
  }
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	32b0      	adds	r2, #176	@ 0xb0
 8009f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d020      	beq.n	8009f84 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	7a1b      	ldrb	r3, [r3, #8]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d005      	beq.n	8009f56 <MSC_BOT_DataIn+0x36>
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	db1c      	blt.n	8009f88 <MSC_BOT_DataIn+0x68>
 8009f4e:	3b03      	subs	r3, #3
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d819      	bhi.n	8009f88 <MSC_BOT_DataIn+0x68>
 8009f54:	e011      	b.n	8009f7a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8009f62:	461a      	mov	r2, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9c9 	bl	800a2fc <SCSI_ProcessCmd>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da0d      	bge.n	8009f8c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009f70:	2101      	movs	r1, #1
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f90c 	bl	800a190 <MSC_BOT_SendCSW>
      }
      break;
 8009f78:	e008      	b.n	8009f8c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f907 	bl	800a190 <MSC_BOT_SendCSW>
      break;
 8009f82:	e004      	b.n	8009f8e <MSC_BOT_DataIn+0x6e>
    return;
 8009f84:	bf00      	nop
 8009f86:	e002      	b.n	8009f8e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8009f88:	bf00      	nop
 8009f8a:	e000      	b.n	8009f8e <MSC_BOT_DataIn+0x6e>
      break;
 8009f8c:	bf00      	nop
  }
}
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	32b0      	adds	r2, #176	@ 0xb0
 8009faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01c      	beq.n	8009ff0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	7a1b      	ldrb	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <MSC_BOT_DataOut+0x30>
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d004      	beq.n	8009fcc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009fc2:	e018      	b.n	8009ff6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f819 	bl	8009ffc <MSC_BOT_CBW_Decode>
      break;
 8009fca:	e014      	b.n	8009ff6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f98e 	bl	800a2fc <SCSI_ProcessCmd>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da06      	bge.n	8009ff4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f8d1 	bl	800a190 <MSC_BOT_SendCSW>
      break;
 8009fee:	e001      	b.n	8009ff4 <MSC_BOT_DataOut+0x60>
    return;
 8009ff0:	bf00      	nop
 8009ff2:	e000      	b.n	8009ff6 <MSC_BOT_DataOut+0x62>
      break;
 8009ff4:	bf00      	nop
  }
}
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	32b0      	adds	r2, #176	@ 0xb0
 800a00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a012:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d079      	beq.n	800a10e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a032:	4b3a      	ldr	r3, [pc, #232]	@ (800a11c <MSC_BOT_CBW_Decode+0x120>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f003 fbbf 	bl	800d7bc <USBD_LL_GetRxDataSize>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b1f      	cmp	r3, #31
 800a042:	d114      	bne.n	800a06e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a04a:	4a35      	ldr	r2, [pc, #212]	@ (800a120 <MSC_BOT_CBW_Decode+0x124>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10e      	bne.n	800a06e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a056:	2b01      	cmp	r3, #1
 800a058:	d809      	bhi.n	800a06e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d90e      	bls.n	800a08c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a074:	2320      	movs	r3, #32
 800a076:	2205      	movs	r2, #5
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fe54 	bl	800ad26 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2202      	movs	r2, #2
 800a082:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f8bd 	bl	800a204 <MSC_BOT_Abort>
 800a08a:	e043      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800a098:	461a      	mov	r2, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f92e 	bl	800a2fc <SCSI_ProcessCmd>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da0c      	bge.n	800a0c0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	7a1b      	ldrb	r3, [r3, #8]
 800a0aa:	2b05      	cmp	r3, #5
 800a0ac:	d104      	bne.n	800a0b8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f86d 	bl	800a190 <MSC_BOT_SendCSW>
 800a0b6:	e02d      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f8a3 	bl	800a204 <MSC_BOT_Abort>
 800a0be:	e029      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	7a1b      	ldrb	r3, [r3, #8]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d024      	beq.n	800a112 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d020      	beq.n	800a112 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d01c      	beq.n	800a112 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d009      	beq.n	800a0f4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f103 0110 	add.w	r1, r3, #16
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f819 	bl	800a124 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800a0f2:	e00f      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f846 	bl	800a190 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800a104:	e006      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f87c 	bl	800a204 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800a10c:	e002      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
    return;
 800a10e:	bf00      	nop
 800a110:	e000      	b.n	800a114 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800a112:	bf00      	nop
    }
  }
}
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000006f 	.word	0x2000006f
 800a120:	43425355 	.word	0x43425355

0800a124 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	32b0      	adds	r2, #176	@ 0xb0
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01e      	beq.n	800a184 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	4293      	cmp	r3, r2
 800a150:	bf28      	it	cs
 800a152:	4613      	movcs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2204      	movs	r2, #4
 800a172:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800a174:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <MSC_BOT_SendData+0x68>)
 800a176:	7819      	ldrb	r1, [r3, #0]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f003 fadb 	bl	800d738 <USBD_LL_Transmit>
 800a182:	e000      	b.n	800a186 <MSC_BOT_SendData+0x62>
    return;
 800a184:	bf00      	nop
}
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	2000006e 	.word	0x2000006e

0800a190 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	32b0      	adds	r2, #176	@ 0xb0
 800a1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01d      	beq.n	800a1ee <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a10      	ldr	r2, [pc, #64]	@ (800a1f8 <MSC_BOT_SendCSW+0x68>)
 800a1b6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <MSC_BOT_SendCSW+0x6c>)
 800a1ca:	7819      	ldrb	r1, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800a1d2:	230d      	movs	r3, #13
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f003 faaf 	bl	800d738 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a1da:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <MSC_BOT_SendCSW+0x70>)
 800a1dc:	7819      	ldrb	r1, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a1e4:	231f      	movs	r3, #31
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f003 fac7 	bl	800d77a <USBD_LL_PrepareReceive>
 800a1ec:	e000      	b.n	800a1f0 <MSC_BOT_SendCSW+0x60>
    return;
 800a1ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	53425355 	.word	0x53425355
 800a1fc:	2000006e 	.word	0x2000006e
 800a200:	2000006f 	.word	0x2000006f

0800a204 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	32b0      	adds	r2, #176	@ 0xb0
 800a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d02a      	beq.n	800a278 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10e      	bne.n	800a24a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800a232:	2b00      	cmp	r3, #0
 800a234:	d009      	beq.n	800a24a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a23e:	4b10      	ldr	r3, [pc, #64]	@ (800a280 <MSC_BOT_Abort+0x7c>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f003 f9ee 	bl	800d626 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a24a:	4b0e      	ldr	r3, [pc, #56]	@ (800a284 <MSC_BOT_Abort+0x80>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f003 f9e8 	bl	800d626 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	7a5b      	ldrb	r3, [r3, #9]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d10d      	bne.n	800a27a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <MSC_BOT_Abort+0x80>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f003 f9de 	bl	800d626 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a26a:	4b05      	ldr	r3, [pc, #20]	@ (800a280 <MSC_BOT_Abort+0x7c>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f003 f9d8 	bl	800d626 <USBD_LL_StallEP>
 800a276:	e000      	b.n	800a27a <MSC_BOT_Abort+0x76>
    return;
 800a278:	bf00      	nop
  }
}
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000006f 	.word	0x2000006f
 800a284:	2000006e 	.word	0x2000006e

0800a288 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	32b0      	adds	r2, #176	@ 0xb0
 800a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01d      	beq.n	800a2e6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	7a5b      	ldrb	r3, [r3, #9]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d10c      	bne.n	800a2cc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a2b2:	4b10      	ldr	r3, [pc, #64]	@ (800a2f4 <MSC_BOT_CplClrFeature+0x6c>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f003 f9b4 	bl	800d626 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a2be:	4b0e      	ldr	r3, [pc, #56]	@ (800a2f8 <MSC_BOT_CplClrFeature+0x70>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f003 f9ae 	bl	800d626 <USBD_LL_StallEP>
 800a2ca:	e00f      	b.n	800a2ec <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800a2cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da0a      	bge.n	800a2ea <MSC_BOT_CplClrFeature+0x62>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	7a5b      	ldrb	r3, [r3, #9]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d006      	beq.n	800a2ea <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a2dc:	2101      	movs	r1, #1
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff ff56 	bl	800a190 <MSC_BOT_SendCSW>
 800a2e4:	e002      	b.n	800a2ec <MSC_BOT_CplClrFeature+0x64>
    return;
 800a2e6:	bf00      	nop
 800a2e8:	e000      	b.n	800a2ec <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800a2ea:	bf00      	nop
  }
}
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	2000006e 	.word	0x2000006e
 800a2f8:	2000006f 	.word	0x2000006f

0800a2fc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	460b      	mov	r3, r1
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	32b0      	adds	r2, #176	@ 0xb0
 800a314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a318:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800a320:	f04f 33ff 	mov.w	r3, #4294967295
 800a324:	e168      	b.n	800a5f8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2baa      	cmp	r3, #170	@ 0xaa
 800a32c:	f000 8144 	beq.w	800a5b8 <SCSI_ProcessCmd+0x2bc>
 800a330:	2baa      	cmp	r3, #170	@ 0xaa
 800a332:	f300 8153 	bgt.w	800a5dc <SCSI_ProcessCmd+0x2e0>
 800a336:	2ba8      	cmp	r3, #168	@ 0xa8
 800a338:	f000 812c 	beq.w	800a594 <SCSI_ProcessCmd+0x298>
 800a33c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a33e:	f300 814d 	bgt.w	800a5dc <SCSI_ProcessCmd+0x2e0>
 800a342:	2b5a      	cmp	r3, #90	@ 0x5a
 800a344:	f300 80c0 	bgt.w	800a4c8 <SCSI_ProcessCmd+0x1cc>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f2c0 8147 	blt.w	800a5dc <SCSI_ProcessCmd+0x2e0>
 800a34e:	2b5a      	cmp	r3, #90	@ 0x5a
 800a350:	f200 8144 	bhi.w	800a5dc <SCSI_ProcessCmd+0x2e0>
 800a354:	a201      	add	r2, pc, #4	@ (adr r2, 800a35c <SCSI_ProcessCmd+0x60>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a4cf 	.word	0x0800a4cf
 800a360:	0800a5dd 	.word	0x0800a5dd
 800a364:	0800a5dd 	.word	0x0800a5dd
 800a368:	0800a4e1 	.word	0x0800a4e1
 800a36c:	0800a5dd 	.word	0x0800a5dd
 800a370:	0800a5dd 	.word	0x0800a5dd
 800a374:	0800a5dd 	.word	0x0800a5dd
 800a378:	0800a5dd 	.word	0x0800a5dd
 800a37c:	0800a5dd 	.word	0x0800a5dd
 800a380:	0800a5dd 	.word	0x0800a5dd
 800a384:	0800a5dd 	.word	0x0800a5dd
 800a388:	0800a5dd 	.word	0x0800a5dd
 800a38c:	0800a5dd 	.word	0x0800a5dd
 800a390:	0800a5dd 	.word	0x0800a5dd
 800a394:	0800a5dd 	.word	0x0800a5dd
 800a398:	0800a5dd 	.word	0x0800a5dd
 800a39c:	0800a5dd 	.word	0x0800a5dd
 800a3a0:	0800a5dd 	.word	0x0800a5dd
 800a3a4:	0800a4f3 	.word	0x0800a4f3
 800a3a8:	0800a5dd 	.word	0x0800a5dd
 800a3ac:	0800a5dd 	.word	0x0800a5dd
 800a3b0:	0800a5dd 	.word	0x0800a5dd
 800a3b4:	0800a5dd 	.word	0x0800a5dd
 800a3b8:	0800a5dd 	.word	0x0800a5dd
 800a3bc:	0800a5dd 	.word	0x0800a5dd
 800a3c0:	0800a5dd 	.word	0x0800a5dd
 800a3c4:	0800a529 	.word	0x0800a529
 800a3c8:	0800a505 	.word	0x0800a505
 800a3cc:	0800a5dd 	.word	0x0800a5dd
 800a3d0:	0800a5dd 	.word	0x0800a5dd
 800a3d4:	0800a517 	.word	0x0800a517
 800a3d8:	0800a5dd 	.word	0x0800a5dd
 800a3dc:	0800a5dd 	.word	0x0800a5dd
 800a3e0:	0800a5dd 	.word	0x0800a5dd
 800a3e4:	0800a5dd 	.word	0x0800a5dd
 800a3e8:	0800a54d 	.word	0x0800a54d
 800a3ec:	0800a5dd 	.word	0x0800a5dd
 800a3f0:	0800a55f 	.word	0x0800a55f
 800a3f4:	0800a5dd 	.word	0x0800a5dd
 800a3f8:	0800a5dd 	.word	0x0800a5dd
 800a3fc:	0800a583 	.word	0x0800a583
 800a400:	0800a5dd 	.word	0x0800a5dd
 800a404:	0800a5a7 	.word	0x0800a5a7
 800a408:	0800a5dd 	.word	0x0800a5dd
 800a40c:	0800a5dd 	.word	0x0800a5dd
 800a410:	0800a5dd 	.word	0x0800a5dd
 800a414:	0800a5dd 	.word	0x0800a5dd
 800a418:	0800a5cb 	.word	0x0800a5cb
 800a41c:	0800a5dd 	.word	0x0800a5dd
 800a420:	0800a5dd 	.word	0x0800a5dd
 800a424:	0800a5dd 	.word	0x0800a5dd
 800a428:	0800a5dd 	.word	0x0800a5dd
 800a42c:	0800a5dd 	.word	0x0800a5dd
 800a430:	0800a5dd 	.word	0x0800a5dd
 800a434:	0800a5dd 	.word	0x0800a5dd
 800a438:	0800a5dd 	.word	0x0800a5dd
 800a43c:	0800a5dd 	.word	0x0800a5dd
 800a440:	0800a5dd 	.word	0x0800a5dd
 800a444:	0800a5dd 	.word	0x0800a5dd
 800a448:	0800a5dd 	.word	0x0800a5dd
 800a44c:	0800a5dd 	.word	0x0800a5dd
 800a450:	0800a5dd 	.word	0x0800a5dd
 800a454:	0800a5dd 	.word	0x0800a5dd
 800a458:	0800a5dd 	.word	0x0800a5dd
 800a45c:	0800a5dd 	.word	0x0800a5dd
 800a460:	0800a5dd 	.word	0x0800a5dd
 800a464:	0800a5dd 	.word	0x0800a5dd
 800a468:	0800a5dd 	.word	0x0800a5dd
 800a46c:	0800a5dd 	.word	0x0800a5dd
 800a470:	0800a5dd 	.word	0x0800a5dd
 800a474:	0800a5dd 	.word	0x0800a5dd
 800a478:	0800a5dd 	.word	0x0800a5dd
 800a47c:	0800a5dd 	.word	0x0800a5dd
 800a480:	0800a5dd 	.word	0x0800a5dd
 800a484:	0800a5dd 	.word	0x0800a5dd
 800a488:	0800a5dd 	.word	0x0800a5dd
 800a48c:	0800a5dd 	.word	0x0800a5dd
 800a490:	0800a5dd 	.word	0x0800a5dd
 800a494:	0800a5dd 	.word	0x0800a5dd
 800a498:	0800a5dd 	.word	0x0800a5dd
 800a49c:	0800a5dd 	.word	0x0800a5dd
 800a4a0:	0800a5dd 	.word	0x0800a5dd
 800a4a4:	0800a5dd 	.word	0x0800a5dd
 800a4a8:	0800a5dd 	.word	0x0800a5dd
 800a4ac:	0800a5dd 	.word	0x0800a5dd
 800a4b0:	0800a5dd 	.word	0x0800a5dd
 800a4b4:	0800a5dd 	.word	0x0800a5dd
 800a4b8:	0800a5dd 	.word	0x0800a5dd
 800a4bc:	0800a5dd 	.word	0x0800a5dd
 800a4c0:	0800a5dd 	.word	0x0800a5dd
 800a4c4:	0800a53b 	.word	0x0800a53b
 800a4c8:	2b9e      	cmp	r3, #158	@ 0x9e
 800a4ca:	d051      	beq.n	800a570 <SCSI_ProcessCmd+0x274>
 800a4cc:	e086      	b.n	800a5dc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f893 	bl	800a600 <SCSI_TestUnitReady>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4de:	e089      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800a4e0:	7afb      	ldrb	r3, [r7, #11]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fb9a 	bl	800ac20 <SCSI_RequestSense>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f0:	e080      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 f8db 	bl	800a6b4 <SCSI_Inquiry>
 800a4fe:	4603      	mov	r3, r0
 800a500:	75fb      	strb	r3, [r7, #23]
      break;
 800a502:	e077      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4619      	mov	r1, r3
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 fc56 	bl	800adbc <SCSI_StartStopUnit>
 800a510:	4603      	mov	r3, r0
 800a512:	75fb      	strb	r3, [r7, #23]
      break;
 800a514:	e06e      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800a516:	7afb      	ldrb	r3, [r7, #11]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	4619      	mov	r1, r3
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fca2 	bl	800ae66 <SCSI_AllowPreventRemovable>
 800a522:	4603      	mov	r3, r0
 800a524:	75fb      	strb	r3, [r7, #23]
      break;
 800a526:	e065      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	4619      	mov	r1, r3
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 faea 	bl	800ab08 <SCSI_ModeSense6>
 800a534:	4603      	mov	r3, r0
 800a536:	75fb      	strb	r3, [r7, #23]
      break;
 800a538:	e05c      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800a53a:	7afb      	ldrb	r3, [r7, #11]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fb27 	bl	800ab94 <SCSI_ModeSense10>
 800a546:	4603      	mov	r3, r0
 800a548:	75fb      	strb	r3, [r7, #23]
      break;
 800a54a:	e053      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4619      	mov	r1, r3
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fa5c 	bl	800aa10 <SCSI_ReadFormatCapacity>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]
      break;
 800a55c:	e04a      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4619      	mov	r1, r3
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f921 	bl	800a7ac <SCSI_ReadCapacity10>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]
      break;
 800a56e:	e041      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800a570:	7afb      	ldrb	r3, [r7, #11]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	4619      	mov	r1, r3
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f996 	bl	800a8a8 <SCSI_ReadCapacity16>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]
      break;
 800a580:	e038      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800a582:	7afb      	ldrb	r3, [r7, #11]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	4619      	mov	r1, r3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fc99 	bl	800aec0 <SCSI_Read10>
 800a58e:	4603      	mov	r3, r0
 800a590:	75fb      	strb	r3, [r7, #23]
      break;
 800a592:	e02f      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	4619      	mov	r1, r3
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fd3a 	bl	800b014 <SCSI_Read12>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a4:	e026      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fde5 	bl	800b17c <SCSI_Write10>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b6:	e01d      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a5b8:	7afb      	ldrb	r3, [r7, #11]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 feb2 	bl	800b328 <SCSI_Write12>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c8:	e014      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 ff8f 	bl	800b4f4 <SCSI_Verify10>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5da:	e00b      	b.n	800a5f4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a5dc:	7af9      	ldrb	r1, [r7, #11]
 800a5de:	2320      	movs	r3, #32
 800a5e0:	2205      	movs	r2, #5
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f000 fb9f 	bl	800ad26 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a5ee:	23ff      	movs	r3, #255	@ 0xff
 800a5f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f2:	bf00      	nop
  }

  return ret;
 800a5f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	460b      	mov	r3, r1
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	32b0      	adds	r2, #176	@ 0xb0
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
 800a628:	e03f      	b.n	800a6aa <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a63a:	2320      	movs	r3, #32
 800a63c:	2205      	movs	r2, #5
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fb71 	bl	800ad26 <SCSI_SenseCode>

    return -1;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	e02f      	b.n	800a6aa <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a650:	2b02      	cmp	r3, #2
 800a652:	d10b      	bne.n	800a66c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a654:	7af9      	ldrb	r1, [r7, #11]
 800a656:	233a      	movs	r3, #58	@ 0x3a
 800a658:	2202      	movs	r2, #2
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fb63 	bl	800ad26 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2205      	movs	r2, #5
 800a664:	721a      	strb	r2, [r3, #8]
    return -1;
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	e01e      	b.n	800a6aa <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	33b0      	adds	r3, #176	@ 0xb0
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	7afa      	ldrb	r2, [r7, #11]
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a68a:	7af9      	ldrb	r1, [r7, #11]
 800a68c:	233a      	movs	r3, #58	@ 0x3a
 800a68e:	2202      	movs	r2, #2
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fb48 	bl	800ad26 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2205      	movs	r2, #5
 800a69a:	721a      	strb	r2, [r3, #8]

    return -1;
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	e003      	b.n	800a6aa <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	60da      	str	r2, [r3, #12]

  return 0;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32b0      	adds	r2, #176	@ 0xb0
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6dc:	e05e      	b.n	800a79c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	2205      	movs	r2, #5
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fb17 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800a6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fc:	e04e      	b.n	800a79c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3301      	adds	r3, #1
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d020      	beq.n	800a74e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3302      	adds	r3, #2
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800a716:	2206      	movs	r2, #6
 800a718:	4922      	ldr	r1, [pc, #136]	@ (800a7a4 <SCSI_Inquiry+0xf0>)
 800a71a:	69b8      	ldr	r0, [r7, #24]
 800a71c:	f001 f870 	bl	800b800 <SCSI_UpdateBotData>
 800a720:	e03b      	b.n	800a79a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3302      	adds	r3, #2
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b80      	cmp	r3, #128	@ 0x80
 800a72a:	d105      	bne.n	800a738 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800a72c:	2208      	movs	r2, #8
 800a72e:	491e      	ldr	r1, [pc, #120]	@ (800a7a8 <SCSI_Inquiry+0xf4>)
 800a730:	69b8      	ldr	r0, [r7, #24]
 800a732:	f001 f865 	bl	800b800 <SCSI_UpdateBotData>
 800a736:	e030      	b.n	800a79a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a73e:	2324      	movs	r3, #36	@ 0x24
 800a740:	2205      	movs	r2, #5
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 faef 	bl	800ad26 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	e026      	b.n	800a79c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	33b0      	adds	r3, #176	@ 0xb0
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a75e:	69d9      	ldr	r1, [r3, #28]
 800a760:	7afa      	ldrb	r2, [r7, #11]
 800a762:	4613      	mov	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a76a:	440b      	add	r3, r1
 800a76c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	3304      	adds	r3, #4
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	3305      	adds	r3, #5
 800a776:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	8bfb      	ldrh	r3, [r7, #30]
 800a782:	4293      	cmp	r3, r2
 800a784:	d303      	bcc.n	800a78e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3304      	adds	r3, #4
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a78e:	8bfb      	ldrh	r3, [r7, #30]
 800a790:	461a      	mov	r2, r3
 800a792:	6979      	ldr	r1, [r7, #20]
 800a794:	69b8      	ldr	r0, [r7, #24]
 800a796:	f001 f833 	bl	800b800 <SCSI_UpdateBotData>
  }

  return 0;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20000070 	.word	0x20000070
 800a7a8:	20000078 	.word	0x20000078

0800a7ac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	32b0      	adds	r2, #176	@ 0xb0
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d4:	e064      	b.n	800a8a0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	33b0      	adds	r3, #176	@ 0xb0
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800a7f4:	7af8      	ldrb	r0, [r7, #11]
 800a7f6:	4798      	blx	r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a7fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <SCSI_ReadCapacity10+0x62>
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d108      	bne.n	800a820 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a80e:	7af9      	ldrb	r1, [r7, #11]
 800a810:	233a      	movs	r3, #58	@ 0x3a
 800a812:	2202      	movs	r2, #2
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fa86 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	e03f      	b.n	800a8a0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a826:	3b01      	subs	r3, #1
 800a828:	0e1b      	lsrs	r3, r3, #24
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a836:	3b01      	subs	r3, #1
 800a838:	0c1b      	lsrs	r3, r3, #16
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a846:	3b01      	subs	r3, #1
 800a848:	0a1b      	lsrs	r3, r3, #8
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a856:	b2db      	uxtb	r3, r3
 800a858:	3b01      	subs	r3, #1
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a866:	161b      	asrs	r3, r3, #24
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a874:	141b      	asrs	r3, r3, #16
 800a876:	b2da      	uxtb	r2, r3
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b29b      	uxth	r3, r3
 800a886:	b2da      	uxtb	r2, r3
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a892:	b2da      	uxtb	r2, r3
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2208      	movs	r2, #8
 800a89c:	60da      	str	r2, [r3, #12]

  return 0;
 800a89e:	2300      	movs	r3, #0

}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	32b0      	adds	r2, #176	@ 0xb0
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d0:	e09a      	b.n	800aa08 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	33b0      	adds	r3, #176	@ 0xb0
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800a8f0:	7af8      	ldrb	r0, [r7, #11]
 800a8f2:	4798      	blx	r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <SCSI_ReadCapacity16+0x62>
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a906:	2b02      	cmp	r3, #2
 800a908:	d108      	bne.n	800a91c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a90a:	7af9      	ldrb	r1, [r7, #11]
 800a90c:	233a      	movs	r3, #58	@ 0x3a
 800a90e:	2202      	movs	r2, #2
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f000 fa08 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
 800a91a:	e075      	b.n	800aa08 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	330a      	adds	r3, #10
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	330b      	adds	r3, #11
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a92c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	330c      	adds	r3, #12
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a936:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	320d      	adds	r2, #13
 800a93c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a93e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
 800a948:	e008      	b.n	800a95c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	4413      	add	r3, r2
 800a950:	3310      	adds	r3, #16
 800a952:	2200      	movs	r2, #0
 800a954:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	3301      	adds	r3, #1
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	429a      	cmp	r2, r3
 800a964:	d3f1      	bcc.n	800a94a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a96c:	3b01      	subs	r3, #1
 800a96e:	0e1b      	lsrs	r3, r3, #24
 800a970:	b2da      	uxtb	r2, r3
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a97c:	3b01      	subs	r3, #1
 800a97e:	0c1b      	lsrs	r3, r3, #16
 800a980:	b2da      	uxtb	r2, r3
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a98c:	3b01      	subs	r3, #1
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	b2da      	uxtb	r2, r3
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a9ac:	161b      	asrs	r3, r3, #24
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a9ba:	141b      	asrs	r3, r3, #16
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	330a      	adds	r3, #10
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	330b      	adds	r3, #11
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a9ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	330c      	adds	r3, #12
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a9f8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	320d      	adds	r2, #13
 800a9fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800aa00:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	60da      	str	r2, [r3, #12]

  return 0;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3720      	adds	r7, #32
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	32b0      	adds	r2, #176	@ 0xb0
 800aa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	e061      	b.n	800aafe <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	33b0      	adds	r3, #176	@ 0xb0
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f107 0214 	add.w	r2, r7, #20
 800aa50:	f107 0110 	add.w	r1, r7, #16
 800aa54:	7af8      	ldrb	r0, [r7, #11]
 800aa56:	4798      	blx	r3
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800aa5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <SCSI_ReadFormatCapacity+0x5e>
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d108      	bne.n	800aa80 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aa6e:	7af9      	ldrb	r1, [r7, #11]
 800aa70:	233a      	movs	r3, #58	@ 0x3a
 800aa72:	2202      	movs	r2, #2
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 f956 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7e:	e03e      	b.n	800aafe <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800aa80:	2300      	movs	r3, #0
 800aa82:	83fb      	strh	r3, [r7, #30]
 800aa84:	e007      	b.n	800aa96 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800aa86:	8bfb      	ldrh	r3, [r7, #30]
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800aa90:	8bfb      	ldrh	r3, [r7, #30]
 800aa92:	3301      	adds	r3, #1
 800aa94:	83fb      	strh	r3, [r7, #30]
 800aa96:	8bfb      	ldrh	r3, [r7, #30]
 800aa98:	2b0b      	cmp	r3, #11
 800aa9a:	d9f4      	bls.n	800aa86 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	0e1b      	lsrs	r3, r3, #24
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	0a1b      	lsrs	r3, r3, #8
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	3b01      	subs	r3, #1
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	2202      	movs	r2, #2
 800aad6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800aad8:	8abb      	ldrh	r3, [r7, #20]
 800aada:	141b      	asrs	r3, r3, #16
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800aae2:	8abb      	ldrh	r3, [r7, #20]
 800aae4:	0a1b      	lsrs	r3, r3, #8
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800aaee:	8abb      	ldrh	r3, [r7, #20]
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	220c      	movs	r2, #12
 800aafa:	60da      	str	r2, [r3, #12]

  return 0;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	460b      	mov	r3, r1
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	32b0      	adds	r2, #176	@ 0xb0
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ab26:	2304      	movs	r3, #4
 800ab28:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295
 800ab34:	e027      	b.n	800ab86 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	33b0      	adds	r3, #176	@ 0xb0
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	7afa      	ldrb	r2, [r7, #11]
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4798      	blx	r3
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800ab54:	4b0e      	ldr	r3, [pc, #56]	@ (800ab90 <SCSI_ModeSense6+0x88>)
 800ab56:	789b      	ldrb	r3, [r3, #2]
 800ab58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab90 <SCSI_ModeSense6+0x88>)
 800ab60:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3304      	adds	r3, #4
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	8afb      	ldrh	r3, [r7, #22]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d303      	bcc.n	800ab78 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ab78:	8afb      	ldrh	r3, [r7, #22]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4904      	ldr	r1, [pc, #16]	@ (800ab90 <SCSI_ModeSense6+0x88>)
 800ab7e:	6938      	ldr	r0, [r7, #16]
 800ab80:	f000 fe3e 	bl	800b800 <SCSI_UpdateBotData>

  return 0;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000080 	.word	0x20000080

0800ab94 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	32b0      	adds	r2, #176	@ 0xb0
 800abac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800abb2:	2308      	movs	r3, #8
 800abb4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	e027      	b.n	800ac12 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	33b0      	adds	r3, #176	@ 0xb0
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	7afa      	ldrb	r2, [r7, #11]
 800abd6:	4610      	mov	r0, r2
 800abd8:	4798      	blx	r3
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d006      	beq.n	800abee <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800abe0:	4b0e      	ldr	r3, [pc, #56]	@ (800ac1c <SCSI_ModeSense10+0x88>)
 800abe2:	78db      	ldrb	r3, [r3, #3]
 800abe4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	4b0c      	ldr	r3, [pc, #48]	@ (800ac1c <SCSI_ModeSense10+0x88>)
 800abec:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3308      	adds	r3, #8
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	8afb      	ldrh	r3, [r7, #22]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d303      	bcc.n	800ac04 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3308      	adds	r3, #8
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800ac04:	8afb      	ldrh	r3, [r7, #22]
 800ac06:	461a      	mov	r2, r3
 800ac08:	4904      	ldr	r1, [pc, #16]	@ (800ac1c <SCSI_ModeSense10+0x88>)
 800ac0a:	6938      	ldr	r0, [r7, #16]
 800ac0c:	f000 fdf8 	bl	800b800 <SCSI_UpdateBotData>

  return 0;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000084 	.word	0x20000084

0800ac20 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	32b0      	adds	r2, #176	@ 0xb0
 800ac38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800ac44:	f04f 33ff 	mov.w	r3, #4294967295
 800ac48:	e069      	b.n	800ad1e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ac5a:	2320      	movs	r3, #32
 800ac5c:	2205      	movs	r2, #5
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 f861 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800ac64:	f04f 33ff 	mov.w	r3, #4294967295
 800ac68:	e059      	b.n	800ad1e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
 800ac6e:	e007      	b.n	800ac80 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4413      	add	r3, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	75fb      	strb	r3, [r7, #23]
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b11      	cmp	r3, #17
 800ac84:	d9f4      	bls.n	800ac70 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2270      	movs	r2, #112	@ 0x70
 800ac8a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	220c      	movs	r2, #12
 800ac90:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d02e      	beq.n	800ad00 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800aca8:	461a      	mov	r2, r3
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	3248      	adds	r2, #72	@ 0x48
 800acae:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	3348      	adds	r3, #72	@ 0x48
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4413      	add	r3, r2
 800acc4:	791a      	ldrb	r2, [r3, #4]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	3348      	adds	r3, #72	@ 0x48
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	4413      	add	r3, r2
 800acd8:	795a      	ldrb	r2, [r3, #5]
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800ace4:	3301      	adds	r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d103      	bne.n	800ad00 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2212      	movs	r2, #18
 800ad04:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3304      	adds	r3, #4
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b12      	cmp	r3, #18
 800ad0e:	d805      	bhi.n	800ad1c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	461a      	mov	r2, r3
 800ad34:	4603      	mov	r3, r0
 800ad36:	70fb      	strb	r3, [r7, #3]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70bb      	strb	r3, [r7, #2]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	32b0      	adds	r2, #176	@ 0xb0
 800ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d02c      	beq.n	800adb0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3248      	adds	r2, #72	@ 0x48
 800ad62:	78b9      	ldrb	r1, [r7, #2]
 800ad64:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	3348      	adds	r3, #72	@ 0x48
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	787a      	ldrb	r2, [r7, #1]
 800ad78:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	3348      	adds	r3, #72	@ 0x48
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	4413      	add	r3, r2
 800ad88:	2200      	movs	r2, #0
 800ad8a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ad92:	3301      	adds	r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d105      	bne.n	800adb2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800adae:	e000      	b.n	800adb2 <SCSI_SenseCode+0x8c>
    return;
 800adb0:	bf00      	nop
  }
}
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	460b      	mov	r3, r1
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	32b0      	adds	r2, #176	@ 0xb0
 800add4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295
 800ade4:	e03b      	b.n	800ae5e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10f      	bne.n	800ae10 <SCSI_StartStopUnit+0x54>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3304      	adds	r3, #4
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d108      	bne.n	800ae10 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800adfe:	7af9      	ldrb	r1, [r7, #11]
 800ae00:	2324      	movs	r3, #36	@ 0x24
 800ae02:	2205      	movs	r2, #5
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff ff8e 	bl	800ad26 <SCSI_SenseCode>

    return -1;
 800ae0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0e:	e026      	b.n	800ae5e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3304      	adds	r3, #4
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f003 0303 	and.w	r3, r3, #3
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d104      	bne.n	800ae28 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800ae26:	e016      	b.n	800ae56 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	f003 0303 	and.w	r3, r3, #3
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d104      	bne.n	800ae40 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2202      	movs	r2, #2
 800ae3a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800ae3e:	e00a      	b.n	800ae56 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3304      	adds	r3, #4
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 0303 	and.w	r3, r3, #3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d103      	bne.n	800ae56 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	60da      	str	r2, [r3, #12]

  return 0;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	607a      	str	r2, [r7, #4]
 800ae72:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	32b0      	adds	r2, #176	@ 0xb0
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ae8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8e:	e011      	b.n	800aeb4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3304      	adds	r3, #4
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d104      	bne.n	800aea4 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800aea2:	e003      	b.n	800aeac <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	60da      	str	r2, [r3, #12]

  return 0;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	460b      	mov	r3, r1
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	32b0      	adds	r2, #176	@ 0xb0
 800aed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aedc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <SCSI_Read10+0x2a>
  {
    return -1;
 800aee4:	f04f 33ff 	mov.w	r3, #4294967295
 800aee8:	e090      	b.n	800b00c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	7a1b      	ldrb	r3, [r3, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8082 	bne.w	800aff8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	db0a      	blt.n	800af16 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800af06:	2320      	movs	r3, #32
 800af08:	2205      	movs	r2, #5
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7ff ff0b 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800af10:	f04f 33ff 	mov.w	r3, #4294967295
 800af14:	e07a      	b.n	800b00c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d108      	bne.n	800af32 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800af20:	7af9      	ldrb	r1, [r7, #11]
 800af22:	233a      	movs	r3, #58	@ 0x3a
 800af24:	2202      	movs	r2, #2
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff fefd 	bl	800ad26 <SCSI_SenseCode>

      return -1;
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	e06c      	b.n	800b00c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	33b0      	adds	r3, #176	@ 0xb0
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	7afa      	ldrb	r2, [r7, #11]
 800af46:	4610      	mov	r0, r2
 800af48:	4798      	blx	r3
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800af50:	7af9      	ldrb	r1, [r7, #11]
 800af52:	233a      	movs	r3, #58	@ 0x3a
 800af54:	2202      	movs	r2, #2
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fee5 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e054      	b.n	800b00c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3302      	adds	r3, #2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3303      	adds	r3, #3
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af72:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3304      	adds	r3, #4
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800af7c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	3205      	adds	r2, #5
 800af82:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800af84:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3307      	adds	r3, #7
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	3208      	adds	r2, #8
 800af98:	7812      	ldrb	r2, [r2, #0]
 800af9a:	431a      	orrs	r2, r3
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800afae:	7af9      	ldrb	r1, [r7, #11]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 fadc 	bl	800b56e <SCSI_CheckAddressRange>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	da02      	bge.n	800afc2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800afbc:	f04f 33ff 	mov.w	r3, #4294967295
 800afc0:	e024      	b.n	800b00c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800afce:	6979      	ldr	r1, [r7, #20]
 800afd0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800afd4:	fb01 f303 	mul.w	r3, r1, r3
 800afd8:	429a      	cmp	r2, r3
 800afda:	d00a      	beq.n	800aff2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800afe2:	2320      	movs	r3, #32
 800afe4:	2205      	movs	r2, #5
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7ff fe9d 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	e00c      	b.n	800b00c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2202      	movs	r2, #2
 800aff6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800affe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b000:	7afb      	ldrb	r3, [r7, #11]
 800b002:	4619      	mov	r1, r3
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f000 fadf 	bl	800b5c8 <SCSI_ProcessRead>
 800b00a:	4603      	mov	r3, r0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	460b      	mov	r3, r1
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	32b0      	adds	r2, #176	@ 0xb0
 800b02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b030:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <SCSI_Read12+0x2a>
  {
    return -1;
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	e09a      	b.n	800b174 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	7a1b      	ldrb	r3, [r3, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 808c 	bne.w	800b160 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b04e:	b25b      	sxtb	r3, r3
 800b050:	2b00      	cmp	r3, #0
 800b052:	db0a      	blt.n	800b06a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b05a:	2320      	movs	r3, #32
 800b05c:	2205      	movs	r2, #5
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7ff fe61 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b064:	f04f 33ff 	mov.w	r3, #4294967295
 800b068:	e084      	b.n	800b174 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b070:	2b02      	cmp	r3, #2
 800b072:	d108      	bne.n	800b086 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b074:	7af9      	ldrb	r1, [r7, #11]
 800b076:	233a      	movs	r3, #58	@ 0x3a
 800b078:	2202      	movs	r2, #2
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff fe53 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	e076      	b.n	800b174 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	33b0      	adds	r3, #176	@ 0xb0
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	7afa      	ldrb	r2, [r7, #11]
 800b09a:	4610      	mov	r0, r2
 800b09c:	4798      	blx	r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d008      	beq.n	800b0b6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b0a4:	7af9      	ldrb	r1, [r7, #11]
 800b0a6:	233a      	movs	r3, #58	@ 0x3a
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff fe3b 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b4:	e05e      	b.n	800b174 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3303      	adds	r3, #3
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b0d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	3205      	adds	r2, #5
 800b0d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b0d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3306      	adds	r3, #6
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3307      	adds	r3, #7
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b0f0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b0fa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	3209      	adds	r2, #9
 800b100:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b102:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b116:	7af9      	ldrb	r1, [r7, #11]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fa28 	bl	800b56e <SCSI_CheckAddressRange>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	da02      	bge.n	800b12a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	e024      	b.n	800b174 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b136:	6979      	ldr	r1, [r7, #20]
 800b138:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800b13c:	fb01 f303 	mul.w	r3, r1, r3
 800b140:	429a      	cmp	r2, r3
 800b142:	d00a      	beq.n	800b15a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b14a:	2320      	movs	r3, #32
 800b14c:	2205      	movs	r2, #5
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f7ff fde9 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b154:	f04f 33ff 	mov.w	r3, #4294967295
 800b158:	e00c      	b.n	800b174 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2202      	movs	r2, #2
 800b15e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b166:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b168:	7afb      	ldrb	r3, [r7, #11]
 800b16a:	4619      	mov	r1, r3
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 fa2b 	bl	800b5c8 <SCSI_ProcessRead>
 800b172:	4603      	mov	r3, r0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	460b      	mov	r3, r1
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	32b0      	adds	r2, #176	@ 0xb0
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <SCSI_Write10+0x2a>
  {
    return -1;
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	e0ba      	b.n	800b31c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	7a1b      	ldrb	r3, [r3, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f040 80b0 	bne.w	800b310 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b1c0:	2320      	movs	r3, #32
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff fdae 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ce:	e0a5      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da0a      	bge.n	800b1f2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b1e2:	2320      	movs	r3, #32
 800b1e4:	2205      	movs	r2, #5
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff fd9d 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f0:	e094      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	33b0      	adds	r3, #176	@ 0xb0
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	7afa      	ldrb	r2, [r7, #11]
 800b206:	4610      	mov	r0, r2
 800b208:	4798      	blx	r3
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d008      	beq.n	800b222 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b210:	7af9      	ldrb	r1, [r7, #11]
 800b212:	233a      	movs	r3, #58	@ 0x3a
 800b214:	2202      	movs	r2, #2
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fd85 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b21c:	f04f 33ff 	mov.w	r3, #4294967295
 800b220:	e07c      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	33b0      	adds	r3, #176	@ 0xb0
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	7afa      	ldrb	r2, [r7, #11]
 800b236:	4610      	mov	r0, r2
 800b238:	4798      	blx	r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d008      	beq.n	800b252 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b240:	7af9      	ldrb	r1, [r7, #11]
 800b242:	2327      	movs	r3, #39	@ 0x27
 800b244:	2202      	movs	r2, #2
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f7ff fd6d 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	e064      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3302      	adds	r3, #2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3303      	adds	r3, #3
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b262:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3304      	adds	r3, #4
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b26c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	3205      	adds	r2, #5
 800b272:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b274:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3307      	adds	r3, #7
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	3208      	adds	r2, #8
 800b288:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b28a:	431a      	orrs	r2, r3
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b29e:	7af9      	ldrb	r1, [r7, #11]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f964 	bl	800b56e <SCSI_CheckAddressRange>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da02      	bge.n	800b2b2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b0:	e034      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b2be:	fb02 f303 	mul.w	r3, r2, r3
 800b2c2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d00a      	beq.n	800b2e6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b2d6:	2320      	movs	r3, #32
 800b2d8:	2205      	movs	r2, #5
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fd23 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	e01a      	b.n	800b31c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ec:	bf28      	it	cs
 800b2ee:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b2f2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b324 <SCSI_Write10+0x1a8>)
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f103 0210 	add.w	r2, r3, #16
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f002 fa37 	bl	800d77a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e005      	b.n	800b31c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	4619      	mov	r1, r3
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f9dd 	bl	800b6d4 <SCSI_ProcessWrite>
 800b31a:	4603      	mov	r3, r0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	2000006f 	.word	0x2000006f

0800b328 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	460b      	mov	r3, r1
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	32b0      	adds	r2, #176	@ 0xb0
 800b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b344:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <SCSI_Write12+0x2a>
  {
    return -1;
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295
 800b350:	e0ca      	b.n	800b4e8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	7a1b      	ldrb	r3, [r3, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 80c0 	bne.w	800b4dc <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b36c:	2320      	movs	r3, #32
 800b36e:	2205      	movs	r2, #5
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fcd8 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b376:	f04f 33ff 	mov.w	r3, #4294967295
 800b37a:	e0b5      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b382:	b25b      	sxtb	r3, r3
 800b384:	2b00      	cmp	r3, #0
 800b386:	da0a      	bge.n	800b39e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b38e:	2320      	movs	r3, #32
 800b390:	2205      	movs	r2, #5
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff fcc7 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	e0a4      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	33b0      	adds	r3, #176	@ 0xb0
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	7afa      	ldrb	r2, [r7, #11]
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	4798      	blx	r3
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b3bc:	7af9      	ldrb	r1, [r7, #11]
 800b3be:	233a      	movs	r3, #58	@ 0x3a
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff fcaf 	bl	800ad26 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2205      	movs	r2, #5
 800b3cc:	721a      	strb	r2, [r3, #8]
      return -1;
 800b3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d2:	e089      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	33b0      	adds	r3, #176	@ 0xb0
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	7afa      	ldrb	r2, [r7, #11]
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b3f2:	7af9      	ldrb	r1, [r7, #11]
 800b3f4:	2327      	movs	r3, #39	@ 0x27
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff fc94 	bl	800ad26 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2205      	movs	r2, #5
 800b402:	721a      	strb	r2, [r3, #8]
      return -1;
 800b404:	f04f 33ff 	mov.w	r3, #4294967295
 800b408:	e06e      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3302      	adds	r3, #2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3303      	adds	r3, #3
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b41a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3304      	adds	r3, #4
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b424:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	3205      	adds	r2, #5
 800b42a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b42c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3306      	adds	r3, #6
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3307      	adds	r3, #7
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b444:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3308      	adds	r3, #8
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b44e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	3209      	adds	r2, #9
 800b454:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b456:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b46a:	7af9      	ldrb	r1, [r7, #11]
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 f87e 	bl	800b56e <SCSI_CheckAddressRange>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	da02      	bge.n	800b47e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	e034      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d00a      	beq.n	800b4b2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b4a2:	2320      	movs	r3, #32
 800b4a4:	2205      	movs	r2, #5
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f7ff fc3d 	bl	800ad26 <SCSI_SenseCode>
      return -1;
 800b4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b0:	e01a      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b8:	bf28      	it	cs
 800b4ba:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b4be:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f0 <SCSI_Write12+0x1c8>)
 800b4c8:	7819      	ldrb	r1, [r3, #0]
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f103 0210 	add.w	r2, r3, #16
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f002 f951 	bl	800d77a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e005      	b.n	800b4e8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f8f7 	bl	800b6d4 <SCSI_ProcessWrite>
 800b4e6:	4603      	mov	r3, r0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	2000006f 	.word	0x2000006f

0800b4f4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	32b0      	adds	r2, #176	@ 0xb0
 800b50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b510:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <SCSI_Verify10+0x2a>
  {
    return -1;
 800b518:	f04f 33ff 	mov.w	r3, #4294967295
 800b51c:	e023      	b.n	800b566 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3301      	adds	r3, #1
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 0302 	and.w	r3, r3, #2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d008      	beq.n	800b53e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b52c:	7af9      	ldrb	r1, [r7, #11]
 800b52e:	2324      	movs	r3, #36	@ 0x24
 800b530:	2205      	movs	r2, #5
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fbf7 	bl	800ad26 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	e013      	b.n	800b566 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b54a:	7af9      	ldrb	r1, [r7, #11]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 f80e 	bl	800b56e <SCSI_CheckAddressRange>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	da02      	bge.n	800b55e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e003      	b.n	800b566 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2200      	movs	r2, #0
 800b562:	60da      	str	r2, [r3, #12]

  return 0;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
 800b57a:	460b      	mov	r3, r1
 800b57c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	32b0      	adds	r2, #176	@ 0xb0
 800b588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b594:	f04f 33ff 	mov.w	r3, #4294967295
 800b598:	e011      	b.n	800b5be <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	441a      	add	r2, r3
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d908      	bls.n	800b5bc <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b5aa:	7af9      	ldrb	r1, [r7, #11]
 800b5ac:	2321      	movs	r3, #33	@ 0x21
 800b5ae:	2205      	movs	r2, #5
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7ff fbb8 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ba:	e000      	b.n	800b5be <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
	...

0800b5c8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	32b0      	adds	r2, #176	@ 0xb0
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ee:	e06a      	b.n	800b6c6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b5fc:	fb02 f303 	mul.w	r3, r2, r3
 800b600:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b608:	bf28      	it	cs
 800b60a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b60e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	33b0      	adds	r3, #176	@ 0xb0
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	691c      	ldr	r4, [r3, #16]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f103 0110 	add.w	r1, r3, #16
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b634:	4618      	mov	r0, r3
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	78f8      	ldrb	r0, [r7, #3]
 800b640:	47a0      	blx	r4
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	da08      	bge.n	800b65a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b648:	78f9      	ldrb	r1, [r7, #3]
 800b64a:	2311      	movs	r3, #17
 800b64c:	2204      	movs	r2, #4
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff fb69 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	e035      	b.n	800b6c6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b65a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d0 <SCSI_ProcessRead+0x108>)
 800b65c:	7819      	ldrb	r1, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f103 0210 	add.w	r2, r3, #16
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f002 f866 	bl	800d738 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b678:	4619      	mov	r1, r3
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b680:	441a      	add	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b694:	4619      	mov	r1, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	fbb3 f3f1 	udiv	r3, r3, r1
 800b69c:	1ad2      	subs	r2, r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	1ad2      	subs	r2, r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2203      	movs	r2, #3
 800b6c2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd90      	pop	{r4, r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000006e 	.word	0x2000006e

0800b6d4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b6d4:	b590      	push	{r4, r7, lr}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32b0      	adds	r2, #176	@ 0xb0
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fa:	e07a      	b.n	800b7f2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b708:	fb02 f303 	mul.w	r3, r2, r3
 800b70c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b714:	bf28      	it	cs
 800b716:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b71a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	33b0      	adds	r3, #176	@ 0xb0
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	695c      	ldr	r4, [r3, #20]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f103 0110 	add.w	r1, r3, #16
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b740:	4618      	mov	r0, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b748:	b29b      	uxth	r3, r3
 800b74a:	78f8      	ldrb	r0, [r7, #3]
 800b74c:	47a0      	blx	r4
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	da08      	bge.n	800b766 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b754:	78f9      	ldrb	r1, [r7, #3]
 800b756:	2303      	movs	r3, #3
 800b758:	2204      	movs	r2, #4
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fae3 	bl	800ad26 <SCSI_SenseCode>
    return -1;
 800b760:	f04f 33ff 	mov.w	r3, #4294967295
 800b764:	e045      	b.n	800b7f2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b772:	4619      	mov	r1, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	fbb3 f3f1 	udiv	r3, r3, r1
 800b77a:	441a      	add	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b78e:	4619      	mov	r1, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	fbb3 f3f1 	udiv	r3, r3, r1
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d104      	bne.n	800b7c2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7fe fce8 	bl	800a190 <MSC_BOT_SendCSW>
 800b7c0:	e016      	b.n	800b7f0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d6:	bf28      	it	cs
 800b7d8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b7dc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b7de:	4b07      	ldr	r3, [pc, #28]	@ (800b7fc <SCSI_ProcessWrite+0x128>)
 800b7e0:	7819      	ldrb	r1, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f103 0210 	add.w	r2, r3, #16
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 ffc5 	bl	800d77a <USBD_LL_PrepareReceive>
  }

  return 0;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd90      	pop	{r4, r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	2000006f 	.word	0x2000006f

0800b800 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b818:	f04f 33ff 	mov.w	r3, #4294967295
 800b81c:	e013      	b.n	800b846 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b81e:	8afa      	ldrh	r2, [r7, #22]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b824:	e00b      	b.n	800b83e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b826:	8afb      	ldrh	r3, [r7, #22]
 800b828:	3b01      	subs	r3, #1
 800b82a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b82c:	8afb      	ldrh	r3, [r7, #22]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	441a      	add	r2, r3
 800b832:	8afb      	ldrh	r3, [r7, #22]
 800b834:	7811      	ldrb	r1, [r2, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4413      	add	r3, r2
 800b83a:	460a      	mov	r2, r1
 800b83c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b83e:	8afb      	ldrh	r3, [r7, #22]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1f0      	bne.n	800b826 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	4613      	mov	r3, r2
 800b85e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	e01f      	b.n	800b8aa <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	79fa      	ldrb	r2, [r7, #7]
 800b89c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f001 fdf6 	bl	800d490 <USBD_LL_Init>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e025      	b.n	800b916 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	32ae      	adds	r2, #174	@ 0xae
 800b8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00f      	beq.n	800b906 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	32ae      	adds	r2, #174	@ 0xae
 800b8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f6:	f107 020e 	add.w	r2, r7, #14
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4798      	blx	r3
 800b8fe:	4602      	mov	r2, r0
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fdfe 	bl	800d528 <USBD_LL_Start>
 800b92c:	4603      	mov	r3, r0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	78fa      	ldrb	r2, [r7, #3]
 800b970:	4611      	mov	r1, r2
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	78fa      	ldrb	r2, [r7, #3]
 800b99e:	4611      	mov	r1, r2
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 f90b 	bl	800cbe6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b9de:	461a      	mov	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9ec:	f003 031f 	and.w	r3, r3, #31
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d01a      	beq.n	800ba2a <USBD_LL_SetupStage+0x72>
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d822      	bhi.n	800ba3e <USBD_LL_SetupStage+0x86>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <USBD_LL_SetupStage+0x4a>
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d00a      	beq.n	800ba16 <USBD_LL_SetupStage+0x5e>
 800ba00:	e01d      	b.n	800ba3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fb62 	bl	800c0d4 <USBD_StdDevReq>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]
      break;
 800ba14:	e020      	b.n	800ba58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fbca 	bl	800c1b8 <USBD_StdItfReq>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]
      break;
 800ba28:	e016      	b.n	800ba58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fc2c 	bl	800c290 <USBD_StdEPReq>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3c:	e00c      	b.n	800ba58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fdea 	bl	800d626 <USBD_LL_StallEP>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73fb      	strb	r3, [r7, #15]
      break;
 800ba56:	bf00      	nop
  }

  return ret;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	607a      	str	r2, [r7, #4]
 800ba6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d16e      	bne.n	800bb58 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	f040 8098 	bne.w	800bbbe <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	689a      	ldr	r2, [r3, #8]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d913      	bls.n	800bac2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	4293      	cmp	r3, r2
 800bab2:	bf28      	it	cs
 800bab4:	4613      	movcs	r3, r2
 800bab6:	461a      	mov	r2, r3
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f001 f96a 	bl	800cd94 <USBD_CtlContinueRx>
 800bac0:	e07d      	b.n	800bbbe <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bac8:	f003 031f 	and.w	r3, r3, #31
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d014      	beq.n	800bafa <USBD_LL_DataOutStage+0x98>
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d81d      	bhi.n	800bb10 <USBD_LL_DataOutStage+0xae>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <USBD_LL_DataOutStage+0x7c>
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d003      	beq.n	800bae4 <USBD_LL_DataOutStage+0x82>
 800badc:	e018      	b.n	800bb10 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	75bb      	strb	r3, [r7, #22]
            break;
 800bae2:	e018      	b.n	800bb16 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800baea:	b2db      	uxtb	r3, r3
 800baec:	4619      	mov	r1, r3
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fa64 	bl	800bfbc <USBD_CoreFindIF>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75bb      	strb	r3, [r7, #22]
            break;
 800baf8:	e00d      	b.n	800bb16 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 fa66 	bl	800bfd6 <USBD_CoreFindEP>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75bb      	strb	r3, [r7, #22]
            break;
 800bb0e:	e002      	b.n	800bb16 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	75bb      	strb	r3, [r7, #22]
            break;
 800bb14:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb16:	7dbb      	ldrb	r3, [r7, #22]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d119      	bne.n	800bb50 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d113      	bne.n	800bb50 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb28:	7dba      	ldrb	r2, [r7, #22]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	32ae      	adds	r2, #174	@ 0xae
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb38:	7dba      	ldrb	r2, [r7, #22]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb40:	7dba      	ldrb	r2, [r7, #22]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	32ae      	adds	r2, #174	@ 0xae
 800bb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 f930 	bl	800cdb6 <USBD_CtlSendStatus>
 800bb56:	e032      	b.n	800bbbe <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	4619      	mov	r1, r3
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 fa37 	bl	800bfd6 <USBD_CoreFindEP>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb6c:	7dbb      	ldrb	r3, [r7, #22]
 800bb6e:	2bff      	cmp	r3, #255	@ 0xff
 800bb70:	d025      	beq.n	800bbbe <USBD_LL_DataOutStage+0x15c>
 800bb72:	7dbb      	ldrb	r3, [r7, #22]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d122      	bne.n	800bbbe <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d117      	bne.n	800bbb4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb84:	7dba      	ldrb	r2, [r7, #22]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	32ae      	adds	r2, #174	@ 0xae
 800bb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00f      	beq.n	800bbb4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb94:	7dba      	ldrb	r2, [r7, #22]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb9c:	7dba      	ldrb	r2, [r7, #22]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	7afa      	ldrb	r2, [r7, #11]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	4798      	blx	r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	e000      	b.n	800bbc0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d16f      	bne.n	800bcbc <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3314      	adds	r3, #20
 800bbe0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d15a      	bne.n	800bca2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d914      	bls.n	800bc22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	1ad2      	subs	r2, r2, r3
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f001 f8af 	bl	800cd72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc14:	2300      	movs	r3, #0
 800bc16:	2200      	movs	r2, #0
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f001 fdad 	bl	800d77a <USBD_LL_PrepareReceive>
 800bc20:	e03f      	b.n	800bca2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d11c      	bne.n	800bc68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	685a      	ldr	r2, [r3, #4]
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d316      	bcc.n	800bc68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d20f      	bcs.n	800bc68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f001 f890 	bl	800cd72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f001 fd8a 	bl	800d77a <USBD_LL_PrepareReceive>
 800bc66:	e01c      	b.n	800bca2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d10f      	bne.n	800bc94 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d009      	beq.n	800bc94 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc94:	2180      	movs	r1, #128	@ 0x80
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f001 fcc5 	bl	800d626 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f001 f89d 	bl	800cddc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d03a      	beq.n	800bd22 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f7ff fe42 	bl	800b936 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bcba:	e032      	b.n	800bd22 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bcbc:	7afb      	ldrb	r3, [r7, #11]
 800bcbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 f985 	bl	800bfd6 <USBD_CoreFindEP>
 800bccc:	4603      	mov	r3, r0
 800bcce:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	2bff      	cmp	r3, #255	@ 0xff
 800bcd4:	d025      	beq.n	800bd22 <USBD_LL_DataInStage+0x15a>
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d122      	bne.n	800bd22 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d11c      	bne.n	800bd22 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bce8:	7dfa      	ldrb	r2, [r7, #23]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	32ae      	adds	r2, #174	@ 0xae
 800bcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d014      	beq.n	800bd22 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bcf8:	7dfa      	ldrb	r2, [r7, #23]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd00:	7dfa      	ldrb	r2, [r7, #23]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	32ae      	adds	r2, #174	@ 0xae
 800bd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	7afa      	ldrb	r2, [r7, #11]
 800bd0e:	4611      	mov	r1, r2
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	4798      	blx	r3
 800bd14:	4603      	mov	r3, r0
 800bd16:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd18:	7dbb      	ldrb	r3, [r7, #22]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd1e:	7dbb      	ldrb	r3, [r7, #22]
 800bd20:	e000      	b.n	800bd24 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3718      	adds	r7, #24
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d014      	beq.n	800bd92 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00e      	beq.n	800bd92 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6852      	ldr	r2, [r2, #4]
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	4611      	mov	r1, r2
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd92:	2340      	movs	r3, #64	@ 0x40
 800bd94:	2200      	movs	r2, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 fbe0 	bl	800d55e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2240      	movs	r2, #64	@ 0x40
 800bdaa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdae:	2340      	movs	r3, #64	@ 0x40
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2180      	movs	r1, #128	@ 0x80
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 fbd2 	bl	800d55e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2240      	movs	r2, #64	@ 0x40
 800bdc4:	621a      	str	r2, [r3, #32]

  return ret;
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	78fa      	ldrb	r2, [r7, #3]
 800bde0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b04      	cmp	r3, #4
 800be02:	d006      	beq.n	800be12 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2204      	movs	r2, #4
 800be16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d106      	bne.n	800be4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be42:	b2da      	uxtb	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d110      	bne.n	800be8e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00b      	beq.n	800be8e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	32ae      	adds	r2, #174	@ 0xae
 800beae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800beb6:	2303      	movs	r3, #3
 800beb8:	e01c      	b.n	800bef4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d115      	bne.n	800bef2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	32ae      	adds	r2, #174	@ 0xae
 800bed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	32ae      	adds	r2, #174	@ 0xae
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	78fa      	ldrb	r2, [r7, #3]
 800beec:	4611      	mov	r1, r2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	460b      	mov	r3, r1
 800bf06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	@ 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e01c      	b.n	800bf58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d115      	bne.n	800bf56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	32ae      	adds	r2, #174	@ 0xae
 800bf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00b      	beq.n	800bf56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	32ae      	adds	r2, #174	@ 0xae
 800bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf4e:	78fa      	ldrb	r2, [r7, #3]
 800bf50:	4611      	mov	r1, r2
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00e      	beq.n	800bfb2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	6852      	ldr	r2, [r2, #4]
 800bfa0:	b2d2      	uxtb	r2, r2
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	4798      	blx	r3
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b083      	sub	sp, #12
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfe2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	885b      	ldrh	r3, [r3, #2]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	7812      	ldrb	r2, [r2, #0]
 800c012:	4293      	cmp	r3, r2
 800c014:	d91f      	bls.n	800c056 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c01c:	e013      	b.n	800c046 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c01e:	f107 030a 	add.w	r3, r7, #10
 800c022:	4619      	mov	r1, r3
 800c024:	6978      	ldr	r0, [r7, #20]
 800c026:	f000 f81b 	bl	800c060 <USBD_GetNextDesc>
 800c02a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	785b      	ldrb	r3, [r3, #1]
 800c030:	2b05      	cmp	r3, #5
 800c032:	d108      	bne.n	800c046 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	789b      	ldrb	r3, [r3, #2]
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d008      	beq.n	800c054 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c042:	2300      	movs	r3, #0
 800c044:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	885b      	ldrh	r3, [r3, #2]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	897b      	ldrh	r3, [r7, #10]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d8e5      	bhi.n	800c01e <USBD_GetEpDesc+0x2e>
 800c052:	e000      	b.n	800c056 <USBD_GetEpDesc+0x66>
          break;
 800c054:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c056:	693b      	ldr	r3, [r7, #16]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	7812      	ldrb	r2, [r2, #0]
 800c076:	4413      	add	r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c08a:	68fb      	ldr	r3, [r7, #12]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0b6:	8a3b      	ldrh	r3, [r7, #16]
 800c0b8:	021b      	lsls	r3, r3, #8
 800c0ba:	b21a      	sxth	r2, r3
 800c0bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	b21b      	sxth	r3, r3
 800c0c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0c6:	89fb      	ldrh	r3, [r7, #14]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0ea:	2b40      	cmp	r3, #64	@ 0x40
 800c0ec:	d005      	beq.n	800c0fa <USBD_StdDevReq+0x26>
 800c0ee:	2b40      	cmp	r3, #64	@ 0x40
 800c0f0:	d857      	bhi.n	800c1a2 <USBD_StdDevReq+0xce>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00f      	beq.n	800c116 <USBD_StdDevReq+0x42>
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	d153      	bne.n	800c1a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	32ae      	adds	r2, #174	@ 0xae
 800c104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	4798      	blx	r3
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]
      break;
 800c114:	e04a      	b.n	800c1ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	785b      	ldrb	r3, [r3, #1]
 800c11a:	2b09      	cmp	r3, #9
 800c11c:	d83b      	bhi.n	800c196 <USBD_StdDevReq+0xc2>
 800c11e:	a201      	add	r2, pc, #4	@ (adr r2, 800c124 <USBD_StdDevReq+0x50>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c179 	.word	0x0800c179
 800c128:	0800c18d 	.word	0x0800c18d
 800c12c:	0800c197 	.word	0x0800c197
 800c130:	0800c183 	.word	0x0800c183
 800c134:	0800c197 	.word	0x0800c197
 800c138:	0800c157 	.word	0x0800c157
 800c13c:	0800c14d 	.word	0x0800c14d
 800c140:	0800c197 	.word	0x0800c197
 800c144:	0800c16f 	.word	0x0800c16f
 800c148:	0800c161 	.word	0x0800c161
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fa3c 	bl	800c5cc <USBD_GetDescriptor>
          break;
 800c154:	e024      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fba1 	bl	800c8a0 <USBD_SetAddress>
          break;
 800c15e:	e01f      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fbe0 	bl	800c928 <USBD_SetConfig>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]
          break;
 800c16c:	e018      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fc83 	bl	800ca7c <USBD_GetConfig>
          break;
 800c176:	e013      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fcb4 	bl	800cae8 <USBD_GetStatus>
          break;
 800c180:	e00e      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fce3 	bl	800cb50 <USBD_SetFeature>
          break;
 800c18a:	e009      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fd07 	bl	800cba2 <USBD_ClrFeature>
          break;
 800c194:	e004      	b.n	800c1a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fd5e 	bl	800cc5a <USBD_CtlError>
          break;
 800c19e:	bf00      	nop
      }
      break;
 800c1a0:	e004      	b.n	800c1ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fd58 	bl	800cc5a <USBD_CtlError>
      break;
 800c1aa:	bf00      	nop
  }

  return ret;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop

0800c1b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1ce:	2b40      	cmp	r3, #64	@ 0x40
 800c1d0:	d005      	beq.n	800c1de <USBD_StdItfReq+0x26>
 800c1d2:	2b40      	cmp	r3, #64	@ 0x40
 800c1d4:	d852      	bhi.n	800c27c <USBD_StdItfReq+0xc4>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <USBD_StdItfReq+0x26>
 800c1da:	2b20      	cmp	r3, #32
 800c1dc:	d14e      	bne.n	800c27c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d840      	bhi.n	800c26e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	889b      	ldrh	r3, [r3, #4]
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d836      	bhi.n	800c264 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	889b      	ldrh	r3, [r3, #4]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fedc 	bl	800bfbc <USBD_CoreFindIF>
 800c204:	4603      	mov	r3, r0
 800c206:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	2bff      	cmp	r3, #255	@ 0xff
 800c20c:	d01d      	beq.n	800c24a <USBD_StdItfReq+0x92>
 800c20e:	7bbb      	ldrb	r3, [r7, #14]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d11a      	bne.n	800c24a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c214:	7bba      	ldrb	r2, [r7, #14]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	32ae      	adds	r2, #174	@ 0xae
 800c21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00f      	beq.n	800c244 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c224:	7bba      	ldrb	r2, [r7, #14]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c22c:	7bba      	ldrb	r2, [r7, #14]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32ae      	adds	r2, #174	@ 0xae
 800c232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c242:	e004      	b.n	800c24e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c248:	e001      	b.n	800c24e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c24a:	2303      	movs	r3, #3
 800c24c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	88db      	ldrh	r3, [r3, #6]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d110      	bne.n	800c278 <USBD_StdItfReq+0xc0>
 800c256:	7bfb      	ldrb	r3, [r7, #15]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10d      	bne.n	800c278 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fdaa 	bl	800cdb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c262:	e009      	b.n	800c278 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fcf7 	bl	800cc5a <USBD_CtlError>
          break;
 800c26c:	e004      	b.n	800c278 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fcf2 	bl	800cc5a <USBD_CtlError>
          break;
 800c276:	e000      	b.n	800c27a <USBD_StdItfReq+0xc2>
          break;
 800c278:	bf00      	nop
      }
      break;
 800c27a:	e004      	b.n	800c286 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fceb 	bl	800cc5a <USBD_CtlError>
      break;
 800c284:	bf00      	nop
  }

  return ret;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	889b      	ldrh	r3, [r3, #4]
 800c2a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2ac:	2b40      	cmp	r3, #64	@ 0x40
 800c2ae:	d007      	beq.n	800c2c0 <USBD_StdEPReq+0x30>
 800c2b0:	2b40      	cmp	r3, #64	@ 0x40
 800c2b2:	f200 817f 	bhi.w	800c5b4 <USBD_StdEPReq+0x324>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d02a      	beq.n	800c310 <USBD_StdEPReq+0x80>
 800c2ba:	2b20      	cmp	r3, #32
 800c2bc:	f040 817a 	bne.w	800c5b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff fe86 	bl	800bfd6 <USBD_CoreFindEP>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ce:	7b7b      	ldrb	r3, [r7, #13]
 800c2d0:	2bff      	cmp	r3, #255	@ 0xff
 800c2d2:	f000 8174 	beq.w	800c5be <USBD_StdEPReq+0x32e>
 800c2d6:	7b7b      	ldrb	r3, [r7, #13]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f040 8170 	bne.w	800c5be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2de:	7b7a      	ldrb	r2, [r7, #13]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2e6:	7b7a      	ldrb	r2, [r7, #13]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	32ae      	adds	r2, #174	@ 0xae
 800c2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 8163 	beq.w	800c5be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2f8:	7b7a      	ldrb	r2, [r7, #13]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	32ae      	adds	r2, #174	@ 0xae
 800c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	4798      	blx	r3
 800c30a:	4603      	mov	r3, r0
 800c30c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c30e:	e156      	b.n	800c5be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	785b      	ldrb	r3, [r3, #1]
 800c314:	2b03      	cmp	r3, #3
 800c316:	d008      	beq.n	800c32a <USBD_StdEPReq+0x9a>
 800c318:	2b03      	cmp	r3, #3
 800c31a:	f300 8145 	bgt.w	800c5a8 <USBD_StdEPReq+0x318>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 809b 	beq.w	800c45a <USBD_StdEPReq+0x1ca>
 800c324:	2b01      	cmp	r3, #1
 800c326:	d03c      	beq.n	800c3a2 <USBD_StdEPReq+0x112>
 800c328:	e13e      	b.n	800c5a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b02      	cmp	r3, #2
 800c334:	d002      	beq.n	800c33c <USBD_StdEPReq+0xac>
 800c336:	2b03      	cmp	r3, #3
 800c338:	d016      	beq.n	800c368 <USBD_StdEPReq+0xd8>
 800c33a:	e02c      	b.n	800c396 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00d      	beq.n	800c35e <USBD_StdEPReq+0xce>
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b80      	cmp	r3, #128	@ 0x80
 800c346:	d00a      	beq.n	800c35e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 f96a 	bl	800d626 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c352:	2180      	movs	r1, #128	@ 0x80
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 f966 	bl	800d626 <USBD_LL_StallEP>
 800c35a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c35c:	e020      	b.n	800c3a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fc7a 	bl	800cc5a <USBD_CtlError>
              break;
 800c366:	e01b      	b.n	800c3a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	885b      	ldrh	r3, [r3, #2]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10e      	bne.n	800c38e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00b      	beq.n	800c38e <USBD_StdEPReq+0xfe>
 800c376:	7bbb      	ldrb	r3, [r7, #14]
 800c378:	2b80      	cmp	r3, #128	@ 0x80
 800c37a:	d008      	beq.n	800c38e <USBD_StdEPReq+0xfe>
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d104      	bne.n	800c38e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c384:	7bbb      	ldrb	r3, [r7, #14]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 f94c 	bl	800d626 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fd11 	bl	800cdb6 <USBD_CtlSendStatus>

              break;
 800c394:	e004      	b.n	800c3a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fc5e 	bl	800cc5a <USBD_CtlError>
              break;
 800c39e:	bf00      	nop
          }
          break;
 800c3a0:	e107      	b.n	800c5b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d002      	beq.n	800c3b4 <USBD_StdEPReq+0x124>
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d016      	beq.n	800c3e0 <USBD_StdEPReq+0x150>
 800c3b2:	e04b      	b.n	800c44c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00d      	beq.n	800c3d6 <USBD_StdEPReq+0x146>
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b80      	cmp	r3, #128	@ 0x80
 800c3be:	d00a      	beq.n	800c3d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f001 f92e 	bl	800d626 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3ca:	2180      	movs	r1, #128	@ 0x80
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 f92a 	bl	800d626 <USBD_LL_StallEP>
 800c3d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3d4:	e040      	b.n	800c458 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fc3e 	bl	800cc5a <USBD_CtlError>
              break;
 800c3de:	e03b      	b.n	800c458 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	885b      	ldrh	r3, [r3, #2]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d136      	bne.n	800c456 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d004      	beq.n	800c3fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f001 f934 	bl	800d664 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fcda 	bl	800cdb6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff fde5 	bl	800bfd6 <USBD_CoreFindEP>
 800c40c:	4603      	mov	r3, r0
 800c40e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c410:	7b7b      	ldrb	r3, [r7, #13]
 800c412:	2bff      	cmp	r3, #255	@ 0xff
 800c414:	d01f      	beq.n	800c456 <USBD_StdEPReq+0x1c6>
 800c416:	7b7b      	ldrb	r3, [r7, #13]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d11c      	bne.n	800c456 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c41c:	7b7a      	ldrb	r2, [r7, #13]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c424:	7b7a      	ldrb	r2, [r7, #13]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	32ae      	adds	r2, #174	@ 0xae
 800c42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d010      	beq.n	800c456 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c434:	7b7a      	ldrb	r2, [r7, #13]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	32ae      	adds	r2, #174	@ 0xae
 800c43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	4798      	blx	r3
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c44a:	e004      	b.n	800c456 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fc03 	bl	800cc5a <USBD_CtlError>
              break;
 800c454:	e000      	b.n	800c458 <USBD_StdEPReq+0x1c8>
              break;
 800c456:	bf00      	nop
          }
          break;
 800c458:	e0ab      	b.n	800c5b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b02      	cmp	r3, #2
 800c464:	d002      	beq.n	800c46c <USBD_StdEPReq+0x1dc>
 800c466:	2b03      	cmp	r3, #3
 800c468:	d032      	beq.n	800c4d0 <USBD_StdEPReq+0x240>
 800c46a:	e097      	b.n	800c59c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d007      	beq.n	800c482 <USBD_StdEPReq+0x1f2>
 800c472:	7bbb      	ldrb	r3, [r7, #14]
 800c474:	2b80      	cmp	r3, #128	@ 0x80
 800c476:	d004      	beq.n	800c482 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fbed 	bl	800cc5a <USBD_CtlError>
                break;
 800c480:	e091      	b.n	800c5a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c486:	2b00      	cmp	r3, #0
 800c488:	da0b      	bge.n	800c4a2 <USBD_StdEPReq+0x212>
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c490:	4613      	mov	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	3310      	adds	r3, #16
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	4413      	add	r3, r2
 800c49e:	3304      	adds	r3, #4
 800c4a0:	e00b      	b.n	800c4ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fc37 	bl	800cd3c <USBD_CtlSendData>
              break;
 800c4ce:	e06a      	b.n	800c5a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da11      	bge.n	800c4fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	f003 020f 	and.w	r2, r3, #15
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3324      	adds	r3, #36	@ 0x24
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d117      	bne.n	800c522 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fbb0 	bl	800cc5a <USBD_CtlError>
                  break;
 800c4fa:	e054      	b.n	800c5a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	f003 020f 	and.w	r2, r3, #15
 800c502:	6879      	ldr	r1, [r7, #4]
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	440b      	add	r3, r1
 800c50e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb9d 	bl	800cc5a <USBD_CtlError>
                  break;
 800c520:	e041      	b.n	800c5a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c526:	2b00      	cmp	r3, #0
 800c528:	da0b      	bge.n	800c542 <USBD_StdEPReq+0x2b2>
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	3310      	adds	r3, #16
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	4413      	add	r3, r2
 800c53e:	3304      	adds	r3, #4
 800c540:	e00b      	b.n	800c55a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c548:	4613      	mov	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4413      	add	r3, r2
 800c558:	3304      	adds	r3, #4
 800c55a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <USBD_StdEPReq+0x2d8>
 800c562:	7bbb      	ldrb	r3, [r7, #14]
 800c564:	2b80      	cmp	r3, #128	@ 0x80
 800c566:	d103      	bne.n	800c570 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	e00e      	b.n	800c58e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 f894 	bl	800d6a2 <USBD_LL_IsStallEP>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	e002      	b.n	800c58e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2202      	movs	r2, #2
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fbd1 	bl	800cd3c <USBD_CtlSendData>
              break;
 800c59a:	e004      	b.n	800c5a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fb5b 	bl	800cc5a <USBD_CtlError>
              break;
 800c5a4:	bf00      	nop
          }
          break;
 800c5a6:	e004      	b.n	800c5b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fb55 	bl	800cc5a <USBD_CtlError>
          break;
 800c5b0:	bf00      	nop
      }
      break;
 800c5b2:	e005      	b.n	800c5c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fb4f 	bl	800cc5a <USBD_CtlError>
      break;
 800c5bc:	e000      	b.n	800c5c0 <USBD_StdEPReq+0x330>
      break;
 800c5be:	bf00      	nop
  }

  return ret;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
	...

0800c5cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	885b      	ldrh	r3, [r3, #2]
 800c5e6:	0a1b      	lsrs	r3, r3, #8
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	2b06      	cmp	r3, #6
 800c5ee:	f200 8128 	bhi.w	800c842 <USBD_GetDescriptor+0x276>
 800c5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <USBD_GetDescriptor+0x2c>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c615 	.word	0x0800c615
 800c5fc:	0800c62d 	.word	0x0800c62d
 800c600:	0800c66d 	.word	0x0800c66d
 800c604:	0800c843 	.word	0x0800c843
 800c608:	0800c843 	.word	0x0800c843
 800c60c:	0800c7e3 	.word	0x0800c7e3
 800c610:	0800c80f 	.word	0x0800c80f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	7c12      	ldrb	r2, [r2, #16]
 800c620:	f107 0108 	add.w	r1, r7, #8
 800c624:	4610      	mov	r0, r2
 800c626:	4798      	blx	r3
 800c628:	60f8      	str	r0, [r7, #12]
      break;
 800c62a:	e112      	b.n	800c852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7c1b      	ldrb	r3, [r3, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10d      	bne.n	800c650 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c63c:	f107 0208 	add.w	r2, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3301      	adds	r3, #1
 800c64a:	2202      	movs	r2, #2
 800c64c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c64e:	e100      	b.n	800c852 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c658:	f107 0208 	add.w	r2, r7, #8
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3301      	adds	r3, #1
 800c666:	2202      	movs	r2, #2
 800c668:	701a      	strb	r2, [r3, #0]
      break;
 800c66a:	e0f2      	b.n	800c852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	885b      	ldrh	r3, [r3, #2]
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b05      	cmp	r3, #5
 800c674:	f200 80ac 	bhi.w	800c7d0 <USBD_GetDescriptor+0x204>
 800c678:	a201      	add	r2, pc, #4	@ (adr r2, 800c680 <USBD_GetDescriptor+0xb4>)
 800c67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67e:	bf00      	nop
 800c680:	0800c699 	.word	0x0800c699
 800c684:	0800c6cd 	.word	0x0800c6cd
 800c688:	0800c701 	.word	0x0800c701
 800c68c:	0800c735 	.word	0x0800c735
 800c690:	0800c769 	.word	0x0800c769
 800c694:	0800c79d 	.word	0x0800c79d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00b      	beq.n	800c6bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7c12      	ldrb	r2, [r2, #16]
 800c6b0:	f107 0108 	add.w	r1, r7, #8
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ba:	e091      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 facb 	bl	800cc5a <USBD_CtlError>
            err++;
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ca:	e089      	b.n	800c7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00b      	beq.n	800c6f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	7c12      	ldrb	r2, [r2, #16]
 800c6e4:	f107 0108 	add.w	r1, r7, #8
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	4798      	blx	r3
 800c6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ee:	e077      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fab1 	bl	800cc5a <USBD_CtlError>
            err++;
 800c6f8:	7afb      	ldrb	r3, [r7, #11]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6fe:	e06f      	b.n	800c7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00b      	beq.n	800c724 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7c12      	ldrb	r2, [r2, #16]
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c722:	e05d      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fa97 	bl	800cc5a <USBD_CtlError>
            err++;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	3301      	adds	r3, #1
 800c730:	72fb      	strb	r3, [r7, #11]
          break;
 800c732:	e055      	b.n	800c7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	7c12      	ldrb	r2, [r2, #16]
 800c74c:	f107 0108 	add.w	r1, r7, #8
 800c750:	4610      	mov	r0, r2
 800c752:	4798      	blx	r3
 800c754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c756:	e043      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fa7d 	bl	800cc5a <USBD_CtlError>
            err++;
 800c760:	7afb      	ldrb	r3, [r7, #11]
 800c762:	3301      	adds	r3, #1
 800c764:	72fb      	strb	r3, [r7, #11]
          break;
 800c766:	e03b      	b.n	800c7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00b      	beq.n	800c78c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77a:	695b      	ldr	r3, [r3, #20]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	7c12      	ldrb	r2, [r2, #16]
 800c780:	f107 0108 	add.w	r1, r7, #8
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c78a:	e029      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa63 	bl	800cc5a <USBD_CtlError>
            err++;
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	3301      	adds	r3, #1
 800c798:	72fb      	strb	r3, [r7, #11]
          break;
 800c79a:	e021      	b.n	800c7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	7c12      	ldrb	r2, [r2, #16]
 800c7b4:	f107 0108 	add.w	r1, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7be:	e00f      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fa49 	bl	800cc5a <USBD_CtlError>
            err++;
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ce:	e007      	b.n	800c7e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fa41 	bl	800cc5a <USBD_CtlError>
          err++;
 800c7d8:	7afb      	ldrb	r3, [r7, #11]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7de:	bf00      	nop
      }
      break;
 800c7e0:	e037      	b.n	800c852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7c1b      	ldrb	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d109      	bne.n	800c7fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f2:	f107 0208 	add.w	r2, r7, #8
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4798      	blx	r3
 800c7fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7fc:	e029      	b.n	800c852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fa2a 	bl	800cc5a <USBD_CtlError>
        err++;
 800c806:	7afb      	ldrb	r3, [r7, #11]
 800c808:	3301      	adds	r3, #1
 800c80a:	72fb      	strb	r3, [r7, #11]
      break;
 800c80c:	e021      	b.n	800c852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	7c1b      	ldrb	r3, [r3, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10d      	bne.n	800c832 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81e:	f107 0208 	add.w	r2, r7, #8
 800c822:	4610      	mov	r0, r2
 800c824:	4798      	blx	r3
 800c826:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	2207      	movs	r2, #7
 800c82e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c830:	e00f      	b.n	800c852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa10 	bl	800cc5a <USBD_CtlError>
        err++;
 800c83a:	7afb      	ldrb	r3, [r7, #11]
 800c83c:	3301      	adds	r3, #1
 800c83e:	72fb      	strb	r3, [r7, #11]
      break;
 800c840:	e007      	b.n	800c852 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fa08 	bl	800cc5a <USBD_CtlError>
      err++;
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	3301      	adds	r3, #1
 800c84e:	72fb      	strb	r3, [r7, #11]
      break;
 800c850:	bf00      	nop
  }

  if (err != 0U)
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d11e      	bne.n	800c896 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	88db      	ldrh	r3, [r3, #6]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d016      	beq.n	800c88e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c860:	893b      	ldrh	r3, [r7, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00e      	beq.n	800c884 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	88da      	ldrh	r2, [r3, #6]
 800c86a:	893b      	ldrh	r3, [r7, #8]
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bf28      	it	cs
 800c870:	4613      	movcs	r3, r2
 800c872:	b29b      	uxth	r3, r3
 800c874:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c876:	893b      	ldrh	r3, [r7, #8]
 800c878:	461a      	mov	r2, r3
 800c87a:	68f9      	ldr	r1, [r7, #12]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fa5d 	bl	800cd3c <USBD_CtlSendData>
 800c882:	e009      	b.n	800c898 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f9e7 	bl	800cc5a <USBD_CtlError>
 800c88c:	e004      	b.n	800c898 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fa91 	bl	800cdb6 <USBD_CtlSendStatus>
 800c894:	e000      	b.n	800c898 <USBD_GetDescriptor+0x2cc>
    return;
 800c896:	bf00      	nop
  }
}
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop

0800c8a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	889b      	ldrh	r3, [r3, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d131      	bne.n	800c916 <USBD_SetAddress+0x76>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	88db      	ldrh	r3, [r3, #6]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d12d      	bne.n	800c916 <USBD_SetAddress+0x76>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	885b      	ldrh	r3, [r3, #2]
 800c8be:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8c0:	d829      	bhi.n	800c916 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d104      	bne.n	800c8e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f9bc 	bl	800cc5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e2:	e01d      	b.n	800c920 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7bfa      	ldrb	r2, [r7, #15]
 800c8e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 ff02 	bl	800d6fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fa5d 	bl	800cdb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d004      	beq.n	800c90c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2202      	movs	r2, #2
 800c906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c90a:	e009      	b.n	800c920 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c914:	e004      	b.n	800c920 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f99e 	bl	800cc5a <USBD_CtlError>
  }
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	885b      	ldrh	r3, [r3, #2]
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	4b4e      	ldr	r3, [pc, #312]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c93e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c940:	4b4d      	ldr	r3, [pc, #308]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d905      	bls.n	800c954 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f985 	bl	800cc5a <USBD_CtlError>
    return USBD_FAIL;
 800c950:	2303      	movs	r3, #3
 800c952:	e08c      	b.n	800ca6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d002      	beq.n	800c966 <USBD_SetConfig+0x3e>
 800c960:	2b03      	cmp	r3, #3
 800c962:	d029      	beq.n	800c9b8 <USBD_SetConfig+0x90>
 800c964:	e075      	b.n	800ca52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c966:	4b44      	ldr	r3, [pc, #272]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d020      	beq.n	800c9b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c96e:	4b42      	ldr	r3, [pc, #264]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c978:	4b3f      	ldr	r3, [pc, #252]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	4619      	mov	r1, r3
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7fe ffe4 	bl	800b94c <USBD_SetClassConfig>
 800c984:	4603      	mov	r3, r0
 800c986:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d008      	beq.n	800c9a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f962 	bl	800cc5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2202      	movs	r2, #2
 800c99a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c99e:	e065      	b.n	800ca6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fa08 	bl	800cdb6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2203      	movs	r2, #3
 800c9aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9ae:	e05d      	b.n	800ca6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fa00 	bl	800cdb6 <USBD_CtlSendStatus>
      break;
 800c9b6:	e059      	b.n	800ca6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9b8:	4b2f      	ldr	r3, [pc, #188]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d112      	bne.n	800c9e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9d2:	4b29      	ldr	r3, [pc, #164]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe ffd3 	bl	800b984 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f9e9 	bl	800cdb6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9e4:	e042      	b.n	800ca6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9e6:	4b24      	ldr	r3, [pc, #144]	@ (800ca78 <USBD_SetConfig+0x150>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d02a      	beq.n	800ca4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7fe ffc1 	bl	800b984 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca02:	4b1d      	ldr	r3, [pc, #116]	@ (800ca78 <USBD_SetConfig+0x150>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ca78 <USBD_SetConfig+0x150>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7fe ff9a 	bl	800b94c <USBD_SetClassConfig>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00f      	beq.n	800ca42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f918 	bl	800cc5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7fe ffa6 	bl	800b984 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca40:	e014      	b.n	800ca6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9b7 	bl	800cdb6 <USBD_CtlSendStatus>
      break;
 800ca48:	e010      	b.n	800ca6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f9b3 	bl	800cdb6 <USBD_CtlSendStatus>
      break;
 800ca50:	e00c      	b.n	800ca6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f900 	bl	800cc5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca5a:	4b07      	ldr	r3, [pc, #28]	@ (800ca78 <USBD_SetConfig+0x150>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7fe ff8f 	bl	800b984 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca66:	2303      	movs	r3, #3
 800ca68:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6a:	bf00      	nop
  }

  return ret;
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	200003a0 	.word	0x200003a0

0800ca7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	88db      	ldrh	r3, [r3, #6]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d004      	beq.n	800ca98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f8e2 	bl	800cc5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca96:	e023      	b.n	800cae0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	dc02      	bgt.n	800caaa <USBD_GetConfig+0x2e>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dc03      	bgt.n	800cab0 <USBD_GetConfig+0x34>
 800caa8:	e015      	b.n	800cad6 <USBD_GetConfig+0x5a>
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d00b      	beq.n	800cac6 <USBD_GetConfig+0x4a>
 800caae:	e012      	b.n	800cad6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3308      	adds	r3, #8
 800caba:	2201      	movs	r2, #1
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f93c 	bl	800cd3c <USBD_CtlSendData>
        break;
 800cac4:	e00c      	b.n	800cae0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3304      	adds	r3, #4
 800caca:	2201      	movs	r2, #1
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f934 	bl	800cd3c <USBD_CtlSendData>
        break;
 800cad4:	e004      	b.n	800cae0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f8be 	bl	800cc5a <USBD_CtlError>
        break;
 800cade:	bf00      	nop
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d81e      	bhi.n	800cb3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	88db      	ldrh	r3, [r3, #6]
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d004      	beq.n	800cb12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f8a5 	bl	800cc5a <USBD_CtlError>
        break;
 800cb10:	e01a      	b.n	800cb48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d005      	beq.n	800cb2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f043 0202 	orr.w	r2, r3, #2
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	330c      	adds	r3, #12
 800cb32:	2202      	movs	r2, #2
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f900 	bl	800cd3c <USBD_CtlSendData>
      break;
 800cb3c:	e004      	b.n	800cb48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f88a 	bl	800cc5a <USBD_CtlError>
      break;
 800cb46:	bf00      	nop
  }
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	885b      	ldrh	r3, [r3, #2]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d107      	bne.n	800cb72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f923 	bl	800cdb6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb70:	e013      	b.n	800cb9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	885b      	ldrh	r3, [r3, #2]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d10b      	bne.n	800cb92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	889b      	ldrh	r3, [r3, #4]
 800cb7e:	0a1b      	lsrs	r3, r3, #8
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f913 	bl	800cdb6 <USBD_CtlSendStatus>
}
 800cb90:	e003      	b.n	800cb9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f860 	bl	800cc5a <USBD_CtlError>
}
 800cb9a:	bf00      	nop
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d80b      	bhi.n	800cbd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d10c      	bne.n	800cbdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8f3 	bl	800cdb6 <USBD_CtlSendStatus>
      }
      break;
 800cbd0:	e004      	b.n	800cbdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f840 	bl	800cc5a <USBD_CtlError>
      break;
 800cbda:	e000      	b.n	800cbde <USBD_ClrFeature+0x3c>
      break;
 800cbdc:	bf00      	nop
  }
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	781a      	ldrb	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	781a      	ldrb	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff fa41 	bl	800c098 <SWAPBYTE>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	3301      	adds	r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7ff fa34 	bl	800c098 <SWAPBYTE>
 800cc30:	4603      	mov	r3, r0
 800cc32:	461a      	mov	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7ff fa27 	bl	800c098 <SWAPBYTE>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	80da      	strh	r2, [r3, #6]
}
 800cc52:	bf00      	nop
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc64:	2180      	movs	r1, #128	@ 0x80
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fcdd 	bl	800d626 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fcd9 	bl	800d626 <USBD_LL_StallEP>
}
 800cc74:	bf00      	nop
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d036      	beq.n	800cd00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc96:	6938      	ldr	r0, [r7, #16]
 800cc98:	f000 f836 	bl	800cd08 <USBD_GetLen>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	3301      	adds	r3, #1
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	4413      	add	r3, r2
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	7812      	ldrb	r2, [r2, #0]
 800ccb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cccc:	e013      	b.n	800ccf6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	7812      	ldrb	r2, [r2, #0]
 800ccd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	613b      	str	r3, [r7, #16]
    idx++;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	3301      	adds	r3, #1
 800cce4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cce6:	7dfb      	ldrb	r3, [r7, #23]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	4413      	add	r3, r2
 800ccec:	2200      	movs	r2, #0
 800ccee:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e7      	bne.n	800ccce <USBD_GetString+0x52>
 800ccfe:	e000      	b.n	800cd02 <USBD_GetString+0x86>
    return;
 800cd00:	bf00      	nop
  }
}
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd18:	e005      	b.n	800cd26 <USBD_GetLen+0x1e>
  {
    len++;
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	3301      	adds	r3, #1
 800cd24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f5      	bne.n	800cd1a <USBD_GetLen+0x12>
  }

  return len;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	2100      	movs	r1, #0
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fce8 	bl	800d738 <USBD_LL_Transmit>

  return USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	2100      	movs	r1, #0
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 fcd7 	bl	800d738 <USBD_LL_Transmit>

  return USBD_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	2100      	movs	r1, #0
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 fce7 	bl	800d77a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fcb3 	bl	800d738 <USBD_LL_Transmit>

  return USBD_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2205      	movs	r2, #5
 800cde8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdec:	2300      	movs	r3, #0
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fcc1 	bl	800d77a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce12:	2301      	movs	r3, #1
 800ce14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce1c:	7a5b      	ldrb	r3, [r3, #9]
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d131      	bne.n	800ce88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce24:	4b1c      	ldr	r3, [pc, #112]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce26:	7a5b      	ldrb	r3, [r3, #9]
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce2e:	2100      	movs	r1, #0
 800ce30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce32:	4b19      	ldr	r3, [pc, #100]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce34:	7a5b      	ldrb	r3, [r3, #9]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	4a17      	ldr	r2, [pc, #92]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce42:	4b15      	ldr	r3, [pc, #84]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce44:	7a5b      	ldrb	r3, [r3, #9]
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b13      	ldr	r3, [pc, #76]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce4c:	4413      	add	r3, r2
 800ce4e:	79fa      	ldrb	r2, [r7, #7]
 800ce50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce52:	4b11      	ldr	r3, [pc, #68]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce54:	7a5b      	ldrb	r3, [r3, #9]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	b2d1      	uxtb	r1, r2
 800ce5c:	4a0e      	ldr	r2, [pc, #56]	@ (800ce98 <FATFS_LinkDriverEx+0x94>)
 800ce5e:	7251      	strb	r1, [r2, #9]
 800ce60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce62:	7dbb      	ldrb	r3, [r7, #22]
 800ce64:	3330      	adds	r3, #48	@ 0x30
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	223a      	movs	r2, #58	@ 0x3a
 800ce72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	3302      	adds	r3, #2
 800ce78:	222f      	movs	r2, #47	@ 0x2f
 800ce7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	3303      	adds	r3, #3
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	371c      	adds	r7, #28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200003a4 	.word	0x200003a4

0800ce9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cea6:	2200      	movs	r2, #0
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff ffaa 	bl	800ce04 <FATFS_LinkDriverEx>
 800ceb0:	4603      	mov	r3, r0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cec0:	2200      	movs	r2, #0
 800cec2:	4912      	ldr	r1, [pc, #72]	@ (800cf0c <MX_USB_DEVICE_Init+0x50>)
 800cec4:	4812      	ldr	r0, [pc, #72]	@ (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800cec6:	f7fe fcc4 	bl	800b852 <USBD_Init>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ced0:	f7f3 fdf8 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800ced4:	490f      	ldr	r1, [pc, #60]	@ (800cf14 <MX_USB_DEVICE_Init+0x58>)
 800ced6:	480e      	ldr	r0, [pc, #56]	@ (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800ced8:	f7fe fceb 	bl	800b8b2 <USBD_RegisterClass>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cee2:	f7f3 fdef 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800cee6:	490c      	ldr	r1, [pc, #48]	@ (800cf18 <MX_USB_DEVICE_Init+0x5c>)
 800cee8:	4809      	ldr	r0, [pc, #36]	@ (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800ceea:	f7fc ff69 	bl	8009dc0 <USBD_MSC_RegisterStorage>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cef4:	f7f3 fde6 	bl	8000ac4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cef8:	4805      	ldr	r0, [pc, #20]	@ (800cf10 <MX_USB_DEVICE_Init+0x54>)
 800cefa:	f7fe fd10 	bl	800b91e <USBD_Start>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf04:	f7f3 fdde 	bl	8000ac4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf08:	bf00      	nop
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	2000008c 	.word	0x2000008c
 800cf10:	200003b0 	.word	0x200003b0
 800cf14:	2000000c 	.word	0x2000000c
 800cf18:	200000dc 	.word	0x200000dc

0800cf1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	6039      	str	r1, [r7, #0]
 800cf26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2212      	movs	r2, #18
 800cf2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf2e:	4b03      	ldr	r3, [pc, #12]	@ (800cf3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	200000a8 	.word	0x200000a8

0800cf40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2204      	movs	r2, #4
 800cf50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf52:	4b03      	ldr	r3, [pc, #12]	@ (800cf60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr
 800cf60:	200000bc 	.word	0x200000bc

0800cf64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d105      	bne.n	800cf82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf76:	683a      	ldr	r2, [r7, #0]
 800cf78:	4907      	ldr	r1, [pc, #28]	@ (800cf98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf7a:	4808      	ldr	r0, [pc, #32]	@ (800cf9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf7c:	f7ff fe7e 	bl	800cc7c <USBD_GetString>
 800cf80:	e004      	b.n	800cf8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	4904      	ldr	r1, [pc, #16]	@ (800cf98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf86:	4805      	ldr	r0, [pc, #20]	@ (800cf9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf88:	f7ff fe78 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf8c:	4b02      	ldr	r3, [pc, #8]	@ (800cf98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	2000068c 	.word	0x2000068c
 800cf9c:	0800d8dc 	.word	0x0800d8dc

0800cfa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	6039      	str	r1, [r7, #0]
 800cfaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	4904      	ldr	r1, [pc, #16]	@ (800cfc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cfb0:	4804      	ldr	r0, [pc, #16]	@ (800cfc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cfb2:	f7ff fe63 	bl	800cc7c <USBD_GetString>
  return USBD_StrDesc;
 800cfb6:	4b02      	ldr	r3, [pc, #8]	@ (800cfc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	2000068c 	.word	0x2000068c
 800cfc4:	0800d8f0 	.word	0x0800d8f0

0800cfc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	221a      	movs	r2, #26
 800cfd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfda:	f000 f843 	bl	800d064 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfde:	4b02      	ldr	r3, [pc, #8]	@ (800cfe8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	200000c0 	.word	0x200000c0

0800cfec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	6039      	str	r1, [r7, #0]
 800cff6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d105      	bne.n	800d00a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	4907      	ldr	r1, [pc, #28]	@ (800d020 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d002:	4808      	ldr	r0, [pc, #32]	@ (800d024 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d004:	f7ff fe3a 	bl	800cc7c <USBD_GetString>
 800d008:	e004      	b.n	800d014 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4904      	ldr	r1, [pc, #16]	@ (800d020 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d00e:	4805      	ldr	r0, [pc, #20]	@ (800d024 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d010:	f7ff fe34 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d014:	4b02      	ldr	r3, [pc, #8]	@ (800d020 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d016:	4618      	mov	r0, r3
 800d018:	3708      	adds	r7, #8
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000068c 	.word	0x2000068c
 800d024:	0800d904 	.word	0x0800d904

0800d028 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	4603      	mov	r3, r0
 800d030:	6039      	str	r1, [r7, #0]
 800d032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	4907      	ldr	r1, [pc, #28]	@ (800d05c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d03e:	4808      	ldr	r0, [pc, #32]	@ (800d060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d040:	f7ff fe1c 	bl	800cc7c <USBD_GetString>
 800d044:	e004      	b.n	800d050 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	4904      	ldr	r1, [pc, #16]	@ (800d05c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d04a:	4805      	ldr	r0, [pc, #20]	@ (800d060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d04c:	f7ff fe16 	bl	800cc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d050:	4b02      	ldr	r3, [pc, #8]	@ (800d05c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	2000068c 	.word	0x2000068c
 800d060:	0800d910 	.word	0x0800d910

0800d064 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d06a:	4b0f      	ldr	r3, [pc, #60]	@ (800d0a8 <Get_SerialNum+0x44>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d070:	4b0e      	ldr	r3, [pc, #56]	@ (800d0ac <Get_SerialNum+0x48>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d076:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b0 <Get_SerialNum+0x4c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4413      	add	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d009      	beq.n	800d09e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d08a:	2208      	movs	r2, #8
 800d08c:	4909      	ldr	r1, [pc, #36]	@ (800d0b4 <Get_SerialNum+0x50>)
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 f814 	bl	800d0bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d094:	2204      	movs	r2, #4
 800d096:	4908      	ldr	r1, [pc, #32]	@ (800d0b8 <Get_SerialNum+0x54>)
 800d098:	68b8      	ldr	r0, [r7, #8]
 800d09a:	f000 f80f 	bl	800d0bc <IntToUnicode>
  }
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	1fff7a10 	.word	0x1fff7a10
 800d0ac:	1fff7a14 	.word	0x1fff7a14
 800d0b0:	1fff7a18 	.word	0x1fff7a18
 800d0b4:	200000c2 	.word	0x200000c2
 800d0b8:	200000d2 	.word	0x200000d2

0800d0bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	75fb      	strb	r3, [r7, #23]
 800d0d2:	e027      	b.n	800d124 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	0f1b      	lsrs	r3, r3, #28
 800d0d8:	2b09      	cmp	r3, #9
 800d0da:	d80b      	bhi.n	800d0f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	0f1b      	lsrs	r3, r3, #28
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	440b      	add	r3, r1
 800d0ec:	3230      	adds	r2, #48	@ 0x30
 800d0ee:	b2d2      	uxtb	r2, r2
 800d0f0:	701a      	strb	r2, [r3, #0]
 800d0f2:	e00a      	b.n	800d10a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	0f1b      	lsrs	r3, r3, #28
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4619      	mov	r1, r3
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	440b      	add	r3, r1
 800d104:	3237      	adds	r2, #55	@ 0x37
 800d106:	b2d2      	uxtb	r2, r2
 800d108:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d110:	7dfb      	ldrb	r3, [r7, #23]
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	3301      	adds	r3, #1
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	4413      	add	r3, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
 800d120:	3301      	adds	r3, #1
 800d122:	75fb      	strb	r3, [r7, #23]
 800d124:	7dfa      	ldrb	r2, [r7, #23]
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d3d3      	bcc.n	800d0d4 <IntToUnicode+0x18>
  }
}
 800d12c:	bf00      	nop
 800d12e:	bf00      	nop
 800d130:	371c      	adds	r7, #28
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	4603      	mov	r3, r0
 800d142:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800d144:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d152:	b480      	push	{r7}
 800d154:	b085      	sub	sp, #20
 800d156:	af00      	add	r7, sp, #0
 800d158:	4603      	mov	r3, r0
 800d15a:	60b9      	str	r1, [r7, #8]
 800d15c:	607a      	str	r2, [r7, #4]
 800d15e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d166:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d16e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800d170:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d172:	4618      	mov	r0, r3
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	4603      	mov	r3, r0
 800d186:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800d188:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	4603      	mov	r3, r0
 800d19e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800d1a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800d1c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800d1e4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800d1f6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
	...

0800d204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08a      	sub	sp, #40	@ 0x28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d20c:	f107 0314 	add.w	r3, r7, #20
 800d210:	2200      	movs	r2, #0
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	605a      	str	r2, [r3, #4]
 800d216:	609a      	str	r2, [r3, #8]
 800d218:	60da      	str	r2, [r3, #12]
 800d21a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d224:	d13a      	bne.n	800d29c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d226:	2300      	movs	r3, #0
 800d228:	613b      	str	r3, [r7, #16]
 800d22a:	4b1e      	ldr	r3, [pc, #120]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d22e:	4a1d      	ldr	r2, [pc, #116]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d230:	f043 0301 	orr.w	r3, r3, #1
 800d234:	6313      	str	r3, [r2, #48]	@ 0x30
 800d236:	4b1b      	ldr	r3, [pc, #108]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	613b      	str	r3, [r7, #16]
 800d240:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d242:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d248:	2302      	movs	r3, #2
 800d24a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d24c:	2300      	movs	r3, #0
 800d24e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d250:	2303      	movs	r3, #3
 800d252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d254:	230a      	movs	r3, #10
 800d256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	4619      	mov	r1, r3
 800d25e:	4812      	ldr	r0, [pc, #72]	@ (800d2a8 <HAL_PCD_MspInit+0xa4>)
 800d260:	f7f4 fce2 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d264:	4b0f      	ldr	r3, [pc, #60]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d268:	4a0e      	ldr	r2, [pc, #56]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d26e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d278:	4a0a      	ldr	r2, [pc, #40]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d27a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d27e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d280:	4b08      	ldr	r3, [pc, #32]	@ (800d2a4 <HAL_PCD_MspInit+0xa0>)
 800d282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d288:	60fb      	str	r3, [r7, #12]
 800d28a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800d28c:	2200      	movs	r2, #0
 800d28e:	2107      	movs	r1, #7
 800d290:	2043      	movs	r0, #67	@ 0x43
 800d292:	f7f4 f884 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d296:	2043      	movs	r0, #67	@ 0x43
 800d298:	f7f4 f89d 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d29c:	bf00      	nop
 800d29e:	3728      	adds	r7, #40	@ 0x28
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	40023800 	.word	0x40023800
 800d2a8:	40020000 	.word	0x40020000

0800d2ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	f7fe fb78 	bl	800b9b8 <USBD_LL_SetupStage>
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d2e2:	78fa      	ldrb	r2, [r7, #3]
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	4413      	add	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	440b      	add	r3, r1
 800d2f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f7fe fbb2 	bl	800ba62 <USBD_LL_DataOutStage>
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d318:	78fa      	ldrb	r2, [r7, #3]
 800d31a:	6879      	ldr	r1, [r7, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	3320      	adds	r3, #32
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	4619      	mov	r1, r3
 800d32e:	f7fe fc4b 	bl	800bbc8 <USBD_LL_DataInStage>
}
 800d332:	bf00      	nop
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe fd85 	bl	800be58 <USBD_LL_SOF>
}
 800d34e:	bf00      	nop
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d35e:	2301      	movs	r3, #1
 800d360:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	79db      	ldrb	r3, [r3, #7]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d102      	bne.n	800d370 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d36a:	2300      	movs	r3, #0
 800d36c:	73fb      	strb	r3, [r7, #15]
 800d36e:	e008      	b.n	800d382 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	79db      	ldrb	r3, [r3, #7]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d102      	bne.n	800d37e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d378:	2301      	movs	r3, #1
 800d37a:	73fb      	strb	r3, [r7, #15]
 800d37c:	e001      	b.n	800d382 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d37e:	f7f3 fba1 	bl	8000ac4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d388:	7bfa      	ldrb	r2, [r7, #15]
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe fd1f 	bl	800bdd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe fcc7 	bl	800bd2c <USBD_LL_Reset>
}
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe fd1a 	bl	800bdf0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	6812      	ldr	r2, [r2, #0]
 800d3ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7adb      	ldrb	r3, [r3, #11]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d005      	beq.n	800d3e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3dc:	4b04      	ldr	r3, [pc, #16]	@ (800d3f0 <HAL_PCD_SuspendCallback+0x48>)
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	4a03      	ldr	r2, [pc, #12]	@ (800d3f0 <HAL_PCD_SuspendCallback+0x48>)
 800d3e2:	f043 0306 	orr.w	r3, r3, #6
 800d3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	e000ed00 	.word	0xe000ed00

0800d3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe fd10 	bl	800be28 <USBD_LL_Resume>
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d422:	78fa      	ldrb	r2, [r7, #3]
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fd68 	bl	800befc <USBD_LL_IsoOUTIncomplete>
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fd24 	bl	800be98 <USBD_LL_IsoINIncomplete>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fd7a 	bl	800bf60 <USBD_LL_DevConnected>
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d482:	4618      	mov	r0, r3
 800d484:	f7fe fd77 	bl	800bf76 <USBD_LL_DevDisconnected>
}
 800d488:	bf00      	nop
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d13c      	bne.n	800d51a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d4a0:	4a20      	ldr	r2, [pc, #128]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d4b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4ba:	2204      	movs	r2, #4
 800d4bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d4be:	4b19      	ldr	r3, [pc, #100]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4c4:	4b17      	ldr	r3, [pc, #92]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d4ca:	4b16      	ldr	r3, [pc, #88]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4d0:	4b14      	ldr	r3, [pc, #80]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d4d6:	4b13      	ldr	r3, [pc, #76]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d4dc:	4b11      	ldr	r3, [pc, #68]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d4e2:	4b10      	ldr	r3, [pc, #64]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d4ee:	480d      	ldr	r0, [pc, #52]	@ (800d524 <USBD_LL_Init+0x94>)
 800d4f0:	f7f4 fd9b 	bl	800202a <HAL_PCD_Init>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d4fa:	f7f3 fae3 	bl	8000ac4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d4fe:	2180      	movs	r1, #128	@ 0x80
 800d500:	4808      	ldr	r0, [pc, #32]	@ (800d524 <USBD_LL_Init+0x94>)
 800d502:	f7f5 fff2 	bl	80034ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d506:	2240      	movs	r2, #64	@ 0x40
 800d508:	2100      	movs	r1, #0
 800d50a:	4806      	ldr	r0, [pc, #24]	@ (800d524 <USBD_LL_Init+0x94>)
 800d50c:	f7f5 ffa6 	bl	800345c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d510:	2280      	movs	r2, #128	@ 0x80
 800d512:	2101      	movs	r1, #1
 800d514:	4803      	ldr	r0, [pc, #12]	@ (800d524 <USBD_LL_Init+0x94>)
 800d516:	f7f5 ffa1 	bl	800345c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	2000088c 	.word	0x2000088c

0800d528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d530:	2300      	movs	r3, #0
 800d532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d53e:	4618      	mov	r0, r3
 800d540:	f7f4 fe82 	bl	8002248 <HAL_PCD_Start>
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 f962 	bl	800d814 <USBD_Get_USB_Status>
 800d550:	4603      	mov	r3, r0
 800d552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d554:	7bbb      	ldrb	r3, [r7, #14]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	4608      	mov	r0, r1
 800d568:	4611      	mov	r1, r2
 800d56a:	461a      	mov	r2, r3
 800d56c:	4603      	mov	r3, r0
 800d56e:	70fb      	strb	r3, [r7, #3]
 800d570:	460b      	mov	r3, r1
 800d572:	70bb      	strb	r3, [r7, #2]
 800d574:	4613      	mov	r3, r2
 800d576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d586:	78bb      	ldrb	r3, [r7, #2]
 800d588:	883a      	ldrh	r2, [r7, #0]
 800d58a:	78f9      	ldrb	r1, [r7, #3]
 800d58c:	f7f5 fb56 	bl	8002c3c <HAL_PCD_EP_Open>
 800d590:	4603      	mov	r3, r0
 800d592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	4618      	mov	r0, r3
 800d598:	f000 f93c 	bl	800d814 <USBD_Get_USB_Status>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5c4:	78fa      	ldrb	r2, [r7, #3]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7f5 fb9f 	bl	8002d0c <HAL_PCD_EP_Close>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 f91d 	bl	800d814 <USBD_Get_USB_Status>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	4611      	mov	r1, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f7f5 fd41 	bl	800308e <HAL_PCD_EP_Flush>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d610:	7bfb      	ldrb	r3, [r7, #15]
 800d612:	4618      	mov	r0, r3
 800d614:	f000 f8fe 	bl	800d814 <USBD_Get_USB_Status>
 800d618:	4603      	mov	r3, r0
 800d61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	460b      	mov	r3, r1
 800d630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d640:	78fa      	ldrb	r2, [r7, #3]
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7f5 fc38 	bl	8002eba <HAL_PCD_EP_SetStall>
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	4618      	mov	r0, r3
 800d652:	f000 f8df 	bl	800d814 <USBD_Get_USB_Status>
 800d656:	4603      	mov	r3, r0
 800d658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d67e:	78fa      	ldrb	r2, [r7, #3]
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7f5 fc7c 	bl	8002f80 <HAL_PCD_EP_ClrStall>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f8c0 	bl	800d814 <USBD_Get_USB_Status>
 800d694:	4603      	mov	r3, r0
 800d696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d698:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6b4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	da0b      	bge.n	800d6d6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6be:	78fb      	ldrb	r3, [r7, #3]
 800d6c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6c4:	68f9      	ldr	r1, [r7, #12]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	4413      	add	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3316      	adds	r3, #22
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	e00b      	b.n	800d6ee <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6d6:	78fb      	ldrb	r3, [r7, #3]
 800d6d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	440b      	add	r3, r1
 800d6e8:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d6ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	460b      	mov	r3, r1
 800d704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d70a:	2300      	movs	r3, #0
 800d70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f5 fa6b 	bl	8002bf4 <HAL_PCD_SetAddress>
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	4618      	mov	r0, r3
 800d726:	f000 f875 	bl	800d814 <USBD_Get_USB_Status>
 800d72a:	4603      	mov	r3, r0
 800d72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b086      	sub	sp, #24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	607a      	str	r2, [r7, #4]
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	460b      	mov	r3, r1
 800d746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d756:	7af9      	ldrb	r1, [r7, #11]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	f7f5 fb73 	bl	8002e46 <HAL_PCD_EP_Transmit>
 800d760:	4603      	mov	r3, r0
 800d762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	4618      	mov	r0, r3
 800d768:	f000 f854 	bl	800d814 <USBD_Get_USB_Status>
 800d76c:	4603      	mov	r3, r0
 800d76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d770:	7dbb      	ldrb	r3, [r7, #22]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b086      	sub	sp, #24
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
 800d786:	460b      	mov	r3, r1
 800d788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d798:	7af9      	ldrb	r1, [r7, #11]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	f7f5 faff 	bl	8002da0 <HAL_PCD_EP_Receive>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 f833 	bl	800d814 <USBD_Get_USB_Status>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f5 fb1f 	bl	8002e16 <HAL_PCD_EP_GetRxCount>
 800d7d8:	4603      	mov	r3, r0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7ec:	4b03      	ldr	r3, [pc, #12]	@ (800d7fc <USBD_static_malloc+0x18>)
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20000d70 	.word	0x20000d70

0800d800 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]

}
 800d808:	bf00      	nop
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	2b03      	cmp	r3, #3
 800d826:	d817      	bhi.n	800d858 <USBD_Get_USB_Status+0x44>
 800d828:	a201      	add	r2, pc, #4	@ (adr r2, 800d830 <USBD_Get_USB_Status+0x1c>)
 800d82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82e:	bf00      	nop
 800d830:	0800d841 	.word	0x0800d841
 800d834:	0800d847 	.word	0x0800d847
 800d838:	0800d84d 	.word	0x0800d84d
 800d83c:	0800d853 	.word	0x0800d853
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]
    break;
 800d844:	e00b      	b.n	800d85e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d846:	2303      	movs	r3, #3
 800d848:	73fb      	strb	r3, [r7, #15]
    break;
 800d84a:	e008      	b.n	800d85e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d84c:	2301      	movs	r3, #1
 800d84e:	73fb      	strb	r3, [r7, #15]
    break;
 800d850:	e005      	b.n	800d85e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d852:	2303      	movs	r3, #3
 800d854:	73fb      	strb	r3, [r7, #15]
    break;
 800d856:	e002      	b.n	800d85e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d858:	2303      	movs	r3, #3
 800d85a:	73fb      	strb	r3, [r7, #15]
    break;
 800d85c:	bf00      	nop
  }
  return usb_status;
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <memset>:
 800d86c:	4402      	add	r2, r0
 800d86e:	4603      	mov	r3, r0
 800d870:	4293      	cmp	r3, r2
 800d872:	d100      	bne.n	800d876 <memset+0xa>
 800d874:	4770      	bx	lr
 800d876:	f803 1b01 	strb.w	r1, [r3], #1
 800d87a:	e7f9      	b.n	800d870 <memset+0x4>

0800d87c <__libc_init_array>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4d0d      	ldr	r5, [pc, #52]	@ (800d8b4 <__libc_init_array+0x38>)
 800d880:	4c0d      	ldr	r4, [pc, #52]	@ (800d8b8 <__libc_init_array+0x3c>)
 800d882:	1b64      	subs	r4, r4, r5
 800d884:	10a4      	asrs	r4, r4, #2
 800d886:	2600      	movs	r6, #0
 800d888:	42a6      	cmp	r6, r4
 800d88a:	d109      	bne.n	800d8a0 <__libc_init_array+0x24>
 800d88c:	4d0b      	ldr	r5, [pc, #44]	@ (800d8bc <__libc_init_array+0x40>)
 800d88e:	4c0c      	ldr	r4, [pc, #48]	@ (800d8c0 <__libc_init_array+0x44>)
 800d890:	f000 f818 	bl	800d8c4 <_init>
 800d894:	1b64      	subs	r4, r4, r5
 800d896:	10a4      	asrs	r4, r4, #2
 800d898:	2600      	movs	r6, #0
 800d89a:	42a6      	cmp	r6, r4
 800d89c:	d105      	bne.n	800d8aa <__libc_init_array+0x2e>
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a4:	4798      	blx	r3
 800d8a6:	3601      	adds	r6, #1
 800d8a8:	e7ee      	b.n	800d888 <__libc_init_array+0xc>
 800d8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ae:	4798      	blx	r3
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	e7f2      	b.n	800d89a <__libc_init_array+0x1e>
 800d8b4:	0800d980 	.word	0x0800d980
 800d8b8:	0800d980 	.word	0x0800d980
 800d8bc:	0800d980 	.word	0x0800d980
 800d8c0:	0800d984 	.word	0x0800d984

0800d8c4 <_init>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	bf00      	nop
 800d8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ca:	bc08      	pop	{r3}
 800d8cc:	469e      	mov	lr, r3
 800d8ce:	4770      	bx	lr

0800d8d0 <_fini>:
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	bf00      	nop
 800d8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d6:	bc08      	pop	{r3}
 800d8d8:	469e      	mov	lr, r3
 800d8da:	4770      	bx	lr
