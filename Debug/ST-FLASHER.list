
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  0800e5a8  0800e5a8  0000f5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800f6a4  0800f6a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  0800f6bc  0800f6bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f77c  0800f77c  00011164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f77c  0800f77c  0001077c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f780  0800f780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800f784  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011164  2**0
                  CONTENTS
 10 .bss          000020bc  20000168  20000168  00011168  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  20002224  20002224  00011168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003abdc  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008219  00000000  00000000  0004bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001c9d4  00000000  00000000  00053f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002118  00000000  00000000  00070960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ff7  00000000  00000000  00072a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003112c  00000000  00000000  00074a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040f58  00000000  00000000  000a5b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9967  00000000  00000000  000e6af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e045a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ab8  00000000  00000000  001e04a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  001e6f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e590 	.word	0x0800e590

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800e590 	.word	0x0800e590

080001f0 <setjmp>:
 80001f0:	46ec      	mov	ip, sp
 80001f2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001fa:	f04f 0000 	mov.w	r0, #0
 80001fe:	4770      	bx	lr

08000200 <longjmp>:
 8000200:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000204:	46e5      	mov	sp, ip
 8000206:	ec90 8b10 	vldmia	r0, {d8-d15}
 800020a:	0008      	movs	r0, r1
 800020c:	bf08      	it	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f001 b8f6 	b.w	80014c4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <selfrel_offset31>:
 80005ac:	6803      	ldr	r3, [r0, #0]
 80005ae:	005a      	lsls	r2, r3, #1
 80005b0:	bf4c      	ite	mi
 80005b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80005b6:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80005ba:	4418      	add	r0, r3
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <search_EIT_table>:
 80005c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005c4:	b349      	cbz	r1, 800061a <search_EIT_table+0x5a>
 80005c6:	1e4f      	subs	r7, r1, #1
 80005c8:	4604      	mov	r4, r0
 80005ca:	4615      	mov	r5, r2
 80005cc:	463e      	mov	r6, r7
 80005ce:	f04f 0900 	mov.w	r9, #0
 80005d2:	eb09 0106 	add.w	r1, r9, r6
 80005d6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005da:	1049      	asrs	r1, r1, #1
 80005dc:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 80005e0:	4640      	mov	r0, r8
 80005e2:	f7ff ffe3 	bl	80005ac <selfrel_offset31>
 80005e6:	428f      	cmp	r7, r1
 80005e8:	4603      	mov	r3, r0
 80005ea:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 80005ee:	d00f      	beq.n	8000610 <search_EIT_table+0x50>
 80005f0:	3008      	adds	r0, #8
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	4420      	add	r0, r4
 80005f6:	d807      	bhi.n	8000608 <search_EIT_table+0x48>
 80005f8:	f7ff ffd8 	bl	80005ac <selfrel_offset31>
 80005fc:	3801      	subs	r0, #1
 80005fe:	42a8      	cmp	r0, r5
 8000600:	d208      	bcs.n	8000614 <search_EIT_table+0x54>
 8000602:	f101 0901 	add.w	r9, r1, #1
 8000606:	e7e4      	b.n	80005d2 <search_EIT_table+0x12>
 8000608:	4589      	cmp	r9, r1
 800060a:	d006      	beq.n	800061a <search_EIT_table+0x5a>
 800060c:	1e4e      	subs	r6, r1, #1
 800060e:	e7e0      	b.n	80005d2 <search_EIT_table+0x12>
 8000610:	42ab      	cmp	r3, r5
 8000612:	d8f9      	bhi.n	8000608 <search_EIT_table+0x48>
 8000614:	4640      	mov	r0, r8
 8000616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800061a:	f04f 0800 	mov.w	r8, #0
 800061e:	4640      	mov	r0, r8
 8000620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000624 <__gnu_unwind_get_pr_addr>:
 8000624:	2801      	cmp	r0, #1
 8000626:	d007      	beq.n	8000638 <__gnu_unwind_get_pr_addr+0x14>
 8000628:	2802      	cmp	r0, #2
 800062a:	d007      	beq.n	800063c <__gnu_unwind_get_pr_addr+0x18>
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <__gnu_unwind_get_pr_addr+0x1c>)
 800062e:	2800      	cmp	r0, #0
 8000630:	bf0c      	ite	eq
 8000632:	4618      	moveq	r0, r3
 8000634:	2000      	movne	r0, #0
 8000636:	4770      	bx	lr
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <__gnu_unwind_get_pr_addr+0x20>)
 800063a:	4770      	bx	lr
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <__gnu_unwind_get_pr_addr+0x24>)
 800063e:	4770      	bx	lr
 8000640:	08000ced 	.word	0x08000ced
 8000644:	08000cf1 	.word	0x08000cf1
 8000648:	08000cf5 	.word	0x08000cf5

0800064c <get_eit_entry>:
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <get_eit_entry+0x88>)
 8000650:	b083      	sub	sp, #12
 8000652:	4604      	mov	r4, r0
 8000654:	1e8d      	subs	r5, r1, #2
 8000656:	b31b      	cbz	r3, 80006a0 <get_eit_entry+0x54>
 8000658:	a901      	add	r1, sp, #4
 800065a:	4628      	mov	r0, r5
 800065c:	f3af 8000 	nop.w
 8000660:	b388      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 8000662:	9901      	ldr	r1, [sp, #4]
 8000664:	462a      	mov	r2, r5
 8000666:	f7ff ffab 	bl	80005c0 <search_EIT_table>
 800066a:	4601      	mov	r1, r0
 800066c:	b358      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 800066e:	f7ff ff9d 	bl	80005ac <selfrel_offset31>
 8000672:	684b      	ldr	r3, [r1, #4]
 8000674:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000676:	2b01      	cmp	r3, #1
 8000678:	d028      	beq.n	80006cc <get_eit_entry+0x80>
 800067a:	2b00      	cmp	r3, #0
 800067c:	f101 0004 	add.w	r0, r1, #4
 8000680:	db1f      	blt.n	80006c2 <get_eit_entry+0x76>
 8000682:	f7ff ff93 	bl	80005ac <selfrel_offset31>
 8000686:	2300      	movs	r3, #0
 8000688:	6523      	str	r3, [r4, #80]	@ 0x50
 800068a:	6803      	ldr	r3, [r0, #0]
 800068c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0d      	blt.n	80006ae <get_eit_entry+0x62>
 8000692:	f7ff ff8b 	bl	80005ac <selfrel_offset31>
 8000696:	4603      	mov	r3, r0
 8000698:	2000      	movs	r0, #0
 800069a:	6123      	str	r3, [r4, #16]
 800069c:	b003      	add	sp, #12
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <get_eit_entry+0x8c>)
 80006a2:	490e      	ldr	r1, [pc, #56]	@ (80006dc <get_eit_entry+0x90>)
 80006a4:	1ac9      	subs	r1, r1, r3
 80006a6:	10c9      	asrs	r1, r1, #3
 80006a8:	4618      	mov	r0, r3
 80006aa:	9101      	str	r1, [sp, #4]
 80006ac:	e7da      	b.n	8000664 <get_eit_entry+0x18>
 80006ae:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006b2:	f7ff ffb7 	bl	8000624 <__gnu_unwind_get_pr_addr>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b128      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 80006ba:	2000      	movs	r0, #0
 80006bc:	6123      	str	r3, [r4, #16]
 80006be:	b003      	add	sp, #12
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	2301      	movs	r3, #1
 80006c4:	e7e0      	b.n	8000688 <get_eit_entry+0x3c>
 80006c6:	2300      	movs	r3, #0
 80006c8:	2009      	movs	r0, #9
 80006ca:	e7e6      	b.n	800069a <get_eit_entry+0x4e>
 80006cc:	2300      	movs	r3, #0
 80006ce:	2005      	movs	r0, #5
 80006d0:	e7e3      	b.n	800069a <get_eit_entry+0x4e>
 80006d2:	bf00      	nop
 80006d4:	00000000 	.word	0x00000000
 80006d8:	0800f6bc 	.word	0x0800f6bc
 80006dc:	0800f77c 	.word	0x0800f77c

080006e0 <restore_non_core_regs>:
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	07da      	lsls	r2, r3, #31
 80006e4:	b510      	push	{r4, lr}
 80006e6:	4604      	mov	r4, r0
 80006e8:	d406      	bmi.n	80006f8 <restore_non_core_regs+0x18>
 80006ea:	079b      	lsls	r3, r3, #30
 80006ec:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80006f0:	d509      	bpl.n	8000706 <restore_non_core_regs+0x26>
 80006f2:	f000 fc69 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d509      	bpl.n	8000710 <restore_non_core_regs+0x30>
 80006fc:	071a      	lsls	r2, r3, #28
 80006fe:	d50e      	bpl.n	800071e <restore_non_core_regs+0x3e>
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d513      	bpl.n	800072c <restore_non_core_regs+0x4c>
 8000704:	bd10      	pop	{r4, pc}
 8000706:	f000 fc57 	bl	8000fb8 <__gnu_Unwind_Restore_VFP>
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	0759      	lsls	r1, r3, #29
 800070e:	d4f5      	bmi.n	80006fc <restore_non_core_regs+0x1c>
 8000710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000714:	f000 fc60 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	071a      	lsls	r2, r3, #28
 800071c:	d4f0      	bmi.n	8000700 <restore_non_core_regs+0x20>
 800071e:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8000722:	f000 fc61 	bl	8000fe8 <__gnu_Unwind_Restore_WMMXD>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	06db      	lsls	r3, r3, #27
 800072a:	d4eb      	bmi.n	8000704 <restore_non_core_regs+0x24>
 800072c:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f000 bc9c 	b.w	8001070 <__gnu_Unwind_Restore_WMMXC>

08000738 <__gnu_unwind_24bit.constprop.0>:
 8000738:	2009      	movs	r0, #9
 800073a:	4770      	bx	lr

0800073c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800073c:	4603      	mov	r3, r0
 800073e:	6800      	ldr	r0, [r0, #0]
 8000740:	b100      	cbz	r0, 8000744 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000742:	4418      	add	r0, r3
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <_Unwind_DebugHook>:
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <unwind_phase2>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4604      	mov	r4, r0
 8000750:	460e      	mov	r6, r1
 8000752:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000754:	4620      	mov	r0, r4
 8000756:	f7ff ff79 	bl	800064c <get_eit_entry>
 800075a:	4605      	mov	r5, r0
 800075c:	b988      	cbnz	r0, 8000782 <unwind_phase2+0x36>
 800075e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000760:	6162      	str	r2, [r4, #20]
 8000762:	6923      	ldr	r3, [r4, #16]
 8000764:	4632      	mov	r2, r6
 8000766:	4621      	mov	r1, r4
 8000768:	2001      	movs	r0, #1
 800076a:	4798      	blx	r3
 800076c:	2808      	cmp	r0, #8
 800076e:	d0f0      	beq.n	8000752 <unwind_phase2+0x6>
 8000770:	2807      	cmp	r0, #7
 8000772:	d106      	bne.n	8000782 <unwind_phase2+0x36>
 8000774:	4628      	mov	r0, r5
 8000776:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000778:	f7ff ffe6 	bl	8000748 <_Unwind_DebugHook>
 800077c:	1d30      	adds	r0, r6, #4
 800077e:	f000 fc0f 	bl	8000fa0 <__restore_core_regs>
 8000782:	f00d feb9 	bl	800e4f8 <abort>
 8000786:	bf00      	nop

08000788 <unwind_phase2_forced>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	1d0d      	adds	r5, r1, #4
 800078e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000792:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000796:	4607      	mov	r7, r0
 8000798:	4614      	mov	r4, r2
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80007a0:	f10d 0c0c 	add.w	ip, sp, #12
 80007a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007b8:	ae02      	add	r6, sp, #8
 80007ba:	f04f 0e00 	mov.w	lr, #0
 80007be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007c2:	f8c6 e000 	str.w	lr, [r6]
 80007c6:	e020      	b.n	800080a <unwind_phase2_forced+0x82>
 80007c8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007d0:	4631      	mov	r1, r6
 80007d2:	a87a      	add	r0, sp, #488	@ 0x1e8
 80007d4:	f00c ffb7 	bl	800d746 <memcpy>
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80007dc:	4639      	mov	r1, r7
 80007de:	4650      	mov	r0, sl
 80007e0:	4798      	blx	r3
 80007e2:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80007e4:	6473      	str	r3, [r6, #68]	@ 0x44
 80007e6:	4621      	mov	r1, r4
 80007e8:	e9cd 6900 	strd	r6, r9, [sp]
 80007ec:	4605      	mov	r5, r0
 80007ee:	463b      	mov	r3, r7
 80007f0:	463a      	mov	r2, r7
 80007f2:	2001      	movs	r0, #1
 80007f4:	47c0      	blx	r8
 80007f6:	4604      	mov	r4, r0
 80007f8:	bb18      	cbnz	r0, 8000842 <unwind_phase2_forced+0xba>
 80007fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007fe:	a97a      	add	r1, sp, #488	@ 0x1e8
 8000800:	4630      	mov	r0, r6
 8000802:	f00c ffa0 	bl	800d746 <memcpy>
 8000806:	2d08      	cmp	r5, #8
 8000808:	d119      	bne.n	800083e <unwind_phase2_forced+0xb6>
 800080a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800080c:	4638      	mov	r0, r7
 800080e:	f7ff ff1d 	bl	800064c <get_eit_entry>
 8000812:	3409      	adds	r4, #9
 8000814:	fa5f fa84 	uxtb.w	sl, r4
 8000818:	4605      	mov	r5, r0
 800081a:	2800      	cmp	r0, #0
 800081c:	d0d4      	beq.n	80007c8 <unwind_phase2_forced+0x40>
 800081e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000820:	6473      	str	r3, [r6, #68]	@ 0x44
 8000822:	463a      	mov	r2, r7
 8000824:	e9cd 6900 	strd	r6, r9, [sp]
 8000828:	463b      	mov	r3, r7
 800082a:	f04a 0110 	orr.w	r1, sl, #16
 800082e:	2001      	movs	r0, #1
 8000830:	47c0      	blx	r8
 8000832:	b930      	cbnz	r0, 8000842 <unwind_phase2_forced+0xba>
 8000834:	4628      	mov	r0, r5
 8000836:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	2d07      	cmp	r5, #7
 8000840:	d005      	beq.n	800084e <unwind_phase2_forced+0xc6>
 8000842:	2509      	movs	r5, #9
 8000844:	4628      	mov	r0, r5
 8000846:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	4620      	mov	r0, r4
 8000850:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000852:	f7ff ff79 	bl	8000748 <_Unwind_DebugHook>
 8000856:	a803      	add	r0, sp, #12
 8000858:	f000 fba2 	bl	8000fa0 <__restore_core_regs>

0800085c <_Unwind_GetCFA>:
 800085c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800085e:	4770      	bx	lr

08000860 <__gnu_Unwind_RaiseException>:
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000864:	640b      	str	r3, [r1, #64]	@ 0x40
 8000866:	f101 0c04 	add.w	ip, r1, #4
 800086a:	460e      	mov	r6, r1
 800086c:	4605      	mov	r5, r0
 800086e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000872:	b0f9      	sub	sp, #484	@ 0x1e4
 8000874:	ac01      	add	r4, sp, #4
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000884:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000888:	f04f 37ff 	mov.w	r7, #4294967295
 800088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000890:	9700      	str	r7, [sp, #0]
 8000892:	e006      	b.n	80008a2 <__gnu_Unwind_RaiseException+0x42>
 8000894:	692b      	ldr	r3, [r5, #16]
 8000896:	466a      	mov	r2, sp
 8000898:	4629      	mov	r1, r5
 800089a:	4798      	blx	r3
 800089c:	2808      	cmp	r0, #8
 800089e:	4604      	mov	r4, r0
 80008a0:	d108      	bne.n	80008b4 <__gnu_Unwind_RaiseException+0x54>
 80008a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80008a4:	4628      	mov	r0, r5
 80008a6:	f7ff fed1 	bl	800064c <get_eit_entry>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d0f2      	beq.n	8000894 <__gnu_Unwind_RaiseException+0x34>
 80008ae:	2009      	movs	r0, #9
 80008b0:	b079      	add	sp, #484	@ 0x1e4
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	4668      	mov	r0, sp
 80008b6:	f7ff ff13 	bl	80006e0 <restore_non_core_regs>
 80008ba:	2c06      	cmp	r4, #6
 80008bc:	d1f7      	bne.n	80008ae <__gnu_Unwind_RaiseException+0x4e>
 80008be:	4631      	mov	r1, r6
 80008c0:	4628      	mov	r0, r5
 80008c2:	f7ff ff43 	bl	800074c <unwind_phase2>
 80008c6:	bf00      	nop

080008c8 <__gnu_Unwind_ForcedUnwind>:
 80008c8:	60c1      	str	r1, [r0, #12]
 80008ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80008cc:	6182      	str	r2, [r0, #24]
 80008ce:	6419      	str	r1, [r3, #64]	@ 0x40
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	e758      	b.n	8000788 <unwind_phase2_forced>
 80008d6:	bf00      	nop

080008d8 <__gnu_Unwind_Resume>:
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	68c6      	ldr	r6, [r0, #12]
 80008dc:	6943      	ldr	r3, [r0, #20]
 80008de:	640b      	str	r3, [r1, #64]	@ 0x40
 80008e0:	b9ae      	cbnz	r6, 800090e <__gnu_Unwind_Resume+0x36>
 80008e2:	6903      	ldr	r3, [r0, #16]
 80008e4:	460a      	mov	r2, r1
 80008e6:	4604      	mov	r4, r0
 80008e8:	460d      	mov	r5, r1
 80008ea:	4601      	mov	r1, r0
 80008ec:	2002      	movs	r0, #2
 80008ee:	4798      	blx	r3
 80008f0:	2807      	cmp	r0, #7
 80008f2:	d005      	beq.n	8000900 <__gnu_Unwind_Resume+0x28>
 80008f4:	2808      	cmp	r0, #8
 80008f6:	d10f      	bne.n	8000918 <__gnu_Unwind_Resume+0x40>
 80008f8:	4629      	mov	r1, r5
 80008fa:	4620      	mov	r0, r4
 80008fc:	f7ff ff26 	bl	800074c <unwind_phase2>
 8000900:	4630      	mov	r0, r6
 8000902:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8000904:	f7ff ff20 	bl	8000748 <_Unwind_DebugHook>
 8000908:	1d28      	adds	r0, r5, #4
 800090a:	f000 fb49 	bl	8000fa0 <__restore_core_regs>
 800090e:	2201      	movs	r2, #1
 8000910:	f7ff ff3a 	bl	8000788 <unwind_phase2_forced>
 8000914:	f00d fdf0 	bl	800e4f8 <abort>
 8000918:	f00d fdee 	bl	800e4f8 <abort>

0800091c <__gnu_Unwind_Resume_or_Rethrow>:
 800091c:	68c2      	ldr	r2, [r0, #12]
 800091e:	b11a      	cbz	r2, 8000928 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000920:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000922:	640a      	str	r2, [r1, #64]	@ 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	e72f      	b.n	8000788 <unwind_phase2_forced>
 8000928:	e79a      	b.n	8000860 <__gnu_Unwind_RaiseException>
 800092a:	bf00      	nop

0800092c <_Unwind_Complete>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <_Unwind_DeleteException>:
 8000930:	6883      	ldr	r3, [r0, #8]
 8000932:	4601      	mov	r1, r0
 8000934:	b10b      	cbz	r3, 800093a <_Unwind_DeleteException+0xa>
 8000936:	2001      	movs	r0, #1
 8000938:	4718      	bx	r3
 800093a:	4770      	bx	lr

0800093c <_Unwind_VRS_Get>:
 800093c:	2901      	cmp	r1, #1
 800093e:	d010      	beq.n	8000962 <_Unwind_VRS_Get+0x26>
 8000940:	d809      	bhi.n	8000956 <_Unwind_VRS_Get+0x1a>
 8000942:	b983      	cbnz	r3, 8000966 <_Unwind_VRS_Get+0x2a>
 8000944:	2a0f      	cmp	r2, #15
 8000946:	d80e      	bhi.n	8000966 <_Unwind_VRS_Get+0x2a>
 8000948:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800094c:	4618      	mov	r0, r3
 800094e:	6853      	ldr	r3, [r2, #4]
 8000950:	9a00      	ldr	r2, [sp, #0]
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4770      	bx	lr
 8000956:	3903      	subs	r1, #3
 8000958:	2901      	cmp	r1, #1
 800095a:	bf8c      	ite	hi
 800095c:	2002      	movhi	r0, #2
 800095e:	2001      	movls	r0, #1
 8000960:	4770      	bx	lr
 8000962:	4608      	mov	r0, r1
 8000964:	4770      	bx	lr
 8000966:	2002      	movs	r0, #2
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <_Unwind_GetGR>:
 800096c:	b500      	push	{lr}
 800096e:	b085      	sub	sp, #20
 8000970:	460a      	mov	r2, r1
 8000972:	2300      	movs	r3, #0
 8000974:	a903      	add	r1, sp, #12
 8000976:	9100      	str	r1, [sp, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f7ff ffdf 	bl	800093c <_Unwind_VRS_Get>
 800097e:	9803      	ldr	r0, [sp, #12]
 8000980:	b005      	add	sp, #20
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	bf00      	nop

08000988 <_Unwind_VRS_Set>:
 8000988:	2901      	cmp	r1, #1
 800098a:	d010      	beq.n	80009ae <_Unwind_VRS_Set+0x26>
 800098c:	d809      	bhi.n	80009a2 <_Unwind_VRS_Set+0x1a>
 800098e:	b983      	cbnz	r3, 80009b2 <_Unwind_VRS_Set+0x2a>
 8000990:	2a0f      	cmp	r2, #15
 8000992:	d80e      	bhi.n	80009b2 <_Unwind_VRS_Set+0x2a>
 8000994:	9900      	ldr	r1, [sp, #0]
 8000996:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800099a:	6809      	ldr	r1, [r1, #0]
 800099c:	6051      	str	r1, [r2, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	4770      	bx	lr
 80009a2:	3903      	subs	r1, #3
 80009a4:	2901      	cmp	r1, #1
 80009a6:	bf8c      	ite	hi
 80009a8:	2002      	movhi	r0, #2
 80009aa:	2001      	movls	r0, #1
 80009ac:	4770      	bx	lr
 80009ae:	4608      	mov	r0, r1
 80009b0:	4770      	bx	lr
 80009b2:	2002      	movs	r0, #2
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <_Unwind_SetGR>:
 80009b8:	b510      	push	{r4, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	2300      	movs	r3, #0
 80009be:	ac03      	add	r4, sp, #12
 80009c0:	9203      	str	r2, [sp, #12]
 80009c2:	9400      	str	r4, [sp, #0]
 80009c4:	460a      	mov	r2, r1
 80009c6:	4619      	mov	r1, r3
 80009c8:	f7ff ffde 	bl	8000988 <_Unwind_VRS_Set>
 80009cc:	b004      	add	sp, #16
 80009ce:	bd10      	pop	{r4, pc}

080009d0 <__gnu_Unwind_Backtrace>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	f102 0c04 	add.w	ip, r2, #4
 80009da:	4605      	mov	r5, r0
 80009dc:	460c      	mov	r4, r1
 80009de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009e2:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80009e6:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80009ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009fe:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a02:	f04f 36ff 	mov.w	r6, #4294967295
 8000a06:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000a0a:	9616      	str	r6, [sp, #88]	@ 0x58
 8000a0c:	e010      	b.n	8000a30 <__gnu_Unwind_Backtrace+0x60>
 8000a0e:	f7ff ffd3 	bl	80009b8 <_Unwind_SetGR>
 8000a12:	4621      	mov	r1, r4
 8000a14:	a816      	add	r0, sp, #88	@ 0x58
 8000a16:	47a8      	blx	r5
 8000a18:	4603      	mov	r3, r0
 8000a1a:	aa16      	add	r2, sp, #88	@ 0x58
 8000a1c:	4669      	mov	r1, sp
 8000a1e:	2008      	movs	r0, #8
 8000a20:	b983      	cbnz	r3, 8000a44 <__gnu_Unwind_Backtrace+0x74>
 8000a22:	9b04      	ldr	r3, [sp, #16]
 8000a24:	4798      	blx	r3
 8000a26:	2805      	cmp	r0, #5
 8000a28:	4606      	mov	r6, r0
 8000a2a:	d00c      	beq.n	8000a46 <__gnu_Unwind_Backtrace+0x76>
 8000a2c:	2809      	cmp	r0, #9
 8000a2e:	d009      	beq.n	8000a44 <__gnu_Unwind_Backtrace+0x74>
 8000a30:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000a32:	4668      	mov	r0, sp
 8000a34:	f7ff fe0a 	bl	800064c <get_eit_entry>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	466a      	mov	r2, sp
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	a816      	add	r0, sp, #88	@ 0x58
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0e4      	beq.n	8000a0e <__gnu_Unwind_Backtrace+0x3e>
 8000a44:	2609      	movs	r6, #9
 8000a46:	a816      	add	r0, sp, #88	@ 0x58
 8000a48:	f7ff fe4a 	bl	80006e0 <restore_non_core_regs>
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8000a52:	bd70      	pop	{r4, r5, r6, pc}

08000a54 <__gnu_unwind_pr_common>:
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4693      	mov	fp, r2
 8000a5a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000a5c:	b089      	sub	sp, #36	@ 0x24
 8000a5e:	460d      	mov	r5, r1
 8000a60:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a64:	9206      	str	r2, [sp, #24]
 8000a66:	f000 0c03 	and.w	ip, r0, #3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d079      	beq.n	8000b62 <__gnu_unwind_pr_common+0x10e>
 8000a6e:	0c0c      	lsrs	r4, r1, #16
 8000a70:	f88d 401d 	strb.w	r4, [sp, #29]
 8000a74:	0409      	lsls	r1, r1, #16
 8000a76:	b2e4      	uxtb	r4, r4
 8000a78:	9105      	str	r1, [sp, #20]
 8000a7a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000a7e:	2102      	movs	r1, #2
 8000a80:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8000a82:	f88d 101c 	strb.w	r1, [sp, #28]
 8000a86:	f1bc 0f02 	cmp.w	ip, #2
 8000a8a:	bf08      	it	eq
 8000a8c:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000a8e:	f017 0701 	ands.w	r7, r7, #1
 8000a92:	d00c      	beq.n	8000aae <__gnu_unwind_pr_common+0x5a>
 8000a94:	a905      	add	r1, sp, #20
 8000a96:	4658      	mov	r0, fp
 8000a98:	f000 fb84 	bl	80011a4 <__gnu_unwind_execute>
 8000a9c:	b918      	cbnz	r0, 8000aa6 <__gnu_unwind_pr_common+0x52>
 8000a9e:	2008      	movs	r0, #8
 8000aa0:	b009      	add	sp, #36	@ 0x24
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	b009      	add	sp, #36	@ 0x24
 8000aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aae:	6816      	ldr	r6, [r2, #0]
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d0ef      	beq.n	8000a94 <__gnu_unwind_pr_common+0x40>
 8000ab4:	f000 0108 	and.w	r1, r0, #8
 8000ab8:	9101      	str	r1, [sp, #4]
 8000aba:	46b2      	mov	sl, r6
 8000abc:	9702      	str	r7, [sp, #8]
 8000abe:	4664      	mov	r4, ip
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	f1b9 0f02 	cmp.w	r9, #2
 8000ac6:	d048      	beq.n	8000b5a <__gnu_unwind_pr_common+0x106>
 8000ac8:	f8b2 a000 	ldrh.w	sl, [r2]
 8000acc:	8856      	ldrh	r6, [r2, #2]
 8000ace:	f102 0804 	add.w	r8, r2, #4
 8000ad2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000ad4:	f026 0301 	bic.w	r3, r6, #1
 8000ad8:	210f      	movs	r1, #15
 8000ada:	4658      	mov	r0, fp
 8000adc:	189f      	adds	r7, r3, r2
 8000ade:	f7ff ff45 	bl	800096c <_Unwind_GetGR>
 8000ae2:	4287      	cmp	r7, r0
 8000ae4:	d837      	bhi.n	8000b56 <__gnu_unwind_pr_common+0x102>
 8000ae6:	f02a 0201 	bic.w	r2, sl, #1
 8000aea:	443a      	add	r2, r7
 8000aec:	4282      	cmp	r2, r0
 8000aee:	bf94      	ite	ls
 8000af0:	2200      	movls	r2, #0
 8000af2:	2201      	movhi	r2, #1
 8000af4:	0073      	lsls	r3, r6, #1
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	f00a 0a01 	and.w	sl, sl, #1
 8000afe:	ea43 030a 	orr.w	r3, r3, sl
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d047      	beq.n	8000b96 <__gnu_unwind_pr_common+0x142>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d031      	beq.n	8000b6e <__gnu_unwind_pr_common+0x11a>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1cb      	bne.n	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000b0e:	b114      	cbz	r4, 8000b16 <__gnu_unwind_pr_common+0xc2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 80c9 	bne.w	8000ca8 <__gnu_unwind_pr_common+0x254>
 8000b16:	f108 0204 	add.w	r2, r8, #4
 8000b1a:	f8d2 a000 	ldr.w	sl, [r2]
 8000b1e:	f1ba 0f00 	cmp.w	sl, #0
 8000b22:	d1ce      	bne.n	8000ac2 <__gnu_unwind_pr_common+0x6e>
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4658      	mov	r0, fp
 8000b28:	9f02      	ldr	r7, [sp, #8]
 8000b2a:	f000 fb3b 	bl	80011a4 <__gnu_unwind_execute>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d1b9      	bne.n	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d0b3      	beq.n	8000a9e <__gnu_unwind_pr_common+0x4a>
 8000b36:	210f      	movs	r1, #15
 8000b38:	4658      	mov	r0, fp
 8000b3a:	f7ff ff17 	bl	800096c <_Unwind_GetGR>
 8000b3e:	210e      	movs	r1, #14
 8000b40:	4602      	mov	r2, r0
 8000b42:	4658      	mov	r0, fp
 8000b44:	f7ff ff38 	bl	80009b8 <_Unwind_SetGR>
 8000b48:	4a67      	ldr	r2, [pc, #412]	@ (8000ce8 <__gnu_unwind_pr_common+0x294>)
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	4658      	mov	r0, fp
 8000b4e:	f7ff ff33 	bl	80009b8 <_Unwind_SetGR>
 8000b52:	2007      	movs	r0, #7
 8000b54:	e7a8      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000b56:	2200      	movs	r2, #0
 8000b58:	e7cc      	b.n	8000af4 <__gnu_unwind_pr_common+0xa0>
 8000b5a:	6856      	ldr	r6, [r2, #4]
 8000b5c:	f102 0808 	add.w	r8, r2, #8
 8000b60:	e7b7      	b.n	8000ad2 <__gnu_unwind_pr_common+0x7e>
 8000b62:	0209      	lsls	r1, r1, #8
 8000b64:	9105      	str	r1, [sp, #20]
 8000b66:	f88d 301d 	strb.w	r3, [sp, #29]
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	e788      	b.n	8000a80 <__gnu_unwind_pr_common+0x2c>
 8000b6e:	f8d8 6000 	ldr.w	r6, [r8]
 8000b72:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d144      	bne.n	8000c04 <__gnu_unwind_pr_common+0x1b0>
 8000b7a:	b122      	cbz	r2, 8000b86 <__gnu_unwind_pr_common+0x132>
 8000b7c:	9a01      	ldr	r2, [sp, #4]
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d05a      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1e4>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d058      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1e4>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	da01      	bge.n	8000b8e <__gnu_unwind_pr_common+0x13a>
 8000b8a:	f108 0804 	add.w	r8, r8, #4
 8000b8e:	3301      	adds	r3, #1
 8000b90:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000b94:	e7c1      	b.n	8000b1a <__gnu_unwind_pr_common+0xc6>
 8000b96:	b9ec      	cbnz	r4, 8000bd4 <__gnu_unwind_pr_common+0x180>
 8000b98:	b1ca      	cbz	r2, 8000bce <__gnu_unwind_pr_common+0x17a>
 8000b9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000b9e:	f8d8 2000 	ldr.w	r2, [r8]
 8000ba2:	1c99      	adds	r1, r3, #2
 8000ba4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ba8:	f43f af7d 	beq.w	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000bac:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	9104      	str	r1, [sp, #16]
 8000bb4:	f000 808b 	beq.w	8000cce <__gnu_unwind_pr_common+0x27a>
 8000bb8:	f108 0004 	add.w	r0, r8, #4
 8000bbc:	f7ff fdbe 	bl	800073c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bc0:	ab04      	add	r3, sp, #16
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f3af 8000 	nop.w
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d157      	bne.n	8000c7e <__gnu_unwind_pr_common+0x22a>
 8000bce:	f108 0208 	add.w	r2, r8, #8
 8000bd2:	e7a2      	b.n	8000b1a <__gnu_unwind_pr_common+0xc6>
 8000bd4:	210d      	movs	r1, #13
 8000bd6:	4658      	mov	r0, fp
 8000bd8:	f7ff fec8 	bl	800096c <_Unwind_GetGR>
 8000bdc:	6a2b      	ldr	r3, [r5, #32]
 8000bde:	4283      	cmp	r3, r0
 8000be0:	d1f5      	bne.n	8000bce <__gnu_unwind_pr_common+0x17a>
 8000be2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000be4:	4598      	cmp	r8, r3
 8000be6:	d1f2      	bne.n	8000bce <__gnu_unwind_pr_common+0x17a>
 8000be8:	4640      	mov	r0, r8
 8000bea:	f7ff fcdf 	bl	80005ac <selfrel_offset31>
 8000bee:	210f      	movs	r1, #15
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4658      	mov	r0, fp
 8000bf4:	f7ff fee0 	bl	80009b8 <_Unwind_SetGR>
 8000bf8:	462a      	mov	r2, r5
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4658      	mov	r0, fp
 8000bfe:	f7ff fedb 	bl	80009b8 <_Unwind_SetGR>
 8000c02:	e7a6      	b.n	8000b52 <__gnu_unwind_pr_common+0xfe>
 8000c04:	210d      	movs	r1, #13
 8000c06:	4658      	mov	r0, fp
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	f7ff feaf 	bl	800096c <_Unwind_GetGR>
 8000c0e:	6a2a      	ldr	r2, [r5, #32]
 8000c10:	9b03      	ldr	r3, [sp, #12]
 8000c12:	4282      	cmp	r2, r0
 8000c14:	d1b7      	bne.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000c16:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000c18:	4590      	cmp	r8, r2
 8000c1a:	d1b4      	bne.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	2204      	movs	r2, #4
 8000c20:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000c24:	4442      	add	r2, r8
 8000c26:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000c28:	636a      	str	r2, [r5, #52]	@ 0x34
 8000c2a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c2e:	42ba      	cmp	r2, r7
 8000c30:	db55      	blt.n	8000cde <__gnu_unwind_pr_common+0x28a>
 8000c32:	2201      	movs	r2, #1
 8000c34:	9202      	str	r2, [sp, #8]
 8000c36:	e7aa      	b.n	8000b8e <__gnu_unwind_pr_common+0x13a>
 8000c38:	9403      	str	r4, [sp, #12]
 8000c3a:	f108 0a04 	add.w	sl, r8, #4
 8000c3e:	2600      	movs	r6, #0
 8000c40:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000c44:	461c      	mov	r4, r3
 8000c46:	e00d      	b.n	8000c64 <__gnu_unwind_pr_common+0x210>
 8000c48:	4650      	mov	r0, sl
 8000c4a:	9704      	str	r7, [sp, #16]
 8000c4c:	f7ff fd76 	bl	800073c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c50:	2200      	movs	r2, #0
 8000c52:	4601      	mov	r1, r0
 8000c54:	ab04      	add	r3, sp, #16
 8000c56:	4628      	mov	r0, r5
 8000c58:	3601      	adds	r6, #1
 8000c5a:	f10a 0a04 	add.w	sl, sl, #4
 8000c5e:	f3af 8000 	nop.w
 8000c62:	b9e0      	cbnz	r0, 8000c9e <__gnu_unwind_pr_common+0x24a>
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d1ef      	bne.n	8000c48 <__gnu_unwind_pr_common+0x1f4>
 8000c68:	210d      	movs	r1, #13
 8000c6a:	4658      	mov	r0, fp
 8000c6c:	f7ff fe7e 	bl	800096c <_Unwind_GetGR>
 8000c70:	9b04      	ldr	r3, [sp, #16]
 8000c72:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000c76:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000c7a:	2006      	movs	r0, #6
 8000c7c:	e714      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	210d      	movs	r1, #13
 8000c82:	4658      	mov	r0, fp
 8000c84:	f7ff fe72 	bl	800096c <_Unwind_GetGR>
 8000c88:	9e04      	ldr	r6, [sp, #16]
 8000c8a:	6228      	str	r0, [r5, #32]
 8000c8c:	2c02      	cmp	r4, #2
 8000c8e:	bf04      	itt	eq
 8000c90:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000c92:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000c96:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	e704      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	f8d8 6000 	ldr.w	r6, [r8]
 8000ca4:	9c03      	ldr	r4, [sp, #12]
 8000ca6:	e76e      	b.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000ca8:	4640      	mov	r0, r8
 8000caa:	f7ff fc7f 	bl	80005ac <selfrel_offset31>
 8000cae:	f108 0204 	add.w	r2, r8, #4
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f43f aef2 	beq.w	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	4658      	mov	r0, fp
 8000cc8:	f7ff fe76 	bl	80009b8 <_Unwind_SetGR>
 8000ccc:	e741      	b.n	8000b52 <__gnu_unwind_pr_common+0xfe>
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4658      	mov	r0, fp
 8000cd2:	210d      	movs	r1, #13
 8000cd4:	f7ff fe4a 	bl	800096c <_Unwind_GetGR>
 8000cd8:	4626      	mov	r6, r4
 8000cda:	6228      	str	r0, [r5, #32]
 8000cdc:	e7db      	b.n	8000c96 <__gnu_unwind_pr_common+0x242>
 8000cde:	1c58      	adds	r0, r3, #1
 8000ce0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000ce4:	e781      	b.n	8000bea <__gnu_unwind_pr_common+0x196>
 8000ce6:	bf00      	nop
 8000ce8:	00000000 	.word	0x00000000

08000cec <__aeabi_unwind_cpp_pr0>:
 8000cec:	2300      	movs	r3, #0
 8000cee:	e6b1      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf0 <__aeabi_unwind_cpp_pr1>:
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e6af      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf4 <__aeabi_unwind_cpp_pr2>:
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e6ad      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf8 <_Unwind_VRS_Pop>:
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	b0c3      	sub	sp, #268	@ 0x10c
 8000d00:	4615      	mov	r5, r2
 8000d02:	461c      	mov	r4, r3
 8000d04:	2904      	cmp	r1, #4
 8000d06:	f200 80d1 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	51ac      	.short	0x51ac
 8000d10:	2acf      	.short	0x2acf
 8000d12:	03          	.byte	0x03
 8000d13:	00          	.byte	0x00
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	f040 80c9 	bne.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d1a:	2a10      	cmp	r2, #16
 8000d1c:	f200 80c6 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d20:	6803      	ldr	r3, [r0, #0]
 8000d22:	06dc      	lsls	r4, r3, #27
 8000d24:	f100 80e7 	bmi.w	8000ef6 <_Unwind_VRS_Pop+0x1fe>
 8000d28:	af20      	add	r7, sp, #128	@ 0x80
 8000d2a:	4638      	mov	r0, r7
 8000d2c:	f000 f9aa 	bl	8001084 <__gnu_Unwind_Save_WMMXC>
 8000d30:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 8000d32:	4639      	mov	r1, r7
 8000d34:	2300      	movs	r3, #0
 8000d36:	f04f 0c01 	mov.w	ip, #1
 8000d3a:	fa0c f203 	lsl.w	r2, ip, r3
 8000d3e:	422a      	tst	r2, r5
 8000d40:	4620      	mov	r0, r4
 8000d42:	f103 0301 	add.w	r3, r3, #1
 8000d46:	d003      	beq.n	8000d50 <_Unwind_VRS_Pop+0x58>
 8000d48:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d4c:	600a      	str	r2, [r1, #0]
 8000d4e:	4604      	mov	r4, r0
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	f101 0104 	add.w	r1, r1, #4
 8000d56:	d1f0      	bne.n	8000d3a <_Unwind_VRS_Pop+0x42>
 8000d58:	63b4      	str	r4, [r6, #56]	@ 0x38
 8000d5a:	4638      	mov	r0, r7
 8000d5c:	f000 f988 	bl	8001070 <__gnu_Unwind_Restore_WMMXC>
 8000d60:	e099      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000d62:	2c03      	cmp	r4, #3
 8000d64:	f040 80a2 	bne.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d68:	b294      	uxth	r4, r2
 8000d6a:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d74:	f200 809a 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	071f      	lsls	r7, r3, #28
 8000d7c:	f100 80c3 	bmi.w	8000f06 <_Unwind_VRS_Pop+0x20e>
 8000d80:	af20      	add	r7, sp, #128	@ 0x80
 8000d82:	4638      	mov	r0, r7
 8000d84:	f000 f952 	bl	800102c <__gnu_Unwind_Save_WMMXD>
 8000d88:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000d8a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d8e:	b154      	cbz	r4, 8000da6 <_Unwind_VRS_Pop+0xae>
 8000d90:	460b      	mov	r3, r1
 8000d92:	1ad0      	subs	r0, r2, r3
 8000d94:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d98:	00e4      	lsls	r4, r4, #3
 8000d9a:	581d      	ldr	r5, [r3, r0]
 8000d9c:	f843 5b04 	str.w	r5, [r3], #4
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d1fa      	bne.n	8000d9a <_Unwind_VRS_Pop+0xa2>
 8000da4:	4422      	add	r2, r4
 8000da6:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000da8:	4638      	mov	r0, r7
 8000daa:	f000 f91d 	bl	8000fe8 <__gnu_Unwind_Restore_WMMXD>
 8000dae:	e072      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000db6:	b295      	uxth	r5, r2
 8000db8:	d071      	beq.n	8000e9e <_Unwind_VRS_Pop+0x1a6>
 8000dba:	2c05      	cmp	r4, #5
 8000dbc:	d176      	bne.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000dbe:	eb08 0905 	add.w	r9, r8, r5
 8000dc2:	f1b9 0f20 	cmp.w	r9, #32
 8000dc6:	d871      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000dc8:	f1b8 0f0f 	cmp.w	r8, #15
 8000dcc:	d872      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x1bc>
 8000dce:	f1b9 0f10 	cmp.w	r9, #16
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	f200 809f 	bhi.w	8000f16 <_Unwind_VRS_Pop+0x21e>
 8000dd8:	07d9      	lsls	r1, r3, #31
 8000dda:	d508      	bpl.n	8000dee <_Unwind_VRS_Pop+0xf6>
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	4630      	mov	r0, r6
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f840 3b48 	str.w	r3, [r0], #72
 8000dea:	f000 f8f1 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000dee:	af20      	add	r7, sp, #128	@ 0x80
 8000df0:	4638      	mov	r0, r7
 8000df2:	f000 f8ed 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000df6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	f000 80b9 	beq.w	8000f70 <_Unwind_VRS_Pop+0x278>
 8000dfe:	006d      	lsls	r5, r5, #1
 8000e00:	1e6a      	subs	r2, r5, #1
 8000e02:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000e06:	2500      	movs	r5, #0
 8000e08:	3201      	adds	r2, #1
 8000e0a:	3904      	subs	r1, #4
 8000e0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e10:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e14:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x118>
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	f000 80a1 	beq.w	8000f64 <_Unwind_VRS_Pop+0x26c>
 8000e22:	4641      	mov	r1, r8
 8000e24:	2910      	cmp	r1, #16
 8000e26:	bf38      	it	cc
 8000e28:	2110      	movcc	r1, #16
 8000e2a:	006b      	lsls	r3, r5, #1
 8000e2c:	3910      	subs	r1, #16
 8000e2e:	466f      	mov	r7, sp
 8000e30:	3b01      	subs	r3, #1
 8000e32:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e36:	3301      	adds	r3, #1
 8000e38:	3904      	subs	r1, #4
 8000e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e3e:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e42:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d1f9      	bne.n	8000e3e <_Unwind_VRS_Pop+0x146>
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	f000 8088 	beq.w	8000f60 <_Unwind_VRS_Pop+0x268>
 8000e50:	f1b8 0f0f 	cmp.w	r8, #15
 8000e54:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000e56:	d802      	bhi.n	8000e5e <_Unwind_VRS_Pop+0x166>
 8000e58:	a820      	add	r0, sp, #128	@ 0x80
 8000e5a:	f000 f8b5 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 8000e5e:	4638      	mov	r0, r7
 8000e60:	f000 f8ba 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e64:	e017      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000e66:	bb0c      	cbnz	r4, 8000eac <_Unwind_VRS_Pop+0x1b4>
 8000e68:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	fa1f fc82 	uxth.w	ip, r2
 8000e70:	2401      	movs	r4, #1
 8000e72:	1d37      	adds	r7, r6, #4
 8000e74:	fa04 f103 	lsl.w	r1, r4, r3
 8000e78:	ea11 0f0c 	tst.w	r1, ip
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	d004      	beq.n	8000e8a <_Unwind_VRS_Pop+0x192>
 8000e80:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e84:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d1f1      	bne.n	8000e74 <_Unwind_VRS_Pop+0x17c>
 8000e90:	04ac      	lsls	r4, r5, #18
 8000e92:	d400      	bmi.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000e94:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000e96:	2000      	movs	r0, #0
 8000e98:	b043      	add	sp, #268	@ 0x10c
 8000e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e9e:	eb08 0305 	add.w	r3, r8, r5
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d802      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000ea6:	f1b8 0f10 	cmp.w	r8, #16
 8000eaa:	d114      	bne.n	8000ed6 <_Unwind_VRS_Pop+0x1de>
 8000eac:	2002      	movs	r0, #2
 8000eae:	b043      	add	sp, #268	@ 0x10c
 8000eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d0ee      	beq.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	075a      	lsls	r2, r3, #29
 8000ebc:	d45c      	bmi.n	8000f78 <_Unwind_VRS_Pop+0x280>
 8000ebe:	466f      	mov	r7, sp
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f000 f88d 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ec6:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000ec8:	006b      	lsls	r3, r5, #1
 8000eca:	f1a8 0110 	sub.w	r1, r8, #16
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ed4:	e7af      	b.n	8000e36 <_Unwind_VRS_Pop+0x13e>
 8000ed6:	6803      	ldr	r3, [r0, #0]
 8000ed8:	07da      	lsls	r2, r3, #31
 8000eda:	d459      	bmi.n	8000f90 <_Unwind_VRS_Pop+0x298>
 8000edc:	af20      	add	r7, sp, #128	@ 0x80
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f000 f86e 	bl	8000fc0 <__gnu_Unwind_Save_VFP>
 8000ee4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d189      	bne.n	8000dfe <_Unwind_VRS_Pop+0x106>
 8000eea:	3304      	adds	r3, #4
 8000eec:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f000 f862 	bl	8000fb8 <__gnu_Unwind_Restore_VFP>
 8000ef4:	e7cf      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000ef6:	f023 0310 	bic.w	r3, r3, #16
 8000efa:	6003      	str	r3, [r0, #0]
 8000efc:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000f00:	f000 f8c0 	bl	8001084 <__gnu_Unwind_Save_WMMXC>
 8000f04:	e710      	b.n	8000d28 <_Unwind_VRS_Pop+0x30>
 8000f06:	f023 0308 	bic.w	r3, r3, #8
 8000f0a:	6003      	str	r3, [r0, #0]
 8000f0c:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000f10:	f000 f88c 	bl	800102c <__gnu_Unwind_Save_WMMXD>
 8000f14:	e734      	b.n	8000d80 <_Unwind_VRS_Pop+0x88>
 8000f16:	07d9      	lsls	r1, r3, #31
 8000f18:	d508      	bpl.n	8000f2c <_Unwind_VRS_Pop+0x234>
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f840 3b48 	str.w	r3, [r0], #72
 8000f26:	f000 f853 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000f2a:	6833      	ldr	r3, [r6, #0]
 8000f2c:	0758      	lsls	r0, r3, #29
 8000f2e:	d506      	bpl.n	8000f3e <_Unwind_VRS_Pop+0x246>
 8000f30:	4630      	mov	r0, r6
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	f840 3bd0 	str.w	r3, [r0], #208
 8000f3a:	f000 f851 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f3e:	af20      	add	r7, sp, #128	@ 0x80
 8000f40:	4638      	mov	r0, r7
 8000f42:	f000 f845 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000f46:	4668      	mov	r0, sp
 8000f48:	f000 f84a 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f4c:	f1c8 0210 	rsb	r2, r8, #16
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000f54:	f1a9 0510 	sub.w	r5, r9, #16
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000f5e:	e753      	b.n	8000e08 <_Unwind_VRS_Pop+0x110>
 8000f60:	af20      	add	r7, sp, #128	@ 0x80
 8000f62:	e7c2      	b.n	8000eea <_Unwind_VRS_Pop+0x1f2>
 8000f64:	2c01      	cmp	r4, #1
 8000f66:	d0c0      	beq.n	8000eea <_Unwind_VRS_Pop+0x1f2>
 8000f68:	f1b8 0f0f 	cmp.w	r8, #15
 8000f6c:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000f6e:	d892      	bhi.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000f70:	4638      	mov	r0, r7
 8000f72:	f000 f829 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 8000f76:	e78e      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	f840 3bd0 	str.w	r3, [r0], #208
 8000f80:	466f      	mov	r7, sp
 8000f82:	f000 f82d 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f86:	4638      	mov	r0, r7
 8000f88:	f000 f82a 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f8c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000f8e:	e79b      	b.n	8000ec8 <_Unwind_VRS_Pop+0x1d0>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f840 3b48 	str.w	r3, [r0], #72
 8000f9a:	f000 f811 	bl	8000fc0 <__gnu_Unwind_Save_VFP>
 8000f9e:	e79d      	b.n	8000edc <_Unwind_VRS_Pop+0x1e4>

08000fa0 <__restore_core_regs>:
 8000fa0:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000fa4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fa8:	469c      	mov	ip, r3
 8000faa:	46a6      	mov	lr, r4
 8000fac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fb0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fb4:	46e5      	mov	sp, ip
 8000fb6:	bd00      	pop	{pc}

08000fb8 <__gnu_Unwind_Restore_VFP>:
 8000fb8:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_VFP>:
 8000fc0:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Restore_VFP_D>:
 8000fc8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Save_VFP_D>:
 8000fd0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fd8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000fe0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Restore_WMMXD>:
 8000fe8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fec:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ff0:	ecf0 2102 	ldfe	f2, [r0], #8
 8000ff4:	ecf0 3102 	ldfe	f3, [r0], #8
 8000ff8:	ecf0 4102 	ldfe	f4, [r0], #8
 8000ffc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001000:	ecf0 6102 	ldfe	f6, [r0], #8
 8001004:	ecf0 7102 	ldfe	f7, [r0], #8
 8001008:	ecf0 8102 	ldfp	f0, [r0], #8
 800100c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001010:	ecf0 a102 	ldfp	f2, [r0], #8
 8001014:	ecf0 b102 	ldfp	f3, [r0], #8
 8001018:	ecf0 c102 	ldfp	f4, [r0], #8
 800101c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001020:	ecf0 e102 	ldfp	f6, [r0], #8
 8001024:	ecf0 f102 	ldfp	f7, [r0], #8
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXD>:
 800102c:	ece0 0102 	stfe	f0, [r0], #8
 8001030:	ece0 1102 	stfe	f1, [r0], #8
 8001034:	ece0 2102 	stfe	f2, [r0], #8
 8001038:	ece0 3102 	stfe	f3, [r0], #8
 800103c:	ece0 4102 	stfe	f4, [r0], #8
 8001040:	ece0 5102 	stfe	f5, [r0], #8
 8001044:	ece0 6102 	stfe	f6, [r0], #8
 8001048:	ece0 7102 	stfe	f7, [r0], #8
 800104c:	ece0 8102 	stfp	f0, [r0], #8
 8001050:	ece0 9102 	stfp	f1, [r0], #8
 8001054:	ece0 a102 	stfp	f2, [r0], #8
 8001058:	ece0 b102 	stfp	f3, [r0], #8
 800105c:	ece0 c102 	stfp	f4, [r0], #8
 8001060:	ece0 d102 	stfp	f5, [r0], #8
 8001064:	ece0 e102 	stfp	f6, [r0], #8
 8001068:	ece0 f102 	stfp	f7, [r0], #8
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__gnu_Unwind_Restore_WMMXC>:
 8001070:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001074:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001078:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800107c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__gnu_Unwind_Save_WMMXC>:
 8001084:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001088:	fca0 9101 	stc2	1, cr9, [r0], #4
 800108c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001090:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <_Unwind_RaiseException>:
 8001098:	46ec      	mov	ip, sp
 800109a:	b500      	push	{lr}
 800109c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	f7ff fbd7 	bl	8000860 <__gnu_Unwind_RaiseException>
 80010b2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010b6:	b012      	add	sp, #72	@ 0x48
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <_Unwind_Resume>:
 80010bc:	46ec      	mov	ip, sp
 80010be:	b500      	push	{lr}
 80010c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d0:	a901      	add	r1, sp, #4
 80010d2:	f7ff fc01 	bl	80008d8 <__gnu_Unwind_Resume>
 80010d6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010da:	b012      	add	sp, #72	@ 0x48
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <_Unwind_Resume_or_Rethrow>:
 80010e0:	46ec      	mov	ip, sp
 80010e2:	b500      	push	{lr}
 80010e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010f4:	a901      	add	r1, sp, #4
 80010f6:	f7ff fc11 	bl	800091c <__gnu_Unwind_Resume_or_Rethrow>
 80010fa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010fe:	b012      	add	sp, #72	@ 0x48
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <_Unwind_ForcedUnwind>:
 8001104:	46ec      	mov	ip, sp
 8001106:	b500      	push	{lr}
 8001108:	e92d 5000 	stmdb	sp!, {ip, lr}
 800110c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001118:	ab01      	add	r3, sp, #4
 800111a:	f7ff fbd5 	bl	80008c8 <__gnu_Unwind_ForcedUnwind>
 800111e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001122:	b012      	add	sp, #72	@ 0x48
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <_Unwind_Backtrace>:
 8001128:	46ec      	mov	ip, sp
 800112a:	b500      	push	{lr}
 800112c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001130:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e92d 000c 	stmdb	sp!, {r2, r3}
 800113c:	aa01      	add	r2, sp, #4
 800113e:	f7ff fc47 	bl	80009d0 <__gnu_Unwind_Backtrace>
 8001142:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001146:	b012      	add	sp, #72	@ 0x48
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <next_unwind_byte>:
 800114c:	7a02      	ldrb	r2, [r0, #8]
 800114e:	4603      	mov	r3, r0
 8001150:	b97a      	cbnz	r2, 8001172 <next_unwind_byte+0x26>
 8001152:	7a42      	ldrb	r2, [r0, #9]
 8001154:	b1a2      	cbz	r2, 8001180 <next_unwind_byte+0x34>
 8001156:	6841      	ldr	r1, [r0, #4]
 8001158:	3a01      	subs	r2, #1
 800115a:	b410      	push	{r4}
 800115c:	7242      	strb	r2, [r0, #9]
 800115e:	6808      	ldr	r0, [r1, #0]
 8001160:	2203      	movs	r2, #3
 8001162:	1d0c      	adds	r4, r1, #4
 8001164:	721a      	strb	r2, [r3, #8]
 8001166:	0202      	lsls	r2, r0, #8
 8001168:	605c      	str	r4, [r3, #4]
 800116a:	0e00      	lsrs	r0, r0, #24
 800116c:	bc10      	pop	{r4}
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4770      	bx	lr
 8001172:	6800      	ldr	r0, [r0, #0]
 8001174:	3a01      	subs	r2, #1
 8001176:	721a      	strb	r2, [r3, #8]
 8001178:	0202      	lsls	r2, r0, #8
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	0e00      	lsrs	r0, r0, #24
 800117e:	4770      	bx	lr
 8001180:	20b0      	movs	r0, #176	@ 0xb0
 8001182:	4770      	bx	lr

08001184 <_Unwind_GetGR.constprop.0>:
 8001184:	b500      	push	{lr}
 8001186:	b085      	sub	sp, #20
 8001188:	2300      	movs	r3, #0
 800118a:	aa03      	add	r2, sp, #12
 800118c:	9200      	str	r2, [sp, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	220c      	movs	r2, #12
 8001192:	f7ff fbd3 	bl	800093c <_Unwind_VRS_Get>
 8001196:	9803      	ldr	r0, [sp, #12]
 8001198:	b005      	add	sp, #20
 800119a:	f85d fb04 	ldr.w	pc, [sp], #4
 800119e:	bf00      	nop

080011a0 <unwind_UCB_from_context>:
 80011a0:	e7f0      	b.n	8001184 <_Unwind_GetGR.constprop.0>
 80011a2:	bf00      	nop

080011a4 <__gnu_unwind_execute>:
 80011a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a8:	4606      	mov	r6, r0
 80011aa:	b085      	sub	sp, #20
 80011ac:	460d      	mov	r5, r1
 80011ae:	f04f 0800 	mov.w	r8, #0
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff ffca 	bl	800114c <next_unwind_byte>
 80011b8:	28b0      	cmp	r0, #176	@ 0xb0
 80011ba:	4604      	mov	r4, r0
 80011bc:	f000 80da 	beq.w	8001374 <__gnu_unwind_execute+0x1d0>
 80011c0:	0607      	lsls	r7, r0, #24
 80011c2:	d546      	bpl.n	8001252 <__gnu_unwind_execute+0xae>
 80011c4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80011c8:	2b80      	cmp	r3, #128	@ 0x80
 80011ca:	d05e      	beq.n	800128a <__gnu_unwind_execute+0xe6>
 80011cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80011ce:	d073      	beq.n	80012b8 <__gnu_unwind_execute+0x114>
 80011d0:	d81b      	bhi.n	800120a <__gnu_unwind_execute+0x66>
 80011d2:	2b90      	cmp	r3, #144	@ 0x90
 80011d4:	f000 809b 	beq.w	800130e <__gnu_unwind_execute+0x16a>
 80011d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80011da:	d112      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80011dc:	43c3      	mvns	r3, r0
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80011e6:	411a      	asrs	r2, r3
 80011e8:	0701      	lsls	r1, r0, #28
 80011ea:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80011ee:	d501      	bpl.n	80011f4 <__gnu_unwind_execute+0x50>
 80011f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011f4:	2300      	movs	r3, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4630      	mov	r0, r6
 80011fa:	f7ff fd7d 	bl	8000cf8 <_Unwind_VRS_Pop>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0d7      	beq.n	80011b2 <__gnu_unwind_execute+0xe>
 8001202:	2009      	movs	r0, #9
 8001204:	b005      	add	sp, #20
 8001206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120a:	2bc0      	cmp	r3, #192	@ 0xc0
 800120c:	d16d      	bne.n	80012ea <__gnu_unwind_execute+0x146>
 800120e:	28c6      	cmp	r0, #198	@ 0xc6
 8001210:	f000 8093 	beq.w	800133a <__gnu_unwind_execute+0x196>
 8001214:	28c7      	cmp	r0, #199	@ 0xc7
 8001216:	f000 80b2 	beq.w	800137e <__gnu_unwind_execute+0x1da>
 800121a:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 800121e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001220:	f000 80d2 	beq.w	80013c8 <__gnu_unwind_execute+0x224>
 8001224:	28c8      	cmp	r0, #200	@ 0xc8
 8001226:	f000 80dd 	beq.w	80013e4 <__gnu_unwind_execute+0x240>
 800122a:	28c9      	cmp	r0, #201	@ 0xc9
 800122c:	d1e9      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff ff8c 	bl	800114c <next_unwind_byte>
 8001234:	0302      	lsls	r2, r0, #12
 8001236:	f000 000f 	and.w	r0, r0, #15
 800123a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800123e:	3001      	adds	r0, #1
 8001240:	4302      	orrs	r2, r0
 8001242:	2101      	movs	r1, #1
 8001244:	2305      	movs	r3, #5
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff fd56 	bl	8000cf8 <_Unwind_VRS_Pop>
 800124c:	2800      	cmp	r0, #0
 800124e:	d0b0      	beq.n	80011b2 <__gnu_unwind_execute+0xe>
 8001250:	e7d7      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001252:	0083      	lsls	r3, r0, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	1d1f      	adds	r7, r3, #4
 8001258:	f10d 090c 	add.w	r9, sp, #12
 800125c:	2300      	movs	r3, #0
 800125e:	4619      	mov	r1, r3
 8001260:	f8cd 9000 	str.w	r9, [sp]
 8001264:	220d      	movs	r2, #13
 8001266:	4630      	mov	r0, r6
 8001268:	f7ff fb68 	bl	800093c <_Unwind_VRS_Get>
 800126c:	9b03      	ldr	r3, [sp, #12]
 800126e:	f8cd 9000 	str.w	r9, [sp]
 8001272:	0660      	lsls	r0, r4, #25
 8001274:	bf4c      	ite	mi
 8001276:	1bdf      	submi	r7, r3, r7
 8001278:	18ff      	addpl	r7, r7, r3
 800127a:	2300      	movs	r3, #0
 800127c:	220d      	movs	r2, #13
 800127e:	4619      	mov	r1, r3
 8001280:	4630      	mov	r0, r6
 8001282:	9703      	str	r7, [sp, #12]
 8001284:	f7ff fb80 	bl	8000988 <_Unwind_VRS_Set>
 8001288:	e793      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 800128a:	4628      	mov	r0, r5
 800128c:	f7ff ff5e 	bl	800114c <next_unwind_byte>
 8001290:	0224      	lsls	r4, r4, #8
 8001292:	4320      	orrs	r0, r4
 8001294:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001298:	d0b3      	beq.n	8001202 <__gnu_unwind_execute+0x5e>
 800129a:	0104      	lsls	r4, r0, #4
 800129c:	2300      	movs	r3, #0
 800129e:	b2a2      	uxth	r2, r4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4630      	mov	r0, r6
 80012a4:	f7ff fd28 	bl	8000cf8 <_Unwind_VRS_Pop>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1aa      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ac:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80012b0:	bf18      	it	ne
 80012b2:	f04f 0801 	movne.w	r8, #1
 80012b6:	e77c      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 80012b8:	28b1      	cmp	r0, #177	@ 0xb1
 80012ba:	d051      	beq.n	8001360 <__gnu_unwind_execute+0x1bc>
 80012bc:	28b2      	cmp	r0, #178	@ 0xb2
 80012be:	f000 80ad 	beq.w	800141c <__gnu_unwind_execute+0x278>
 80012c2:	28b3      	cmp	r0, #179	@ 0xb3
 80012c4:	d06d      	beq.n	80013a2 <__gnu_unwind_execute+0x1fe>
 80012c6:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 80012ca:	2bb4      	cmp	r3, #180	@ 0xb4
 80012cc:	d099      	beq.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ce:	f000 0207 	and.w	r2, r0, #7
 80012d2:	3201      	adds	r2, #1
 80012d4:	2301      	movs	r3, #1
 80012d6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012da:	4619      	mov	r1, r3
 80012dc:	4630      	mov	r0, r6
 80012de:	f7ff fd0b 	bl	8000cf8 <_Unwind_VRS_Pop>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	f43f af65 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80012e8:	e78b      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ea:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80012ee:	2bd0      	cmp	r3, #208	@ 0xd0
 80012f0:	d187      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80012f2:	f000 0207 	and.w	r2, r0, #7
 80012f6:	3201      	adds	r2, #1
 80012f8:	2305      	movs	r3, #5
 80012fa:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012fe:	2101      	movs	r1, #1
 8001300:	4630      	mov	r0, r6
 8001302:	f7ff fcf9 	bl	8000cf8 <_Unwind_VRS_Pop>
 8001306:	2800      	cmp	r0, #0
 8001308:	f43f af53 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 800130c:	e779      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 800130e:	f000 030d 	and.w	r3, r0, #13
 8001312:	2b0d      	cmp	r3, #13
 8001314:	f43f af75 	beq.w	8001202 <__gnu_unwind_execute+0x5e>
 8001318:	af03      	add	r7, sp, #12
 800131a:	2300      	movs	r3, #0
 800131c:	f000 020f 	and.w	r2, r0, #15
 8001320:	4619      	mov	r1, r3
 8001322:	9700      	str	r7, [sp, #0]
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff fb09 	bl	800093c <_Unwind_VRS_Get>
 800132a:	2300      	movs	r3, #0
 800132c:	9700      	str	r7, [sp, #0]
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	4630      	mov	r0, r6
 8001334:	f7ff fb28 	bl	8000988 <_Unwind_VRS_Set>
 8001338:	e73b      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff ff06 	bl	800114c <next_unwind_byte>
 8001340:	0302      	lsls	r2, r0, #12
 8001342:	f000 000f 	and.w	r0, r0, #15
 8001346:	3001      	adds	r0, #1
 8001348:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800134c:	2303      	movs	r3, #3
 800134e:	4302      	orrs	r2, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4630      	mov	r0, r6
 8001354:	f7ff fcd0 	bl	8000cf8 <_Unwind_VRS_Pop>
 8001358:	2800      	cmp	r0, #0
 800135a:	f43f af2a 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 800135e:	e750      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fef3 	bl	800114c <next_unwind_byte>
 8001366:	1e43      	subs	r3, r0, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b0e      	cmp	r3, #14
 800136c:	4602      	mov	r2, r0
 800136e:	f67f af41 	bls.w	80011f4 <__gnu_unwind_execute+0x50>
 8001372:	e746      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001374:	f1b8 0f00 	cmp.w	r8, #0
 8001378:	d040      	beq.n	80013fc <__gnu_unwind_execute+0x258>
 800137a:	2000      	movs	r0, #0
 800137c:	e742      	b.n	8001204 <__gnu_unwind_execute+0x60>
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff fee4 	bl	800114c <next_unwind_byte>
 8001384:	1e43      	subs	r3, r0, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b0e      	cmp	r3, #14
 800138a:	4602      	mov	r2, r0
 800138c:	f63f af39 	bhi.w	8001202 <__gnu_unwind_execute+0x5e>
 8001390:	2300      	movs	r3, #0
 8001392:	2104      	movs	r1, #4
 8001394:	4630      	mov	r0, r6
 8001396:	f7ff fcaf 	bl	8000cf8 <_Unwind_VRS_Pop>
 800139a:	2800      	cmp	r0, #0
 800139c:	f43f af09 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013a0:	e72f      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013a2:	4628      	mov	r0, r5
 80013a4:	f7ff fed2 	bl	800114c <next_unwind_byte>
 80013a8:	0302      	lsls	r2, r0, #12
 80013aa:	f000 000f 	and.w	r0, r0, #15
 80013ae:	3001      	adds	r0, #1
 80013b0:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80013b4:	2301      	movs	r3, #1
 80013b6:	4302      	orrs	r2, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fc9c 	bl	8000cf8 <_Unwind_VRS_Pop>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	f43f aef6 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013c6:	e71c      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013c8:	f000 020f 	and.w	r2, r0, #15
 80013cc:	3201      	adds	r2, #1
 80013ce:	2303      	movs	r3, #3
 80013d0:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 80013d4:	4619      	mov	r1, r3
 80013d6:	4630      	mov	r0, r6
 80013d8:	f7ff fc8e 	bl	8000cf8 <_Unwind_VRS_Pop>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f43f aee8 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013e2:	e70e      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013e4:	4628      	mov	r0, r5
 80013e6:	f7ff feb1 	bl	800114c <next_unwind_byte>
 80013ea:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 80013ee:	f000 030f 	and.w	r3, r0, #15
 80013f2:	3210      	adds	r2, #16
 80013f4:	3301      	adds	r3, #1
 80013f6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013fa:	e722      	b.n	8001242 <__gnu_unwind_execute+0x9e>
 80013fc:	ac03      	add	r4, sp, #12
 80013fe:	4643      	mov	r3, r8
 8001400:	4641      	mov	r1, r8
 8001402:	220e      	movs	r2, #14
 8001404:	9400      	str	r4, [sp, #0]
 8001406:	4630      	mov	r0, r6
 8001408:	f7ff fa98 	bl	800093c <_Unwind_VRS_Get>
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	4643      	mov	r3, r8
 8001410:	220f      	movs	r2, #15
 8001412:	4641      	mov	r1, r8
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff fab7 	bl	8000988 <_Unwind_VRS_Set>
 800141a:	e7ae      	b.n	800137a <__gnu_unwind_execute+0x1d6>
 800141c:	2300      	movs	r3, #0
 800141e:	f10d 090c 	add.w	r9, sp, #12
 8001422:	220d      	movs	r2, #13
 8001424:	4619      	mov	r1, r3
 8001426:	f8cd 9000 	str.w	r9, [sp]
 800142a:	4630      	mov	r0, r6
 800142c:	f7ff fa86 	bl	800093c <_Unwind_VRS_Get>
 8001430:	4628      	mov	r0, r5
 8001432:	f7ff fe8b 	bl	800114c <next_unwind_byte>
 8001436:	0602      	lsls	r2, r0, #24
 8001438:	9c03      	ldr	r4, [sp, #12]
 800143a:	f04f 0702 	mov.w	r7, #2
 800143e:	d50b      	bpl.n	8001458 <__gnu_unwind_execute+0x2b4>
 8001440:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001444:	40b8      	lsls	r0, r7
 8001446:	4404      	add	r4, r0
 8001448:	4628      	mov	r0, r5
 800144a:	9403      	str	r4, [sp, #12]
 800144c:	f7ff fe7e 	bl	800114c <next_unwind_byte>
 8001450:	0603      	lsls	r3, r0, #24
 8001452:	f107 0707 	add.w	r7, r7, #7
 8001456:	d4f3      	bmi.n	8001440 <__gnu_unwind_execute+0x29c>
 8001458:	fa00 f207 	lsl.w	r2, r0, r7
 800145c:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001460:	4422      	add	r2, r4
 8001462:	2300      	movs	r3, #0
 8001464:	9203      	str	r2, [sp, #12]
 8001466:	f8cd 9000 	str.w	r9, [sp]
 800146a:	220d      	movs	r2, #13
 800146c:	4619      	mov	r1, r3
 800146e:	4630      	mov	r0, r6
 8001470:	f7ff fa8a 	bl	8000988 <_Unwind_VRS_Set>
 8001474:	e69d      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 8001476:	bf00      	nop

08001478 <__gnu_unwind_frame>:
 8001478:	b510      	push	{r4, lr}
 800147a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800147c:	6853      	ldr	r3, [r2, #4]
 800147e:	b084      	sub	sp, #16
 8001480:	f04f 0c03 	mov.w	ip, #3
 8001484:	3208      	adds	r2, #8
 8001486:	021c      	lsls	r4, r3, #8
 8001488:	4608      	mov	r0, r1
 800148a:	0e1b      	lsrs	r3, r3, #24
 800148c:	a901      	add	r1, sp, #4
 800148e:	9401      	str	r4, [sp, #4]
 8001490:	9202      	str	r2, [sp, #8]
 8001492:	f88d c00c 	strb.w	ip, [sp, #12]
 8001496:	f88d 300d 	strb.w	r3, [sp, #13]
 800149a:	f7ff fe83 	bl	80011a4 <__gnu_unwind_execute>
 800149e:	b004      	add	sp, #16
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	bf00      	nop

080014a4 <_Unwind_GetRegionStart>:
 80014a4:	b508      	push	{r3, lr}
 80014a6:	f7ff fe7b 	bl	80011a0 <unwind_UCB_from_context>
 80014aa:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80014ac:	bd08      	pop	{r3, pc}
 80014ae:	bf00      	nop

080014b0 <_Unwind_GetLanguageSpecificData>:
 80014b0:	b508      	push	{r3, lr}
 80014b2:	f7ff fe75 	bl	80011a0 <unwind_UCB_from_context>
 80014b6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80014b8:	79c3      	ldrb	r3, [r0, #7]
 80014ba:	3302      	adds	r3, #2
 80014bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014c0:	bd08      	pop	{r3, pc}
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <readReg>:
 * 
 * @param data[out]
 *   The register value is written to this parameter
 **********************************************************/    
static uint32_t readReg(bool ap, int reg, uint32_t *data)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t b;
  uint32_t ack = 0;
  uint32_t ret = SWD_ERROR_OK;
   
  /* Initalize output variable */
  *data = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	6013      	str	r3, [r2, #0]
  
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)1;
  
  int A2 = reg & 0x1;
 80014ce:	f001 0501 	and.w	r5, r1, #1
  int A3 = (reg >> 1) & 0x1;
 80014d2:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calulate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	442b      	add	r3, r5
 80014da:	440b      	add	r3, r1
 80014dc:	f003 0301 	and.w	r3, r3, #1
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80014e0:	4c83      	ldr	r4, [pc, #524]	@ (80016f0 <readReg+0x228>)
 80014e2:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80014e6:	61a6      	str	r6, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014e8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80014ec:	6826      	ldr	r6, [r4, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80014f2:	fa94 f4a4 	rbit	r4, r4
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80014f6:	fab4 f484 	clz	r4, r4
 80014fa:	0064      	lsls	r4, r4, #1
 80014fc:	f04f 0c03 	mov.w	ip, #3
 8001500:	fa0c f404 	lsl.w	r4, ip, r4
 8001504:	ea26 0c04 	bic.w	ip, r6, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800150c:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8001510:	fab4 f484 	clz	r4, r4
 8001514:	0064      	lsls	r4, r4, #1
 8001516:	2601      	movs	r6, #1
 8001518:	fa06 f404 	lsl.w	r4, r6, r4
 800151c:	ea44 040c 	orr.w	r4, r4, ip
 8001520:	4e74      	ldr	r6, [pc, #464]	@ (80016f4 <readReg+0x22c>)
 8001522:	6034      	str	r4, [r6, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001524:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001528:	61b4      	str	r4, [r6, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800152a:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 800152e:	61b4      	str	r4, [r6, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001530:	2440      	movs	r4, #64	@ 0x40
 8001532:	61b4      	str	r4, [r6, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Send request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 8001534:	2800      	cmp	r0, #0
 8001536:	f000 809b 	beq.w	8001670 <readReg+0x1a8>
 800153a:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800153e:	61b4      	str	r4, [r6, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001540:	486c      	ldr	r0, [pc, #432]	@ (80016f4 <readReg+0x22c>)
 8001542:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
 8001546:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001548:	2440      	movs	r4, #64	@ 0x40
 800154a:	6184      	str	r4, [r0, #24]
 800154c:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001550:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001552:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001554:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8001556:	2d00      	cmp	r5, #0
 8001558:	f000 808f 	beq.w	800167a <readReg+0x1b2>
 800155c:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800155e:	4865      	ldr	r0, [pc, #404]	@ (80016f4 <readReg+0x22c>)
 8001560:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001564:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001566:	2440      	movs	r4, #64	@ 0x40
 8001568:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 800156a:	2900      	cmp	r1, #0
 800156c:	f000 808a 	beq.w	8001684 <readReg+0x1bc>
 8001570:	4601      	mov	r1, r0
 8001572:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001576:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001578:	495e      	ldr	r1, [pc, #376]	@ (80016f4 <readReg+0x22c>)
 800157a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800157e:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001580:	2040      	movs	r0, #64	@ 0x40
 8001582:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8082 	beq.w	800168e <readReg+0x1c6>
 800158a:	460b      	mov	r3, r1
 800158c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001590:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001592:	4b58      	ldr	r3, [pc, #352]	@ (80016f4 <readReg+0x22c>)
 8001594:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001598:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800159a:	2040      	movs	r0, #64	@ 0x40
 800159c:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800159e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80015a2:	6199      	str	r1, [r3, #24]
 80015a4:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015a6:	6198      	str	r0, [r3, #24]
 80015a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ac:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015ae:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015b0:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015b2:	484f      	ldr	r0, [pc, #316]	@ (80016f0 <readReg+0x228>)
 80015b4:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80015b8:	6184      	str	r4, [r0, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015ba:	681b      	ldr	r3, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 80015c0:	fab1 f181 	clz	r1, r1
 80015c4:	0049      	lsls	r1, r1, #1
 80015c6:	2003      	movs	r0, #3
 80015c8:	fa00 f101 	lsl.w	r1, r0, r1
 80015cc:	ea23 0101 	bic.w	r1, r3, r1
 80015d0:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <readReg+0x22c>)
 80015d2:	6019      	str	r1, [r3, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80015d8:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	6199      	str	r1, [r3, #24]
  uint32_t ack = 0;
 80015de:	2000      	movs	r0, #0
  /* Turnaround */
  SWDIO_SET_INPUT();
  SWCLK_CYCLE();
  
  /* Read ACK */
  for ( i=0; i<3; i++ ) {
 80015e0:	4601      	mov	r1, r0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015e2:	461c      	mov	r4, r3
 80015e4:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015e8:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015ea:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80015ec:	6923      	ldr	r3, [r4, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015ee:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80015f0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 80015f4:	408b      	lsls	r3, r1
 80015f6:	4318      	orrs	r0, r3
  for ( i=0; i<3; i++ ) {
 80015f8:	3101      	adds	r1, #1
 80015fa:	2903      	cmp	r1, #3
 80015fc:	d1f5      	bne.n	80015ea <readReg+0x122>
  }
  
  /* Verify that ACK is OK */
  if ( ack == ACK_OK ) {
 80015fe:	2801      	cmp	r0, #1
 8001600:	d04a      	beq.n	8001698 <readReg+0x1d0>
    } else {
      ret = SWD_ERROR_PARITY;
    }
    
  } 
  else if ( ack == ACK_WAIT ) 
 8001602:	2802      	cmp	r0, #2
 8001604:	d003      	beq.n	800160e <readReg+0x146>
  {
    ret = SWD_ERROR_WAIT;
  } 
  else if ( ack == ACK_FAULT ) 
  {
    ret = SWD_ERROR_FAULT;
 8001606:	2804      	cmp	r0, #4
 8001608:	bf14      	ite	ne
 800160a:	2004      	movne	r0, #4
 800160c:	2003      	moveq	r0, #3
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800160e:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <readReg+0x22c>)
 8001610:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001614:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4a35      	ldr	r2, [pc, #212]	@ (80016f0 <readReg+0x228>)
 800161c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001620:	6191      	str	r1, [r2, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001622:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001628:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001640:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2201      	movs	r2, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	430b      	orrs	r3, r1
 8001652:	4a28      	ldr	r2, [pc, #160]	@ (80016f4 <readReg+0x22c>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001658:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <readReg+0x22c>)
 800165a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800165e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001662:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001664:	619d      	str	r5, [r3, #24]
 8001666:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001668:	6199      	str	r1, [r3, #24]
  SWCLK_CYCLE();
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 800166a:	3a01      	subs	r2, #1
 800166c:	d1fa      	bne.n	8001664 <readReg+0x19c>
    SWD_WRITE_BIT(0);
  }
  
  return ret;
}
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001670:	4820      	ldr	r0, [pc, #128]	@ (80016f4 <readReg+0x22c>)
 8001672:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001676:	6184      	str	r4, [r0, #24]
}
 8001678:	e762      	b.n	8001540 <readReg+0x78>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800167a:	481e      	ldr	r0, [pc, #120]	@ (80016f4 <readReg+0x22c>)
 800167c:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001680:	6184      	str	r4, [r0, #24]
}
 8001682:	e76c      	b.n	800155e <readReg+0x96>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001684:	491b      	ldr	r1, [pc, #108]	@ (80016f4 <readReg+0x22c>)
 8001686:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800168a:	6188      	str	r0, [r1, #24]
}
 800168c:	e774      	b.n	8001578 <readReg+0xb0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <readReg+0x22c>)
 8001690:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001694:	6199      	str	r1, [r3, #24]
}
 8001696:	e77c      	b.n	8001592 <readReg+0xca>
  uint32_t cb = 0;
 8001698:	f04f 0e00 	mov.w	lr, #0
    for ( i=0; i<32; i++ ) 
 800169c:	4673      	mov	r3, lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800169e:	4c15      	ldr	r4, [pc, #84]	@ (80016f4 <readReg+0x22c>)
 80016a0:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016a4:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016a6:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016a8:	6921      	ldr	r1, [r4, #16]
 80016aa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016ae:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016b0:	2900      	cmp	r1, #0
 80016b2:	bf14      	ite	ne
 80016b4:	f04f 0c01 	movne.w	ip, #1
 80016b8:	f04f 0c00 	moveq.w	ip, #0
      *data |= b << i;
 80016bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80016c0:	6811      	ldr	r1, [r2, #0]
 80016c2:	ea41 010c 	orr.w	r1, r1, ip
 80016c6:	6011      	str	r1, [r2, #0]
      if ( b ) cb = !cb;
 80016c8:	bf18      	it	ne
 80016ca:	f08e 0e01 	eorne.w	lr, lr, #1
    for ( i=0; i<32; i++ ) 
 80016ce:	3301      	adds	r3, #1
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d1e8      	bne.n	80016a6 <readReg+0x1de>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <readReg+0x22c>)
 80016d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016da:	6193      	str	r3, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016dc:	6913      	ldr	r3, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016de:	2140      	movs	r1, #64	@ 0x40
 80016e0:	6191      	str	r1, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016e2:	f3c3 2300 	ubfx	r3, r3, #8, #1
      ret = SWD_ERROR_PARITY;
 80016e6:	459e      	cmp	lr, r3
 80016e8:	bf18      	it	ne
 80016ea:	2005      	movne	r0, #5
 80016ec:	e78f      	b.n	800160e <readReg+0x146>
 80016ee:	bf00      	nop
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400

080016f8 <writeReg>:
 * 
 * @param data
 *   The value to write to the register
 **********************************************************/
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
{
 80016f8:	b4f0      	push	{r4, r5, r6, r7}
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)0;
  
  /* Calulate address bits */
  int A2 = reg & 0x1;
 80016fa:	f001 0601 	and.w	r6, r1, #1
  int A3 = (reg >> 1) & 0x1;
 80016fe:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calculate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001702:	1985      	adds	r5, r0, r6
 8001704:	440d      	add	r5, r1
 8001706:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 800170a:	4c98      	ldr	r4, [pc, #608]	@ (800196c <writeReg+0x274>)
 800170c:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8001710:	61a7      	str	r7, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001712:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001716:	6827      	ldr	r7, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800171c:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8001720:	fab4 f484 	clz	r4, r4
 8001724:	0064      	lsls	r4, r4, #1
 8001726:	f04f 0c03 	mov.w	ip, #3
 800172a:	fa0c f404 	lsl.w	r4, ip, r4
 800172e:	ea27 0c04 	bic.w	ip, r7, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001736:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 800173a:	fab4 f484 	clz	r4, r4
 800173e:	0064      	lsls	r4, r4, #1
 8001740:	2701      	movs	r7, #1
 8001742:	fa07 f404 	lsl.w	r4, r7, r4
 8001746:	ea44 040c 	orr.w	r4, r4, ip
 800174a:	4f89      	ldr	r7, [pc, #548]	@ (8001970 <writeReg+0x278>)
 800174c:	603c      	str	r4, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800174e:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001752:	61bc      	str	r4, [r7, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001754:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001758:	61bc      	str	r4, [r7, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800175a:	2440      	movs	r4, #64	@ 0x40
 800175c:	61bc      	str	r4, [r7, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Write request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 800175e:	2800      	cmp	r0, #0
 8001760:	f000 8096 	beq.w	8001890 <writeReg+0x198>
 8001764:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001768:	61bc      	str	r4, [r7, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800176a:	4881      	ldr	r0, [pc, #516]	@ (8001970 <writeReg+0x278>)
 800176c:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
 8001770:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001772:	2440      	movs	r4, #64	@ 0x40
 8001774:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001776:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 800177a:	f8c0 c018 	str.w	ip, [r0, #24]
 800177e:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001780:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8001782:	2e00      	cmp	r6, #0
 8001784:	f000 8089 	beq.w	800189a <writeReg+0x1a2>
 8001788:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800178c:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800178e:	4878      	ldr	r0, [pc, #480]	@ (8001970 <writeReg+0x278>)
 8001790:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001794:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001796:	2440      	movs	r4, #64	@ 0x40
 8001798:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 800179a:	2900      	cmp	r1, #0
 800179c:	f000 8082 	beq.w	80018a4 <writeReg+0x1ac>
 80017a0:	4601      	mov	r1, r0
 80017a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017a6:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017a8:	4971      	ldr	r1, [pc, #452]	@ (8001970 <writeReg+0x278>)
 80017aa:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80017ae:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017b0:	2040      	movs	r0, #64	@ 0x40
 80017b2:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d07a      	beq.n	80018ae <writeReg+0x1b6>
 80017b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017bc:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017be:	496c      	ldr	r1, [pc, #432]	@ (8001970 <writeReg+0x278>)
 80017c0:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 80017c4:	618d      	str	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017c6:	2440      	movs	r4, #64	@ 0x40
 80017c8:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017ca:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80017ce:	6188      	str	r0, [r1, #24]
 80017d0:	618d      	str	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017d2:	618c      	str	r4, [r1, #24]
 80017d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017d8:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017da:	618d      	str	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017dc:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017de:	4c63      	ldr	r4, [pc, #396]	@ (800196c <writeReg+0x274>)
 80017e0:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80017e4:	61a5      	str	r5, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017e6:	680c      	ldr	r4, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	fa90 f1a0 	rbit	r1, r0
  return __builtin_clz(value);
 80017ec:	fab1 f181 	clz	r1, r1
 80017f0:	0049      	lsls	r1, r1, #1
 80017f2:	2003      	movs	r0, #3
 80017f4:	fa00 f101 	lsl.w	r1, r0, r1
 80017f8:	ea24 0401 	bic.w	r4, r4, r1
 80017fc:	495c      	ldr	r1, [pc, #368]	@ (8001970 <writeReg+0x278>)
 80017fe:	600c      	str	r4, [r1, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001800:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001804:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001806:	2040      	movs	r0, #64	@ 0x40
 8001808:	6188      	str	r0, [r1, #24]
  
  /* Turnaround */
  SWCLK_CYCLE();
  
  /* Read acknowledge */
  for ( i=0; i<3; i++ ) {
 800180a:	2400      	movs	r4, #0
  uint32_t ack = 0;
 800180c:	4620      	mov	r0, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800180e:	460d      	mov	r5, r1
 8001810:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001814:	2640      	movs	r6, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001816:	61af      	str	r7, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001818:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800181a:	61ae      	str	r6, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800181c:	f3c1 2100 	ubfx	r1, r1, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 8001820:	40a1      	lsls	r1, r4
 8001822:	4308      	orrs	r0, r1
  for ( i=0; i<3; i++ ) {
 8001824:	3401      	adds	r4, #1
 8001826:	2c03      	cmp	r4, #3
 8001828:	d1f5      	bne.n	8001816 <writeReg+0x11e>
  }
  
  if ( ack == ACK_OK || ignoreAck ) 
 800182a:	2801      	cmp	r0, #1
 800182c:	d002      	beq.n	8001834 <writeReg+0x13c>
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8094 	beq.w	800195c <writeReg+0x264>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001834:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <writeReg+0x278>)
 8001836:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800183a:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800183c:	2140      	movs	r1, #64	@ 0x40
 800183e:	6199      	str	r1, [r3, #24]
 8001840:	494a      	ldr	r1, [pc, #296]	@ (800196c <writeReg+0x274>)
 8001842:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001846:	6188      	str	r0, [r1, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001848:	6818      	ldr	r0, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2103      	movs	r1, #3
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	ea20 0003 	bic.w	r0, r0, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001866:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	4303      	orrs	r3, r0
 8001878:	493d      	ldr	r1, [pc, #244]	@ (8001970 <writeReg+0x278>)
 800187a:	600b      	str	r3, [r1, #0]
    SWCLK_CYCLE();
  
    SWDIO_SET_OUTPUT();
    
    /* Write data */
    parity = 0;
 800187c:	2400      	movs	r4, #0
    for ( i=0; i<32; i++ ) {
 800187e:	4623      	mov	r3, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001880:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 8001884:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001888:	2540      	movs	r5, #64	@ 0x40
 800188a:	f44f 7780 	mov.w	r7, #256	@ 0x100
 800188e:	e01a      	b.n	80018c6 <writeReg+0x1ce>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001890:	4837      	ldr	r0, [pc, #220]	@ (8001970 <writeReg+0x278>)
 8001892:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001896:	6184      	str	r4, [r0, #24]
}
 8001898:	e767      	b.n	800176a <writeReg+0x72>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800189a:	4835      	ldr	r0, [pc, #212]	@ (8001970 <writeReg+0x278>)
 800189c:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 80018a0:	6184      	str	r4, [r0, #24]
}
 80018a2:	e774      	b.n	800178e <writeReg+0x96>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018a4:	4932      	ldr	r1, [pc, #200]	@ (8001970 <writeReg+0x278>)
 80018a6:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80018aa:	6188      	str	r0, [r1, #24]
}
 80018ac:	e77c      	b.n	80017a8 <writeReg+0xb0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018ae:	4930      	ldr	r1, [pc, #192]	@ (8001970 <writeReg+0x278>)
 80018b0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80018b4:	6188      	str	r0, [r1, #24]
}
 80018b6:	e782      	b.n	80017be <writeReg+0xc6>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018b8:	f8c1 c018 	str.w	ip, [r1, #24]
 80018bc:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018be:	618d      	str	r5, [r1, #24]
 80018c0:	3301      	adds	r3, #1
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d00a      	beq.n	80018dc <writeReg+0x1e4>
      b = (data >> i) & 0x1;
 80018c6:	fa22 f003 	lsr.w	r0, r2, r3
      SWD_WRITE_BIT(b);
 80018ca:	f010 0f01 	tst.w	r0, #1
 80018ce:	d0f3      	beq.n	80018b8 <writeReg+0x1c0>
 80018d0:	618f      	str	r7, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018d2:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018d4:	618d      	str	r5, [r1, #24]
      if (b) parity = !parity;
 80018d6:	f084 0401 	eor.w	r4, r4, #1
 80018da:	e7f1      	b.n	80018c0 <writeReg+0x1c8>
    }
    
    /* Write parity bit */
    SWD_WRITE_BIT(parity);
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d038      	beq.n	8001952 <writeReg+0x25a>
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <writeReg+0x278>)
 80018e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e6:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <writeReg+0x278>)
 80018ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018ee:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018f0:	2240      	movs	r2, #64	@ 0x40
 80018f2:	619a      	str	r2, [r3, #24]
  uint32_t ret = SWD_ERROR_OK;
 80018f4:	2001      	movs	r0, #1
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <writeReg+0x274>)
 80018f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fc:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001902:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001908:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001920:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2201      	movs	r2, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	430b      	orrs	r3, r1
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <writeReg+0x278>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <writeReg+0x278>)
 800193a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800193e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001942:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001944:	619d      	str	r5, [r3, #24]
 8001946:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001948:	6199      	str	r1, [r3, #24]
    
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 800194a:	3a01      	subs	r2, #1
 800194c:	d1fa      	bne.n	8001944 <writeReg+0x24c>
	  SWD_WRITE_BIT(0);
  }
  
  return ret;
  
}
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <writeReg+0x278>)
 8001954:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	e7c5      	b.n	80018e8 <writeReg+0x1f0>
  else if ( ack == ACK_WAIT ) 
 800195c:	2802      	cmp	r0, #2
 800195e:	d0ca      	beq.n	80018f6 <writeReg+0x1fe>
    ret = SWD_ERROR_FAULT;
 8001960:	2804      	cmp	r0, #4
 8001962:	bf14      	ite	ne
 8001964:	2004      	movne	r0, #4
 8001966:	2003      	moveq	r0, #3
 8001968:	e7c5      	b.n	80018f6 <writeReg+0x1fe>
 800196a:	bf00      	nop
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400

08001974 <JTAG_to_SWD_Sequence>:
 * Sends the JTAG-to-SWD sequence. This must be performed
 * at the very beginning of every debug session and
 * again in case of a protocol error. 
 **********************************************************/
void JTAG_to_SWD_Sequence(void)
{
 8001974:	b470      	push	{r4, r5, r6}
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001976:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <JTAG_to_SWD_Sequence+0xc4>)
 8001978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197c:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800197e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001982:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001988:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2201      	movs	r2, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	430b      	orrs	r3, r1
 80019b2:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <JTAG_to_SWD_Sequence+0xc8>)
 80019b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019be:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019c2:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019c4:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019c6:	6191      	str	r1, [r2, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* First reset line with > 50 cycles with SWDIO high */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 80019c8:	3b01      	subs	r3, #1
 80019ca:	d1fb      	bne.n	80019c4 <JTAG_to_SWD_Sequence+0x50>
    SWCLK_CYCLE();
  }
  
  /* Transmit 16-bit JTAG-to-SWD sequence */
  for ( i=0; i<16; i++ ) {
 80019cc:	2300      	movs	r3, #0
    b = (JTAG2SWD >> i) & 0x1;
 80019ce:	f24e 7c9e 	movw	ip, #59294	@ 0xe79e
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019d2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a3c <JTAG_to_SWD_Sequence+0xc8>)
 80019d4:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019d8:	f44f 7580 	mov.w	r5, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019dc:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019e0:	2040      	movs	r0, #64	@ 0x40
 80019e2:	fa4c f103 	asr.w	r1, ip, r3
    SWD_WRITE_BIT(b);
 80019e6:	f011 0f01 	tst.w	r1, #1
 80019ea:	bf14      	ite	ne
 80019ec:	6195      	strne	r5, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019ee:	6196      	streq	r6, [r2, #24]
 80019f0:	6194      	str	r4, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019f2:	6190      	str	r0, [r2, #24]
  for ( i=0; i<16; i++ ) {
 80019f4:	3301      	adds	r3, #1
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d1f3      	bne.n	80019e2 <JTAG_to_SWD_Sequence+0x6e>
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <JTAG_to_SWD_Sequence+0xc8>)
 80019fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a00:	619a      	str	r2, [r3, #24]
 8001a02:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <JTAG_to_SWD_Sequence+0xc8>)
 8001a06:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0a:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a0c:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0e:	6191      	str	r1, [r2, #24]
  }
  
  /* Do another reset to make sure SW-DP is in reset state */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 8001a10:	3b01      	subs	r3, #1
 8001a12:	d1fb      	bne.n	8001a0c <JTAG_to_SWD_Sequence+0x98>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <JTAG_to_SWD_Sequence+0xc8>)
 8001a16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	f102 527c 	add.w	r2, r2, #1056964608	@ 0x3f000000
 8001a22:	f502 3201 	add.w	r2, r2, #132096	@ 0x20400
 8001a26:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a2a:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a2c:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a2e:	6191      	str	r1, [r2, #24]
    SWCLK_CYCLE();
  }
  
  /* Insert a 16 cycle idle period */
  SWDIO_OUT(0);
  for ( i=0; i<16; i++ ) {
 8001a30:	3b01      	subs	r3, #1
 8001a32:	d1fb      	bne.n	8001a2c <JTAG_to_SWD_Sequence+0xb8>
    SWCLK_CYCLE();
  }
}
 8001a34:	bc70      	pop	{r4, r5, r6}
 8001a36:	4770      	bx	lr
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400

08001a40 <writeAP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeAP(int reg, uint32_t data)
{
 8001a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a44:	4606      	mov	r6, r0
 8001a46:	460d      	mov	r5, r1
 8001a48:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;

  do {
    swdStatus = writeReg(true, reg, data, false);
 8001a4a:	f04f 0800 	mov.w	r8, #0
 8001a4e:	2701      	movs	r7, #1
 8001a50:	4643      	mov	r3, r8
 8001a52:	462a      	mov	r2, r5
 8001a54:	4631      	mov	r1, r6
 8001a56:	4638      	mov	r0, r7
 8001a58:	f7ff fe4e 	bl	80016f8 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d10a      	bne.n	8001a76 <writeAP+0x36>
 8001a60:	3c01      	subs	r4, #1
 8001a62:	d1f5      	bne.n	8001a50 <writeAP+0x10>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <writeAP+0x40>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4601      	mov	r1, r0
 8001a6a:	20a0      	movs	r0, #160	@ 0xa0
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <writeAP+0x44>)
 8001a6e:	fb00 3002 	mla	r0, r0, r2, r3
 8001a72:	f7fe fbc5 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001a76:	2801      	cmp	r0, #1
 8001a78:	d1f4      	bne.n	8001a64 <writeAP+0x24>
  }
}
 8001a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000188 	.word	0x20000188

08001a88 <writeDP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeDP(int reg, uint32_t data)
{
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	4607      	mov	r7, r0
 8001a8c:	460e      	mov	r6, r1
 8001a8e:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = writeReg(false, reg, data, false);
 8001a90:	2500      	movs	r5, #0
 8001a92:	462b      	mov	r3, r5
 8001a94:	4632      	mov	r2, r6
 8001a96:	4639      	mov	r1, r7
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f7ff fe2d 	bl	80016f8 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d10a      	bne.n	8001ab8 <writeDP+0x30>
 8001aa2:	3c01      	subs	r4, #1
 8001aa4:	d1f5      	bne.n	8001a92 <writeDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <writeDP+0x38>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4601      	mov	r1, r0
 8001aac:	20a0      	movs	r0, #160	@ 0xa0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <writeDP+0x3c>)
 8001ab0:	fb00 3002 	mla	r0, r0, r2, r3
 8001ab4:	f7fe fba4 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001ab8:	2801      	cmp	r0, #1
 8001aba:	d1f4      	bne.n	8001aa6 <writeDP+0x1e>
  }
}
 8001abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000188 	.word	0x20000188

08001ac8 <readAP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readAP(int reg, uint32_t *data)
{
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	4606      	mov	r6, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(true, reg, data);
 8001ad0:	2701      	movs	r7, #1
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	f7ff fcf6 	bl	80014c8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d10a      	bne.n	8001af6 <readAP+0x2e>
 8001ae0:	3c01      	subs	r4, #1
 8001ae2:	d1f6      	bne.n	8001ad2 <readAP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <readAP+0x34>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4601      	mov	r1, r0
 8001aea:	20a0      	movs	r0, #160	@ 0xa0
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <readAP+0x38>)
 8001aee:	fb00 3002 	mla	r0, r0, r2, r3
 8001af2:	f7fe fb85 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001af6:	2801      	cmp	r0, #1
 8001af8:	d1f4      	bne.n	8001ae4 <readAP+0x1c>
  }
}
 8001afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000188 	.word	0x20000188

08001b04 <readDP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readDP(int reg, uint32_t *data)
{
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	4606      	mov	r6, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(false, reg, data);
 8001b0c:	2700      	movs	r7, #0
 8001b0e:	462a      	mov	r2, r5
 8001b10:	4631      	mov	r1, r6
 8001b12:	4638      	mov	r0, r7
 8001b14:	f7ff fcd8 	bl	80014c8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001b18:	2802      	cmp	r0, #2
 8001b1a:	d10a      	bne.n	8001b32 <readDP+0x2e>
 8001b1c:	3c01      	subs	r4, #1
 8001b1e:	d1f6      	bne.n	8001b0e <readDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) {
    RAISE(swdStatus);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <readDP+0x34>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4601      	mov	r1, r0
 8001b26:	20a0      	movs	r0, #160	@ 0xa0
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <readDP+0x38>)
 8001b2a:	fb00 3002 	mla	r0, r0, r2, r3
 8001b2e:	f7fe fb67 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) {
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d1f4      	bne.n	8001b20 <readDP+0x1c>
  }
}
 8001b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000188 	.word	0x20000188

08001b40 <initDp>:
 * @returns
 *    The value of the IDCODE register
 **********************************************************/
uint32_t test = 0;
uint32_t initDp(void)
{
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b083      	sub	sp, #12
  uint32_t dpId = 0;
 8001b44:	2400      	movs	r4, #0
 8001b46:	9401      	str	r4, [sp, #4]
  /* If connecting to a Multidrop capable SW-DP (SWD version 2), this 
   * function must be run first. */
  //exitDormantState();
  
  /* Send the JTAG-to-SWD switching sequence */
  JTAG_to_SWD_Sequence();
 8001b48:	f7ff ff14 	bl	8001974 <JTAG_to_SWD_Sequence>
  
  /* Read IDCODE to get the DAP out of reset state */
  readDP(DP_IDCODE, &dpId);
 8001b4c:	a901      	add	r1, sp, #4
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff ffd8 	bl	8001b04 <readDP>

  /* Debug power up request */
  //khchoi: Sticky error clear & CTRL/STAT Register Clear.(Black Magic Probe)
  writeDP(DP_ABORT, (1 << 2));
 8001b54:	2104      	movs	r1, #4
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff ff96 	bl	8001a88 <writeDP>
  //writeDP(DP_ABORT, (1 << 3)); //wderrclr
  readDP(DP_CTRL, &test);
 8001b5c:	4d18      	ldr	r5, [pc, #96]	@ (8001bc0 <initDp+0x80>)
 8001b5e:	4629      	mov	r1, r5
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff ffcf 	bl	8001b04 <readDP>
  writeDP(DP_CTRL, 0);
 8001b66:	4621      	mov	r1, r4
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff ff8d 	bl	8001a88 <writeDP>
  readDP(DP_CTRL, &test);
 8001b6e:	4629      	mov	r1, r5
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff ffc7 	bl	8001b04 <readDP>
  writeDP(DP_CTRL, DP_CTRL_CSYSPWRUPREQ | DP_CTRL_CDBGPWRUPREQ);
 8001b76:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff ff84 	bl	8001a88 <writeDP>
 8001b80:	f44f 7496 	mov.w	r4, #300	@ 0x12c
  /* Wait until we receive powerup ACK */
  int retry = PWRUP_TIMEOUT + 200;
  uint32_t status;
  while ( retry > 0 )
  {
    readDP(DP_CTRL, &status);
 8001b84:	2501      	movs	r5, #1
 8001b86:	4669      	mov	r1, sp
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7ff ffbb 	bl	8001b04 <readDP>
    if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	f003 4320 	and.w	r3, r3, #2684354560	@ 0xa0000000
 8001b94:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8001b98:	d00a      	beq.n	8001bb0 <initDp+0x70>
  while ( retry > 0 )
 8001b9a:	3c01      	subs	r4, #1
 8001b9c:	d1f3      	bne.n	8001b86 <initDp+0x46>
  
  /* Throw error if we failed to power up the debug interface */
  if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
              != (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK) )
  {
    RAISE(SWD_ERROR_DEBUG_POWER);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <initDp+0x84>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2115      	movs	r1, #21
 8001ba4:	20a0      	movs	r0, #160	@ 0xa0
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <initDp+0x88>)
 8001ba8:	fb00 3002 	mla	r0, r0, r2, r3
 8001bac:	f7fe fb28 	bl	8000200 <longjmp>
  }

  /* Select first AP bank */
  writeDP(DP_SELECT, 0x00);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f7ff ff68 	bl	8001a88 <writeDP>

  return dpId;
 8001bb8:	9801      	ldr	r0, [sp, #4]
}
 8001bba:	b003      	add	sp, #12
 8001bbc:	bd30      	pop	{r4, r5, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000184 	.word	0x20000184
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000188 	.word	0x20000188

08001bcc <readApId>:
 * 
 * @returns
 *    The value of IDR register (address 0xFC) for AP #0
 **********************************************************/
uint32_t readApId(void)
{
 8001bcc:	b500      	push	{lr}
 8001bce:	b083      	sub	sp, #12
  uint32_t apId;
  
  /* Select last AP bank */
  writeDP(DP_SELECT, 0xf0);
 8001bd0:	21f0      	movs	r1, #240	@ 0xf0
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff ff58 	bl	8001a88 <writeDP>
  
  /* Dummy read AP ID */
  readAP(AP_IDR, &apId);
 8001bd8:	a901      	add	r1, sp, #4
 8001bda:	2003      	movs	r0, #3
 8001bdc:	f7ff ff74 	bl	8001ac8 <readAP>
  
  /* Read AP ID */
  readDP(DP_RDBUFF, &apId);
 8001be0:	a901      	add	r1, sp, #4
 8001be2:	2003      	movs	r0, #3
 8001be4:	f7ff ff8e 	bl	8001b04 <readDP>
  
  /* Select first AP bank again */
  writeDP(DP_SELECT, 0x00);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7ff ff4c 	bl	8001a88 <writeDP>
  
  return apId;
}
 8001bf0:	9801      	ldr	r0, [sp, #4]
 8001bf2:	b003      	add	sp, #12
 8001bf4:	f85d fb04 	ldr.w	pc, [sp], #4

08001bf8 <initAhbAp>:
 * Initalize the AHB-AP. The transfer size must be set
 * to 32-bit before trying to access any internal
 * memory. 
 **********************************************************/
void initAhbAp(void)
{    
 8001bf8:	b508      	push	{r3, lr}
  /* Set transfer size to 32 bit */  
  writeAP(AP_CSW, AP_CSW_DEFAULT);  
 8001bfa:	4902      	ldr	r1, [pc, #8]	@ (8001c04 <initAhbAp+0xc>)
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff ff1f 	bl	8001a40 <writeAP>
}
 8001c02:	bd08      	pop	{r3, pc}
 8001c04:	22000002 	.word	0x22000002

08001c08 <delayMs>:

/**********************************************************
 * Delay a number of milliseconds
 **********************************************************/
void delayMs(int ms)
{
 8001c08:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 8001c0a:	f002 fbff 	bl	800440c <HAL_Delay>
}
 8001c0e:	bd08      	pop	{r3, pc}

08001c10 <delayUs>:
/**********************************************************
 * Delay a number of microseconds
 **********************************************************/
void delayUs(int us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <delayUs+0x14>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < (us-1));  // wait for the counter to reach the us input in the parameter
 8001c18:	3801      	subs	r0, #1
 8001c1a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001c1c:	4283      	cmp	r3, r0
 8001c1e:	d3fc      	bcc.n	8001c1a <delayUs+0xa>
}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000fc4 	.word	0x20000fc4

08001c28 <getErrorString>:
jmp_buf swdErrors[EXCEPTION_MAX_LEVEL];
int swdErrorIndex = -1;

char *getErrorString(int errorCode)
{
  switch (errorCode)
 8001c28:	3801      	subs	r0, #1
 8001c2a:	2814      	cmp	r0, #20
 8001c2c:	d834      	bhi.n	8001c98 <getErrorString+0x70>
 8001c2e:	e8df f000 	tbb	[pc, r0]
 8001c32:	350b      	.short	0x350b
 8001c34:	13110f0d 	.word	0x13110f0d
 8001c38:	19173115 	.word	0x19173115
 8001c3c:	211f1d1b 	.word	0x211f1d1b
 8001c40:	29272523 	.word	0x29272523
 8001c44:	2d2b      	.short	0x2d2b
 8001c46:	2f          	.byte	0x2f
 8001c47:	00          	.byte	0x00
  {
  case SWD_ERROR_OK:
    return "No error.";
 8001c48:	4815      	ldr	r0, [pc, #84]	@ (8001ca0 <getErrorString+0x78>)
 8001c4a:	4770      	bx	lr
  case SWD_ERROR_WAIT:
    return "Timed out while waiting for WAIT response.";
  case SWD_ERROR_FAULT:
    return "Target returned FAULT response.";
 8001c4c:	4815      	ldr	r0, [pc, #84]	@ (8001ca4 <getErrorString+0x7c>)
 8001c4e:	4770      	bx	lr
  case SWD_ERROR_PROTOCOL:
    return "Protocol error. Target does not respond.";
 8001c50:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <getErrorString+0x80>)
 8001c52:	4770      	bx	lr
  case SWD_ERROR_PARITY:
    return "Parity error.";
 8001c54:	4815      	ldr	r0, [pc, #84]	@ (8001cac <getErrorString+0x84>)
 8001c56:	4770      	bx	lr
  case SWD_ERROR_MCU_LOCKED:
    return "MCU locked.";
 8001c58:	4815      	ldr	r0, [pc, #84]	@ (8001cb0 <getErrorString+0x88>)
 8001c5a:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDR:
    return "Invalid IDR value.";
 8001c5c:	4815      	ldr	r0, [pc, #84]	@ (8001cb4 <getErrorString+0x8c>)
 8001c5e:	4770      	bx	lr
  case SWD_ERROR_FLASH_WRITE_FAILED:
    return "Write to flash failed.";
 8001c60:	4815      	ldr	r0, [pc, #84]	@ (8001cb8 <getErrorString+0x90>)
 8001c62:	4770      	bx	lr
  case SWD_ERROR_UNLOCK_FAILED:
    return "Failed to unlock target.";
 8001c64:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <getErrorString+0x94>)
 8001c66:	4770      	bx	lr
  case SWD_ERROR_AAP_EXTENSION_FAILED:
    return "Unable to access AAP registers. Is the reset pin connected?";
 8001c68:	4815      	ldr	r0, [pc, #84]	@ (8001cc0 <getErrorString+0x98>)
 8001c6a:	4770      	bx	lr
  case SWD_ERROR_LOCK_FAILED:
    return "Failed to lock target.";
 8001c6c:	4815      	ldr	r0, [pc, #84]	@ (8001cc4 <getErrorString+0x9c>)
 8001c6e:	4770      	bx	lr
  case SWD_ERROR_CLR_DLW_FAILED:
    return "Failed to clear Debug Lock Word.";
 8001c70:	4815      	ldr	r0, [pc, #84]	@ (8001cc8 <getErrorString+0xa0>)
 8001c72:	4770      	bx	lr
  case SWD_ERROR_MASS_ERASE_TIMEOUT:
    return "Timed out while waiting for Mass Erase to complete.";
 8001c74:	4815      	ldr	r0, [pc, #84]	@ (8001ccc <getErrorString+0xa4>)
 8001c76:	4770      	bx	lr
  case SWD_ERROR_VERIFY_FW_FAILED:
    return "Application verification failed.";
 8001c78:	4815      	ldr	r0, [pc, #84]	@ (8001cd0 <getErrorString+0xa8>)
 8001c7a:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_WAITING_RESET:
    return "Timeout while waiting for target to reset.";
 8001c7c:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <getErrorString+0xac>)
 8001c7e:	4770      	bx	lr
  case SWD_ERROR_TARGET_NOT_HALTED:
    return "Target is halted.";
 8001c80:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <getErrorString+0xb0>)
 8001c82:	4770      	bx	lr
  case SWD_ERROR_FLASHLOADER_ERROR:
    return "Error in flashloader.";
 8001c84:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <getErrorString+0xb4>)
 8001c86:	4770      	bx	lr
  case SWD_ERROR_DEVICE_ERASE_FAILED:
    return "Device Erase failed."; 
 8001c88:	4815      	ldr	r0, [pc, #84]	@ (8001ce0 <getErrorString+0xb8>)
 8001c8a:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_HALT:
    return "Timeout while waiting to halt target.";
 8001c8c:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <getErrorString+0xbc>)
 8001c8e:	4770      	bx	lr
  case SWD_ERROR_DEBUG_POWER:
    return "Failed to power up debug interface.";
 8001c90:	4815      	ldr	r0, [pc, #84]	@ (8001ce8 <getErrorString+0xc0>)
 8001c92:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDCODE:
    return "Invalid IDCODE.";
 8001c94:	4815      	ldr	r0, [pc, #84]	@ (8001cec <getErrorString+0xc4>)
 8001c96:	4770      	bx	lr
  default:
    return "Unknown error.";
 8001c98:	4815      	ldr	r0, [pc, #84]	@ (8001cf0 <getErrorString+0xc8>)
 8001c9a:	4770      	bx	lr
  switch (errorCode)
 8001c9c:	4815      	ldr	r0, [pc, #84]	@ (8001cf4 <getErrorString+0xcc>)
  }
 8001c9e:	4770      	bx	lr
 8001ca0:	0800e5a8 	.word	0x0800e5a8
 8001ca4:	0800e5e0 	.word	0x0800e5e0
 8001ca8:	0800e600 	.word	0x0800e600
 8001cac:	0800e62c 	.word	0x0800e62c
 8001cb0:	0800e63c 	.word	0x0800e63c
 8001cb4:	0800e648 	.word	0x0800e648
 8001cb8:	0800e65c 	.word	0x0800e65c
 8001cbc:	0800e674 	.word	0x0800e674
 8001cc0:	0800e690 	.word	0x0800e690
 8001cc4:	0800e6cc 	.word	0x0800e6cc
 8001cc8:	0800e6e4 	.word	0x0800e6e4
 8001ccc:	0800e708 	.word	0x0800e708
 8001cd0:	0800e73c 	.word	0x0800e73c
 8001cd4:	0800e760 	.word	0x0800e760
 8001cd8:	0800e78c 	.word	0x0800e78c
 8001cdc:	0800e7a0 	.word	0x0800e7a0
 8001ce0:	0800e7b8 	.word	0x0800e7b8
 8001ce4:	0800e7d0 	.word	0x0800e7d0
 8001ce8:	0800e7f8 	.word	0x0800e7f8
 8001cec:	0800e81c 	.word	0x0800e81c
 8001cf0:	0800e82c 	.word	0x0800e82c
 8001cf4:	0800e5b4 	.word	0x0800e5b4

08001cf8 <haltTarget>:
/**********************************************************
 * Halts the target CPU
 **********************************************************/

void haltTarget(void)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b083      	sub	sp, #12
  int timeout = DEBUG_EVENT_TIMEOUT;
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001cfc:	4914      	ldr	r1, [pc, #80]	@ (8001d50 <haltTarget+0x58>)
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff fe9e 	bl	8001a40 <writeAP>
  writeAP(AP_DRW, STOP_CMD);
 8001d04:	4913      	ldr	r1, [pc, #76]	@ (8001d54 <haltTarget+0x5c>)
 8001d06:	2003      	movs	r0, #3
 8001d08:	f7ff fe9a 	bl	8001a40 <writeAP>
 8001d0c:	24c8      	movs	r4, #200	@ 0xc8
  
  uint32_t dhcrState;
  do {
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001d0e:	4f10      	ldr	r7, [pc, #64]	@ (8001d50 <haltTarget+0x58>)
 8001d10:	2601      	movs	r6, #1
    readAP(AP_DRW, &dhcrState);
 8001d12:	2503      	movs	r5, #3
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001d14:	4639      	mov	r1, r7
 8001d16:	4630      	mov	r0, r6
 8001d18:	f7ff fe92 	bl	8001a40 <writeAP>
    readAP(AP_DRW, &dhcrState);
 8001d1c:	a901      	add	r1, sp, #4
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f7ff fed2 	bl	8001ac8 <readAP>
    readDP(DP_RDBUFF, &dhcrState);
 8001d24:	a901      	add	r1, sp, #4
 8001d26:	4628      	mov	r0, r5
 8001d28:	f7ff feec 	bl	8001b04 <readDP>
    timeout--;
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 ); 
 8001d2c:	9b01      	ldr	r3, [sp, #4]
 8001d2e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d32:	d10a      	bne.n	8001d4a <haltTarget+0x52>
 8001d34:	3c01      	subs	r4, #1
 8001d36:	d1ed      	bne.n	8001d14 <haltTarget+0x1c>
  
  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
    RAISE(SWD_ERROR_TIMEOUT_HALT);
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <haltTarget+0x60>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2114      	movs	r1, #20
 8001d3e:	20a0      	movs	r0, #160	@ 0xa0
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <haltTarget+0x64>)
 8001d42:	fb00 3002 	mla	r0, r0, r2, r3
 8001d46:	f7fe fa5b 	bl	8000200 <longjmp>
  }
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000edf0 	.word	0xe000edf0
 8001d54:	a05f0003 	.word	0xa05f0003
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000188 	.word	0x20000188

08001d60 <hardResetTarget>:

/**********************************************************
 * Performs a pin reset on the target
 **********************************************************/
void hardResetTarget(void)
{
 8001d60:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_RESET);
 8001d62:	4c08      	ldr	r4, [pc, #32]	@ (8001d84 <hardResetTarget+0x24>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f002 fee0 	bl	8004b30 <HAL_GPIO_WritePin>
    delayMs(50);
 8001d70:	2032      	movs	r0, #50	@ 0x32
 8001d72:	f7ff ff49 	bl	8001c08 <delayMs>
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f002 fed7 	bl	8004b30 <HAL_GPIO_WritePin>
}
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	40020000 	.word	0x40020000

08001d88 <readMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
uint32_t readMem(uint32_t addr)
{
 8001d88:	b500      	push	{lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	4601      	mov	r1, r0
  uint32_t ret;
  writeAP(AP_TAR, addr);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff fe56 	bl	8001a40 <writeAP>
  readAP(AP_DRW, &ret);
 8001d94:	a901      	add	r1, sp, #4
 8001d96:	2003      	movs	r0, #3
 8001d98:	f7ff fe96 	bl	8001ac8 <readAP>
  readDP(DP_RDBUFF, &ret);
 8001d9c:	a901      	add	r1, sp, #4
 8001d9e:	2003      	movs	r0, #3
 8001da0:	f7ff feb0 	bl	8001b04 <readDP>
  return ret;
}
 8001da4:	9801      	ldr	r0, [sp, #4]
 8001da6:	b003      	add	sp, #12
 8001da8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dac <writeMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
void writeMem(uint32_t addr, uint32_t data)
{
 8001dac:	b510      	push	{r4, lr}
 8001dae:	460c      	mov	r4, r1
#if 1
  writeAP(AP_TAR, addr);
 8001db0:	4601      	mov	r1, r0
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff fe44 	bl	8001a40 <writeAP>
  writeAP(AP_DRW, data);
 8001db8:	4621      	mov	r1, r4
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f7ff fe40 	bl	8001a40 <writeAP>
  writeAP(AP_TAR, addr);
  writeAP(AP_DRW, data);
  log_message("AP_TAR: 0x%08"PRIX32"\n", addr);
	log_message("AP_DRW: 0x%08"PRIX32"\n", data);
#endif
}
 8001dc0:	bd10      	pop	{r4, pc}
	...

08001dc4 <resetTarget>:
{  
 8001dc4:	b570      	push	{r4, r5, r6, lr}
  writeMem((uint32_t)&(CoreDebug->DEMCR), 0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	481f      	ldr	r0, [pc, #124]	@ (8001e48 <resetTarget+0x84>)
 8001dca:	f7ff ffef 	bl	8001dac <writeMem>
  readMem((uint32_t)&(CoreDebug->DHCSR));
 8001dce:	4c1f      	ldr	r4, [pc, #124]	@ (8001e4c <resetTarget+0x88>)
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff ffd9 	bl	8001d88 <readMem>
  dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ffd6 	bl	8001d88 <readMem>
  writeMem((uint32_t)&(SCB->AIRCR), AIRCR_RESET_CMD);
 8001ddc:	491c      	ldr	r1, [pc, #112]	@ (8001e50 <resetTarget+0x8c>)
 8001dde:	481d      	ldr	r0, [pc, #116]	@ (8001e54 <resetTarget+0x90>)
 8001de0:	f7ff ffe4 	bl	8001dac <writeMem>
  delayUs(100);
 8001de4:	2064      	movs	r0, #100	@ 0x64
 8001de6:	f7ff ff13 	bl	8001c10 <delayUs>
 8001dea:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 8001dec:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001dee:	4d17      	ldr	r5, [pc, #92]	@ (8001e4c <resetTarget+0x88>)
    delayUs(10);
 8001df0:	4630      	mov	r0, r6
 8001df2:	f7ff ff0d 	bl	8001c10 <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7ff ffc6 	bl	8001d88 <readMem>
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 8001dfc:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8001e00:	d10a      	bne.n	8001e18 <resetTarget+0x54>
 8001e02:	3c01      	subs	r4, #1
 8001e04:	d1f4      	bne.n	8001df0 <resetTarget+0x2c>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <resetTarget+0x94>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	20a0      	movs	r0, #160	@ 0xa0
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <resetTarget+0x98>)
 8001e10:	fb00 3002 	mla	r0, r0, r2, r3
 8001e14:	f7fe f9f4 	bl	8000200 <longjmp>
 8001e18:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 8001e1a:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8001e4c <resetTarget+0x88>)
    delayUs(10);
 8001e1e:	4630      	mov	r0, r6
 8001e20:	f7ff fef6 	bl	8001c10 <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e24:	4628      	mov	r0, r5
 8001e26:	f7ff ffaf 	bl	8001d88 <readMem>
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 8001e2a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8001e2e:	d00a      	beq.n	8001e46 <resetTarget+0x82>
 8001e30:	3c01      	subs	r4, #1
 8001e32:	d1f4      	bne.n	8001e1e <resetTarget+0x5a>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <resetTarget+0x94>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2110      	movs	r1, #16
 8001e3a:	20a0      	movs	r0, #160	@ 0xa0
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <resetTarget+0x98>)
 8001e3e:	fb00 3002 	mla	r0, r0, r2, r3
 8001e42:	f7fe f9dd 	bl	8000200 <longjmp>
}
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	e000edfc 	.word	0xe000edfc
 8001e4c:	e000edf0 	.word	0xe000edf0
 8001e50:	05fa0004 	.word	0x05fa0004
 8001e54:	e000ed0c 	.word	0xe000ed0c
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000188 	.word	0x20000188

08001e60 <verifyDpId>:
 * Returns true if the @param dpId is a valid
 * IDCODE value. 
 **********************************************************/
bool verifyDpId(uint32_t dpId)
{
  if ( dpId == STM32C0_SWDP_ID )
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <verifyDpId+0x20>)
 8001e62:	4298      	cmp	r0, r3
 8001e64:	d00a      	beq.n	8001e7c <verifyDpId+0x1c>
  {
    return true;
  }
  else if ( dpId == STM32H7_SWDP_ID )
 8001e66:	f103 43bf 	add.w	r3, r3, #1602224128	@ 0x5f800000
 8001e6a:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e72:	4298      	cmp	r0, r3
 8001e74:	bf14      	ite	ne
 8001e76:	2000      	movne	r0, #0
 8001e78:	2001      	moveq	r0, #1
 8001e7a:	4770      	bx	lr
    return true;
 8001e7c:	2001      	movs	r0, #1
  } 
  else 
  {
    return false;
  }
}
 8001e7e:	4770      	bx	lr
 8001e80:	0bc11477 	.word	0x0bc11477

08001e84 <verifyAhbApId>:
 * Returns true if the @param apId is a valid
 * IDR value for the AHB-AP. 
 **********************************************************/
bool verifyAhbApId(uint32_t apId)
{
  if ( apId == STM32_AHBAP_ID_1 )
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <verifyAhbApId+0x1c>)
 8001e86:	4298      	cmp	r0, r3
 8001e88:	d007      	beq.n	8001e9a <verifyAhbApId+0x16>
  {
    return true; // Valid for G, LG, GG, TG, WG
  }
  else if ( apId == STM32_AHBAP_ID_2 )
 8001e8a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001e8e:	3b30      	subs	r3, #48	@ 0x30
 8001e90:	4298      	cmp	r0, r3
 8001e92:	bf14      	ite	ne
 8001e94:	2000      	movne	r0, #0
 8001e96:	2001      	moveq	r0, #1
 8001e98:	4770      	bx	lr
    return true; // Valid for G, LG, GG, TG, WG
 8001e9a:	2001      	movs	r0, #1
  } 
  else 
  {
    return false;
  }
}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	04770031 	.word	0x04770031

08001ea4 <connectToTarget>:
 * Performs the initialization sequence on the SW-DP. 
 * After this completes the debug interface can be used. 
 * Raises an exception on any error during connection. 
 **********************************************************/
void connectToTarget(Target_InfoTypeDef *target)
{
 8001ea4:	b538      	push	{r3, r4, r5, lr}
 8001ea6:	4605      	mov	r5, r0
  delayUs(500);
 8001ea8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eac:	f7ff feb0 	bl	8001c10 <delayUs>
  target->TargetDpId = initDp();
 8001eb0:	f7ff fe46 	bl	8001b40 <initDp>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	6028      	str	r0, [r5, #0]
  /* Verify that the DP returns the correct ID */
  if ( !verifyDpId(target->TargetDpId) )
 8001eb8:	f7ff ffd2 	bl	8001e60 <verifyDpId>
 8001ebc:	b168      	cbz	r0, 8001eda <connectToTarget+0x36>
 8001ebe:	2414      	movs	r4, #20
  
  /* Verify that the AP returns the correct ID */
  int retry = AHB_IDR_RETRY_COUNT;
  while ( retry > 0 )
  {
    target->TargetApId = readApId();
 8001ec0:	f7ff fe84 	bl	8001bcc <readApId>
 8001ec4:	6068      	str	r0, [r5, #4]
    if ( verifyAhbApId(target->TargetApId) )
 8001ec6:	f7ff ffdd 	bl	8001e84 <verifyAhbApId>
 8001eca:	b908      	cbnz	r0, 8001ed0 <connectToTarget+0x2c>
  while ( retry > 0 )
 8001ecc:	3c01      	subs	r4, #1
 8001ece:	d1f7      	bne.n	8001ec0 <connectToTarget+0x1c>
    retry--;
  }
    
  /* Set up parameters for AHB-AP. This must be done before accessing
   * internal memory. */
  initAhbAp();
 8001ed0:	f7ff fe92 	bl	8001bf8 <initAhbAp>
  haltTarget();
 8001ed4:	f7ff ff10 	bl	8001cf8 <haltTarget>
}
 8001ed8:	bd38      	pop	{r3, r4, r5, pc}
    printf("Read IDCODE = 0x%08"PRIX32"\n", target->TargetDpId);
 8001eda:	4621      	mov	r1, r4
 8001edc:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <connectToTarget+0x50>)
 8001ede:	f00b f9e1 	bl	800d2a4 <iprintf>
    RAISE(SWD_ERROR_INVALID_IDCODE);
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <connectToTarget+0x54>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	20a0      	movs	r0, #160	@ 0xa0
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <connectToTarget+0x58>)
 8001eec:	fb00 3002 	mla	r0, r0, r2, r3
 8001ef0:	f7fe f986 	bl	8000200 <longjmp>
 8001ef4:	0800e83c 	.word	0x0800e83c
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000188 	.word	0x20000188

08001f00 <Target_ProgramCallback_STM32H7>:
}
#endif

// Callback function to program the Stm32h7 flash memory
static bool Target_ProgramCallback_STM32H7(uint32_t address, const uint8_t *data, uint8_t data_size)
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4615      	mov	r5, r2
    if (data_size % 2 != 0 || data_size > 32) {
        //return false;
    }

    // combined_offset이 0일 때 현재 주소를 업데이트
    if (combined_offset == 0) {
 8001f04:	4b33      	ldr	r3, [pc, #204]	@ (8001fd4 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f06:	781c      	ldrb	r4, [r3, #0]
 8001f08:	b90c      	cbnz	r4, 8001f0e <Target_ProgramCallback_STM32H7+0xe>
        current_address = address;
 8001f0a:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <Target_ProgramCallback_STM32H7+0xd8>)
 8001f0c:	6018      	str	r0, [r3, #0]
    }

    // 데이터를 combined_data에 복사
    memcpy(combined_data + combined_offset, data, data_size);
 8001f0e:	462a      	mov	r2, r5
 8001f10:	4832      	ldr	r0, [pc, #200]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001f12:	4420      	add	r0, r4
 8001f14:	f00b fc17 	bl	800d746 <memcpy>
    combined_offset += data_size;
 8001f18:	442c      	add	r4, r5
 8001f1a:	b2e4      	uxtb	r4, r4
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f1e:	701c      	strb	r4, [r3, #0]

    // 프로그래밍할 워드 크기 결정 (TargetDevId에 따라)
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <Target_ProgramCallback_STM32H7+0xe0>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001f28:	bf14      	ite	ne
 8001f2a:	2208      	movne	r2, #8
 8001f2c:	2204      	moveq	r2, #4
    uint8_t bytes_to_program = words_to_program * 4;
 8001f2e:	0096      	lsls	r6, r2, #2

    // 충분한 데이터가 쌓였을 때 플래시 프로그래밍 수행
    if (combined_offset >= bytes_to_program) {
 8001f30:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 8001f34:	d210      	bcs.n	8001f58 <Target_ProgramCallback_STM32H7+0x58>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
        }
    }

    // 마지막 호출이며 combined_offset이 0이 아닐 때, 남은 데이터를 패딩하여 프로그래밍
    if (data_size == 0 && combined_offset > 0) {
 8001f36:	bb65      	cbnz	r5, 8001f92 <Target_ProgramCallback_STM32H7+0x92>
 8001f38:	b36c      	cbz	r4, 8001f96 <Target_ProgramCallback_STM32H7+0x96>
        // 0xFF로 패딩하여 워드 크기를 맞춤
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <Target_ProgramCallback_STM32H7+0xe0>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001f42:	d02c      	beq.n	8001f9e <Target_ProgramCallback_STM32H7+0x9e>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8001f44:	f1c4 0220 	rsb	r2, r4, #32
 8001f48:	21ff      	movs	r1, #255	@ 0xff
 8001f4a:	4824      	ldr	r0, [pc, #144]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001f4c:	4420      	add	r0, r4
 8001f4e:	f00b fb7f 	bl	800d650 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001f52:	2420      	movs	r4, #32
        combined_offset = padding_size;

        // 플래시 메모리 프로그래밍
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8001f54:	2208      	movs	r2, #8
 8001f56:	e02b      	b.n	8001fb0 <Target_ProgramCallback_STM32H7+0xb0>
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8001f58:	4920      	ldr	r1, [pc, #128]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <Target_ProgramCallback_STM32H7+0xd8>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f001 f8ab 	bl	80030b8 <Stm32h7_Flash_Program>
 8001f62:	b9a0      	cbnz	r0, 8001f8e <Target_ProgramCallback_STM32H7+0x8e>
        current_address += bytes_to_program;
 8001f64:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <Target_ProgramCallback_STM32H7+0xd8>)
 8001f66:	6813      	ldr	r3, [r2, #0]
 8001f68:	4433      	add	r3, r6
 8001f6a:	6013      	str	r3, [r2, #0]
        combined_offset -= bytes_to_program;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f6e:	781c      	ldrb	r4, [r3, #0]
 8001f70:	1ba4      	subs	r4, r4, r6
 8001f72:	b2e4      	uxtb	r4, r4
 8001f74:	701c      	strb	r4, [r3, #0]
        if (combined_offset > 0) {
 8001f76:	b90c      	cbnz	r4, 8001f7c <Target_ProgramCallback_STM32H7+0x7c>
        current_address += padding_size;

        // combined_offset 초기화
        combined_offset = 0;
    }
    return true;
 8001f78:	2001      	movs	r0, #1
 8001f7a:	e00b      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
 8001f7c:	4817      	ldr	r0, [pc, #92]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001f7e:	4622      	mov	r2, r4
 8001f80:	1981      	adds	r1, r0, r6
 8001f82:	f00b fb4b 	bl	800d61c <memmove>
    if (data_size == 0 && combined_offset > 0) {
 8001f86:	2d00      	cmp	r5, #0
 8001f88:	d0d7      	beq.n	8001f3a <Target_ProgramCallback_STM32H7+0x3a>
    return true;
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	e002      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e000      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
    return true;
 8001f92:	2001      	movs	r0, #1
}
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
    return true;
 8001f96:	2001      	movs	r0, #1
 8001f98:	e7fc      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e7fa      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8001f9e:	f1c4 0210 	rsb	r2, r4, #16
 8001fa2:	21ff      	movs	r1, #255	@ 0xff
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001fa6:	4420      	add	r0, r4
 8001fa8:	f00b fb52 	bl	800d650 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001fac:	2410      	movs	r4, #16
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8001fae:	2204      	movs	r2, #4
        combined_offset = padding_size;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Target_ProgramCallback_STM32H7+0xd4>)
 8001fb2:	701c      	strb	r4, [r3, #0]
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8001fb4:	4909      	ldr	r1, [pc, #36]	@ (8001fdc <Target_ProgramCallback_STM32H7+0xdc>)
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <Target_ProgramCallback_STM32H7+0xd8>)
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	f001 f87d 	bl	80030b8 <Stm32h7_Flash_Program>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d1eb      	bne.n	8001f9a <Target_ProgramCallback_STM32H7+0x9a>
        current_address += padding_size;
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <Target_ProgramCallback_STM32H7+0xd8>)
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	4423      	add	r3, r4
 8001fc8:	6013      	str	r3, [r2, #0]
        combined_offset = 0;
 8001fca:	4b02      	ldr	r3, [pc, #8]	@ (8001fd4 <Target_ProgramCallback_STM32H7+0xd4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    return true;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e7df      	b.n	8001f94 <Target_ProgramCallback_STM32H7+0x94>
 8001fd4:	20000e2c 	.word	0x20000e2c
 8001fd8:	20000e28 	.word	0x20000e28
 8001fdc:	20000e08 	.word	0x20000e08
 8001fe0:	20000e30 	.word	0x20000e30

08001fe4 <Target_ProgramCallback_STM32C0>:
	for (uint32_t i = 0; i < bufsize; i += 8)
 8001fe4:	b36a      	cbz	r2, 8002042 <Target_ProgramCallback_STM32C0+0x5e>
{
 8001fe6:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	4607      	mov	r7, r0
 8001fee:	4690      	mov	r8, r2
 8001ff0:	460d      	mov	r5, r1
	for (uint32_t i = 0; i < bufsize; i += 8)
 8001ff2:	4616      	mov	r6, r2
 8001ff4:	2400      	movs	r4, #0
		tmp = 0xFFFFFFFFFFFFFFFF;
 8001ff6:	f04f 3aff 	mov.w	sl, #4294967295
 8001ffa:	f04f 3bff 	mov.w	fp, #4294967295
 8001ffe:	e00e      	b.n	800201e <Target_ProgramCallback_STM32C0+0x3a>
			tmp = ((uint64_t*)(&buf[i]))[0];
 8002000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002004:	e9cd 2300 	strd	r2, r3, [sp]
		status = Stm32c0_Flash_Program(addr + i, tmp);
 8002008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800200c:	1938      	adds	r0, r7, r4
 800200e:	f000 fe6b 	bl	8002ce8 <Stm32c0_Flash_Program>
		if (status != TARGET_OK)
 8002012:	b970      	cbnz	r0, 8002032 <Target_ProgramCallback_STM32C0+0x4e>
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002014:	3408      	adds	r4, #8
 8002016:	3e08      	subs	r6, #8
 8002018:	3508      	adds	r5, #8
 800201a:	4544      	cmp	r4, r8
 800201c:	d20f      	bcs.n	800203e <Target_ProgramCallback_STM32C0+0x5a>
		tmp = 0xFFFFFFFFFFFFFFFF;
 800201e:	e9cd ab00 	strd	sl, fp, [sp]
		if (bufsize - i >= 8) {
 8002022:	2e07      	cmp	r6, #7
 8002024:	d8ec      	bhi.n	8002000 <Target_ProgramCallback_STM32C0+0x1c>
			memcpy(&tmp, &buf[i], bufsize - i);
 8002026:	4632      	mov	r2, r6
 8002028:	4629      	mov	r1, r5
 800202a:	4668      	mov	r0, sp
 800202c:	f00b fb8b 	bl	800d746 <memcpy>
 8002030:	e7ea      	b.n	8002008 <Target_ProgramCallback_STM32C0+0x24>
			Stm32c0_Flash_Lock();
 8002032:	f000 fdef 	bl	8002c14 <Stm32c0_Flash_Lock>
			return false;
 8002036:	2000      	movs	r0, #0
}
 8002038:	b002      	add	sp, #8
 800203a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	return true;
 800203e:	2001      	movs	r0, #1
 8002040:	e7fa      	b.n	8002038 <Target_ProgramCallback_STM32C0+0x54>
 8002042:	2001      	movs	r0, #1
}
 8002044:	4770      	bx	lr
	...

08002048 <__io_putchar>:
{
 8002048:	b500      	push	{lr}
 800204a:	b083      	sub	sp, #12
 800204c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800204e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002052:	2201      	movs	r2, #1
 8002054:	a901      	add	r1, sp, #4
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <__io_putchar+0x1c>)
 8002058:	f005 fe11 	bl	8007c7e <HAL_UART_Transmit>
}
 800205c:	9801      	ldr	r0, [sp, #4]
 800205e:	b003      	add	sp, #12
 8002060:	f85d fb04 	ldr.w	pc, [sp], #4
 8002064:	20000f7c 	.word	0x20000f7c

08002068 <log_message>:
{
 8002068:	b40f      	push	{r0, r1, r2, r3}
 800206a:	b510      	push	{r4, lr}
 800206c:	b0d6      	sub	sp, #344	@ 0x158
 800206e:	ab58      	add	r3, sp, #352	@ 0x160
 8002070:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002074:	9315      	str	r3, [sp, #84]	@ 0x54
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002076:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207a:	a816      	add	r0, sp, #88	@ 0x58
 800207c:	f00b fa2c 	bl	800d4d8 <vsniprintf>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002080:	4c1b      	ldr	r4, [pc, #108]	@ (80020f0 <log_message+0x88>)
 8002082:	2200      	movs	r2, #0
 8002084:	a910      	add	r1, sp, #64	@ 0x40
 8002086:	4620      	mov	r0, r4
 8002088:	f004 f87b 	bl	8006182 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800208c:	2200      	movs	r2, #0
 800208e:	a90f      	add	r1, sp, #60	@ 0x3c
 8002090:	4620      	mov	r0, r4
 8002092:	f004 f89c 	bl	80061ce <HAL_RTC_GetDate>
    uint32_t SecondFraction = hrtc.Init.SynchPrediv;
 8002096:	68e1      	ldr	r1, [r4, #12]
             2000 + sDate.Year, sDate.Month, sDate.Date,
 8002098:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 800209c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800209e:	1a8a      	subs	r2, r1, r2
 80020a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020a4:	fb00 f202 	mul.w	r2, r0, r2
 80020a8:	3101      	adds	r1, #1
 80020aa:	fbb2 f2f1 	udiv	r2, r2, r1
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 80020ae:	9205      	str	r2, [sp, #20]
 80020b0:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 80020b4:	9204      	str	r2, [sp, #16]
 80020b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 80020ba:	9203      	str	r2, [sp, #12]
 80020bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 80020c0:	9202      	str	r2, [sp, #8]
 80020c2:	f89d 203e 	ldrb.w	r2, [sp, #62]	@ 0x3e
 80020c6:	9201      	str	r2, [sp, #4]
 80020c8:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80020d2:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <log_message+0x8c>)
 80020d4:	2120      	movs	r1, #32
 80020d6:	a807      	add	r0, sp, #28
 80020d8:	f00b f95c 	bl	800d394 <sniprintf>
    printf("[%s] %s", time_str, buffer);
 80020dc:	aa16      	add	r2, sp, #88	@ 0x58
 80020de:	a907      	add	r1, sp, #28
 80020e0:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <log_message+0x90>)
 80020e2:	f00b f8df 	bl	800d2a4 <iprintf>
}
 80020e6:	b056      	add	sp, #344	@ 0x158
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ec:	b004      	add	sp, #16
 80020ee:	4770      	bx	lr
 80020f0:	200011f0 	.word	0x200011f0
 80020f4:	0800e854 	.word	0x0800e854
 80020f8:	0800e878 	.word	0x0800e878

080020fc <Target_Connect>:
{
 80020fc:	b510      	push	{r4, lr}
  log_message("Target Connect\n");
 80020fe:	4858      	ldr	r0, [pc, #352]	@ (8002260 <Target_Connect+0x164>)
 8002100:	f7ff ffb2 	bl	8002068 <log_message>
  hardResetTarget();
 8002104:	f7ff fe2c 	bl	8001d60 <hardResetTarget>
  delayMs(50);
 8002108:	2032      	movs	r0, #50	@ 0x32
 800210a:	f7ff fd7d 	bl	8001c08 <delayMs>
		TRY
 800210e:	4b55      	ldr	r3, [pc, #340]	@ (8002264 <Target_Connect+0x168>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	3001      	adds	r0, #1
 8002114:	6018      	str	r0, [r3, #0]
 8002116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800211a:	4b53      	ldr	r3, [pc, #332]	@ (8002268 <Target_Connect+0x16c>)
 800211c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8002120:	f7fe f866 	bl	80001f0 <setjmp>
 8002124:	2800      	cmp	r0, #0
 8002126:	f040 808c 	bne.w	8002242 <Target_Connect+0x146>
			connectToTarget(&target);
 800212a:	4c50      	ldr	r4, [pc, #320]	@ (800226c <Target_Connect+0x170>)
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff feb9 	bl	8001ea4 <connectToTarget>
    switch(target->TargetDpId)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	4a4e      	ldr	r2, [pc, #312]	@ (8002270 <Target_Connect+0x174>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <Target_Connect+0x5c>
 800213a:	f102 42bf 	add.w	r2, r2, #1602224128	@ 0x5f800000
 800213e:	f502 02be 	add.w	r2, r2, #6225920	@ 0x5f0000
 8002142:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002146:	4293      	cmp	r3, r2
 8002148:	d01b      	beq.n	8002182 <Target_Connect+0x86>
            log_message("Unsupported Device Family\n");
 800214a:	484a      	ldr	r0, [pc, #296]	@ (8002274 <Target_Connect+0x178>)
 800214c:	f7ff ff8c 	bl	8002068 <log_message>
			swdErrorIndex = 0;
 8002150:	2000      	movs	r0, #0
 8002152:	4b44      	ldr	r3, [pc, #272]	@ (8002264 <Target_Connect+0x168>)
 8002154:	6018      	str	r0, [r3, #0]
    	return TARGET_OK;
 8002156:	e081      	b.n	800225c <Target_Connect+0x160>
    target->TargetFamily = TARGET_STM32C0;
 8002158:	4b44      	ldr	r3, [pc, #272]	@ (800226c <Target_Connect+0x170>)
 800215a:	2205      	movs	r2, #5
 800215c:	721a      	strb	r2, [r3, #8]
    uint32_t tmp = readMem(STM32C0_REG_DEVICE_ID);
 800215e:	4846      	ldr	r0, [pc, #280]	@ (8002278 <Target_Connect+0x17c>)
 8002160:	f7ff fe12 	bl	8001d88 <readMem>
    target->TargetDevId = tmp & 0xFFF;
 8002164:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 8002168:	0c00      	lsrs	r0, r0, #16
    target->TargetDevId = tmp & 0xFFF;
 800216a:	4b40      	ldr	r3, [pc, #256]	@ (800226c <Target_Connect+0x170>)
 800216c:	60d9      	str	r1, [r3, #12]
    target->TargetRevId = tmp >> 16;
 800216e:	6118      	str	r0, [r3, #16]
    switch(target->TargetFamily)
 8002170:	7a1b      	ldrb	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d00f      	beq.n	8002196 <Target_Connect+0x9a>
 8002176:	2b0f      	cmp	r3, #15
 8002178:	d021      	beq.n	80021be <Target_Connect+0xc2>
            log_message("Unknown Target Family\n");
 800217a:	4840      	ldr	r0, [pc, #256]	@ (800227c <Target_Connect+0x180>)
 800217c:	f7ff ff74 	bl	8002068 <log_message>
            break;
 8002180:	e7e6      	b.n	8002150 <Target_Connect+0x54>
    target->TargetFamily = TARGET_STM32H7;
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <Target_Connect+0x170>)
 8002184:	220f      	movs	r2, #15
 8002186:	721a      	strb	r2, [r3, #8]
    uint32_t tmp = readMem(STM32H7_REG_DEVICE_ID);
 8002188:	483d      	ldr	r0, [pc, #244]	@ (8002280 <Target_Connect+0x184>)
 800218a:	f7ff fdfd 	bl	8001d88 <readMem>
    target->TargetDevId = tmp & 0xFFF;
 800218e:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 8002192:	0c00      	lsrs	r0, r0, #16
}
 8002194:	e7e9      	b.n	800216a <Target_Connect+0x6e>
    switch(target->TargetDevId)
 8002196:	f240 4343 	movw	r3, #1091	@ 0x443
 800219a:	4299      	cmp	r1, r3
 800219c:	d007      	beq.n	80021ae <Target_Connect+0xb2>
 800219e:	f240 4353 	movw	r3, #1107	@ 0x453
 80021a2:	4299      	cmp	r1, r3
 80021a4:	d007      	beq.n	80021b6 <Target_Connect+0xba>
            log_message("Unknown STM32C0 Device ID: 0x%03X\n", target->TargetDevId);
 80021a6:	4837      	ldr	r0, [pc, #220]	@ (8002284 <Target_Connect+0x188>)
 80021a8:	f7ff ff5e 	bl	8002068 <log_message>
            break;
 80021ac:	e7d0      	b.n	8002150 <Target_Connect+0x54>
            log_message("STM32C011xx\n");
 80021ae:	4836      	ldr	r0, [pc, #216]	@ (8002288 <Target_Connect+0x18c>)
 80021b0:	f7ff ff5a 	bl	8002068 <log_message>
            break;
 80021b4:	e7cc      	b.n	8002150 <Target_Connect+0x54>
            log_message("STM32C031xx\n");
 80021b6:	4835      	ldr	r0, [pc, #212]	@ (800228c <Target_Connect+0x190>)
 80021b8:	f7ff ff56 	bl	8002068 <log_message>
            break;
 80021bc:	e7c8      	b.n	8002150 <Target_Connect+0x54>
    switch(target->TargetDevId)
 80021be:	f5b1 6f90 	cmp.w	r1, #1152	@ 0x480
 80021c2:	d00a      	beq.n	80021da <Target_Connect+0xde>
 80021c4:	f240 4383 	movw	r3, #1155	@ 0x483
 80021c8:	4299      	cmp	r1, r3
 80021ca:	d01b      	beq.n	8002204 <Target_Connect+0x108>
 80021cc:	f5b1 6f8a 	cmp.w	r1, #1104	@ 0x450
 80021d0:	d022      	beq.n	8002218 <Target_Connect+0x11c>
            log_message("Unknown STM32H7 Device ID: 0x%03X\n", target->TargetDevId);
 80021d2:	482f      	ldr	r0, [pc, #188]	@ (8002290 <Target_Connect+0x194>)
 80021d4:	f7ff ff48 	bl	8002068 <log_message>
            break;
 80021d8:	e7ba      	b.n	8002150 <Target_Connect+0x54>
            log_message("STM32H7A3/7B3/7B0\n");
 80021da:	482e      	ldr	r0, [pc, #184]	@ (8002294 <Target_Connect+0x198>)
 80021dc:	f7ff ff44 	bl	8002068 <log_message>
            uint32_t tmp = readMem(STM32H7_FLASH_SIZE_REG2);
 80021e0:	482d      	ldr	r0, [pc, #180]	@ (8002298 <Target_Connect+0x19c>)
 80021e2:	f7ff fdd1 	bl	8001d88 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 80021e6:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 80021ea:	bf18      	it	ne
 80021ec:	2201      	movne	r2, #1
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <Target_Connect+0x170>)
 80021f0:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 80021f2:	492a      	ldr	r1, [pc, #168]	@ (800229c <Target_Connect+0x1a0>)
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <Target_Connect+0x1a4>)
 80021f6:	2880      	cmp	r0, #128	@ 0x80
 80021f8:	bf18      	it	ne
 80021fa:	4619      	movne	r1, r3
 80021fc:	4829      	ldr	r0, [pc, #164]	@ (80022a4 <Target_Connect+0x1a8>)
 80021fe:	f7ff ff33 	bl	8002068 <log_message>
            break;
 8002202:	e7a5      	b.n	8002150 <Target_Connect+0x54>
            log_message("STM32H72x, STM32H73x\n");
 8002204:	4828      	ldr	r0, [pc, #160]	@ (80022a8 <Target_Connect+0x1ac>)
 8002206:	f7ff ff2f 	bl	8002068 <log_message>
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_DUALBANK;
 800220a:	4b18      	ldr	r3, [pc, #96]	@ (800226c <Target_Connect+0x170>)
 800220c:	2201      	movs	r2, #1
 800220e:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: Dual\n");
 8002210:	4826      	ldr	r0, [pc, #152]	@ (80022ac <Target_Connect+0x1b0>)
 8002212:	f7ff ff29 	bl	8002068 <log_message>
            break;
 8002216:	e79b      	b.n	8002150 <Target_Connect+0x54>
            log_message("STM32H742, STM32H743/753, STM32H750, STM32H745/755, STM32H747/757\n");
 8002218:	4825      	ldr	r0, [pc, #148]	@ (80022b0 <Target_Connect+0x1b4>)
 800221a:	f7ff ff25 	bl	8002068 <log_message>
            tmp = readMem(STM32H7_FLASH_SIZE_REG1);
 800221e:	4825      	ldr	r0, [pc, #148]	@ (80022b4 <Target_Connect+0x1b8>)
 8002220:	f7ff fdb2 	bl	8001d88 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002224:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 8002228:	bf18      	it	ne
 800222a:	2201      	movne	r2, #1
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <Target_Connect+0x170>)
 800222e:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002230:	491a      	ldr	r1, [pc, #104]	@ (800229c <Target_Connect+0x1a0>)
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <Target_Connect+0x1a4>)
 8002234:	2880      	cmp	r0, #128	@ 0x80
 8002236:	bf18      	it	ne
 8002238:	4619      	movne	r1, r3
 800223a:	481a      	ldr	r0, [pc, #104]	@ (80022a4 <Target_Connect+0x1a8>)
 800223c:	f7ff ff14 	bl	8002068 <log_message>
            break;
 8002240:	e786      	b.n	8002150 <Target_Connect+0x54>
    	log_message("SWD Error: %s\n", getErrorString(errorCode));
 8002242:	f7ff fcf1 	bl	8001c28 <getErrorString>
 8002246:	4601      	mov	r1, r0
 8002248:	481b      	ldr	r0, [pc, #108]	@ (80022b8 <Target_Connect+0x1bc>)
 800224a:	f7ff ff0d 	bl	8002068 <log_message>
    	log_message("Failed to connect. Retrying...\n");
 800224e:	481b      	ldr	r0, [pc, #108]	@ (80022bc <Target_Connect+0x1c0>)
 8002250:	f7ff ff0a 	bl	8002068 <log_message>
    	delayMs(200);
 8002254:	20c8      	movs	r0, #200	@ 0xc8
 8002256:	f7ff fcd7 	bl	8001c08 <delayMs>
    	return TARGET_ERROR;
 800225a:	2001      	movs	r0, #1
}
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	0800e890 	.word	0x0800e890
 8002264:	20000000 	.word	0x20000000
 8002268:	20000188 	.word	0x20000188
 800226c:	20000e30 	.word	0x20000e30
 8002270:	0bc11477 	.word	0x0bc11477
 8002274:	0800e8a0 	.word	0x0800e8a0
 8002278:	40015800 	.word	0x40015800
 800227c:	0800e9b8 	.word	0x0800e9b8
 8002280:	5c001000 	.word	0x5c001000
 8002284:	0800e8dc 	.word	0x0800e8dc
 8002288:	0800e8bc 	.word	0x0800e8bc
 800228c:	0800e8cc 	.word	0x0800e8cc
 8002290:	0800e994 	.word	0x0800e994
 8002294:	0800e900 	.word	0x0800e900
 8002298:	08fff80c 	.word	0x08fff80c
 800229c:	0800e888 	.word	0x0800e888
 80022a0:	0800e880 	.word	0x0800e880
 80022a4:	0800e914 	.word	0x0800e914
 80022a8:	0800e924 	.word	0x0800e924
 80022ac:	0800e93c 	.word	0x0800e93c
 80022b0:	0800e950 	.word	0x0800e950
 80022b4:	1ff1e880 	.word	0x1ff1e880
 80022b8:	0800e9d0 	.word	0x0800e9d0
 80022bc:	0800e9e0 	.word	0x0800e9e0

080022c0 <Target_GetFlashStartAddress>:
{
 80022c0:	b508      	push	{r3, lr}
    switch(target.TargetFamily)
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <Target_GetFlashStartAddress+0x24>)
 80022c4:	7a1a      	ldrb	r2, [r3, #8]
 80022c6:	2a0f      	cmp	r2, #15
 80022c8:	d805      	bhi.n	80022d6 <Target_GetFlashStartAddress+0x16>
 80022ca:	f249 0320 	movw	r3, #36896	@ 0x9020
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	f013 0f01 	tst.w	r3, #1
 80022d4:	d102      	bne.n	80022dc <Target_GetFlashStartAddress+0x1c>
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 80022d6:	4804      	ldr	r0, [pc, #16]	@ (80022e8 <Target_GetFlashStartAddress+0x28>)
 80022d8:	f7ff fec6 	bl	8002068 <log_message>
}
 80022dc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80022e0:	bd08      	pop	{r3, pc}
 80022e2:	bf00      	nop
 80022e4:	20000e30 	.word	0x20000e30
 80022e8:	0800ea00 	.word	0x0800ea00

080022ec <Target_Program>:
{
 80022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f0:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    log_message("Target Program\n");
 80022f4:	487a      	ldr	r0, [pc, #488]	@ (80024e0 <Target_Program+0x1f4>)
 80022f6:	f7ff feb7 	bl	8002068 <log_message>
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 80022fa:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80022fe:	4879      	ldr	r0, [pc, #484]	@ (80024e4 <Target_Program+0x1f8>)
 8002300:	f00a fbd0 	bl	800caa4 <f_stat>
    if (res == FR_OK)
 8002304:	2800      	cmp	r0, #0
 8002306:	d037      	beq.n	8002378 <Target_Program+0x8c>
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002308:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 800230c:	4876      	ldr	r0, [pc, #472]	@ (80024e8 <Target_Program+0x1fc>)
 800230e:	f00a fbc9 	bl	800caa4 <f_stat>
        if (res == FR_OK)
 8002312:	2800      	cmp	r0, #0
 8002314:	f040 80dc 	bne.w	80024d0 <Target_Program+0x1e4>
    size_t readcount = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	9301      	str	r3, [sp, #4]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for binary programming
 800231c:	f7ff ffd0 	bl	80022c0 <Target_GetFlashStartAddress>
 8002320:	4605      	mov	r5, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002322:	a942      	add	r1, sp, #264	@ 0x108
 8002324:	4870      	ldr	r0, [pc, #448]	@ (80024e8 <Target_Program+0x1fc>)
 8002326:	f00a fbbd 	bl	800caa4 <f_stat>
    if (res != FR_OK)
 800232a:	2800      	cmp	r0, #0
 800232c:	f040 8082 	bne.w	8002434 <Target_Program+0x148>
    log_message("Firmware File Information\n");
 8002330:	486e      	ldr	r0, [pc, #440]	@ (80024ec <Target_Program+0x200>)
 8002332:	f7ff fe99 	bl	8002068 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 8002336:	f50d 718f 	add.w	r1, sp, #286	@ 0x11e
 800233a:	486d      	ldr	r0, [pc, #436]	@ (80024f0 <Target_Program+0x204>)
 800233c:	f7ff fe94 	bl	8002068 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002340:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8002342:	486c      	ldr	r0, [pc, #432]	@ (80024f4 <Target_Program+0x208>)
 8002344:	f7ff fe90 	bl	8002068 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002348:	2201      	movs	r2, #1
 800234a:	4967      	ldr	r1, [pc, #412]	@ (80024e8 <Target_Program+0x1fc>)
 800234c:	a888      	add	r0, sp, #544	@ 0x220
 800234e:	f00a f939 	bl	800c5c4 <f_open>
    if (res != FR_OK)
 8002352:	2800      	cmp	r0, #0
 8002354:	d173      	bne.n	800243e <Target_Program+0x152>
                if (!Target_ProgramCallback[target.TargetFamily](current_address, &fbuf[i], 16))
 8002356:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 80024fc <Target_Program+0x210>
 800235a:	4f67      	ldr	r7, [pc, #412]	@ (80024f8 <Target_Program+0x20c>)
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 800235c:	ab01      	add	r3, sp, #4
 800235e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002362:	a902      	add	r1, sp, #8
 8002364:	a888      	add	r0, sp, #544	@ 0x220
 8002366:	f00a fa63 	bl	800c830 <f_read>
        if (res != FR_OK)
 800236a:	2800      	cmp	r0, #0
 800236c:	d16c      	bne.n	8002448 <Target_Program+0x15c>
        if (readcount == 0)
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d071      	beq.n	8002458 <Target_Program+0x16c>
            size_t i = 0;
 8002374:	2400      	movs	r4, #0
 8002376:	e093      	b.n	80024a0 <Target_Program+0x1b4>
    size_t readcount = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 800237c:	a942      	add	r1, sp, #264	@ 0x108
 800237e:	4859      	ldr	r0, [pc, #356]	@ (80024e4 <Target_Program+0x1f8>)
 8002380:	f00a fb90 	bl	800caa4 <f_stat>
    if (res != FR_OK)
 8002384:	b9d8      	cbnz	r0, 80023be <Target_Program+0xd2>
    log_message("Firmware File Information\n");
 8002386:	4859      	ldr	r0, [pc, #356]	@ (80024ec <Target_Program+0x200>)
 8002388:	f7ff fe6e 	bl	8002068 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 800238c:	f50d 718f 	add.w	r1, sp, #286	@ 0x11e
 8002390:	4857      	ldr	r0, [pc, #348]	@ (80024f0 <Target_Program+0x204>)
 8002392:	f7ff fe69 	bl	8002068 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002396:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8002398:	4856      	ldr	r0, [pc, #344]	@ (80024f4 <Target_Program+0x208>)
 800239a:	f7ff fe65 	bl	8002068 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 800239e:	2201      	movs	r2, #1
 80023a0:	4950      	ldr	r1, [pc, #320]	@ (80024e4 <Target_Program+0x1f8>)
 80023a2:	a888      	add	r0, sp, #544	@ 0x220
 80023a4:	f00a f90e 	bl	800c5c4 <f_open>
    if (res != FR_OK)
 80023a8:	b970      	cbnz	r0, 80023c8 <Target_Program+0xdc>
    ihex_set_callback_func((ihex_callback_fp)*Target_ProgramCallback[target.TargetFamily]);
 80023aa:	4b53      	ldr	r3, [pc, #332]	@ (80024f8 <Target_Program+0x20c>)
 80023ac:	7a1a      	ldrb	r2, [r3, #8]
 80023ae:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <Target_Program+0x210>)
 80023b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80023b4:	f001 f854 	bl	8003460 <ihex_set_callback_func>
    ihex_reset_state();
 80023b8:	f001 f840 	bl	800343c <ihex_reset_state>
 80023bc:	e020      	b.n	8002400 <Target_Program+0x114>
        log_message("f_stat error\n");
 80023be:	4850      	ldr	r0, [pc, #320]	@ (8002500 <Target_Program+0x214>)
 80023c0:	f7ff fe52 	bl	8002068 <log_message>
        return TARGET_ERROR;
 80023c4:	2001      	movs	r0, #1
 80023c6:	e087      	b.n	80024d8 <Target_Program+0x1ec>
        log_message("f_open error\n");
 80023c8:	484e      	ldr	r0, [pc, #312]	@ (8002504 <Target_Program+0x218>)
 80023ca:	f7ff fe4d 	bl	8002068 <log_message>
        return TARGET_ERROR;
 80023ce:	2001      	movs	r0, #1
 80023d0:	e082      	b.n	80024d8 <Target_Program+0x1ec>
            log_message("f_read error\n");
 80023d2:	484d      	ldr	r0, [pc, #308]	@ (8002508 <Target_Program+0x21c>)
 80023d4:	f7ff fe48 	bl	8002068 <log_message>
            f_close(&file);
 80023d8:	a888      	add	r0, sp, #544	@ 0x220
 80023da:	f00a fb4e 	bl	800ca7a <f_close>
            return TARGET_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e07a      	b.n	80024d8 <Target_Program+0x1ec>
            res = f_close(&file);
 80023e2:	a888      	add	r0, sp, #544	@ 0x220
 80023e4:	f00a fb49 	bl	800ca7a <f_close>
            if (res != FR_OK)
 80023e8:	b908      	cbnz	r0, 80023ee <Target_Program+0x102>
    return TARGET_OK;
 80023ea:	2000      	movs	r0, #0
        return Target_ProgramHex();
 80023ec:	e074      	b.n	80024d8 <Target_Program+0x1ec>
                log_message("f_close error\n");
 80023ee:	4847      	ldr	r0, [pc, #284]	@ (800250c <Target_Program+0x220>)
 80023f0:	f7ff fe3a 	bl	8002068 <log_message>
                return TARGET_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	e06f      	b.n	80024d8 <Target_Program+0x1ec>
            if (!ihex_parser(fbuf, readcount))
 80023f8:	a802      	add	r0, sp, #8
 80023fa:	f001 f837 	bl	800346c <ihex_parser>
 80023fe:	b188      	cbz	r0, 8002424 <Target_Program+0x138>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002400:	ab01      	add	r3, sp, #4
 8002402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002406:	a902      	add	r1, sp, #8
 8002408:	a888      	add	r0, sp, #544	@ 0x220
 800240a:	f00a fa11 	bl	800c830 <f_read>
        if (res != FR_OK)
 800240e:	2800      	cmp	r0, #0
 8002410:	d1df      	bne.n	80023d2 <Target_Program+0xe6>
        if (readcount == 0)
 8002412:	9901      	ldr	r1, [sp, #4]
 8002414:	2900      	cmp	r1, #0
 8002416:	d0e4      	beq.n	80023e2 <Target_Program+0xf6>
            if (readcount < sizeof(fbuf))
 8002418:	29ff      	cmp	r1, #255	@ 0xff
 800241a:	d8ed      	bhi.n	80023f8 <Target_Program+0x10c>
                fbuf[readcount] = '\0';
 800241c:	2300      	movs	r3, #0
 800241e:	aa02      	add	r2, sp, #8
 8002420:	5453      	strb	r3, [r2, r1]
 8002422:	e7e9      	b.n	80023f8 <Target_Program+0x10c>
                log_message("ihex_parser error\n");
 8002424:	483a      	ldr	r0, [pc, #232]	@ (8002510 <Target_Program+0x224>)
 8002426:	f7ff fe1f 	bl	8002068 <log_message>
                f_close(&file);
 800242a:	a888      	add	r0, sp, #544	@ 0x220
 800242c:	f00a fb25 	bl	800ca7a <f_close>
                return TARGET_ERROR;
 8002430:	2001      	movs	r0, #1
 8002432:	e051      	b.n	80024d8 <Target_Program+0x1ec>
        log_message("f_stat error\n");
 8002434:	4832      	ldr	r0, [pc, #200]	@ (8002500 <Target_Program+0x214>)
 8002436:	f7ff fe17 	bl	8002068 <log_message>
        return TARGET_ERROR;
 800243a:	2001      	movs	r0, #1
 800243c:	e04c      	b.n	80024d8 <Target_Program+0x1ec>
        log_message("f_open error\n");
 800243e:	4831      	ldr	r0, [pc, #196]	@ (8002504 <Target_Program+0x218>)
 8002440:	f7ff fe12 	bl	8002068 <log_message>
        return TARGET_ERROR;
 8002444:	2001      	movs	r0, #1
 8002446:	e047      	b.n	80024d8 <Target_Program+0x1ec>
            log_message("f_read error\n");
 8002448:	482f      	ldr	r0, [pc, #188]	@ (8002508 <Target_Program+0x21c>)
 800244a:	f7ff fe0d 	bl	8002068 <log_message>
            f_close(&file);
 800244e:	a888      	add	r0, sp, #544	@ 0x220
 8002450:	f00a fb13 	bl	800ca7a <f_close>
            return TARGET_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e03f      	b.n	80024d8 <Target_Program+0x1ec>
            if(target.TargetFamily == TARGET_STM32H7) // STM32H7 Dummy Callback
 8002458:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <Target_Program+0x20c>)
 800245a:	7a1b      	ldrb	r3, [r3, #8]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	d005      	beq.n	800246c <Target_Program+0x180>
            res = f_close(&file);
 8002460:	a888      	add	r0, sp, #544	@ 0x220
 8002462:	f00a fb0a 	bl	800ca7a <f_close>
            if (res != FR_OK)
 8002466:	b938      	cbnz	r0, 8002478 <Target_Program+0x18c>
    return TARGET_OK;
 8002468:	2000      	movs	r0, #0
            return Target_ProgramBin();
 800246a:	e035      	b.n	80024d8 <Target_Program+0x1ec>
                Target_ProgramCallback[target.TargetFamily](0, 0, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	4611      	mov	r1, r2
 8002470:	4610      	mov	r0, r2
 8002472:	f7ff fd45 	bl	8001f00 <Target_ProgramCallback_STM32H7>
 8002476:	e7f3      	b.n	8002460 <Target_Program+0x174>
                log_message("f_close error\n");
 8002478:	4824      	ldr	r0, [pc, #144]	@ (800250c <Target_Program+0x220>)
 800247a:	f7ff fdf5 	bl	8002068 <log_message>
                return TARGET_ERROR;
 800247e:	2001      	movs	r0, #1
 8002480:	e02a      	b.n	80024d8 <Target_Program+0x1ec>
                if (!Target_ProgramCallback[target.TargetFamily](current_address, &fbuf[i], 16))
 8002482:	7a3b      	ldrb	r3, [r7, #8]
 8002484:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002488:	2210      	movs	r2, #16
 800248a:	a902      	add	r1, sp, #8
 800248c:	4421      	add	r1, r4
 800248e:	4628      	mov	r0, r5
 8002490:	4798      	blx	r3
 8002492:	b1a8      	cbz	r0, 80024c0 <Target_Program+0x1d4>
                current_address += 16;
 8002494:	3510      	adds	r5, #16
                i += chunk_size;
 8002496:	4434      	add	r4, r6
            while (i < readcount)
 8002498:	9b01      	ldr	r3, [sp, #4]
 800249a:	42a3      	cmp	r3, r4
 800249c:	f67f af5e 	bls.w	800235c <Target_Program+0x70>
                size_t chunk_size = (readcount - i) >= 16 ? 16 : (readcount - i);
 80024a0:	1b1b      	subs	r3, r3, r4
 80024a2:	461e      	mov	r6, r3
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	bf28      	it	cs
 80024a8:	2610      	movcs	r6, #16
                if (chunk_size < 16)
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d8e9      	bhi.n	8002482 <Target_Program+0x196>
                    memset(&fbuf[i + chunk_size], 0xFF, 16 - chunk_size);
 80024ae:	19a0      	adds	r0, r4, r6
 80024b0:	f1c6 0210 	rsb	r2, r6, #16
 80024b4:	21ff      	movs	r1, #255	@ 0xff
 80024b6:	ab02      	add	r3, sp, #8
 80024b8:	4418      	add	r0, r3
 80024ba:	f00b f8c9 	bl	800d650 <memset>
 80024be:	e7e0      	b.n	8002482 <Target_Program+0x196>
                    log_message("Flash write error\n");
 80024c0:	4814      	ldr	r0, [pc, #80]	@ (8002514 <Target_Program+0x228>)
 80024c2:	f7ff fdd1 	bl	8002068 <log_message>
                    f_close(&file);
 80024c6:	a888      	add	r0, sp, #544	@ 0x220
 80024c8:	f00a fad7 	bl	800ca7a <f_close>
                    return TARGET_ERROR;
 80024cc:	2001      	movs	r0, #1
 80024ce:	e003      	b.n	80024d8 <Target_Program+0x1ec>
            log_message("No firmware file found\n");
 80024d0:	4811      	ldr	r0, [pc, #68]	@ (8002518 <Target_Program+0x22c>)
 80024d2:	f7ff fdc9 	bl	8002068 <log_message>
            return TARGET_ERROR;
 80024d6:	2001      	movs	r0, #1
}
 80024d8:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 80024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024e0:	0800ea40 	.word	0x0800ea40
 80024e4:	0800ea50 	.word	0x0800ea50
 80024e8:	0800eb00 	.word	0x0800eb00
 80024ec:	0800ea70 	.word	0x0800ea70
 80024f0:	0800ea8c 	.word	0x0800ea8c
 80024f4:	0800eaa0 	.word	0x0800eaa0
 80024f8:	20000e30 	.word	0x20000e30
 80024fc:	0800f028 	.word	0x0800f028
 8002500:	0800ea60 	.word	0x0800ea60
 8002504:	0800eabc 	.word	0x0800eabc
 8002508:	0800eacc 	.word	0x0800eacc
 800250c:	0800eadc 	.word	0x0800eadc
 8002510:	0800eaec 	.word	0x0800eaec
 8002514:	0800eb10 	.word	0x0800eb10
 8002518:	0800eb24 	.word	0x0800eb24

0800251c <Target_VerifyCallback>:
  uint8_t tmp[32];
  uint32_t u32_ReadData[8];

  /* Read required words from target flash memory */
  int num_words = (bufsize + 3) / 4;  // Calculate the number of words needed to cover bufsize bytes
  for(int i = 0; i < num_words; i++)
 800251c:	2a00      	cmp	r2, #0
 800251e:	d04a      	beq.n	80025b6 <Target_VerifyCallback+0x9a>
{
 8002520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002524:	b091      	sub	sp, #68	@ 0x44
 8002526:	4606      	mov	r6, r0
 8002528:	460c      	mov	r4, r1
 800252a:	4615      	mov	r5, r2
 800252c:	1cd7      	adds	r7, r2, #3
 800252e:	10bf      	asrs	r7, r7, #2
 8002530:	f1ad 0804 	sub.w	r8, sp, #4
  for(int i = 0; i < num_words; i++)
 8002534:	46c2      	mov	sl, r8
 8002536:	f04f 0900 	mov.w	r9, #0
  {
      u32_ReadData[i] = readMem(addr + (i * 4));
 800253a:	ab10      	add	r3, sp, #64	@ 0x40
 800253c:	f1c3 0b44 	rsb	fp, r3, #68	@ 0x44
 8002540:	4483      	add	fp, r0
 8002542:	eb0b 000a 	add.w	r0, fp, sl
 8002546:	f7ff fc1f 	bl	8001d88 <readMem>
 800254a:	f84a 0f04 	str.w	r0, [sl, #4]!
  for(int i = 0; i < num_words; i++)
 800254e:	f109 0901 	add.w	r9, r9, #1
 8002552:	454f      	cmp	r7, r9
 8002554:	dcf5      	bgt.n	8002542 <Target_VerifyCallback+0x26>
  }

  /* Convert uint32_t to uint8_t */
  for (int i = 0; i < num_words; i++) {
 8002556:	a808      	add	r0, sp, #32
  for(int i = 0; i < num_words; i++)
 8002558:	4684      	mov	ip, r0
  for (int i = 0; i < num_words; i++) {
 800255a:	2200      	movs	r2, #0
      tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 800255c:	f858 3f04 	ldr.w	r3, [r8, #4]!
 8002560:	f88c 3000 	strb.w	r3, [ip]
      tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8002564:	0a19      	lsrs	r1, r3, #8
 8002566:	f88c 1001 	strb.w	r1, [ip, #1]
      tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 800256a:	0c19      	lsrs	r1, r3, #16
 800256c:	f88c 1002 	strb.w	r1, [ip, #2]
      tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 8002570:	0e1b      	lsrs	r3, r3, #24
 8002572:	f88c 3003 	strb.w	r3, [ip, #3]
  for (int i = 0; i < num_words; i++) {
 8002576:	3201      	adds	r2, #1
 8002578:	f10c 0c04 	add.w	ip, ip, #4
 800257c:	4297      	cmp	r7, r2
 800257e:	dced      	bgt.n	800255c <Target_VerifyCallback+0x40>
  }

  /* Compare Hex & Flash Data */
  for(int i = 0; i < bufsize; i++)
 8002580:	4621      	mov	r1, r4
 8002582:	2300      	movs	r3, #0
  {
#if 0 //debug message
      log_message("Address: 0x%08"PRIX32"\n", (addr + i));
      log_message("Flash: 0x%02"PRIX16", BIN File: 0x%02"PRIX16"\n", tmp[i], buf[i]);
#endif
      if(buf[i] != tmp[i])
 8002584:	460f      	mov	r7, r1
 8002586:	3101      	adds	r1, #1
 8002588:	f810 4b01 	ldrb.w	r4, [r0], #1
 800258c:	783a      	ldrb	r2, [r7, #0]
 800258e:	42a2      	cmp	r2, r4
 8002590:	d104      	bne.n	800259c <Target_VerifyCallback+0x80>
  for(int i = 0; i < bufsize; i++)
 8002592:	3301      	adds	r3, #1
 8002594:	429d      	cmp	r5, r3
 8002596:	d1f5      	bne.n	8002584 <Target_VerifyCallback+0x68>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
          return false;
      }
  }
  return true;
 8002598:	2001      	movs	r0, #1
 800259a:	e009      	b.n	80025b0 <Target_VerifyCallback+0x94>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 800259c:	1999      	adds	r1, r3, r6
 800259e:	4807      	ldr	r0, [pc, #28]	@ (80025bc <Target_VerifyCallback+0xa0>)
 80025a0:	f7ff fd62 	bl	8002068 <log_message>
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 80025a4:	783a      	ldrb	r2, [r7, #0]
 80025a6:	4621      	mov	r1, r4
 80025a8:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <Target_VerifyCallback+0xa4>)
 80025aa:	f7ff fd5d 	bl	8002068 <log_message>
          return false;
 80025ae:	2000      	movs	r0, #0
}
 80025b0:	b011      	add	sp, #68	@ 0x44
 80025b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
 80025b6:	2001      	movs	r0, #1
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	0800eb3c 	.word	0x0800eb3c
 80025c0:	0800eb64 	.word	0x0800eb64

080025c4 <Target_Verify>:
    return TARGET_OK;
}

/* Main function to verify the target */
static bool Target_Verify(void)
{
 80025c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c8:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target Verify\n");
 80025cc:	486e      	ldr	r0, [pc, #440]	@ (8002788 <Target_Verify+0x1c4>)
 80025ce:	f7ff fd4b 	bl	8002068 <log_message>

    /* Check if HEX file exists */
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 80025d2:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80025d6:	486d      	ldr	r0, [pc, #436]	@ (800278c <Target_Verify+0x1c8>)
 80025d8:	f00a fa64 	bl	800caa4 <f_stat>
    if(res == FR_OK)
 80025dc:	b348      	cbz	r0, 8002632 <Target_Verify+0x6e>
        return Target_VerifyHex();
    }
    else
    {
        /* HEX file does not exist, check for BIN file */
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80025de:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80025e2:	486b      	ldr	r0, [pc, #428]	@ (8002790 <Target_Verify+0x1cc>)
 80025e4:	f00a fa5e 	bl	800caa4 <f_stat>
        if(res == FR_OK)
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f040 80c4 	bne.w	8002776 <Target_Verify+0x1b2>
    size_t readcount = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for verification
 80025f2:	f7ff fe65 	bl	80022c0 <Target_GetFlashStartAddress>
 80025f6:	4607      	mov	r7, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80025f8:	a942      	add	r1, sp, #264	@ 0x108
 80025fa:	4865      	ldr	r0, [pc, #404]	@ (8002790 <Target_Verify+0x1cc>)
 80025fc:	f00a fa52 	bl	800caa4 <f_stat>
    if(res != FR_OK)
 8002600:	2800      	cmp	r0, #0
 8002602:	d164      	bne.n	80026ce <Target_Verify+0x10a>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002604:	2201      	movs	r2, #1
 8002606:	4962      	ldr	r1, [pc, #392]	@ (8002790 <Target_Verify+0x1cc>)
 8002608:	a888      	add	r0, sp, #544	@ 0x220
 800260a:	f009 ffdb 	bl	800c5c4 <f_open>
    if(res != FR_OK)
 800260e:	2800      	cmp	r0, #0
 8002610:	d162      	bne.n	80026d8 <Target_Verify+0x114>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002612:	466b      	mov	r3, sp
 8002614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002618:	a902      	add	r1, sp, #8
 800261a:	a888      	add	r0, sp, #544	@ 0x220
 800261c:	f00a f908 	bl	800c830 <f_read>
        if(res != FR_OK)
 8002620:	2800      	cmp	r0, #0
 8002622:	d15e      	bne.n	80026e2 <Target_Verify+0x11e>
        if(readcount == 0)
 8002624:	9e00      	ldr	r6, [sp, #0]
 8002626:	2e00      	cmp	r6, #0
 8002628:	d063      	beq.n	80026f2 <Target_Verify+0x12e>
            size_t i = 0;
 800262a:	2400      	movs	r4, #0
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 800262c:	f04f 38ff 	mov.w	r8, #4294967295
 8002630:	e07e      	b.n	8002730 <Target_Verify+0x16c>
    size_t readcount = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002636:	a942      	add	r1, sp, #264	@ 0x108
 8002638:	4854      	ldr	r0, [pc, #336]	@ (800278c <Target_Verify+0x1c8>)
 800263a:	f00a fa33 	bl	800caa4 <f_stat>
    if(res != FR_OK)
 800263e:	b958      	cbnz	r0, 8002658 <Target_Verify+0x94>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8002640:	2201      	movs	r2, #1
 8002642:	4952      	ldr	r1, [pc, #328]	@ (800278c <Target_Verify+0x1c8>)
 8002644:	a888      	add	r0, sp, #544	@ 0x220
 8002646:	f009 ffbd 	bl	800c5c4 <f_open>
    if(res != FR_OK)
 800264a:	b950      	cbnz	r0, 8002662 <Target_Verify+0x9e>
    ihex_set_callback_func((ihex_callback_fp)*Target_VerifyCallback);
 800264c:	4851      	ldr	r0, [pc, #324]	@ (8002794 <Target_Verify+0x1d0>)
 800264e:	f000 ff07 	bl	8003460 <ihex_set_callback_func>
    ihex_reset_state();
 8002652:	f000 fef3 	bl	800343c <ihex_reset_state>
 8002656:	e020      	b.n	800269a <Target_Verify+0xd6>
        log_message("f_stat error\n");
 8002658:	484f      	ldr	r0, [pc, #316]	@ (8002798 <Target_Verify+0x1d4>)
 800265a:	f7ff fd05 	bl	8002068 <log_message>
        return TARGET_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e08d      	b.n	800277e <Target_Verify+0x1ba>
        log_message("f_open error\n");
 8002662:	484e      	ldr	r0, [pc, #312]	@ (800279c <Target_Verify+0x1d8>)
 8002664:	f7ff fd00 	bl	8002068 <log_message>
        return TARGET_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e088      	b.n	800277e <Target_Verify+0x1ba>
            log_message("f_read error\n");
 800266c:	484c      	ldr	r0, [pc, #304]	@ (80027a0 <Target_Verify+0x1dc>)
 800266e:	f7ff fcfb 	bl	8002068 <log_message>
            f_close(&file);
 8002672:	a888      	add	r0, sp, #544	@ 0x220
 8002674:	f00a fa01 	bl	800ca7a <f_close>
            return TARGET_ERROR;
 8002678:	2001      	movs	r0, #1
 800267a:	e080      	b.n	800277e <Target_Verify+0x1ba>
            res = f_close(&file);
 800267c:	a888      	add	r0, sp, #544	@ 0x220
 800267e:	f00a f9fc 	bl	800ca7a <f_close>
            if(res != FR_OK)
 8002682:	b908      	cbnz	r0, 8002688 <Target_Verify+0xc4>
    return TARGET_OK;
 8002684:	2000      	movs	r0, #0
        return Target_VerifyHex();
 8002686:	e07a      	b.n	800277e <Target_Verify+0x1ba>
                log_message("f_close error\n");
 8002688:	4846      	ldr	r0, [pc, #280]	@ (80027a4 <Target_Verify+0x1e0>)
 800268a:	f7ff fced 	bl	8002068 <log_message>
                return TARGET_ERROR;
 800268e:	2001      	movs	r0, #1
 8002690:	e075      	b.n	800277e <Target_Verify+0x1ba>
            if (!ihex_parser(fbuf, readcount))
 8002692:	a802      	add	r0, sp, #8
 8002694:	f000 feea 	bl	800346c <ihex_parser>
 8002698:	b188      	cbz	r0, 80026be <Target_Verify+0xfa>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 800269a:	ab01      	add	r3, sp, #4
 800269c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026a0:	a902      	add	r1, sp, #8
 80026a2:	a888      	add	r0, sp, #544	@ 0x220
 80026a4:	f00a f8c4 	bl	800c830 <f_read>
        if(res != FR_OK)
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d1df      	bne.n	800266c <Target_Verify+0xa8>
        if(readcount == 0)
 80026ac:	9901      	ldr	r1, [sp, #4]
 80026ae:	2900      	cmp	r1, #0
 80026b0:	d0e4      	beq.n	800267c <Target_Verify+0xb8>
            if(readcount < sizeof(fbuf))
 80026b2:	29ff      	cmp	r1, #255	@ 0xff
 80026b4:	d8ed      	bhi.n	8002692 <Target_Verify+0xce>
                fbuf[readcount] = '\0';
 80026b6:	2300      	movs	r3, #0
 80026b8:	aa02      	add	r2, sp, #8
 80026ba:	5453      	strb	r3, [r2, r1]
 80026bc:	e7e9      	b.n	8002692 <Target_Verify+0xce>
                log_message("ihex_parser error\n");
 80026be:	483a      	ldr	r0, [pc, #232]	@ (80027a8 <Target_Verify+0x1e4>)
 80026c0:	f7ff fcd2 	bl	8002068 <log_message>
                f_close(&file);
 80026c4:	a888      	add	r0, sp, #544	@ 0x220
 80026c6:	f00a f9d8 	bl	800ca7a <f_close>
                return TARGET_ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e057      	b.n	800277e <Target_Verify+0x1ba>
        log_message("f_stat error\n");
 80026ce:	4832      	ldr	r0, [pc, #200]	@ (8002798 <Target_Verify+0x1d4>)
 80026d0:	f7ff fcca 	bl	8002068 <log_message>
        return TARGET_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e052      	b.n	800277e <Target_Verify+0x1ba>
        log_message("f_open error\n");
 80026d8:	4830      	ldr	r0, [pc, #192]	@ (800279c <Target_Verify+0x1d8>)
 80026da:	f7ff fcc5 	bl	8002068 <log_message>
        return TARGET_ERROR;
 80026de:	2001      	movs	r0, #1
 80026e0:	e04d      	b.n	800277e <Target_Verify+0x1ba>
            log_message("f_read error\n");
 80026e2:	482f      	ldr	r0, [pc, #188]	@ (80027a0 <Target_Verify+0x1dc>)
 80026e4:	f7ff fcc0 	bl	8002068 <log_message>
            f_close(&file);
 80026e8:	a888      	add	r0, sp, #544	@ 0x220
 80026ea:	f00a f9c6 	bl	800ca7a <f_close>
            return TARGET_ERROR;
 80026ee:	2001      	movs	r0, #1
 80026f0:	e045      	b.n	800277e <Target_Verify+0x1ba>
            res = f_close(&file);
 80026f2:	a888      	add	r0, sp, #544	@ 0x220
 80026f4:	f00a f9c1 	bl	800ca7a <f_close>
            if(res != FR_OK)
 80026f8:	b908      	cbnz	r0, 80026fe <Target_Verify+0x13a>
    return TARGET_OK;
 80026fa:	2000      	movs	r0, #0
        {
            /* BIN file exists */
            return Target_VerifyBin();
 80026fc:	e03f      	b.n	800277e <Target_Verify+0x1ba>
                log_message("f_close error\n");
 80026fe:	4829      	ldr	r0, [pc, #164]	@ (80027a4 <Target_Verify+0x1e0>)
 8002700:	f7ff fcb2 	bl	8002068 <log_message>
                return TARGET_ERROR;
 8002704:	2001      	movs	r0, #1
 8002706:	e03a      	b.n	800277e <Target_Verify+0x1ba>
                        log_message("Verification failed\n");
 8002708:	4828      	ldr	r0, [pc, #160]	@ (80027ac <Target_Verify+0x1e8>)
 800270a:	f7ff fcad 	bl	8002068 <log_message>
                        f_close(&file);
 800270e:	a888      	add	r0, sp, #544	@ 0x220
 8002710:	f00a f9b3 	bl	800ca7a <f_close>
                        return TARGET_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e032      	b.n	800277e <Target_Verify+0x1ba>
                    if(!Target_VerifyCallback(address + i, &fbuf[i], (uint8_t)adjusted_chunk_size))
 8002718:	f005 02fc 	and.w	r2, r5, #252	@ 0xfc
 800271c:	ab02      	add	r3, sp, #8
 800271e:	1919      	adds	r1, r3, r4
 8002720:	19e0      	adds	r0, r4, r7
 8002722:	f7ff fefb 	bl	800251c <Target_VerifyCallback>
 8002726:	b1e0      	cbz	r0, 8002762 <Target_Verify+0x19e>
                    i += adjusted_chunk_size;
 8002728:	442c      	add	r4, r5
            while (i < readcount)
 800272a:	9e00      	ldr	r6, [sp, #0]
 800272c:	42a6      	cmp	r6, r4
 800272e:	d920      	bls.n	8002772 <Target_Verify+0x1ae>
                size_t chunk_size = readcount - i;
 8002730:	1b32      	subs	r2, r6, r4
                if(chunk_size > 16)
 8002732:	4613      	mov	r3, r2
 8002734:	2a10      	cmp	r2, #16
 8002736:	bf28      	it	cs
 8002738:	2310      	movcs	r3, #16
                if(adjusted_chunk_size == 0)
 800273a:	f033 0503 	bics.w	r5, r3, #3
 800273e:	d1eb      	bne.n	8002718 <Target_Verify+0x154>
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8002740:	f8cd 8004 	str.w	r8, [sp, #4]
                    memcpy(tmp, &fbuf[i], remaining);
 8002744:	ab02      	add	r3, sp, #8
 8002746:	1919      	adds	r1, r3, r4
 8002748:	a801      	add	r0, sp, #4
 800274a:	f00a fffc 	bl	800d746 <memcpy>
                    if(!Target_VerifyCallback(address + i, tmp, 4))
 800274e:	2204      	movs	r2, #4
 8002750:	eb0d 0102 	add.w	r1, sp, r2
 8002754:	19e0      	adds	r0, r4, r7
 8002756:	f7ff fee1 	bl	800251c <Target_VerifyCallback>
 800275a:	2800      	cmp	r0, #0
 800275c:	d0d4      	beq.n	8002708 <Target_Verify+0x144>
                    i += remaining;
 800275e:	4634      	mov	r4, r6
 8002760:	e7e3      	b.n	800272a <Target_Verify+0x166>
                        log_message("Verification failed\n");
 8002762:	4812      	ldr	r0, [pc, #72]	@ (80027ac <Target_Verify+0x1e8>)
 8002764:	f7ff fc80 	bl	8002068 <log_message>
                        f_close(&file);
 8002768:	a888      	add	r0, sp, #544	@ 0x220
 800276a:	f00a f986 	bl	800ca7a <f_close>
                        return TARGET_ERROR;
 800276e:	2001      	movs	r0, #1
 8002770:	e005      	b.n	800277e <Target_Verify+0x1ba>
            address += readcount;
 8002772:	4437      	add	r7, r6
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002774:	e74d      	b.n	8002612 <Target_Verify+0x4e>
        }
        else
        {
            /* Neither HEX nor BIN file exists */
            log_message("No firmware file found\n");
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <Target_Verify+0x1ec>)
 8002778:	f7ff fc76 	bl	8002068 <log_message>
            return TARGET_ERROR;
 800277c:	2001      	movs	r0, #1
        }
    }
}
 800277e:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 8002782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002786:	bf00      	nop
 8002788:	0800eb90 	.word	0x0800eb90
 800278c:	0800ea50 	.word	0x0800ea50
 8002790:	0800eb00 	.word	0x0800eb00
 8002794:	0800251d 	.word	0x0800251d
 8002798:	0800ea60 	.word	0x0800ea60
 800279c:	0800eabc 	.word	0x0800eabc
 80027a0:	0800eacc 	.word	0x0800eacc
 80027a4:	0800eadc 	.word	0x0800eadc
 80027a8:	0800eaec 	.word	0x0800eaec
 80027ac:	0800eba0 	.word	0x0800eba0
 80027b0:	0800eb24 	.word	0x0800eb24

080027b4 <Target_Protection_Lock>:
}


/* Main function to lock protection */
static bool Target_Protection_Lock(void)
{
 80027b4:	b500      	push	{lr}
 80027b6:	b0c7      	sub	sp, #284	@ 0x11c
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target protection configure.\n");
 80027b8:	482c      	ldr	r0, [pc, #176]	@ (800286c <Target_Protection_Lock+0xb8>)
 80027ba:	f7ff fc55 	bl	8002068 <log_message>

    /* Check if the protection option file exists */
    res = f_stat(FIRMWARE_PROTECT_OPTION_FILE, &fileInfo);
 80027be:	4669      	mov	r1, sp
 80027c0:	482b      	ldr	r0, [pc, #172]	@ (8002870 <Target_Protection_Lock+0xbc>)
 80027c2:	f00a f96f 	bl	800caa4 <f_stat>
    if (res == FR_OK)
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d148      	bne.n	800285c <Target_Protection_Lock+0xa8>
    {
        log_message("Protection option available.\n");
 80027ca:	482a      	ldr	r0, [pc, #168]	@ (8002874 <Target_Protection_Lock+0xc0>)
 80027cc:	f7ff fc4c 	bl	8002068 <log_message>

        /* Proceed with protection lock only if the file exists */
        switch(target.TargetFamily)
 80027d0:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <Target_Protection_Lock+0xc4>)
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d005      	beq.n	80027e4 <Target_Protection_Lock+0x30>
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d01d      	beq.n	8002818 <Target_Protection_Lock+0x64>
                return Target_Protection_Lock_STM32C0();
                break;
            case TARGET_STM32H7:
            		return Target_Protection_Lock_STM32H7();
            default:
                log_message("Target family not supported for protection lock.\n");
 80027dc:	4827      	ldr	r0, [pc, #156]	@ (800287c <Target_Protection_Lock+0xc8>)
 80027de:	f7ff fc43 	bl	8002068 <log_message>
                break;
 80027e2:	e03e      	b.n	8002862 <Target_Protection_Lock+0xae>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 80027e4:	4826      	ldr	r0, [pc, #152]	@ (8002880 <Target_Protection_Lock+0xcc>)
 80027e6:	f7ff fc3f 	bl	8002068 <log_message>
    Stm32c0_Flash_Unlock();
 80027ea:	f000 f9f5 	bl	8002bd8 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_OB_Unlock();
 80027ee:	f000 fabd 	bl	8002d6c <Stm32c0_Flash_OB_Unlock>
    Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_1);
 80027f2:	20bb      	movs	r0, #187	@ 0xbb
 80027f4:	f000 fb08 	bl	8002e08 <Stm32c0_Flash_OB_Program>
    Stm32c0_Flash_OB_Launch();
 80027f8:	f000 faf8 	bl	8002dec <Stm32c0_Flash_OB_Launch>
    Target_Connect();
 80027fc:	f7ff fc7e 	bl	80020fc <Target_Connect>
    Stm32c0_Flash_OB_Lock();
 8002800:	f000 faa0 	bl	8002d44 <Stm32c0_Flash_OB_Lock>
    Stm32c0_Flash_Lock();
 8002804:	f000 fa06 	bl	8002c14 <Stm32c0_Flash_Lock>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 8002808:	481e      	ldr	r0, [pc, #120]	@ (8002884 <Target_Protection_Lock+0xd0>)
 800280a:	f7ff fabd 	bl	8001d88 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 800280e:	b2c1      	uxtb	r1, r0
 8002810:	481d      	ldr	r0, [pc, #116]	@ (8002888 <Target_Protection_Lock+0xd4>)
 8002812:	f7ff fc29 	bl	8002068 <log_message>
                return Target_Protection_Lock_STM32C0();
 8002816:	e024      	b.n	8002862 <Target_Protection_Lock+0xae>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 8002818:	4819      	ldr	r0, [pc, #100]	@ (8002880 <Target_Protection_Lock+0xcc>)
 800281a:	f7ff fc25 	bl	8002068 <log_message>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fbe4 	bl	8002fec <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002824:	2002      	movs	r0, #2
 8002826:	f000 fbe1 	bl	8002fec <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_OB_Unlock();
 800282a:	f000 fc9b 	bl	8003164 <Stm32h7_Flash_OB_Unlock>
    Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_1);
 800282e:	f44f 403b 	mov.w	r0, #47872	@ 0xbb00
 8002832:	f000 fd03 	bl	800323c <Stm32h7_Flash_OB_Program>
    Stm32h7_Flash_OB_Launch();
 8002836:	f000 fcc9 	bl	80031cc <Stm32h7_Flash_OB_Launch>
    Stm32h7_Flash_OB_Lock();
 800283a:	f000 fcb3 	bl	80031a4 <Stm32h7_Flash_OB_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 800283e:	2002      	movs	r0, #2
 8002840:	f000 fc18 	bl	8003074 <Stm32h7_Flash_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002844:	2001      	movs	r0, #1
 8002846:	f000 fc15 	bl	8003074 <Stm32h7_Flash_Lock>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 800284a:	4810      	ldr	r0, [pc, #64]	@ (800288c <Target_Protection_Lock+0xd8>)
 800284c:	f7ff fa9c 	bl	8001d88 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8002850:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 8002854:	480c      	ldr	r0, [pc, #48]	@ (8002888 <Target_Protection_Lock+0xd4>)
 8002856:	f7ff fc07 	bl	8002068 <log_message>
            		return Target_Protection_Lock_STM32H7();
 800285a:	e002      	b.n	8002862 <Target_Protection_Lock+0xae>
        }
    }
    else
    {
        log_message("Protection option file not found. Skipping protection lock.\n");
 800285c:	480c      	ldr	r0, [pc, #48]	@ (8002890 <Target_Protection_Lock+0xdc>)
 800285e:	f7ff fc03 	bl	8002068 <log_message>
    }

    return TARGET_OK;
}
 8002862:	2000      	movs	r0, #0
 8002864:	b047      	add	sp, #284	@ 0x11c
 8002866:	f85d fb04 	ldr.w	pc, [sp], #4
 800286a:	bf00      	nop
 800286c:	0800ebb8 	.word	0x0800ebb8
 8002870:	0800ebd8 	.word	0x0800ebd8
 8002874:	0800ebe4 	.word	0x0800ebe4
 8002878:	20000e30 	.word	0x20000e30
 800287c:	0800ec6c 	.word	0x0800ec6c
 8002880:	0800ec04 	.word	0x0800ec04
 8002884:	1fff7800 	.word	0x1fff7800
 8002888:	0800ec54 	.word	0x0800ec54
 800288c:	5200201c 	.word	0x5200201c
 8002890:	0800eca0 	.word	0x0800eca0

08002894 <Target_ErrorHandle>:

static void Target_ErrorHandle(bool status, const char *errorMessage)
{
    if (status != TARGET_OK)
 8002894:	b900      	cbnz	r0, 8002898 <Target_ErrorHandle+0x4>
 8002896:	4770      	bx	lr
{
 8002898:	b508      	push	{r3, lr}
    {
        log_message("%s\n", errorMessage);
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <Target_ErrorHandle+0x1c>)
 800289c:	f7ff fbe4 	bl	8002068 <log_message>
        LED_SetState(TARGET_LED_STAT_FAILED);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f001 f84b 	bl	800393c <LED_SetState>
        Buzzer_SetState(BUZZER_PROG_FAILED);
 80028a6:	2003      	movs	r0, #3
 80028a8:	f000 fd86 	bl	80033b8 <Buzzer_SetState>
    }
}
 80028ac:	bd08      	pop	{r3, pc}
 80028ae:	bf00      	nop
 80028b0:	0800e920 	.word	0x0800e920

080028b4 <Target_MainLoop>:
          break;
  }
}

void Target_MainLoop(void)
{
 80028b4:	b538      	push	{r3, r4, r5, lr}

	int u32_StartTime = 0;
	int u32_ElasedTime = 0;

	/* Check button pushed */
	Button_Update();
 80028b6:	f000 fd23 	bl	8003300 <Button_Update>

	/* Check File Transfer status */
	FileTransferCheck();
 80028ba:	f000 fd13 	bl	80032e4 <FileTransferCheck>

	/* Button programming start */
	if(Button_WasPressed() == 1)
 80028be:	f000 fd55 	bl	800336c <Button_WasPressed>
 80028c2:	2801      	cmp	r0, #1
 80028c4:	d000      	beq.n	80028c8 <Target_MainLoop+0x14>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
    LED_SetState(TARGET_LED_STAT_COMPLETE);
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
  }
}
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
  	LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 80028c8:	f001 f838 	bl	800393c <LED_SetState>
  	Buzzer_SetState(BUZZER_PROG_START);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f000 fd73 	bl	80033b8 <Buzzer_SetState>
  	u32_StartTime = HAL_GetTick();
 80028d2:	f001 fd95 	bl	8004400 <HAL_GetTick>
 80028d6:	4605      	mov	r5, r0
  	status = Target_Connect();
 80028d8:	f7ff fc10 	bl	80020fc <Target_Connect>
 80028dc:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Connect Error");
 80028de:	49a3      	ldr	r1, [pc, #652]	@ (8002b6c <Target_MainLoop+0x2b8>)
 80028e0:	f7ff ffd8 	bl	8002894 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 80028e4:	2c00      	cmp	r4, #0
 80028e6:	d1ee      	bne.n	80028c6 <Target_MainLoop+0x12>
    log_message("Target protection check before flash programming.\n");
 80028e8:	48a1      	ldr	r0, [pc, #644]	@ (8002b70 <Target_MainLoop+0x2bc>)
 80028ea:	f7ff fbbd 	bl	8002068 <log_message>
    switch(target.TargetFamily)
 80028ee:	4ba1      	ldr	r3, [pc, #644]	@ (8002b74 <Target_MainLoop+0x2c0>)
 80028f0:	7a1b      	ldrb	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d026      	beq.n	8002944 <Target_MainLoop+0x90>
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	d05c      	beq.n	80029b4 <Target_MainLoop+0x100>
            log_message("Target family not supported for protection unlock.\n");
 80028fa:	489f      	ldr	r0, [pc, #636]	@ (8002b78 <Target_MainLoop+0x2c4>)
 80028fc:	f7ff fbb4 	bl	8002068 <log_message>
  	Target_ErrorHandle(status, "Target Protection Unlock Error");
 8002900:	499e      	ldr	r1, [pc, #632]	@ (8002b7c <Target_MainLoop+0x2c8>)
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff ffc6 	bl	8002894 <Target_ErrorHandle>
	if(target.TargetChipErased  == 0)
 8002908:	4b9a      	ldr	r3, [pc, #616]	@ (8002b74 <Target_MainLoop+0x2c0>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8090 	beq.w	8002a32 <Target_MainLoop+0x17e>
		log_message("No need to mass erase(RDP Regression).\n");
 8002912:	489b      	ldr	r0, [pc, #620]	@ (8002b80 <Target_MainLoop+0x2cc>)
 8002914:	f7ff fba8 	bl	8002068 <log_message>
		target.TargetChipErased = 0;
 8002918:	4b96      	ldr	r3, [pc, #600]	@ (8002b74 <Target_MainLoop+0x2c0>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  	Target_ErrorHandle(status, "Target MassErase Error");
 800291e:	4999      	ldr	r1, [pc, #612]	@ (8002b84 <Target_MainLoop+0x2d0>)
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff ffb7 	bl	8002894 <Target_ErrorHandle>
  log_message("Target flash memory global unlock before flash programming.\n");
 8002926:	4898      	ldr	r0, [pc, #608]	@ (8002b88 <Target_MainLoop+0x2d4>)
 8002928:	f7ff fb9e 	bl	8002068 <log_message>
  switch(target.TargetFamily)
 800292c:	4b91      	ldr	r3, [pc, #580]	@ (8002b74 <Target_MainLoop+0x2c0>)
 800292e:	7a1b      	ldrb	r3, [r3, #8]
 8002930:	2b05      	cmp	r3, #5
 8002932:	f000 80b9 	beq.w	8002aa8 <Target_MainLoop+0x1f4>
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f000 80c8 	beq.w	8002acc <Target_MainLoop+0x218>
          log_message("Not implemented.\n");
 800293c:	4893      	ldr	r0, [pc, #588]	@ (8002b8c <Target_MainLoop+0x2d8>)
 800293e:	f7ff fb93 	bl	8002068 <log_message>
          break;
 8002942:	e0b3      	b.n	8002aac <Target_MainLoop+0x1f8>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR) & STM32C0_FLASH_OPTR_RDP_Msk;
 8002944:	4892      	ldr	r0, [pc, #584]	@ (8002b90 <Target_MainLoop+0x2dc>)
 8002946:	f7ff fa1f 	bl	8001d88 <readMem>
 800294a:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 800294c:	4621      	mov	r1, r4
 800294e:	4891      	ldr	r0, [pc, #580]	@ (8002b94 <Target_MainLoop+0x2e0>)
 8002950:	f7ff fb8a 	bl	8002068 <log_message>
    if(Option_Status == STM32C0_OB_RDP_LEVEL_1)
 8002954:	2cbb      	cmp	r4, #187	@ 0xbb
 8002956:	d005      	beq.n	8002964 <Target_MainLoop+0xb0>
    else if(Option_Status == STM32C0_OB_RDP_LEVEL_0)
 8002958:	2caa      	cmp	r4, #170	@ 0xaa
 800295a:	d123      	bne.n	80029a4 <Target_MainLoop+0xf0>
        log_message("No need to configure RDP Level.\n");
 800295c:	488e      	ldr	r0, [pc, #568]	@ (8002b98 <Target_MainLoop+0x2e4>)
 800295e:	f7ff fb83 	bl	8002068 <log_message>
 8002962:	e7cd      	b.n	8002900 <Target_MainLoop+0x4c>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8002964:	488d      	ldr	r0, [pc, #564]	@ (8002b9c <Target_MainLoop+0x2e8>)
 8002966:	f7ff fb7f 	bl	8002068 <log_message>
        Stm32c0_Flash_Unlock();
 800296a:	f000 f935 	bl	8002bd8 <Stm32c0_Flash_Unlock>
        Stm32c0_Flash_OB_Unlock();
 800296e:	f000 f9fd 	bl	8002d6c <Stm32c0_Flash_OB_Unlock>
        Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_0);
 8002972:	20aa      	movs	r0, #170	@ 0xaa
 8002974:	f000 fa48 	bl	8002e08 <Stm32c0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 8002978:	4889      	ldr	r0, [pc, #548]	@ (8002ba0 <Target_MainLoop+0x2ec>)
 800297a:	f7ff fb75 	bl	8002068 <log_message>
        Stm32c0_Flash_OB_Launch();
 800297e:	f000 fa35 	bl	8002dec <Stm32c0_Flash_OB_Launch>
        Target_Connect();
 8002982:	f7ff fbbb 	bl	80020fc <Target_Connect>
        Stm32c0_Flash_OB_Lock();
 8002986:	f000 f9dd 	bl	8002d44 <Stm32c0_Flash_OB_Lock>
        Stm32c0_Flash_Lock();
 800298a:	f000 f943 	bl	8002c14 <Stm32c0_Flash_Lock>
        Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 800298e:	4880      	ldr	r0, [pc, #512]	@ (8002b90 <Target_MainLoop+0x2dc>)
 8002990:	f7ff f9fa 	bl	8001d88 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8002994:	b2c1      	uxtb	r1, r0
 8002996:	4883      	ldr	r0, [pc, #524]	@ (8002ba4 <Target_MainLoop+0x2f0>)
 8002998:	f7ff fb66 	bl	8002068 <log_message>
        target.TargetChipErased = 1;
 800299c:	4b75      	ldr	r3, [pc, #468]	@ (8002b74 <Target_MainLoop+0x2c0>)
 800299e:	2201      	movs	r2, #1
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e7ad      	b.n	8002900 <Target_MainLoop+0x4c>
        log_message("Locked chip or Error, it cannot program.\n");
 80029a4:	4880      	ldr	r0, [pc, #512]	@ (8002ba8 <Target_MainLoop+0x2f4>)
 80029a6:	f7ff fb5f 	bl	8002068 <log_message>
  	Target_ErrorHandle(status, "Target Protection Unlock Error");
 80029aa:	4974      	ldr	r1, [pc, #464]	@ (8002b7c <Target_MainLoop+0x2c8>)
 80029ac:	2001      	movs	r0, #1
 80029ae:	f7ff ff71 	bl	8002894 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 80029b2:	e788      	b.n	80028c6 <Target_MainLoop+0x12>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_RDP_Msk;
 80029b4:	487d      	ldr	r0, [pc, #500]	@ (8002bac <Target_MainLoop+0x2f8>)
 80029b6:	f7ff f9e7 	bl	8001d88 <readMem>
 80029ba:	f400 447f 	and.w	r4, r0, #65280	@ 0xff00
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 80029be:	4621      	mov	r1, r4
 80029c0:	4874      	ldr	r0, [pc, #464]	@ (8002b94 <Target_MainLoop+0x2e0>)
 80029c2:	f7ff fb51 	bl	8002068 <log_message>
    if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_1)
 80029c6:	f5b4 4f3b 	cmp.w	r4, #47872	@ 0xbb00
 80029ca:	d006      	beq.n	80029da <Target_MainLoop+0x126>
    else if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_0)
 80029cc:	f5b4 4f2a 	cmp.w	r4, #43520	@ 0xaa00
 80029d0:	d12b      	bne.n	8002a2a <Target_MainLoop+0x176>
        log_message("No need to configure RDP Level.\n");
 80029d2:	4871      	ldr	r0, [pc, #452]	@ (8002b98 <Target_MainLoop+0x2e4>)
 80029d4:	f7ff fb48 	bl	8002068 <log_message>
 80029d8:	e792      	b.n	8002900 <Target_MainLoop+0x4c>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80029da:	4870      	ldr	r0, [pc, #448]	@ (8002b9c <Target_MainLoop+0x2e8>)
 80029dc:	f7ff fb44 	bl	8002068 <log_message>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f000 fb03 	bl	8002fec <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 80029e6:	2002      	movs	r0, #2
 80029e8:	f000 fb00 	bl	8002fec <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_OB_Unlock();
 80029ec:	f000 fbba 	bl	8003164 <Stm32h7_Flash_OB_Unlock>
        Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_0);
 80029f0:	f44f 402a 	mov.w	r0, #43520	@ 0xaa00
 80029f4:	f000 fc22 	bl	800323c <Stm32h7_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 80029f8:	4869      	ldr	r0, [pc, #420]	@ (8002ba0 <Target_MainLoop+0x2ec>)
 80029fa:	f7ff fb35 	bl	8002068 <log_message>
        Stm32h7_Flash_OB_Launch();
 80029fe:	f000 fbe5 	bl	80031cc <Stm32h7_Flash_OB_Launch>
        Stm32h7_Flash_OB_Lock();
 8002a02:	f000 fbcf 	bl	80031a4 <Stm32h7_Flash_OB_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f000 fb34 	bl	8003074 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f000 fb31 	bl	8003074 <Stm32h7_Flash_Lock>
        Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 8002a12:	4866      	ldr	r0, [pc, #408]	@ (8002bac <Target_MainLoop+0x2f8>)
 8002a14:	f7ff f9b8 	bl	8001d88 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8002a18:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 8002a1c:	4861      	ldr	r0, [pc, #388]	@ (8002ba4 <Target_MainLoop+0x2f0>)
 8002a1e:	f7ff fb23 	bl	8002068 <log_message>
        target.TargetChipErased = 1;
 8002a22:	4b54      	ldr	r3, [pc, #336]	@ (8002b74 <Target_MainLoop+0x2c0>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	619a      	str	r2, [r3, #24]
 8002a28:	e76a      	b.n	8002900 <Target_MainLoop+0x4c>
        log_message("Locked chip or Error, it cannot program.\n");
 8002a2a:	485f      	ldr	r0, [pc, #380]	@ (8002ba8 <Target_MainLoop+0x2f4>)
 8002a2c:	f7ff fb1c 	bl	8002068 <log_message>
        return TARGET_ERROR;
 8002a30:	e7bb      	b.n	80029aa <Target_MainLoop+0xf6>
    log_message("Target MassErase\n");
 8002a32:	485f      	ldr	r0, [pc, #380]	@ (8002bb0 <Target_MainLoop+0x2fc>)
 8002a34:	f7ff fb18 	bl	8002068 <log_message>
    switch(target.TargetFamily)
 8002a38:	4b4e      	ldr	r3, [pc, #312]	@ (8002b74 <Target_MainLoop+0x2c0>)
 8002a3a:	7a1b      	ldrb	r3, [r3, #8]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d005      	beq.n	8002a4c <Target_MainLoop+0x198>
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d00d      	beq.n	8002a60 <Target_MainLoop+0x1ac>
            log_message("Unsupported Target Family for Mass Erase\n");
 8002a44:	485b      	ldr	r0, [pc, #364]	@ (8002bb4 <Target_MainLoop+0x300>)
 8002a46:	f7ff fb0f 	bl	8002068 <log_message>
            return false;
 8002a4a:	e768      	b.n	800291e <Target_MainLoop+0x6a>
    Stm32c0_Flash_Unlock();
 8002a4c:	f000 f8c4 	bl	8002bd8 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_MassErase();
 8002a50:	f000 f930 	bl	8002cb4 <Stm32c0_Flash_MassErase>
    Stm32c0_Flash_Lock();
 8002a54:	f000 f8de 	bl	8002c14 <Stm32c0_Flash_Lock>
    log_message("Target MassErase Done.\n");
 8002a58:	4857      	ldr	r0, [pc, #348]	@ (8002bb8 <Target_MainLoop+0x304>)
 8002a5a:	f7ff fb05 	bl	8002068 <log_message>
 8002a5e:	e75e      	b.n	800291e <Target_MainLoop+0x6a>
        		Target_MassErase_STM32H7(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK);
 8002a60:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <Target_MainLoop+0x2c0>)
    if (isDualBank)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d114      	bne.n	8002a92 <Target_MainLoop+0x1de>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f000 fabf 	bl	8002fec <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002a6e:	2002      	movs	r0, #2
 8002a70:	f000 fabc 	bl	8002fec <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2030      	movs	r0, #48	@ 0x30
 8002a78:	f000 fa3c 	bl	8002ef4 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_2);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2030      	movs	r0, #48	@ 0x30
 8002a80:	f000 fa38 	bl	8002ef4 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f000 faf5 	bl	8003074 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	f000 faf2 	bl	8003074 <Stm32h7_Flash_Lock>
 8002a90:	e7e2      	b.n	8002a58 <Target_MainLoop+0x1a4>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f000 faaa 	bl	8002fec <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8002a98:	2101      	movs	r1, #1
 8002a9a:	2030      	movs	r0, #48	@ 0x30
 8002a9c:	f000 fa2a 	bl	8002ef4 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f000 fae7 	bl	8003074 <Stm32h7_Flash_Lock>
 8002aa6:	e7d7      	b.n	8002a58 <Target_MainLoop+0x1a4>
      	Stm32c0_Flash_Unlock();
 8002aa8:	f000 f896 	bl	8002bd8 <Stm32c0_Flash_Unlock>
  	status = Target_Program();
 8002aac:	f7ff fc1e 	bl	80022ec <Target_Program>
 8002ab0:	4604      	mov	r4, r0
  log_message("Target flash memory global lock after flash programming.\n");
 8002ab2:	4842      	ldr	r0, [pc, #264]	@ (8002bbc <Target_MainLoop+0x308>)
 8002ab4:	f7ff fad8 	bl	8002068 <log_message>
  switch(target.TargetFamily)
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <Target_MainLoop+0x2c0>)
 8002aba:	7a1b      	ldrb	r3, [r3, #8]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d014      	beq.n	8002aea <Target_MainLoop+0x236>
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d044      	beq.n	8002b4e <Target_MainLoop+0x29a>
          log_message("Not implemented.\n");
 8002ac4:	4831      	ldr	r0, [pc, #196]	@ (8002b8c <Target_MainLoop+0x2d8>)
 8002ac6:	f7ff facf 	bl	8002068 <log_message>
          break;
 8002aca:	e010      	b.n	8002aee <Target_MainLoop+0x23a>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8002acc:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <Target_MainLoop+0x2c0>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d003      	beq.n	8002adc <Target_MainLoop+0x228>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f000 fa89 	bl	8002fec <Stm32h7_Flash_Unlock>
 8002ada:	e7e7      	b.n	8002aac <Target_MainLoop+0x1f8>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f000 fa85 	bl	8002fec <Stm32h7_Flash_Unlock>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f000 fa82 	bl	8002fec <Stm32h7_Flash_Unlock>
 8002ae8:	e7e0      	b.n	8002aac <Target_MainLoop+0x1f8>
      		Stm32c0_Flash_Lock();
 8002aea:	f000 f893 	bl	8002c14 <Stm32c0_Flash_Lock>
  	Target_ErrorHandle(status, "Target Program Error");
 8002aee:	4934      	ldr	r1, [pc, #208]	@ (8002bc0 <Target_MainLoop+0x30c>)
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7ff fecf 	bl	8002894 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	f47f aee5 	bne.w	80028c6 <Target_MainLoop+0x12>
  	status = Target_Verify();
 8002afc:	f7ff fd62 	bl	80025c4 <Target_Verify>
 8002b00:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Verify Error");
 8002b02:	4930      	ldr	r1, [pc, #192]	@ (8002bc4 <Target_MainLoop+0x310>)
 8002b04:	f7ff fec6 	bl	8002894 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002b08:	2c00      	cmp	r4, #0
 8002b0a:	f47f aedc 	bne.w	80028c6 <Target_MainLoop+0x12>
  	status = Target_Protection_Lock();
 8002b0e:	f7ff fe51 	bl	80027b4 <Target_Protection_Lock>
 8002b12:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Protection Lock Error");
 8002b14:	492c      	ldr	r1, [pc, #176]	@ (8002bc8 <Target_MainLoop+0x314>)
 8002b16:	f7ff febd 	bl	8002894 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002b1a:	2c00      	cmp	r4, #0
 8002b1c:	f47f aed3 	bne.w	80028c6 <Target_MainLoop+0x12>
  	log_message("Target program completed\n");
 8002b20:	482a      	ldr	r0, [pc, #168]	@ (8002bcc <Target_MainLoop+0x318>)
 8002b22:	f7ff faa1 	bl	8002068 <log_message>
  	log_message("Target Application Start!\n");
 8002b26:	482a      	ldr	r0, [pc, #168]	@ (8002bd0 <Target_MainLoop+0x31c>)
 8002b28:	f7ff fa9e 	bl	8002068 <log_message>
  	resetTarget();
 8002b2c:	f7ff f94a 	bl	8001dc4 <resetTarget>
  	hardResetTarget();
 8002b30:	f7ff f916 	bl	8001d60 <hardResetTarget>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
 8002b34:	f001 fc64 	bl	8004400 <HAL_GetTick>
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
 8002b38:	1b41      	subs	r1, r0, r5
 8002b3a:	4826      	ldr	r0, [pc, #152]	@ (8002bd4 <Target_MainLoop+0x320>)
 8002b3c:	f7ff fa94 	bl	8002068 <log_message>
    LED_SetState(TARGET_LED_STAT_COMPLETE);
 8002b40:	2002      	movs	r0, #2
 8002b42:	f000 fefb 	bl	800393c <LED_SetState>
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
 8002b46:	2002      	movs	r0, #2
 8002b48:	f000 fc36 	bl	80033b8 <Buzzer_SetState>
 8002b4c:	e6bb      	b.n	80028c6 <Target_MainLoop+0x12>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <Target_MainLoop+0x2c0>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d003      	beq.n	8002b5e <Target_MainLoop+0x2aa>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 fa8c 	bl	8003074 <Stm32h7_Flash_Lock>
 8002b5c:	e7c7      	b.n	8002aee <Target_MainLoop+0x23a>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 fa88 	bl	8003074 <Stm32h7_Flash_Lock>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002b64:	2002      	movs	r0, #2
 8002b66:	f000 fa85 	bl	8003074 <Stm32h7_Flash_Lock>
 8002b6a:	e7c0      	b.n	8002aee <Target_MainLoop+0x23a>
 8002b6c:	0800ece0 	.word	0x0800ece0
 8002b70:	0800ecf8 	.word	0x0800ecf8
 8002b74:	20000e30 	.word	0x20000e30
 8002b78:	0800ee00 	.word	0x0800ee00
 8002b7c:	0800f008 	.word	0x0800f008
 8002b80:	0800ee8c 	.word	0x0800ee8c
 8002b84:	0800eeb4 	.word	0x0800eeb4
 8002b88:	0800eecc 	.word	0x0800eecc
 8002b8c:	0800ef0c 	.word	0x0800ef0c
 8002b90:	1fff7800 	.word	0x1fff7800
 8002b94:	0800ed2c 	.word	0x0800ed2c
 8002b98:	0800edb0 	.word	0x0800edb0
 8002b9c:	0800ed4c 	.word	0x0800ed4c
 8002ba0:	0800ed98 	.word	0x0800ed98
 8002ba4:	0800ec54 	.word	0x0800ec54
 8002ba8:	0800edd4 	.word	0x0800edd4
 8002bac:	5200201c 	.word	0x5200201c
 8002bb0:	0800ee34 	.word	0x0800ee34
 8002bb4:	0800ee48 	.word	0x0800ee48
 8002bb8:	0800ee74 	.word	0x0800ee74
 8002bbc:	0800ef20 	.word	0x0800ef20
 8002bc0:	0800ef5c 	.word	0x0800ef5c
 8002bc4:	0800ef74 	.word	0x0800ef74
 8002bc8:	0800ef88 	.word	0x0800ef88
 8002bcc:	0800efa8 	.word	0x0800efa8
 8002bd0:	0800efc4 	.word	0x0800efc4
 8002bd4:	0800efe0 	.word	0x0800efe0

08002bd8 <Stm32c0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Unlock(void)
{
 8002bd8:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8002bda:	480a      	ldr	r0, [pc, #40]	@ (8002c04 <Stm32c0_Flash_Unlock+0x2c>)
 8002bdc:	f7ff f8d4 	bl	8001d88 <readMem>
	if(tmp != 0x00U)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	db01      	blt.n	8002be8 <Stm32c0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8002be4:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8002be6:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY1);
 8002be8:	4c07      	ldr	r4, [pc, #28]	@ (8002c08 <Stm32c0_Flash_Unlock+0x30>)
 8002bea:	4908      	ldr	r1, [pc, #32]	@ (8002c0c <Stm32c0_Flash_Unlock+0x34>)
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff f8dd 	bl	8001dac <writeMem>
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY2);
 8002bf2:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <Stm32c0_Flash_Unlock+0x38>)
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff f8d9 	bl	8001dac <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8002bfa:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <Stm32c0_Flash_Unlock+0x2c>)
 8002bfc:	f7ff f8c4 	bl	8001d88 <readMem>
		if(tmp != 0x00U)
 8002c00:	0fc0      	lsrs	r0, r0, #31
 8002c02:	e7f0      	b.n	8002be6 <Stm32c0_Flash_Unlock+0xe>
 8002c04:	40022014 	.word	0x40022014
 8002c08:	40022008 	.word	0x40022008
 8002c0c:	45670123 	.word	0x45670123
 8002c10:	cdef89ab 	.word	0xcdef89ab

08002c14 <Stm32c0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Lock(void)
{
 8002c14:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8002c16:	4c07      	ldr	r4, [pc, #28]	@ (8002c34 <Stm32c0_Flash_Lock+0x20>)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff f8b5 	bl	8001d88 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_LOCK|tmp);
 8002c1e:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff f8c2 	bl	8001dac <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_LOCK;
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff f8ad 	bl	8001d88 <readMem>
	if(tmp != 0x00U)
  {
    status = TARGET_OK;
  }
	return status;
}
 8002c2e:	43c0      	mvns	r0, r0
 8002c30:	0fc0      	lsrs	r0, r0, #31
 8002c32:	bd10      	pop	{r4, pc}
 8002c34:	40022014 	.word	0x40022014

08002c38 <Stm32c0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32c0_Flash_WaitOperation(uint32_t Timeout)
{
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	4606      	mov	r6, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8002c3c:	f001 fbe0 	bl	8004400 <HAL_GetTick>
 8002c40:	1984      	adds	r4, r0, r6

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c42:	481b      	ldr	r0, [pc, #108]	@ (8002cb0 <Stm32c0_Flash_WaitOperation+0x78>)
 8002c44:	f7ff f8a0 	bl	8001d88 <readMem>
  while(tmp != 0x00U)
 8002c48:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8002c4c:	d00a      	beq.n	8002c64 <Stm32c0_Flash_WaitOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c4e:	4d18      	ldr	r5, [pc, #96]	@ (8002cb0 <Stm32c0_Flash_WaitOperation+0x78>)
    if (HAL_GetTick() >= timeout)
 8002c50:	f001 fbd6 	bl	8004400 <HAL_GetTick>
 8002c54:	42a0      	cmp	r0, r4
 8002c56:	d224      	bcs.n	8002ca2 <Stm32c0_Flash_WaitOperation+0x6a>
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff f895 	bl	8001d88 <readMem>
  while(tmp != 0x00U)
 8002c5e:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8002c62:	d1f5      	bne.n	8002c50 <Stm32c0_Flash_WaitOperation+0x18>
  }

  /* check flash errors */
  error = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_SR_ERROR;
 8002c64:	4d12      	ldr	r5, [pc, #72]	@ (8002cb0 <Stm32c0_Flash_WaitOperation+0x78>)
 8002c66:	4628      	mov	r0, r5
 8002c68:	f7ff f88e 	bl	8001d88 <readMem>

  /* clear error flags */
  writeMem(STM32C0_FLASH_SR, error);
 8002c6c:	f24c 31fa 	movw	r1, #50170	@ 0xc3fa
 8002c70:	4001      	ands	r1, r0
 8002c72:	4628      	mov	r0, r5
 8002c74:	f7ff f89a 	bl	8001dac <writeMem>

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8002c78:	f001 fbc2 	bl	8004400 <HAL_GetTick>
 8002c7c:	4406      	add	r6, r0
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7ff f882 	bl	8001d88 <readMem>
  while(tmp != 0x00U)
 8002c84:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002c88:	d00d      	beq.n	8002ca6 <Stm32c0_Flash_WaitOperation+0x6e>
  {
    if (HAL_GetTick() >= timeout)
 8002c8a:	f001 fbb9 	bl	8004400 <HAL_GetTick>
 8002c8e:	42b0      	cmp	r0, r6
 8002c90:	d20b      	bcs.n	8002caa <Stm32c0_Flash_WaitOperation+0x72>
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7ff f878 	bl	8001d88 <readMem>
  while(tmp != 0x00U)
 8002c98:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002c9c:	d1f5      	bne.n	8002c8a <Stm32c0_Flash_WaitOperation+0x52>
  }

  return TARGET_OK;
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e000      	b.n	8002ca4 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8002ca2:	2001      	movs	r0, #1
}
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
  return TARGET_OK;
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e7fc      	b.n	8002ca4 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8002caa:	2001      	movs	r0, #1
 8002cac:	e7fa      	b.n	8002ca4 <Stm32c0_Flash_WaitOperation+0x6c>
 8002cae:	bf00      	nop
 8002cb0:	40022010 	.word	0x40022010

08002cb4 <Stm32c0_Flash_MassErase>:
{
 8002cb4:	b510      	push	{r4, lr}
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cba:	f7ff ffbd 	bl	8002c38 <Stm32c0_Flash_WaitOperation>
	if(status == TARGET_OK)
 8002cbe:	b100      	cbz	r0, 8002cc2 <Stm32c0_Flash_MassErase+0xe>
}
 8002cc0:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8002cc2:	4c08      	ldr	r4, [pc, #32]	@ (8002ce4 <Stm32c0_Flash_MassErase+0x30>)
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff f85f 	bl	8001d88 <readMem>
		writeMem(STM32C0_FLASH_CR, (STM32C0_FLASH_CR_STRT | STM32C0_FLASH_CR_MER1)|tmp);
 8002cca:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8002cce:	f041 0104 	orr.w	r1, r1, #4
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff f86a 	bl	8001dac <writeMem>
		status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cdc:	f7ff ffac 	bl	8002c38 <Stm32c0_Flash_WaitOperation>
 8002ce0:	e7ee      	b.n	8002cc0 <Stm32c0_Flash_MassErase+0xc>
 8002ce2:	bf00      	nop
 8002ce4:	40022014 	.word	0x40022014

08002ce8 <Stm32c0_Flash_Program>:
{
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	4604      	mov	r4, r0
 8002cec:	4616      	mov	r6, r2
 8002cee:	461d      	mov	r5, r3
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cf4:	f7ff ffa0 	bl	8002c38 <Stm32c0_Flash_WaitOperation>
	  if (status == TARGET_OK)
 8002cf8:	b178      	cbz	r0, 8002d1a <Stm32c0_Flash_Program+0x32>
  	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cfe:	f7ff ff9b 	bl	8002c38 <Stm32c0_Flash_WaitOperation>
 8002d02:	4604      	mov	r4, r0
  	tmp = readMem(STM32C0_FLASH_CR);
 8002d04:	4d0e      	ldr	r5, [pc, #56]	@ (8002d40 <Stm32c0_Flash_Program+0x58>)
 8002d06:	4628      	mov	r0, r5
 8002d08:	f7ff f83e 	bl	8001d88 <readMem>
  	writeMem(STM32C0_FLASH_CR, tmp & (~STM32C0_FLASH_CR_PG));
 8002d0c:	f020 0101 	bic.w	r1, r0, #1
 8002d10:	4628      	mov	r0, r5
 8002d12:	f7ff f84b 	bl	8001dac <writeMem>
}
 8002d16:	4620      	mov	r0, r4
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  	tmp = readMem(STM32C0_FLASH_CR);
 8002d1a:	4f09      	ldr	r7, [pc, #36]	@ (8002d40 <Stm32c0_Flash_Program+0x58>)
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	f7ff f833 	bl	8001d88 <readMem>
	  	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_PG|tmp);
 8002d22:	f040 0101 	orr.w	r1, r0, #1
 8002d26:	4638      	mov	r0, r7
 8002d28:	f7ff f840 	bl	8001dac <writeMem>
	  	writeMem(Address, 	(uint32_t)Data);
 8002d2c:	4631      	mov	r1, r6
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff f83c 	bl	8001dac <writeMem>
	  	writeMem(Address+4, (uint32_t)(Data>>32));
 8002d34:	4629      	mov	r1, r5
 8002d36:	1d20      	adds	r0, r4, #4
 8002d38:	f7ff f838 	bl	8001dac <writeMem>
 8002d3c:	e7dd      	b.n	8002cfa <Stm32c0_Flash_Program+0x12>
 8002d3e:	bf00      	nop
 8002d40:	40022014 	.word	0x40022014

08002d44 <Stm32c0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Lock(void)
{
 8002d44:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8002d46:	4c08      	ldr	r4, [pc, #32]	@ (8002d68 <Stm32c0_Flash_OB_Lock+0x24>)
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7ff f81d 	bl	8001d88 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTLOCK|tmp);
 8002d4e:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff f82a 	bl	8001dac <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_OPTLOCK;
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff f815 	bl	8001d88 <readMem>
	if(tmp != 0x00U)
 8002d5e:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 8002d62:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	40022014 	.word	0x40022014

08002d6c <Stm32c0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Unlock(void)
{
 8002d6c:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8002d6e:	480b      	ldr	r0, [pc, #44]	@ (8002d9c <Stm32c0_Flash_OB_Unlock+0x30>)
 8002d70:	f7ff f80a 	bl	8001d88 <readMem>
	if(tmp != 0x00U)
 8002d74:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002d78:	d101      	bne.n	8002d7e <Stm32c0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 8002d7a:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 8002d7c:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY1);
 8002d7e:	4c08      	ldr	r4, [pc, #32]	@ (8002da0 <Stm32c0_Flash_OB_Unlock+0x34>)
 8002d80:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <Stm32c0_Flash_OB_Unlock+0x38>)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff f812 	bl	8001dac <writeMem>
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY2);
 8002d88:	4907      	ldr	r1, [pc, #28]	@ (8002da8 <Stm32c0_Flash_OB_Unlock+0x3c>)
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7ff f80e 	bl	8001dac <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <Stm32c0_Flash_OB_Unlock+0x30>)
 8002d92:	f7fe fff9 	bl	8001d88 <readMem>
		if(tmp == 0x00U)
 8002d96:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8002d9a:	e7ef      	b.n	8002d7c <Stm32c0_Flash_OB_Unlock+0x10>
 8002d9c:	40022014 	.word	0x40022014
 8002da0:	4002200c 	.word	0x4002200c
 8002da4:	08192a3b 	.word	0x08192a3b
 8002da8:	4c5d6e7f 	.word	0x4c5d6e7f

08002dac <Stm32c0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32c0_Flash_OB_GetUser(void)
{
 8002dac:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32C0_FLASH_OPTR);
 8002dae:	4803      	ldr	r0, [pc, #12]	@ (8002dbc <Stm32c0_Flash_OB_GetUser+0x10>)
 8002db0:	f7fe ffea 	bl	8001d88 <readMem>
 8002db4:	4603      	mov	r3, r0
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
  return user;
}
 8002db6:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <Stm32c0_Flash_OB_GetUser+0x14>)
 8002db8:	4018      	ands	r0, r3
 8002dba:	bd08      	pop	{r3, pc}
 8002dbc:	40022020 	.word	0x40022020
 8002dc0:	3fefff00 	.word	0x3fefff00

08002dc4 <Stm32c0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32c0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

  /* Configure the RDP level in the option bytes register */
  optr = readMem(STM32C0_FLASH_OPTR);
 8002dcc:	4f06      	ldr	r7, [pc, #24]	@ (8002de8 <Stm32c0_Flash_OB_OptrConfig+0x24>)
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f7fe ffda 	bl	8001d88 <readMem>
  optr &= ~(UserType | STM32C0_FLASH_OPTR_RDP);
 8002dd4:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 8002dd8:	ea20 0105 	bic.w	r1, r0, r5
  tmp = optr | UserConfig | RDPLevel;
 8002ddc:	4334      	orrs	r4, r6
  writeMem(STM32C0_FLASH_OPTR, tmp);
 8002dde:	4321      	orrs	r1, r4
 8002de0:	4638      	mov	r0, r7
 8002de2:	f7fe ffe3 	bl	8001dac <writeMem>
}
 8002de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de8:	40022020 	.word	0x40022020

08002dec <Stm32c0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32c0_Flash_OB_Launch(void)
{
 8002dec:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32C0_FLASH_CR);
 8002dee:	4c05      	ldr	r4, [pc, #20]	@ (8002e04 <Stm32c0_Flash_OB_Launch+0x18>)
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7fe ffc9 	bl	8001d88 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 8002df6:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7fe ffd6 	bl	8001dac <writeMem>
}
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop
 8002e04:	40022014 	.word	0x40022014

08002e08 <Stm32c0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Program(uint32_t RDPLevel)
{
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32c0_Flash_OB_GetUser();
 8002e0c:	f7ff ffce 	bl	8002dac <Stm32c0_Flash_OB_GetUser>
 8002e10:	4601      	mov	r1, r0
	Stm32c0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 8002e12:	4622      	mov	r2, r4
 8002e14:	f7ff ffd6 	bl	8002dc4 <Stm32c0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002e18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e1c:	f7ff ff0c 	bl	8002c38 <Stm32c0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8002e20:	4604      	mov	r4, r0
 8002e22:	b108      	cbz	r0, 8002e28 <Stm32c0_Flash_OB_Program+0x20>
    tmp = readMem(STM32C0_FLASH_CR);
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8002e24:	4620      	mov	r0, r4
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8002e28:	4d0b      	ldr	r5, [pc, #44]	@ (8002e58 <Stm32c0_Flash_OB_Program+0x50>)
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f7fe ffac 	bl	8001d88 <readMem>
		writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTSTRT|tmp);
 8002e30:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8002e34:	4628      	mov	r0, r5
 8002e36:	f7fe ffb9 	bl	8001dac <writeMem>
    status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002e3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e3e:	f7ff fefb 	bl	8002c38 <Stm32c0_Flash_WaitOperation>
 8002e42:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
 8002e44:	4628      	mov	r0, r5
 8002e46:	f7fe ff9f 	bl	8001d88 <readMem>
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
 8002e4a:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f7fe ffac 	bl	8001dac <writeMem>
 8002e54:	e7e6      	b.n	8002e24 <Stm32c0_Flash_OB_Program+0x1c>
 8002e56:	bf00      	nop
 8002e58:	40022014 	.word	0x40022014

08002e5c <Stm32h7_Flash_WaitOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_WaitOperation(uint32_t Timeout, uint32_t Bank)
{
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	4605      	mov	r5, r0
    uint32_t sr_reg = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_SR1 : STM32H7_FLASH_SR2;
    uint32_t qw_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_QW_BANK1 : STM32H7_FLASH_FLAG_QW_BANK2;
    uint32_t all_errors_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_ALL_ERRORS_BANK1 : STM32H7_FLASH_FLAG_ALL_ERRORS_BANK2;
 8002e62:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <Stm32h7_Flash_WaitOperation+0x80>)
 8002e64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <Stm32h7_Flash_WaitOperation+0x84>)
 8002e66:	2901      	cmp	r1, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	4691      	movne	r9, r2
 8002e6c:	4699      	moveq	r9, r3
 8002e6e:	2901      	cmp	r1, #1
 8002e70:	4f1c      	ldr	r7, [pc, #112]	@ (8002ee4 <Stm32h7_Flash_WaitOperation+0x88>)
 8002e72:	bf08      	it	eq
 8002e74:	2704      	moveq	r7, #4
 8002e76:	4e1c      	ldr	r6, [pc, #112]	@ (8002ee8 <Stm32h7_Flash_WaitOperation+0x8c>)
 8002e78:	4b1c      	ldr	r3, [pc, #112]	@ (8002eec <Stm32h7_Flash_WaitOperation+0x90>)
 8002e7a:	2901      	cmp	r1, #1
 8002e7c:	bf08      	it	eq
 8002e7e:	461e      	moveq	r6, r3
 8002e80:	2901      	cmp	r1, #1
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <Stm32h7_Flash_WaitOperation+0x94>)
 8002e84:	bf14      	ite	ne
 8002e86:	469a      	movne	sl, r3
 8002e88:	f44f 3a80 	moveq.w	sl, #65536	@ 0x10000
    uint32_t eop_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_EOP_BANK1 : STM32H7_FLASH_FLAG_EOP_BANK2;

    uint32_t tickstart = HAL_GetTick();
 8002e8c:	f001 fab8 	bl	8004400 <HAL_GetTick>
 8002e90:	4680      	mov	r8, r0
 8002e92:	e001      	b.n	8002e98 <Stm32h7_Flash_WaitOperation+0x3c>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기

        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
            return TARGET_ERROR;
        }
    } while (status & qw_flag);  // QW 플래그가 0이 될 때까지 대기
 8002e94:	4227      	tst	r7, r4
 8002e96:	d00e      	beq.n	8002eb6 <Stm32h7_Flash_WaitOperation+0x5a>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f7fe ff75 	bl	8001d88 <readMem>
 8002e9e:	4604      	mov	r4, r0
        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
 8002ea0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ea4:	d0f6      	beq.n	8002e94 <Stm32h7_Flash_WaitOperation+0x38>
 8002ea6:	f001 faab 	bl	8004400 <HAL_GetTick>
 8002eaa:	eba0 0008 	sub.w	r0, r0, r8
 8002eae:	42a8      	cmp	r0, r5
 8002eb0:	d9f0      	bls.n	8002e94 <Stm32h7_Flash_WaitOperation+0x38>
            return TARGET_ERROR;
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	e006      	b.n	8002ec4 <Stm32h7_Flash_WaitOperation+0x68>

    // 에러 플래그 확인 및 클리어
    uint32_t errorflag = status & all_errors_flag;
    if (errorflag != 0) {
 8002eb6:	ea19 0104 	ands.w	r1, r9, r4
 8002eba:	d105      	bne.n	8002ec8 <Stm32h7_Flash_WaitOperation+0x6c>
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
    }

    // EOP 플래그 확인 및 클리어
    if (status & eop_flag) {
 8002ebc:	ea1a 0f04 	tst.w	sl, r4
 8002ec0:	d106      	bne.n	8002ed0 <Stm32h7_Flash_WaitOperation+0x74>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
    }

    return TARGET_OK;
 8002ec2:	2000      	movs	r0, #0
}
 8002ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7fe ff6f 	bl	8001dac <writeMem>
 8002ece:	e7f5      	b.n	8002ebc <Stm32h7_Flash_WaitOperation+0x60>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f7fe ff6a 	bl	8001dac <writeMem>
    return TARGET_OK;
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7f3      	b.n	8002ec4 <Stm32h7_Flash_WaitOperation+0x68>
 8002edc:	97ee0000 	.word	0x97ee0000
 8002ee0:	17ee0000 	.word	0x17ee0000
 8002ee4:	80000004 	.word	0x80000004
 8002ee8:	52002110 	.word	0x52002110
 8002eec:	52002010 	.word	0x52002010
 8002ef0:	80010000 	.word	0x80010000

08002ef4 <Stm32h7_Flash_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
void Stm32h7_Flash_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4605      	mov	r5, r0
	uint32_t tmp = 0;

  /* Flash Mass Erase */
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 8002ef8:	f001 0303 	and.w	r3, r1, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d011      	beq.n	8002f24 <Stm32h7_Flash_MassErase+0x30>
 8002f00:	460c      	mov	r4, r1
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8002f02:	f011 0f01 	tst.w	r1, #1
 8002f06:	d139      	bne.n	8002f7c <Stm32h7_Flash_MassErase+0x88>
      /* Erase Bank1 */
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR1, tmp);
    }

    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8002f08:	f014 0f02 	tst.w	r4, #2
 8002f0c:	d150      	bne.n	8002fb0 <Stm32h7_Flash_MassErase+0xbc>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR2, tmp);
    }
  }

  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f14:	f7ff ffa2 	bl	8002e5c <Stm32h7_Flash_WaitOperation>
  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2);
 8002f18:	2102      	movs	r1, #2
 8002f1a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f1e:	f7ff ff9d 	bl	8002e5c <Stm32h7_Flash_WaitOperation>

}
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
  	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8002f24:	4e2f      	ldr	r6, [pc, #188]	@ (8002fe4 <Stm32h7_Flash_MassErase+0xf0>)
 8002f26:	4630      	mov	r0, r6
 8002f28:	f7fe ff2e 	bl	8001d88 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f2c:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f30:	4630      	mov	r0, r6
 8002f32:	f7fe ff3b 	bl	8001dac <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8002f36:	4c2c      	ldr	r4, [pc, #176]	@ (8002fe8 <Stm32h7_Flash_MassErase+0xf4>)
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7fe ff25 	bl	8001d88 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8002f3e:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7fe ff32 	bl	8001dac <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f7fe ff1d 	bl	8001d88 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f4e:	ea40 0105 	orr.w	r1, r0, r5
 8002f52:	4630      	mov	r0, r6
 8002f54:	f7fe ff2a 	bl	8001dac <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7fe ff15 	bl	8001d88 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8002f5e:	ea40 0105 	orr.w	r1, r0, r5
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7fe ff22 	bl	8001dac <writeMem>
  	tmp = readMem(STM32H7_FLASH_OPTCR) | STM32H7_FLASH_OPTCR_MER;
 8002f68:	3cf4      	subs	r4, #244	@ 0xf4
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7fe ff0c 	bl	8001d88 <readMem>
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
 8002f70:	f040 0110 	orr.w	r1, r0, #16
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7fe ff19 	bl	8001dac <writeMem>
 8002f7a:	e7c8      	b.n	8002f0e <Stm32h7_Flash_MassErase+0x1a>
    	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8002f7c:	4e19      	ldr	r6, [pc, #100]	@ (8002fe4 <Stm32h7_Flash_MassErase+0xf0>)
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f7fe ff02 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f84:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f7fe ff0f 	bl	8001dac <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7fe fefa 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f94:	ea40 0105 	orr.w	r1, r0, r5
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f7fe ff07 	bl	8001dac <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f7fe fef2 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002fa4:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7fe feff 	bl	8001dac <writeMem>
 8002fae:	e7ab      	b.n	8002f08 <Stm32h7_Flash_MassErase+0x14>
    	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8002fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe8 <Stm32h7_Flash_MassErase+0xf4>)
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7fe fee8 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fb8:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7fe fef5 	bl	8001dac <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7fe fee0 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fc8:	ea40 0105 	orr.w	r1, r0, r5
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7fe feed 	bl	8001dac <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7fe fed8 	bl	8001d88 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fd8:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7fe fee5 	bl	8001dac <writeMem>
 8002fe2:	e794      	b.n	8002f0e <Stm32h7_Flash_MassErase+0x1a>
 8002fe4:	5200200c 	.word	0x5200200c
 8002fe8:	5200210c 	.word	0x5200210c

08002fec <Stm32h7_Flash_Unlock>:

bool Stm32h7_Flash_Unlock(uint32_t Banks)
{
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4604      	mov	r4, r0
    uint32_t tmp = 0;

    /* BANK1 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8002ff0:	f010 0f01 	tst.w	r0, #1
 8002ff4:	d104      	bne.n	8003000 <Stm32h7_Flash_Unlock+0x14>
            }
        }
    }

    /* BANK2 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8002ff6:	f014 0f02 	tst.w	r4, #2
 8002ffa:	d118      	bne.n	800302e <Stm32h7_Flash_Unlock+0x42>
                return TARGET_ERROR;
            }
        }
    }

    return TARGET_OK;
 8002ffc:	2000      	movs	r0, #0
}
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
        tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8003000:	4816      	ldr	r0, [pc, #88]	@ (800305c <Stm32h7_Flash_Unlock+0x70>)
 8003002:	f7fe fec1 	bl	8001d88 <readMem>
        if (tmp != 0U)
 8003006:	f010 0f01 	tst.w	r0, #1
 800300a:	d0f4      	beq.n	8002ff6 <Stm32h7_Flash_Unlock+0xa>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY1);
 800300c:	4d14      	ldr	r5, [pc, #80]	@ (8003060 <Stm32h7_Flash_Unlock+0x74>)
 800300e:	4915      	ldr	r1, [pc, #84]	@ (8003064 <Stm32h7_Flash_Unlock+0x78>)
 8003010:	4628      	mov	r0, r5
 8003012:	f7fe fecb 	bl	8001dac <writeMem>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY2);
 8003016:	4914      	ldr	r1, [pc, #80]	@ (8003068 <Stm32h7_Flash_Unlock+0x7c>)
 8003018:	4628      	mov	r0, r5
 800301a:	f7fe fec7 	bl	8001dac <writeMem>
            tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 800301e:	480f      	ldr	r0, [pc, #60]	@ (800305c <Stm32h7_Flash_Unlock+0x70>)
 8003020:	f7fe feb2 	bl	8001d88 <readMem>
            if (tmp != 0U)
 8003024:	f010 0f01 	tst.w	r0, #1
 8003028:	d0e5      	beq.n	8002ff6 <Stm32h7_Flash_Unlock+0xa>
                return TARGET_ERROR;
 800302a:	2001      	movs	r0, #1
 800302c:	e7e7      	b.n	8002ffe <Stm32h7_Flash_Unlock+0x12>
        tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 800302e:	480f      	ldr	r0, [pc, #60]	@ (800306c <Stm32h7_Flash_Unlock+0x80>)
 8003030:	f7fe feaa 	bl	8001d88 <readMem>
        if (tmp != 0U)
 8003034:	f010 0f01 	tst.w	r0, #1
 8003038:	d101      	bne.n	800303e <Stm32h7_Flash_Unlock+0x52>
    return TARGET_OK;
 800303a:	2000      	movs	r0, #0
 800303c:	e7df      	b.n	8002ffe <Stm32h7_Flash_Unlock+0x12>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY1);
 800303e:	4c0c      	ldr	r4, [pc, #48]	@ (8003070 <Stm32h7_Flash_Unlock+0x84>)
 8003040:	4908      	ldr	r1, [pc, #32]	@ (8003064 <Stm32h7_Flash_Unlock+0x78>)
 8003042:	4620      	mov	r0, r4
 8003044:	f7fe feb2 	bl	8001dac <writeMem>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY2);
 8003048:	4907      	ldr	r1, [pc, #28]	@ (8003068 <Stm32h7_Flash_Unlock+0x7c>)
 800304a:	4620      	mov	r0, r4
 800304c:	f7fe feae 	bl	8001dac <writeMem>
            tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8003050:	4806      	ldr	r0, [pc, #24]	@ (800306c <Stm32h7_Flash_Unlock+0x80>)
 8003052:	f7fe fe99 	bl	8001d88 <readMem>
            if (tmp != 0U)
 8003056:	f000 0001 	and.w	r0, r0, #1
 800305a:	e7d0      	b.n	8002ffe <Stm32h7_Flash_Unlock+0x12>
 800305c:	5200200c 	.word	0x5200200c
 8003060:	52002004 	.word	0x52002004
 8003064:	45670123 	.word	0x45670123
 8003068:	cdef89ab 	.word	0xcdef89ab
 800306c:	5200210c 	.word	0x5200210c
 8003070:	52002104 	.word	0x52002104

08003074 <Stm32h7_Flash_Lock>:

bool Stm32h7_Flash_Lock(uint32_t Banks)
{
 8003074:	b538      	push	{r3, r4, r5, lr}
 8003076:	4604      	mov	r4, r0
  uint32_t tmp = 0;

	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8003078:	f010 0f01 	tst.w	r0, #1
 800307c:	d104      	bne.n	8003088 <Stm32h7_Flash_Lock+0x14>
	{
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR1, tmp);
	}

  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 800307e:	f014 0f02 	tst.w	r4, #2
 8003082:	d10b      	bne.n	800309c <Stm32h7_Flash_Lock+0x28>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR2, tmp);
  }

  return TARGET_OK;
}
 8003084:	2000      	movs	r0, #0
 8003086:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
 8003088:	4d09      	ldr	r5, [pc, #36]	@ (80030b0 <Stm32h7_Flash_Lock+0x3c>)
 800308a:	4628      	mov	r0, r5
 800308c:	f7fe fe7c 	bl	8001d88 <readMem>
		writeMem(STM32H7_FLASH_CR1, tmp);
 8003090:	f040 0101 	orr.w	r1, r0, #1
 8003094:	4628      	mov	r0, r5
 8003096:	f7fe fe89 	bl	8001dac <writeMem>
 800309a:	e7f0      	b.n	800307e <Stm32h7_Flash_Lock+0xa>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
 800309c:	4c05      	ldr	r4, [pc, #20]	@ (80030b4 <Stm32h7_Flash_Lock+0x40>)
 800309e:	4620      	mov	r0, r4
 80030a0:	f7fe fe72 	bl	8001d88 <readMem>
		writeMem(STM32H7_FLASH_CR2, tmp);
 80030a4:	f040 0101 	orr.w	r1, r0, #1
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7fe fe7f 	bl	8001dac <writeMem>
 80030ae:	e7e9      	b.n	8003084 <Stm32h7_Flash_Lock+0x10>
 80030b0:	5200200c 	.word	0x5200200c
 80030b4:	5200210c 	.word	0x5200210c

080030b8 <Stm32h7_Flash_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_Program(uint32_t FlashAddress, uint32_t DataAddress, uint32_t WordSize)
{
 80030b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030bc:	b083      	sub	sp, #12
 80030be:	4681      	mov	r9, r0
 80030c0:	4688      	mov	r8, r1
 80030c2:	4692      	mov	sl, r2
    bool status;
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 80030c4:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 80030c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030cc:	d216      	bcs.n	80030fc <Stm32h7_Flash_Program+0x44>
    uint32_t dest_addr = FlashAddress;
    uint32_t *src_addr = (uint32_t *)DataAddress;

    // Set PG bit once at the beginning
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 80030ce:	4c23      	ldr	r4, [pc, #140]	@ (800315c <Stm32h7_Flash_Program+0xa4>)
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7fe fe59 	bl	8001d88 <readMem>
 80030d6:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 80030da:	2301      	movs	r3, #1
 80030dc:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 80030de:	9401      	str	r4, [sp, #4]
 80030e0:	9801      	ldr	r0, [sp, #4]
 80030e2:	f7fe fe63 	bl	8001dac <writeMem>

    // Program flash with burst writes (32-byte aligned)
    for (uint32_t i = 0; i < WordSize; i += 32) {
 80030e6:	f1ba 0f00 	cmp.w	sl, #0
 80030ea:	d029      	beq.n	8003140 <Stm32h7_Flash_Program+0x88>
 80030ec:	f108 0520 	add.w	r5, r8, #32
 80030f0:	4647      	mov	r7, r8
 80030f2:	f06f 0b1f 	mvn.w	fp, #31
 80030f6:	ebab 0b08 	sub.w	fp, fp, r8
 80030fa:	e016      	b.n	800312a <Stm32h7_Flash_Program+0x72>
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 80030fc:	4c18      	ldr	r4, [pc, #96]	@ (8003160 <Stm32h7_Flash_Program+0xa8>)
 80030fe:	4620      	mov	r0, r4
 8003100:	f7fe fe42 	bl	8001d88 <readMem>
 8003104:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 8003108:	2302      	movs	r3, #2
 800310a:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 800310c:	9401      	str	r4, [sp, #4]
 800310e:	e7e7      	b.n	80030e0 <Stm32h7_Flash_Program+0x28>
        for (uint32_t j = 0; j < 32; j += 4) {
            writeMem(dest_addr + j, *src_addr++);
 8003110:	3720      	adds	r7, #32
        }
        dest_addr += 32;

        // Wait for operation to complete after each burst
        status = Stm32h7_Flash_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE, bank);
 8003112:	9900      	ldr	r1, [sp, #0]
 8003114:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003118:	f7ff fea0 	bl	8002e5c <Stm32h7_Flash_WaitOperation>
        if (status != TARGET_OK) {
 800311c:	4603      	mov	r3, r0
 800311e:	b9c8      	cbnz	r0, 8003154 <Stm32h7_Flash_Program+0x9c>
    for (uint32_t i = 0; i < WordSize; i += 32) {
 8003120:	3520      	adds	r5, #32
 8003122:	eb0b 0305 	add.w	r3, fp, r5
 8003126:	4553      	cmp	r3, sl
 8003128:	d20a      	bcs.n	8003140 <Stm32h7_Flash_Program+0x88>
 800312a:	eba9 0608 	sub.w	r6, r9, r8
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 800312e:	463c      	mov	r4, r7
            writeMem(dest_addr + j, *src_addr++);
 8003130:	19a0      	adds	r0, r4, r6
 8003132:	f854 1b04 	ldr.w	r1, [r4], #4
 8003136:	f7fe fe39 	bl	8001dac <writeMem>
        for (uint32_t j = 0; j < 32; j += 4) {
 800313a:	42ac      	cmp	r4, r5
 800313c:	d1f8      	bne.n	8003130 <Stm32h7_Flash_Program+0x78>
 800313e:	e7e7      	b.n	8003110 <Stm32h7_Flash_Program+0x58>
            return TARGET_ERROR;
        }
    }

    // Clear PG bit at the end
    tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2);
 8003140:	9c01      	ldr	r4, [sp, #4]
 8003142:	4620      	mov	r0, r4
 8003144:	f7fe fe20 	bl	8001d88 <readMem>
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp & (~STM32H7_FLASH_CR_PG));
 8003148:	f020 0102 	bic.w	r1, r0, #2
 800314c:	4620      	mov	r0, r4
 800314e:	f7fe fe2d 	bl	8001dac <writeMem>

    return TARGET_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	b003      	add	sp, #12
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315c:	5200200c 	.word	0x5200200c
 8003160:	5200210c 	.word	0x5200210c

08003164 <Stm32h7_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Unlock(void)
{
 8003164:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

	tmp = readMem(STM32H7_FLASH_OPTCR) & STM32H7_FLASH_OPTCR_OPTLOCK;
 8003166:	480b      	ldr	r0, [pc, #44]	@ (8003194 <Stm32h7_Flash_OB_Unlock+0x30>)
 8003168:	f7fe fe0e 	bl	8001d88 <readMem>
  if(tmp != 0x00U)
 800316c:	f010 0f01 	tst.w	r0, #1
 8003170:	d101      	bne.n	8003176 <Stm32h7_Flash_OB_Unlock+0x12>
		if(tmp != 0x00U)
		{
			return TARGET_ERROR;
		}
  }
  return TARGET_OK;
 8003172:	2000      	movs	r0, #0
}
 8003174:	bd10      	pop	{r4, pc}
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY1);
 8003176:	4c08      	ldr	r4, [pc, #32]	@ (8003198 <Stm32h7_Flash_OB_Unlock+0x34>)
 8003178:	4908      	ldr	r1, [pc, #32]	@ (800319c <Stm32h7_Flash_OB_Unlock+0x38>)
 800317a:	4620      	mov	r0, r4
 800317c:	f7fe fe16 	bl	8001dac <writeMem>
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY2);
 8003180:	4907      	ldr	r1, [pc, #28]	@ (80031a0 <Stm32h7_Flash_OB_Unlock+0x3c>)
 8003182:	4620      	mov	r0, r4
 8003184:	f7fe fe12 	bl	8001dac <writeMem>
		tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 8003188:	4802      	ldr	r0, [pc, #8]	@ (8003194 <Stm32h7_Flash_OB_Unlock+0x30>)
 800318a:	f7fe fdfd 	bl	8001d88 <readMem>
		if(tmp != 0x00U)
 800318e:	f000 0001 	and.w	r0, r0, #1
 8003192:	e7ef      	b.n	8003174 <Stm32h7_Flash_OB_Unlock+0x10>
 8003194:	52002018 	.word	0x52002018
 8003198:	52002008 	.word	0x52002008
 800319c:	08192a3b 	.word	0x08192a3b
 80031a0:	4c5d6e7f 	.word	0x4c5d6e7f

080031a4 <Stm32h7_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Lock(void)
{
 80031a4:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 80031a6:	4c08      	ldr	r4, [pc, #32]	@ (80031c8 <Stm32h7_Flash_OB_Lock+0x24>)
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7fe fded 	bl	8001d88 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTLOCK | tmp);
 80031ae:	f040 0101 	orr.w	r1, r0, #1
 80031b2:	4620      	mov	r0, r4
 80031b4:	f7fe fdfa 	bl	8001dac <writeMem>

  /* Verify that the Option Bytes are locked */
	tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7fe fde5 	bl	8001d88 <readMem>
	if(tmp == 0x00U)
 80031be:	f080 0001 	eor.w	r0, r0, #1
	{
		return TARGET_ERROR;
	}

	return TARGET_OK;
}
 80031c2:	f000 0001 	and.w	r0, r0, #1
 80031c6:	bd10      	pop	{r4, pc}
 80031c8:	52002018 	.word	0x52002018

080031cc <Stm32h7_Flash_OB_Launch>:
	return TARGET_OK;
}


bool Stm32h7_Flash_OB_Launch(void)
{
 80031cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = 0;

	/* Set OPTSTRT Bit */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 80031ce:	4c18      	ldr	r4, [pc, #96]	@ (8003230 <Stm32h7_Flash_OB_Launch+0x64>)
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7fe fdd9 	bl	8001d88 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTSTART | tmp);
 80031d6:	f040 0102 	orr.w	r1, r0, #2
 80031da:	4620      	mov	r0, r4
 80031dc:	f7fe fde6 	bl	8001dac <writeMem>
	uint32_t tickstart = HAL_GetTick();
 80031e0:	f001 f90e 	bl	8004400 <HAL_GetTick>
 80031e4:	4604      	mov	r4, r0
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 80031e6:	4813      	ldr	r0, [pc, #76]	@ (8003234 <Stm32h7_Flash_OB_Launch+0x68>)
 80031e8:	f7fe fdce 	bl	8001d88 <readMem>
	while(tmp != 0U)
 80031ec:	f010 0f01 	tst.w	r0, #1
 80031f0:	d00d      	beq.n	800320e <Stm32h7_Flash_OB_Launch+0x42>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f24c 3550 	movw	r5, #50000	@ 0xc350
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 80031f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003234 <Stm32h7_Flash_OB_Launch+0x68>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031f8:	f001 f902 	bl	8004400 <HAL_GetTick>
 80031fc:	1b00      	subs	r0, r0, r4
 80031fe:	42a8      	cmp	r0, r5
 8003200:	d814      	bhi.n	800322c <Stm32h7_Flash_OB_Launch+0x60>
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 8003202:	4630      	mov	r0, r6
 8003204:	f7fe fdc0 	bl	8001d88 <readMem>
	while(tmp != 0U)
 8003208:	f010 0f01 	tst.w	r0, #1
 800320c:	d1f4      	bne.n	80031f8 <Stm32h7_Flash_OB_Launch+0x2c>
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPTCHANGEERR;
 800320e:	4809      	ldr	r0, [pc, #36]	@ (8003234 <Stm32h7_Flash_OB_Launch+0x68>)
 8003210:	f7fe fdba 	bl	8001d88 <readMem>
	if(tmp != 0x00U)
 8003214:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8003218:	d101      	bne.n	800321e <Stm32h7_Flash_OB_Launch+0x52>
	return TARGET_OK;
 800321a:	2000      	movs	r0, #0
 800321c:	e007      	b.n	800322e <Stm32h7_Flash_OB_Launch+0x62>
		writeMem(STM32H7_FLASH_OPTCCR, STM32H7_FLASH_OPTCCR_CLR_OPTCHANGEERR);
 800321e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003222:	4805      	ldr	r0, [pc, #20]	@ (8003238 <Stm32h7_Flash_OB_Launch+0x6c>)
 8003224:	f7fe fdc2 	bl	8001dac <writeMem>
		return TARGET_ERROR;
 8003228:	2001      	movs	r0, #1
 800322a:	e000      	b.n	800322e <Stm32h7_Flash_OB_Launch+0x62>
        return TARGET_ERROR;
 800322c:	2001      	movs	r0, #1
	return Stm32h7_Flash_OB_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE);
}
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	52002018 	.word	0x52002018
 8003234:	5200201c 	.word	0x5200201c
 8003238:	52002024 	.word	0x52002024

0800323c <Stm32h7_Flash_OB_Program>:
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
}

bool Stm32h7_Flash_OB_Program(uint32_t RDPLevel)
{
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	4604      	mov	r4, r0
	bool status = 0;

  /* Wait for last operation to be completed */
	if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1))
 8003240:	2101      	movs	r1, #1
 8003242:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003246:	f7ff fe09 	bl	8002e5c <Stm32h7_Flash_WaitOperation>
 800324a:	4605      	mov	r5, r0
 800324c:	b108      	cbz	r0, 8003252 <Stm32h7_Flash_OB_Program+0x16>
		/* Read protection configuration */
		STM32H7_FLASH_OB_RDPConfig(RDPLevel);
	}

	return status;
}
 800324e:	4628      	mov	r0, r5
 8003250:	bd70      	pop	{r4, r5, r6, pc}
	else if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2))
 8003252:	2102      	movs	r1, #2
 8003254:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003258:	f7ff fe00 	bl	8002e5c <Stm32h7_Flash_WaitOperation>
 800325c:	4605      	mov	r5, r0
 800325e:	2800      	cmp	r0, #0
 8003260:	d1f5      	bne.n	800324e <Stm32h7_Flash_OB_Program+0x12>
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
 8003262:	4e05      	ldr	r6, [pc, #20]	@ (8003278 <Stm32h7_Flash_OB_Program+0x3c>)
 8003264:	4630      	mov	r0, r6
 8003266:	f7fe fd8f 	bl	8001d88 <readMem>
 800326a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
 800326e:	4321      	orrs	r1, r4
 8003270:	4630      	mov	r0, r6
 8003272:	f7fe fd9b 	bl	8001dac <writeMem>
}
 8003276:	e7ea      	b.n	800324e <Stm32h7_Flash_OB_Program+0x12>
 8003278:	52002020 	.word	0x52002020

0800327c <FileTransferCheck_UpdateOnWrite>:
    // 초기 상태로 LED 설정
}

// 파일 전송 중 상태 업데이트 함수
void FileTransferCheck_UpdateOnWrite(void)
{
 800327c:	b508      	push	{r3, lr}
  // 파일 전송 중 LED1을 토글
  LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 800327e:	2001      	movs	r0, #1
 8003280:	f000 fb5c 	bl	800393c <LED_SetState>

  // 마지막 파일 전송 시간을 현재 시간으로 업데이트
  last_write_time = HAL_GetTick();
 8003284:	f001 f8bc 	bl	8004400 <HAL_GetTick>
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <FileTransferCheck_UpdateOnWrite+0x20>)
 800328a:	6018      	str	r0, [r3, #0]

  // 전송 활성화 플래그 설정 (파일 전송 시작)
  transfer_active_flag = 1;
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <FileTransferCheck_UpdateOnWrite+0x24>)
 800328e:	2201      	movs	r2, #1
 8003290:	701a      	strb	r2, [r3, #0]

  // 전송 완료 플래그 리셋
  transfer_complete_flag = 0;
 8003292:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <FileTransferCheck_UpdateOnWrite+0x28>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
}
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	20000e50 	.word	0x20000e50
 80032a0:	20000e4c 	.word	0x20000e4c
 80032a4:	20000e4d 	.word	0x20000e4d

080032a8 <FileTransferCheck_CheckCompletion>:

// 파일 전송 완료 상태 감지 함수
void FileTransferCheck_CheckCompletion(void)
{
 80032a8:	b508      	push	{r3, lr}
  // 전송 활성화 플래그가 설정된 경우에만 완료 상태 감지
  if (transfer_active_flag && ((HAL_GetTick() - last_write_time) > FILE_TRANSFER_TIMEOUT))
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <FileTransferCheck_CheckCompletion+0x30>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b903      	cbnz	r3, 80032b2 <FileTransferCheck_CheckCompletion+0xa>
      transfer_complete_flag = 1;

      // 전송 활성화 플래그 리셋 (다음 전송을 대기)
      transfer_active_flag = 0;
  }
}
 80032b0:	bd08      	pop	{r3, pc}
  if (transfer_active_flag && ((HAL_GetTick() - last_write_time) > FILE_TRANSFER_TIMEOUT))
 80032b2:	f001 f8a5 	bl	8004400 <HAL_GetTick>
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <FileTransferCheck_CheckCompletion+0x34>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1ac0      	subs	r0, r0, r3
 80032bc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80032c0:	d9f6      	bls.n	80032b0 <FileTransferCheck_CheckCompletion+0x8>
      LED_SetState(TARGET_LED_STAT_COMPLETE);
 80032c2:	2002      	movs	r0, #2
 80032c4:	f000 fb3a 	bl	800393c <LED_SetState>
      transfer_complete_flag = 1;
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <FileTransferCheck_CheckCompletion+0x38>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
      transfer_active_flag = 0;
 80032ce:	4b02      	ldr	r3, [pc, #8]	@ (80032d8 <FileTransferCheck_CheckCompletion+0x30>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
}
 80032d4:	e7ec      	b.n	80032b0 <FileTransferCheck_CheckCompletion+0x8>
 80032d6:	bf00      	nop
 80032d8:	20000e4c 	.word	0x20000e4c
 80032dc:	20000e50 	.word	0x20000e50
 80032e0:	20000e4d 	.word	0x20000e4d

080032e4 <FileTransferCheck>:
    transfer_complete_flag = 0;
}

// 파일 전송 완료 상태를 처리하는 함수
void FileTransferCheck(void)
{
 80032e4:	b508      	push	{r3, lr}
    return transfer_complete_flag;
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <FileTransferCheck+0x18>)
    if (FileTransferCheck_IsTransferComplete())
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b903      	cbnz	r3, 80032ee <FileTransferCheck+0xa>
    {
    	Buzzer_SetState(BUZZER_PROG_COMPLETE);               // 버저 완료 사운드 재생
      FileTransferCheck_ResetTransferCompleteFlag(); // 플래그 리셋
    }
}
 80032ec:	bd08      	pop	{r3, pc}
    	Buzzer_SetState(BUZZER_PROG_COMPLETE);               // 버저 완료 사운드 재생
 80032ee:	2002      	movs	r0, #2
 80032f0:	f000 f862 	bl	80033b8 <Buzzer_SetState>
    transfer_complete_flag = 0;
 80032f4:	4b01      	ldr	r3, [pc, #4]	@ (80032fc <FileTransferCheck+0x18>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
}
 80032fa:	e7f7      	b.n	80032ec <FileTransferCheck+0x8>
 80032fc:	20000e4d 	.word	0x20000e4d

08003300 <Button_Update>:
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
}

void Button_Update(void)
{
 8003300:	b508      	push	{r3, lr}
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 8003302:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003306:	4813      	ldr	r0, [pc, #76]	@ (8003354 <Button_Update+0x54>)
 8003308:	f001 fc0c 	bl	8004b24 <HAL_GPIO_ReadPin>
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <Button_Update+0x58>)
 800330e:	7018      	strb	r0, [r3, #0]

    if (current_state != last_button_state)
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <Button_Update+0x5c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4283      	cmp	r3, r0
 8003316:	d117      	bne.n	8003348 <Button_Update+0x48>
    {
        last_debounce_time = HAL_GetTick();
    }

    if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY_MS)
 8003318:	f001 f872 	bl	8004400 <HAL_GetTick>
 800331c:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <Button_Update+0x60>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1ac0      	subs	r0, r0, r3
 8003322:	2814      	cmp	r0, #20
 8003324:	d90b      	bls.n	800333e <Button_Update+0x3e>
    {
        if (current_state != button_state)
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <Button_Update+0x58>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4a0e      	ldr	r2, [pc, #56]	@ (8003364 <Button_Update+0x64>)
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d005      	beq.n	800333e <Button_Update+0x3e>
        {
            button_state = current_state;
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <Button_Update+0x64>)
 8003334:	7013      	strb	r3, [r2, #0]

            if (button_state == GPIO_PIN_RESET)
 8003336:	b913      	cbnz	r3, 800333e <Button_Update+0x3e>
            {
                button_pressed_event = 1;
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <Button_Update+0x68>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    last_button_state = current_state;
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <Button_Update+0x58>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <Button_Update+0x5c>)
 8003344:	701a      	strb	r2, [r3, #0]
}
 8003346:	bd08      	pop	{r3, pc}
        last_debounce_time = HAL_GetTick();
 8003348:	f001 f85a 	bl	8004400 <HAL_GetTick>
 800334c:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <Button_Update+0x60>)
 800334e:	6018      	str	r0, [r3, #0]
 8003350:	e7e2      	b.n	8003318 <Button_Update+0x18>
 8003352:	bf00      	nop
 8003354:	40020000 	.word	0x40020000
 8003358:	20000e55 	.word	0x20000e55
 800335c:	20000004 	.word	0x20000004
 8003360:	20000e58 	.word	0x20000e58
 8003364:	20000005 	.word	0x20000005
 8003368:	20000e54 	.word	0x20000e54

0800336c <Button_WasPressed>:

uint8_t Button_WasPressed(void)
{
    if (button_pressed_event)
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <Button_WasPressed+0x10>)
 800336e:	7818      	ldrb	r0, [r3, #0]
 8003370:	b900      	cbnz	r0, 8003374 <Button_WasPressed+0x8>
    {
        button_pressed_event = 0;
        return 1;
    }
    return 0;
}
 8003372:	4770      	bx	lr
        button_pressed_event = 0;
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
        return 1;
 8003378:	2001      	movs	r0, #1
 800337a:	e7fa      	b.n	8003372 <Button_WasPressed+0x6>
 800337c:	20000e54 	.word	0x20000e54

08003380 <SetBuzzerFrequency>:
			break;
	}
	state = BUZZER_IDLE;
}

void SetBuzzerFrequency(uint32_t frequency) {
 8003380:	b508      	push	{r3, lr}
    if (frequency > 0) {
 8003382:	b168      	cbz	r0, 80033a0 <SetBuzzerFrequency+0x20>
        // 타이머 주기 계산: 타이머 클럭(1MHz)에서 원하는 주파수를 설정
        uint32_t period = (1000000 / frequency) - 1;
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <SetBuzzerFrequency+0x30>)
 8003386:	fbb3 f3f0 	udiv	r3, r3, r0
 800338a:	3b01      	subs	r3, #1

        // 주기(ARR)를 설정하여 타이머의 PWM 주파수를 조정
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 800338c:	4809      	ldr	r0, [pc, #36]	@ (80033b4 <SetBuzzerFrequency+0x34>)
 800338e:	6802      	ldr	r2, [r0, #0]
 8003390:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003392:	60c3      	str	r3, [r0, #12]

        // 듀티 사이클을 50%로 설정 (부저가 50% 듀티에서 동작하도록)
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	63d3      	str	r3, [r2, #60]	@ 0x3c

        // 타이머 PWM 시작
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003398:	2108      	movs	r1, #8
 800339a:	f004 fa1f 	bl	80077dc <HAL_TIM_PWM_Start>
    } else {
        // 주파수가 0이면 부저를 끕니다
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
    }
}
 800339e:	bd08      	pop	{r3, pc}
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 80033a0:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <SetBuzzerFrequency+0x34>)
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80033a8:	2108      	movs	r1, #8
 80033aa:	f004 fa91 	bl	80078d0 <HAL_TIM_PWM_Stop>
}
 80033ae:	e7f6      	b.n	800339e <SetBuzzerFrequency+0x1e>
 80033b0:	000f4240 	.word	0x000f4240
 80033b4:	2000100c 	.word	0x2000100c

080033b8 <Buzzer_SetState>:
{
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 80033ba:	2804      	cmp	r0, #4
 80033bc:	d80e      	bhi.n	80033dc <Buzzer_SetState+0x24>
 80033be:	e8df f000 	tbb	[pc, r0]
 80033c2:	0e03      	.short	0x0e03
 80033c4:	2318      	.short	0x2318
 80033c6:	38          	.byte	0x38
 80033c7:	00          	.byte	0x00

void PlayBootSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 80033c8:	2064      	movs	r0, #100	@ 0x64
 80033ca:	f7ff ffd9 	bl	8003380 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(500);
 80033ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033d2:	f001 f81b 	bl	800440c <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7ff ffd2 	bl	8003380 <SetBuzzerFrequency>
}
 80033dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

void PlayDuringProgrammingSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 80033de:	2064      	movs	r0, #100	@ 0x64
 80033e0:	f7ff ffce 	bl	8003380 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(150);
 80033e4:	2096      	movs	r0, #150	@ 0x96
 80033e6:	f001 f811 	bl	800440c <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7ff ffc8 	bl	8003380 <SetBuzzerFrequency>
}
 80033f0:	e7f4      	b.n	80033dc <Buzzer_SetState+0x24>

void PlayProgrammingCompleteSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 80033f2:	2064      	movs	r0, #100	@ 0x64
 80033f4:	f7ff ffc4 	bl	8003380 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(300);
 80033f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80033fc:	f001 f806 	bl	800440c <HAL_Delay>

    /* Set Frequency */
    SetBuzzerFrequency(0);
 8003400:	2000      	movs	r0, #0
 8003402:	f7ff ffbd 	bl	8003380 <SetBuzzerFrequency>

    /* Set Duration */
    //HAL_Delay(300);
}
 8003406:	e7e9      	b.n	80033dc <Buzzer_SetState+0x24>
	switch(state)
 8003408:	2405      	movs	r4, #5
void PlayProgrammingFailedSound(void){

    for (uint8_t i = 0; i < 5; i++)
    {
    		/* Set Frequency */
        SetBuzzerFrequency(DEFAULT_FREQ);
 800340a:	2764      	movs	r7, #100	@ 0x64

        /* Set Duration */
        HAL_Delay(150);
 800340c:	2596      	movs	r5, #150	@ 0x96

        /* Buzzer Off */
        SetBuzzerFrequency(0);
 800340e:	2600      	movs	r6, #0
        SetBuzzerFrequency(DEFAULT_FREQ);
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ffb5 	bl	8003380 <SetBuzzerFrequency>
        HAL_Delay(150);
 8003416:	4628      	mov	r0, r5
 8003418:	f000 fff8 	bl	800440c <HAL_Delay>
        SetBuzzerFrequency(0);
 800341c:	4630      	mov	r0, r6
 800341e:	f7ff ffaf 	bl	8003380 <SetBuzzerFrequency>

        /* Set Duration */
        HAL_Delay(150);
 8003422:	4628      	mov	r0, r5
 8003424:	f000 fff2 	bl	800440c <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 8003428:	1e63      	subs	r3, r4, #1
 800342a:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 800342e:	d1ef      	bne.n	8003410 <Buzzer_SetState+0x58>
 8003430:	e7d4      	b.n	80033dc <Buzzer_SetState+0x24>
}

void PlayIdleSound(void)
{
    // No sound during idle
    SetBuzzerFrequency(0);
 8003432:	2000      	movs	r0, #0
 8003434:	f7ff ffa4 	bl	8003380 <SetBuzzerFrequency>
}
 8003438:	e7d0      	b.n	80033dc <Buzzer_SetState+0x24>
	...

0800343c <ihex_reset_state>:
}
#endif

void ihex_reset_state()
{
    state = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <ihex_reset_state+0x14>)
 8003440:	7013      	strb	r3, [r2, #0]
    address_lo = 0;
 8003442:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <ihex_reset_state+0x18>)
 8003444:	8013      	strh	r3, [r2, #0]
    address_hi = 0;
 8003446:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <ihex_reset_state+0x1c>)
 8003448:	8013      	strh	r3, [r2, #0]
    ex_segment_addr_mode = false;
 800344a:	4a04      	ldr	r2, [pc, #16]	@ (800345c <ihex_reset_state+0x20>)
 800344c:	7013      	strb	r3, [r2, #0]
}
 800344e:	4770      	bx	lr
 8003450:	20000f6f 	.word	0x20000f6f
 8003454:	20000f6c 	.word	0x20000f6c
 8003458:	20000f6a 	.word	0x20000f6a
 800345c:	20000f68 	.word	0x20000f68

08003460 <ihex_set_callback_func>:

void ihex_set_callback_func(ihex_callback_fp fp)
{
    callback_fp = fp;
 8003460:	4b01      	ldr	r3, [pc, #4]	@ (8003468 <ihex_set_callback_func+0x8>)
 8003462:	6018      	str	r0, [r3, #0]
}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000e5c 	.word	0x20000e5c

0800346c <ihex_parser>:
bool ihex_parser(const uint8_t *steambuf, uint32_t size)
{
    uint32_t i;
    uint8_t c, hc;
    
    for (i = 0; i<size; i++)
 800346c:	2900      	cmp	r1, #0
 800346e:	f000 8190 	beq.w	8003792 <ihex_parser+0x326>
{
 8003472:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003476:	2500      	movs	r5, #0
 8003478:	1e44      	subs	r4, r0, #1
 800347a:	4408      	add	r0, r1
 800347c:	1e46      	subs	r6, r0, #1
        if (c == '\0')
        {
            return true;
        }

        if (state == START_CODE_STATE)
 800347e:	4f9b      	ldr	r7, [pc, #620]	@ (80036ec <ihex_parser+0x280>)
            if ((hc = HexToDec(c)) == INVALID_HEX_CHAR)
            {
                return false;
            }

            if (!calc_cs_toogle)
 8003480:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 8003728 <ihex_parser+0x2bc>
            calc_cs = 0x00;
 8003484:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8003708 <ihex_parser+0x29c>
 8003488:	e045      	b.n	8003516 <ihex_parser+0xaa>
        else if (state >= BYTE_COUNT_0_STATE && state <= CHECKSUM_1_STATE)
 800348a:	1e59      	subs	r1, r3, #1
 800348c:	b2c9      	uxtb	r1, r1
 800348e:	290a      	cmp	r1, #10
 8003490:	d81b      	bhi.n	80034ca <ihex_parser+0x5e>
    if (h >= '0' && h <= '9')
 8003492:	f1a2 0530 	sub.w	r5, r2, #48	@ 0x30
 8003496:	b2ed      	uxtb	r5, r5
 8003498:	2d09      	cmp	r5, #9
 800349a:	d90d      	bls.n	80034b8 <ihex_parser+0x4c>
    else if (h >= 'A' && h <= 'F')
 800349c:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	2905      	cmp	r1, #5
 80034a4:	d91c      	bls.n	80034e0 <ihex_parser+0x74>
    else if (h >= 'a' && h <= 'z')
 80034a6:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 80034aa:	b2c9      	uxtb	r1, r1
 80034ac:	2919      	cmp	r1, #25
 80034ae:	f200 8174 	bhi.w	800379a <ihex_parser+0x32e>
        return h - 'a' + 0xA;
 80034b2:	f1a2 0557 	sub.w	r5, r2, #87	@ 0x57
 80034b6:	b2ed      	uxtb	r5, r5
            if (!calc_cs_toogle)
 80034b8:	f898 1000 	ldrb.w	r1, [r8]
 80034bc:	f081 0001 	eor.w	r0, r1, #1
 80034c0:	b991      	cbnz	r1, 80034e8 <ihex_parser+0x7c>
            {
                temp_cs = hc;
 80034c2:	498b      	ldr	r1, [pc, #556]	@ (80036f0 <ihex_parser+0x284>)
 80034c4:	700d      	strb	r5, [r1, #0]
            }
            else
            {
                calc_cs += (temp_cs << 4) | hc;
            }
            calc_cs_toogle = !calc_cs_toogle;
 80034c6:	f888 0000 	strb.w	r0, [r8]
        }

        switch (state)
 80034ca:	2b0b      	cmp	r3, #11
 80034cc:	f200 8168 	bhi.w	80037a0 <ihex_parser+0x334>
 80034d0:	e8df f003 	tbb	[pc, r3]
 80034d4:	4b16162d 	.word	0x4b16162d
 80034d8:	544b4b4b 	.word	0x544b4b4b
 80034dc:	87836b5b 	.word	0x87836b5b
        return h - 'A' + 0xA;
 80034e0:	f1a2 0537 	sub.w	r5, r2, #55	@ 0x37
 80034e4:	b2ed      	uxtb	r5, r5
 80034e6:	e7e7      	b.n	80034b8 <ihex_parser+0x4c>
                calc_cs += (temp_cs << 4) | hc;
 80034e8:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003708 <ihex_parser+0x29c>
 80034ec:	4980      	ldr	r1, [pc, #512]	@ (80036f0 <ihex_parser+0x284>)
 80034ee:	7809      	ldrb	r1, [r1, #0]
 80034f0:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
 80034f4:	f89c e000 	ldrb.w	lr, [ip]
 80034f8:	4471      	add	r1, lr
 80034fa:	f88c 1000 	strb.w	r1, [ip]
 80034fe:	e7e2      	b.n	80034c6 <ihex_parser+0x5a>
            }
            break;

        case BYTE_COUNT_0_STATE:
        case BYTE_COUNT_1_STATE:
            byte_count = (byte_count << 4) | hc;
 8003500:	497c      	ldr	r1, [pc, #496]	@ (80036f4 <ihex_parser+0x288>)
 8003502:	780a      	ldrb	r2, [r1, #0]
 8003504:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 8003508:	700a      	strb	r2, [r1, #0]
            ++state;
 800350a:	3301      	adds	r3, #1
 800350c:	4a77      	ldr	r2, [pc, #476]	@ (80036ec <ihex_parser+0x280>)
 800350e:	7013      	strb	r3, [r2, #0]
    for (i = 0; i<size; i++)
 8003510:	42b4      	cmp	r4, r6
 8003512:	f000 813c 	beq.w	800378e <ihex_parser+0x322>
        c = steambuf[i];
 8003516:	f814 2f01 	ldrb.w	r2, [r4, #1]!
        if (c == '\0')
 800351a:	2a00      	cmp	r2, #0
 800351c:	f000 813b 	beq.w	8003796 <ihex_parser+0x32a>
        if (state == START_CODE_STATE)
 8003520:	783b      	ldrb	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1b1      	bne.n	800348a <ihex_parser+0x1e>
            calc_cs = 0x00;
 8003526:	f889 3000 	strb.w	r3, [r9]
            calc_cs_toogle = false;
 800352a:	f888 3000 	strb.w	r3, [r8]
            if (c == '\r' || c == '\n')
 800352e:	2a0d      	cmp	r2, #13
 8003530:	d0ee      	beq.n	8003510 <ihex_parser+0xa4>
 8003532:	2a0a      	cmp	r2, #10
 8003534:	d0ec      	beq.n	8003510 <ihex_parser+0xa4>
            else if (c == ':')
 8003536:	2a3a      	cmp	r2, #58	@ 0x3a
 8003538:	f040 8134 	bne.w	80037a4 <ihex_parser+0x338>
                byte_count = 0;
 800353c:	f04f 0a00 	mov.w	sl, #0
 8003540:	4b6c      	ldr	r3, [pc, #432]	@ (80036f4 <ihex_parser+0x288>)
 8003542:	f883 a000 	strb.w	sl, [r3]
                record_type = 0;
 8003546:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <ihex_parser+0x28c>)
 8003548:	f883 a000 	strb.w	sl, [r3]
                address_lo = 0x0000;
 800354c:	4b6b      	ldr	r3, [pc, #428]	@ (80036fc <ihex_parser+0x290>)
 800354e:	f8a3 a000 	strh.w	sl, [r3]
                memset(data, 0xFF, sizeof(data));
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	4611      	mov	r1, r2
 8003556:	486a      	ldr	r0, [pc, #424]	@ (8003700 <ihex_parser+0x294>)
 8003558:	f00a f87a 	bl	800d650 <memset>
                data_size_in_nibble = 0;
 800355c:	4b69      	ldr	r3, [pc, #420]	@ (8003704 <ihex_parser+0x298>)
 800355e:	f8a3 a000 	strh.w	sl, [r3]
                ++state;
 8003562:	4b62      	ldr	r3, [pc, #392]	@ (80036ec <ihex_parser+0x280>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
            break;
 8003568:	e7d2      	b.n	8003510 <ihex_parser+0xa4>
        case ADDR_0_STATE:
        case ADDR_1_STATE:
        case ADDR_2_STATE:
        case ADDR_3_STATE:
        {
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 800356a:	4964      	ldr	r1, [pc, #400]	@ (80036fc <ihex_parser+0x290>)
 800356c:	880a      	ldrh	r2, [r1, #0]
 800356e:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 8003572:	800a      	strh	r2, [r1, #0]
            ++state;
 8003574:	3301      	adds	r3, #1
 8003576:	4a5d      	ldr	r2, [pc, #372]	@ (80036ec <ihex_parser+0x280>)
 8003578:	7013      	strb	r3, [r2, #0]
            break;
 800357a:	e7c9      	b.n	8003510 <ihex_parser+0xa4>
        }
        
        case RECORD_TYPE_0_STATE:
            if (hc != 0)
 800357c:	2d00      	cmp	r5, #0
 800357e:	f040 8113 	bne.w	80037a8 <ihex_parser+0x33c>
            {
                return false;
            }
            ++state;
 8003582:	4b5a      	ldr	r3, [pc, #360]	@ (80036ec <ihex_parser+0x280>)
 8003584:	2208      	movs	r2, #8
 8003586:	701a      	strb	r2, [r3, #0]
            break;
 8003588:	e7c2      	b.n	8003510 <ihex_parser+0xa4>

        case RECORD_TYPE_1_STATE:
            if (hc > 5)
 800358a:	2d05      	cmp	r5, #5
 800358c:	f200 810e 	bhi.w	80037ac <ihex_parser+0x340>
            {
                return false;
            }
            
            record_type = hc;
 8003590:	4b59      	ldr	r3, [pc, #356]	@ (80036f8 <ihex_parser+0x28c>)
 8003592:	701d      	strb	r5, [r3, #0]

            if (byte_count == 0)
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <ihex_parser+0x288>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b91b      	cbnz	r3, 80035a2 <ihex_parser+0x136>
            {
                state = CHECKSUM_0_STATE;
 800359a:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <ihex_parser+0x280>)
 800359c:	220a      	movs	r2, #10
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e7b6      	b.n	8003510 <ihex_parser+0xa4>
            {
                return false;
            }
            else
            {
                ++state;
 80035a2:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <ihex_parser+0x280>)
 80035a4:	2209      	movs	r2, #9
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e7b2      	b.n	8003510 <ihex_parser+0xa4>

            break;

        case DATA_STATE:
        {
            uint8_t b_index = data_size_in_nibble >> 1;
 80035aa:	4956      	ldr	r1, [pc, #344]	@ (8003704 <ihex_parser+0x298>)
 80035ac:	880b      	ldrh	r3, [r1, #0]
            data[b_index] = (data[b_index] << 4) | hc;
 80035ae:	f3c3 0047 	ubfx	r0, r3, #1, #8
 80035b2:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8003700 <ihex_parser+0x294>
 80035b6:	f81c 2000 	ldrb.w	r2, [ip, r0]
 80035ba:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 80035be:	f80c 2000 	strb.w	r2, [ip, r0]

            ++data_size_in_nibble;
 80035c2:	3301      	adds	r3, #1
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	800b      	strh	r3, [r1, #0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 80035c8:	4a4a      	ldr	r2, [pc, #296]	@ (80036f4 <ihex_parser+0x288>)
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 80035d0:	d89e      	bhi.n	8003510 <ihex_parser+0xa4>
            {
                ++state;
 80035d2:	4b46      	ldr	r3, [pc, #280]	@ (80036ec <ihex_parser+0x280>)
 80035d4:	220a      	movs	r2, #10
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e79a      	b.n	8003510 <ihex_parser+0xa4>
            }
            break;
        }
        
        case CHECKSUM_0_STATE:
            ++state;
 80035da:	4b44      	ldr	r3, [pc, #272]	@ (80036ec <ihex_parser+0x280>)
 80035dc:	220b      	movs	r2, #11
 80035de:	701a      	strb	r2, [r3, #0]
            break;
 80035e0:	e796      	b.n	8003510 <ihex_parser+0xa4>

        case CHECKSUM_1_STATE:
            if((byte_count<<1) != data_size_in_nibble)  // Check whether byte count field match the data size 
 80035e2:	4b44      	ldr	r3, [pc, #272]	@ (80036f4 <ihex_parser+0x288>)
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <ihex_parser+0x298>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80035ee:	f040 80df 	bne.w	80037b0 <ihex_parser+0x344>
            {
                return false;
            }
            
            if (calc_cs != 0x00)
 80035f2:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <ihex_parser+0x29c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 80dc 	bne.w	80037b4 <ihex_parser+0x348>
            {
                return false;
            }

            if (record_type == 2)           // Set extended segment addresss
 80035fc:	4b3e      	ldr	r3, [pc, #248]	@ (80036f8 <ihex_parser+0x28c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d008      	beq.n	8003616 <ihex_parser+0x1aa>
            {
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
                ex_segment_addr_mode = true;
            }
            else if (record_type == 4)      // Set linear addresss
 8003604:	2b04      	cmp	r3, #4
 8003606:	d017      	beq.n	8003638 <ihex_parser+0x1cc>
    switch (record_type)
 8003608:	2b05      	cmp	r3, #5
 800360a:	d846      	bhi.n	800369a <ihex_parser+0x22e>
 800360c:	e8df f003 	tbb	[pc, r3]
 8003610:	978e6922 	.word	0x978e6922
 8003614:	a79b      	.short	0xa79b
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003616:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <ihex_parser+0x294>)
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003620:	4a3a      	ldr	r2, [pc, #232]	@ (800370c <ihex_parser+0x2a0>)
 8003622:	8013      	strh	r3, [r2, #0]
                ex_segment_addr_mode = true;
 8003624:	4b3a      	ldr	r3, [pc, #232]	@ (8003710 <ihex_parser+0x2a4>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
    		printf("Set Extended Segment Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 800362a:	4b38      	ldr	r3, [pc, #224]	@ (800370c <ihex_parser+0x2a0>)
 800362c:	8819      	ldrh	r1, [r3, #0]
 800362e:	0109      	lsls	r1, r1, #4
 8003630:	4838      	ldr	r0, [pc, #224]	@ (8003714 <ihex_parser+0x2a8>)
 8003632:	f009 fe37 	bl	800d2a4 <iprintf>
        break;
 8003636:	e030      	b.n	800369a <ihex_parser+0x22e>
            {
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003638:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <ihex_parser+0x294>)
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003642:	4a32      	ldr	r2, [pc, #200]	@ (800370c <ihex_parser+0x2a0>)
 8003644:	8013      	strh	r3, [r2, #0]
                ex_segment_addr_mode = false;
 8003646:	4b32      	ldr	r3, [pc, #200]	@ (8003710 <ihex_parser+0x2a4>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
        printf("Set Linear Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 800364c:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <ihex_parser+0x2a0>)
 800364e:	8819      	ldrh	r1, [r3, #0]
 8003650:	0409      	lsls	r1, r1, #16
 8003652:	e080      	b.n	8003756 <ihex_parser+0x2ea>
        uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003654:	4b2e      	ldr	r3, [pc, #184]	@ (8003710 <ihex_parser+0x2a4>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03b      	beq.n	80036d4 <ihex_parser+0x268>
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <ihex_parser+0x2a0>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	4a26      	ldr	r2, [pc, #152]	@ (80036fc <ihex_parser+0x290>)
 8003662:	8811      	ldrh	r1, [r2, #0]
 8003664:	eb01 1103 	add.w	r1, r1, r3, lsl #4
        printf("WriteData (0x%08"PRIX32"):", address);
 8003668:	482b      	ldr	r0, [pc, #172]	@ (8003718 <ihex_parser+0x2ac>)
 800366a:	f009 fe1b 	bl	800d2a4 <iprintf>
        uint8_t data_size = data_size_in_nibble >> 1;
 800366e:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <ihex_parser+0x298>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	f3c3 0347 	ubfx	r3, r3, #1, #8
        for (i = 0; i < data_size; i++)
 8003676:	b16b      	cbz	r3, 8003694 <ihex_parser+0x228>
 8003678:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8003700 <ihex_parser+0x294>
 800367c:	3b01      	subs	r3, #1
 800367e:	f10a 0201 	add.w	r2, sl, #1
 8003682:	fa52 fb83 	uxtab	fp, r2, r3
            printf("%02"PRIX16" ", data[i]);
 8003686:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800368a:	4824      	ldr	r0, [pc, #144]	@ (800371c <ihex_parser+0x2b0>)
 800368c:	f009 fe0a 	bl	800d2a4 <iprintf>
        for (i = 0; i < data_size; i++)
 8003690:	45d3      	cmp	fp, sl
 8003692:	d1f8      	bne.n	8003686 <ihex_parser+0x21a>
        printf("\n");
 8003694:	200a      	movs	r0, #10
 8003696:	f009 fe17 	bl	800d2c8 <putchar>

#if (CONFIG_IHEX_DEBUG_OUTPUT > 0u)
            ihex_debug_output();
#endif

            if (record_type == 0 && callback_fp != 0)
 800369a:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <ihex_parser+0x28c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <ihex_parser+0x308>
 80036a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <ihex_parser+0x2b4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b18b      	cbz	r3, 80036cc <ihex_parser+0x260>
            {
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 80036a8:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <ihex_parser+0x2a4>)
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d05a      	beq.n	8003766 <ihex_parser+0x2fa>
 80036b0:	4a16      	ldr	r2, [pc, #88]	@ (800370c <ihex_parser+0x2a0>)
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	4911      	ldr	r1, [pc, #68]	@ (80036fc <ihex_parser+0x290>)
 80036b6:	8808      	ldrh	r0, [r1, #0]
 80036b8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
                if(!callback_fp(address, data, data_size_in_nibble>>1))
 80036bc:	4a11      	ldr	r2, [pc, #68]	@ (8003704 <ihex_parser+0x298>)
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	f3c2 0247 	ubfx	r2, r2, #1, #8
 80036c4:	490e      	ldr	r1, [pc, #56]	@ (8003700 <ihex_parser+0x294>)
 80036c6:	4798      	blx	r3
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d067      	beq.n	800379c <ihex_parser+0x330>
            {
            	callback_fp(0,0,0);
            }


            state = START_CODE_STATE;
 80036cc:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <ihex_parser+0x280>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
            break;
 80036d2:	e71d      	b.n	8003510 <ihex_parser+0xa4>
        uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 80036d4:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <ihex_parser+0x2a0>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <ihex_parser+0x290>)
 80036da:	8811      	ldrh	r1, [r2, #0]
 80036dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80036e0:	e7c2      	b.n	8003668 <ihex_parser+0x1fc>
        printf("EOF\n");
 80036e2:	4810      	ldr	r0, [pc, #64]	@ (8003724 <ihex_parser+0x2b8>)
 80036e4:	f009 fe4e 	bl	800d384 <puts>
        break;
 80036e8:	e7d7      	b.n	800369a <ihex_parser+0x22e>
 80036ea:	bf00      	nop
 80036ec:	20000f6f 	.word	0x20000f6f
 80036f0:	20000e62 	.word	0x20000e62
 80036f4:	20000f6e 	.word	0x20000f6e
 80036f8:	20000f67 	.word	0x20000f67
 80036fc:	20000f6c 	.word	0x20000f6c
 8003700:	20000e68 	.word	0x20000e68
 8003704:	20000e64 	.word	0x20000e64
 8003708:	20000e61 	.word	0x20000e61
 800370c:	20000f6a 	.word	0x20000f6a
 8003710:	20000f68 	.word	0x20000f68
 8003714:	0800f08c 	.word	0x0800f08c
 8003718:	0800f068 	.word	0x0800f068
 800371c:	0800f080 	.word	0x0800f080
 8003720:	20000e5c 	.word	0x20000e5c
 8003724:	0800f088 	.word	0x0800f088
 8003728:	20000e60 	.word	0x20000e60
    		printf("Set Extended Segment Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 800372c:	4b22      	ldr	r3, [pc, #136]	@ (80037b8 <ihex_parser+0x34c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f47f af7a 	bne.w	800362a <ihex_parser+0x1be>
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <ihex_parser+0x350>)
 8003738:	8819      	ldrh	r1, [r3, #0]
 800373a:	0409      	lsls	r1, r1, #16
 800373c:	e778      	b.n	8003630 <ihex_parser+0x1c4>
        printf("Start extended segment address\n");
 800373e:	4820      	ldr	r0, [pc, #128]	@ (80037c0 <ihex_parser+0x354>)
 8003740:	f009 fe20 	bl	800d384 <puts>
        break;
 8003744:	e7a9      	b.n	800369a <ihex_parser+0x22e>
        printf("Set Linear Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003746:	4b1c      	ldr	r3, [pc, #112]	@ (80037b8 <ihex_parser+0x34c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f43f af7e 	beq.w	800364c <ihex_parser+0x1e0>
 8003750:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <ihex_parser+0x350>)
 8003752:	8819      	ldrh	r1, [r3, #0]
 8003754:	0109      	lsls	r1, r1, #4
 8003756:	481b      	ldr	r0, [pc, #108]	@ (80037c4 <ihex_parser+0x358>)
 8003758:	f009 fda4 	bl	800d2a4 <iprintf>
        break;
 800375c:	e79d      	b.n	800369a <ihex_parser+0x22e>
        printf("Start linear address\n");
 800375e:	481a      	ldr	r0, [pc, #104]	@ (80037c8 <ihex_parser+0x35c>)
 8003760:	f009 fe10 	bl	800d384 <puts>
        break;
 8003764:	e799      	b.n	800369a <ihex_parser+0x22e>
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003766:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <ihex_parser+0x350>)
 8003768:	8812      	ldrh	r2, [r2, #0]
 800376a:	4918      	ldr	r1, [pc, #96]	@ (80037cc <ihex_parser+0x360>)
 800376c:	8808      	ldrh	r0, [r1, #0]
 800376e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003772:	e7a3      	b.n	80036bc <ihex_parser+0x250>
            else if((record_type == 1) && (target.TargetFamily == TARGET_STM32H7)) //Add for STM32H7, hex 'End Of File' 32byte(8word) programming unit
 8003774:	2b01      	cmp	r3, #1
 8003776:	d1a9      	bne.n	80036cc <ihex_parser+0x260>
 8003778:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <ihex_parser+0x364>)
 800377a:	7a1b      	ldrb	r3, [r3, #8]
 800377c:	2b0f      	cmp	r3, #15
 800377e:	d1a5      	bne.n	80036cc <ihex_parser+0x260>
            	callback_fp(0,0,0);
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <ihex_parser+0x368>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	4611      	mov	r1, r2
 8003788:	4610      	mov	r0, r2
 800378a:	4798      	blx	r3
 800378c:	e79e      	b.n	80036cc <ihex_parser+0x260>

        default:
            return false;
        }
    }
    return true;
 800378e:	2001      	movs	r0, #1
 8003790:	e004      	b.n	800379c <ihex_parser+0x330>
 8003792:	2001      	movs	r0, #1
}
 8003794:	4770      	bx	lr
            return true;
 8003796:	2001      	movs	r0, #1
 8003798:	e000      	b.n	800379c <ihex_parser+0x330>
                return false;
 800379a:	2000      	movs	r0, #0
}
 800379c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (state)
 80037a0:	2000      	movs	r0, #0
 80037a2:	e7fb      	b.n	800379c <ihex_parser+0x330>
                return false;
 80037a4:	2000      	movs	r0, #0
 80037a6:	e7f9      	b.n	800379c <ihex_parser+0x330>
                return false;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e7f7      	b.n	800379c <ihex_parser+0x330>
                return false;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7f5      	b.n	800379c <ihex_parser+0x330>
                return false;
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7f3      	b.n	800379c <ihex_parser+0x330>
                return false;
 80037b4:	2000      	movs	r0, #0
 80037b6:	e7f1      	b.n	800379c <ihex_parser+0x330>
 80037b8:	20000f68 	.word	0x20000f68
 80037bc:	20000f6a 	.word	0x20000f6a
 80037c0:	0800f0b0 	.word	0x0800f0b0
 80037c4:	0800f0d0 	.word	0x0800f0d0
 80037c8:	0800f0ec 	.word	0x0800f0ec
 80037cc:	20000f6c 	.word	0x20000f6c
 80037d0:	20000e30 	.word	0x20000e30
 80037d4:	20000e5c 	.word	0x20000e5c

080037d8 <LED_On>:
// LED 제어 함수
void LED_Toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
}

void LED_On(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80037d8:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80037da:	2200      	movs	r2, #0
 80037dc:	f001 f9a8 	bl	8004b30 <HAL_GPIO_WritePin>
}
 80037e0:	bd08      	pop	{r3, pc}

080037e2 <LED_Off>:

void LED_Off(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80037e2:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80037e4:	2201      	movs	r2, #1
 80037e6:	f001 f9a3 	bl	8004b30 <HAL_GPIO_WritePin>
}
 80037ea:	bd08      	pop	{r3, pc}

080037ec <LED_Handler>:

// SysTick 인터럽트 핸들러
void LED_Handler(void)
{
 80037ec:	b510      	push	{r4, lr}
    static uint32_t counter = 0;

    counter += SYS_TICK_PERIOD_MS;
 80037ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003928 <LED_Handler+0x13c>)
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	6013      	str	r3, [r2, #0]
    static uint8_t step = 0;  // LED 순차적 제어를 위한 단계 변수


    switch (currentState) {
 80037f6:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <LED_Handler+0x140>)
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	2a03      	cmp	r2, #3
 80037fc:	d871      	bhi.n	80038e2 <LED_Handler+0xf6>
 80037fe:	e8df f002 	tbb	[pc, r2]
 8003802:	5f02      	.short	0x5f02
 8003804:	8476      	.short	0x8476
        case TARGET_LED_STAT_BOOT:
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 0) {
 8003806:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800380a:	d36a      	bcc.n	80038e2 <LED_Handler+0xf6>
 800380c:	4b48      	ldr	r3, [pc, #288]	@ (8003930 <LED_Handler+0x144>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b1bb      	cbz	r3, 8003842 <LED_Handler+0x56>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
            	step++;
            	counter = 0;  // 카운터 초기화
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 1) {
 8003812:	2b01      	cmp	r3, #1
 8003814:	d02a      	beq.n	800386c <LED_Handler+0x80>
            	LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);  // 주황색 켜기
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
            	step++;
            	counter = 0;
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 2) {
 8003816:	2b02      	cmp	r3, #2
 8003818:	d03d      	beq.n	8003896 <LED_Handler+0xaa>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            	LED_On(LED_RED_GPIO_Port, LED_RED_Pin);        // 빨간색 켜기
            	step++;
            	counter = 0;
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 3) {
 800381a:	2b03      	cmp	r3, #3
 800381c:	d161      	bne.n	80038e2 <LED_Handler+0xf6>
            	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);    // 초록색 켜고 나머지 끄기
 800381e:	4c45      	ldr	r4, [pc, #276]	@ (8003934 <LED_Handler+0x148>)
 8003820:	2104      	movs	r1, #4
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ffd8 	bl	80037d8 <LED_On>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003828:	2108      	movs	r1, #8
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff ffd9 	bl	80037e2 <LED_Off>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003830:	2110      	movs	r1, #16
 8003832:	4620      	mov	r0, r4
 8003834:	f7ff ffd5 	bl	80037e2 <LED_Off>
            	step++;  // 마지막 단계로 진행
 8003838:	4a3d      	ldr	r2, [pc, #244]	@ (8003930 <LED_Handler+0x144>)
 800383a:	7813      	ldrb	r3, [r2, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	7013      	strb	r3, [r2, #0]
 8003840:	e04f      	b.n	80038e2 <LED_Handler+0xf6>
            	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);   // 초록색 켜기
 8003842:	4c3c      	ldr	r4, [pc, #240]	@ (8003934 <LED_Handler+0x148>)
 8003844:	2104      	movs	r1, #4
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff ffc6 	bl	80037d8 <LED_On>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800384c:	2108      	movs	r1, #8
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ffc7 	bl	80037e2 <LED_Off>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003854:	2110      	movs	r1, #16
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff ffc3 	bl	80037e2 <LED_Off>
            	step++;
 800385c:	4a34      	ldr	r2, [pc, #208]	@ (8003930 <LED_Handler+0x144>)
 800385e:	7813      	ldrb	r3, [r2, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	7013      	strb	r3, [r2, #0]
            	counter = 0;  // 카운터 초기화
 8003864:	4b30      	ldr	r3, [pc, #192]	@ (8003928 <LED_Handler+0x13c>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e03a      	b.n	80038e2 <LED_Handler+0xf6>
            	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800386c:	4c31      	ldr	r4, [pc, #196]	@ (8003934 <LED_Handler+0x148>)
 800386e:	2104      	movs	r1, #4
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff ffb6 	bl	80037e2 <LED_Off>
            	LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);  // 주황색 켜기
 8003876:	2108      	movs	r1, #8
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff ffad 	bl	80037d8 <LED_On>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 800387e:	2110      	movs	r1, #16
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff ffae 	bl	80037e2 <LED_Off>
            	step++;
 8003886:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <LED_Handler+0x144>)
 8003888:	7813      	ldrb	r3, [r2, #0]
 800388a:	3301      	adds	r3, #1
 800388c:	7013      	strb	r3, [r2, #0]
            	counter = 0;
 800388e:	4b26      	ldr	r3, [pc, #152]	@ (8003928 <LED_Handler+0x13c>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e025      	b.n	80038e2 <LED_Handler+0xf6>
            	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8003896:	4c27      	ldr	r4, [pc, #156]	@ (8003934 <LED_Handler+0x148>)
 8003898:	2104      	movs	r1, #4
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff ffa1 	bl	80037e2 <LED_Off>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80038a0:	2108      	movs	r1, #8
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff9d 	bl	80037e2 <LED_Off>
            	LED_On(LED_RED_GPIO_Port, LED_RED_Pin);        // 빨간색 켜기
 80038a8:	2110      	movs	r1, #16
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ff94 	bl	80037d8 <LED_On>
            	step++;
 80038b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <LED_Handler+0x144>)
 80038b2:	7813      	ldrb	r3, [r2, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	7013      	strb	r3, [r2, #0]
            	counter = 0;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <LED_Handler+0x13c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e010      	b.n	80038e2 <LED_Handler+0xf6>
            }
            break;
        case TARGET_LED_STAT_PROGRAMMING:
            if (counter % 100 == 0) { // Fast toggle rate
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <LED_Handler+0x14c>)
 80038c2:	fba2 1203 	umull	r1, r2, r2, r3
 80038c6:	0952      	lsrs	r2, r2, #5
 80038c8:	2164      	movs	r1, #100	@ 0x64
 80038ca:	fb01 3312 	mls	r3, r1, r2, r3
 80038ce:	b14b      	cbz	r3, 80038e4 <LED_Handler+0xf8>
                LED_Toggle(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            }
          	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80038d0:	4c18      	ldr	r4, [pc, #96]	@ (8003934 <LED_Handler+0x148>)
 80038d2:	2104      	movs	r1, #4
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff ff84 	bl	80037e2 <LED_Off>
          	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 80038da:	2110      	movs	r1, #16
 80038dc:	4620      	mov	r0, r4
 80038de:	f7ff ff80 	bl	80037e2 <LED_Off>
          LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
            break;
        default:
            break;
    }
}
 80038e2:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80038e4:	2108      	movs	r1, #8
 80038e6:	4813      	ldr	r0, [pc, #76]	@ (8003934 <LED_Handler+0x148>)
 80038e8:	f001 f928 	bl	8004b3c <HAL_GPIO_TogglePin>
}
 80038ec:	e7f0      	b.n	80038d0 <LED_Handler+0xe4>
        	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80038ee:	4c11      	ldr	r4, [pc, #68]	@ (8003934 <LED_Handler+0x148>)
 80038f0:	2104      	movs	r1, #4
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff70 	bl	80037d8 <LED_On>
        	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80038f8:	2108      	movs	r1, #8
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7ff ff71 	bl	80037e2 <LED_Off>
        	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003900:	2110      	movs	r1, #16
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ff6d 	bl	80037e2 <LED_Off>
            break;
 8003908:	e7eb      	b.n	80038e2 <LED_Handler+0xf6>
        	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800390a:	4c0a      	ldr	r4, [pc, #40]	@ (8003934 <LED_Handler+0x148>)
 800390c:	2104      	movs	r1, #4
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff ff67 	bl	80037e2 <LED_Off>
          LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003914:	2108      	movs	r1, #8
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff63 	bl	80037e2 <LED_Off>
          LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 800391c:	2110      	movs	r1, #16
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff ff5a 	bl	80037d8 <LED_On>
}
 8003924:	e7dd      	b.n	80038e2 <LED_Handler+0xf6>
 8003926:	bf00      	nop
 8003928:	20000f74 	.word	0x20000f74
 800392c:	20000f78 	.word	0x20000f78
 8003930:	20000f70 	.word	0x20000f70
 8003934:	40021000 	.word	0x40021000
 8003938:	51eb851f 	.word	0x51eb851f

0800393c <LED_SetState>:

void LED_SetState(LedStatus status)
{
	currentState = status;
 800393c:	4b01      	ldr	r3, [pc, #4]	@ (8003944 <LED_SetState+0x8>)
 800393e:	7018      	strb	r0, [r3, #0]
}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000f78 	.word	0x20000f78

08003948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error_Handle()\n");
 800394a:	4802      	ldr	r0, [pc, #8]	@ (8003954 <Error_Handler+0xc>)
 800394c:	f009 fd1a 	bl	800d384 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003950:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003952:	e7fe      	b.n	8003952 <Error_Handler+0xa>
 8003954:	0800f104 	.word	0x0800f104

08003958 <SystemClock_Config>:
{
 8003958:	b500      	push	{lr}
 800395a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800395c:	2230      	movs	r2, #48	@ 0x30
 800395e:	2100      	movs	r1, #0
 8003960:	a808      	add	r0, sp, #32
 8003962:	f009 fe75 	bl	800d650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003966:	2300      	movs	r3, #0
 8003968:	9303      	str	r3, [sp, #12]
 800396a:	9304      	str	r3, [sp, #16]
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	9306      	str	r3, [sp, #24]
 8003970:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	4a21      	ldr	r2, [pc, #132]	@ (80039fc <SystemClock_Config+0xa4>)
 8003976:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003978:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800397c:	6411      	str	r1, [r2, #64]	@ 0x40
 800397e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003980:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8003984:	9201      	str	r2, [sp, #4]
 8003986:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003988:	9302      	str	r3, [sp, #8]
 800398a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <SystemClock_Config+0xa8>)
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039aa:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ac:	2302      	movs	r3, #2
 80039ae:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80039b4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039b6:	2204      	movs	r2, #4
 80039b8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80039ba:	2278      	movs	r2, #120	@ 0x78
 80039bc:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039be:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80039c0:	2305      	movs	r3, #5
 80039c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c4:	a808      	add	r0, sp, #32
 80039c6:	f001 fead 	bl	8005724 <HAL_RCC_OscConfig>
 80039ca:	b998      	cbnz	r0, 80039f4 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039cc:	230f      	movs	r3, #15
 80039ce:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d0:	2302      	movs	r3, #2
 80039d2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d4:	2300      	movs	r3, #0
 80039d6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039dc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039e2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80039e4:	2103      	movs	r1, #3
 80039e6:	a803      	add	r0, sp, #12
 80039e8:	f002 f906 	bl	8005bf8 <HAL_RCC_ClockConfig>
 80039ec:	b920      	cbnz	r0, 80039f8 <SystemClock_Config+0xa0>
}
 80039ee:	b015      	add	sp, #84	@ 0x54
 80039f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80039f4:	f7ff ffa8 	bl	8003948 <Error_Handler>
    Error_Handler();
 80039f8:	f7ff ffa6 	bl	8003948 <Error_Handler>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000

08003a04 <main>:
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8003a08:	f000 fcd4 	bl	80043b4 <HAL_Init>
  SystemClock_Config();
 8003a0c:	f7ff ffa4 	bl	8003958 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	2400      	movs	r4, #0
 8003a12:	9414      	str	r4, [sp, #80]	@ 0x50
 8003a14:	9415      	str	r4, [sp, #84]	@ 0x54
 8003a16:	9416      	str	r4, [sp, #88]	@ 0x58
 8003a18:	9417      	str	r4, [sp, #92]	@ 0x5c
 8003a1a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a1c:	9401      	str	r4, [sp, #4]
 8003a1e:	4daa      	ldr	r5, [pc, #680]	@ (8003cc8 <main+0x2c4>)
 8003a20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a32:	9402      	str	r4, [sp, #8]
 8003a34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a46:	9403      	str	r4, [sp, #12]
 8003a48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	9303      	str	r3, [sp, #12]
 8003a58:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5a:	9404      	str	r4, [sp, #16]
 8003a5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a6e:	9405      	str	r4, [sp, #20]
 8003a70:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	9305      	str	r3, [sp, #20]
 8003a80:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	9406      	str	r4, [sp, #24]
 8003a84:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	9306      	str	r3, [sp, #24]
 8003a94:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8003a96:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 8003cec <main+0x2e8>
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	211c      	movs	r1, #28
 8003a9e:	4648      	mov	r0, r9
 8003aa0:	f001 f846 	bl	8004b30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin|SWD_BUF_DIR_Pin, GPIO_PIN_RESET);
 8003aa4:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8003cf0 <main+0x2ec>
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f001 f83e 	bl	8004b30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWD_CLK_GPIO_Port, SWD_CLK_Pin, GPIO_PIN_SET);
 8003ab4:	4f85      	ldr	r7, [pc, #532]	@ (8003ccc <main+0x2c8>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	4638      	mov	r0, r7
 8003abc:	f001 f838 	bl	8004b30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWD_IO_GPIO_Port, SWD_IO_Pin, GPIO_PIN_RESET);
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f001 f832 	bl	8004b30 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8003acc:	231c      	movs	r3, #28
 8003ace:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad0:	2601      	movs	r6, #1
 8003ad2:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad8:	a914      	add	r1, sp, #80	@ 0x50
 8003ada:	4648      	mov	r0, r9
 8003adc:	f000 ff18 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 8003ae0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003ae4:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae6:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	a914      	add	r1, sp, #80	@ 0x50
 8003aee:	4640      	mov	r0, r8
 8003af0:	f000 ff0e 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_BUF_DIR_Pin;
 8003af4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003af8:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afa:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	f04f 0903 	mov.w	r9, #3
 8003b02:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_BUF_DIR_GPIO_Port, &GPIO_InitStruct);
 8003b06:	a914      	add	r1, sp, #80	@ 0x50
 8003b08:	4640      	mov	r0, r8
 8003b0a:	f000 ff01 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b12:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b14:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 8003b18:	a914      	add	r1, sp, #80	@ 0x50
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	f000 fef8 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_CLK_Pin;
 8003b20:	2340      	movs	r3, #64	@ 0x40
 8003b22:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b24:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_CLK_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	a914      	add	r1, sp, #80	@ 0x50
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f000 feee 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_IO_Pin;
 8003b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b38:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3a:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3c:	9616      	str	r6, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3e:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8003b42:	a914      	add	r1, sp, #80	@ 0x50
 8003b44:	4638      	mov	r0, r7
 8003b46:	f000 fee3 	bl	8004910 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b4a:	9400      	str	r4, [sp, #0]
 8003b4c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b52:	632b      	str	r3, [r5, #48]	@ 0x30
 8003b54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8003b5e:	4622      	mov	r2, r4
 8003b60:	2106      	movs	r1, #6
 8003b62:	203b      	movs	r0, #59	@ 0x3b
 8003b64:	f000 fc78 	bl	8004458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003b68:	203b      	movs	r0, #59	@ 0x3b
 8003b6a:	f000 fcab 	bl	80044c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8003b6e:	4622      	mov	r2, r4
 8003b70:	2106      	movs	r1, #6
 8003b72:	2045      	movs	r0, #69	@ 0x45
 8003b74:	f000 fc70 	bl	8004458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003b78:	2045      	movs	r0, #69	@ 0x45
 8003b7a:	f000 fca3 	bl	80044c4 <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8003b7e:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <main+0x2cc>)
 8003b80:	4a54      	ldr	r2, [pc, #336]	@ (8003cd4 <main+0x2d0>)
 8003b82:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003b84:	605c      	str	r4, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003b86:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b88:	60dc      	str	r4, [r3, #12]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b8a:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003b8c:	619c      	str	r4, [r3, #24]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003b8e:	611c      	str	r4, [r3, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b90:	9409      	str	r4, [sp, #36]	@ 0x24
 8003b92:	940a      	str	r4, [sp, #40]	@ 0x28
 8003b94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b96:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b98:	9407      	str	r4, [sp, #28]
 8003b9a:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b9c:	940d      	str	r4, [sp, #52]	@ 0x34
 8003b9e:	940e      	str	r4, [sp, #56]	@ 0x38
 8003ba0:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003ba2:	9410      	str	r4, [sp, #64]	@ 0x40
 8003ba4:	9411      	str	r4, [sp, #68]	@ 0x44
 8003ba6:	9412      	str	r4, [sp, #72]	@ 0x48
 8003ba8:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003baa:	2220      	movs	r2, #32
 8003bac:	4621      	mov	r1, r4
 8003bae:	a814      	add	r0, sp, #80	@ 0x50
 8003bb0:	f009 fd4e 	bl	800d650 <memset>
  htim1.Instance = TIM1;
 8003bb4:	4848      	ldr	r0, [pc, #288]	@ (8003cd8 <main+0x2d4>)
 8003bb6:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <main+0x2d8>)
 8003bb8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 120-1;
 8003bba:	2377      	movs	r3, #119	@ 0x77
 8003bbc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bbe:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1000;
 8003bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bc4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc6:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bc8:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bca:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bcc:	f003 fc34 	bl	8007438 <HAL_TIM_Base_Init>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f040 80cf 	bne.w	8003d74 <main+0x370>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bda:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bdc:	a909      	add	r1, sp, #36	@ 0x24
 8003bde:	483e      	ldr	r0, [pc, #248]	@ (8003cd8 <main+0x2d4>)
 8003be0:	f003 fd37 	bl	8007652 <HAL_TIM_ConfigClockSource>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	f040 80c7 	bne.w	8003d78 <main+0x374>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bea:	483b      	ldr	r0, [pc, #236]	@ (8003cd8 <main+0x2d4>)
 8003bec:	f003 fc50 	bl	8007490 <HAL_TIM_PWM_Init>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	f040 80c3 	bne.w	8003d7c <main+0x378>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfa:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bfc:	a907      	add	r1, sp, #28
 8003bfe:	4836      	ldr	r0, [pc, #216]	@ (8003cd8 <main+0x2d4>)
 8003c00:	f003 feaa 	bl	8007958 <HAL_TIMEx_MasterConfigSynchronization>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f040 80bb 	bne.w	8003d80 <main+0x37c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c0a:	2360      	movs	r3, #96	@ 0x60
 8003c0c:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c12:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c14:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c16:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c18:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c1a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	a90d      	add	r1, sp, #52	@ 0x34
 8003c20:	482d      	ldr	r0, [pc, #180]	@ (8003cd8 <main+0x2d4>)
 8003c22:	f003 fc9b 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	f040 80ac 	bne.w	8003d84 <main+0x380>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c30:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c32:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c34:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c36:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c3c:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c3e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c40:	a914      	add	r1, sp, #80	@ 0x50
 8003c42:	4825      	ldr	r0, [pc, #148]	@ (8003cd8 <main+0x2d4>)
 8003c44:	f003 fecc 	bl	80079e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f040 809d 	bne.w	8003d88 <main+0x384>
  HAL_TIM_MspPostInit(&htim1);
 8003c4e:	4822      	ldr	r0, [pc, #136]	@ (8003cd8 <main+0x2d4>)
 8003c50:	f000 fa3e 	bl	80040d0 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c54:	2300      	movs	r3, #0
 8003c56:	9314      	str	r3, [sp, #80]	@ 0x50
 8003c58:	9315      	str	r3, [sp, #84]	@ 0x54
 8003c5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8003c5c:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003c60:	930e      	str	r3, [sp, #56]	@ 0x38
  htim2.Instance = TIM2;
 8003c62:	481f      	ldr	r0, [pc, #124]	@ (8003ce0 <main+0x2dc>)
 8003c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c68:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 60-1;
 8003c6a:	223b      	movs	r2, #59	@ 0x3b
 8003c6c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8003c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c74:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c76:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c78:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c7a:	f003 fbdd 	bl	8007438 <HAL_TIM_Base_Init>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	f040 8084 	bne.w	8003d8c <main+0x388>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c88:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c8a:	a914      	add	r1, sp, #80	@ 0x50
 8003c8c:	4814      	ldr	r0, [pc, #80]	@ (8003ce0 <main+0x2dc>)
 8003c8e:	f003 fce0 	bl	8007652 <HAL_TIM_ConfigClockSource>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d17c      	bne.n	8003d90 <main+0x38c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c9c:	a90d      	add	r1, sp, #52	@ 0x34
 8003c9e:	4810      	ldr	r0, [pc, #64]	@ (8003ce0 <main+0x2dc>)
 8003ca0:	f003 fe5a 	bl	8007958 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d175      	bne.n	8003d94 <main+0x390>
  hspi1.Instance = SPI1;
 8003ca8:	480e      	ldr	r0, [pc, #56]	@ (8003ce4 <main+0x2e0>)
 8003caa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce8 <main+0x2e4>)
 8003cac:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003cb2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cb8:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cba:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cbc:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	e015      	b.n	8003cf4 <main+0x2f0>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	2000116c 	.word	0x2000116c
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	2000100c 	.word	0x2000100c
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	20000fc4 	.word	0x20000fc4
 8003ce4:	20001054 	.word	0x20001054
 8003ce8:	40013000 	.word	0x40013000
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40020000 	.word	0x40020000
 8003cf4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cf8:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfa:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cfc:	230a      	movs	r3, #10
 8003cfe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d00:	f003 f922 	bl	8006f48 <HAL_SPI_Init>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d147      	bne.n	8003d98 <main+0x394>
  huart1.Instance = USART1;
 8003d08:	4826      	ldr	r0, [pc, #152]	@ (8003da4 <main+0x3a0>)
 8003d0a:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <main+0x3a4>)
 8003d0c:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8003d0e:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8003d12:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d14:	2300      	movs	r3, #0
 8003d16:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d18:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d1a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d20:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d22:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d24:	f003 ff7b 	bl	8007c1e <HAL_UART_Init>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d137      	bne.n	8003d9c <main+0x398>
  MX_FATFS_Init();
 8003d2c:	f005 f952 	bl	8008fd4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8003d30:	f008 ff76 	bl	800cc20 <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 8003d34:	481d      	ldr	r0, [pc, #116]	@ (8003dac <main+0x3a8>)
 8003d36:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <main+0x3ac>)
 8003d38:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d3e:	227f      	movs	r2, #127	@ 0x7f
 8003d40:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 7874;
 8003d42:	f641 62c2 	movw	r2, #7874	@ 0x1ec2
 8003d46:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d48:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d4a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d4c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d4e:	f002 f9bf 	bl	80060d0 <HAL_RTC_Init>
 8003d52:	bb28      	cbnz	r0, 8003da0 <main+0x39c>
	HAL_TIM_Base_Start(&htim2);
 8003d54:	4817      	ldr	r0, [pc, #92]	@ (8003db4 <main+0x3b0>)
 8003d56:	f003 f9ed 	bl	8007134 <HAL_TIM_Base_Start>
	LED_SetState(TARGET_LED_STAT_BOOT);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7ff fdee 	bl	800393c <LED_SetState>
	Buzzer_SetState(BUZZER_BOOT);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7ff fb29 	bl	80033b8 <Buzzer_SetState>
	log_message("ST-Flash Boot OK! v%d\n", ST_FLASHER_VERSION);
 8003d66:	4914      	ldr	r1, [pc, #80]	@ (8003db8 <main+0x3b4>)
 8003d68:	4814      	ldr	r0, [pc, #80]	@ (8003dbc <main+0x3b8>)
 8003d6a:	f7fe f97d 	bl	8002068 <log_message>
  	Target_MainLoop();
 8003d6e:	f7fe fda1 	bl	80028b4 <Target_MainLoop>
  while (1)
 8003d72:	e7fc      	b.n	8003d6e <main+0x36a>
    Error_Handler();
 8003d74:	f7ff fde8 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d78:	f7ff fde6 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d7c:	f7ff fde4 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d80:	f7ff fde2 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d84:	f7ff fde0 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d88:	f7ff fdde 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d8c:	f7ff fddc 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d90:	f7ff fdda 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d94:	f7ff fdd8 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d98:	f7ff fdd6 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003d9c:	f7ff fdd4 	bl	8003948 <Error_Handler>
    Error_Handler();
 8003da0:	f7ff fdd2 	bl	8003948 <Error_Handler>
 8003da4:	20000f7c 	.word	0x20000f7c
 8003da8:	40011000 	.word	0x40011000
 8003dac:	200011f0 	.word	0x200011f0
 8003db0:	40002800 	.word	0x40002800
 8003db4:	20000fc4 	.word	0x20000fc4
 8003db8:	0134da86 	.word	0x0134da86
 8003dbc:	0800f114 	.word	0x0800f114

08003dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	9100      	str	r1, [sp, #0]
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <HAL_MspInit+0x34>)
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dce:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dd2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003dd6:	9200      	str	r2, [sp, #0]
 8003dd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	9101      	str	r1, [sp, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dde:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dee:	b002      	add	sp, #8
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dfe:	2230      	movs	r2, #48	@ 0x30
 8003e00:	2100      	movs	r1, #0
 8003e02:	4668      	mov	r0, sp
 8003e04:	f009 fc24 	bl	800d650 <memset>
  if(hrtc->Instance==RTC)
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <HAL_RTC_MspInit+0x3c>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003e10:	b00c      	add	sp, #48	@ 0x30
 8003e12:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e14:	2320      	movs	r3, #32
 8003e16:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8003e18:	4b07      	ldr	r3, [pc, #28]	@ (8003e38 <HAL_RTC_MspInit+0x40>)
 8003e1a:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e1c:	4668      	mov	r0, sp
 8003e1e:	f001 ffc3 	bl	8005da8 <HAL_RCCEx_PeriphCLKConfig>
 8003e22:	b920      	cbnz	r0, 8003e2e <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RTC_MspInit+0x44>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 8003e2c:	e7f0      	b.n	8003e10 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8003e2e:	f7ff fd8b 	bl	8003948 <Error_Handler>
 8003e32:	e7f7      	b.n	8003e24 <HAL_RTC_MspInit+0x2c>
 8003e34:	40002800 	.word	0x40002800
 8003e38:	00080300 	.word	0x00080300
 8003e3c:	42470000 	.word	0x42470000

08003e40 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e46:	2300      	movs	r3, #0
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	9305      	str	r3, [sp, #20]
 8003e4e:	9306      	str	r3, [sp, #24]
 8003e50:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8003e52:	6802      	ldr	r2, [r0, #0]
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_SD_MspInit+0x17c>)
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d002      	beq.n	8003e60 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003e5a:	b009      	add	sp, #36	@ 0x24
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003e62:	2500      	movs	r5, #0
 8003e64:	9500      	str	r5, [sp, #0]
 8003e66:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8003e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e78:	9200      	str	r2, [sp, #0]
 8003e7a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7c:	9501      	str	r5, [sp, #4]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e80:	f042 0204 	orr.w	r2, r2, #4
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e88:	f002 0204 	and.w	r2, r2, #4
 8003e8c:	9201      	str	r2, [sp, #4]
 8003e8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e90:	9502      	str	r5, [sp, #8]
 8003e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e94:	f042 0208 	orr.w	r2, r2, #8
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003ea4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003ea8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	f04f 0802 	mov.w	r8, #2
 8003eae:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eb2:	f04f 0b01 	mov.w	fp, #1
 8003eb6:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	2603      	movs	r6, #3
 8003ebc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ebe:	270c      	movs	r7, #12
 8003ec0:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec2:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8003fd4 <HAL_SD_MspInit+0x194>
 8003ec6:	eb0d 0107 	add.w	r1, sp, r7
 8003eca:	4648      	mov	r0, r9
 8003ecc:	f000 fd20 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ed0:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8003ed4:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ede:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ee0:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee2:	eb0d 0107 	add.w	r1, sp, r7
 8003ee6:	4648      	mov	r0, r9
 8003ee8:	f000 fd12 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eec:	f04f 0904 	mov.w	r9, #4
 8003ef0:	f8cd 900c 	str.w	r9, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef8:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003efe:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f00:	eb0d 0107 	add.w	r1, sp, r7
 8003f04:	482e      	ldr	r0, [pc, #184]	@ (8003fc0 <HAL_SD_MspInit+0x180>)
 8003f06:	f000 fd03 	bl	8004910 <HAL_GPIO_Init>
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003f0a:	482e      	ldr	r0, [pc, #184]	@ (8003fc4 <HAL_SD_MspInit+0x184>)
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc8 <HAL_SD_MspInit+0x188>)
 8003f0e:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f14:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f16:	6085      	str	r5, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f18:	60c5      	str	r5, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f1e:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f20:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f28:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f2e:	6205      	str	r5, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f30:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f34:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003f36:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003f3a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003f3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f40:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003f42:	f000 fb01 	bl	8004548 <HAL_DMA_Init>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d131      	bne.n	8003fae <HAL_SD_MspInit+0x16e>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc4 <HAL_SD_MspInit+0x184>)
 8003f4c:	6423      	str	r3, [r4, #64]	@ 0x40
 8003f4e:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003f50:	481e      	ldr	r0, [pc, #120]	@ (8003fcc <HAL_SD_MspInit+0x18c>)
 8003f52:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_SD_MspInit+0x190>)
 8003f54:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003f56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f5a:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f5c:	2340      	movs	r3, #64	@ 0x40
 8003f5e:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60c3      	str	r3, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f68:	6102      	str	r2, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f6e:	6142      	str	r2, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f74:	6182      	str	r2, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003f76:	2220      	movs	r2, #32
 8003f78:	61c2      	str	r2, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f7a:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f80:	2303      	movs	r3, #3
 8003f82:	6283      	str	r3, [r0, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003f84:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003f88:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003f8a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f8e:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003f90:	f000 fada 	bl	8004548 <HAL_DMA_Init>
 8003f94:	b970      	cbnz	r0, 8003fb4 <HAL_SD_MspInit+0x174>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_SD_MspInit+0x18c>)
 8003f98:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003f9a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	2031      	movs	r0, #49	@ 0x31
 8003fa2:	f000 fa59 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003fa6:	2031      	movs	r0, #49	@ 0x31
 8003fa8:	f000 fa8c 	bl	80044c4 <HAL_NVIC_EnableIRQ>
}
 8003fac:	e755      	b.n	8003e5a <HAL_SD_MspInit+0x1a>
      Error_Handler();
 8003fae:	f7ff fccb 	bl	8003948 <Error_Handler>
 8003fb2:	e7ca      	b.n	8003f4a <HAL_SD_MspInit+0x10a>
      Error_Handler();
 8003fb4:	f7ff fcc8 	bl	8003948 <Error_Handler>
 8003fb8:	e7ed      	b.n	8003f96 <HAL_SD_MspInit+0x156>
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	2000110c 	.word	0x2000110c
 8003fc8:	40026458 	.word	0x40026458
 8003fcc:	200010ac 	.word	0x200010ac
 8003fd0:	400264a0 	.word	0x400264a0
 8003fd4:	40020800 	.word	0x40020800

08003fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fda:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	9306      	str	r3, [sp, #24]
 8003fe6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003fe8:	6802      	ldr	r2, [r0, #0]
 8003fea:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <HAL_SPI_MspInit+0x7c>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003ff0:	b009      	add	sp, #36	@ 0x24
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	9101      	str	r1, [sp, #4]
 8003ff8:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004002:	645a      	str	r2, [r3, #68]	@ 0x44
 8004004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004006:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800400a:	9201      	str	r2, [sp, #4]
 800400c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	9102      	str	r1, [sp, #8]
 8004010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	9302      	str	r3, [sp, #8]
 8004020:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004022:	23a0      	movs	r3, #160	@ 0xa0
 8004024:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2702      	movs	r7, #2
 8004028:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402a:	2603      	movs	r6, #3
 800402c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800402e:	2505      	movs	r5, #5
 8004030:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004032:	4c09      	ldr	r4, [pc, #36]	@ (8004058 <HAL_SPI_MspInit+0x80>)
 8004034:	a903      	add	r1, sp, #12
 8004036:	4620      	mov	r0, r4
 8004038:	f000 fc6a 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800403c:	2340      	movs	r3, #64	@ 0x40
 800403e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004042:	2301      	movs	r3, #1
 8004044:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004046:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004048:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404a:	a903      	add	r1, sp, #12
 800404c:	4620      	mov	r0, r4
 800404e:	f000 fc5f 	bl	8004910 <HAL_GPIO_Init>
}
 8004052:	e7cd      	b.n	8003ff0 <HAL_SPI_MspInit+0x18>
 8004054:	40013000 	.word	0x40013000
 8004058:	40020000 	.word	0x40020000

0800405c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800405c:	b500      	push	{lr}
 800405e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <HAL_TIM_Base_MspInit+0x6c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d005      	beq.n	8004074 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d016      	beq.n	800409c <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800406e:	b003      	add	sp, #12
 8004070:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004074:	2100      	movs	r1, #0
 8004076:	9100      	str	r1, [sp, #0]
 8004078:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_TIM_Base_MspInit+0x70>)
 800407a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
 8004082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800408c:	460a      	mov	r2, r1
 800408e:	2019      	movs	r0, #25
 8004090:	f000 f9e2 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004094:	2019      	movs	r0, #25
 8004096:	f000 fa15 	bl	80044c4 <HAL_NVIC_EnableIRQ>
 800409a:	e7e8      	b.n	800406e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800409c:	2100      	movs	r1, #0
 800409e:	9101      	str	r1, [sp, #4]
 80040a0:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80040a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040b6:	460a      	mov	r2, r1
 80040b8:	201c      	movs	r0, #28
 80040ba:	f000 f9cd 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040be:	201c      	movs	r0, #28
 80040c0:	f000 fa00 	bl	80044c4 <HAL_NVIC_EnableIRQ>
}
 80040c4:	e7d3      	b.n	800406e <HAL_TIM_Base_MspInit+0x12>
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040d0:	b500      	push	{lr}
 80040d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	2300      	movs	r3, #0
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80040e0:	6802      	ldr	r2, [r0, #0]
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_TIM_MspPostInit+0x54>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d002      	beq.n	80040ee <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80040e8:	b007      	add	sp, #28
 80040ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <HAL_TIM_MspPostInit+0x58>)
 80040f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f6:	f042 0210 	orr.w	r2, r2, #16
 80040fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BEEP_Pin;
 8004106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800410a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004110:	2303      	movs	r3, #3
 8004112:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004114:	2301      	movs	r3, #1
 8004116:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8004118:	a901      	add	r1, sp, #4
 800411a:	4804      	ldr	r0, [pc, #16]	@ (800412c <HAL_TIM_MspPostInit+0x5c>)
 800411c:	f000 fbf8 	bl	8004910 <HAL_GPIO_Init>
}
 8004120:	e7e2      	b.n	80040e8 <HAL_TIM_MspPostInit+0x18>
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40023800 	.word	0x40023800
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	2300      	movs	r3, #0
 8004136:	9303      	str	r3, [sp, #12]
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	9306      	str	r3, [sp, #24]
 800413e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8004140:	6802      	ldr	r2, [r0, #0]
 8004142:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004146:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800414e:	b009      	add	sp, #36	@ 0x24
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004152:	2400      	movs	r4, #0
 8004154:	9400      	str	r4, [sp, #0]
 8004156:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800415a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800415c:	f042 0210 	orr.w	r2, r2, #16
 8004160:	645a      	str	r2, [r3, #68]	@ 0x44
 8004162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004164:	f002 0210 	and.w	r2, r2, #16
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416c:	9401      	str	r4, [sp, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	631a      	str	r2, [r3, #48]	@ 0x30
 8004176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004178:	f002 0201 	and.w	r2, r2, #1
 800417c:	9201      	str	r2, [sp, #4]
 800417e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004180:	9402      	str	r4, [sp, #8]
 8004182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004184:	f042 0202 	orr.w	r2, r2, #2
 8004188:	631a      	str	r2, [r3, #48]	@ 0x30
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	9302      	str	r3, [sp, #8]
 8004192:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004198:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2702      	movs	r7, #2
 800419c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800419e:	2603      	movs	r6, #3
 80041a0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041a2:	2507      	movs	r5, #7
 80041a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a6:	a903      	add	r1, sp, #12
 80041a8:	4806      	ldr	r0, [pc, #24]	@ (80041c4 <HAL_UART_MspInit+0x94>)
 80041aa:	f000 fbb1 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041b8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	a903      	add	r1, sp, #12
 80041bc:	4802      	ldr	r0, [pc, #8]	@ (80041c8 <HAL_UART_MspInit+0x98>)
 80041be:	f000 fba7 	bl	8004910 <HAL_GPIO_Init>
}
 80041c2:	e7c4      	b.n	800414e <HAL_UART_MspInit+0x1e>
 80041c4:	40020000 	.word	0x40020000
 80041c8:	40020400 	.word	0x40020400

080041cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041cc:	e7fe      	b.n	80041cc <NMI_Handler>

080041ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ce:	e7fe      	b.n	80041ce <HardFault_Handler>

080041d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <MemManage_Handler>

080041d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <BusFault_Handler>

080041d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d4:	e7fe      	b.n	80041d4 <UsageFault_Handler>

080041d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041d6:	4770      	bx	lr

080041d8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041d8:	4770      	bx	lr

080041da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041da:	4770      	bx	lr

080041dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041de:	f000 f903 	bl	80043e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LED_Handler();
 80041e2:	f7ff fb03 	bl	80037ec <LED_Handler>
  FileTransferCheck_CheckCompletion();
 80041e6:	f7ff f85f 	bl	80032a8 <FileTransferCheck_CheckCompletion>
  /* USER CODE END SysTick_IRQn 1 */
}
 80041ea:	bd08      	pop	{r3, pc}

080041ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ee:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80041f0:	f002 ffe4 	bl	80071bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041f4:	bd08      	pop	{r3, pc}
 80041f6:	bf00      	nop
 80041f8:	2000100c 	.word	0x2000100c

080041fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041fe:	4802      	ldr	r0, [pc, #8]	@ (8004208 <TIM2_IRQHandler+0xc>)
 8004200:	f002 ffdc 	bl	80071bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004204:	bd08      	pop	{r3, pc}
 8004206:	bf00      	nop
 8004208:	20000fc4 	.word	0x20000fc4

0800420c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800420c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800420e:	4802      	ldr	r0, [pc, #8]	@ (8004218 <SDIO_IRQHandler+0xc>)
 8004210:	f002 fd48 	bl	8006ca4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004214:	bd08      	pop	{r3, pc}
 8004216:	bf00      	nop
 8004218:	2000116c 	.word	0x2000116c

0800421c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800421c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800421e:	4802      	ldr	r0, [pc, #8]	@ (8004228 <DMA2_Stream3_IRQHandler+0xc>)
 8004220:	f000 fa86 	bl	8004730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004224:	bd08      	pop	{r3, pc}
 8004226:	bf00      	nop
 8004228:	2000110c 	.word	0x2000110c

0800422c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800422c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800422e:	4802      	ldr	r0, [pc, #8]	@ (8004238 <OTG_FS_IRQHandler+0xc>)
 8004230:	f000 fe8c 	bl	8004f4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004234:	bd08      	pop	{r3, pc}
 8004236:	bf00      	nop
 8004238:	20001bf4 	.word	0x20001bf4

0800423c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800423c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800423e:	4802      	ldr	r0, [pc, #8]	@ (8004248 <DMA2_Stream6_IRQHandler+0xc>)
 8004240:	f000 fa76 	bl	8004730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004244:	bd08      	pop	{r3, pc}
 8004246:	bf00      	nop
 8004248:	200010ac 	.word	0x200010ac

0800424c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800424c:	2001      	movs	r0, #1
 800424e:	4770      	bx	lr

08004250 <_kill>:

int _kill(int pid, int sig)
{
 8004250:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004252:	f009 fa4b 	bl	800d6ec <__errno>
 8004256:	2316      	movs	r3, #22
 8004258:	6003      	str	r3, [r0, #0]
  return -1;
}
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	bd08      	pop	{r3, pc}

08004260 <_exit>:

void _exit (int status)
{
 8004260:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004262:	f009 fa43 	bl	800d6ec <__errno>
 8004266:	2316      	movs	r3, #22
 8004268:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800426a:	e7fe      	b.n	800426a <_exit+0xa>

0800426c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800426c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426e:	1e16      	subs	r6, r2, #0
 8004270:	dd07      	ble.n	8004282 <_read+0x16>
 8004272:	460c      	mov	r4, r1
 8004274:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004276:	f3af 8000 	nop.w
 800427a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	42a5      	cmp	r5, r4
 8004280:	d1f9      	bne.n	8004276 <_read+0xa>
  }

  return len;
}
 8004282:	4630      	mov	r0, r6
 8004284:	bd70      	pop	{r4, r5, r6, pc}

08004286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004286:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	1e16      	subs	r6, r2, #0
 800428a:	dd07      	ble.n	800429c <_write+0x16>
 800428c:	460c      	mov	r4, r1
 800428e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8004290:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004294:	f7fd fed8 	bl	8002048 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	42a5      	cmp	r5, r4
 800429a:	d1f9      	bne.n	8004290 <_write+0xa>
  }
  return len;
}
 800429c:	4630      	mov	r0, r6
 800429e:	bd70      	pop	{r4, r5, r6, pc}

080042a0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	4770      	bx	lr

080042a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80042a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042aa:	604b      	str	r3, [r1, #4]
  return 0;
}
 80042ac:	2000      	movs	r0, #0
 80042ae:	4770      	bx	lr

080042b0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80042b0:	2001      	movs	r0, #1
 80042b2:	4770      	bx	lr

080042b4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80042b4:	2000      	movs	r0, #0
 80042b6:	4770      	bx	lr

080042b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b8:	b508      	push	{r3, lr}
 80042ba:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042bc:	4a0c      	ldr	r2, [pc, #48]	@ (80042f0 <_sbrk+0x38>)
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	b152      	cbz	r2, 80042d8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042c2:	4a0b      	ldr	r2, [pc, #44]	@ (80042f0 <_sbrk+0x38>)
 80042c4:	6810      	ldr	r0, [r2, #0]
 80042c6:	4403      	add	r3, r0
 80042c8:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <_sbrk+0x3c>)
 80042ca:	490b      	ldr	r1, [pc, #44]	@ (80042f8 <_sbrk+0x40>)
 80042cc:	1a52      	subs	r2, r2, r1
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d806      	bhi.n	80042e0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80042d2:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <_sbrk+0x38>)
 80042d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80042d6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80042d8:	4a05      	ldr	r2, [pc, #20]	@ (80042f0 <_sbrk+0x38>)
 80042da:	4908      	ldr	r1, [pc, #32]	@ (80042fc <_sbrk+0x44>)
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	e7f0      	b.n	80042c2 <_sbrk+0xa>
    errno = ENOMEM;
 80042e0:	f009 fa04 	bl	800d6ec <__errno>
 80042e4:	230c      	movs	r3, #12
 80042e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e7f3      	b.n	80042d6 <_sbrk+0x1e>
 80042ee:	bf00      	nop
 80042f0:	20001210 	.word	0x20001210
 80042f4:	20030000 	.word	0x20030000
 80042f8:	00002000 	.word	0x00002000
 80042fc:	20002228 	.word	0x20002228

08004300 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4a03      	ldr	r2, [pc, #12]	@ (8004310 <SystemInit+0x10>)
 8004302:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004306:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800430a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800434c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004318:	f7ff fff2 	bl	8004300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800431c:	480c      	ldr	r0, [pc, #48]	@ (8004350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800431e:	490d      	ldr	r1, [pc, #52]	@ (8004354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004324:	e002      	b.n	800432c <LoopCopyDataInit>

08004326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800432a:	3304      	adds	r3, #4

0800432c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800432c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800432e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004330:	d3f9      	bcc.n	8004326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004334:	4c0a      	ldr	r4, [pc, #40]	@ (8004360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004338:	e001      	b.n	800433e <LoopFillZerobss>

0800433a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800433a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800433c:	3204      	adds	r2, #4

0800433e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800433e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004340:	d3fb      	bcc.n	800433a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004342:	f009 f9d9 	bl	800d6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004346:	f7ff fb5d 	bl	8003a04 <main>
  bx  lr    
 800434a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800434c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004354:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8004358:	0800f784 	.word	0x0800f784
  ldr r2, =_sbss
 800435c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004360:	20002224 	.word	0x20002224

08004364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <ADC_IRQHandler>
	...

08004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b510      	push	{r4, lr}
 800436a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <HAL_InitTick+0x40>)
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004374:	fbb3 f3f2 	udiv	r3, r3, r2
 8004378:	4a0c      	ldr	r2, [pc, #48]	@ (80043ac <HAL_InitTick+0x44>)
 800437a:	6810      	ldr	r0, [r2, #0]
 800437c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004380:	f000 f8ae 	bl	80044e0 <HAL_SYSTICK_Config>
 8004384:	b968      	cbnz	r0, 80043a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004386:	2c0f      	cmp	r4, #15
 8004388:	d901      	bls.n	800438e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800438a:	2001      	movs	r0, #1
 800438c:	e00a      	b.n	80043a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438e:	2200      	movs	r2, #0
 8004390:	4621      	mov	r1, r4
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	f000 f85f 	bl	8004458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800439a:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_InitTick+0x48>)
 800439c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800439e:	2000      	movs	r0, #0
 80043a0:	e000      	b.n	80043a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80043a2:	2001      	movs	r0, #1
}
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c
 80043ac:	20000008 	.word	0x20000008
 80043b0:	20000010 	.word	0x20000010

080043b4 <HAL_Init>:
{
 80043b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_Init+0x30>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d0:	2003      	movs	r0, #3
 80043d2:	f000 f82f 	bl	8004434 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7ff ffc6 	bl	8004368 <HAL_InitTick>
  HAL_MspInit();
 80043dc:	f7ff fcf0 	bl	8003dc0 <HAL_MspInit>
}
 80043e0:	2000      	movs	r0, #0
 80043e2:	bd08      	pop	{r3, pc}
 80043e4:	40023c00 	.word	0x40023c00

080043e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043e8:	4a03      	ldr	r2, [pc, #12]	@ (80043f8 <HAL_IncTick+0x10>)
 80043ea:	6811      	ldr	r1, [r2, #0]
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_IncTick+0x14>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	440b      	add	r3, r1
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20001214 	.word	0x20001214
 80043fc:	2000000c 	.word	0x2000000c

08004400 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004400:	4b01      	ldr	r3, [pc, #4]	@ (8004408 <HAL_GetTick+0x8>)
 8004402:	6818      	ldr	r0, [r3, #0]
}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20001214 	.word	0x20001214

0800440c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff fff6 	bl	8004400 <HAL_GetTick>
 8004414:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004416:	f1b4 3fff 	cmp.w	r4, #4294967295
 800441a:	d002      	beq.n	8004422 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <HAL_Delay+0x24>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004422:	f7ff ffed 	bl	8004400 <HAL_GetTick>
 8004426:	1b40      	subs	r0, r0, r5
 8004428:	42a0      	cmp	r0, r4
 800442a:	d3fa      	bcc.n	8004422 <HAL_Delay+0x16>
  {
  }
}
 800442c:	bd38      	pop	{r3, r4, r5, pc}
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c

08004434 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004434:	4907      	ldr	r1, [pc, #28]	@ (8004454 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004436:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004438:	0203      	lsls	r3, r0, #8
 800443a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800443e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004442:	0412      	lsls	r2, r2, #16
 8004444:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800444c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004450:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004458:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800445a:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_NVIC_SetPriority+0x64>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004462:	f1c3 0c07 	rsb	ip, r3, #7
 8004466:	f1bc 0f04 	cmp.w	ip, #4
 800446a:	bf28      	it	cs
 800446c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004470:	f103 0e04 	add.w	lr, r3, #4
 8004474:	f1be 0f06 	cmp.w	lr, #6
 8004478:	bf8c      	ite	hi
 800447a:	3b03      	subhi	r3, #3
 800447c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447e:	f04f 3eff 	mov.w	lr, #4294967295
 8004482:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004486:	ea21 010c 	bic.w	r1, r1, ip
 800448a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448c:	fa0e fe03 	lsl.w	lr, lr, r3
 8004490:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004496:	2800      	cmp	r0, #0
 8004498:	db09      	blt.n	80044ae <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	0109      	lsls	r1, r1, #4
 800449c:	b2c9      	uxtb	r1, r1
 800449e:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80044a2:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80044a6:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044aa:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	f000 000f 	and.w	r0, r0, #15
 80044b2:	0109      	lsls	r1, r1, #4
 80044b4:	b2c9      	uxtb	r1, r1
 80044b6:	4b02      	ldr	r3, [pc, #8]	@ (80044c0 <HAL_NVIC_SetPriority+0x68>)
 80044b8:	5419      	strb	r1, [r3, r0]
 80044ba:	e7f6      	b.n	80044aa <HAL_NVIC_SetPriority+0x52>
 80044bc:	e000ed00 	.word	0xe000ed00
 80044c0:	e000ed14 	.word	0xe000ed14

080044c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	db07      	blt.n	80044d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c8:	0941      	lsrs	r1, r0, #5
 80044ca:	f000 001f 	and.w	r0, r0, #31
 80044ce:	2301      	movs	r3, #1
 80044d0:	4083      	lsls	r3, r0
 80044d2:	4a02      	ldr	r2, [pc, #8]	@ (80044dc <HAL_NVIC_EnableIRQ+0x18>)
 80044d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e0:	3801      	subs	r0, #1
 80044e2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80044e6:	d20b      	bcs.n	8004500 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80044ec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_SYSTICK_Config+0x24>)
 80044f0:	21f0      	movs	r1, #240	@ 0xf0
 80044f2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f6:	2000      	movs	r0, #0
 80044f8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fa:	2207      	movs	r2, #7
 80044fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004500:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004508:	b410      	push	{r4}
 800450a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800450c:	6803      	ldr	r3, [r0, #0]
 800450e:	b2d8      	uxtb	r0, r3
 8004510:	3810      	subs	r0, #16
 8004512:	490b      	ldr	r1, [pc, #44]	@ (8004540 <DMA_CalcBaseAndBitshift+0x38>)
 8004514:	fba1 4100 	umull	r4, r1, r1, r0
 8004518:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451a:	4c0a      	ldr	r4, [pc, #40]	@ (8004544 <DMA_CalcBaseAndBitshift+0x3c>)
 800451c:	5c61      	ldrb	r1, [r4, r1]
 800451e:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004520:	285f      	cmp	r0, #95	@ 0x5f
 8004522:	d908      	bls.n	8004536 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004524:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004528:	f023 0303 	bic.w	r3, r3, #3
 800452c:	1d18      	adds	r0, r3, #4
 800452e:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004534:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004536:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800453a:	f020 0003 	bic.w	r0, r0, #3
 800453e:	e7f6      	b.n	800452e <DMA_CalcBaseAndBitshift+0x26>
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	0800f144 	.word	0x0800f144

08004548 <HAL_DMA_Init>:
{
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800454c:	f7ff ff58 	bl	8004400 <HAL_GetTick>
  if(hdma == NULL)
 8004550:	2c00      	cmp	r4, #0
 8004552:	f000 808c 	beq.w	800466e <HAL_DMA_Init+0x126>
 8004556:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004558:	2302      	movs	r3, #2
 800455a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800455e:	2300      	movs	r3, #0
 8004560:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	f012 0f01 	tst.w	r2, #1
 8004576:	d00a      	beq.n	800458e <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004578:	f7ff ff42 	bl	8004400 <HAL_GetTick>
 800457c:	1b43      	subs	r3, r0, r5
 800457e:	2b05      	cmp	r3, #5
 8004580:	d9f5      	bls.n	800456e <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004582:	2320      	movs	r3, #32
 8004584:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004586:	2003      	movs	r0, #3
 8004588:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800458c:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 800458e:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004590:	4938      	ldr	r1, [pc, #224]	@ (8004674 <HAL_DMA_Init+0x12c>)
 8004592:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004594:	6862      	ldr	r2, [r4, #4]
 8004596:	68a0      	ldr	r0, [r4, #8]
 8004598:	4302      	orrs	r2, r0
 800459a:	68e0      	ldr	r0, [r4, #12]
 800459c:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	6920      	ldr	r0, [r4, #16]
 80045a0:	4302      	orrs	r2, r0
 80045a2:	6960      	ldr	r0, [r4, #20]
 80045a4:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	69a0      	ldr	r0, [r4, #24]
 80045a8:	4302      	orrs	r2, r0
 80045aa:	69e0      	ldr	r0, [r4, #28]
 80045ac:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ae:	6a20      	ldr	r0, [r4, #32]
 80045b0:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045b2:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80045b6:	2904      	cmp	r1, #4
 80045b8:	d021      	beq.n	80045fe <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 80045ba:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80045bc:	6821      	ldr	r1, [r4, #0]
 80045be:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c0:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 80045c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045c6:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d10a      	bne.n	80045e2 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80045cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80045ce:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045d2:	b133      	cbz	r3, 80045e2 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045d4:	69a5      	ldr	r5, [r4, #24]
 80045d6:	bb3d      	cbnz	r5, 8004628 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80045d8:	2801      	cmp	r0, #1
 80045da:	d01f      	beq.n	800461c <HAL_DMA_Init+0xd4>
 80045dc:	f030 0002 	bics.w	r0, r0, #2
 80045e0:	d012      	beq.n	8004608 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80045e2:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff ff8f 	bl	8004508 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80045ec:	233f      	movs	r3, #63	@ 0x3f
 80045ee:	4093      	lsls	r3, r2
 80045f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f2:	2000      	movs	r0, #0
 80045f4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80045fc:	e7c6      	b.n	800458c <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004600:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004602:	4301      	orrs	r1, r0
 8004604:	430a      	orrs	r2, r1
 8004606:	e7d8      	b.n	80045ba <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0e8      	beq.n	80045e2 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004610:	2340      	movs	r3, #64	@ 0x40
 8004612:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004614:	2001      	movs	r0, #1
 8004616:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800461a:	e7b7      	b.n	800458c <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800461c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004620:	bf14      	ite	ne
 8004622:	2300      	movne	r3, #0
 8004624:	2301      	moveq	r3, #1
 8004626:	e7f1      	b.n	800460c <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004628:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 800462c:	d008      	beq.n	8004640 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800462e:	2802      	cmp	r0, #2
 8004630:	d9ee      	bls.n	8004610 <HAL_DMA_Init+0xc8>
 8004632:	2803      	cmp	r0, #3
 8004634:	d1d5      	bne.n	80045e2 <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0d1      	beq.n	80045e2 <HAL_DMA_Init+0x9a>
 800463e:	e7e7      	b.n	8004610 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8004640:	2803      	cmp	r0, #3
 8004642:	d8ce      	bhi.n	80045e2 <HAL_DMA_Init+0x9a>
 8004644:	a501      	add	r5, pc, #4	@ (adr r5, 800464c <HAL_DMA_Init+0x104>)
 8004646:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004611 	.word	0x08004611
 8004650:	0800465d 	.word	0x0800465d
 8004654:	08004611 	.word	0x08004611
 8004658:	08004663 	.word	0x08004663
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465c:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8004660:	e7eb      	b.n	800463a <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004662:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004666:	bf14      	ite	ne
 8004668:	2300      	movne	r3, #0
 800466a:	2301      	moveq	r3, #1
 800466c:	e7e5      	b.n	800463a <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 800466e:	2001      	movs	r0, #1
 8004670:	e78c      	b.n	800458c <HAL_DMA_Init+0x44>
 8004672:	bf00      	nop
 8004674:	f010803f 	.word	0xf010803f

08004678 <HAL_DMA_Start_IT>:
{
 8004678:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467a:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800467c:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8004680:	f1bc 0f01 	cmp.w	ip, #1
 8004684:	d03f      	beq.n	8004706 <HAL_DMA_Start_IT+0x8e>
 8004686:	f04f 0c01 	mov.w	ip, #1
 800468a:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800468e:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 8004692:	fa5f fc8c 	uxtb.w	ip, ip
 8004696:	f1bc 0f01 	cmp.w	ip, #1
 800469a:	d005      	beq.n	80046a8 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 800469c:	2300      	movs	r3, #0
 800469e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 80046a2:	2002      	movs	r0, #2
}
 80046a4:	bc70      	pop	{r4, r5, r6}
 80046a6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	2502      	movs	r5, #2
 80046aa:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ae:	2500      	movs	r5, #0
 80046b0:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046b2:	6806      	ldr	r6, [r0, #0]
 80046b4:	6835      	ldr	r5, [r6, #0]
 80046b6:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80046ba:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80046bc:	6805      	ldr	r5, [r0, #0]
 80046be:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c0:	6883      	ldr	r3, [r0, #8]
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d01a      	beq.n	80046fc <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046ca:	6803      	ldr	r3, [r0, #0]
 80046cc:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ce:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80046d0:	233f      	movs	r3, #63	@ 0x3f
 80046d2:	4093      	lsls	r3, r2
 80046d4:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046d6:	6802      	ldr	r2, [r0, #0]
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f043 0316 	orr.w	r3, r3, #22
 80046de:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80046e0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80046e2:	b123      	cbz	r3, 80046ee <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 80046e4:	6802      	ldr	r2, [r0, #0]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	f043 0308 	orr.w	r3, r3, #8
 80046ec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2000      	movs	r0, #0
 80046fa:	e7d3      	b.n	80046a4 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 80046fc:	6803      	ldr	r3, [r0, #0]
 80046fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004700:	6803      	ldr	r3, [r0, #0]
 8004702:	60d9      	str	r1, [r3, #12]
 8004704:	e7e3      	b.n	80046ce <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8004706:	2002      	movs	r0, #2
 8004708:	e7cc      	b.n	80046a4 <HAL_DMA_Start_IT+0x2c>

0800470a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800470a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d003      	beq.n	800471c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004718:	2001      	movs	r0, #1
 800471a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800471c:	2305      	movs	r3, #5
 800471e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8004722:	6802      	ldr	r2, [r0, #0]
 8004724:	6813      	ldr	r3, [r2, #0]
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800472c:	2000      	movs	r0, #0
}
 800472e:	4770      	bx	lr

08004730 <HAL_DMA_IRQHandler>:
{
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004732:	b083      	sub	sp, #12
 8004734:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800473a:	4b72      	ldr	r3, [pc, #456]	@ (8004904 <HAL_DMA_IRQHandler+0x1d4>)
 800473c:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8004740:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004742:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004744:	2308      	movs	r3, #8
 8004746:	4093      	lsls	r3, r2
 8004748:	422b      	tst	r3, r5
 800474a:	d010      	beq.n	800476e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800474c:	6803      	ldr	r3, [r0, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	f012 0f04 	tst.w	r2, #4
 8004754:	d00b      	beq.n	800476e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f022 0204 	bic.w	r2, r2, #4
 800475c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800475e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004760:	2308      	movs	r3, #8
 8004762:	4093      	lsls	r3, r2
 8004764:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004766:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800476e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004770:	2301      	movs	r3, #1
 8004772:	4093      	lsls	r3, r2
 8004774:	422b      	tst	r3, r5
 8004776:	d009      	beq.n	800478c <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	6952      	ldr	r2, [r2, #20]
 800477c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004780:	d004      	beq.n	800478c <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004782:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004784:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004786:	f043 0302 	orr.w	r3, r3, #2
 800478a:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800478e:	2304      	movs	r3, #4
 8004790:	4093      	lsls	r3, r2
 8004792:	422b      	tst	r3, r5
 8004794:	d009      	beq.n	80047aa <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	f012 0f02 	tst.w	r2, #2
 800479e:	d004      	beq.n	80047aa <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047a0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80047ac:	2310      	movs	r3, #16
 80047ae:	4093      	lsls	r3, r2
 80047b0:	422b      	tst	r3, r5
 80047b2:	d024      	beq.n	80047fe <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	f012 0f08 	tst.w	r2, #8
 80047bc:	d01f      	beq.n	80047fe <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047be:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80047c8:	d00d      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80047d0:	d104      	bne.n	80047dc <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80047d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047d4:	b19b      	cbz	r3, 80047fe <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80047d6:	4620      	mov	r0, r4
 80047d8:	4798      	blx	r3
 80047da:	e010      	b.n	80047fe <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80047de:	b173      	cbz	r3, 80047fe <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80047e0:	4620      	mov	r0, r4
 80047e2:	4798      	blx	r3
 80047e4:	e00b      	b.n	80047fe <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	f022 0208 	bic.w	r2, r2, #8
 80047f4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80047f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047f8:	b10b      	cbz	r3, 80047fe <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80047fa:	4620      	mov	r0, r4
 80047fc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047fe:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004800:	2320      	movs	r3, #32
 8004802:	4093      	lsls	r3, r2
 8004804:	422b      	tst	r3, r5
 8004806:	d055      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	f012 0f10 	tst.w	r2, #16
 8004810:	d050      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004812:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004814:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b05      	cmp	r3, #5
 800481c:	d00e      	beq.n	800483c <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004826:	d033      	beq.n	8004890 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800482e:	d12a      	bne.n	8004886 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8004830:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03e      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8004836:	4620      	mov	r0, r4
 8004838:	4798      	blx	r3
 800483a:	e03b      	b.n	80048b4 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	f023 0316 	bic.w	r3, r3, #22
 8004844:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	6953      	ldr	r3, [r2, #20]
 800484a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800484e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004850:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004852:	b1a3      	cbz	r3, 800487e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	f023 0308 	bic.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004860:	233f      	movs	r3, #63	@ 0x3f
 8004862:	4093      	lsls	r3, r2
 8004864:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004866:	2301      	movs	r3, #1
 8004868:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800486c:	2300      	movs	r3, #0
 800486e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004872:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004874:	2b00      	cmp	r3, #0
 8004876:	d043      	beq.n	8004900 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004878:	4620      	mov	r0, r4
 800487a:	4798      	blx	r3
 800487c:	e040      	b.n	8004900 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e7      	bne.n	8004854 <HAL_DMA_IRQHandler+0x124>
 8004884:	e7eb      	b.n	800485e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8004886:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004888:	b1a3      	cbz	r3, 80048b4 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 800488a:	4620      	mov	r0, r4
 800488c:	4798      	blx	r3
 800488e:	e011      	b.n	80048b4 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004896:	d109      	bne.n	80048ac <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f022 0210 	bic.w	r2, r2, #16
 800489e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80048a6:	2300      	movs	r3, #0
 80048a8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80048ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048ae:	b10b      	cbz	r3, 80048b4 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 80048b0:	4620      	mov	r0, r4
 80048b2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048b6:	b31b      	cbz	r3, 8004900 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048ba:	f013 0f01 	tst.w	r3, #1
 80048be:	d01b      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <HAL_DMA_IRQHandler+0x1d8>)
 80048c2:	fba3 3606 	umull	r3, r6, r3, r6
 80048c6:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 80048c8:	2305      	movs	r3, #5
 80048ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80048d8:	9b01      	ldr	r3, [sp, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	42b3      	cmp	r3, r6
 80048e0:	d804      	bhi.n	80048ec <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f013 0f01 	tst.w	r3, #1
 80048ea:	d1f5      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80048f2:	2300      	movs	r3, #0
 80048f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80048f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80048fa:	b10b      	cbz	r3, 8004900 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80048fc:	4620      	mov	r0, r4
 80048fe:	4798      	blx	r3
}
 8004900:	b003      	add	sp, #12
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	20000008 	.word	0x20000008
 8004908:	1b4e81b5 	.word	0x1b4e81b5

0800490c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800490c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800490e:	4770      	bx	lr

08004910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b083      	sub	sp, #12
 8004916:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004918:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800491a:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800491e:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004920:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004924:	4c7c      	ldr	r4, [pc, #496]	@ (8004b18 <HAL_GPIO_Init+0x208>)
 8004926:	e04b      	b.n	80049c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8004928:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800492a:	fa05 fa02 	lsl.w	sl, r5, r2
 800492e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004932:	68cf      	ldr	r7, [r1, #12]
 8004934:	4097      	lsls	r7, r2
 8004936:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800493a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800493c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800493e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004942:	684f      	ldr	r7, [r1, #4]
 8004944:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8004948:	409f      	lsls	r7, r3
 800494a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800494e:	6047      	str	r7, [r0, #4]
 8004950:	e044      	b.n	80049dc <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004952:	f04f 0c00 	mov.w	ip, #0
 8004956:	fa0c fc0b 	lsl.w	ip, ip, fp
 800495a:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800495e:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8004962:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004964:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004968:	684e      	ldr	r6, [r1, #4]
 800496a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800496e:	bf0c      	ite	eq
 8004970:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8004974:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8004978:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 800497a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800497c:	684e      	ldr	r6, [r1, #4]
 800497e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004982:	bf0c      	ite	eq
 8004984:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8004988:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 800498c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 800498e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004990:	684e      	ldr	r6, [r1, #4]
 8004992:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004996:	bf0c      	ite	eq
 8004998:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800499c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 80049a0:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a2:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a4:	684e      	ldr	r6, [r1, #4]
 80049a6:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80049aa:	bf0c      	ite	eq
 80049ac:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80049b0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 80049b4:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b6:	3301      	adds	r3, #1
 80049b8:	3202      	adds	r2, #2
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	f000 80a9 	beq.w	8004b12 <HAL_GPIO_Init+0x202>
    ioposition = 0x01U << position;
 80049c0:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049c4:	680f      	ldr	r7, [r1, #0]
 80049c6:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 80049ca:	ea3c 0707 	bics.w	r7, ip, r7
 80049ce:	d1f2      	bne.n	80049b6 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d0:	684f      	ldr	r7, [r1, #4]
 80049d2:	f007 0703 	and.w	r7, r7, #3
 80049d6:	3f01      	subs	r7, #1
 80049d8:	2f01      	cmp	r7, #1
 80049da:	d9a5      	bls.n	8004928 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049dc:	684f      	ldr	r7, [r1, #4]
 80049de:	f007 0703 	and.w	r7, r7, #3
 80049e2:	2f03      	cmp	r7, #3
 80049e4:	d023      	beq.n	8004a2e <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 80049e6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049e8:	fa05 fc02 	lsl.w	ip, r5, r2
 80049ec:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049f0:	688f      	ldr	r7, [r1, #8]
 80049f2:	4097      	lsls	r7, r2
 80049f4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 80049f8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049fa:	684f      	ldr	r7, [r1, #4]
 80049fc:	f007 0703 	and.w	r7, r7, #3
 8004a00:	2f02      	cmp	r7, #2
 8004a02:	d114      	bne.n	8004a2e <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8004a04:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004a08:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004a0c:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a10:	f003 0b07 	and.w	fp, r3, #7
 8004a14:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004a18:	fa08 fa0b 	lsl.w	sl, r8, fp
 8004a1c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a20:	690f      	ldr	r7, [r1, #16]
 8004a22:	fa07 f70b 	lsl.w	r7, r7, fp
 8004a26:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004a2a:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8004a2e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a30:	fa05 fc02 	lsl.w	ip, r5, r2
 8004a34:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a38:	684f      	ldr	r7, [r1, #4]
 8004a3a:	f007 0703 	and.w	r7, r7, #3
 8004a3e:	4097      	lsls	r7, r2
 8004a40:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8004a44:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a46:	684f      	ldr	r7, [r1, #4]
 8004a48:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8004a4c:	d0b3      	beq.n	80049b6 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4e:	2700      	movs	r7, #0
 8004a50:	9701      	str	r7, [sp, #4]
 8004a52:	4e32      	ldr	r6, [pc, #200]	@ (8004b1c <HAL_GPIO_Init+0x20c>)
 8004a54:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8004a56:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8004a5a:	6477      	str	r7, [r6, #68]	@ 0x44
 8004a5c:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8004a5e:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8004a62:	9701      	str	r7, [sp, #4]
 8004a64:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a66:	f023 0703 	bic.w	r7, r3, #3
 8004a6a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004a6e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004a72:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a76:	f003 0b03 	and.w	fp, r3, #3
 8004a7a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004a7e:	fa08 fc0b 	lsl.w	ip, r8, fp
 8004a82:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a86:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8004a8a:	42b0      	cmp	r0, r6
 8004a8c:	f43f af61 	beq.w	8004952 <HAL_GPIO_Init+0x42>
 8004a90:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004a94:	42b0      	cmp	r0, r6
 8004a96:	d024      	beq.n	8004ae2 <HAL_GPIO_Init+0x1d2>
 8004a98:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004a9c:	42b0      	cmp	r0, r6
 8004a9e:	d023      	beq.n	8004ae8 <HAL_GPIO_Init+0x1d8>
 8004aa0:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8004b20 <HAL_GPIO_Init+0x210>
 8004aa4:	4560      	cmp	r0, ip
 8004aa6:	d022      	beq.n	8004aee <HAL_GPIO_Init+0x1de>
 8004aa8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004aac:	4560      	cmp	r0, ip
 8004aae:	d021      	beq.n	8004af4 <HAL_GPIO_Init+0x1e4>
 8004ab0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004ab4:	4560      	cmp	r0, ip
 8004ab6:	d020      	beq.n	8004afa <HAL_GPIO_Init+0x1ea>
 8004ab8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004abc:	4560      	cmp	r0, ip
 8004abe:	d01f      	beq.n	8004b00 <HAL_GPIO_Init+0x1f0>
 8004ac0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004ac4:	4560      	cmp	r0, ip
 8004ac6:	d01e      	beq.n	8004b06 <HAL_GPIO_Init+0x1f6>
 8004ac8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004acc:	4560      	cmp	r0, ip
 8004ace:	d01d      	beq.n	8004b0c <HAL_GPIO_Init+0x1fc>
 8004ad0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004ad4:	4560      	cmp	r0, ip
 8004ad6:	bf14      	ite	ne
 8004ad8:	f04f 0c0a 	movne.w	ip, #10
 8004adc:	f04f 0c09 	moveq.w	ip, #9
 8004ae0:	e739      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004ae2:	f04f 0c01 	mov.w	ip, #1
 8004ae6:	e736      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004ae8:	f04f 0c02 	mov.w	ip, #2
 8004aec:	e733      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004aee:	f04f 0c03 	mov.w	ip, #3
 8004af2:	e730      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004af4:	f04f 0c04 	mov.w	ip, #4
 8004af8:	e72d      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004afa:	f04f 0c05 	mov.w	ip, #5
 8004afe:	e72a      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004b00:	f04f 0c06 	mov.w	ip, #6
 8004b04:	e727      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004b06:	f04f 0c07 	mov.w	ip, #7
 8004b0a:	e724      	b.n	8004956 <HAL_GPIO_Init+0x46>
 8004b0c:	f04f 0c08 	mov.w	ip, #8
 8004b10:	e721      	b.n	8004956 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8004b12:	b003      	add	sp, #12
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b18:	40013c00 	.word	0x40013c00
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40020c00 	.word	0x40020c00

08004b24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004b28:	bf14      	ite	ne
 8004b2a:	2001      	movne	r0, #1
 8004b2c:	2000      	moveq	r0, #0
 8004b2e:	4770      	bx	lr

08004b30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b30:	b10a      	cbz	r2, 8004b36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	6181      	str	r1, [r0, #24]
 8004b34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b36:	0409      	lsls	r1, r1, #16
 8004b38:	6181      	str	r1, [r0, #24]
  }
}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b3c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b3e:	ea01 0203 	and.w	r2, r1, r3
 8004b42:	ea21 0103 	bic.w	r1, r1, r3
 8004b46:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b4a:	6181      	str	r1, [r0, #24]
}
 8004b4c:	4770      	bx	lr

08004b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b4e:	b530      	push	{r4, r5, lr}
 8004b50:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d06e      	beq.n	8004c34 <HAL_PCD_Init+0xe6>
 8004b56:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b58:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b5a:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8004b5e:	b1d3      	cbz	r3, 8004b96 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b60:	2303      	movs	r3, #3
 8004b62:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b66:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  {
    hpcd->Init.dma_enable = 0U;
 8004b6a:	bf04      	itt	eq
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	f003 fd79 	bl	8008668 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b76:	7c23      	ldrb	r3, [r4, #16]
 8004b78:	f88d 3000 	strb.w	r3, [sp]
 8004b7c:	1d23      	adds	r3, r4, #4
 8004b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	f003 fcaf 	bl	80084e4 <USB_CoreInit>
 8004b86:	b158      	cbz	r0, 8004ba0 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004b8e:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8004b90:	4628      	mov	r0, r5
 8004b92:	b003      	add	sp, #12
 8004b94:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004b96:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8004b9a:	f008 f96d 	bl	800ce78 <HAL_PCD_MspInit>
 8004b9e:	e7df      	b.n	8004b60 <HAL_PCD_Init+0x12>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	f003 fd66 	bl	8008674 <USB_SetCurrentMode>
 8004ba8:	bbb0      	cbnz	r0, 8004c18 <HAL_PCD_Init+0xca>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004baa:	7925      	ldrb	r5, [r4, #4]
 8004bac:	b32d      	cbz	r5, 8004bfa <HAL_PCD_Init+0xac>
 8004bae:	4623      	mov	r3, r4
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8004bb4:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bb8:	4608      	mov	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 8004bba:	f882 e015 	strb.w	lr, [r2, #21]
    hpcd->IN_ep[i].num = i;
 8004bbe:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bc2:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bc4:	61d0      	str	r0, [r2, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bc6:	6210      	str	r0, [r2, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bc8:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bcc:	468c      	mov	ip, r1
 8004bce:	3101      	adds	r1, #1
 8004bd0:	42a9      	cmp	r1, r5
 8004bd2:	d1f2      	bne.n	8004bba <HAL_PCD_Init+0x6c>
 8004bd4:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8004bdc:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004be0:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004be4:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004be8:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bec:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bf0:	3324      	adds	r3, #36	@ 0x24
 8004bf2:	4561      	cmp	r1, ip
 8004bf4:	f101 0101 	add.w	r1, r1, #1
 8004bf8:	d1ee      	bne.n	8004bd8 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bfa:	7c23      	ldrb	r3, [r4, #16]
 8004bfc:	f88d 3000 	strb.w	r3, [sp]
 8004c00:	1d23      	adds	r3, r4, #4
 8004c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	f003 fdb5 	bl	8008774 <USB_DevInit>
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	b148      	cbz	r0, 8004c22 <HAL_PCD_Init+0xd4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004c14:	2501      	movs	r5, #1
 8004c16:	e7bb      	b.n	8004b90 <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004c1e:	2501      	movs	r5, #1
 8004c20:	e7b6      	b.n	8004b90 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	f004 f950 	bl	8008ed2 <USB_DevDisconnect>
  return HAL_OK;
 8004c32:	e7ad      	b.n	8004b90 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8004c34:	2501      	movs	r5, #1
 8004c36:	e7ab      	b.n	8004b90 <HAL_PCD_Init+0x42>

08004c38 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c38:	6803      	ldr	r3, [r0, #0]

  __HAL_LOCK(hpcd);
 8004c3a:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8004c3e:	2a01      	cmp	r2, #1
 8004c40:	d01a      	beq.n	8004c78 <HAL_PCD_Start+0x40>
{
 8004c42:	b510      	push	{r4, lr}
 8004c44:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004c46:	2201      	movs	r2, #1
 8004c48:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004c52:	d002      	beq.n	8004c5a <HAL_PCD_Start+0x22>
 8004c54:	7b42      	ldrb	r2, [r0, #13]
 8004c56:	2a01      	cmp	r2, #1
 8004c58:	d009      	beq.n	8004c6e <HAL_PCD_Start+0x36>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	f003 fcfe 	bl	800865c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	f004 f928 	bl	8008eb6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c66:	2000      	movs	r0, #0
 8004c68:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004c6c:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c74:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c76:	e7f0      	b.n	8004c5a <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8004c78:	2002      	movs	r0, #2
}
 8004c7a:	4770      	bx	lr

08004c7c <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8004c7c:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d00c      	beq.n	8004c9e <HAL_PCD_SetAddress+0x22>
{
 8004c84:	b510      	push	{r4, lr}
 8004c86:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004c8e:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	f004 f900 	bl	8008e96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c96:	2000      	movs	r0, #0
 8004c98:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004c9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004c9e:	2002      	movs	r0, #2
}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	468c      	mov	ip, r1
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ca8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004cac:	d12a      	bne.n	8004d04 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cae:	f001 000f 	and.w	r0, r1, #15
 8004cb2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8004cb6:	eb04 0e81 	add.w	lr, r4, r1, lsl #2
 8004cba:	f50e 7115 	add.w	r1, lr, #596	@ 0x254
    ep->is_in = 0U;
 8004cbe:	4670      	mov	r0, lr
 8004cc0:	f04f 0e00 	mov.w	lr, #0
 8004cc4:	f880 e255 	strb.w	lr, [r0, #597]	@ 0x255
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc8:	f00c 0c0f 	and.w	ip, ip, #15
 8004ccc:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004cd0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004cd4:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8004cd6:	710b      	strb	r3, [r1, #4]

  if (ep->is_in != 0U)
 8004cd8:	784a      	ldrb	r2, [r1, #1]
 8004cda:	b10a      	cbz	r2, 8004ce0 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cdc:	f8a1 c01a 	strh.w	ip, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ce0:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8004ce2:	bf04      	itt	eq
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 8004ce8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d019      	beq.n	8004d24 <HAL_PCD_EP_Open+0x82>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cf6:	6820      	ldr	r0, [r4, #0]
 8004cf8:	f003 fe19 	bl	800892e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return ret;
}
 8004d02:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d04:	f001 000f 	and.w	r0, r1, #15
 8004d08:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8004d0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004d10:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004d12:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004d16:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004d1a:	f04f 0e01 	mov.w	lr, #1
 8004d1e:	f880 e015 	strb.w	lr, [r0, #21]
 8004d22:	e7d1      	b.n	8004cc8 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8004d24:	2002      	movs	r0, #2
 8004d26:	e7ec      	b.n	8004d02 <HAL_PCD_EP_Open+0x60>

08004d28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d2e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004d32:	d11f      	bne.n	8004d74 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d34:	f001 020f 	and.w	r2, r1, #15
 8004d38:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8004d3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004d40:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004d44:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8004d48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8004d58:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d017      	beq.n	8004d90 <HAL_PCD_EP_Close+0x68>
 8004d60:	2301      	movs	r3, #1
 8004d62:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	f003 fe2c 	bl	80089c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
  return HAL_OK;
}
 8004d72:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d74:	f001 020f 	and.w	r2, r1, #15
 8004d78:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8004d7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004d80:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004d82:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8004d86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	7550      	strb	r0, [r2, #21]
 8004d8e:	e7e0      	b.n	8004d52 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8004d90:	2002      	movs	r0, #2
 8004d92:	e7ee      	b.n	8004d72 <HAL_PCD_EP_Close+0x4a>

08004d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d98:	f001 0c0f 	and.w	ip, r1, #15
 8004d9c:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004da0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004da4:	f501 7115 	add.w	r1, r1, #596	@ 0x254

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004da8:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004dac:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004db0:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8004db4:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8004dbe:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc2:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
 8004dc6:	7982      	ldrb	r2, [r0, #6]
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	d004      	beq.n	8004dd6 <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dcc:	6800      	ldr	r0, [r0, #0]
 8004dce:	f003 fecf 	bl	8008b70 <USB_EPStartXfer>

  return HAL_OK;
}
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004dd6:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8004dda:	e7f7      	b.n	8004dcc <HAL_PCD_EP_Receive+0x38>

08004ddc <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ddc:	f001 010f 	and.w	r1, r1, #15
 8004de0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004de4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8004de8:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8004dec:	4770      	bx	lr

08004dee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dee:	b510      	push	{r4, lr}
 8004df0:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	f001 0c0f 	and.w	ip, r1, #15
 8004df6:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004dfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004dfe:	3114      	adds	r1, #20

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e00:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004e04:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004e08:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8004e0c:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e1c:	f88e c014 	strb.w	ip, [lr, #20]

  if (hpcd->Init.dma_enable == 1U)
 8004e20:	7982      	ldrb	r2, [r0, #6]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d004      	beq.n	8004e30 <HAL_PCD_EP_Transmit+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e26:	6800      	ldr	r0, [r0, #0]
 8004e28:	f003 fea2 	bl	8008b70 <USB_EPStartXfer>

  return HAL_OK;
}
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004e30:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8004e34:	e7f7      	b.n	8004e26 <HAL_PCD_EP_Transmit+0x38>

08004e36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e36:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e38:	f001 050f 	and.w	r5, r1, #15
 8004e3c:	7902      	ldrb	r2, [r0, #4]
 8004e3e:	42aa      	cmp	r2, r5
 8004e40:	d336      	bcc.n	8004eb0 <HAL_PCD_EP_SetStall+0x7a>
 8004e42:	4604      	mov	r4, r0
 8004e44:	460b      	mov	r3, r1
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e46:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004e4a:	d11e      	bne.n	8004e8a <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e4c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004e50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e54:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004e58:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004e5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  }

  ep->is_stall = 1U;
 8004e66:	2301      	movs	r3, #1
 8004e68:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6a:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 8004e6c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d01f      	beq.n	8004eb4 <HAL_PCD_EP_SetStall+0x7e>
 8004e74:	2301      	movs	r3, #1
 8004e76:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	f003 ffb0 	bl	8008de0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e80:	b17d      	cbz	r5, 8004ea2 <HAL_PCD_EP_SetStall+0x6c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }

  __HAL_UNLOCK(hpcd);
 8004e82:	2000      	movs	r0, #0
 8004e84:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e8a:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8004e8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e92:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004e94:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004e98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	755a      	strb	r2, [r3, #21]
 8004ea0:	e7e1      	b.n	8004e66 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ea2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004ea6:	79a1      	ldrb	r1, [r4, #6]
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	f004 f863 	bl	8008f74 <USB_EP0_OutStart>
 8004eae:	e7e8      	b.n	8004e82 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	e7e9      	b.n	8004e88 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8004eb4:	2002      	movs	r0, #2
 8004eb6:	e7e7      	b.n	8004e88 <HAL_PCD_EP_SetStall+0x52>

08004eb8 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eb8:	f001 030f 	and.w	r3, r1, #15
 8004ebc:	7902      	ldrb	r2, [r0, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d32e      	bcc.n	8004f20 <HAL_PCD_EP_ClrStall+0x68>
{
 8004ec2:	b510      	push	{r4, lr}
 8004ec4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ec6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004eca:	d11d      	bne.n	8004f08 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ecc:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004ed0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004ed4:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004ed8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004edc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }

  ep->is_stall = 0U;
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eea:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8004eec:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d017      	beq.n	8004f24 <HAL_PCD_EP_ClrStall+0x6c>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	f003 ff9d 	bl	8008e3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f00:	2000      	movs	r0, #0
 8004f02:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004f06:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f08:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004f0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f10:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004f12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004f16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	7550      	strb	r0, [r2, #21]
 8004f1e:	e7e2      	b.n	8004ee6 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8004f20:	2001      	movs	r0, #1
}
 8004f22:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004f24:	2002      	movs	r0, #2
 8004f26:	e7ee      	b.n	8004f06 <HAL_PCD_EP_ClrStall+0x4e>

08004f28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f2a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	f001 010f 	and.w	r1, r1, #15
 8004f32:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004f36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f3a:	bf14      	ite	ne
 8004f3c:	3114      	addne	r1, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3e:	f501 7115 	addeq.w	r1, r1, #596	@ 0x254
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f42:	6800      	ldr	r0, [r0, #0]
 8004f44:	f003 fdac 	bl	8008aa0 <USB_EPStopXfer>

  return ret;
}
 8004f48:	bd08      	pop	{r3, pc}
	...

08004f4c <HAL_PCD_IRQHandler>:
{
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	b089      	sub	sp, #36	@ 0x24
 8004f52:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f54:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f56:	4630      	mov	r0, r6
 8004f58:	f003 fff7 	bl	8008f4a <USB_GetMode>
 8004f5c:	b110      	cbz	r0, 8004f64 <HAL_PCD_IRQHandler+0x18>
}
 8004f5e:	b009      	add	sp, #36	@ 0x24
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f64:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	f003 ffc1 	bl	8008eee <USB_ReadInterrupts>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0f6      	beq.n	8004f5e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f70:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 8004f74:	9303      	str	r3, [sp, #12]
 8004f76:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8004f7a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8004f7e:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	f003 ffb3 	bl	8008eee <USB_ReadInterrupts>
 8004f88:	f010 0f02 	tst.w	r0, #2
 8004f8c:	d004      	beq.n	8004f98 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	6953      	ldr	r3, [r2, #20]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	f003 ffa8 	bl	8008eee <USB_ReadInterrupts>
 8004f9e:	f010 0f10 	tst.w	r0, #16
 8004fa2:	d012      	beq.n	8004fca <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	6993      	ldr	r3, [r2, #24]
 8004fa8:	f023 0310 	bic.w	r3, r3, #16
 8004fac:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8004fae:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fb0:	f005 070f 	and.w	r7, r5, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fb4:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d051      	beq.n	8005060 <HAL_PCD_IRQHandler+0x114>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d06d      	beq.n	800509c <HAL_PCD_IRQHandler+0x150>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	6993      	ldr	r3, [r2, #24]
 8004fc4:	f043 0310 	orr.w	r3, r3, #16
 8004fc8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	f003 ff8f 	bl	8008eee <USB_ReadInterrupts>
 8004fd0:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8004fd4:	d174      	bne.n	80050c0 <HAL_PCD_IRQHandler+0x174>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fd6:	6820      	ldr	r0, [r4, #0]
 8004fd8:	f003 ff89 	bl	8008eee <USB_ReadInterrupts>
 8004fdc:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8004fe0:	f040 8155 	bne.w	800528e <HAL_PCD_IRQHandler+0x342>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	f003 ff82 	bl	8008eee <USB_ReadInterrupts>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f2c0 8225 	blt.w	800543a <HAL_PCD_IRQHandler+0x4ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	f003 ff7c 	bl	8008eee <USB_ReadInterrupts>
 8004ff6:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8004ffa:	d00a      	beq.n	8005012 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f013 0f01 	tst.w	r3, #1
 8005004:	f040 8232 	bne.w	800546c <HAL_PCD_IRQHandler+0x520>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6953      	ldr	r3, [r2, #20]
 800500c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005010:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	f003 ff6b 	bl	8008eee <USB_ReadInterrupts>
 8005018:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800501c:	f040 822a 	bne.w	8005474 <HAL_PCD_IRQHandler+0x528>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005020:	6820      	ldr	r0, [r4, #0]
 8005022:	f003 ff64 	bl	8008eee <USB_ReadInterrupts>
 8005026:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 800502a:	f040 827a 	bne.w	8005522 <HAL_PCD_IRQHandler+0x5d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	f003 ff5d 	bl	8008eee <USB_ReadInterrupts>
 8005034:	f010 0f08 	tst.w	r0, #8
 8005038:	f040 828b 	bne.w	8005552 <HAL_PCD_IRQHandler+0x606>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	f003 ff56 	bl	8008eee <USB_ReadInterrupts>
 8005042:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005046:	f000 829b 	beq.w	8005580 <HAL_PCD_IRQHandler+0x634>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800504a:	69b3      	ldr	r3, [r6, #24]
 800504c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005050:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005052:	7923      	ldrb	r3, [r4, #4]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f240 8293 	bls.w	8005580 <HAL_PCD_IRQHandler+0x634>
 800505a:	4627      	mov	r7, r4
 800505c:	2501      	movs	r5, #1
 800505e:	e28a      	b.n	8005576 <HAL_PCD_IRQHandler+0x62a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005060:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005064:	421d      	tst	r5, r3
 8005066:	d0ab      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x74>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005068:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800506c:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
 8005070:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8005074:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8005078:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 800507c:	4630      	mov	r0, r6
 800507e:	f003 fe8b 	bl	8008d98 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005082:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8005086:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
 800508a:	4453      	add	r3, sl
 800508c:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005090:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8005094:	4453      	add	r3, sl
 8005096:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 800509a:	e791      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x74>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800509c:	2208      	movs	r2, #8
 800509e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80050a2:	4630      	mov	r0, r6
 80050a4:	f003 fe78 	bl	8008d98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050a8:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 80050ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80050b0:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80050b4:	f8d1 2268 	ldr.w	r2, [r1, #616]	@ 0x268
 80050b8:	4413      	add	r3, r2
 80050ba:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
 80050be:	e77f      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x74>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050c0:	6820      	ldr	r0, [r4, #0]
 80050c2:	f003 ff18 	bl	8008ef6 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80050c6:	4605      	mov	r5, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d084      	beq.n	8004fd6 <HAL_PCD_IRQHandler+0x8a>
 80050cc:	f506 6730 	add.w	r7, r6, #2816	@ 0xb00
 80050d0:	46a2      	mov	sl, r4
      epnum = 0U;
 80050d2:	46d9      	mov	r9, fp
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050d4:	f8cd b010 	str.w	fp, [sp, #16]
 80050d8:	e0ab      	b.n	8005232 <HAL_PCD_IRQHandler+0x2e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050da:	2301      	movs	r3, #1
 80050dc:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050de:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050e0:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050e4:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 80050e8:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 80050ec:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80050ee:	79a2      	ldrb	r2, [r4, #6]
 80050f0:	2a01      	cmp	r2, #1
 80050f2:	d00e      	beq.n	8005112 <HAL_PCD_IRQHandler+0x1c6>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050f4:	4aa0      	ldr	r2, [pc, #640]	@ (8005378 <HAL_PCD_IRQHandler+0x42c>)
 80050f6:	4594      	cmp	ip, r2
 80050f8:	d04c      	beq.n	8005194 <HAL_PCD_IRQHandler+0x248>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050fa:	f1b9 0f00 	cmp.w	r9, #0
 80050fe:	d103      	bne.n	8005108 <HAL_PCD_IRQHandler+0x1bc>
 8005100:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 8005104:	2b00      	cmp	r3, #0
 8005106:	d056      	beq.n	80051b6 <HAL_PCD_IRQHandler+0x26a>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005108:	4659      	mov	r1, fp
 800510a:	4620      	mov	r0, r4
 800510c:	f007 fefe 	bl	800cf0c <HAL_PCD_DataOutStageCallback>
 8005110:	e09d      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005112:	f011 0f08 	tst.w	r1, #8
 8005116:	d00b      	beq.n	8005130 <HAL_PCD_IRQHandler+0x1e4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005118:	4a98      	ldr	r2, [pc, #608]	@ (800537c <HAL_PCD_IRQHandler+0x430>)
 800511a:	4594      	cmp	ip, r2
 800511c:	f240 8097 	bls.w	800524e <HAL_PCD_IRQHandler+0x302>
 8005120:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8005124:	f000 8093 	beq.w	800524e <HAL_PCD_IRQHandler+0x302>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005128:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800512c:	609a      	str	r2, [r3, #8]
 800512e:	e08e      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005130:	f011 0f20 	tst.w	r1, #32
 8005134:	d002      	beq.n	800513c <HAL_PCD_IRQHandler+0x1f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005136:	2220      	movs	r2, #32
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	e088      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800513c:	f011 0f28 	tst.w	r1, #40	@ 0x28
 8005140:	f040 8085 	bne.w	800524e <HAL_PCD_IRQHandler+0x302>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005144:	4a8d      	ldr	r2, [pc, #564]	@ (800537c <HAL_PCD_IRQHandler+0x430>)
 8005146:	4594      	cmp	ip, r2
 8005148:	d906      	bls.n	8005158 <HAL_PCD_IRQHandler+0x20c>
 800514a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800514e:	d003      	beq.n	8005158 <HAL_PCD_IRQHandler+0x20c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005150:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005154:	609a      	str	r2, [r3, #8]
 8005156:	e07a      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800515e:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	d107      	bne.n	800517e <HAL_PCD_IRQHandler+0x232>
          if (ep->xfer_len == 0U)
 800516e:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 8005172:	b14a      	cbz	r2, 8005188 <HAL_PCD_IRQHandler+0x23c>
            ep->xfer_buff += ep->xfer_count;
 8005174:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 8005178:	441a      	add	r2, r3
 800517a:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800517e:	4659      	mov	r1, fp
 8005180:	4620      	mov	r0, r4
 8005182:	f007 fec3 	bl	800cf0c <HAL_PCD_DataOutStageCallback>
 8005186:	e062      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005188:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800518c:	2101      	movs	r1, #1
 800518e:	f003 fef1 	bl	8008f74 <USB_EP0_OutStart>
 8005192:	e7f4      	b.n	800517e <HAL_PCD_IRQHandler+0x232>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005194:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8005198:	d003      	beq.n	80051a2 <HAL_PCD_IRQHandler+0x256>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800519a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	e055      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051a2:	f011 0f20 	tst.w	r1, #32
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a6:	bf1c      	itt	ne
 80051a8:	2220      	movne	r2, #32
 80051aa:	609a      	strne	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ac:	4659      	mov	r1, fp
 80051ae:	4620      	mov	r0, r4
 80051b0:	f007 feac 	bl	800cf0c <HAL_PCD_DataOutStageCallback>
 80051b4:	e04b      	b.n	800524e <HAL_PCD_IRQHandler+0x302>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051b6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80051ba:	2100      	movs	r1, #0
 80051bc:	f003 feda 	bl	8008f74 <USB_EP0_OutStart>
 80051c0:	e7a2      	b.n	8005108 <HAL_PCD_IRQHandler+0x1bc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051c2:	2308      	movs	r3, #8
 80051c4:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c6:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051c8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ce:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 80051d2:	6898      	ldr	r0, [r3, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d4:	4a69      	ldr	r2, [pc, #420]	@ (800537c <HAL_PCD_IRQHandler+0x430>)
 80051d6:	4291      	cmp	r1, r2
 80051d8:	f240 8259 	bls.w	800568e <HAL_PCD_IRQHandler+0x742>
 80051dc:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80051e0:	d002      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x29c>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80051e6:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051e8:	4620      	mov	r0, r4
 80051ea:	f007 fe87 	bl	800cefc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051ee:	79a3      	ldrb	r3, [r4, #6]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d12f      	bne.n	8005254 <HAL_PCD_IRQHandler+0x308>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051f4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80051f8:	2101      	movs	r1, #1
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	f003 feba 	bl	8008f74 <USB_EP0_OutStart>
 8005200:	e028      	b.n	8005254 <HAL_PCD_IRQHandler+0x308>
            if (ep->is_iso_incomplete == 1U)
 8005202:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 8005206:	2b01      	cmp	r3, #1
 8005208:	d036      	beq.n	8005278 <HAL_PCD_IRQHandler+0x32c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800520a:	2302      	movs	r3, #2
 800520c:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800520e:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005212:	bf1c      	itt	ne
 8005214:	2320      	movne	r3, #32
 8005216:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005218:	f418 5f00 	tst.w	r8, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800521c:	bf1c      	itt	ne
 800521e:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8005222:	60bb      	strne	r3, [r7, #8]
        epnum++;
 8005224:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8005228:	3720      	adds	r7, #32
 800522a:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 800522e:	086d      	lsrs	r5, r5, #1
 8005230:	d02a      	beq.n	8005288 <HAL_PCD_IRQHandler+0x33c>
        if ((ep_intr & 0x1U) != 0U)
 8005232:	f015 0f01 	tst.w	r5, #1
 8005236:	d0f5      	beq.n	8005224 <HAL_PCD_IRQHandler+0x2d8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005238:	fa5f fb89 	uxtb.w	fp, r9
 800523c:	4659      	mov	r1, fp
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	f003 fe69 	bl	8008f16 <USB_ReadDevOutEPInterrupt>
 8005244:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005246:	f010 0f01 	tst.w	r0, #1
 800524a:	f47f af46 	bne.w	80050da <HAL_PCD_IRQHandler+0x18e>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800524e:	f018 0f08 	tst.w	r8, #8
 8005252:	d1b6      	bne.n	80051c2 <HAL_PCD_IRQHandler+0x276>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005254:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005258:	bf1c      	itt	ne
 800525a:	2310      	movne	r3, #16
 800525c:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800525e:	f018 0f02 	tst.w	r8, #2
 8005262:	d0d4      	beq.n	800520e <HAL_PCD_IRQHandler+0x2c2>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005264:	6973      	ldr	r3, [r6, #20]
 8005266:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800526a:	d0ca      	beq.n	8005202 <HAL_PCD_IRQHandler+0x2b6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800526c:	9a03      	ldr	r2, [sp, #12]
 800526e:	6853      	ldr	r3, [r2, #4]
 8005270:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005274:	6053      	str	r3, [r2, #4]
 8005276:	e7c4      	b.n	8005202 <HAL_PCD_IRQHandler+0x2b6>
              ep->is_iso_incomplete = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800527e:	4659      	mov	r1, fp
 8005280:	4620      	mov	r0, r4
 8005282:	f007 fe93 	bl	800cfac <HAL_PCD_ISOOUTIncompleteCallback>
 8005286:	e7c0      	b.n	800520a <HAL_PCD_IRQHandler+0x2be>
 8005288:	f8dd b010 	ldr.w	fp, [sp, #16]
 800528c:	e6a3      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x8a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	f003 fe39 	bl	8008f06 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8005294:	4680      	mov	r8, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	f43f aea4 	beq.w	8004fe4 <HAL_PCD_IRQHandler+0x98>
 800529c:	46a2      	mov	sl, r4
 800529e:	f506 6910 	add.w	r9, r6, #2304	@ 0x900
      epnum = 0U;
 80052a2:	465d      	mov	r5, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052a4:	f8cd b010 	str.w	fp, [sp, #16]
 80052a8:	e024      	b.n	80052f4 <HAL_PCD_IRQHandler+0x3a8>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052aa:	4659      	mov	r1, fp
 80052ac:	4620      	mov	r0, r4
 80052ae:	f007 fe39 	bl	800cf24 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052b2:	f017 0f08 	tst.w	r7, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052b6:	bf1c      	itt	ne
 80052b8:	2308      	movne	r3, #8
 80052ba:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052be:	f017 0f10 	tst.w	r7, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052c2:	bf1c      	itt	ne
 80052c4:	2310      	movne	r3, #16
 80052c6:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052ca:	f017 0f40 	tst.w	r7, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052ce:	bf1c      	itt	ne
 80052d0:	2340      	movne	r3, #64	@ 0x40
 80052d2:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052d6:	f017 0f02 	tst.w	r7, #2
 80052da:	d139      	bne.n	8005350 <HAL_PCD_IRQHandler+0x404>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052dc:	f017 0f80 	tst.w	r7, #128	@ 0x80
 80052e0:	d14e      	bne.n	8005380 <HAL_PCD_IRQHandler+0x434>
        epnum++;
 80052e2:	3501      	adds	r5, #1
      while (ep_intr != 0U)
 80052e4:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80052e8:	f109 0920 	add.w	r9, r9, #32
 80052ec:	ea5f 0858 	movs.w	r8, r8, lsr #1
 80052f0:	f000 80a0 	beq.w	8005434 <HAL_PCD_IRQHandler+0x4e8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052f4:	f018 0f01 	tst.w	r8, #1
 80052f8:	d0f3      	beq.n	80052e2 <HAL_PCD_IRQHandler+0x396>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052fa:	fa5f fb85 	uxtb.w	fp, r5
 80052fe:	4659      	mov	r1, fp
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	f003 fe11 	bl	8008f28 <USB_ReadDevInEPInterrupt>
 8005306:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005308:	f010 0f01 	tst.w	r0, #1
 800530c:	d0d1      	beq.n	80052b2 <HAL_PCD_IRQHandler+0x366>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800530e:	9803      	ldr	r0, [sp, #12]
 8005310:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005312:	f005 020f 	and.w	r2, r5, #15
 8005316:	2101      	movs	r1, #1
 8005318:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800531c:	ea23 0302 	bic.w	r3, r3, r2
 8005320:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005322:	f8c9 1008 	str.w	r1, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8005326:	79a3      	ldrb	r3, [r4, #6]
 8005328:	428b      	cmp	r3, r1
 800532a:	d1be      	bne.n	80052aa <HAL_PCD_IRQHandler+0x35e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800532c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8005330:	f8da 201c 	ldr.w	r2, [sl, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f8ca 3020 	str.w	r3, [sl, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800533a:	2d00      	cmp	r5, #0
 800533c:	d1b5      	bne.n	80052aa <HAL_PCD_IRQHandler+0x35e>
 800533e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1b2      	bne.n	80052aa <HAL_PCD_IRQHandler+0x35e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005344:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f003 fe13 	bl	8008f74 <USB_EP0_OutStart>
 800534e:	e7ac      	b.n	80052aa <HAL_PCD_IRQHandler+0x35e>
            (void)USB_FlushTxFifo(USBx, epnum);
 8005350:	4629      	mov	r1, r5
 8005352:	4630      	mov	r0, r6
 8005354:	f003 f9bf 	bl	80086d6 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005358:	f89a 3017 	ldrb.w	r3, [sl, #23]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d003      	beq.n	8005368 <HAL_PCD_IRQHandler+0x41c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005360:	2302      	movs	r3, #2
 8005362:	f8c9 3008 	str.w	r3, [r9, #8]
 8005366:	e7b9      	b.n	80052dc <HAL_PCD_IRQHandler+0x390>
              ep->is_iso_incomplete = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	f88a 3017 	strb.w	r3, [sl, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800536e:	4659      	mov	r1, fp
 8005370:	4620      	mov	r0, r4
 8005372:	f007 fe21 	bl	800cfb8 <HAL_PCD_ISOINIncompleteCallback>
 8005376:	e7f3      	b.n	8005360 <HAL_PCD_IRQHandler+0x414>
 8005378:	4f54310a 	.word	0x4f54310a
 800537c:	4f54300a 	.word	0x4f54300a
  if (ep->xfer_count > ep->xfer_len)
 8005380:	4657      	mov	r7, sl
 8005382:	f8da c028 	ldr.w	ip, [sl, #40]	@ 0x28
 8005386:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800538a:	459c      	cmp	ip, r3
 800538c:	d8a9      	bhi.n	80052e2 <HAL_PCD_IRQHandler+0x396>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538e:	6821      	ldr	r1, [r4, #0]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005390:	f501 6010 	add.w	r0, r1, #2304	@ 0x900
 8005394:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8005398:	f8d0 e018 	ldr.w	lr, [r0, #24]
  len = ep->xfer_len - ep->xfer_count;
 800539c:	eba3 030c 	sub.w	r3, r3, ip
  len32b = (len + 3U) / 4U;
 80053a0:	f8da 201c 	ldr.w	r2, [sl, #28]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bf28      	it	cs
 80053a8:	4613      	movcs	r3, r2
 80053aa:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ac:	fa1f f28e 	uxth.w	r2, lr
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053b0:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 80053b4:	d328      	bcc.n	8005408 <HAL_PCD_IRQHandler+0x4bc>
 80053b6:	f8cd a014 	str.w	sl, [sp, #20]
 80053ba:	9606      	str	r6, [sp, #24]
 80053bc:	9507      	str	r5, [sp, #28]
 80053be:	460e      	mov	r6, r1
 80053c0:	4682      	mov	sl, r0
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 80053c6:	429d      	cmp	r5, r3
 80053c8:	d924      	bls.n	8005414 <HAL_PCD_IRQHandler+0x4c8>
    len = ep->xfer_len - ep->xfer_count;
 80053ca:	1aed      	subs	r5, r5, r3
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	429d      	cmp	r5, r3
 80053d0:	bf28      	it	cs
 80053d2:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053d4:	79a3      	ldrb	r3, [r4, #6]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	b2ab      	uxth	r3, r5
 80053da:	465a      	mov	r2, fp
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	4630      	mov	r0, r6
 80053e0:	f003 fbaf 	bl	8008b42 <USB_WritePacket>
    ep->xfer_buff  += len;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	442b      	add	r3, r5
 80053e8:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	442b      	add	r3, r5
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053f0:	f8da 3018 	ldr.w	r3, [sl, #24]
    len32b = (len + 3U) / 4U;
 80053f4:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053f8:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 80053fc:	d2e1      	bcs.n	80053c2 <HAL_PCD_IRQHandler+0x476>
 80053fe:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005402:	9d07      	ldr	r5, [sp, #28]
 8005404:	4631      	mov	r1, r6
 8005406:	9e06      	ldr	r6, [sp, #24]
  if (ep->xfer_len <= ep->xfer_count)
 8005408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	429a      	cmp	r2, r3
 800540e:	f63f af68 	bhi.w	80052e2 <HAL_PCD_IRQHandler+0x396>
 8005412:	e004      	b.n	800541e <HAL_PCD_IRQHandler+0x4d2>
 8005414:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005418:	9d07      	ldr	r5, [sp, #28]
 800541a:	4631      	mov	r1, r6
 800541c:	9e06      	ldr	r6, [sp, #24]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800541e:	f8d1 3834 	ldr.w	r3, [r1, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005422:	f005 000f 	and.w	r0, r5, #15
 8005426:	2201      	movs	r2, #1
 8005428:	4082      	lsls	r2, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800542a:	ea23 0302 	bic.w	r3, r3, r2
 800542e:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834
 8005432:	e756      	b.n	80052e2 <HAL_PCD_IRQHandler+0x396>
 8005434:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005438:	e5d4      	b.n	8004fe4 <HAL_PCD_IRQHandler+0x98>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800543a:	9a03      	ldr	r2, [sp, #12]
 800543c:	6853      	ldr	r3, [r2, #4]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8005444:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8005448:	2b01      	cmp	r3, #1
 800544a:	d008      	beq.n	800545e <HAL_PCD_IRQHandler+0x512>
        HAL_PCD_ResumeCallback(hpcd);
 800544c:	4620      	mov	r0, r4
 800544e:	f007 fda7 	bl	800cfa0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6953      	ldr	r3, [r2, #20]
 8005456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800545a:	6153      	str	r3, [r2, #20]
 800545c:	e5c8      	b.n	8004ff0 <HAL_PCD_IRQHandler+0xa4>
        hpcd->LPM_State = LPM_L0;
 800545e:	2100      	movs	r1, #0
 8005460:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f95b 	bl	8005720 <HAL_PCDEx_LPM_Callback>
 800546a:	e7f2      	b.n	8005452 <HAL_PCD_IRQHandler+0x506>
        HAL_PCD_SuspendCallback(hpcd);
 800546c:	4620      	mov	r0, r4
 800546e:	f007 fd7f 	bl	800cf70 <HAL_PCD_SuspendCallback>
 8005472:	e5c9      	b.n	8005008 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005474:	9a03      	ldr	r2, [sp, #12]
 8005476:	6853      	ldr	r3, [r2, #4]
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800547e:	2110      	movs	r1, #16
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	f003 f928 	bl	80086d6 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005486:	7923      	ldrb	r3, [r4, #4]
 8005488:	b1e3      	cbz	r3, 80054c4 <HAL_PCD_IRQHandler+0x578>
 800548a:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800548e:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8005492:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800549a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800549c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80054a4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80054a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80054b0:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80054b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b8:	f10b 0b01 	add.w	fp, fp, #1
 80054bc:	3320      	adds	r3, #32
 80054be:	7922      	ldrb	r2, [r4, #4]
 80054c0:	455a      	cmp	r2, fp
 80054c2:	d8e6      	bhi.n	8005492 <HAL_PCD_IRQHandler+0x546>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054c4:	9a03      	ldr	r2, [sp, #12]
 80054c6:	69d3      	ldr	r3, [r2, #28]
 80054c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80054cc:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054ce:	7be3      	ldrb	r3, [r4, #15]
 80054d0:	b1db      	cbz	r3, 800550a <HAL_PCD_IRQHandler+0x5be>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054d2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 80054d6:	f043 030b 	orr.w	r3, r3, #11
 80054da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054de:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80054e0:	f043 030b 	orr.w	r3, r3, #11
 80054e4:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054e6:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
 80054ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80054ee:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054f2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80054f6:	79a1      	ldrb	r1, [r4, #6]
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	f003 fd3b 	bl	8008f74 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	6953      	ldr	r3, [r2, #20]
 8005502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005506:	6153      	str	r3, [r2, #20]
 8005508:	e58a      	b.n	8005020 <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800550a:	9a03      	ldr	r2, [sp, #12]
 800550c:	6953      	ldr	r3, [r2, #20]
 800550e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005512:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005516:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005518:	6913      	ldr	r3, [r2, #16]
 800551a:	f043 030b 	orr.w	r3, r3, #11
 800551e:	6113      	str	r3, [r2, #16]
 8005520:	e7e1      	b.n	80054e6 <HAL_PCD_IRQHandler+0x59a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	f003 fd15 	bl	8008f52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	f003 f9f1 	bl	8008910 <USB_GetDevSpeed>
 800552e:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005530:	6825      	ldr	r5, [r4, #0]
 8005532:	f000 fc13 	bl	8005d5c <HAL_RCC_GetHCLKFreq>
 8005536:	4601      	mov	r1, r0
 8005538:	79e2      	ldrb	r2, [r4, #7]
 800553a:	4628      	mov	r0, r5
 800553c:	f003 f81c 	bl	8008578 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005540:	4620      	mov	r0, r4
 8005542:	f007 fd00 	bl	800cf46 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	6953      	ldr	r3, [r2, #20]
 800554a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800554e:	6153      	str	r3, [r2, #20]
 8005550:	e56d      	b.n	800502e <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8005552:	4620      	mov	r0, r4
 8005554:	f007 fcf1 	bl	800cf3a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	6953      	ldr	r3, [r2, #20]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	6153      	str	r3, [r2, #20]
 8005562:	e56b      	b.n	800503c <HAL_PCD_IRQHandler+0xf0>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005564:	b2e9      	uxtb	r1, r5
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff fcde 	bl	8004f28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556c:	3501      	adds	r5, #1
 800556e:	3724      	adds	r7, #36	@ 0x24
 8005570:	7923      	ldrb	r3, [r4, #4]
 8005572:	42ab      	cmp	r3, r5
 8005574:	d904      	bls.n	8005580 <HAL_PCD_IRQHandler+0x634>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005576:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 800557a:	2b01      	cmp	r3, #1
 800557c:	d1f6      	bne.n	800556c <HAL_PCD_IRQHandler+0x620>
 800557e:	e7f1      	b.n	8005564 <HAL_PCD_IRQHandler+0x618>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	f003 fcb4 	bl	8008eee <USB_ReadInterrupts>
 8005586:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 800558a:	d024      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x68a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800558c:	7923      	ldrb	r3, [r4, #4]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d91c      	bls.n	80055cc <HAL_PCD_IRQHandler+0x680>
 8005592:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 8005596:	4625      	mov	r5, r4
 8005598:	2701      	movs	r7, #1
 800559a:	e006      	b.n	80055aa <HAL_PCD_IRQHandler+0x65e>
 800559c:	3701      	adds	r7, #1
 800559e:	f108 0820 	add.w	r8, r8, #32
 80055a2:	3524      	adds	r5, #36	@ 0x24
 80055a4:	7923      	ldrb	r3, [r4, #4]
 80055a6:	42bb      	cmp	r3, r7
 80055a8:	d910      	bls.n	80055cc <HAL_PCD_IRQHandler+0x680>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055aa:	f8d8 2000 	ldr.w	r2, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055ae:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d1f2      	bne.n	800559c <HAL_PCD_IRQHandler+0x650>
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	daf0      	bge.n	800559c <HAL_PCD_IRQHandler+0x650>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055ba:	f885 303b 	strb.w	r3, [r5, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055be:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 80055c2:	b2c9      	uxtb	r1, r1
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fcaf 	bl	8004f28 <HAL_PCD_EP_Abort>
 80055ca:	e7e7      	b.n	800559c <HAL_PCD_IRQHandler+0x650>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	6953      	ldr	r3, [r2, #20]
 80055d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055d4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055d6:	6820      	ldr	r0, [r4, #0]
 80055d8:	f003 fc89 	bl	8008eee <USB_ReadInterrupts>
 80055dc:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80055e0:	d031      	beq.n	8005646 <HAL_PCD_IRQHandler+0x6fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055e2:	7923      	ldrb	r3, [r4, #4]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d929      	bls.n	800563c <HAL_PCD_IRQHandler+0x6f0>
 80055e8:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 80055ec:	4623      	mov	r3, r4
 80055ee:	2101      	movs	r1, #1
 80055f0:	e005      	b.n	80055fe <HAL_PCD_IRQHandler+0x6b2>
 80055f2:	3101      	adds	r1, #1
 80055f4:	3220      	adds	r2, #32
 80055f6:	3324      	adds	r3, #36	@ 0x24
 80055f8:	7920      	ldrb	r0, [r4, #4]
 80055fa:	4288      	cmp	r0, r1
 80055fc:	d91e      	bls.n	800563c <HAL_PCD_IRQHandler+0x6f0>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055fe:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005600:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
 8005604:	2801      	cmp	r0, #1
 8005606:	d1f4      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x6a6>
 8005608:	2d00      	cmp	r5, #0
 800560a:	daf2      	bge.n	80055f2 <HAL_PCD_IRQHandler+0x6a6>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800560c:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8005610:	f8d4 04d4 	ldr.w	r0, [r4, #1236]	@ 0x4d4
 8005614:	f000 0001 	and.w	r0, r0, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005618:	4285      	cmp	r5, r0
 800561a:	d1ea      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x6a6>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800561c:	2001      	movs	r0, #1
 800561e:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005622:	69b0      	ldr	r0, [r6, #24]
 8005624:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8005628:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800562a:	6970      	ldr	r0, [r6, #20]
 800562c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005630:	d1df      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x6a6>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005632:	9a03      	ldr	r2, [sp, #12]
 8005634:	6853      	ldr	r3, [r2, #4]
 8005636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800563a:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	6953      	ldr	r3, [r2, #20]
 8005640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005644:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	f003 fc51 	bl	8008eee <USB_ReadInterrupts>
 800564c:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005650:	d110      	bne.n	8005674 <HAL_PCD_IRQHandler+0x728>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	f003 fc4b 	bl	8008eee <USB_ReadInterrupts>
 8005658:	f010 0f04 	tst.w	r0, #4
 800565c:	f43f ac7f 	beq.w	8004f5e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005664:	f015 0f04 	tst.w	r5, #4
 8005668:	d10d      	bne.n	8005686 <HAL_PCD_IRQHandler+0x73a>
      hpcd->Instance->GOTGINT |= RegVal;
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	6853      	ldr	r3, [r2, #4]
 800566e:	432b      	orrs	r3, r5
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	e474      	b.n	8004f5e <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8005674:	4620      	mov	r0, r4
 8005676:	f007 fca5 	bl	800cfc4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	6953      	ldr	r3, [r2, #20]
 800567e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005682:	6153      	str	r3, [r2, #20]
 8005684:	e7e5      	b.n	8005652 <HAL_PCD_IRQHandler+0x706>
        HAL_PCD_DisconnectCallback(hpcd);
 8005686:	4620      	mov	r0, r4
 8005688:	f007 fca2 	bl	800cfd0 <HAL_PCD_DisconnectCallback>
 800568c:	e7ed      	b.n	800566a <HAL_PCD_IRQHandler+0x71e>
  HAL_PCD_SetupStageCallback(hpcd);
 800568e:	4620      	mov	r0, r4
 8005690:	f007 fc34 	bl	800cefc <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005694:	e5de      	b.n	8005254 <HAL_PCD_IRQHandler+0x308>
 8005696:	bf00      	nop

08005698 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8005698:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800569c:	2b01      	cmp	r3, #1
 800569e:	d014      	beq.n	80056ca <HAL_PCD_EP_Flush+0x32>
{
 80056a0:	b510      	push	{r4, lr}
 80056a2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80056a4:	2301      	movs	r3, #1
 80056a6:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 80056aa:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80056ae:	d106      	bne.n	80056be <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 80056b0:	6800      	ldr	r0, [r0, #0]
 80056b2:	f003 f835 	bl	8008720 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 80056b6:	2000      	movs	r0, #0
 80056b8:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80056bc:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80056be:	f001 010f 	and.w	r1, r1, #15
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	f003 f807 	bl	80086d6 <USB_FlushTxFifo>
 80056c8:	e7f5      	b.n	80056b6 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 80056ca:	2002      	movs	r0, #2
}
 80056cc:	4770      	bx	lr

080056ce <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056ce:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056d0:	6804      	ldr	r4, [r0, #0]
 80056d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 80056d4:	b931      	cbnz	r1, 80056e4 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056d6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80056da:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80056dc:	2000      	movs	r0, #0
 80056de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e2:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80056e6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80056ea:	f1b1 0c01 	subs.w	ip, r1, #1
 80056ee:	d00b      	beq.n	8005708 <HAL_PCDEx_SetTxFiFo+0x3a>
 80056f0:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056f2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80056f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80056fa:	6849      	ldr	r1, [r1, #4]
 80056fc:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005700:	3301      	adds	r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4563      	cmp	r3, ip
 8005706:	d3f4      	bcc.n	80056f2 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005708:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800570c:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 8005710:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8005714:	6060      	str	r0, [r4, #4]
 8005716:	e7e1      	b.n	80056dc <HAL_PCDEx_SetTxFiFo+0xe>

08005718 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005718:	6803      	ldr	r3, [r0, #0]
 800571a:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 800571c:	2000      	movs	r0, #0
 800571e:	4770      	bx	lr

08005720 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005720:	4770      	bx	lr
	...

08005724 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005724:	2800      	cmp	r0, #0
 8005726:	f000 81e1 	beq.w	8005aec <HAL_RCC_OscConfig+0x3c8>
{
 800572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	6803      	ldr	r3, [r0, #0]
 8005734:	f013 0f01 	tst.w	r3, #1
 8005738:	d03b      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800573a:	4b9f      	ldr	r3, [pc, #636]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b04      	cmp	r3, #4
 8005744:	d02c      	beq.n	80057a0 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005746:	4b9c      	ldr	r3, [pc, #624]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800574e:	2b08      	cmp	r3, #8
 8005750:	d021      	beq.n	8005796 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005758:	d04f      	beq.n	80057fa <HAL_RCC_OscConfig+0xd6>
 800575a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800575e:	d052      	beq.n	8005806 <HAL_RCC_OscConfig+0xe2>
 8005760:	4b95      	ldr	r3, [pc, #596]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005770:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005772:	6863      	ldr	r3, [r4, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d050      	beq.n	800581a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fe fe42 	bl	8004400 <HAL_GetTick>
 800577c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	4e8e      	ldr	r6, [pc, #568]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005786:	d114      	bne.n	80057b2 <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fe fe3a 	bl	8004400 <HAL_GetTick>
 800578c:	1b40      	subs	r0, r0, r5
 800578e:	2864      	cmp	r0, #100	@ 0x64
 8005790:	d9f6      	bls.n	8005780 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8005792:	2003      	movs	r0, #3
 8005794:	e1b1      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b88      	ldr	r3, [pc, #544]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800579e:	d0d8      	beq.n	8005752 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a0:	4b85      	ldr	r3, [pc, #532]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8e>
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 819f 	beq.w	8005af0 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f013 0f02 	tst.w	r3, #2
 80057b8:	d054      	beq.n	8005864 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057ba:	4b7f      	ldr	r3, [pc, #508]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f013 0f0c 	tst.w	r3, #12
 80057c2:	d03e      	beq.n	8005842 <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057c4:	4b7c      	ldr	r3, [pc, #496]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d033      	beq.n	8005838 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d068      	beq.n	80058a8 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d6:	4b79      	ldr	r3, [pc, #484]	@ (80059bc <HAL_RCC_OscConfig+0x298>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fe fe10 	bl	8004400 <HAL_GetTick>
 80057e0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e2:	4e75      	ldr	r6, [pc, #468]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	f013 0f02 	tst.w	r3, #2
 80057ea:	d154      	bne.n	8005896 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fe fe08 	bl	8004400 <HAL_GetTick>
 80057f0:	1b40      	subs	r0, r0, r5
 80057f2:	2802      	cmp	r0, #2
 80057f4:	d9f6      	bls.n	80057e4 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80057f6:	2003      	movs	r0, #3
 80057f8:	e17f      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fa:	4a6f      	ldr	r2, [pc, #444]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80057fc:	6813      	ldr	r3, [r2, #0]
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e7b5      	b.n	8005772 <HAL_RCC_OscConfig+0x4e>
 8005806:	4b6c      	ldr	r3, [pc, #432]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e7ab      	b.n	8005772 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800581a:	f7fe fdf1 	bl	8004400 <HAL_GetTick>
 800581e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005820:	4e65      	ldr	r6, [pc, #404]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005822:	6833      	ldr	r3, [r6, #0]
 8005824:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005828:	d0c3      	beq.n	80057b2 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582a:	f7fe fde9 	bl	8004400 <HAL_GetTick>
 800582e:	1b40      	subs	r0, r0, r5
 8005830:	2864      	cmp	r0, #100	@ 0x64
 8005832:	d9f6      	bls.n	8005822 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8005834:	2003      	movs	r0, #3
 8005836:	e160      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005838:	4b5f      	ldr	r3, [pc, #380]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005840:	d1c6      	bne.n	80057d0 <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	4b5d      	ldr	r3, [pc, #372]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f013 0f02 	tst.w	r3, #2
 800584a:	d003      	beq.n	8005854 <HAL_RCC_OscConfig+0x130>
 800584c:	68e3      	ldr	r3, [r4, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	f040 8150 	bne.w	8005af4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4a58      	ldr	r2, [pc, #352]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005856:	6813      	ldr	r3, [r2, #0]
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800585e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005862:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f013 0f08 	tst.w	r3, #8
 800586a:	d042      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800586c:	6963      	ldr	r3, [r4, #20]
 800586e:	b36b      	cbz	r3, 80058cc <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005870:	4b52      	ldr	r3, [pc, #328]	@ (80059bc <HAL_RCC_OscConfig+0x298>)
 8005872:	2201      	movs	r2, #1
 8005874:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fe fdc2 	bl	8004400 <HAL_GetTick>
 800587c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	4e4e      	ldr	r6, [pc, #312]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005880:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005882:	f013 0f02 	tst.w	r3, #2
 8005886:	d134      	bne.n	80058f2 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005888:	f7fe fdba 	bl	8004400 <HAL_GetTick>
 800588c:	1b40      	subs	r0, r0, r5
 800588e:	2802      	cmp	r0, #2
 8005890:	d9f6      	bls.n	8005880 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
 8005894:	e131      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005896:	4a48      	ldr	r2, [pc, #288]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	6921      	ldr	r1, [r4, #16]
 800589c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80058a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e7dd      	b.n	8005864 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80058a8:	4b44      	ldr	r3, [pc, #272]	@ (80059bc <HAL_RCC_OscConfig+0x298>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058ae:	f7fe fda7 	bl	8004400 <HAL_GetTick>
 80058b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b4:	4e40      	ldr	r6, [pc, #256]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	f013 0f02 	tst.w	r3, #2
 80058bc:	d0d2      	beq.n	8005864 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058be:	f7fe fd9f 	bl	8004400 <HAL_GetTick>
 80058c2:	1b40      	subs	r0, r0, r5
 80058c4:	2802      	cmp	r0, #2
 80058c6:	d9f6      	bls.n	80058b6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80058c8:	2003      	movs	r0, #3
 80058ca:	e116      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058cc:	4b3b      	ldr	r3, [pc, #236]	@ (80059bc <HAL_RCC_OscConfig+0x298>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d4:	f7fe fd94 	bl	8004400 <HAL_GetTick>
 80058d8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058da:	4e37      	ldr	r6, [pc, #220]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80058dc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80058de:	f013 0f02 	tst.w	r3, #2
 80058e2:	d006      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fe fd8c 	bl	8004400 <HAL_GetTick>
 80058e8:	1b40      	subs	r0, r0, r5
 80058ea:	2802      	cmp	r0, #2
 80058ec:	d9f6      	bls.n	80058dc <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80058ee:	2003      	movs	r0, #3
 80058f0:	e103      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f013 0f04 	tst.w	r3, #4
 80058f8:	d076      	beq.n	80059e8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058fa:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005902:	d133      	bne.n	800596c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005904:	2300      	movs	r3, #0
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	4b2b      	ldr	r3, [pc, #172]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 800590a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800590c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005910:	641a      	str	r2, [r3, #64]	@ 0x40
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800591c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_RCC_OscConfig+0x29c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005926:	d023      	beq.n	8005970 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005928:	68a3      	ldr	r3, [r4, #8]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d034      	beq.n	8005998 <HAL_RCC_OscConfig+0x274>
 800592e:	2b05      	cmp	r3, #5
 8005930:	d038      	beq.n	80059a4 <HAL_RCC_OscConfig+0x280>
 8005932:	4b21      	ldr	r3, [pc, #132]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 8005934:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	671a      	str	r2, [r3, #112]	@ 0x70
 800593c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800593e:	f022 0204 	bic.w	r2, r2, #4
 8005942:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005944:	68a3      	ldr	r3, [r4, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d03c      	beq.n	80059c4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fe fd59 	bl	8004400 <HAL_GetTick>
 800594e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4f19      	ldr	r7, [pc, #100]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005958:	f013 0f02 	tst.w	r3, #2
 800595c:	d143      	bne.n	80059e6 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fe fd4f 	bl	8004400 <HAL_GetTick>
 8005962:	1b80      	subs	r0, r0, r6
 8005964:	4540      	cmp	r0, r8
 8005966:	d9f6      	bls.n	8005956 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8005968:	2003      	movs	r0, #3
 800596a:	e0c6      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 800596c:	2500      	movs	r5, #0
 800596e:	e7d6      	b.n	800591e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005970:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <HAL_RCC_OscConfig+0x29c>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005978:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800597a:	f7fe fd41 	bl	8004400 <HAL_GetTick>
 800597e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	4f0f      	ldr	r7, [pc, #60]	@ (80059c0 <HAL_RCC_OscConfig+0x29c>)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005988:	d1ce      	bne.n	8005928 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598a:	f7fe fd39 	bl	8004400 <HAL_GetTick>
 800598e:	1b80      	subs	r0, r0, r6
 8005990:	2802      	cmp	r0, #2
 8005992:	d9f6      	bls.n	8005982 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8005994:	2003      	movs	r0, #3
 8005996:	e0b0      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	4a07      	ldr	r2, [pc, #28]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 800599a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a2:	e7cf      	b.n	8005944 <HAL_RCC_OscConfig+0x220>
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <HAL_RCC_OscConfig+0x294>)
 80059a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059a8:	f042 0204 	orr.w	r2, r2, #4
 80059ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80059ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80059b6:	e7c5      	b.n	8005944 <HAL_RCC_OscConfig+0x220>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	42470000 	.word	0x42470000
 80059c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c4:	f7fe fd1c 	bl	8004400 <HAL_GetTick>
 80059c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ca:	4f52      	ldr	r7, [pc, #328]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059d2:	f013 0f02 	tst.w	r3, #2
 80059d6:	d006      	beq.n	80059e6 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d8:	f7fe fd12 	bl	8004400 <HAL_GetTick>
 80059dc:	1b80      	subs	r0, r0, r6
 80059de:	4540      	cmp	r0, r8
 80059e0:	d9f6      	bls.n	80059d0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80059e2:	2003      	movs	r0, #3
 80059e4:	e089      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059e6:	b9ed      	cbnz	r5, 8005a24 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e8:	69a3      	ldr	r3, [r4, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8084 	beq.w	8005af8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f0:	4a48      	ldr	r2, [pc, #288]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	f002 020c 	and.w	r2, r2, #12
 80059f8:	2a08      	cmp	r2, #8
 80059fa:	d051      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d017      	beq.n	8005a30 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <HAL_RCC_OscConfig+0x3f4>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a06:	f7fe fcfb 	bl	8004400 <HAL_GetTick>
 8005a0a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0c:	4d41      	ldr	r5, [pc, #260]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a14:	d042      	beq.n	8005a9c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fe fcf3 	bl	8004400 <HAL_GetTick>
 8005a1a:	1b00      	subs	r0, r0, r4
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	d9f6      	bls.n	8005a0e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005a20:	2003      	movs	r0, #3
 8005a22:	e06a      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a24:	4a3b      	ldr	r2, [pc, #236]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005a26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a2e:	e7db      	b.n	80059e8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8005a30:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <HAL_RCC_OscConfig+0x3f4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005a36:	f7fe fce3 	bl	8004400 <HAL_GetTick>
 8005a3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3c:	4e35      	ldr	r6, [pc, #212]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005a3e:	6833      	ldr	r3, [r6, #0]
 8005a40:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a44:	d006      	beq.n	8005a54 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fe fcdb 	bl	8004400 <HAL_GetTick>
 8005a4a:	1b40      	subs	r0, r0, r5
 8005a4c:	2802      	cmp	r0, #2
 8005a4e:	d9f6      	bls.n	8005a3e <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8005a50:	2003      	movs	r0, #3
 8005a52:	e052      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a54:	69e3      	ldr	r3, [r4, #28]
 8005a56:	6a22      	ldr	r2, [r4, #32]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005a5c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005a60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a66:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a70:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005a72:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a74:	4b28      	ldr	r3, [pc, #160]	@ (8005b18 <HAL_RCC_OscConfig+0x3f4>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005a7a:	f7fe fcc1 	bl	8004400 <HAL_GetTick>
 8005a7e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	4d24      	ldr	r5, [pc, #144]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005a82:	682b      	ldr	r3, [r5, #0]
 8005a84:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a88:	d106      	bne.n	8005a98 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fe fcb9 	bl	8004400 <HAL_GetTick>
 8005a8e:	1b00      	subs	r0, r0, r4
 8005a90:	2802      	cmp	r0, #2
 8005a92:	d9f6      	bls.n	8005a82 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8005a94:	2003      	movs	r0, #3
 8005a96:	e030      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e02e      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e02c      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d02d      	beq.n	8005b00 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b14 <HAL_RCC_OscConfig+0x3f0>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aac:	69e2      	ldr	r2, [r4, #28]
 8005aae:	4291      	cmp	r1, r2
 8005ab0:	d128      	bne.n	8005b04 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	d125      	bne.n	8005b08 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005abc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005abe:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005ac8:	d120      	bne.n	8005b0c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aca:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005ace:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005ad0:	0852      	lsrs	r2, r2, #1
 8005ad2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005ad8:	d11a      	bne.n	8005b10 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ada:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005adc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005ae4:	bf14      	ite	ne
 8005ae6:	2001      	movne	r0, #1
 8005ae8:	2000      	moveq	r0, #0
 8005aea:	e006      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8005aec:	2001      	movs	r0, #1
}
 8005aee:	4770      	bx	lr
        return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
 8005af2:	e002      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e000      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8005af8:	2000      	movs	r0, #0
}
 8005afa:	b002      	add	sp, #8
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7fa      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7f8      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
 8005b08:	2001      	movs	r0, #1
 8005b0a:	e7f6      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	e7f4      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
 8005b10:	2001      	movs	r0, #1
 8005b12:	e7f2      	b.n	8005afa <HAL_RCC_OscConfig+0x3d6>
 8005b14:	40023800 	.word	0x40023800
 8005b18:	42470000 	.word	0x42470000

08005b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b1c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b1e:	4b33      	ldr	r3, [pc, #204]	@ (8005bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d05b      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0xc6>
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d15b      	bne.n	8005be6 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005b3c:	d02c      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b40:	6858      	ldr	r0, [r3, #4]
 8005b42:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005b46:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005b4a:	ebbc 0c00 	subs.w	ip, ip, r0
 8005b4e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005b52:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005b56:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005b5a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005b5e:	ebb1 010c 	subs.w	r1, r1, ip
 8005b62:	eb63 030e 	sbc.w	r3, r3, lr
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6c:	00c9      	lsls	r1, r1, #3
 8005b6e:	eb11 0c00 	adds.w	ip, r1, r0
 8005b72:	f143 0300 	adc.w	r3, r3, #0
 8005b76:	0259      	lsls	r1, r3, #9
 8005b78:	2300      	movs	r3, #0
 8005b7a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8005b7e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8005b82:	f7fa fb9d 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b86:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005b8e:	3301      	adds	r3, #1
 8005b90:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005b92:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005b96:	e027      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b98:	4b14      	ldr	r3, [pc, #80]	@ (8005bec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b9a:	6858      	ldr	r0, [r3, #4]
 8005b9c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005ba0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005ba4:	ebbc 0c00 	subs.w	ip, ip, r0
 8005ba8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005bac:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005bb0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005bb4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005bb8:	ebb1 010c 	subs.w	r1, r1, ip
 8005bbc:	eb63 030e 	sbc.w	r3, r3, lr
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc6:	00c9      	lsls	r1, r1, #3
 8005bc8:	eb11 0c00 	adds.w	ip, r1, r0
 8005bcc:	f143 0300 	adc.w	r3, r3, #0
 8005bd0:	0299      	lsls	r1, r3, #10
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005bd8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005bdc:	f7fa fb70 	bl	80002c0 <__aeabi_uldivmod>
 8005be0:	e7d1      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be2:	4803      	ldr	r0, [pc, #12]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005be4:	e000      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0xcc>
      sysclockfreq = HSI_VALUE;
 8005be6:	4803      	ldr	r0, [pc, #12]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005be8:	bd08      	pop	{r3, pc}
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	007a1200 	.word	0x007a1200
 8005bf4:	00f42400 	.word	0x00f42400

08005bf8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f000 809d 	beq.w	8005d38 <HAL_RCC_ClockConfig+0x140>
{
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	460d      	mov	r5, r1
 8005c04:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c06:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <HAL_RCC_ClockConfig+0x150>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	428b      	cmp	r3, r1
 8005c10:	d208      	bcs.n	8005c24 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	b2cb      	uxtb	r3, r1
 8005c14:	4a4c      	ldr	r2, [pc, #304]	@ (8005d48 <HAL_RCC_ClockConfig+0x150>)
 8005c16:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	428b      	cmp	r3, r1
 8005c20:	f040 808c 	bne.w	8005d3c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f013 0f02 	tst.w	r3, #2
 8005c2a:	d017      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	f013 0f04 	tst.w	r3, #4
 8005c30:	d004      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c32:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005c34:	6893      	ldr	r3, [r2, #8]
 8005c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c3a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f013 0f08 	tst.w	r3, #8
 8005c42:	d004      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c44:	4a41      	ldr	r2, [pc, #260]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005c46:	6893      	ldr	r3, [r2, #8]
 8005c48:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c4c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005c50:	6893      	ldr	r3, [r2, #8]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c56:	68a1      	ldr	r1, [r4, #8]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	f013 0f01 	tst.w	r3, #1
 8005c62:	d032      	beq.n	8005cca <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c64:	6862      	ldr	r2, [r4, #4]
 8005c66:	2a01      	cmp	r2, #1
 8005c68:	d021      	beq.n	8005cae <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6a:	1e93      	subs	r3, r2, #2
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d925      	bls.n	8005cbc <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c70:	4b36      	ldr	r3, [pc, #216]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f013 0f02 	tst.w	r3, #2
 8005c78:	d062      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7a:	4934      	ldr	r1, [pc, #208]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005c7c:	688b      	ldr	r3, [r1, #8]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005c86:	f7fe fbbb 	bl	8004400 <HAL_GetTick>
 8005c8a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8c:	4f2f      	ldr	r7, [pc, #188]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8e:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c9e:	d014      	beq.n	8005cca <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fe fbae 	bl	8004400 <HAL_GetTick>
 8005ca4:	1b80      	subs	r0, r0, r6
 8005ca6:	4540      	cmp	r0, r8
 8005ca8:	d9f3      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8005caa:	2003      	movs	r0, #3
 8005cac:	e042      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cae:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005cb6:	d1e0      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e03b      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbc:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005cc4:	d1d9      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	e034      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cca:	4b1f      	ldr	r3, [pc, #124]	@ (8005d48 <HAL_RCC_ClockConfig+0x150>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	42ab      	cmp	r3, r5
 8005cd4:	d907      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	b2ea      	uxtb	r2, r5
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d48 <HAL_RCC_ClockConfig+0x150>)
 8005cda:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	42ab      	cmp	r3, r5
 8005ce4:	d12e      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	f013 0f04 	tst.w	r3, #4
 8005cec:	d006      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cee:	4a17      	ldr	r2, [pc, #92]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005cf0:	6893      	ldr	r3, [r2, #8]
 8005cf2:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005cf6:	68e1      	ldr	r1, [r4, #12]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	f013 0f08 	tst.w	r3, #8
 8005d02:	d007      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d04:	4a11      	ldr	r2, [pc, #68]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	6921      	ldr	r1, [r4, #16]
 8005d0a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005d0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d14:	f7ff ff02 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8005d18:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <HAL_RCC_ClockConfig+0x154>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d20:	4a0b      	ldr	r2, [pc, #44]	@ (8005d50 <HAL_RCC_ClockConfig+0x158>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	40d8      	lsrs	r0, r3
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <HAL_RCC_ClockConfig+0x15c>)
 8005d28:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <HAL_RCC_ClockConfig+0x160>)
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	f7fe fb1b 	bl	8004368 <HAL_InitTick>
  return HAL_OK;
 8005d32:	2000      	movs	r0, #0
}
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
}
 8005d3a:	4770      	bx	lr
      return HAL_ERROR;
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	e7f9      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8005d40:	2001      	movs	r0, #1
 8005d42:	e7f7      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8005d44:	2001      	movs	r0, #1
 8005d46:	e7f5      	b.n	8005d34 <HAL_RCC_ClockConfig+0x13c>
 8005d48:	40023c00 	.word	0x40023c00
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	0800f134 	.word	0x0800f134
 8005d54:	20000008 	.word	0x20000008
 8005d58:	20000010 	.word	0x20000010

08005d5c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005d5c:	4b01      	ldr	r3, [pc, #4]	@ (8005d64 <HAL_RCC_GetHCLKFreq+0x8>)
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000008 	.word	0x20000008

08005d68 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d68:	4b04      	ldr	r3, [pc, #16]	@ (8005d7c <HAL_RCC_GetPCLK1Freq+0x14>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005d70:	4a03      	ldr	r2, [pc, #12]	@ (8005d80 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	4a03      	ldr	r2, [pc, #12]	@ (8005d84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d76:	6810      	ldr	r0, [r2, #0]
}
 8005d78:	40d8      	lsrs	r0, r3
 8005d7a:	4770      	bx	lr
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800f12c 	.word	0x0800f12c
 8005d84:	20000008 	.word	0x20000008

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d88:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <HAL_RCC_GetPCLK2Freq+0x14>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005d90:	4a03      	ldr	r2, [pc, #12]	@ (8005da0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005d92:	5cd3      	ldrb	r3, [r2, r3]
 8005d94:	4a03      	ldr	r2, [pc, #12]	@ (8005da4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d96:	6810      	ldr	r0, [r2, #0]
}
 8005d98:	40d8      	lsrs	r0, r3
 8005d9a:	4770      	bx	lr
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	0800f12c 	.word	0x0800f12c
 8005da4:	20000008 	.word	0x20000008

08005da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	b083      	sub	sp, #12
 8005dac:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dae:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005db0:	f013 0f43 	tst.w	r3, #67	@ 0x43
 8005db4:	d115      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f013 0f0c 	tst.w	r3, #12
 8005dbc:	d16a      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f013 0f20 	tst.w	r3, #32
 8005dc4:	f040 80bf 	bne.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	f013 0f10 	tst.w	r3, #16
 8005dce:	f000 8123 	beq.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dd2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8005dd6:	4b91      	ldr	r3, [pc, #580]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005dd8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 8005ddc:	2000      	movs	r0, #0
}
 8005dde:	b003      	add	sp, #12
 8005de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005de2:	4b8f      	ldr	r3, [pc, #572]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005de8:	f7fe fb0a 	bl	8004400 <HAL_GetTick>
 8005dec:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dee:	4e8d      	ldr	r6, [pc, #564]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005df6:	d006      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005df8:	f7fe fb02 	bl	8004400 <HAL_GetTick>
 8005dfc:	1b43      	subs	r3, r0, r5
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d9f6      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        return HAL_TIMEOUT;
 8005e02:	2003      	movs	r0, #3
 8005e04:	e7eb      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	f013 0f01 	tst.w	r3, #1
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e0e:	6862      	ldr	r2, [r4, #4]
 8005e10:	68a3      	ldr	r3, [r4, #8]
 8005e12:	071b      	lsls	r3, r3, #28
 8005e14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e18:	4a82      	ldr	r2, [pc, #520]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	f013 0f02 	tst.w	r3, #2
 8005e24:	d015      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e26:	4a7f      	ldr	r2, [pc, #508]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e28:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e2c:	6860      	ldr	r0, [r4, #4]
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	061b      	lsls	r3, r3, #24
 8005e32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e36:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e40:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8005e44:	69e3      	ldr	r3, [r4, #28]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	f021 011f 	bic.w	r1, r1, #31
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005e5a:	6862      	ldr	r2, [r4, #4]
 8005e5c:	68e3      	ldr	r3, [r4, #12]
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e64:	68a2      	ldr	r2, [r4, #8]
 8005e66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e6c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005e70:	4b6b      	ldr	r3, [pc, #428]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005e76:	f7fe fac3 	bl	8004400 <HAL_GetTick>
 8005e7a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e7c:	4e69      	ldr	r6, [pc, #420]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e7e:	6833      	ldr	r3, [r6, #0]
 8005e80:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005e84:	d197      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e86:	f7fe fabb 	bl	8004400 <HAL_GetTick>
 8005e8a:	1b40      	subs	r0, r0, r5
 8005e8c:	2802      	cmp	r0, #2
 8005e8e:	d9f6      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        return HAL_TIMEOUT;
 8005e90:	2003      	movs	r0, #3
 8005e92:	e7a4      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLSAI_DISABLE();
 8005e94:	4b62      	ldr	r3, [pc, #392]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005e9a:	f7fe fab1 	bl	8004400 <HAL_GetTick>
 8005e9e:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea0:	4e60      	ldr	r6, [pc, #384]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ea2:	6833      	ldr	r3, [r6, #0]
 8005ea4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005ea8:	d006      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eaa:	f7fe faa9 	bl	8004400 <HAL_GetTick>
 8005eae:	1b43      	subs	r3, r0, r5
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d9f6      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        return HAL_TIMEOUT;
 8005eb4:	2003      	movs	r0, #3
 8005eb6:	e792      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	f013 0f04 	tst.w	r3, #4
 8005ebe:	d016      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x146>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ec0:	4a58      	ldr	r2, [pc, #352]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ec2:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ec6:	6920      	ldr	r0, [r4, #16]
 8005ec8:	6963      	ldr	r3, [r4, #20]
 8005eca:	061b      	lsls	r3, r3, #24
 8005ecc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ed0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005eda:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005ede:	6a21      	ldr	r1, [r4, #32]
 8005ee0:	3901      	subs	r1, #1
 8005ee2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005ee6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005eea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	f013 0f08 	tst.w	r3, #8
 8005ef4:	d014      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ef6:	4a4b      	ldr	r2, [pc, #300]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ef8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005efc:	6920      	ldr	r0, [r4, #16]
 8005efe:	69a3      	ldr	r3, [r4, #24]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f06:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f10:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005f14:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005f20:	4b3f      	ldr	r3, [pc, #252]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005f26:	f7fe fa6b 	bl	8004400 <HAL_GetTick>
 8005f2a:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f2c:	4e3d      	ldr	r6, [pc, #244]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f2e:	6833      	ldr	r3, [r6, #0]
 8005f30:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005f34:	f47f af43 	bne.w	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x16>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f38:	f7fe fa62 	bl	8004400 <HAL_GetTick>
 8005f3c:	1b40      	subs	r0, r0, r5
 8005f3e:	2802      	cmp	r0, #2
 8005f40:	d9f5      	bls.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        return HAL_TIMEOUT;
 8005f42:	2003      	movs	r0, #3
 8005f44:	e74b      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	4b36      	ldr	r3, [pc, #216]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005f52:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005f5e:	4a32      	ldr	r2, [pc, #200]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f60:	6813      	ldr	r3, [r2, #0]
 8005f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f66:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005f68:	f7fe fa4a 	bl	8004400 <HAL_GetTick>
 8005f6c:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005f6e:	4e2e      	ldr	r6, [pc, #184]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005f76:	d106      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f78:	f7fe fa42 	bl	8004400 <HAL_GetTick>
 8005f7c:	1b40      	subs	r0, r0, r5
 8005f7e:	2802      	cmp	r0, #2
 8005f80:	d9f6      	bls.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        return HAL_TIMEOUT;
 8005f82:	2003      	movs	r0, #3
 8005f84:	e72b      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f86:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f8a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005f8e:	d014      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005f90:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005f92:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d00f      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x212>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f9a:	4b22      	ldr	r3, [pc, #136]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f9e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fa2:	491f      	ldr	r1, [pc, #124]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005faa:	2000      	movs	r0, #0
 8005fac:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005fb0:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb4:	f013 0f01 	tst.w	r3, #1
 8005fb8:	d112      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fbc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005fc0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005fc4:	d01d      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005fc6:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005fce:	6093      	str	r3, [r2, #8]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005fd2:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005fd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fde:	e6f3      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8005fe0:	f7fe fa0e 	bl	8004400 <HAL_GetTick>
 8005fe4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f241 3788 	movw	r7, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fec:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005fee:	f013 0f02 	tst.w	r3, #2
 8005ff2:	d1e2      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x212>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fe fa04 	bl	8004400 <HAL_GetTick>
 8005ff8:	1b40      	subs	r0, r0, r5
 8005ffa:	42b8      	cmp	r0, r7
 8005ffc:	d9f6      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x244>
            return HAL_TIMEOUT;
 8005ffe:	2003      	movs	r0, #3
 8006000:	e6ed      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006002:	4908      	ldr	r1, [pc, #32]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800600a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800600e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
 8006016:	e7db      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  return HAL_OK;
 8006018:	2000      	movs	r0, #0
 800601a:	e6e0      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x36>
 800601c:	42471000 	.word	0x42471000
 8006020:	42470000 	.word	0x42470000
 8006024:	40023800 	.word	0x40023800
 8006028:	40007000 	.word	0x40007000

0800602c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006030:	6803      	ldr	r3, [r0, #0]
 8006032:	4a0a      	ldr	r2, [pc, #40]	@ (800605c <HAL_RTC_WaitForSynchro+0x30>)
 8006034:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006036:	f7fe f9e3 	bl	8004400 <HAL_GetTick>
 800603a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f013 0f20 	tst.w	r3, #32
 8006044:	d107      	bne.n	8006056 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006046:	f7fe f9db 	bl	8004400 <HAL_GetTick>
 800604a:	1b40      	subs	r0, r0, r5
 800604c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006050:	d9f4      	bls.n	800603c <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8006052:	2003      	movs	r0, #3
 8006054:	e000      	b.n	8006058 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 8006056:	2000      	movs	r0, #0
}
 8006058:	bd38      	pop	{r3, r4, r5, pc}
 800605a:	bf00      	nop
 800605c:	00017f5f 	.word	0x00017f5f

08006060 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006060:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800606a:	d002      	beq.n	8006072 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800606e:	4628      	mov	r0, r5
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800607a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800607c:	f7fe f9c0 	bl	8004400 <HAL_GetTick>
 8006080:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006082:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800608c:	d1ef      	bne.n	800606e <RTC_EnterInitMode+0xe>
 800608e:	2d00      	cmp	r5, #0
 8006090:	d1ed      	bne.n	800606e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006092:	f7fe f9b5 	bl	8004400 <HAL_GetTick>
 8006096:	1b83      	subs	r3, r0, r6
 8006098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800609c:	d9f2      	bls.n	8006084 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800609e:	2304      	movs	r3, #4
 80060a0:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80060a2:	2501      	movs	r5, #1
 80060a4:	e7ee      	b.n	8006084 <RTC_EnterInitMode+0x24>

080060a6 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060a6:	6802      	ldr	r2, [r0, #0]
 80060a8:	68d3      	ldr	r3, [r2, #12]
 80060aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ae:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060b0:	6803      	ldr	r3, [r0, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f013 0f20 	tst.w	r3, #32
 80060b8:	d001      	beq.n	80060be <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80060bc:	4770      	bx	lr
{
 80060be:	b510      	push	{r4, lr}
 80060c0:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c2:	f7ff ffb3 	bl	800602c <HAL_RTC_WaitForSynchro>
 80060c6:	b110      	cbz	r0, 80060ce <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060c8:	2304      	movs	r3, #4
 80060ca:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
}
 80060ce:	bd10      	pop	{r4, pc}

080060d0 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d04b      	beq.n	800616c <HAL_RTC_Init+0x9c>
{
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060d8:	7f43      	ldrb	r3, [r0, #29]
 80060da:	b153      	cbz	r3, 80060f2 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060dc:	2302      	movs	r3, #2
 80060de:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	f012 0f10 	tst.w	r2, #16
 80060e8:	d007      	beq.n	80060fa <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80060ea:	2301      	movs	r3, #1
 80060ec:	7763      	strb	r3, [r4, #29]
 80060ee:	2000      	movs	r0, #0
}
 80060f0:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80060f2:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80060f4:	f7fd fe80 	bl	8003df8 <HAL_RTC_MspInit>
 80060f8:	e7f0      	b.n	80060dc <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060fa:	22ca      	movs	r2, #202	@ 0xca
 80060fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	2253      	movs	r2, #83	@ 0x53
 8006102:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006104:	4620      	mov	r0, r4
 8006106:	f7ff ffab 	bl	8006060 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800610a:	b118      	cbz	r0, 8006114 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	22ff      	movs	r2, #255	@ 0xff
 8006110:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006112:	e7ed      	b.n	80060f0 <HAL_RTC_Init+0x20>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	6893      	ldr	r3, [r2, #8]
 8006118:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800611c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006120:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	6891      	ldr	r1, [r2, #8]
 8006126:	6863      	ldr	r3, [r4, #4]
 8006128:	6920      	ldr	r0, [r4, #16]
 800612a:	4303      	orrs	r3, r0
 800612c:	6960      	ldr	r0, [r4, #20]
 800612e:	4303      	orrs	r3, r0
 8006130:	430b      	orrs	r3, r1
 8006132:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	68e2      	ldr	r2, [r4, #12]
 8006138:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800613a:	6822      	ldr	r2, [r4, #0]
 800613c:	6913      	ldr	r3, [r2, #16]
 800613e:	68a1      	ldr	r1, [r4, #8]
 8006140:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006144:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff ffad 	bl	80060a6 <RTC_ExitInitMode>
    if (status == HAL_OK)
 800614c:	2800      	cmp	r0, #0
 800614e:	d1dd      	bne.n	800610c <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006158:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800615e:	69a1      	ldr	r1, [r4, #24]
 8006160:	430b      	orrs	r3, r1
 8006162:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	22ff      	movs	r2, #255	@ 0xff
 8006168:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800616a:	e7be      	b.n	80060ea <HAL_RTC_Init+0x1a>
    return HAL_ERROR;
 800616c:	2001      	movs	r0, #1
}
 800616e:	4770      	bx	lr

08006170 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006170:	0903      	lsrs	r3, r0, #4
 8006172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006176:	f000 000f 	and.w	r0, r0, #15
 800617a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800617e:	b2c0      	uxtb	r0, r0
 8006180:	4770      	bx	lr

08006182 <HAL_RTC_GetTime>:
{
 8006182:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006184:	6803      	ldr	r3, [r0, #0]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800618a:	6803      	ldr	r3, [r0, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006192:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006194:	6803      	ldr	r3, [r0, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006198:	f3c3 4005 	ubfx	r0, r3, #16, #6
 800619c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800619e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80061a2:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80061a4:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 80061a8:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80061aa:	f3c3 5380 	ubfx	r3, r3, #22, #1
 80061ae:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80061b0:	b95a      	cbnz	r2, 80061ca <HAL_RTC_GetTime+0x48>
 80061b2:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061b4:	f7ff ffdc 	bl	8006170 <RTC_Bcd2ToByte>
 80061b8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffd8 	bl	8006170 <RTC_Bcd2ToByte>
 80061c0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061c2:	4628      	mov	r0, r5
 80061c4:	f7ff ffd4 	bl	8006170 <RTC_Bcd2ToByte>
 80061c8:	70a0      	strb	r0, [r4, #2]
}
 80061ca:	2000      	movs	r0, #0
 80061cc:	bd70      	pop	{r4, r5, r6, pc}

080061ce <HAL_RTC_GetDate>:
{
 80061ce:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061d0:	6803      	ldr	r3, [r0, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80061d4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80061d8:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80061da:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80061de:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061e0:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80061e4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80061e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80061ea:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80061ec:	b95a      	cbnz	r2, 8006206 <HAL_RTC_GetDate+0x38>
 80061ee:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061f0:	f7ff ffbe 	bl	8006170 <RTC_Bcd2ToByte>
 80061f4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff ffba 	bl	8006170 <RTC_Bcd2ToByte>
 80061fc:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061fe:	4628      	mov	r0, r5
 8006200:	f7ff ffb6 	bl	8006170 <RTC_Bcd2ToByte>
 8006204:	70a0      	strb	r0, [r4, #2]
}
 8006206:	2000      	movs	r0, #0
 8006208:	bd70      	pop	{r4, r5, r6, pc}

0800620a <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800620a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006216:	4770      	bx	lr

08006218 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621a:	b089      	sub	sp, #36	@ 0x24
 800621c:	4604      	mov	r4, r0
 800621e:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006220:	f7fe f8ee 	bl	8004400 <HAL_GetTick>
 8006224:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800622c:	2108      	movs	r1, #8
 800622e:	6820      	ldr	r0, [r4, #0]
 8006230:	f001 fec4 	bl	8007fbc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006234:	4605      	mov	r5, r0
 8006236:	b110      	cbz	r0, 800623e <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8006238:	4628      	mov	r0, r5
 800623a:	b009      	add	sp, #36	@ 0x24
 800623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800623e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006240:	0409      	lsls	r1, r1, #16
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	f001 ff64 	bl	8008110 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006248:	4605      	mov	r5, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	d1f4      	bne.n	8006238 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8006254:	2308      	movs	r3, #8
 8006256:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006258:	2330      	movs	r3, #48	@ 0x30
 800625a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800625c:	2302      	movs	r3, #2
 800625e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006260:	2300      	movs	r3, #0
 8006262:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006264:	2301      	movs	r3, #1
 8006266:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006268:	a902      	add	r1, sp, #8
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	f001 fdb5 	bl	8007dda <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	f001 ff7d 	bl	8008170 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006276:	4605      	mov	r5, r0
 8006278:	b170      	cbz	r0, 8006298 <SD_FindSCR+0x80>
 800627a:	e7dd      	b.n	8006238 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800627c:	f001 fd85 	bl	8007d8a <SDIO_ReadFIFO>
 8006280:	ab08      	add	r3, sp, #32
 8006282:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006286:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 800628a:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800628c:	f7fe f8b8 	bl	8004400 <HAL_GetTick>
 8006290:	1b83      	subs	r3, r0, r6
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d043      	beq.n	8006320 <SD_FindSCR+0x108>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800629c:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 80062a0:	d107      	bne.n	80062b2 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80062a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062a4:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80062a8:	d1e8      	bne.n	800627c <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80062aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062ac:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80062b0:	d1ec      	bne.n	800628c <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80062b2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062b4:	f013 0f08 	tst.w	r3, #8
 80062b8:	d129      	bne.n	800630e <SD_FindSCR+0xf6>
 80062ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062bc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80062c0:	d125      	bne.n	800630e <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80062c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80062c4:	f013 0f02 	tst.w	r3, #2
 80062c8:	d124      	bne.n	8006314 <SD_FindSCR+0xfc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80062ca:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80062cc:	f015 0520 	ands.w	r5, r5, #32
 80062d0:	d123      	bne.n	800631a <SD_FindSCR+0x102>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062d2:	f240 533a 	movw	r3, #1338	@ 0x53a
 80062d6:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062d8:	9b01      	ldr	r3, [sp, #4]
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062da:	0e1a      	lsrs	r2, r3, #24
 80062dc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062e0:	0219      	lsls	r1, r3, #8
 80062e2:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062e6:	430a      	orrs	r2, r1
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80062ee:	4313      	orrs	r3, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062f0:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062f2:	9b00      	ldr	r3, [sp, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062f4:	0e1a      	lsrs	r2, r3, #24
 80062f6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062fa:	0219      	lsls	r1, r3, #8
 80062fc:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006300:	430a      	orrs	r2, r1
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006308:	4313      	orrs	r3, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800630a:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800630c:	e794      	b.n	8006238 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800630e:	2508      	movs	r5, #8
 8006310:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006312:	e791      	b.n	8006238 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006314:	2502      	movs	r5, #2
 8006316:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006318:	e78e      	b.n	8006238 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800631a:	2520      	movs	r5, #32
 800631c:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800631e:	e78b      	b.n	8006238 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8006320:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8006324:	e788      	b.n	8006238 <SD_FindSCR+0x20>
	...

08006328 <HAL_SD_ReadBlocks_DMA>:
{
 8006328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800632c:	b087      	sub	sp, #28
 800632e:	4604      	mov	r4, r0
  if(NULL == pData)
 8006330:	b191      	cbz	r1, 8006358 <HAL_SD_ReadBlocks_DMA+0x30>
 8006332:	4616      	mov	r6, r2
 8006334:	461f      	mov	r7, r3
 8006336:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8006338:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 800633c:	b2ed      	uxtb	r5, r5
 800633e:	2d01      	cmp	r5, #1
 8006340:	d17f      	bne.n	8006442 <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006346:	19f0      	adds	r0, r6, r7
 8006348:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800634a:	4298      	cmp	r0, r3
 800634c:	d90a      	bls.n	8006364 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800634e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006354:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8006356:	e075      	b.n	8006444 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006358:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800635a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800635e:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8006360:	2501      	movs	r5, #1
 8006362:	e06f      	b.n	8006444 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 8006364:	2303      	movs	r3, #3
 8006366:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	2100      	movs	r1, #0
 800636e:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006374:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006378:	f043 0302 	orr.w	r3, r3, #2
 800637c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800637e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006380:	4833      	ldr	r0, [pc, #204]	@ (8006450 <HAL_SD_ReadBlocks_DMA+0x128>)
 8006382:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006386:	4833      	ldr	r0, [pc, #204]	@ (8006454 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8006388:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 800638a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800638c:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800638e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006390:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006392:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006394:	6801      	ldr	r1, [r0, #0]
 8006396:	680b      	ldr	r3, [r1, #0]
 8006398:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800639c:	6880      	ldr	r0, [r0, #8]
 800639e:	4303      	orrs	r3, r0
 80063a0:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063a2:	ea4f 2947 	mov.w	r9, r7, lsl #9
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80063ac:	3180      	adds	r1, #128	@ 0x80
 80063ae:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80063b0:	f7fe f962 	bl	8004678 <HAL_DMA_Start_IT>
 80063b4:	4680      	mov	r8, r0
 80063b6:	bb68      	cbnz	r0, 8006414 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 80063b8:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <HAL_SD_ReadBlocks_DMA+0x130>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80063c2:	4293      	cmp	r3, r2
        add *= 512U;
 80063c4:	bf18      	it	ne
 80063c6:	0276      	lslne	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063ce:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80063d2:	2390      	movs	r3, #144	@ 0x90
 80063d4:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063d6:	2302      	movs	r3, #2
 80063d8:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063da:	2300      	movs	r3, #0
 80063dc:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80063de:	2301      	movs	r3, #1
 80063e0:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80063e2:	4669      	mov	r1, sp
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	f001 fcf8 	bl	8007dda <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80063ea:	2f01      	cmp	r7, #1
 80063ec:	d922      	bls.n	8006434 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063ee:	2382      	movs	r3, #130	@ 0x82
 80063f0:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063f2:	4631      	mov	r1, r6
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	f001 fe11 	bl	800801c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80063fa:	b338      	cbz	r0, 800644c <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	4a17      	ldr	r2, [pc, #92]	@ (800645c <HAL_SD_ReadBlocks_DMA+0x134>)
 8006400:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006402:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006404:	4303      	orrs	r3, r0
 8006406:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006408:	2301      	movs	r3, #1
 800640a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800640e:	2300      	movs	r3, #0
 8006410:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8006412:	e017      	b.n	8006444 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006418:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 800641c:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	4a0e      	ldr	r2, [pc, #56]	@ (800645c <HAL_SD_ReadBlocks_DMA+0x134>)
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006424:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006426:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800642a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800642c:	2301      	movs	r3, #1
 800642e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8006432:	e007      	b.n	8006444 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006434:	2381      	movs	r3, #129	@ 0x81
 8006436:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006438:	4631      	mov	r1, r6
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	f001 fdd6 	bl	8007fec <SDMMC_CmdReadSingleBlock>
 8006440:	e7db      	b.n	80063fa <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 8006442:	2502      	movs	r5, #2
}
 8006444:	4628      	mov	r0, r5
 8006446:	b007      	add	sp, #28
 8006448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 800644c:	4645      	mov	r5, r8
 800644e:	e7f9      	b.n	8006444 <HAL_SD_ReadBlocks_DMA+0x11c>
 8006450:	0800659f 	.word	0x0800659f
 8006454:	08006bb5 	.word	0x08006bb5
 8006458:	42258000 	.word	0x42258000
 800645c:	004005ff 	.word	0x004005ff

08006460 <HAL_SD_WriteBlocks_DMA>:
{
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	b087      	sub	sp, #28
 8006464:	4604      	mov	r4, r0
  if(NULL == pData)
 8006466:	2900      	cmp	r1, #0
 8006468:	d03b      	beq.n	80064e2 <HAL_SD_WriteBlocks_DMA+0x82>
 800646a:	461e      	mov	r6, r3
 800646c:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800646e:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8006472:	b2ed      	uxtb	r5, r5
 8006474:	2d01      	cmp	r5, #1
 8006476:	f040 8084 	bne.w	8006582 <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800647a:	2300      	movs	r3, #0
 800647c:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800647e:	1993      	adds	r3, r2, r6
 8006480:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8006482:	428b      	cmp	r3, r1
 8006484:	d833      	bhi.n	80064ee <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8006486:	2303      	movs	r3, #3
 8006488:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800648c:	6803      	ldr	r3, [r0, #0]
 800648e:	2100      	movs	r1, #0
 8006490:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006496:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80064a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064a2:	483a      	ldr	r0, [pc, #232]	@ (800658c <HAL_SD_WriteBlocks_DMA+0x12c>)
 80064a4:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80064a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064a8:	4839      	ldr	r0, [pc, #228]	@ (8006590 <HAL_SD_WriteBlocks_DMA+0x130>)
 80064aa:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80064ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064ae:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80064b2:	2b01      	cmp	r3, #1
      add *= 512U;
 80064b4:	bf18      	it	ne
 80064b6:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 80064b8:	2e01      	cmp	r6, #1
 80064ba:	d91d      	bls.n	80064f8 <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064bc:	23a0      	movs	r3, #160	@ 0xa0
 80064be:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80064c0:	4611      	mov	r1, r2
 80064c2:	6820      	ldr	r0, [r4, #0]
 80064c4:	f001 fdda 	bl	800807c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c8:	b1e8      	cbz	r0, 8006506 <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	4a31      	ldr	r2, [pc, #196]	@ (8006594 <HAL_SD_WriteBlocks_DMA+0x134>)
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80064d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80064d2:	4303      	orrs	r3, r0
 80064d4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064dc:	2300      	movs	r3, #0
 80064de:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80064e0:	e050      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80064e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064e8:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80064ea:	2501      	movs	r5, #1
 80064ec:	e04a      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80064f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064f4:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 80064f6:	e045      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80064f8:	2390      	movs	r3, #144	@ 0x90
 80064fa:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80064fc:	4611      	mov	r1, r2
 80064fe:	6820      	ldr	r0, [r4, #0]
 8006500:	f001 fda4 	bl	800804c <SDMMC_CmdWriteSingleBlock>
 8006504:	e7e0      	b.n	80064c8 <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8006506:	4b24      	ldr	r3, [pc, #144]	@ (8006598 <HAL_SD_WriteBlocks_DMA+0x138>)
 8006508:	2201      	movs	r2, #1
 800650a:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800650e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006510:	2240      	movs	r2, #64	@ 0x40
 8006512:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006514:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006516:	680a      	ldr	r2, [r1, #0]
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800651e:	6889      	ldr	r1, [r1, #8]
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006524:	0276      	lsls	r6, r6, #9
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	08b3      	lsrs	r3, r6, #2
 800652a:	3280      	adds	r2, #128	@ 0x80
 800652c:	4639      	mov	r1, r7
 800652e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006530:	f7fe f8a2 	bl	8004678 <HAL_DMA_Start_IT>
 8006534:	4607      	mov	r7, r0
 8006536:	b198      	cbz	r0, 8006560 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800653c:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8006540:	f023 0302 	bic.w	r3, r3, #2
 8006544:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	4a12      	ldr	r2, [pc, #72]	@ (8006594 <HAL_SD_WriteBlocks_DMA+0x134>)
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800654c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800654e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006552:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006554:	2301      	movs	r3, #1
 8006556:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800655a:	2300      	movs	r3, #0
 800655c:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800655e:	e011      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006566:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006568:	2390      	movs	r3, #144	@ 0x90
 800656a:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800656c:	2300      	movs	r3, #0
 800656e:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006570:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006572:	2301      	movs	r3, #1
 8006574:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006576:	4669      	mov	r1, sp
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	f001 fc2e 	bl	8007dda <SDIO_ConfigData>
      return HAL_OK;
 800657e:	463d      	mov	r5, r7
 8006580:	e000      	b.n	8006584 <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 8006582:	2502      	movs	r5, #2
}
 8006584:	4628      	mov	r0, r5
 8006586:	b007      	add	sp, #28
 8006588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658a:	bf00      	nop
 800658c:	0800620b 	.word	0x0800620b
 8006590:	08006bb5 	.word	0x08006bb5
 8006594:	004005ff 	.word	0x004005ff
 8006598:	42258000 	.word	0x42258000

0800659c <HAL_SD_ErrorCallback>:
}
 800659c:	4770      	bx	lr

0800659e <SD_DMAReceiveCplt>:
{
 800659e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80065a0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80065a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065a4:	2b82      	cmp	r3, #130	@ 0x82
 80065a6:	d011      	beq.n	80065cc <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80065ac:	f023 0308 	bic.w	r3, r3, #8
 80065b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 80065c4:	4620      	mov	r0, r4
 80065c6:	f002 fd62 	bl	800908e <HAL_SD_RxCpltCallback>
}
 80065ca:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	f001 fd6d 	bl	80080ac <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80065d2:	4603      	mov	r3, r0
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d0e7      	beq.n	80065a8 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 80065d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80065da:	4313      	orrs	r3, r2
 80065dc:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff ffdc 	bl	800659c <HAL_SD_ErrorCallback>
 80065e4:	e7e0      	b.n	80065a8 <SD_DMAReceiveCplt+0xa>
	...

080065e8 <HAL_SD_GetCardCSD>:
{
 80065e8:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80065ea:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80065ec:	0f92      	lsrs	r2, r2, #30
 80065ee:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065f0:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80065f2:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80065f6:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065f8:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 80065fc:	f002 0203 	and.w	r2, r2, #3
 8006600:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006602:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8006606:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006608:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 800660c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800660e:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8006612:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006614:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006616:	0d12      	lsrs	r2, r2, #20
 8006618:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800661a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 800661e:	f002 020f 	and.w	r2, r2, #15
 8006622:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006624:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006626:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800662a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800662c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800662e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006632:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006634:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006636:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800663a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800663c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800663e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006642:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006644:	2200      	movs	r2, #0
 8006646:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006648:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800664a:	2a00      	cmp	r2, #0
 800664c:	f040 8086 	bne.w	800675c <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006650:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8006652:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8006656:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800665a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800665c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8006660:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006662:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006664:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8006668:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800666a:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 800666e:	f002 0207 	and.w	r2, r2, #7
 8006672:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006674:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006676:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800667a:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800667c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800667e:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8006682:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006684:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006686:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800668a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800668c:	6908      	ldr	r0, [r1, #16]
 800668e:	3001      	adds	r0, #1
 8006690:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006692:	7e0a      	ldrb	r2, [r1, #24]
 8006694:	f002 0207 	and.w	r2, r2, #7
 8006698:	3202      	adds	r2, #2
 800669a:	4090      	lsls	r0, r2
 800669c:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800669e:	f891 c008 	ldrb.w	ip, [r1, #8]
 80066a2:	f00c 0c0f 	and.w	ip, ip, #15
 80066a6:	2201      	movs	r2, #1
 80066a8:	fa02 f20c 	lsl.w	r2, r2, ip
 80066ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80066ae:	0a52      	lsrs	r2, r2, #9
 80066b0:	fb00 f202 	mul.w	r2, r0, r2
 80066b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80066b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ba:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80066be:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80066c2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80066c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80066c6:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80066ca:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80066cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80066ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066d2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80066d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066d6:	0fd2      	lsrs	r2, r2, #31
 80066d8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80066da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066dc:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80066e0:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80066e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066e4:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80066e8:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80066ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066ec:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80066f0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066f4:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80066f8:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80066fc:	2000      	movs	r0, #0
 80066fe:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006702:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8006706:	f002 0201 	and.w	r2, r2, #1
 800670a:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800670e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006710:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006714:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006718:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800671a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800671e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006722:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006724:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006728:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800672c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800672e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006732:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006736:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006738:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800673c:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006740:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006742:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006746:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8006750:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8006754:	2301      	movs	r3, #1
 8006756:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800675a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800675c:	2a01      	cmp	r2, #1
 800675e:	d110      	bne.n	8006782 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006760:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006762:	0412      	lsls	r2, r2, #16
 8006764:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006768:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 800676c:	4302      	orrs	r2, r0
 800676e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006770:	690a      	ldr	r2, [r1, #16]
 8006772:	3201      	adds	r2, #1
 8006774:	0292      	lsls	r2, r2, #10
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006778:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800677a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800677e:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006780:	e799      	b.n	80066b6 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006782:	6802      	ldr	r2, [r0, #0]
 8006784:	4904      	ldr	r1, [pc, #16]	@ (8006798 <HAL_SD_GetCardCSD+0x1b0>)
 8006786:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006788:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800678a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800678e:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006790:	2001      	movs	r0, #1
 8006792:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006796:	4770      	bx	lr
 8006798:	004005ff 	.word	0x004005ff

0800679c <HAL_SD_InitCard>:
{
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	b098      	sub	sp, #96	@ 0x60
 80067a2:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80067a4:	2300      	movs	r3, #0
 80067a6:	9312      	str	r3, [sp, #72]	@ 0x48
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80067a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067aa:	9314      	str	r3, [sp, #80]	@ 0x50
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80067ac:	9315      	str	r3, [sp, #84]	@ 0x54
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067ae:	9316      	str	r3, [sp, #88]	@ 0x58
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80067b0:	2376      	movs	r3, #118	@ 0x76
 80067b2:	9317      	str	r3, [sp, #92]	@ 0x5c
  status = SDIO_Init(hsd->Instance, Init);
 80067b4:	ab18      	add	r3, sp, #96	@ 0x60
 80067b6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80067ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80067be:	ab12      	add	r3, sp, #72	@ 0x48
 80067c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067c2:	6820      	ldr	r0, [r4, #0]
 80067c4:	f001 fac7 	bl	8007d56 <SDIO_Init>
  if(status != HAL_OK)
 80067c8:	b120      	cbz	r0, 80067d4 <HAL_SD_InitCard+0x38>
    return HAL_ERROR;
 80067ca:	2501      	movs	r5, #1
}
 80067cc:	4628      	mov	r0, r5
 80067ce:	b018      	add	sp, #96	@ 0x60
 80067d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_SD_DISABLE(hsd);
 80067d4:	4e81      	ldr	r6, [pc, #516]	@ (80069dc <HAL_SD_InitCard+0x240>)
 80067d6:	2500      	movs	r5, #0
 80067d8:	f8c6 50a0 	str.w	r5, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	f001 fadc 	bl	8007d9a <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80067e2:	2301      	movs	r3, #1
 80067e4:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80067e8:	2002      	movs	r0, #2
 80067ea:	f7fd fe0f 	bl	800440c <HAL_Delay>
  __IO uint32_t count = 0U;
 80067ee:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	f001 fb07 	bl	8007e04 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067f6:	4605      	mov	r5, r0
 80067f8:	b138      	cbz	r0, 800680a <HAL_SD_InitCard+0x6e>
    hsd->State = HAL_SD_STATE_READY;
 80067fa:	2201      	movs	r2, #1
 80067fc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006800:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006802:	432b      	orrs	r3, r5
 8006804:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006806:	4615      	mov	r5, r2
 8006808:	e7e0      	b.n	80067cc <HAL_SD_InitCard+0x30>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	f001 fe2e 	bl	800846c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006810:	b948      	cbnz	r0, 8006826 <HAL_SD_InitCard+0x8a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006812:	2301      	movs	r3, #1
 8006814:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006816:	2100      	movs	r1, #0
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	f001 fc79 	bl	8008110 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800681e:	b168      	cbz	r0, 800683c <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006820:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8006824:	e7e9      	b.n	80067fa <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006826:	2300      	movs	r3, #0
 8006828:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	f001 faea 	bl	8007e04 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006830:	2800      	cmp	r0, #0
 8006832:	f040 80c1 	bne.w	80069b8 <HAL_SD_InitCard+0x21c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006836:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006838:	2b01      	cmp	r3, #1
 800683a:	d0ec      	beq.n	8006816 <HAL_SD_InitCard+0x7a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800683c:	9a06      	ldr	r2, [sp, #24]
 800683e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006842:	429a      	cmp	r2, r3
 8006844:	f200 80c0 	bhi.w	80069c8 <HAL_SD_InitCard+0x22c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006848:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800684a:	4f65      	ldr	r7, [pc, #404]	@ (80069e0 <HAL_SD_InitCard+0x244>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800684c:	4698      	mov	r8, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800684e:	4631      	mov	r1, r6
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	f001 fc5d 	bl	8008110 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006856:	4605      	mov	r5, r0
 8006858:	2800      	cmp	r0, #0
 800685a:	d1ce      	bne.n	80067fa <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800685c:	4639      	mov	r1, r7
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	f001 fd3e 	bl	80082e0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 80ac 	bne.w	80069c2 <HAL_SD_InitCard+0x226>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800686a:	4631      	mov	r1, r6
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	f001 fab1 	bl	8007dd4 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006872:	0fc2      	lsrs	r2, r0, #31
    count++;
 8006874:	9b06      	ldr	r3, [sp, #24]
 8006876:	3301      	adds	r3, #1
 8006878:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	4543      	cmp	r3, r8
 800687e:	d801      	bhi.n	8006884 <HAL_SD_InitCard+0xe8>
 8006880:	2a00      	cmp	r2, #0
 8006882:	d0e4      	beq.n	800684e <HAL_SD_InitCard+0xb2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006884:	9a06      	ldr	r2, [sp, #24]
 8006886:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800688a:	429a      	cmp	r2, r3
 800688c:	f200 8096 	bhi.w	80069bc <HAL_SD_InitCard+0x220>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006890:	f3c0 7580 	ubfx	r5, r0, #30, #1
    hsd->SdCard.CardType = CARD_SDSC;
 8006894:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8006896:	2301      	movs	r3, #1
 8006898:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	f001 fa80 	bl	8007da2 <SDIO_GetPowerState>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d07f      	beq.n	80069a6 <HAL_SD_InitCard+0x20a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80068a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d133      	bne.n	8006914 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80068ac:	2104      	movs	r1, #4
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	f001 fa90 	bl	8007dd4 <SDIO_GetResponse>
 80068b4:	0d00      	lsrs	r0, r0, #20
 80068b6:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068b8:	a907      	add	r1, sp, #28
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff fe94 	bl	80065e8 <HAL_SD_GetCardCSD>
 80068c0:	4605      	mov	r5, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d16c      	bne.n	80069a0 <HAL_SD_InitCard+0x204>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068c6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80068c8:	0412      	lsls	r2, r2, #16
 80068ca:	2300      	movs	r3, #0
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	f001 fc07 	bl	80080e0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	4602      	mov	r2, r0
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d168      	bne.n	80069aa <HAL_SD_InitCard+0x20e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80068d8:	4623      	mov	r3, r4
 80068da:	f853 6b10 	ldr.w	r6, [r3], #16
 80068de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80068e6:	1d23      	adds	r3, r4, #4
 80068e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ea:	4630      	mov	r0, r6
 80068ec:	f001 fa33 	bl	8007d56 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	f001 fb61 	bl	8007fbc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f43f af66 	beq.w	80067cc <HAL_SD_InitCard+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	4938      	ldr	r1, [pc, #224]	@ (80069e4 <HAL_SD_InitCard+0x248>)
 8006904:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006906:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006908:	4303      	orrs	r3, r0
 800690a:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800690c:	2501      	movs	r5, #1
 800690e:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006912:	e75b      	b.n	80067cc <HAL_SD_InitCard+0x30>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	f001 fc8d 	bl	8008234 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800691a:	4602      	mov	r2, r0
 800691c:	2800      	cmp	r0, #0
 800691e:	d144      	bne.n	80069aa <HAL_SD_InitCard+0x20e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006920:	2100      	movs	r1, #0
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	f001 fa56 	bl	8007dd4 <SDIO_GetResponse>
 8006928:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800692a:	2104      	movs	r1, #4
 800692c:	6820      	ldr	r0, [r4, #0]
 800692e:	f001 fa51 	bl	8007dd4 <SDIO_GetResponse>
 8006932:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006934:	2108      	movs	r1, #8
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	f001 fa4c 	bl	8007dd4 <SDIO_GetResponse>
 800693c:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800693e:	210c      	movs	r1, #12
 8006940:	6820      	ldr	r0, [r4, #0]
 8006942:	f001 fa47 	bl	8007dd4 <SDIO_GetResponse>
 8006946:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 800694a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800694c:	2b03      	cmp	r3, #3
 800694e:	d0ad      	beq.n	80068ac <HAL_SD_InitCard+0x110>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006950:	f10d 0116 	add.w	r1, sp, #22
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	f001 fd37 	bl	80083c8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800695a:	4602      	mov	r2, r0
 800695c:	bb28      	cbnz	r0, 80069aa <HAL_SD_InitCard+0x20e>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800695e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006960:	2b03      	cmp	r3, #3
 8006962:	d0a3      	beq.n	80068ac <HAL_SD_InitCard+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006964:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8006968:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800696a:	0409      	lsls	r1, r1, #16
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	f001 fc76 	bl	800825e <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006972:	4602      	mov	r2, r0
 8006974:	b9c8      	cbnz	r0, 80069aa <HAL_SD_InitCard+0x20e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006976:	2100      	movs	r1, #0
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	f001 fa2b 	bl	8007dd4 <SDIO_GetResponse>
 800697e:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006980:	2104      	movs	r1, #4
 8006982:	6820      	ldr	r0, [r4, #0]
 8006984:	f001 fa26 	bl	8007dd4 <SDIO_GetResponse>
 8006988:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800698a:	2108      	movs	r1, #8
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	f001 fa21 	bl	8007dd4 <SDIO_GetResponse>
 8006992:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006994:	210c      	movs	r1, #12
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	f001 fa1c 	bl	8007dd4 <SDIO_GetResponse>
 800699c:	6720      	str	r0, [r4, #112]	@ 0x70
 800699e:	e785      	b.n	80068ac <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a4:	e001      	b.n	80069aa <HAL_SD_InitCard+0x20e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 80069aa:	2501      	movs	r5, #1
 80069ac:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80069b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80069b2:	4313      	orrs	r3, r2
 80069b4:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80069b6:	e709      	b.n	80067cc <HAL_SD_InitCard+0x30>
      return errorstate;
 80069b8:	4605      	mov	r5, r0
 80069ba:	e71e      	b.n	80067fa <HAL_SD_InitCard+0x5e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069bc:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80069c0:	e71b      	b.n	80067fa <HAL_SD_InitCard+0x5e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069c2:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  if(errorstate != HAL_SD_ERROR_NONE)
 80069c6:	e718      	b.n	80067fa <HAL_SD_InitCard+0x5e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069c8:	9a06      	ldr	r2, [sp, #24]
 80069ca:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f67f af60 	bls.w	8006894 <HAL_SD_InitCard+0xf8>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069d4:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d8:	e70f      	b.n	80067fa <HAL_SD_InitCard+0x5e>
 80069da:	bf00      	nop
 80069dc:	42258000 	.word	0x42258000
 80069e0:	c1100000 	.word	0xc1100000
 80069e4:	004005ff 	.word	0x004005ff

080069e8 <HAL_SD_Init>:
  if(hsd == NULL)
 80069e8:	b1a8      	cbz	r0, 8006a16 <HAL_SD_Init+0x2e>
{
 80069ea:	b510      	push	{r4, lr}
 80069ec:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80069ee:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80069f2:	b163      	cbz	r3, 8006a0e <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 80069f4:	2303      	movs	r3, #3
 80069f6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069fa:	4620      	mov	r0, r4
 80069fc:	f7ff fece 	bl	800679c <HAL_SD_InitCard>
 8006a00:	b958      	cbnz	r0, 8006a1a <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a02:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006a04:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8006a0c:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8006a0e:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8006a10:	f7fd fa16 	bl	8003e40 <HAL_SD_MspInit>
 8006a14:	e7ee      	b.n	80069f4 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8006a16:	2001      	movs	r0, #1
}
 8006a18:	4770      	bx	lr
    return HAL_ERROR;
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e7f6      	b.n	8006a0c <HAL_SD_Init+0x24>

08006a1e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a20:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a22:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006a24:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a26:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8006a28:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a2a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006a2c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a2e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006a30:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a32:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006a34:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a36:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006a38:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a3a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006a3c:	61cb      	str	r3, [r1, #28]
}
 8006a3e:	2000      	movs	r0, #0
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_SD_ConfigWideBusOperation>:
{
 8006a44:	b530      	push	{r4, r5, lr}
 8006a46:	b08d      	sub	sp, #52	@ 0x34
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a52:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d061      	beq.n	8006b1c <HAL_SD_ConfigWideBusOperation+0xd8>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006a58:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006a5c:	d008      	beq.n	8006a70 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006a5e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006a62:	d00a      	beq.n	8006a7a <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006a64:	b389      	cbz	r1, 8006aca <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006a68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a6c:	6383      	str	r3, [r0, #56]	@ 0x38
 8006a6e:	e059      	b.n	8006b24 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	6383      	str	r3, [r0, #56]	@ 0x38
 8006a78:	e054      	b.n	8006b24 <HAL_SD_ConfigWideBusOperation+0xe0>
  uint32_t scr[2U] = {0U, 0U};
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	9104      	str	r1, [sp, #16]
 8006a7e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a80:	6800      	ldr	r0, [r0, #0]
 8006a82:	f001 f9a7 	bl	8007dd4 <SDIO_GetResponse>
 8006a86:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8006a8a:	d116      	bne.n	8006aba <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8006a8c:	a904      	add	r1, sp, #16
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7ff fbc2 	bl	8006218 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a94:	4602      	mov	r2, r0
 8006a96:	b988      	cbnz	r0, 8006abc <HAL_SD_ConfigWideBusOperation+0x78>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a98:	9b05      	ldr	r3, [sp, #20]
 8006a9a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006a9e:	d011      	beq.n	8006ac4 <HAL_SD_ConfigWideBusOperation+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aa0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006aa2:	0409      	lsls	r1, r1, #16
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	f001 fb33 	bl	8008110 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aaa:	4602      	mov	r2, r0
 8006aac:	b930      	cbnz	r0, 8006abc <HAL_SD_ConfigWideBusOperation+0x78>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006aae:	2102      	movs	r1, #2
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	f001 fb45 	bl	8008140 <SDMMC_CmdBusWidth>
 8006ab6:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab8:	e000      	b.n	8006abc <HAL_SD_ConfigWideBusOperation+0x78>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006aba:	462a      	mov	r2, r5
      hsd->ErrorCode |= errorstate;
 8006abc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006ac2:	e02f      	b.n	8006b24 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ac4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006ac8:	e7f8      	b.n	8006abc <HAL_SD_ConfigWideBusOperation+0x78>
  uint32_t scr[2U] = {0U, 0U};
 8006aca:	2100      	movs	r1, #0
 8006acc:	9104      	str	r1, [sp, #16]
 8006ace:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ad0:	6800      	ldr	r0, [r0, #0]
 8006ad2:	f001 f97f 	bl	8007dd4 <SDIO_GetResponse>
 8006ad6:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8006ada:	d116      	bne.n	8006b0a <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 8006adc:	a904      	add	r1, sp, #16
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fb9a 	bl	8006218 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	b990      	cbnz	r0, 8006b0e <HAL_SD_ConfigWideBusOperation+0xca>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ae8:	9b05      	ldr	r3, [sp, #20]
 8006aea:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006aee:	d012      	beq.n	8006b16 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006af0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006af2:	0409      	lsls	r1, r1, #16
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	f001 fb0b 	bl	8008110 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006afa:	4602      	mov	r2, r0
 8006afc:	b938      	cbnz	r0, 8006b0e <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006afe:	2100      	movs	r1, #0
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	f001 fb1d 	bl	8008140 <SDMMC_CmdBusWidth>
 8006b06:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b08:	e001      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0xca>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 8006b0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b10:	4313      	orrs	r3, r2
 8006b12:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b14:	e006      	b.n	8006b24 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b16:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006b1a:	e7f8      	b.n	8006b0e <HAL_SD_ConfigWideBusOperation+0xca>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b22:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b26:	b1c3      	cbz	r3, 8006b5a <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	4a17      	ldr	r2, [pc, #92]	@ (8006b88 <HAL_SD_ConfigWideBusOperation+0x144>)
 8006b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b2e:	2501      	movs	r5, #1
 8006b30:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	f001 fa3f 	bl	8007fbc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3e:	b130      	cbz	r0, 8006b4e <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	4911      	ldr	r1, [pc, #68]	@ (8006b88 <HAL_SD_ConfigWideBusOperation+0x144>)
 8006b44:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006b46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b48:	4303      	orrs	r3, r0
 8006b4a:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8006b4c:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8006b54:	4628      	mov	r0, r5
 8006b56:	b00d      	add	sp, #52	@ 0x34
 8006b58:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	9306      	str	r3, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	9307      	str	r3, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9308      	str	r3, [sp, #32]
    Init.BusWide             = WideMode;
 8006b66:	9509      	str	r5, [sp, #36]	@ 0x24
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b68:	6963      	ldr	r3, [r4, #20]
 8006b6a:	930a      	str	r3, [sp, #40]	@ 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006b6c:	69a3      	ldr	r3, [r4, #24]
 8006b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
    (void)SDIO_Init(hsd->Instance, Init);
 8006b70:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b72:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006b76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006b7a:	ab06      	add	r3, sp, #24
 8006b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	f001 f8e9 	bl	8007d56 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2500      	movs	r5, #0
 8006b86:	e7d5      	b.n	8006b34 <HAL_SD_ConfigWideBusOperation+0xf0>
 8006b88:	004005ff 	.word	0x004005ff

08006b8c <HAL_SD_GetCardState>:
{
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b90:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8006b92:	0409      	lsls	r1, r1, #16
 8006b94:	6800      	ldr	r0, [r0, #0]
 8006b96:	f001 fb03 	bl	80081a0 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b9a:	b130      	cbz	r0, 8006baa <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 8006b9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t resp1 = 0;
 8006ba2:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ba4:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006ba8:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006baa:	2100      	movs	r1, #0
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	f001 f911 	bl	8007dd4 <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bb2:	e7f7      	b.n	8006ba4 <HAL_SD_GetCardState+0x18>

08006bb4 <SD_DMAError>:
{
 8006bb4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bb6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006bb8:	f7fd fea8 	bl	800490c <HAL_DMA_GetError>
 8006bbc:	2802      	cmp	r0, #2
 8006bbe:	d00a      	beq.n	8006bd6 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006bc4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006bc6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d005      	beq.n	8006bd8 <SD_DMAError+0x24>
 8006bcc:	2a01      	cmp	r2, #1
 8006bce:	d003      	beq.n	8006bd8 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7ff fce3 	bl	800659c <HAL_SD_ErrorCallback>
}
 8006bd6:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4a0f      	ldr	r2, [pc, #60]	@ (8006c18 <SD_DMAError+0x64>)
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006be2:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8006be6:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006be8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bee:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff ffcb 	bl	8006b8c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bf6:	3805      	subs	r0, #5
 8006bf8:	2801      	cmp	r0, #1
 8006bfa:	d905      	bls.n	8006c08 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c06:	e7e3      	b.n	8006bd0 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	f001 fa4f 	bl	80080ac <SDMMC_CmdStopTransfer>
 8006c0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c10:	4303      	orrs	r3, r0
 8006c12:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006c14:	e7f2      	b.n	8006bfc <SD_DMAError+0x48>
 8006c16:	bf00      	nop
 8006c18:	004005ff 	.word	0x004005ff

08006c1c <SD_DMATxAbort>:
{
 8006c1c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c1e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f7ff ffaf 	bl	8006b8c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c38:	3805      	subs	r0, #5
 8006c3a:	2801      	cmp	r0, #1
 8006c3c:	d905      	bls.n	8006c4a <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006c3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c40:	b953      	cbnz	r3, 8006c58 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8006c42:	4620      	mov	r0, r4
 8006c44:	f002 fa1b 	bl	800907e <HAL_SD_AbortCallback>
}
 8006c48:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	f001 fa2e 	bl	80080ac <SDMMC_CmdStopTransfer>
 8006c50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c52:	4303      	orrs	r3, r0
 8006c54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006c56:	e7f2      	b.n	8006c3e <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff fc9f 	bl	800659c <HAL_SD_ErrorCallback>
}
 8006c5e:	e7f3      	b.n	8006c48 <SD_DMATxAbort+0x2c>

08006c60 <SD_DMARxAbort>:
{
 8006c60:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c62:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7ff ff8d 	bl	8006b8c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c7c:	3805      	subs	r0, #5
 8006c7e:	2801      	cmp	r0, #1
 8006c80:	d905      	bls.n	8006c8e <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006c82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c84:	b953      	cbnz	r3, 8006c9c <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8006c86:	4620      	mov	r0, r4
 8006c88:	f002 f9f9 	bl	800907e <HAL_SD_AbortCallback>
}
 8006c8c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c8e:	6820      	ldr	r0, [r4, #0]
 8006c90:	f001 fa0c 	bl	80080ac <SDMMC_CmdStopTransfer>
 8006c94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c96:	4303      	orrs	r3, r0
 8006c98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006c9a:	e7f2      	b.n	8006c82 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7ff fc7d 	bl	800659c <HAL_SD_ErrorCallback>
}
 8006ca2:	e7f3      	b.n	8006c8c <SD_DMARxAbort+0x2c>

08006ca4 <HAL_SD_IRQHandler>:
{
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8006cac:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8006cb6:	f000 8082 	beq.w	8006dbe <HAL_SD_IRQHandler+0x11a>
 8006cba:	f015 0f08 	tst.w	r5, #8
 8006cbe:	d15e      	bne.n	8006d7e <HAL_SD_IRQHandler+0xda>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006cc6:	f040 8114 	bne.w	8006ef2 <HAL_SD_IRQHandler+0x24e>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006ccc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006cce:	f240 223a 	movw	r2, #570	@ 0x23a
 8006cd2:	4211      	tst	r1, r2
 8006cd4:	f000 809c 	beq.w	8006e10 <HAL_SD_IRQHandler+0x16c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cda:	f012 0f02 	tst.w	r2, #2
 8006cde:	d003      	beq.n	8006ce8 <HAL_SD_IRQHandler+0x44>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ce0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006ce2:	f042 0202 	orr.w	r2, r2, #2
 8006ce6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cea:	f012 0f08 	tst.w	r2, #8
 8006cee:	d003      	beq.n	8006cf8 <HAL_SD_IRQHandler+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006cf0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006cf2:	f042 0208 	orr.w	r2, r2, #8
 8006cf6:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cfa:	f012 0f20 	tst.w	r2, #32
 8006cfe:	d003      	beq.n	8006d08 <HAL_SD_IRQHandler+0x64>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d02:	f042 0220 	orr.w	r2, r2, #32
 8006d06:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d0a:	f012 0f10 	tst.w	r2, #16
 8006d0e:	d003      	beq.n	8006d18 <HAL_SD_IRQHandler+0x74>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006d10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d12:	f042 0210 	orr.w	r2, r2, #16
 8006d16:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d1a:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8006d1e:	d003      	beq.n	8006d28 <HAL_SD_IRQHandler+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d22:	f042 0208 	orr.w	r2, r2, #8
 8006d26:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006d28:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006d2c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006d32:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006d36:	f023 0302 	bic.w	r3, r3, #2
 8006d3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	f001 f9b5 	bl	80080ac <SDMMC_CmdStopTransfer>
 8006d42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d44:	4303      	orrs	r3, r0
 8006d46:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006d48:	f015 0f08 	tst.w	r5, #8
 8006d4c:	f040 80b2 	bne.w	8006eb4 <HAL_SD_IRQHandler+0x210>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d50:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006d54:	d05c      	beq.n	8006e10 <HAL_SD_IRQHandler+0x16c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d56:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8006d5a:	f040 80b4 	bne.w	8006ec6 <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d5e:	f015 0f03 	tst.w	r5, #3
 8006d62:	f000 80bc 	beq.w	8006ede <HAL_SD_IRQHandler+0x23a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006d66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d68:	4a75      	ldr	r2, [pc, #468]	@ (8006f40 <HAL_SD_IRQHandler+0x29c>)
 8006d6a:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006d6c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006d6e:	f7fd fccc 	bl	800470a <HAL_DMA_Abort_IT>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d04c      	beq.n	8006e10 <HAL_SD_IRQHandler+0x16c>
          SD_DMARxAbort(hsd->hdmarx);
 8006d76:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006d78:	f7ff ff72 	bl	8006c60 <SD_DMARxAbort>
 8006d7c:	e048      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8006d7e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	d045      	beq.n	8006e10 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pRxBuffPtr;
 8006d84:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8006d88:	f108 0504 	add.w	r5, r8, #4
 8006d8c:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	f000 fffa 	bl	8007d8a <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8006d96:	f805 0c04 	strb.w	r0, [r5, #-4]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006d9a:	0a03      	lsrs	r3, r0, #8
 8006d9c:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006da0:	0c03      	lsrs	r3, r0, #16
 8006da2:	f805 3c02 	strb.w	r3, [r5, #-2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006da6:	0e00      	lsrs	r0, r0, #24
 8006da8:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 8006dac:	3504      	adds	r5, #4
 8006dae:	42b5      	cmp	r5, r6
 8006db0:	d1ee      	bne.n	8006d90 <HAL_SD_IRQHandler+0xec>
      tmp++;
 8006db2:	f108 0320 	add.w	r3, r8, #32
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 8006db6:	62a3      	str	r3, [r4, #40]	@ 0x28
      dataremaining--;
 8006db8:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 8006dba:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8006dbc:	e028      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dc0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006dc4:	d045      	beq.n	8006e52 <HAL_SD_IRQHandler+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006dcc:	6802      	ldr	r2, [r0, #0]
 8006dce:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006dd0:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006dd4:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006dd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006dda:	6802      	ldr	r2, [r0, #0]
 8006ddc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8006de4:	f015 0f08 	tst.w	r5, #8
 8006de8:	f000 8092 	beq.w	8006f10 <HAL_SD_IRQHandler+0x26c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006dec:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8006df0:	d111      	bne.n	8006e16 <HAL_SD_IRQHandler+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006e04:	f015 0f03 	tst.w	r5, #3
 8006e08:	d012      	beq.n	8006e30 <HAL_SD_IRQHandler+0x18c>
        HAL_SD_RxCpltCallback(hsd);
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f002 f93f 	bl	800908e <HAL_SD_RxCpltCallback>
}
 8006e10:	b002      	add	sp, #8
 8006e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e16:	6800      	ldr	r0, [r0, #0]
 8006e18:	f001 f948 	bl	80080ac <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d0e7      	beq.n	8006df2 <HAL_SD_IRQHandler+0x14e>
          hsd->ErrorCode |= errorstate;
 8006e22:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e24:	4313      	orrs	r3, r2
 8006e26:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7ff fbb7 	bl	800659c <HAL_SD_ErrorCallback>
 8006e2e:	e7e0      	b.n	8006df2 <HAL_SD_IRQHandler+0x14e>
        HAL_SD_TxCpltCallback(hsd);
 8006e30:	4620      	mov	r0, r4
 8006e32:	f002 f928 	bl	8009086 <HAL_SD_TxCpltCallback>
 8006e36:	e7eb      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f001 f937 	bl	80080ac <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d06c      	beq.n	8006f1e <HAL_SD_IRQHandler+0x27a>
          hsd->ErrorCode |= errorstate;
 8006e44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006e46:	4313      	orrs	r3, r2
 8006e48:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff fba6 	bl	800659c <HAL_SD_ErrorCallback>
 8006e50:	e065      	b.n	8006f1e <HAL_SD_IRQHandler+0x27a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e54:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8006e58:	f43f af38 	beq.w	8006ccc <HAL_SD_IRQHandler+0x28>
 8006e5c:	f015 0f08 	tst.w	r5, #8
 8006e60:	f43f af34 	beq.w	8006ccc <HAL_SD_IRQHandler+0x28>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8006e64:	6a47      	ldr	r7, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 8006e66:	2f00      	cmp	r7, #0
 8006e68:	d0d2      	beq.n	8006e10 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pTxBuffPtr;
 8006e6a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8006e6e:	f108 0504 	add.w	r5, r8, #4
 8006e72:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8006e76:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8006e7a:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8006e7c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8006e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e84:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 8006e86:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8006e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e8e:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8006e90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e98:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006e9a:	a901      	add	r1, sp, #4
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	f000 ff77 	bl	8007d90 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006ea2:	3504      	adds	r5, #4
 8006ea4:	42b5      	cmp	r5, r6
 8006ea6:	d1e6      	bne.n	8006e76 <HAL_SD_IRQHandler+0x1d2>
      tmp++;
 8006ea8:	f108 0320 	add.w	r3, r8, #32
    }

    hsd->pTxBuffPtr = tmp;
 8006eac:	6223      	str	r3, [r4, #32]
      dataremaining--;
 8006eae:	3f20      	subs	r7, #32
    hsd->TxXferSize = dataremaining;
 8006eb0:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 8006eb2:	e7ad      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
      hsd->State = HAL_SD_STATE_READY;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff fb6c 	bl	800659c <HAL_SD_ErrorCallback>
 8006ec4:	e7a4      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006ec6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <HAL_SD_IRQHandler+0x2a0>)
 8006eca:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006ecc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006ece:	f7fd fc1c 	bl	800470a <HAL_DMA_Abort_IT>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d09c      	beq.n	8006e10 <HAL_SD_IRQHandler+0x16c>
          SD_DMATxAbort(hsd->hdmatx);
 8006ed6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006ed8:	f7ff fea0 	bl	8006c1c <SD_DMATxAbort>
 8006edc:	e798      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ee8:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8006eea:	4620      	mov	r0, r4
 8006eec:	f002 f8c7 	bl	800907e <HAL_SD_AbortCallback>
}
 8006ef0:	e78e      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006efc:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006f00:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006f04:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f10:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006f14:	f43f af7c 	beq.w	8006e10 <HAL_SD_IRQHandler+0x16c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f18:	f015 0f20 	tst.w	r5, #32
 8006f1c:	d18c      	bne.n	8006e38 <HAL_SD_IRQHandler+0x194>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006f1e:	f015 0f03 	tst.w	r5, #3
 8006f22:	f47f af75 	bne.w	8006e10 <HAL_SD_IRQHandler+0x16c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006f2a:	f023 0308 	bic.w	r3, r3, #8
 8006f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006f36:	4620      	mov	r0, r4
 8006f38:	f002 f8a5 	bl	8009086 <HAL_SD_TxCpltCallback>
 8006f3c:	e768      	b.n	8006e10 <HAL_SD_IRQHandler+0x16c>
 8006f3e:	bf00      	nop
 8006f40:	08006c61 	.word	0x08006c61
 8006f44:	08006c1d 	.word	0x08006c1d

08006f48 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d05a      	beq.n	8007002 <HAL_SPI_Init+0xba>
{
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f52:	b933      	cbnz	r3, 8006f62 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f54:	6843      	ldr	r3, [r0, #4]
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f5a:	d005      	beq.n	8006f68 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61c3      	str	r3, [r0, #28]
 8006f60:	e002      	b.n	8006f68 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f62:	2300      	movs	r3, #0
 8006f64:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f66:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f6c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d040      	beq.n	8006ff6 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f74:	2302      	movs	r3, #2
 8006f76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	6813      	ldr	r3, [r2, #0]
 8006f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f82:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006f8c:	68a1      	ldr	r1, [r4, #8]
 8006f8e:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8006f92:	430b      	orrs	r3, r1
 8006f94:	68e1      	ldr	r1, [r4, #12]
 8006f96:	f401 6100 	and.w	r1, r1, #2048	@ 0x800
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	6921      	ldr	r1, [r4, #16]
 8006f9e:	f001 0102 	and.w	r1, r1, #2
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	6961      	ldr	r1, [r4, #20]
 8006fa6:	f001 0101 	and.w	r1, r1, #1
 8006faa:	430b      	orrs	r3, r1
 8006fac:	69a1      	ldr	r1, [r4, #24]
 8006fae:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	69e1      	ldr	r1, [r4, #28]
 8006fb6:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6a21      	ldr	r1, [r4, #32]
 8006fbe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006fc6:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fce:	6821      	ldr	r1, [r4, #0]
 8006fd0:	8b63      	ldrh	r3, [r4, #26]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006fd8:	f002 0210 	and.w	r2, r2, #16
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe0:	6822      	ldr	r2, [r4, #0]
 8006fe2:	69d3      	ldr	r3, [r2, #28]
 8006fe4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fea:	2000      	movs	r0, #0
 8006fec:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8006ff4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006ff6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7fc ffec 	bl	8003fd8 <HAL_SPI_MspInit>
 8007000:	e7b8      	b.n	8006f74 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8007002:	2001      	movs	r0, #1
}
 8007004:	4770      	bx	lr
	...

08007008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700c:	6a02      	ldr	r2, [r0, #32]
 800700e:	f022 0201 	bic.w	r2, r2, #1
 8007012:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007016:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007018:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800701c:	680d      	ldr	r5, [r1, #0]
 800701e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007020:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007024:	688d      	ldr	r5, [r1, #8]
 8007026:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007028:	4d11      	ldr	r5, [pc, #68]	@ (8007070 <TIM_OC1_SetConfig+0x68>)
 800702a:	42a8      	cmp	r0, r5
 800702c:	d00a      	beq.n	8007044 <TIM_OC1_SetConfig+0x3c>
 800702e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007032:	42a8      	cmp	r0, r5
 8007034:	d114      	bne.n	8007060 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007036:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800703a:	68cd      	ldr	r5, [r1, #12]
 800703c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800703e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	e005      	b.n	8007050 <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 8007044:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007048:	68cd      	ldr	r5, [r1, #12]
 800704a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800704c:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007050:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007054:	698d      	ldr	r5, [r1, #24]
 8007056:	694e      	ldr	r6, [r1, #20]
 8007058:	ea46 0c05 	orr.w	ip, r6, r5
 800705c:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007060:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007062:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007064:	684a      	ldr	r2, [r1, #4]
 8007066:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007068:	6203      	str	r3, [r0, #32]
}
 800706a:	bc70      	pop	{r4, r5, r6}
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000

08007074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007078:	6a02      	ldr	r2, [r0, #32]
 800707a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800707e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007082:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007084:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	680d      	ldr	r5, [r1, #0]
 800708a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800708c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007090:	688d      	ldr	r5, [r1, #8]
 8007092:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007096:	4d12      	ldr	r5, [pc, #72]	@ (80070e0 <TIM_OC3_SetConfig+0x6c>)
 8007098:	42a8      	cmp	r0, r5
 800709a:	d00b      	beq.n	80070b4 <TIM_OC3_SetConfig+0x40>
 800709c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070a0:	42a8      	cmp	r0, r5
 80070a2:	d116      	bne.n	80070d2 <TIM_OC3_SetConfig+0x5e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070a8:	68cd      	ldr	r5, [r1, #12]
 80070aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	e006      	b.n	80070c2 <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070b8:	68cd      	ldr	r5, [r1, #12]
 80070ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80070be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070c2:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c6:	698d      	ldr	r5, [r1, #24]
 80070c8:	694e      	ldr	r6, [r1, #20]
 80070ca:	ea46 0c05 	orr.w	ip, r6, r5
 80070ce:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070d6:	684a      	ldr	r2, [r1, #4]
 80070d8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070da:	6203      	str	r3, [r0, #32]
}
 80070dc:	bc70      	pop	{r4, r5, r6}
 80070de:	4770      	bx	lr
 80070e0:	40010000 	.word	0x40010000

080070e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e8:	6a02      	ldr	r2, [r0, #32]
 80070ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070ee:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070f4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f8:	680d      	ldr	r5, [r1, #0]
 80070fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007102:	688d      	ldr	r5, [r1, #8]
 8007104:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007108:	4d09      	ldr	r5, [pc, #36]	@ (8007130 <TIM_OC4_SetConfig+0x4c>)
 800710a:	42a8      	cmp	r0, r5
 800710c:	d003      	beq.n	8007116 <TIM_OC4_SetConfig+0x32>
 800710e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007112:	42a8      	cmp	r0, r5
 8007114:	d104      	bne.n	8007120 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007116:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800711a:	694d      	ldr	r5, [r1, #20]
 800711c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007122:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007124:	684a      	ldr	r2, [r1, #4]
 8007126:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007128:	6203      	str	r3, [r0, #32]
}
 800712a:	bc30      	pop	{r4, r5}
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40010000 	.word	0x40010000

08007134 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007134:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d132      	bne.n	80071a4 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800713e:	2302      	movs	r3, #2
 8007140:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007144:	6803      	ldr	r3, [r0, #0]
 8007146:	4a19      	ldr	r2, [pc, #100]	@ (80071ac <HAL_TIM_Base_Start+0x78>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d020      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d01d      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 8007152:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007156:	4293      	cmp	r3, r2
 8007158:	d019      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 800715a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800715e:	4293      	cmp	r3, r2
 8007160:	d015      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 8007162:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007166:	4293      	cmp	r3, r2
 8007168:	d011      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 800716a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800716e:	4293      	cmp	r3, r2
 8007170:	d00d      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 8007172:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
 800717a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800717e:	4293      	cmp	r3, r2
 8007180:	d005      	beq.n	800718e <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800718a:	2000      	movs	r0, #0
 800718c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007194:	2a06      	cmp	r2, #6
 8007196:	d007      	beq.n	80071a8 <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f042 0201 	orr.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80071a0:	2000      	movs	r0, #0
 80071a2:	4770      	bx	lr
    return HAL_ERROR;
 80071a4:	2001      	movs	r0, #1
 80071a6:	4770      	bx	lr
  return HAL_OK;
 80071a8:	2000      	movs	r0, #0
}
 80071aa:	4770      	bx	lr
 80071ac:	40010000 	.word	0x40010000

080071b0 <HAL_TIM_PWM_MspInit>:
}
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_PeriodElapsedCallback>:
}
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80071b4:	4770      	bx	lr

080071b6 <HAL_TIM_IC_CaptureCallback>:
}
 80071b6:	4770      	bx	lr

080071b8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80071b8:	4770      	bx	lr

080071ba <HAL_TIM_TriggerCallback>:
}
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_IRQHandler>:
{
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80071c0:	6803      	ldr	r3, [r0, #0]
 80071c2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071c4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071c6:	f015 0f02 	tst.w	r5, #2
 80071ca:	d010      	beq.n	80071ee <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071cc:	f016 0f02 	tst.w	r6, #2
 80071d0:	d00d      	beq.n	80071ee <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071d2:	f06f 0202 	mvn.w	r2, #2
 80071d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d8:	2301      	movs	r3, #1
 80071da:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071dc:	6803      	ldr	r3, [r0, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f013 0f03 	tst.w	r3, #3
 80071e4:	d05e      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	f7ff ffe6 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	2300      	movs	r3, #0
 80071ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071ee:	f015 0f04 	tst.w	r5, #4
 80071f2:	d012      	beq.n	800721a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071f4:	f016 0f04 	tst.w	r6, #4
 80071f8:	d00f      	beq.n	800721a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	f06f 0204 	mvn.w	r2, #4
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007202:	2302      	movs	r3, #2
 8007204:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800720e:	d04f      	beq.n	80072b0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8007210:	4620      	mov	r0, r4
 8007212:	f7ff ffd0 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	2300      	movs	r3, #0
 8007218:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800721a:	f015 0f08 	tst.w	r5, #8
 800721e:	d012      	beq.n	8007246 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007220:	f016 0f08 	tst.w	r6, #8
 8007224:	d00f      	beq.n	8007246 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f06f 0208 	mvn.w	r2, #8
 800722c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800722e:	2304      	movs	r3, #4
 8007230:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f013 0f03 	tst.w	r3, #3
 800723a:	d040      	beq.n	80072be <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800723c:	4620      	mov	r0, r4
 800723e:	f7ff ffba 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007242:	2300      	movs	r3, #0
 8007244:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007246:	f015 0f10 	tst.w	r5, #16
 800724a:	d012      	beq.n	8007272 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800724c:	f016 0f10 	tst.w	r6, #16
 8007250:	d00f      	beq.n	8007272 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	f06f 0210 	mvn.w	r2, #16
 8007258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725a:	2308      	movs	r3, #8
 800725c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007266:	d031      	beq.n	80072cc <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8007268:	4620      	mov	r0, r4
 800726a:	f7ff ffa4 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	2300      	movs	r3, #0
 8007270:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007272:	f015 0f01 	tst.w	r5, #1
 8007276:	d002      	beq.n	800727e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007278:	f016 0f01 	tst.w	r6, #1
 800727c:	d12d      	bne.n	80072da <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800727e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8007282:	d002      	beq.n	800728a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007284:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8007288:	d12f      	bne.n	80072ea <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800728a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800728e:	d002      	beq.n	8007296 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007290:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8007294:	d131      	bne.n	80072fa <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007296:	f015 0f20 	tst.w	r5, #32
 800729a:	d002      	beq.n	80072a2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800729c:	f016 0f20 	tst.w	r6, #32
 80072a0:	d133      	bne.n	800730a <HAL_TIM_IRQHandler+0x14e>
}
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a4:	f7ff ff86 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff ff85 	bl	80071b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80072ae:	e79c      	b.n	80071ea <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff ff7f 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ff7e 	bl	80071b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80072bc:	e7ab      	b.n	8007216 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	4620      	mov	r0, r4
 80072c0:	f7ff ff78 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	4620      	mov	r0, r4
 80072c6:	f7ff ff77 	bl	80071b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80072ca:	e7ba      	b.n	8007242 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7ff ff71 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7ff ff70 	bl	80071b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80072d8:	e7c9      	b.n	800726e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f06f 0201 	mvn.w	r2, #1
 80072e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff ff65 	bl	80071b2 <HAL_TIM_PeriodElapsedCallback>
 80072e8:	e7c9      	b.n	800727e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fb9e 	bl	8007a34 <HAL_TIMEx_BreakCallback>
 80072f8:	e7c7      	b.n	800728a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007300:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff ff59 	bl	80071ba <HAL_TIM_TriggerCallback>
 8007308:	e7c5      	b.n	8007296 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	f06f 0220 	mvn.w	r2, #32
 8007310:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fb8d 	bl	8007a32 <HAL_TIMEx_CommutCallback>
}
 8007318:	e7c3      	b.n	80072a2 <HAL_TIM_IRQHandler+0xe6>
	...

0800731c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800731c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800731e:	4a45      	ldr	r2, [pc, #276]	@ (8007434 <TIM_Base_SetConfig+0x118>)
 8007320:	4290      	cmp	r0, r2
 8007322:	d067      	beq.n	80073f4 <TIM_Base_SetConfig+0xd8>
 8007324:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007328:	d031      	beq.n	800738e <TIM_Base_SetConfig+0x72>
 800732a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800732e:	4290      	cmp	r0, r2
 8007330:	d056      	beq.n	80073e0 <TIM_Base_SetConfig+0xc4>
 8007332:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007336:	4290      	cmp	r0, r2
 8007338:	d03b      	beq.n	80073b2 <TIM_Base_SetConfig+0x96>
 800733a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800733e:	4290      	cmp	r0, r2
 8007340:	d053      	beq.n	80073ea <TIM_Base_SetConfig+0xce>
 8007342:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007346:	4290      	cmp	r0, r2
 8007348:	d038      	beq.n	80073bc <TIM_Base_SetConfig+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800734a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800734e:	4290      	cmp	r0, r2
 8007350:	d021      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
 8007352:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007356:	4290      	cmp	r0, r2
 8007358:	d01d      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
 800735a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800735e:	4290      	cmp	r0, r2
 8007360:	d019      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
 8007362:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007366:	4290      	cmp	r0, r2
 8007368:	d015      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
 800736a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800736e:	4290      	cmp	r0, r2
 8007370:	d011      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
 8007372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007376:	4290      	cmp	r0, r2
 8007378:	d00d      	beq.n	8007396 <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800737a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737e:	694a      	ldr	r2, [r1, #20]
 8007380:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007382:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007384:	688b      	ldr	r3, [r1, #8]
 8007386:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007388:	680b      	ldr	r3, [r1, #0]
 800738a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800738c:	e045      	b.n	800741a <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800738e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007392:	684a      	ldr	r2, [r1, #4]
 8007394:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	68ca      	ldr	r2, [r1, #12]
 800739c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800739e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a2:	694a      	ldr	r2, [r1, #20]
 80073a4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80073a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a8:	688b      	ldr	r3, [r1, #8]
 80073aa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073ac:	680b      	ldr	r3, [r1, #0]
 80073ae:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b0:	e033      	b.n	800741a <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073b6:	684a      	ldr	r2, [r1, #4]
 80073b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ba:	e7ec      	b.n	8007396 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073c0:	684a      	ldr	r2, [r1, #4]
 80073c2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80073c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c8:	68ca      	ldr	r2, [r1, #12]
 80073ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d0:	694a      	ldr	r2, [r1, #20]
 80073d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80073d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d6:	688b      	ldr	r3, [r1, #8]
 80073d8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073da:	680b      	ldr	r3, [r1, #0]
 80073dc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073de:	e01a      	b.n	8007416 <TIM_Base_SetConfig+0xfa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073e4:	684a      	ldr	r2, [r1, #4]
 80073e6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e8:	e7d5      	b.n	8007396 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073ee:	684a      	ldr	r2, [r1, #4]
 80073f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f2:	e7d0      	b.n	8007396 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80073f8:	684a      	ldr	r2, [r1, #4]
 80073fa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007400:	68ca      	ldr	r2, [r1, #12]
 8007402:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007408:	694a      	ldr	r2, [r1, #20]
 800740a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800740c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800740e:	688b      	ldr	r3, [r1, #8]
 8007410:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007412:	680b      	ldr	r3, [r1, #0]
 8007414:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007416:	690b      	ldr	r3, [r1, #16]
 8007418:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800741a:	2301      	movs	r3, #1
 800741c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800741e:	6903      	ldr	r3, [r0, #16]
 8007420:	f013 0f01 	tst.w	r3, #1
 8007424:	d004      	beq.n	8007430 <TIM_Base_SetConfig+0x114>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007426:	6903      	ldr	r3, [r0, #16]
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	6103      	str	r3, [r0, #16]
}
 800742e:	4770      	bx	lr
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40010000 	.word	0x40010000

08007438 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007438:	b340      	cbz	r0, 800748c <HAL_TIM_Base_Init+0x54>
{
 800743a:	b510      	push	{r4, lr}
 800743c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800743e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007442:	b1f3      	cbz	r3, 8007482 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	2302      	movs	r3, #2
 8007446:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744a:	4621      	mov	r1, r4
 800744c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007450:	f7ff ff64 	bl	800731c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007454:	2301      	movs	r3, #1
 8007456:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800745e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007462:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007466:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800746e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007472:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007476:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800747a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800747e:	2000      	movs	r0, #0
}
 8007480:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007482:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007486:	f7fc fde9 	bl	800405c <HAL_TIM_Base_MspInit>
 800748a:	e7db      	b.n	8007444 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800748c:	2001      	movs	r0, #1
}
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007490:	b340      	cbz	r0, 80074e4 <HAL_TIM_PWM_Init+0x54>
{
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800749a:	b1f3      	cbz	r3, 80074da <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	2302      	movs	r3, #2
 800749e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a2:	4621      	mov	r1, r4
 80074a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80074a8:	f7ff ff38 	bl	800731c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80074b6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80074ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80074be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80074ce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80074d6:	2000      	movs	r0, #0
}
 80074d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80074da:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80074de:	f7ff fe67 	bl	80071b0 <HAL_TIM_PWM_MspInit>
 80074e2:	e7db      	b.n	800749c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80074e4:	2001      	movs	r0, #1
}
 80074e6:	4770      	bx	lr

080074e8 <TIM_OC2_SetConfig>:
{
 80074e8:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80074ea:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ec:	6a02      	ldr	r2, [r0, #32]
 80074ee:	f022 0210 	bic.w	r2, r2, #16
 80074f2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80074f4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80074f6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074f8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074fc:	680d      	ldr	r5, [r1, #0]
 80074fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007502:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007506:	688d      	ldr	r5, [r1, #8]
 8007508:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800750c:	4d12      	ldr	r5, [pc, #72]	@ (8007558 <TIM_OC2_SetConfig+0x70>)
 800750e:	42a8      	cmp	r0, r5
 8007510:	d00b      	beq.n	800752a <TIM_OC2_SetConfig+0x42>
 8007512:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007516:	42a8      	cmp	r0, r5
 8007518:	d116      	bne.n	8007548 <TIM_OC2_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC2NP;
 800751a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800751e:	68cd      	ldr	r5, [r1, #12]
 8007520:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	e006      	b.n	8007538 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 800752a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800752e:	68cd      	ldr	r5, [r1, #12]
 8007530:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007538:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800753c:	698d      	ldr	r5, [r1, #24]
 800753e:	694e      	ldr	r6, [r1, #20]
 8007540:	ea46 0c05 	orr.w	ip, r6, r5
 8007544:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8007548:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800754a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800754c:	684a      	ldr	r2, [r1, #4]
 800754e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007550:	6203      	str	r3, [r0, #32]
}
 8007552:	bc70      	pop	{r4, r5, r6}
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40010000 	.word	0x40010000

0800755c <HAL_TIM_PWM_ConfigChannel>:
{
 800755c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800755e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007562:	2b01      	cmp	r3, #1
 8007564:	d066      	beq.n	8007634 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	2301      	movs	r3, #1
 800756c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8007570:	2a0c      	cmp	r2, #12
 8007572:	d85a      	bhi.n	800762a <HAL_TIM_PWM_ConfigChannel+0xce>
 8007574:	e8df f002 	tbb	[pc, r2]
 8007578:	59595907 	.word	0x59595907
 800757c:	5959591b 	.word	0x5959591b
 8007580:	59595930 	.word	0x59595930
 8007584:	44          	.byte	0x44
 8007585:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f7ff fd3e 	bl	8007008 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800758c:	6822      	ldr	r2, [r4, #0]
 800758e:	6993      	ldr	r3, [r2, #24]
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007596:	6822      	ldr	r2, [r4, #0]
 8007598:	6993      	ldr	r3, [r2, #24]
 800759a:	f023 0304 	bic.w	r3, r3, #4
 800759e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	6993      	ldr	r3, [r2, #24]
 80075a4:	6929      	ldr	r1, [r5, #16]
 80075a6:	430b      	orrs	r3, r1
 80075a8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80075aa:	2000      	movs	r0, #0
      break;
 80075ac:	e03e      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075ae:	6800      	ldr	r0, [r0, #0]
 80075b0:	f7ff ff9a 	bl	80074e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	6993      	ldr	r3, [r2, #24]
 80075b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	6993      	ldr	r3, [r2, #24]
 80075c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075c6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	6993      	ldr	r3, [r2, #24]
 80075cc:	6929      	ldr	r1, [r5, #16]
 80075ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075d2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80075d4:	2000      	movs	r0, #0
      break;
 80075d6:	e029      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075d8:	6800      	ldr	r0, [r0, #0]
 80075da:	f7ff fd4b 	bl	8007074 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	69d3      	ldr	r3, [r2, #28]
 80075e2:	f043 0308 	orr.w	r3, r3, #8
 80075e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	69d3      	ldr	r3, [r2, #28]
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	69d3      	ldr	r3, [r2, #28]
 80075f6:	6929      	ldr	r1, [r5, #16]
 80075f8:	430b      	orrs	r3, r1
 80075fa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2000      	movs	r0, #0
      break;
 80075fe:	e015      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007600:	6800      	ldr	r0, [r0, #0]
 8007602:	f7ff fd6f 	bl	80070e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	69d3      	ldr	r3, [r2, #28]
 800760a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800760e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	69d3      	ldr	r3, [r2, #28]
 8007614:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007618:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	69d3      	ldr	r3, [r2, #28]
 800761e:	6929      	ldr	r1, [r5, #16]
 8007620:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007624:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2000      	movs	r0, #0
      break;
 8007628:	e000      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800762a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800762c:	2300      	movs	r3, #0
 800762e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007632:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007634:	2002      	movs	r0, #2
 8007636:	e7fc      	b.n	8007632 <HAL_TIM_PWM_ConfigChannel+0xd6>

08007638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007638:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007640:	430a      	orrs	r2, r1
 8007642:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007646:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764a:	6082      	str	r2, [r0, #8]
}
 800764c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_TIM_ConfigClockSource>:
{
 8007652:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007654:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	f000 80ad 	beq.w	80077b8 <HAL_TIM_ConfigClockSource+0x166>
 800765e:	4604      	mov	r4, r0
 8007660:	2301      	movs	r3, #1
 8007662:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007666:	2302      	movs	r3, #2
 8007668:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800766c:	6802      	ldr	r2, [r0, #0]
 800766e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007670:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007674:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007678:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800767a:	680b      	ldr	r3, [r1, #0]
 800767c:	2b60      	cmp	r3, #96	@ 0x60
 800767e:	d060      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0xf0>
 8007680:	d83d      	bhi.n	80076fe <HAL_TIM_ConfigClockSource+0xac>
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d079      	beq.n	800777a <HAL_TIM_ConfigClockSource+0x128>
 8007686:	d91c      	bls.n	80076c2 <HAL_TIM_ConfigClockSource+0x70>
 8007688:	2b50      	cmp	r3, #80	@ 0x50
 800768a:	d136      	bne.n	80076fa <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800768c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800768e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007690:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007692:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800769e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80076aa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80076ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ae:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076b0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80076b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b8:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80076bc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076be:	2000      	movs	r0, #0
}
 80076c0:	e012      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d002      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0x7a>
 80076c6:	d90b      	bls.n	80076e0 <HAL_TIM_ConfigClockSource+0x8e>
 80076c8:	2b30      	cmp	r3, #48	@ 0x30
 80076ca:	d114      	bne.n	80076f6 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076cc:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80076ce:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80076da:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076dc:	2000      	movs	r0, #0
}
 80076de:	e003      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80076e0:	f033 0210 	bics.w	r2, r3, #16
 80076e4:	d0f2      	beq.n	80076cc <HAL_TIM_ConfigClockSource+0x7a>
 80076e6:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80076ee:	2300      	movs	r3, #0
 80076f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80076f6:	2001      	movs	r0, #1
 80076f8:	e7f6      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7f4      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007702:	d055      	beq.n	80077b0 <HAL_TIM_ConfigClockSource+0x15e>
 8007704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007708:	d10c      	bne.n	8007724 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800770a:	68cb      	ldr	r3, [r1, #12]
 800770c:	684a      	ldr	r2, [r1, #4]
 800770e:	6889      	ldr	r1, [r1, #8]
 8007710:	6800      	ldr	r0, [r0, #0]
 8007712:	f7ff ff91 	bl	8007638 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	6893      	ldr	r3, [r2, #8]
 800771a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800771e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007720:	2000      	movs	r0, #0
      break;
 8007722:	e7e1      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007724:	2b70      	cmp	r3, #112	@ 0x70
 8007726:	d145      	bne.n	80077b4 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8007728:	68cb      	ldr	r3, [r1, #12]
 800772a:	684a      	ldr	r2, [r1, #4]
 800772c:	6889      	ldr	r1, [r1, #8]
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	f7ff ff82 	bl	8007638 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800773c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800773e:	2000      	movs	r0, #0
      break;
 8007740:	e7d2      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007742:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8007744:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007746:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007748:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774a:	6a19      	ldr	r1, [r3, #32]
 800774c:	f021 0110 	bic.w	r1, r1, #16
 8007750:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007752:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007754:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007758:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007760:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007764:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007766:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007768:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800776a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800776c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007770:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007774:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	e7b6      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800777a:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800777c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800777e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007780:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800778c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007790:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007794:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007798:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800779a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800779c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800779e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80077a0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80077aa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077ac:	2000      	movs	r0, #0
}
 80077ae:	e79b      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2000      	movs	r0, #0
 80077b2:	e799      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80077b4:	2001      	movs	r0, #1
 80077b6:	e797      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80077b8:	2002      	movs	r0, #2
 80077ba:	e79b      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0xa2>

080077bc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077bc:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077c0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c2:	f04f 0c01 	mov.w	ip, #1
 80077c6:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80077ca:	ea23 030c 	bic.w	r3, r3, ip
 80077ce:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	408a      	lsls	r2, r1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	6202      	str	r2, [r0, #32]
}
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_TIM_PWM_Start>:
{
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077e0:	4608      	mov	r0, r1
 80077e2:	bba1      	cbnz	r1, 800784e <HAL_TIM_PWM_Start+0x72>
 80077e4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d167      	bne.n	80078be <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ee:	2302      	movs	r3, #2
 80077f0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077f4:	2201      	movs	r2, #1
 80077f6:	4601      	mov	r1, r0
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	f7ff ffdf 	bl	80077bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4a31      	ldr	r2, [pc, #196]	@ (80078c8 <HAL_TIM_PWM_Start+0xec>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d048      	beq.n	8007898 <HAL_TIM_PWM_Start+0xbc>
 8007806:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800780a:	4293      	cmp	r3, r2
 800780c:	d044      	beq.n	8007898 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	d049      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 8007814:	4a2d      	ldr	r2, [pc, #180]	@ (80078cc <HAL_TIM_PWM_Start+0xf0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d046      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 800781a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800781e:	4293      	cmp	r3, r2
 8007820:	d042      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 8007822:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007826:	4293      	cmp	r3, r2
 8007828:	d03e      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 800782a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800782e:	4293      	cmp	r3, r2
 8007830:	d03a      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 8007832:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007836:	4293      	cmp	r3, r2
 8007838:	d036      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
 800783a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800783e:	4293      	cmp	r3, r2
 8007840:	d032      	beq.n	80078a8 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f042 0201 	orr.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800784a:	2000      	movs	r0, #0
 800784c:	e036      	b.n	80078bc <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800784e:	2904      	cmp	r1, #4
 8007850:	d00c      	beq.n	800786c <HAL_TIM_PWM_Start+0x90>
 8007852:	2908      	cmp	r1, #8
 8007854:	bf0c      	ite	eq
 8007856:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 800785a:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 800785e:	b2db      	uxtb	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	bf18      	it	ne
 8007864:	2301      	movne	r3, #1
 8007866:	b143      	cbz	r3, 800787a <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8007868:	2001      	movs	r0, #1
 800786a:	e027      	b.n	80078bc <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800786c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8007870:	b2db      	uxtb	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	bf18      	it	ne
 8007876:	2301      	movne	r3, #1
 8007878:	e7f5      	b.n	8007866 <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787a:	2804      	cmp	r0, #4
 800787c:	d008      	beq.n	8007890 <HAL_TIM_PWM_Start+0xb4>
 800787e:	2808      	cmp	r0, #8
 8007880:	f04f 0302 	mov.w	r3, #2
 8007884:	bf0c      	ite	eq
 8007886:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 800788a:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800788e:	e7b1      	b.n	80077f4 <HAL_TIM_PWM_Start+0x18>
 8007890:	2302      	movs	r3, #2
 8007892:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007896:	e7ad      	b.n	80077f4 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8007898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800789a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800789e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	4a09      	ldr	r2, [pc, #36]	@ (80078c8 <HAL_TIM_PWM_Start+0xec>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d1b2      	bne.n	800780e <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ae:	2a06      	cmp	r2, #6
 80078b0:	d007      	beq.n	80078c2 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80078ba:	2000      	movs	r0, #0
}
 80078bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80078be:	2001      	movs	r0, #1
 80078c0:	e7fc      	b.n	80078bc <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7fa      	b.n	80078bc <HAL_TIM_PWM_Start+0xe0>
 80078c6:	bf00      	nop
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40000400 	.word	0x40000400

080078d0 <HAL_TIM_PWM_Stop>:
{
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4604      	mov	r4, r0
 80078d4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078d6:	2200      	movs	r2, #0
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	f7ff ff6f 	bl	80077bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007954 <HAL_TIM_PWM_Stop+0x84>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_TIM_PWM_Stop+0x48>
 80078e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d014      	beq.n	8007918 <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	6a19      	ldr	r1, [r3, #32]
 80078f2:	f241 1211 	movw	r2, #4369	@ 0x1111
 80078f6:	4211      	tst	r1, r2
 80078f8:	d108      	bne.n	800790c <HAL_TIM_PWM_Stop+0x3c>
 80078fa:	6a19      	ldr	r1, [r3, #32]
 80078fc:	f240 4244 	movw	r2, #1092	@ 0x444
 8007900:	4211      	tst	r1, r2
 8007902:	d103      	bne.n	800790c <HAL_TIM_PWM_Stop+0x3c>
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	f022 0201 	bic.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	b99d      	cbnz	r5, 8007936 <HAL_TIM_PWM_Stop+0x66>
 800790e:	2301      	movs	r3, #1
 8007910:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8007914:	2000      	movs	r0, #0
 8007916:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007918:	6a19      	ldr	r1, [r3, #32]
 800791a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800791e:	4211      	tst	r1, r2
 8007920:	d1e5      	bne.n	80078ee <HAL_TIM_PWM_Stop+0x1e>
 8007922:	6a19      	ldr	r1, [r3, #32]
 8007924:	f240 4244 	movw	r2, #1092	@ 0x444
 8007928:	4211      	tst	r1, r2
 800792a:	d1e0      	bne.n	80078ee <HAL_TIM_PWM_Stop+0x1e>
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44
 8007934:	e7db      	b.n	80078ee <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007936:	2d04      	cmp	r5, #4
 8007938:	d008      	beq.n	800794c <HAL_TIM_PWM_Stop+0x7c>
 800793a:	2d08      	cmp	r5, #8
 800793c:	f04f 0301 	mov.w	r3, #1
 8007940:	bf0c      	ite	eq
 8007942:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8007946:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800794a:	e7e3      	b.n	8007914 <HAL_TIM_PWM_Stop+0x44>
 800794c:	2301      	movs	r3, #1
 800794e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007952:	e7df      	b.n	8007914 <HAL_TIM_PWM_Stop+0x44>
 8007954:	40010000 	.word	0x40010000

08007958 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007958:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800795c:	2a01      	cmp	r2, #1
 800795e:	d03b      	beq.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8007960:	b430      	push	{r4, r5}
 8007962:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007964:	2201      	movs	r2, #1
 8007966:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796a:	2202      	movs	r2, #2
 800796c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007970:	6804      	ldr	r4, [r0, #0]
 8007972:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007974:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007976:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800797a:	680d      	ldr	r5, [r1, #0]
 800797c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800797e:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4c16      	ldr	r4, [pc, #88]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8007984:	42a2      	cmp	r2, r4
 8007986:	d01a      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8007988:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800798c:	d017      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800798e:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8007992:	42a2      	cmp	r2, r4
 8007994:	d013      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8007996:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800799a:	42a2      	cmp	r2, r4
 800799c:	d00f      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800799e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80079a2:	42a2      	cmp	r2, r4
 80079a4:	d00b      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80079a6:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80079aa:	42a2      	cmp	r2, r4
 80079ac:	d007      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80079ae:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 80079b2:	42a2      	cmp	r2, r4
 80079b4:	d003      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80079b6:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 80079ba:	42a2      	cmp	r2, r4
 80079bc:	d104      	bne.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079be:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079c2:	6849      	ldr	r1, [r1, #4]
 80079c4:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079c6:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079ce:	2000      	movs	r0, #0
 80079d0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80079d4:	bc30      	pop	{r4, r5}
 80079d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80079d8:	2002      	movs	r0, #2
}
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000

080079e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079e0:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d021      	beq.n	8007a2e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079f0:	68cb      	ldr	r3, [r1, #12]
 80079f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f6:	6888      	ldr	r0, [r1, #8]
 80079f8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079fe:	6848      	ldr	r0, [r1, #4]
 8007a00:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a06:	6808      	ldr	r0, [r1, #0]
 8007a08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a0e:	6908      	ldr	r0, [r1, #16]
 8007a10:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a16:	6948      	ldr	r0, [r1, #20]
 8007a18:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a1e:	69c9      	ldr	r1, [r1, #28]
 8007a20:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a22:	6811      	ldr	r1, [r2, #0]
 8007a24:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a26:	2000      	movs	r0, #0
 8007a28:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007a2c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007a2e:	2002      	movs	r0, #2
}
 8007a30:	4770      	bx	lr

08007a32 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a34:	4770      	bx	lr

08007a36 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f102 030c 	add.w	r3, r2, #12
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	320c      	adds	r2, #12
 8007a46:	e842 3100 	strex	r1, r3, [r2]
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d1f3      	bne.n	8007a36 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	f102 0314 	add.w	r3, r2, #20
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	3214      	adds	r2, #20
 8007a5e:	e842 3100 	strex	r1, r3, [r2]
 8007a62:	2900      	cmp	r1, #0
 8007a64:	d1f3      	bne.n	8007a4e <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d005      	beq.n	8007a78 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	2300      	movs	r3, #0
 8007a74:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8007a76:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	f102 030c 	add.w	r3, r2, #12
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	320c      	adds	r2, #12
 8007a88:	e842 3100 	strex	r1, r3, [r2]
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d1f3      	bne.n	8007a78 <UART_EndRxTransfer+0x42>
 8007a90:	e7ec      	b.n	8007a6c <UART_EndRxTransfer+0x36>
	...

08007a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a98:	6802      	ldr	r2, [r0, #0]
 8007a9a:	6913      	ldr	r3, [r2, #16]
 8007a9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007aa0:	68c1      	ldr	r1, [r0, #12]
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8007aa6:	6801      	ldr	r1, [r0, #0]
 8007aa8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aaa:	6883      	ldr	r3, [r0, #8]
 8007aac:	6900      	ldr	r0, [r0, #16]
 8007aae:	4303      	orrs	r3, r0
 8007ab0:	6960      	ldr	r0, [r4, #20]
 8007ab2:	4303      	orrs	r3, r0
 8007ab4:	69e0      	ldr	r0, [r4, #28]
 8007ab6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8007ab8:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8007abc:	f022 020c 	bic.w	r2, r2, #12
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	6953      	ldr	r3, [r2, #20]
 8007ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007acc:	69a1      	ldr	r1, [r4, #24]
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8007b90 <UART_SetConfig+0xfc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d006      	beq.n	8007ae8 <UART_SetConfig+0x54>
 8007ada:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d002      	beq.n	8007ae8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ae2:	f7fe f941 	bl	8005d68 <HAL_RCC_GetPCLK1Freq>
 8007ae6:	e001      	b.n	8007aec <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe f94e 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aec:	69e3      	ldr	r3, [r4, #28]
 8007aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af2:	d024      	beq.n	8007b3e <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007af4:	2100      	movs	r1, #0
 8007af6:	1803      	adds	r3, r0, r0
 8007af8:	4149      	adcs	r1, r1
 8007afa:	181b      	adds	r3, r3, r0
 8007afc:	f141 0100 	adc.w	r1, r1, #0
 8007b00:	00c9      	lsls	r1, r1, #3
 8007b02:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	1818      	adds	r0, r3, r0
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007b10:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8007b14:	f141 0100 	adc.w	r1, r1, #0
 8007b18:	f7f8 fbd2 	bl	80002c0 <__aeabi_uldivmod>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <UART_SetConfig+0x100>)
 8007b20:	fba2 4300 	umull	r4, r3, r2, r0
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	2464      	movs	r4, #100	@ 0x64
 8007b28:	fb04 0013 	mls	r0, r4, r3, r0
 8007b2c:	0100      	lsls	r0, r0, #4
 8007b2e:	3032      	adds	r0, #50	@ 0x32
 8007b30:	fba2 2000 	umull	r2, r0, r2, r0
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8007b3a:	608b      	str	r3, [r1, #8]
  }
}
 8007b3c:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	1802      	adds	r2, r0, r0
 8007b42:	eb43 0103 	adc.w	r1, r3, r3
 8007b46:	1812      	adds	r2, r2, r0
 8007b48:	f141 0100 	adc.w	r1, r1, #0
 8007b4c:	00c9      	lsls	r1, r1, #3
 8007b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b52:	00d2      	lsls	r2, r2, #3
 8007b54:	1810      	adds	r0, r2, r0
 8007b56:	f141 0100 	adc.w	r1, r1, #0
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	1892      	adds	r2, r2, r2
 8007b5e:	415b      	adcs	r3, r3
 8007b60:	f7f8 fbae 	bl	80002c0 <__aeabi_uldivmod>
 8007b64:	4a0b      	ldr	r2, [pc, #44]	@ (8007b94 <UART_SetConfig+0x100>)
 8007b66:	fba2 3100 	umull	r3, r1, r2, r0
 8007b6a:	0949      	lsrs	r1, r1, #5
 8007b6c:	2364      	movs	r3, #100	@ 0x64
 8007b6e:	fb03 0311 	mls	r3, r3, r1, r0
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	3332      	adds	r3, #50	@ 0x32
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	6820      	ldr	r0, [r4, #0]
 8007b7c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8007b80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b8a:	4413      	add	r3, r2
 8007b8c:	6083      	str	r3, [r0, #8]
 8007b8e:	e7d5      	b.n	8007b3c <UART_SetConfig+0xa8>
 8007b90:	40011000 	.word	0x40011000
 8007b94:	51eb851f 	.word	0x51eb851f

08007b98 <UART_WaitOnFlagUntilTimeout>:
{
 8007b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	4616      	mov	r6, r2
 8007ba4:	4699      	mov	r9, r3
 8007ba6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bac:	681c      	ldr	r4, [r3, #0]
 8007bae:	ea35 0404 	bics.w	r4, r5, r4
 8007bb2:	bf0c      	ite	eq
 8007bb4:	2401      	moveq	r4, #1
 8007bb6:	2400      	movne	r4, #0
 8007bb8:	42b4      	cmp	r4, r6
 8007bba:	d128      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8007bbc:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007bc0:	d0f4      	beq.n	8007bac <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fc fc1d 	bl	8004400 <HAL_GetTick>
 8007bc6:	eba0 0009 	sub.w	r0, r0, r9
 8007bca:	42b8      	cmp	r0, r7
 8007bcc:	d823      	bhi.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x7e>
 8007bce:	b327      	cbz	r7, 8007c1a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	f012 0f04 	tst.w	r2, #4
 8007bda:	d0e5      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x10>
 8007bdc:	2d80      	cmp	r5, #128	@ 0x80
 8007bde:	d0e3      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x10>
 8007be0:	2d40      	cmp	r5, #64	@ 0x40
 8007be2:	d0e1      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	f012 0f08 	tst.w	r2, #8
 8007bea:	d0dd      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007bec:	2400      	movs	r4, #0
 8007bee:	9401      	str	r4, [sp, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	9201      	str	r2, [sp, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	f7ff ff1b 	bl	8007a36 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c00:	2308      	movs	r3, #8
 8007c02:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8007c06:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	e000      	b.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8007c0e:	2000      	movs	r0, #0
}
 8007c10:	b003      	add	sp, #12
 8007c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007c16:	2003      	movs	r0, #3
 8007c18:	e7fa      	b.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x78>
 8007c1a:	2003      	movs	r0, #3
 8007c1c:	e7f8      	b.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x78>

08007c1e <HAL_UART_Init>:
  if (huart == NULL)
 8007c1e:	b360      	cbz	r0, 8007c7a <HAL_UART_Init+0x5c>
{
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c24:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007c28:	b313      	cbz	r3, 8007c70 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8007c2a:	2324      	movs	r3, #36	@ 0x24
 8007c2c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	68d3      	ldr	r3, [r2, #12]
 8007c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c38:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7ff ff2a 	bl	8007a94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	6913      	ldr	r3, [r2, #16]
 8007c44:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007c48:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	6953      	ldr	r3, [r2, #20]
 8007c4e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007c52:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007c54:	6822      	ldr	r2, [r4, #0]
 8007c56:	68d3      	ldr	r3, [r2, #12]
 8007c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c5c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5e:	2000      	movs	r0, #0
 8007c60:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c62:	2320      	movs	r3, #32
 8007c64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c6c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8007c6e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007c70:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8007c74:	f7fc fa5c 	bl	8004130 <HAL_UART_MspInit>
 8007c78:	e7d7      	b.n	8007c2a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007c7a:	2001      	movs	r0, #1
}
 8007c7c:	4770      	bx	lr

08007c7e <HAL_UART_Transmit>:
{
 8007c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007c86:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d15c      	bne.n	8007d4a <HAL_UART_Transmit+0xcc>
 8007c90:	4604      	mov	r4, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007c96:	2900      	cmp	r1, #0
 8007c98:	d05b      	beq.n	8007d52 <HAL_UART_Transmit+0xd4>
 8007c9a:	b90a      	cbnz	r2, 8007ca0 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	e055      	b.n	8007d4c <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ca4:	2321      	movs	r3, #33	@ 0x21
 8007ca6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8007caa:	f7fc fba9 	bl	8004400 <HAL_GetTick>
 8007cae:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8007cb0:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007cb4:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cbe:	d009      	beq.n	8007cd4 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8007cc0:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8007cc4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	b373      	cbz	r3, 8007d28 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cca:	f04f 0900 	mov.w	r9, #0
 8007cce:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8007cd2:	e019      	b.n	8007d08 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b113      	cbz	r3, 8007cde <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8007cd8:	f04f 0a00 	mov.w	sl, #0
 8007cdc:	e7f2      	b.n	8007cc4 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8007cde:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	e7ef      	b.n	8007cc4 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8007cea:	2003      	movs	r0, #3
 8007cec:	e02e      	b.n	8007d4c <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007cfa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007cfc:	3a01      	subs	r2, #1
 8007cfe:	b292      	uxth	r2, r2
 8007d00:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d02:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	b17b      	cbz	r3, 8007d28 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d08:	9600      	str	r6, [sp, #0]
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	464a      	mov	r2, r9
 8007d0e:	4641      	mov	r1, r8
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff ff41 	bl	8007b98 <UART_WaitOnFlagUntilTimeout>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d1e4      	bne.n	8007ce4 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	d0e7      	beq.n	8007cee <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007d24:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d26:	e7e8      	b.n	8007cfa <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d28:	9600      	str	r6, [sp, #0]
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2140      	movs	r1, #64	@ 0x40
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff ff31 	bl	8007b98 <UART_WaitOnFlagUntilTimeout>
 8007d36:	b918      	cbnz	r0, 8007d40 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8007d3e:	e005      	b.n	8007d4c <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8007d40:	2320      	movs	r3, #32
 8007d42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8007d46:	2003      	movs	r0, #3
 8007d48:	e000      	b.n	8007d4c <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8007d4a:	2002      	movs	r0, #2
}
 8007d4c:	b002      	add	sp, #8
 8007d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7fa      	b.n	8007d4c <HAL_UART_Transmit+0xce>

08007d56 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007d56:	b084      	sub	sp, #16
 8007d58:	f10d 0c04 	add.w	ip, sp, #4
 8007d5c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d60:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8007d62:	460b      	mov	r3, r1
 8007d64:	9902      	ldr	r1, [sp, #8]
 8007d66:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8007d68:	9903      	ldr	r1, [sp, #12]
 8007d6a:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8007d70:	9905      	ldr	r1, [sp, #20]
 8007d72:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007d74:	9906      	ldr	r1, [sp, #24]
 8007d76:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d78:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8007d7c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007d80:	4313      	orrs	r3, r2
 8007d82:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8007d84:	2000      	movs	r0, #0
 8007d86:	b004      	add	sp, #16
 8007d88:	4770      	bx	lr

08007d8a <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d8a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8007d8e:	4770      	bx	lr

08007d90 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007d90:	680b      	ldr	r3, [r1, #0]
 8007d92:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8007d96:	2000      	movs	r0, #0
 8007d98:	4770      	bx	lr

08007d9a <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8007d9e:	2000      	movs	r0, #0
 8007da0:	4770      	bx	lr

08007da2 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007da2:	6800      	ldr	r0, [r0, #0]
}
 8007da4:	f000 0003 	and.w	r0, r0, #3
 8007da8:	4770      	bx	lr

08007daa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007daa:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007dac:	680b      	ldr	r3, [r1, #0]
 8007dae:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007db0:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007db2:	684b      	ldr	r3, [r1, #4]
 8007db4:	688c      	ldr	r4, [r1, #8]
 8007db6:	4323      	orrs	r3, r4
                       Command->Response         |\
 8007db8:	68cc      	ldr	r4, [r1, #12]
 8007dba:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8007dbc:	6909      	ldr	r1, [r1, #16]
 8007dbe:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007dc0:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 8007dc4:	f022 020f 	bic.w	r2, r2, #15
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007dd4:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8007dd6:	5840      	ldr	r0, [r0, r1]
}  
 8007dd8:	4770      	bx	lr

08007dda <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007dda:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007ddc:	680b      	ldr	r3, [r1, #0]
 8007dde:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007de0:	684b      	ldr	r3, [r1, #4]
 8007de2:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007de4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007de6:	688b      	ldr	r3, [r1, #8]
 8007de8:	68cc      	ldr	r4, [r1, #12]
 8007dea:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8007dec:	690c      	ldr	r4, [r1, #16]
 8007dee:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8007df0:	6949      	ldr	r1, [r1, #20]
 8007df2:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007df4:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007e04:	b510      	push	{r4, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e0e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007e10:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e18:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e1a:	a901      	add	r1, sp, #4
 8007e1c:	f7ff ffc5 	bl	8007daa <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e20:	4b0c      	ldr	r3, [pc, #48]	@ (8007e54 <SDMMC_CmdGoIdleState+0x50>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0c      	ldr	r2, [pc, #48]	@ (8007e58 <SDMMC_CmdGoIdleState+0x54>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	0a5b      	lsrs	r3, r3, #9
 8007e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e30:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d007      	beq.n	8007e4c <SDMMC_CmdGoIdleState+0x48>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007e3c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007e3e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8007e42:	d0f7      	beq.n	8007e34 <SDMMC_CmdGoIdleState+0x30>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e44:	23c5      	movs	r3, #197	@ 0xc5
 8007e46:	63a3      	str	r3, [r4, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e001      	b.n	8007e50 <SDMMC_CmdGoIdleState+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8007e4c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007e50:	b006      	add	sp, #24
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	20000008 	.word	0x20000008
 8007e58:	10624dd3 	.word	0x10624dd3

08007e5c <SDMMC_GetCmdResp1>:
{
 8007e5c:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e5e:	4b54      	ldr	r3, [pc, #336]	@ (8007fb0 <SDMMC_GetCmdResp1+0x154>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4854      	ldr	r0, [pc, #336]	@ (8007fb4 <SDMMC_GetCmdResp1+0x158>)
 8007e64:	fba0 0303 	umull	r0, r3, r0, r3
 8007e68:	0a5b      	lsrs	r3, r3, #9
 8007e6a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8007e6e:	1e53      	subs	r3, r2, #1
 8007e70:	b932      	cbnz	r2, 8007e80 <SDMMC_GetCmdResp1+0x24>
      return SDMMC_ERROR_TIMEOUT;
 8007e72:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007e76:	4770      	bx	lr
    if (count-- == 0U)
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d063      	beq.n	8007f48 <SDMMC_GetCmdResp1+0xec>
    sta_reg = SDIOx->STA;
 8007e80:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e84:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8007e88:	d0f6      	beq.n	8007e78 <SDMMC_GetCmdResp1+0x1c>
 8007e8a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007e8e:	d1f3      	bne.n	8007e78 <SDMMC_GetCmdResp1+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e90:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8007e94:	f013 0f04 	tst.w	r3, #4
 8007e98:	d108      	bne.n	8007eac <SDMMC_GetCmdResp1+0x50>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e9a:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8007e9e:	f010 0001 	ands.w	r0, r0, #1
 8007ea2:	d007      	beq.n	8007eb4 <SDMMC_GetCmdResp1+0x58>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007eaa:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007eac:	2004      	movs	r0, #4
 8007eae:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eb2:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007eb4:	23c5      	movs	r3, #197	@ 0xc5
 8007eb6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8007eba:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d001      	beq.n	8007ec8 <SDMMC_GetCmdResp1+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	4770      	bx	lr
  return (*(__IO uint32_t *) tmp);
 8007ec8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007ecc:	483a      	ldr	r0, [pc, #232]	@ (8007fb8 <SDMMC_GetCmdResp1+0x15c>)
 8007ece:	4018      	ands	r0, r3
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d06c      	beq.n	8007fae <SDMMC_GetCmdResp1+0x152>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	db3a      	blt.n	8007f4e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007edc:	d13a      	bne.n	8007f54 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ede:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007ee2:	d139      	bne.n	8007f58 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ee4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007ee8:	d138      	bne.n	8007f5c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007eea:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007eee:	d138      	bne.n	8007f62 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007ef0:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8007ef4:	d138      	bne.n	8007f68 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007ef6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007efa:	d138      	bne.n	8007f6e <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007efc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007f00:	d138      	bne.n	8007f74 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007f02:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007f06:	d138      	bne.n	8007f7a <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007f08:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8007f0c:	d138      	bne.n	8007f80 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007f0e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007f12:	d138      	bne.n	8007f86 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007f14:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007f18:	d138      	bne.n	8007f8c <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007f1a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007f1e:	d138      	bne.n	8007f92 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007f20:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007f24:	d138      	bne.n	8007f98 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007f26:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007f2a:	d138      	bne.n	8007f9e <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007f2c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007f30:	d138      	bne.n	8007fa4 <SDMMC_GetCmdResp1+0x148>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007f32:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007f36:	d138      	bne.n	8007faa <SDMMC_GetCmdResp1+0x14e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f38:	f013 0f08 	tst.w	r3, #8
 8007f3c:	bf0c      	ite	eq
 8007f3e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8007f42:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8007f46:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007f48:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007f4c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007f4e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8007f52:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007f54:	2040      	movs	r0, #64	@ 0x40
 8007f56:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007f58:	2080      	movs	r0, #128	@ 0x80
 8007f5a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007f5c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007f60:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007f62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007f66:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007f68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007f6c:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007f6e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007f72:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007f78:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f7a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007f7e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007f80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007f84:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8007f86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007f8a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007f8c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8007f90:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007f92:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8007f96:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007f98:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007f9c:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007f9e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007fa2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007fa4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007fa8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8007faa:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8007fae:	4770      	bx	lr
 8007fb0:	20000008 	.word	0x20000008
 8007fb4:	10624dd3 	.word	0x10624dd3
 8007fb8:	fdffe008 	.word	0xfdffe008

08007fbc <SDMMC_CmdBlockLength>:
{
 8007fbc:	b530      	push	{r4, r5, lr}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007fc2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007fc4:	2510      	movs	r5, #16
 8007fc6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fc8:	2340      	movs	r3, #64	@ 0x40
 8007fca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fd4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fd6:	a901      	add	r1, sp, #4
 8007fd8:	f7ff fee7 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff ff3a 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 8007fe8:	b007      	add	sp, #28
 8007fea:	bd30      	pop	{r4, r5, pc}

08007fec <SDMMC_CmdReadSingleBlock>:
{
 8007fec:	b530      	push	{r4, r5, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ff2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007ff4:	2511      	movs	r5, #17
 8007ff6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff8:	2340      	movs	r3, #64	@ 0x40
 8007ffa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008004:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008006:	a901      	add	r1, sp, #4
 8008008:	f7ff fecf 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800800c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008010:	4629      	mov	r1, r5
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff ff22 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 8008018:	b007      	add	sp, #28
 800801a:	bd30      	pop	{r4, r5, pc}

0800801c <SDMMC_CmdReadMultiBlock>:
{
 800801c:	b530      	push	{r4, r5, lr}
 800801e:	b087      	sub	sp, #28
 8008020:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008022:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008024:	2512      	movs	r5, #18
 8008026:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800802c:	2300      	movs	r3, #0
 800802e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008034:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008036:	a901      	add	r1, sp, #4
 8008038:	f7ff feb7 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800803c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008040:	4629      	mov	r1, r5
 8008042:	4620      	mov	r0, r4
 8008044:	f7ff ff0a 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 8008048:	b007      	add	sp, #28
 800804a:	bd30      	pop	{r4, r5, pc}

0800804c <SDMMC_CmdWriteSingleBlock>:
{
 800804c:	b530      	push	{r4, r5, lr}
 800804e:	b087      	sub	sp, #28
 8008050:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008052:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008054:	2518      	movs	r5, #24
 8008056:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008058:	2340      	movs	r3, #64	@ 0x40
 800805a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800805c:	2300      	movs	r3, #0
 800805e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008064:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008066:	a901      	add	r1, sp, #4
 8008068:	f7ff fe9f 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800806c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fef2 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 8008078:	b007      	add	sp, #28
 800807a:	bd30      	pop	{r4, r5, pc}

0800807c <SDMMC_CmdWriteMultiBlock>:
{
 800807c:	b530      	push	{r4, r5, lr}
 800807e:	b087      	sub	sp, #28
 8008080:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008082:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008084:	2519      	movs	r5, #25
 8008086:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008088:	2340      	movs	r3, #64	@ 0x40
 800808a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800808c:	2300      	movs	r3, #0
 800808e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008094:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008096:	a901      	add	r1, sp, #4
 8008098:	f7ff fe87 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800809c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a0:	4629      	mov	r1, r5
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff feda 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 80080a8:	b007      	add	sp, #28
 80080aa:	bd30      	pop	{r4, r5, pc}

080080ac <SDMMC_CmdStopTransfer>:
{
 80080ac:	b530      	push	{r4, r5, lr}
 80080ae:	b087      	sub	sp, #28
 80080b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80080b6:	250c      	movs	r5, #12
 80080b8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ba:	2240      	movs	r2, #64	@ 0x40
 80080bc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080c4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080c6:	a901      	add	r1, sp, #4
 80080c8:	f7ff fe6f 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80080cc:	4a03      	ldr	r2, [pc, #12]	@ (80080dc <SDMMC_CmdStopTransfer+0x30>)
 80080ce:	4629      	mov	r1, r5
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff fec3 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 80080d6:	b007      	add	sp, #28
 80080d8:	bd30      	pop	{r4, r5, pc}
 80080da:	bf00      	nop
 80080dc:	05f5e100 	.word	0x05f5e100

080080e0 <SDMMC_CmdSelDesel>:
{
 80080e0:	b530      	push	{r4, r5, lr}
 80080e2:	b087      	sub	sp, #28
 80080e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80080e6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80080e8:	2507      	movs	r5, #7
 80080ea:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ec:	2340      	movs	r3, #64	@ 0x40
 80080ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080f0:	2300      	movs	r3, #0
 80080f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080f8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080fa:	a901      	add	r1, sp, #4
 80080fc:	f7ff fe55 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008104:	4629      	mov	r1, r5
 8008106:	4620      	mov	r0, r4
 8008108:	f7ff fea8 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 800810c:	b007      	add	sp, #28
 800810e:	bd30      	pop	{r4, r5, pc}

08008110 <SDMMC_CmdAppCommand>:
{
 8008110:	b530      	push	{r4, r5, lr}
 8008112:	b087      	sub	sp, #28
 8008114:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008116:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008118:	2537      	movs	r5, #55	@ 0x37
 800811a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800811c:	2340      	movs	r3, #64	@ 0x40
 800811e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008120:	2300      	movs	r3, #0
 8008122:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008128:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800812a:	a901      	add	r1, sp, #4
 800812c:	f7ff fe3d 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008134:	4629      	mov	r1, r5
 8008136:	4620      	mov	r0, r4
 8008138:	f7ff fe90 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 800813c:	b007      	add	sp, #28
 800813e:	bd30      	pop	{r4, r5, pc}

08008140 <SDMMC_CmdBusWidth>:
{
 8008140:	b530      	push	{r4, r5, lr}
 8008142:	b087      	sub	sp, #28
 8008144:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008146:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008148:	2506      	movs	r5, #6
 800814a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800814c:	2340      	movs	r3, #64	@ 0x40
 800814e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008150:	2300      	movs	r3, #0
 8008152:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008158:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815a:	a901      	add	r1, sp, #4
 800815c:	f7ff fe25 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008164:	4629      	mov	r1, r5
 8008166:	4620      	mov	r0, r4
 8008168:	f7ff fe78 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 800816c:	b007      	add	sp, #28
 800816e:	bd30      	pop	{r4, r5, pc}

08008170 <SDMMC_CmdSendSCR>:
{
 8008170:	b530      	push	{r4, r5, lr}
 8008172:	b087      	sub	sp, #28
 8008174:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800817a:	2533      	movs	r5, #51	@ 0x33
 800817c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800817e:	2240      	movs	r2, #64	@ 0x40
 8008180:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008182:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008188:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800818a:	a901      	add	r1, sp, #4
 800818c:	f7ff fe0d 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	f7ff fe60 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 800819c:	b007      	add	sp, #28
 800819e:	bd30      	pop	{r4, r5, pc}

080081a0 <SDMMC_CmdSendStatus>:
{
 80081a0:	b530      	push	{r4, r5, lr}
 80081a2:	b087      	sub	sp, #28
 80081a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80081a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80081a8:	250d      	movs	r5, #13
 80081aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ac:	2340      	movs	r3, #64	@ 0x40
 80081ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b0:	2300      	movs	r3, #0
 80081b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081b8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ba:	a901      	add	r1, sp, #4
 80081bc:	f7ff fdf5 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80081c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081c4:	4629      	mov	r1, r5
 80081c6:	4620      	mov	r0, r4
 80081c8:	f7ff fe48 	bl	8007e5c <SDMMC_GetCmdResp1>
}
 80081cc:	b007      	add	sp, #28
 80081ce:	bd30      	pop	{r4, r5, pc}

080081d0 <SDMMC_GetCmdResp2>:
{
 80081d0:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081d2:	4b16      	ldr	r3, [pc, #88]	@ (800822c <SDMMC_GetCmdResp2+0x5c>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <SDMMC_GetCmdResp2+0x60>)
 80081d8:	fba3 3202 	umull	r3, r2, r3, r2
 80081dc:	0a52      	lsrs	r2, r2, #9
 80081de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80081e2:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80081e6:	1e53      	subs	r3, r2, #1
 80081e8:	b932      	cbnz	r2, 80081f8 <SDMMC_GetCmdResp2+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80081ea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80081ee:	4770      	bx	lr
    if (count-- == 0U)
 80081f0:	3b01      	subs	r3, #1
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f6:	d015      	beq.n	8008224 <SDMMC_GetCmdResp2+0x54>
    sta_reg = SDIOx->STA;
 80081f8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081fa:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80081fe:	d0f7      	beq.n	80081f0 <SDMMC_GetCmdResp2+0x20>
 8008200:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008204:	d1f4      	bne.n	80081f0 <SDMMC_GetCmdResp2+0x20>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008206:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008208:	f013 0f04 	tst.w	r3, #4
 800820c:	d107      	bne.n	800821e <SDMMC_GetCmdResp2+0x4e>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800820e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008210:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008214:	bf14      	ite	ne
 8008216:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008218:	23c5      	moveq	r3, #197	@ 0xc5
 800821a:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800821c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800821e:	2004      	movs	r0, #4
 8008220:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008222:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008224:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20000008 	.word	0x20000008
 8008230:	10624dd3 	.word	0x10624dd3

08008234 <SDMMC_CmdSendCID>:
{
 8008234:	b510      	push	{r4, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800823e:	2202      	movs	r2, #2
 8008240:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008242:	22c0      	movs	r2, #192	@ 0xc0
 8008244:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008246:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800824c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800824e:	a901      	add	r1, sp, #4
 8008250:	f7ff fdab 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008254:	4620      	mov	r0, r4
 8008256:	f7ff ffbb 	bl	80081d0 <SDMMC_GetCmdResp2>
}
 800825a:	b006      	add	sp, #24
 800825c:	bd10      	pop	{r4, pc}

0800825e <SDMMC_CmdSendCSD>:
{
 800825e:	b510      	push	{r4, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8008264:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008266:	2309      	movs	r3, #9
 8008268:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800826a:	23c0      	movs	r3, #192	@ 0xc0
 800826c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800826e:	2300      	movs	r3, #0
 8008270:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008276:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008278:	a901      	add	r1, sp, #4
 800827a:	f7ff fd96 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff ffa6 	bl	80081d0 <SDMMC_GetCmdResp2>
}
 8008284:	b006      	add	sp, #24
 8008286:	bd10      	pop	{r4, pc}

08008288 <SDMMC_GetCmdResp3>:
{
 8008288:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800828a:	4b13      	ldr	r3, [pc, #76]	@ (80082d8 <SDMMC_GetCmdResp3+0x50>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b13      	ldr	r3, [pc, #76]	@ (80082dc <SDMMC_GetCmdResp3+0x54>)
 8008290:	fba3 3202 	umull	r3, r2, r3, r2
 8008294:	0a52      	lsrs	r2, r2, #9
 8008296:	f241 3388 	movw	r3, #5000	@ 0x1388
 800829a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800829e:	1e53      	subs	r3, r2, #1
 80082a0:	b932      	cbnz	r2, 80082b0 <SDMMC_GetCmdResp3+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80082a2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80082a6:	4770      	bx	lr
    if (count-- == 0U)
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d00f      	beq.n	80082d0 <SDMMC_GetCmdResp3+0x48>
    sta_reg = SDIOx->STA;
 80082b0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082b2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80082b6:	d0f7      	beq.n	80082a8 <SDMMC_GetCmdResp3+0x20>
 80082b8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80082bc:	d1f4      	bne.n	80082a8 <SDMMC_GetCmdResp3+0x20>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082be:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80082c0:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082c4:	bf19      	ittee	ne
 80082c6:	2004      	movne	r0, #4
 80082c8:	6388      	strne	r0, [r1, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082ca:	23c5      	moveq	r3, #197	@ 0xc5
 80082cc:	638b      	streq	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80082ce:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80082d0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000008 	.word	0x20000008
 80082dc:	10624dd3 	.word	0x10624dd3

080082e0 <SDMMC_CmdAppOperCommand>:
{
 80082e0:	b510      	push	{r4, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80082e6:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80082ea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80082ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80082f0:	2329      	movs	r3, #41	@ 0x29
 80082f2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082f4:	2340      	movs	r3, #64	@ 0x40
 80082f6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082f8:	2300      	movs	r3, #0
 80082fa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008300:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008302:	a901      	add	r1, sp, #4
 8008304:	f7ff fd51 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008308:	4620      	mov	r0, r4
 800830a:	f7ff ffbd 	bl	8008288 <SDMMC_GetCmdResp3>
}
 800830e:	b006      	add	sp, #24
 8008310:	bd10      	pop	{r4, pc}
	...

08008314 <SDMMC_GetCmdResp6>:
{
 8008314:	4684      	mov	ip, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008316:	4b2a      	ldr	r3, [pc, #168]	@ (80083c0 <SDMMC_GetCmdResp6+0xac>)
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	4b2a      	ldr	r3, [pc, #168]	@ (80083c4 <SDMMC_GetCmdResp6+0xb0>)
 800831c:	fba3 3000 	umull	r3, r0, r3, r0
 8008320:	0a40      	lsrs	r0, r0, #9
 8008322:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008326:	fb03 f000 	mul.w	r0, r3, r0
    if (count-- == 0U)
 800832a:	1e43      	subs	r3, r0, #1
 800832c:	b3e0      	cbz	r0, 80083a8 <SDMMC_GetCmdResp6+0x94>
{
 800832e:	b410      	push	{r4}
 8008330:	e003      	b.n	800833a <SDMMC_GetCmdResp6+0x26>
    if (count-- == 0U)
 8008332:	3b01      	subs	r3, #1
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d039      	beq.n	80083ae <SDMMC_GetCmdResp6+0x9a>
    sta_reg = SDIOx->STA;
 800833a:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800833e:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8008342:	d0f6      	beq.n	8008332 <SDMMC_GetCmdResp6+0x1e>
 8008344:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8008348:	d1f3      	bne.n	8008332 <SDMMC_GetCmdResp6+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800834a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800834e:	f013 0f04 	tst.w	r3, #4
 8008352:	d108      	bne.n	8008366 <SDMMC_GetCmdResp6+0x52>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008354:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8008358:	f010 0001 	ands.w	r0, r0, #1
 800835c:	d007      	beq.n	800836e <SDMMC_GetCmdResp6+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800835e:	2301      	movs	r3, #1
 8008360:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008364:	e025      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008366:	2004      	movs	r0, #4
 8008368:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800836c:	e021      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
  return (uint8_t)(SDIOx->RESPCMD);
 800836e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008372:	b2db      	uxtb	r3, r3
 8008374:	4299      	cmp	r1, r3
 8008376:	d001      	beq.n	800837c <SDMMC_GetCmdResp6+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008378:	2001      	movs	r0, #1
 800837a:	e01a      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800837c:	23c5      	movs	r3, #197	@ 0xc5
 800837e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8008382:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008386:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800838a:	d00a      	beq.n	80083a2 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800838c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8008390:	d112      	bne.n	80083b8 <SDMMC_GetCmdResp6+0xa4>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008392:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008396:	bf0c      	ite	eq
 8008398:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800839c:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 80083a0:	e007      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80083a6:	e004      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
      return SDMMC_ERROR_TIMEOUT;
 80083a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80083ac:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80083ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80083b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80083bc:	e7f9      	b.n	80083b2 <SDMMC_GetCmdResp6+0x9e>
 80083be:	bf00      	nop
 80083c0:	20000008 	.word	0x20000008
 80083c4:	10624dd3 	.word	0x10624dd3

080083c8 <SDMMC_CmdSetRelAdd>:
{
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	4604      	mov	r4, r0
 80083ce:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80083d4:	2603      	movs	r6, #3
 80083d6:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083d8:	2240      	movs	r2, #64	@ 0x40
 80083da:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083dc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083e2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083e4:	a901      	add	r1, sp, #4
 80083e6:	f7ff fce0 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80083ea:	462a      	mov	r2, r5
 80083ec:	4631      	mov	r1, r6
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff ff90 	bl	8008314 <SDMMC_GetCmdResp6>
}
 80083f4:	b006      	add	sp, #24
 80083f6:	bd70      	pop	{r4, r5, r6, pc}

080083f8 <SDMMC_GetCmdResp7>:
{
 80083f8:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008464 <SDMMC_GetCmdResp7+0x6c>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <SDMMC_GetCmdResp7+0x70>)
 8008400:	fba3 3202 	umull	r3, r2, r3, r2
 8008404:	0a52      	lsrs	r2, r2, #9
 8008406:	f241 3388 	movw	r3, #5000	@ 0x1388
 800840a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800840e:	1e53      	subs	r3, r2, #1
 8008410:	b932      	cbnz	r2, 8008420 <SDMMC_GetCmdResp7+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8008412:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008416:	4770      	bx	lr
    if (count-- == 0U)
 8008418:	3b01      	subs	r3, #1
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d01b      	beq.n	8008458 <SDMMC_GetCmdResp7+0x60>
    sta_reg = SDIOx->STA;
 8008420:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008422:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8008426:	d0f7      	beq.n	8008418 <SDMMC_GetCmdResp7+0x20>
 8008428:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800842c:	d1f4      	bne.n	8008418 <SDMMC_GetCmdResp7+0x20>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800842e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008430:	f013 0f04 	tst.w	r3, #4
 8008434:	d10a      	bne.n	800844c <SDMMC_GetCmdResp7+0x54>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008436:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008438:	f010 0001 	ands.w	r0, r0, #1
 800843c:	d109      	bne.n	8008452 <SDMMC_GetCmdResp7+0x5a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800843e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008440:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8008444:	d00b      	beq.n	800845e <SDMMC_GetCmdResp7+0x66>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008446:	2340      	movs	r3, #64	@ 0x40
 8008448:	638b      	str	r3, [r1, #56]	@ 0x38
 800844a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800844c:	2004      	movs	r0, #4
 800844e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008450:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008452:	2301      	movs	r3, #1
 8008454:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008456:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008458:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800845c:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800845e:	4618      	mov	r0, r3
}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000008 	.word	0x20000008
 8008468:	10624dd3 	.word	0x10624dd3

0800846c <SDMMC_CmdOperCond>:
{
 800846c:	b510      	push	{r4, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008472:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008476:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008478:	2308      	movs	r3, #8
 800847a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800847c:	2340      	movs	r3, #64	@ 0x40
 800847e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008480:	2300      	movs	r3, #0
 8008482:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008488:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800848a:	a901      	add	r1, sp, #4
 800848c:	f7ff fc8d 	bl	8007daa <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff ffb1 	bl	80083f8 <SDMMC_GetCmdResp7>
}
 8008496:	b006      	add	sp, #24
 8008498:	bd10      	pop	{r4, pc}

0800849a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800849a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	3301      	adds	r3, #1
 80084a4:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084ac:	d815      	bhi.n	80084da <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084ae:	6903      	ldr	r3, [r0, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	daf5      	bge.n	80084a0 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084b8:	6903      	ldr	r3, [r0, #16]
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80084c0:	9b01      	ldr	r3, [sp, #4]
 80084c2:	3301      	adds	r3, #1
 80084c4:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084cc:	d808      	bhi.n	80084e0 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084ce:	6903      	ldr	r3, [r0, #16]
 80084d0:	f013 0f01 	tst.w	r3, #1
 80084d4:	d1f4      	bne.n	80084c0 <USB_CoreReset+0x26>

  return HAL_OK;
 80084d6:	2000      	movs	r0, #0
 80084d8:	e000      	b.n	80084dc <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80084da:	2003      	movs	r0, #3
}
 80084dc:	b002      	add	sp, #8
 80084de:	4770      	bx	lr
      return HAL_TIMEOUT;
 80084e0:	2003      	movs	r0, #3
 80084e2:	e7fb      	b.n	80084dc <USB_CoreReset+0x42>

080084e4 <USB_CoreInit>:
{
 80084e4:	b084      	sub	sp, #16
 80084e6:	b510      	push	{r4, lr}
 80084e8:	4604      	mov	r4, r0
 80084ea:	a803      	add	r0, sp, #12
 80084ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084f0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d121      	bne.n	800853c <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084fe:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008500:	68e3      	ldr	r3, [r4, #12]
 8008502:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800850a:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800850c:	68e3      	ldr	r3, [r4, #12]
 800850e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008512:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8008514:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d00a      	beq.n	8008532 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff ffbc 	bl	800849a <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8008522:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d01c      	beq.n	8008564 <USB_CoreInit+0x80>
}
 800852a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852e:	b004      	add	sp, #16
 8008530:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008538:	60e3      	str	r3, [r4, #12]
 800853a:	e7ef      	b.n	800851c <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800853c:	68e3      	ldr	r3, [r4, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8008544:	4620      	mov	r0, r4
 8008546:	f7ff ffa8 	bl	800849a <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800854a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800854e:	b923      	cbnz	r3, 800855a <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008550:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008556:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008558:	e7e3      	b.n	8008522 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800855a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800855c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008560:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008562:	e7de      	b.n	8008522 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008564:	68a3      	ldr	r3, [r4, #8]
 8008566:	f043 0306 	orr.w	r3, r3, #6
 800856a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	f043 0320 	orr.w	r3, r3, #32
 8008572:	60a3      	str	r3, [r4, #8]
 8008574:	e7d9      	b.n	800852a <USB_CoreInit+0x46>
	...

08008578 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8008578:	2a02      	cmp	r2, #2
 800857a:	d00a      	beq.n	8008592 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800857c:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800857e:	68c3      	ldr	r3, [r0, #12]
 8008580:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8008584:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008586:	68c3      	ldr	r3, [r0, #12]
 8008588:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800858c:	60c3      	str	r3, [r0, #12]
}
 800858e:	2000      	movs	r0, #0
 8008590:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008592:	4b23      	ldr	r3, [pc, #140]	@ (8008620 <USB_SetTurnaroundTime+0xa8>)
 8008594:	440b      	add	r3, r1
 8008596:	4a23      	ldr	r2, [pc, #140]	@ (8008624 <USB_SetTurnaroundTime+0xac>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d930      	bls.n	80085fe <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800859c:	4b22      	ldr	r3, [pc, #136]	@ (8008628 <USB_SetTurnaroundTime+0xb0>)
 800859e:	440b      	add	r3, r1
 80085a0:	4a22      	ldr	r2, [pc, #136]	@ (800862c <USB_SetTurnaroundTime+0xb4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d92d      	bls.n	8008602 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085a6:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80085aa:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80085ae:	4a20      	ldr	r2, [pc, #128]	@ (8008630 <USB_SetTurnaroundTime+0xb8>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d928      	bls.n	8008606 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085b4:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80085b8:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80085bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008634 <USB_SetTurnaroundTime+0xbc>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d323      	bcc.n	800860a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <USB_SetTurnaroundTime+0xc0>)
 80085c4:	440b      	add	r3, r1
 80085c6:	4a1d      	ldr	r2, [pc, #116]	@ (800863c <USB_SetTurnaroundTime+0xc4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d920      	bls.n	800860e <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008640 <USB_SetTurnaroundTime+0xc8>)
 80085ce:	440b      	add	r3, r1
 80085d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008644 <USB_SetTurnaroundTime+0xcc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d31d      	bcc.n	8008612 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008648 <USB_SetTurnaroundTime+0xd0>)
 80085d8:	440b      	add	r3, r1
 80085da:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <USB_SetTurnaroundTime+0xd4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d31a      	bcc.n	8008616 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085e0:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80085e4:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80085e8:	4a19      	ldr	r2, [pc, #100]	@ (8008650 <USB_SetTurnaroundTime+0xd8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d315      	bcc.n	800861a <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085ee:	4a19      	ldr	r2, [pc, #100]	@ (8008654 <USB_SetTurnaroundTime+0xdc>)
 80085f0:	440a      	add	r2, r1
      UsbTrd = 0x7U;
 80085f2:	4b19      	ldr	r3, [pc, #100]	@ (8008658 <USB_SetTurnaroundTime+0xe0>)
 80085f4:	429a      	cmp	r2, r3
 80085f6:	bf2c      	ite	cs
 80085f8:	2206      	movcs	r2, #6
 80085fa:	2207      	movcc	r2, #7
 80085fc:	e7bf      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80085fe:	220f      	movs	r2, #15
 8008600:	e7bd      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8008602:	220e      	movs	r2, #14
 8008604:	e7bb      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8008606:	220d      	movs	r2, #13
 8008608:	e7b9      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800860a:	220c      	movs	r2, #12
 800860c:	e7b7      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800860e:	220b      	movs	r2, #11
 8008610:	e7b5      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8008612:	220a      	movs	r2, #10
 8008614:	e7b3      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8008616:	2209      	movs	r2, #9
 8008618:	e7b1      	b.n	800857e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800861a:	2208      	movs	r2, #8
 800861c:	e7af      	b.n	800857e <USB_SetTurnaroundTime+0x6>
 800861e:	bf00      	nop
 8008620:	ff275340 	.word	0xff275340
 8008624:	000c34ff 	.word	0x000c34ff
 8008628:	ff1b1e40 	.word	0xff1b1e40
 800862c:	000f423f 	.word	0x000f423f
 8008630:	00124f7f 	.word	0x00124f7f
 8008634:	0013d620 	.word	0x0013d620
 8008638:	fee5b660 	.word	0xfee5b660
 800863c:	0016e35f 	.word	0x0016e35f
 8008640:	feced300 	.word	0xfeced300
 8008644:	001b7740 	.word	0x001b7740
 8008648:	feb35bc0 	.word	0xfeb35bc0
 800864c:	002191c0 	.word	0x002191c0
 8008650:	00387520 	.word	0x00387520
 8008654:	fe5954e0 	.word	0xfe5954e0
 8008658:	00419ce0 	.word	0x00419ce0

0800865c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800865c:	6883      	ldr	r3, [r0, #8]
 800865e:	f043 0301 	orr.w	r3, r3, #1
 8008662:	6083      	str	r3, [r0, #8]
}
 8008664:	2000      	movs	r0, #0
 8008666:	4770      	bx	lr

08008668 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008668:	6883      	ldr	r3, [r0, #8]
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	6083      	str	r3, [r0, #8]
}
 8008670:	2000      	movs	r0, #0
 8008672:	4770      	bx	lr

08008674 <USB_SetCurrentMode>:
{
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008678:	68c3      	ldr	r3, [r0, #12]
 800867a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800867e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008680:	2901      	cmp	r1, #1
 8008682:	d015      	beq.n	80086b0 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8008684:	bb29      	cbnz	r1, 80086d2 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008686:	68c3      	ldr	r3, [r0, #12]
 8008688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800868c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800868e:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8008690:	260a      	movs	r6, #10
 8008692:	4630      	mov	r0, r6
 8008694:	f7fb feba 	bl	800440c <HAL_Delay>
      ms += 10U;
 8008698:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 800869a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800869c:	f013 0f01 	tst.w	r3, #1
 80086a0:	d001      	beq.n	80086a6 <USB_SetCurrentMode+0x32>
 80086a2:	2cc8      	cmp	r4, #200	@ 0xc8
 80086a4:	d1f5      	bne.n	8008692 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086a6:	2cc8      	cmp	r4, #200	@ 0xc8
 80086a8:	bf14      	ite	ne
 80086aa:	2000      	movne	r0, #0
 80086ac:	2001      	moveq	r0, #1
}
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086b0:	68c3      	ldr	r3, [r0, #12]
 80086b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086b6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80086b8:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80086ba:	260a      	movs	r6, #10
 80086bc:	4630      	mov	r0, r6
 80086be:	f7fb fea5 	bl	800440c <HAL_Delay>
      ms += 10U;
 80086c2:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 80086c4:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086c6:	f013 0f01 	tst.w	r3, #1
 80086ca:	d1ec      	bne.n	80086a6 <USB_SetCurrentMode+0x32>
 80086cc:	2cc8      	cmp	r4, #200	@ 0xc8
 80086ce:	d1f5      	bne.n	80086bc <USB_SetCurrentMode+0x48>
 80086d0:	e7e9      	b.n	80086a6 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 80086d2:	2001      	movs	r0, #1
 80086d4:	e7eb      	b.n	80086ae <USB_SetCurrentMode+0x3a>

080086d6 <USB_FlushTxFifo>:
{
 80086d6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	9301      	str	r3, [sp, #4]
    count++;
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	3301      	adds	r3, #1
 80086e0:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086e8:	d815      	bhi.n	8008716 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ea:	6903      	ldr	r3, [r0, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	daf5      	bge.n	80086dc <USB_FlushTxFifo+0x6>
  count = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086f4:	0189      	lsls	r1, r1, #6
 80086f6:	f041 0120 	orr.w	r1, r1, #32
 80086fa:	6101      	str	r1, [r0, #16]
    count++;
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	3301      	adds	r3, #1
 8008700:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008708:	d808      	bhi.n	800871c <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800870a:	6903      	ldr	r3, [r0, #16]
 800870c:	f013 0f20 	tst.w	r3, #32
 8008710:	d1f4      	bne.n	80086fc <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8008712:	2000      	movs	r0, #0
 8008714:	e000      	b.n	8008718 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8008716:	2003      	movs	r0, #3
}
 8008718:	b002      	add	sp, #8
 800871a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800871c:	2003      	movs	r0, #3
 800871e:	e7fb      	b.n	8008718 <USB_FlushTxFifo+0x42>

08008720 <USB_FlushRxFifo>:
{
 8008720:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	9301      	str	r3, [sp, #4]
    count++;
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	3301      	adds	r3, #1
 800872a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008732:	d813      	bhi.n	800875c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008734:	6903      	ldr	r3, [r0, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	daf5      	bge.n	8008726 <USB_FlushRxFifo+0x6>
  count = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800873e:	2310      	movs	r3, #16
 8008740:	6103      	str	r3, [r0, #16]
    count++;
 8008742:	9b01      	ldr	r3, [sp, #4]
 8008744:	3301      	adds	r3, #1
 8008746:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800874e:	d808      	bhi.n	8008762 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008750:	6903      	ldr	r3, [r0, #16]
 8008752:	f013 0f10 	tst.w	r3, #16
 8008756:	d1f4      	bne.n	8008742 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8008758:	2000      	movs	r0, #0
 800875a:	e000      	b.n	800875e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800875c:	2003      	movs	r0, #3
}
 800875e:	b002      	add	sp, #8
 8008760:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008762:	2003      	movs	r0, #3
 8008764:	e7fb      	b.n	800875e <USB_FlushRxFifo+0x3e>

08008766 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8008766:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800876a:	4319      	orrs	r1, r3
 800876c:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8008770:	2000      	movs	r0, #0
 8008772:	4770      	bx	lr

08008774 <USB_DevInit>:
{
 8008774:	b084      	sub	sp, #16
 8008776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877a:	4604      	mov	r4, r0
 800877c:	a809      	add	r0, sp, #36	@ 0x24
 800877e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008782:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 8008786:	f89d 602e 	ldrb.w	r6, [sp, #46]	@ 0x2e
  for (i = 0U; i < 15U; i++)
 800878a:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 800878c:	4619      	mov	r1, r3
 800878e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8008792:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008796:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8008798:	3301      	adds	r3, #1
 800879a:	2b0f      	cmp	r3, #15
 800879c:	d1f7      	bne.n	800878e <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 800879e:	bb06      	cbnz	r6, 80087e2 <USB_DevInit+0x6e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087a0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80087a4:	f043 0302 	orr.w	r3, r3, #2
 80087a8:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087b6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80087ba:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087c2:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ca:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d115      	bne.n	80087fe <USB_DevInit+0x8a>
    if (cfg.speed == USBD_HS_SPEED)
 80087d2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80087d6:	b96b      	cbnz	r3, 80087f4 <USB_DevInit+0x80>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087d8:	2100      	movs	r1, #0
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff ffc3 	bl	8008766 <USB_SetDevSpeed>
 80087e0:	e011      	b.n	8008806 <USB_DevInit+0x92>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087e8:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80087ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80087f2:	e7e7      	b.n	80087c4 <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087f4:	2101      	movs	r1, #1
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff ffb5 	bl	8008766 <USB_SetDevSpeed>
 80087fc:	e003      	b.n	8008806 <USB_DevInit+0x92>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087fe:	2103      	movs	r1, #3
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff ffb0 	bl	8008766 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008806:	2110      	movs	r1, #16
 8008808:	4620      	mov	r0, r4
 800880a:	f7ff ff64 	bl	80086d6 <USB_FlushTxFifo>
 800880e:	4607      	mov	r7, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008810:	4620      	mov	r0, r4
 8008812:	f7ff ff85 	bl	8008720 <USB_FlushRxFifo>
 8008816:	4307      	orrs	r7, r0
 8008818:	f017 0fff 	tst.w	r7, #255	@ 0xff
 800881c:	bf14      	ite	ne
 800881e:	f04f 0e01 	movne.w	lr, #1
 8008822:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8008826:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 800882a:	2300      	movs	r3, #0
 800882c:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008830:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008834:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008838:	2d00      	cmp	r5, #0
 800883a:	d03b      	beq.n	80088b4 <USB_DevInit+0x140>
 800883c:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 8008840:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8008842:	4610      	mov	r0, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008844:	f04f 4a90 	mov.w	sl, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008848:	f04f 6900 	mov.w	r9, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800884c:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8008850:	e009      	b.n	8008866 <USB_DevInit+0xf2>
      if (i == 0U)
 8008852:	b972      	cbnz	r2, 8008872 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008854:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008858:	6108      	str	r0, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800885a:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800885e:	3201      	adds	r2, #1
 8008860:	3320      	adds	r3, #32
 8008862:	42aa      	cmp	r2, r5
 8008864:	d008      	beq.n	8008878 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008866:	4619      	mov	r1, r3
 8008868:	681f      	ldr	r7, [r3, #0]
 800886a:	2f00      	cmp	r7, #0
 800886c:	dbf1      	blt.n	8008852 <USB_DevInit+0xde>
      USBx_INEP(i)->DIEPCTL = 0U;
 800886e:	6018      	str	r0, [r3, #0]
 8008870:	e7f2      	b.n	8008858 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008872:	f8c3 a000 	str.w	sl, [r3]
 8008876:	e7ef      	b.n	8008858 <USB_DevInit+0xe4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008878:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 800887c:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800887e:	4610      	mov	r0, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008880:	f04f 4990 	mov.w	r9, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008884:	f04f 6a00 	mov.w	sl, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008888:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 800888c:	e009      	b.n	80088a2 <USB_DevInit+0x12e>
      if (i == 0U)
 800888e:	b172      	cbz	r2, 80088ae <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008890:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008894:	6108      	str	r0, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008896:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800889a:	3201      	adds	r2, #1
 800889c:	3320      	adds	r3, #32
 800889e:	42aa      	cmp	r2, r5
 80088a0:	d008      	beq.n	80088b4 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a2:	4619      	mov	r1, r3
 80088a4:	681f      	ldr	r7, [r3, #0]
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	dbf1      	blt.n	800888e <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088aa:	6018      	str	r0, [r3, #0]
 80088ac:	e7f2      	b.n	8008894 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088ae:	f8c3 a000 	str.w	sl, [r3]
 80088b2:	e7ef      	b.n	8008894 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088b4:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80088b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088bc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088c4:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80088c8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80088ca:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80088ce:	b91b      	cbnz	r3, 80088d8 <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088d0:	69a3      	ldr	r3, [r4, #24]
 80088d2:	f043 0310 	orr.w	r3, r3, #16
 80088d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088d8:	69a2      	ldr	r2, [r4, #24]
 80088da:	4b0c      	ldr	r3, [pc, #48]	@ (800890c <USB_DevInit+0x198>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80088e0:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80088e4:	b11b      	cbz	r3, 80088ee <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088e6:	69a3      	ldr	r3, [r4, #24]
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80088ee:	2e01      	cmp	r6, #1
 80088f0:	d004      	beq.n	80088fc <USB_DevInit+0x188>
}
 80088f2:	4670      	mov	r0, lr
 80088f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	b004      	add	sp, #16
 80088fa:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088fc:	69a3      	ldr	r3, [r4, #24]
 80088fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008902:	f043 0304 	orr.w	r3, r3, #4
 8008906:	61a3      	str	r3, [r4, #24]
 8008908:	e7f3      	b.n	80088f2 <USB_DevInit+0x17e>
 800890a:	bf00      	nop
 800890c:	803c3800 	.word	0x803c3800

08008910 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008910:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008914:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008918:	f013 0f06 	tst.w	r3, #6
 800891c:	d005      	beq.n	800892a <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 800891e:	f013 0f02 	tst.w	r3, #2
 8008922:	bf0c      	ite	eq
 8008924:	200f      	moveq	r0, #15
 8008926:	2002      	movne	r0, #2
 8008928:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800892a:	2000      	movs	r0, #0
}
 800892c:	4770      	bx	lr

0800892e <USB_ActivateEndpoint>:
{
 800892e:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8008930:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8008932:	784b      	ldrb	r3, [r1, #1]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d022      	beq.n	800897e <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008938:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
 800893c:	f002 0e0f 	and.w	lr, r2, #15
 8008940:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008944:	fa03 f30e 	lsl.w	r3, r3, lr
 8008948:	4323      	orrs	r3, r4
 800894a:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800894e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8008952:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008956:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800895a:	d10e      	bne.n	800897a <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800895c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8008960:	688b      	ldr	r3, [r1, #8]
 8008962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008966:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8008968:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800896a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800896e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008976:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800897a:	2000      	movs	r0, #0
 800897c:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800897e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	@ 0x81c
 8008982:	f002 0c0f 	and.w	ip, r2, #15
 8008986:	fa03 f30c 	lsl.w	r3, r3, ip
 800898a:	432b      	orrs	r3, r5
 800898c:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008990:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8008994:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008998:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800899c:	d1ed      	bne.n	800897a <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800899e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
 80089a2:	688b      	ldr	r3, [r1, #8]
 80089a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089a8:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089aa:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089ac:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80089b0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80089b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80089c0:	e7db      	b.n	800897a <USB_ActivateEndpoint+0x4c>
	...

080089c4 <USB_DeactivateEndpoint>:
{
 80089c4:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80089c6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80089c8:	784a      	ldrb	r2, [r1, #1]
 80089ca:	2a01      	cmp	r2, #1
 80089cc:	d026      	beq.n	8008a1c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089ce:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80089d2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	db50      	blt.n	8008a7c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089da:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80089de:	780a      	ldrb	r2, [r1, #0]
 80089e0:	f002 020f 	and.w	r2, r2, #15
 80089e4:	f04f 0c01 	mov.w	ip, #1
 80089e8:	fa0c f202 	lsl.w	r2, ip, r2
 80089ec:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80089f0:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80089f8:	7809      	ldrb	r1, [r1, #0]
 80089fa:	f001 010f 	and.w	r1, r1, #15
 80089fe:	fa0c fc01 	lsl.w	ip, ip, r1
 8008a02:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8008a06:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a0a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8008a0e:	4a22      	ldr	r2, [pc, #136]	@ (8008a98 <USB_DeactivateEndpoint+0xd4>)
 8008a10:	400a      	ands	r2, r1
 8008a12:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8008a16:	2000      	movs	r0, #0
 8008a18:	bc30      	pop	{r4, r5}
 8008a1a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a1c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8008a20:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	db1c      	blt.n	8008a62 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a28:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8008a2c:	780a      	ldrb	r2, [r1, #0]
 8008a2e:	f002 020f 	and.w	r2, r2, #15
 8008a32:	2401      	movs	r4, #1
 8008a34:	fa04 f202 	lsl.w	r2, r4, r2
 8008a38:	ea25 0202 	bic.w	r2, r5, r2
 8008a3c:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a40:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008a44:	7809      	ldrb	r1, [r1, #0]
 8008a46:	f001 010f 	and.w	r1, r1, #15
 8008a4a:	408c      	lsls	r4, r1
 8008a4c:	ea22 0204 	bic.w	r2, r2, r4
 8008a50:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a54:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8008a58:	4a10      	ldr	r2, [pc, #64]	@ (8008a9c <USB_DeactivateEndpoint+0xd8>)
 8008a5a:	400a      	ands	r2, r1
 8008a5c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8008a60:	e7d9      	b.n	8008a16 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a62:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008a66:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008a6a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008a6e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008a72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008a76:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8008a7a:	e7d5      	b.n	8008a28 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a7c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008a80:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008a84:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a88:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008a8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008a90:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8008a94:	e7a1      	b.n	80089da <USB_DeactivateEndpoint+0x16>
 8008a96:	bf00      	nop
 8008a98:	eff37800 	.word	0xeff37800
 8008a9c:	ec337800 	.word	0xec337800

08008aa0 <USB_EPStopXfer>:
{
 8008aa0:	b410      	push	{r4}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	4603      	mov	r3, r0
  __IO uint32_t count = 0U;
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	9201      	str	r2, [sp, #4]
  if (ep->is_in == 1U)
 8008aaa:	7848      	ldrb	r0, [r1, #1]
 8008aac:	2801      	cmp	r0, #1
 8008aae:	d00b      	beq.n	8008ac8 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ab0:	f503 6030 	add.w	r0, r3, #2816	@ 0xb00
 8008ab4:	780b      	ldrb	r3, [r1, #0]
 8008ab6:	015b      	lsls	r3, r3, #5
 8008ab8:	581a      	ldr	r2, [r3, r0]
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	db26      	blt.n	8008b0c <USB_EPStopXfer+0x6c>
  HAL_StatusTypeDef ret = HAL_OK;
 8008abe:	2000      	movs	r0, #0
}
 8008ac0:	b003      	add	sp, #12
 8008ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac6:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008acc:	780a      	ldrb	r2, [r1, #0]
 8008ace:	0152      	lsls	r2, r2, #5
 8008ad0:	58d4      	ldr	r4, [r2, r3]
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	db01      	blt.n	8008ada <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e7f2      	b.n	8008ac0 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ada:	58d4      	ldr	r4, [r2, r3]
 8008adc:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8008ae0:	50d4      	str	r4, [r2, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ae2:	780a      	ldrb	r2, [r1, #0]
 8008ae4:	0152      	lsls	r2, r2, #5
 8008ae6:	58d4      	ldr	r4, [r2, r3]
 8008ae8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8008aec:	50d4      	str	r4, [r2, r3]
        if (count > 10000U)
 8008aee:	f242 7c10 	movw	ip, #10000	@ 0x2710
        count++;
 8008af2:	9a01      	ldr	r2, [sp, #4]
 8008af4:	3201      	adds	r2, #1
 8008af6:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8008af8:	9a01      	ldr	r2, [sp, #4]
 8008afa:	4562      	cmp	r2, ip
 8008afc:	d8e0      	bhi.n	8008ac0 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008afe:	780a      	ldrb	r2, [r1, #0]
 8008b00:	0152      	lsls	r2, r2, #5
 8008b02:	58d2      	ldr	r2, [r2, r3]
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	dbf4      	blt.n	8008af2 <USB_EPStopXfer+0x52>
  HAL_StatusTypeDef ret = HAL_OK;
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7d9      	b.n	8008ac0 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b0c:	581a      	ldr	r2, [r3, r0]
 8008b0e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008b12:	501a      	str	r2, [r3, r0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b14:	780b      	ldrb	r3, [r1, #0]
 8008b16:	015b      	lsls	r3, r3, #5
 8008b18:	581a      	ldr	r2, [r3, r0]
 8008b1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008b1e:	501a      	str	r2, [r3, r0]
        if (count > 10000U)
 8008b20:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	3301      	adds	r3, #1
 8008b28:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d806      	bhi.n	8008b3e <USB_EPStopXfer+0x9e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b30:	780b      	ldrb	r3, [r1, #0]
 8008b32:	015b      	lsls	r3, r3, #5
 8008b34:	581b      	ldr	r3, [r3, r0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dbf4      	blt.n	8008b24 <USB_EPStopXfer+0x84>
  HAL_StatusTypeDef ret = HAL_OK;
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e7c0      	b.n	8008ac0 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8008b3e:	2001      	movs	r0, #1
 8008b40:	e7be      	b.n	8008ac0 <USB_EPStopXfer+0x20>

08008b42 <USB_WritePacket>:
{
 8008b42:	b410      	push	{r4}
 8008b44:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8008b48:	b974      	cbnz	r4, 8008b68 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b4a:	3303      	adds	r3, #3
 8008b4c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d909      	bls.n	8008b68 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b54:	3201      	adds	r2, #1
 8008b56:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8008b5a:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8008b60:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8008b62:	3301      	adds	r3, #1
 8008b64:	459c      	cmp	ip, r3
 8008b66:	d8f9      	bhi.n	8008b5c <USB_WritePacket+0x1a>
}
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <USB_EPStartXfer>:
{
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8008b74:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8008b76:	784b      	ldrb	r3, [r1, #1]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d02f      	beq.n	8008bdc <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b7c:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8008b80:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8008b84:	691d      	ldr	r5, [r3, #16]
 8008b86:	0ced      	lsrs	r5, r5, #19
 8008b88:	04ed      	lsls	r5, r5, #19
 8008b8a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b8c:	691d      	ldr	r5, [r3, #16]
 8008b8e:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008b92:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008b96:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8008b98:	2c00      	cmp	r4, #0
 8008b9a:	f040 80c4 	bne.w	8008d26 <USB_EPStartXfer+0x1b6>
      if (ep->xfer_len > 0U)
 8008b9e:	690c      	ldr	r4, [r1, #16]
 8008ba0:	b10c      	cbz	r4, 8008ba6 <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 8008ba2:	688c      	ldr	r4, [r1, #8]
 8008ba4:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8008ba6:	688c      	ldr	r4, [r1, #8]
 8008ba8:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008baa:	691d      	ldr	r5, [r3, #16]
 8008bac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008bb0:	432c      	orrs	r4, r5
 8008bb2:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bb4:	691c      	ldr	r4, [r3, #16]
 8008bb6:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008bba:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8008bbc:	2a01      	cmp	r2, #1
 8008bbe:	f000 80d5 	beq.w	8008d6c <USB_EPStartXfer+0x1fc>
    if (ep->type == EP_TYPE_ISOC)
 8008bc2:	790b      	ldrb	r3, [r1, #4]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	f000 80d7 	beq.w	8008d78 <USB_EPStartXfer+0x208>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bca:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008bce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bd2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	b003      	add	sp, #12
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8008bdc:	690b      	ldr	r3, [r1, #16]
 8008bde:	bb83      	cbnz	r3, 8008c42 <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008be0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008be4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008be8:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008bec:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008bf0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bf4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008bf8:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008bfc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c00:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008c04:	0ced      	lsrs	r5, r5, #19
 8008c06:	04ed      	lsls	r5, r5, #19
 8008c08:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8008c0c:	2a01      	cmp	r2, #1
 8008c0e:	d054      	beq.n	8008cba <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c10:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008c14:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008c18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c1c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8008c20:	790b      	ldrb	r3, [r1, #4]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d06b      	beq.n	8008cfe <USB_EPStartXfer+0x18e>
        if (ep->xfer_len > 0U)
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0d4      	beq.n	8008bd6 <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c2c:	f8d0 4834 	ldr.w	r4, [r0, #2100]	@ 0x834
 8008c30:	780a      	ldrb	r2, [r1, #0]
 8008c32:	f002 020f 	and.w	r2, r2, #15
 8008c36:	2301      	movs	r3, #1
 8008c38:	4093      	lsls	r3, r2
 8008c3a:	4323      	orrs	r3, r4
 8008c3c:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8008c40:	e7c9      	b.n	8008bd6 <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c42:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4a:	691d      	ldr	r5, [r3, #16]
 8008c4c:	0ced      	lsrs	r5, r5, #19
 8008c4e:	04ed      	lsls	r5, r5, #19
 8008c50:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c52:	691d      	ldr	r5, [r3, #16]
 8008c54:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008c58:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008c5c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8008c5e:	b97c      	cbnz	r4, 8008c80 <USB_EPStartXfer+0x110>
        if (ep->xfer_len > ep->maxpacket)
 8008c60:	688d      	ldr	r5, [r1, #8]
 8008c62:	690e      	ldr	r6, [r1, #16]
 8008c64:	42ae      	cmp	r6, r5
          ep->xfer_len = ep->maxpacket;
 8008c66:	bf88      	it	hi
 8008c68:	610d      	strhi	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c6a:	691d      	ldr	r5, [r3, #16]
 8008c6c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008c70:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c72:	691e      	ldr	r6, [r3, #16]
 8008c74:	690d      	ldr	r5, [r1, #16]
 8008c76:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8008c7a:	4335      	orrs	r5, r6
 8008c7c:	611d      	str	r5, [r3, #16]
 8008c7e:	e7c5      	b.n	8008c0c <USB_EPStartXfer+0x9c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c80:	688e      	ldr	r6, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008c82:	691f      	ldr	r7, [r3, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c84:	690d      	ldr	r5, [r1, #16]
 8008c86:	4435      	add	r5, r6
 8008c88:	3d01      	subs	r5, #1
 8008c8a:	fbb5 f5f6 	udiv	r5, r5, r6
 8008c8e:	fa1f fc85 	uxth.w	ip, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008c92:	4e40      	ldr	r6, [pc, #256]	@ (8008d94 <USB_EPStartXfer+0x224>)
 8008c94:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8008c98:	433d      	orrs	r5, r7
 8008c9a:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8008c9c:	790d      	ldrb	r5, [r1, #4]
 8008c9e:	2d01      	cmp	r5, #1
 8008ca0:	d1e7      	bne.n	8008c72 <USB_EPStartXfer+0x102>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ca2:	691d      	ldr	r5, [r3, #16]
 8008ca4:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8008ca8:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008caa:	691e      	ldr	r6, [r3, #16]
 8008cac:	ea4f 754c 	mov.w	r5, ip, lsl #29
 8008cb0:	f005 45c0 	and.w	r5, r5, #1610612736	@ 0x60000000
 8008cb4:	4335      	orrs	r5, r6
 8008cb6:	611d      	str	r5, [r3, #16]
 8008cb8:	e7db      	b.n	8008c72 <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 8008cba:	69cb      	ldr	r3, [r1, #28]
 8008cbc:	b11b      	cbz	r3, 8008cc6 <USB_EPStartXfer+0x156>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008cbe:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008cc2:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8008cc6:	790b      	ldrb	r3, [r1, #4]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d008      	beq.n	8008cde <USB_EPStartXfer+0x16e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ccc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008cd0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008cd4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cd8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8008cdc:	e77b      	b.n	8008bd6 <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cde:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008ce2:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ce6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008cea:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8008cee:	bf0c      	ite	eq
 8008cf0:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cf4:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008cf8:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8008cfc:	e7e6      	b.n	8008ccc <USB_EPStartXfer+0x15c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cfe:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008d02:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d06:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008d0a:	bf0c      	ite	eq
 8008d0c:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d10:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008d14:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d18:	9200      	str	r2, [sp, #0]
 8008d1a:	8a0b      	ldrh	r3, [r1, #16]
 8008d1c:	780a      	ldrb	r2, [r1, #0]
 8008d1e:	68c9      	ldr	r1, [r1, #12]
 8008d20:	f7ff ff0f 	bl	8008b42 <USB_WritePacket>
 8008d24:	e757      	b.n	8008bd6 <USB_EPStartXfer+0x66>
      if (ep->xfer_len == 0U)
 8008d26:	690c      	ldr	r4, [r1, #16]
 8008d28:	b954      	cbnz	r4, 8008d40 <USB_EPStartXfer+0x1d0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d2a:	691d      	ldr	r5, [r3, #16]
 8008d2c:	688c      	ldr	r4, [r1, #8]
 8008d2e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008d32:	432c      	orrs	r4, r5
 8008d34:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d36:	691c      	ldr	r4, [r3, #16]
 8008d38:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008d3c:	611c      	str	r4, [r3, #16]
 8008d3e:	e73d      	b.n	8008bbc <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d40:	688d      	ldr	r5, [r1, #8]
 8008d42:	442c      	add	r4, r5
 8008d44:	3c01      	subs	r4, #1
 8008d46:	fbb4 f4f5 	udiv	r4, r4, r5
 8008d4a:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d4c:	fb04 f505 	mul.w	r5, r4, r5
 8008d50:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d52:	691e      	ldr	r6, [r3, #16]
 8008d54:	4d0f      	ldr	r5, [pc, #60]	@ (8008d94 <USB_EPStartXfer+0x224>)
 8008d56:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 8008d5a:	4334      	orrs	r4, r6
 8008d5c:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d5e:	691d      	ldr	r5, [r3, #16]
 8008d60:	6a0c      	ldr	r4, [r1, #32]
 8008d62:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008d66:	432c      	orrs	r4, r5
 8008d68:	611c      	str	r4, [r3, #16]
 8008d6a:	e727      	b.n	8008bbc <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d6c:	68ca      	ldr	r2, [r1, #12]
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	f43f af27 	beq.w	8008bc2 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d74:	615a      	str	r2, [r3, #20]
 8008d76:	e724      	b.n	8008bc2 <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d78:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008d7c:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d80:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008d84:	bf0c      	ite	eq
 8008d86:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d8a:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8008d92:	e71a      	b.n	8008bca <USB_EPStartXfer+0x5a>
 8008d94:	1ff80000 	.word	0x1ff80000

08008d98 <USB_ReadPacket>:
{
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8008d9c:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8008da0:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8008da4:	d01a      	beq.n	8008ddc <USB_ReadPacket+0x44>
  uint8_t *pDest = dest;
 8008da6:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8008da8:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008daa:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 8008dae:	6822      	ldr	r2, [r4, #0]
 8008db0:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8008db4:	3301      	adds	r3, #1
 8008db6:	459e      	cmp	lr, r3
 8008db8:	d1f9      	bne.n	8008dae <USB_ReadPacket+0x16>
    pDest++;
 8008dba:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 8008dbe:	b165      	cbz	r5, 8008dda <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008dc0:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8008dc4:	6834      	ldr	r4, [r6, #0]
 8008dc6:	1941      	adds	r1, r0, r5
 8008dc8:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dca:	fa24 f203 	lsr.w	r2, r4, r3
 8008dce:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	4288      	cmp	r0, r1
 8008dd6:	d1f8      	bne.n	8008dca <USB_ReadPacket+0x32>
      pDest++;
 8008dd8:	4608      	mov	r0, r1
}
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8008ddc:	4608      	mov	r0, r1
 8008dde:	e7ee      	b.n	8008dbe <USB_ReadPacket+0x26>

08008de0 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008de0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008de2:	784a      	ldrb	r2, [r1, #1]
 8008de4:	2a01      	cmp	r2, #1
 8008de6:	d014      	beq.n	8008e12 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008de8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008dec:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8008df0:	2a00      	cmp	r2, #0
 8008df2:	db06      	blt.n	8008e02 <USB_EPSetStall+0x22>
 8008df4:	b12b      	cbz	r3, 8008e02 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008df6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008dfa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dfe:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e02:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008e06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e0a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008e0e:	2000      	movs	r0, #0
 8008e10:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008e16:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	db06      	blt.n	8008e2c <USB_EPSetStall+0x4c>
 8008e1e:	b12b      	cbz	r3, 8008e2c <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e20:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008e24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e28:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e2c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e34:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008e38:	e7e9      	b.n	8008e0e <USB_EPSetStall+0x2e>

08008e3a <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008e3a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008e3c:	784a      	ldrb	r2, [r1, #1]
 8008e3e:	2a01      	cmp	r2, #1
 8008e40:	d00e      	beq.n	8008e60 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e42:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008e46:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008e4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e4e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e52:	790b      	ldrb	r3, [r1, #4]
 8008e54:	3b02      	subs	r3, #2
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d915      	bls.n	8008e88 <USB_EPClearStall+0x4e>
}
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e60:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008e64:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008e68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e6c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e70:	790b      	ldrb	r3, [r1, #4]
 8008e72:	3b02      	subs	r3, #2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d8f0      	bhi.n	8008e5c <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e7a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e82:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008e86:	e7e9      	b.n	8008e5c <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e90:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008e94:	e7e2      	b.n	8008e5c <USB_EPClearStall+0x22>

08008e96 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e96:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008e9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008e9e:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ea2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008ea6:	0109      	lsls	r1, r1, #4
 8008ea8:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8008eac:	4319      	orrs	r1, r3
 8008eae:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	4770      	bx	lr

08008eb6 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eb6:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ec2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008ec6:	f023 0302 	bic.w	r3, r3, #2
 8008eca:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008ece:	2000      	movs	r0, #0
 8008ed0:	4770      	bx	lr

08008ed2 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ed2:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008ed6:	f023 0303 	bic.w	r3, r3, #3
 8008eda:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ede:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008ee2:	f043 0302 	orr.w	r3, r3, #2
 8008ee6:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008eea:	2000      	movs	r0, #0
 8008eec:	4770      	bx	lr

08008eee <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008eee:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008ef0:	6980      	ldr	r0, [r0, #24]
}
 8008ef2:	4010      	ands	r0, r2
 8008ef4:	4770      	bx	lr

08008ef6 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008ef6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8008efa:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008efe:	69c0      	ldr	r0, [r0, #28]
 8008f00:	4018      	ands	r0, r3
}
 8008f02:	0c00      	lsrs	r0, r0, #16
 8008f04:	4770      	bx	lr

08008f06 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008f06:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8008f0a:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f0e:	69c0      	ldr	r0, [r0, #28]
 8008f10:	4018      	ands	r0, r3
}
 8008f12:	b280      	uxth	r0, r0
 8008f14:	4770      	bx	lr

08008f16 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f16:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008f1a:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f1e:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8008f22:	6940      	ldr	r0, [r0, #20]
}
 8008f24:	4010      	ands	r0, r2
 8008f26:	4770      	bx	lr

08008f28 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8008f28:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f2c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f30:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8008f34:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8008f38:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008f3a:	f001 010f 	and.w	r1, r1, #15
 8008f3e:	40cb      	lsrs	r3, r1
 8008f40:	01db      	lsls	r3, r3, #7
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4313      	orrs	r3, r2
}
 8008f46:	4018      	ands	r0, r3
 8008f48:	4770      	bx	lr

08008f4a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008f4a:	6940      	ldr	r0, [r0, #20]
}
 8008f4c:	f000 0001 	and.w	r0, r0, #1
 8008f50:	4770      	bx	lr

08008f52 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008f56:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f62:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f6a:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008f6e:	2000      	movs	r0, #0
 8008f70:	4770      	bx	lr
	...

08008f74 <USB_EP0_OutStart>:
{
 8008f74:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008f76:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f78:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <USB_EP0_OutStart+0x5c>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d903      	bls.n	8008f86 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f7e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	db16      	blt.n	8008fb4 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f86:	2400      	movs	r4, #0
 8008f88:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f8c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008f90:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008f94:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f98:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008f9c:	f044 0418 	orr.w	r4, r4, #24
 8008fa0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fa4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008fa8:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8008fac:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8008fb0:	2901      	cmp	r1, #1
 8008fb2:	d003      	beq.n	8008fbc <USB_EP0_OutStart+0x48>
}
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fba:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fbc:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fc0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008fc4:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008fc8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008fcc:	e7f2      	b.n	8008fb4 <USB_EP0_OutStart+0x40>
 8008fce:	bf00      	nop
 8008fd0:	4f54300a 	.word	0x4f54300a

08008fd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fd4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008fd6:	490c      	ldr	r1, [pc, #48]	@ (8009008 <MX_FATFS_Init+0x34>)
 8008fd8:	480c      	ldr	r0, [pc, #48]	@ (800900c <MX_FATFS_Init+0x38>)
 8008fda:	f003 fdb5 	bl	800cb48 <FATFS_LinkDriver>
 8008fde:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <MX_FATFS_Init+0x3c>)
 8008fe0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  if(retSD != FR_OK)
 8008fe2:	b940      	cbnz	r0, 8008ff6 <MX_FATFS_Init+0x22>
  {
  	printf("FATFS_LinkDriver() failed.\n");
  	Error_Handler();
  }

  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4908      	ldr	r1, [pc, #32]	@ (8009008 <MX_FATFS_Init+0x34>)
 8008fe8:	480a      	ldr	r0, [pc, #40]	@ (8009014 <MX_FATFS_Init+0x40>)
 8008fea:	f003 fabb 	bl	800c564 <f_mount>
 8008fee:	4b08      	ldr	r3, [pc, #32]	@ (8009010 <MX_FATFS_Init+0x3c>)
 8008ff0:	7018      	strb	r0, [r3, #0]
  if(retSD != FR_OK)
 8008ff2:	b930      	cbnz	r0, 8009002 <MX_FATFS_Init+0x2e>
  {
  	Error_Handler();
  }
  /* USER CODE END Init */
}
 8008ff4:	bd08      	pop	{r3, pc}
  	printf("FATFS_LinkDriver() failed.\n");
 8008ff6:	4808      	ldr	r0, [pc, #32]	@ (8009018 <MX_FATFS_Init+0x44>)
 8008ff8:	f004 f9c4 	bl	800d384 <puts>
  	Error_Handler();
 8008ffc:	f7fa fca4 	bl	8003948 <Error_Handler>
 8009000:	e7f0      	b.n	8008fe4 <MX_FATFS_Init+0x10>
  	Error_Handler();
 8009002:	f7fa fca1 	bl	8003948 <Error_Handler>
}
 8009006:	e7f5      	b.n	8008ff4 <MX_FATFS_Init+0x20>
 8009008:	2000144c 	.word	0x2000144c
 800900c:	0800f168 	.word	0x0800f168
 8009010:	20001450 	.word	0x20001450
 8009014:	20001218 	.word	0x20001218
 8009018:	0800f14c 	.word	0x0800f14c

0800901c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800901c:	2000      	movs	r0, #0
 800901e:	4770      	bx	lr

08009020 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009020:	b508      	push	{r3, lr}
 8009022:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009024:	460a      	mov	r2, r1
 8009026:	4601      	mov	r1, r0
 8009028:	4803      	ldr	r0, [pc, #12]	@ (8009038 <BSP_SD_ReadBlocks_DMA+0x18>)
 800902a:	f7fd f97d 	bl	8006328 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800902e:	3800      	subs	r0, #0
 8009030:	bf18      	it	ne
 8009032:	2001      	movne	r0, #1
 8009034:	bd08      	pop	{r3, pc}
 8009036:	bf00      	nop
 8009038:	2000116c 	.word	0x2000116c

0800903c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800903c:	b508      	push	{r3, lr}
 800903e:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009040:	460a      	mov	r2, r1
 8009042:	4601      	mov	r1, r0
 8009044:	4803      	ldr	r0, [pc, #12]	@ (8009054 <BSP_SD_WriteBlocks_DMA+0x18>)
 8009046:	f7fd fa0b 	bl	8006460 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800904a:	3800      	subs	r0, #0
 800904c:	bf18      	it	ne
 800904e:	2001      	movne	r0, #1
 8009050:	bd08      	pop	{r3, pc}
 8009052:	bf00      	nop
 8009054:	2000116c 	.word	0x2000116c

08009058 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009058:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800905a:	4803      	ldr	r0, [pc, #12]	@ (8009068 <BSP_SD_GetCardState+0x10>)
 800905c:	f7fd fd96 	bl	8006b8c <HAL_SD_GetCardState>
}
 8009060:	3804      	subs	r0, #4
 8009062:	bf18      	it	ne
 8009064:	2001      	movne	r0, #1
 8009066:	bd08      	pop	{r3, pc}
 8009068:	2000116c 	.word	0x2000116c

0800906c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800906c:	b508      	push	{r3, lr}
 800906e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009070:	4801      	ldr	r0, [pc, #4]	@ (8009078 <BSP_SD_GetCardInfo+0xc>)
 8009072:	f7fd fcd4 	bl	8006a1e <HAL_SD_GetCardInfo>
}
 8009076:	bd08      	pop	{r3, pc}
 8009078:	2000116c 	.word	0x2000116c

0800907c <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800907c:	4770      	bx	lr

0800907e <HAL_SD_AbortCallback>:
{
 800907e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8009080:	f7ff fffc 	bl	800907c <BSP_SD_AbortCallback>
}
 8009084:	bd08      	pop	{r3, pc}

08009086 <HAL_SD_TxCpltCallback>:
{
 8009086:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8009088:	f000 f912 	bl	80092b0 <BSP_SD_WriteCpltCallback>
}
 800908c:	bd08      	pop	{r3, pc}

0800908e <HAL_SD_RxCpltCallback>:
{
 800908e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8009090:	f000 f918 	bl	80092c4 <BSP_SD_ReadCpltCallback>
}
 8009094:	bd08      	pop	{r3, pc}

08009096 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009096:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8009098:	2301      	movs	r3, #1
 800909a:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800909e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80090a2:	b002      	add	sp, #8
 80090a4:	4770      	bx	lr
	...

080090a8 <BSP_SD_Init>:
{
 80090a8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80090aa:	f7ff fff4 	bl	8009096 <BSP_SD_IsDetected>
 80090ae:	2801      	cmp	r0, #1
 80090b0:	d001      	beq.n	80090b6 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 80090b2:	2001      	movs	r0, #1
}
 80090b4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 80090b6:	4807      	ldr	r0, [pc, #28]	@ (80090d4 <BSP_SD_Init+0x2c>)
 80090b8:	f7fd fc96 	bl	80069e8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80090bc:	2800      	cmp	r0, #0
 80090be:	d1f9      	bne.n	80090b4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80090c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80090c4:	4803      	ldr	r0, [pc, #12]	@ (80090d4 <BSP_SD_Init+0x2c>)
 80090c6:	f7fd fcbd 	bl	8006a44 <HAL_SD_ConfigWideBusOperation>
 80090ca:	3800      	subs	r0, #0
 80090cc:	bf18      	it	ne
 80090ce:	2001      	movne	r0, #1
 80090d0:	e7f0      	b.n	80090b4 <BSP_SD_Init+0xc>
 80090d2:	bf00      	nop
 80090d4:	2000116c 	.word	0x2000116c

080090d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80090d8:	b508      	push	{r3, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80090da:	f7ff ffe5 	bl	80090a8 <BSP_SD_Init>
 80090de:	b110      	cbz	r0, 80090e6 <SD_initialize+0xe>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80090e0:	4b09      	ldr	r3, [pc, #36]	@ (8009108 <SD_initialize+0x30>)
 80090e2:	7818      	ldrb	r0, [r3, #0]
}
 80090e4:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 80090e6:	4b08      	ldr	r3, [pc, #32]	@ (8009108 <SD_initialize+0x30>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80090ec:	f7ff ffb4 	bl	8009058 <BSP_SD_GetCardState>
 80090f0:	b920      	cbnz	r0, 80090fc <SD_initialize+0x24>
    Stat &= ~STA_NOINIT;
 80090f2:	4a05      	ldr	r2, [pc, #20]	@ (8009108 <SD_initialize+0x30>)
 80090f4:	7813      	ldrb	r3, [r2, #0]
 80090f6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80090fa:	7013      	strb	r3, [r2, #0]
  return Stat;
 80090fc:	4a02      	ldr	r2, [pc, #8]	@ (8009108 <SD_initialize+0x30>)
 80090fe:	7813      	ldrb	r3, [r2, #0]
 8009100:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8009102:	7013      	strb	r3, [r2, #0]
 8009104:	e7ec      	b.n	80090e0 <SD_initialize+0x8>
 8009106:	bf00      	nop
 8009108:	20000014 	.word	0x20000014

0800910c <SD_CheckStatusWithTimeout>:
{
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 8009110:	f7fb f976 	bl	8004400 <HAL_GetTick>
 8009114:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8009116:	f7fb f973 	bl	8004400 <HAL_GetTick>
 800911a:	1b00      	subs	r0, r0, r4
 800911c:	42a8      	cmp	r0, r5
 800911e:	d205      	bcs.n	800912c <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009120:	f7ff ff9a 	bl	8009058 <BSP_SD_GetCardState>
 8009124:	2800      	cmp	r0, #0
 8009126:	d1f6      	bne.n	8009116 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8009128:	2000      	movs	r0, #0
 800912a:	e001      	b.n	8009130 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009130:	bd38      	pop	{r3, r4, r5, pc}
	...

08009134 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	460c      	mov	r4, r1
 8009138:	4615      	mov	r5, r2
 800913a:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800913c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009140:	f7ff ffe4 	bl	800910c <SD_CheckStatusWithTimeout>
 8009144:	2800      	cmp	r0, #0
 8009146:	db30      	blt.n	80091aa <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009148:	4632      	mov	r2, r6
 800914a:	4629      	mov	r1, r5
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff ff67 	bl	8009020 <BSP_SD_ReadBlocks_DMA>
 8009152:	b108      	cbz	r0, 8009158 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 8009154:	2001      	movs	r0, #1
 8009156:	e029      	b.n	80091ac <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009158:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <SD_read+0x7c>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800915e:	f7fb f94f 	bl	8004400 <HAL_GetTick>
 8009162:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009164:	4d12      	ldr	r5, [pc, #72]	@ (80091b0 <SD_read+0x7c>)
 8009166:	f247 562f 	movw	r6, #29999	@ 0x752f
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b923      	cbnz	r3, 8009178 <SD_read+0x44>
 800916e:	f7fb f947 	bl	8004400 <HAL_GetTick>
 8009172:	1b00      	subs	r0, r0, r4
 8009174:	42b0      	cmp	r0, r6
 8009176:	d9f8      	bls.n	800916a <SD_read+0x36>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009178:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <SD_read+0x7c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	b90b      	cbnz	r3, 8009182 <SD_read+0x4e>
      {
        res = RES_ERROR;
 800917e:	2001      	movs	r0, #1
 8009180:	e014      	b.n	80091ac <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 8009182:	4b0b      	ldr	r3, [pc, #44]	@ (80091b0 <SD_read+0x7c>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009188:	f7fb f93a 	bl	8004400 <HAL_GetTick>
 800918c:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800918e:	f247 552f 	movw	r5, #29999	@ 0x752f
 8009192:	f7fb f935 	bl	8004400 <HAL_GetTick>
 8009196:	1b00      	subs	r0, r0, r4
 8009198:	42a8      	cmp	r0, r5
 800919a:	d804      	bhi.n	80091a6 <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800919c:	f7ff ff5c 	bl	8009058 <BSP_SD_GetCardState>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1f6      	bne.n	8009192 <SD_read+0x5e>
 80091a4:	e002      	b.n	80091ac <SD_read+0x78>
  DRESULT res = RES_ERROR;
 80091a6:	2001      	movs	r0, #1
 80091a8:	e000      	b.n	80091ac <SD_read+0x78>
    return res;
 80091aa:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	bf00      	nop
 80091b0:	20001454 	.word	0x20001454

080091b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	4615      	mov	r5, r2
 80091ba:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80091bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009230 <SD_write+0x7c>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80091c2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80091c6:	f7ff ffa1 	bl	800910c <SD_CheckStatusWithTimeout>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	db2d      	blt.n	800922a <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80091ce:	4632      	mov	r2, r6
 80091d0:	4629      	mov	r1, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff ff32 	bl	800903c <BSP_SD_WriteBlocks_DMA>
 80091d8:	b108      	cbz	r0, 80091de <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 80091da:	2001      	movs	r0, #1
 80091dc:	e026      	b.n	800922c <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80091de:	f7fb f90f 	bl	8004400 <HAL_GetTick>
 80091e2:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80091e4:	4d12      	ldr	r5, [pc, #72]	@ (8009230 <SD_write+0x7c>)
 80091e6:	f247 562f 	movw	r6, #29999	@ 0x752f
 80091ea:	682b      	ldr	r3, [r5, #0]
 80091ec:	b923      	cbnz	r3, 80091f8 <SD_write+0x44>
 80091ee:	f7fb f907 	bl	8004400 <HAL_GetTick>
 80091f2:	1b00      	subs	r0, r0, r4
 80091f4:	42b0      	cmp	r0, r6
 80091f6:	d9f8      	bls.n	80091ea <SD_write+0x36>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80091f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <SD_write+0x7c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	b90b      	cbnz	r3, 8009202 <SD_write+0x4e>
      {
        res = RES_ERROR;
 80091fe:	2001      	movs	r0, #1
 8009200:	e014      	b.n	800922c <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 8009202:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <SD_write+0x7c>)
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009208:	f7fb f8fa 	bl	8004400 <HAL_GetTick>
 800920c:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800920e:	f247 552f 	movw	r5, #29999	@ 0x752f
 8009212:	f7fb f8f5 	bl	8004400 <HAL_GetTick>
 8009216:	1b00      	subs	r0, r0, r4
 8009218:	42a8      	cmp	r0, r5
 800921a:	d804      	bhi.n	8009226 <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800921c:	f7ff ff1c 	bl	8009058 <BSP_SD_GetCardState>
 8009220:	2800      	cmp	r0, #0
 8009222:	d1f6      	bne.n	8009212 <SD_write+0x5e>
 8009224:	e002      	b.n	800922c <SD_write+0x78>
  DRESULT res = RES_ERROR;
 8009226:	2001      	movs	r0, #1
 8009228:	e000      	b.n	800922c <SD_write+0x78>
    return res;
 800922a:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	bf00      	nop
 8009230:	20001458 	.word	0x20001458

08009234 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009234:	b530      	push	{r4, r5, lr}
 8009236:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009238:	4b13      	ldr	r3, [pc, #76]	@ (8009288 <SD_ioctl+0x54>)
 800923a:	7818      	ldrb	r0, [r3, #0]
 800923c:	f010 0401 	ands.w	r4, r0, #1
 8009240:	d11b      	bne.n	800927a <SD_ioctl+0x46>
 8009242:	4615      	mov	r5, r2

  switch (cmd)
 8009244:	2903      	cmp	r1, #3
 8009246:	d81c      	bhi.n	8009282 <SD_ioctl+0x4e>
 8009248:	e8df f001 	tbb	[pc, r1]
 800924c:	100a0402 	.word	0x100a0402
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009250:	460c      	mov	r4, r1
 8009252:	e013      	b.n	800927c <SD_ioctl+0x48>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009254:	4668      	mov	r0, sp
 8009256:	f7ff ff09 	bl	800906c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800925a:	9b06      	ldr	r3, [sp, #24]
 800925c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800925e:	e00d      	b.n	800927c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009260:	4668      	mov	r0, sp
 8009262:	f7ff ff03 	bl	800906c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009266:	9b07      	ldr	r3, [sp, #28]
 8009268:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800926a:	e007      	b.n	800927c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800926c:	4668      	mov	r0, sp
 800926e:	f7ff fefd 	bl	800906c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	0a5b      	lsrs	r3, r3, #9
 8009276:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8009278:	e000      	b.n	800927c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800927a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800927c:	4620      	mov	r0, r4
 800927e:	b009      	add	sp, #36	@ 0x24
 8009280:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 8009282:	2404      	movs	r4, #4
 8009284:	e7fa      	b.n	800927c <SD_ioctl+0x48>
 8009286:	bf00      	nop
 8009288:	20000014 	.word	0x20000014

0800928c <SD_status>:
{
 800928c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800928e:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <SD_status+0x20>)
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8009294:	f7ff fee0 	bl	8009058 <BSP_SD_GetCardState>
 8009298:	b920      	cbnz	r0, 80092a4 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 800929a:	4a04      	ldr	r2, [pc, #16]	@ (80092ac <SD_status+0x20>)
 800929c:	7813      	ldrb	r3, [r2, #0]
 800929e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80092a2:	7013      	strb	r3, [r2, #0]
  return Stat;
 80092a4:	4b01      	ldr	r3, [pc, #4]	@ (80092ac <SD_status+0x20>)
 80092a6:	7818      	ldrb	r0, [r3, #0]
}
 80092a8:	bd08      	pop	{r3, pc}
 80092aa:	bf00      	nop
 80092ac:	20000014 	.word	0x20000014

080092b0 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 80092b0:	2301      	movs	r3, #1
 80092b2:	4a02      	ldr	r2, [pc, #8]	@ (80092bc <BSP_SD_WriteCpltCallback+0xc>)
 80092b4:	6013      	str	r3, [r2, #0]
  usbd_WriteStatus = 1;
 80092b6:	4a02      	ldr	r2, [pc, #8]	@ (80092c0 <BSP_SD_WriteCpltCallback+0x10>)
 80092b8:	6013      	str	r3, [r2, #0]
}
 80092ba:	4770      	bx	lr
 80092bc:	20001458 	.word	0x20001458
 80092c0:	20001978 	.word	0x20001978

080092c4 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80092c4:	2301      	movs	r3, #1
 80092c6:	4a02      	ldr	r2, [pc, #8]	@ (80092d0 <BSP_SD_ReadCpltCallback+0xc>)
 80092c8:	6013      	str	r3, [r2, #0]
  usbd_ReadStatus = 1;
 80092ca:	4a02      	ldr	r2, [pc, #8]	@ (80092d4 <BSP_SD_ReadCpltCallback+0x10>)
 80092cc:	6013      	str	r3, [r2, #0]
}
 80092ce:	4770      	bx	lr
 80092d0:	20001454 	.word	0x20001454
 80092d4:	20001974 	.word	0x20001974

080092d8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80092d8:	230a      	movs	r3, #10
 80092da:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 80092dc:	4800      	ldr	r0, [pc, #0]	@ (80092e0 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 80092de:	4770      	bx	lr
 80092e0:	20000018 	.word	0x20000018

080092e4 <USBD_MSC_Init>:
{
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80092e8:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80092ec:	f003 fec0 	bl	800d070 <USBD_static_malloc>
  if (hmsc == NULL)
 80092f0:	b378      	cbz	r0, 8009352 <USBD_MSC_Init+0x6e>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80092f2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80092f6:	33b0      	adds	r3, #176	@ 0xb0
 80092f8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80092fc:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009300:	7c23      	ldrb	r3, [r4, #16]
 8009302:	bb73      	cbnz	r3, 8009362 <USBD_MSC_Init+0x7e>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009304:	4d27      	ldr	r5, [pc, #156]	@ (80093a4 <USBD_MSC_Init+0xc0>)
 8009306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800930a:	2202      	movs	r2, #2
 800930c:	7829      	ldrb	r1, [r5, #0]
 800930e:	4620      	mov	r0, r4
 8009310:	f003 fec2 	bl	800d098 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009314:	782b      	ldrb	r3, [r5, #0]
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800931e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009322:	2501      	movs	r5, #1
 8009324:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009328:	4e1f      	ldr	r6, [pc, #124]	@ (80093a8 <USBD_MSC_Init+0xc4>)
 800932a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800932e:	2202      	movs	r2, #2
 8009330:	7831      	ldrb	r1, [r6, #0]
 8009332:	4620      	mov	r0, r4
 8009334:	f003 feb0 	bl	800d098 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009338:	7833      	ldrb	r3, [r6, #0]
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009342:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009346:	849d      	strh	r5, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 8009348:	4620      	mov	r0, r4
 800934a:	f000 f9a1 	bl	8009690 <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 800934e:	2000      	movs	r0, #0
}
 8009350:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009352:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009356:	33b0      	adds	r3, #176	@ 0xb0
 8009358:	2200      	movs	r2, #0
 800935a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800935e:	2002      	movs	r0, #2
 8009360:	e7f6      	b.n	8009350 <USBD_MSC_Init+0x6c>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009362:	4d10      	ldr	r5, [pc, #64]	@ (80093a4 <USBD_MSC_Init+0xc0>)
 8009364:	2340      	movs	r3, #64	@ 0x40
 8009366:	2202      	movs	r2, #2
 8009368:	7829      	ldrb	r1, [r5, #0]
 800936a:	4620      	mov	r0, r4
 800936c:	f003 fe94 	bl	800d098 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009370:	782b      	ldrb	r3, [r5, #0]
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800937a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800937e:	2501      	movs	r5, #1
 8009380:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009384:	4e08      	ldr	r6, [pc, #32]	@ (80093a8 <USBD_MSC_Init+0xc4>)
 8009386:	2340      	movs	r3, #64	@ 0x40
 8009388:	2202      	movs	r2, #2
 800938a:	7831      	ldrb	r1, [r6, #0]
 800938c:	4620      	mov	r0, r4
 800938e:	f003 fe83 	bl	800d098 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009392:	7833      	ldrb	r3, [r6, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800939c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093a0:	849d      	strh	r5, [r3, #36]	@ 0x24
 80093a2:	e7d1      	b.n	8009348 <USBD_MSC_Init+0x64>
 80093a4:	20000015 	.word	0x20000015
 80093a8:	20000016 	.word	0x20000016

080093ac <USBD_MSC_DeInit>:
{
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80093b0:	4d19      	ldr	r5, [pc, #100]	@ (8009418 <USBD_MSC_DeInit+0x6c>)
 80093b2:	7829      	ldrb	r1, [r5, #0]
 80093b4:	f003 fe7b 	bl	800d0ae <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80093b8:	782b      	ldrb	r3, [r5, #0]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093c6:	2500      	movs	r5, #0
 80093c8:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80093cc:	4e13      	ldr	r6, [pc, #76]	@ (800941c <USBD_MSC_DeInit+0x70>)
 80093ce:	7831      	ldrb	r1, [r6, #0]
 80093d0:	4620      	mov	r0, r4
 80093d2:	f003 fe6c 	bl	800d0ae <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80093d6:	7833      	ldrb	r3, [r6, #0]
 80093d8:	f003 030f 	and.w	r3, r3, #15
 80093dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093e4:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093e6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80093ea:	33b0      	adds	r3, #176	@ 0xb0
 80093ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80093f0:	b183      	cbz	r3, 8009414 <USBD_MSC_DeInit+0x68>
    MSC_BOT_DeInit(pdev);
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 f99e 	bl	8009734 <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80093f8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80093fc:	33b0      	adds	r3, #176	@ 0xb0
 80093fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009402:	f003 fe39 	bl	800d078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009406:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800940a:	33b0      	adds	r3, #176	@ 0xb0
 800940c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8009410:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8009414:	2000      	movs	r0, #0
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	20000015 	.word	0x20000015
 800941c:	20000016 	.word	0x20000016

08009420 <USBD_MSC_Setup>:
{
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009424:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009426:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800942a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800942e:	f8d3 72c0 	ldr.w	r7, [r3, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 8009432:	2200      	movs	r2, #0
 8009434:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hmsc == NULL)
 8009438:	2f00      	cmp	r7, #0
 800943a:	f000 808e 	beq.w	800955a <USBD_MSC_Setup+0x13a>
 800943e:	4604      	mov	r4, r0
 8009440:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009442:	780a      	ldrb	r2, [r1, #0]
 8009444:	f012 0660 	ands.w	r6, r2, #96	@ 0x60
 8009448:	d036      	beq.n	80094b8 <USBD_MSC_Setup+0x98>
 800944a:	2e20      	cmp	r6, #32
 800944c:	d17e      	bne.n	800954c <USBD_MSC_Setup+0x12c>
      switch (req->bRequest)
 800944e:	7849      	ldrb	r1, [r1, #1]
 8009450:	29fe      	cmp	r1, #254	@ 0xfe
 8009452:	d006      	beq.n	8009462 <USBD_MSC_Setup+0x42>
 8009454:	29ff      	cmp	r1, #255	@ 0xff
 8009456:	d01e      	beq.n	8009496 <USBD_MSC_Setup+0x76>
          USBD_CtlError(pdev, req);
 8009458:	4629      	mov	r1, r5
 800945a:	f001 f9d5 	bl	800a808 <USBD_CtlError>
          ret = USBD_FAIL;
 800945e:	2603      	movs	r6, #3
          break;
 8009460:	e077      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009462:	8869      	ldrh	r1, [r5, #2]
 8009464:	b911      	cbnz	r1, 800946c <USBD_MSC_Setup+0x4c>
 8009466:	88e9      	ldrh	r1, [r5, #6]
 8009468:	2901      	cmp	r1, #1
 800946a:	d005      	beq.n	8009478 <USBD_MSC_Setup+0x58>
            USBD_CtlError(pdev, req);
 800946c:	4629      	mov	r1, r5
 800946e:	4620      	mov	r0, r4
 8009470:	f001 f9ca 	bl	800a808 <USBD_CtlError>
            ret = USBD_FAIL;
 8009474:	2603      	movs	r6, #3
 8009476:	e06c      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009478:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800947c:	d0f6      	beq.n	800946c <USBD_MSC_Setup+0x4c>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800947e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	4798      	blx	r3
 8009486:	6038      	str	r0, [r7, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009488:	2201      	movs	r2, #1
 800948a:	4639      	mov	r1, r7
 800948c:	4620      	mov	r0, r4
 800948e:	f001 fd08 	bl	800aea2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009492:	2600      	movs	r6, #0
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009494:	e05d      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009496:	886b      	ldrh	r3, [r5, #2]
 8009498:	b943      	cbnz	r3, 80094ac <USBD_MSC_Setup+0x8c>
 800949a:	88eb      	ldrh	r3, [r5, #6]
 800949c:	b933      	cbnz	r3, 80094ac <USBD_MSC_Setup+0x8c>
 800949e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80094a2:	d103      	bne.n	80094ac <USBD_MSC_Setup+0x8c>
            MSC_BOT_Reset(pdev);
 80094a4:	f000 f924 	bl	80096f0 <MSC_BOT_Reset>
  USBD_StatusTypeDef ret = USBD_OK;
 80094a8:	2600      	movs	r6, #0
            MSC_BOT_Reset(pdev);
 80094aa:	e052      	b.n	8009552 <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 80094ac:	4629      	mov	r1, r5
 80094ae:	4620      	mov	r0, r4
 80094b0:	f001 f9aa 	bl	800a808 <USBD_CtlError>
            ret = USBD_FAIL;
 80094b4:	2603      	movs	r6, #3
 80094b6:	e04c      	b.n	8009552 <USBD_MSC_Setup+0x132>
      switch (req->bRequest)
 80094b8:	f891 8001 	ldrb.w	r8, [r1, #1]
 80094bc:	f1b8 0f0b 	cmp.w	r8, #11
 80094c0:	d840      	bhi.n	8009544 <USBD_MSC_Setup+0x124>
 80094c2:	e8df f008 	tbb	[pc, r8]
 80094c6:	3006      	.short	0x3006
 80094c8:	3f3f3f3f 	.word	0x3f3f3f3f
 80094cc:	3f3f3f3f 	.word	0x3f3f3f3f
 80094d0:	2416      	.short	0x2416
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d003      	beq.n	80094e4 <USBD_MSC_Setup+0xc4>
            USBD_CtlError(pdev, req);
 80094dc:	f001 f994 	bl	800a808 <USBD_CtlError>
            ret = USBD_FAIL;
 80094e0:	2603      	movs	r6, #3
 80094e2:	e036      	b.n	8009552 <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094e4:	2202      	movs	r2, #2
 80094e6:	f10d 0106 	add.w	r1, sp, #6
 80094ea:	f001 fcda 	bl	800aea2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80094ee:	4646      	mov	r6, r8
 80094f0:	e02f      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d003      	beq.n	8009504 <USBD_MSC_Setup+0xe4>
            USBD_CtlError(pdev, req);
 80094fc:	f001 f984 	bl	800a808 <USBD_CtlError>
            ret = USBD_FAIL;
 8009500:	2603      	movs	r6, #3
 8009502:	e026      	b.n	8009552 <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009504:	2201      	movs	r2, #1
 8009506:	1d39      	adds	r1, r7, #4
 8009508:	f001 fccb 	bl	800aea2 <USBD_CtlSendData>
 800950c:	e021      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b03      	cmp	r3, #3
 8009516:	d102      	bne.n	800951e <USBD_MSC_Setup+0xfe>
            hmsc->interface = (uint8_t)(req->wValue);
 8009518:	788b      	ldrb	r3, [r1, #2]
 800951a:	607b      	str	r3, [r7, #4]
 800951c:	e019      	b.n	8009552 <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800951e:	f001 f973 	bl	800a808 <USBD_CtlError>
            ret = USBD_FAIL;
 8009522:	2603      	movs	r6, #3
 8009524:	e015      	b.n	8009552 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009526:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b03      	cmp	r3, #3
 800952e:	d110      	bne.n	8009552 <USBD_MSC_Setup+0x132>
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009530:	884b      	ldrh	r3, [r1, #2]
 8009532:	b973      	cbnz	r3, 8009552 <USBD_MSC_Setup+0x132>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009534:	7909      	ldrb	r1, [r1, #4]
 8009536:	f003 fdc2 	bl	800d0be <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800953a:	7929      	ldrb	r1, [r5, #4]
 800953c:	4620      	mov	r0, r4
 800953e:	f000 f9d3 	bl	80098e8 <MSC_BOT_CplClrFeature>
 8009542:	e006      	b.n	8009552 <USBD_MSC_Setup+0x132>
          USBD_CtlError(pdev, req);
 8009544:	f001 f960 	bl	800a808 <USBD_CtlError>
          ret = USBD_FAIL;
 8009548:	2603      	movs	r6, #3
          break;
 800954a:	e002      	b.n	8009552 <USBD_MSC_Setup+0x132>
      USBD_CtlError(pdev, req);
 800954c:	f001 f95c 	bl	800a808 <USBD_CtlError>
      ret = USBD_FAIL;
 8009550:	2603      	movs	r6, #3
}
 8009552:	4630      	mov	r0, r6
 8009554:	b002      	add	sp, #8
 8009556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_FAIL;
 800955a:	2603      	movs	r6, #3
 800955c:	e7f9      	b.n	8009552 <USBD_MSC_Setup+0x132>

0800955e <USBD_MSC_DataIn>:
{
 800955e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 8009560:	f000 f918 	bl	8009794 <MSC_BOT_DataIn>
}
 8009564:	2000      	movs	r0, #0
 8009566:	bd08      	pop	{r3, pc}

08009568 <USBD_MSC_DataOut>:
{
 8009568:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 800956a:	f000 f935 	bl	80097d8 <MSC_BOT_DataOut>
}
 800956e:	2000      	movs	r0, #0
 8009570:	bd08      	pop	{r3, pc}
	...

08009574 <USBD_MSC_GetHSCfgDesc>:
{
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009578:	4e0b      	ldr	r6, [pc, #44]	@ (80095a8 <USBD_MSC_GetHSCfgDesc+0x34>)
 800957a:	2181      	movs	r1, #129	@ 0x81
 800957c:	4630      	mov	r0, r6
 800957e:	f001 f919 	bl	800a7b4 <USBD_GetEpDesc>
 8009582:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009584:	2101      	movs	r1, #1
 8009586:	4630      	mov	r0, r6
 8009588:	f001 f914 	bl	800a7b4 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800958c:	b11c      	cbz	r4, 8009596 <USBD_MSC_GetHSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800958e:	2200      	movs	r2, #0
 8009590:	7122      	strb	r2, [r4, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 8009596:	b118      	cbz	r0, 80095a0 <USBD_MSC_GetHSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009598:	2200      	movs	r2, #0
 800959a:	7102      	strb	r2, [r0, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80095a0:	2320      	movs	r3, #32
 80095a2:	802b      	strh	r3, [r5, #0]
}
 80095a4:	4800      	ldr	r0, [pc, #0]	@ (80095a8 <USBD_MSC_GetHSCfgDesc+0x34>)
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	20000024 	.word	0x20000024

080095ac <USBD_MSC_GetFSCfgDesc>:
{
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80095b0:	4e0b      	ldr	r6, [pc, #44]	@ (80095e0 <USBD_MSC_GetFSCfgDesc+0x34>)
 80095b2:	2181      	movs	r1, #129	@ 0x81
 80095b4:	4630      	mov	r0, r6
 80095b6:	f001 f8fd 	bl	800a7b4 <USBD_GetEpDesc>
 80095ba:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80095bc:	2101      	movs	r1, #1
 80095be:	4630      	mov	r0, r6
 80095c0:	f001 f8f8 	bl	800a7b4 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 80095c4:	b11c      	cbz	r4, 80095ce <USBD_MSC_GetFSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80095c6:	2240      	movs	r2, #64	@ 0x40
 80095c8:	7122      	strb	r2, [r4, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 80095ce:	b118      	cbz	r0, 80095d8 <USBD_MSC_GetFSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80095d0:	2240      	movs	r2, #64	@ 0x40
 80095d2:	7102      	strb	r2, [r0, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80095d8:	2320      	movs	r3, #32
 80095da:	802b      	strh	r3, [r5, #0]
}
 80095dc:	4800      	ldr	r0, [pc, #0]	@ (80095e0 <USBD_MSC_GetFSCfgDesc+0x34>)
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	20000024 	.word	0x20000024

080095e4 <USBD_MSC_GetOtherSpeedCfgDesc>:
{
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80095e8:	4e0b      	ldr	r6, [pc, #44]	@ (8009618 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 80095ea:	2181      	movs	r1, #129	@ 0x81
 80095ec:	4630      	mov	r0, r6
 80095ee:	f001 f8e1 	bl	800a7b4 <USBD_GetEpDesc>
 80095f2:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80095f4:	2101      	movs	r1, #1
 80095f6:	4630      	mov	r0, r6
 80095f8:	f001 f8dc 	bl	800a7b4 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 80095fc:	b11c      	cbz	r4, 8009606 <USBD_MSC_GetOtherSpeedCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80095fe:	2240      	movs	r2, #64	@ 0x40
 8009600:	7122      	strb	r2, [r4, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 8009606:	b118      	cbz	r0, 8009610 <USBD_MSC_GetOtherSpeedCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009608:	2240      	movs	r2, #64	@ 0x40
 800960a:	7102      	strb	r2, [r0, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009610:	2320      	movs	r3, #32
 8009612:	802b      	strh	r3, [r5, #0]
}
 8009614:	4800      	ldr	r0, [pc, #0]	@ (8009618 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	20000024 	.word	0x20000024

0800961c <USBD_MSC_RegisterStorage>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
  if (fops == NULL)
 800961c:	b139      	cbz	r1, 800962e <USBD_MSC_RegisterStorage+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800961e:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009622:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009626:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4

  return (uint8_t)USBD_OK;
 800962a:	2000      	movs	r0, #0
 800962c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800962e:	2003      	movs	r0, #3
}
 8009630:	4770      	bx	lr
	...

08009634 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009634:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009636:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800963a:	33b0      	adds	r3, #176	@ 0xb0
 800963c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009640:	b185      	cbz	r5, 8009664 <MSC_BOT_Abort+0x30>
 8009642:	4604      	mov	r4, r0
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009644:	f895 321c 	ldrb.w	r3, [r5, #540]	@ 0x21c
 8009648:	b923      	cbnz	r3, 8009654 <MSC_BOT_Abort+0x20>
 800964a:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800964e:	b10b      	cbz	r3, 8009654 <MSC_BOT_Abort+0x20>
      (hmsc->cbw.dDataLength != 0U) &&
 8009650:	7a6b      	ldrb	r3, [r5, #9]
 8009652:	b143      	cbz	r3, 8009666 <MSC_BOT_Abort+0x32>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009654:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <MSC_BOT_Abort+0x54>)
 8009656:	7819      	ldrb	r1, [r3, #0]
 8009658:	4620      	mov	r0, r4
 800965a:	f003 fd38 	bl	800d0ce <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800965e:	7a6b      	ldrb	r3, [r5, #9]
 8009660:	2b02      	cmp	r3, #2
 8009662:	d005      	beq.n	8009670 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
}
 8009664:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <MSC_BOT_Abort+0x58>)
 8009668:	7819      	ldrb	r1, [r3, #0]
 800966a:	f003 fd30 	bl	800d0ce <USBD_LL_StallEP>
 800966e:	e7f1      	b.n	8009654 <MSC_BOT_Abort+0x20>
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009670:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <MSC_BOT_Abort+0x54>)
 8009672:	7819      	ldrb	r1, [r3, #0]
 8009674:	4620      	mov	r0, r4
 8009676:	f003 fd2a 	bl	800d0ce <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800967a:	4b04      	ldr	r3, [pc, #16]	@ (800968c <MSC_BOT_Abort+0x58>)
 800967c:	7819      	ldrb	r1, [r3, #0]
 800967e:	4620      	mov	r0, r4
 8009680:	f003 fd25 	bl	800d0ce <USBD_LL_StallEP>
 8009684:	e7ee      	b.n	8009664 <MSC_BOT_Abort+0x30>
 8009686:	bf00      	nop
 8009688:	20000016 	.word	0x20000016
 800968c:	20000015 	.word	0x20000015

08009690 <MSC_BOT_Init>:
{
 8009690:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009696:	33b0      	adds	r3, #176	@ 0xb0
 8009698:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800969c:	b315      	cbz	r5, 80096e4 <MSC_BOT_Init+0x54>
 800969e:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 80096a0:	2000      	movs	r0, #0
 80096a2:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80096a4:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 80096a6:	f885 0261 	strb.w	r0, [r5, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 80096aa:	f885 0260 	strb.w	r0, [r5, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80096ae:	f885 0262 	strb.w	r0, [r5, #610]	@ 0x262
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80096b2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80096b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80096c2:	4e09      	ldr	r6, [pc, #36]	@ (80096e8 <MSC_BOT_Init+0x58>)
 80096c4:	7831      	ldrb	r1, [r6, #0]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f003 fcf9 	bl	800d0be <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80096cc:	4b07      	ldr	r3, [pc, #28]	@ (80096ec <MSC_BOT_Init+0x5c>)
 80096ce:	7819      	ldrb	r1, [r3, #0]
 80096d0:	4620      	mov	r0, r4
 80096d2:	f003 fcf4 	bl	800d0be <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80096d6:	231f      	movs	r3, #31
 80096d8:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 80096dc:	7831      	ldrb	r1, [r6, #0]
 80096de:	4620      	mov	r0, r4
 80096e0:	f003 fd15 	bl	800d10e <USBD_LL_PrepareReceive>
}
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	bf00      	nop
 80096e8:	20000015 	.word	0x20000015
 80096ec:	20000016 	.word	0x20000016

080096f0 <MSC_BOT_Reset>:
{
 80096f0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096f2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80096f6:	33b0      	adds	r3, #176	@ 0xb0
 80096f8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 80096fc:	b1a5      	cbz	r5, 8009728 <MSC_BOT_Reset+0x38>
 80096fe:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8009700:	2300      	movs	r3, #0
 8009702:	722b      	strb	r3, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009704:	2301      	movs	r3, #1
 8009706:	726b      	strb	r3, [r5, #9]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009708:	4b08      	ldr	r3, [pc, #32]	@ (800972c <MSC_BOT_Reset+0x3c>)
 800970a:	7819      	ldrb	r1, [r3, #0]
 800970c:	f003 fce7 	bl	800d0de <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009710:	4e07      	ldr	r6, [pc, #28]	@ (8009730 <MSC_BOT_Reset+0x40>)
 8009712:	7831      	ldrb	r1, [r6, #0]
 8009714:	4620      	mov	r0, r4
 8009716:	f003 fce2 	bl	800d0de <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800971a:	231f      	movs	r3, #31
 800971c:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 8009720:	7831      	ldrb	r1, [r6, #0]
 8009722:	4620      	mov	r0, r4
 8009724:	f003 fcf3 	bl	800d10e <USBD_LL_PrepareReceive>
}
 8009728:	bd70      	pop	{r4, r5, r6, pc}
 800972a:	bf00      	nop
 800972c:	20000016 	.word	0x20000016
 8009730:	20000015 	.word	0x20000015

08009734 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009734:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009738:	33b0      	adds	r3, #176	@ 0xb0
 800973a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 800973e:	b10b      	cbz	r3, 8009744 <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 8009740:	2200      	movs	r2, #0
 8009742:	721a      	strb	r2, [r3, #8]
}
 8009744:	4770      	bx	lr
	...

08009748 <MSC_BOT_SendCSW>:
{
 8009748:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800974a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800974e:	33b0      	adds	r3, #176	@ 0xb0
 8009750:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 8009754:	b1b5      	cbz	r5, 8009784 <MSC_BOT_SendCSW+0x3c>
 8009756:	4604      	mov	r4, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009758:	4b0b      	ldr	r3, [pc, #44]	@ (8009788 <MSC_BOT_SendCSW+0x40>)
 800975a:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800975e:	f885 123c 	strb.w	r1, [r5, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009762:	2300      	movs	r3, #0
 8009764:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009766:	230d      	movs	r3, #13
 8009768:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 800976c:	4907      	ldr	r1, [pc, #28]	@ (800978c <MSC_BOT_SendCSW+0x44>)
 800976e:	7809      	ldrb	r1, [r1, #0]
 8009770:	f003 fcc5 	bl	800d0fe <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009774:	231f      	movs	r3, #31
 8009776:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800977a:	4905      	ldr	r1, [pc, #20]	@ (8009790 <MSC_BOT_SendCSW+0x48>)
 800977c:	7809      	ldrb	r1, [r1, #0]
 800977e:	4620      	mov	r0, r4
 8009780:	f003 fcc5 	bl	800d10e <USBD_LL_PrepareReceive>
}
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	bf00      	nop
 8009788:	53425355 	.word	0x53425355
 800978c:	20000016 	.word	0x20000016
 8009790:	20000015 	.word	0x20000015

08009794 <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009794:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009798:	33b0      	adds	r3, #176	@ 0xb0
 800979a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800979e:	b1c9      	cbz	r1, 80097d4 <MSC_BOT_DataIn+0x40>
{
 80097a0:	b510      	push	{r4, lr}
 80097a2:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 80097a4:	7a0b      	ldrb	r3, [r1, #8]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d007      	beq.n	80097ba <MSC_BOT_DataIn+0x26>
 80097aa:	3b03      	subs	r3, #3
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d802      	bhi.n	80097b8 <MSC_BOT_DataIn+0x24>
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80097b2:	2100      	movs	r1, #0
 80097b4:	f7ff ffc8 	bl	8009748 <MSC_BOT_SendCSW>
}
 80097b8:	bd10      	pop	{r4, pc}
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80097ba:	f201 221f 	addw	r2, r1, #543	@ 0x21f
 80097be:	f891 121d 	ldrb.w	r1, [r1, #541]	@ 0x21d
 80097c2:	f000 f9b9 	bl	8009b38 <SCSI_ProcessCmd>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	daf6      	bge.n	80097b8 <MSC_BOT_DataIn+0x24>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097ca:	2101      	movs	r1, #1
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff ffbb 	bl	8009748 <MSC_BOT_SendCSW>
 80097d2:	e7f1      	b.n	80097b8 <MSC_BOT_DataIn+0x24>
 80097d4:	4770      	bx	lr
	...

080097d8 <MSC_BOT_DataOut>:
{
 80097d8:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097da:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097de:	33b0      	adds	r3, #176	@ 0xb0
 80097e0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 80097e4:	b125      	cbz	r5, 80097f0 <MSC_BOT_DataOut+0x18>
 80097e6:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 80097e8:	7a2b      	ldrb	r3, [r5, #8]
 80097ea:	b113      	cbz	r3, 80097f2 <MSC_BOT_DataOut+0x1a>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d067      	beq.n	80098c0 <MSC_BOT_DataOut+0xe8>
}
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 80097f2:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 80097f6:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80097fa:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 80097fe:	f8c5 3238 	str.w	r3, [r5, #568]	@ 0x238
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009802:	4b36      	ldr	r3, [pc, #216]	@ (80098dc <MSC_BOT_DataOut+0x104>)
 8009804:	7819      	ldrb	r1, [r3, #0]
 8009806:	f003 fc2c 	bl	800d062 <USBD_LL_GetRxDataSize>
 800980a:	281f      	cmp	r0, #31
 800980c:	d104      	bne.n	8009818 <MSC_BOT_DataOut+0x40>
 800980e:	f8d5 2210 	ldr.w	r2, [r5, #528]	@ 0x210
 8009812:	4b33      	ldr	r3, [pc, #204]	@ (80098e0 <MSC_BOT_DataOut+0x108>)
 8009814:	429a      	cmp	r2, r3
 8009816:	d00c      	beq.n	8009832 <MSC_BOT_DataOut+0x5a>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009818:	2320      	movs	r3, #32
 800981a:	2205      	movs	r2, #5
 800981c:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f89a 	bl	800995a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009826:	2302      	movs	r3, #2
 8009828:	726b      	strb	r3, [r5, #9]
    MSC_BOT_Abort(pdev);
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff ff02 	bl	8009634 <MSC_BOT_Abort>
 8009830:	e7de      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009832:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009836:	2901      	cmp	r1, #1
 8009838:	d8ee      	bhi.n	8009818 <MSC_BOT_DataOut+0x40>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800983a:	f895 321e 	ldrb.w	r3, [r5, #542]	@ 0x21e
 800983e:	3b01      	subs	r3, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b0f      	cmp	r3, #15
 8009844:	d8e8      	bhi.n	8009818 <MSC_BOT_DataOut+0x40>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009846:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800984a:	4620      	mov	r0, r4
 800984c:	f000 f974 	bl	8009b38 <SCSI_ProcessCmd>
 8009850:	2800      	cmp	r0, #0
 8009852:	db24      	blt.n	800989e <MSC_BOT_DataOut+0xc6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009854:	7a2b      	ldrb	r3, [r5, #8]
 8009856:	3b01      	subs	r3, #1
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d9c8      	bls.n	80097f0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 800985e:	68eb      	ldr	r3, [r5, #12]
 8009860:	b34b      	cbz	r3, 80098b6 <MSC_BOT_DataOut+0xde>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009862:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 8009866:	32b0      	adds	r2, #176	@ 0xb0
 8009868:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  if (hmsc == NULL)
 800986c:	2a00      	cmp	r2, #0
 800986e:	d0bf      	beq.n	80097f0 <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 8009870:	f8d2 0218 	ldr.w	r0, [r2, #536]	@ 0x218
  hmsc->csw.dDataResidue -= len;
 8009874:	f8d2 1238 	ldr.w	r1, [r2, #568]	@ 0x238
 8009878:	1ac9      	subs	r1, r1, r3
 800987a:	f8c2 1238 	str.w	r1, [r2, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800987e:	2100      	movs	r1, #0
 8009880:	f882 123c 	strb.w	r1, [r2, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009884:	2104      	movs	r1, #4
 8009886:	7211      	strb	r1, [r2, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009888:	4283      	cmp	r3, r0
 800988a:	bf28      	it	cs
 800988c:	4603      	movcs	r3, r0
 800988e:	f105 0210 	add.w	r2, r5, #16
 8009892:	4914      	ldr	r1, [pc, #80]	@ (80098e4 <MSC_BOT_DataOut+0x10c>)
 8009894:	7809      	ldrb	r1, [r1, #0]
 8009896:	4620      	mov	r0, r4
 8009898:	f003 fc31 	bl	800d0fe <USBD_LL_Transmit>
 800989c:	e7a8      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800989e:	7a2b      	ldrb	r3, [r5, #8]
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	d003      	beq.n	80098ac <MSC_BOT_DataOut+0xd4>
        MSC_BOT_Abort(pdev);
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7ff fec5 	bl	8009634 <MSC_BOT_Abort>
 80098aa:	e7a1      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80098ac:	2101      	movs	r1, #1
 80098ae:	4620      	mov	r0, r4
 80098b0:	f7ff ff4a 	bl	8009748 <MSC_BOT_SendCSW>
 80098b4:	e79c      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80098b6:	2100      	movs	r1, #0
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff ff45 	bl	8009748 <MSC_BOT_SendCSW>
 80098be:	e797      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80098c0:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 80098c4:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 80098c8:	f000 f936 	bl	8009b38 <SCSI_ProcessCmd>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	da8f      	bge.n	80097f0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80098d0:	2101      	movs	r1, #1
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7ff ff38 	bl	8009748 <MSC_BOT_SendCSW>
 80098d8:	e78a      	b.n	80097f0 <MSC_BOT_DataOut+0x18>
 80098da:	bf00      	nop
 80098dc:	20000015 	.word	0x20000015
 80098e0:	43425355 	.word	0x43425355
 80098e4:	20000016 	.word	0x20000016

080098e8 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098e8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80098ec:	33b0      	adds	r3, #176	@ 0xb0
 80098ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80098f2:	b1bb      	cbz	r3, 8009924 <MSC_BOT_CplClrFeature+0x3c>
{
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80098f8:	7a5b      	ldrb	r3, [r3, #9]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d008      	beq.n	8009910 <MSC_BOT_CplClrFeature+0x28>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80098fe:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009902:	d004      	beq.n	800990e <MSC_BOT_CplClrFeature+0x26>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d002      	beq.n	800990e <MSC_BOT_CplClrFeature+0x26>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009908:	2101      	movs	r1, #1
 800990a:	f7ff ff1d 	bl	8009748 <MSC_BOT_SendCSW>
  }
  else
  {
    return;
  }
}
 800990e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009910:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <MSC_BOT_CplClrFeature+0x40>)
 8009912:	7819      	ldrb	r1, [r3, #0]
 8009914:	f003 fbdb 	bl	800d0ce <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009918:	4b04      	ldr	r3, [pc, #16]	@ (800992c <MSC_BOT_CplClrFeature+0x44>)
 800991a:	7819      	ldrb	r1, [r3, #0]
 800991c:	4620      	mov	r0, r4
 800991e:	f003 fbd6 	bl	800d0ce <USBD_LL_StallEP>
 8009922:	e7f4      	b.n	800990e <MSC_BOT_CplClrFeature+0x26>
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	20000016 	.word	0x20000016
 800992c:	20000015 	.word	0x20000015

08009930 <SCSI_UpdateBotData>:
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
  uint16_t len = length;

  if (hmsc == NULL)
 8009930:	b170      	cbz	r0, 8009950 <SCSI_UpdateBotData+0x20>
  {
    return -1;
  }

  hmsc->bot_data_length = len;
 8009932:	60c2      	str	r2, [r0, #12]

  while (len != 0U)
 8009934:	b17a      	cbz	r2, 8009956 <SCSI_UpdateBotData+0x26>
 8009936:	188b      	adds	r3, r1, r2
 8009938:	3a01      	subs	r2, #1
 800993a:	b292      	uxth	r2, r2
 800993c:	3211      	adds	r2, #17
 800993e:	4402      	add	r2, r0
  {
    len--;
    hmsc->bot_data[len] = pBuff[len];
 8009940:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 8009944:	f802 0d01 	strb.w	r0, [r2, #-1]!
  while (len != 0U)
 8009948:	428b      	cmp	r3, r1
 800994a:	d1f9      	bne.n	8009940 <SCSI_UpdateBotData+0x10>
  }

  return 0;
 800994c:	2000      	movs	r0, #0
 800994e:	4770      	bx	lr
    return -1;
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	4770      	bx	lr
  return 0;
 8009956:	2000      	movs	r0, #0
}
 8009958:	4770      	bx	lr

0800995a <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995a:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 800995e:	31b0      	adds	r1, #176	@ 0xb0
 8009960:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  if (hmsc == NULL)
 8009964:	b1a0      	cbz	r0, 8009990 <SCSI_SenseCode+0x36>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009966:	f890 1261 	ldrb.w	r1, [r0, #609]	@ 0x261
 800996a:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 800996e:	f88c 2240 	strb.w	r2, [ip, #576]	@ 0x240
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009972:	f88c 3244 	strb.w	r3, [ip, #580]	@ 0x244
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	f88c 3245 	strb.w	r3, [ip, #581]	@ 0x245
  hmsc->scsi_sense_tail++;
 800997c:	3101      	adds	r1, #1
 800997e:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009980:	2904      	cmp	r1, #4
 8009982:	d002      	beq.n	800998a <SCSI_SenseCode+0x30>
  hmsc->scsi_sense_tail++;
 8009984:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 8009988:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	f880 3261 	strb.w	r3, [r0, #609]	@ 0x261
}
 8009990:	4770      	bx	lr

08009992 <SCSI_CheckAddressRange>:
{
 8009992:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009994:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 8009998:	f104 0cb0 	add.w	ip, r4, #176	@ 0xb0
 800999c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
  if (hmsc == NULL)
 80099a0:	b174      	cbz	r4, 80099c0 <SCSI_CheckAddressRange+0x2e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80099a2:	441a      	add	r2, r3
 80099a4:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 80099a8:	429a      	cmp	r2, r3
  return 0;
 80099aa:	bf98      	it	ls
 80099ac:	2000      	movls	r0, #0
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80099ae:	d800      	bhi.n	80099b2 <SCSI_CheckAddressRange+0x20>
}
 80099b0:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80099b2:	2321      	movs	r3, #33	@ 0x21
 80099b4:	2205      	movs	r2, #5
 80099b6:	f7ff ffd0 	bl	800995a <SCSI_SenseCode>
    return -1;
 80099ba:	f04f 30ff 	mov.w	r0, #4294967295
 80099be:	e7f7      	b.n	80099b0 <SCSI_CheckAddressRange+0x1e>
    return -1;
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	e7f4      	b.n	80099b0 <SCSI_CheckAddressRange+0x1e>
	...

080099c8 <SCSI_ProcessRead>:
{
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099cc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80099d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80099d4:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 80099d8:	2c00      	cmp	r4, #0
 80099da:	d044      	beq.n	8009a66 <SCSI_ProcessRead+0x9e>
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80099e0:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 80099e4:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 80099e8:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 80099ec:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80099f0:	bf28      	it	cs
 80099f2:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80099f6:	f104 0810 	add.w	r8, r4, #16
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80099fa:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80099fe:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 8009a02:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	4638      	mov	r0, r7
 8009a10:	47c8      	blx	r9
 8009a12:	2800      	cmp	r0, #0
 8009a14:	db1e      	blt.n	8009a54 <SCSI_ProcessRead+0x8c>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009a16:	462b      	mov	r3, r5
 8009a18:	4642      	mov	r2, r8
 8009a1a:	4916      	ldr	r1, [pc, #88]	@ (8009a74 <SCSI_ProcessRead+0xac>)
 8009a1c:	7809      	ldrb	r1, [r1, #0]
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f003 fb6d 	bl	800d0fe <USBD_LL_Transmit>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009a24:	f8b4 2264 	ldrh.w	r2, [r4, #612]	@ 0x264
 8009a28:	fbb5 f2f2 	udiv	r2, r5, r2
 8009a2c:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 8009a30:	4413      	add	r3, r2
 8009a32:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009a36:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 8009a40:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 8009a44:	1b52      	subs	r2, r2, r5
 8009a46:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 8009a4a:	b97b      	cbnz	r3, 8009a6c <SCSI_ProcessRead+0xa4>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	7223      	strb	r3, [r4, #8]
  return 0;
 8009a50:	2000      	movs	r0, #0
 8009a52:	e00c      	b.n	8009a6e <SCSI_ProcessRead+0xa6>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009a54:	2311      	movs	r3, #17
 8009a56:	2204      	movs	r2, #4
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff7d 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	e003      	b.n	8009a6e <SCSI_ProcessRead+0xa6>
    return -1;
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6a:	e000      	b.n	8009a6e <SCSI_ProcessRead+0xa6>
  return 0;
 8009a6c:	2000      	movs	r0, #0
}
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	bf00      	nop
 8009a74:	20000016 	.word	0x20000016

08009a78 <SCSI_ProcessWrite>:
{
 8009a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a7c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009a80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a84:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 8009a88:	2c00      	cmp	r4, #0
 8009a8a:	d04f      	beq.n	8009b2c <SCSI_ProcessWrite+0xb4>
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	4688      	mov	r8, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009a90:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009a94:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 8009a98:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 8009a9c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009aa0:	bf28      	it	cs
 8009aa2:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009aa6:	f104 0710 	add.w	r7, r4, #16
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8009aaa:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8009aae:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 8009ab2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 8009abc:	4639      	mov	r1, r7
 8009abe:	4640      	mov	r0, r8
 8009ac0:	47c8      	blx	r9
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	db1a      	blt.n	8009afc <SCSI_ProcessWrite+0x84>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009ac6:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ace:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009ad8:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 8009adc:	1a52      	subs	r2, r2, r1
 8009ade:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 8009ae2:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 8009ae6:	1b49      	subs	r1, r1, r5
 8009ae8:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 8009aec:	b97a      	cbnz	r2, 8009b0e <SCSI_ProcessWrite+0x96>
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009aee:	2100      	movs	r1, #0
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7ff fe29 	bl	8009748 <MSC_BOT_SendCSW>
  return 0;
 8009af6:	2000      	movs	r0, #0
}
 8009af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009afc:	2303      	movs	r3, #3
 8009afe:	2204      	movs	r2, #4
 8009b00:	4641      	mov	r1, r8
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ff29 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e7f4      	b.n	8009af8 <SCSI_ProcessWrite+0x80>
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009b0e:	fb02 f303 	mul.w	r3, r2, r3
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b16:	bf28      	it	cs
 8009b18:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009b1c:	463a      	mov	r2, r7
 8009b1e:	4905      	ldr	r1, [pc, #20]	@ (8009b34 <SCSI_ProcessWrite+0xbc>)
 8009b20:	7809      	ldrb	r1, [r1, #0]
 8009b22:	4630      	mov	r0, r6
 8009b24:	f003 faf3 	bl	800d10e <USBD_LL_PrepareReceive>
  return 0;
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7e5      	b.n	8009af8 <SCSI_ProcessWrite+0x80>
    return -1;
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e7e2      	b.n	8009af8 <SCSI_ProcessWrite+0x80>
 8009b32:	bf00      	nop
 8009b34:	20000015 	.word	0x20000015

08009b38 <SCSI_ProcessCmd>:
{
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	4615      	mov	r5, r2
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b40:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009b44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009b48:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 8009b4c:	2c00      	cmp	r4, #0
 8009b4e:	f000 843d 	beq.w	800a3cc <SCSI_ProcessCmd+0x894>
 8009b52:	4606      	mov	r6, r0
 8009b54:	460f      	mov	r7, r1
  switch (cmd[0])
 8009b56:	782b      	ldrb	r3, [r5, #0]
 8009b58:	2b5a      	cmp	r3, #90	@ 0x5a
 8009b5a:	d85f      	bhi.n	8009c1c <SCSI_ProcessCmd+0xe4>
 8009b5c:	2b5a      	cmp	r3, #90	@ 0x5a
 8009b5e:	f200 842a 	bhi.w	800a3b6 <SCSI_ProcessCmd+0x87e>
 8009b62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b66:	0104      	.short	0x0104
 8009b68:	04280428 	.word	0x04280428
 8009b6c:	04280133 	.word	0x04280133
 8009b70:	04280428 	.word	0x04280428
 8009b74:	04280428 	.word	0x04280428
 8009b78:	04280428 	.word	0x04280428
 8009b7c:	04280428 	.word	0x04280428
 8009b80:	04280428 	.word	0x04280428
 8009b84:	04280428 	.word	0x04280428
 8009b88:	016e0428 	.word	0x016e0428
 8009b8c:	04280428 	.word	0x04280428
 8009b90:	04280428 	.word	0x04280428
 8009b94:	04280428 	.word	0x04280428
 8009b98:	01e50428 	.word	0x01e50428
 8009b9c:	042801ae 	.word	0x042801ae
 8009ba0:	01d80428 	.word	0x01d80428
 8009ba4:	04280428 	.word	0x04280428
 8009ba8:	04280428 	.word	0x04280428
 8009bac:	0428021b 	.word	0x0428021b
 8009bb0:	04280253 	.word	0x04280253
 8009bb4:	028a0428 	.word	0x028a0428
 8009bb8:	03560428 	.word	0x03560428
 8009bbc:	04280428 	.word	0x04280428
 8009bc0:	04280428 	.word	0x04280428
 8009bc4:	0428040f 	.word	0x0428040f
 8009bc8:	04280428 	.word	0x04280428
 8009bcc:	04280428 	.word	0x04280428
 8009bd0:	04280428 	.word	0x04280428
 8009bd4:	04280428 	.word	0x04280428
 8009bd8:	04280428 	.word	0x04280428
 8009bdc:	04280428 	.word	0x04280428
 8009be0:	04280428 	.word	0x04280428
 8009be4:	04280428 	.word	0x04280428
 8009be8:	04280428 	.word	0x04280428
 8009bec:	04280428 	.word	0x04280428
 8009bf0:	04280428 	.word	0x04280428
 8009bf4:	04280428 	.word	0x04280428
 8009bf8:	04280428 	.word	0x04280428
 8009bfc:	04280428 	.word	0x04280428
 8009c00:	04280428 	.word	0x04280428
 8009c04:	04280428 	.word	0x04280428
 8009c08:	04280428 	.word	0x04280428
 8009c0c:	04280428 	.word	0x04280428
 8009c10:	04280428 	.word	0x04280428
 8009c14:	04280428 	.word	0x04280428
 8009c18:	01fb0428 	.word	0x01fb0428
 8009c1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8009c1e:	f000 828f 	beq.w	800a140 <SCSI_ProcessCmd+0x608>
 8009c22:	2baa      	cmp	r3, #170	@ 0xaa
 8009c24:	d15b      	bne.n	8009cde <SCSI_ProcessCmd+0x1a6>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009c26:	7a23      	ldrb	r3, [r4, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 83a7 	bne.w	800a37c <SCSI_ProcessCmd+0x844>
    if (hmsc->cbw.dDataLength == 0U)
 8009c2e:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 8370 	beq.w	800a318 <SCSI_ProcessCmd+0x7e0>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009c38:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f2c0 8374 	blt.w	800a32a <SCSI_ProcessCmd+0x7f2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009c42:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4608      	mov	r0, r1
 8009c4a:	4798      	blx	r3
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 8375 	bne.w	800a33c <SCSI_ProcessCmd+0x804>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009c52:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 8009c56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	4638      	mov	r0, r7
 8009c62:	4798      	blx	r3
 8009c64:	4680      	mov	r8, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f040 8373 	bne.w	800a352 <SCSI_ProcessCmd+0x81a>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c6c:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 8009c6e:	78ea      	ldrb	r2, [r5, #3]
 8009c70:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c72:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 8009c76:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	792b      	ldrb	r3, [r5, #4]
 8009c7c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c80:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009c84:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 8009c86:	79eb      	ldrb	r3, [r5, #7]
 8009c88:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009c8a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 8009c8e:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 8009c90:	430b      	orrs	r3, r1
 8009c92:	7a29      	ldrb	r1, [r5, #8]
 8009c94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009c98:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff fe77 	bl	8009992 <SCSI_CheckAddressRange>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f2c0 83a0 	blt.w	800a3ea <SCSI_ProcessCmd+0x8b2>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009caa:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009cae:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 8009cb6:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	f040 8354 	bne.w	800a368 <SCSI_ProcessCmd+0x830>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc8:	bf28      	it	cs
 8009cca:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009cce:	f104 0210 	add.w	r2, r4, #16
 8009cd2:	49ad      	ldr	r1, [pc, #692]	@ (8009f88 <SCSI_ProcessCmd+0x450>)
 8009cd4:	7809      	ldrb	r1, [r1, #0]
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f003 fa19 	bl	800d10e <USBD_LL_PrepareReceive>
  return 0;
 8009cdc:	e124      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  switch (cmd[0])
 8009cde:	2b9e      	cmp	r3, #158	@ 0x9e
 8009ce0:	f040 8369 	bne.w	800a3b6 <SCSI_ProcessCmd+0x87e>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009ce4:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 8009cee:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009cf6:	4680      	mov	r8, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f040 81b5 	bne.w	800a068 <SCSI_ProcessCmd+0x530>
 8009cfe:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	f000 81b0 	beq.w	800a068 <SCSI_ProcessCmd+0x530>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d08:	7aab      	ldrb	r3, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 8009d0a:	7aea      	ldrb	r2, [r5, #11]
 8009d0c:	0412      	lsls	r2, r2, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d0e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[13];
 8009d12:	7b6b      	ldrb	r3, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 8009d14:	431a      	orrs	r2, r3
 8009d16:	7b2b      	ldrb	r3, [r5, #12]
 8009d18:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d1c:	60e2      	str	r2, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009d1e:	b13a      	cbz	r2, 8009d30 <SCSI_ProcessCmd+0x1f8>
 8009d20:	f104 030f 	add.w	r3, r4, #15
 8009d24:	441a      	add	r2, r3
    hmsc->bot_data[idx] = 0U;
 8009d26:	2100      	movs	r1, #0
 8009d28:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d1fb      	bne.n	8009d28 <SCSI_ProcessCmd+0x1f0>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009d30:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 8009d34:	1e53      	subs	r3, r2, #1
 8009d36:	0e19      	lsrs	r1, r3, #24
 8009d38:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009d3a:	0c19      	lsrs	r1, r3, #16
 8009d3c:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d42:	3a01      	subs	r2, #1
 8009d44:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009d46:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	7622      	strb	r2, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009d4e:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009d50:	0a1a      	lsrs	r2, r3, #8
 8009d52:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009d54:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d56:	7aaa      	ldrb	r2, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 8009d58:	7aeb      	ldrb	r3, [r5, #11]
 8009d5a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                          (uint32_t)params[13];
 8009d60:	7b6a      	ldrb	r2, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 8009d62:	4313      	orrs	r3, r2
 8009d64:	7b2a      	ldrb	r2, [r5, #12]
 8009d66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d6a:	60e3      	str	r3, [r4, #12]
  return 0;
 8009d6c:	e0dc      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength != 0U)
 8009d6e:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009d72:	b96b      	cbnz	r3, 8009d90 <SCSI_ProcessCmd+0x258>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009d74:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d012      	beq.n	8009da2 <SCSI_ProcessCmd+0x26a>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009d7c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	4638      	mov	r0, r7
 8009d84:	4798      	blx	r3
 8009d86:	4680      	mov	r8, r0
 8009d88:	b9a8      	cbnz	r0, 8009db6 <SCSI_ProcessCmd+0x27e>
  hmsc->bot_data_length = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60e3      	str	r3, [r4, #12]
  return 0;
 8009d8e:	e0cb      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d90:	2320      	movs	r3, #32
 8009d92:	2205      	movs	r2, #5
 8009d94:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009d98:	f7ff fddf 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009d9c:	f04f 38ff 	mov.w	r8, #4294967295
 8009da0:	e0c2      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009da2:	233a      	movs	r3, #58	@ 0x3a
 8009da4:	2202      	movs	r2, #2
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7ff fdd7 	bl	800995a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009dac:	2305      	movs	r3, #5
 8009dae:	7223      	strb	r3, [r4, #8]
    return -1;
 8009db0:	f04f 38ff 	mov.w	r8, #4294967295
 8009db4:	e0b8      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009db6:	233a      	movs	r3, #58	@ 0x3a
 8009db8:	2202      	movs	r2, #2
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff fdcc 	bl	800995a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009dc2:	2305      	movs	r3, #5
 8009dc4:	7223      	strb	r3, [r4, #8]
    return -1;
 8009dc6:	f04f 38ff 	mov.w	r8, #4294967295
 8009dca:	e0ad      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength == 0U)
 8009dcc:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009dd0:	b373      	cbz	r3, 8009e30 <SCSI_ProcessCmd+0x2f8>
 8009dd2:	f104 030f 	add.w	r3, r4, #15
 8009dd6:	f104 0121 	add.w	r1, r4, #33	@ 0x21
    hmsc->bot_data[i] = 0U;
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009de0:	428b      	cmp	r3, r1
 8009de2:	d1fb      	bne.n	8009ddc <SCSI_ProcessCmd+0x2a4>
  hmsc->bot_data[0] = 0x70U;
 8009de4:	2370      	movs	r3, #112	@ 0x70
 8009de6:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009de8:	230c      	movs	r3, #12
 8009dea:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009dec:	f894 3260 	ldrb.w	r3, [r4, #608]	@ 0x260
 8009df0:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d011      	beq.n	8009e1c <SCSI_ProcessCmd+0x2e4>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009df8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8009dfc:	f892 1240 	ldrb.w	r1, [r2, #576]	@ 0x240
 8009e00:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009e02:	f892 1244 	ldrb.w	r1, [r2, #580]	@ 0x244
 8009e06:	7721      	strb	r1, [r4, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009e08:	f892 2245 	ldrb.w	r2, [r2, #581]	@ 0x245
 8009e0c:	7762      	strb	r2, [r4, #29]
    hmsc->scsi_sense_head++;
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009e12:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0U;
 8009e14:	bf08      	it	eq
 8009e16:	2300      	moveq	r3, #0
 8009e18:	f884 3260 	strb.w	r3, [r4, #608]	@ 0x260
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009e1c:	2312      	movs	r3, #18
 8009e1e:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009e20:	792b      	ldrb	r3, [r5, #4]
 8009e22:	2b12      	cmp	r3, #18
 8009e24:	f200 82d5 	bhi.w	800a3d2 <SCSI_ProcessCmd+0x89a>
    hmsc->bot_data_length = params[4];
 8009e28:	60e3      	str	r3, [r4, #12]
  return 0;
 8009e2a:	f04f 0800 	mov.w	r8, #0
 8009e2e:	e07b      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e30:	2320      	movs	r3, #32
 8009e32:	2205      	movs	r2, #5
 8009e34:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009e38:	f7ff fd8f 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009e3c:	f04f 38ff 	mov.w	r8, #4294967295
 8009e40:	e072      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength == 0U)
 8009e42:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009e46:	b17b      	cbz	r3, 8009e68 <SCSI_ProcessCmd+0x330>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009e48:	786b      	ldrb	r3, [r5, #1]
 8009e4a:	f013 0f01 	tst.w	r3, #1
 8009e4e:	d025      	beq.n	8009e9c <SCSI_ProcessCmd+0x364>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009e50:	78ab      	ldrb	r3, [r5, #2]
 8009e52:	b193      	cbz	r3, 8009e7a <SCSI_ProcessCmd+0x342>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009e54:	2b80      	cmp	r3, #128	@ 0x80
 8009e56:	d118      	bne.n	8009e8a <SCSI_ProcessCmd+0x352>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009e58:	2208      	movs	r2, #8
 8009e5a:	494c      	ldr	r1, [pc, #304]	@ (8009f8c <SCSI_ProcessCmd+0x454>)
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff fd67 	bl	8009930 <SCSI_UpdateBotData>
  return 0;
 8009e62:	f04f 0800 	mov.w	r8, #0
 8009e66:	e05f      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e68:	2320      	movs	r3, #32
 8009e6a:	2205      	movs	r2, #5
 8009e6c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009e70:	f7ff fd73 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009e74:	f04f 38ff 	mov.w	r8, #4294967295
 8009e78:	e056      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009e7a:	2206      	movs	r2, #6
 8009e7c:	4944      	ldr	r1, [pc, #272]	@ (8009f90 <SCSI_ProcessCmd+0x458>)
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff fd56 	bl	8009930 <SCSI_UpdateBotData>
  return 0;
 8009e84:	f04f 0800 	mov.w	r8, #0
 8009e88:	e04e      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009e8a:	2324      	movs	r3, #36	@ 0x24
 8009e8c:	2205      	movs	r2, #5
 8009e8e:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009e92:	f7ff fd62 	bl	800995a <SCSI_SenseCode>
      return -1;
 8009e96:	f04f 38ff 	mov.w	r8, #4294967295
 8009e9a:	e045      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009e9c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009ea0:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009ea4:	69d9      	ldr	r1, [r3, #28]
 8009ea6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 8009eaa:	790b      	ldrb	r3, [r1, #4]
    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009eac:	3305      	adds	r3, #5
 8009eae:	792a      	ldrb	r2, [r5, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bf28      	it	cs
 8009eb4:	461a      	movcs	r2, r3
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7ff fd3a 	bl	8009930 <SCSI_UpdateBotData>
  return 0;
 8009ebc:	f04f 0800 	mov.w	r8, #0
 8009ec0:	e032      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009ec2:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d009      	beq.n	8009ede <SCSI_ProcessCmd+0x3a6>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009eca:	792b      	ldrb	r3, [r5, #4]
 8009ecc:	f003 0303 	and.w	r3, r3, #3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d01c      	beq.n	8009f0e <SCSI_ProcessCmd+0x3d6>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d109      	bne.n	8009eec <SCSI_ProcessCmd+0x3b4>
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009ed8:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 8009edc:	e00b      	b.n	8009ef6 <SCSI_ProcessCmd+0x3be>
 8009ede:	792b      	ldrb	r3, [r5, #4]
 8009ee0:	f003 0303 	and.w	r3, r3, #3
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d00a      	beq.n	8009efe <SCSI_ProcessCmd+0x3c6>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d010      	beq.n	8009f0e <SCSI_ProcessCmd+0x3d6>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009eec:	2b03      	cmp	r3, #3
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009eee:	bf04      	itt	eq
 8009ef0:	2300      	moveq	r3, #0
 8009ef2:	f884 3262 	strbeq.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60e3      	str	r3, [r4, #12]
  return 0;
 8009efa:	4698      	mov	r8, r3
 8009efc:	e014      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009efe:	2324      	movs	r3, #36	@ 0x24
 8009f00:	2205      	movs	r2, #5
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7ff fd29 	bl	800995a <SCSI_SenseCode>
    return -1;
 8009f08:	f04f 38ff 	mov.w	r8, #4294967295
 8009f0c:	e00c      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 8009f14:	e7ef      	b.n	8009ef6 <SCSI_ProcessCmd+0x3be>
  if (params[4] == 0U)
 8009f16:	792b      	ldrb	r3, [r5, #4]
 8009f18:	3b00      	subs	r3, #0
 8009f1a:	bf18      	it	ne
 8009f1c:	2301      	movne	r3, #1
 8009f1e:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60e3      	str	r3, [r4, #12]
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009f26:	4698      	mov	r8, r3
}
 8009f28:	4640      	mov	r0, r8
 8009f2a:	b002      	add	sp, #8
 8009f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009f30:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	4638      	mov	r0, r7
 8009f38:	4798      	blx	r3
 8009f3a:	b120      	cbz	r0, 8009f46 <SCSI_ProcessCmd+0x40e>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8009f3c:	4a15      	ldr	r2, [pc, #84]	@ (8009f94 <SCSI_ProcessCmd+0x45c>)
 8009f3e:	7893      	ldrb	r3, [r2, #2]
 8009f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f44:	7093      	strb	r3, [r2, #2]
  if (params[4] <= len)
 8009f46:	792a      	ldrb	r2, [r5, #4]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009f48:	2a04      	cmp	r2, #4
 8009f4a:	bf28      	it	cs
 8009f4c:	2204      	movcs	r2, #4
 8009f4e:	4911      	ldr	r1, [pc, #68]	@ (8009f94 <SCSI_ProcessCmd+0x45c>)
 8009f50:	4620      	mov	r0, r4
 8009f52:	f7ff fced 	bl	8009930 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009f56:	f04f 0800 	mov.w	r8, #0
      break;
 8009f5a:	e7e5      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009f5c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	4638      	mov	r0, r7
 8009f64:	4798      	blx	r3
 8009f66:	b120      	cbz	r0, 8009f72 <SCSI_ProcessCmd+0x43a>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8009f68:	4a0b      	ldr	r2, [pc, #44]	@ (8009f98 <SCSI_ProcessCmd+0x460>)
 8009f6a:	78d3      	ldrb	r3, [r2, #3]
 8009f6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f70:	70d3      	strb	r3, [r2, #3]
  if (params[8] <= len)
 8009f72:	7a2a      	ldrb	r2, [r5, #8]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009f74:	2a08      	cmp	r2, #8
 8009f76:	bf28      	it	cs
 8009f78:	2208      	movcs	r2, #8
 8009f7a:	4907      	ldr	r1, [pc, #28]	@ (8009f98 <SCSI_ProcessCmd+0x460>)
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7ff fcd7 	bl	8009930 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009f82:	f04f 0800 	mov.w	r8, #0
      break;
 8009f86:	e7cf      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
 8009f88:	20000015 	.word	0x20000015
 8009f8c:	20000088 	.word	0x20000088
 8009f90:	20000090 	.word	0x20000090
 8009f94:	20000084 	.word	0x20000084
 8009f98:	2000007c 	.word	0x2000007c
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009f9c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f10d 0202 	add.w	r2, sp, #2
 8009fa6:	a901      	add	r1, sp, #4
 8009fa8:	4638      	mov	r0, r7
 8009faa:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009fac:	4680      	mov	r8, r0
 8009fae:	bb20      	cbnz	r0, 8009ffa <SCSI_ProcessCmd+0x4c2>
 8009fb0:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d020      	beq.n	8009ffa <SCSI_ProcessCmd+0x4c2>
 8009fb8:	f104 030f 	add.w	r3, r4, #15
 8009fbc:	f104 011b 	add.w	r1, r4, #27
    hmsc->bot_data[i] = 0U;
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < 12U ; i++)
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	d1fb      	bne.n	8009fc2 <SCSI_ProcessCmd+0x48a>
  hmsc->bot_data[3] = 0x08U;
 8009fca:	2308      	movs	r3, #8
 8009fcc:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009fce:	9a01      	ldr	r2, [sp, #4]
 8009fd0:	1e53      	subs	r3, r2, #1
 8009fd2:	0e19      	lsrs	r1, r3, #24
 8009fd4:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009fd6:	0c19      	lsrs	r1, r3, #16
 8009fd8:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009fda:	0a1b      	lsrs	r3, r3, #8
 8009fdc:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009fde:	3a01      	subs	r2, #1
 8009fe0:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = 0x02U;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	7623      	strb	r3, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009fe6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009fea:	2200      	movs	r2, #0
 8009fec:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009fee:	0a1a      	lsrs	r2, r3, #8
 8009ff0:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009ff2:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = 12U;
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	60e3      	str	r3, [r4, #12]
      break;
 8009ff8:	e796      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ffa:	233a      	movs	r3, #58	@ 0x3a
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	4639      	mov	r1, r7
 800a000:	4630      	mov	r0, r6
 800a002:	f7ff fcaa 	bl	800995a <SCSI_SenseCode>
    return -1;
 800a006:	f04f 38ff 	mov.w	r8, #4294967295
 800a00a:	e78d      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a00c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800a016:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800a01a:	4638      	mov	r0, r7
 800a01c:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a01e:	4680      	mov	r8, r0
 800a020:	b9c8      	cbnz	r0, 800a056 <SCSI_ProcessCmd+0x51e>
 800a022:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800a026:	2b02      	cmp	r3, #2
 800a028:	d015      	beq.n	800a056 <SCSI_ProcessCmd+0x51e>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a02a:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 800a02e:	1e53      	subs	r3, r2, #1
 800a030:	0e19      	lsrs	r1, r3, #24
 800a032:	7421      	strb	r1, [r4, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a034:	0c19      	lsrs	r1, r3, #16
 800a036:	7461      	strb	r1, [r4, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	74a3      	strb	r3, [r4, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a03c:	3a01      	subs	r2, #1
 800a03e:	74e2      	strb	r2, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a040:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a044:	2200      	movs	r2, #0
 800a046:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a048:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a04a:	0a1a      	lsrs	r2, r3, #8
 800a04c:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a04e:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data_length = 8U;
 800a050:	2308      	movs	r3, #8
 800a052:	60e3      	str	r3, [r4, #12]
  return 0;
 800a054:	e768      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a056:	233a      	movs	r3, #58	@ 0x3a
 800a058:	2202      	movs	r2, #2
 800a05a:	4639      	mov	r1, r7
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff fc7c 	bl	800995a <SCSI_SenseCode>
    return -1;
 800a062:	f04f 38ff 	mov.w	r8, #4294967295
 800a066:	e75f      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a068:	233a      	movs	r3, #58	@ 0x3a
 800a06a:	2202      	movs	r2, #2
 800a06c:	4639      	mov	r1, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff fc73 	bl	800995a <SCSI_SenseCode>
    return -1;
 800a074:	f04f 38ff 	mov.w	r8, #4294967295
 800a078:	e756      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a07a:	7a23      	ldrb	r3, [r4, #8]
 800a07c:	bb9b      	cbnz	r3, 800a0e6 <SCSI_ProcessCmd+0x5ae>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a07e:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800a082:	2b00      	cmp	r3, #0
 800a084:	da38      	bge.n	800a0f8 <SCSI_ProcessCmd+0x5c0>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a086:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d03d      	beq.n	800a10a <SCSI_ProcessCmd+0x5d2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a08e:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4638      	mov	r0, r7
 800a096:	4798      	blx	r3
 800a098:	2800      	cmp	r0, #0
 800a09a:	d13e      	bne.n	800a11a <SCSI_ProcessCmd+0x5e2>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a09c:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800a09e:	78ea      	ldrb	r2, [r5, #3]
 800a0a0:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a0a2:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800a0a6:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	792b      	ldrb	r3, [r5, #4]
 800a0ac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a0b0:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a0b4:	79e9      	ldrb	r1, [r5, #7]
 800a0b6:	7a2b      	ldrb	r3, [r5, #8]
 800a0b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a0bc:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7ff fc65 	bl	8009992 <SCSI_CheckAddressRange>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f2c0 8185 	blt.w	800a3d8 <SCSI_ProcessCmd+0x8a0>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a0ce:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a0d2:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800a0d6:	fb02 f303 	mul.w	r3, r2, r3
 800a0da:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d124      	bne.n	800a12c <SCSI_ProcessCmd+0x5f4>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a0e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ea:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff fc6a 	bl	80099c8 <SCSI_ProcessRead>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	e717      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a100:	f7ff fc2b 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a104:	f04f 38ff 	mov.w	r8, #4294967295
 800a108:	e70e      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a10a:	233a      	movs	r3, #58	@ 0x3a
 800a10c:	2202      	movs	r2, #2
 800a10e:	4639      	mov	r1, r7
 800a110:	f7ff fc23 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a114:	f04f 38ff 	mov.w	r8, #4294967295
 800a118:	e706      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a11a:	233a      	movs	r3, #58	@ 0x3a
 800a11c:	2202      	movs	r2, #2
 800a11e:	4639      	mov	r1, r7
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff fc1a 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a126:	f04f 38ff 	mov.w	r8, #4294967295
 800a12a:	e6fd      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a12c:	2320      	movs	r3, #32
 800a12e:	2205      	movs	r2, #5
 800a130:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff fc10 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a13a:	f04f 38ff 	mov.w	r8, #4294967295
 800a13e:	e6f3      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a140:	7a23      	ldrb	r3, [r4, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d139      	bne.n	800a1ba <SCSI_ProcessCmd+0x682>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a146:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da3e      	bge.n	800a1cc <SCSI_ProcessCmd+0x694>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a14e:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800a152:	2b02      	cmp	r3, #2
 800a154:	d043      	beq.n	800a1de <SCSI_ProcessCmd+0x6a6>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a156:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	4608      	mov	r0, r1
 800a15e:	4798      	blx	r3
 800a160:	2800      	cmp	r0, #0
 800a162:	d143      	bne.n	800a1ec <SCSI_ProcessCmd+0x6b4>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a164:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800a166:	78ea      	ldrb	r2, [r5, #3]
 800a168:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a16a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800a16e:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800a170:	431a      	orrs	r2, r3
 800a172:	792b      	ldrb	r3, [r5, #4]
 800a174:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a178:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a17c:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800a17e:	79eb      	ldrb	r3, [r5, #7]
 800a180:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a182:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800a186:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800a188:	430b      	orrs	r3, r1
 800a18a:	7a29      	ldrb	r1, [r5, #8]
 800a18c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a190:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a194:	4639      	mov	r1, r7
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff fbfb 	bl	8009992 <SCSI_CheckAddressRange>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f2c0 811e 	blt.w	800a3de <SCSI_ProcessCmd+0x8a6>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a1a2:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a1a6:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d123      	bne.n	800a1fe <SCSI_ProcessCmd+0x6c6>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a1ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1be:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7ff fc00 	bl	80099c8 <SCSI_ProcessRead>
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	e6ad      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	2205      	movs	r2, #5
 800a1d0:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a1d4:	f7ff fbc1 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a1d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a1dc:	e6a4      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1de:	233a      	movs	r3, #58	@ 0x3a
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	f7ff fbba 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a1e6:	f04f 38ff 	mov.w	r8, #4294967295
 800a1ea:	e69d      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1ec:	233a      	movs	r3, #58	@ 0x3a
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff fbb1 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a1f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a1fc:	e694      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1fe:	2320      	movs	r3, #32
 800a200:	2205      	movs	r2, #5
 800a202:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff fba7 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a20c:	f04f 38ff 	mov.w	r8, #4294967295
 800a210:	e68a      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a212:	7a23      	ldrb	r3, [r4, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d17a      	bne.n	800a30e <SCSI_ProcessCmd+0x7d6>
    if (hmsc->cbw.dDataLength == 0U)
 800a218:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d048      	beq.n	800a2b2 <SCSI_ProcessCmd+0x77a>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a220:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800a224:	2b00      	cmp	r3, #0
 800a226:	db4d      	blt.n	800a2c4 <SCSI_ProcessCmd+0x78c>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a228:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	4638      	mov	r0, r7
 800a230:	4798      	blx	r3
 800a232:	2800      	cmp	r0, #0
 800a234:	d14f      	bne.n	800a2d6 <SCSI_ProcessCmd+0x79e>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a236:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800a23a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a23e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	4638      	mov	r0, r7
 800a246:	4798      	blx	r3
 800a248:	4680      	mov	r8, r0
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d14c      	bne.n	800a2e8 <SCSI_ProcessCmd+0x7b0>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a24e:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800a250:	78ea      	ldrb	r2, [r5, #3]
 800a252:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a254:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800a258:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800a25a:	431a      	orrs	r2, r3
 800a25c:	792b      	ldrb	r3, [r5, #4]
 800a25e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a262:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a266:	79e9      	ldrb	r1, [r5, #7]
                         (uint32_t)params[8];
 800a268:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a26a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a26e:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a272:	4639      	mov	r1, r7
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff fb8c 	bl	8009992 <SCSI_CheckAddressRange>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f2c0 80b2 	blt.w	800a3e4 <SCSI_ProcessCmd+0x8ac>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a280:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a284:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800a288:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800a28c:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800a290:	4293      	cmp	r3, r2
 800a292:	d132      	bne.n	800a2fa <SCSI_ProcessCmd+0x7c2>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a294:	2201      	movs	r2, #1
 800a296:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a29c:	bf28      	it	cs
 800a29e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800a2a2:	f104 0210 	add.w	r2, r4, #16
 800a2a6:	4954      	ldr	r1, [pc, #336]	@ (800a3f8 <SCSI_ProcessCmd+0x8c0>)
 800a2a8:	7809      	ldrb	r1, [r1, #0]
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f002 ff2f 	bl	800d10e <USBD_LL_PrepareReceive>
  return 0;
 800a2b0:	e63a      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2b2:	2320      	movs	r3, #32
 800a2b4:	2205      	movs	r2, #5
 800a2b6:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a2ba:	f7ff fb4e 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a2be:	f04f 38ff 	mov.w	r8, #4294967295
 800a2c2:	e631      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	2205      	movs	r2, #5
 800a2c8:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a2cc:	f7ff fb45 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a2d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a2d4:	e628      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a2d6:	233a      	movs	r3, #58	@ 0x3a
 800a2d8:	2202      	movs	r2, #2
 800a2da:	4639      	mov	r1, r7
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff fb3c 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a2e2:	f04f 38ff 	mov.w	r8, #4294967295
 800a2e6:	e61f      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a2e8:	2327      	movs	r3, #39	@ 0x27
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff fb33 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a2f4:	f04f 38ff 	mov.w	r8, #4294967295
 800a2f8:	e616      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2fa:	2320      	movs	r3, #32
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff fb29 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a308:	f04f 38ff 	mov.w	r8, #4294967295
 800a30c:	e60c      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    return SCSI_ProcessWrite(pdev, lun);
 800a30e:	4639      	mov	r1, r7
 800a310:	f7ff fbb2 	bl	8009a78 <SCSI_ProcessWrite>
 800a314:	4680      	mov	r8, r0
 800a316:	e607      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a318:	2320      	movs	r3, #32
 800a31a:	2205      	movs	r2, #5
 800a31c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a320:	f7ff fb1b 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a324:	f04f 38ff 	mov.w	r8, #4294967295
 800a328:	e5fe      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a32a:	2320      	movs	r3, #32
 800a32c:	2205      	movs	r2, #5
 800a32e:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a332:	f7ff fb12 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a336:	f04f 38ff 	mov.w	r8, #4294967295
 800a33a:	e5f5      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a33c:	233a      	movs	r3, #58	@ 0x3a
 800a33e:	2202      	movs	r2, #2
 800a340:	4639      	mov	r1, r7
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff fb09 	bl	800995a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a348:	2305      	movs	r3, #5
 800a34a:	7223      	strb	r3, [r4, #8]
      return -1;
 800a34c:	f04f 38ff 	mov.w	r8, #4294967295
 800a350:	e5ea      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a352:	2327      	movs	r3, #39	@ 0x27
 800a354:	2202      	movs	r2, #2
 800a356:	4639      	mov	r1, r7
 800a358:	4630      	mov	r0, r6
 800a35a:	f7ff fafe 	bl	800995a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a35e:	2305      	movs	r3, #5
 800a360:	7223      	strb	r3, [r4, #8]
      return -1;
 800a362:	f04f 38ff 	mov.w	r8, #4294967295
 800a366:	e5df      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a368:	2320      	movs	r3, #32
 800a36a:	2205      	movs	r2, #5
 800a36c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff faf2 	bl	800995a <SCSI_SenseCode>
      return -1;
 800a376:	f04f 38ff 	mov.w	r8, #4294967295
 800a37a:	e5d5      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    return SCSI_ProcessWrite(pdev, lun);
 800a37c:	f7ff fb7c 	bl	8009a78 <SCSI_ProcessWrite>
 800a380:	4680      	mov	r8, r0
 800a382:	e5d1      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  if ((params[1] & 0x02U) == 0x02U)
 800a384:	786b      	ldrb	r3, [r5, #1]
 800a386:	f013 0f02 	tst.w	r3, #2
 800a38a:	d10c      	bne.n	800a3a6 <SCSI_ProcessCmd+0x86e>
  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a38c:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800a390:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800a394:	4639      	mov	r1, r7
 800a396:	f7ff fafc 	bl	8009992 <SCSI_CheckAddressRange>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	db28      	blt.n	800a3f0 <SCSI_ProcessCmd+0x8b8>
  hmsc->bot_data_length = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60e3      	str	r3, [r4, #12]
  return 0;
 800a3a2:	4698      	mov	r8, r3
 800a3a4:	e5c0      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a3a6:	2324      	movs	r3, #36	@ 0x24
 800a3a8:	2205      	movs	r2, #5
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	f7ff fad5 	bl	800995a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a3b0:	f04f 38ff 	mov.w	r8, #4294967295
 800a3b4:	e5b8      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	2205      	movs	r2, #5
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff facc 	bl	800995a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	7263      	strb	r3, [r4, #9]
      ret = -1;
 800a3c6:	f04f 38ff 	mov.w	r8, #4294967295
      break;
 800a3ca:	e5ad      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    return -1;
 800a3cc:	f04f 38ff 	mov.w	r8, #4294967295
 800a3d0:	e5aa      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
  return 0;
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	e5a7      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a3d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a3dc:	e5a4      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a3de:	f04f 38ff 	mov.w	r8, #4294967295
 800a3e2:	e5a1      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a3e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a3e8:	e59e      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a3ea:	f04f 38ff 	mov.w	r8, #4294967295
 800a3ee:	e59b      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
    return -1; /* error */
 800a3f0:	f04f 38ff 	mov.w	r8, #4294967295
 800a3f4:	e598      	b.n	8009f28 <SCSI_ProcessCmd+0x3f0>
 800a3f6:	bf00      	nop
 800a3f8:	20000015 	.word	0x20000015

0800a3fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3fc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3fe:	b190      	cbz	r0, 800a426 <USBD_Init+0x2a>
 800a400:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a402:	2000      	movs	r0, #0
 800a404:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a408:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a40c:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a410:	b109      	cbz	r1, 800a416 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800a412:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a416:	2101      	movs	r1, #1
 800a418:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a41c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 fddc 	bl	800cfdc <USBD_LL_Init>

  return ret;
}
 800a424:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 800a426:	4805      	ldr	r0, [pc, #20]	@ (800a43c <USBD_Init+0x40>)
 800a428:	f002 ff3c 	bl	800d2a4 <iprintf>
 800a42c:	4804      	ldr	r0, [pc, #16]	@ (800a440 <USBD_Init+0x44>)
 800a42e:	f002 ff39 	bl	800d2a4 <iprintf>
 800a432:	200a      	movs	r0, #10
 800a434:	f002 ff48 	bl	800d2c8 <putchar>
    return USBD_FAIL;
 800a438:	2003      	movs	r0, #3
 800a43a:	e7f3      	b.n	800a424 <USBD_Init+0x28>
 800a43c:	0800f17c 	.word	0x0800f17c
 800a440:	0800f184 	.word	0x0800f184

0800a444 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a444:	b510      	push	{r4, lr}
 800a446:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800a44e:	b189      	cbz	r1, 800a474 <USBD_RegisterClass+0x30>
 800a450:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a452:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a456:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a458:	b123      	cbz	r3, 800a464 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a45a:	f10d 0006 	add.w	r0, sp, #6
 800a45e:	4798      	blx	r3
 800a460:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a464:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800a468:	3301      	adds	r3, #1
 800a46a:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800a46e:	2000      	movs	r0, #0
}
 800a470:	b002      	add	sp, #8
 800a472:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800a474:	4805      	ldr	r0, [pc, #20]	@ (800a48c <USBD_RegisterClass+0x48>)
 800a476:	f002 ff15 	bl	800d2a4 <iprintf>
 800a47a:	4805      	ldr	r0, [pc, #20]	@ (800a490 <USBD_RegisterClass+0x4c>)
 800a47c:	f002 ff12 	bl	800d2a4 <iprintf>
 800a480:	200a      	movs	r0, #10
 800a482:	f002 ff21 	bl	800d2c8 <putchar>
    return USBD_FAIL;
 800a486:	2003      	movs	r0, #3
 800a488:	e7f2      	b.n	800a470 <USBD_RegisterClass+0x2c>
 800a48a:	bf00      	nop
 800a48c:	0800f17c 	.word	0x0800f17c
 800a490:	0800f19c 	.word	0x0800f19c

0800a494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a494:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a496:	f002 fdf7 	bl	800d088 <USBD_LL_Start>
}
 800a49a:	bd08      	pop	{r3, pc}

0800a49c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a49c:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a49e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a4a2:	b113      	cbz	r3, 800a4aa <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a4a8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	e7fc      	b.n	800a4a8 <USBD_SetClassConfig+0xc>

0800a4ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ae:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800a4b8:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a4ba:	bf18      	it	ne
 800a4bc:	2003      	movne	r0, #3
 800a4be:	bd08      	pop	{r3, pc}

0800a4c0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4c4:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 f989 	bl	800a7e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4d4:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800a4d8:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4dc:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800a4e0:	f001 031f 	and.w	r3, r1, #31
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d00d      	beq.n	800a504 <USBD_LL_SetupStage+0x44>
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d010      	beq.n	800a50e <USBD_LL_SetupStage+0x4e>
 800a4ec:	b12b      	cbz	r3, 800a4fa <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4ee:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f002 fdeb 	bl	800d0ce <USBD_LL_StallEP>
      break;
 800a4f8:	e003      	b.n	800a502 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f98d 	bl	800a81c <USBD_StdDevReq>
  }

  return ret;
}
 800a502:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a504:	4629      	mov	r1, r5
 800a506:	4620      	mov	r0, r4
 800a508:	f000 fb66 	bl	800abd8 <USBD_StdItfReq>
      break;
 800a50c:	e7f9      	b.n	800a502 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a50e:	4629      	mov	r1, r5
 800a510:	4620      	mov	r0, r4
 800a512:	f000 fba2 	bl	800ac5a <USBD_StdEPReq>
      break;
 800a516:	e7f4      	b.n	800a502 <USBD_LL_SetupStage+0x42>

0800a518 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800a51c:	460d      	mov	r5, r1
 800a51e:	bb61      	cbnz	r1, 800a57a <USBD_LL_DataOutStage+0x62>
 800a520:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a522:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a526:	2a03      	cmp	r2, #3
 800a528:	d001      	beq.n	800a52e <USBD_LL_DataOutStage+0x16>
        return ret;
      }
    }
  }

  return USBD_OK;
 800a52a:	4608      	mov	r0, r1
}
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a52e:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800a532:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800a536:	4291      	cmp	r1, r2
 800a538:	d809      	bhi.n	800a54e <USBD_LL_DataOutStage+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d00f      	beq.n	800a564 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fcc9 	bl	800aedc <USBD_CtlSendStatus>
  return USBD_OK;
 800a54a:	4628      	mov	r0, r5
 800a54c:	e7ee      	b.n	800a52c <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a54e:	1a89      	subs	r1, r1, r2
 800a550:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a554:	428a      	cmp	r2, r1
 800a556:	bf28      	it	cs
 800a558:	460a      	movcs	r2, r1
 800a55a:	4619      	mov	r1, r3
 800a55c:	f000 fcb6 	bl	800aecc <USBD_CtlContinueRx>
  return USBD_OK;
 800a560:	4628      	mov	r0, r5
 800a562:	e7e3      	b.n	800a52c <USBD_LL_DataOutStage+0x14>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a564:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	d0ea      	beq.n	800a544 <USBD_LL_DataOutStage+0x2c>
              pdev->classId = idx;
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	4798      	blx	r3
 800a578:	e7e4      	b.n	800a544 <USBD_LL_DataOutStage+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b03      	cmp	r3, #3
 800a582:	d001      	beq.n	800a588 <USBD_LL_DataOutStage+0x70>
  return USBD_OK;
 800a584:	2000      	movs	r0, #0
 800a586:	e7d1      	b.n	800a52c <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 800a588:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	b12a      	cbz	r2, 800a59c <USBD_LL_DataOutStage+0x84>
          pdev->classId = idx;
 800a590:	2200      	movs	r2, #0
 800a592:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	4798      	blx	r3
      if (ret != USBD_OK)
 800a59a:	e7c7      	b.n	800a52c <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7c5      	b.n	800a52c <USBD_LL_DataOutStage+0x14>

0800a5a0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a5a4:	460d      	mov	r5, r1
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	d14c      	bne.n	800a644 <USBD_LL_DataInStage+0xa4>
 800a5aa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5ac:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a5b0:	2a02      	cmp	r2, #2
 800a5b2:	d008      	beq.n	800a5c6 <USBD_LL_DataInStage+0x26>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a5b4:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d049      	beq.n	800a650 <USBD_LL_DataInStage+0xb0>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
        }
      }
    }
  }

  return USBD_OK;
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	e044      	b.n	800a650 <USBD_LL_DataInStage+0xb0>
      if (pep->rem_length > pep->maxpacket)
 800a5c6:	69c2      	ldr	r2, [r0, #28]
 800a5c8:	6a01      	ldr	r1, [r0, #32]
 800a5ca:	428a      	cmp	r2, r1
 800a5cc:	d80e      	bhi.n	800a5ec <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 800a5ce:	428a      	cmp	r2, r1
 800a5d0:	d018      	beq.n	800a604 <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d027      	beq.n	800a62c <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5dc:	2180      	movs	r1, #128	@ 0x80
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f002 fd75 	bl	800d0ce <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fc84 	bl	800aef2 <USBD_CtlReceiveStatus>
 800a5ea:	e7e3      	b.n	800a5b4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a5ec:	1a52      	subs	r2, r2, r1
 800a5ee:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f000 fc63 	bl	800aebc <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f002 fd86 	bl	800d10e <USBD_LL_PrepareReceive>
 800a602:	e7d7      	b.n	800a5b4 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a604:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a606:	4299      	cmp	r1, r3
 800a608:	d8e3      	bhi.n	800a5d2 <USBD_LL_DataInStage+0x32>
            (pep->total_length >= pep->maxpacket) &&
 800a60a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800a60e:	4293      	cmp	r3, r2
 800a610:	d2df      	bcs.n	800a5d2 <USBD_LL_DataInStage+0x32>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a612:	2200      	movs	r2, #0
 800a614:	4611      	mov	r1, r2
 800a616:	f000 fc51 	bl	800aebc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a61a:	2100      	movs	r1, #0
 800a61c:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a620:	460b      	mov	r3, r1
 800a622:	460a      	mov	r2, r1
 800a624:	4620      	mov	r0, r4
 800a626:	f002 fd72 	bl	800d10e <USBD_LL_PrepareReceive>
 800a62a:	e7c3      	b.n	800a5b4 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a62c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	2a00      	cmp	r2, #0
 800a634:	d0d2      	beq.n	800a5dc <USBD_LL_DataInStage+0x3c>
              pdev->classId = 0U;
 800a636:	2200      	movs	r2, #0
 800a638:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	4620      	mov	r0, r4
 800a640:	4798      	blx	r3
 800a642:	e7cb      	b.n	800a5dc <USBD_LL_DataInStage+0x3c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a644:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b03      	cmp	r3, #3
 800a64c:	d001      	beq.n	800a652 <USBD_LL_DataInStage+0xb2>
  return USBD_OK;
 800a64e:	2000      	movs	r0, #0
}
 800a650:	bd38      	pop	{r3, r4, r5, pc}
        if (pdev->pClass[idx]->DataIn != NULL)
 800a652:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a656:	695a      	ldr	r2, [r3, #20]
 800a658:	b12a      	cbz	r2, 800a666 <USBD_LL_DataInStage+0xc6>
          pdev->classId = idx;
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	4798      	blx	r3
          if (ret != USBD_OK)
 800a664:	e7f4      	b.n	800a650 <USBD_LL_DataInStage+0xb0>
  return USBD_OK;
 800a666:	2000      	movs	r0, #0
 800a668:	e7f2      	b.n	800a650 <USBD_LL_DataInStage+0xb0>

0800a66a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a66e:	2301      	movs	r3, #1
 800a670:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a674:	2300      	movs	r3, #0
 800a676:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a67a:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a67c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a680:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a684:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a688:	b1e3      	cbz	r3, 800a6c4 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	b1e3      	cbz	r3, 800a6c8 <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a68e:	2100      	movs	r1, #0
 800a690:	4798      	blx	r3
      {
        ret = USBD_FAIL;
 800a692:	1e05      	subs	r5, r0, #0
 800a694:	bf18      	it	ne
 800a696:	2503      	movne	r5, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a698:	2340      	movs	r3, #64	@ 0x40
 800a69a:	2200      	movs	r2, #0
 800a69c:	4611      	mov	r1, r2
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f002 fcfa 	bl	800d098 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6a4:	2701      	movs	r7, #1
 800a6a6:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6aa:	2640      	movs	r6, #64	@ 0x40
 800a6ac:	f8c4 6160 	str.w	r6, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6b0:	4633      	mov	r3, r6
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2180      	movs	r1, #128	@ 0x80
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f002 fcee 	bl	800d098 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6bc:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6be:	6226      	str	r6, [r4, #32]

  return ret;
}
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c4:	2500      	movs	r5, #0
 800a6c6:	e7e7      	b.n	800a698 <USBD_LL_Reset+0x2e>
 800a6c8:	2500      	movs	r5, #0
 800a6ca:	e7e5      	b.n	800a698 <USBD_LL_Reset+0x2e>

0800a6cc <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a6cc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a6d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b04      	cmp	r3, #4
 800a6da:	d004      	beq.n	800a6e6 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a6dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6e6:	2304      	movs	r3, #4
 800a6e8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	4770      	bx	lr

0800a6f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d001      	beq.n	800a6fe <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a6fe:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800a708:	e7f7      	b.n	800a6fa <USBD_LL_Resume+0xa>

0800a70a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a70a:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d001      	beq.n	800a71a <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800a716:	2000      	movs	r0, #0
 800a718:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800a71a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0f9      	beq.n	800a716 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0f6      	beq.n	800a716 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800a728:	4798      	blx	r3
 800a72a:	e7f4      	b.n	800a716 <USBD_LL_SOF+0xc>

0800a72c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a72c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a72e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a732:	33ae      	adds	r3, #174	@ 0xae
 800a734:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a738:	b15a      	cbz	r2, 800a752 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b03      	cmp	r3, #3
 800a742:	d001      	beq.n	800a748 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a744:	2000      	movs	r0, #0
}
 800a746:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a748:	6a13      	ldr	r3, [r2, #32]
 800a74a:	b123      	cbz	r3, 800a756 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a74c:	4798      	blx	r3
  return USBD_OK;
 800a74e:	2000      	movs	r0, #0
 800a750:	e7f9      	b.n	800a746 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800a752:	2003      	movs	r0, #3
 800a754:	e7f7      	b.n	800a746 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 800a756:	2000      	movs	r0, #0
 800a758:	e7f5      	b.n	800a746 <USBD_LL_IsoINIncomplete+0x1a>

0800a75a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a75a:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a75c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a760:	33ae      	adds	r3, #174	@ 0xae
 800a762:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a766:	b15a      	cbz	r2, 800a780 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a768:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d001      	beq.n	800a776 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a772:	2000      	movs	r0, #0
}
 800a774:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a776:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800a778:	b123      	cbz	r3, 800a784 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a77a:	4798      	blx	r3
  return USBD_OK;
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7f9      	b.n	800a774 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800a780:	2003      	movs	r0, #3
 800a782:	e7f7      	b.n	800a774 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 800a784:	2000      	movs	r0, #0
 800a786:	e7f5      	b.n	800a774 <USBD_LL_IsoOUTIncomplete+0x1a>

0800a788 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800a788:	2000      	movs	r0, #0
 800a78a:	4770      	bx	lr

0800a78c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a78c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a78e:	2301      	movs	r3, #1
 800a790:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a794:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a798:	b133      	cbz	r3, 800a7a8 <USBD_LL_DevDisconnected+0x1c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	7901      	ldrb	r1, [r0, #4]
 800a79e:	4798      	blx	r3
    {
      ret = USBD_FAIL;
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	bf18      	it	ne
 800a7a4:	2003      	movne	r0, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a7a6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	e7fc      	b.n	800a7a6 <USBD_LL_DevDisconnected+0x1a>

0800a7ac <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr

0800a7b0 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	4770      	bx	lr

0800a7b4 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a7b4:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800a7b8:	7803      	ldrb	r3, [r0, #0]
 800a7ba:	459c      	cmp	ip, r3
 800a7bc:	d803      	bhi.n	800a7c6 <USBD_GetEpDesc+0x12>
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a7be:	2000      	movs	r0, #0
      }
    }
  }

  return (void *)pEpDesc;
}
 800a7c0:	4770      	bx	lr
    while (ptr < desc->wTotalLength)
 800a7c2:	459c      	cmp	ip, r3
 800a7c4:	d90a      	bls.n	800a7dc <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800a7c6:	7802      	ldrb	r2, [r0, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	b29b      	uxth	r3, r3
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7cc:	4410      	add	r0, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a7ce:	7842      	ldrb	r2, [r0, #1]
 800a7d0:	2a05      	cmp	r2, #5
 800a7d2:	d1f6      	bne.n	800a7c2 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800a7d4:	7882      	ldrb	r2, [r0, #2]
 800a7d6:	428a      	cmp	r2, r1
 800a7d8:	d1f3      	bne.n	800a7c2 <USBD_GetEpDesc+0xe>
 800a7da:	e7f1      	b.n	800a7c0 <USBD_GetEpDesc+0xc>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	4770      	bx	lr

0800a7e0 <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800a7e0:	780b      	ldrb	r3, [r1, #0]
 800a7e2:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800a7e4:	784b      	ldrb	r3, [r1, #1]
 800a7e6:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7e8:	78ca      	ldrb	r2, [r1, #3]
 800a7ea:	788b      	ldrb	r3, [r1, #2]
 800a7ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800a7f0:	8043      	strh	r3, [r0, #2]
 800a7f2:	794a      	ldrb	r2, [r1, #5]
 800a7f4:	790b      	ldrb	r3, [r1, #4]
 800a7f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800a7fa:	8083      	strh	r3, [r0, #4]
 800a7fc:	79ca      	ldrb	r2, [r1, #7]
 800a7fe:	798b      	ldrb	r3, [r1, #6]
 800a800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800a804:	80c3      	strh	r3, [r0, #6]
}
 800a806:	4770      	bx	lr

0800a808 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a808:	b510      	push	{r4, lr}
 800a80a:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a80c:	2180      	movs	r1, #128	@ 0x80
 800a80e:	f002 fc5e 	bl	800d0ce <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a812:	2100      	movs	r1, #0
 800a814:	4620      	mov	r0, r4
 800a816:	f002 fc5a 	bl	800d0ce <USBD_LL_StallEP>
}
 800a81a:	bd10      	pop	{r4, pc}

0800a81c <USBD_StdDevReq>:
{
 800a81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a81e:	b083      	sub	sp, #12
 800a820:	4607      	mov	r7, r0
 800a822:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a824:	780c      	ldrb	r4, [r1, #0]
 800a826:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a82a:	2c20      	cmp	r4, #32
 800a82c:	d006      	beq.n	800a83c <USBD_StdDevReq+0x20>
 800a82e:	2c40      	cmp	r4, #64	@ 0x40
 800a830:	d004      	beq.n	800a83c <USBD_StdDevReq+0x20>
 800a832:	b184      	cbz	r4, 800a856 <USBD_StdDevReq+0x3a>
      USBD_CtlError(pdev, req);
 800a834:	f7ff ffe8 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a838:	2400      	movs	r4, #0
      break;
 800a83a:	e009      	b.n	800a850 <USBD_StdDevReq+0x34>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a83c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800a840:	33ae      	adds	r3, #174	@ 0xae
 800a842:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	4631      	mov	r1, r6
 800a84a:	4638      	mov	r0, r7
 800a84c:	4798      	blx	r3
 800a84e:	4604      	mov	r4, r0
}
 800a850:	4620      	mov	r0, r4
 800a852:	b003      	add	sp, #12
 800a854:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800a856:	784d      	ldrb	r5, [r1, #1]
 800a858:	2d09      	cmp	r5, #9
 800a85a:	f200 81b8 	bhi.w	800abce <USBD_StdDevReq+0x3b2>
 800a85e:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a862:	0172      	.short	0x0172
 800a864:	01b601a4 	.word	0x01b601a4
 800a868:	01b60190 	.word	0x01b60190
 800a86c:	000a00ca 	.word	0x000a00ca
 800a870:	015201b6 	.word	0x015201b6
 800a874:	00f1      	.short	0x00f1
  uint16_t len = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a87c:	884a      	ldrh	r2, [r1, #2]
 800a87e:	0a13      	lsrs	r3, r2, #8
 800a880:	3b01      	subs	r3, #1
 800a882:	2b06      	cmp	r3, #6
 800a884:	f200 80aa 	bhi.w	800a9dc <USBD_StdDevReq+0x1c0>
 800a888:	e8df f003 	tbb	[pc, r3]
 800a88c:	a8321e04 	.word	0xa8321e04
 800a890:	8ca8      	.short	0x8ca8
 800a892:	99          	.byte	0x99
 800a893:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a894:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f10d 0106 	add.w	r1, sp, #6
 800a89e:	7c00      	ldrb	r0, [r0, #16]
 800a8a0:	4798      	blx	r3
  if (req->wLength != 0U)
 800a8a2:	88f3      	ldrh	r3, [r6, #6]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80a2 	beq.w	800a9ee <USBD_StdDevReq+0x1d2>
    if (len != 0U)
 800a8aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	f000 8098 	beq.w	800a9e4 <USBD_StdDevReq+0x1c8>
      len = MIN(len, req->wLength);
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	bf28      	it	cs
 800a8b8:	461a      	movcs	r2, r3
 800a8ba:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f000 faee 	bl	800aea2 <USBD_CtlSendData>
 800a8c6:	e7c3      	b.n	800a850 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c8:	7c03      	ldrb	r3, [r0, #16]
 800a8ca:	b943      	cbnz	r3, 800a8de <USBD_StdDevReq+0xc2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d2:	f10d 0006 	add.w	r0, sp, #6
 800a8d6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8d8:	2302      	movs	r3, #2
 800a8da:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a8dc:	e7e1      	b.n	800a8a2 <USBD_StdDevReq+0x86>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a8de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e4:	f10d 0006 	add.w	r0, sp, #6
 800a8e8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a8ee:	e7d8      	b.n	800a8a2 <USBD_StdDevReq+0x86>
      switch ((uint8_t)(req->wValue))
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	2a05      	cmp	r2, #5
 800a8f4:	d852      	bhi.n	800a99c <USBD_StdDevReq+0x180>
 800a8f6:	e8df f002 	tbb	[pc, r2]
 800a8fa:	1003      	.short	0x1003
 800a8fc:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a900:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	b123      	cbz	r3, 800a912 <USBD_StdDevReq+0xf6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a908:	f10d 0106 	add.w	r1, sp, #6
 800a90c:	7c00      	ldrb	r0, [r0, #16]
 800a90e:	4798      	blx	r3
  if (err != 0U)
 800a910:	e7c7      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a912:	4631      	mov	r1, r6
 800a914:	f7ff ff78 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a918:	e79a      	b.n	800a850 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a91a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	b123      	cbz	r3, 800a92c <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a922:	f10d 0106 	add.w	r1, sp, #6
 800a926:	7c00      	ldrb	r0, [r0, #16]
 800a928:	4798      	blx	r3
  if (err != 0U)
 800a92a:	e7ba      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a92c:	4631      	mov	r1, r6
 800a92e:	f7ff ff6b 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a932:	e78d      	b.n	800a850 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a934:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	b123      	cbz	r3, 800a946 <USBD_StdDevReq+0x12a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a93c:	f10d 0106 	add.w	r1, sp, #6
 800a940:	7c00      	ldrb	r0, [r0, #16]
 800a942:	4798      	blx	r3
  if (err != 0U)
 800a944:	e7ad      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a946:	4631      	mov	r1, r6
 800a948:	f7ff ff5e 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a94c:	e780      	b.n	800a850 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a94e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	b123      	cbz	r3, 800a960 <USBD_StdDevReq+0x144>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a956:	f10d 0106 	add.w	r1, sp, #6
 800a95a:	7c00      	ldrb	r0, [r0, #16]
 800a95c:	4798      	blx	r3
  if (err != 0U)
 800a95e:	e7a0      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a960:	4631      	mov	r1, r6
 800a962:	f7ff ff51 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a966:	e773      	b.n	800a850 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a968:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	b123      	cbz	r3, 800a97a <USBD_StdDevReq+0x15e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a970:	f10d 0106 	add.w	r1, sp, #6
 800a974:	7c00      	ldrb	r0, [r0, #16]
 800a976:	4798      	blx	r3
  if (err != 0U)
 800a978:	e793      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a97a:	4631      	mov	r1, r6
 800a97c:	f7ff ff44 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a980:	e766      	b.n	800a850 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a982:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	b123      	cbz	r3, 800a994 <USBD_StdDevReq+0x178>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a98a:	f10d 0106 	add.w	r1, sp, #6
 800a98e:	7c00      	ldrb	r0, [r0, #16]
 800a990:	4798      	blx	r3
  if (err != 0U)
 800a992:	e786      	b.n	800a8a2 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a994:	4631      	mov	r1, r6
 800a996:	f7ff ff37 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a99a:	e759      	b.n	800a850 <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800a99c:	4631      	mov	r1, r6
 800a99e:	f7ff ff33 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a9a2:	e755      	b.n	800a850 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9a4:	7c03      	ldrb	r3, [r0, #16]
 800a9a6:	b933      	cbnz	r3, 800a9b6 <USBD_StdDevReq+0x19a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	f10d 0006 	add.w	r0, sp, #6
 800a9b2:	4798      	blx	r3
  if (err != 0U)
 800a9b4:	e775      	b.n	800a8a2 <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	f7ff ff26 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a9bc:	e748      	b.n	800a850 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9be:	7c03      	ldrb	r3, [r0, #16]
 800a9c0:	b943      	cbnz	r3, 800a9d4 <USBD_StdDevReq+0x1b8>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a9c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c8:	f10d 0006 	add.w	r0, sp, #6
 800a9cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9ce:	2307      	movs	r3, #7
 800a9d0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a9d2:	e766      	b.n	800a8a2 <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	f7ff ff17 	bl	800a808 <USBD_CtlError>
  if (err != 0U)
 800a9da:	e739      	b.n	800a850 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800a9dc:	4631      	mov	r1, r6
 800a9de:	f7ff ff13 	bl	800a808 <USBD_CtlError>
    return;
 800a9e2:	e735      	b.n	800a850 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7ff ff0e 	bl	800a808 <USBD_CtlError>
 800a9ec:	e730      	b.n	800a850 <USBD_StdDevReq+0x34>
    (void)USBD_CtlSendStatus(pdev);
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f000 fa74 	bl	800aedc <USBD_CtlSendStatus>
 800a9f4:	e72c      	b.n	800a850 <USBD_StdDevReq+0x34>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9f6:	888b      	ldrh	r3, [r1, #4]
 800a9f8:	b9fb      	cbnz	r3, 800aa3a <USBD_StdDevReq+0x21e>
 800a9fa:	88cb      	ldrh	r3, [r1, #6]
 800a9fc:	b9eb      	cbnz	r3, 800aa3a <USBD_StdDevReq+0x21e>
 800a9fe:	884b      	ldrh	r3, [r1, #2]
 800aa00:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa02:	d81a      	bhi.n	800aa3a <USBD_StdDevReq+0x21e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa04:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	2a03      	cmp	r2, #3
 800aa0c:	d00d      	beq.n	800aa2a <USBD_StdDevReq+0x20e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa0e:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 800aa10:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa14:	4629      	mov	r1, r5
 800aa16:	f002 fb6a 	bl	800d0ee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f000 fa5e 	bl	800aedc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800aa20:	b135      	cbz	r5, 800aa30 <USBD_StdDevReq+0x214>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa22:	2302      	movs	r3, #2
 800aa24:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800aa28:	e712      	b.n	800a850 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800aa2a:	f7ff feed 	bl	800a808 <USBD_CtlError>
 800aa2e:	e70f      	b.n	800a850 <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800aa36:	462c      	mov	r4, r5
 800aa38:	e70a      	b.n	800a850 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff fee3 	bl	800a808 <USBD_CtlError>
 800aa42:	e705      	b.n	800a850 <USBD_StdDevReq+0x34>
  cfgidx = (uint8_t)(req->wValue);
 800aa44:	788d      	ldrb	r5, [r1, #2]
 800aa46:	4b63      	ldr	r3, [pc, #396]	@ (800abd4 <USBD_StdDevReq+0x3b8>)
 800aa48:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa4a:	2d01      	cmp	r5, #1
 800aa4c:	d80f      	bhi.n	800aa6e <USBD_StdDevReq+0x252>
  switch (pdev->dev_state)
 800aa4e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d00e      	beq.n	800aa76 <USBD_StdDevReq+0x25a>
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d026      	beq.n	800aaaa <USBD_StdDevReq+0x28e>
      USBD_CtlError(pdev, req);
 800aa5c:	f7ff fed4 	bl	800a808 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa60:	4b5c      	ldr	r3, [pc, #368]	@ (800abd4 <USBD_StdDevReq+0x3b8>)
 800aa62:	7819      	ldrb	r1, [r3, #0]
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fd22 	bl	800a4ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa6a:	2403      	movs	r4, #3
      break;
 800aa6c:	e6f0      	b.n	800a850 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800aa6e:	f7ff fecb 	bl	800a808 <USBD_CtlError>
    return USBD_FAIL;
 800aa72:	2403      	movs	r4, #3
 800aa74:	e6ec      	b.n	800a850 <USBD_StdDevReq+0x34>
      if (cfgidx != 0U)
 800aa76:	b1a5      	cbz	r5, 800aaa2 <USBD_StdDevReq+0x286>
        pdev->dev_config = cfgidx;
 800aa78:	2101      	movs	r1, #1
 800aa7a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa7c:	f7ff fd0e 	bl	800a49c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800aa80:	4604      	mov	r4, r0
 800aa82:	b138      	cbz	r0, 800aa94 <USBD_StdDevReq+0x278>
          USBD_CtlError(pdev, req);
 800aa84:	4631      	mov	r1, r6
 800aa86:	4638      	mov	r0, r7
 800aa88:	f7ff febe 	bl	800a808 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800aa92:	e6dd      	b.n	800a850 <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800aa94:	4638      	mov	r0, r7
 800aa96:	f000 fa21 	bl	800aedc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800aaa0:	e6d6      	b.n	800a850 <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800aaa2:	f000 fa1b 	bl	800aedc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800aaa6:	462c      	mov	r4, r5
 800aaa8:	e6d2      	b.n	800a850 <USBD_StdDevReq+0x34>
      if (cfgidx == 0U)
 800aaaa:	b1cd      	cbz	r5, 800aae0 <USBD_StdDevReq+0x2c4>
      else if (cfgidx != pdev->dev_config)
 800aaac:	6841      	ldr	r1, [r0, #4]
 800aaae:	2901      	cmp	r1, #1
 800aab0:	d026      	beq.n	800ab00 <USBD_StdDevReq+0x2e4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aab2:	b2c9      	uxtb	r1, r1
 800aab4:	f7ff fcfb 	bl	800a4ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aab8:	4b46      	ldr	r3, [pc, #280]	@ (800abd4 <USBD_StdDevReq+0x3b8>)
 800aaba:	7819      	ldrb	r1, [r3, #0]
 800aabc:	6079      	str	r1, [r7, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7ff fcec 	bl	800a49c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800aac4:	4604      	mov	r4, r0
 800aac6:	b1b8      	cbz	r0, 800aaf8 <USBD_StdDevReq+0x2dc>
          USBD_CtlError(pdev, req);
 800aac8:	4631      	mov	r1, r6
 800aaca:	4638      	mov	r0, r7
 800aacc:	f7ff fe9c 	bl	800a808 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aad0:	7939      	ldrb	r1, [r7, #4]
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7ff fceb 	bl	800a4ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad8:	2302      	movs	r3, #2
 800aada:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800aade:	e6b7      	b.n	800a850 <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aae0:	2302      	movs	r3, #2
 800aae2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aae6:	2100      	movs	r1, #0
 800aae8:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aaea:	f7ff fce0 	bl	800a4ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f000 f9f4 	bl	800aedc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800aaf4:	462c      	mov	r4, r5
 800aaf6:	e6ab      	b.n	800a850 <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f000 f9ef 	bl	800aedc <USBD_CtlSendStatus>
 800aafe:	e6a7      	b.n	800a850 <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800ab00:	f000 f9ec 	bl	800aedc <USBD_CtlSendStatus>
 800ab04:	e6a4      	b.n	800a850 <USBD_StdDevReq+0x34>
  if (req->wLength != 1U)
 800ab06:	88cb      	ldrh	r3, [r1, #6]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d10b      	bne.n	800ab24 <USBD_StdDevReq+0x308>
    switch (pdev->dev_state)
 800ab0c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d909      	bls.n	800ab2a <USBD_StdDevReq+0x30e>
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d108      	bne.n	800ab2c <USBD_StdDevReq+0x310>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	1d01      	adds	r1, r0, #4
 800ab1e:	f000 f9c0 	bl	800aea2 <USBD_CtlSendData>
        break;
 800ab22:	e695      	b.n	800a850 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800ab24:	f7ff fe70 	bl	800a808 <USBD_CtlError>
 800ab28:	e692      	b.n	800a850 <USBD_StdDevReq+0x34>
    switch (pdev->dev_state)
 800ab2a:	b923      	cbnz	r3, 800ab36 <USBD_StdDevReq+0x31a>
        USBD_CtlError(pdev, req);
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f7ff fe6a 	bl	800a808 <USBD_CtlError>
        break;
 800ab34:	e68c      	b.n	800a850 <USBD_StdDevReq+0x34>
        pdev->dev_default_config = 0U;
 800ab36:	4601      	mov	r1, r0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f000 f9af 	bl	800aea2 <USBD_CtlSendData>
        break;
 800ab44:	e684      	b.n	800a850 <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800ab46:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d814      	bhi.n	800ab7a <USBD_StdDevReq+0x35e>
      if (req->wLength != 0x2U)
 800ab50:	88cb      	ldrh	r3, [r1, #6]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d10d      	bne.n	800ab72 <USBD_StdDevReq+0x356>
      if (pdev->dev_remote_wakeup != 0U)
 800ab56:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	bf0c      	ite	eq
 800ab5e:	2301      	moveq	r3, #1
 800ab60:	2303      	movne	r3, #3
 800ab62:	4601      	mov	r1, r0
 800ab64:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab68:	2202      	movs	r2, #2
 800ab6a:	f000 f99a 	bl	800aea2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6e:	462c      	mov	r4, r5
      break;
 800ab70:	e66e      	b.n	800a850 <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800ab72:	f7ff fe49 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	462c      	mov	r4, r5
        break;
 800ab78:	e66a      	b.n	800a850 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800ab7a:	f7ff fe45 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7e:	462c      	mov	r4, r5
      break;
 800ab80:	e666      	b.n	800a850 <USBD_StdDevReq+0x34>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab82:	884b      	ldrh	r3, [r1, #2]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d004      	beq.n	800ab92 <USBD_StdDevReq+0x376>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d007      	beq.n	800ab9c <USBD_StdDevReq+0x380>
    USBD_CtlError(pdev, req);
 800ab8c:	f7ff fe3c 	bl	800a808 <USBD_CtlError>
 800ab90:	e65e      	b.n	800a850 <USBD_StdDevReq+0x34>
    pdev->dev_remote_wakeup = 1U;
 800ab92:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab96:	f000 f9a1 	bl	800aedc <USBD_CtlSendStatus>
 800ab9a:	e659      	b.n	800a850 <USBD_StdDevReq+0x34>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ab9c:	888b      	ldrh	r3, [r1, #4]
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aba4:	f000 f99a 	bl	800aedc <USBD_CtlSendStatus>
 800aba8:	e652      	b.n	800a850 <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800abaa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800abae:	3b01      	subs	r3, #1
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d809      	bhi.n	800abc8 <USBD_StdDevReq+0x3ac>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abb4:	884b      	ldrh	r3, [r1, #2]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	f47f ae4a 	bne.w	800a850 <USBD_StdDevReq+0x34>
        pdev->dev_remote_wakeup = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800abc2:	f000 f98b 	bl	800aedc <USBD_CtlSendStatus>
 800abc6:	e643      	b.n	800a850 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800abc8:	f7ff fe1e 	bl	800a808 <USBD_CtlError>
      break;
 800abcc:	e640      	b.n	800a850 <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800abce:	f7ff fe1b 	bl	800a808 <USBD_CtlError>
          break;
 800abd2:	e63d      	b.n	800a850 <USBD_StdDevReq+0x34>
 800abd4:	2000145c 	.word	0x2000145c

0800abd8 <USBD_StdItfReq>:
{
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abde:	780b      	ldrb	r3, [r1, #0]
 800abe0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800abe4:	d008      	beq.n	800abf8 <USBD_StdItfReq+0x20>
 800abe6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800abea:	2a40      	cmp	r2, #64	@ 0x40
 800abec:	d004      	beq.n	800abf8 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800abee:	f7ff fe0b 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800abf2:	2600      	movs	r6, #0
}
 800abf4:	4630      	mov	r0, r6
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800abf8:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800abfc:	3b01      	subs	r3, #1
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d821      	bhi.n	800ac46 <USBD_StdItfReq+0x6e>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac02:	7921      	ldrb	r1, [r4, #4]
 800ac04:	2901      	cmp	r1, #1
 800ac06:	d905      	bls.n	800ac14 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7ff fdfc 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac10:	2600      	movs	r6, #0
 800ac12:	e7ef      	b.n	800abf4 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7ff fdc9 	bl	800a7ac <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac1a:	b9d0      	cbnz	r0, 800ac52 <USBD_StdItfReq+0x7a>
              if (pdev->pClass[idx]->Setup != NULL)
 800ac1c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	b1c2      	cbz	r2, 800ac56 <USBD_StdItfReq+0x7e>
                pdev->classId = idx;
 800ac24:	2200      	movs	r2, #0
 800ac26:	f8c5 22d4 	str.w	r2, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	4628      	mov	r0, r5
 800ac30:	4798      	blx	r3
 800ac32:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac34:	88e3      	ldrh	r3, [r4, #6]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1dc      	bne.n	800abf4 <USBD_StdItfReq+0x1c>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d1da      	bne.n	800abf4 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f000 f94c 	bl	800aedc <USBD_CtlSendStatus>
 800ac44:	e7d6      	b.n	800abf4 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800ac46:	4621      	mov	r1, r4
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f7ff fddd 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4e:	2600      	movs	r6, #0
          break;
 800ac50:	e7d0      	b.n	800abf4 <USBD_StdItfReq+0x1c>
 800ac52:	2603      	movs	r6, #3
 800ac54:	e7ce      	b.n	800abf4 <USBD_StdItfReq+0x1c>
 800ac56:	2603      	movs	r6, #3
 800ac58:	e7cc      	b.n	800abf4 <USBD_StdItfReq+0x1c>

0800ac5a <USBD_StdEPReq>:
{
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800ac62:	888b      	ldrh	r3, [r1, #4]
 800ac64:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac66:	780c      	ldrb	r4, [r1, #0]
 800ac68:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800ac6c:	2c20      	cmp	r4, #32
 800ac6e:	d008      	beq.n	800ac82 <USBD_StdEPReq+0x28>
 800ac70:	2c40      	cmp	r4, #64	@ 0x40
 800ac72:	d006      	beq.n	800ac82 <USBD_StdEPReq+0x28>
 800ac74:	b1d4      	cbz	r4, 800acac <USBD_StdEPReq+0x52>
      USBD_CtlError(pdev, req);
 800ac76:	f7ff fdc7 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7a:	2400      	movs	r4, #0
}
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac82:	4639      	mov	r1, r7
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7ff fd93 	bl	800a7b0 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f040 80db 	bne.w	800ae48 <USBD_StdEPReq+0x1ee>
        pdev->classId = idx;
 800ac92:	2300      	movs	r3, #0
 800ac94:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800ac98:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0ec      	beq.n	800ac7c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aca2:	4629      	mov	r1, r5
 800aca4:	4630      	mov	r0, r6
 800aca6:	4798      	blx	r3
 800aca8:	4604      	mov	r4, r0
 800acaa:	e7e7      	b.n	800ac7c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800acac:	f891 8001 	ldrb.w	r8, [r1, #1]
 800acb0:	f1b8 0f01 	cmp.w	r8, #1
 800acb4:	d030      	beq.n	800ad18 <USBD_StdEPReq+0xbe>
 800acb6:	f1b8 0f03 	cmp.w	r8, #3
 800acba:	d005      	beq.n	800acc8 <USBD_StdEPReq+0x6e>
 800acbc:	f1b8 0f00 	cmp.w	r8, #0
 800acc0:	d063      	beq.n	800ad8a <USBD_StdEPReq+0x130>
          USBD_CtlError(pdev, req);
 800acc2:	f7ff fda1 	bl	800a808 <USBD_CtlError>
          break;
 800acc6:	e7d9      	b.n	800ac7c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800acc8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d004      	beq.n	800acdc <USBD_StdEPReq+0x82>
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d011      	beq.n	800acfa <USBD_StdEPReq+0xa0>
              USBD_CtlError(pdev, req);
 800acd6:	f7ff fd97 	bl	800a808 <USBD_CtlError>
              break;
 800acda:	e7cf      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acdc:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800ace0:	d007      	beq.n	800acf2 <USBD_StdEPReq+0x98>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ace2:	4639      	mov	r1, r7
 800ace4:	f002 f9f3 	bl	800d0ce <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace8:	2180      	movs	r1, #128	@ 0x80
 800acea:	4630      	mov	r0, r6
 800acec:	f002 f9ef 	bl	800d0ce <USBD_LL_StallEP>
 800acf0:	e7c4      	b.n	800ac7c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800acf2:	f7ff fd89 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800acf6:	4644      	mov	r4, r8
 800acf8:	e7c0      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acfa:	884b      	ldrh	r3, [r1, #2]
 800acfc:	b923      	cbnz	r3, 800ad08 <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acfe:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800ad02:	d001      	beq.n	800ad08 <USBD_StdEPReq+0xae>
 800ad04:	88cb      	ldrh	r3, [r1, #6]
 800ad06:	b11b      	cbz	r3, 800ad10 <USBD_StdEPReq+0xb6>
              (void)USBD_CtlSendStatus(pdev);
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 f8e7 	bl	800aedc <USBD_CtlSendStatus>
              break;
 800ad0e:	e7b5      	b.n	800ac7c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad10:	4639      	mov	r1, r7
 800ad12:	f002 f9dc 	bl	800d0ce <USBD_LL_StallEP>
 800ad16:	e7f7      	b.n	800ad08 <USBD_StdEPReq+0xae>
          switch (pdev->dev_state)
 800ad18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d004      	beq.n	800ad2c <USBD_StdEPReq+0xd2>
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d011      	beq.n	800ad4a <USBD_StdEPReq+0xf0>
              USBD_CtlError(pdev, req);
 800ad26:	f7ff fd6f 	bl	800a808 <USBD_CtlError>
              break;
 800ad2a:	e7a7      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad2c:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800ad30:	d007      	beq.n	800ad42 <USBD_StdEPReq+0xe8>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad32:	4639      	mov	r1, r7
 800ad34:	f002 f9cb 	bl	800d0ce <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad38:	2180      	movs	r1, #128	@ 0x80
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f002 f9c7 	bl	800d0ce <USBD_LL_StallEP>
 800ad40:	e79c      	b.n	800ac7c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800ad42:	f7ff fd61 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad46:	4644      	mov	r4, r8
 800ad48:	e798      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4a:	884b      	ldrh	r3, [r1, #2]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d195      	bne.n	800ac7c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad50:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800ad54:	d115      	bne.n	800ad82 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800ad56:	4630      	mov	r0, r6
 800ad58:	f000 f8c0 	bl	800aedc <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff fd26 	bl	800a7b0 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d189      	bne.n	800ac7c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad6e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d069      	beq.n	800ae4c <USBD_StdEPReq+0x1f2>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	4798      	blx	r3
 800ad7e:	4604      	mov	r4, r0
 800ad80:	e77c      	b.n	800ac7c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad82:	4639      	mov	r1, r7
 800ad84:	f002 f9ab 	bl	800d0de <USBD_LL_ClearStallEP>
 800ad88:	e7e5      	b.n	800ad56 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 800ad8a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	2a02      	cmp	r2, #2
 800ad92:	d005      	beq.n	800ada0 <USBD_StdEPReq+0x146>
 800ad94:	2a03      	cmp	r2, #3
 800ad96:	d017      	beq.n	800adc8 <USBD_StdEPReq+0x16e>
              USBD_CtlError(pdev, req);
 800ad98:	f7ff fd36 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9c:	4644      	mov	r4, r8
              break;
 800ad9e:	e76d      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ada0:	f017 047f 	ands.w	r4, r7, #127	@ 0x7f
 800ada4:	d003      	beq.n	800adae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ada6:	f7ff fd2f 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800adaa:	4644      	mov	r4, r8
                break;
 800adac:	e766      	b.n	800ac7c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adb2:	bf14      	ite	ne
 800adb4:	f100 0114 	addne.w	r1, r0, #20
 800adb8:	f500 71aa 	addeq.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adc0:	2202      	movs	r2, #2
 800adc2:	f000 f86e 	bl	800aea2 <USBD_CtlSendData>
              break;
 800adc6:	e759      	b.n	800ac7c <USBD_StdEPReq+0x22>
              if ((ep_addr & 0x80U) == 0x80U)
 800adc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adcc:	d11b      	bne.n	800ae06 <USBD_StdEPReq+0x1ac>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adce:	f007 030f 	and.w	r3, r7, #15
 800add2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800add6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800adda:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800adde:	b333      	cbz	r3, 800ae2e <USBD_StdEPReq+0x1d4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ade0:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ade4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ade8:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800adec:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adf0:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800adf4:	d01f      	beq.n	800ae36 <USBD_StdEPReq+0x1dc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adf6:	4639      	mov	r1, r7
 800adf8:	4630      	mov	r0, r6
 800adfa:	f002 f923 	bl	800d044 <USBD_LL_IsStallEP>
 800adfe:	3800      	subs	r0, #0
 800ae00:	bf18      	it	ne
 800ae02:	2001      	movne	r0, #1
 800ae04:	e018      	b.n	800ae38 <USBD_StdEPReq+0x1de>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae06:	f007 030f 	and.w	r3, r7, #15
 800ae0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ae12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ae14:	b13b      	cbz	r3, 800ae26 <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae16:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
 800ae1a:	3401      	adds	r4, #1
 800ae1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ae20:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ae24:	e7e4      	b.n	800adf0 <USBD_StdEPReq+0x196>
                  USBD_CtlError(pdev, req);
 800ae26:	f7ff fcef 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae2a:	4644      	mov	r4, r8
                  break;
 800ae2c:	e726      	b.n	800ac7c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800ae2e:	f7ff fceb 	bl	800a808 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	4644      	mov	r4, r8
                  break;
 800ae34:	e722      	b.n	800ac7c <USBD_StdEPReq+0x22>
 800ae36:	2000      	movs	r0, #0
                pep->status = 0x0000U;
 800ae38:	6020      	str	r0, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f000 f82f 	bl	800aea2 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae44:	4644      	mov	r4, r8
              break;
 800ae46:	e719      	b.n	800ac7c <USBD_StdEPReq+0x22>
  USBD_StatusTypeDef ret = USBD_OK;
 800ae48:	2400      	movs	r4, #0
 800ae4a:	e717      	b.n	800ac7c <USBD_StdEPReq+0x22>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	e715      	b.n	800ac7c <USBD_StdEPReq+0x22>

0800ae50 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800ae50:	b330      	cbz	r0, 800aea0 <USBD_GetString+0x50>
{
 800ae52:	b410      	push	{r4}
 800ae54:	4684      	mov	ip, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ae56:	7800      	ldrb	r0, [r0, #0]
 800ae58:	b148      	cbz	r0, 800ae6e <USBD_GetString+0x1e>
  uint8_t *pbuff = buf;
 800ae5a:	4663      	mov	r3, ip
  {
    len++;
    pbuff++;
 800ae5c:	4618      	mov	r0, r3
  while (*pbuff != (uint8_t)'\0')
 800ae5e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	d1fa      	bne.n	800ae5c <USBD_GetString+0xc>
    len++;
 800ae66:	f1cc 0301 	rsb	r3, ip, #1
 800ae6a:	4418      	add	r0, r3
 800ae6c:	b2c0      	uxtb	r0, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ae6e:	0040      	lsls	r0, r0, #1
 800ae70:	3002      	adds	r0, #2
 800ae72:	8010      	strh	r0, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800ae74:	7008      	strb	r0, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae76:	2303      	movs	r3, #3
 800ae78:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800ae7a:	f89c 2000 	ldrb.w	r2, [ip]
 800ae7e:	b162      	cbz	r2, 800ae9a <USBD_GetString+0x4a>
 800ae80:	4660      	mov	r0, ip
  idx++;
 800ae82:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800ae84:	2400      	movs	r4, #0
    unicode[idx] = *pdesc;
 800ae86:	54ca      	strb	r2, [r1, r3]
    idx++;
 800ae88:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800ae8a:	b2d2      	uxtb	r2, r2
 800ae8c:	548c      	strb	r4, [r1, r2]
    idx++;
 800ae8e:	3302      	adds	r3, #2
 800ae90:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800ae92:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d1f5      	bne.n	800ae86 <USBD_GetString+0x36>
}
 800ae9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	4770      	bx	lr

0800aea2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aea2:	b508      	push	{r3, lr}
 800aea4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aea6:	2202      	movs	r2, #2
 800aea8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aeac:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aeae:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeb0:	460a      	mov	r2, r1
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	f002 f923 	bl	800d0fe <USBD_LL_Transmit>

  return USBD_OK;
}
 800aeb8:	2000      	movs	r0, #0
 800aeba:	bd08      	pop	{r3, pc}

0800aebc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aebc:	b508      	push	{r3, lr}
 800aebe:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aec0:	460a      	mov	r2, r1
 800aec2:	2100      	movs	r1, #0
 800aec4:	f002 f91b 	bl	800d0fe <USBD_LL_Transmit>

  return USBD_OK;
}
 800aec8:	2000      	movs	r0, #0
 800aeca:	bd08      	pop	{r3, pc}

0800aecc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aecc:	b508      	push	{r3, lr}
 800aece:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aed0:	460a      	mov	r2, r1
 800aed2:	2100      	movs	r1, #0
 800aed4:	f002 f91b 	bl	800d10e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800aed8:	2000      	movs	r0, #0
 800aeda:	bd08      	pop	{r3, pc}

0800aedc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aedc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aede:	2204      	movs	r2, #4
 800aee0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aee4:	2300      	movs	r3, #0
 800aee6:	461a      	mov	r2, r3
 800aee8:	4619      	mov	r1, r3
 800aeea:	f002 f908 	bl	800d0fe <USBD_LL_Transmit>

  return USBD_OK;
}
 800aeee:	2000      	movs	r0, #0
 800aef0:	bd08      	pop	{r3, pc}

0800aef2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aef2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aef4:	2205      	movs	r2, #5
 800aef6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aefa:	2300      	movs	r3, #0
 800aefc:	461a      	mov	r2, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	f002 f905 	bl	800d10e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800af04:	2000      	movs	r0, #0
 800af06:	bd08      	pop	{r3, pc}

0800af08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800af08:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af0a:	4b04      	ldr	r3, [pc, #16]	@ (800af1c <disk_status+0x14>)
 800af0c:	181a      	adds	r2, r3, r0
 800af0e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	7a10      	ldrb	r0, [r2, #8]
 800af18:	4798      	blx	r3
  return stat;
}
 800af1a:	bd08      	pop	{r3, pc}
 800af1c:	20001488 	.word	0x20001488

0800af20 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800af20:	4b09      	ldr	r3, [pc, #36]	@ (800af48 <disk_initialize+0x28>)
 800af22:	5c1b      	ldrb	r3, [r3, r0]
 800af24:	b973      	cbnz	r3, 800af44 <disk_initialize+0x24>
{
 800af26:	b510      	push	{r4, lr}
 800af28:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800af2a:	4b07      	ldr	r3, [pc, #28]	@ (800af48 <disk_initialize+0x28>)
 800af2c:	181a      	adds	r2, r3, r0
 800af2e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	7a10      	ldrb	r0, [r2, #8]
 800af38:	4798      	blx	r3
    if(stat == RES_OK)
 800af3a:	b910      	cbnz	r0, 800af42 <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 800af3c:	4b02      	ldr	r3, [pc, #8]	@ (800af48 <disk_initialize+0x28>)
 800af3e:	2201      	movs	r2, #1
 800af40:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800af42:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800af44:	2000      	movs	r0, #0
}
 800af46:	4770      	bx	lr
 800af48:	20001488 	.word	0x20001488

0800af4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800af4c:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800af4e:	4c05      	ldr	r4, [pc, #20]	@ (800af64 <disk_read+0x18>)
 800af50:	eb04 0c00 	add.w	ip, r4, r0
 800af54:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800af58:	6860      	ldr	r0, [r4, #4]
 800af5a:	6884      	ldr	r4, [r0, #8]
 800af5c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800af60:	47a0      	blx	r4
  return res;
}
 800af62:	bd10      	pop	{r4, pc}
 800af64:	20001488 	.word	0x20001488

0800af68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af68:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af6a:	4c05      	ldr	r4, [pc, #20]	@ (800af80 <disk_write+0x18>)
 800af6c:	eb04 0c00 	add.w	ip, r4, r0
 800af70:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800af74:	6860      	ldr	r0, [r4, #4]
 800af76:	68c4      	ldr	r4, [r0, #12]
 800af78:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800af7c:	47a0      	blx	r4
  return res;
}
 800af7e:	bd10      	pop	{r4, pc}
 800af80:	20001488 	.word	0x20001488

0800af84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af84:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af86:	4b05      	ldr	r3, [pc, #20]	@ (800af9c <disk_ioctl+0x18>)
 800af88:	eb03 0c00 	add.w	ip, r3, r0
 800af8c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800af98:	4798      	blx	r3
  return res;
}
 800af9a:	bd08      	pop	{r3, pc}
 800af9c:	20001488 	.word	0x20001488

0800afa0 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800afa0:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800afa2:	7882      	ldrb	r2, [r0, #2]
 800afa4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800afa8:	7843      	ldrb	r3, [r0, #1]
 800afaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800afae:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800afb0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800afb4:	4770      	bx	lr

0800afb6 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800afb6:	7001      	strb	r1, [r0, #0]
 800afb8:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800afba:	7043      	strb	r3, [r0, #1]
 800afbc:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800afbe:	7083      	strb	r3, [r0, #2]
 800afc0:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 800afc2:	70c1      	strb	r1, [r0, #3]
}
 800afc4:	4770      	bx	lr

0800afc6 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800afc6:	b13a      	cbz	r2, 800afd8 <mem_cpy+0x12>
 800afc8:	3801      	subs	r0, #1
 800afca:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 800afcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afd0:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800afd4:	4291      	cmp	r1, r2
 800afd6:	d1f9      	bne.n	800afcc <mem_cpy+0x6>
	}
}
 800afd8:	4770      	bx	lr

0800afda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800afda:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800afdc:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800afe0:	4290      	cmp	r0, r2
 800afe2:	d1fb      	bne.n	800afdc <mem_set+0x2>
}
 800afe4:	4770      	bx	lr
	...

0800afe8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800afe8:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800afea:	4b22      	ldr	r3, [pc, #136]	@ (800b074 <chk_lock+0x8c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	b1f3      	cbz	r3, 800b02e <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aff0:	6802      	ldr	r2, [r0, #0]
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d00d      	beq.n	800b012 <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aff6:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 800aff8:	4b1e      	ldr	r3, [pc, #120]	@ (800b074 <chk_lock+0x8c>)
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	b32b      	cbz	r3, 800b04a <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800affe:	6804      	ldr	r4, [r0, #0]
 800b000:	42a3      	cmp	r3, r4
 800b002:	d016      	beq.n	800b032 <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b004:	2a00      	cmp	r2, #0
 800b006:	d131      	bne.n	800b06c <chk_lock+0x84>
 800b008:	2902      	cmp	r1, #2
 800b00a:	bf14      	ite	ne
 800b00c:	2012      	movne	r0, #18
 800b00e:	2000      	moveq	r0, #0
 800b010:	e029      	b.n	800b066 <chk_lock+0x7e>
				Files[i].clu == dp->obj.sclust &&
 800b012:	4b18      	ldr	r3, [pc, #96]	@ (800b074 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	6883      	ldr	r3, [r0, #8]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d001      	beq.n	800b020 <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b01c:	2200      	movs	r2, #0
 800b01e:	e7eb      	b.n	800aff8 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 800b020:	4b14      	ldr	r3, [pc, #80]	@ (800b074 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800b022:	689a      	ldr	r2, [r3, #8]
 800b024:	6943      	ldr	r3, [r0, #20]
 800b026:	429a      	cmp	r2, r3
 800b028:	d011      	beq.n	800b04e <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b02a:	2200      	movs	r2, #0
 800b02c:	e7e4      	b.n	800aff8 <chk_lock+0x10>
			be = 1;
 800b02e:	2201      	movs	r2, #1
 800b030:	e7e2      	b.n	800aff8 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800b032:	4b10      	ldr	r3, [pc, #64]	@ (800b074 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b034:	695c      	ldr	r4, [r3, #20]
 800b036:	6883      	ldr	r3, [r0, #8]
 800b038:	429c      	cmp	r4, r3
 800b03a:	d1e3      	bne.n	800b004 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 800b03c:	4b0d      	ldr	r3, [pc, #52]	@ (800b074 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800b03e:	699c      	ldr	r4, [r3, #24]
 800b040:	6943      	ldr	r3, [r0, #20]
 800b042:	429c      	cmp	r4, r3
 800b044:	d1de      	bne.n	800b004 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b046:	2201      	movs	r2, #1
 800b048:	e002      	b.n	800b050 <chk_lock+0x68>
			be = 1;
 800b04a:	2201      	movs	r2, #1
 800b04c:	e7da      	b.n	800b004 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b04e:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b050:	b971      	cbnz	r1, 800b070 <chk_lock+0x88>
 800b052:	4b08      	ldr	r3, [pc, #32]	@ (800b074 <chk_lock+0x8c>)
 800b054:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800b058:	8998      	ldrh	r0, [r3, #12]
 800b05a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b05e:	bf14      	ite	ne
 800b060:	2000      	movne	r0, #0
 800b062:	2001      	moveq	r0, #1
 800b064:	0100      	lsls	r0, r0, #4
}
 800b066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b06a:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7fa      	b.n	800b066 <chk_lock+0x7e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b070:	2010      	movs	r0, #16
 800b072:	e7f8      	b.n	800b066 <chk_lock+0x7e>
 800b074:	20001460 	.word	0x20001460

0800b078 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b078:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800b07a:	6802      	ldr	r2, [r0, #0]
 800b07c:	4b2b      	ldr	r3, [pc, #172]	@ (800b12c <inc_lock+0xb4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d00c      	beq.n	800b09e <inc_lock+0x26>
 800b084:	4c29      	ldr	r4, [pc, #164]	@ (800b12c <inc_lock+0xb4>)
 800b086:	6924      	ldr	r4, [r4, #16]
 800b088:	4294      	cmp	r4, r2
 800b08a:	d024      	beq.n	800b0d6 <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b08c:	f04f 0c00 	mov.w	ip, #0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d02f      	beq.n	800b0f4 <inc_lock+0x7c>
 800b094:	4b25      	ldr	r3, [pc, #148]	@ (800b12c <inc_lock+0xb4>)
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	b353      	cbz	r3, 800b0f0 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b09a:	2000      	movs	r0, #0
 800b09c:	e019      	b.n	800b0d2 <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 800b09e:	4c23      	ldr	r4, [pc, #140]	@ (800b12c <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800b0a0:	6865      	ldr	r5, [r4, #4]
 800b0a2:	6884      	ldr	r4, [r0, #8]
 800b0a4:	42a5      	cmp	r5, r4
 800b0a6:	d1ed      	bne.n	800b084 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 800b0a8:	4c20      	ldr	r4, [pc, #128]	@ (800b12c <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800b0aa:	68a5      	ldr	r5, [r4, #8]
 800b0ac:	6944      	ldr	r4, [r0, #20]
 800b0ae:	42a5      	cmp	r5, r4
 800b0b0:	d1e8      	bne.n	800b084 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b0b2:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	d12d      	bne.n	800b116 <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b12c <inc_lock+0xb4>)
 800b0bc:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800b0c0:	899b      	ldrh	r3, [r3, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4a19      	ldr	r2, [pc, #100]	@ (800b12c <inc_lock+0xb4>)
 800b0c8:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800b0cc:	8193      	strh	r3, [r2, #12]

	return i + 1;
 800b0ce:	f10c 0001 	add.w	r0, ip, #1
}
 800b0d2:	bc30      	pop	{r4, r5}
 800b0d4:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 800b0d6:	4c15      	ldr	r4, [pc, #84]	@ (800b12c <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800b0d8:	6965      	ldr	r5, [r4, #20]
 800b0da:	6884      	ldr	r4, [r0, #8]
 800b0dc:	42a5      	cmp	r5, r4
 800b0de:	d1d5      	bne.n	800b08c <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 800b0e0:	4c12      	ldr	r4, [pc, #72]	@ (800b12c <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800b0e2:	69a5      	ldr	r5, [r4, #24]
 800b0e4:	6944      	ldr	r4, [r0, #20]
 800b0e6:	42a5      	cmp	r5, r4
 800b0e8:	d1d0      	bne.n	800b08c <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b0ea:	f04f 0c01 	mov.w	ip, #1
 800b0ee:	e7e2      	b.n	800b0b6 <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b0f0:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 800b0f4:	4d0d      	ldr	r5, [pc, #52]	@ (800b12c <inc_lock+0xb4>)
 800b0f6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800b0fa:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800b0fe:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800b100:	6882      	ldr	r2, [r0, #8]
 800b102:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 800b104:	6942      	ldr	r2, [r0, #20]
 800b106:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 800b108:	2200      	movs	r2, #0
 800b10a:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d0d4      	beq.n	800b0ba <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b114:	e7d7      	b.n	800b0c6 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b116:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <inc_lock+0xb4>)
 800b118:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800b11c:	899b      	ldrh	r3, [r3, #12]
 800b11e:	b913      	cbnz	r3, 800b126 <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b124:	e7cf      	b.n	800b0c6 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b126:	2000      	movs	r0, #0
 800b128:	e7d3      	b.n	800b0d2 <inc_lock+0x5a>
 800b12a:	bf00      	nop
 800b12c:	20001460 	.word	0x20001460

0800b130 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b130:	3801      	subs	r0, #1
 800b132:	2801      	cmp	r0, #1
 800b134:	d810      	bhi.n	800b158 <dec_lock+0x28>
		n = Files[i].ctr;
 800b136:	4b0e      	ldr	r3, [pc, #56]	@ (800b170 <dec_lock+0x40>)
 800b138:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b13c:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b13e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b142:	d00b      	beq.n	800b15c <dec_lock+0x2c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800b144:	b17b      	cbz	r3, 800b166 <dec_lock+0x36>
 800b146:	3b01      	subs	r3, #1
 800b148:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800b14a:	4a09      	ldr	r2, [pc, #36]	@ (800b170 <dec_lock+0x40>)
 800b14c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800b150:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b152:	b143      	cbz	r3, 800b166 <dec_lock+0x36>
		res = FR_OK;
 800b154:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 800b156:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b158:	2002      	movs	r0, #2
 800b15a:	4770      	bx	lr
		Files[i].ctr = n;
 800b15c:	4b04      	ldr	r3, [pc, #16]	@ (800b170 <dec_lock+0x40>)
 800b15e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b162:	2200      	movs	r2, #0
 800b164:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b166:	0103      	lsls	r3, r0, #4
 800b168:	2000      	movs	r0, #0
 800b16a:	4a01      	ldr	r2, [pc, #4]	@ (800b170 <dec_lock+0x40>)
 800b16c:	50d0      	str	r0, [r2, r3]
 800b16e:	4770      	bx	lr
 800b170:	20001460 	.word	0x20001460

0800b174 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b174:	4b08      	ldr	r3, [pc, #32]	@ (800b198 <clear_lock+0x24>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4298      	cmp	r0, r3
 800b17a:	d004      	beq.n	800b186 <clear_lock+0x12>
 800b17c:	4b06      	ldr	r3, [pc, #24]	@ (800b198 <clear_lock+0x24>)
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	4283      	cmp	r3, r0
 800b182:	d004      	beq.n	800b18e <clear_lock+0x1a>
	}
}
 800b184:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b186:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <clear_lock+0x24>)
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	e7f6      	b.n	800b17c <clear_lock+0x8>
 800b18e:	4b02      	ldr	r3, [pc, #8]	@ (800b198 <clear_lock+0x24>)
 800b190:	2200      	movs	r2, #0
 800b192:	611a      	str	r2, [r3, #16]
}
 800b194:	e7f6      	b.n	800b184 <clear_lock+0x10>
 800b196:	bf00      	nop
 800b198:	20001460 	.word	0x20001460

0800b19c <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800b19c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b19e:	6983      	ldr	r3, [r0, #24]
 800b1a0:	3b02      	subs	r3, #2
 800b1a2:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800b1a4:	bf83      	ittte	hi
 800b1a6:	8943      	ldrhhi	r3, [r0, #10]
 800b1a8:	6ac0      	ldrhi	r0, [r0, #44]	@ 0x2c
 800b1aa:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b1ae:	2000      	movls	r0, #0
}
 800b1b0:	4770      	bx	lr

0800b1b2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b1b2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b1b4:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b1b6:	0a49      	lsrs	r1, r1, #9
 800b1b8:	6800      	ldr	r0, [r0, #0]
 800b1ba:	8940      	ldrh	r0, [r0, #10]
 800b1bc:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1c0:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1c2:	b148      	cbz	r0, 800b1d8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b1c4:	4281      	cmp	r1, r0
 800b1c6:	d305      	bcc.n	800b1d4 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1c8:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1ca:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d1f8      	bne.n	800b1c4 <clmt_clust+0x12>
 800b1d2:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1d4:	6858      	ldr	r0, [r3, #4]
 800b1d6:	4408      	add	r0, r1
}
 800b1d8:	4770      	bx	lr

0800b1da <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b1da:	4602      	mov	r2, r0
	BYTE sum = 0;
	UINT n = 11;
 800b1dc:	f100 0c0b 	add.w	ip, r0, #11
	BYTE sum = 0;
 800b1e0:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b1e2:	01c3      	lsls	r3, r0, #7
 800b1e4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800b1e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b1ec:	fa51 f383 	uxtab	r3, r1, r3
 800b1f0:	b2d8      	uxtb	r0, r3
	} while (--n);
 800b1f2:	4562      	cmp	r2, ip
 800b1f4:	d1f5      	bne.n	800b1e2 <sum_sfn+0x8>
	return sum;
}
 800b1f6:	4770      	bx	lr

0800b1f8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b1f8:	6801      	ldr	r1, [r0, #0]
 800b1fa:	b301      	cbz	r1, 800b23e <get_ldnumber+0x46>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b1fc:	f891 c000 	ldrb.w	ip, [r1]
 800b200:	f1bc 0f1f 	cmp.w	ip, #31
 800b204:	d90b      	bls.n	800b21e <get_ldnumber+0x26>
 800b206:	460a      	mov	r2, r1
 800b208:	4663      	mov	r3, ip
 800b20a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b20c:	d00a      	beq.n	800b224 <get_ldnumber+0x2c>
 800b20e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b212:	2b1f      	cmp	r3, #31
 800b214:	d8f9      	bhi.n	800b20a <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b216:	2b3a      	cmp	r3, #58	@ 0x3a
 800b218:	d004      	beq.n	800b224 <get_ldnumber+0x2c>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b21a:	2000      	movs	r0, #0
 800b21c:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b21e:	460a      	mov	r2, r1
 800b220:	4663      	mov	r3, ip
 800b222:	e7f8      	b.n	800b216 <get_ldnumber+0x1e>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b224:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b228:	d10c      	bne.n	800b244 <get_ldnumber+0x4c>
			i = *tp++ - '0';
 800b22a:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b22c:	428a      	cmp	r2, r1
 800b22e:	d002      	beq.n	800b236 <get_ldnumber+0x3e>
	int vol = -1;
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 800b234:	4770      	bx	lr
					*path = ++tt;
 800b236:	3201      	adds	r2, #1
 800b238:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 800b23a:	2000      	movs	r0, #0
 800b23c:	4770      	bx	lr
	int vol = -1;
 800b23e:	f04f 30ff 	mov.w	r0, #4294967295
 800b242:	4770      	bx	lr
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	4770      	bx	lr

0800b24a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b24a:	b538      	push	{r3, r4, r5, lr}
 800b24c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b24e:	4604      	mov	r4, r0
 800b250:	b198      	cbz	r0, 800b27a <validate+0x30>
 800b252:	6803      	ldr	r3, [r0, #0]
 800b254:	b19b      	cbz	r3, 800b27e <validate+0x34>
 800b256:	781a      	ldrb	r2, [r3, #0]
 800b258:	b1a2      	cbz	r2, 800b284 <validate+0x3a>
 800b25a:	8881      	ldrh	r1, [r0, #4]
 800b25c:	88da      	ldrh	r2, [r3, #6]
 800b25e:	4291      	cmp	r1, r2
 800b260:	d003      	beq.n	800b26a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800b262:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b264:	2400      	movs	r4, #0
 800b266:	602c      	str	r4, [r5, #0]
	return res;
}
 800b268:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b26a:	7858      	ldrb	r0, [r3, #1]
 800b26c:	f7ff fe4c 	bl	800af08 <disk_status>
 800b270:	f010 0001 	ands.w	r0, r0, #1
 800b274:	d109      	bne.n	800b28a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b276:	6824      	ldr	r4, [r4, #0]
 800b278:	e7f5      	b.n	800b266 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800b27a:	2009      	movs	r0, #9
 800b27c:	e7f3      	b.n	800b266 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b27e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800b280:	2009      	movs	r0, #9
 800b282:	e7f0      	b.n	800b266 <validate+0x1c>
 800b284:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b286:	2400      	movs	r4, #0
 800b288:	e7ed      	b.n	800b266 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800b28a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b28c:	2400      	movs	r4, #0
 800b28e:	e7ea      	b.n	800b266 <validate+0x1c>

0800b290 <sync_window>:
{
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b294:	78c5      	ldrb	r5, [r0, #3]
 800b296:	b915      	cbnz	r5, 800b29e <sync_window+0xe>
}
 800b298:	4628      	mov	r0, r5
 800b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b29e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800b2a0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b2a2:	f100 0834 	add.w	r8, r0, #52	@ 0x34
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	7840      	ldrb	r0, [r0, #1]
 800b2ae:	f7ff fe5b 	bl	800af68 <disk_write>
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	b9b8      	cbnz	r0, 800b2e6 <sync_window+0x56>
			fs->wflag = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b2ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b2bc:	1af3      	subs	r3, r6, r3
 800b2be:	69e2      	ldr	r2, [r4, #28]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d2e9      	bcs.n	800b298 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b2c4:	78a7      	ldrb	r7, [r4, #2]
 800b2c6:	2f01      	cmp	r7, #1
 800b2c8:	d9e6      	bls.n	800b298 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 800b2ca:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 800b2ce:	69e3      	ldr	r3, [r4, #28]
 800b2d0:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	4632      	mov	r2, r6
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	7860      	ldrb	r0, [r4, #1]
 800b2da:	f7ff fe45 	bl	800af68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b2de:	3f01      	subs	r7, #1
 800b2e0:	2f01      	cmp	r7, #1
 800b2e2:	d1f4      	bne.n	800b2ce <sync_window+0x3e>
 800b2e4:	e7d8      	b.n	800b298 <sync_window+0x8>
			res = FR_DISK_ERR;
 800b2e6:	2501      	movs	r5, #1
 800b2e8:	e7d6      	b.n	800b298 <sync_window+0x8>

0800b2ea <move_window>:
{
 800b2ea:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b2ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b2ee:	428b      	cmp	r3, r1
 800b2f0:	d101      	bne.n	800b2f6 <move_window+0xc>
	FRESULT res = FR_OK;
 800b2f2:	2000      	movs	r0, #0
}
 800b2f4:	bd38      	pop	{r3, r4, r5, pc}
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800b2fa:	f7ff ffc9 	bl	800b290 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1f8      	bne.n	800b2f4 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b302:	2301      	movs	r3, #1
 800b304:	462a      	mov	r2, r5
 800b306:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800b30a:	7860      	ldrb	r0, [r4, #1]
 800b30c:	f7ff fe1e 	bl	800af4c <disk_read>
				res = FR_DISK_ERR;
 800b310:	2800      	cmp	r0, #0
 800b312:	bf1c      	itt	ne
 800b314:	2001      	movne	r0, #1
 800b316:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800b31a:	6325      	str	r5, [r4, #48]	@ 0x30
 800b31c:	e7ea      	b.n	800b2f4 <move_window+0xa>

0800b31e <get_fileinfo>:
{
 800b31e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800b322:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800b326:	2300      	movs	r3, #0
 800b328:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b32a:	69c3      	ldr	r3, [r0, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d079      	beq.n	800b424 <get_fileinfo+0x106>
 800b330:	4605      	mov	r5, r0
 800b332:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b334:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33a:	d01d      	beq.n	800b378 <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b33c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b340:	8818      	ldrh	r0, [r3, #0]
 800b342:	b198      	cbz	r0, 800b36c <get_fileinfo+0x4e>
 800b344:	f101 0715 	add.w	r7, r1, #21
			i = j = 0;
 800b348:	2600      	movs	r6, #0
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b34a:	46b1      	mov	r9, r6
 800b34c:	4649      	mov	r1, r9
 800b34e:	f001 fc01 	bl	800cb54 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b352:	b168      	cbz	r0, 800b370 <get_fileinfo+0x52>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b354:	2eff      	cmp	r6, #255	@ 0xff
 800b356:	d015      	beq.n	800b384 <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 800b358:	3601      	adds	r6, #1
 800b35a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b362:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800b366:	2800      	cmp	r0, #0
 800b368:	d1f0      	bne.n	800b34c <get_fileinfo+0x2e>
 800b36a:	e002      	b.n	800b372 <get_fileinfo+0x54>
			i = j = 0;
 800b36c:	2600      	movs	r6, #0
 800b36e:	e000      	b.n	800b372 <get_fileinfo+0x54>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b370:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b372:	4426      	add	r6, r4
 800b374:	2300      	movs	r3, #0
 800b376:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b378:	7da0      	ldrb	r0, [r4, #22]
	i = j = 0;
 800b37a:	f04f 0c00 	mov.w	ip, #0
 800b37e:	4662      	mov	r2, ip
			fno->altname[j++] = '.';
 800b380:	262e      	movs	r6, #46	@ 0x2e
 800b382:	e013      	b.n	800b3ac <get_fileinfo+0x8e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b384:	2600      	movs	r6, #0
 800b386:	e7f4      	b.n	800b372 <get_fileinfo+0x54>
			if (!lfv) fno->fname[j] = '.';
 800b388:	b918      	cbnz	r0, 800b392 <get_fileinfo+0x74>
 800b38a:	eb04 010c 	add.w	r1, r4, ip
 800b38e:	272e      	movs	r7, #46	@ 0x2e
 800b390:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800b392:	eb04 010c 	add.w	r1, r4, ip
 800b396:	724e      	strb	r6, [r1, #9]
 800b398:	f10c 0c01 	add.w	ip, ip, #1
 800b39c:	e010      	b.n	800b3c0 <get_fileinfo+0xa2>
			fno->fname[j] = c;
 800b39e:	eb04 010c 	add.w	r1, r4, ip
 800b3a2:	758b      	strb	r3, [r1, #22]
		j++;
 800b3a4:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800b3a8:	2a0b      	cmp	r2, #11
 800b3aa:	d01e      	beq.n	800b3ea <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[i++];
 800b3ac:	6a29      	ldr	r1, [r5, #32]
 800b3ae:	5c8b      	ldrb	r3, [r1, r2]
 800b3b0:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800b3b2:	2b20      	cmp	r3, #32
 800b3b4:	d0f8      	beq.n	800b3a8 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	bf08      	it	eq
 800b3ba:	23e5      	moveq	r3, #229	@ 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800b3bc:	2a09      	cmp	r2, #9
 800b3be:	d0e3      	beq.n	800b388 <get_fileinfo+0x6a>
		fno->altname[j] = c;
 800b3c0:	eb04 010c 	add.w	r1, r4, ip
 800b3c4:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d1ec      	bne.n	800b3a4 <get_fileinfo+0x86>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b3ca:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 800b3ce:	b2c9      	uxtb	r1, r1
 800b3d0:	2919      	cmp	r1, #25
 800b3d2:	d8e4      	bhi.n	800b39e <get_fileinfo+0x80>
 800b3d4:	6a29      	ldr	r1, [r5, #32]
 800b3d6:	7b0f      	ldrb	r7, [r1, #12]
 800b3d8:	2a09      	cmp	r2, #9
 800b3da:	bf34      	ite	cc
 800b3dc:	2108      	movcc	r1, #8
 800b3de:	2110      	movcs	r1, #16
 800b3e0:	420f      	tst	r7, r1
				c += 0x20;			/* To lower */
 800b3e2:	bf1c      	itt	ne
 800b3e4:	3320      	addne	r3, #32
 800b3e6:	b2db      	uxtbne	r3, r3
 800b3e8:	e7d9      	b.n	800b39e <get_fileinfo+0x80>
	if (!lfv) {
 800b3ea:	b940      	cbnz	r0, 800b3fe <get_fileinfo+0xe0>
		fno->fname[j] = 0;
 800b3ec:	eb04 030c 	add.w	r3, r4, ip
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	759a      	strb	r2, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b3f4:	6a2b      	ldr	r3, [r5, #32]
 800b3f6:	7b1b      	ldrb	r3, [r3, #12]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	bf08      	it	eq
 800b3fc:	4694      	moveq	ip, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b3fe:	44a4      	add	ip, r4
 800b400:	2300      	movs	r3, #0
 800b402:	f88c 3009 	strb.w	r3, [ip, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b406:	6a2b      	ldr	r3, [r5, #32]
 800b408:	7adb      	ldrb	r3, [r3, #11]
 800b40a:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b40c:	6a28      	ldr	r0, [r5, #32]
 800b40e:	301c      	adds	r0, #28
 800b410:	f7ff fdc6 	bl	800afa0 <ld_dword>
 800b414:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b416:	6a28      	ldr	r0, [r5, #32]
 800b418:	3016      	adds	r0, #22
 800b41a:	f7ff fdc1 	bl	800afa0 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b41e:	80e0      	strh	r0, [r4, #6]
 800b420:	0c00      	lsrs	r0, r0, #16
 800b422:	80a0      	strh	r0, [r4, #4]
}
 800b424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b428 <sync_fs>:
{
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800b42c:	f7ff ff30 	bl	800b290 <sync_window>
	if (res == FR_OK) {
 800b430:	b950      	cbnz	r0, 800b448 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b432:	7823      	ldrb	r3, [r4, #0]
 800b434:	2b03      	cmp	r3, #3
 800b436:	d008      	beq.n	800b44a <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b438:	2200      	movs	r2, #0
 800b43a:	4611      	mov	r1, r2
 800b43c:	7860      	ldrb	r0, [r4, #1]
 800b43e:	f7ff fda1 	bl	800af84 <disk_ioctl>
 800b442:	3800      	subs	r0, #0
 800b444:	bf18      	it	ne
 800b446:	2001      	movne	r0, #1
}
 800b448:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b44a:	7923      	ldrb	r3, [r4, #4]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d1f3      	bne.n	800b438 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 800b450:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800b454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b458:	2100      	movs	r1, #0
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7ff fdbd 	bl	800afda <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800b460:	2355      	movs	r3, #85	@ 0x55
 800b462:	f884 3232 	strb.w	r3, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val;
 800b466:	23aa      	movs	r3, #170	@ 0xaa
 800b468:	f884 3233 	strb.w	r3, [r4, #563]	@ 0x233
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b46c:	490e      	ldr	r1, [pc, #56]	@ (800b4a8 <sync_fs+0x80>)
 800b46e:	4628      	mov	r0, r5
 800b470:	f7ff fda1 	bl	800afb6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b474:	490d      	ldr	r1, [pc, #52]	@ (800b4ac <sync_fs+0x84>)
 800b476:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800b47a:	f7ff fd9c 	bl	800afb6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b47e:	6961      	ldr	r1, [r4, #20]
 800b480:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800b484:	f7ff fd97 	bl	800afb6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b488:	6921      	ldr	r1, [r4, #16]
 800b48a:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800b48e:	f7ff fd92 	bl	800afb6 <st_dword>
			fs->winsect = fs->volbase + 1;
 800b492:	6a22      	ldr	r2, [r4, #32]
 800b494:	3201      	adds	r2, #1
 800b496:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b498:	2301      	movs	r3, #1
 800b49a:	4629      	mov	r1, r5
 800b49c:	7860      	ldrb	r0, [r4, #1]
 800b49e:	f7ff fd63 	bl	800af68 <disk_write>
			fs->fsi_flag = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	7123      	strb	r3, [r4, #4]
 800b4a6:	e7c7      	b.n	800b438 <sync_fs+0x10>
 800b4a8:	41615252 	.word	0x41615252
 800b4ac:	61417272 	.word	0x61417272

0800b4b0 <put_fat>:
{
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4b4:	2901      	cmp	r1, #1
 800b4b6:	f240 8089 	bls.w	800b5cc <put_fat+0x11c>
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460c      	mov	r4, r1
 800b4be:	4615      	mov	r5, r2
 800b4c0:	6983      	ldr	r3, [r0, #24]
 800b4c2:	428b      	cmp	r3, r1
 800b4c4:	f240 8084 	bls.w	800b5d0 <put_fat+0x120>
		switch (fs->fs_type) {
 800b4c8:	7803      	ldrb	r3, [r0, #0]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d04d      	beq.n	800b56a <put_fat+0xba>
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d060      	beq.n	800b594 <put_fat+0xe4>
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d003      	beq.n	800b4de <put_fat+0x2e>
 800b4d6:	2702      	movs	r7, #2
}
 800b4d8:	4638      	mov	r0, r7
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b4de:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4e2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b4e4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b4e8:	f7ff feff 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d1f2      	bne.n	800b4d8 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 800b4f2:	f106 0934 	add.w	r9, r6, #52	@ 0x34
 800b4f6:	f108 0a01 	add.w	sl, r8, #1
 800b4fa:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b4fe:	f014 0f01 	tst.w	r4, #1
 800b502:	d01a      	beq.n	800b53a <put_fat+0x8a>
 800b504:	f819 3008 	ldrb.w	r3, [r9, r8]
 800b508:	f003 030f 	and.w	r3, r3, #15
 800b50c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800b510:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800b514:	2301      	movs	r3, #1
 800b516:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b518:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b51a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff fee3 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800b524:	2800      	cmp	r0, #0
 800b526:	d155      	bne.n	800b5d4 <put_fat+0x124>
			p = fs->win + bc % SS(fs);
 800b528:	f3ca 0108 	ubfx	r1, sl, #0, #9
 800b52c:	4449      	add	r1, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b52e:	f3c5 1307 	ubfx	r3, r5, #4, #8
 800b532:	700b      	strb	r3, [r1, #0]
			fs->wflag = 1;
 800b534:	2301      	movs	r3, #1
 800b536:	70f3      	strb	r3, [r6, #3]
			break;
 800b538:	e7ce      	b.n	800b4d8 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b53a:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 800b53e:	2301      	movs	r3, #1
 800b540:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b542:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b544:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff fece 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800b54e:	2800      	cmp	r0, #0
 800b550:	d142      	bne.n	800b5d8 <put_fat+0x128>
			p = fs->win + bc % SS(fs);
 800b552:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800b556:	eb09 010a 	add.w	r1, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b55a:	f819 300a 	ldrb.w	r3, [r9, sl]
 800b55e:	f023 030f 	bic.w	r3, r3, #15
 800b562:	f3c5 2203 	ubfx	r2, r5, #8, #4
 800b566:	4313      	orrs	r3, r2
 800b568:	e7e3      	b.n	800b532 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b56a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b56c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b570:	f7ff febb 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800b574:	4607      	mov	r7, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	d1ae      	bne.n	800b4d8 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b57a:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800b57e:	0064      	lsls	r4, r4, #1
 800b580:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800b584:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800b586:	551d      	strb	r5, [r3, r4]
 800b588:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 800b58c:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800b58e:	2301      	movs	r3, #1
 800b590:	70f3      	strb	r3, [r6, #3]
			break;
 800b592:	e7a1      	b.n	800b4d8 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b594:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b596:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b59a:	f7ff fea6 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800b59e:	4607      	mov	r7, r0
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d199      	bne.n	800b4d8 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b5a4:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 800b5a8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800b5ac:	00a4      	lsls	r4, r4, #2
 800b5ae:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800b5b2:	441c      	add	r4, r3
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f7ff fcf3 	bl	800afa0 <ld_dword>
 800b5ba:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b5be:	4329      	orrs	r1, r5
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7ff fcf8 	bl	800afb6 <st_dword>
			fs->wflag = 1;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	70f3      	strb	r3, [r6, #3]
			break;
 800b5ca:	e785      	b.n	800b4d8 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 800b5cc:	2702      	movs	r7, #2
 800b5ce:	e783      	b.n	800b4d8 <put_fat+0x28>
 800b5d0:	2702      	movs	r7, #2
 800b5d2:	e781      	b.n	800b4d8 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	e77f      	b.n	800b4d8 <put_fat+0x28>
 800b5d8:	4607      	mov	r7, r0
	return res;
 800b5da:	e77d      	b.n	800b4d8 <put_fat+0x28>

0800b5dc <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800b5dc:	768a      	strb	r2, [r1, #26]
 800b5de:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 800b5e2:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800b5e4:	7803      	ldrb	r3, [r0, #0]
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d000      	beq.n	800b5ec <st_clust+0x10>
}
 800b5ea:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5ec:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b5ee:	750a      	strb	r2, [r1, #20]
 800b5f0:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800b5f2:	754a      	strb	r2, [r1, #21]
}
 800b5f4:	e7f9      	b.n	800b5ea <st_clust+0xe>

0800b5f6 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5f6:	2901      	cmp	r1, #1
 800b5f8:	d958      	bls.n	800b6ac <get_fat+0xb6>
{
 800b5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fc:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b5fe:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b600:	69b3      	ldr	r3, [r6, #24]
 800b602:	428b      	cmp	r3, r1
 800b604:	d954      	bls.n	800b6b0 <get_fat+0xba>
		switch (fs->fs_type) {
 800b606:	7833      	ldrb	r3, [r6, #0]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d02c      	beq.n	800b666 <get_fat+0x70>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d03b      	beq.n	800b688 <get_fat+0x92>
 800b610:	2b01      	cmp	r3, #1
 800b612:	d001      	beq.n	800b618 <get_fat+0x22>
 800b614:	2001      	movs	r0, #1
 800b616:	e04c      	b.n	800b6b2 <get_fat+0xbc>
			bc = (UINT)clst; bc += bc / 2;
 800b618:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b61c:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b61e:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff fe61 	bl	800b2ea <move_window>
 800b628:	b110      	cbz	r0, 800b630 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295
 800b62e:	e040      	b.n	800b6b2 <get_fat+0xbc>
			wc = fs->win[bc++ % SS(fs)];
 800b630:	1c6f      	adds	r7, r5, #1
 800b632:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800b636:	4435      	add	r5, r6
 800b638:	f895 5034 	ldrb.w	r5, [r5, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b63c:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b63e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b642:	4630      	mov	r0, r6
 800b644:	f7ff fe51 	bl	800b2ea <move_window>
 800b648:	bba0      	cbnz	r0, 800b6b4 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b64a:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b64e:	4437      	add	r7, r6
 800b650:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b654:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b658:	f014 0f01 	tst.w	r4, #1
 800b65c:	bf14      	ite	ne
 800b65e:	0900      	lsrne	r0, r0, #4
 800b660:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 800b664:	e025      	b.n	800b6b2 <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b666:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b668:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff fe3c 	bl	800b2ea <move_window>
 800b672:	bb10      	cbnz	r0, 800b6ba <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b674:	3634      	adds	r6, #52	@ 0x34
 800b676:	0064      	lsls	r4, r4, #1
 800b678:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800b67c:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	5d30      	ldrb	r0, [r6, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b682:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 800b686:	e014      	b.n	800b6b2 <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b688:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b68a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b68e:	4630      	mov	r0, r6
 800b690:	f7ff fe2b 	bl	800b2ea <move_window>
 800b694:	b9a0      	cbnz	r0, 800b6c0 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b696:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800b69a:	00a4      	lsls	r4, r4, #2
 800b69c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800b6a0:	4420      	add	r0, r4
 800b6a2:	f7ff fc7d 	bl	800afa0 <ld_dword>
 800b6a6:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800b6aa:	e002      	b.n	800b6b2 <get_fat+0xbc>
		val = 1;	/* Internal error */
 800b6ac:	2001      	movs	r0, #1
}
 800b6ae:	4770      	bx	lr
		val = 1;	/* Internal error */
 800b6b0:	2001      	movs	r0, #1
}
 800b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b8:	e7fb      	b.n	800b6b2 <get_fat+0xbc>
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	e7f8      	b.n	800b6b2 <get_fat+0xbc>
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800b6c4:	e7f5      	b.n	800b6b2 <get_fat+0xbc>

0800b6c6 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6c6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b6ca:	d245      	bcs.n	800b758 <dir_sdi+0x92>
{
 800b6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6d4:	f011 0f1f 	tst.w	r1, #31
 800b6d8:	d140      	bne.n	800b75c <dir_sdi+0x96>
	FATFS *fs = dp->obj.fs;
 800b6da:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800b6de:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6e0:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6e2:	b93c      	cbnz	r4, 800b6f4 <dir_sdi+0x2e>
 800b6e4:	f898 3000 	ldrb.w	r3, [r8]
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d91f      	bls.n	800b72c <dir_sdi+0x66>
		clst = fs->dirbase;
 800b6ec:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6f0:	b1e3      	cbz	r3, 800b72c <dir_sdi+0x66>
		clst = fs->dirbase;
 800b6f2:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6f4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800b6f8:	025f      	lsls	r7, r3, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6fa:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 800b6fe:	d310      	bcc.n	800b722 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b700:	4621      	mov	r1, r4
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ff77 	bl	800b5f6 <get_fat>
 800b708:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b70a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b70e:	d029      	beq.n	800b764 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b710:	2801      	cmp	r0, #1
 800b712:	d929      	bls.n	800b768 <dir_sdi+0xa2>
 800b714:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b718:	4283      	cmp	r3, r0
 800b71a:	d927      	bls.n	800b76c <dir_sdi+0xa6>
			ofs -= csz;
 800b71c:	1bed      	subs	r5, r5, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 800b71e:	42af      	cmp	r7, r5
 800b720:	d9ee      	bls.n	800b700 <dir_sdi+0x3a>
		dp->sect = clust2sect(fs, clst);
 800b722:	4621      	mov	r1, r4
 800b724:	4640      	mov	r0, r8
 800b726:	f7ff fd39 	bl	800b19c <clust2sect>
 800b72a:	e006      	b.n	800b73a <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b72c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b730:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b734:	d914      	bls.n	800b760 <dir_sdi+0x9a>
		dp->sect = fs->dirbase;
 800b736:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 800b73a:	61f0      	str	r0, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800b73c:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b73e:	b1b8      	cbz	r0, 800b770 <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b740:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 800b744:	61f0      	str	r0, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b746:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 800b74a:	f3c5 0108 	ubfx	r1, r5, #0, #9
 800b74e:	4441      	add	r1, r8
 800b750:	6231      	str	r1, [r6, #32]
	return FR_OK;
 800b752:	2000      	movs	r0, #0
}
 800b754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800b758:	2002      	movs	r0, #2
}
 800b75a:	4770      	bx	lr
		return FR_INT_ERR;
 800b75c:	2002      	movs	r0, #2
 800b75e:	e7f9      	b.n	800b754 <dir_sdi+0x8e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b760:	2002      	movs	r0, #2
 800b762:	e7f7      	b.n	800b754 <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b764:	2001      	movs	r0, #1
 800b766:	e7f5      	b.n	800b754 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b768:	2002      	movs	r0, #2
 800b76a:	e7f3      	b.n	800b754 <dir_sdi+0x8e>
 800b76c:	2002      	movs	r0, #2
 800b76e:	e7f1      	b.n	800b754 <dir_sdi+0x8e>
	if (!dp->sect) return FR_INT_ERR;
 800b770:	2002      	movs	r0, #2
 800b772:	e7ef      	b.n	800b754 <dir_sdi+0x8e>

0800b774 <create_chain>:
{
 800b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b778:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800b77a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800b77c:	4688      	mov	r8, r1
 800b77e:	b939      	cbnz	r1, 800b790 <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b780:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b782:	b195      	cbz	r5, 800b7aa <create_chain+0x36>
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	42ab      	cmp	r3, r5
 800b788:	bf98      	it	ls
 800b78a:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 800b78c:	462c      	mov	r4, r5
 800b78e:	e01b      	b.n	800b7c8 <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b790:	f7ff ff31 	bl	800b5f6 <get_fat>
 800b794:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b796:	2801      	cmp	r0, #1
 800b798:	d946      	bls.n	800b828 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b79a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b79e:	d048      	beq.n	800b832 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	4282      	cmp	r2, r0
 800b7a4:	d845      	bhi.n	800b832 <create_chain+0xbe>
		scl = clst;
 800b7a6:	4645      	mov	r5, r8
 800b7a8:	e7f0      	b.n	800b78c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b7aa:	2501      	movs	r5, #1
 800b7ac:	e7ee      	b.n	800b78c <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7ff ff20 	bl	800b5f6 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b170      	cbz	r0, 800b7d8 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7ba:	2801      	cmp	r0, #1
 800b7bc:	d039      	beq.n	800b832 <create_chain+0xbe>
 800b7be:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7c2:	d036      	beq.n	800b832 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7c4:	42ac      	cmp	r4, r5
 800b7c6:	d033      	beq.n	800b830 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 800b7c8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	42a3      	cmp	r3, r4
 800b7ce:	d8ee      	bhi.n	800b7ae <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800b7d0:	2d01      	cmp	r5, #1
 800b7d2:	d92b      	bls.n	800b82c <create_chain+0xb8>
				ncl = 2;
 800b7d4:	2402      	movs	r4, #2
 800b7d6:	e7ea      	b.n	800b7ae <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff fe66 	bl	800b4b0 <put_fat>
		if (res == FR_OK && clst != 0) {
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	b9c8      	cbnz	r0, 800b81c <create_chain+0xa8>
 800b7e8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ec:	d10e      	bne.n	800b80c <create_chain+0x98>
		fs->last_clst = ncl;
 800b7ee:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b7f0:	697a      	ldr	r2, [r7, #20]
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	3b02      	subs	r3, #2
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	bf9c      	itt	ls
 800b7fa:	f102 32ff 	addls.w	r2, r2, #4294967295
 800b7fe:	617a      	strls	r2, [r7, #20]
		fs->fsi_flag |= 1;
 800b800:	793b      	ldrb	r3, [r7, #4]
 800b802:	f043 0301 	orr.w	r3, r3, #1
 800b806:	713b      	strb	r3, [r7, #4]
 800b808:	4623      	mov	r3, r4
 800b80a:	e012      	b.n	800b832 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b80c:	4622      	mov	r2, r4
 800b80e:	4641      	mov	r1, r8
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff fe4d 	bl	800b4b0 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b816:	4603      	mov	r3, r0
 800b818:	2800      	cmp	r0, #0
 800b81a:	d0e8      	beq.n	800b7ee <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	bf14      	ite	ne
 800b820:	2301      	movne	r3, #1
 800b822:	f04f 33ff 	moveq.w	r3, #4294967295
 800b826:	e004      	b.n	800b832 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b828:	2301      	movs	r3, #1
 800b82a:	e002      	b.n	800b832 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 800b82c:	2300      	movs	r3, #0
 800b82e:	e000      	b.n	800b832 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b838 <remove_chain>:
{
 800b838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83c:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b83e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b840:	2901      	cmp	r1, #1
 800b842:	d931      	bls.n	800b8a8 <remove_chain+0x70>
 800b844:	4606      	mov	r6, r0
 800b846:	4611      	mov	r1, r2
 800b848:	69ab      	ldr	r3, [r5, #24]
 800b84a:	42a3      	cmp	r3, r4
 800b84c:	d92f      	bls.n	800b8ae <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b84e:	b90a      	cbnz	r2, 800b854 <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b850:	2700      	movs	r7, #0
 800b852:	e00a      	b.n	800b86a <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b854:	f04f 32ff 	mov.w	r2, #4294967295
 800b858:	4628      	mov	r0, r5
 800b85a:	f7ff fe29 	bl	800b4b0 <put_fat>
		if (res != FR_OK) return res;
 800b85e:	4684      	mov	ip, r0
 800b860:	2800      	cmp	r0, #0
 800b862:	d0f5      	beq.n	800b850 <remove_chain+0x18>
 800b864:	e025      	b.n	800b8b2 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b866:	42a2      	cmp	r2, r4
 800b868:	d923      	bls.n	800b8b2 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b86a:	46a0      	mov	r8, r4
 800b86c:	4621      	mov	r1, r4
 800b86e:	4630      	mov	r0, r6
 800b870:	f7ff fec1 	bl	800b5f6 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800b874:	4604      	mov	r4, r0
 800b876:	b1f8      	cbz	r0, 800b8b8 <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b878:	2801      	cmp	r0, #1
 800b87a:	d020      	beq.n	800b8be <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b87c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b880:	d020      	beq.n	800b8c4 <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b882:	463a      	mov	r2, r7
 800b884:	4641      	mov	r1, r8
 800b886:	4628      	mov	r0, r5
 800b888:	f7ff fe12 	bl	800b4b0 <put_fat>
			if (res != FR_OK) return res;
 800b88c:	4684      	mov	ip, r0
 800b88e:	b980      	cbnz	r0, 800b8b2 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b890:	696b      	ldr	r3, [r5, #20]
 800b892:	69aa      	ldr	r2, [r5, #24]
 800b894:	1e91      	subs	r1, r2, #2
 800b896:	428b      	cmp	r3, r1
 800b898:	d2e5      	bcs.n	800b866 <remove_chain+0x2e>
			fs->free_clst++;
 800b89a:	3301      	adds	r3, #1
 800b89c:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800b89e:	792b      	ldrb	r3, [r5, #4]
 800b8a0:	f043 0301 	orr.w	r3, r3, #1
 800b8a4:	712b      	strb	r3, [r5, #4]
 800b8a6:	e7de      	b.n	800b866 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b8a8:	f04f 0c02 	mov.w	ip, #2
 800b8ac:	e001      	b.n	800b8b2 <remove_chain+0x7a>
 800b8ae:	f04f 0c02 	mov.w	ip, #2
}
 800b8b2:	4660      	mov	r0, ip
 800b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 800b8b8:	f04f 0c00 	mov.w	ip, #0
 800b8bc:	e7f9      	b.n	800b8b2 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b8be:	f04f 0c02 	mov.w	ip, #2
 800b8c2:	e7f6      	b.n	800b8b2 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b8c4:	f04f 0c01 	mov.w	ip, #1
 800b8c8:	e7f3      	b.n	800b8b2 <remove_chain+0x7a>

0800b8ca <dir_next>:
{
 800b8ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8ce:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8d0:	69c3      	ldr	r3, [r0, #28]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d06d      	beq.n	800b9b2 <dir_next+0xe8>
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	3520      	adds	r5, #32
 800b8dc:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800b8e0:	d269      	bcs.n	800b9b6 <dir_next+0xec>
	FATFS *fs = dp->obj.fs;
 800b8e2:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8e4:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800b8e8:	f1b8 0f00 	cmp.w	r8, #0
 800b8ec:	d107      	bne.n	800b8fe <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800b8f2:	6981      	ldr	r1, [r0, #24]
 800b8f4:	b971      	cbnz	r1, 800b914 <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8f6:	8933      	ldrh	r3, [r6, #8]
 800b8f8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b8fc:	d906      	bls.n	800b90c <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 800b8fe:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b900:	3634      	adds	r6, #52	@ 0x34
 800b902:	4446      	add	r6, r8
 800b904:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800b906:	2000      	movs	r0, #0
}
 800b908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61c3      	str	r3, [r0, #28]
 800b910:	2004      	movs	r0, #4
 800b912:	e7f9      	b.n	800b908 <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b914:	8973      	ldrh	r3, [r6, #10]
 800b916:	3b01      	subs	r3, #1
 800b918:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800b91c:	d1ef      	bne.n	800b8fe <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b91e:	f7ff fe6a 	bl	800b5f6 <get_fat>
 800b922:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b924:	2801      	cmp	r0, #1
 800b926:	d948      	bls.n	800b9ba <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b928:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b92c:	d047      	beq.n	800b9be <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b92e:	69b3      	ldr	r3, [r6, #24]
 800b930:	4283      	cmp	r3, r0
 800b932:	d836      	bhi.n	800b9a2 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800b934:	b18f      	cbz	r7, 800b95a <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b936:	69a1      	ldr	r1, [r4, #24]
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ff1b 	bl	800b774 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b93e:	4682      	mov	sl, r0
 800b940:	2800      	cmp	r0, #0
 800b942:	d03e      	beq.n	800b9c2 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b944:	2801      	cmp	r0, #1
 800b946:	d03e      	beq.n	800b9c6 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b948:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b94c:	d03d      	beq.n	800b9ca <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff fc9e 	bl	800b290 <sync_window>
 800b954:	b128      	cbz	r0, 800b962 <dir_next+0x98>
 800b956:	2001      	movs	r0, #1
 800b958:	e7d6      	b.n	800b908 <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61e3      	str	r3, [r4, #28]
 800b95e:	2004      	movs	r0, #4
 800b960:	e7d2      	b.n	800b908 <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b966:	2100      	movs	r1, #0
 800b968:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800b96c:	f7ff fb35 	bl	800afda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b970:	4651      	mov	r1, sl
 800b972:	4630      	mov	r0, r6
 800b974:	f7ff fc12 	bl	800b19c <clust2sect>
 800b978:	6330      	str	r0, [r6, #48]	@ 0x30
 800b97a:	8973      	ldrh	r3, [r6, #10]
 800b97c:	b16b      	cbz	r3, 800b99a <dir_next+0xd0>
						fs->wflag = 1;
 800b97e:	2701      	movs	r7, #1
 800b980:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff fc84 	bl	800b290 <sync_window>
 800b988:	bb08      	cbnz	r0, 800b9ce <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b98a:	f109 0901 	add.w	r9, r9, #1
 800b98e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b990:	3301      	adds	r3, #1
 800b992:	6333      	str	r3, [r6, #48]	@ 0x30
 800b994:	8973      	ldrh	r3, [r6, #10]
 800b996:	454b      	cmp	r3, r9
 800b998:	d8f2      	bhi.n	800b980 <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 800b99a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b99c:	eba3 0309 	sub.w	r3, r3, r9
 800b9a0:	6333      	str	r3, [r6, #48]	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800b9a2:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800b9a6:	4651      	mov	r1, sl
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff fbf7 	bl	800b19c <clust2sect>
 800b9ae:	61e0      	str	r0, [r4, #28]
 800b9b0:	e7a5      	b.n	800b8fe <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9b2:	2004      	movs	r0, #4
 800b9b4:	e7a8      	b.n	800b908 <dir_next+0x3e>
 800b9b6:	2004      	movs	r0, #4
 800b9b8:	e7a6      	b.n	800b908 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b9ba:	2002      	movs	r0, #2
 800b9bc:	e7a4      	b.n	800b908 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7a2      	b.n	800b908 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9c2:	2007      	movs	r0, #7
 800b9c4:	e7a0      	b.n	800b908 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b9c6:	2002      	movs	r0, #2
 800b9c8:	e79e      	b.n	800b908 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	e79c      	b.n	800b908 <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e79a      	b.n	800b908 <dir_next+0x3e>
	...

0800b9d4 <dir_find>:
{
 800b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	b087      	sub	sp, #28
 800b9da:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b9dc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b9de:	2100      	movs	r1, #0
 800b9e0:	f7ff fe71 	bl	800b6c6 <dir_sdi>
	if (res != FR_OK) return res;
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f040 80c4 	bne.w	800bb74 <dir_find+0x1a0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f0:	632b      	str	r3, [r5, #48]	@ 0x30
 800b9f2:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800b9f6:	46c1      	mov	r9, r8
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	46c3      	mov	fp, r8
		res = dir_next(dp, 0);	/* Next entry */
 800b9fc:	2700      	movs	r7, #0
 800b9fe:	e00a      	b.n	800ba16 <dir_find+0x42>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba00:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800ba04:	46d9      	mov	r9, fp
		res = dir_next(dp, 0);	/* Next entry */
 800ba06:	4639      	mov	r1, r7
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f7ff ff5e 	bl	800b8ca <dir_next>
	} while (res == FR_OK);
 800ba0e:	4602      	mov	r2, r0
 800ba10:	2800      	cmp	r0, #0
 800ba12:	f040 80af 	bne.w	800bb74 <dir_find+0x1a0>
		res = move_window(fs, dp->sect);
 800ba16:	69e9      	ldr	r1, [r5, #28]
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff fc66 	bl	800b2ea <move_window>
		if (res != FR_OK) break;
 800ba1e:	4602      	mov	r2, r0
 800ba20:	2800      	cmp	r0, #0
 800ba22:	f040 80a7 	bne.w	800bb74 <dir_find+0x1a0>
		c = dp->dir[DIR_Name];
 800ba26:	6a2c      	ldr	r4, [r5, #32]
 800ba28:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 80a1 	beq.w	800bb72 <dir_find+0x19e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ba30:	7ae2      	ldrb	r2, [r4, #11]
 800ba32:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 800ba36:	71a9      	strb	r1, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ba38:	2be5      	cmp	r3, #229	@ 0xe5
 800ba3a:	d0e1      	beq.n	800ba00 <dir_find+0x2c>
 800ba3c:	f012 0f08 	tst.w	r2, #8
 800ba40:	d015      	beq.n	800ba6e <dir_find+0x9a>
 800ba42:	290f      	cmp	r1, #15
 800ba44:	d1dc      	bne.n	800ba00 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ba46:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800ba4a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800ba4e:	d1da      	bne.n	800ba06 <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ba50:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ba54:	d028      	beq.n	800baa8 <dir_find+0xd4>
						sum = dp->dir[LDIR_Chksum];
 800ba56:	f894 800d 	ldrb.w	r8, [r4, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ba5a:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ba5e:	696a      	ldr	r2, [r5, #20]
 800ba60:	632a      	str	r2, [r5, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba62:	7b62      	ldrb	r2, [r4, #13]
 800ba64:	4542      	cmp	r2, r8
 800ba66:	d024      	beq.n	800bab2 <dir_find+0xde>
 800ba68:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ba6c:	e7cb      	b.n	800ba06 <dir_find+0x32>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ba6e:	290f      	cmp	r1, #15
 800ba70:	d0e9      	beq.n	800ba46 <dir_find+0x72>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba72:	f1b9 0f00 	cmp.w	r9, #0
 800ba76:	d104      	bne.n	800ba82 <dir_find+0xae>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7ff fbae 	bl	800b1da <sum_sfn>
 800ba7e:	4540      	cmp	r0, r8
 800ba80:	d07c      	beq.n	800bb7c <dir_find+0x1a8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba82:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800ba86:	f012 0201 	ands.w	r2, r2, #1
 800ba8a:	d16b      	bne.n	800bb64 <dir_find+0x190>
 800ba8c:	f105 0124 	add.w	r1, r5, #36	@ 0x24
	int r = 0;
 800ba90:	f104 0c0b 	add.w	ip, r4, #11
		r = *d++ - *s++;
 800ba94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba98:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ba9c:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800ba9e:	45a4      	cmp	ip, r4
 800baa0:	d05f      	beq.n	800bb62 <dir_find+0x18e>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0f6      	beq.n	800ba94 <dir_find+0xc0>
 800baa6:	e05d      	b.n	800bb64 <dir_find+0x190>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800baa8:	4599      	cmp	r9, r3
 800baaa:	bf18      	it	ne
 800baac:	46d9      	movne	r9, fp
 800baae:	d1aa      	bne.n	800ba06 <dir_find+0x32>
 800bab0:	e7d7      	b.n	800ba62 <dir_find+0x8e>
	rv = rv << 8 | ptr[0];
 800bab2:	7ee1      	ldrb	r1, [r4, #27]
 800bab4:	7ea2      	ldrb	r2, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bab6:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800baba:	d157      	bne.n	800bb6c <dir_find+0x198>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800babc:	68f2      	ldr	r2, [r6, #12]
 800babe:	9201      	str	r2, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bac0:	7822      	ldrb	r2, [r4, #0]
 800bac2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bac6:	3a01      	subs	r2, #1
 800bac8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800bacc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bad0:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800bb84 <dir_find+0x1b0>
 800bad4:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bad6:	f8cd 8008 	str.w	r8, [sp, #8]
 800bada:	9603      	str	r6, [sp, #12]
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	4616      	mov	r6, r2
 800bae0:	9504      	str	r5, [sp, #16]
 800bae2:	e006      	b.n	800baf2 <dir_find+0x11e>
 800bae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bae8:	429d      	cmp	r5, r3
 800baea:	d133      	bne.n	800bb54 <dir_find+0x180>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800baec:	4b24      	ldr	r3, [pc, #144]	@ (800bb80 <dir_find+0x1ac>)
 800baee:	4599      	cmp	r9, r3
 800baf0:	d01a      	beq.n	800bb28 <dir_find+0x154>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800baf2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800baf6:	18e2      	adds	r2, r4, r3
	rv = rv << 8 | ptr[0];
 800baf8:	7852      	ldrb	r2, [r2, #1]
 800bafa:	5ce5      	ldrb	r5, [r4, r3]
 800bafc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		if (wc) {
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0ef      	beq.n	800bae4 <dir_find+0x110>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb04:	2efe      	cmp	r6, #254	@ 0xfe
 800bb06:	d825      	bhi.n	800bb54 <dir_find+0x180>
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f001 f83f 	bl	800cb8c <ff_wtoupper>
 800bb0e:	4680      	mov	r8, r0
 800bb10:	1c73      	adds	r3, r6, #1
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	9b01      	ldr	r3, [sp, #4]
 800bb16:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800bb1a:	f001 f837 	bl	800cb8c <ff_wtoupper>
 800bb1e:	4580      	cmp	r8, r0
 800bb20:	d118      	bne.n	800bb54 <dir_find+0x180>
			wc = uc;
 800bb22:	4628      	mov	r0, r5
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bb24:	9e00      	ldr	r6, [sp, #0]
 800bb26:	e7e1      	b.n	800baec <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb28:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bb2c:	9b05      	ldr	r3, [sp, #20]
 800bb2e:	4631      	mov	r1, r6
 800bb30:	9e03      	ldr	r6, [sp, #12]
 800bb32:	9d04      	ldr	r5, [sp, #16]
 800bb34:	7822      	ldrb	r2, [r4, #0]
 800bb36:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800bb3a:	d004      	beq.n	800bb46 <dir_find+0x172>
 800bb3c:	b118      	cbz	r0, 800bb46 <dir_find+0x172>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb3e:	9a01      	ldr	r2, [sp, #4]
 800bb40:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800bb44:	b91a      	cbnz	r2, 800bb4e <dir_find+0x17a>
 800bb46:	3b01      	subs	r3, #1
 800bb48:	fa5f f983 	uxtb.w	r9, r3
 800bb4c:	e75b      	b.n	800ba06 <dir_find+0x32>
 800bb4e:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800bb52:	e758      	b.n	800ba06 <dir_find+0x32>
 800bb54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bb58:	9e03      	ldr	r6, [sp, #12]
 800bb5a:	9d04      	ldr	r5, [sp, #16]
 800bb5c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800bb60:	e751      	b.n	800ba06 <dir_find+0x32>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bb62:	b13b      	cbz	r3, 800bb74 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb64:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800bb68:	46d9      	mov	r9, fp
 800bb6a:	e74c      	b.n	800ba06 <dir_find+0x32>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb6c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800bb70:	e749      	b.n	800ba06 <dir_find+0x32>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb72:	2204      	movs	r2, #4
}
 800bb74:	4610      	mov	r0, r2
 800bb76:	b007      	add	sp, #28
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = move_window(fs, dp->sect);
 800bb7c:	464a      	mov	r2, r9
 800bb7e:	e7f9      	b.n	800bb74 <dir_find+0x1a0>
 800bb80:	0800f1d5 	.word	0x0800f1d5
 800bb84:	0800f1c8 	.word	0x0800f1c8

0800bb88 <dir_register>:
{
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	b08b      	sub	sp, #44	@ 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bb8e:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 800bb92:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 800bb96:	f040 8141 	bne.w	800be1c <dir_register+0x294>
 800bb9a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bb9c:	6805      	ldr	r5, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bb9e:	68eb      	ldr	r3, [r5, #12]
 800bba0:	881a      	ldrh	r2, [r3, #0]
 800bba2:	b1da      	cbz	r2, 800bbdc <dir_register+0x54>
 800bba4:	f04f 0a00 	mov.w	sl, #0
 800bba8:	f10a 0a01 	add.w	sl, sl, #1
 800bbac:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	d1f9      	bne.n	800bba8 <dir_register+0x20>
	mem_cpy(sn, dp->fn, 12);
 800bbb4:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 800bbb8:	220c      	movs	r2, #12
 800bbba:	4631      	mov	r1, r6
 800bbbc:	a807      	add	r0, sp, #28
 800bbbe:	f7ff fa02 	bl	800afc6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bbc2:	f89d b027 	ldrb.w	fp, [sp, #39]	@ 0x27
 800bbc6:	f01b 0f01 	tst.w	fp, #1
 800bbca:	d07d      	beq.n	800bcc8 <dir_register+0x140>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bbcc:	2340      	movs	r3, #64	@ 0x40
 800bbce:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800bbd2:	f04f 0801 	mov.w	r8, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bbd6:	f04f 0920 	mov.w	r9, #32
 800bbda:	e049      	b.n	800bc70 <dir_register+0xe8>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bbdc:	f04f 0a00 	mov.w	sl, #0
 800bbe0:	e7e8      	b.n	800bbb4 <dir_register+0x2c>
 800bbe2:	4643      	mov	r3, r8
 800bbe4:	af07      	add	r7, sp, #28
		while (*lfn) {	/* Create a CRC */
 800bbe6:	2207      	movs	r2, #7
 800bbe8:	e002      	b.n	800bbf0 <dir_register+0x68>
 800bbea:	4643      	mov	r3, r8
 800bbec:	e7fa      	b.n	800bbe4 <dir_register+0x5c>
		seq /= 16;
 800bbee:	460b      	mov	r3, r1
		c = (BYTE)((seq % 16) + '0');
 800bbf0:	f003 000f 	and.w	r0, r3, #15
 800bbf4:	f100 0130 	add.w	r1, r0, #48	@ 0x30
		if (c > '9') c += 7;
 800bbf8:	2939      	cmp	r1, #57	@ 0x39
 800bbfa:	bf88      	it	hi
 800bbfc:	f100 0137 	addhi.w	r1, r0, #55	@ 0x37
		ns[i--] = c;
 800bc00:	3a01      	subs	r2, #1
 800bc02:	f807 1d01 	strb.w	r1, [r7, #-1]!
		seq /= 16;
 800bc06:	0919      	lsrs	r1, r3, #4
	} while (seq);
 800bc08:	2b0f      	cmp	r3, #15
 800bc0a:	d8f0      	bhi.n	800bbee <dir_register+0x66>
	ns[i] = '~';
 800bc0c:	217e      	movs	r1, #126	@ 0x7e
 800bc0e:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800bc12:	446b      	add	r3, sp
 800bc14:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bc18:	b16a      	cbz	r2, 800bc36 <dir_register+0xae>
 800bc1a:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc24:	2820      	cmp	r0, #32
 800bc26:	d003      	beq.n	800bc30 <dir_register+0xa8>
 800bc28:	3301      	adds	r3, #1
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d1f8      	bne.n	800bc20 <dir_register+0x98>
		ns[i--] = c;
 800bc2e:	461a      	mov	r2, r3
 800bc30:	3323      	adds	r3, #35	@ 0x23
 800bc32:	4423      	add	r3, r4
 800bc34:	e00e      	b.n	800bc54 <dir_register+0xcc>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bc36:	4613      	mov	r3, r2
 800bc38:	e7fa      	b.n	800bc30 <dir_register+0xa8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bc3a:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 800bc3e:	4469      	add	r1, sp
 800bc40:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800bc44:	3201      	adds	r2, #1
 800bc46:	1c58      	adds	r0, r3, #1
 800bc48:	7059      	strb	r1, [r3, #1]
	} while (j < 8);
 800bc4a:	3b22      	subs	r3, #34	@ 0x22
 800bc4c:	1b1b      	subs	r3, r3, r4
 800bc4e:	2b07      	cmp	r3, #7
 800bc50:	d804      	bhi.n	800bc5c <dir_register+0xd4>
 800bc52:	4603      	mov	r3, r0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bc54:	2a07      	cmp	r2, #7
 800bc56:	d9f0      	bls.n	800bc3a <dir_register+0xb2>
 800bc58:	4649      	mov	r1, r9
 800bc5a:	e7f4      	b.n	800bc46 <dir_register+0xbe>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f7ff feb9 	bl	800b9d4 <dir_find>
			if (res != FR_OK) break;
 800bc62:	4607      	mov	r7, r0
 800bc64:	bb38      	cbnz	r0, 800bcb6 <dir_register+0x12e>
		for (n = 1; n < 100; n++) {
 800bc66:	f108 0801 	add.w	r8, r8, #1
 800bc6a:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800bc6e:	d020      	beq.n	800bcb2 <dir_register+0x12a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bc70:	68ef      	ldr	r7, [r5, #12]
	mem_cpy(dst, src, 11);
 800bc72:	220b      	movs	r2, #11
 800bc74:	a907      	add	r1, sp, #28
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff f9a5 	bl	800afc6 <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bc7c:	f1b8 0f05 	cmp.w	r8, #5
 800bc80:	d9af      	bls.n	800bbe2 <dir_register+0x5a>
		while (*lfn) {	/* Create a CRC */
 800bc82:	883a      	ldrh	r2, [r7, #0]
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	d0b0      	beq.n	800bbea <dir_register+0x62>
 800bc88:	4643      	mov	r3, r8
 800bc8a:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800bc8c:	f002 0001 	and.w	r0, r2, #1
 800bc90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 800bc94:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800bc96:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800bc9a:	bf1c      	itt	ne
 800bc9c:	f483 3388 	eorne.w	r3, r3, #69632	@ 0x11000
 800bca0:	f083 0321 	eorne.w	r3, r3, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 800bca4:	3901      	subs	r1, #1
 800bca6:	d1f1      	bne.n	800bc8c <dir_register+0x104>
		while (*lfn) {	/* Create a CRC */
 800bca8:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	d1ec      	bne.n	800bc8a <dir_register+0x102>
 800bcb0:	e798      	b.n	800bbe4 <dir_register+0x5c>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bcb2:	2707      	movs	r7, #7
 800bcb4:	e0b3      	b.n	800be1e <dir_register+0x296>
 800bcb6:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800bcba:	f000 80b4 	beq.w	800be26 <dir_register+0x29e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bcbe:	2804      	cmp	r0, #4
 800bcc0:	f040 80ad 	bne.w	800be1e <dir_register+0x296>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bcc4:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bcc8:	f01b 0f02 	tst.w	fp, #2
 800bccc:	d009      	beq.n	800bce2 <dir_register+0x15a>
 800bcce:	f10a 080c 	add.w	r8, sl, #12
 800bcd2:	4b64      	ldr	r3, [pc, #400]	@ (800be64 <dir_register+0x2dc>)
 800bcd4:	fba3 3808 	umull	r3, r8, r3, r8
 800bcd8:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800bcdc:	f108 0801 	add.w	r8, r8, #1
 800bce0:	e001      	b.n	800bce6 <dir_register+0x15e>
 800bce2:	f04f 0801 	mov.w	r8, #1
	FATFS *fs = dp->obj.fs;
 800bce6:	f8d4 a000 	ldr.w	sl, [r4]
	res = dir_sdi(dp, 0);
 800bcea:	2100      	movs	r1, #0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7ff fcea 	bl	800b6c6 <dir_sdi>
	if (res == FR_OK) {
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	b9e8      	cbnz	r0, 800bd32 <dir_register+0x1aa>
		n = 0;
 800bcf6:	f04f 0900 	mov.w	r9, #0
			res = dir_next(dp, 1);
 800bcfa:	f04f 0b01 	mov.w	fp, #1
 800bcfe:	e009      	b.n	800bd14 <dir_register+0x18c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bd00:	f109 0901 	add.w	r9, r9, #1
 800bd04:	45c8      	cmp	r8, r9
 800bd06:	d018      	beq.n	800bd3a <dir_register+0x1b2>
			res = dir_next(dp, 1);
 800bd08:	4659      	mov	r1, fp
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7ff fddd 	bl	800b8ca <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd10:	4607      	mov	r7, r0
 800bd12:	b970      	cbnz	r0, 800bd32 <dir_register+0x1aa>
			res = move_window(fs, dp->sect);
 800bd14:	69e1      	ldr	r1, [r4, #28]
 800bd16:	4650      	mov	r0, sl
 800bd18:	f7ff fae7 	bl	800b2ea <move_window>
			if (res != FR_OK) break;
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	b940      	cbnz	r0, 800bd32 <dir_register+0x1aa>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bd20:	6a23      	ldr	r3, [r4, #32]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2be5      	cmp	r3, #229	@ 0xe5
 800bd26:	d0eb      	beq.n	800bd00 <dir_register+0x178>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0e9      	beq.n	800bd00 <dir_register+0x178>
				n = 0;					/* Not a blank entry. Restart to search */
 800bd2c:	f04f 0900 	mov.w	r9, #0
 800bd30:	e7ea      	b.n	800bd08 <dir_register+0x180>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd32:	2f04      	cmp	r7, #4
 800bd34:	d079      	beq.n	800be2a <dir_register+0x2a2>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bd36:	2f00      	cmp	r7, #0
 800bd38:	d171      	bne.n	800be1e <dir_register+0x296>
 800bd3a:	f1b8 0a01 	subs.w	sl, r8, #1
 800bd3e:	d119      	bne.n	800bd74 <dir_register+0x1ec>
		res = move_window(fs, dp->sect);
 800bd40:	69e1      	ldr	r1, [r4, #28]
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7ff fad1 	bl	800b2ea <move_window>
		if (res == FR_OK) {
 800bd48:	4607      	mov	r7, r0
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d167      	bne.n	800be1e <dir_register+0x296>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd4e:	2220      	movs	r2, #32
 800bd50:	2100      	movs	r1, #0
 800bd52:	6a20      	ldr	r0, [r4, #32]
 800bd54:	f7ff f941 	bl	800afda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd58:	220b      	movs	r2, #11
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	6a20      	ldr	r0, [r4, #32]
 800bd5e:	f7ff f932 	bl	800afc6 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bd62:	6a22      	ldr	r2, [r4, #32]
 800bd64:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800bd68:	f003 0318 	and.w	r3, r3, #24
 800bd6c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	70eb      	strb	r3, [r5, #3]
 800bd72:	e054      	b.n	800be1e <dir_register+0x296>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bd74:	6961      	ldr	r1, [r4, #20]
 800bd76:	eba1 114a 	sub.w	r1, r1, sl, lsl #5
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff fca3 	bl	800b6c6 <dir_sdi>
		if (res == FR_OK) {
 800bd80:	4607      	mov	r7, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d14b      	bne.n	800be1e <dir_register+0x296>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bd86:	4630      	mov	r0, r6
 800bd88:	f7ff fa27 	bl	800b1da <sum_sfn>
 800bd8c:	9001      	str	r0, [sp, #4]
	dir[LDIR_Type] = 0;
 800bd8e:	f04f 0b00 	mov.w	fp, #0
 800bd92:	9602      	str	r6, [sp, #8]
 800bd94:	e019      	b.n	800bdca <dir_register+0x242>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd96:	4638      	mov	r0, r7
 800bd98:	e050      	b.n	800be3c <dir_register+0x2b4>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bd9a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800bd9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d002      	beq.n	800bdac <dir_register+0x224>
 800bda6:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 800bdaa:	b90b      	cbnz	r3, 800bdb0 <dir_register+0x228>
 800bdac:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bdb0:	f881 9000 	strb.w	r9, [r1]
				fs->wflag = 1;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bdb8:	4659      	mov	r1, fp
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7ff fd85 	bl	800b8ca <dir_next>
			} while (res == FR_OK && --nent);
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	bb60      	cbnz	r0, 800be1e <dir_register+0x296>
 800bdc4:	f1ba 0a01 	subs.w	sl, sl, #1
 800bdc8:	d026      	beq.n	800be18 <dir_register+0x290>
				res = move_window(fs, dp->sect);
 800bdca:	69e1      	ldr	r1, [r4, #28]
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f7ff fa8c 	bl	800b2ea <move_window>
				if (res != FR_OK) break;
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	bb18      	cbnz	r0, 800be1e <dir_register+0x296>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bdd6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800bdda:	6a21      	ldr	r1, [r4, #32]
 800bddc:	fa5f f98a 	uxtb.w	r9, sl
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bde4:	f04f 030f 	mov.w	r3, #15
 800bde8:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800bdea:	f881 b00c 	strb.w	fp, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdee:	f881 b01a 	strb.w	fp, [r1, #26]
	*ptr++ = (BYTE)val;
 800bdf2:	f881 b01b 	strb.w	fp, [r1, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bdf6:	f109 30ff 	add.w	r0, r9, #4294967295
 800bdfa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800bdfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	s = wc = 0;
 800be02:	4a19      	ldr	r2, [pc, #100]	@ (800be68 <dir_register+0x2e0>)
 800be04:	f102 0c0d 	add.w	ip, r2, #13
 800be08:	465b      	mov	r3, fp
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be0a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800be0e:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800be12:	f8cd a00c 	str.w	sl, [sp, #12]
 800be16:	e014      	b.n	800be42 <dir_register+0x2ba>
 800be18:	9e02      	ldr	r6, [sp, #8]
 800be1a:	e791      	b.n	800bd40 <dir_register+0x1b8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800be1c:	2706      	movs	r7, #6
}
 800be1e:	4638      	mov	r0, r7
 800be20:	b00b      	add	sp, #44	@ 0x2c
 800be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800be26:	2707      	movs	r7, #7
 800be28:	e7f9      	b.n	800be1e <dir_register+0x296>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be2a:	2707      	movs	r7, #7
 800be2c:	e7f7      	b.n	800be1e <dir_register+0x296>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800be2e:	7817      	ldrb	r7, [r2, #0]
 800be30:	eb01 0a07 	add.w	sl, r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800be34:	f801 8007 	strb.w	r8, [r1, r7]
	*ptr++ = (BYTE)val;
 800be38:	f88a 8001 	strb.w	r8, [sl, #1]
	} while (++s < 13);
 800be3c:	3201      	adds	r2, #1
 800be3e:	4562      	cmp	r2, ip
 800be40:	d0ab      	beq.n	800bd9a <dir_register+0x212>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be42:	42b3      	cmp	r3, r6
 800be44:	d0f3      	beq.n	800be2e <dir_register+0x2a6>
 800be46:	1c47      	adds	r7, r0, #1
 800be48:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800be4c:	7810      	ldrb	r0, [r2, #0]
 800be4e:	eb01 0a00 	add.w	sl, r1, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800be52:	540b      	strb	r3, [r1, r0]
 800be54:	0a18      	lsrs	r0, r3, #8
	*ptr++ = (BYTE)val;
 800be56:	f88a 0001 	strb.w	r0, [sl, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d19b      	bne.n	800bd96 <dir_register+0x20e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be5e:	4638      	mov	r0, r7
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800be60:	4633      	mov	r3, r6
 800be62:	e7eb      	b.n	800be3c <dir_register+0x2b4>
 800be64:	4ec4ec4f 	.word	0x4ec4ec4f
 800be68:	0800f1c8 	.word	0x0800f1c8

0800be6c <check_fs>:
{
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800be70:	2300      	movs	r3, #0
 800be72:	70c3      	strb	r3, [r0, #3]
 800be74:	f04f 33ff 	mov.w	r3, #4294967295
 800be78:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800be7a:	f7ff fa36 	bl	800b2ea <move_window>
 800be7e:	bb48      	cbnz	r0, 800bed4 <check_fs+0x68>
 800be80:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 800be82:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800be86:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800be8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be8e:	b21b      	sxth	r3, r3
 800be90:	4a13      	ldr	r2, [pc, #76]	@ (800bee0 <check_fs+0x74>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d120      	bne.n	800bed8 <check_fs+0x6c>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be96:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800be9a:	2be9      	cmp	r3, #233	@ 0xe9
 800be9c:	d007      	beq.n	800beae <check_fs+0x42>
 800be9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bea0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800bea4:	4a0f      	ldr	r2, [pc, #60]	@ (800bee4 <check_fs+0x78>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d001      	beq.n	800beae <check_fs+0x42>
	return 2;
 800beaa:	2502      	movs	r5, #2
 800beac:	e015      	b.n	800beda <check_fs+0x6e>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800beae:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 800beb2:	f7ff f875 	bl	800afa0 <ld_dword>
 800beb6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800beba:	4b0b      	ldr	r3, [pc, #44]	@ (800bee8 <check_fs+0x7c>)
 800bebc:	4298      	cmp	r0, r3
 800bebe:	d00c      	beq.n	800beda <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bec0:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 800bec4:	f7ff f86c 	bl	800afa0 <ld_dword>
 800bec8:	4d08      	ldr	r5, [pc, #32]	@ (800beec <check_fs+0x80>)
 800beca:	1b45      	subs	r5, r0, r5
 800becc:	bf18      	it	ne
 800bece:	2501      	movne	r5, #1
 800bed0:	006d      	lsls	r5, r5, #1
 800bed2:	e002      	b.n	800beda <check_fs+0x6e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bed4:	2504      	movs	r5, #4
 800bed6:	e000      	b.n	800beda <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bed8:	2503      	movs	r5, #3
}
 800beda:	4628      	mov	r0, r5
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	ffffaa55 	.word	0xffffaa55
 800bee4:	009000eb 	.word	0x009000eb
 800bee8:	00544146 	.word	0x00544146
 800beec:	33544146 	.word	0x33544146

0800bef0 <find_volume>:
{
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	b085      	sub	sp, #20
 800bef6:	460e      	mov	r6, r1
 800bef8:	4615      	mov	r5, r2
	*rfs = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800befe:	f7ff f97b 	bl	800b1f8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf02:	1e07      	subs	r7, r0, #0
 800bf04:	f2c0 810a 	blt.w	800c11c <find_volume+0x22c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf08:	4bb0      	ldr	r3, [pc, #704]	@ (800c1cc <find_volume+0x2dc>)
 800bf0a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	f000 8109 	beq.w	800c126 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 800bf14:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf16:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf1a:	7823      	ldrb	r3, [r4, #0]
 800bf1c:	b16b      	cbz	r3, 800bf3a <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800bf1e:	7860      	ldrb	r0, [r4, #1]
 800bf20:	f7fe fff2 	bl	800af08 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bf24:	f010 0f01 	tst.w	r0, #1
 800bf28:	d107      	bne.n	800bf3a <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bf2a:	2d00      	cmp	r5, #0
 800bf2c:	f000 80f7 	beq.w	800c11e <find_volume+0x22e>
				return FR_WRITE_PROTECTED;
 800bf30:	f010 0504 	ands.w	r5, r0, #4
 800bf34:	bf18      	it	ne
 800bf36:	250a      	movne	r5, #10
 800bf38:	e0f1      	b.n	800c11e <find_volume+0x22e>
	fs->fs_type = 0;					/* Clear the file system object */
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf3e:	b2f8      	uxtb	r0, r7
 800bf40:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf42:	f7fe ffed 	bl	800af20 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf46:	f010 0601 	ands.w	r6, r0, #1
 800bf4a:	f040 80ee 	bne.w	800c12a <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf4e:	b11d      	cbz	r5, 800bf58 <find_volume+0x68>
 800bf50:	f010 0f04 	tst.w	r0, #4
 800bf54:	f040 80eb 	bne.w	800c12e <find_volume+0x23e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f7ff ff86 	bl	800be6c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf60:	2802      	cmp	r0, #2
 800bf62:	d07c      	beq.n	800c05e <find_volume+0x16e>
	bsect = 0;
 800bf64:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf66:	2804      	cmp	r0, #4
 800bf68:	f000 80e3 	beq.w	800c132 <find_volume+0x242>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf6c:	2801      	cmp	r0, #1
 800bf6e:	f200 80e2 	bhi.w	800c136 <find_volume+0x246>
	rv = rv << 8 | ptr[0];
 800bf72:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800bf76:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800bf7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf7e:	b21b      	sxth	r3, r3
 800bf80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf84:	f040 80d9 	bne.w	800c13a <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 800bf88:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800bf8c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf90:	ea53 2802 	orrs.w	r8, r3, r2, lsl #8
 800bf94:	d104      	bne.n	800bfa0 <find_volume+0xb0>
 800bf96:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf9a:	f7ff f801 	bl	800afa0 <ld_dword>
 800bf9e:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800bfa0:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bfa4:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800bfa8:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bfac:	f109 33ff 	add.w	r3, r9, #4294967295
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	f200 80c3 	bhi.w	800c13e <find_volume+0x24e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bfb8:	f894 7041 	ldrb.w	r7, [r4, #65]	@ 0x41
 800bfbc:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bfbe:	2f00      	cmp	r7, #0
 800bfc0:	f000 80bf 	beq.w	800c142 <find_volume+0x252>
 800bfc4:	1e7b      	subs	r3, r7, #1
 800bfc6:	423b      	tst	r3, r7
 800bfc8:	f040 80bd 	bne.w	800c146 <find_volume+0x256>
	rv = rv << 8 | ptr[0];
 800bfcc:	f894 2046 	ldrb.w	r2, [r4, #70]	@ 0x46
 800bfd0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bfd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bfd8:	fa0f fb83 	sxth.w	fp, r3
 800bfdc:	469a      	mov	sl, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bfde:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bfe0:	f013 0f0f 	tst.w	r3, #15
 800bfe4:	f040 80b1 	bne.w	800c14a <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 800bfe8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800bfec:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bff0:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800bff4:	d103      	bne.n	800bffe <find_volume+0x10e>
 800bff6:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800bffa:	f7fe ffd1 	bl	800afa0 <ld_dword>
	rv = rv << 8 | ptr[0];
 800bffe:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800c002:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c006:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800c00a:	f000 80a0 	beq.w	800c14e <find_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c00e:	fb08 f909 	mul.w	r9, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c012:	eb03 121a 	add.w	r2, r3, sl, lsr #4
 800c016:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c018:	4290      	cmp	r0, r2
 800c01a:	f0c0 809a 	bcc.w	800c152 <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c01e:	1a80      	subs	r0, r0, r2
 800c020:	fbb0 f1f7 	udiv	r1, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c024:	42b8      	cmp	r0, r7
 800c026:	f0c0 8096 	bcc.w	800c156 <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c02a:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800c02e:	4281      	cmp	r1, r0
 800c030:	f200 809d 	bhi.w	800c16e <find_volume+0x27e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c034:	f640 70f5 	movw	r0, #4085	@ 0xff5
 800c038:	4281      	cmp	r1, r0
 800c03a:	f240 80cf 	bls.w	800c1dc <find_volume+0x2ec>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c03e:	3102      	adds	r1, #2
 800c040:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c042:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c044:	442b      	add	r3, r5
 800c046:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c048:	442a      	add	r2, r5
 800c04a:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c04c:	f1ba 0f00 	cmp.w	sl, #0
 800c050:	f000 8089 	beq.w	800c166 <find_volume+0x276>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c054:	eb09 0203 	add.w	r2, r9, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c058:	004b      	lsls	r3, r1, #1
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c05a:	2102      	movs	r1, #2
 800c05c:	e0d1      	b.n	800c202 <find_volume+0x312>
 800c05e:	466f      	mov	r7, sp
 800c060:	f504 75fd 	add.w	r5, r4, #506	@ 0x1fa
 800c064:	f204 293a 	addw	r9, r4, #570	@ 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c068:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c06a:	f04f 0a00 	mov.w	sl, #0
 800c06e:	e005      	b.n	800c07c <find_volume+0x18c>
 800c070:	4650      	mov	r0, sl
 800c072:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c076:	3510      	adds	r5, #16
 800c078:	454d      	cmp	r5, r9
 800c07a:	d007      	beq.n	800c08c <find_volume+0x19c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c07c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0f5      	beq.n	800c070 <find_volume+0x180>
 800c084:	4628      	mov	r0, r5
 800c086:	f7fe ff8b 	bl	800afa0 <ld_dword>
 800c08a:	e7f2      	b.n	800c072 <find_volume+0x182>
 800c08c:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c090:	f04f 0903 	mov.w	r9, #3
 800c094:	e009      	b.n	800c0aa <find_volume+0x1ba>
 800c096:	4629      	mov	r1, r5
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff fee7 	bl	800be6c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c09e:	2801      	cmp	r0, #1
 800c0a0:	f240 80c7 	bls.w	800c232 <find_volume+0x342>
 800c0a4:	45b8      	cmp	r8, r7
 800c0a6:	f43f af5e 	beq.w	800bf66 <find_volume+0x76>
			bsect = br[i];
 800c0aa:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	d1f1      	bne.n	800c096 <find_volume+0x1a6>
 800c0b2:	4648      	mov	r0, r9
 800c0b4:	e7f6      	b.n	800c0a4 <find_volume+0x1b4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c0b6:	1c69      	adds	r1, r5, #1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7ff f916 	bl	800b2ea <move_window>
 800c0be:	bb58      	cbnz	r0, 800c118 <find_volume+0x228>
			fs->fsi_flag = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800c0c4:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800c0c8:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800c0cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c0d0:	b21b      	sxth	r3, r3
 800c0d2:	4a3f      	ldr	r2, [pc, #252]	@ (800c1d0 <find_volume+0x2e0>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d001      	beq.n	800c0dc <find_volume+0x1ec>
		fmt = FS_FAT32;
 800c0d8:	2103      	movs	r1, #3
 800c0da:	e09e      	b.n	800c21a <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c0dc:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800c0e0:	f7fe ff5e 	bl	800afa0 <ld_dword>
 800c0e4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1d4 <find_volume+0x2e4>)
 800c0e6:	4298      	cmp	r0, r3
 800c0e8:	d001      	beq.n	800c0ee <find_volume+0x1fe>
		fmt = FS_FAT32;
 800c0ea:	2103      	movs	r1, #3
 800c0ec:	e095      	b.n	800c21a <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c0ee:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800c0f2:	f7fe ff55 	bl	800afa0 <ld_dword>
 800c0f6:	4b38      	ldr	r3, [pc, #224]	@ (800c1d8 <find_volume+0x2e8>)
 800c0f8:	4298      	cmp	r0, r3
 800c0fa:	d001      	beq.n	800c100 <find_volume+0x210>
		fmt = FS_FAT32;
 800c0fc:	2103      	movs	r1, #3
 800c0fe:	e08c      	b.n	800c21a <find_volume+0x32a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c100:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800c104:	f7fe ff4c 	bl	800afa0 <ld_dword>
 800c108:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c10a:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800c10e:	f7fe ff47 	bl	800afa0 <ld_dword>
 800c112:	6120      	str	r0, [r4, #16]
		fmt = FS_FAT32;
 800c114:	2103      	movs	r1, #3
 800c116:	e080      	b.n	800c21a <find_volume+0x32a>
 800c118:	2103      	movs	r1, #3
 800c11a:	e07e      	b.n	800c21a <find_volume+0x32a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c11c:	250b      	movs	r5, #11
}
 800c11e:	4628      	mov	r0, r5
 800c120:	b005      	add	sp, #20
 800c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c126:	250c      	movs	r5, #12
 800c128:	e7f9      	b.n	800c11e <find_volume+0x22e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c12a:	2503      	movs	r5, #3
 800c12c:	e7f7      	b.n	800c11e <find_volume+0x22e>
		return FR_WRITE_PROTECTED;
 800c12e:	250a      	movs	r5, #10
 800c130:	e7f5      	b.n	800c11e <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c132:	2501      	movs	r5, #1
 800c134:	e7f3      	b.n	800c11e <find_volume+0x22e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c136:	250d      	movs	r5, #13
 800c138:	e7f1      	b.n	800c11e <find_volume+0x22e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c13a:	250d      	movs	r5, #13
 800c13c:	e7ef      	b.n	800c11e <find_volume+0x22e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c13e:	250d      	movs	r5, #13
 800c140:	e7ed      	b.n	800c11e <find_volume+0x22e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c142:	250d      	movs	r5, #13
 800c144:	e7eb      	b.n	800c11e <find_volume+0x22e>
 800c146:	250d      	movs	r5, #13
 800c148:	e7e9      	b.n	800c11e <find_volume+0x22e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c14a:	250d      	movs	r5, #13
 800c14c:	e7e7      	b.n	800c11e <find_volume+0x22e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c14e:	250d      	movs	r5, #13
 800c150:	e7e5      	b.n	800c11e <find_volume+0x22e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c152:	250d      	movs	r5, #13
 800c154:	e7e3      	b.n	800c11e <find_volume+0x22e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c156:	250d      	movs	r5, #13
 800c158:	e7e1      	b.n	800c11e <find_volume+0x22e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c15a:	250d      	movs	r5, #13
 800c15c:	e7df      	b.n	800c11e <find_volume+0x22e>
 800c15e:	250d      	movs	r5, #13
 800c160:	e7dd      	b.n	800c11e <find_volume+0x22e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c162:	250d      	movs	r5, #13
 800c164:	e7db      	b.n	800c11e <find_volume+0x22e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c166:	250d      	movs	r5, #13
 800c168:	e7d9      	b.n	800c11e <find_volume+0x22e>
 800c16a:	250d      	movs	r5, #13
 800c16c:	e7d7      	b.n	800c11e <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c16e:	1c8f      	adds	r7, r1, #2
 800c170:	61a7      	str	r7, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c172:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c174:	442b      	add	r3, r5
 800c176:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c178:	442a      	add	r2, r5
 800c17a:	62e2      	str	r2, [r4, #44]	@ 0x2c
	rv = rv << 8 | ptr[0];
 800c17c:	f894 205f 	ldrb.w	r2, [r4, #95]	@ 0x5f
 800c180:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 800c184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c188:	fa1f fb8b 	uxth.w	fp, fp
 800c18c:	ea5b 0b03 	orrs.w	fp, fp, r3
 800c190:	d1e7      	bne.n	800c162 <find_volume+0x272>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c192:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800c196:	f7fe ff03 	bl	800afa0 <ld_dword>
 800c19a:	62a0      	str	r0, [r4, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c19c:	00bb      	lsls	r3, r7, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c19e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c1a2:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800c1a6:	d3d8      	bcc.n	800c15a <find_volume+0x26a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ac:	6163      	str	r3, [r4, #20]
 800c1ae:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c1b0:	2380      	movs	r3, #128	@ 0x80
 800c1b2:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800c1b4:	f894 2065 	ldrb.w	r2, [r4, #101]	@ 0x65
 800c1b8:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 800c1bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c1c0:	b21b      	sxth	r3, r3
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	f43f af77 	beq.w	800c0b6 <find_volume+0x1c6>
		fmt = FS_FAT32;
 800c1c8:	2103      	movs	r1, #3
 800c1ca:	e026      	b.n	800c21a <find_volume+0x32a>
 800c1cc:	20001484 	.word	0x20001484
 800c1d0:	ffffaa55 	.word	0xffffaa55
 800c1d4:	41615252 	.word	0x41615252
 800c1d8:	61417272 	.word	0x61417272
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1dc:	3102      	adds	r1, #2
 800c1de:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c1e0:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1e2:	442b      	add	r3, r5
 800c1e4:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c1e6:	442a      	add	r2, r5
 800c1e8:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1ea:	f1ba 0f00 	cmp.w	sl, #0
 800c1ee:	d0bc      	beq.n	800c16a <find_volume+0x27a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c1f0:	eb09 0203 	add.w	r2, r9, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c1f4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c1f8:	f001 0101 	and.w	r1, r1, #1
 800c1fc:	eb01 0353 	add.w	r3, r1, r3, lsr #1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c200:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c202:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c204:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c208:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800c20c:	d3a7      	bcc.n	800c15e <find_volume+0x26e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c20e:	f04f 33ff 	mov.w	r3, #4294967295
 800c212:	6163      	str	r3, [r4, #20]
 800c214:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c216:	2380      	movs	r3, #128	@ 0x80
 800c218:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 800c21a:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c21c:	4a07      	ldr	r2, [pc, #28]	@ (800c23c <find_volume+0x34c>)
 800c21e:	8813      	ldrh	r3, [r2, #0]
 800c220:	3301      	adds	r3, #1
 800c222:	b29b      	uxth	r3, r3
 800c224:	8013      	strh	r3, [r2, #0]
 800c226:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800c228:	4620      	mov	r0, r4
 800c22a:	f7fe ffa3 	bl	800b174 <clear_lock>
	return FR_OK;
 800c22e:	4635      	mov	r5, r6
 800c230:	e775      	b.n	800c11e <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c232:	2804      	cmp	r0, #4
 800c234:	f47f ae9d 	bne.w	800bf72 <find_volume+0x82>
 800c238:	2501      	movs	r5, #1
 800c23a:	e770      	b.n	800c11e <find_volume+0x22e>
 800c23c:	20001480 	.word	0x20001480

0800c240 <ld_clust>:
{
 800c240:	4602      	mov	r2, r0
	rv = rv << 8 | ptr[0];
 800c242:	7ec8      	ldrb	r0, [r1, #27]
 800c244:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 800c246:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c24a:	7813      	ldrb	r3, [r2, #0]
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d000      	beq.n	800c252 <ld_clust+0x12>
}
 800c250:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800c252:	7d4a      	ldrb	r2, [r1, #21]
 800c254:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c25a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	return cl;
 800c25e:	e7f7      	b.n	800c250 <ld_clust+0x10>

0800c260 <follow_path>:
{
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	b085      	sub	sp, #20
 800c266:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 800c268:	f8d0 c000 	ldr.w	ip, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c26c:	460b      	mov	r3, r1
 800c26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c272:	2a2f      	cmp	r2, #47	@ 0x2f
 800c274:	d0fa      	beq.n	800c26c <follow_path+0xc>
 800c276:	2a5c      	cmp	r2, #92	@ 0x5c
 800c278:	d0f8      	beq.n	800c26c <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8ca 2008 	str.w	r2, [sl, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c280:	781a      	ldrb	r2, [r3, #0]
 800c282:	2a1f      	cmp	r2, #31
 800c284:	d905      	bls.n	800c292 <follow_path+0x32>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c286:	f04f 0901 	mov.w	r9, #1
 800c28a:	f8cd c00c 	str.w	ip, [sp, #12]
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	e0f7      	b.n	800c482 <follow_path+0x222>
		dp->fn[NSFLAG] = NS_NONAME;
 800c292:	2380      	movs	r3, #128	@ 0x80
 800c294:	f88a 302f 	strb.w	r3, [sl, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c298:	2100      	movs	r1, #0
 800c29a:	4650      	mov	r0, sl
 800c29c:	f7ff fa13 	bl	800b6c6 <dir_sdi>
 800c2a0:	4601      	mov	r1, r0
}
 800c2a2:	4608      	mov	r0, r1
 800c2a4:	b005      	add	sp, #20
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	3c01      	subs	r4, #1
 800c2ae:	9b02      	ldr	r3, [sp, #8]
 800c2b0:	191a      	adds	r2, r3, r4
 800c2b2:	e000      	b.n	800c2b6 <follow_path+0x56>
		w = p[si++];					/* Get a character */
 800c2b4:	460a      	mov	r2, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c2b6:	1c51      	adds	r1, r2, #1
 800c2b8:	7853      	ldrb	r3, [r2, #1]
 800c2ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2bc:	d0fa      	beq.n	800c2b4 <follow_path+0x54>
 800c2be:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2c0:	d0f8      	beq.n	800c2b4 <follow_path+0x54>
 800c2c2:	f1c6 0301 	rsb	r3, r6, #1
 800c2c6:	4413      	add	r3, r2
	*path = &p[si];						/* Return pointer to the next segment */
 800c2c8:	9a02      	ldr	r2, [sp, #8]
 800c2ca:	441a      	add	r2, r3
 800c2cc:	9202      	str	r2, [sp, #8]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	f000 8138 	beq.w	800c544 <follow_path+0x2e4>
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 800c2da:	e029      	b.n	800c330 <follow_path+0xd0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f040 8138 	bne.w	800c552 <follow_path+0x2f2>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2e2:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
 800c2e6:	1c63      	adds	r3, r4, #1
 800c2e8:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800c2ec:	281f      	cmp	r0, #31
 800c2ee:	d91a      	bls.n	800c326 <follow_path+0xc6>
		w = p[si++];					/* Get a character */
 800c2f0:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c2f2:	282f      	cmp	r0, #47	@ 0x2f
 800c2f4:	d0d9      	beq.n	800c2aa <follow_path+0x4a>
 800c2f6:	285c      	cmp	r0, #92	@ 0x5c
 800c2f8:	d0d7      	beq.n	800c2aa <follow_path+0x4a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c2fa:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800c2fe:	f000 8128 	beq.w	800c552 <follow_path+0x2f2>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c302:	4649      	mov	r1, r9
 800c304:	f000 fc26 	bl	800cb54 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c308:	4602      	mov	r2, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f000 8121 	beq.w	800c552 <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c310:	287f      	cmp	r0, #127	@ 0x7f
 800c312:	d8e6      	bhi.n	800c2e2 <follow_path+0x82>
	while (*str && *str != chr) str++;
 800c314:	2322      	movs	r3, #34	@ 0x22
 800c316:	4990      	ldr	r1, [pc, #576]	@ (800c558 <follow_path+0x2f8>)
 800c318:	429a      	cmp	r2, r3
 800c31a:	d0df      	beq.n	800c2dc <follow_path+0x7c>
 800c31c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1f9      	bne.n	800c318 <follow_path+0xb8>
 800c324:	e7dd      	b.n	800c2e2 <follow_path+0x82>
 800c326:	4605      	mov	r5, r0
 800c328:	e7ce      	b.n	800c2c8 <follow_path+0x68>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c32a:	3c01      	subs	r4, #1
 800c32c:	f000 810e 	beq.w	800c54c <follow_path+0x2ec>
		w = lfn[di - 1];
 800c330:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800c334:	2b20      	cmp	r3, #32
 800c336:	d0f8      	beq.n	800c32a <follow_path+0xca>
 800c338:	2b2e      	cmp	r3, #46	@ 0x2e
 800c33a:	d0f6      	beq.n	800c32a <follow_path+0xca>
	lfn[di] = 0;						/* LFN is created */
 800c33c:	2300      	movs	r3, #0
 800c33e:	9a01      	ldr	r2, [sp, #4]
 800c340:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c344:	2c00      	cmp	r4, #0
 800c346:	f000 8104 	beq.w	800c552 <follow_path+0x2f2>
	mem_set(dp->fn, ' ', 11);
 800c34a:	220b      	movs	r2, #11
 800c34c:	2120      	movs	r1, #32
 800c34e:	f10a 0024 	add.w	r0, sl, #36	@ 0x24
 800c352:	f7fe fe42 	bl	800afda <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c356:	2600      	movs	r6, #0
 800c358:	e000      	b.n	800c35c <follow_path+0xfc>
 800c35a:	3601      	adds	r6, #1
 800c35c:	f83b 3f02 	ldrh.w	r3, [fp, #2]!
 800c360:	2b20      	cmp	r3, #32
 800c362:	d0fa      	beq.n	800c35a <follow_path+0xfa>
 800c364:	2b2e      	cmp	r3, #46	@ 0x2e
 800c366:	d0f8      	beq.n	800c35a <follow_path+0xfa>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c368:	2d1f      	cmp	r5, #31
 800c36a:	bf8c      	ite	hi
 800c36c:	2500      	movhi	r5, #0
 800c36e:	2501      	movls	r5, #1
 800c370:	00ad      	lsls	r5, r5, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 800c372:	b10e      	cbz	r6, 800c378 <follow_path+0x118>
 800c374:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c378:	9a01      	ldr	r2, [sp, #4]
 800c37a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800c37e:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 800c382:	292e      	cmp	r1, #46	@ 0x2e
 800c384:	d001      	beq.n	800c38a <follow_path+0x12a>
 800c386:	3c01      	subs	r4, #1
 800c388:	d1f9      	bne.n	800c37e <follow_path+0x11e>
		w = lfn[si++];					/* Get an LFN character */
 800c38a:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 80ce 	beq.w	800c52e <follow_path+0x2ce>
 800c392:	f04f 0800 	mov.w	r8, #0
 800c396:	2708      	movs	r7, #8
 800c398:	46c3      	mov	fp, r8
 800c39a:	e016      	b.n	800c3ca <follow_path+0x16a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c39c:	42b4      	cmp	r4, r6
 800c39e:	d10c      	bne.n	800c3ba <follow_path+0x15a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3a0:	45bb      	cmp	fp, r7
 800c3a2:	d229      	bcs.n	800c3f8 <follow_path+0x198>
			if (ni == 11) {				/* Long extension */
 800c3a4:	2f0b      	cmp	r7, #11
 800c3a6:	d07c      	beq.n	800c4a2 <follow_path+0x242>
			b <<= 2; continue;
 800c3a8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800c3ac:	fa5f f888 	uxtb.w	r8, r8
 800c3b0:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c3b2:	270b      	movs	r7, #11
 800c3b4:	f04f 0b08 	mov.w	fp, #8
			b <<= 2; continue;
 800c3b8:	e002      	b.n	800c3c0 <follow_path+0x160>
			cf |= NS_LOSS | NS_LFN; continue;
 800c3ba:	f045 0503 	orr.w	r5, r5, #3
 800c3be:	4633      	mov	r3, r6
		w = lfn[si++];					/* Get an LFN character */
 800c3c0:	1c5e      	adds	r6, r3, #1
 800c3c2:	9a01      	ldr	r2, [sp, #4]
 800c3c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800c3c8:	b1f3      	cbz	r3, 800c408 <follow_path+0x1a8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3ca:	2b20      	cmp	r3, #32
 800c3cc:	d0f5      	beq.n	800c3ba <follow_path+0x15a>
 800c3ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3d0:	d0e4      	beq.n	800c39c <follow_path+0x13c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3d2:	45bb      	cmp	fp, r7
 800c3d4:	d210      	bcs.n	800c3f8 <follow_path+0x198>
 800c3d6:	42b4      	cmp	r4, r6
 800c3d8:	d0e4      	beq.n	800c3a4 <follow_path+0x144>
		if (w >= 0x80) {				/* Non ASCII character */
 800c3da:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3dc:	d86c      	bhi.n	800c4b8 <follow_path+0x258>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d177      	bne.n	800c4d2 <follow_path+0x272>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c3e2:	f045 0503 	orr.w	r5, r5, #3
 800c3e6:	235f      	movs	r3, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 800c3e8:	eb0a 020b 	add.w	r2, sl, fp
 800c3ec:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800c3f0:	4633      	mov	r3, r6
 800c3f2:	f10b 0b01 	add.w	fp, fp, #1
 800c3f6:	e7e3      	b.n	800c3c0 <follow_path+0x160>
			if (ni == 11) {				/* Long extension */
 800c3f8:	2f0b      	cmp	r7, #11
 800c3fa:	d052      	beq.n	800c4a2 <follow_path+0x242>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c3fc:	42b4      	cmp	r4, r6
 800c3fe:	bf18      	it	ne
 800c400:	f045 0503 	orrne.w	r5, r5, #3
			if (si > di) break;			/* No extension */
 800c404:	42b4      	cmp	r4, r6
 800c406:	d2cf      	bcs.n	800c3a8 <follow_path+0x148>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c408:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c40c:	2be5      	cmp	r3, #229	@ 0xe5
 800c40e:	d04f      	beq.n	800c4b0 <follow_path+0x250>
	if (ni == 8) b <<= 2;
 800c410:	2f08      	cmp	r7, #8
 800c412:	f000 8092 	beq.w	800c53a <follow_path+0x2da>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c416:	f008 030c 	and.w	r3, r8, #12
 800c41a:	2b0c      	cmp	r3, #12
 800c41c:	d003      	beq.n	800c426 <follow_path+0x1c6>
 800c41e:	f008 0203 	and.w	r2, r8, #3
 800c422:	2a03      	cmp	r2, #3
 800c424:	d101      	bne.n	800c42a <follow_path+0x1ca>
 800c426:	f045 0502 	orr.w	r5, r5, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c42a:	f015 0f02 	tst.w	r5, #2
 800c42e:	d109      	bne.n	800c444 <follow_path+0x1e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c430:	f008 0203 	and.w	r2, r8, #3
 800c434:	2a01      	cmp	r2, #1
 800c436:	bf08      	it	eq
 800c438:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	bf08      	it	eq
 800c440:	f045 0508 	orreq.w	r5, r5, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c444:	f88a 502f 	strb.w	r5, [sl, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c448:	4650      	mov	r0, sl
 800c44a:	f7ff fac3 	bl	800b9d4 <dir_find>
			ns = dp->fn[NSFLAG];
 800c44e:	f89a 202f 	ldrb.w	r2, [sl, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c452:	4601      	mov	r1, r0
 800c454:	2800      	cmp	r0, #0
 800c456:	d15f      	bne.n	800c518 <follow_path+0x2b8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c458:	f012 0f04 	tst.w	r2, #4
 800c45c:	f47f af21 	bne.w	800c2a2 <follow_path+0x42>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c460:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800c464:	f013 0f10 	tst.w	r3, #16
 800c468:	d05f      	beq.n	800c52a <follow_path+0x2ca>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c46a:	9803      	ldr	r0, [sp, #12]
 800c46c:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800c470:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c478:	4419      	add	r1, r3
 800c47a:	f7ff fee1 	bl	800c240 <ld_clust>
 800c47e:	f8ca 0008 	str.w	r0, [sl, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c482:	f8da 3000 	ldr.w	r3, [sl]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	9301      	str	r3, [sp, #4]
		w = p[si++];					/* Get a character */
 800c48a:	9a02      	ldr	r2, [sp, #8]
 800c48c:	7815      	ldrb	r5, [r2, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800c48e:	2d1f      	cmp	r5, #31
 800c490:	d958      	bls.n	800c544 <follow_path+0x2e4>
 800c492:	f1a3 0b02 	sub.w	fp, r3, #2
 800c496:	4616      	mov	r6, r2
 800c498:	4690      	mov	r8, r2
 800c49a:	465f      	mov	r7, fp
		w = p[si++];					/* Get a character */
 800c49c:	2401      	movs	r4, #1
 800c49e:	4628      	mov	r0, r5
 800c4a0:	e727      	b.n	800c2f2 <follow_path+0x92>
				cf |= NS_LOSS | NS_LFN; break;
 800c4a2:	f045 0503 	orr.w	r5, r5, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c4a6:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c4aa:	2be5      	cmp	r3, #229	@ 0xe5
 800c4ac:	d1b3      	bne.n	800c416 <follow_path+0x1b6>
 800c4ae:	270b      	movs	r7, #11
 800c4b0:	2305      	movs	r3, #5
 800c4b2:	f88a 3024 	strb.w	r3, [sl, #36]	@ 0x24
 800c4b6:	e7ab      	b.n	800c410 <follow_path+0x1b0>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fb4a 	bl	800cb54 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	b118      	cbz	r0, 800c4cc <follow_path+0x26c>
 800c4c4:	4a25      	ldr	r2, [pc, #148]	@ (800c55c <follow_path+0x2fc>)
 800c4c6:	4402      	add	r2, r0
 800c4c8:	f812 3c80 	ldrb.w	r3, [r2, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 800c4cc:	f045 0502 	orr.w	r5, r5, #2
 800c4d0:	e785      	b.n	800c3de <follow_path+0x17e>
	while (*str && *str != chr) str++;
 800c4d2:	222b      	movs	r2, #43	@ 0x2b
 800c4d4:	4922      	ldr	r1, [pc, #136]	@ (800c560 <follow_path+0x300>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d00b      	beq.n	800c4f2 <follow_path+0x292>
 800c4da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	d1f9      	bne.n	800c4d6 <follow_path+0x276>
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4e2:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c4e6:	b292      	uxth	r2, r2
 800c4e8:	2a19      	cmp	r2, #25
 800c4ea:	d806      	bhi.n	800c4fa <follow_path+0x29a>
					b |= 2;
 800c4ec:	f048 0802 	orr.w	r8, r8, #2
 800c4f0:	e77a      	b.n	800c3e8 <follow_path+0x188>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	f47f af75 	bne.w	800c3e2 <follow_path+0x182>
 800c4f8:	e7f3      	b.n	800c4e2 <follow_path+0x282>
					if (IsLower(w)) {	/* ASCII small capital */
 800c4fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c4fe:	b292      	uxth	r2, r2
 800c500:	2a19      	cmp	r2, #25
 800c502:	f63f af71 	bhi.w	800c3e8 <follow_path+0x188>
						b |= 1; w -= 0x20;
 800c506:	f048 0801 	orr.w	r8, r8, #1
 800c50a:	3b20      	subs	r3, #32
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	e76b      	b.n	800c3e8 <follow_path+0x188>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c510:	f04f 0800 	mov.w	r8, #0
 800c514:	2708      	movs	r7, #8
 800c516:	e7cb      	b.n	800c4b0 <follow_path+0x250>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c518:	2804      	cmp	r0, #4
 800c51a:	f47f aec2 	bne.w	800c2a2 <follow_path+0x42>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c51e:	f012 0f04 	tst.w	r2, #4
 800c522:	bf14      	ite	ne
 800c524:	4601      	movne	r1, r0
 800c526:	2105      	moveq	r1, #5
 800c528:	e6bb      	b.n	800c2a2 <follow_path+0x42>
				res = FR_NO_PATH; break;
 800c52a:	2105      	movs	r1, #5
 800c52c:	e6b9      	b.n	800c2a2 <follow_path+0x42>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c52e:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c532:	2be5      	cmp	r3, #229	@ 0xe5
 800c534:	d0ec      	beq.n	800c510 <follow_path+0x2b0>
 800c536:	f04f 0800 	mov.w	r8, #0
	if (ni == 8) b <<= 2;
 800c53a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800c53e:	fa5f f883 	uxtb.w	r8, r3
 800c542:	e768      	b.n	800c416 <follow_path+0x1b6>
	lfn[di] = 0;						/* LFN is created */
 800c544:	2300      	movs	r3, #0
 800c546:	9a01      	ldr	r2, [sp, #4]
 800c548:	8013      	strh	r3, [r2, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c54a:	e002      	b.n	800c552 <follow_path+0x2f2>
	lfn[di] = 0;						/* LFN is created */
 800c54c:	2300      	movs	r3, #0
 800c54e:	9a01      	ldr	r2, [sp, #4]
 800c550:	8013      	strh	r3, [r2, #0]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c552:	2106      	movs	r1, #6
	return res;
 800c554:	e6a5      	b.n	800c2a2 <follow_path+0x42>
 800c556:	bf00      	nop
 800c558:	0800f1b4 	.word	0x0800f1b4
 800c55c:	0800f1d8 	.word	0x0800f1d8
 800c560:	0800f1c0 	.word	0x0800f1c0

0800c564 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	9001      	str	r0, [sp, #4]
 800c56a:	9100      	str	r1, [sp, #0]
 800c56c:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c56e:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c570:	a803      	add	r0, sp, #12
 800c572:	f7fe fe41 	bl	800b1f8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c576:	1e04      	subs	r4, r0, #0
 800c578:	db1a      	blt.n	800c5b0 <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c57a:	4b11      	ldr	r3, [pc, #68]	@ (800c5c0 <f_mount+0x5c>)
 800c57c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800c580:	b125      	cbz	r5, 800c58c <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c582:	4628      	mov	r0, r5
 800c584:	f7fe fdf6 	bl	800b174 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c588:	2300      	movs	r3, #0
 800c58a:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800c58c:	9b01      	ldr	r3, [sp, #4]
 800c58e:	b18b      	cbz	r3, 800c5b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c590:	2200      	movs	r2, #0
 800c592:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c594:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c0 <f_mount+0x5c>)
 800c596:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c59a:	2e01      	cmp	r6, #1
 800c59c:	d002      	beq.n	800c5a4 <f_mount+0x40>
 800c59e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800c5a0:	b004      	add	sp, #16
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	a901      	add	r1, sp, #4
 800c5a8:	4668      	mov	r0, sp
 800c5aa:	f7ff fca1 	bl	800bef0 <find_volume>
	LEAVE_FF(fs, res);
 800c5ae:	e7f7      	b.n	800c5a0 <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5b0:	200b      	movs	r0, #11
 800c5b2:	e7f5      	b.n	800c5a0 <f_mount+0x3c>
	FatFs[vol] = fs;					/* Register new fs object */
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	4b02      	ldr	r3, [pc, #8]	@ (800c5c0 <f_mount+0x5c>)
 800c5b8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c5bc:	e7f0      	b.n	800c5a0 <f_mount+0x3c>
 800c5be:	bf00      	nop
 800c5c0:	20001484 	.word	0x20001484

0800c5c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800c5cc:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f000 810a 	beq.w	800c7e8 <f_open+0x224>
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c5d8:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800c5dc:	463a      	mov	r2, r7
 800c5de:	a982      	add	r1, sp, #520	@ 0x208
 800c5e0:	a801      	add	r0, sp, #4
 800c5e2:	f7ff fc85 	bl	800bef0 <find_volume>
	if (res == FR_OK) {
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	b130      	cbz	r0, 800c5f8 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800c5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800c5f8:	f8dd 8208 	ldr.w	r8, [sp, #520]	@ 0x208
 800c5fc:	f8cd 820c 	str.w	r8, [sp, #524]	@ 0x20c
		INIT_NAMBUF(fs);
 800c600:	ab02      	add	r3, sp, #8
 800c602:	f8c8 300c 	str.w	r3, [r8, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c606:	9901      	ldr	r1, [sp, #4]
 800c608:	a883      	add	r0, sp, #524	@ 0x20c
 800c60a:	f7ff fe29 	bl	800c260 <follow_path>
		if (res == FR_OK) {
 800c60e:	4603      	mov	r3, r0
 800c610:	2800      	cmp	r0, #0
 800c612:	f040 80f3 	bne.w	800c7fc <f_open+0x238>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c616:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f2c0 80e9 	blt.w	800c7f2 <f_open+0x22e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c620:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 800c624:	bf14      	ite	ne
 800c626:	2101      	movne	r1, #1
 800c628:	2100      	moveq	r1, #0
 800c62a:	a883      	add	r0, sp, #524	@ 0x20c
 800c62c:	f7fe fcdc 	bl	800afe8 <chk_lock>
 800c630:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c632:	f014 0f1c 	tst.w	r4, #28
 800c636:	d063      	beq.n	800c700 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 800c638:	2800      	cmp	r0, #0
 800c63a:	f040 80e6 	bne.w	800c80a <f_open+0x246>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c63e:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800c642:	f013 0f11 	tst.w	r3, #17
 800c646:	f040 80c7 	bne.w	800c7d8 <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c64a:	f014 0f04 	tst.w	r4, #4
 800c64e:	d009      	beq.n	800c664 <f_open+0xa0>
 800c650:	2508      	movs	r5, #8
 800c652:	e7ca      	b.n	800c5ea <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c654:	a883      	add	r0, sp, #524	@ 0x20c
 800c656:	f7ff fa97 	bl	800bb88 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f040 80ba 	bne.w	800c7d4 <f_open+0x210>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c660:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c664:	f017 0f08 	tst.w	r7, #8
 800c668:	d110      	bne.n	800c68c <f_open+0xc8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c66a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800c66e:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c670:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800c672:	62b4      	str	r4, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c674:	2f01      	cmp	r7, #1
 800c676:	bf94      	ite	ls
 800c678:	2100      	movls	r1, #0
 800c67a:	2101      	movhi	r1, #1
 800c67c:	a883      	add	r0, sp, #524	@ 0x20c
 800c67e:	f7fe fcfb 	bl	800b078 <inc_lock>
 800c682:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c684:	2800      	cmp	r0, #0
 800c686:	d14e      	bne.n	800c726 <f_open+0x162>
 800c688:	2502      	movs	r5, #2
 800c68a:	e7ae      	b.n	800c5ea <f_open+0x26>
				dw = GET_FATTIME();
 800c68c:	f7fc fcc6 	bl	800901c <get_fattime>
 800c690:	4681      	mov	r9, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c692:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800c694:	4601      	mov	r1, r0
 800c696:	f104 000e 	add.w	r0, r4, #14
 800c69a:	f7fe fc8c 	bl	800afb6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c69e:	4649      	mov	r1, r9
 800c6a0:	f104 0016 	add.w	r0, r4, #22
 800c6a4:	f7fe fc87 	bl	800afb6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6a8:	2320      	movs	r3, #32
 800c6aa:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	f7ff fdc6 	bl	800c240 <ld_clust>
 800c6b4:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	f7fe ff8e 	bl	800b5dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	f104 001c 	add.w	r0, r4, #28
 800c6c6:	f7fe fc76 	bl	800afb6 <st_dword>
					fs->wflag = 1;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c6d0:	f1b9 0f00 	cmp.w	r9, #0
 800c6d4:	d024      	beq.n	800c720 <f_open+0x15c>
						dw = fs->winsect;
 800c6d6:	f8d8 4030 	ldr.w	r4, [r8, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4649      	mov	r1, r9
 800c6de:	a883      	add	r0, sp, #524	@ 0x20c
 800c6e0:	f7ff f8aa 	bl	800b838 <remove_chain>
						if (res == FR_OK) {
 800c6e4:	b108      	cbz	r0, 800c6ea <f_open+0x126>
						res = remove_chain(&dj.obj, cl, 0);
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	e77f      	b.n	800c5ea <f_open+0x26>
							res = move_window(fs, dw);
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4640      	mov	r0, r8
 800c6ee:	f7fe fdfc 	bl	800b2ea <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c6f2:	f109 33ff 	add.w	r3, r9, #4294967295
 800c6f6:	f8c8 3010 	str.w	r3, [r8, #16]
		if (res == FR_OK) {
 800c6fa:	b188      	cbz	r0, 800c720 <f_open+0x15c>
							res = move_window(fs, dw);
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	e774      	b.n	800c5ea <f_open+0x26>
			if (res == FR_OK) {					/* Following succeeded */
 800c700:	2800      	cmp	r0, #0
 800c702:	d16b      	bne.n	800c7dc <f_open+0x218>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c704:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800c708:	f013 0f10 	tst.w	r3, #16
 800c70c:	d168      	bne.n	800c7e0 <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c70e:	f014 0f02 	tst.w	r4, #2
 800c712:	d002      	beq.n	800c71a <f_open+0x156>
 800c714:	f013 0f01 	tst.w	r3, #1
 800c718:	d164      	bne.n	800c7e4 <f_open+0x220>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c71a:	f014 0f08 	tst.w	r4, #8
 800c71e:	d0a4      	beq.n	800c66a <f_open+0xa6>
				mode |= FA_MODIFIED;
 800c720:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
 800c724:	e7a1      	b.n	800c66a <f_open+0xa6>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c726:	4621      	mov	r1, r4
 800c728:	4640      	mov	r0, r8
 800c72a:	f7ff fd89 	bl	800c240 <ld_clust>
 800c72e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c730:	f104 001c 	add.w	r0, r4, #28
 800c734:	f7fe fc34 	bl	800afa0 <ld_dword>
 800c738:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c73a:	2100      	movs	r1, #0
 800c73c:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c73e:	f8c6 8000 	str.w	r8, [r6]
			fp->obj.id = fs->id;
 800c742:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800c746:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800c748:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800c74a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c74c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c74e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c750:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 800c754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c758:	4648      	mov	r0, r9
 800c75a:	f7fe fc3e 	bl	800afda <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c75e:	f017 0f20 	tst.w	r7, #32
 800c762:	f43f af44 	beq.w	800c5ee <f_open+0x2a>
 800c766:	68f4      	ldr	r4, [r6, #12]
 800c768:	2c00      	cmp	r4, #0
 800c76a:	f43f af40 	beq.w	800c5ee <f_open+0x2a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c76e:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c770:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c774:	025f      	lsls	r7, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c776:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c778:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 800c77c:	d804      	bhi.n	800c788 <f_open+0x1c4>
 800c77e:	460b      	mov	r3, r1
 800c780:	e00e      	b.n	800c7a0 <f_open+0x1dc>
 800c782:	1be4      	subs	r4, r4, r7
 800c784:	42a7      	cmp	r7, r4
 800c786:	d20a      	bcs.n	800c79e <f_open+0x1da>
					clst = get_fat(&fp->obj, clst);
 800c788:	4630      	mov	r0, r6
 800c78a:	f7fe ff34 	bl	800b5f6 <get_fat>
 800c78e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c790:	2801      	cmp	r0, #1
 800c792:	d92b      	bls.n	800c7ec <f_open+0x228>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c794:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c798:	d1f3      	bne.n	800c782 <f_open+0x1be>
 800c79a:	2501      	movs	r5, #1
 800c79c:	e027      	b.n	800c7ee <f_open+0x22a>
 800c79e:	4603      	mov	r3, r0
				fp->clust = clst;
 800c7a0:	61f3      	str	r3, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7a2:	f3c4 0308 	ubfx	r3, r4, #0, #9
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f43f af21 	beq.w	800c5ee <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	f7fe fcf5 	bl	800b19c <clust2sect>
 800c7b2:	b908      	cbnz	r0, 800c7b8 <f_open+0x1f4>
						res = FR_INT_ERR;
 800c7b4:	2502      	movs	r5, #2
 800c7b6:	e718      	b.n	800c5ea <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c7b8:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 800c7bc:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c7c6:	f7fe fbc1 	bl	800af4c <disk_read>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f43f af0f 	beq.w	800c5ee <f_open+0x2a>
 800c7d0:	2501      	movs	r5, #1
 800c7d2:	e70a      	b.n	800c5ea <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	e708      	b.n	800c5ea <f_open+0x26>
					res = FR_DENIED;
 800c7d8:	2507      	movs	r5, #7
 800c7da:	e706      	b.n	800c5ea <f_open+0x26>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7dc:	4605      	mov	r5, r0
 800c7de:	e704      	b.n	800c5ea <f_open+0x26>
					res = FR_NO_FILE;
 800c7e0:	2504      	movs	r5, #4
 800c7e2:	e702      	b.n	800c5ea <f_open+0x26>
						res = FR_DENIED;
 800c7e4:	2507      	movs	r5, #7
 800c7e6:	e700      	b.n	800c5ea <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800c7e8:	2509      	movs	r5, #9
 800c7ea:	e700      	b.n	800c5ee <f_open+0x2a>
					if (clst <= 1) res = FR_INT_ERR;
 800c7ec:	2502      	movs	r5, #2
				fp->clust = clst;
 800c7ee:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7f0:	e6fb      	b.n	800c5ea <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c7f2:	f014 0f1c 	tst.w	r4, #28
 800c7f6:	d106      	bne.n	800c806 <f_open+0x242>
				res = FR_INVALID_NAME;
 800c7f8:	2306      	movs	r3, #6
 800c7fa:	e002      	b.n	800c802 <f_open+0x23e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c7fc:	f014 0f1c 	tst.w	r4, #28
 800c800:	d103      	bne.n	800c80a <f_open+0x246>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c802:	461d      	mov	r5, r3
 800c804:	e6f1      	b.n	800c5ea <f_open+0x26>
				res = FR_INVALID_NAME;
 800c806:	2506      	movs	r5, #6
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c808:	e6ef      	b.n	800c5ea <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	d10b      	bne.n	800c826 <f_open+0x262>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c80e:	4b07      	ldr	r3, [pc, #28]	@ (800c82c <f_open+0x268>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f43f af1e 	beq.w	800c654 <f_open+0x90>
 800c818:	4b04      	ldr	r3, [pc, #16]	@ (800c82c <f_open+0x268>)
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f43f af19 	beq.w	800c654 <f_open+0x90>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c822:	2512      	movs	r5, #18
 800c824:	e6e1      	b.n	800c5ea <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c826:	461d      	mov	r5, r3
 800c828:	e6df      	b.n	800c5ea <f_open+0x26>
 800c82a:	bf00      	nop
 800c82c:	20001460 	.word	0x20001460

0800c830 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	b087      	sub	sp, #28
 800c836:	4604      	mov	r4, r0
 800c838:	460f      	mov	r7, r1
 800c83a:	4693      	mov	fp, r2
 800c83c:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c83e:	2300      	movs	r3, #0
 800c840:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c844:	a905      	add	r1, sp, #20
 800c846:	f7fe fd00 	bl	800b24a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c84a:	4606      	mov	r6, r0
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f040 80a9 	bne.w	800c9a4 <f_read+0x174>
 800c852:	7d66      	ldrb	r6, [r4, #21]
 800c854:	2e00      	cmp	r6, #0
 800c856:	f040 80a5 	bne.w	800c9a4 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c85a:	7d23      	ldrb	r3, [r4, #20]
 800c85c:	f013 0901 	ands.w	r9, r3, #1
 800c860:	f000 80bf 	beq.w	800c9e2 <f_read+0x1b2>
	remain = fp->obj.objsize - fp->fptr;
 800c864:	68e3      	ldr	r3, [r4, #12]
 800c866:	69a2      	ldr	r2, [r4, #24]
 800c868:	1a9b      	subs	r3, r3, r2
 800c86a:	459b      	cmp	fp, r3
 800c86c:	bf28      	it	cs
 800c86e:	469b      	movcs	fp, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800c870:	f1bb 0f00 	cmp.w	fp, #0
 800c874:	f000 8096 	beq.w	800c9a4 <f_read+0x174>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c878:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c882:	9603      	str	r6, [sp, #12]
 800c884:	46ba      	mov	sl, r7
 800c886:	e055      	b.n	800c934 <f_read+0x104>
					if (fp->cltbl) {
 800c888:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c88a:	b11b      	cbz	r3, 800c894 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7fe fc90 	bl	800b1b2 <clmt_clust>
 800c892:	e05f      	b.n	800c954 <f_read+0x124>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c894:	69e1      	ldr	r1, [r4, #28]
 800c896:	4620      	mov	r0, r4
 800c898:	f7fe fead 	bl	800b5f6 <get_fat>
 800c89c:	e05a      	b.n	800c954 <f_read+0x124>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c89e:	2602      	movs	r6, #2
 800c8a0:	7566      	strb	r6, [r4, #21]
 800c8a2:	e07f      	b.n	800c9a4 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	7563      	strb	r3, [r4, #21]
 800c8ac:	464e      	mov	r6, r9
 800c8ae:	e079      	b.n	800c9a4 <f_read+0x174>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c8b0:	2602      	movs	r6, #2
 800c8b2:	7566      	strb	r6, [r4, #21]
 800c8b4:	e076      	b.n	800c9a4 <f_read+0x174>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c8b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	db01      	blt.n	800c8c2 <f_read+0x92>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c8be:	026d      	lsls	r5, r5, #9
				continue;
 800c8c0:	e02c      	b.n	800c91c <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c8c2:	6a20      	ldr	r0, [r4, #32]
 800c8c4:	1bc0      	subs	r0, r0, r7
 800c8c6:	42a8      	cmp	r0, r5
 800c8c8:	d2f9      	bcs.n	800c8be <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8ce:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c8d2:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 800c8d6:	f7fe fb76 	bl	800afc6 <mem_cpy>
 800c8da:	e7f0      	b.n	800c8be <f_read+0x8e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c8dc:	6a22      	ldr	r2, [r4, #32]
 800c8de:	42ba      	cmp	r2, r7
 800c8e0:	d00d      	beq.n	800c8fe <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c8e2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	db60      	blt.n	800c9ac <f_read+0x17c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	463a      	mov	r2, r7
 800c8ee:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c8f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8f6:	f7fe fb29 	bl	800af4c <disk_read>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d169      	bne.n	800c9d2 <f_read+0x1a2>
			fp->sect = sect;
 800c8fe:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c900:	69a1      	ldr	r1, [r4, #24]
 800c902:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c906:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
 800c90a:	455d      	cmp	r5, fp
 800c90c:	bf28      	it	cs
 800c90e:	465d      	movcs	r5, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c910:	462a      	mov	r2, r5
 800c912:	9b01      	ldr	r3, [sp, #4]
 800c914:	4419      	add	r1, r3
 800c916:	4650      	mov	r0, sl
 800c918:	f7fe fb55 	bl	800afc6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c91c:	44aa      	add	sl, r5
 800c91e:	69a3      	ldr	r3, [r4, #24]
 800c920:	442b      	add	r3, r5
 800c922:	61a3      	str	r3, [r4, #24]
 800c924:	f8d8 3000 	ldr.w	r3, [r8]
 800c928:	442b      	add	r3, r5
 800c92a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800c92e:	ebbb 0b05 	subs.w	fp, fp, r5
 800c932:	d054      	beq.n	800c9de <f_read+0x1ae>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c934:	69a1      	ldr	r1, [r4, #24]
 800c936:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1e0      	bne.n	800c900 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c93e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c942:	f8b9 600a 	ldrh.w	r6, [r9, #10]
 800c946:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c948:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 800c94c:	d108      	bne.n	800c960 <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c94e:	2900      	cmp	r1, #0
 800c950:	d19a      	bne.n	800c888 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c952:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c954:	2801      	cmp	r0, #1
 800c956:	d9a2      	bls.n	800c89e <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c958:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c95c:	d0a2      	beq.n	800c8a4 <f_read+0x74>
				fp->clust = clst;				/* Update current cluster */
 800c95e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c960:	69e1      	ldr	r1, [r4, #28]
 800c962:	4648      	mov	r0, r9
 800c964:	f7fe fc1a 	bl	800b19c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c968:	4607      	mov	r7, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d0a0      	beq.n	800c8b0 <f_read+0x80>
			sect += csect;
 800c96e:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c970:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 800c974:	d3b2      	bcc.n	800c8dc <f_read+0xac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c976:	ea4f 255b 	mov.w	r5, fp, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c97a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c97e:	eb06 225b 	add.w	r2, r6, fp, lsr #9
 800c982:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800c984:	bf88      	it	hi
 800c986:	1b9d      	subhi	r5, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c988:	462b      	mov	r3, r5
 800c98a:	463a      	mov	r2, r7
 800c98c:	4651      	mov	r1, sl
 800c98e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c992:	f7fe fadb 	bl	800af4c <disk_read>
 800c996:	2800      	cmp	r0, #0
 800c998:	d08d      	beq.n	800c8b6 <f_read+0x86>
 800c99a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c99e:	2301      	movs	r3, #1
 800c9a0:	7563      	strb	r3, [r4, #21]
 800c9a2:	464e      	mov	r6, r9
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	b007      	add	sp, #28
 800c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c9b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c9b6:	f7fe fad7 	bl	800af68 <disk_write>
 800c9ba:	b920      	cbnz	r0, 800c9c6 <f_read+0x196>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c9bc:	7d23      	ldrb	r3, [r4, #20]
 800c9be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c2:	7523      	strb	r3, [r4, #20]
 800c9c4:	e791      	b.n	800c8ea <f_read+0xba>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	7563      	strb	r3, [r4, #21]
 800c9ce:	464e      	mov	r6, r9
 800c9d0:	e7e8      	b.n	800c9a4 <f_read+0x174>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c9d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	7563      	strb	r3, [r4, #21]
 800c9da:	464e      	mov	r6, r9
 800c9dc:	e7e2      	b.n	800c9a4 <f_read+0x174>
 800c9de:	9e03      	ldr	r6, [sp, #12]
 800c9e0:	e7e0      	b.n	800c9a4 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c9e2:	2607      	movs	r6, #7
 800c9e4:	e7de      	b.n	800c9a4 <f_read+0x174>

0800c9e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9ec:	a901      	add	r1, sp, #4
 800c9ee:	f7fe fc2c 	bl	800b24a <validate>
	if (res == FR_OK) {
 800c9f2:	b978      	cbnz	r0, 800ca14 <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9f4:	7d23      	ldrb	r3, [r4, #20]
 800c9f6:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 800c9fa:	d00b      	beq.n	800ca14 <f_sync+0x2e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca00:	d10a      	bne.n	800ca18 <f_sync+0x32>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca02:	f7fc fb0b 	bl	800901c <get_fattime>
 800ca06:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca08:	9e01      	ldr	r6, [sp, #4]
 800ca0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7fe fc6c 	bl	800b2ea <move_window>
				if (res == FR_OK) {
 800ca12:	b178      	cbz	r0, 800ca34 <f_sync+0x4e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800ca14:	b003      	add	sp, #12
 800ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca18:	2301      	movs	r3, #1
 800ca1a:	6a22      	ldr	r2, [r4, #32]
 800ca1c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ca20:	9801      	ldr	r0, [sp, #4]
 800ca22:	7840      	ldrb	r0, [r0, #1]
 800ca24:	f7fe faa0 	bl	800af68 <disk_write>
 800ca28:	bb28      	cbnz	r0, 800ca76 <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca2a:	7d23      	ldrb	r3, [r4, #20]
 800ca2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca30:	7523      	strb	r3, [r4, #20]
 800ca32:	e7e6      	b.n	800ca02 <f_sync+0x1c>
					dir = fp->dir_ptr;
 800ca34:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca36:	7afb      	ldrb	r3, [r7, #11]
 800ca38:	f043 0320 	orr.w	r3, r3, #32
 800ca3c:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca3e:	68a2      	ldr	r2, [r4, #8]
 800ca40:	4639      	mov	r1, r7
 800ca42:	6820      	ldr	r0, [r4, #0]
 800ca44:	f7fe fdca 	bl	800b5dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca48:	68e1      	ldr	r1, [r4, #12]
 800ca4a:	f107 001c 	add.w	r0, r7, #28
 800ca4e:	f7fe fab2 	bl	800afb6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca52:	4629      	mov	r1, r5
 800ca54:	f107 0016 	add.w	r0, r7, #22
 800ca58:	f7fe faad 	bl	800afb6 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	74bb      	strb	r3, [r7, #18]
	*ptr++ = (BYTE)val;
 800ca60:	74fb      	strb	r3, [r7, #19]
					fs->wflag = 1;
 800ca62:	2301      	movs	r3, #1
 800ca64:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7fe fcde 	bl	800b428 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca6c:	7d23      	ldrb	r3, [r4, #20]
 800ca6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca72:	7523      	strb	r3, [r4, #20]
 800ca74:	e7ce      	b.n	800ca14 <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca76:	2001      	movs	r0, #1
 800ca78:	e7cc      	b.n	800ca14 <f_sync+0x2e>

0800ca7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ca80:	f7ff ffb1 	bl	800c9e6 <f_sync>
	if (res == FR_OK)
 800ca84:	b108      	cbz	r0, 800ca8a <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800ca86:	b002      	add	sp, #8
 800ca88:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ca8a:	a901      	add	r1, sp, #4
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7fe fbdc 	bl	800b24a <validate>
		if (res == FR_OK) {
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d1f7      	bne.n	800ca86 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ca96:	6920      	ldr	r0, [r4, #16]
 800ca98:	f7fe fb4a 	bl	800b130 <dec_lock>
			if (res == FR_OK)
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d1f2      	bne.n	800ca86 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800caa0:	6020      	str	r0, [r4, #0]
 800caa2:	e7f0      	b.n	800ca86 <f_close+0xc>

0800caa4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800caa4:	b530      	push	{r4, r5, lr}
 800caa6:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800caaa:	9001      	str	r0, [sp, #4]
 800caac:	460c      	mov	r4, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800caae:	2200      	movs	r2, #0
 800cab0:	a983      	add	r1, sp, #524	@ 0x20c
 800cab2:	a801      	add	r0, sp, #4
 800cab4:	f7ff fa1c 	bl	800bef0 <find_volume>
	if (res == FR_OK) {
 800cab8:	4605      	mov	r5, r0
 800caba:	b118      	cbz	r0, 800cac4 <f_stat+0x20>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800cabc:	4628      	mov	r0, r5
 800cabe:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800cac2:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj.obj.fs);
 800cac4:	9b83      	ldr	r3, [sp, #524]	@ 0x20c
 800cac6:	aa03      	add	r2, sp, #12
 800cac8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800caca:	9901      	ldr	r1, [sp, #4]
 800cacc:	a883      	add	r0, sp, #524	@ 0x20c
 800cace:	f7ff fbc7 	bl	800c260 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800cad2:	4605      	mov	r5, r0
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d1f1      	bne.n	800cabc <f_stat+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cad8:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800cadc:	2b00      	cmp	r3, #0
 800cade:	db06      	blt.n	800caee <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 800cae0:	2c00      	cmp	r4, #0
 800cae2:	d0eb      	beq.n	800cabc <f_stat+0x18>
 800cae4:	4621      	mov	r1, r4
 800cae6:	a883      	add	r0, sp, #524	@ 0x20c
 800cae8:	f7fe fc19 	bl	800b31e <get_fileinfo>
 800caec:	e7e6      	b.n	800cabc <f_stat+0x18>
				res = FR_INVALID_NAME;
 800caee:	2506      	movs	r5, #6
 800caf0:	e7e4      	b.n	800cabc <f_stat+0x18>
	...

0800caf4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800caf4:	4b13      	ldr	r3, [pc, #76]	@ (800cb44 <FATFS_LinkDriverEx+0x50>)
 800caf6:	7a5b      	ldrb	r3, [r3, #9]
 800caf8:	bb13      	cbnz	r3, 800cb40 <FATFS_LinkDriverEx+0x4c>
{
 800cafa:	b510      	push	{r4, lr}
 800cafc:	4604      	mov	r4, r0
 800cafe:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb02:	4b10      	ldr	r3, [pc, #64]	@ (800cb44 <FATFS_LinkDriverEx+0x50>)
 800cb04:	f893 c009 	ldrb.w	ip, [r3, #9]
 800cb08:	fa5f fc8c 	uxtb.w	ip, ip
 800cb0c:	f04f 0e00 	mov.w	lr, #0
 800cb10:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800cb14:	f893 c009 	ldrb.w	ip, [r3, #9]
 800cb18:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800cb1c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800cb20:	7a5c      	ldrb	r4, [r3, #9]
 800cb22:	441c      	add	r4, r3
 800cb24:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800cb26:	7a5a      	ldrb	r2, [r3, #9]
 800cb28:	1c54      	adds	r4, r2, #1
 800cb2a:	b2e4      	uxtb	r4, r4
 800cb2c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800cb2e:	3230      	adds	r2, #48	@ 0x30
 800cb30:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800cb32:	233a      	movs	r3, #58	@ 0x3a
 800cb34:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800cb36:	232f      	movs	r3, #47	@ 0x2f
 800cb38:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800cb3a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800cb3e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800cb40:	2001      	movs	r0, #1
}
 800cb42:	4770      	bx	lr
 800cb44:	20001488 	.word	0x20001488

0800cb48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb48:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f7ff ffd2 	bl	800caf4 <FATFS_LinkDriverEx>
}
 800cb50:	bd08      	pop	{r3, pc}
	...

0800cb54 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cb54:	287f      	cmp	r0, #127	@ 0x7f
 800cb56:	d916      	bls.n	800cb86 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cb58:	b131      	cbz	r1, 800cb68 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cb5a:	28ff      	cmp	r0, #255	@ 0xff
 800cb5c:	d812      	bhi.n	800cb84 <ff_convert+0x30>
 800cb5e:	3880      	subs	r0, #128	@ 0x80
 800cb60:	4b09      	ldr	r3, [pc, #36]	@ (800cb88 <ff_convert+0x34>)
 800cb62:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800cb66:	4770      	bx	lr
 800cb68:	4a07      	ldr	r2, [pc, #28]	@ (800cb88 <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cb6a:	2300      	movs	r3, #0
				if (chr == Tbl[c]) break;
 800cb6c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800cb70:	4281      	cmp	r1, r0
 800cb72:	d003      	beq.n	800cb7c <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 800cb74:	3301      	adds	r3, #1
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	2b80      	cmp	r3, #128	@ 0x80
 800cb7a:	d1f7      	bne.n	800cb6c <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 800cb7c:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800cb80:	b2c0      	uxtb	r0, r0
 800cb82:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cb84:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800cb86:	4770      	bx	lr
 800cb88:	0800f508 	.word	0x0800f508

0800cb8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cb8c:	b530      	push	{r4, r5, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cb8e:	4a22      	ldr	r2, [pc, #136]	@ (800cc18 <ff_wtoupper+0x8c>)
 800cb90:	4b22      	ldr	r3, [pc, #136]	@ (800cc1c <ff_wtoupper+0x90>)
 800cb92:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800cb96:	bf38      	it	cc
 800cb98:	461a      	movcc	r2, r3
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
		if (chr < bc + nc) {	/* In the block? */
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	3204      	adds	r2, #4
		bc = *p++;								/* Get block base */
 800cb9e:	4694      	mov	ip, r2
 800cba0:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 800cba4:	b1d9      	cbz	r1, 800cbde <ff_wtoupper+0x52>
 800cba6:	4288      	cmp	r0, r1
 800cba8:	d319      	bcc.n	800cbde <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cbaa:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800cbae:	0a1c      	lsrs	r4, r3, #8
 800cbb0:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800cbb2:	eb03 0e01 	add.w	lr, r3, r1
 800cbb6:	4570      	cmp	r0, lr
 800cbb8:	db05      	blt.n	800cbc6 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800cbba:	3204      	adds	r2, #4
 800cbbc:	2c00      	cmp	r4, #0
 800cbbe:	d1ee      	bne.n	800cb9e <ff_wtoupper+0x12>
 800cbc0:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
 800cbc4:	e7ea      	b.n	800cb9c <ff_wtoupper+0x10>
			switch (cmd) {
 800cbc6:	2c08      	cmp	r4, #8
 800cbc8:	d809      	bhi.n	800cbde <ff_wtoupper+0x52>
 800cbca:	e8df f004 	tbb	[pc, r4]
 800cbce:	0905      	.short	0x0905
 800cbd0:	1815120f 	.word	0x1815120f
 800cbd4:	1e1b      	.short	0x1e1b
 800cbd6:	21          	.byte	0x21
 800cbd7:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cbd8:	1a6d      	subs	r5, r5, r1
 800cbda:	f832 0015 	ldrh.w	r0, [r2, r5, lsl #1]
	}

	return chr;
}
 800cbde:	bd30      	pop	{r4, r5, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cbe0:	1a43      	subs	r3, r0, r1
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	1ac3      	subs	r3, r0, r3
 800cbe8:	b298      	uxth	r0, r3
 800cbea:	e7f8      	b.n	800cbde <ff_wtoupper+0x52>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cbec:	3810      	subs	r0, #16
 800cbee:	b280      	uxth	r0, r0
 800cbf0:	e7f5      	b.n	800cbde <ff_wtoupper+0x52>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cbf2:	3820      	subs	r0, #32
 800cbf4:	b280      	uxth	r0, r0
 800cbf6:	e7f2      	b.n	800cbde <ff_wtoupper+0x52>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cbf8:	3830      	subs	r0, #48	@ 0x30
 800cbfa:	b280      	uxth	r0, r0
 800cbfc:	e7ef      	b.n	800cbde <ff_wtoupper+0x52>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cbfe:	381a      	subs	r0, #26
 800cc00:	b280      	uxth	r0, r0
 800cc02:	e7ec      	b.n	800cbde <ff_wtoupper+0x52>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cc04:	3008      	adds	r0, #8
 800cc06:	b280      	uxth	r0, r0
 800cc08:	e7e9      	b.n	800cbde <ff_wtoupper+0x52>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cc0a:	3850      	subs	r0, #80	@ 0x50
 800cc0c:	b280      	uxth	r0, r0
 800cc0e:	e7e6      	b.n	800cbde <ff_wtoupper+0x52>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cc10:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800cc14:	b280      	uxth	r0, r0
 800cc16:	e7e2      	b.n	800cbde <ff_wtoupper+0x52>
 800cc18:	0800f258 	.word	0x0800f258
 800cc1c:	0800f314 	.word	0x0800f314

0800cc20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc22:	2200      	movs	r2, #0
 800cc24:	490f      	ldr	r1, [pc, #60]	@ (800cc64 <MX_USB_DEVICE_Init+0x44>)
 800cc26:	4810      	ldr	r0, [pc, #64]	@ (800cc68 <MX_USB_DEVICE_Init+0x48>)
 800cc28:	f7fd fbe8 	bl	800a3fc <USBD_Init>
 800cc2c:	b970      	cbnz	r0, 800cc4c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800cc2e:	490f      	ldr	r1, [pc, #60]	@ (800cc6c <MX_USB_DEVICE_Init+0x4c>)
 800cc30:	480d      	ldr	r0, [pc, #52]	@ (800cc68 <MX_USB_DEVICE_Init+0x48>)
 800cc32:	f7fd fc07 	bl	800a444 <USBD_RegisterClass>
 800cc36:	b960      	cbnz	r0, 800cc52 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800cc38:	490d      	ldr	r1, [pc, #52]	@ (800cc70 <MX_USB_DEVICE_Init+0x50>)
 800cc3a:	480b      	ldr	r0, [pc, #44]	@ (800cc68 <MX_USB_DEVICE_Init+0x48>)
 800cc3c:	f7fc fcee 	bl	800961c <USBD_MSC_RegisterStorage>
 800cc40:	b950      	cbnz	r0, 800cc58 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc42:	4809      	ldr	r0, [pc, #36]	@ (800cc68 <MX_USB_DEVICE_Init+0x48>)
 800cc44:	f7fd fc26 	bl	800a494 <USBD_Start>
 800cc48:	b948      	cbnz	r0, 800cc5e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc4a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800cc4c:	f7f6 fe7c 	bl	8003948 <Error_Handler>
 800cc50:	e7ed      	b.n	800cc2e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800cc52:	f7f6 fe79 	bl	8003948 <Error_Handler>
 800cc56:	e7ef      	b.n	800cc38 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800cc58:	f7f6 fe76 	bl	8003948 <Error_Handler>
 800cc5c:	e7f1      	b.n	800cc42 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800cc5e:	f7f6 fe73 	bl	8003948 <Error_Handler>
}
 800cc62:	e7f2      	b.n	800cc4a <MX_USB_DEVICE_Init+0x2a>
 800cc64:	200000cc 	.word	0x200000cc
 800cc68:	20001494 	.word	0x20001494
 800cc6c:	20000044 	.word	0x20000044
 800cc70:	200000e8 	.word	0x200000e8

0800cc74 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc74:	2312      	movs	r3, #18
 800cc76:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800cc78:	4800      	ldr	r0, [pc, #0]	@ (800cc7c <USBD_FS_DeviceDescriptor+0x8>)
 800cc7a:	4770      	bx	lr
 800cc7c:	200000b8 	.word	0x200000b8

0800cc80 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc80:	2304      	movs	r3, #4
 800cc82:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800cc84:	4800      	ldr	r0, [pc, #0]	@ (800cc88 <USBD_FS_LangIDStrDescriptor+0x8>)
 800cc86:	4770      	bx	lr
 800cc88:	200000b4 	.word	0x200000b4

0800cc8c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800cc8c:	b18a      	cbz	r2, 800ccb2 <IntToUnicode+0x26>
 800cc8e:	3101      	adds	r1, #1
 800cc90:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800cc94:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800cc98:	0f03      	lsrs	r3, r0, #28
 800cc9a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc9e:	bf34      	ite	cc
 800cca0:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cca2:	3337      	addcs	r3, #55	@ 0x37
 800cca4:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 800cca8:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800ccaa:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 800ccae:	4291      	cmp	r1, r2
 800ccb0:	d1f2      	bne.n	800cc98 <IntToUnicode+0xc>
  }
}
 800ccb2:	4770      	bx	lr

0800ccb4 <USBD_FS_SerialStrDescriptor>:
{
 800ccb4:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ccb6:	231a      	movs	r3, #26
 800ccb8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccba:	4b0c      	ldr	r3, [pc, #48]	@ (800ccec <USBD_FS_SerialStrDescriptor+0x38>)
 800ccbc:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 800ccc0:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800ccc4:	18c0      	adds	r0, r0, r3
 800ccc6:	d101      	bne.n	800cccc <USBD_FS_SerialStrDescriptor+0x18>
}
 800ccc8:	4809      	ldr	r0, [pc, #36]	@ (800ccf0 <USBD_FS_SerialStrDescriptor+0x3c>)
 800ccca:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cccc:	4b07      	ldr	r3, [pc, #28]	@ (800ccec <USBD_FS_SerialStrDescriptor+0x38>)
 800ccce:	f8d3 5a14 	ldr.w	r5, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccd2:	4c08      	ldr	r4, [pc, #32]	@ (800ccf4 <USBD_FS_SerialStrDescriptor+0x40>)
 800ccd4:	2208      	movs	r2, #8
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	f7ff ffd8 	bl	800cc8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ccdc:	2204      	movs	r2, #4
 800ccde:	f104 0110 	add.w	r1, r4, #16
 800cce2:	4628      	mov	r0, r5
 800cce4:	f7ff ffd2 	bl	800cc8c <IntToUnicode>
 800cce8:	e7ee      	b.n	800ccc8 <USBD_FS_SerialStrDescriptor+0x14>
 800ccea:	bf00      	nop
 800ccec:	1fff7000 	.word	0x1fff7000
 800ccf0:	20000098 	.word	0x20000098
 800ccf4:	2000009a 	.word	0x2000009a

0800ccf8 <USBD_FS_ProductStrDescriptor>:
{
 800ccf8:	b508      	push	{r3, lr}
 800ccfa:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccfc:	4902      	ldr	r1, [pc, #8]	@ (800cd08 <USBD_FS_ProductStrDescriptor+0x10>)
 800ccfe:	4803      	ldr	r0, [pc, #12]	@ (800cd0c <USBD_FS_ProductStrDescriptor+0x14>)
 800cd00:	f7fe f8a6 	bl	800ae50 <USBD_GetString>
}
 800cd04:	4800      	ldr	r0, [pc, #0]	@ (800cd08 <USBD_FS_ProductStrDescriptor+0x10>)
 800cd06:	bd08      	pop	{r3, pc}
 800cd08:	20001770 	.word	0x20001770
 800cd0c:	0800f608 	.word	0x0800f608

0800cd10 <USBD_FS_ManufacturerStrDescriptor>:
{
 800cd10:	b510      	push	{r4, lr}
 800cd12:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd14:	4c03      	ldr	r4, [pc, #12]	@ (800cd24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800cd16:	4621      	mov	r1, r4
 800cd18:	4803      	ldr	r0, [pc, #12]	@ (800cd28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cd1a:	f7fe f899 	bl	800ae50 <USBD_GetString>
}
 800cd1e:	4620      	mov	r0, r4
 800cd20:	bd10      	pop	{r4, pc}
 800cd22:	bf00      	nop
 800cd24:	20001770 	.word	0x20001770
 800cd28:	0800f61c 	.word	0x0800f61c

0800cd2c <USBD_FS_ConfigStrDescriptor>:
{
 800cd2c:	b508      	push	{r3, lr}
 800cd2e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd30:	4902      	ldr	r1, [pc, #8]	@ (800cd3c <USBD_FS_ConfigStrDescriptor+0x10>)
 800cd32:	4803      	ldr	r0, [pc, #12]	@ (800cd40 <USBD_FS_ConfigStrDescriptor+0x14>)
 800cd34:	f7fe f88c 	bl	800ae50 <USBD_GetString>
}
 800cd38:	4800      	ldr	r0, [pc, #0]	@ (800cd3c <USBD_FS_ConfigStrDescriptor+0x10>)
 800cd3a:	bd08      	pop	{r3, pc}
 800cd3c:	20001770 	.word	0x20001770
 800cd40:	0800f630 	.word	0x0800f630

0800cd44 <USBD_FS_InterfaceStrDescriptor>:
{
 800cd44:	b508      	push	{r3, lr}
 800cd46:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd48:	4902      	ldr	r1, [pc, #8]	@ (800cd54 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800cd4a:	4803      	ldr	r0, [pc, #12]	@ (800cd58 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800cd4c:	f7fe f880 	bl	800ae50 <USBD_GetString>
}
 800cd50:	4800      	ldr	r0, [pc, #0]	@ (800cd54 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800cd52:	bd08      	pop	{r3, pc}
 800cd54:	20001770 	.word	0x20001770
 800cd58:	0800f63c 	.word	0x0800f63c

0800cd5c <STORAGE_IsWriteProtected_FS>:
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	4770      	bx	lr

0800cd60 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800cd60:	2000      	movs	r0, #0
 800cd62:	4770      	bx	lr

0800cd64 <STORAGE_Write_FS>:
{
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	460c      	mov	r4, r1
 800cd68:	4615      	mov	r5, r2
 800cd6a:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cd6c:	f7fc f993 	bl	8009096 <BSP_SD_IsDetected>
 800cd70:	b1b0      	cbz	r0, 800cda0 <STORAGE_Write_FS+0x3c>
  	FileTransferCheck_UpdateOnWrite();
 800cd72:	f7f6 fa83 	bl	800327c <FileTransferCheck_UpdateOnWrite>
    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800cd76:	4632      	mov	r2, r6
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7fc f95e 	bl	800903c <BSP_SD_WriteBlocks_DMA>
    while (usbd_WriteStatus == 0)
 800cd80:	4a09      	ldr	r2, [pc, #36]	@ (800cda8 <STORAGE_Write_FS+0x44>)
 800cd82:	6813      	ldr	r3, [r2, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0fc      	beq.n	800cd82 <STORAGE_Write_FS+0x1e>
    usbd_WriteStatus = 0;
 800cd88:	4b07      	ldr	r3, [pc, #28]	@ (800cda8 <STORAGE_Write_FS+0x44>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800cd8e:	4c07      	ldr	r4, [pc, #28]	@ (800cdac <STORAGE_Write_FS+0x48>)
 800cd90:	f7fc f962 	bl	8009058 <BSP_SD_GetCardState>
 800cd94:	b118      	cbz	r0, 800cd9e <STORAGE_Write_FS+0x3a>
      if (timeout-- == 0)
 800cd96:	3c01      	subs	r4, #1
 800cd98:	d1fa      	bne.n	800cd90 <STORAGE_Write_FS+0x2c>
        return ret;
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	e7fb      	b.n	800cd9e <STORAGE_Write_FS+0x3a>
 800cda6:	bf00      	nop
 800cda8:	20001978 	.word	0x20001978
 800cdac:	000186a1 	.word	0x000186a1

0800cdb0 <STORAGE_Read_FS>:
{
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	4615      	mov	r5, r2
 800cdb6:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cdb8:	f7fc f96d 	bl	8009096 <BSP_SD_IsDetected>
 800cdbc:	b1a0      	cbz	r0, 800cde8 <STORAGE_Read_FS+0x38>
    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7fc f92c 	bl	8009020 <BSP_SD_ReadBlocks_DMA>
    while (usbd_ReadStatus == 0)
 800cdc8:	4a09      	ldr	r2, [pc, #36]	@ (800cdf0 <STORAGE_Read_FS+0x40>)
 800cdca:	6813      	ldr	r3, [r2, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0fc      	beq.n	800cdca <STORAGE_Read_FS+0x1a>
    usbd_ReadStatus = 0;
 800cdd0:	4b07      	ldr	r3, [pc, #28]	@ (800cdf0 <STORAGE_Read_FS+0x40>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800cdd6:	4c07      	ldr	r4, [pc, #28]	@ (800cdf4 <STORAGE_Read_FS+0x44>)
 800cdd8:	f7fc f93e 	bl	8009058 <BSP_SD_GetCardState>
 800cddc:	b118      	cbz	r0, 800cde6 <STORAGE_Read_FS+0x36>
      if (timeout-- == 0)
 800cdde:	3c01      	subs	r4, #1
 800cde0:	d1fa      	bne.n	800cdd8 <STORAGE_Read_FS+0x28>
        return ret;
 800cde2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800cde8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdec:	e7fb      	b.n	800cde6 <STORAGE_Read_FS+0x36>
 800cdee:	bf00      	nop
 800cdf0:	20001974 	.word	0x20001974
 800cdf4:	000186a1 	.word	0x000186a1

0800cdf8 <STORAGE_IsReady_FS>:
{
 800cdf8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cdfa:	f7fc f94c 	bl	8009096 <BSP_SD_IsDetected>
 800cdfe:	b188      	cbz	r0, 800ce24 <STORAGE_IsReady_FS+0x2c>
    if (prev_status < 0)
 800ce00:	4b0f      	ldr	r3, [pc, #60]	@ (800ce40 <STORAGE_IsReady_FS+0x48>)
 800ce02:	f993 3000 	ldrsb.w	r3, [r3]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	db06      	blt.n	800ce18 <STORAGE_IsReady_FS+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce0a:	f7fc f925 	bl	8009058 <BSP_SD_GetCardState>
 800ce0e:	3800      	subs	r0, #0
 800ce10:	bf18      	it	ne
 800ce12:	2001      	movne	r0, #1
 800ce14:	4240      	negs	r0, r0
}
 800ce16:	bd08      	pop	{r3, pc}
      BSP_SD_Init();
 800ce18:	f7fc f946 	bl	80090a8 <BSP_SD_Init>
      prev_status = 0;
 800ce1c:	4b08      	ldr	r3, [pc, #32]	@ (800ce40 <STORAGE_IsReady_FS+0x48>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	e7f2      	b.n	800ce0a <STORAGE_IsReady_FS+0x12>
  else if (prev_status == 0)
 800ce24:	4b06      	ldr	r3, [pc, #24]	@ (800ce40 <STORAGE_IsReady_FS+0x48>)
 800ce26:	f993 3000 	ldrsb.w	r3, [r3]
 800ce2a:	b92b      	cbnz	r3, 800ce38 <STORAGE_IsReady_FS+0x40>
    prev_status = -1;
 800ce2c:	4b04      	ldr	r3, [pc, #16]	@ (800ce40 <STORAGE_IsReady_FS+0x48>)
 800ce2e:	22ff      	movs	r2, #255	@ 0xff
 800ce30:	701a      	strb	r2, [r3, #0]
  int8_t ret = -1;
 800ce32:	f04f 30ff 	mov.w	r0, #4294967295
 800ce36:	e7ee      	b.n	800ce16 <STORAGE_IsReady_FS+0x1e>
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e7eb      	b.n	800ce16 <STORAGE_IsReady_FS+0x1e>
 800ce3e:	bf00      	nop
 800ce40:	20001970 	.word	0x20001970

0800ce44 <STORAGE_Init_FS>:
{
 800ce44:	b508      	push	{r3, lr}
 BSP_SD_Init();
 800ce46:	f7fc f92f 	bl	80090a8 <BSP_SD_Init>
}
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	bd08      	pop	{r3, pc}

0800ce4e <STORAGE_GetCapacity_FS>:
{
 800ce4e:	b530      	push	{r4, r5, lr}
 800ce50:	b089      	sub	sp, #36	@ 0x24
 800ce52:	460d      	mov	r5, r1
 800ce54:	4614      	mov	r4, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800ce56:	f7fc f91e 	bl	8009096 <BSP_SD_IsDetected>
 800ce5a:	b150      	cbz	r0, 800ce72 <STORAGE_GetCapacity_FS+0x24>
    BSP_SD_GetCardInfo(&info);
 800ce5c:	4668      	mov	r0, sp
 800ce5e:	f7fc f905 	bl	800906c <BSP_SD_GetCardInfo>
    *block_num = info.LogBlockNbr - 1;
 800ce62:	9b06      	ldr	r3, [sp, #24]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	602b      	str	r3, [r5, #0]
    *block_size = info.LogBlockSize;
 800ce68:	9b07      	ldr	r3, [sp, #28]
 800ce6a:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800ce6c:	2000      	movs	r0, #0
}
 800ce6e:	b009      	add	sp, #36	@ 0x24
 800ce70:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;
 800ce72:	f04f 30ff 	mov.w	r0, #4294967295
 800ce76:	e7fa      	b.n	800ce6e <STORAGE_GetCapacity_FS+0x20>

0800ce78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce78:	b530      	push	{r4, r5, lr}
 800ce7a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	9303      	str	r3, [sp, #12]
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	9305      	str	r3, [sp, #20]
 800ce84:	9306      	str	r3, [sp, #24]
 800ce86:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce88:	6803      	ldr	r3, [r0, #0]
 800ce8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce8e:	d001      	beq.n	800ce94 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce90:	b009      	add	sp, #36	@ 0x24
 800ce92:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce94:	2500      	movs	r5, #0
 800ce96:	9501      	str	r5, [sp, #4]
 800ce98:	4c16      	ldr	r4, [pc, #88]	@ (800cef4 <HAL_PCD_MspInit+0x7c>)
 800ce9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce9c:	f043 0301 	orr.w	r3, r3, #1
 800cea0:	6323      	str	r3, [r4, #48]	@ 0x30
 800cea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ceac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ceb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ceba:	230a      	movs	r3, #10
 800cebc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cebe:	a903      	add	r1, sp, #12
 800cec0:	480d      	ldr	r0, [pc, #52]	@ (800cef8 <HAL_PCD_MspInit+0x80>)
 800cec2:	f7f7 fd25 	bl	8004910 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cece:	9502      	str	r5, [sp, #8]
 800ced0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ced2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ced6:	6463      	str	r3, [r4, #68]	@ 0x44
 800ced8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ceda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cede:	9302      	str	r3, [sp, #8]
 800cee0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800cee2:	462a      	mov	r2, r5
 800cee4:	2107      	movs	r1, #7
 800cee6:	2043      	movs	r0, #67	@ 0x43
 800cee8:	f7f7 fab6 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ceec:	2043      	movs	r0, #67	@ 0x43
 800ceee:	f7f7 fae9 	bl	80044c4 <HAL_NVIC_EnableIRQ>
}
 800cef2:	e7cd      	b.n	800ce90 <HAL_PCD_MspInit+0x18>
 800cef4:	40023800 	.word	0x40023800
 800cef8:	40020000 	.word	0x40020000

0800cefc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cefe:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800cf02:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cf06:	f7fd fadb 	bl	800a4c0 <USBD_LL_SetupStage>
}
 800cf0a:	bd08      	pop	{r3, pc}

0800cf0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf0c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf0e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800cf12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cf16:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800cf1a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cf1e:	f7fd fafb 	bl	800a518 <USBD_LL_DataOutStage>
}
 800cf22:	bd08      	pop	{r3, pc}

0800cf24 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf24:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf26:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800cf2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cf2e:	6a1a      	ldr	r2, [r3, #32]
 800cf30:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cf34:	f7fd fb34 	bl	800a5a0 <USBD_LL_DataInStage>
}
 800cf38:	bd08      	pop	{r3, pc}

0800cf3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf3a:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf3c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cf40:	f7fd fbe3 	bl	800a70a <USBD_LL_SOF>
}
 800cf44:	bd08      	pop	{r3, pc}

0800cf46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf46:	b510      	push	{r4, lr}
 800cf48:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf4a:	79c1      	ldrb	r1, [r0, #7]
 800cf4c:	b111      	cbz	r1, 800cf54 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf4e:	2902      	cmp	r1, #2
 800cf50:	d109      	bne.n	800cf66 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800cf52:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf54:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800cf58:	f7fd fbb8 	bl	800a6cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf5c:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800cf60:	f7fd fb83 	bl	800a66a <USBD_LL_Reset>
}
 800cf64:	bd10      	pop	{r4, pc}
    Error_Handler();
 800cf66:	f7f6 fcef 	bl	8003948 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	e7f2      	b.n	800cf54 <HAL_PCD_ResetCallback+0xe>
	...

0800cf70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf70:	b510      	push	{r4, lr}
 800cf72:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf74:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cf78:	f7fd fbab 	bl	800a6d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800cf82:	f043 0301 	orr.w	r3, r3, #1
 800cf86:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf8a:	7ae3      	ldrb	r3, [r4, #11]
 800cf8c:	b123      	cbz	r3, 800cf98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf8e:	4a03      	ldr	r2, [pc, #12]	@ (800cf9c <HAL_PCD_SuspendCallback+0x2c>)
 800cf90:	6913      	ldr	r3, [r2, #16]
 800cf92:	f043 0306 	orr.w	r3, r3, #6
 800cf96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	bf00      	nop
 800cf9c:	e000ed00 	.word	0xe000ed00

0800cfa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfa2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cfa6:	f7fd fba3 	bl	800a6f0 <USBD_LL_Resume>
}
 800cfaa:	bd08      	pop	{r3, pc}

0800cfac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfac:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfae:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cfb2:	f7fd fbd2 	bl	800a75a <USBD_LL_IsoOUTIncomplete>
}
 800cfb6:	bd08      	pop	{r3, pc}

0800cfb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfba:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cfbe:	f7fd fbb5 	bl	800a72c <USBD_LL_IsoINIncomplete>
}
 800cfc2:	bd08      	pop	{r3, pc}

0800cfc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc4:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfc6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cfca:	f7fd fbdd 	bl	800a788 <USBD_LL_DevConnected>
}
 800cfce:	bd08      	pop	{r3, pc}

0800cfd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd0:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfd2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cfd6:	f7fd fbd9 	bl	800a78c <USBD_LL_DevDisconnected>
}
 800cfda:	bd08      	pop	{r3, pc}

0800cfdc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cfdc:	7802      	ldrb	r2, [r0, #0]
 800cfde:	b10a      	cbz	r2, 800cfe4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	4770      	bx	lr
{
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800cfe8:	4815      	ldr	r0, [pc, #84]	@ (800d040 <USBD_LL_Init+0x64>)
 800cfea:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cfee:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cff2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800cff6:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cff8:	2304      	movs	r3, #4
 800cffa:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cffc:	2202      	movs	r2, #2
 800cffe:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d000:	2300      	movs	r3, #0
 800d002:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d004:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d006:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d008:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d00a:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d00c:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d00e:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d010:	f7f7 fd9d 	bl	8004b4e <HAL_PCD_Init>
 800d014:	b980      	cbnz	r0, 800d038 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d016:	4c0a      	ldr	r4, [pc, #40]	@ (800d040 <USBD_LL_Init+0x64>)
 800d018:	2180      	movs	r1, #128	@ 0x80
 800d01a:	4620      	mov	r0, r4
 800d01c:	f7f8 fb7c 	bl	8005718 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d020:	2240      	movs	r2, #64	@ 0x40
 800d022:	2100      	movs	r1, #0
 800d024:	4620      	mov	r0, r4
 800d026:	f7f8 fb52 	bl	80056ce <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d02a:	2280      	movs	r2, #128	@ 0x80
 800d02c:	2101      	movs	r1, #1
 800d02e:	4620      	mov	r0, r4
 800d030:	f7f8 fb4d 	bl	80056ce <HAL_PCDEx_SetTxFiFo>
}
 800d034:	2000      	movs	r0, #0
 800d036:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d038:	f7f6 fc86 	bl	8003948 <Error_Handler>
 800d03c:	e7eb      	b.n	800d016 <USBD_LL_Init+0x3a>
 800d03e:	bf00      	nop
 800d040:	20001bf4 	.word	0x20001bf4

0800d044 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d044:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800d048:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d04c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800d050:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d054:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d058:	bf14      	ite	ne
 800d05a:	7d98      	ldrbne	r0, [r3, #22]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d05c:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 800d060:	4770      	bx	lr

0800d062 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d062:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d064:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d068:	f7f7 feb8 	bl	8004ddc <HAL_PCD_EP_GetRxCount>
}
 800d06c:	bd08      	pop	{r3, pc}
	...

0800d070 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800d070:	4800      	ldr	r0, [pc, #0]	@ (800d074 <USBD_static_malloc+0x4>)
 800d072:	4770      	bx	lr
 800d074:	2000197c 	.word	0x2000197c

0800d078 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800d078:	4770      	bx	lr

0800d07a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d07a:	b120      	cbz	r0, 800d086 <USBD_Get_USB_Status+0xc>
 800d07c:	2802      	cmp	r0, #2
 800d07e:	bf0c      	ite	eq
 800d080:	2001      	moveq	r0, #1
 800d082:	2003      	movne	r0, #3
 800d084:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800d086:	4770      	bx	lr

0800d088 <USBD_LL_Start>:
{
 800d088:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d08a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d08e:	f7f7 fdd3 	bl	8004c38 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d092:	f7ff fff2 	bl	800d07a <USBD_Get_USB_Status>
}
 800d096:	bd08      	pop	{r3, pc}

0800d098 <USBD_LL_OpenEP>:
{
 800d098:	b508      	push	{r3, lr}
 800d09a:	4694      	mov	ip, r2
 800d09c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d09e:	4663      	mov	r3, ip
 800d0a0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0a4:	f7f7 fdfd 	bl	8004ca2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a8:	f7ff ffe7 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0ac:	bd08      	pop	{r3, pc}

0800d0ae <USBD_LL_CloseEP>:
{
 800d0ae:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0b0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0b4:	f7f7 fe38 	bl	8004d28 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b8:	f7ff ffdf 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0bc:	bd08      	pop	{r3, pc}

0800d0be <USBD_LL_FlushEP>:
{
 800d0be:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d0c0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0c4:	f7f8 fae8 	bl	8005698 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c8:	f7ff ffd7 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0cc:	bd08      	pop	{r3, pc}

0800d0ce <USBD_LL_StallEP>:
{
 800d0ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0d4:	f7f7 feaf 	bl	8004e36 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d8:	f7ff ffcf 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0dc:	bd08      	pop	{r3, pc}

0800d0de <USBD_LL_ClearStallEP>:
{
 800d0de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0e0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0e4:	f7f7 fee8 	bl	8004eb8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e8:	f7ff ffc7 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0ec:	bd08      	pop	{r3, pc}

0800d0ee <USBD_LL_SetUSBAddress>:
{
 800d0ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d0f0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d0f4:	f7f7 fdc2 	bl	8004c7c <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f8:	f7ff ffbf 	bl	800d07a <USBD_Get_USB_Status>
}
 800d0fc:	bd08      	pop	{r3, pc}

0800d0fe <USBD_LL_Transmit>:
{
 800d0fe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d100:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d104:	f7f7 fe73 	bl	8004dee <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d108:	f7ff ffb7 	bl	800d07a <USBD_Get_USB_Status>
}
 800d10c:	bd08      	pop	{r3, pc}

0800d10e <USBD_LL_PrepareReceive>:
{
 800d10e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d110:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d114:	f7f7 fe3e 	bl	8004d94 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d118:	f7ff ffaf 	bl	800d07a <USBD_Get_USB_Status>
}
 800d11c:	bd08      	pop	{r3, pc}
	...

0800d120 <std>:
 800d120:	2300      	movs	r3, #0
 800d122:	b510      	push	{r4, lr}
 800d124:	4604      	mov	r4, r0
 800d126:	e9c0 3300 	strd	r3, r3, [r0]
 800d12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d12e:	6083      	str	r3, [r0, #8]
 800d130:	8181      	strh	r1, [r0, #12]
 800d132:	6643      	str	r3, [r0, #100]	@ 0x64
 800d134:	81c2      	strh	r2, [r0, #14]
 800d136:	6183      	str	r3, [r0, #24]
 800d138:	4619      	mov	r1, r3
 800d13a:	2208      	movs	r2, #8
 800d13c:	305c      	adds	r0, #92	@ 0x5c
 800d13e:	f000 fa87 	bl	800d650 <memset>
 800d142:	4b0d      	ldr	r3, [pc, #52]	@ (800d178 <std+0x58>)
 800d144:	6263      	str	r3, [r4, #36]	@ 0x24
 800d146:	4b0d      	ldr	r3, [pc, #52]	@ (800d17c <std+0x5c>)
 800d148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d14a:	4b0d      	ldr	r3, [pc, #52]	@ (800d180 <std+0x60>)
 800d14c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d14e:	4b0d      	ldr	r3, [pc, #52]	@ (800d184 <std+0x64>)
 800d150:	6323      	str	r3, [r4, #48]	@ 0x30
 800d152:	4b0d      	ldr	r3, [pc, #52]	@ (800d188 <std+0x68>)
 800d154:	6224      	str	r4, [r4, #32]
 800d156:	429c      	cmp	r4, r3
 800d158:	d006      	beq.n	800d168 <std+0x48>
 800d15a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d15e:	4294      	cmp	r4, r2
 800d160:	d002      	beq.n	800d168 <std+0x48>
 800d162:	33d0      	adds	r3, #208	@ 0xd0
 800d164:	429c      	cmp	r4, r3
 800d166:	d105      	bne.n	800d174 <std+0x54>
 800d168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d170:	f000 bae6 	b.w	800d740 <__retarget_lock_init_recursive>
 800d174:	bd10      	pop	{r4, pc}
 800d176:	bf00      	nop
 800d178:	0800d3fd 	.word	0x0800d3fd
 800d17c:	0800d41f 	.word	0x0800d41f
 800d180:	0800d457 	.word	0x0800d457
 800d184:	0800d47b 	.word	0x0800d47b
 800d188:	200020d8 	.word	0x200020d8

0800d18c <stdio_exit_handler>:
 800d18c:	4a02      	ldr	r2, [pc, #8]	@ (800d198 <stdio_exit_handler+0xc>)
 800d18e:	4903      	ldr	r1, [pc, #12]	@ (800d19c <stdio_exit_handler+0x10>)
 800d190:	4803      	ldr	r0, [pc, #12]	@ (800d1a0 <stdio_exit_handler+0x14>)
 800d192:	f000 b869 	b.w	800d268 <_fwalk_sglue>
 800d196:	bf00      	nop
 800d198:	20000108 	.word	0x20000108
 800d19c:	0800e2ad 	.word	0x0800e2ad
 800d1a0:	20000118 	.word	0x20000118

0800d1a4 <cleanup_stdio>:
 800d1a4:	6841      	ldr	r1, [r0, #4]
 800d1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d1d8 <cleanup_stdio+0x34>)
 800d1a8:	4299      	cmp	r1, r3
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	d001      	beq.n	800d1b4 <cleanup_stdio+0x10>
 800d1b0:	f001 f87c 	bl	800e2ac <_fflush_r>
 800d1b4:	68a1      	ldr	r1, [r4, #8]
 800d1b6:	4b09      	ldr	r3, [pc, #36]	@ (800d1dc <cleanup_stdio+0x38>)
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d002      	beq.n	800d1c2 <cleanup_stdio+0x1e>
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f001 f875 	bl	800e2ac <_fflush_r>
 800d1c2:	68e1      	ldr	r1, [r4, #12]
 800d1c4:	4b06      	ldr	r3, [pc, #24]	@ (800d1e0 <cleanup_stdio+0x3c>)
 800d1c6:	4299      	cmp	r1, r3
 800d1c8:	d004      	beq.n	800d1d4 <cleanup_stdio+0x30>
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1d0:	f001 b86c 	b.w	800e2ac <_fflush_r>
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200020d8 	.word	0x200020d8
 800d1dc:	20002140 	.word	0x20002140
 800d1e0:	200021a8 	.word	0x200021a8

0800d1e4 <global_stdio_init.part.0>:
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d214 <global_stdio_init.part.0+0x30>)
 800d1e8:	4c0b      	ldr	r4, [pc, #44]	@ (800d218 <global_stdio_init.part.0+0x34>)
 800d1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800d21c <global_stdio_init.part.0+0x38>)
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2104      	movs	r1, #4
 800d1f4:	f7ff ff94 	bl	800d120 <std>
 800d1f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	2109      	movs	r1, #9
 800d200:	f7ff ff8e 	bl	800d120 <std>
 800d204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d208:	2202      	movs	r2, #2
 800d20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d20e:	2112      	movs	r1, #18
 800d210:	f7ff bf86 	b.w	800d120 <std>
 800d214:	20002210 	.word	0x20002210
 800d218:	200020d8 	.word	0x200020d8
 800d21c:	0800d18d 	.word	0x0800d18d

0800d220 <__sfp_lock_acquire>:
 800d220:	4801      	ldr	r0, [pc, #4]	@ (800d228 <__sfp_lock_acquire+0x8>)
 800d222:	f000 ba8e 	b.w	800d742 <__retarget_lock_acquire_recursive>
 800d226:	bf00      	nop
 800d228:	20002219 	.word	0x20002219

0800d22c <__sfp_lock_release>:
 800d22c:	4801      	ldr	r0, [pc, #4]	@ (800d234 <__sfp_lock_release+0x8>)
 800d22e:	f000 ba89 	b.w	800d744 <__retarget_lock_release_recursive>
 800d232:	bf00      	nop
 800d234:	20002219 	.word	0x20002219

0800d238 <__sinit>:
 800d238:	b510      	push	{r4, lr}
 800d23a:	4604      	mov	r4, r0
 800d23c:	f7ff fff0 	bl	800d220 <__sfp_lock_acquire>
 800d240:	6a23      	ldr	r3, [r4, #32]
 800d242:	b11b      	cbz	r3, 800d24c <__sinit+0x14>
 800d244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d248:	f7ff bff0 	b.w	800d22c <__sfp_lock_release>
 800d24c:	4b04      	ldr	r3, [pc, #16]	@ (800d260 <__sinit+0x28>)
 800d24e:	6223      	str	r3, [r4, #32]
 800d250:	4b04      	ldr	r3, [pc, #16]	@ (800d264 <__sinit+0x2c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1f5      	bne.n	800d244 <__sinit+0xc>
 800d258:	f7ff ffc4 	bl	800d1e4 <global_stdio_init.part.0>
 800d25c:	e7f2      	b.n	800d244 <__sinit+0xc>
 800d25e:	bf00      	nop
 800d260:	0800d1a5 	.word	0x0800d1a5
 800d264:	20002210 	.word	0x20002210

0800d268 <_fwalk_sglue>:
 800d268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d26c:	4607      	mov	r7, r0
 800d26e:	4688      	mov	r8, r1
 800d270:	4614      	mov	r4, r2
 800d272:	2600      	movs	r6, #0
 800d274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d278:	f1b9 0901 	subs.w	r9, r9, #1
 800d27c:	d505      	bpl.n	800d28a <_fwalk_sglue+0x22>
 800d27e:	6824      	ldr	r4, [r4, #0]
 800d280:	2c00      	cmp	r4, #0
 800d282:	d1f7      	bne.n	800d274 <_fwalk_sglue+0xc>
 800d284:	4630      	mov	r0, r6
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d907      	bls.n	800d2a0 <_fwalk_sglue+0x38>
 800d290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d294:	3301      	adds	r3, #1
 800d296:	d003      	beq.n	800d2a0 <_fwalk_sglue+0x38>
 800d298:	4629      	mov	r1, r5
 800d29a:	4638      	mov	r0, r7
 800d29c:	47c0      	blx	r8
 800d29e:	4306      	orrs	r6, r0
 800d2a0:	3568      	adds	r5, #104	@ 0x68
 800d2a2:	e7e9      	b.n	800d278 <_fwalk_sglue+0x10>

0800d2a4 <iprintf>:
 800d2a4:	b40f      	push	{r0, r1, r2, r3}
 800d2a6:	b507      	push	{r0, r1, r2, lr}
 800d2a8:	4906      	ldr	r1, [pc, #24]	@ (800d2c4 <iprintf+0x20>)
 800d2aa:	ab04      	add	r3, sp, #16
 800d2ac:	6808      	ldr	r0, [r1, #0]
 800d2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b2:	6881      	ldr	r1, [r0, #8]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	f000 fccf 	bl	800dc58 <_vfiprintf_r>
 800d2ba:	b003      	add	sp, #12
 800d2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2c0:	b004      	add	sp, #16
 800d2c2:	4770      	bx	lr
 800d2c4:	20000114 	.word	0x20000114

0800d2c8 <putchar>:
 800d2c8:	4b02      	ldr	r3, [pc, #8]	@ (800d2d4 <putchar+0xc>)
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	6818      	ldr	r0, [r3, #0]
 800d2ce:	6882      	ldr	r2, [r0, #8]
 800d2d0:	f001 b876 	b.w	800e3c0 <_putc_r>
 800d2d4:	20000114 	.word	0x20000114

0800d2d8 <_puts_r>:
 800d2d8:	6a03      	ldr	r3, [r0, #32]
 800d2da:	b570      	push	{r4, r5, r6, lr}
 800d2dc:	6884      	ldr	r4, [r0, #8]
 800d2de:	4605      	mov	r5, r0
 800d2e0:	460e      	mov	r6, r1
 800d2e2:	b90b      	cbnz	r3, 800d2e8 <_puts_r+0x10>
 800d2e4:	f7ff ffa8 	bl	800d238 <__sinit>
 800d2e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2ea:	07db      	lsls	r3, r3, #31
 800d2ec:	d405      	bmi.n	800d2fa <_puts_r+0x22>
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	0598      	lsls	r0, r3, #22
 800d2f2:	d402      	bmi.n	800d2fa <_puts_r+0x22>
 800d2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2f6:	f000 fa24 	bl	800d742 <__retarget_lock_acquire_recursive>
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	0719      	lsls	r1, r3, #28
 800d2fe:	d502      	bpl.n	800d306 <_puts_r+0x2e>
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d135      	bne.n	800d372 <_puts_r+0x9a>
 800d306:	4621      	mov	r1, r4
 800d308:	4628      	mov	r0, r5
 800d30a:	f000 f931 	bl	800d570 <__swsetup_r>
 800d30e:	b380      	cbz	r0, 800d372 <_puts_r+0x9a>
 800d310:	f04f 35ff 	mov.w	r5, #4294967295
 800d314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d316:	07da      	lsls	r2, r3, #31
 800d318:	d405      	bmi.n	800d326 <_puts_r+0x4e>
 800d31a:	89a3      	ldrh	r3, [r4, #12]
 800d31c:	059b      	lsls	r3, r3, #22
 800d31e:	d402      	bmi.n	800d326 <_puts_r+0x4e>
 800d320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d322:	f000 fa0f 	bl	800d744 <__retarget_lock_release_recursive>
 800d326:	4628      	mov	r0, r5
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da04      	bge.n	800d338 <_puts_r+0x60>
 800d32e:	69a2      	ldr	r2, [r4, #24]
 800d330:	429a      	cmp	r2, r3
 800d332:	dc17      	bgt.n	800d364 <_puts_r+0x8c>
 800d334:	290a      	cmp	r1, #10
 800d336:	d015      	beq.n	800d364 <_puts_r+0x8c>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	6022      	str	r2, [r4, #0]
 800d33e:	7019      	strb	r1, [r3, #0]
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d346:	3b01      	subs	r3, #1
 800d348:	60a3      	str	r3, [r4, #8]
 800d34a:	2900      	cmp	r1, #0
 800d34c:	d1ed      	bne.n	800d32a <_puts_r+0x52>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da11      	bge.n	800d376 <_puts_r+0x9e>
 800d352:	4622      	mov	r2, r4
 800d354:	210a      	movs	r1, #10
 800d356:	4628      	mov	r0, r5
 800d358:	f000 f8cc 	bl	800d4f4 <__swbuf_r>
 800d35c:	3001      	adds	r0, #1
 800d35e:	d0d7      	beq.n	800d310 <_puts_r+0x38>
 800d360:	250a      	movs	r5, #10
 800d362:	e7d7      	b.n	800d314 <_puts_r+0x3c>
 800d364:	4622      	mov	r2, r4
 800d366:	4628      	mov	r0, r5
 800d368:	f000 f8c4 	bl	800d4f4 <__swbuf_r>
 800d36c:	3001      	adds	r0, #1
 800d36e:	d1e7      	bne.n	800d340 <_puts_r+0x68>
 800d370:	e7ce      	b.n	800d310 <_puts_r+0x38>
 800d372:	3e01      	subs	r6, #1
 800d374:	e7e4      	b.n	800d340 <_puts_r+0x68>
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	6022      	str	r2, [r4, #0]
 800d37c:	220a      	movs	r2, #10
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	e7ee      	b.n	800d360 <_puts_r+0x88>
	...

0800d384 <puts>:
 800d384:	4b02      	ldr	r3, [pc, #8]	@ (800d390 <puts+0xc>)
 800d386:	4601      	mov	r1, r0
 800d388:	6818      	ldr	r0, [r3, #0]
 800d38a:	f7ff bfa5 	b.w	800d2d8 <_puts_r>
 800d38e:	bf00      	nop
 800d390:	20000114 	.word	0x20000114

0800d394 <sniprintf>:
 800d394:	b40c      	push	{r2, r3}
 800d396:	b530      	push	{r4, r5, lr}
 800d398:	4b17      	ldr	r3, [pc, #92]	@ (800d3f8 <sniprintf+0x64>)
 800d39a:	1e0c      	subs	r4, r1, #0
 800d39c:	681d      	ldr	r5, [r3, #0]
 800d39e:	b09d      	sub	sp, #116	@ 0x74
 800d3a0:	da08      	bge.n	800d3b4 <sniprintf+0x20>
 800d3a2:	238b      	movs	r3, #139	@ 0x8b
 800d3a4:	602b      	str	r3, [r5, #0]
 800d3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3aa:	b01d      	add	sp, #116	@ 0x74
 800d3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3b0:	b002      	add	sp, #8
 800d3b2:	4770      	bx	lr
 800d3b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d3b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d3bc:	bf14      	ite	ne
 800d3be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d3c2:	4623      	moveq	r3, r4
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3cc:	9002      	str	r0, [sp, #8]
 800d3ce:	9006      	str	r0, [sp, #24]
 800d3d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d3d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d3d6:	ab21      	add	r3, sp, #132	@ 0x84
 800d3d8:	a902      	add	r1, sp, #8
 800d3da:	4628      	mov	r0, r5
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	f000 fb15 	bl	800da0c <_svfiprintf_r>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	bfbc      	itt	lt
 800d3e6:	238b      	movlt	r3, #139	@ 0x8b
 800d3e8:	602b      	strlt	r3, [r5, #0]
 800d3ea:	2c00      	cmp	r4, #0
 800d3ec:	d0dd      	beq.n	800d3aa <sniprintf+0x16>
 800d3ee:	9b02      	ldr	r3, [sp, #8]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e7d9      	b.n	800d3aa <sniprintf+0x16>
 800d3f6:	bf00      	nop
 800d3f8:	20000114 	.word	0x20000114

0800d3fc <__sread>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	460c      	mov	r4, r1
 800d400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d404:	f000 f94e 	bl	800d6a4 <_read_r>
 800d408:	2800      	cmp	r0, #0
 800d40a:	bfab      	itete	ge
 800d40c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d40e:	89a3      	ldrhlt	r3, [r4, #12]
 800d410:	181b      	addge	r3, r3, r0
 800d412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d416:	bfac      	ite	ge
 800d418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d41a:	81a3      	strhlt	r3, [r4, #12]
 800d41c:	bd10      	pop	{r4, pc}

0800d41e <__swrite>:
 800d41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d422:	461f      	mov	r7, r3
 800d424:	898b      	ldrh	r3, [r1, #12]
 800d426:	05db      	lsls	r3, r3, #23
 800d428:	4605      	mov	r5, r0
 800d42a:	460c      	mov	r4, r1
 800d42c:	4616      	mov	r6, r2
 800d42e:	d505      	bpl.n	800d43c <__swrite+0x1e>
 800d430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d434:	2302      	movs	r3, #2
 800d436:	2200      	movs	r2, #0
 800d438:	f000 f922 	bl	800d680 <_lseek_r>
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d446:	81a3      	strh	r3, [r4, #12]
 800d448:	4632      	mov	r2, r6
 800d44a:	463b      	mov	r3, r7
 800d44c:	4628      	mov	r0, r5
 800d44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d452:	f000 b939 	b.w	800d6c8 <_write_r>

0800d456 <__sseek>:
 800d456:	b510      	push	{r4, lr}
 800d458:	460c      	mov	r4, r1
 800d45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45e:	f000 f90f 	bl	800d680 <_lseek_r>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	bf15      	itete	ne
 800d468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d46a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d46e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d472:	81a3      	strheq	r3, [r4, #12]
 800d474:	bf18      	it	ne
 800d476:	81a3      	strhne	r3, [r4, #12]
 800d478:	bd10      	pop	{r4, pc}

0800d47a <__sclose>:
 800d47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d47e:	f000 b8ef 	b.w	800d660 <_close_r>

0800d482 <_vsniprintf_r>:
 800d482:	b530      	push	{r4, r5, lr}
 800d484:	4614      	mov	r4, r2
 800d486:	2c00      	cmp	r4, #0
 800d488:	b09b      	sub	sp, #108	@ 0x6c
 800d48a:	4605      	mov	r5, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	da05      	bge.n	800d49c <_vsniprintf_r+0x1a>
 800d490:	238b      	movs	r3, #139	@ 0x8b
 800d492:	6003      	str	r3, [r0, #0]
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	b01b      	add	sp, #108	@ 0x6c
 800d49a:	bd30      	pop	{r4, r5, pc}
 800d49c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d4a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d4a4:	bf14      	ite	ne
 800d4a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d4aa:	4623      	moveq	r3, r4
 800d4ac:	9302      	str	r3, [sp, #8]
 800d4ae:	9305      	str	r3, [sp, #20]
 800d4b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4b4:	9100      	str	r1, [sp, #0]
 800d4b6:	9104      	str	r1, [sp, #16]
 800d4b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d4bc:	4669      	mov	r1, sp
 800d4be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d4c0:	f000 faa4 	bl	800da0c <_svfiprintf_r>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	bfbc      	itt	lt
 800d4c8:	238b      	movlt	r3, #139	@ 0x8b
 800d4ca:	602b      	strlt	r3, [r5, #0]
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	d0e3      	beq.n	800d498 <_vsniprintf_r+0x16>
 800d4d0:	9b00      	ldr	r3, [sp, #0]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	701a      	strb	r2, [r3, #0]
 800d4d6:	e7df      	b.n	800d498 <_vsniprintf_r+0x16>

0800d4d8 <vsniprintf>:
 800d4d8:	b507      	push	{r0, r1, r2, lr}
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	460a      	mov	r2, r1
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	4803      	ldr	r0, [pc, #12]	@ (800d4f0 <vsniprintf+0x18>)
 800d4e4:	6800      	ldr	r0, [r0, #0]
 800d4e6:	f7ff ffcc 	bl	800d482 <_vsniprintf_r>
 800d4ea:	b003      	add	sp, #12
 800d4ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4f0:	20000114 	.word	0x20000114

0800d4f4 <__swbuf_r>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	460e      	mov	r6, r1
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	b118      	cbz	r0, 800d506 <__swbuf_r+0x12>
 800d4fe:	6a03      	ldr	r3, [r0, #32]
 800d500:	b90b      	cbnz	r3, 800d506 <__swbuf_r+0x12>
 800d502:	f7ff fe99 	bl	800d238 <__sinit>
 800d506:	69a3      	ldr	r3, [r4, #24]
 800d508:	60a3      	str	r3, [r4, #8]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	071a      	lsls	r2, r3, #28
 800d50e:	d501      	bpl.n	800d514 <__swbuf_r+0x20>
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	b943      	cbnz	r3, 800d526 <__swbuf_r+0x32>
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f000 f82a 	bl	800d570 <__swsetup_r>
 800d51c:	b118      	cbz	r0, 800d526 <__swbuf_r+0x32>
 800d51e:	f04f 37ff 	mov.w	r7, #4294967295
 800d522:	4638      	mov	r0, r7
 800d524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	6922      	ldr	r2, [r4, #16]
 800d52a:	1a98      	subs	r0, r3, r2
 800d52c:	6963      	ldr	r3, [r4, #20]
 800d52e:	b2f6      	uxtb	r6, r6
 800d530:	4283      	cmp	r3, r0
 800d532:	4637      	mov	r7, r6
 800d534:	dc05      	bgt.n	800d542 <__swbuf_r+0x4e>
 800d536:	4621      	mov	r1, r4
 800d538:	4628      	mov	r0, r5
 800d53a:	f000 feb7 	bl	800e2ac <_fflush_r>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d1ed      	bne.n	800d51e <__swbuf_r+0x2a>
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	3b01      	subs	r3, #1
 800d546:	60a3      	str	r3, [r4, #8]
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	6022      	str	r2, [r4, #0]
 800d54e:	701e      	strb	r6, [r3, #0]
 800d550:	6962      	ldr	r2, [r4, #20]
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	429a      	cmp	r2, r3
 800d556:	d004      	beq.n	800d562 <__swbuf_r+0x6e>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	07db      	lsls	r3, r3, #31
 800d55c:	d5e1      	bpl.n	800d522 <__swbuf_r+0x2e>
 800d55e:	2e0a      	cmp	r6, #10
 800d560:	d1df      	bne.n	800d522 <__swbuf_r+0x2e>
 800d562:	4621      	mov	r1, r4
 800d564:	4628      	mov	r0, r5
 800d566:	f000 fea1 	bl	800e2ac <_fflush_r>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d0d9      	beq.n	800d522 <__swbuf_r+0x2e>
 800d56e:	e7d6      	b.n	800d51e <__swbuf_r+0x2a>

0800d570 <__swsetup_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4b29      	ldr	r3, [pc, #164]	@ (800d618 <__swsetup_r+0xa8>)
 800d574:	4605      	mov	r5, r0
 800d576:	6818      	ldr	r0, [r3, #0]
 800d578:	460c      	mov	r4, r1
 800d57a:	b118      	cbz	r0, 800d584 <__swsetup_r+0x14>
 800d57c:	6a03      	ldr	r3, [r0, #32]
 800d57e:	b90b      	cbnz	r3, 800d584 <__swsetup_r+0x14>
 800d580:	f7ff fe5a 	bl	800d238 <__sinit>
 800d584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d588:	0719      	lsls	r1, r3, #28
 800d58a:	d422      	bmi.n	800d5d2 <__swsetup_r+0x62>
 800d58c:	06da      	lsls	r2, r3, #27
 800d58e:	d407      	bmi.n	800d5a0 <__swsetup_r+0x30>
 800d590:	2209      	movs	r2, #9
 800d592:	602a      	str	r2, [r5, #0]
 800d594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295
 800d59e:	e033      	b.n	800d608 <__swsetup_r+0x98>
 800d5a0:	0758      	lsls	r0, r3, #29
 800d5a2:	d512      	bpl.n	800d5ca <__swsetup_r+0x5a>
 800d5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5a6:	b141      	cbz	r1, 800d5ba <__swsetup_r+0x4a>
 800d5a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5ac:	4299      	cmp	r1, r3
 800d5ae:	d002      	beq.n	800d5b6 <__swsetup_r+0x46>
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 f8d7 	bl	800d764 <_free_r>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6063      	str	r3, [r4, #4]
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	f043 0308 	orr.w	r3, r3, #8
 800d5d0:	81a3      	strh	r3, [r4, #12]
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	b94b      	cbnz	r3, 800d5ea <__swsetup_r+0x7a>
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5e0:	d003      	beq.n	800d5ea <__swsetup_r+0x7a>
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f000 feaf 	bl	800e348 <__smakebuf_r>
 800d5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ee:	f013 0201 	ands.w	r2, r3, #1
 800d5f2:	d00a      	beq.n	800d60a <__swsetup_r+0x9a>
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	60a2      	str	r2, [r4, #8]
 800d5f8:	6962      	ldr	r2, [r4, #20]
 800d5fa:	4252      	negs	r2, r2
 800d5fc:	61a2      	str	r2, [r4, #24]
 800d5fe:	6922      	ldr	r2, [r4, #16]
 800d600:	b942      	cbnz	r2, 800d614 <__swsetup_r+0xa4>
 800d602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d606:	d1c5      	bne.n	800d594 <__swsetup_r+0x24>
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	0799      	lsls	r1, r3, #30
 800d60c:	bf58      	it	pl
 800d60e:	6962      	ldrpl	r2, [r4, #20]
 800d610:	60a2      	str	r2, [r4, #8]
 800d612:	e7f4      	b.n	800d5fe <__swsetup_r+0x8e>
 800d614:	2000      	movs	r0, #0
 800d616:	e7f7      	b.n	800d608 <__swsetup_r+0x98>
 800d618:	20000114 	.word	0x20000114

0800d61c <memmove>:
 800d61c:	4288      	cmp	r0, r1
 800d61e:	b510      	push	{r4, lr}
 800d620:	eb01 0402 	add.w	r4, r1, r2
 800d624:	d902      	bls.n	800d62c <memmove+0x10>
 800d626:	4284      	cmp	r4, r0
 800d628:	4623      	mov	r3, r4
 800d62a:	d807      	bhi.n	800d63c <memmove+0x20>
 800d62c:	1e43      	subs	r3, r0, #1
 800d62e:	42a1      	cmp	r1, r4
 800d630:	d008      	beq.n	800d644 <memmove+0x28>
 800d632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d63a:	e7f8      	b.n	800d62e <memmove+0x12>
 800d63c:	4402      	add	r2, r0
 800d63e:	4601      	mov	r1, r0
 800d640:	428a      	cmp	r2, r1
 800d642:	d100      	bne.n	800d646 <memmove+0x2a>
 800d644:	bd10      	pop	{r4, pc}
 800d646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64e:	e7f7      	b.n	800d640 <memmove+0x24>

0800d650 <memset>:
 800d650:	4402      	add	r2, r0
 800d652:	4603      	mov	r3, r0
 800d654:	4293      	cmp	r3, r2
 800d656:	d100      	bne.n	800d65a <memset+0xa>
 800d658:	4770      	bx	lr
 800d65a:	f803 1b01 	strb.w	r1, [r3], #1
 800d65e:	e7f9      	b.n	800d654 <memset+0x4>

0800d660 <_close_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d06      	ldr	r5, [pc, #24]	@ (800d67c <_close_r+0x1c>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f6 fe18 	bl	80042a0 <_close>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_close_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_close_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	20002214 	.word	0x20002214

0800d680 <_lseek_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	@ (800d6a0 <_lseek_r+0x20>)
 800d684:	4604      	mov	r4, r0
 800d686:	4608      	mov	r0, r1
 800d688:	4611      	mov	r1, r2
 800d68a:	2200      	movs	r2, #0
 800d68c:	602a      	str	r2, [r5, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	f7f6 fe10 	bl	80042b4 <_lseek>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_lseek_r+0x1e>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_lseek_r+0x1e>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	20002214 	.word	0x20002214

0800d6a4 <_read_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4d07      	ldr	r5, [pc, #28]	@ (800d6c4 <_read_r+0x20>)
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	4608      	mov	r0, r1
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	602a      	str	r2, [r5, #0]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f7f6 fdda 	bl	800426c <_read>
 800d6b8:	1c43      	adds	r3, r0, #1
 800d6ba:	d102      	bne.n	800d6c2 <_read_r+0x1e>
 800d6bc:	682b      	ldr	r3, [r5, #0]
 800d6be:	b103      	cbz	r3, 800d6c2 <_read_r+0x1e>
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
 800d6c4:	20002214 	.word	0x20002214

0800d6c8 <_write_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d07      	ldr	r5, [pc, #28]	@ (800d6e8 <_write_r+0x20>)
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	4608      	mov	r0, r1
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	602a      	str	r2, [r5, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f7f6 fdd5 	bl	8004286 <_write>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_write_r+0x1e>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_write_r+0x1e>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	20002214 	.word	0x20002214

0800d6ec <__errno>:
 800d6ec:	4b01      	ldr	r3, [pc, #4]	@ (800d6f4 <__errno+0x8>)
 800d6ee:	6818      	ldr	r0, [r3, #0]
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20000114 	.word	0x20000114

0800d6f8 <__libc_init_array>:
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	4d0d      	ldr	r5, [pc, #52]	@ (800d730 <__libc_init_array+0x38>)
 800d6fc:	4c0d      	ldr	r4, [pc, #52]	@ (800d734 <__libc_init_array+0x3c>)
 800d6fe:	1b64      	subs	r4, r4, r5
 800d700:	10a4      	asrs	r4, r4, #2
 800d702:	2600      	movs	r6, #0
 800d704:	42a6      	cmp	r6, r4
 800d706:	d109      	bne.n	800d71c <__libc_init_array+0x24>
 800d708:	4d0b      	ldr	r5, [pc, #44]	@ (800d738 <__libc_init_array+0x40>)
 800d70a:	4c0c      	ldr	r4, [pc, #48]	@ (800d73c <__libc_init_array+0x44>)
 800d70c:	f000 ff40 	bl	800e590 <_init>
 800d710:	1b64      	subs	r4, r4, r5
 800d712:	10a4      	asrs	r4, r4, #2
 800d714:	2600      	movs	r6, #0
 800d716:	42a6      	cmp	r6, r4
 800d718:	d105      	bne.n	800d726 <__libc_init_array+0x2e>
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
 800d71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d720:	4798      	blx	r3
 800d722:	3601      	adds	r6, #1
 800d724:	e7ee      	b.n	800d704 <__libc_init_array+0xc>
 800d726:	f855 3b04 	ldr.w	r3, [r5], #4
 800d72a:	4798      	blx	r3
 800d72c:	3601      	adds	r6, #1
 800d72e:	e7f2      	b.n	800d716 <__libc_init_array+0x1e>
 800d730:	0800f77c 	.word	0x0800f77c
 800d734:	0800f77c 	.word	0x0800f77c
 800d738:	0800f77c 	.word	0x0800f77c
 800d73c:	0800f780 	.word	0x0800f780

0800d740 <__retarget_lock_init_recursive>:
 800d740:	4770      	bx	lr

0800d742 <__retarget_lock_acquire_recursive>:
 800d742:	4770      	bx	lr

0800d744 <__retarget_lock_release_recursive>:
 800d744:	4770      	bx	lr

0800d746 <memcpy>:
 800d746:	440a      	add	r2, r1
 800d748:	4291      	cmp	r1, r2
 800d74a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d74e:	d100      	bne.n	800d752 <memcpy+0xc>
 800d750:	4770      	bx	lr
 800d752:	b510      	push	{r4, lr}
 800d754:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d758:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d75c:	4291      	cmp	r1, r2
 800d75e:	d1f9      	bne.n	800d754 <memcpy+0xe>
 800d760:	bd10      	pop	{r4, pc}
	...

0800d764 <_free_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4605      	mov	r5, r0
 800d768:	2900      	cmp	r1, #0
 800d76a:	d041      	beq.n	800d7f0 <_free_r+0x8c>
 800d76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d770:	1f0c      	subs	r4, r1, #4
 800d772:	2b00      	cmp	r3, #0
 800d774:	bfb8      	it	lt
 800d776:	18e4      	addlt	r4, r4, r3
 800d778:	f000 f8e0 	bl	800d93c <__malloc_lock>
 800d77c:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f4 <_free_r+0x90>)
 800d77e:	6813      	ldr	r3, [r2, #0]
 800d780:	b933      	cbnz	r3, 800d790 <_free_r+0x2c>
 800d782:	6063      	str	r3, [r4, #4]
 800d784:	6014      	str	r4, [r2, #0]
 800d786:	4628      	mov	r0, r5
 800d788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d78c:	f000 b8dc 	b.w	800d948 <__malloc_unlock>
 800d790:	42a3      	cmp	r3, r4
 800d792:	d908      	bls.n	800d7a6 <_free_r+0x42>
 800d794:	6820      	ldr	r0, [r4, #0]
 800d796:	1821      	adds	r1, r4, r0
 800d798:	428b      	cmp	r3, r1
 800d79a:	bf01      	itttt	eq
 800d79c:	6819      	ldreq	r1, [r3, #0]
 800d79e:	685b      	ldreq	r3, [r3, #4]
 800d7a0:	1809      	addeq	r1, r1, r0
 800d7a2:	6021      	streq	r1, [r4, #0]
 800d7a4:	e7ed      	b.n	800d782 <_free_r+0x1e>
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	b10b      	cbz	r3, 800d7b0 <_free_r+0x4c>
 800d7ac:	42a3      	cmp	r3, r4
 800d7ae:	d9fa      	bls.n	800d7a6 <_free_r+0x42>
 800d7b0:	6811      	ldr	r1, [r2, #0]
 800d7b2:	1850      	adds	r0, r2, r1
 800d7b4:	42a0      	cmp	r0, r4
 800d7b6:	d10b      	bne.n	800d7d0 <_free_r+0x6c>
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	4401      	add	r1, r0
 800d7bc:	1850      	adds	r0, r2, r1
 800d7be:	4283      	cmp	r3, r0
 800d7c0:	6011      	str	r1, [r2, #0]
 800d7c2:	d1e0      	bne.n	800d786 <_free_r+0x22>
 800d7c4:	6818      	ldr	r0, [r3, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	6053      	str	r3, [r2, #4]
 800d7ca:	4408      	add	r0, r1
 800d7cc:	6010      	str	r0, [r2, #0]
 800d7ce:	e7da      	b.n	800d786 <_free_r+0x22>
 800d7d0:	d902      	bls.n	800d7d8 <_free_r+0x74>
 800d7d2:	230c      	movs	r3, #12
 800d7d4:	602b      	str	r3, [r5, #0]
 800d7d6:	e7d6      	b.n	800d786 <_free_r+0x22>
 800d7d8:	6820      	ldr	r0, [r4, #0]
 800d7da:	1821      	adds	r1, r4, r0
 800d7dc:	428b      	cmp	r3, r1
 800d7de:	bf04      	itt	eq
 800d7e0:	6819      	ldreq	r1, [r3, #0]
 800d7e2:	685b      	ldreq	r3, [r3, #4]
 800d7e4:	6063      	str	r3, [r4, #4]
 800d7e6:	bf04      	itt	eq
 800d7e8:	1809      	addeq	r1, r1, r0
 800d7ea:	6021      	streq	r1, [r4, #0]
 800d7ec:	6054      	str	r4, [r2, #4]
 800d7ee:	e7ca      	b.n	800d786 <_free_r+0x22>
 800d7f0:	bd38      	pop	{r3, r4, r5, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20002220 	.word	0x20002220

0800d7f8 <sbrk_aligned>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	4e0f      	ldr	r6, [pc, #60]	@ (800d838 <sbrk_aligned+0x40>)
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	6831      	ldr	r1, [r6, #0]
 800d800:	4605      	mov	r5, r0
 800d802:	b911      	cbnz	r1, 800d80a <sbrk_aligned+0x12>
 800d804:	f000 fe32 	bl	800e46c <_sbrk_r>
 800d808:	6030      	str	r0, [r6, #0]
 800d80a:	4621      	mov	r1, r4
 800d80c:	4628      	mov	r0, r5
 800d80e:	f000 fe2d 	bl	800e46c <_sbrk_r>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d103      	bne.n	800d81e <sbrk_aligned+0x26>
 800d816:	f04f 34ff 	mov.w	r4, #4294967295
 800d81a:	4620      	mov	r0, r4
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	1cc4      	adds	r4, r0, #3
 800d820:	f024 0403 	bic.w	r4, r4, #3
 800d824:	42a0      	cmp	r0, r4
 800d826:	d0f8      	beq.n	800d81a <sbrk_aligned+0x22>
 800d828:	1a21      	subs	r1, r4, r0
 800d82a:	4628      	mov	r0, r5
 800d82c:	f000 fe1e 	bl	800e46c <_sbrk_r>
 800d830:	3001      	adds	r0, #1
 800d832:	d1f2      	bne.n	800d81a <sbrk_aligned+0x22>
 800d834:	e7ef      	b.n	800d816 <sbrk_aligned+0x1e>
 800d836:	bf00      	nop
 800d838:	2000221c 	.word	0x2000221c

0800d83c <_malloc_r>:
 800d83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d840:	1ccd      	adds	r5, r1, #3
 800d842:	f025 0503 	bic.w	r5, r5, #3
 800d846:	3508      	adds	r5, #8
 800d848:	2d0c      	cmp	r5, #12
 800d84a:	bf38      	it	cc
 800d84c:	250c      	movcc	r5, #12
 800d84e:	2d00      	cmp	r5, #0
 800d850:	4606      	mov	r6, r0
 800d852:	db01      	blt.n	800d858 <_malloc_r+0x1c>
 800d854:	42a9      	cmp	r1, r5
 800d856:	d904      	bls.n	800d862 <_malloc_r+0x26>
 800d858:	230c      	movs	r3, #12
 800d85a:	6033      	str	r3, [r6, #0]
 800d85c:	2000      	movs	r0, #0
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d938 <_malloc_r+0xfc>
 800d866:	f000 f869 	bl	800d93c <__malloc_lock>
 800d86a:	f8d8 3000 	ldr.w	r3, [r8]
 800d86e:	461c      	mov	r4, r3
 800d870:	bb44      	cbnz	r4, 800d8c4 <_malloc_r+0x88>
 800d872:	4629      	mov	r1, r5
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff ffbf 	bl	800d7f8 <sbrk_aligned>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	4604      	mov	r4, r0
 800d87e:	d158      	bne.n	800d932 <_malloc_r+0xf6>
 800d880:	f8d8 4000 	ldr.w	r4, [r8]
 800d884:	4627      	mov	r7, r4
 800d886:	2f00      	cmp	r7, #0
 800d888:	d143      	bne.n	800d912 <_malloc_r+0xd6>
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	d04b      	beq.n	800d926 <_malloc_r+0xea>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	4639      	mov	r1, r7
 800d892:	4630      	mov	r0, r6
 800d894:	eb04 0903 	add.w	r9, r4, r3
 800d898:	f000 fde8 	bl	800e46c <_sbrk_r>
 800d89c:	4581      	cmp	r9, r0
 800d89e:	d142      	bne.n	800d926 <_malloc_r+0xea>
 800d8a0:	6821      	ldr	r1, [r4, #0]
 800d8a2:	1a6d      	subs	r5, r5, r1
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f7ff ffa6 	bl	800d7f8 <sbrk_aligned>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d03a      	beq.n	800d926 <_malloc_r+0xea>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	442b      	add	r3, r5
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	bb62      	cbnz	r2, 800d918 <_malloc_r+0xdc>
 800d8be:	f8c8 7000 	str.w	r7, [r8]
 800d8c2:	e00f      	b.n	800d8e4 <_malloc_r+0xa8>
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	1b52      	subs	r2, r2, r5
 800d8c8:	d420      	bmi.n	800d90c <_malloc_r+0xd0>
 800d8ca:	2a0b      	cmp	r2, #11
 800d8cc:	d917      	bls.n	800d8fe <_malloc_r+0xc2>
 800d8ce:	1961      	adds	r1, r4, r5
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	6025      	str	r5, [r4, #0]
 800d8d4:	bf18      	it	ne
 800d8d6:	6059      	strne	r1, [r3, #4]
 800d8d8:	6863      	ldr	r3, [r4, #4]
 800d8da:	bf08      	it	eq
 800d8dc:	f8c8 1000 	streq.w	r1, [r8]
 800d8e0:	5162      	str	r2, [r4, r5]
 800d8e2:	604b      	str	r3, [r1, #4]
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f000 f82f 	bl	800d948 <__malloc_unlock>
 800d8ea:	f104 000b 	add.w	r0, r4, #11
 800d8ee:	1d23      	adds	r3, r4, #4
 800d8f0:	f020 0007 	bic.w	r0, r0, #7
 800d8f4:	1ac2      	subs	r2, r0, r3
 800d8f6:	bf1c      	itt	ne
 800d8f8:	1a1b      	subne	r3, r3, r0
 800d8fa:	50a3      	strne	r3, [r4, r2]
 800d8fc:	e7af      	b.n	800d85e <_malloc_r+0x22>
 800d8fe:	6862      	ldr	r2, [r4, #4]
 800d900:	42a3      	cmp	r3, r4
 800d902:	bf0c      	ite	eq
 800d904:	f8c8 2000 	streq.w	r2, [r8]
 800d908:	605a      	strne	r2, [r3, #4]
 800d90a:	e7eb      	b.n	800d8e4 <_malloc_r+0xa8>
 800d90c:	4623      	mov	r3, r4
 800d90e:	6864      	ldr	r4, [r4, #4]
 800d910:	e7ae      	b.n	800d870 <_malloc_r+0x34>
 800d912:	463c      	mov	r4, r7
 800d914:	687f      	ldr	r7, [r7, #4]
 800d916:	e7b6      	b.n	800d886 <_malloc_r+0x4a>
 800d918:	461a      	mov	r2, r3
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d1fb      	bne.n	800d918 <_malloc_r+0xdc>
 800d920:	2300      	movs	r3, #0
 800d922:	6053      	str	r3, [r2, #4]
 800d924:	e7de      	b.n	800d8e4 <_malloc_r+0xa8>
 800d926:	230c      	movs	r3, #12
 800d928:	6033      	str	r3, [r6, #0]
 800d92a:	4630      	mov	r0, r6
 800d92c:	f000 f80c 	bl	800d948 <__malloc_unlock>
 800d930:	e794      	b.n	800d85c <_malloc_r+0x20>
 800d932:	6005      	str	r5, [r0, #0]
 800d934:	e7d6      	b.n	800d8e4 <_malloc_r+0xa8>
 800d936:	bf00      	nop
 800d938:	20002220 	.word	0x20002220

0800d93c <__malloc_lock>:
 800d93c:	4801      	ldr	r0, [pc, #4]	@ (800d944 <__malloc_lock+0x8>)
 800d93e:	f7ff bf00 	b.w	800d742 <__retarget_lock_acquire_recursive>
 800d942:	bf00      	nop
 800d944:	20002218 	.word	0x20002218

0800d948 <__malloc_unlock>:
 800d948:	4801      	ldr	r0, [pc, #4]	@ (800d950 <__malloc_unlock+0x8>)
 800d94a:	f7ff befb 	b.w	800d744 <__retarget_lock_release_recursive>
 800d94e:	bf00      	nop
 800d950:	20002218 	.word	0x20002218

0800d954 <__ssputs_r>:
 800d954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d958:	688e      	ldr	r6, [r1, #8]
 800d95a:	461f      	mov	r7, r3
 800d95c:	42be      	cmp	r6, r7
 800d95e:	680b      	ldr	r3, [r1, #0]
 800d960:	4682      	mov	sl, r0
 800d962:	460c      	mov	r4, r1
 800d964:	4690      	mov	r8, r2
 800d966:	d82d      	bhi.n	800d9c4 <__ssputs_r+0x70>
 800d968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d96c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d970:	d026      	beq.n	800d9c0 <__ssputs_r+0x6c>
 800d972:	6965      	ldr	r5, [r4, #20]
 800d974:	6909      	ldr	r1, [r1, #16]
 800d976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d97a:	eba3 0901 	sub.w	r9, r3, r1
 800d97e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d982:	1c7b      	adds	r3, r7, #1
 800d984:	444b      	add	r3, r9
 800d986:	106d      	asrs	r5, r5, #1
 800d988:	429d      	cmp	r5, r3
 800d98a:	bf38      	it	cc
 800d98c:	461d      	movcc	r5, r3
 800d98e:	0553      	lsls	r3, r2, #21
 800d990:	d527      	bpl.n	800d9e2 <__ssputs_r+0x8e>
 800d992:	4629      	mov	r1, r5
 800d994:	f7ff ff52 	bl	800d83c <_malloc_r>
 800d998:	4606      	mov	r6, r0
 800d99a:	b360      	cbz	r0, 800d9f6 <__ssputs_r+0xa2>
 800d99c:	6921      	ldr	r1, [r4, #16]
 800d99e:	464a      	mov	r2, r9
 800d9a0:	f7ff fed1 	bl	800d746 <memcpy>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d9aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	6126      	str	r6, [r4, #16]
 800d9b2:	6165      	str	r5, [r4, #20]
 800d9b4:	444e      	add	r6, r9
 800d9b6:	eba5 0509 	sub.w	r5, r5, r9
 800d9ba:	6026      	str	r6, [r4, #0]
 800d9bc:	60a5      	str	r5, [r4, #8]
 800d9be:	463e      	mov	r6, r7
 800d9c0:	42be      	cmp	r6, r7
 800d9c2:	d900      	bls.n	800d9c6 <__ssputs_r+0x72>
 800d9c4:	463e      	mov	r6, r7
 800d9c6:	6820      	ldr	r0, [r4, #0]
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	4641      	mov	r1, r8
 800d9cc:	f7ff fe26 	bl	800d61c <memmove>
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	1b9b      	subs	r3, r3, r6
 800d9d4:	60a3      	str	r3, [r4, #8]
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	4433      	add	r3, r6
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	f000 fd52 	bl	800e48c <_realloc_r>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d1e0      	bne.n	800d9b0 <__ssputs_r+0x5c>
 800d9ee:	6921      	ldr	r1, [r4, #16]
 800d9f0:	4650      	mov	r0, sl
 800d9f2:	f7ff feb7 	bl	800d764 <_free_r>
 800d9f6:	230c      	movs	r3, #12
 800d9f8:	f8ca 3000 	str.w	r3, [sl]
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	f04f 30ff 	mov.w	r0, #4294967295
 800da08:	e7e9      	b.n	800d9de <__ssputs_r+0x8a>
	...

0800da0c <_svfiprintf_r>:
 800da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	4698      	mov	r8, r3
 800da12:	898b      	ldrh	r3, [r1, #12]
 800da14:	061b      	lsls	r3, r3, #24
 800da16:	b09d      	sub	sp, #116	@ 0x74
 800da18:	4607      	mov	r7, r0
 800da1a:	460d      	mov	r5, r1
 800da1c:	4614      	mov	r4, r2
 800da1e:	d510      	bpl.n	800da42 <_svfiprintf_r+0x36>
 800da20:	690b      	ldr	r3, [r1, #16]
 800da22:	b973      	cbnz	r3, 800da42 <_svfiprintf_r+0x36>
 800da24:	2140      	movs	r1, #64	@ 0x40
 800da26:	f7ff ff09 	bl	800d83c <_malloc_r>
 800da2a:	6028      	str	r0, [r5, #0]
 800da2c:	6128      	str	r0, [r5, #16]
 800da2e:	b930      	cbnz	r0, 800da3e <_svfiprintf_r+0x32>
 800da30:	230c      	movs	r3, #12
 800da32:	603b      	str	r3, [r7, #0]
 800da34:	f04f 30ff 	mov.w	r0, #4294967295
 800da38:	b01d      	add	sp, #116	@ 0x74
 800da3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3e:	2340      	movs	r3, #64	@ 0x40
 800da40:	616b      	str	r3, [r5, #20]
 800da42:	2300      	movs	r3, #0
 800da44:	9309      	str	r3, [sp, #36]	@ 0x24
 800da46:	2320      	movs	r3, #32
 800da48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da50:	2330      	movs	r3, #48	@ 0x30
 800da52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dbf0 <_svfiprintf_r+0x1e4>
 800da56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da5a:	f04f 0901 	mov.w	r9, #1
 800da5e:	4623      	mov	r3, r4
 800da60:	469a      	mov	sl, r3
 800da62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da66:	b10a      	cbz	r2, 800da6c <_svfiprintf_r+0x60>
 800da68:	2a25      	cmp	r2, #37	@ 0x25
 800da6a:	d1f9      	bne.n	800da60 <_svfiprintf_r+0x54>
 800da6c:	ebba 0b04 	subs.w	fp, sl, r4
 800da70:	d00b      	beq.n	800da8a <_svfiprintf_r+0x7e>
 800da72:	465b      	mov	r3, fp
 800da74:	4622      	mov	r2, r4
 800da76:	4629      	mov	r1, r5
 800da78:	4638      	mov	r0, r7
 800da7a:	f7ff ff6b 	bl	800d954 <__ssputs_r>
 800da7e:	3001      	adds	r0, #1
 800da80:	f000 80a7 	beq.w	800dbd2 <_svfiprintf_r+0x1c6>
 800da84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da86:	445a      	add	r2, fp
 800da88:	9209      	str	r2, [sp, #36]	@ 0x24
 800da8a:	f89a 3000 	ldrb.w	r3, [sl]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f000 809f 	beq.w	800dbd2 <_svfiprintf_r+0x1c6>
 800da94:	2300      	movs	r3, #0
 800da96:	f04f 32ff 	mov.w	r2, #4294967295
 800da9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da9e:	f10a 0a01 	add.w	sl, sl, #1
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	9307      	str	r3, [sp, #28]
 800daa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800daac:	4654      	mov	r4, sl
 800daae:	2205      	movs	r2, #5
 800dab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab4:	484e      	ldr	r0, [pc, #312]	@ (800dbf0 <_svfiprintf_r+0x1e4>)
 800dab6:	f7f2 fbb3 	bl	8000220 <memchr>
 800daba:	9a04      	ldr	r2, [sp, #16]
 800dabc:	b9d8      	cbnz	r0, 800daf6 <_svfiprintf_r+0xea>
 800dabe:	06d0      	lsls	r0, r2, #27
 800dac0:	bf44      	itt	mi
 800dac2:	2320      	movmi	r3, #32
 800dac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dac8:	0711      	lsls	r1, r2, #28
 800daca:	bf44      	itt	mi
 800dacc:	232b      	movmi	r3, #43	@ 0x2b
 800dace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad2:	f89a 3000 	ldrb.w	r3, [sl]
 800dad6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dad8:	d015      	beq.n	800db06 <_svfiprintf_r+0xfa>
 800dada:	9a07      	ldr	r2, [sp, #28]
 800dadc:	4654      	mov	r4, sl
 800dade:	2000      	movs	r0, #0
 800dae0:	f04f 0c0a 	mov.w	ip, #10
 800dae4:	4621      	mov	r1, r4
 800dae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daea:	3b30      	subs	r3, #48	@ 0x30
 800daec:	2b09      	cmp	r3, #9
 800daee:	d94b      	bls.n	800db88 <_svfiprintf_r+0x17c>
 800daf0:	b1b0      	cbz	r0, 800db20 <_svfiprintf_r+0x114>
 800daf2:	9207      	str	r2, [sp, #28]
 800daf4:	e014      	b.n	800db20 <_svfiprintf_r+0x114>
 800daf6:	eba0 0308 	sub.w	r3, r0, r8
 800dafa:	fa09 f303 	lsl.w	r3, r9, r3
 800dafe:	4313      	orrs	r3, r2
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	46a2      	mov	sl, r4
 800db04:	e7d2      	b.n	800daac <_svfiprintf_r+0xa0>
 800db06:	9b03      	ldr	r3, [sp, #12]
 800db08:	1d19      	adds	r1, r3, #4
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	9103      	str	r1, [sp, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bfbb      	ittet	lt
 800db12:	425b      	neglt	r3, r3
 800db14:	f042 0202 	orrlt.w	r2, r2, #2
 800db18:	9307      	strge	r3, [sp, #28]
 800db1a:	9307      	strlt	r3, [sp, #28]
 800db1c:	bfb8      	it	lt
 800db1e:	9204      	strlt	r2, [sp, #16]
 800db20:	7823      	ldrb	r3, [r4, #0]
 800db22:	2b2e      	cmp	r3, #46	@ 0x2e
 800db24:	d10a      	bne.n	800db3c <_svfiprintf_r+0x130>
 800db26:	7863      	ldrb	r3, [r4, #1]
 800db28:	2b2a      	cmp	r3, #42	@ 0x2a
 800db2a:	d132      	bne.n	800db92 <_svfiprintf_r+0x186>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	9203      	str	r2, [sp, #12]
 800db34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db38:	3402      	adds	r4, #2
 800db3a:	9305      	str	r3, [sp, #20]
 800db3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc00 <_svfiprintf_r+0x1f4>
 800db40:	7821      	ldrb	r1, [r4, #0]
 800db42:	2203      	movs	r2, #3
 800db44:	4650      	mov	r0, sl
 800db46:	f7f2 fb6b 	bl	8000220 <memchr>
 800db4a:	b138      	cbz	r0, 800db5c <_svfiprintf_r+0x150>
 800db4c:	9b04      	ldr	r3, [sp, #16]
 800db4e:	eba0 000a 	sub.w	r0, r0, sl
 800db52:	2240      	movs	r2, #64	@ 0x40
 800db54:	4082      	lsls	r2, r0
 800db56:	4313      	orrs	r3, r2
 800db58:	3401      	adds	r4, #1
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db60:	4824      	ldr	r0, [pc, #144]	@ (800dbf4 <_svfiprintf_r+0x1e8>)
 800db62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db66:	2206      	movs	r2, #6
 800db68:	f7f2 fb5a 	bl	8000220 <memchr>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d036      	beq.n	800dbde <_svfiprintf_r+0x1d2>
 800db70:	4b21      	ldr	r3, [pc, #132]	@ (800dbf8 <_svfiprintf_r+0x1ec>)
 800db72:	bb1b      	cbnz	r3, 800dbbc <_svfiprintf_r+0x1b0>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	3307      	adds	r3, #7
 800db78:	f023 0307 	bic.w	r3, r3, #7
 800db7c:	3308      	adds	r3, #8
 800db7e:	9303      	str	r3, [sp, #12]
 800db80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db82:	4433      	add	r3, r6
 800db84:	9309      	str	r3, [sp, #36]	@ 0x24
 800db86:	e76a      	b.n	800da5e <_svfiprintf_r+0x52>
 800db88:	fb0c 3202 	mla	r2, ip, r2, r3
 800db8c:	460c      	mov	r4, r1
 800db8e:	2001      	movs	r0, #1
 800db90:	e7a8      	b.n	800dae4 <_svfiprintf_r+0xd8>
 800db92:	2300      	movs	r3, #0
 800db94:	3401      	adds	r4, #1
 800db96:	9305      	str	r3, [sp, #20]
 800db98:	4619      	mov	r1, r3
 800db9a:	f04f 0c0a 	mov.w	ip, #10
 800db9e:	4620      	mov	r0, r4
 800dba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba4:	3a30      	subs	r2, #48	@ 0x30
 800dba6:	2a09      	cmp	r2, #9
 800dba8:	d903      	bls.n	800dbb2 <_svfiprintf_r+0x1a6>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0c6      	beq.n	800db3c <_svfiprintf_r+0x130>
 800dbae:	9105      	str	r1, [sp, #20]
 800dbb0:	e7c4      	b.n	800db3c <_svfiprintf_r+0x130>
 800dbb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e7f0      	b.n	800db9e <_svfiprintf_r+0x192>
 800dbbc:	ab03      	add	r3, sp, #12
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	462a      	mov	r2, r5
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	@ (800dbfc <_svfiprintf_r+0x1f0>)
 800dbc4:	a904      	add	r1, sp, #16
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	f3af 8000 	nop.w
 800dbcc:	1c42      	adds	r2, r0, #1
 800dbce:	4606      	mov	r6, r0
 800dbd0:	d1d6      	bne.n	800db80 <_svfiprintf_r+0x174>
 800dbd2:	89ab      	ldrh	r3, [r5, #12]
 800dbd4:	065b      	lsls	r3, r3, #25
 800dbd6:	f53f af2d 	bmi.w	800da34 <_svfiprintf_r+0x28>
 800dbda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbdc:	e72c      	b.n	800da38 <_svfiprintf_r+0x2c>
 800dbde:	ab03      	add	r3, sp, #12
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	462a      	mov	r2, r5
 800dbe4:	4b05      	ldr	r3, [pc, #20]	@ (800dbfc <_svfiprintf_r+0x1f0>)
 800dbe6:	a904      	add	r1, sp, #16
 800dbe8:	4638      	mov	r0, r7
 800dbea:	f000 f9bb 	bl	800df64 <_printf_i>
 800dbee:	e7ed      	b.n	800dbcc <_svfiprintf_r+0x1c0>
 800dbf0:	0800f670 	.word	0x0800f670
 800dbf4:	0800f67a 	.word	0x0800f67a
 800dbf8:	00000000 	.word	0x00000000
 800dbfc:	0800d955 	.word	0x0800d955
 800dc00:	0800f676 	.word	0x0800f676

0800dc04 <__sfputc_r>:
 800dc04:	6893      	ldr	r3, [r2, #8]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	b410      	push	{r4}
 800dc0c:	6093      	str	r3, [r2, #8]
 800dc0e:	da08      	bge.n	800dc22 <__sfputc_r+0x1e>
 800dc10:	6994      	ldr	r4, [r2, #24]
 800dc12:	42a3      	cmp	r3, r4
 800dc14:	db01      	blt.n	800dc1a <__sfputc_r+0x16>
 800dc16:	290a      	cmp	r1, #10
 800dc18:	d103      	bne.n	800dc22 <__sfputc_r+0x1e>
 800dc1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc1e:	f7ff bc69 	b.w	800d4f4 <__swbuf_r>
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	1c58      	adds	r0, r3, #1
 800dc26:	6010      	str	r0, [r2, #0]
 800dc28:	7019      	strb	r1, [r3, #0]
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <__sfputs_r>:
 800dc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	4614      	mov	r4, r2
 800dc3a:	18d5      	adds	r5, r2, r3
 800dc3c:	42ac      	cmp	r4, r5
 800dc3e:	d101      	bne.n	800dc44 <__sfputs_r+0x12>
 800dc40:	2000      	movs	r0, #0
 800dc42:	e007      	b.n	800dc54 <__sfputs_r+0x22>
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	463a      	mov	r2, r7
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7ff ffda 	bl	800dc04 <__sfputc_r>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d1f3      	bne.n	800dc3c <__sfputs_r+0xa>
 800dc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc58 <_vfiprintf_r>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	b09d      	sub	sp, #116	@ 0x74
 800dc60:	4614      	mov	r4, r2
 800dc62:	4698      	mov	r8, r3
 800dc64:	4606      	mov	r6, r0
 800dc66:	b118      	cbz	r0, 800dc70 <_vfiprintf_r+0x18>
 800dc68:	6a03      	ldr	r3, [r0, #32]
 800dc6a:	b90b      	cbnz	r3, 800dc70 <_vfiprintf_r+0x18>
 800dc6c:	f7ff fae4 	bl	800d238 <__sinit>
 800dc70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc72:	07d9      	lsls	r1, r3, #31
 800dc74:	d405      	bmi.n	800dc82 <_vfiprintf_r+0x2a>
 800dc76:	89ab      	ldrh	r3, [r5, #12]
 800dc78:	059a      	lsls	r2, r3, #22
 800dc7a:	d402      	bmi.n	800dc82 <_vfiprintf_r+0x2a>
 800dc7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc7e:	f7ff fd60 	bl	800d742 <__retarget_lock_acquire_recursive>
 800dc82:	89ab      	ldrh	r3, [r5, #12]
 800dc84:	071b      	lsls	r3, r3, #28
 800dc86:	d501      	bpl.n	800dc8c <_vfiprintf_r+0x34>
 800dc88:	692b      	ldr	r3, [r5, #16]
 800dc8a:	b99b      	cbnz	r3, 800dcb4 <_vfiprintf_r+0x5c>
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7ff fc6e 	bl	800d570 <__swsetup_r>
 800dc94:	b170      	cbz	r0, 800dcb4 <_vfiprintf_r+0x5c>
 800dc96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc98:	07dc      	lsls	r4, r3, #31
 800dc9a:	d504      	bpl.n	800dca6 <_vfiprintf_r+0x4e>
 800dc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dca0:	b01d      	add	sp, #116	@ 0x74
 800dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	0598      	lsls	r0, r3, #22
 800dcaa:	d4f7      	bmi.n	800dc9c <_vfiprintf_r+0x44>
 800dcac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcae:	f7ff fd49 	bl	800d744 <__retarget_lock_release_recursive>
 800dcb2:	e7f3      	b.n	800dc9c <_vfiprintf_r+0x44>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb8:	2320      	movs	r3, #32
 800dcba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcc2:	2330      	movs	r3, #48	@ 0x30
 800dcc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de74 <_vfiprintf_r+0x21c>
 800dcc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dccc:	f04f 0901 	mov.w	r9, #1
 800dcd0:	4623      	mov	r3, r4
 800dcd2:	469a      	mov	sl, r3
 800dcd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcd8:	b10a      	cbz	r2, 800dcde <_vfiprintf_r+0x86>
 800dcda:	2a25      	cmp	r2, #37	@ 0x25
 800dcdc:	d1f9      	bne.n	800dcd2 <_vfiprintf_r+0x7a>
 800dcde:	ebba 0b04 	subs.w	fp, sl, r4
 800dce2:	d00b      	beq.n	800dcfc <_vfiprintf_r+0xa4>
 800dce4:	465b      	mov	r3, fp
 800dce6:	4622      	mov	r2, r4
 800dce8:	4629      	mov	r1, r5
 800dcea:	4630      	mov	r0, r6
 800dcec:	f7ff ffa1 	bl	800dc32 <__sfputs_r>
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f000 80a7 	beq.w	800de44 <_vfiprintf_r+0x1ec>
 800dcf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcf8:	445a      	add	r2, fp
 800dcfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcfc:	f89a 3000 	ldrb.w	r3, [sl]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 809f 	beq.w	800de44 <_vfiprintf_r+0x1ec>
 800dd06:	2300      	movs	r3, #0
 800dd08:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd10:	f10a 0a01 	add.w	sl, sl, #1
 800dd14:	9304      	str	r3, [sp, #16]
 800dd16:	9307      	str	r3, [sp, #28]
 800dd18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd1e:	4654      	mov	r4, sl
 800dd20:	2205      	movs	r2, #5
 800dd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd26:	4853      	ldr	r0, [pc, #332]	@ (800de74 <_vfiprintf_r+0x21c>)
 800dd28:	f7f2 fa7a 	bl	8000220 <memchr>
 800dd2c:	9a04      	ldr	r2, [sp, #16]
 800dd2e:	b9d8      	cbnz	r0, 800dd68 <_vfiprintf_r+0x110>
 800dd30:	06d1      	lsls	r1, r2, #27
 800dd32:	bf44      	itt	mi
 800dd34:	2320      	movmi	r3, #32
 800dd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd3a:	0713      	lsls	r3, r2, #28
 800dd3c:	bf44      	itt	mi
 800dd3e:	232b      	movmi	r3, #43	@ 0x2b
 800dd40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd44:	f89a 3000 	ldrb.w	r3, [sl]
 800dd48:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd4a:	d015      	beq.n	800dd78 <_vfiprintf_r+0x120>
 800dd4c:	9a07      	ldr	r2, [sp, #28]
 800dd4e:	4654      	mov	r4, sl
 800dd50:	2000      	movs	r0, #0
 800dd52:	f04f 0c0a 	mov.w	ip, #10
 800dd56:	4621      	mov	r1, r4
 800dd58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd5c:	3b30      	subs	r3, #48	@ 0x30
 800dd5e:	2b09      	cmp	r3, #9
 800dd60:	d94b      	bls.n	800ddfa <_vfiprintf_r+0x1a2>
 800dd62:	b1b0      	cbz	r0, 800dd92 <_vfiprintf_r+0x13a>
 800dd64:	9207      	str	r2, [sp, #28]
 800dd66:	e014      	b.n	800dd92 <_vfiprintf_r+0x13a>
 800dd68:	eba0 0308 	sub.w	r3, r0, r8
 800dd6c:	fa09 f303 	lsl.w	r3, r9, r3
 800dd70:	4313      	orrs	r3, r2
 800dd72:	9304      	str	r3, [sp, #16]
 800dd74:	46a2      	mov	sl, r4
 800dd76:	e7d2      	b.n	800dd1e <_vfiprintf_r+0xc6>
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	1d19      	adds	r1, r3, #4
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	9103      	str	r1, [sp, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	bfbb      	ittet	lt
 800dd84:	425b      	neglt	r3, r3
 800dd86:	f042 0202 	orrlt.w	r2, r2, #2
 800dd8a:	9307      	strge	r3, [sp, #28]
 800dd8c:	9307      	strlt	r3, [sp, #28]
 800dd8e:	bfb8      	it	lt
 800dd90:	9204      	strlt	r2, [sp, #16]
 800dd92:	7823      	ldrb	r3, [r4, #0]
 800dd94:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd96:	d10a      	bne.n	800ddae <_vfiprintf_r+0x156>
 800dd98:	7863      	ldrb	r3, [r4, #1]
 800dd9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd9c:	d132      	bne.n	800de04 <_vfiprintf_r+0x1ac>
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	1d1a      	adds	r2, r3, #4
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	9203      	str	r2, [sp, #12]
 800dda6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddaa:	3402      	adds	r4, #2
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de84 <_vfiprintf_r+0x22c>
 800ddb2:	7821      	ldrb	r1, [r4, #0]
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	4650      	mov	r0, sl
 800ddb8:	f7f2 fa32 	bl	8000220 <memchr>
 800ddbc:	b138      	cbz	r0, 800ddce <_vfiprintf_r+0x176>
 800ddbe:	9b04      	ldr	r3, [sp, #16]
 800ddc0:	eba0 000a 	sub.w	r0, r0, sl
 800ddc4:	2240      	movs	r2, #64	@ 0x40
 800ddc6:	4082      	lsls	r2, r0
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	3401      	adds	r4, #1
 800ddcc:	9304      	str	r3, [sp, #16]
 800ddce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd2:	4829      	ldr	r0, [pc, #164]	@ (800de78 <_vfiprintf_r+0x220>)
 800ddd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddd8:	2206      	movs	r2, #6
 800ddda:	f7f2 fa21 	bl	8000220 <memchr>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d03f      	beq.n	800de62 <_vfiprintf_r+0x20a>
 800dde2:	4b26      	ldr	r3, [pc, #152]	@ (800de7c <_vfiprintf_r+0x224>)
 800dde4:	bb1b      	cbnz	r3, 800de2e <_vfiprintf_r+0x1d6>
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	3307      	adds	r3, #7
 800ddea:	f023 0307 	bic.w	r3, r3, #7
 800ddee:	3308      	adds	r3, #8
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf4:	443b      	add	r3, r7
 800ddf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf8:	e76a      	b.n	800dcd0 <_vfiprintf_r+0x78>
 800ddfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddfe:	460c      	mov	r4, r1
 800de00:	2001      	movs	r0, #1
 800de02:	e7a8      	b.n	800dd56 <_vfiprintf_r+0xfe>
 800de04:	2300      	movs	r3, #0
 800de06:	3401      	adds	r4, #1
 800de08:	9305      	str	r3, [sp, #20]
 800de0a:	4619      	mov	r1, r3
 800de0c:	f04f 0c0a 	mov.w	ip, #10
 800de10:	4620      	mov	r0, r4
 800de12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de16:	3a30      	subs	r2, #48	@ 0x30
 800de18:	2a09      	cmp	r2, #9
 800de1a:	d903      	bls.n	800de24 <_vfiprintf_r+0x1cc>
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d0c6      	beq.n	800ddae <_vfiprintf_r+0x156>
 800de20:	9105      	str	r1, [sp, #20]
 800de22:	e7c4      	b.n	800ddae <_vfiprintf_r+0x156>
 800de24:	fb0c 2101 	mla	r1, ip, r1, r2
 800de28:	4604      	mov	r4, r0
 800de2a:	2301      	movs	r3, #1
 800de2c:	e7f0      	b.n	800de10 <_vfiprintf_r+0x1b8>
 800de2e:	ab03      	add	r3, sp, #12
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	462a      	mov	r2, r5
 800de34:	4b12      	ldr	r3, [pc, #72]	@ (800de80 <_vfiprintf_r+0x228>)
 800de36:	a904      	add	r1, sp, #16
 800de38:	4630      	mov	r0, r6
 800de3a:	f3af 8000 	nop.w
 800de3e:	4607      	mov	r7, r0
 800de40:	1c78      	adds	r0, r7, #1
 800de42:	d1d6      	bne.n	800ddf2 <_vfiprintf_r+0x19a>
 800de44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de46:	07d9      	lsls	r1, r3, #31
 800de48:	d405      	bmi.n	800de56 <_vfiprintf_r+0x1fe>
 800de4a:	89ab      	ldrh	r3, [r5, #12]
 800de4c:	059a      	lsls	r2, r3, #22
 800de4e:	d402      	bmi.n	800de56 <_vfiprintf_r+0x1fe>
 800de50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de52:	f7ff fc77 	bl	800d744 <__retarget_lock_release_recursive>
 800de56:	89ab      	ldrh	r3, [r5, #12]
 800de58:	065b      	lsls	r3, r3, #25
 800de5a:	f53f af1f 	bmi.w	800dc9c <_vfiprintf_r+0x44>
 800de5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de60:	e71e      	b.n	800dca0 <_vfiprintf_r+0x48>
 800de62:	ab03      	add	r3, sp, #12
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	462a      	mov	r2, r5
 800de68:	4b05      	ldr	r3, [pc, #20]	@ (800de80 <_vfiprintf_r+0x228>)
 800de6a:	a904      	add	r1, sp, #16
 800de6c:	4630      	mov	r0, r6
 800de6e:	f000 f879 	bl	800df64 <_printf_i>
 800de72:	e7e4      	b.n	800de3e <_vfiprintf_r+0x1e6>
 800de74:	0800f670 	.word	0x0800f670
 800de78:	0800f67a 	.word	0x0800f67a
 800de7c:	00000000 	.word	0x00000000
 800de80:	0800dc33 	.word	0x0800dc33
 800de84:	0800f676 	.word	0x0800f676

0800de88 <_printf_common>:
 800de88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de8c:	4616      	mov	r6, r2
 800de8e:	4698      	mov	r8, r3
 800de90:	688a      	ldr	r2, [r1, #8]
 800de92:	690b      	ldr	r3, [r1, #16]
 800de94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de98:	4293      	cmp	r3, r2
 800de9a:	bfb8      	it	lt
 800de9c:	4613      	movlt	r3, r2
 800de9e:	6033      	str	r3, [r6, #0]
 800dea0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dea4:	4607      	mov	r7, r0
 800dea6:	460c      	mov	r4, r1
 800dea8:	b10a      	cbz	r2, 800deae <_printf_common+0x26>
 800deaa:	3301      	adds	r3, #1
 800deac:	6033      	str	r3, [r6, #0]
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	0699      	lsls	r1, r3, #26
 800deb2:	bf42      	ittt	mi
 800deb4:	6833      	ldrmi	r3, [r6, #0]
 800deb6:	3302      	addmi	r3, #2
 800deb8:	6033      	strmi	r3, [r6, #0]
 800deba:	6825      	ldr	r5, [r4, #0]
 800debc:	f015 0506 	ands.w	r5, r5, #6
 800dec0:	d106      	bne.n	800ded0 <_printf_common+0x48>
 800dec2:	f104 0a19 	add.w	sl, r4, #25
 800dec6:	68e3      	ldr	r3, [r4, #12]
 800dec8:	6832      	ldr	r2, [r6, #0]
 800deca:	1a9b      	subs	r3, r3, r2
 800decc:	42ab      	cmp	r3, r5
 800dece:	dc26      	bgt.n	800df1e <_printf_common+0x96>
 800ded0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ded4:	6822      	ldr	r2, [r4, #0]
 800ded6:	3b00      	subs	r3, #0
 800ded8:	bf18      	it	ne
 800deda:	2301      	movne	r3, #1
 800dedc:	0692      	lsls	r2, r2, #26
 800dede:	d42b      	bmi.n	800df38 <_printf_common+0xb0>
 800dee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dee4:	4641      	mov	r1, r8
 800dee6:	4638      	mov	r0, r7
 800dee8:	47c8      	blx	r9
 800deea:	3001      	adds	r0, #1
 800deec:	d01e      	beq.n	800df2c <_printf_common+0xa4>
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	6922      	ldr	r2, [r4, #16]
 800def2:	f003 0306 	and.w	r3, r3, #6
 800def6:	2b04      	cmp	r3, #4
 800def8:	bf02      	ittt	eq
 800defa:	68e5      	ldreq	r5, [r4, #12]
 800defc:	6833      	ldreq	r3, [r6, #0]
 800defe:	1aed      	subeq	r5, r5, r3
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	bf0c      	ite	eq
 800df04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df08:	2500      	movne	r5, #0
 800df0a:	4293      	cmp	r3, r2
 800df0c:	bfc4      	itt	gt
 800df0e:	1a9b      	subgt	r3, r3, r2
 800df10:	18ed      	addgt	r5, r5, r3
 800df12:	2600      	movs	r6, #0
 800df14:	341a      	adds	r4, #26
 800df16:	42b5      	cmp	r5, r6
 800df18:	d11a      	bne.n	800df50 <_printf_common+0xc8>
 800df1a:	2000      	movs	r0, #0
 800df1c:	e008      	b.n	800df30 <_printf_common+0xa8>
 800df1e:	2301      	movs	r3, #1
 800df20:	4652      	mov	r2, sl
 800df22:	4641      	mov	r1, r8
 800df24:	4638      	mov	r0, r7
 800df26:	47c8      	blx	r9
 800df28:	3001      	adds	r0, #1
 800df2a:	d103      	bne.n	800df34 <_printf_common+0xac>
 800df2c:	f04f 30ff 	mov.w	r0, #4294967295
 800df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df34:	3501      	adds	r5, #1
 800df36:	e7c6      	b.n	800dec6 <_printf_common+0x3e>
 800df38:	18e1      	adds	r1, r4, r3
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	2030      	movs	r0, #48	@ 0x30
 800df3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df42:	4422      	add	r2, r4
 800df44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df4c:	3302      	adds	r3, #2
 800df4e:	e7c7      	b.n	800dee0 <_printf_common+0x58>
 800df50:	2301      	movs	r3, #1
 800df52:	4622      	mov	r2, r4
 800df54:	4641      	mov	r1, r8
 800df56:	4638      	mov	r0, r7
 800df58:	47c8      	blx	r9
 800df5a:	3001      	adds	r0, #1
 800df5c:	d0e6      	beq.n	800df2c <_printf_common+0xa4>
 800df5e:	3601      	adds	r6, #1
 800df60:	e7d9      	b.n	800df16 <_printf_common+0x8e>
	...

0800df64 <_printf_i>:
 800df64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df68:	7e0f      	ldrb	r7, [r1, #24]
 800df6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df6c:	2f78      	cmp	r7, #120	@ 0x78
 800df6e:	4691      	mov	r9, r2
 800df70:	4680      	mov	r8, r0
 800df72:	460c      	mov	r4, r1
 800df74:	469a      	mov	sl, r3
 800df76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df7a:	d807      	bhi.n	800df8c <_printf_i+0x28>
 800df7c:	2f62      	cmp	r7, #98	@ 0x62
 800df7e:	d80a      	bhi.n	800df96 <_printf_i+0x32>
 800df80:	2f00      	cmp	r7, #0
 800df82:	f000 80d2 	beq.w	800e12a <_printf_i+0x1c6>
 800df86:	2f58      	cmp	r7, #88	@ 0x58
 800df88:	f000 80b9 	beq.w	800e0fe <_printf_i+0x19a>
 800df8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df94:	e03a      	b.n	800e00c <_printf_i+0xa8>
 800df96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df9a:	2b15      	cmp	r3, #21
 800df9c:	d8f6      	bhi.n	800df8c <_printf_i+0x28>
 800df9e:	a101      	add	r1, pc, #4	@ (adr r1, 800dfa4 <_printf_i+0x40>)
 800dfa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfa4:	0800dffd 	.word	0x0800dffd
 800dfa8:	0800e011 	.word	0x0800e011
 800dfac:	0800df8d 	.word	0x0800df8d
 800dfb0:	0800df8d 	.word	0x0800df8d
 800dfb4:	0800df8d 	.word	0x0800df8d
 800dfb8:	0800df8d 	.word	0x0800df8d
 800dfbc:	0800e011 	.word	0x0800e011
 800dfc0:	0800df8d 	.word	0x0800df8d
 800dfc4:	0800df8d 	.word	0x0800df8d
 800dfc8:	0800df8d 	.word	0x0800df8d
 800dfcc:	0800df8d 	.word	0x0800df8d
 800dfd0:	0800e111 	.word	0x0800e111
 800dfd4:	0800e03b 	.word	0x0800e03b
 800dfd8:	0800e0cb 	.word	0x0800e0cb
 800dfdc:	0800df8d 	.word	0x0800df8d
 800dfe0:	0800df8d 	.word	0x0800df8d
 800dfe4:	0800e133 	.word	0x0800e133
 800dfe8:	0800df8d 	.word	0x0800df8d
 800dfec:	0800e03b 	.word	0x0800e03b
 800dff0:	0800df8d 	.word	0x0800df8d
 800dff4:	0800df8d 	.word	0x0800df8d
 800dff8:	0800e0d3 	.word	0x0800e0d3
 800dffc:	6833      	ldr	r3, [r6, #0]
 800dffe:	1d1a      	adds	r2, r3, #4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6032      	str	r2, [r6, #0]
 800e004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e00c:	2301      	movs	r3, #1
 800e00e:	e09d      	b.n	800e14c <_printf_i+0x1e8>
 800e010:	6833      	ldr	r3, [r6, #0]
 800e012:	6820      	ldr	r0, [r4, #0]
 800e014:	1d19      	adds	r1, r3, #4
 800e016:	6031      	str	r1, [r6, #0]
 800e018:	0606      	lsls	r6, r0, #24
 800e01a:	d501      	bpl.n	800e020 <_printf_i+0xbc>
 800e01c:	681d      	ldr	r5, [r3, #0]
 800e01e:	e003      	b.n	800e028 <_printf_i+0xc4>
 800e020:	0645      	lsls	r5, r0, #25
 800e022:	d5fb      	bpl.n	800e01c <_printf_i+0xb8>
 800e024:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e028:	2d00      	cmp	r5, #0
 800e02a:	da03      	bge.n	800e034 <_printf_i+0xd0>
 800e02c:	232d      	movs	r3, #45	@ 0x2d
 800e02e:	426d      	negs	r5, r5
 800e030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e034:	4859      	ldr	r0, [pc, #356]	@ (800e19c <_printf_i+0x238>)
 800e036:	230a      	movs	r3, #10
 800e038:	e011      	b.n	800e05e <_printf_i+0xfa>
 800e03a:	6821      	ldr	r1, [r4, #0]
 800e03c:	6833      	ldr	r3, [r6, #0]
 800e03e:	0608      	lsls	r0, r1, #24
 800e040:	f853 5b04 	ldr.w	r5, [r3], #4
 800e044:	d402      	bmi.n	800e04c <_printf_i+0xe8>
 800e046:	0649      	lsls	r1, r1, #25
 800e048:	bf48      	it	mi
 800e04a:	b2ad      	uxthmi	r5, r5
 800e04c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e04e:	4853      	ldr	r0, [pc, #332]	@ (800e19c <_printf_i+0x238>)
 800e050:	6033      	str	r3, [r6, #0]
 800e052:	bf14      	ite	ne
 800e054:	230a      	movne	r3, #10
 800e056:	2308      	moveq	r3, #8
 800e058:	2100      	movs	r1, #0
 800e05a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e05e:	6866      	ldr	r6, [r4, #4]
 800e060:	60a6      	str	r6, [r4, #8]
 800e062:	2e00      	cmp	r6, #0
 800e064:	bfa2      	ittt	ge
 800e066:	6821      	ldrge	r1, [r4, #0]
 800e068:	f021 0104 	bicge.w	r1, r1, #4
 800e06c:	6021      	strge	r1, [r4, #0]
 800e06e:	b90d      	cbnz	r5, 800e074 <_printf_i+0x110>
 800e070:	2e00      	cmp	r6, #0
 800e072:	d04b      	beq.n	800e10c <_printf_i+0x1a8>
 800e074:	4616      	mov	r6, r2
 800e076:	fbb5 f1f3 	udiv	r1, r5, r3
 800e07a:	fb03 5711 	mls	r7, r3, r1, r5
 800e07e:	5dc7      	ldrb	r7, [r0, r7]
 800e080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e084:	462f      	mov	r7, r5
 800e086:	42bb      	cmp	r3, r7
 800e088:	460d      	mov	r5, r1
 800e08a:	d9f4      	bls.n	800e076 <_printf_i+0x112>
 800e08c:	2b08      	cmp	r3, #8
 800e08e:	d10b      	bne.n	800e0a8 <_printf_i+0x144>
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	07df      	lsls	r7, r3, #31
 800e094:	d508      	bpl.n	800e0a8 <_printf_i+0x144>
 800e096:	6923      	ldr	r3, [r4, #16]
 800e098:	6861      	ldr	r1, [r4, #4]
 800e09a:	4299      	cmp	r1, r3
 800e09c:	bfde      	ittt	le
 800e09e:	2330      	movle	r3, #48	@ 0x30
 800e0a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0a8:	1b92      	subs	r2, r2, r6
 800e0aa:	6122      	str	r2, [r4, #16]
 800e0ac:	f8cd a000 	str.w	sl, [sp]
 800e0b0:	464b      	mov	r3, r9
 800e0b2:	aa03      	add	r2, sp, #12
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4640      	mov	r0, r8
 800e0b8:	f7ff fee6 	bl	800de88 <_printf_common>
 800e0bc:	3001      	adds	r0, #1
 800e0be:	d14a      	bne.n	800e156 <_printf_i+0x1f2>
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	b004      	add	sp, #16
 800e0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	f043 0320 	orr.w	r3, r3, #32
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	4833      	ldr	r0, [pc, #204]	@ (800e1a0 <_printf_i+0x23c>)
 800e0d4:	2778      	movs	r7, #120	@ 0x78
 800e0d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	6831      	ldr	r1, [r6, #0]
 800e0de:	061f      	lsls	r7, r3, #24
 800e0e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0e4:	d402      	bmi.n	800e0ec <_printf_i+0x188>
 800e0e6:	065f      	lsls	r7, r3, #25
 800e0e8:	bf48      	it	mi
 800e0ea:	b2ad      	uxthmi	r5, r5
 800e0ec:	6031      	str	r1, [r6, #0]
 800e0ee:	07d9      	lsls	r1, r3, #31
 800e0f0:	bf44      	itt	mi
 800e0f2:	f043 0320 	orrmi.w	r3, r3, #32
 800e0f6:	6023      	strmi	r3, [r4, #0]
 800e0f8:	b11d      	cbz	r5, 800e102 <_printf_i+0x19e>
 800e0fa:	2310      	movs	r3, #16
 800e0fc:	e7ac      	b.n	800e058 <_printf_i+0xf4>
 800e0fe:	4827      	ldr	r0, [pc, #156]	@ (800e19c <_printf_i+0x238>)
 800e100:	e7e9      	b.n	800e0d6 <_printf_i+0x172>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	f023 0320 	bic.w	r3, r3, #32
 800e108:	6023      	str	r3, [r4, #0]
 800e10a:	e7f6      	b.n	800e0fa <_printf_i+0x196>
 800e10c:	4616      	mov	r6, r2
 800e10e:	e7bd      	b.n	800e08c <_printf_i+0x128>
 800e110:	6833      	ldr	r3, [r6, #0]
 800e112:	6825      	ldr	r5, [r4, #0]
 800e114:	6961      	ldr	r1, [r4, #20]
 800e116:	1d18      	adds	r0, r3, #4
 800e118:	6030      	str	r0, [r6, #0]
 800e11a:	062e      	lsls	r6, r5, #24
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	d501      	bpl.n	800e124 <_printf_i+0x1c0>
 800e120:	6019      	str	r1, [r3, #0]
 800e122:	e002      	b.n	800e12a <_printf_i+0x1c6>
 800e124:	0668      	lsls	r0, r5, #25
 800e126:	d5fb      	bpl.n	800e120 <_printf_i+0x1bc>
 800e128:	8019      	strh	r1, [r3, #0]
 800e12a:	2300      	movs	r3, #0
 800e12c:	6123      	str	r3, [r4, #16]
 800e12e:	4616      	mov	r6, r2
 800e130:	e7bc      	b.n	800e0ac <_printf_i+0x148>
 800e132:	6833      	ldr	r3, [r6, #0]
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	6032      	str	r2, [r6, #0]
 800e138:	681e      	ldr	r6, [r3, #0]
 800e13a:	6862      	ldr	r2, [r4, #4]
 800e13c:	2100      	movs	r1, #0
 800e13e:	4630      	mov	r0, r6
 800e140:	f7f2 f86e 	bl	8000220 <memchr>
 800e144:	b108      	cbz	r0, 800e14a <_printf_i+0x1e6>
 800e146:	1b80      	subs	r0, r0, r6
 800e148:	6060      	str	r0, [r4, #4]
 800e14a:	6863      	ldr	r3, [r4, #4]
 800e14c:	6123      	str	r3, [r4, #16]
 800e14e:	2300      	movs	r3, #0
 800e150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e154:	e7aa      	b.n	800e0ac <_printf_i+0x148>
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	4632      	mov	r2, r6
 800e15a:	4649      	mov	r1, r9
 800e15c:	4640      	mov	r0, r8
 800e15e:	47d0      	blx	sl
 800e160:	3001      	adds	r0, #1
 800e162:	d0ad      	beq.n	800e0c0 <_printf_i+0x15c>
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	079b      	lsls	r3, r3, #30
 800e168:	d413      	bmi.n	800e192 <_printf_i+0x22e>
 800e16a:	68e0      	ldr	r0, [r4, #12]
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	4298      	cmp	r0, r3
 800e170:	bfb8      	it	lt
 800e172:	4618      	movlt	r0, r3
 800e174:	e7a6      	b.n	800e0c4 <_printf_i+0x160>
 800e176:	2301      	movs	r3, #1
 800e178:	4632      	mov	r2, r6
 800e17a:	4649      	mov	r1, r9
 800e17c:	4640      	mov	r0, r8
 800e17e:	47d0      	blx	sl
 800e180:	3001      	adds	r0, #1
 800e182:	d09d      	beq.n	800e0c0 <_printf_i+0x15c>
 800e184:	3501      	adds	r5, #1
 800e186:	68e3      	ldr	r3, [r4, #12]
 800e188:	9903      	ldr	r1, [sp, #12]
 800e18a:	1a5b      	subs	r3, r3, r1
 800e18c:	42ab      	cmp	r3, r5
 800e18e:	dcf2      	bgt.n	800e176 <_printf_i+0x212>
 800e190:	e7eb      	b.n	800e16a <_printf_i+0x206>
 800e192:	2500      	movs	r5, #0
 800e194:	f104 0619 	add.w	r6, r4, #25
 800e198:	e7f5      	b.n	800e186 <_printf_i+0x222>
 800e19a:	bf00      	nop
 800e19c:	0800f681 	.word	0x0800f681
 800e1a0:	0800f692 	.word	0x0800f692

0800e1a4 <__sflush_r>:
 800e1a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ac:	0716      	lsls	r6, r2, #28
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	d454      	bmi.n	800e25e <__sflush_r+0xba>
 800e1b4:	684b      	ldr	r3, [r1, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	dc02      	bgt.n	800e1c0 <__sflush_r+0x1c>
 800e1ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd48      	ble.n	800e252 <__sflush_r+0xae>
 800e1c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1c2:	2e00      	cmp	r6, #0
 800e1c4:	d045      	beq.n	800e252 <__sflush_r+0xae>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e1cc:	682f      	ldr	r7, [r5, #0]
 800e1ce:	6a21      	ldr	r1, [r4, #32]
 800e1d0:	602b      	str	r3, [r5, #0]
 800e1d2:	d030      	beq.n	800e236 <__sflush_r+0x92>
 800e1d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	0759      	lsls	r1, r3, #29
 800e1da:	d505      	bpl.n	800e1e8 <__sflush_r+0x44>
 800e1dc:	6863      	ldr	r3, [r4, #4]
 800e1de:	1ad2      	subs	r2, r2, r3
 800e1e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e1e2:	b10b      	cbz	r3, 800e1e8 <__sflush_r+0x44>
 800e1e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1ec:	6a21      	ldr	r1, [r4, #32]
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	47b0      	blx	r6
 800e1f2:	1c43      	adds	r3, r0, #1
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	d106      	bne.n	800e206 <__sflush_r+0x62>
 800e1f8:	6829      	ldr	r1, [r5, #0]
 800e1fa:	291d      	cmp	r1, #29
 800e1fc:	d82b      	bhi.n	800e256 <__sflush_r+0xb2>
 800e1fe:	4a2a      	ldr	r2, [pc, #168]	@ (800e2a8 <__sflush_r+0x104>)
 800e200:	410a      	asrs	r2, r1
 800e202:	07d6      	lsls	r6, r2, #31
 800e204:	d427      	bmi.n	800e256 <__sflush_r+0xb2>
 800e206:	2200      	movs	r2, #0
 800e208:	6062      	str	r2, [r4, #4]
 800e20a:	04d9      	lsls	r1, r3, #19
 800e20c:	6922      	ldr	r2, [r4, #16]
 800e20e:	6022      	str	r2, [r4, #0]
 800e210:	d504      	bpl.n	800e21c <__sflush_r+0x78>
 800e212:	1c42      	adds	r2, r0, #1
 800e214:	d101      	bne.n	800e21a <__sflush_r+0x76>
 800e216:	682b      	ldr	r3, [r5, #0]
 800e218:	b903      	cbnz	r3, 800e21c <__sflush_r+0x78>
 800e21a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e21c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e21e:	602f      	str	r7, [r5, #0]
 800e220:	b1b9      	cbz	r1, 800e252 <__sflush_r+0xae>
 800e222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e226:	4299      	cmp	r1, r3
 800e228:	d002      	beq.n	800e230 <__sflush_r+0x8c>
 800e22a:	4628      	mov	r0, r5
 800e22c:	f7ff fa9a 	bl	800d764 <_free_r>
 800e230:	2300      	movs	r3, #0
 800e232:	6363      	str	r3, [r4, #52]	@ 0x34
 800e234:	e00d      	b.n	800e252 <__sflush_r+0xae>
 800e236:	2301      	movs	r3, #1
 800e238:	4628      	mov	r0, r5
 800e23a:	47b0      	blx	r6
 800e23c:	4602      	mov	r2, r0
 800e23e:	1c50      	adds	r0, r2, #1
 800e240:	d1c9      	bne.n	800e1d6 <__sflush_r+0x32>
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d0c6      	beq.n	800e1d6 <__sflush_r+0x32>
 800e248:	2b1d      	cmp	r3, #29
 800e24a:	d001      	beq.n	800e250 <__sflush_r+0xac>
 800e24c:	2b16      	cmp	r3, #22
 800e24e:	d11e      	bne.n	800e28e <__sflush_r+0xea>
 800e250:	602f      	str	r7, [r5, #0]
 800e252:	2000      	movs	r0, #0
 800e254:	e022      	b.n	800e29c <__sflush_r+0xf8>
 800e256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e25a:	b21b      	sxth	r3, r3
 800e25c:	e01b      	b.n	800e296 <__sflush_r+0xf2>
 800e25e:	690f      	ldr	r7, [r1, #16]
 800e260:	2f00      	cmp	r7, #0
 800e262:	d0f6      	beq.n	800e252 <__sflush_r+0xae>
 800e264:	0793      	lsls	r3, r2, #30
 800e266:	680e      	ldr	r6, [r1, #0]
 800e268:	bf08      	it	eq
 800e26a:	694b      	ldreq	r3, [r1, #20]
 800e26c:	600f      	str	r7, [r1, #0]
 800e26e:	bf18      	it	ne
 800e270:	2300      	movne	r3, #0
 800e272:	eba6 0807 	sub.w	r8, r6, r7
 800e276:	608b      	str	r3, [r1, #8]
 800e278:	f1b8 0f00 	cmp.w	r8, #0
 800e27c:	dde9      	ble.n	800e252 <__sflush_r+0xae>
 800e27e:	6a21      	ldr	r1, [r4, #32]
 800e280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e282:	4643      	mov	r3, r8
 800e284:	463a      	mov	r2, r7
 800e286:	4628      	mov	r0, r5
 800e288:	47b0      	blx	r6
 800e28a:	2800      	cmp	r0, #0
 800e28c:	dc08      	bgt.n	800e2a0 <__sflush_r+0xfc>
 800e28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e296:	81a3      	strh	r3, [r4, #12]
 800e298:	f04f 30ff 	mov.w	r0, #4294967295
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	4407      	add	r7, r0
 800e2a2:	eba8 0800 	sub.w	r8, r8, r0
 800e2a6:	e7e7      	b.n	800e278 <__sflush_r+0xd4>
 800e2a8:	dfbffffe 	.word	0xdfbffffe

0800e2ac <_fflush_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	690b      	ldr	r3, [r1, #16]
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	b913      	cbnz	r3, 800e2bc <_fflush_r+0x10>
 800e2b6:	2500      	movs	r5, #0
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	bd38      	pop	{r3, r4, r5, pc}
 800e2bc:	b118      	cbz	r0, 800e2c6 <_fflush_r+0x1a>
 800e2be:	6a03      	ldr	r3, [r0, #32]
 800e2c0:	b90b      	cbnz	r3, 800e2c6 <_fflush_r+0x1a>
 800e2c2:	f7fe ffb9 	bl	800d238 <__sinit>
 800e2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d0f3      	beq.n	800e2b6 <_fflush_r+0xa>
 800e2ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e2d0:	07d0      	lsls	r0, r2, #31
 800e2d2:	d404      	bmi.n	800e2de <_fflush_r+0x32>
 800e2d4:	0599      	lsls	r1, r3, #22
 800e2d6:	d402      	bmi.n	800e2de <_fflush_r+0x32>
 800e2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2da:	f7ff fa32 	bl	800d742 <__retarget_lock_acquire_recursive>
 800e2de:	4628      	mov	r0, r5
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	f7ff ff5f 	bl	800e1a4 <__sflush_r>
 800e2e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e2e8:	07da      	lsls	r2, r3, #31
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	d4e4      	bmi.n	800e2b8 <_fflush_r+0xc>
 800e2ee:	89a3      	ldrh	r3, [r4, #12]
 800e2f0:	059b      	lsls	r3, r3, #22
 800e2f2:	d4e1      	bmi.n	800e2b8 <_fflush_r+0xc>
 800e2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2f6:	f7ff fa25 	bl	800d744 <__retarget_lock_release_recursive>
 800e2fa:	e7dd      	b.n	800e2b8 <_fflush_r+0xc>

0800e2fc <__swhatbuf_r>:
 800e2fc:	b570      	push	{r4, r5, r6, lr}
 800e2fe:	460c      	mov	r4, r1
 800e300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e304:	2900      	cmp	r1, #0
 800e306:	b096      	sub	sp, #88	@ 0x58
 800e308:	4615      	mov	r5, r2
 800e30a:	461e      	mov	r6, r3
 800e30c:	da0d      	bge.n	800e32a <__swhatbuf_r+0x2e>
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e314:	f04f 0100 	mov.w	r1, #0
 800e318:	bf14      	ite	ne
 800e31a:	2340      	movne	r3, #64	@ 0x40
 800e31c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e320:	2000      	movs	r0, #0
 800e322:	6031      	str	r1, [r6, #0]
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	b016      	add	sp, #88	@ 0x58
 800e328:	bd70      	pop	{r4, r5, r6, pc}
 800e32a:	466a      	mov	r2, sp
 800e32c:	f000 f87c 	bl	800e428 <_fstat_r>
 800e330:	2800      	cmp	r0, #0
 800e332:	dbec      	blt.n	800e30e <__swhatbuf_r+0x12>
 800e334:	9901      	ldr	r1, [sp, #4]
 800e336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e33a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e33e:	4259      	negs	r1, r3
 800e340:	4159      	adcs	r1, r3
 800e342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e346:	e7eb      	b.n	800e320 <__swhatbuf_r+0x24>

0800e348 <__smakebuf_r>:
 800e348:	898b      	ldrh	r3, [r1, #12]
 800e34a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e34c:	079d      	lsls	r5, r3, #30
 800e34e:	4606      	mov	r6, r0
 800e350:	460c      	mov	r4, r1
 800e352:	d507      	bpl.n	800e364 <__smakebuf_r+0x1c>
 800e354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	2301      	movs	r3, #1
 800e35e:	6163      	str	r3, [r4, #20]
 800e360:	b003      	add	sp, #12
 800e362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e364:	ab01      	add	r3, sp, #4
 800e366:	466a      	mov	r2, sp
 800e368:	f7ff ffc8 	bl	800e2fc <__swhatbuf_r>
 800e36c:	9f00      	ldr	r7, [sp, #0]
 800e36e:	4605      	mov	r5, r0
 800e370:	4639      	mov	r1, r7
 800e372:	4630      	mov	r0, r6
 800e374:	f7ff fa62 	bl	800d83c <_malloc_r>
 800e378:	b948      	cbnz	r0, 800e38e <__smakebuf_r+0x46>
 800e37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e37e:	059a      	lsls	r2, r3, #22
 800e380:	d4ee      	bmi.n	800e360 <__smakebuf_r+0x18>
 800e382:	f023 0303 	bic.w	r3, r3, #3
 800e386:	f043 0302 	orr.w	r3, r3, #2
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	e7e2      	b.n	800e354 <__smakebuf_r+0xc>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	6020      	str	r0, [r4, #0]
 800e392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e396:	81a3      	strh	r3, [r4, #12]
 800e398:	9b01      	ldr	r3, [sp, #4]
 800e39a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e39e:	b15b      	cbz	r3, 800e3b8 <__smakebuf_r+0x70>
 800e3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f000 f851 	bl	800e44c <_isatty_r>
 800e3aa:	b128      	cbz	r0, 800e3b8 <__smakebuf_r+0x70>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	f023 0303 	bic.w	r3, r3, #3
 800e3b2:	f043 0301 	orr.w	r3, r3, #1
 800e3b6:	81a3      	strh	r3, [r4, #12]
 800e3b8:	89a3      	ldrh	r3, [r4, #12]
 800e3ba:	431d      	orrs	r5, r3
 800e3bc:	81a5      	strh	r5, [r4, #12]
 800e3be:	e7cf      	b.n	800e360 <__smakebuf_r+0x18>

0800e3c0 <_putc_r>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	460d      	mov	r5, r1
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	b118      	cbz	r0, 800e3d2 <_putc_r+0x12>
 800e3ca:	6a03      	ldr	r3, [r0, #32]
 800e3cc:	b90b      	cbnz	r3, 800e3d2 <_putc_r+0x12>
 800e3ce:	f7fe ff33 	bl	800d238 <__sinit>
 800e3d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3d4:	07d8      	lsls	r0, r3, #31
 800e3d6:	d405      	bmi.n	800e3e4 <_putc_r+0x24>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	0599      	lsls	r1, r3, #22
 800e3dc:	d402      	bmi.n	800e3e4 <_putc_r+0x24>
 800e3de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3e0:	f7ff f9af 	bl	800d742 <__retarget_lock_acquire_recursive>
 800e3e4:	68a3      	ldr	r3, [r4, #8]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	60a3      	str	r3, [r4, #8]
 800e3ec:	da05      	bge.n	800e3fa <_putc_r+0x3a>
 800e3ee:	69a2      	ldr	r2, [r4, #24]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	db12      	blt.n	800e41a <_putc_r+0x5a>
 800e3f4:	b2eb      	uxtb	r3, r5
 800e3f6:	2b0a      	cmp	r3, #10
 800e3f8:	d00f      	beq.n	800e41a <_putc_r+0x5a>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	1c5a      	adds	r2, r3, #1
 800e3fe:	6022      	str	r2, [r4, #0]
 800e400:	701d      	strb	r5, [r3, #0]
 800e402:	b2ed      	uxtb	r5, r5
 800e404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e406:	07da      	lsls	r2, r3, #31
 800e408:	d405      	bmi.n	800e416 <_putc_r+0x56>
 800e40a:	89a3      	ldrh	r3, [r4, #12]
 800e40c:	059b      	lsls	r3, r3, #22
 800e40e:	d402      	bmi.n	800e416 <_putc_r+0x56>
 800e410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e412:	f7ff f997 	bl	800d744 <__retarget_lock_release_recursive>
 800e416:	4628      	mov	r0, r5
 800e418:	bd70      	pop	{r4, r5, r6, pc}
 800e41a:	4629      	mov	r1, r5
 800e41c:	4622      	mov	r2, r4
 800e41e:	4630      	mov	r0, r6
 800e420:	f7ff f868 	bl	800d4f4 <__swbuf_r>
 800e424:	4605      	mov	r5, r0
 800e426:	e7ed      	b.n	800e404 <_putc_r+0x44>

0800e428 <_fstat_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	@ (800e448 <_fstat_r+0x20>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	4611      	mov	r1, r2
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f7f5 ff36 	bl	80042a6 <_fstat>
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	d102      	bne.n	800e444 <_fstat_r+0x1c>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b103      	cbz	r3, 800e444 <_fstat_r+0x1c>
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop
 800e448:	20002214 	.word	0x20002214

0800e44c <_isatty_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4d06      	ldr	r5, [pc, #24]	@ (800e468 <_isatty_r+0x1c>)
 800e450:	2300      	movs	r3, #0
 800e452:	4604      	mov	r4, r0
 800e454:	4608      	mov	r0, r1
 800e456:	602b      	str	r3, [r5, #0]
 800e458:	f7f5 ff2a 	bl	80042b0 <_isatty>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_isatty_r+0x1a>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_isatty_r+0x1a>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	20002214 	.word	0x20002214

0800e46c <_sbrk_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d06      	ldr	r5, [pc, #24]	@ (800e488 <_sbrk_r+0x1c>)
 800e470:	2300      	movs	r3, #0
 800e472:	4604      	mov	r4, r0
 800e474:	4608      	mov	r0, r1
 800e476:	602b      	str	r3, [r5, #0]
 800e478:	f7f5 ff1e 	bl	80042b8 <_sbrk>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d102      	bne.n	800e486 <_sbrk_r+0x1a>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	b103      	cbz	r3, 800e486 <_sbrk_r+0x1a>
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	20002214 	.word	0x20002214

0800e48c <_realloc_r>:
 800e48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e490:	4680      	mov	r8, r0
 800e492:	4615      	mov	r5, r2
 800e494:	460c      	mov	r4, r1
 800e496:	b921      	cbnz	r1, 800e4a2 <_realloc_r+0x16>
 800e498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	4611      	mov	r1, r2
 800e49e:	f7ff b9cd 	b.w	800d83c <_malloc_r>
 800e4a2:	b92a      	cbnz	r2, 800e4b0 <_realloc_r+0x24>
 800e4a4:	f7ff f95e 	bl	800d764 <_free_r>
 800e4a8:	2400      	movs	r4, #0
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b0:	f000 f81a 	bl	800e4e8 <_malloc_usable_size_r>
 800e4b4:	4285      	cmp	r5, r0
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	d802      	bhi.n	800e4c0 <_realloc_r+0x34>
 800e4ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e4be:	d8f4      	bhi.n	800e4aa <_realloc_r+0x1e>
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	f7ff f9ba 	bl	800d83c <_malloc_r>
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d0ec      	beq.n	800e4a8 <_realloc_r+0x1c>
 800e4ce:	42b5      	cmp	r5, r6
 800e4d0:	462a      	mov	r2, r5
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	bf28      	it	cs
 800e4d6:	4632      	movcs	r2, r6
 800e4d8:	f7ff f935 	bl	800d746 <memcpy>
 800e4dc:	4621      	mov	r1, r4
 800e4de:	4640      	mov	r0, r8
 800e4e0:	f7ff f940 	bl	800d764 <_free_r>
 800e4e4:	463c      	mov	r4, r7
 800e4e6:	e7e0      	b.n	800e4aa <_realloc_r+0x1e>

0800e4e8 <_malloc_usable_size_r>:
 800e4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ec:	1f18      	subs	r0, r3, #4
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	bfbc      	itt	lt
 800e4f2:	580b      	ldrlt	r3, [r1, r0]
 800e4f4:	18c0      	addlt	r0, r0, r3
 800e4f6:	4770      	bx	lr

0800e4f8 <abort>:
 800e4f8:	b508      	push	{r3, lr}
 800e4fa:	2006      	movs	r0, #6
 800e4fc:	f000 f82c 	bl	800e558 <raise>
 800e500:	2001      	movs	r0, #1
 800e502:	f7f5 fead 	bl	8004260 <_exit>

0800e506 <_raise_r>:
 800e506:	291f      	cmp	r1, #31
 800e508:	b538      	push	{r3, r4, r5, lr}
 800e50a:	4605      	mov	r5, r0
 800e50c:	460c      	mov	r4, r1
 800e50e:	d904      	bls.n	800e51a <_raise_r+0x14>
 800e510:	2316      	movs	r3, #22
 800e512:	6003      	str	r3, [r0, #0]
 800e514:	f04f 30ff 	mov.w	r0, #4294967295
 800e518:	bd38      	pop	{r3, r4, r5, pc}
 800e51a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e51c:	b112      	cbz	r2, 800e524 <_raise_r+0x1e>
 800e51e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e522:	b94b      	cbnz	r3, 800e538 <_raise_r+0x32>
 800e524:	4628      	mov	r0, r5
 800e526:	f000 f831 	bl	800e58c <_getpid_r>
 800e52a:	4622      	mov	r2, r4
 800e52c:	4601      	mov	r1, r0
 800e52e:	4628      	mov	r0, r5
 800e530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e534:	f000 b818 	b.w	800e568 <_kill_r>
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d00a      	beq.n	800e552 <_raise_r+0x4c>
 800e53c:	1c59      	adds	r1, r3, #1
 800e53e:	d103      	bne.n	800e548 <_raise_r+0x42>
 800e540:	2316      	movs	r3, #22
 800e542:	6003      	str	r3, [r0, #0]
 800e544:	2001      	movs	r0, #1
 800e546:	e7e7      	b.n	800e518 <_raise_r+0x12>
 800e548:	2100      	movs	r1, #0
 800e54a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e54e:	4620      	mov	r0, r4
 800e550:	4798      	blx	r3
 800e552:	2000      	movs	r0, #0
 800e554:	e7e0      	b.n	800e518 <_raise_r+0x12>
	...

0800e558 <raise>:
 800e558:	4b02      	ldr	r3, [pc, #8]	@ (800e564 <raise+0xc>)
 800e55a:	4601      	mov	r1, r0
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	f7ff bfd2 	b.w	800e506 <_raise_r>
 800e562:	bf00      	nop
 800e564:	20000114 	.word	0x20000114

0800e568 <_kill_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	@ (800e588 <_kill_r+0x20>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	4611      	mov	r1, r2
 800e574:	602b      	str	r3, [r5, #0]
 800e576:	f7f5 fe6b 	bl	8004250 <_kill>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d102      	bne.n	800e584 <_kill_r+0x1c>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	b103      	cbz	r3, 800e584 <_kill_r+0x1c>
 800e582:	6023      	str	r3, [r4, #0]
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	bf00      	nop
 800e588:	20002214 	.word	0x20002214

0800e58c <_getpid_r>:
 800e58c:	f7f5 be5e 	b.w	800424c <_getpid>

0800e590 <_init>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	bf00      	nop
 800e594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e596:	bc08      	pop	{r3}
 800e598:	469e      	mov	lr, r3
 800e59a:	4770      	bx	lr

0800e59c <_fini>:
 800e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59e:	bf00      	nop
 800e5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5a2:	bc08      	pop	{r3}
 800e5a4:	469e      	mov	lr, r3
 800e5a6:	4770      	bx	lr
