
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010864  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ac  08010a14  08010a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08011ac0  08011ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  08011ad8  08011ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b98  08011b98  00013164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b98  08011b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b9c  08011b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08011ba0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013164  2**0
                  CONTENTS
 10 .bss          00001754  20000168  20000168  00013168  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  200018bc  200018bc  00013168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013164  2**0
                  CONTENTS, READONLY
 13 .debug_info   000441aa  00000000  00000000  00013194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009078  00000000  00000000  0005733e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0002a469  00000000  00000000  000603b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fd0  00000000  00000000  0008a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000430f  00000000  00000000  0008c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000308ad  00000000  00000000  00090aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b4ba  00000000  00000000  000c13ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8e15  00000000  00000000  0010c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020567b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006bb8  00000000  00000000  002056c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  0020c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080109fc 	.word	0x080109fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	080109fc 	.word	0x080109fc

080001f0 <setjmp>:
 80001f0:	46ec      	mov	ip, sp
 80001f2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001fa:	f04f 0000 	mov.w	r0, #0
 80001fe:	4770      	bx	lr

08000200 <longjmp>:
 8000200:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000204:	46e5      	mov	sp, ip
 8000206:	ec90 8b10 	vldmia	r0, {d8-d15}
 800020a:	0008      	movs	r0, r1
 800020c:	bf08      	it	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f001 b8f6 	b.w	80014d4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <selfrel_offset31>:
 80005bc:	6803      	ldr	r3, [r0, #0]
 80005be:	005a      	lsls	r2, r3, #1
 80005c0:	bf4c      	ite	mi
 80005c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80005c6:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80005ca:	4418      	add	r0, r3
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <search_EIT_table>:
 80005d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005d4:	b349      	cbz	r1, 800062a <search_EIT_table+0x5a>
 80005d6:	1e4f      	subs	r7, r1, #1
 80005d8:	4604      	mov	r4, r0
 80005da:	4615      	mov	r5, r2
 80005dc:	463e      	mov	r6, r7
 80005de:	f04f 0900 	mov.w	r9, #0
 80005e2:	eb09 0106 	add.w	r1, r9, r6
 80005e6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005ea:	1049      	asrs	r1, r1, #1
 80005ec:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 80005f0:	4640      	mov	r0, r8
 80005f2:	f7ff ffe3 	bl	80005bc <selfrel_offset31>
 80005f6:	428f      	cmp	r7, r1
 80005f8:	4603      	mov	r3, r0
 80005fa:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 80005fe:	d00f      	beq.n	8000620 <search_EIT_table+0x50>
 8000600:	3008      	adds	r0, #8
 8000602:	42ab      	cmp	r3, r5
 8000604:	4420      	add	r0, r4
 8000606:	d807      	bhi.n	8000618 <search_EIT_table+0x48>
 8000608:	f7ff ffd8 	bl	80005bc <selfrel_offset31>
 800060c:	3801      	subs	r0, #1
 800060e:	42a8      	cmp	r0, r5
 8000610:	d208      	bcs.n	8000624 <search_EIT_table+0x54>
 8000612:	f101 0901 	add.w	r9, r1, #1
 8000616:	e7e4      	b.n	80005e2 <search_EIT_table+0x12>
 8000618:	4589      	cmp	r9, r1
 800061a:	d006      	beq.n	800062a <search_EIT_table+0x5a>
 800061c:	1e4e      	subs	r6, r1, #1
 800061e:	e7e0      	b.n	80005e2 <search_EIT_table+0x12>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d8f9      	bhi.n	8000618 <search_EIT_table+0x48>
 8000624:	4640      	mov	r0, r8
 8000626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800062a:	f04f 0800 	mov.w	r8, #0
 800062e:	4640      	mov	r0, r8
 8000630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000634 <__gnu_unwind_get_pr_addr>:
 8000634:	2801      	cmp	r0, #1
 8000636:	d007      	beq.n	8000648 <__gnu_unwind_get_pr_addr+0x14>
 8000638:	2802      	cmp	r0, #2
 800063a:	d007      	beq.n	800064c <__gnu_unwind_get_pr_addr+0x18>
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__gnu_unwind_get_pr_addr+0x1c>)
 800063e:	2800      	cmp	r0, #0
 8000640:	bf0c      	ite	eq
 8000642:	4618      	moveq	r0, r3
 8000644:	2000      	movne	r0, #0
 8000646:	4770      	bx	lr
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <__gnu_unwind_get_pr_addr+0x20>)
 800064a:	4770      	bx	lr
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <__gnu_unwind_get_pr_addr+0x24>)
 800064e:	4770      	bx	lr
 8000650:	08000cfd 	.word	0x08000cfd
 8000654:	08000d01 	.word	0x08000d01
 8000658:	08000d05 	.word	0x08000d05

0800065c <get_eit_entry>:
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <get_eit_entry+0x88>)
 8000660:	b083      	sub	sp, #12
 8000662:	4604      	mov	r4, r0
 8000664:	1e8d      	subs	r5, r1, #2
 8000666:	b31b      	cbz	r3, 80006b0 <get_eit_entry+0x54>
 8000668:	a901      	add	r1, sp, #4
 800066a:	4628      	mov	r0, r5
 800066c:	f3af 8000 	nop.w
 8000670:	b388      	cbz	r0, 80006d6 <get_eit_entry+0x7a>
 8000672:	9901      	ldr	r1, [sp, #4]
 8000674:	462a      	mov	r2, r5
 8000676:	f7ff ffab 	bl	80005d0 <search_EIT_table>
 800067a:	4601      	mov	r1, r0
 800067c:	b358      	cbz	r0, 80006d6 <get_eit_entry+0x7a>
 800067e:	f7ff ff9d 	bl	80005bc <selfrel_offset31>
 8000682:	684b      	ldr	r3, [r1, #4]
 8000684:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000686:	2b01      	cmp	r3, #1
 8000688:	d028      	beq.n	80006dc <get_eit_entry+0x80>
 800068a:	2b00      	cmp	r3, #0
 800068c:	f101 0004 	add.w	r0, r1, #4
 8000690:	db1f      	blt.n	80006d2 <get_eit_entry+0x76>
 8000692:	f7ff ff93 	bl	80005bc <selfrel_offset31>
 8000696:	2300      	movs	r3, #0
 8000698:	6523      	str	r3, [r4, #80]	@ 0x50
 800069a:	6803      	ldr	r3, [r0, #0]
 800069c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0d      	blt.n	80006be <get_eit_entry+0x62>
 80006a2:	f7ff ff8b 	bl	80005bc <selfrel_offset31>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2000      	movs	r0, #0
 80006aa:	6123      	str	r3, [r4, #16]
 80006ac:	b003      	add	sp, #12
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <get_eit_entry+0x8c>)
 80006b2:	490e      	ldr	r1, [pc, #56]	@ (80006ec <get_eit_entry+0x90>)
 80006b4:	1ac9      	subs	r1, r1, r3
 80006b6:	10c9      	asrs	r1, r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7da      	b.n	8000674 <get_eit_entry+0x18>
 80006be:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006c2:	f7ff ffb7 	bl	8000634 <__gnu_unwind_get_pr_addr>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b128      	cbz	r0, 80006d6 <get_eit_entry+0x7a>
 80006ca:	2000      	movs	r0, #0
 80006cc:	6123      	str	r3, [r4, #16]
 80006ce:	b003      	add	sp, #12
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	2301      	movs	r3, #1
 80006d4:	e7e0      	b.n	8000698 <get_eit_entry+0x3c>
 80006d6:	2300      	movs	r3, #0
 80006d8:	2009      	movs	r0, #9
 80006da:	e7e6      	b.n	80006aa <get_eit_entry+0x4e>
 80006dc:	2300      	movs	r3, #0
 80006de:	2005      	movs	r0, #5
 80006e0:	e7e3      	b.n	80006aa <get_eit_entry+0x4e>
 80006e2:	bf00      	nop
 80006e4:	00000000 	.word	0x00000000
 80006e8:	08011ad8 	.word	0x08011ad8
 80006ec:	08011b98 	.word	0x08011b98

080006f0 <restore_non_core_regs>:
 80006f0:	6803      	ldr	r3, [r0, #0]
 80006f2:	07da      	lsls	r2, r3, #31
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4604      	mov	r4, r0
 80006f8:	d406      	bmi.n	8000708 <restore_non_core_regs+0x18>
 80006fa:	079b      	lsls	r3, r3, #30
 80006fc:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 8000700:	d509      	bpl.n	8000716 <restore_non_core_regs+0x26>
 8000702:	f000 fc69 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D>
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	0759      	lsls	r1, r3, #29
 800070a:	d509      	bpl.n	8000720 <restore_non_core_regs+0x30>
 800070c:	071a      	lsls	r2, r3, #28
 800070e:	d50e      	bpl.n	800072e <restore_non_core_regs+0x3e>
 8000710:	06db      	lsls	r3, r3, #27
 8000712:	d513      	bpl.n	800073c <restore_non_core_regs+0x4c>
 8000714:	bd10      	pop	{r4, pc}
 8000716:	f000 fc57 	bl	8000fc8 <__gnu_Unwind_Restore_VFP>
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	0759      	lsls	r1, r3, #29
 800071e:	d4f5      	bmi.n	800070c <restore_non_core_regs+0x1c>
 8000720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000724:	f000 fc60 	bl	8000fe8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	071a      	lsls	r2, r3, #28
 800072c:	d4f0      	bmi.n	8000710 <restore_non_core_regs+0x20>
 800072e:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8000732:	f000 fc61 	bl	8000ff8 <__gnu_Unwind_Restore_WMMXD>
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	06db      	lsls	r3, r3, #27
 800073a:	d4eb      	bmi.n	8000714 <restore_non_core_regs+0x24>
 800073c:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8000740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000744:	f000 bc9c 	b.w	8001080 <__gnu_Unwind_Restore_WMMXC>

08000748 <__gnu_unwind_24bit.constprop.0>:
 8000748:	2009      	movs	r0, #9
 800074a:	4770      	bx	lr

0800074c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800074c:	4603      	mov	r3, r0
 800074e:	6800      	ldr	r0, [r0, #0]
 8000750:	b100      	cbz	r0, 8000754 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000752:	4418      	add	r0, r3
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <_Unwind_DebugHook>:
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <unwind_phase2>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4604      	mov	r4, r0
 8000760:	460e      	mov	r6, r1
 8000762:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000764:	4620      	mov	r0, r4
 8000766:	f7ff ff79 	bl	800065c <get_eit_entry>
 800076a:	4605      	mov	r5, r0
 800076c:	b988      	cbnz	r0, 8000792 <unwind_phase2+0x36>
 800076e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000770:	6162      	str	r2, [r4, #20]
 8000772:	6923      	ldr	r3, [r4, #16]
 8000774:	4632      	mov	r2, r6
 8000776:	4621      	mov	r1, r4
 8000778:	2001      	movs	r0, #1
 800077a:	4798      	blx	r3
 800077c:	2808      	cmp	r0, #8
 800077e:	d0f0      	beq.n	8000762 <unwind_phase2+0x6>
 8000780:	2807      	cmp	r0, #7
 8000782:	d106      	bne.n	8000792 <unwind_phase2+0x36>
 8000784:	4628      	mov	r0, r5
 8000786:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000788:	f7ff ffe6 	bl	8000758 <_Unwind_DebugHook>
 800078c:	1d30      	adds	r0, r6, #4
 800078e:	f000 fc0f 	bl	8000fb0 <__restore_core_regs>
 8000792:	f010 f8e7 	bl	8010964 <abort>
 8000796:	bf00      	nop

08000798 <unwind_phase2_forced>:
 8000798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800079c:	1d0d      	adds	r5, r1, #4
 800079e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80007a2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80007a6:	4607      	mov	r7, r0
 80007a8:	4614      	mov	r4, r2
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80007b0:	f10d 0c0c 	add.w	ip, sp, #12
 80007b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007c8:	ae02      	add	r6, sp, #8
 80007ca:	f04f 0e00 	mov.w	lr, #0
 80007ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007d2:	f8c6 e000 	str.w	lr, [r6]
 80007d6:	e020      	b.n	800081a <unwind_phase2_forced+0x82>
 80007d8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007e0:	4631      	mov	r1, r6
 80007e2:	a87a      	add	r0, sp, #488	@ 0x1e8
 80007e4:	f00f f9e5 	bl	800fbb2 <memcpy>
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80007ec:	4639      	mov	r1, r7
 80007ee:	4650      	mov	r0, sl
 80007f0:	4798      	blx	r3
 80007f2:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80007f4:	6473      	str	r3, [r6, #68]	@ 0x44
 80007f6:	4621      	mov	r1, r4
 80007f8:	e9cd 6900 	strd	r6, r9, [sp]
 80007fc:	4605      	mov	r5, r0
 80007fe:	463b      	mov	r3, r7
 8000800:	463a      	mov	r2, r7
 8000802:	2001      	movs	r0, #1
 8000804:	47c0      	blx	r8
 8000806:	4604      	mov	r4, r0
 8000808:	bb18      	cbnz	r0, 8000852 <unwind_phase2_forced+0xba>
 800080a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800080e:	a97a      	add	r1, sp, #488	@ 0x1e8
 8000810:	4630      	mov	r0, r6
 8000812:	f00f f9ce 	bl	800fbb2 <memcpy>
 8000816:	2d08      	cmp	r5, #8
 8000818:	d119      	bne.n	800084e <unwind_phase2_forced+0xb6>
 800081a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800081c:	4638      	mov	r0, r7
 800081e:	f7ff ff1d 	bl	800065c <get_eit_entry>
 8000822:	3409      	adds	r4, #9
 8000824:	fa5f fa84 	uxtb.w	sl, r4
 8000828:	4605      	mov	r5, r0
 800082a:	2800      	cmp	r0, #0
 800082c:	d0d4      	beq.n	80007d8 <unwind_phase2_forced+0x40>
 800082e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000830:	6473      	str	r3, [r6, #68]	@ 0x44
 8000832:	463a      	mov	r2, r7
 8000834:	e9cd 6900 	strd	r6, r9, [sp]
 8000838:	463b      	mov	r3, r7
 800083a:	f04a 0110 	orr.w	r1, sl, #16
 800083e:	2001      	movs	r0, #1
 8000840:	47c0      	blx	r8
 8000842:	b930      	cbnz	r0, 8000852 <unwind_phase2_forced+0xba>
 8000844:	4628      	mov	r0, r5
 8000846:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	2d07      	cmp	r5, #7
 8000850:	d005      	beq.n	800085e <unwind_phase2_forced+0xc6>
 8000852:	2509      	movs	r5, #9
 8000854:	4628      	mov	r0, r5
 8000856:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800085a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085e:	4620      	mov	r0, r4
 8000860:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000862:	f7ff ff79 	bl	8000758 <_Unwind_DebugHook>
 8000866:	a803      	add	r0, sp, #12
 8000868:	f000 fba2 	bl	8000fb0 <__restore_core_regs>

0800086c <_Unwind_GetCFA>:
 800086c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800086e:	4770      	bx	lr

08000870 <__gnu_Unwind_RaiseException>:
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000874:	640b      	str	r3, [r1, #64]	@ 0x40
 8000876:	f101 0c04 	add.w	ip, r1, #4
 800087a:	460e      	mov	r6, r1
 800087c:	4605      	mov	r5, r0
 800087e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000882:	b0f9      	sub	sp, #484	@ 0x1e4
 8000884:	ac01      	add	r4, sp, #4
 8000886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000888:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000898:	f04f 37ff 	mov.w	r7, #4294967295
 800089c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80008a0:	9700      	str	r7, [sp, #0]
 80008a2:	e006      	b.n	80008b2 <__gnu_Unwind_RaiseException+0x42>
 80008a4:	692b      	ldr	r3, [r5, #16]
 80008a6:	466a      	mov	r2, sp
 80008a8:	4629      	mov	r1, r5
 80008aa:	4798      	blx	r3
 80008ac:	2808      	cmp	r0, #8
 80008ae:	4604      	mov	r4, r0
 80008b0:	d108      	bne.n	80008c4 <__gnu_Unwind_RaiseException+0x54>
 80008b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80008b4:	4628      	mov	r0, r5
 80008b6:	f7ff fed1 	bl	800065c <get_eit_entry>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d0f2      	beq.n	80008a4 <__gnu_Unwind_RaiseException+0x34>
 80008be:	2009      	movs	r0, #9
 80008c0:	b079      	add	sp, #484	@ 0x1e4
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	4668      	mov	r0, sp
 80008c6:	f7ff ff13 	bl	80006f0 <restore_non_core_regs>
 80008ca:	2c06      	cmp	r4, #6
 80008cc:	d1f7      	bne.n	80008be <__gnu_Unwind_RaiseException+0x4e>
 80008ce:	4631      	mov	r1, r6
 80008d0:	4628      	mov	r0, r5
 80008d2:	f7ff ff43 	bl	800075c <unwind_phase2>
 80008d6:	bf00      	nop

080008d8 <__gnu_Unwind_ForcedUnwind>:
 80008d8:	60c1      	str	r1, [r0, #12]
 80008da:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80008dc:	6182      	str	r2, [r0, #24]
 80008de:	6419      	str	r1, [r3, #64]	@ 0x40
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	e758      	b.n	8000798 <unwind_phase2_forced>
 80008e6:	bf00      	nop

080008e8 <__gnu_Unwind_Resume>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	68c6      	ldr	r6, [r0, #12]
 80008ec:	6943      	ldr	r3, [r0, #20]
 80008ee:	640b      	str	r3, [r1, #64]	@ 0x40
 80008f0:	b9ae      	cbnz	r6, 800091e <__gnu_Unwind_Resume+0x36>
 80008f2:	6903      	ldr	r3, [r0, #16]
 80008f4:	460a      	mov	r2, r1
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	4601      	mov	r1, r0
 80008fc:	2002      	movs	r0, #2
 80008fe:	4798      	blx	r3
 8000900:	2807      	cmp	r0, #7
 8000902:	d005      	beq.n	8000910 <__gnu_Unwind_Resume+0x28>
 8000904:	2808      	cmp	r0, #8
 8000906:	d10f      	bne.n	8000928 <__gnu_Unwind_Resume+0x40>
 8000908:	4629      	mov	r1, r5
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff ff26 	bl	800075c <unwind_phase2>
 8000910:	4630      	mov	r0, r6
 8000912:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8000914:	f7ff ff20 	bl	8000758 <_Unwind_DebugHook>
 8000918:	1d28      	adds	r0, r5, #4
 800091a:	f000 fb49 	bl	8000fb0 <__restore_core_regs>
 800091e:	2201      	movs	r2, #1
 8000920:	f7ff ff3a 	bl	8000798 <unwind_phase2_forced>
 8000924:	f010 f81e 	bl	8010964 <abort>
 8000928:	f010 f81c 	bl	8010964 <abort>

0800092c <__gnu_Unwind_Resume_or_Rethrow>:
 800092c:	68c2      	ldr	r2, [r0, #12]
 800092e:	b11a      	cbz	r2, 8000938 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000930:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000932:	640a      	str	r2, [r1, #64]	@ 0x40
 8000934:	2200      	movs	r2, #0
 8000936:	e72f      	b.n	8000798 <unwind_phase2_forced>
 8000938:	e79a      	b.n	8000870 <__gnu_Unwind_RaiseException>
 800093a:	bf00      	nop

0800093c <_Unwind_Complete>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <_Unwind_DeleteException>:
 8000940:	6883      	ldr	r3, [r0, #8]
 8000942:	4601      	mov	r1, r0
 8000944:	b10b      	cbz	r3, 800094a <_Unwind_DeleteException+0xa>
 8000946:	2001      	movs	r0, #1
 8000948:	4718      	bx	r3
 800094a:	4770      	bx	lr

0800094c <_Unwind_VRS_Get>:
 800094c:	2901      	cmp	r1, #1
 800094e:	d010      	beq.n	8000972 <_Unwind_VRS_Get+0x26>
 8000950:	d809      	bhi.n	8000966 <_Unwind_VRS_Get+0x1a>
 8000952:	b983      	cbnz	r3, 8000976 <_Unwind_VRS_Get+0x2a>
 8000954:	2a0f      	cmp	r2, #15
 8000956:	d80e      	bhi.n	8000976 <_Unwind_VRS_Get+0x2a>
 8000958:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800095c:	4618      	mov	r0, r3
 800095e:	6853      	ldr	r3, [r2, #4]
 8000960:	9a00      	ldr	r2, [sp, #0]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4770      	bx	lr
 8000966:	3903      	subs	r1, #3
 8000968:	2901      	cmp	r1, #1
 800096a:	bf8c      	ite	hi
 800096c:	2002      	movhi	r0, #2
 800096e:	2001      	movls	r0, #1
 8000970:	4770      	bx	lr
 8000972:	4608      	mov	r0, r1
 8000974:	4770      	bx	lr
 8000976:	2002      	movs	r0, #2
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <_Unwind_GetGR>:
 800097c:	b500      	push	{lr}
 800097e:	b085      	sub	sp, #20
 8000980:	460a      	mov	r2, r1
 8000982:	2300      	movs	r3, #0
 8000984:	a903      	add	r1, sp, #12
 8000986:	9100      	str	r1, [sp, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f7ff ffdf 	bl	800094c <_Unwind_VRS_Get>
 800098e:	9803      	ldr	r0, [sp, #12]
 8000990:	b005      	add	sp, #20
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	bf00      	nop

08000998 <_Unwind_VRS_Set>:
 8000998:	2901      	cmp	r1, #1
 800099a:	d010      	beq.n	80009be <_Unwind_VRS_Set+0x26>
 800099c:	d809      	bhi.n	80009b2 <_Unwind_VRS_Set+0x1a>
 800099e:	b983      	cbnz	r3, 80009c2 <_Unwind_VRS_Set+0x2a>
 80009a0:	2a0f      	cmp	r2, #15
 80009a2:	d80e      	bhi.n	80009c2 <_Unwind_VRS_Set+0x2a>
 80009a4:	9900      	ldr	r1, [sp, #0]
 80009a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009aa:	6809      	ldr	r1, [r1, #0]
 80009ac:	6051      	str	r1, [r2, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	4770      	bx	lr
 80009b2:	3903      	subs	r1, #3
 80009b4:	2901      	cmp	r1, #1
 80009b6:	bf8c      	ite	hi
 80009b8:	2002      	movhi	r0, #2
 80009ba:	2001      	movls	r0, #1
 80009bc:	4770      	bx	lr
 80009be:	4608      	mov	r0, r1
 80009c0:	4770      	bx	lr
 80009c2:	2002      	movs	r0, #2
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <_Unwind_SetGR>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	2300      	movs	r3, #0
 80009ce:	ac03      	add	r4, sp, #12
 80009d0:	9203      	str	r2, [sp, #12]
 80009d2:	9400      	str	r4, [sp, #0]
 80009d4:	460a      	mov	r2, r1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f7ff ffde 	bl	8000998 <_Unwind_VRS_Set>
 80009dc:	b004      	add	sp, #16
 80009de:	bd10      	pop	{r4, pc}

080009e0 <__gnu_Unwind_Backtrace>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80009e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e6:	f102 0c04 	add.w	ip, r2, #4
 80009ea:	4605      	mov	r5, r0
 80009ec:	460c      	mov	r4, r1
 80009ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009f2:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80009f6:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80009fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000a0e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a12:	f04f 36ff 	mov.w	r6, #4294967295
 8000a16:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000a1a:	9616      	str	r6, [sp, #88]	@ 0x58
 8000a1c:	e010      	b.n	8000a40 <__gnu_Unwind_Backtrace+0x60>
 8000a1e:	f7ff ffd3 	bl	80009c8 <_Unwind_SetGR>
 8000a22:	4621      	mov	r1, r4
 8000a24:	a816      	add	r0, sp, #88	@ 0x58
 8000a26:	47a8      	blx	r5
 8000a28:	4603      	mov	r3, r0
 8000a2a:	aa16      	add	r2, sp, #88	@ 0x58
 8000a2c:	4669      	mov	r1, sp
 8000a2e:	2008      	movs	r0, #8
 8000a30:	b983      	cbnz	r3, 8000a54 <__gnu_Unwind_Backtrace+0x74>
 8000a32:	9b04      	ldr	r3, [sp, #16]
 8000a34:	4798      	blx	r3
 8000a36:	2805      	cmp	r0, #5
 8000a38:	4606      	mov	r6, r0
 8000a3a:	d00c      	beq.n	8000a56 <__gnu_Unwind_Backtrace+0x76>
 8000a3c:	2809      	cmp	r0, #9
 8000a3e:	d009      	beq.n	8000a54 <__gnu_Unwind_Backtrace+0x74>
 8000a40:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000a42:	4668      	mov	r0, sp
 8000a44:	f7ff fe0a 	bl	800065c <get_eit_entry>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	466a      	mov	r2, sp
 8000a4c:	210c      	movs	r1, #12
 8000a4e:	a816      	add	r0, sp, #88	@ 0x58
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0e4      	beq.n	8000a1e <__gnu_Unwind_Backtrace+0x3e>
 8000a54:	2609      	movs	r6, #9
 8000a56:	a816      	add	r0, sp, #88	@ 0x58
 8000a58:	f7ff fe4a 	bl	80006f0 <restore_non_core_regs>
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8000a62:	bd70      	pop	{r4, r5, r6, pc}

08000a64 <__gnu_unwind_pr_common>:
 8000a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a68:	4693      	mov	fp, r2
 8000a6a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000a6c:	b089      	sub	sp, #36	@ 0x24
 8000a6e:	460d      	mov	r5, r1
 8000a70:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a74:	9206      	str	r2, [sp, #24]
 8000a76:	f000 0c03 	and.w	ip, r0, #3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d079      	beq.n	8000b72 <__gnu_unwind_pr_common+0x10e>
 8000a7e:	0c0c      	lsrs	r4, r1, #16
 8000a80:	f88d 401d 	strb.w	r4, [sp, #29]
 8000a84:	0409      	lsls	r1, r1, #16
 8000a86:	b2e4      	uxtb	r4, r4
 8000a88:	9105      	str	r1, [sp, #20]
 8000a8a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000a8e:	2102      	movs	r1, #2
 8000a90:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8000a92:	f88d 101c 	strb.w	r1, [sp, #28]
 8000a96:	f1bc 0f02 	cmp.w	ip, #2
 8000a9a:	bf08      	it	eq
 8000a9c:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000a9e:	f017 0701 	ands.w	r7, r7, #1
 8000aa2:	d00c      	beq.n	8000abe <__gnu_unwind_pr_common+0x5a>
 8000aa4:	a905      	add	r1, sp, #20
 8000aa6:	4658      	mov	r0, fp
 8000aa8:	f000 fb84 	bl	80011b4 <__gnu_unwind_execute>
 8000aac:	b918      	cbnz	r0, 8000ab6 <__gnu_unwind_pr_common+0x52>
 8000aae:	2008      	movs	r0, #8
 8000ab0:	b009      	add	sp, #36	@ 0x24
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	b009      	add	sp, #36	@ 0x24
 8000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abe:	6816      	ldr	r6, [r2, #0]
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d0ef      	beq.n	8000aa4 <__gnu_unwind_pr_common+0x40>
 8000ac4:	f000 0108 	and.w	r1, r0, #8
 8000ac8:	9101      	str	r1, [sp, #4]
 8000aca:	46b2      	mov	sl, r6
 8000acc:	9702      	str	r7, [sp, #8]
 8000ace:	4664      	mov	r4, ip
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	f1b9 0f02 	cmp.w	r9, #2
 8000ad6:	d048      	beq.n	8000b6a <__gnu_unwind_pr_common+0x106>
 8000ad8:	f8b2 a000 	ldrh.w	sl, [r2]
 8000adc:	8856      	ldrh	r6, [r2, #2]
 8000ade:	f102 0804 	add.w	r8, r2, #4
 8000ae2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000ae4:	f026 0301 	bic.w	r3, r6, #1
 8000ae8:	210f      	movs	r1, #15
 8000aea:	4658      	mov	r0, fp
 8000aec:	189f      	adds	r7, r3, r2
 8000aee:	f7ff ff45 	bl	800097c <_Unwind_GetGR>
 8000af2:	4287      	cmp	r7, r0
 8000af4:	d837      	bhi.n	8000b66 <__gnu_unwind_pr_common+0x102>
 8000af6:	f02a 0201 	bic.w	r2, sl, #1
 8000afa:	443a      	add	r2, r7
 8000afc:	4282      	cmp	r2, r0
 8000afe:	bf94      	ite	ls
 8000b00:	2200      	movls	r2, #0
 8000b02:	2201      	movhi	r2, #1
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	f00a 0a01 	and.w	sl, sl, #1
 8000b0e:	ea43 030a 	orr.w	r3, r3, sl
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d047      	beq.n	8000ba6 <__gnu_unwind_pr_common+0x142>
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d031      	beq.n	8000b7e <__gnu_unwind_pr_common+0x11a>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1cb      	bne.n	8000ab6 <__gnu_unwind_pr_common+0x52>
 8000b1e:	b114      	cbz	r4, 8000b26 <__gnu_unwind_pr_common+0xc2>
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 80c9 	bne.w	8000cb8 <__gnu_unwind_pr_common+0x254>
 8000b26:	f108 0204 	add.w	r2, r8, #4
 8000b2a:	f8d2 a000 	ldr.w	sl, [r2]
 8000b2e:	f1ba 0f00 	cmp.w	sl, #0
 8000b32:	d1ce      	bne.n	8000ad2 <__gnu_unwind_pr_common+0x6e>
 8000b34:	a905      	add	r1, sp, #20
 8000b36:	4658      	mov	r0, fp
 8000b38:	9f02      	ldr	r7, [sp, #8]
 8000b3a:	f000 fb3b 	bl	80011b4 <__gnu_unwind_execute>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d1b9      	bne.n	8000ab6 <__gnu_unwind_pr_common+0x52>
 8000b42:	2f00      	cmp	r7, #0
 8000b44:	d0b3      	beq.n	8000aae <__gnu_unwind_pr_common+0x4a>
 8000b46:	210f      	movs	r1, #15
 8000b48:	4658      	mov	r0, fp
 8000b4a:	f7ff ff17 	bl	800097c <_Unwind_GetGR>
 8000b4e:	210e      	movs	r1, #14
 8000b50:	4602      	mov	r2, r0
 8000b52:	4658      	mov	r0, fp
 8000b54:	f7ff ff38 	bl	80009c8 <_Unwind_SetGR>
 8000b58:	4a67      	ldr	r2, [pc, #412]	@ (8000cf8 <__gnu_unwind_pr_common+0x294>)
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	4658      	mov	r0, fp
 8000b5e:	f7ff ff33 	bl	80009c8 <_Unwind_SetGR>
 8000b62:	2007      	movs	r0, #7
 8000b64:	e7a8      	b.n	8000ab8 <__gnu_unwind_pr_common+0x54>
 8000b66:	2200      	movs	r2, #0
 8000b68:	e7cc      	b.n	8000b04 <__gnu_unwind_pr_common+0xa0>
 8000b6a:	6856      	ldr	r6, [r2, #4]
 8000b6c:	f102 0808 	add.w	r8, r2, #8
 8000b70:	e7b7      	b.n	8000ae2 <__gnu_unwind_pr_common+0x7e>
 8000b72:	0209      	lsls	r1, r1, #8
 8000b74:	9105      	str	r1, [sp, #20]
 8000b76:	f88d 301d 	strb.w	r3, [sp, #29]
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	e788      	b.n	8000a90 <__gnu_unwind_pr_common+0x2c>
 8000b7e:	f8d8 6000 	ldr.w	r6, [r8]
 8000b82:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d144      	bne.n	8000c14 <__gnu_unwind_pr_common+0x1b0>
 8000b8a:	b122      	cbz	r2, 8000b96 <__gnu_unwind_pr_common+0x132>
 8000b8c:	9a01      	ldr	r2, [sp, #4]
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d05a      	beq.n	8000c48 <__gnu_unwind_pr_common+0x1e4>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d058      	beq.n	8000c48 <__gnu_unwind_pr_common+0x1e4>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	da01      	bge.n	8000b9e <__gnu_unwind_pr_common+0x13a>
 8000b9a:	f108 0804 	add.w	r8, r8, #4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000ba4:	e7c1      	b.n	8000b2a <__gnu_unwind_pr_common+0xc6>
 8000ba6:	b9ec      	cbnz	r4, 8000be4 <__gnu_unwind_pr_common+0x180>
 8000ba8:	b1ca      	cbz	r2, 8000bde <__gnu_unwind_pr_common+0x17a>
 8000baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000bae:	f8d8 2000 	ldr.w	r2, [r8]
 8000bb2:	1c99      	adds	r1, r3, #2
 8000bb4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bb8:	f43f af7d 	beq.w	8000ab6 <__gnu_unwind_pr_common+0x52>
 8000bbc:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	9104      	str	r1, [sp, #16]
 8000bc4:	f000 808b 	beq.w	8000cde <__gnu_unwind_pr_common+0x27a>
 8000bc8:	f108 0004 	add.w	r0, r8, #4
 8000bcc:	f7ff fdbe 	bl	800074c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bd0:	ab04      	add	r3, sp, #16
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f3af 8000 	nop.w
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d157      	bne.n	8000c8e <__gnu_unwind_pr_common+0x22a>
 8000bde:	f108 0208 	add.w	r2, r8, #8
 8000be2:	e7a2      	b.n	8000b2a <__gnu_unwind_pr_common+0xc6>
 8000be4:	210d      	movs	r1, #13
 8000be6:	4658      	mov	r0, fp
 8000be8:	f7ff fec8 	bl	800097c <_Unwind_GetGR>
 8000bec:	6a2b      	ldr	r3, [r5, #32]
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	d1f5      	bne.n	8000bde <__gnu_unwind_pr_common+0x17a>
 8000bf2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000bf4:	4598      	cmp	r8, r3
 8000bf6:	d1f2      	bne.n	8000bde <__gnu_unwind_pr_common+0x17a>
 8000bf8:	4640      	mov	r0, r8
 8000bfa:	f7ff fcdf 	bl	80005bc <selfrel_offset31>
 8000bfe:	210f      	movs	r1, #15
 8000c00:	4602      	mov	r2, r0
 8000c02:	4658      	mov	r0, fp
 8000c04:	f7ff fee0 	bl	80009c8 <_Unwind_SetGR>
 8000c08:	462a      	mov	r2, r5
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4658      	mov	r0, fp
 8000c0e:	f7ff fedb 	bl	80009c8 <_Unwind_SetGR>
 8000c12:	e7a6      	b.n	8000b62 <__gnu_unwind_pr_common+0xfe>
 8000c14:	210d      	movs	r1, #13
 8000c16:	4658      	mov	r0, fp
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	f7ff feaf 	bl	800097c <_Unwind_GetGR>
 8000c1e:	6a2a      	ldr	r2, [r5, #32]
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	4282      	cmp	r2, r0
 8000c24:	d1b7      	bne.n	8000b96 <__gnu_unwind_pr_common+0x132>
 8000c26:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000c28:	4590      	cmp	r8, r2
 8000c2a:	d1b4      	bne.n	8000b96 <__gnu_unwind_pr_common+0x132>
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	2204      	movs	r2, #4
 8000c30:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000c34:	4442      	add	r2, r8
 8000c36:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000c38:	636a      	str	r2, [r5, #52]	@ 0x34
 8000c3a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c3e:	42ba      	cmp	r2, r7
 8000c40:	db55      	blt.n	8000cee <__gnu_unwind_pr_common+0x28a>
 8000c42:	2201      	movs	r2, #1
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	e7aa      	b.n	8000b9e <__gnu_unwind_pr_common+0x13a>
 8000c48:	9403      	str	r4, [sp, #12]
 8000c4a:	f108 0a04 	add.w	sl, r8, #4
 8000c4e:	2600      	movs	r6, #0
 8000c50:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000c54:	461c      	mov	r4, r3
 8000c56:	e00d      	b.n	8000c74 <__gnu_unwind_pr_common+0x210>
 8000c58:	4650      	mov	r0, sl
 8000c5a:	9704      	str	r7, [sp, #16]
 8000c5c:	f7ff fd76 	bl	800074c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c60:	2200      	movs	r2, #0
 8000c62:	4601      	mov	r1, r0
 8000c64:	ab04      	add	r3, sp, #16
 8000c66:	4628      	mov	r0, r5
 8000c68:	3601      	adds	r6, #1
 8000c6a:	f10a 0a04 	add.w	sl, sl, #4
 8000c6e:	f3af 8000 	nop.w
 8000c72:	b9e0      	cbnz	r0, 8000cae <__gnu_unwind_pr_common+0x24a>
 8000c74:	42a6      	cmp	r6, r4
 8000c76:	d1ef      	bne.n	8000c58 <__gnu_unwind_pr_common+0x1f4>
 8000c78:	210d      	movs	r1, #13
 8000c7a:	4658      	mov	r0, fp
 8000c7c:	f7ff fe7e 	bl	800097c <_Unwind_GetGR>
 8000c80:	9b04      	ldr	r3, [sp, #16]
 8000c82:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000c86:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	e714      	b.n	8000ab8 <__gnu_unwind_pr_common+0x54>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	210d      	movs	r1, #13
 8000c92:	4658      	mov	r0, fp
 8000c94:	f7ff fe72 	bl	800097c <_Unwind_GetGR>
 8000c98:	9e04      	ldr	r6, [sp, #16]
 8000c9a:	6228      	str	r0, [r5, #32]
 8000c9c:	2c02      	cmp	r4, #2
 8000c9e:	bf04      	itt	eq
 8000ca0:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000ca2:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000ca6:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000caa:	2006      	movs	r0, #6
 8000cac:	e704      	b.n	8000ab8 <__gnu_unwind_pr_common+0x54>
 8000cae:	4623      	mov	r3, r4
 8000cb0:	f8d8 6000 	ldr.w	r6, [r8]
 8000cb4:	9c03      	ldr	r4, [sp, #12]
 8000cb6:	e76e      	b.n	8000b96 <__gnu_unwind_pr_common+0x132>
 8000cb8:	4640      	mov	r0, r8
 8000cba:	f7ff fc7f 	bl	80005bc <selfrel_offset31>
 8000cbe:	f108 0204 	add.w	r2, r8, #4
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f3af 8000 	nop.w
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	f43f aef2 	beq.w	8000ab6 <__gnu_unwind_pr_common+0x52>
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	4658      	mov	r0, fp
 8000cd8:	f7ff fe76 	bl	80009c8 <_Unwind_SetGR>
 8000cdc:	e741      	b.n	8000b62 <__gnu_unwind_pr_common+0xfe>
 8000cde:	460c      	mov	r4, r1
 8000ce0:	4658      	mov	r0, fp
 8000ce2:	210d      	movs	r1, #13
 8000ce4:	f7ff fe4a 	bl	800097c <_Unwind_GetGR>
 8000ce8:	4626      	mov	r6, r4
 8000cea:	6228      	str	r0, [r5, #32]
 8000cec:	e7db      	b.n	8000ca6 <__gnu_unwind_pr_common+0x242>
 8000cee:	1c58      	adds	r0, r3, #1
 8000cf0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000cf4:	e781      	b.n	8000bfa <__gnu_unwind_pr_common+0x196>
 8000cf6:	bf00      	nop
 8000cf8:	00000000 	.word	0x00000000

08000cfc <__aeabi_unwind_cpp_pr0>:
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e6b1      	b.n	8000a64 <__gnu_unwind_pr_common>

08000d00 <__aeabi_unwind_cpp_pr1>:
 8000d00:	2301      	movs	r3, #1
 8000d02:	e6af      	b.n	8000a64 <__gnu_unwind_pr_common>

08000d04 <__aeabi_unwind_cpp_pr2>:
 8000d04:	2302      	movs	r3, #2
 8000d06:	e6ad      	b.n	8000a64 <__gnu_unwind_pr_common>

08000d08 <_Unwind_VRS_Pop>:
 8000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	b0c3      	sub	sp, #268	@ 0x10c
 8000d10:	4615      	mov	r5, r2
 8000d12:	461c      	mov	r4, r3
 8000d14:	2904      	cmp	r1, #4
 8000d16:	f200 80d1 	bhi.w	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000d1a:	e8df f001 	tbb	[pc, r1]
 8000d1e:	51ac      	.short	0x51ac
 8000d20:	2acf      	.short	0x2acf
 8000d22:	03          	.byte	0x03
 8000d23:	00          	.byte	0x00
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	f040 80c9 	bne.w	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000d2a:	2a10      	cmp	r2, #16
 8000d2c:	f200 80c6 	bhi.w	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000d30:	6803      	ldr	r3, [r0, #0]
 8000d32:	06dc      	lsls	r4, r3, #27
 8000d34:	f100 80e7 	bmi.w	8000f06 <_Unwind_VRS_Pop+0x1fe>
 8000d38:	af20      	add	r7, sp, #128	@ 0x80
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	f000 f9aa 	bl	8001094 <__gnu_Unwind_Save_WMMXC>
 8000d40:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 8000d42:	4639      	mov	r1, r7
 8000d44:	2300      	movs	r3, #0
 8000d46:	f04f 0c01 	mov.w	ip, #1
 8000d4a:	fa0c f203 	lsl.w	r2, ip, r3
 8000d4e:	422a      	tst	r2, r5
 8000d50:	4620      	mov	r0, r4
 8000d52:	f103 0301 	add.w	r3, r3, #1
 8000d56:	d003      	beq.n	8000d60 <_Unwind_VRS_Pop+0x58>
 8000d58:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d5c:	600a      	str	r2, [r1, #0]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	f101 0104 	add.w	r1, r1, #4
 8000d66:	d1f0      	bne.n	8000d4a <_Unwind_VRS_Pop+0x42>
 8000d68:	63b4      	str	r4, [r6, #56]	@ 0x38
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	f000 f988 	bl	8001080 <__gnu_Unwind_Restore_WMMXC>
 8000d70:	e099      	b.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000d72:	2c03      	cmp	r4, #3
 8000d74:	f040 80a2 	bne.w	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000d78:	b294      	uxth	r4, r2
 8000d7a:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d84:	f200 809a 	bhi.w	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	071f      	lsls	r7, r3, #28
 8000d8c:	f100 80c3 	bmi.w	8000f16 <_Unwind_VRS_Pop+0x20e>
 8000d90:	af20      	add	r7, sp, #128	@ 0x80
 8000d92:	4638      	mov	r0, r7
 8000d94:	f000 f952 	bl	800103c <__gnu_Unwind_Save_WMMXD>
 8000d98:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000d9a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d9e:	b154      	cbz	r4, 8000db6 <_Unwind_VRS_Pop+0xae>
 8000da0:	460b      	mov	r3, r1
 8000da2:	1ad0      	subs	r0, r2, r3
 8000da4:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000da8:	00e4      	lsls	r4, r4, #3
 8000daa:	581d      	ldr	r5, [r3, r0]
 8000dac:	f843 5b04 	str.w	r5, [r3], #4
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d1fa      	bne.n	8000daa <_Unwind_VRS_Pop+0xa2>
 8000db4:	4422      	add	r2, r4
 8000db6:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000db8:	4638      	mov	r0, r7
 8000dba:	f000 f91d 	bl	8000ff8 <__gnu_Unwind_Restore_WMMXD>
 8000dbe:	e072      	b.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000dc0:	2c01      	cmp	r4, #1
 8000dc2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000dc6:	b295      	uxth	r5, r2
 8000dc8:	d071      	beq.n	8000eae <_Unwind_VRS_Pop+0x1a6>
 8000dca:	2c05      	cmp	r4, #5
 8000dcc:	d176      	bne.n	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000dce:	eb08 0905 	add.w	r9, r8, r5
 8000dd2:	f1b9 0f20 	cmp.w	r9, #32
 8000dd6:	d871      	bhi.n	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000dd8:	f1b8 0f0f 	cmp.w	r8, #15
 8000ddc:	d872      	bhi.n	8000ec4 <_Unwind_VRS_Pop+0x1bc>
 8000dde:	f1b9 0f10 	cmp.w	r9, #16
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	f200 809f 	bhi.w	8000f26 <_Unwind_VRS_Pop+0x21e>
 8000de8:	07d9      	lsls	r1, r3, #31
 8000dea:	d508      	bpl.n	8000dfe <_Unwind_VRS_Pop+0xf6>
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	4630      	mov	r0, r6
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	f840 3b48 	str.w	r3, [r0], #72
 8000dfa:	f000 f8f1 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D>
 8000dfe:	af20      	add	r7, sp, #128	@ 0x80
 8000e00:	4638      	mov	r0, r7
 8000e02:	f000 f8ed 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D>
 8000e06:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	f000 80b9 	beq.w	8000f80 <_Unwind_VRS_Pop+0x278>
 8000e0e:	006d      	lsls	r5, r5, #1
 8000e10:	1e6a      	subs	r2, r5, #1
 8000e12:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000e16:	2500      	movs	r5, #0
 8000e18:	3201      	adds	r2, #1
 8000e1a:	3904      	subs	r1, #4
 8000e1c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e20:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e24:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d1f9      	bne.n	8000e20 <_Unwind_VRS_Pop+0x118>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	f000 80a1 	beq.w	8000f74 <_Unwind_VRS_Pop+0x26c>
 8000e32:	4641      	mov	r1, r8
 8000e34:	2910      	cmp	r1, #16
 8000e36:	bf38      	it	cc
 8000e38:	2110      	movcc	r1, #16
 8000e3a:	006b      	lsls	r3, r5, #1
 8000e3c:	3910      	subs	r1, #16
 8000e3e:	466f      	mov	r7, sp
 8000e40:	3b01      	subs	r3, #1
 8000e42:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e46:	3301      	adds	r3, #1
 8000e48:	3904      	subs	r1, #4
 8000e4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e4e:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e52:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d1f9      	bne.n	8000e4e <_Unwind_VRS_Pop+0x146>
 8000e5a:	2c01      	cmp	r4, #1
 8000e5c:	f000 8088 	beq.w	8000f70 <_Unwind_VRS_Pop+0x268>
 8000e60:	f1b8 0f0f 	cmp.w	r8, #15
 8000e64:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000e66:	d802      	bhi.n	8000e6e <_Unwind_VRS_Pop+0x166>
 8000e68:	a820      	add	r0, sp, #128	@ 0x80
 8000e6a:	f000 f8b5 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D>
 8000e6e:	4638      	mov	r0, r7
 8000e70:	f000 f8ba 	bl	8000fe8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e74:	e017      	b.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000e76:	bb0c      	cbnz	r4, 8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000e78:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	fa1f fc82 	uxth.w	ip, r2
 8000e80:	2401      	movs	r4, #1
 8000e82:	1d37      	adds	r7, r6, #4
 8000e84:	fa04 f103 	lsl.w	r1, r4, r3
 8000e88:	ea11 0f0c 	tst.w	r1, ip
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	d004      	beq.n	8000e9a <_Unwind_VRS_Pop+0x192>
 8000e90:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e94:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d1f1      	bne.n	8000e84 <_Unwind_VRS_Pop+0x17c>
 8000ea0:	04ac      	lsls	r4, r5, #18
 8000ea2:	d400      	bmi.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000ea4:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	b043      	add	sp, #268	@ 0x10c
 8000eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eae:	eb08 0305 	add.w	r3, r8, r5
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d802      	bhi.n	8000ebc <_Unwind_VRS_Pop+0x1b4>
 8000eb6:	f1b8 0f10 	cmp.w	r8, #16
 8000eba:	d114      	bne.n	8000ee6 <_Unwind_VRS_Pop+0x1de>
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	b043      	add	sp, #268	@ 0x10c
 8000ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d0ee      	beq.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000ec8:	6803      	ldr	r3, [r0, #0]
 8000eca:	075a      	lsls	r2, r3, #29
 8000ecc:	d45c      	bmi.n	8000f88 <_Unwind_VRS_Pop+0x280>
 8000ece:	466f      	mov	r7, sp
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	f000 f88d 	bl	8000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ed6:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000ed8:	006b      	lsls	r3, r5, #1
 8000eda:	f1a8 0110 	sub.w	r1, r8, #16
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ee4:	e7af      	b.n	8000e46 <_Unwind_VRS_Pop+0x13e>
 8000ee6:	6803      	ldr	r3, [r0, #0]
 8000ee8:	07da      	lsls	r2, r3, #31
 8000eea:	d459      	bmi.n	8000fa0 <_Unwind_VRS_Pop+0x298>
 8000eec:	af20      	add	r7, sp, #128	@ 0x80
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f000 f86e 	bl	8000fd0 <__gnu_Unwind_Save_VFP>
 8000ef4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d189      	bne.n	8000e0e <_Unwind_VRS_Pop+0x106>
 8000efa:	3304      	adds	r3, #4
 8000efc:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000efe:	4638      	mov	r0, r7
 8000f00:	f000 f862 	bl	8000fc8 <__gnu_Unwind_Restore_VFP>
 8000f04:	e7cf      	b.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000f06:	f023 0310 	bic.w	r3, r3, #16
 8000f0a:	6003      	str	r3, [r0, #0]
 8000f0c:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000f10:	f000 f8c0 	bl	8001094 <__gnu_Unwind_Save_WMMXC>
 8000f14:	e710      	b.n	8000d38 <_Unwind_VRS_Pop+0x30>
 8000f16:	f023 0308 	bic.w	r3, r3, #8
 8000f1a:	6003      	str	r3, [r0, #0]
 8000f1c:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000f20:	f000 f88c 	bl	800103c <__gnu_Unwind_Save_WMMXD>
 8000f24:	e734      	b.n	8000d90 <_Unwind_VRS_Pop+0x88>
 8000f26:	07d9      	lsls	r1, r3, #31
 8000f28:	d508      	bpl.n	8000f3c <_Unwind_VRS_Pop+0x234>
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f840 3b48 	str.w	r3, [r0], #72
 8000f36:	f000 f853 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D>
 8000f3a:	6833      	ldr	r3, [r6, #0]
 8000f3c:	0758      	lsls	r0, r3, #29
 8000f3e:	d506      	bpl.n	8000f4e <_Unwind_VRS_Pop+0x246>
 8000f40:	4630      	mov	r0, r6
 8000f42:	f023 0304 	bic.w	r3, r3, #4
 8000f46:	f840 3bd0 	str.w	r3, [r0], #208
 8000f4a:	f000 f851 	bl	8000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f4e:	af20      	add	r7, sp, #128	@ 0x80
 8000f50:	4638      	mov	r0, r7
 8000f52:	f000 f845 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D>
 8000f56:	4668      	mov	r0, sp
 8000f58:	f000 f84a 	bl	8000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f5c:	f1c8 0210 	rsb	r2, r8, #16
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000f64:	f1a9 0510 	sub.w	r5, r9, #16
 8000f68:	3a01      	subs	r2, #1
 8000f6a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000f6e:	e753      	b.n	8000e18 <_Unwind_VRS_Pop+0x110>
 8000f70:	af20      	add	r7, sp, #128	@ 0x80
 8000f72:	e7c2      	b.n	8000efa <_Unwind_VRS_Pop+0x1f2>
 8000f74:	2c01      	cmp	r4, #1
 8000f76:	d0c0      	beq.n	8000efa <_Unwind_VRS_Pop+0x1f2>
 8000f78:	f1b8 0f0f 	cmp.w	r8, #15
 8000f7c:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000f7e:	d892      	bhi.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000f80:	4638      	mov	r0, r7
 8000f82:	f000 f829 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D>
 8000f86:	e78e      	b.n	8000ea6 <_Unwind_VRS_Pop+0x19e>
 8000f88:	f023 0304 	bic.w	r3, r3, #4
 8000f8c:	f840 3bd0 	str.w	r3, [r0], #208
 8000f90:	466f      	mov	r7, sp
 8000f92:	f000 f82d 	bl	8000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f96:	4638      	mov	r0, r7
 8000f98:	f000 f82a 	bl	8000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f9c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000f9e:	e79b      	b.n	8000ed8 <_Unwind_VRS_Pop+0x1d0>
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	f840 3b48 	str.w	r3, [r0], #72
 8000faa:	f000 f811 	bl	8000fd0 <__gnu_Unwind_Save_VFP>
 8000fae:	e79d      	b.n	8000eec <_Unwind_VRS_Pop+0x1e4>

08000fb0 <__restore_core_regs>:
 8000fb0:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000fb4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fb8:	469c      	mov	ip, r3
 8000fba:	46a6      	mov	lr, r4
 8000fbc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fc0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fc4:	46e5      	mov	sp, ip
 8000fc6:	bd00      	pop	{pc}

08000fc8 <__gnu_Unwind_Restore_VFP>:
 8000fc8:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Save_VFP>:
 8000fd0:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Restore_VFP_D>:
 8000fd8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Save_VFP_D>:
 8000fe0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fe8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ff0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__gnu_Unwind_Restore_WMMXD>:
 8000ff8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ffc:	ecf0 1102 	ldfe	f1, [r0], #8
 8001000:	ecf0 2102 	ldfe	f2, [r0], #8
 8001004:	ecf0 3102 	ldfe	f3, [r0], #8
 8001008:	ecf0 4102 	ldfe	f4, [r0], #8
 800100c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001010:	ecf0 6102 	ldfe	f6, [r0], #8
 8001014:	ecf0 7102 	ldfe	f7, [r0], #8
 8001018:	ecf0 8102 	ldfp	f0, [r0], #8
 800101c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001020:	ecf0 a102 	ldfp	f2, [r0], #8
 8001024:	ecf0 b102 	ldfp	f3, [r0], #8
 8001028:	ecf0 c102 	ldfp	f4, [r0], #8
 800102c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001030:	ecf0 e102 	ldfp	f6, [r0], #8
 8001034:	ecf0 f102 	ldfp	f7, [r0], #8
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__gnu_Unwind_Save_WMMXD>:
 800103c:	ece0 0102 	stfe	f0, [r0], #8
 8001040:	ece0 1102 	stfe	f1, [r0], #8
 8001044:	ece0 2102 	stfe	f2, [r0], #8
 8001048:	ece0 3102 	stfe	f3, [r0], #8
 800104c:	ece0 4102 	stfe	f4, [r0], #8
 8001050:	ece0 5102 	stfe	f5, [r0], #8
 8001054:	ece0 6102 	stfe	f6, [r0], #8
 8001058:	ece0 7102 	stfe	f7, [r0], #8
 800105c:	ece0 8102 	stfp	f0, [r0], #8
 8001060:	ece0 9102 	stfp	f1, [r0], #8
 8001064:	ece0 a102 	stfp	f2, [r0], #8
 8001068:	ece0 b102 	stfp	f3, [r0], #8
 800106c:	ece0 c102 	stfp	f4, [r0], #8
 8001070:	ece0 d102 	stfp	f5, [r0], #8
 8001074:	ece0 e102 	stfp	f6, [r0], #8
 8001078:	ece0 f102 	stfp	f7, [r0], #8
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__gnu_Unwind_Restore_WMMXC>:
 8001080:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001084:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001088:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800108c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__gnu_Unwind_Save_WMMXC>:
 8001094:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001098:	fca0 9101 	stc2	1, cr9, [r0], #4
 800109c:	fca0 a101 	stc2	1, cr10, [r0], #4
 80010a0:	fca0 b101 	stc2	1, cr11, [r0], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <_Unwind_RaiseException>:
 80010a8:	46ec      	mov	ip, sp
 80010aa:	b500      	push	{lr}
 80010ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010bc:	a901      	add	r1, sp, #4
 80010be:	f7ff fbd7 	bl	8000870 <__gnu_Unwind_RaiseException>
 80010c2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010c6:	b012      	add	sp, #72	@ 0x48
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <_Unwind_Resume>:
 80010cc:	46ec      	mov	ip, sp
 80010ce:	b500      	push	{lr}
 80010d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	f7ff fc01 	bl	80008e8 <__gnu_Unwind_Resume>
 80010e6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010ea:	b012      	add	sp, #72	@ 0x48
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <_Unwind_Resume_or_Rethrow>:
 80010f0:	46ec      	mov	ip, sp
 80010f2:	b500      	push	{lr}
 80010f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001104:	a901      	add	r1, sp, #4
 8001106:	f7ff fc11 	bl	800092c <__gnu_Unwind_Resume_or_Rethrow>
 800110a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800110e:	b012      	add	sp, #72	@ 0x48
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <_Unwind_ForcedUnwind>:
 8001114:	46ec      	mov	ip, sp
 8001116:	b500      	push	{lr}
 8001118:	e92d 5000 	stmdb	sp!, {ip, lr}
 800111c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001128:	ab01      	add	r3, sp, #4
 800112a:	f7ff fbd5 	bl	80008d8 <__gnu_Unwind_ForcedUnwind>
 800112e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001132:	b012      	add	sp, #72	@ 0x48
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <_Unwind_Backtrace>:
 8001138:	46ec      	mov	ip, sp
 800113a:	b500      	push	{lr}
 800113c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001140:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e92d 000c 	stmdb	sp!, {r2, r3}
 800114c:	aa01      	add	r2, sp, #4
 800114e:	f7ff fc47 	bl	80009e0 <__gnu_Unwind_Backtrace>
 8001152:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001156:	b012      	add	sp, #72	@ 0x48
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <next_unwind_byte>:
 800115c:	7a02      	ldrb	r2, [r0, #8]
 800115e:	4603      	mov	r3, r0
 8001160:	b97a      	cbnz	r2, 8001182 <next_unwind_byte+0x26>
 8001162:	7a42      	ldrb	r2, [r0, #9]
 8001164:	b1a2      	cbz	r2, 8001190 <next_unwind_byte+0x34>
 8001166:	6841      	ldr	r1, [r0, #4]
 8001168:	3a01      	subs	r2, #1
 800116a:	b410      	push	{r4}
 800116c:	7242      	strb	r2, [r0, #9]
 800116e:	6808      	ldr	r0, [r1, #0]
 8001170:	2203      	movs	r2, #3
 8001172:	1d0c      	adds	r4, r1, #4
 8001174:	721a      	strb	r2, [r3, #8]
 8001176:	0202      	lsls	r2, r0, #8
 8001178:	605c      	str	r4, [r3, #4]
 800117a:	0e00      	lsrs	r0, r0, #24
 800117c:	bc10      	pop	{r4}
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	4770      	bx	lr
 8001182:	6800      	ldr	r0, [r0, #0]
 8001184:	3a01      	subs	r2, #1
 8001186:	721a      	strb	r2, [r3, #8]
 8001188:	0202      	lsls	r2, r0, #8
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	0e00      	lsrs	r0, r0, #24
 800118e:	4770      	bx	lr
 8001190:	20b0      	movs	r0, #176	@ 0xb0
 8001192:	4770      	bx	lr

08001194 <_Unwind_GetGR.constprop.0>:
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
 8001198:	2300      	movs	r3, #0
 800119a:	aa03      	add	r2, sp, #12
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	220c      	movs	r2, #12
 80011a2:	f7ff fbd3 	bl	800094c <_Unwind_VRS_Get>
 80011a6:	9803      	ldr	r0, [sp, #12]
 80011a8:	b005      	add	sp, #20
 80011aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ae:	bf00      	nop

080011b0 <unwind_UCB_from_context>:
 80011b0:	e7f0      	b.n	8001194 <_Unwind_GetGR.constprop.0>
 80011b2:	bf00      	nop

080011b4 <__gnu_unwind_execute>:
 80011b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b8:	4606      	mov	r6, r0
 80011ba:	b085      	sub	sp, #20
 80011bc:	460d      	mov	r5, r1
 80011be:	f04f 0800 	mov.w	r8, #0
 80011c2:	4628      	mov	r0, r5
 80011c4:	f7ff ffca 	bl	800115c <next_unwind_byte>
 80011c8:	28b0      	cmp	r0, #176	@ 0xb0
 80011ca:	4604      	mov	r4, r0
 80011cc:	f000 80da 	beq.w	8001384 <__gnu_unwind_execute+0x1d0>
 80011d0:	0607      	lsls	r7, r0, #24
 80011d2:	d546      	bpl.n	8001262 <__gnu_unwind_execute+0xae>
 80011d4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80011d8:	2b80      	cmp	r3, #128	@ 0x80
 80011da:	d05e      	beq.n	800129a <__gnu_unwind_execute+0xe6>
 80011dc:	2bb0      	cmp	r3, #176	@ 0xb0
 80011de:	d073      	beq.n	80012c8 <__gnu_unwind_execute+0x114>
 80011e0:	d81b      	bhi.n	800121a <__gnu_unwind_execute+0x66>
 80011e2:	2b90      	cmp	r3, #144	@ 0x90
 80011e4:	f000 809b 	beq.w	800131e <__gnu_unwind_execute+0x16a>
 80011e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80011ea:	d112      	bne.n	8001212 <__gnu_unwind_execute+0x5e>
 80011ec:	43c3      	mvns	r3, r0
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80011f6:	411a      	asrs	r2, r3
 80011f8:	0701      	lsls	r1, r0, #28
 80011fa:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80011fe:	d501      	bpl.n	8001204 <__gnu_unwind_execute+0x50>
 8001200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001204:	2300      	movs	r3, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4630      	mov	r0, r6
 800120a:	f7ff fd7d 	bl	8000d08 <_Unwind_VRS_Pop>
 800120e:	2800      	cmp	r0, #0
 8001210:	d0d7      	beq.n	80011c2 <__gnu_unwind_execute+0xe>
 8001212:	2009      	movs	r0, #9
 8001214:	b005      	add	sp, #20
 8001216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800121a:	2bc0      	cmp	r3, #192	@ 0xc0
 800121c:	d16d      	bne.n	80012fa <__gnu_unwind_execute+0x146>
 800121e:	28c6      	cmp	r0, #198	@ 0xc6
 8001220:	f000 8093 	beq.w	800134a <__gnu_unwind_execute+0x196>
 8001224:	28c7      	cmp	r0, #199	@ 0xc7
 8001226:	f000 80b2 	beq.w	800138e <__gnu_unwind_execute+0x1da>
 800122a:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 800122e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001230:	f000 80d2 	beq.w	80013d8 <__gnu_unwind_execute+0x224>
 8001234:	28c8      	cmp	r0, #200	@ 0xc8
 8001236:	f000 80dd 	beq.w	80013f4 <__gnu_unwind_execute+0x240>
 800123a:	28c9      	cmp	r0, #201	@ 0xc9
 800123c:	d1e9      	bne.n	8001212 <__gnu_unwind_execute+0x5e>
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff ff8c 	bl	800115c <next_unwind_byte>
 8001244:	0302      	lsls	r2, r0, #12
 8001246:	f000 000f 	and.w	r0, r0, #15
 800124a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800124e:	3001      	adds	r0, #1
 8001250:	4302      	orrs	r2, r0
 8001252:	2101      	movs	r1, #1
 8001254:	2305      	movs	r3, #5
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fd56 	bl	8000d08 <_Unwind_VRS_Pop>
 800125c:	2800      	cmp	r0, #0
 800125e:	d0b0      	beq.n	80011c2 <__gnu_unwind_execute+0xe>
 8001260:	e7d7      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 8001262:	0083      	lsls	r3, r0, #2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	1d1f      	adds	r7, r3, #4
 8001268:	f10d 090c 	add.w	r9, sp, #12
 800126c:	2300      	movs	r3, #0
 800126e:	4619      	mov	r1, r3
 8001270:	f8cd 9000 	str.w	r9, [sp]
 8001274:	220d      	movs	r2, #13
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff fb68 	bl	800094c <_Unwind_VRS_Get>
 800127c:	9b03      	ldr	r3, [sp, #12]
 800127e:	f8cd 9000 	str.w	r9, [sp]
 8001282:	0660      	lsls	r0, r4, #25
 8001284:	bf4c      	ite	mi
 8001286:	1bdf      	submi	r7, r3, r7
 8001288:	18ff      	addpl	r7, r7, r3
 800128a:	2300      	movs	r3, #0
 800128c:	220d      	movs	r2, #13
 800128e:	4619      	mov	r1, r3
 8001290:	4630      	mov	r0, r6
 8001292:	9703      	str	r7, [sp, #12]
 8001294:	f7ff fb80 	bl	8000998 <_Unwind_VRS_Set>
 8001298:	e793      	b.n	80011c2 <__gnu_unwind_execute+0xe>
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff ff5e 	bl	800115c <next_unwind_byte>
 80012a0:	0224      	lsls	r4, r4, #8
 80012a2:	4320      	orrs	r0, r4
 80012a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80012a8:	d0b3      	beq.n	8001212 <__gnu_unwind_execute+0x5e>
 80012aa:	0104      	lsls	r4, r0, #4
 80012ac:	2300      	movs	r3, #0
 80012ae:	b2a2      	uxth	r2, r4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fd28 	bl	8000d08 <_Unwind_VRS_Pop>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1aa      	bne.n	8001212 <__gnu_unwind_execute+0x5e>
 80012bc:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80012c0:	bf18      	it	ne
 80012c2:	f04f 0801 	movne.w	r8, #1
 80012c6:	e77c      	b.n	80011c2 <__gnu_unwind_execute+0xe>
 80012c8:	28b1      	cmp	r0, #177	@ 0xb1
 80012ca:	d051      	beq.n	8001370 <__gnu_unwind_execute+0x1bc>
 80012cc:	28b2      	cmp	r0, #178	@ 0xb2
 80012ce:	f000 80ad 	beq.w	800142c <__gnu_unwind_execute+0x278>
 80012d2:	28b3      	cmp	r0, #179	@ 0xb3
 80012d4:	d06d      	beq.n	80013b2 <__gnu_unwind_execute+0x1fe>
 80012d6:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 80012da:	2bb4      	cmp	r3, #180	@ 0xb4
 80012dc:	d099      	beq.n	8001212 <__gnu_unwind_execute+0x5e>
 80012de:	f000 0207 	and.w	r2, r0, #7
 80012e2:	3201      	adds	r2, #1
 80012e4:	2301      	movs	r3, #1
 80012e6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012ea:	4619      	mov	r1, r3
 80012ec:	4630      	mov	r0, r6
 80012ee:	f7ff fd0b 	bl	8000d08 <_Unwind_VRS_Pop>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	f43f af65 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 80012f8:	e78b      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 80012fa:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80012fe:	2bd0      	cmp	r3, #208	@ 0xd0
 8001300:	d187      	bne.n	8001212 <__gnu_unwind_execute+0x5e>
 8001302:	f000 0207 	and.w	r2, r0, #7
 8001306:	3201      	adds	r2, #1
 8001308:	2305      	movs	r3, #5
 800130a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800130e:	2101      	movs	r1, #1
 8001310:	4630      	mov	r0, r6
 8001312:	f7ff fcf9 	bl	8000d08 <_Unwind_VRS_Pop>
 8001316:	2800      	cmp	r0, #0
 8001318:	f43f af53 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 800131c:	e779      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 800131e:	f000 030d 	and.w	r3, r0, #13
 8001322:	2b0d      	cmp	r3, #13
 8001324:	f43f af75 	beq.w	8001212 <__gnu_unwind_execute+0x5e>
 8001328:	af03      	add	r7, sp, #12
 800132a:	2300      	movs	r3, #0
 800132c:	f000 020f 	and.w	r2, r0, #15
 8001330:	4619      	mov	r1, r3
 8001332:	9700      	str	r7, [sp, #0]
 8001334:	4630      	mov	r0, r6
 8001336:	f7ff fb09 	bl	800094c <_Unwind_VRS_Get>
 800133a:	2300      	movs	r3, #0
 800133c:	9700      	str	r7, [sp, #0]
 800133e:	220d      	movs	r2, #13
 8001340:	4619      	mov	r1, r3
 8001342:	4630      	mov	r0, r6
 8001344:	f7ff fb28 	bl	8000998 <_Unwind_VRS_Set>
 8001348:	e73b      	b.n	80011c2 <__gnu_unwind_execute+0xe>
 800134a:	4628      	mov	r0, r5
 800134c:	f7ff ff06 	bl	800115c <next_unwind_byte>
 8001350:	0302      	lsls	r2, r0, #12
 8001352:	f000 000f 	and.w	r0, r0, #15
 8001356:	3001      	adds	r0, #1
 8001358:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800135c:	2303      	movs	r3, #3
 800135e:	4302      	orrs	r2, r0
 8001360:	4619      	mov	r1, r3
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff fcd0 	bl	8000d08 <_Unwind_VRS_Pop>
 8001368:	2800      	cmp	r0, #0
 800136a:	f43f af2a 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 800136e:	e750      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 8001370:	4628      	mov	r0, r5
 8001372:	f7ff fef3 	bl	800115c <next_unwind_byte>
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b0e      	cmp	r3, #14
 800137c:	4602      	mov	r2, r0
 800137e:	f67f af41 	bls.w	8001204 <__gnu_unwind_execute+0x50>
 8001382:	e746      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 8001384:	f1b8 0f00 	cmp.w	r8, #0
 8001388:	d040      	beq.n	800140c <__gnu_unwind_execute+0x258>
 800138a:	2000      	movs	r0, #0
 800138c:	e742      	b.n	8001214 <__gnu_unwind_execute+0x60>
 800138e:	4628      	mov	r0, r5
 8001390:	f7ff fee4 	bl	800115c <next_unwind_byte>
 8001394:	1e43      	subs	r3, r0, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b0e      	cmp	r3, #14
 800139a:	4602      	mov	r2, r0
 800139c:	f63f af39 	bhi.w	8001212 <__gnu_unwind_execute+0x5e>
 80013a0:	2300      	movs	r3, #0
 80013a2:	2104      	movs	r1, #4
 80013a4:	4630      	mov	r0, r6
 80013a6:	f7ff fcaf 	bl	8000d08 <_Unwind_VRS_Pop>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	f43f af09 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 80013b0:	e72f      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 80013b2:	4628      	mov	r0, r5
 80013b4:	f7ff fed2 	bl	800115c <next_unwind_byte>
 80013b8:	0302      	lsls	r2, r0, #12
 80013ba:	f000 000f 	and.w	r0, r0, #15
 80013be:	3001      	adds	r0, #1
 80013c0:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80013c4:	2301      	movs	r3, #1
 80013c6:	4302      	orrs	r2, r0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4630      	mov	r0, r6
 80013cc:	f7ff fc9c 	bl	8000d08 <_Unwind_VRS_Pop>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	f43f aef6 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 80013d6:	e71c      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 80013d8:	f000 020f 	and.w	r2, r0, #15
 80013dc:	3201      	adds	r2, #1
 80013de:	2303      	movs	r3, #3
 80013e0:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 80013e4:	4619      	mov	r1, r3
 80013e6:	4630      	mov	r0, r6
 80013e8:	f7ff fc8e 	bl	8000d08 <_Unwind_VRS_Pop>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	f43f aee8 	beq.w	80011c2 <__gnu_unwind_execute+0xe>
 80013f2:	e70e      	b.n	8001212 <__gnu_unwind_execute+0x5e>
 80013f4:	4628      	mov	r0, r5
 80013f6:	f7ff feb1 	bl	800115c <next_unwind_byte>
 80013fa:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 80013fe:	f000 030f 	and.w	r3, r0, #15
 8001402:	3210      	adds	r2, #16
 8001404:	3301      	adds	r3, #1
 8001406:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800140a:	e722      	b.n	8001252 <__gnu_unwind_execute+0x9e>
 800140c:	ac03      	add	r4, sp, #12
 800140e:	4643      	mov	r3, r8
 8001410:	4641      	mov	r1, r8
 8001412:	220e      	movs	r2, #14
 8001414:	9400      	str	r4, [sp, #0]
 8001416:	4630      	mov	r0, r6
 8001418:	f7ff fa98 	bl	800094c <_Unwind_VRS_Get>
 800141c:	9400      	str	r4, [sp, #0]
 800141e:	4643      	mov	r3, r8
 8001420:	220f      	movs	r2, #15
 8001422:	4641      	mov	r1, r8
 8001424:	4630      	mov	r0, r6
 8001426:	f7ff fab7 	bl	8000998 <_Unwind_VRS_Set>
 800142a:	e7ae      	b.n	800138a <__gnu_unwind_execute+0x1d6>
 800142c:	2300      	movs	r3, #0
 800142e:	f10d 090c 	add.w	r9, sp, #12
 8001432:	220d      	movs	r2, #13
 8001434:	4619      	mov	r1, r3
 8001436:	f8cd 9000 	str.w	r9, [sp]
 800143a:	4630      	mov	r0, r6
 800143c:	f7ff fa86 	bl	800094c <_Unwind_VRS_Get>
 8001440:	4628      	mov	r0, r5
 8001442:	f7ff fe8b 	bl	800115c <next_unwind_byte>
 8001446:	0602      	lsls	r2, r0, #24
 8001448:	9c03      	ldr	r4, [sp, #12]
 800144a:	f04f 0702 	mov.w	r7, #2
 800144e:	d50b      	bpl.n	8001468 <__gnu_unwind_execute+0x2b4>
 8001450:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001454:	40b8      	lsls	r0, r7
 8001456:	4404      	add	r4, r0
 8001458:	4628      	mov	r0, r5
 800145a:	9403      	str	r4, [sp, #12]
 800145c:	f7ff fe7e 	bl	800115c <next_unwind_byte>
 8001460:	0603      	lsls	r3, r0, #24
 8001462:	f107 0707 	add.w	r7, r7, #7
 8001466:	d4f3      	bmi.n	8001450 <__gnu_unwind_execute+0x29c>
 8001468:	fa00 f207 	lsl.w	r2, r0, r7
 800146c:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001470:	4422      	add	r2, r4
 8001472:	2300      	movs	r3, #0
 8001474:	9203      	str	r2, [sp, #12]
 8001476:	f8cd 9000 	str.w	r9, [sp]
 800147a:	220d      	movs	r2, #13
 800147c:	4619      	mov	r1, r3
 800147e:	4630      	mov	r0, r6
 8001480:	f7ff fa8a 	bl	8000998 <_Unwind_VRS_Set>
 8001484:	e69d      	b.n	80011c2 <__gnu_unwind_execute+0xe>
 8001486:	bf00      	nop

08001488 <__gnu_unwind_frame>:
 8001488:	b510      	push	{r4, lr}
 800148a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800148c:	6853      	ldr	r3, [r2, #4]
 800148e:	b084      	sub	sp, #16
 8001490:	f04f 0c03 	mov.w	ip, #3
 8001494:	3208      	adds	r2, #8
 8001496:	021c      	lsls	r4, r3, #8
 8001498:	4608      	mov	r0, r1
 800149a:	0e1b      	lsrs	r3, r3, #24
 800149c:	a901      	add	r1, sp, #4
 800149e:	9401      	str	r4, [sp, #4]
 80014a0:	9202      	str	r2, [sp, #8]
 80014a2:	f88d c00c 	strb.w	ip, [sp, #12]
 80014a6:	f88d 300d 	strb.w	r3, [sp, #13]
 80014aa:	f7ff fe83 	bl	80011b4 <__gnu_unwind_execute>
 80014ae:	b004      	add	sp, #16
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop

080014b4 <_Unwind_GetRegionStart>:
 80014b4:	b508      	push	{r3, lr}
 80014b6:	f7ff fe7b 	bl	80011b0 <unwind_UCB_from_context>
 80014ba:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop

080014c0 <_Unwind_GetLanguageSpecificData>:
 80014c0:	b508      	push	{r3, lr}
 80014c2:	f7ff fe75 	bl	80011b0 <unwind_UCB_from_context>
 80014c6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80014c8:	79c3      	ldrb	r3, [r0, #7]
 80014ca:	3302      	adds	r3, #2
 80014cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop

080014d4 <__aeabi_idiv0>:
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <readReg.constprop.1>:
 *   The register number [0-3] to read from
 * 
 * @param data[out]
 *   The register value is written to this parameter
 **********************************************************/    
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 80014d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t b;
  uint32_t ack = 0;
  uint32_t ret = SWD_ERROR_OK;
   
  /* Initalize output variable */
  *data = 0;
 80014dc:	2500      	movs	r5, #0
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 80014de:	b087      	sub	sp, #28
}

void swdio_out_mode(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80014e0:	2301      	movs	r3, #1
  int A2 = reg & 0x1;
 80014e2:	f000 0801 	and.w	r8, r0, #1
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80014e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
  int A3 = (reg >> 1) & 0x1;
 80014ea:	f3c0 0440 	ubfx	r4, r0, #1, #1
  *data = 0;
 80014ee:	600d      	str	r5, [r1, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80014f0:	48a5      	ldr	r0, [pc, #660]	@ (8001788 <readReg.constprop.1+0x2b0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	9504      	str	r5, [sp, #16]
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 80014f4:	460f      	mov	r7, r1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80014f6:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80014f8:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001500:	f003 fcda 	bl	8004eb8 <HAL_GPIO_Init>
  SWD_WRITE_BIT(1);
 8001504:	48a0      	ldr	r0, [pc, #640]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001506:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150a:	2201      	movs	r2, #1
 800150c:	f003 fe12 	bl	8005134 <HAL_GPIO_WritePin>
 8001510:	489d      	ldr	r0, [pc, #628]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001512:	462a      	mov	r2, r5
 8001514:	2140      	movs	r1, #64	@ 0x40
 8001516:	f003 fe0d 	bl	8005134 <HAL_GPIO_WritePin>
 800151a:	489b      	ldr	r0, [pc, #620]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800151c:	2201      	movs	r2, #1
 800151e:	2140      	movs	r1, #64	@ 0x40
 8001520:	f003 fe08 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_ap);
 8001524:	4898      	ldr	r0, [pc, #608]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152a:	2201      	movs	r2, #1
 800152c:	f003 fe02 	bl	8005134 <HAL_GPIO_WritePin>
 8001530:	4895      	ldr	r0, [pc, #596]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001532:	462a      	mov	r2, r5
 8001534:	2140      	movs	r1, #64	@ 0x40
 8001536:	f003 fdfd 	bl	8005134 <HAL_GPIO_WritePin>
 800153a:	4893      	ldr	r0, [pc, #588]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	@ 0x40
 8001540:	f003 fdf8 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_read);
 8001544:	4890      	ldr	r0, [pc, #576]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001546:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154a:	2201      	movs	r2, #1
 800154c:	f003 fdf2 	bl	8005134 <HAL_GPIO_WritePin>
 8001550:	488d      	ldr	r0, [pc, #564]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001552:	462a      	mov	r2, r5
 8001554:	2140      	movs	r1, #64	@ 0x40
 8001556:	f003 fded 	bl	8005134 <HAL_GPIO_WritePin>
  parity = (_ap + _read + A2 + A3) & 0x1;
 800155a:	eb08 0604 	add.w	r6, r8, r4
  SWD_WRITE_BIT(_read);
 800155e:	488a      	ldr	r0, [pc, #552]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001560:	2201      	movs	r2, #1
 8001562:	2140      	movs	r1, #64	@ 0x40
 8001564:	f006 0601 	and.w	r6, r6, #1
 8001568:	f003 fde4 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A2);
 800156c:	f1b8 0f00 	cmp.w	r8, #0
 8001570:	f000 80cf 	beq.w	8001712 <readReg.constprop.1+0x23a>
 8001574:	4884      	ldr	r0, [pc, #528]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800157c:	f003 fdda 	bl	8005134 <HAL_GPIO_WritePin>
 8001580:	4881      	ldr	r0, [pc, #516]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001582:	2200      	movs	r2, #0
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	f003 fdd5 	bl	8005134 <HAL_GPIO_WritePin>
 800158a:	487f      	ldr	r0, [pc, #508]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800158c:	2201      	movs	r2, #1
 800158e:	2140      	movs	r1, #64	@ 0x40
 8001590:	f003 fdd0 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A3);
 8001594:	2c00      	cmp	r4, #0
 8001596:	f000 80b5 	beq.w	8001704 <readReg.constprop.1+0x22c>
 800159a:	487b      	ldr	r0, [pc, #492]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a2:	f003 fdc7 	bl	8005134 <HAL_GPIO_WritePin>
 80015a6:	4878      	ldr	r0, [pc, #480]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	f003 fdc2 	bl	8005134 <HAL_GPIO_WritePin>
 80015b0:	4875      	ldr	r0, [pc, #468]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	2140      	movs	r1, #64	@ 0x40
 80015b6:	f003 fdbd 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(parity);
 80015ba:	2e00      	cmp	r6, #0
 80015bc:	f000 809b 	beq.w	80016f6 <readReg.constprop.1+0x21e>
 80015c0:	4871      	ldr	r0, [pc, #452]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c8:	f003 fdb4 	bl	8005134 <HAL_GPIO_WritePin>
 80015cc:	486e      	ldr	r0, [pc, #440]	@ (8001788 <readReg.constprop.1+0x2b0>)
	  SWD_READ_BIT(b);
 80015ce:	4e6e      	ldr	r6, [pc, #440]	@ (8001788 <readReg.constprop.1+0x2b0>)
  SWD_WRITE_BIT(parity);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	f003 fdae 	bl	8005134 <HAL_GPIO_WritePin>
 80015d8:	486b      	ldr	r0, [pc, #428]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	@ 0x40
 80015de:	f003 fda9 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(0);
 80015e2:	4869      	ldr	r0, [pc, #420]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ea:	f003 fda3 	bl	8005134 <HAL_GPIO_WritePin>
 80015ee:	4866      	ldr	r0, [pc, #408]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	@ 0x40
 80015f4:	f003 fd9e 	bl	8005134 <HAL_GPIO_WritePin>
 80015f8:	4863      	ldr	r0, [pc, #396]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	f003 fd99 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(1);
 8001602:	4861      	ldr	r0, [pc, #388]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160a:	f003 fd93 	bl	8005134 <HAL_GPIO_WritePin>
 800160e:	485e      	ldr	r0, [pc, #376]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	@ 0x40
 8001614:	f003 fd8e 	bl	8005134 <HAL_GPIO_WritePin>
 8001618:	2201      	movs	r2, #1
 800161a:	485b      	ldr	r0, [pc, #364]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	f003 fd89 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001624:	f44f 7380 	mov.w	r3, #256	@ 0x100
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001628:	4857      	ldr	r0, [pc, #348]	@ (8001788 <readReg.constprop.1+0x2b0>)
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 800162a:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 800162c:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001632:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001636:	f003 fc3f 	bl	8004eb8 <HAL_GPIO_Init>
  SWCLK_CYCLE();
 800163a:	4853      	ldr	r0, [pc, #332]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800163c:	4622      	mov	r2, r4
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	f003 fd78 	bl	8005134 <HAL_GPIO_WritePin>
 8001644:	4850      	ldr	r0, [pc, #320]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	f003 fd73 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ack = 0;
 800164e:	46a0      	mov	r8, r4
  for ( i=0; i<3; i++ ) {
 8001650:	4625      	mov	r5, r4
	  SWD_READ_BIT(b);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	@ 0x40
 8001656:	4630      	mov	r0, r6
 8001658:	f003 fd6c 	bl	8005134 <HAL_GPIO_WritePin>
 800165c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001660:	4630      	mov	r0, r6
 8001662:	f003 fd61 	bl	8005128 <HAL_GPIO_ReadPin>
 8001666:	4604      	mov	r4, r0
    ack |= b << i;
 8001668:	40ac      	lsls	r4, r5
	  SWD_READ_BIT(b);
 800166a:	2201      	movs	r2, #1
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	4630      	mov	r0, r6
  for ( i=0; i<3; i++ ) {
 8001670:	3501      	adds	r5, #1
	  SWD_READ_BIT(b);
 8001672:	f003 fd5f 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<3; i++ ) {
 8001676:	2d03      	cmp	r5, #3
    ack |= b << i;
 8001678:	ea48 0804 	orr.w	r8, r8, r4
  for ( i=0; i<3; i++ ) {
 800167c:	d1e9      	bne.n	8001652 <readReg.constprop.1+0x17a>
  if ( ack == ACK_OK ) {
 800167e:	f1b8 0f01 	cmp.w	r8, #1
 8001682:	d04d      	beq.n	8001720 <readReg.constprop.1+0x248>
  else if ( ack == ACK_WAIT ) 
 8001684:	f1b8 0f02 	cmp.w	r8, #2
 8001688:	d006      	beq.n	8001698 <readReg.constprop.1+0x1c0>
    ret = SWD_ERROR_FAULT;
 800168a:	f1b8 0f04 	cmp.w	r8, #4
 800168e:	bf14      	ite	ne
 8001690:	f04f 0804 	movne.w	r8, #4
 8001694:	f04f 0803 	moveq.w	r8, #3
  SWCLK_CYCLE();
 8001698:	483b      	ldr	r0, [pc, #236]	@ (8001788 <readReg.constprop.1+0x2b0>)
    SWD_WRITE_BIT(0);
 800169a:	4d3b      	ldr	r5, [pc, #236]	@ (8001788 <readReg.constprop.1+0x2b0>)
  SWCLK_CYCLE();
 800169c:	2200      	movs	r2, #0
 800169e:	2140      	movs	r1, #64	@ 0x40
 80016a0:	f003 fd48 	bl	8005134 <HAL_GPIO_WritePin>
 80016a4:	4838      	ldr	r0, [pc, #224]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	2140      	movs	r1, #64	@ 0x40
 80016aa:	f003 fd43 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	2300      	movs	r3, #0
 80016b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016b4:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80016b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ba:	2301      	movs	r3, #1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80016bc:	4832      	ldr	r0, [pc, #200]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80016be:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f003 fbf8 	bl	8004eb8 <HAL_GPIO_Init>
  for ( i=0; i<8; i++ ) {
 80016c8:	2408      	movs	r4, #8
    SWD_WRITE_BIT(0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d0:	4628      	mov	r0, r5
 80016d2:	f003 fd2f 	bl	8005134 <HAL_GPIO_WritePin>
 80016d6:	2200      	movs	r2, #0
 80016d8:	2140      	movs	r1, #64	@ 0x40
 80016da:	4628      	mov	r0, r5
 80016dc:	f003 fd2a 	bl	8005134 <HAL_GPIO_WritePin>
 80016e0:	2201      	movs	r2, #1
 80016e2:	2140      	movs	r1, #64	@ 0x40
 80016e4:	4628      	mov	r0, r5
 80016e6:	f003 fd25 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<8; i++ ) {
 80016ea:	3c01      	subs	r4, #1
 80016ec:	d1ed      	bne.n	80016ca <readReg.constprop.1+0x1f2>
}
 80016ee:	4640      	mov	r0, r8
 80016f0:	b007      	add	sp, #28
 80016f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SWD_WRITE_BIT(parity);
 80016f6:	4824      	ldr	r0, [pc, #144]	@ (8001788 <readReg.constprop.1+0x2b0>)
 80016f8:	4632      	mov	r2, r6
 80016fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016fe:	f003 fd19 	bl	8005134 <HAL_GPIO_WritePin>
 8001702:	e763      	b.n	80015cc <readReg.constprop.1+0xf4>
  SWD_WRITE_BIT(A3);
 8001704:	4820      	ldr	r0, [pc, #128]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001706:	4622      	mov	r2, r4
 8001708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170c:	f003 fd12 	bl	8005134 <HAL_GPIO_WritePin>
 8001710:	e749      	b.n	80015a6 <readReg.constprop.1+0xce>
  SWD_WRITE_BIT(A2);
 8001712:	481d      	ldr	r0, [pc, #116]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001714:	4642      	mov	r2, r8
 8001716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171a:	f003 fd0b 	bl	8005134 <HAL_GPIO_WritePin>
 800171e:	e72f      	b.n	8001580 <readReg.constprop.1+0xa8>
  uint32_t cb = 0;
 8001720:	f04f 0900 	mov.w	r9, #0
    	SWD_READ_BIT(b);
 8001724:	4e18      	ldr	r6, [pc, #96]	@ (8001788 <readReg.constprop.1+0x2b0>)
    for ( i=0; i<32; i++ ) 
 8001726:	464d      	mov	r5, r9
    	SWD_READ_BIT(b);
 8001728:	2200      	movs	r2, #0
 800172a:	2140      	movs	r1, #64	@ 0x40
 800172c:	4630      	mov	r0, r6
 800172e:	f003 fd01 	bl	8005134 <HAL_GPIO_WritePin>
 8001732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001736:	4630      	mov	r0, r6
 8001738:	f003 fcf6 	bl	8005128 <HAL_GPIO_ReadPin>
 800173c:	2201      	movs	r2, #1
 800173e:	4604      	mov	r4, r0
 8001740:	2140      	movs	r1, #64	@ 0x40
 8001742:	4630      	mov	r0, r6
 8001744:	f003 fcf6 	bl	8005134 <HAL_GPIO_WritePin>
      *data |= b << i;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	fa04 f205 	lsl.w	r2, r4, r5
 800174e:	4313      	orrs	r3, r2
 8001750:	3501      	adds	r5, #1
 8001752:	603b      	str	r3, [r7, #0]
      if ( b ) cb = !cb;
 8001754:	b10c      	cbz	r4, 800175a <readReg.constprop.1+0x282>
 8001756:	f089 0901 	eor.w	r9, r9, #1
    for ( i=0; i<32; i++ ) 
 800175a:	2d20      	cmp	r5, #32
 800175c:	d1e4      	bne.n	8001728 <readReg.constprop.1+0x250>
    SWD_READ_BIT(parity);
 800175e:	2200      	movs	r2, #0
 8001760:	4809      	ldr	r0, [pc, #36]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001762:	2140      	movs	r1, #64	@ 0x40
 8001764:	f003 fce6 	bl	8005134 <HAL_GPIO_WritePin>
 8001768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176c:	4806      	ldr	r0, [pc, #24]	@ (8001788 <readReg.constprop.1+0x2b0>)
 800176e:	f003 fcdb 	bl	8005128 <HAL_GPIO_ReadPin>
 8001772:	2201      	movs	r2, #1
      ret = SWD_ERROR_PARITY;
 8001774:	4548      	cmp	r0, r9
 8001776:	bf18      	it	ne
 8001778:	f04f 0805 	movne.w	r8, #5
    SWD_READ_BIT(parity);
 800177c:	2140      	movs	r1, #64	@ 0x40
 800177e:	4802      	ldr	r0, [pc, #8]	@ (8001788 <readReg.constprop.1+0x2b0>)
 8001780:	f003 fcd8 	bl	8005134 <HAL_GPIO_WritePin>
    if ( cb == parity ) 
 8001784:	e788      	b.n	8001698 <readReg.constprop.1+0x1c0>
 8001786:	bf00      	nop
 8001788:	40020400 	.word	0x40020400

0800178c <readReg.constprop.0>:
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 800178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *data = 0;
 8001790:	2400      	movs	r4, #0
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 8001792:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001794:	2301      	movs	r3, #1
  int A2 = reg & 0x1;
 8001796:	f000 0801 	and.w	r8, r0, #1
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 800179a:	f44f 7280 	mov.w	r2, #256	@ 0x100
  int A3 = (reg >> 1) & 0x1;
 800179e:	f3c0 0540 	ubfx	r5, r0, #1, #1
  *data = 0;
 80017a2:	600c      	str	r4, [r1, #0]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80017a4:	48a5      	ldr	r0, [pc, #660]	@ (8001a3c <readReg.constprop.0+0x2b0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	9404      	str	r4, [sp, #16]
static uint32_t readReg(bool ap, int reg, uint32_t *data)
 80017a8:	460f      	mov	r7, r1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80017aa:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80017ac:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f003 fb80 	bl	8004eb8 <HAL_GPIO_Init>
  SWD_WRITE_BIT(1);
 80017b8:	48a0      	ldr	r0, [pc, #640]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017be:	2201      	movs	r2, #1
 80017c0:	f003 fcb8 	bl	8005134 <HAL_GPIO_WritePin>
 80017c4:	489d      	ldr	r0, [pc, #628]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017c6:	4622      	mov	r2, r4
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	f003 fcb3 	bl	8005134 <HAL_GPIO_WritePin>
 80017ce:	489b      	ldr	r0, [pc, #620]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017d0:	2140      	movs	r1, #64	@ 0x40
 80017d2:	2201      	movs	r2, #1
 80017d4:	f003 fcae 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_ap);
 80017d8:	4898      	ldr	r0, [pc, #608]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017da:	4622      	mov	r2, r4
 80017dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017e0:	f003 fca8 	bl	8005134 <HAL_GPIO_WritePin>
 80017e4:	4895      	ldr	r0, [pc, #596]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017e6:	4622      	mov	r2, r4
 80017e8:	2140      	movs	r1, #64	@ 0x40
 80017ea:	f003 fca3 	bl	8005134 <HAL_GPIO_WritePin>
 80017ee:	4893      	ldr	r0, [pc, #588]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	@ 0x40
 80017f4:	f003 fc9e 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_read);
 80017f8:	4890      	ldr	r0, [pc, #576]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80017fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017fe:	2201      	movs	r2, #1
 8001800:	f003 fc98 	bl	8005134 <HAL_GPIO_WritePin>
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001804:	f108 0601 	add.w	r6, r8, #1
  SWD_WRITE_BIT(_read);
 8001808:	488c      	ldr	r0, [pc, #560]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 800180a:	4622      	mov	r2, r4
 800180c:	2140      	movs	r1, #64	@ 0x40
 800180e:	f003 fc91 	bl	8005134 <HAL_GPIO_WritePin>
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001812:	442e      	add	r6, r5
  SWD_WRITE_BIT(_read);
 8001814:	4889      	ldr	r0, [pc, #548]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001816:	2201      	movs	r2, #1
 8001818:	2140      	movs	r1, #64	@ 0x40
 800181a:	f006 0601 	and.w	r6, r6, #1
 800181e:	f003 fc89 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A2);
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	f000 80cf 	beq.w	80019c8 <readReg.constprop.0+0x23c>
 800182a:	4884      	ldr	r0, [pc, #528]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001832:	f003 fc7f 	bl	8005134 <HAL_GPIO_WritePin>
 8001836:	4881      	ldr	r0, [pc, #516]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001838:	2200      	movs	r2, #0
 800183a:	2140      	movs	r1, #64	@ 0x40
 800183c:	f003 fc7a 	bl	8005134 <HAL_GPIO_WritePin>
 8001840:	487e      	ldr	r0, [pc, #504]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001842:	2201      	movs	r2, #1
 8001844:	2140      	movs	r1, #64	@ 0x40
 8001846:	f003 fc75 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A3);
 800184a:	2d00      	cmp	r5, #0
 800184c:	f000 80b5 	beq.w	80019ba <readReg.constprop.0+0x22e>
 8001850:	487a      	ldr	r0, [pc, #488]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001858:	f003 fc6c 	bl	8005134 <HAL_GPIO_WritePin>
 800185c:	4877      	ldr	r0, [pc, #476]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 800185e:	2200      	movs	r2, #0
 8001860:	2140      	movs	r1, #64	@ 0x40
 8001862:	f003 fc67 	bl	8005134 <HAL_GPIO_WritePin>
 8001866:	4875      	ldr	r0, [pc, #468]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001868:	2201      	movs	r2, #1
 800186a:	2140      	movs	r1, #64	@ 0x40
 800186c:	f003 fc62 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(parity);
 8001870:	2e00      	cmp	r6, #0
 8001872:	f000 809b 	beq.w	80019ac <readReg.constprop.0+0x220>
 8001876:	4871      	ldr	r0, [pc, #452]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800187e:	f003 fc59 	bl	8005134 <HAL_GPIO_WritePin>
 8001882:	486e      	ldr	r0, [pc, #440]	@ (8001a3c <readReg.constprop.0+0x2b0>)
	  SWD_READ_BIT(b);
 8001884:	4e6d      	ldr	r6, [pc, #436]	@ (8001a3c <readReg.constprop.0+0x2b0>)
  SWD_WRITE_BIT(parity);
 8001886:	2200      	movs	r2, #0
 8001888:	2140      	movs	r1, #64	@ 0x40
 800188a:	f003 fc53 	bl	8005134 <HAL_GPIO_WritePin>
 800188e:	486b      	ldr	r0, [pc, #428]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001890:	2201      	movs	r2, #1
 8001892:	2140      	movs	r1, #64	@ 0x40
 8001894:	f003 fc4e 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(0);
 8001898:	4868      	ldr	r0, [pc, #416]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a0:	f003 fc48 	bl	8005134 <HAL_GPIO_WritePin>
 80018a4:	4865      	ldr	r0, [pc, #404]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	f003 fc43 	bl	8005134 <HAL_GPIO_WritePin>
 80018ae:	4863      	ldr	r0, [pc, #396]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	f003 fc3e 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(1);
 80018b8:	4860      	ldr	r0, [pc, #384]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c0:	f003 fc38 	bl	8005134 <HAL_GPIO_WritePin>
 80018c4:	485d      	ldr	r0, [pc, #372]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	2140      	movs	r1, #64	@ 0x40
 80018ca:	f003 fc33 	bl	8005134 <HAL_GPIO_WritePin>
 80018ce:	2201      	movs	r2, #1
 80018d0:	485a      	ldr	r0, [pc, #360]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018d2:	2140      	movs	r1, #64	@ 0x40
 80018d4:	f003 fc2e 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80018da:	f44f 7380 	mov.w	r3, #256	@ 0x100
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80018de:	4857      	ldr	r0, [pc, #348]	@ (8001a3c <readReg.constprop.0+0x2b0>)
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80018e0:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80018e2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80018e8:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f003 fae4 	bl	8004eb8 <HAL_GPIO_Init>
  SWCLK_CYCLE();
 80018f0:	4852      	ldr	r0, [pc, #328]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018f2:	4622      	mov	r2, r4
 80018f4:	2140      	movs	r1, #64	@ 0x40
 80018f6:	f003 fc1d 	bl	8005134 <HAL_GPIO_WritePin>
 80018fa:	4850      	ldr	r0, [pc, #320]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	2140      	movs	r1, #64	@ 0x40
 8001900:	f003 fc18 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ack = 0;
 8001904:	46a0      	mov	r8, r4
  for ( i=0; i<3; i++ ) {
 8001906:	4625      	mov	r5, r4
	  SWD_READ_BIT(b);
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	@ 0x40
 800190c:	4630      	mov	r0, r6
 800190e:	f003 fc11 	bl	8005134 <HAL_GPIO_WritePin>
 8001912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001916:	4630      	mov	r0, r6
 8001918:	f003 fc06 	bl	8005128 <HAL_GPIO_ReadPin>
 800191c:	4604      	mov	r4, r0
    ack |= b << i;
 800191e:	40ac      	lsls	r4, r5
	  SWD_READ_BIT(b);
 8001920:	2201      	movs	r2, #1
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	4630      	mov	r0, r6
  for ( i=0; i<3; i++ ) {
 8001926:	3501      	adds	r5, #1
	  SWD_READ_BIT(b);
 8001928:	f003 fc04 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<3; i++ ) {
 800192c:	2d03      	cmp	r5, #3
    ack |= b << i;
 800192e:	ea48 0804 	orr.w	r8, r8, r4
  for ( i=0; i<3; i++ ) {
 8001932:	d1e9      	bne.n	8001908 <readReg.constprop.0+0x17c>
  if ( ack == ACK_OK ) {
 8001934:	f1b8 0f01 	cmp.w	r8, #1
 8001938:	d04d      	beq.n	80019d6 <readReg.constprop.0+0x24a>
  else if ( ack == ACK_WAIT ) 
 800193a:	f1b8 0f02 	cmp.w	r8, #2
 800193e:	d006      	beq.n	800194e <readReg.constprop.0+0x1c2>
    ret = SWD_ERROR_FAULT;
 8001940:	f1b8 0f04 	cmp.w	r8, #4
 8001944:	bf14      	ite	ne
 8001946:	f04f 0804 	movne.w	r8, #4
 800194a:	f04f 0803 	moveq.w	r8, #3
  SWCLK_CYCLE();
 800194e:	483b      	ldr	r0, [pc, #236]	@ (8001a3c <readReg.constprop.0+0x2b0>)
    SWD_WRITE_BIT(0);
 8001950:	4d3a      	ldr	r5, [pc, #232]	@ (8001a3c <readReg.constprop.0+0x2b0>)
  SWCLK_CYCLE();
 8001952:	2200      	movs	r2, #0
 8001954:	2140      	movs	r1, #64	@ 0x40
 8001956:	f003 fbed 	bl	8005134 <HAL_GPIO_WritePin>
 800195a:	4838      	ldr	r0, [pc, #224]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 800195c:	2201      	movs	r2, #1
 800195e:	2140      	movs	r1, #64	@ 0x40
 8001960:	f003 fbe8 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	2300      	movs	r3, #0
 8001966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800196a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 800196c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001970:	2301      	movs	r3, #1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001972:	4832      	ldr	r0, [pc, #200]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001974:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001976:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 800197a:	f003 fa9d 	bl	8004eb8 <HAL_GPIO_Init>
  for ( i=0; i<8; i++ ) {
 800197e:	2408      	movs	r4, #8
    SWD_WRITE_BIT(0);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001986:	4628      	mov	r0, r5
 8001988:	f003 fbd4 	bl	8005134 <HAL_GPIO_WritePin>
 800198c:	2200      	movs	r2, #0
 800198e:	2140      	movs	r1, #64	@ 0x40
 8001990:	4628      	mov	r0, r5
 8001992:	f003 fbcf 	bl	8005134 <HAL_GPIO_WritePin>
 8001996:	2201      	movs	r2, #1
 8001998:	2140      	movs	r1, #64	@ 0x40
 800199a:	4628      	mov	r0, r5
 800199c:	f003 fbca 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<8; i++ ) {
 80019a0:	3c01      	subs	r4, #1
 80019a2:	d1ed      	bne.n	8001980 <readReg.constprop.0+0x1f4>
}
 80019a4:	4640      	mov	r0, r8
 80019a6:	b007      	add	sp, #28
 80019a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SWD_WRITE_BIT(parity);
 80019ac:	4823      	ldr	r0, [pc, #140]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80019ae:	4632      	mov	r2, r6
 80019b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b4:	f003 fbbe 	bl	8005134 <HAL_GPIO_WritePin>
 80019b8:	e763      	b.n	8001882 <readReg.constprop.0+0xf6>
  SWD_WRITE_BIT(A3);
 80019ba:	4820      	ldr	r0, [pc, #128]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80019bc:	462a      	mov	r2, r5
 80019be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c2:	f003 fbb7 	bl	8005134 <HAL_GPIO_WritePin>
 80019c6:	e749      	b.n	800185c <readReg.constprop.0+0xd0>
  SWD_WRITE_BIT(A2);
 80019c8:	481c      	ldr	r0, [pc, #112]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 80019ca:	4642      	mov	r2, r8
 80019cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d0:	f003 fbb0 	bl	8005134 <HAL_GPIO_WritePin>
 80019d4:	e72f      	b.n	8001836 <readReg.constprop.0+0xaa>
  uint32_t cb = 0;
 80019d6:	f04f 0900 	mov.w	r9, #0
    	SWD_READ_BIT(b);
 80019da:	4e18      	ldr	r6, [pc, #96]	@ (8001a3c <readReg.constprop.0+0x2b0>)
    for ( i=0; i<32; i++ ) 
 80019dc:	464d      	mov	r5, r9
    	SWD_READ_BIT(b);
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	@ 0x40
 80019e2:	4630      	mov	r0, r6
 80019e4:	f003 fba6 	bl	8005134 <HAL_GPIO_WritePin>
 80019e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ec:	4630      	mov	r0, r6
 80019ee:	f003 fb9b 	bl	8005128 <HAL_GPIO_ReadPin>
 80019f2:	2201      	movs	r2, #1
 80019f4:	4604      	mov	r4, r0
 80019f6:	2140      	movs	r1, #64	@ 0x40
 80019f8:	4630      	mov	r0, r6
 80019fa:	f003 fb9b 	bl	8005134 <HAL_GPIO_WritePin>
      *data |= b << i;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	fa04 f205 	lsl.w	r2, r4, r5
 8001a04:	4313      	orrs	r3, r2
 8001a06:	3501      	adds	r5, #1
 8001a08:	603b      	str	r3, [r7, #0]
      if ( b ) cb = !cb;
 8001a0a:	b10c      	cbz	r4, 8001a10 <readReg.constprop.0+0x284>
 8001a0c:	f089 0901 	eor.w	r9, r9, #1
    for ( i=0; i<32; i++ ) 
 8001a10:	2d20      	cmp	r5, #32
 8001a12:	d1e4      	bne.n	80019de <readReg.constprop.0+0x252>
    SWD_READ_BIT(parity);
 8001a14:	2200      	movs	r2, #0
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001a18:	2140      	movs	r1, #64	@ 0x40
 8001a1a:	f003 fb8b 	bl	8005134 <HAL_GPIO_WritePin>
 8001a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001a24:	f003 fb80 	bl	8005128 <HAL_GPIO_ReadPin>
 8001a28:	2201      	movs	r2, #1
      ret = SWD_ERROR_PARITY;
 8001a2a:	4548      	cmp	r0, r9
 8001a2c:	bf18      	it	ne
 8001a2e:	f04f 0805 	movne.w	r8, #5
    SWD_READ_BIT(parity);
 8001a32:	2140      	movs	r1, #64	@ 0x40
 8001a34:	4801      	ldr	r0, [pc, #4]	@ (8001a3c <readReg.constprop.0+0x2b0>)
 8001a36:	f003 fb7d 	bl	8005134 <HAL_GPIO_WritePin>
    if ( cb == parity ) 
 8001a3a:	e788      	b.n	800194e <readReg.constprop.0+0x1c2>
 8001a3c:	40020400 	.word	0x40020400

08001a40 <writeReg.constprop.0>:
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
 8001a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a44:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001a46:	2301      	movs	r3, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	2400      	movs	r4, #0
  int A2 = reg & 0x1;
 8001a4a:	f000 0701 	and.w	r7, r0, #1
  int A3 = (reg >> 1) & 0x1;
 8001a4e:	f3c0 0540 	ubfx	r5, r0, #1, #1
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
 8001a52:	4688      	mov	r8, r1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001a54:	48b5      	ldr	r0, [pc, #724]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001a58:	4669      	mov	r1, sp
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
 8001a5a:	4691      	mov	r9, r2
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a60:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	e9cd 4402 	strd	r4, r4, [sp, #8]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f003 fa26 	bl	8004eb8 <HAL_GPIO_Init>
  SWD_WRITE_BIT(1);
 8001a6c:	48af      	ldr	r0, [pc, #700]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001a6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a72:	2201      	movs	r2, #1
 8001a74:	f003 fb5e 	bl	8005134 <HAL_GPIO_WritePin>
 8001a78:	48ac      	ldr	r0, [pc, #688]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	2140      	movs	r1, #64	@ 0x40
 8001a7e:	f003 fb59 	bl	8005134 <HAL_GPIO_WritePin>
 8001a82:	48aa      	ldr	r0, [pc, #680]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001a84:	2140      	movs	r1, #64	@ 0x40
 8001a86:	2201      	movs	r2, #1
 8001a88:	f003 fb54 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_ap);
 8001a8c:	48a7      	ldr	r0, [pc, #668]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001a8e:	4622      	mov	r2, r4
 8001a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a94:	f003 fb4e 	bl	8005134 <HAL_GPIO_WritePin>
 8001a98:	48a4      	ldr	r0, [pc, #656]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	2140      	movs	r1, #64	@ 0x40
 8001a9e:	f003 fb49 	bl	8005134 <HAL_GPIO_WritePin>
 8001aa2:	48a2      	ldr	r0, [pc, #648]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001aa4:	2140      	movs	r1, #64	@ 0x40
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f003 fb44 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_read);
 8001aac:	489f      	ldr	r0, [pc, #636]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001aae:	4622      	mov	r2, r4
 8001ab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ab4:	f003 fb3e 	bl	8005134 <HAL_GPIO_WritePin>
 8001ab8:	489c      	ldr	r0, [pc, #624]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001aba:	4622      	mov	r2, r4
 8001abc:	2140      	movs	r1, #64	@ 0x40
 8001abe:	f003 fb39 	bl	8005134 <HAL_GPIO_WritePin>
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001ac2:	197e      	adds	r6, r7, r5
  SWD_WRITE_BIT(_read);
 8001ac4:	4899      	ldr	r0, [pc, #612]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	f006 0601 	and.w	r6, r6, #1
 8001ace:	f003 fb31 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A2);
 8001ad2:	2f00      	cmp	r7, #0
 8001ad4:	f000 8115 	beq.w	8001d02 <writeReg.constprop.0+0x2c2>
 8001ad8:	4894      	ldr	r0, [pc, #592]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae0:	f003 fb28 	bl	8005134 <HAL_GPIO_WritePin>
 8001ae4:	4891      	ldr	r0, [pc, #580]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2140      	movs	r1, #64	@ 0x40
 8001aea:	f003 fb23 	bl	8005134 <HAL_GPIO_WritePin>
 8001aee:	488f      	ldr	r0, [pc, #572]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	2140      	movs	r1, #64	@ 0x40
 8001af4:	f003 fb1e 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A3);
 8001af8:	2d00      	cmp	r5, #0
 8001afa:	f000 8109 	beq.w	8001d10 <writeReg.constprop.0+0x2d0>
 8001afe:	488b      	ldr	r0, [pc, #556]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b06:	f003 fb15 	bl	8005134 <HAL_GPIO_WritePin>
 8001b0a:	4888      	ldr	r0, [pc, #544]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2140      	movs	r1, #64	@ 0x40
 8001b10:	f003 fb10 	bl	8005134 <HAL_GPIO_WritePin>
 8001b14:	4885      	ldr	r0, [pc, #532]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	2140      	movs	r1, #64	@ 0x40
 8001b1a:	f003 fb0b 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(parity);
 8001b1e:	2e00      	cmp	r6, #0
 8001b20:	f000 80fd 	beq.w	8001d1e <writeReg.constprop.0+0x2de>
 8001b24:	4881      	ldr	r0, [pc, #516]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b2c:	f003 fb02 	bl	8005134 <HAL_GPIO_WritePin>
 8001b30:	487e      	ldr	r0, [pc, #504]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	  SWD_READ_BIT(b);
 8001b32:	4f7e      	ldr	r7, [pc, #504]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
  SWD_WRITE_BIT(parity);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2140      	movs	r1, #64	@ 0x40
 8001b38:	f003 fafc 	bl	8005134 <HAL_GPIO_WritePin>
 8001b3c:	487b      	ldr	r0, [pc, #492]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2140      	movs	r1, #64	@ 0x40
 8001b42:	f003 faf7 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(0);
 8001b46:	4879      	ldr	r0, [pc, #484]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b4e:	f003 faf1 	bl	8005134 <HAL_GPIO_WritePin>
 8001b52:	4876      	ldr	r0, [pc, #472]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	2140      	movs	r1, #64	@ 0x40
 8001b58:	f003 faec 	bl	8005134 <HAL_GPIO_WritePin>
 8001b5c:	4873      	ldr	r0, [pc, #460]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2140      	movs	r1, #64	@ 0x40
 8001b62:	f003 fae7 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(1);
 8001b66:	4871      	ldr	r0, [pc, #452]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b6e:	f003 fae1 	bl	8005134 <HAL_GPIO_WritePin>
 8001b72:	486e      	ldr	r0, [pc, #440]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	2140      	movs	r1, #64	@ 0x40
 8001b78:	f003 fadc 	bl	8005134 <HAL_GPIO_WritePin>
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	486b      	ldr	r0, [pc, #428]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001b80:	2140      	movs	r1, #64	@ 0x40
 8001b82:	f003 fad7 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	4867      	ldr	r0, [pc, #412]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001b8e:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001b90:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001b96:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f003 f98d 	bl	8004eb8 <HAL_GPIO_Init>
  SWCLK_CYCLE();
 8001b9e:	4863      	ldr	r0, [pc, #396]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	2140      	movs	r1, #64	@ 0x40
 8001ba4:	f003 fac6 	bl	8005134 <HAL_GPIO_WritePin>
 8001ba8:	4860      	ldr	r0, [pc, #384]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	f003 fac1 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ack = 0;
 8001bb2:	4626      	mov	r6, r4
  for ( i=0; i<3; i++ ) {
 8001bb4:	4625      	mov	r5, r4
	  SWD_READ_BIT(b);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2140      	movs	r1, #64	@ 0x40
 8001bba:	4638      	mov	r0, r7
 8001bbc:	f003 faba 	bl	8005134 <HAL_GPIO_WritePin>
 8001bc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	f003 faaf 	bl	8005128 <HAL_GPIO_ReadPin>
 8001bca:	4604      	mov	r4, r0
    ack |= b << i;
 8001bcc:	40ac      	lsls	r4, r5
	  SWD_READ_BIT(b);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2140      	movs	r1, #64	@ 0x40
 8001bd2:	4638      	mov	r0, r7
  for ( i=0; i<3; i++ ) {
 8001bd4:	3501      	adds	r5, #1
	  SWD_READ_BIT(b);
 8001bd6:	f003 faad 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<3; i++ ) {
 8001bda:	2d03      	cmp	r5, #3
    ack |= b << i;
 8001bdc:	ea46 0604 	orr.w	r6, r6, r4
  for ( i=0; i<3; i++ ) {
 8001be0:	d1e9      	bne.n	8001bb6 <writeReg.constprop.0+0x176>
  if ( ack == ACK_OK || ignoreAck ) 
 8001be2:	2e01      	cmp	r6, #1
 8001be4:	d002      	beq.n	8001bec <writeReg.constprop.0+0x1ac>
 8001be6:	f1b9 0f00 	cmp.w	r9, #0
 8001bea:	d059      	beq.n	8001ca0 <writeReg.constprop.0+0x260>
    SWCLK_CYCLE();
 8001bec:	484f      	ldr	r0, [pc, #316]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
      SWD_WRITE_BIT(b);
 8001bee:	4e4f      	ldr	r6, [pc, #316]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
    SWCLK_CYCLE();
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	f003 fa9e 	bl	8005134 <HAL_GPIO_WritePin>
 8001bf8:	484c      	ldr	r0, [pc, #304]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2140      	movs	r1, #64	@ 0x40
 8001bfe:	f003 fa99 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	2700      	movs	r7, #0
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c08:	2301      	movs	r3, #1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	4848      	ldr	r0, [pc, #288]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	e9cd 7702 	strd	r7, r7, [sp, #8]
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001c14:	e9cd 2300 	strd	r2, r3, [sp]
    for ( i=0; i<32; i++ ) {
 8001c18:	463d      	mov	r5, r7
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f003 f94d 	bl	8004eb8 <HAL_GPIO_Init>
    for ( i=0; i<32; i++ ) {
 8001c1e:	e010      	b.n	8001c42 <writeReg.constprop.0+0x202>
      SWD_WRITE_BIT(b);
 8001c20:	f003 fa88 	bl	8005134 <HAL_GPIO_WritePin>
 8001c24:	2200      	movs	r2, #0
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f003 fa83 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 8001c2e:	3501      	adds	r5, #1
      SWD_WRITE_BIT(b);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	4630      	mov	r0, r6
 8001c36:	f003 fa7d 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 8001c3a:	2d20      	cmp	r5, #32
 8001c3c:	f087 0701 	eor.w	r7, r7, #1
 8001c40:	d01a      	beq.n	8001c78 <writeReg.constprop.0+0x238>
      SWD_WRITE_BIT(b);
 8001c42:	2201      	movs	r2, #1
      b = (data >> i) & 0x1;
 8001c44:	fa28 f305 	lsr.w	r3, r8, r5
      SWD_WRITE_BIT(b);
 8001c48:	ea13 0402 	ands.w	r4, r3, r2
 8001c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c50:	4630      	mov	r0, r6
 8001c52:	d1e5      	bne.n	8001c20 <writeReg.constprop.0+0x1e0>
 8001c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f003 fa6b 	bl	8005134 <HAL_GPIO_WritePin>
 8001c5e:	4622      	mov	r2, r4
 8001c60:	2140      	movs	r1, #64	@ 0x40
 8001c62:	4630      	mov	r0, r6
 8001c64:	f003 fa66 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 8001c68:	3501      	adds	r5, #1
      SWD_WRITE_BIT(b);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2140      	movs	r1, #64	@ 0x40
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f003 fa60 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 8001c74:	2d20      	cmp	r5, #32
 8001c76:	d1e4      	bne.n	8001c42 <writeReg.constprop.0+0x202>
    SWD_WRITE_BIT(parity);
 8001c78:	482c      	ldr	r0, [pc, #176]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001c7a:	2f00      	cmp	r7, #0
 8001c7c:	d13b      	bne.n	8001cf6 <writeReg.constprop.0+0x2b6>
 8001c7e:	463a      	mov	r2, r7
 8001c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c84:	f003 fa56 	bl	8005134 <HAL_GPIO_WritePin>
 8001c88:	4828      	ldr	r0, [pc, #160]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2140      	movs	r1, #64	@ 0x40
 8001c8e:	f003 fa51 	bl	8005134 <HAL_GPIO_WritePin>
 8001c92:	4826      	ldr	r0, [pc, #152]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	2140      	movs	r1, #64	@ 0x40
 8001c98:	f003 fa4c 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ret = SWD_ERROR_OK;
 8001c9c:	2601      	movs	r6, #1
    SWD_WRITE_BIT(parity);
 8001c9e:	e005      	b.n	8001cac <writeReg.constprop.0+0x26c>
  else if ( ack == ACK_WAIT ) 
 8001ca0:	2e02      	cmp	r6, #2
 8001ca2:	d003      	beq.n	8001cac <writeReg.constprop.0+0x26c>
    ret = SWD_ERROR_FAULT;
 8001ca4:	2e04      	cmp	r6, #4
 8001ca6:	bf14      	ite	ne
 8001ca8:	2604      	movne	r6, #4
 8001caa:	2603      	moveq	r6, #3
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	2300      	movs	r3, #0
 8001cae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001cb2:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb8:	2301      	movs	r3, #1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001cba:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	  SWD_WRITE_BIT(0);
 8001cbc:	4d1b      	ldr	r5, [pc, #108]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001cc0:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f003 f8f8 	bl	8004eb8 <HAL_GPIO_Init>
  for ( i=0; i<8; i++ ) {
 8001cc8:	2408      	movs	r4, #8
	  SWD_WRITE_BIT(0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f003 fa2f 	bl	8005134 <HAL_GPIO_WritePin>
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f003 fa2a 	bl	8005134 <HAL_GPIO_WritePin>
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2140      	movs	r1, #64	@ 0x40
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f003 fa25 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<8; i++ ) {
 8001cea:	3c01      	subs	r4, #1
 8001cec:	d1ed      	bne.n	8001cca <writeReg.constprop.0+0x28a>
}
 8001cee:	4630      	mov	r0, r6
 8001cf0:	b007      	add	sp, #28
 8001cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SWD_WRITE_BIT(parity);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cfc:	f003 fa1a 	bl	8005134 <HAL_GPIO_WritePin>
 8001d00:	e7c2      	b.n	8001c88 <writeReg.constprop.0+0x248>
  SWD_WRITE_BIT(A2);
 8001d02:	480a      	ldr	r0, [pc, #40]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001d04:	463a      	mov	r2, r7
 8001d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d0a:	f003 fa13 	bl	8005134 <HAL_GPIO_WritePin>
 8001d0e:	e6e9      	b.n	8001ae4 <writeReg.constprop.0+0xa4>
  SWD_WRITE_BIT(A3);
 8001d10:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001d12:	462a      	mov	r2, r5
 8001d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d18:	f003 fa0c 	bl	8005134 <HAL_GPIO_WritePin>
 8001d1c:	e6f5      	b.n	8001b0a <writeReg.constprop.0+0xca>
  SWD_WRITE_BIT(parity);
 8001d1e:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <writeReg.constprop.0+0x2ec>)
 8001d20:	4632      	mov	r2, r6
 8001d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d26:	f003 fa05 	bl	8005134 <HAL_GPIO_WritePin>
 8001d2a:	e701      	b.n	8001b30 <writeReg.constprop.0+0xf0>
 8001d2c:	40020400 	.word	0x40020400

08001d30 <JTAG_to_SWD_Sequence>:
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	2300      	movs	r3, #0
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001d36:	4834      	ldr	r0, [pc, #208]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001d3c:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001d40:	2501      	movs	r5, #1
 8001d42:	e9cd 4500 	strd	r4, r5, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f003 f8b5 	bl	8004eb8 <HAL_GPIO_Init>
  SWDIO_OUT(1);
 8001d4e:	482e      	ldr	r0, [pc, #184]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
    SWCLK_CYCLE();
 8001d50:	4d2d      	ldr	r5, [pc, #180]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
  SWDIO_OUT(1);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d58:	f003 f9ec 	bl	8005134 <HAL_GPIO_WritePin>
 8001d5c:	243c      	movs	r4, #60	@ 0x3c
    SWCLK_CYCLE();
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	@ 0x40
 8001d62:	4628      	mov	r0, r5
 8001d64:	f003 f9e6 	bl	8005134 <HAL_GPIO_WritePin>
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2140      	movs	r1, #64	@ 0x40
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	f003 f9e1 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<60; i++ ) {
 8001d72:	3c01      	subs	r4, #1
 8001d74:	d1f3      	bne.n	8001d5e <JTAG_to_SWD_Sequence+0x2e>
    SWD_WRITE_BIT(b);
 8001d76:	4e24      	ldr	r6, [pc, #144]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
    b = (JTAG2SWD >> i) & 0x1;
 8001d78:	f24e 779e 	movw	r7, #59294	@ 0xe79e
    SWD_WRITE_BIT(b);
 8001d7c:	2201      	movs	r2, #1
    b = (JTAG2SWD >> i) & 0x1;
 8001d7e:	fa47 f304 	asr.w	r3, r7, r4
    SWD_WRITE_BIT(b);
 8001d82:	ea13 0502 	ands.w	r5, r3, r2
 8001d86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	d102      	bne.n	8001d94 <JTAG_to_SWD_Sequence+0x64>
 8001d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d92:	462a      	mov	r2, r5
 8001d94:	f003 f9ce 	bl	8005134 <HAL_GPIO_WritePin>
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	f003 f9c9 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<16; i++ ) {
 8001da2:	3401      	adds	r4, #1
    SWD_WRITE_BIT(b);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2140      	movs	r1, #64	@ 0x40
 8001da8:	4630      	mov	r0, r6
 8001daa:	f003 f9c3 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<16; i++ ) {
 8001dae:	2c10      	cmp	r4, #16
 8001db0:	d1e4      	bne.n	8001d7c <JTAG_to_SWD_Sequence+0x4c>
  SWDIO_OUT(1);
 8001db2:	4815      	ldr	r0, [pc, #84]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
    SWCLK_CYCLE();
 8001db4:	4d14      	ldr	r5, [pc, #80]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
  SWDIO_OUT(1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dbc:	f003 f9ba 	bl	8005134 <HAL_GPIO_WritePin>
 8001dc0:	243c      	movs	r4, #60	@ 0x3c
    SWCLK_CYCLE();
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	@ 0x40
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f003 f9b4 	bl	8005134 <HAL_GPIO_WritePin>
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2140      	movs	r1, #64	@ 0x40
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f003 f9af 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<60; i++ ) {
 8001dd6:	3c01      	subs	r4, #1
 8001dd8:	d1f3      	bne.n	8001dc2 <JTAG_to_SWD_Sequence+0x92>
  SWDIO_OUT(0);
 8001dda:	4622      	mov	r2, r4
 8001ddc:	480a      	ldr	r0, [pc, #40]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
    SWCLK_CYCLE();
 8001dde:	4d0a      	ldr	r5, [pc, #40]	@ (8001e08 <JTAG_to_SWD_Sequence+0xd8>)
  SWDIO_OUT(0);
 8001de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de4:	f003 f9a6 	bl	8005134 <HAL_GPIO_WritePin>
 8001de8:	2410      	movs	r4, #16
    SWCLK_CYCLE();
 8001dea:	2200      	movs	r2, #0
 8001dec:	2140      	movs	r1, #64	@ 0x40
 8001dee:	4628      	mov	r0, r5
 8001df0:	f003 f9a0 	bl	8005134 <HAL_GPIO_WritePin>
 8001df4:	2201      	movs	r2, #1
 8001df6:	2140      	movs	r1, #64	@ 0x40
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f003 f99b 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<16; i++ ) {
 8001dfe:	3c01      	subs	r4, #1
 8001e00:	d1f3      	bne.n	8001dea <JTAG_to_SWD_Sequence+0xba>
}
 8001e02:	b007      	add	sp, #28
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	00000000 	.word	0x00000000

08001e10 <writeAP>:
{
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	ed2d 8b02 	vpush	{d8}
  int A2 = reg & 0x1;
 8001e18:	f000 0201 	and.w	r2, r0, #1
{
 8001e1c:	b08b      	sub	sp, #44	@ 0x2c
  int A3 = (reg >> 1) & 0x1;
 8001e1e:	f3c0 0a40 	ubfx	sl, r0, #1, #1
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001e22:	1c53      	adds	r3, r2, #1
 8001e24:	4453      	add	r3, sl
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001e26:	ed9f 8bc0 	vldr	d8, [pc, #768]	@ 8002128 <writeAP+0x318>
 8001e2a:	e9cd 2a02 	strd	r2, sl, [sp, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001e32:	4cbf      	ldr	r4, [pc, #764]	@ (8002130 <writeAP+0x320>)
 8001e34:	9301      	str	r3, [sp, #4]
{
 8001e36:	460f      	mov	r7, r1
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001e38:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	2600      	movs	r6, #0
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	a904      	add	r1, sp, #16
 8001e40:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001e42:	ed8d 8b04 	vstr	d8, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	e9cd 6606 	strd	r6, r6, [sp, #24]
 8001e4a:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f003 f834 	bl	8004eb8 <HAL_GPIO_Init>
  SWD_WRITE_BIT(1);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e56:	4620      	mov	r0, r4
 8001e58:	f003 f96c 	bl	8005134 <HAL_GPIO_WritePin>
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2140      	movs	r1, #64	@ 0x40
 8001e60:	4620      	mov	r0, r4
 8001e62:	f003 f967 	bl	8005134 <HAL_GPIO_WritePin>
 8001e66:	2201      	movs	r2, #1
 8001e68:	2140      	movs	r1, #64	@ 0x40
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f003 f962 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_ap);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e76:	4620      	mov	r0, r4
 8001e78:	f003 f95c 	bl	8005134 <HAL_GPIO_WritePin>
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2140      	movs	r1, #64	@ 0x40
 8001e80:	4620      	mov	r0, r4
 8001e82:	f003 f957 	bl	8005134 <HAL_GPIO_WritePin>
 8001e86:	2201      	movs	r2, #1
 8001e88:	2140      	movs	r1, #64	@ 0x40
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f003 f952 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_read);
 8001e90:	2200      	movs	r2, #0
 8001e92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e96:	4620      	mov	r0, r4
 8001e98:	f003 f94c 	bl	8005134 <HAL_GPIO_WritePin>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2140      	movs	r1, #64	@ 0x40
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f003 f947 	bl	8005134 <HAL_GPIO_WritePin>
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2140      	movs	r1, #64	@ 0x40
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f003 f942 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A2);
 8001eb0:	9b02      	ldr	r3, [sp, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80d1 	beq.w	800205a <writeAP+0x24a>
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f003 f938 	bl	8005134 <HAL_GPIO_WritePin>
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2140      	movs	r1, #64	@ 0x40
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f003 f933 	bl	8005134 <HAL_GPIO_WritePin>
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2140      	movs	r1, #64	@ 0x40
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f003 f92e 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A3);
 8001ed8:	9b03      	ldr	r3, [sp, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b6 	beq.w	800204c <writeAP+0x23c>
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f003 f924 	bl	8005134 <HAL_GPIO_WritePin>
 8001eec:	2200      	movs	r2, #0
 8001eee:	2140      	movs	r1, #64	@ 0x40
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f003 f91f 	bl	8005134 <HAL_GPIO_WritePin>
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2140      	movs	r1, #64	@ 0x40
 8001efa:	4620      	mov	r0, r4
 8001efc:	f003 f91a 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(parity);
 8001f00:	9b01      	ldr	r3, [sp, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 809b 	beq.w	800203e <writeAP+0x22e>
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f003 f910 	bl	8005134 <HAL_GPIO_WritePin>
 8001f14:	2200      	movs	r2, #0
 8001f16:	2140      	movs	r1, #64	@ 0x40
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f003 f90b 	bl	8005134 <HAL_GPIO_WritePin>
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	4620      	mov	r0, r4
 8001f24:	f003 f906 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f003 f900 	bl	8005134 <HAL_GPIO_WritePin>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f003 f8fb 	bl	8005134 <HAL_GPIO_WritePin>
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2140      	movs	r1, #64	@ 0x40
 8001f42:	4620      	mov	r0, r4
 8001f44:	f003 f8f6 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f003 f8f0 	bl	8005134 <HAL_GPIO_WritePin>
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f003 f8eb 	bl	8005134 <HAL_GPIO_WritePin>
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	4620      	mov	r0, r4
 8001f64:	f003 f8e6 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	a904      	add	r1, sp, #16
 8001f6e:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001f70:	9304      	str	r3, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	e9cd 6605 	strd	r6, r6, [sp, #20]
 8001f76:	e9cd 6607 	strd	r6, r6, [sp, #28]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f002 ff9d 	bl	8004eb8 <HAL_GPIO_Init>
  SWCLK_CYCLE();
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2140      	movs	r1, #64	@ 0x40
 8001f82:	4620      	mov	r0, r4
 8001f84:	f003 f8d6 	bl	8005134 <HAL_GPIO_WritePin>
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2140      	movs	r1, #64	@ 0x40
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f003 f8d1 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ack = 0;
 8001f92:	f04f 0a00 	mov.w	sl, #0
  for ( i=0; i<3; i++ ) {
 8001f96:	46d1      	mov	r9, sl
	  SWD_READ_BIT(b);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2140      	movs	r1, #64	@ 0x40
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f003 f8c9 	bl	8005134 <HAL_GPIO_WritePin>
 8001fa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f003 f8be 	bl	8005128 <HAL_GPIO_ReadPin>
 8001fac:	4605      	mov	r5, r0
    ack |= b << i;
 8001fae:	fa05 f509 	lsl.w	r5, r5, r9
	  SWD_READ_BIT(b);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2140      	movs	r1, #64	@ 0x40
 8001fb6:	4620      	mov	r0, r4
  for ( i=0; i<3; i++ ) {
 8001fb8:	f109 0901 	add.w	r9, r9, #1
	  SWD_READ_BIT(b);
 8001fbc:	f003 f8ba 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<3; i++ ) {
 8001fc0:	f1b9 0f03 	cmp.w	r9, #3
    ack |= b << i;
 8001fc4:	ea4a 0a05 	orr.w	sl, sl, r5
  for ( i=0; i<3; i++ ) {
 8001fc8:	d1e6      	bne.n	8001f98 <writeAP+0x188>
  if ( ack == ACK_OK || ignoreAck ) 
 8001fca:	f1ba 0f01 	cmp.w	sl, #1
 8001fce:	d04b      	beq.n	8002068 <writeAP+0x258>
  else if ( ack == ACK_WAIT ) 
 8001fd0:	f1ba 0f02 	cmp.w	sl, #2
 8001fd4:	d006      	beq.n	8001fe4 <writeAP+0x1d4>
    ret = SWD_ERROR_FAULT;
 8001fd6:	f1ba 0f04 	cmp.w	sl, #4
 8001fda:	bf14      	ite	ne
 8001fdc:	f04f 0a04 	movne.w	sl, #4
 8001fe0:	f04f 0a03 	moveq.w	sl, #3
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	a904      	add	r1, sp, #16
 8001fe6:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8001fe8:	ed8d 8b04 	vstr	d8, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	e9cd 6606 	strd	r6, r6, [sp, #24]
 8001ff0:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f002 ff61 	bl	8004eb8 <HAL_GPIO_Init>
  for ( i=0; i<8; i++ ) {
 8001ff6:	2508      	movs	r5, #8
	  SWD_WRITE_BIT(0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffe:	4620      	mov	r0, r4
 8002000:	f003 f898 	bl	8005134 <HAL_GPIO_WritePin>
 8002004:	2200      	movs	r2, #0
 8002006:	2140      	movs	r1, #64	@ 0x40
 8002008:	4620      	mov	r0, r4
 800200a:	f003 f893 	bl	8005134 <HAL_GPIO_WritePin>
 800200e:	2201      	movs	r2, #1
 8002010:	2140      	movs	r1, #64	@ 0x40
 8002012:	4620      	mov	r0, r4
 8002014:	f003 f88e 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<8; i++ ) {
 8002018:	3d01      	subs	r5, #1
 800201a:	d1ed      	bne.n	8001ff8 <writeAP+0x1e8>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 800201c:	f1ba 0f02 	cmp.w	sl, #2
 8002020:	d176      	bne.n	8002110 <writeAP+0x300>
 8002022:	f1b8 0801 	subs.w	r8, r8, #1
 8002026:	f47f af0a 	bne.w	8001e3e <writeAP+0x2e>
 800202a:	46d3      	mov	fp, sl
    RAISE(swdStatus);
 800202c:	4a41      	ldr	r2, [pc, #260]	@ (8002134 <writeAP+0x324>)
 800202e:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <writeAP+0x328>)
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	20a0      	movs	r0, #160	@ 0xa0
 8002034:	4659      	mov	r1, fp
 8002036:	fb00 3002 	mla	r0, r0, r2, r3
 800203a:	f7fe f8e1 	bl	8000200 <longjmp>
 800203e:	461a      	mov	r2, r3
  SWD_WRITE_BIT(parity);
 8002040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002044:	4620      	mov	r0, r4
 8002046:	f003 f875 	bl	8005134 <HAL_GPIO_WritePin>
 800204a:	e763      	b.n	8001f14 <writeAP+0x104>
 800204c:	461a      	mov	r2, r3
  SWD_WRITE_BIT(A3);
 800204e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002052:	4620      	mov	r0, r4
 8002054:	f003 f86e 	bl	8005134 <HAL_GPIO_WritePin>
 8002058:	e748      	b.n	8001eec <writeAP+0xdc>
 800205a:	461a      	mov	r2, r3
  SWD_WRITE_BIT(A2);
 800205c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002060:	4620      	mov	r0, r4
 8002062:	f003 f867 	bl	8005134 <HAL_GPIO_WritePin>
 8002066:	e72d      	b.n	8001ec4 <writeAP+0xb4>
    SWCLK_CYCLE();
 8002068:	2140      	movs	r1, #64	@ 0x40
 800206a:	4620      	mov	r0, r4
 800206c:	2200      	movs	r2, #0
 800206e:	f003 f861 	bl	8005134 <HAL_GPIO_WritePin>
 8002072:	4652      	mov	r2, sl
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	4620      	mov	r0, r4
 8002078:	f003 f85c 	bl	8005134 <HAL_GPIO_WritePin>
    parity = 0;
 800207c:	f04f 0b00 	mov.w	fp, #0
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8002080:	a904      	add	r1, sp, #16
 8002082:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8002084:	ed8d 8b04 	vstr	d8, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	e9cd 6606 	strd	r6, r6, [sp, #24]
 800208c:	9608      	str	r6, [sp, #32]
    for ( i=0; i<32; i++ ) {
 800208e:	465d      	mov	r5, fp
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8002090:	f002 ff12 	bl	8004eb8 <HAL_GPIO_Init>
    for ( i=0; i<32; i++ ) {
 8002094:	e014      	b.n	80020c0 <writeAP+0x2b0>
      SWD_WRITE_BIT(b);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800209c:	4620      	mov	r0, r4
 800209e:	f003 f849 	bl	8005134 <HAL_GPIO_WritePin>
 80020a2:	f08b 0b01 	eor.w	fp, fp, #1
 80020a6:	2200      	movs	r2, #0
 80020a8:	2140      	movs	r1, #64	@ 0x40
 80020aa:	4620      	mov	r0, r4
 80020ac:	f003 f842 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 80020b0:	3501      	adds	r5, #1
      SWD_WRITE_BIT(b);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2140      	movs	r1, #64	@ 0x40
 80020b6:	4620      	mov	r0, r4
 80020b8:	f003 f83c 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 80020bc:	2d20      	cmp	r5, #32
 80020be:	d00c      	beq.n	80020da <writeAP+0x2ca>
      b = (data >> i) & 0x1;
 80020c0:	fa27 f205 	lsr.w	r2, r7, r5
      SWD_WRITE_BIT(b);
 80020c4:	f012 0901 	ands.w	r9, r2, #1
 80020c8:	d1e5      	bne.n	8002096 <writeAP+0x286>
 80020ca:	464a      	mov	r2, r9
 80020cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020d0:	4620      	mov	r0, r4
 80020d2:	f003 f82f 	bl	8005134 <HAL_GPIO_WritePin>
 80020d6:	464a      	mov	r2, r9
 80020d8:	e7e6      	b.n	80020a8 <writeAP+0x298>
    SWD_WRITE_BIT(parity);
 80020da:	f1bb 0f00 	cmp.w	fp, #0
 80020de:	d010      	beq.n	8002102 <writeAP+0x2f2>
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e6:	4620      	mov	r0, r4
 80020e8:	f003 f824 	bl	8005134 <HAL_GPIO_WritePin>
 80020ec:	4620      	mov	r0, r4
 80020ee:	2200      	movs	r2, #0
 80020f0:	2140      	movs	r1, #64	@ 0x40
 80020f2:	f003 f81f 	bl	8005134 <HAL_GPIO_WritePin>
 80020f6:	2201      	movs	r2, #1
 80020f8:	2140      	movs	r1, #64	@ 0x40
 80020fa:	4620      	mov	r0, r4
 80020fc:	f003 f81a 	bl	8005134 <HAL_GPIO_WritePin>
 8002100:	e770      	b.n	8001fe4 <writeAP+0x1d4>
 8002102:	465a      	mov	r2, fp
 8002104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002108:	4620      	mov	r0, r4
 800210a:	f003 f813 	bl	8005134 <HAL_GPIO_WritePin>
 800210e:	e7ed      	b.n	80020ec <writeAP+0x2dc>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002110:	f1ba 0f01 	cmp.w	sl, #1
 8002114:	46d3      	mov	fp, sl
 8002116:	d189      	bne.n	800202c <writeAP+0x21c>
}
 8002118:	b00b      	add	sp, #44	@ 0x2c
 800211a:	ecbd 8b02 	vpop	{d8}
 800211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	00000100 	.word	0x00000100
 800212c:	00000001 	.word	0x00000001
 8002130:	40020400 	.word	0x40020400
 8002134:	20000000 	.word	0x20000000
 8002138:	20000188 	.word	0x20000188

0800213c <readAP>:
{
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	4606      	mov	r6, r0
 8002140:	460d      	mov	r5, r1
 8002142:	24c8      	movs	r4, #200	@ 0xc8
 8002144:	e001      	b.n	800214a <readAP+0xe>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002146:	3c01      	subs	r4, #1
 8002148:	d008      	beq.n	800215c <readAP+0x20>
    swdStatus = readReg(true, reg, data);
 800214a:	4629      	mov	r1, r5
 800214c:	4630      	mov	r0, r6
 800214e:	f7ff f9c3 	bl	80014d8 <readReg.constprop.1>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002152:	2802      	cmp	r0, #2
 8002154:	d0f7      	beq.n	8002146 <readAP+0xa>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002156:	2801      	cmp	r0, #1
 8002158:	d100      	bne.n	800215c <readAP+0x20>
}
 800215a:	bd70      	pop	{r4, r5, r6, pc}
    RAISE(swdStatus);
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <readAP+0x34>)
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <readAP+0x38>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	24a0      	movs	r4, #160	@ 0xa0
 8002164:	4601      	mov	r1, r0
 8002166:	fb04 3002 	mla	r0, r4, r2, r3
 800216a:	f7fe f849 	bl	8000200 <longjmp>
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	20000188 	.word	0x20000188

08002178 <readDP>:
{
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	4606      	mov	r6, r0
 800217c:	460d      	mov	r5, r1
 800217e:	24c8      	movs	r4, #200	@ 0xc8
 8002180:	e001      	b.n	8002186 <readDP+0xe>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002182:	3c01      	subs	r4, #1
 8002184:	d008      	beq.n	8002198 <readDP+0x20>
    swdStatus = readReg(false, reg, data);
 8002186:	4629      	mov	r1, r5
 8002188:	4630      	mov	r0, r6
 800218a:	f7ff faff 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800218e:	2802      	cmp	r0, #2
 8002190:	d0f7      	beq.n	8002182 <readDP+0xa>
  if ( swdStatus != SWD_ERROR_OK ) {
 8002192:	2801      	cmp	r0, #1
 8002194:	d100      	bne.n	8002198 <readDP+0x20>
}
 8002196:	bd70      	pop	{r4, r5, r6, pc}
    RAISE(swdStatus);
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <readDP+0x34>)
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <readDP+0x38>)
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	24a0      	movs	r4, #160	@ 0xa0
 80021a0:	4601      	mov	r1, r0
 80021a2:	fb04 3002 	mla	r0, r4, r2, r3
 80021a6:	f7fe f82b 	bl	8000200 <longjmp>
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000188 	.word	0x20000188

080021b4 <initDp>:
{
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b083      	sub	sp, #12
  uint32_t dpId = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	9300      	str	r3, [sp, #0]
  JTAG_to_SWD_Sequence();
 80021bc:	24c8      	movs	r4, #200	@ 0xc8
 80021be:	f7ff fdb7 	bl	8001d30 <JTAG_to_SWD_Sequence>
void readDP(int reg, uint32_t *data)
 80021c2:	e002      	b.n	80021ca <initDp+0x16>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80021c4:	3c01      	subs	r4, #1
 80021c6:	f000 8087 	beq.w	80022d8 <initDp+0x124>
    swdStatus = readReg(false, reg, data);
 80021ca:	4669      	mov	r1, sp
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff fadd 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80021d2:	2802      	cmp	r0, #2
 80021d4:	d0f6      	beq.n	80021c4 <initDp+0x10>
  if ( swdStatus != SWD_ERROR_OK ) {
 80021d6:	2801      	cmp	r0, #1
 80021d8:	bf08      	it	eq
 80021da:	24c8      	moveq	r4, #200	@ 0xc8
 80021dc:	d002      	beq.n	80021e4 <initDp+0x30>
 80021de:	e07b      	b.n	80022d8 <initDp+0x124>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80021e0:	3c01      	subs	r4, #1
 80021e2:	d079      	beq.n	80022d8 <initDp+0x124>
    swdStatus = writeReg(false, reg, data, false);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2104      	movs	r1, #4
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7ff fc29 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80021ee:	2802      	cmp	r0, #2
 80021f0:	d0f6      	beq.n	80021e0 <initDp+0x2c>
  if ( swdStatus != SWD_ERROR_OK ) 
 80021f2:	2801      	cmp	r0, #1
 80021f4:	d170      	bne.n	80022d8 <initDp+0x124>
    swdStatus = readReg(false, reg, data);
 80021f6:	4d3d      	ldr	r5, [pc, #244]	@ (80022ec <initDp+0x138>)
 80021f8:	24c8      	movs	r4, #200	@ 0xc8
 80021fa:	e001      	b.n	8002200 <initDp+0x4c>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80021fc:	3c01      	subs	r4, #1
 80021fe:	d06b      	beq.n	80022d8 <initDp+0x124>
    swdStatus = readReg(false, reg, data);
 8002200:	4629      	mov	r1, r5
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fac2 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002208:	2802      	cmp	r0, #2
 800220a:	d0f7      	beq.n	80021fc <initDp+0x48>
  if ( swdStatus != SWD_ERROR_OK ) {
 800220c:	2801      	cmp	r0, #1
 800220e:	bf08      	it	eq
 8002210:	24c8      	moveq	r4, #200	@ 0xc8
 8002212:	d002      	beq.n	800221a <initDp+0x66>
 8002214:	e060      	b.n	80022d8 <initDp+0x124>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002216:	3c01      	subs	r4, #1
 8002218:	d05e      	beq.n	80022d8 <initDp+0x124>
    swdStatus = writeReg(false, reg, data, false);
 800221a:	2200      	movs	r2, #0
 800221c:	4611      	mov	r1, r2
 800221e:	2001      	movs	r0, #1
 8002220:	f7ff fc0e 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002224:	2802      	cmp	r0, #2
 8002226:	d0f6      	beq.n	8002216 <initDp+0x62>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002228:	2801      	cmp	r0, #1
 800222a:	d155      	bne.n	80022d8 <initDp+0x124>
    swdStatus = readReg(false, reg, data);
 800222c:	4d2f      	ldr	r5, [pc, #188]	@ (80022ec <initDp+0x138>)
 800222e:	24c8      	movs	r4, #200	@ 0xc8
 8002230:	e001      	b.n	8002236 <initDp+0x82>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002232:	3c01      	subs	r4, #1
 8002234:	d050      	beq.n	80022d8 <initDp+0x124>
    swdStatus = readReg(false, reg, data);
 8002236:	4629      	mov	r1, r5
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff faa7 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800223e:	2802      	cmp	r0, #2
 8002240:	d0f7      	beq.n	8002232 <initDp+0x7e>
  if ( swdStatus != SWD_ERROR_OK ) {
 8002242:	2801      	cmp	r0, #1
 8002244:	bf08      	it	eq
 8002246:	24c8      	moveq	r4, #200	@ 0xc8
 8002248:	d002      	beq.n	8002250 <initDp+0x9c>
 800224a:	e045      	b.n	80022d8 <initDp+0x124>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800224c:	3c01      	subs	r4, #1
 800224e:	d043      	beq.n	80022d8 <initDp+0x124>
    swdStatus = writeReg(false, reg, data, false);
 8002250:	2200      	movs	r2, #0
 8002252:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff fbf2 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800225c:	2802      	cmp	r0, #2
 800225e:	d0f5      	beq.n	800224c <initDp+0x98>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002260:	2801      	cmp	r0, #1
 8002262:	bf08      	it	eq
 8002264:	f44f 7596 	moveq.w	r5, #300	@ 0x12c
 8002268:	d136      	bne.n	80022d8 <initDp+0x124>
 800226a:	24c8      	movs	r4, #200	@ 0xc8
 800226c:	e001      	b.n	8002272 <initDp+0xbe>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800226e:	3c01      	subs	r4, #1
 8002270:	d028      	beq.n	80022c4 <initDp+0x110>
    swdStatus = readReg(false, reg, data);
 8002272:	a901      	add	r1, sp, #4
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff fa89 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800227a:	2802      	cmp	r0, #2
 800227c:	d0f7      	beq.n	800226e <initDp+0xba>
  if ( swdStatus != SWD_ERROR_OK ) {
 800227e:	2801      	cmp	r0, #1
 8002280:	d120      	bne.n	80022c4 <initDp+0x110>
    if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
 8002282:	9b01      	ldr	r3, [sp, #4]
 8002284:	f003 4320 	and.w	r3, r3, #2684354560	@ 0xa0000000
 8002288:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800228c:	d00a      	beq.n	80022a4 <initDp+0xf0>
  while ( retry > 0 )
 800228e:	3d01      	subs	r5, #1
 8002290:	d1eb      	bne.n	800226a <initDp+0xb6>
    RAISE(SWD_ERROR_DEBUG_POWER);
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <initDp+0x13c>)
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <initDp+0x140>)
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	20a0      	movs	r0, #160	@ 0xa0
 800229a:	2115      	movs	r1, #21
 800229c:	fb00 3002 	mla	r0, r0, r2, r3
 80022a0:	f7fd ffae 	bl	8000200 <longjmp>
 80022a4:	24c8      	movs	r4, #200	@ 0xc8
 80022a6:	e001      	b.n	80022ac <initDp+0xf8>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80022a8:	3c01      	subs	r4, #1
 80022aa:	d015      	beq.n	80022d8 <initDp+0x124>
    swdStatus = writeReg(false, reg, data, false);
 80022ac:	2200      	movs	r2, #0
 80022ae:	4611      	mov	r1, r2
 80022b0:	2002      	movs	r0, #2
 80022b2:	f7ff fbc5 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80022b6:	2802      	cmp	r0, #2
 80022b8:	d0f6      	beq.n	80022a8 <initDp+0xf4>
  if ( swdStatus != SWD_ERROR_OK ) 
 80022ba:	2801      	cmp	r0, #1
 80022bc:	d10c      	bne.n	80022d8 <initDp+0x124>
}
 80022be:	9800      	ldr	r0, [sp, #0]
 80022c0:	b003      	add	sp, #12
 80022c2:	bd30      	pop	{r4, r5, pc}
    RAISE(swdStatus);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <initDp+0x13c>)
 80022c6:	4a0b      	ldr	r2, [pc, #44]	@ (80022f4 <initDp+0x140>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ce:	4601      	mov	r1, r0
 80022d0:	eb02 1043 	add.w	r0, r2, r3, lsl #5
 80022d4:	f7fd ff94 	bl	8000200 <longjmp>
    RAISE(swdStatus);
 80022d8:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <initDp+0x13c>)
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <initDp+0x140>)
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	24a0      	movs	r4, #160	@ 0xa0
 80022e0:	4601      	mov	r1, r0
 80022e2:	fb04 3002 	mla	r0, r4, r2, r3
 80022e6:	f7fd ff8b 	bl	8000200 <longjmp>
 80022ea:	bf00      	nop
 80022ec:	20000184 	.word	0x20000184
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000188 	.word	0x20000188

080022f8 <readApId>:
{
 80022f8:	b510      	push	{r4, lr}
 80022fa:	24c8      	movs	r4, #200	@ 0xc8
 80022fc:	b082      	sub	sp, #8
 80022fe:	e001      	b.n	8002304 <readApId+0xc>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002300:	3c01      	subs	r4, #1
 8002302:	d033      	beq.n	800236c <readApId+0x74>
    swdStatus = writeReg(false, reg, data, false);
 8002304:	2200      	movs	r2, #0
 8002306:	21f0      	movs	r1, #240	@ 0xf0
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff fb99 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800230e:	2802      	cmp	r0, #2
 8002310:	d0f6      	beq.n	8002300 <readApId+0x8>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002312:	2801      	cmp	r0, #1
 8002314:	bf08      	it	eq
 8002316:	24c8      	moveq	r4, #200	@ 0xc8
 8002318:	d002      	beq.n	8002320 <readApId+0x28>
 800231a:	e027      	b.n	800236c <readApId+0x74>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800231c:	3c01      	subs	r4, #1
 800231e:	d025      	beq.n	800236c <readApId+0x74>
    swdStatus = readReg(true, reg, data);
 8002320:	a901      	add	r1, sp, #4
 8002322:	2003      	movs	r0, #3
 8002324:	f7ff f8d8 	bl	80014d8 <readReg.constprop.1>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002328:	2802      	cmp	r0, #2
 800232a:	d0f7      	beq.n	800231c <readApId+0x24>
  if ( swdStatus != SWD_ERROR_OK ) 
 800232c:	2801      	cmp	r0, #1
 800232e:	bf08      	it	eq
 8002330:	24c8      	moveq	r4, #200	@ 0xc8
 8002332:	d002      	beq.n	800233a <readApId+0x42>
 8002334:	e01a      	b.n	800236c <readApId+0x74>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002336:	3c01      	subs	r4, #1
 8002338:	d018      	beq.n	800236c <readApId+0x74>
    swdStatus = readReg(false, reg, data);
 800233a:	a901      	add	r1, sp, #4
 800233c:	2003      	movs	r0, #3
 800233e:	f7ff fa25 	bl	800178c <readReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002342:	2802      	cmp	r0, #2
 8002344:	d0f7      	beq.n	8002336 <readApId+0x3e>
  if ( swdStatus != SWD_ERROR_OK ) {
 8002346:	2801      	cmp	r0, #1
 8002348:	bf08      	it	eq
 800234a:	24c8      	moveq	r4, #200	@ 0xc8
 800234c:	d002      	beq.n	8002354 <readApId+0x5c>
 800234e:	e00d      	b.n	800236c <readApId+0x74>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002350:	3c01      	subs	r4, #1
 8002352:	d00b      	beq.n	800236c <readApId+0x74>
    swdStatus = writeReg(false, reg, data, false);
 8002354:	2200      	movs	r2, #0
 8002356:	4611      	mov	r1, r2
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff fb71 	bl	8001a40 <writeReg.constprop.0>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800235e:	2802      	cmp	r0, #2
 8002360:	d0f6      	beq.n	8002350 <readApId+0x58>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002362:	2801      	cmp	r0, #1
 8002364:	d102      	bne.n	800236c <readApId+0x74>
}
 8002366:	9801      	ldr	r0, [sp, #4]
 8002368:	b002      	add	sp, #8
 800236a:	bd10      	pop	{r4, pc}
    RAISE(swdStatus);
 800236c:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <readApId+0x88>)
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <readApId+0x8c>)
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	24a0      	movs	r4, #160	@ 0xa0
 8002374:	4601      	mov	r1, r0
 8002376:	fb04 3002 	mla	r0, r4, r2, r3
 800237a:	f7fd ff41 	bl	8000200 <longjmp>
 800237e:	bf00      	nop
 8002380:	20000000 	.word	0x20000000
 8002384:	20000188 	.word	0x20000188

08002388 <initAhbAp>:
{    
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	ed2d 8b02 	vpush	{d8}
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8002390:	ed9f 8ba9 	vldr	d8, [pc, #676]	@ 8002638 <initAhbAp+0x2b0>
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8002394:	4caa      	ldr	r4, [pc, #680]	@ (8002640 <initAhbAp+0x2b8>)
{    
 8002396:	b087      	sub	sp, #28
 8002398:	f04f 08c8 	mov.w	r8, #200	@ 0xc8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	2700      	movs	r7, #0
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 800239e:	4669      	mov	r1, sp
 80023a0:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80023a2:	ed8d 8b00 	vstr	d8, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80023aa:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f002 fd84 	bl	8004eb8 <HAL_GPIO_Init>
  SWD_WRITE_BIT(1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b6:	4620      	mov	r0, r4
 80023b8:	f002 febc 	bl	8005134 <HAL_GPIO_WritePin>
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	@ 0x40
 80023c0:	4620      	mov	r0, r4
 80023c2:	f002 feb7 	bl	8005134 <HAL_GPIO_WritePin>
 80023c6:	2201      	movs	r2, #1
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	4620      	mov	r0, r4
 80023cc:	f002 feb2 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_ap);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d6:	4620      	mov	r0, r4
 80023d8:	f002 feac 	bl	8005134 <HAL_GPIO_WritePin>
 80023dc:	2200      	movs	r2, #0
 80023de:	2140      	movs	r1, #64	@ 0x40
 80023e0:	4620      	mov	r0, r4
 80023e2:	f002 fea7 	bl	8005134 <HAL_GPIO_WritePin>
 80023e6:	2201      	movs	r2, #1
 80023e8:	2140      	movs	r1, #64	@ 0x40
 80023ea:	4620      	mov	r0, r4
 80023ec:	f002 fea2 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(_read);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023f6:	4620      	mov	r0, r4
 80023f8:	f002 fe9c 	bl	8005134 <HAL_GPIO_WritePin>
 80023fc:	2200      	movs	r2, #0
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	4620      	mov	r0, r4
 8002402:	f002 fe97 	bl	8005134 <HAL_GPIO_WritePin>
 8002406:	2201      	movs	r2, #1
 8002408:	2140      	movs	r1, #64	@ 0x40
 800240a:	4620      	mov	r0, r4
 800240c:	f002 fe92 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A2);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002416:	4620      	mov	r0, r4
 8002418:	f002 fe8c 	bl	8005134 <HAL_GPIO_WritePin>
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	@ 0x40
 8002420:	4620      	mov	r0, r4
 8002422:	f002 fe87 	bl	8005134 <HAL_GPIO_WritePin>
 8002426:	2201      	movs	r2, #1
 8002428:	2140      	movs	r1, #64	@ 0x40
 800242a:	4620      	mov	r0, r4
 800242c:	f002 fe82 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(A3);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002436:	4620      	mov	r0, r4
 8002438:	f002 fe7c 	bl	8005134 <HAL_GPIO_WritePin>
 800243c:	2200      	movs	r2, #0
 800243e:	2140      	movs	r1, #64	@ 0x40
 8002440:	4620      	mov	r0, r4
 8002442:	f002 fe77 	bl	8005134 <HAL_GPIO_WritePin>
 8002446:	2201      	movs	r2, #1
 8002448:	2140      	movs	r1, #64	@ 0x40
 800244a:	4620      	mov	r0, r4
 800244c:	f002 fe72 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(parity);
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002456:	4620      	mov	r0, r4
 8002458:	f002 fe6c 	bl	8005134 <HAL_GPIO_WritePin>
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	4620      	mov	r0, r4
 8002462:	f002 fe67 	bl	8005134 <HAL_GPIO_WritePin>
 8002466:	2201      	movs	r2, #1
 8002468:	2140      	movs	r1, #64	@ 0x40
 800246a:	4620      	mov	r0, r4
 800246c:	f002 fe62 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(0);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002476:	4620      	mov	r0, r4
 8002478:	f002 fe5c 	bl	8005134 <HAL_GPIO_WritePin>
 800247c:	2200      	movs	r2, #0
 800247e:	2140      	movs	r1, #64	@ 0x40
 8002480:	4620      	mov	r0, r4
 8002482:	f002 fe57 	bl	8005134 <HAL_GPIO_WritePin>
 8002486:	2201      	movs	r2, #1
 8002488:	2140      	movs	r1, #64	@ 0x40
 800248a:	4620      	mov	r0, r4
 800248c:	f002 fe52 	bl	8005134 <HAL_GPIO_WritePin>
  SWD_WRITE_BIT(1);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002496:	4620      	mov	r0, r4
 8002498:	f002 fe4c 	bl	8005134 <HAL_GPIO_WritePin>
 800249c:	2200      	movs	r2, #0
 800249e:	2140      	movs	r1, #64	@ 0x40
 80024a0:	4620      	mov	r0, r4
 80024a2:	f002 fe47 	bl	8005134 <HAL_GPIO_WritePin>
 80024a6:	2201      	movs	r2, #1
 80024a8:	2140      	movs	r1, #64	@ 0x40
 80024aa:	4620      	mov	r0, r4
 80024ac:	f002 fe42 	bl	8005134 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80024b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80024b4:	4669      	mov	r1, sp
 80024b6:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 80024b8:	9300      	str	r3, [sp, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80024be:	e9cd 7703 	strd	r7, r7, [sp, #12]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f002 fcf9 	bl	8004eb8 <HAL_GPIO_Init>
  SWCLK_CYCLE();
 80024c6:	2200      	movs	r2, #0
 80024c8:	2140      	movs	r1, #64	@ 0x40
 80024ca:	4620      	mov	r0, r4
 80024cc:	f002 fe32 	bl	8005134 <HAL_GPIO_WritePin>
 80024d0:	2201      	movs	r2, #1
 80024d2:	2140      	movs	r1, #64	@ 0x40
 80024d4:	4620      	mov	r0, r4
 80024d6:	f002 fe2d 	bl	8005134 <HAL_GPIO_WritePin>
  uint32_t ack = 0;
 80024da:	2600      	movs	r6, #0
  for ( i=0; i<3; i++ ) {
 80024dc:	46b1      	mov	r9, r6
	  SWD_READ_BIT(b);
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	4620      	mov	r0, r4
 80024e4:	f002 fe26 	bl	8005134 <HAL_GPIO_WritePin>
 80024e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ec:	4620      	mov	r0, r4
 80024ee:	f002 fe1b 	bl	8005128 <HAL_GPIO_ReadPin>
 80024f2:	4605      	mov	r5, r0
    ack |= b << i;
 80024f4:	fa05 f509 	lsl.w	r5, r5, r9
	  SWD_READ_BIT(b);
 80024f8:	2201      	movs	r2, #1
 80024fa:	2140      	movs	r1, #64	@ 0x40
 80024fc:	4620      	mov	r0, r4
  for ( i=0; i<3; i++ ) {
 80024fe:	f109 0901 	add.w	r9, r9, #1
	  SWD_READ_BIT(b);
 8002502:	f002 fe17 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<3; i++ ) {
 8002506:	f1b9 0f03 	cmp.w	r9, #3
    ack |= b << i;
 800250a:	ea46 0605 	orr.w	r6, r6, r5
  for ( i=0; i<3; i++ ) {
 800250e:	d1e6      	bne.n	80024de <initAhbAp+0x156>
  if ( ack == ACK_OK || ignoreAck ) 
 8002510:	2e01      	cmp	r6, #1
 8002512:	d030      	beq.n	8002576 <initAhbAp+0x1ee>
  else if ( ack == ACK_WAIT ) 
 8002514:	2e02      	cmp	r6, #2
 8002516:	d003      	beq.n	8002520 <initAhbAp+0x198>
    ret = SWD_ERROR_FAULT;
 8002518:	2e04      	cmp	r6, #4
 800251a:	bf14      	ite	ne
 800251c:	2604      	movne	r6, #4
 800251e:	2603      	moveq	r6, #3
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8002520:	4669      	mov	r1, sp
 8002522:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8002524:	ed8d 8b00 	vstr	d8, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	e9cd 7702 	strd	r7, r7, [sp, #8]
 800252c:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 800252e:	f002 fcc3 	bl	8004eb8 <HAL_GPIO_Init>
  for ( i=0; i<8; i++ ) {
 8002532:	2508      	movs	r5, #8
	  SWD_WRITE_BIT(0);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800253a:	4620      	mov	r0, r4
 800253c:	f002 fdfa 	bl	8005134 <HAL_GPIO_WritePin>
 8002540:	2200      	movs	r2, #0
 8002542:	2140      	movs	r1, #64	@ 0x40
 8002544:	4620      	mov	r0, r4
 8002546:	f002 fdf5 	bl	8005134 <HAL_GPIO_WritePin>
 800254a:	2201      	movs	r2, #1
 800254c:	2140      	movs	r1, #64	@ 0x40
 800254e:	4620      	mov	r0, r4
 8002550:	f002 fdf0 	bl	8005134 <HAL_GPIO_WritePin>
  for ( i=0; i<8; i++ ) {
 8002554:	3d01      	subs	r5, #1
 8002556:	d1ed      	bne.n	8002534 <initAhbAp+0x1ac>
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 8002558:	2e02      	cmp	r6, #2
 800255a:	d164      	bne.n	8002626 <initAhbAp+0x29e>
 800255c:	f1b8 0801 	subs.w	r8, r8, #1
 8002560:	f47f af1d 	bne.w	800239e <initAhbAp+0x16>
    RAISE(swdStatus);
 8002564:	4a37      	ldr	r2, [pc, #220]	@ (8002644 <initAhbAp+0x2bc>)
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <initAhbAp+0x2c0>)
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	20a0      	movs	r0, #160	@ 0xa0
 800256c:	4631      	mov	r1, r6
 800256e:	fb00 3002 	mla	r0, r0, r2, r3
 8002572:	f7fd fe45 	bl	8000200 <longjmp>
    SWCLK_CYCLE();
 8002576:	2200      	movs	r2, #0
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	4620      	mov	r0, r4
 800257c:	f002 fdda 	bl	8005134 <HAL_GPIO_WritePin>
 8002580:	4632      	mov	r2, r6
 8002582:	2140      	movs	r1, #64	@ 0x40
 8002584:	4620      	mov	r0, r4
 8002586:	f002 fdd5 	bl	8005134 <HAL_GPIO_WritePin>
    parity = 0;
 800258a:	f04f 0b00 	mov.w	fp, #0
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 800258e:	4669      	mov	r1, sp
 8002590:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = SWD_IO_Pin;
 8002592:	ed8d 8b00 	vstr	d8, [sp]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	e9cd 7702 	strd	r7, r7, [sp, #8]
 800259a:	9704      	str	r7, [sp, #16]
      b = (data >> i) & 0x1;
 800259c:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 800264c <initAhbAp+0x2c4>
	HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f002 fc8a 	bl	8004eb8 <HAL_GPIO_Init>
    for ( i=0; i<32; i++ ) {
 80025a4:	46d9      	mov	r9, fp
 80025a6:	e016      	b.n	80025d6 <initAhbAp+0x24e>
      SWD_WRITE_BIT(b);
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025ae:	4620      	mov	r0, r4
 80025b0:	f002 fdc0 	bl	8005134 <HAL_GPIO_WritePin>
      if (b) parity = !parity;
 80025b4:	f08b 0b01 	eor.w	fp, fp, #1
      SWD_WRITE_BIT(b);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	@ 0x40
 80025bc:	4620      	mov	r0, r4
 80025be:	f002 fdb9 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 80025c2:	f109 0901 	add.w	r9, r9, #1
      SWD_WRITE_BIT(b);
 80025c6:	2201      	movs	r2, #1
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4620      	mov	r0, r4
 80025cc:	f002 fdb2 	bl	8005134 <HAL_GPIO_WritePin>
    for ( i=0; i<32; i++ ) {
 80025d0:	f1b9 0f20 	cmp.w	r9, #32
 80025d4:	d00c      	beq.n	80025f0 <initAhbAp+0x268>
      b = (data >> i) & 0x1;
 80025d6:	fa2a f209 	lsr.w	r2, sl, r9
      SWD_WRITE_BIT(b);
 80025da:	f012 0501 	ands.w	r5, r2, #1
 80025de:	d1e3      	bne.n	80025a8 <initAhbAp+0x220>
 80025e0:	462a      	mov	r2, r5
 80025e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e6:	4620      	mov	r0, r4
 80025e8:	f002 fda4 	bl	8005134 <HAL_GPIO_WritePin>
 80025ec:	462a      	mov	r2, r5
 80025ee:	e7e4      	b.n	80025ba <initAhbAp+0x232>
    SWD_WRITE_BIT(parity);
 80025f0:	f1bb 0f00 	cmp.w	fp, #0
 80025f4:	d010      	beq.n	8002618 <initAhbAp+0x290>
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fc:	4620      	mov	r0, r4
 80025fe:	f002 fd99 	bl	8005134 <HAL_GPIO_WritePin>
 8002602:	4620      	mov	r0, r4
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	@ 0x40
 8002608:	f002 fd94 	bl	8005134 <HAL_GPIO_WritePin>
 800260c:	2201      	movs	r2, #1
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	4620      	mov	r0, r4
 8002612:	f002 fd8f 	bl	8005134 <HAL_GPIO_WritePin>
 8002616:	e783      	b.n	8002520 <initAhbAp+0x198>
 8002618:	465a      	mov	r2, fp
 800261a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800261e:	4620      	mov	r0, r4
 8002620:	f002 fd88 	bl	8005134 <HAL_GPIO_WritePin>
 8002624:	e7ed      	b.n	8002602 <initAhbAp+0x27a>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002626:	2e01      	cmp	r6, #1
 8002628:	d19c      	bne.n	8002564 <initAhbAp+0x1dc>
}
 800262a:	b007      	add	sp, #28
 800262c:	ecbd 8b02 	vpop	{d8}
 8002630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	00000100 	.word	0x00000100
 800263c:	00000001 	.word	0x00000001
 8002640:	40020400 	.word	0x40020400
 8002644:	20000000 	.word	0x20000000
 8002648:	20000188 	.word	0x20000188
 800264c:	22000002 	.word	0x22000002

08002650 <delayMs>:
/**********************************************************
 * Delay a number of milliseconds
 **********************************************************/
void delayMs(int ms)
{
	HAL_Delay(ms);
 8002650:	f002 b9a4 	b.w	800499c <HAL_Delay>

08002654 <delayUs>:
/**********************************************************
 * Delay a number of microseconds
 **********************************************************/
void delayUs(int us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <delayUs+0x14>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2300      	movs	r3, #0
 800265a:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < (us-1));  // wait for the counter to reach the us input in the parameter
 800265c:	3801      	subs	r0, #1
 800265e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002660:	4283      	cmp	r3, r0
 8002662:	d3fc      	bcc.n	800265e <delayUs+0xa>
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000658 	.word	0x20000658

0800266c <getErrorString>:
jmp_buf swdErrors[EXCEPTION_MAX_LEVEL];
int swdErrorIndex = -1;

char *getErrorString(int errorCode)
{
  switch (errorCode)
 800266c:	3801      	subs	r0, #1
 800266e:	2814      	cmp	r0, #20
 8002670:	bf9a      	itte	ls
 8002672:	4b02      	ldrls	r3, [pc, #8]	@ (800267c <getErrorString+0x10>)
 8002674:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8002678:	4801      	ldrhi	r0, [pc, #4]	@ (8002680 <getErrorString+0x14>)
  case SWD_ERROR_INVALID_IDCODE:
    return "Invalid IDCODE.";
  default:
    return "Unknown error.";
  }
 800267a:	4770      	bx	lr
 800267c:	08010ca8 	.word	0x08010ca8
 8002680:	08010a14 	.word	0x08010a14

08002684 <haltTarget.part.0>:

/**********************************************************
 * Halts the target CPU
 **********************************************************/

void haltTarget(void)
 8002684:	b508      	push	{r3, lr}
    readDP(DP_RDBUFF, &dhcrState);
    timeout--;
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 ); 
  
  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
    RAISE(SWD_ERROR_TIMEOUT_HALT);
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <haltTarget.part.0+0x18>)
 8002688:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <haltTarget.part.0+0x1c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002690:	2114      	movs	r1, #20
 8002692:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002696:	f7fd fdb3 	bl	8000200 <longjmp>
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000188 	.word	0x20000188

080026a4 <resetTarget>:
/**********************************************************
 * Resets the target CPU by using the AIRCR register. 
 * Does not reset the debug interface
 **********************************************************/
void resetTarget(void)
{  
 80026a4:	b530      	push	{r4, r5, lr}
 *    The value at @param addr
 **********************************************************/
void writeMem(uint32_t addr, uint32_t data)
{
#if 1
  writeAP(AP_TAR, addr);
 80026a6:	4932      	ldr	r1, [pc, #200]	@ (8002770 <resetTarget+0xcc>)
  writeAP(AP_TAR, addr);
 80026a8:	4d32      	ldr	r5, [pc, #200]	@ (8002774 <resetTarget+0xd0>)
{  
 80026aa:	b083      	sub	sp, #12
  writeAP(AP_TAR, addr);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7ff fbaf 	bl	8001e10 <writeAP>
  writeAP(AP_DRW, data);
 80026b2:	2100      	movs	r1, #0
 80026b4:	2003      	movs	r0, #3
 80026b6:	f7ff fbab 	bl	8001e10 <writeAP>
  writeAP(AP_TAR, addr);
 80026ba:	492e      	ldr	r1, [pc, #184]	@ (8002774 <resetTarget+0xd0>)
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff fba7 	bl	8001e10 <writeAP>
  readAP(AP_DRW, &ret);
 80026c2:	2003      	movs	r0, #3
 80026c4:	a901      	add	r1, sp, #4
 80026c6:	f7ff fd39 	bl	800213c <readAP>
  readDP(DP_RDBUFF, &ret);
 80026ca:	a901      	add	r1, sp, #4
 80026cc:	2003      	movs	r0, #3
 80026ce:	f7ff fd53 	bl	8002178 <readDP>
  writeAP(AP_TAR, addr);
 80026d2:	4928      	ldr	r1, [pc, #160]	@ (8002774 <resetTarget+0xd0>)
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff fb9b 	bl	8001e10 <writeAP>
  readAP(AP_DRW, &ret);
 80026da:	a901      	add	r1, sp, #4
 80026dc:	2003      	movs	r0, #3
 80026de:	f7ff fd2d 	bl	800213c <readAP>
  readDP(DP_RDBUFF, &ret);
 80026e2:	a901      	add	r1, sp, #4
 80026e4:	2003      	movs	r0, #3
 80026e6:	f7ff fd47 	bl	8002178 <readDP>
  writeAP(AP_TAR, addr);
 80026ea:	4923      	ldr	r1, [pc, #140]	@ (8002778 <resetTarget+0xd4>)
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7ff fb8f 	bl	8001e10 <writeAP>
  writeAP(AP_DRW, data);
 80026f2:	4922      	ldr	r1, [pc, #136]	@ (800277c <resetTarget+0xd8>)
 80026f4:	2003      	movs	r0, #3
 80026f6:	f7ff fb8b 	bl	8001e10 <writeAP>
  delayUs(100);
 80026fa:	2064      	movs	r0, #100	@ 0x64
 80026fc:	f7ff ffaa 	bl	8002654 <delayUs>
 8002700:	24c8      	movs	r4, #200	@ 0xc8
 8002702:	e001      	b.n	8002708 <resetTarget+0x64>
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 8002704:	3c01      	subs	r4, #1
 8002706:	d02a      	beq.n	800275e <resetTarget+0xba>
    delayUs(10);
 8002708:	200a      	movs	r0, #10
 800270a:	f7ff ffa3 	bl	8002654 <delayUs>
  writeAP(AP_TAR, addr);
 800270e:	4629      	mov	r1, r5
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff fb7d 	bl	8001e10 <writeAP>
  readAP(AP_DRW, &ret);
 8002716:	a901      	add	r1, sp, #4
 8002718:	2003      	movs	r0, #3
 800271a:	f7ff fd0f 	bl	800213c <readAP>
  readDP(DP_RDBUFF, &ret);
 800271e:	a901      	add	r1, sp, #4
 8002720:	2003      	movs	r0, #3
 8002722:	f7ff fd29 	bl	8002178 <readDP>
  return ret;
 8002726:	9b01      	ldr	r3, [sp, #4]
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 8002728:	019a      	lsls	r2, r3, #6
 800272a:	d5eb      	bpl.n	8002704 <resetTarget+0x60>
  writeAP(AP_TAR, addr);
 800272c:	4d11      	ldr	r5, [pc, #68]	@ (8002774 <resetTarget+0xd0>)
 800272e:	24c8      	movs	r4, #200	@ 0xc8
 8002730:	e001      	b.n	8002736 <resetTarget+0x92>
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 8002732:	3c01      	subs	r4, #1
 8002734:	d013      	beq.n	800275e <resetTarget+0xba>
    delayUs(10);
 8002736:	200a      	movs	r0, #10
 8002738:	f7ff ff8c 	bl	8002654 <delayUs>
  writeAP(AP_TAR, addr);
 800273c:	4629      	mov	r1, r5
 800273e:	2001      	movs	r0, #1
 8002740:	f7ff fb66 	bl	8001e10 <writeAP>
  readAP(AP_DRW, &ret);
 8002744:	a901      	add	r1, sp, #4
 8002746:	2003      	movs	r0, #3
 8002748:	f7ff fcf8 	bl	800213c <readAP>
  readDP(DP_RDBUFF, &ret);
 800274c:	a901      	add	r1, sp, #4
 800274e:	2003      	movs	r0, #3
 8002750:	f7ff fd12 	bl	8002178 <readDP>
  return ret;
 8002754:	9b01      	ldr	r3, [sp, #4]
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 8002756:	019b      	lsls	r3, r3, #6
 8002758:	d4eb      	bmi.n	8002732 <resetTarget+0x8e>
}
 800275a:	b003      	add	sp, #12
 800275c:	bd30      	pop	{r4, r5, pc}
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <resetTarget+0xdc>)
 8002760:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <resetTarget+0xe0>)
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	20a0      	movs	r0, #160	@ 0xa0
 8002766:	2110      	movs	r1, #16
 8002768:	fb00 3002 	mla	r0, r0, r2, r3
 800276c:	f7fd fd48 	bl	8000200 <longjmp>
 8002770:	e000edfc 	.word	0xe000edfc
 8002774:	e000edf0 	.word	0xe000edf0
 8002778:	e000ed0c 	.word	0xe000ed0c
 800277c:	05fa0004 	.word	0x05fa0004
 8002780:	20000000 	.word	0x20000000
 8002784:	20000188 	.word	0x20000188

08002788 <hardResetTarget>:
{
 8002788:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_RESET);
 800278a:	4c09      	ldr	r4, [pc, #36]	@ (80027b0 <hardResetTarget+0x28>)
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002792:	4620      	mov	r0, r4
 8002794:	f002 fcce 	bl	8005134 <HAL_GPIO_WritePin>
    delayMs(50);
 8002798:	2032      	movs	r0, #50	@ 0x32
 800279a:	f7ff ff59 	bl	8002650 <delayMs>
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 800279e:	4620      	mov	r0, r4
 80027a0:	2201      	movs	r2, #1
}
 80027a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 80027a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027aa:	f002 bcc3 	b.w	8005134 <HAL_GPIO_WritePin>
 80027ae:	bf00      	nop
 80027b0:	40020000 	.word	0x40020000

080027b4 <readMem>:
{
 80027b4:	b500      	push	{lr}
 80027b6:	4601      	mov	r1, r0
 80027b8:	b083      	sub	sp, #12
  writeAP(AP_TAR, addr);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff fb28 	bl	8001e10 <writeAP>
  readAP(AP_DRW, &ret);
 80027c0:	a901      	add	r1, sp, #4
 80027c2:	2003      	movs	r0, #3
 80027c4:	f7ff fcba 	bl	800213c <readAP>
  readDP(DP_RDBUFF, &ret);
 80027c8:	a901      	add	r1, sp, #4
 80027ca:	2003      	movs	r0, #3
 80027cc:	f7ff fcd4 	bl	8002178 <readDP>
}
 80027d0:	9801      	ldr	r0, [sp, #4]
 80027d2:	b003      	add	sp, #12
 80027d4:	f85d fb04 	ldr.w	pc, [sp], #4

080027d8 <writeMem>:
{
 80027d8:	b510      	push	{r4, lr}
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
  writeAP(AP_TAR, addr);
 80027de:	2001      	movs	r0, #1
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7ff fb15 	bl	8001e10 <writeAP>
  writeAP(AP_DRW, data);
 80027e6:	4621      	mov	r1, r4
 80027e8:	2003      	movs	r0, #3
  writeAP(AP_TAR, addr);
  writeAP(AP_DRW, data);
  log_message("AP_TAR: 0x%08"PRIX32"\n", addr);
	log_message("AP_DRW: 0x%08"PRIX32"\n", data);
#endif
}
 80027ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeAP(AP_DRW, data);
 80027ee:	f7ff bb0f 	b.w	8001e10 <writeAP>
 80027f2:	bf00      	nop

080027f4 <connectToTarget>:
 * Performs the initialization sequence on the SW-DP. 
 * After this completes the debug interface can be used. 
 * Raises an exception on any error during connection. 
 **********************************************************/
void connectToTarget(Target_InfoTypeDef *target)
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	b083      	sub	sp, #12
  delayUs(500);
 80027fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027fe:	f7ff ff29 	bl	8002654 <delayUs>
  target->TargetDpId = initDp();
 8002802:	f7ff fcd7 	bl	80021b4 <initDp>
  if ( dpId == STM32C0_SWDP_ID )
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <connectToTarget+0xa4>)
  target->TargetDpId = initDp();
 8002808:	6020      	str	r0, [r4, #0]
  if ( dpId == STM32C0_SWDP_ID )
 800280a:	4298      	cmp	r0, r3
 800280c:	d015      	beq.n	800283a <connectToTarget+0x46>
  else if ( dpId == STM32H7_SWDP_ID )
 800280e:	f103 43bf 	add.w	r3, r3, #1602224128	@ 0x5f800000
 8002812:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 8002816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281a:	4298      	cmp	r0, r3
 800281c:	4601      	mov	r1, r0
 800281e:	d00c      	beq.n	800283a <connectToTarget+0x46>
  /* Verify that the DP returns the correct ID */
  if ( !verifyDpId(target->TargetDpId) )
  {
    printf("Read IDCODE = 0x%08"PRIX32"\n", target->TargetDpId);
 8002820:	481e      	ldr	r0, [pc, #120]	@ (800289c <connectToTarget+0xa8>)
 8002822:	f00c ff75 	bl	800f710 <iprintf>
    RAISE(SWD_ERROR_INVALID_IDCODE);
 8002826:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <connectToTarget+0xac>)
 8002828:	481e      	ldr	r0, [pc, #120]	@ (80028a4 <connectToTarget+0xb0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002830:	2108      	movs	r1, #8
 8002832:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002836:	f7fd fce3 	bl	8000200 <longjmp>
  if ( apId == STM32_AHBAP_ID_1 )
 800283a:	4e1b      	ldr	r6, [pc, #108]	@ (80028a8 <connectToTarget+0xb4>)
  else if ( apId == STM32_AHBAP_ID_2 )
 800283c:	4f1b      	ldr	r7, [pc, #108]	@ (80028ac <connectToTarget+0xb8>)
 800283e:	2514      	movs	r5, #20
  
  /* Verify that the AP returns the correct ID */
  int retry = AHB_IDR_RETRY_COUNT;
  while ( retry > 0 )
  {
    target->TargetApId = readApId();
 8002840:	f7ff fd5a 	bl	80022f8 <readApId>
  if ( apId == STM32_AHBAP_ID_1 )
 8002844:	42b0      	cmp	r0, r6
    target->TargetApId = readApId();
 8002846:	6060      	str	r0, [r4, #4]
  if ( apId == STM32_AHBAP_ID_1 )
 8002848:	d003      	beq.n	8002852 <connectToTarget+0x5e>
  else if ( apId == STM32_AHBAP_ID_2 )
 800284a:	42b8      	cmp	r0, r7
 800284c:	d001      	beq.n	8002852 <connectToTarget+0x5e>
  while ( retry > 0 )
 800284e:	3d01      	subs	r5, #1
 8002850:	d1f6      	bne.n	8002840 <connectToTarget+0x4c>
    retry--;
  }
    
  /* Set up parameters for AHB-AP. This must be done before accessing
   * internal memory. */
  initAhbAp();
 8002852:	f7ff fd99 	bl	8002388 <initAhbAp>
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8002856:	4916      	ldr	r1, [pc, #88]	@ (80028b0 <connectToTarget+0xbc>)
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8002858:	4d15      	ldr	r5, [pc, #84]	@ (80028b0 <connectToTarget+0xbc>)
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 800285a:	2001      	movs	r0, #1
 800285c:	f7ff fad8 	bl	8001e10 <writeAP>
  writeAP(AP_DRW, STOP_CMD);
 8002860:	4914      	ldr	r1, [pc, #80]	@ (80028b4 <connectToTarget+0xc0>)
 8002862:	2003      	movs	r0, #3
 8002864:	f7ff fad4 	bl	8001e10 <writeAP>
 8002868:	24c8      	movs	r4, #200	@ 0xc8
 800286a:	e001      	b.n	8002870 <connectToTarget+0x7c>
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 ); 
 800286c:	3c01      	subs	r4, #1
 800286e:	d010      	beq.n	8002892 <connectToTarget+0x9e>
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8002870:	2001      	movs	r0, #1
 8002872:	4629      	mov	r1, r5
 8002874:	f7ff facc 	bl	8001e10 <writeAP>
    readAP(AP_DRW, &dhcrState);
 8002878:	a901      	add	r1, sp, #4
 800287a:	2003      	movs	r0, #3
 800287c:	f7ff fc5e 	bl	800213c <readAP>
    readDP(DP_RDBUFF, &dhcrState);
 8002880:	a901      	add	r1, sp, #4
 8002882:	2003      	movs	r0, #3
 8002884:	f7ff fc78 	bl	8002178 <readDP>
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 ); 
 8002888:	9b01      	ldr	r3, [sp, #4]
 800288a:	039b      	lsls	r3, r3, #14
 800288c:	d5ee      	bpl.n	800286c <connectToTarget+0x78>
  haltTarget();
}
 800288e:	b003      	add	sp, #12
 8002890:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
 8002892:	f7ff fef7 	bl	8002684 <haltTarget.part.0>
 8002896:	bf00      	nop
 8002898:	0bc11477 	.word	0x0bc11477
 800289c:	08010cfc 	.word	0x08010cfc
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000188 	.word	0x20000188
 80028a8:	04770031 	.word	0x04770031
 80028ac:	84770001 	.word	0x84770001
 80028b0:	e000edf0 	.word	0xe000edf0
 80028b4:	a05f0003 	.word	0xa05f0003

080028b8 <Target_ProgramCallback_STM32H7>:
    return true;
}
#else
// Callback function to program the Stm32h7 flash memory
bool Target_ProgramCallback_STM32H7(uint32_t address, const uint8_t *data, uint8_t data_size)
{
 80028b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Assume data_size is a multiple of 4 and <= 32
    static uint8_t combined_data[32];
    static uint8_t combined_offset = 0;
    static uint32_t current_address;

    if (combined_offset == 0) {
 80028bc:	4e52      	ldr	r6, [pc, #328]	@ (8002a08 <Target_ProgramCallback_STM32H7+0x150>)
 80028be:	7835      	ldrb	r5, [r6, #0]
{
 80028c0:	b083      	sub	sp, #12
 80028c2:	4614      	mov	r4, r2
    if (combined_offset == 0) {
 80028c4:	b90d      	cbnz	r5, 80028ca <Target_ProgramCallback_STM32H7+0x12>
        current_address = address;
 80028c6:	4b51      	ldr	r3, [pc, #324]	@ (8002a0c <Target_ProgramCallback_STM32H7+0x154>)
 80028c8:	6018      	str	r0, [r3, #0]
    }

    if (data_size % 4 != 0 || data_size > 32) {
 80028ca:	07a3      	lsls	r3, r4, #30
 80028cc:	d101      	bne.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
 80028ce:	2c20      	cmp	r4, #32
 80028d0:	d901      	bls.n	80028d6 <Target_ProgramCallback_STM32H7+0x1e>
        return false;
 80028d2:	2000      	movs	r0, #0
 80028d4:	e040      	b.n	8002958 <Target_ProgramCallback_STM32H7+0xa0>
    }

    // Copy the data to the appropriate position in combined_data
    memcpy(combined_data + combined_offset, data, data_size);
 80028d6:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002a10 <Target_ProgramCallback_STM32H7+0x158>
    combined_offset += data_size;

    // Determine programming word size based on TargetDevId
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 80028da:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002a14 <Target_ProgramCallback_STM32H7+0x15c>
    memcpy(combined_data + combined_offset, data, data_size);
 80028de:	4622      	mov	r2, r4
 80028e0:	eb08 0005 	add.w	r0, r8, r5
 80028e4:	f00d f965 	bl	800fbb2 <memcpy>
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 80028e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
    combined_offset += data_size;
 80028ec:	4425      	add	r5, r4
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 80028ee:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
    combined_offset += data_size;
 80028f2:	b2ed      	uxtb	r5, r5
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 80028f4:	bf0b      	itete	eq
 80028f6:	f04f 0a10 	moveq.w	sl, #16
 80028fa:	f04f 0a20 	movne.w	sl, #32
 80028fe:	2204      	moveq	r2, #4
 8002900:	2208      	movne	r2, #8
    uint8_t bytes_to_program = words_to_program * 4;

    // Program the flash if enough data is accumulated
    if (combined_offset >= bytes_to_program) {
 8002902:	4555      	cmp	r5, sl
    combined_offset += data_size;
 8002904:	7035      	strb	r5, [r6, #0]
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 8002906:	46d3      	mov	fp, sl
    if (combined_offset >= bytes_to_program) {
 8002908:	d329      	bcc.n	800295e <Target_ProgramCallback_STM32H7+0xa6>
        // Determine which bank to unlock based on the address
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 800290a:	4f40      	ldr	r7, [pc, #256]	@ (8002a0c <Target_ProgramCallback_STM32H7+0x154>)
 800290c:	9201      	str	r2, [sp, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8002914:	d256      	bcs.n	80029c4 <Target_ProgramCallback_STM32H7+0x10c>
            // Unlock bank 1
            if (Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1) != TARGET_OK) {
 8002916:	2001      	movs	r0, #1
 8002918:	f000 ff30 	bl	800377c <Stm32h7_Flash_Unlock>
 800291c:	9a01      	ldr	r2, [sp, #4]
 800291e:	2800      	cmp	r0, #0
 8002920:	d1d7      	bne.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
                return false;
            }
        }

        // Program the flash memory
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8002922:	493b      	ldr	r1, [pc, #236]	@ (8002a10 <Target_ProgramCallback_STM32H7+0x158>)
 8002924:	6838      	ldr	r0, [r7, #0]
 8002926:	f000 ff85 	bl	8003834 <Stm32h7_Flash_Program>
 800292a:	2800      	cmp	r0, #0
 800292c:	d15c      	bne.n	80029e8 <Target_ProgramCallback_STM32H7+0x130>
            }
            return false;
        }

        // Lock the bank after programming
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
            Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002934:	bf34      	ite	cc
 8002936:	2001      	movcc	r0, #1
        } else {
            Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002938:	2002      	movcs	r0, #2
 800293a:	f000 ff5b 	bl	80037f4 <Stm32h7_Flash_Lock>

        // Increment the address by the number of bytes programmed
        current_address += bytes_to_program;

        // Move remaining data to the beginning of combined_data
        combined_offset -= bytes_to_program;
 800293e:	7835      	ldrb	r5, [r6, #0]
        current_address += bytes_to_program;
 8002940:	683b      	ldr	r3, [r7, #0]
        combined_offset -= bytes_to_program;
 8002942:	eba5 050b 	sub.w	r5, r5, fp
 8002946:	b2ed      	uxtb	r5, r5
        current_address += bytes_to_program;
 8002948:	eb0a 0b03 	add.w	fp, sl, r3
        combined_offset -= bytes_to_program;
 800294c:	7035      	strb	r5, [r6, #0]
        current_address += bytes_to_program;
 800294e:	f8c7 b000 	str.w	fp, [r7]
        if (combined_offset > 0) {
 8002952:	2d00      	cmp	r5, #0
 8002954:	d13d      	bne.n	80029d2 <Target_ProgramCallback_STM32H7+0x11a>

        // Reset combined_offset for the next 32-byte chunk
        combined_offset = 0;
    }

    return true;
 8002956:	2001      	movs	r0, #1
}
 8002958:	b003      	add	sp, #12
 800295a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data_size == 0 && combined_offset > 0) {
 800295e:	2c00      	cmp	r4, #0
 8002960:	d1f9      	bne.n	8002956 <Target_ProgramCallback_STM32H7+0x9e>
 8002962:	2d00      	cmp	r5, #0
 8002964:	d0f7      	beq.n	8002956 <Target_ProgramCallback_STM32H7+0x9e>
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 8002966:	4f29      	ldr	r7, [pc, #164]	@ (8002a0c <Target_ProgramCallback_STM32H7+0x154>)
 8002968:	f8d7 b000 	ldr.w	fp, [r7]
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 800296c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8002970:	bf0c      	ite	eq
 8002972:	2410      	moveq	r4, #16
 8002974:	2420      	movne	r4, #32
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8002976:	1b62      	subs	r2, r4, r5
 8002978:	eb08 0005 	add.w	r0, r8, r5
 800297c:	21ff      	movs	r1, #255	@ 0xff
 800297e:	f00d f89d 	bl	800fabc <memset>
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 8002982:	f1bb 6f01 	cmp.w	fp, #135266304	@ 0x8100000
        combined_offset = padding_size;
 8002986:	7034      	strb	r4, [r6, #0]
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 8002988:	d237      	bcs.n	80029fa <Target_ProgramCallback_STM32H7+0x142>
            if (Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1) != TARGET_OK) {
 800298a:	2001      	movs	r0, #1
 800298c:	f000 fef6 	bl	800377c <Stm32h7_Flash_Unlock>
 8002990:	2800      	cmp	r0, #0
 8002992:	d19e      	bne.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8002994:	7833      	ldrb	r3, [r6, #0]
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8002996:	491e      	ldr	r1, [pc, #120]	@ (8002a10 <Target_ProgramCallback_STM32H7+0x158>)
 8002998:	6838      	ldr	r0, [r7, #0]
        words_to_program = (combined_offset == 32) ? 8 : 4;
 800299a:	2b20      	cmp	r3, #32
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 800299c:	bf14      	ite	ne
 800299e:	2204      	movne	r2, #4
 80029a0:	2208      	moveq	r2, #8
 80029a2:	f000 ff47 	bl	8003834 <Stm32h7_Flash_Program>
 80029a6:	b9f8      	cbnz	r0, 80029e8 <Target_ProgramCallback_STM32H7+0x130>
        if (current_address < STM32H7_FLASH_BANK2_BASE) {
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
            Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80029ae:	bf34      	ite	cc
 80029b0:	2001      	movcc	r0, #1
            Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 80029b2:	2002      	movcs	r0, #2
 80029b4:	f000 ff1e 	bl	80037f4 <Stm32h7_Flash_Lock>
        current_address += padding_size;
 80029b8:	683b      	ldr	r3, [r7, #0]
        combined_offset = 0;
 80029ba:	2200      	movs	r2, #0
        current_address += padding_size;
 80029bc:	4423      	add	r3, r4
 80029be:	603b      	str	r3, [r7, #0]
        combined_offset = 0;
 80029c0:	7032      	strb	r2, [r6, #0]
 80029c2:	e7c8      	b.n	8002956 <Target_ProgramCallback_STM32H7+0x9e>
            if (Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2) != TARGET_OK) {
 80029c4:	2002      	movs	r0, #2
 80029c6:	f000 fed9 	bl	800377c <Stm32h7_Flash_Unlock>
 80029ca:	9a01      	ldr	r2, [sp, #4]
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d0a8      	beq.n	8002922 <Target_ProgramCallback_STM32H7+0x6a>
 80029d0:	e77f      	b.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
 80029d2:	480f      	ldr	r0, [pc, #60]	@ (8002a10 <Target_ProgramCallback_STM32H7+0x158>)
 80029d4:	eb08 010a 	add.w	r1, r8, sl
 80029d8:	462a      	mov	r2, r5
 80029da:	f00d f855 	bl	800fa88 <memmove>
    if (data_size == 0 && combined_offset > 0) {
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d1b9      	bne.n	8002956 <Target_ProgramCallback_STM32H7+0x9e>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 80029e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80029e6:	e7c1      	b.n	800296c <Target_ProgramCallback_STM32H7+0xb4>
            if (current_address < STM32H7_FLASH_BANK2_BASE) {
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
                Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80029ee:	bf34      	ite	cc
 80029f0:	2001      	movcc	r0, #1
                Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 80029f2:	2002      	movcs	r0, #2
 80029f4:	f000 fefe 	bl	80037f4 <Stm32h7_Flash_Lock>
 80029f8:	e76b      	b.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
            if (Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2) != TARGET_OK) {
 80029fa:	2002      	movs	r0, #2
 80029fc:	f000 febe 	bl	800377c <Stm32h7_Flash_Unlock>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d0c7      	beq.n	8002994 <Target_ProgramCallback_STM32H7+0xdc>
 8002a04:	e765      	b.n	80028d2 <Target_ProgramCallback_STM32H7+0x1a>
 8002a06:	bf00      	nop
 8002a08:	200004cc 	.word	0x200004cc
 8002a0c:	200004c8 	.word	0x200004c8
 8002a10:	200004a8 	.word	0x200004a8
 8002a14:	200004d0 	.word	0x200004d0

08002a18 <Target_ProgramCallback_STM32C0>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	460c      	mov	r4, r1
 8002a1e:	4616      	mov	r6, r2
	volatile uint64_t tmp[4] = {0};
 8002a20:	2100      	movs	r1, #0
 8002a22:	2220      	movs	r2, #32
{
 8002a24:	4605      	mov	r5, r0
	volatile uint64_t tmp[4] = {0};
 8002a26:	4668      	mov	r0, sp
 8002a28:	f00d f848 	bl	800fabc <memset>
  	tmp[i] = ((uint64_t*)buf)[i];
 8002a2c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002a30:	e9cd 2300 	strd	r2, r3, [sp]
 8002a34:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a3c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8002a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a44:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8002a48:	e9cd 2306 	strd	r2, r3, [sp, #24]
  status = Stm32c0_Flash_Unlock();
 8002a4c:	f000 fcfc 	bl	8003448 <Stm32c0_Flash_Unlock>
  if(status != TARGET_OK)
 8002a50:	b9d0      	cbnz	r0, 8002a88 <Target_ProgramCallback_STM32C0+0x70>
 8002a52:	4604      	mov	r4, r0
 8002a54:	4603      	mov	r3, r0
		status = Stm32c0_Flash_Program(addr + (i*8), tmp[i]);
 8002a56:	3320      	adds	r3, #32
 8002a58:	446b      	add	r3, sp
 8002a5a:	e953 2308 	ldrd	r2, r3, [r3, #-32]
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f000 fd78 	bl	8003554 <Stm32c0_Flash_Program>
			if (bufsize <= (i + 1) * 8)
 8002a64:	3401      	adds	r4, #1
 8002a66:	3508      	adds	r5, #8
 8002a68:	00e3      	lsls	r3, r4, #3
		if(status != TARGET_OK)
 8002a6a:	b958      	cbnz	r0, 8002a84 <Target_ProgramCallback_STM32C0+0x6c>
			if (bufsize <= (i + 1) * 8)
 8002a6c:	ebb6 0fc4 	cmp.w	r6, r4, lsl #3
 8002a70:	d901      	bls.n	8002a76 <Target_ProgramCallback_STM32C0+0x5e>
  for(uint32_t i = 0; i < 4; i++)
 8002a72:	2c04      	cmp	r4, #4
 8002a74:	d1ef      	bne.n	8002a56 <Target_ProgramCallback_STM32C0+0x3e>
  status = Stm32c0_Flash_Lock();
 8002a76:	f000 fd05 	bl	8003484 <Stm32c0_Flash_Lock>
	if(status != TARGET_OK)
 8002a7a:	f080 0001 	eor.w	r0, r0, #1
 8002a7e:	b2c0      	uxtb	r0, r0
}
 8002a80:	b008      	add	sp, #32
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
			Stm32c0_Flash_Lock();
 8002a84:	f000 fcfe 	bl	8003484 <Stm32c0_Flash_Lock>
  	return false;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e7f9      	b.n	8002a80 <Target_ProgramCallback_STM32C0+0x68>

08002a8c <__io_putchar>:
{
 8002a8c:	b500      	push	{lr}
 8002a8e:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 8002a94:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a96:	2201      	movs	r2, #1
 8002a98:	a901      	add	r1, sp, #4
 8002a9a:	4803      	ldr	r0, [pc, #12]	@ (8002aa8 <__io_putchar+0x1c>)
 8002a9c:	f005 fe06 	bl	80086ac <HAL_UART_Transmit>
}
 8002aa0:	9801      	ldr	r0, [sp, #4]
 8002aa2:	b003      	add	sp, #12
 8002aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa8:	20000610 	.word	0x20000610

08002aac <log_message>:
{
 8002aac:	b40f      	push	{r0, r1, r2, r3}
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	b0d6      	sub	sp, #344	@ 0x158
 8002ab2:	ab58      	add	r3, sp, #352	@ 0x160
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ab4:	4c1f      	ldr	r4, [pc, #124]	@ (8002b34 <log_message+0x88>)
{
 8002ab6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002aba:	9307      	str	r3, [sp, #28]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002abc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ac0:	a816      	add	r0, sp, #88	@ 0x58
 8002ac2:	f00c ff3f 	bl	800f944 <vsniprintf>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ac6:	a909      	add	r1, sp, #36	@ 0x24
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4620      	mov	r0, r4
 8002acc:	f004 f95c 	bl	8006d88 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002ad0:	a908      	add	r1, sp, #32
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f004 f993 	bl	8006e00 <HAL_RTC_GetDate>
    uint32_t SecondFraction = hrtc.Init.SynchPrediv;
 8002ada:	68e0      	ldr	r0, [r4, #12]
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
             2000 + sDate.Year, sDate.Month, sDate.Date,
 8002ade:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002ae2:	1a81      	subs	r1, r0, r2
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 8002ae4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8002ae8:	9204      	str	r2, [sp, #16]
 8002aea:	f89d 2025 	ldrb.w	r2, [sp, #37]	@ 0x25
 8002aee:	9203      	str	r2, [sp, #12]
 8002af0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8002af4:	9202      	str	r2, [sp, #8]
 8002af6:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
 8002afa:	9201      	str	r2, [sp, #4]
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002afc:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 8002b00:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
 8002b04:	9200      	str	r2, [sp, #0]
 8002b06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b38 <log_message+0x8c>)
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	fb04 f101 	mul.w	r1, r4, r1
 8002b12:	fbb1 f1f0 	udiv	r1, r1, r0
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 8002b16:	a80e      	add	r0, sp, #56	@ 0x38
 8002b18:	9105      	str	r1, [sp, #20]
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	f00c fe70 	bl	800f800 <sniprintf>
    printf("[%s] %s", time_str, buffer);
 8002b20:	aa16      	add	r2, sp, #88	@ 0x58
 8002b22:	a90e      	add	r1, sp, #56	@ 0x38
 8002b24:	4805      	ldr	r0, [pc, #20]	@ (8002b3c <log_message+0x90>)
 8002b26:	f00c fdf3 	bl	800f710 <iprintf>
}
 8002b2a:	b056      	add	sp, #344	@ 0x158
 8002b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b30:	b004      	add	sp, #16
 8002b32:	4770      	bx	lr
 8002b34:	20000888 	.word	0x20000888
 8002b38:	08010d14 	.word	0x08010d14
 8002b3c:	08010d38 	.word	0x08010d38

08002b40 <Target_Program>:
{
 8002b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    log_message("Target Program\n");
 8002b44:	4866      	ldr	r0, [pc, #408]	@ (8002ce0 <Target_Program+0x1a0>)
{
 8002b46:	f2ad 5d6c 	subw	sp, sp, #1388	@ 0x56c
    log_message("Target Program\n");
 8002b4a:	f7ff ffaf 	bl	8002aac <log_message>
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002b4e:	4865      	ldr	r0, [pc, #404]	@ (8002ce4 <Target_Program+0x1a4>)
 8002b50:	a942      	add	r1, sp, #264	@ 0x108
 8002b52:	f00c f95d 	bl	800ee10 <f_stat>
    if (res == FR_OK)
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d05b      	beq.n	8002c12 <Target_Program+0xd2>
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002b5a:	4863      	ldr	r0, [pc, #396]	@ (8002ce8 <Target_Program+0x1a8>)
 8002b5c:	a942      	add	r1, sp, #264	@ 0x108
 8002b5e:	f00c f957 	bl	800ee10 <f_stat>
        if (res == FR_OK)
 8002b62:	b138      	cbz	r0, 8002b74 <Target_Program+0x34>
            log_message("No firmware file found\n");
 8002b64:	4861      	ldr	r0, [pc, #388]	@ (8002cec <Target_Program+0x1ac>)
 8002b66:	f7ff ffa1 	bl	8002aac <log_message>
            return TARGET_ERROR;
 8002b6a:	2001      	movs	r0, #1
}
 8002b6c:	f20d 5d6c 	addw	sp, sp, #1388	@ 0x56c
 8002b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(target.TargetFamily)
 8002b74:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf0 <Target_Program+0x1b0>)
    size_t readcount = 0;
 8002b76:	9001      	str	r0, [sp, #4]
    switch(target.TargetFamily)
 8002b78:	7a1b      	ldrb	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
    size_t readcount = 0;
 8002b7c:	f10d 0804 	add.w	r8, sp, #4
    switch(target.TargetFamily)
 8002b80:	d002      	beq.n	8002b88 <Target_Program+0x48>
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	f040 808e 	bne.w	8002ca4 <Target_Program+0x164>
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002b88:	4857      	ldr	r0, [pc, #348]	@ (8002ce8 <Target_Program+0x1a8>)
 8002b8a:	a988      	add	r1, sp, #544	@ 0x220
 8002b8c:	f00c f940 	bl	800ee10 <f_stat>
    if (res != FR_OK)
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f040 8083 	bne.w	8002c9c <Target_Program+0x15c>
    log_message("Firmware File Information\n");
 8002b96:	4857      	ldr	r0, [pc, #348]	@ (8002cf4 <Target_Program+0x1b4>)
 8002b98:	f7ff ff88 	bl	8002aac <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 8002b9c:	4856      	ldr	r0, [pc, #344]	@ (8002cf8 <Target_Program+0x1b8>)
 8002b9e:	f20d 2136 	addw	r1, sp, #566	@ 0x236
 8002ba2:	f7ff ff83 	bl	8002aac <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002ba6:	f50d 794e 	add.w	r9, sp, #824	@ 0x338
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002baa:	9988      	ldr	r1, [sp, #544]	@ 0x220
 8002bac:	4853      	ldr	r0, [pc, #332]	@ (8002cfc <Target_Program+0x1bc>)
 8002bae:	f7ff ff7d 	bl	8002aac <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002bb2:	494d      	ldr	r1, [pc, #308]	@ (8002ce8 <Target_Program+0x1a8>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4648      	mov	r0, r9
 8002bb8:	f00b fe00 	bl	800e7bc <f_open>
    if (res != FR_OK)
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	d175      	bne.n	8002cac <Target_Program+0x16c>
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for binary programming
 8002bc0:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 8002bc4:	af02      	add	r7, sp, #8
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002bc6:	4643      	mov	r3, r8
 8002bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bcc:	4639      	mov	r1, r7
 8002bce:	4648      	mov	r0, r9
 8002bd0:	f00b ff64 	bl	800ea9c <f_read>
        if (res != FR_OK)
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d171      	bne.n	8002cbe <Target_Program+0x17e>
        if (readcount == 0)
 8002bda:	f8d8 4000 	ldr.w	r4, [r8]
 8002bde:	b924      	cbnz	r4, 8002bea <Target_Program+0xaa>
 8002be0:	e074      	b.n	8002ccc <Target_Program+0x18c>
            while (i < readcount)
 8002be2:	f8d8 4000 	ldr.w	r4, [r8]
 8002be6:	42ac      	cmp	r4, r5
 8002be8:	d9ed      	bls.n	8002bc6 <Target_Program+0x86>
                size_t chunk_size = (readcount - i) >= 16 ? 16 : (readcount - i);
 8002bea:	1b64      	subs	r4, r4, r5
 8002bec:	2c10      	cmp	r4, #16
 8002bee:	bf28      	it	cs
 8002bf0:	2410      	movcs	r4, #16
                if (!Target_ProgramCallback_STM32C0(current_address, &fbuf[i], (uint8_t)chunk_size))
 8002bf2:	1979      	adds	r1, r7, r5
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	b2e2      	uxtb	r2, r4
 8002bf8:	f7ff ff0e 	bl	8002a18 <Target_ProgramCallback_STM32C0>
                i += chunk_size;
 8002bfc:	4425      	add	r5, r4
                current_address += chunk_size;
 8002bfe:	4426      	add	r6, r4
                if (!Target_ProgramCallback_STM32C0(current_address, &fbuf[i], (uint8_t)chunk_size))
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1ee      	bne.n	8002be2 <Target_Program+0xa2>
                    log_message("Flash write error\n");
 8002c04:	483e      	ldr	r0, [pc, #248]	@ (8002d00 <Target_Program+0x1c0>)
 8002c06:	f7ff ff51 	bl	8002aac <log_message>
                    f_close(&file);
 8002c0a:	4648      	mov	r0, r9
 8002c0c:	f00c f87e 	bl	800ed0c <f_close>
                    return TARGET_ERROR;
 8002c10:	e7ab      	b.n	8002b6a <Target_Program+0x2a>
    size_t readcount = 0;
 8002c12:	f10d 0804 	add.w	r8, sp, #4
 8002c16:	4603      	mov	r3, r0
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002c18:	a988      	add	r1, sp, #544	@ 0x220
 8002c1a:	4832      	ldr	r0, [pc, #200]	@ (8002ce4 <Target_Program+0x1a4>)
    size_t readcount = 0;
 8002c1c:	f8c8 3000 	str.w	r3, [r8]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002c20:	f00c f8f6 	bl	800ee10 <f_stat>
    if (res != FR_OK)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d139      	bne.n	8002c9c <Target_Program+0x15c>
    log_message("Firmware File Information\n");
 8002c28:	4832      	ldr	r0, [pc, #200]	@ (8002cf4 <Target_Program+0x1b4>)
 8002c2a:	f7ff ff3f 	bl	8002aac <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 8002c2e:	4832      	ldr	r0, [pc, #200]	@ (8002cf8 <Target_Program+0x1b8>)
 8002c30:	f20d 2136 	addw	r1, sp, #566	@ 0x236
 8002c34:	f7ff ff3a 	bl	8002aac <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8002c38:	f50d 794e 	add.w	r9, sp, #824	@ 0x338
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002c3c:	9988      	ldr	r1, [sp, #544]	@ 0x220
 8002c3e:	482f      	ldr	r0, [pc, #188]	@ (8002cfc <Target_Program+0x1bc>)
 8002c40:	f7ff ff34 	bl	8002aac <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8002c44:	4927      	ldr	r1, [pc, #156]	@ (8002ce4 <Target_Program+0x1a4>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	4648      	mov	r0, r9
 8002c4a:	f00b fdb7 	bl	800e7bc <f_open>
    if (res != FR_OK)
 8002c4e:	bb68      	cbnz	r0, 8002cac <Target_Program+0x16c>
    ihex_set_callback_func((ihex_callback_fp)*Target_ProgramCallback[target.TargetFamily]);
 8002c50:	4a27      	ldr	r2, [pc, #156]	@ (8002cf0 <Target_Program+0x1b0>)
 8002c52:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <Target_Program+0x1c4>)
 8002c54:	7a12      	ldrb	r2, [r2, #8]
 8002c56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002c5a:	af02      	add	r7, sp, #8
 8002c5c:	f000 ff2e 	bl	8003abc <ihex_set_callback_func>
    ihex_reset_state();
 8002c60:	f000 ff16 	bl	8003a90 <ihex_reset_state>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c68:	4643      	mov	r3, r8
 8002c6a:	4639      	mov	r1, r7
 8002c6c:	4648      	mov	r0, r9
 8002c6e:	f00b ff15 	bl	800ea9c <f_read>
 8002c72:	4602      	mov	r2, r0
            if (!ihex_parser(fbuf, readcount))
 8002c74:	4638      	mov	r0, r7
        if (res != FR_OK)
 8002c76:	bb12      	cbnz	r2, 8002cbe <Target_Program+0x17e>
        if (readcount == 0)
 8002c78:	f8d8 3000 	ldr.w	r3, [r8]
            if (!ihex_parser(fbuf, readcount))
 8002c7c:	4619      	mov	r1, r3
        if (readcount == 0)
 8002c7e:	b32b      	cbz	r3, 8002ccc <Target_Program+0x18c>
            if (readcount < sizeof(fbuf))
 8002c80:	2bff      	cmp	r3, #255	@ 0xff
 8002c82:	d817      	bhi.n	8002cb4 <Target_Program+0x174>
                fbuf[readcount] = '\0';
 8002c84:	54fa      	strb	r2, [r7, r3]
            if (!ihex_parser(fbuf, readcount))
 8002c86:	f000 ff1f 	bl	8003ac8 <ihex_parser>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d1ea      	bne.n	8002c64 <Target_Program+0x124>
                log_message("ihex_parser error\n");
 8002c8e:	481e      	ldr	r0, [pc, #120]	@ (8002d08 <Target_Program+0x1c8>)
 8002c90:	f7ff ff0c 	bl	8002aac <log_message>
                f_close(&file);
 8002c94:	4648      	mov	r0, r9
 8002c96:	f00c f839 	bl	800ed0c <f_close>
                return TARGET_ERROR;
 8002c9a:	e766      	b.n	8002b6a <Target_Program+0x2a>
        log_message("f_stat error\n");
 8002c9c:	481b      	ldr	r0, [pc, #108]	@ (8002d0c <Target_Program+0x1cc>)
 8002c9e:	f7ff ff05 	bl	8002aac <log_message>
        return TARGET_ERROR;
 8002ca2:	e762      	b.n	8002b6a <Target_Program+0x2a>
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 8002ca4:	481a      	ldr	r0, [pc, #104]	@ (8002d10 <Target_Program+0x1d0>)
 8002ca6:	f7ff ff01 	bl	8002aac <log_message>
            return 0x08000000;
 8002caa:	e76d      	b.n	8002b88 <Target_Program+0x48>
        log_message("f_open error\n");
 8002cac:	4819      	ldr	r0, [pc, #100]	@ (8002d14 <Target_Program+0x1d4>)
 8002cae:	f7ff fefd 	bl	8002aac <log_message>
        return TARGET_ERROR;
 8002cb2:	e75a      	b.n	8002b6a <Target_Program+0x2a>
            if (!ihex_parser(fbuf, readcount))
 8002cb4:	f000 ff08 	bl	8003ac8 <ihex_parser>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d1d3      	bne.n	8002c64 <Target_Program+0x124>
 8002cbc:	e7e7      	b.n	8002c8e <Target_Program+0x14e>
            log_message("f_read error\n");
 8002cbe:	4816      	ldr	r0, [pc, #88]	@ (8002d18 <Target_Program+0x1d8>)
 8002cc0:	f7ff fef4 	bl	8002aac <log_message>
            f_close(&file);
 8002cc4:	4648      	mov	r0, r9
 8002cc6:	f00c f821 	bl	800ed0c <f_close>
            return TARGET_ERROR;
 8002cca:	e74e      	b.n	8002b6a <Target_Program+0x2a>
            res = f_close(&file);
 8002ccc:	4648      	mov	r0, r9
 8002cce:	f00c f81d 	bl	800ed0c <f_close>
            if (res != FR_OK)
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f43f af4a 	beq.w	8002b6c <Target_Program+0x2c>
                log_message("f_close error\n");
 8002cd8:	4810      	ldr	r0, [pc, #64]	@ (8002d1c <Target_Program+0x1dc>)
 8002cda:	f7ff fee7 	bl	8002aac <log_message>
                return TARGET_ERROR;
 8002cde:	e744      	b.n	8002b6a <Target_Program+0x2a>
 8002ce0:	08010d40 	.word	0x08010d40
 8002ce4:	08010d50 	.word	0x08010d50
 8002ce8:	08010e00 	.word	0x08010e00
 8002cec:	08010e64 	.word	0x08010e64
 8002cf0:	200004d0 	.word	0x200004d0
 8002cf4:	08010d70 	.word	0x08010d70
 8002cf8:	08010d8c 	.word	0x08010d8c
 8002cfc:	08010da0 	.word	0x08010da0
 8002d00:	08010e50 	.word	0x08010e50
 8002d04:	08011444 	.word	0x08011444
 8002d08:	08010dec 	.word	0x08010dec
 8002d0c:	08010d60 	.word	0x08010d60
 8002d10:	08010e10 	.word	0x08010e10
 8002d14:	08010dbc 	.word	0x08010dbc
 8002d18:	08010dcc 	.word	0x08010dcc
 8002d1c:	08010ddc 	.word	0x08010ddc

08002d20 <Target_VerifyCallback>:
#endif



static bool Target_VerifyCallback(uint32_t addr, const uint8_t *buf, uint8_t bufsize)
{
 8002d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t tmp[32];
	uint32_t u32_ReadData[8];

	/* Read 4-word from target flash memory */
	for(int i = 0; i < (bufsize/4); i++)
 8002d24:	ea5f 0a92 	movs.w	sl, r2, lsr #2
{
 8002d28:	b090      	sub	sp, #64	@ 0x40
 8002d2a:	4617      	mov	r7, r2
 8002d2c:	4680      	mov	r8, r0
 8002d2e:	460d      	mov	r5, r1
	for(int i = 0; i < (bufsize/4); i++)
 8002d30:	d049      	beq.n	8002dc6 <Target_VerifyCallback+0xa6>
	{
		u32_ReadData[i] = readMem(addr + (i*4));
 8002d32:	ab10      	add	r3, sp, #64	@ 0x40
 8002d34:	f1c3 0924 	rsb	r9, r3, #36	@ 0x24
 8002d38:	ae07      	add	r6, sp, #28
 8002d3a:	4481      	add	r9, r0
	for(int i = 0; i < (bufsize/4); i++)
 8002d3c:	2400      	movs	r4, #0
		u32_ReadData[i] = readMem(addr + (i*4));
 8002d3e:	eb09 0006 	add.w	r0, r9, r6
 8002d42:	f7ff fd37 	bl	80027b4 <readMem>
	for(int i = 0; i < (bufsize/4); i++)
 8002d46:	3401      	adds	r4, #1
 8002d48:	4554      	cmp	r4, sl
		u32_ReadData[i] = readMem(addr + (i*4));
 8002d4a:	f846 0f04 	str.w	r0, [r6, #4]!
	for(int i = 0; i < (bufsize/4); i++)
 8002d4e:	d1f6      	bne.n	8002d3e <Target_VerifyCallback+0x1e>
	}

	/* Convert uint32_t to uint8_t */
  for (int i = 0; i < (bufsize / 4); i++) {
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	9300      	str	r3, [sp, #0]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d54:	2c01      	cmp	r4, #1
 8002d56:	d019      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d5a:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d5c:	2c02      	cmp	r4, #2
 8002d5e:	d015      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d62:	9302      	str	r3, [sp, #8]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d64:	2c03      	cmp	r4, #3
 8002d66:	d011      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d6a:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d6c:	2c04      	cmp	r4, #4
 8002d6e:	d00d      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d72:	9304      	str	r3, [sp, #16]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d74:	2c05      	cmp	r4, #5
 8002d76:	d009      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002d7a:	9305      	str	r3, [sp, #20]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d7c:	2c06      	cmp	r4, #6
 8002d7e:	d005      	beq.n	8002d8c <Target_VerifyCallback+0x6c>
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d82:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < (bufsize / 4); i++) {
 8002d84:	2c07      	cmp	r4, #7
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002d86:	bf1c      	itt	ne
 8002d88:	9b0f      	ldrne	r3, [sp, #60]	@ 0x3c
 8002d8a:	9307      	strne	r3, [sp, #28]
  	tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
  	tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
  }

  /* Compare Hex & Flash Data */
	for(int i = 0; i < bufsize; i++)
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	466c      	mov	r4, sp
 8002d90:	2300      	movs	r3, #0
 8002d92:	e002      	b.n	8002d9a <Target_VerifyCallback+0x7a>
 8002d94:	3301      	adds	r3, #1
 8002d96:	42bb      	cmp	r3, r7
 8002d98:	d017      	beq.n	8002dca <Target_VerifyCallback+0xaa>

#if 0 //debug message
		log_message("Address: 0x%08"PRIX32"\n", (addr + i));
		log_message("Flash: 0x%02"PRIX16", BIN File: 0x%02"PRIX16"\n", tmp[i], buf[i]);
#endif
		if(buf[i] != tmp[i])
 8002d9a:	780a      	ldrb	r2, [r1, #0]
 8002d9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002da0:	42aa      	cmp	r2, r5
 8002da2:	460e      	mov	r6, r1
 8002da4:	f101 0101 	add.w	r1, r1, #1
 8002da8:	d0f4      	beq.n	8002d94 <Target_VerifyCallback+0x74>
		{
			log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002daa:	eb03 0108 	add.w	r1, r3, r8
 8002dae:	4809      	ldr	r0, [pc, #36]	@ (8002dd4 <Target_VerifyCallback+0xb4>)
 8002db0:	f7ff fe7c 	bl	8002aac <log_message>
			log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 8002db4:	7832      	ldrb	r2, [r6, #0]
 8002db6:	4808      	ldr	r0, [pc, #32]	@ (8002dd8 <Target_VerifyCallback+0xb8>)
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7ff fe77 	bl	8002aac <log_message>
			return false;
 8002dbe:	2000      	movs	r0, #0
		}
	}
	return true;
}
 8002dc0:	b010      	add	sp, #64	@ 0x40
 8002dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(int i = 0; i < bufsize; i++)
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d1e0      	bne.n	8002d8c <Target_VerifyCallback+0x6c>
	return true;
 8002dca:	2001      	movs	r0, #1
}
 8002dcc:	b010      	add	sp, #64	@ 0x40
 8002dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08010e7c 	.word	0x08010e7c
 8002dd8:	08010ea4 	.word	0x08010ea4

08002ddc <Target_Verify>:
    return TARGET_OK;
}

/* Main function to verify the target */
static bool Target_Verify(void)
{
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target Verify\n");
 8002de0:	4880      	ldr	r0, [pc, #512]	@ (8002fe4 <Target_Verify+0x208>)
{
 8002de2:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    log_message("Target Verify\n");
 8002de6:	f7ff fe61 	bl	8002aac <log_message>

    /* Check if HEX file exists */
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002dea:	487f      	ldr	r0, [pc, #508]	@ (8002fe8 <Target_Verify+0x20c>)
 8002dec:	a942      	add	r1, sp, #264	@ 0x108
 8002dee:	f00c f80f 	bl	800ee10 <f_stat>
    if(res == FR_OK)
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d077      	beq.n	8002ee6 <Target_Verify+0x10a>
        return Target_VerifyHex();
    }
    else
    {
        /* HEX file does not exist, check for BIN file */
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002df6:	487d      	ldr	r0, [pc, #500]	@ (8002fec <Target_Verify+0x210>)
 8002df8:	a942      	add	r1, sp, #264	@ 0x108
 8002dfa:	f00c f809 	bl	800ee10 <f_stat>
        if(res == FR_OK)
 8002dfe:	b138      	cbz	r0, 8002e10 <Target_Verify+0x34>
            return Target_VerifyBin();
        }
        else
        {
            /* Neither HEX nor BIN file exists */
            log_message("No firmware file found\n");
 8002e00:	487b      	ldr	r0, [pc, #492]	@ (8002ff0 <Target_Verify+0x214>)
 8002e02:	f7ff fe53 	bl	8002aac <log_message>
            return TARGET_ERROR;
 8002e06:	2001      	movs	r0, #1
        }
    }
}
 8002e08:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 8002e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch(target.TargetFamily)
 8002e10:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <Target_Verify+0x218>)
    size_t readcount = 0;
 8002e12:	9000      	str	r0, [sp, #0]
    switch(target.TargetFamily)
 8002e14:	7a1b      	ldrb	r3, [r3, #8]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d002      	beq.n	8002e20 <Target_Verify+0x44>
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	f040 8099 	bne.w	8002f52 <Target_Verify+0x176>
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002e20:	4872      	ldr	r0, [pc, #456]	@ (8002fec <Target_Verify+0x210>)
 8002e22:	a988      	add	r1, sp, #544	@ 0x220
 8002e24:	f00b fff4 	bl	800ee10 <f_stat>
    if(res != FR_OK)
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	f040 808e 	bne.w	8002f4a <Target_Verify+0x16e>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002e2e:	f50d 784e 	add.w	r8, sp, #824	@ 0x338
 8002e32:	496e      	ldr	r1, [pc, #440]	@ (8002fec <Target_Verify+0x210>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	4640      	mov	r0, r8
 8002e38:	f00b fcc0 	bl	800e7bc <f_open>
    if(res != FR_OK)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	f040 808c 	bne.w	8002f5a <Target_Verify+0x17e>
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for verification
 8002e42:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8002e46:	ae02      	add	r6, sp, #8
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002e48:	466b      	mov	r3, sp
 8002e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4640      	mov	r0, r8
 8002e52:	f00b fe23 	bl	800ea9c <f_read>
        if(res != FR_OK)
 8002e56:	4605      	mov	r5, r0
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f040 80b1 	bne.w	8002fc0 <Target_Verify+0x1e4>
        if(readcount == 0)
 8002e5e:	f8dd 9000 	ldr.w	r9, [sp]
 8002e62:	f1b9 0f00 	cmp.w	r9, #0
 8002e66:	d122      	bne.n	8002eae <Target_Verify+0xd2>
 8002e68:	e0b1      	b.n	8002fce <Target_Verify+0x1f2>
                    uint8_t tmp[4] = {0};
 8002e6a:	9401      	str	r4, [sp, #4]
                    memcpy(tmp, &fbuf[i], remaining);
 8002e6c:	f00c fea1 	bl	800fbb2 <memcpy>
		u32_ReadData[i] = readMem(addr + (i*4));
 8002e70:	4650      	mov	r0, sl
 8002e72:	f7ff fc9f 	bl	80027b4 <readMem>
		if(buf[i] != tmp[i])
 8002e76:	f89d 3004 	ldrb.w	r3, [sp, #4]
  	tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002e7a:	b2c4      	uxtb	r4, r0
		if(buf[i] != tmp[i])
 8002e7c:	42a3      	cmp	r3, r4
  	tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8002e7e:	f3c0 2207 	ubfx	r2, r0, #8, #8
  	tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 8002e82:	f3c0 4107 	ubfx	r1, r0, #16, #8
  	tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 8002e86:	464d      	mov	r5, r9
 8002e88:	ea4f 6010 	mov.w	r0, r0, lsr #24
		if(buf[i] != tmp[i])
 8002e8c:	d16e      	bne.n	8002f6c <Target_Verify+0x190>
 8002e8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d17b      	bne.n	8002f8e <Target_Verify+0x1b2>
 8002e96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d17d      	bne.n	8002f9a <Target_Verify+0x1be>
 8002e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ea2:	4283      	cmp	r3, r0
 8002ea4:	d17f      	bne.n	8002fa6 <Target_Verify+0x1ca>
            while (i < readcount)
 8002ea6:	f8dd 9000 	ldr.w	r9, [sp]
 8002eaa:	45a9      	cmp	r9, r5
 8002eac:	d919      	bls.n	8002ee2 <Target_Verify+0x106>
                size_t chunk_size = readcount - i;
 8002eae:	eba9 0205 	sub.w	r2, r9, r5
                if(chunk_size > 32)
 8002eb2:	2a20      	cmp	r2, #32
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	bf28      	it	cs
 8002eb8:	2320      	movcs	r3, #32
                if(adjusted_chunk_size == 0)
 8002eba:	f033 0403 	bics.w	r4, r3, #3
                    memcpy(tmp, &fbuf[i], remaining);
 8002ebe:	a801      	add	r0, sp, #4
                    if(!Target_VerifyCallback(address + i, tmp, 4))
 8002ec0:	eb07 0a05 	add.w	sl, r7, r5
                    memcpy(tmp, &fbuf[i], remaining);
 8002ec4:	eb06 0105 	add.w	r1, r6, r5
                if(adjusted_chunk_size == 0)
 8002ec8:	d0cf      	beq.n	8002e6a <Target_Verify+0x8e>
                    if(!Target_VerifyCallback(address + i, &fbuf[i], (uint8_t)adjusted_chunk_size))
 8002eca:	f004 02fc 	and.w	r2, r4, #252	@ 0xfc
 8002ece:	4650      	mov	r0, sl
 8002ed0:	f7ff ff26 	bl	8002d20 <Target_VerifyCallback>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d06c      	beq.n	8002fb2 <Target_Verify+0x1d6>
            while (i < readcount)
 8002ed8:	f8dd 9000 	ldr.w	r9, [sp]
                    i += adjusted_chunk_size;
 8002edc:	4425      	add	r5, r4
            while (i < readcount)
 8002ede:	45a9      	cmp	r9, r5
 8002ee0:	d8e5      	bhi.n	8002eae <Target_Verify+0xd2>
            address += readcount;
 8002ee2:	444f      	add	r7, r9
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002ee4:	e7b0      	b.n	8002e48 <Target_Verify+0x6c>
    size_t readcount = 0;
 8002ee6:	4603      	mov	r3, r0
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002ee8:	a988      	add	r1, sp, #544	@ 0x220
 8002eea:	483f      	ldr	r0, [pc, #252]	@ (8002fe8 <Target_Verify+0x20c>)
    size_t readcount = 0;
 8002eec:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002eee:	f00b ff8f 	bl	800ee10 <f_stat>
    if(res != FR_OK)
 8002ef2:	bb50      	cbnz	r0, 8002f4a <Target_Verify+0x16e>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8002ef4:	f50d 784e 	add.w	r8, sp, #824	@ 0x338
 8002ef8:	493b      	ldr	r1, [pc, #236]	@ (8002fe8 <Target_Verify+0x20c>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	4640      	mov	r0, r8
 8002efe:	f00b fc5d 	bl	800e7bc <f_open>
    if(res != FR_OK)
 8002f02:	bb50      	cbnz	r0, 8002f5a <Target_Verify+0x17e>
    ihex_set_callback_func((ihex_callback_fp)*Target_VerifyCallback);
 8002f04:	483c      	ldr	r0, [pc, #240]	@ (8002ff8 <Target_Verify+0x21c>)
 8002f06:	f000 fdd9 	bl	8003abc <ihex_set_callback_func>
    ihex_reset_state();
 8002f0a:	f000 fdc1 	bl	8003a90 <ihex_reset_state>
 8002f0e:	ae02      	add	r6, sp, #8
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f14:	ab01      	add	r3, sp, #4
 8002f16:	4631      	mov	r1, r6
 8002f18:	4640      	mov	r0, r8
 8002f1a:	f00b fdbf 	bl	800ea9c <f_read>
 8002f1e:	4602      	mov	r2, r0
            if (!ihex_parser(fbuf, readcount))
 8002f20:	4630      	mov	r0, r6
        if(res != FR_OK)
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	d14c      	bne.n	8002fc0 <Target_Verify+0x1e4>
        if(readcount == 0)
 8002f26:	9b01      	ldr	r3, [sp, #4]
            if (!ihex_parser(fbuf, readcount))
 8002f28:	4619      	mov	r1, r3
        if(readcount == 0)
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04f      	beq.n	8002fce <Target_Verify+0x1f2>
            if(readcount < sizeof(fbuf))
 8002f2e:	2bff      	cmp	r3, #255	@ 0xff
 8002f30:	d817      	bhi.n	8002f62 <Target_Verify+0x186>
                fbuf[readcount] = '\0';
 8002f32:	54f2      	strb	r2, [r6, r3]
            if (!ihex_parser(fbuf, readcount))
 8002f34:	f000 fdc8 	bl	8003ac8 <ihex_parser>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d1e9      	bne.n	8002f10 <Target_Verify+0x134>
                log_message("ihex_parser error\n");
 8002f3c:	482f      	ldr	r0, [pc, #188]	@ (8002ffc <Target_Verify+0x220>)
 8002f3e:	f7ff fdb5 	bl	8002aac <log_message>
                f_close(&file);
 8002f42:	4640      	mov	r0, r8
 8002f44:	f00b fee2 	bl	800ed0c <f_close>
                return TARGET_ERROR;
 8002f48:	e75d      	b.n	8002e06 <Target_Verify+0x2a>
        log_message("f_stat error\n");
 8002f4a:	482d      	ldr	r0, [pc, #180]	@ (8003000 <Target_Verify+0x224>)
 8002f4c:	f7ff fdae 	bl	8002aac <log_message>
        return TARGET_ERROR;
 8002f50:	e759      	b.n	8002e06 <Target_Verify+0x2a>
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 8002f52:	482c      	ldr	r0, [pc, #176]	@ (8003004 <Target_Verify+0x228>)
 8002f54:	f7ff fdaa 	bl	8002aac <log_message>
            return 0x08000000;
 8002f58:	e762      	b.n	8002e20 <Target_Verify+0x44>
        log_message("f_open error\n");
 8002f5a:	482b      	ldr	r0, [pc, #172]	@ (8003008 <Target_Verify+0x22c>)
 8002f5c:	f7ff fda6 	bl	8002aac <log_message>
        return TARGET_ERROR;
 8002f60:	e751      	b.n	8002e06 <Target_Verify+0x2a>
            if (!ihex_parser(fbuf, readcount))
 8002f62:	f000 fdb1 	bl	8003ac8 <ihex_parser>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1d2      	bne.n	8002f10 <Target_Verify+0x134>
 8002f6a:	e7e7      	b.n	8002f3c <Target_Verify+0x160>
		if(buf[i] != tmp[i])
 8002f6c:	ad01      	add	r5, sp, #4
			log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002f6e:	4651      	mov	r1, sl
 8002f70:	4826      	ldr	r0, [pc, #152]	@ (800300c <Target_Verify+0x230>)
 8002f72:	f7ff fd9b 	bl	8002aac <log_message>
			log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 8002f76:	782a      	ldrb	r2, [r5, #0]
 8002f78:	4825      	ldr	r0, [pc, #148]	@ (8003010 <Target_Verify+0x234>)
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	f7ff fd96 	bl	8002aac <log_message>
                        log_message("Verification failed\n");
 8002f80:	4824      	ldr	r0, [pc, #144]	@ (8003014 <Target_Verify+0x238>)
 8002f82:	f7ff fd93 	bl	8002aac <log_message>
                        f_close(&file);
 8002f86:	4640      	mov	r0, r8
 8002f88:	f00b fec0 	bl	800ed0c <f_close>
                        return TARGET_ERROR;
 8002f8c:	e73b      	b.n	8002e06 <Target_Verify+0x2a>
			log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002f8e:	f10a 0a01 	add.w	sl, sl, #1
  	tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8002f92:	4614      	mov	r4, r2
		if(buf[i] != tmp[i])
 8002f94:	f10d 0505 	add.w	r5, sp, #5
 8002f98:	e7e9      	b.n	8002f6e <Target_Verify+0x192>
			log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002f9a:	f10a 0a02 	add.w	sl, sl, #2
  	tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 8002f9e:	460c      	mov	r4, r1
		if(buf[i] != tmp[i])
 8002fa0:	f10d 0506 	add.w	r5, sp, #6
 8002fa4:	e7e3      	b.n	8002f6e <Target_Verify+0x192>
			log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002fa6:	f10a 0a03 	add.w	sl, sl, #3
  	tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 8002faa:	4604      	mov	r4, r0
		if(buf[i] != tmp[i])
 8002fac:	f10d 0507 	add.w	r5, sp, #7
 8002fb0:	e7dd      	b.n	8002f6e <Target_Verify+0x192>
                        log_message("Verification failed\n");
 8002fb2:	4818      	ldr	r0, [pc, #96]	@ (8003014 <Target_Verify+0x238>)
 8002fb4:	f7ff fd7a 	bl	8002aac <log_message>
                        f_close(&file);
 8002fb8:	4640      	mov	r0, r8
 8002fba:	f00b fea7 	bl	800ed0c <f_close>
                        return TARGET_ERROR;
 8002fbe:	e722      	b.n	8002e06 <Target_Verify+0x2a>
            log_message("f_read error\n");
 8002fc0:	4815      	ldr	r0, [pc, #84]	@ (8003018 <Target_Verify+0x23c>)
 8002fc2:	f7ff fd73 	bl	8002aac <log_message>
            f_close(&file);
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f00b fea0 	bl	800ed0c <f_close>
            return TARGET_ERROR;
 8002fcc:	e71b      	b.n	8002e06 <Target_Verify+0x2a>
            res = f_close(&file);
 8002fce:	4640      	mov	r0, r8
 8002fd0:	f00b fe9c 	bl	800ed0c <f_close>
            if(res != FR_OK)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f43f af17 	beq.w	8002e08 <Target_Verify+0x2c>
                log_message("f_close error\n");
 8002fda:	4810      	ldr	r0, [pc, #64]	@ (800301c <Target_Verify+0x240>)
 8002fdc:	f7ff fd66 	bl	8002aac <log_message>
                return TARGET_ERROR;
 8002fe0:	e711      	b.n	8002e06 <Target_Verify+0x2a>
 8002fe2:	bf00      	nop
 8002fe4:	08010ed0 	.word	0x08010ed0
 8002fe8:	08010d50 	.word	0x08010d50
 8002fec:	08010e00 	.word	0x08010e00
 8002ff0:	08010e64 	.word	0x08010e64
 8002ff4:	200004d0 	.word	0x200004d0
 8002ff8:	08002d21 	.word	0x08002d21
 8002ffc:	08010dec 	.word	0x08010dec
 8003000:	08010d60 	.word	0x08010d60
 8003004:	08010e10 	.word	0x08010e10
 8003008:	08010dbc 	.word	0x08010dbc
 800300c:	08010e7c 	.word	0x08010e7c
 8003010:	08010ea4 	.word	0x08010ea4
 8003014:	08010ee0 	.word	0x08010ee0
 8003018:	08010dcc 	.word	0x08010dcc
 800301c:	08010ddc 	.word	0x08010ddc

08003020 <Target_Connect>:
{
 8003020:	b510      	push	{r4, lr}
  log_message("Target Connect\n");
 8003022:	4856      	ldr	r0, [pc, #344]	@ (800317c <Target_Connect+0x15c>)
{
 8003024:	b082      	sub	sp, #8
  log_message("Target Connect\n");
 8003026:	f7ff fd41 	bl	8002aac <log_message>
  hardResetTarget();
 800302a:	f7ff fbad 	bl	8002788 <hardResetTarget>
  delayMs(50);
 800302e:	2032      	movs	r0, #50	@ 0x32
 8003030:	f7ff fb0e 	bl	8002650 <delayMs>
		TRY
 8003034:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <Target_Connect+0x160>)
	while ( retry-- > 0 )
 8003036:	2202      	movs	r2, #2
		TRY
 8003038:	681b      	ldr	r3, [r3, #0]
	while ( retry-- > 0 )
 800303a:	9201      	str	r2, [sp, #4]
		TRY
 800303c:	4a51      	ldr	r2, [pc, #324]	@ (8003184 <Target_Connect+0x164>)
 800303e:	3301      	adds	r3, #1
 8003040:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8003044:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 8003048:	4a4d      	ldr	r2, [pc, #308]	@ (8003180 <Target_Connect+0x160>)
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	f7fd f8d0 	bl	80001f0 <setjmp>
 8003050:	bb38      	cbnz	r0, 80030a2 <Target_Connect+0x82>
			connectToTarget(&target);
 8003052:	4c4d      	ldr	r4, [pc, #308]	@ (8003188 <Target_Connect+0x168>)
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff fbcd 	bl	80027f4 <connectToTarget>
    switch(target->TargetDpId)
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4a4b      	ldr	r2, [pc, #300]	@ (800318c <Target_Connect+0x16c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d03f      	beq.n	80030e2 <Target_Connect+0xc2>
 8003062:	f102 42bf 	add.w	r2, r2, #1602224128	@ 0x5f800000
 8003066:	f502 02be 	add.w	r2, r2, #6225920	@ 0x5f0000
 800306a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306e:	4293      	cmp	r3, r2
 8003070:	d133      	bne.n	80030da <Target_Connect+0xba>
    target->TargetFamily = TARGET_STM32H7;
 8003072:	230f      	movs	r3, #15
    uint32_t tmp = readMem(STM32H7_REG_DEVICE_ID);
 8003074:	4846      	ldr	r0, [pc, #280]	@ (8003190 <Target_Connect+0x170>)
    target->TargetFamily = TARGET_STM32H7;
 8003076:	7223      	strb	r3, [r4, #8]
    uint32_t tmp = readMem(STM32H7_REG_DEVICE_ID);
 8003078:	f7ff fb9c 	bl	80027b4 <readMem>
    target->TargetDevId = tmp & 0xFFF;
 800307c:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 8003080:	0c00      	lsrs	r0, r0, #16
    target->TargetDevId = tmp & 0xFFF;
 8003082:	4c41      	ldr	r4, [pc, #260]	@ (8003188 <Target_Connect+0x168>)
    switch(target->TargetFamily)
 8003084:	7a23      	ldrb	r3, [r4, #8]
 8003086:	2b05      	cmp	r3, #5
    target->TargetRevId = tmp >> 16;
 8003088:	e9c4 1003 	strd	r1, r0, [r4, #12]
    switch(target->TargetFamily)
 800308c:	d040      	beq.n	8003110 <Target_Connect+0xf0>
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d030      	beq.n	80030f4 <Target_Connect+0xd4>
            log_message("Unknown Target Family\n");
 8003092:	4840      	ldr	r0, [pc, #256]	@ (8003194 <Target_Connect+0x174>)
 8003094:	f7ff fd0a 	bl	8002aac <log_message>
			swdErrorIndex = 0;
 8003098:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <Target_Connect+0x160>)
 800309a:	2000      	movs	r0, #0
 800309c:	6018      	str	r0, [r3, #0]
}
 800309e:	b002      	add	sp, #8
 80030a0:	bd10      	pop	{r4, pc}
    	log_message("SWD Error: %s\n", getErrorString(errorCode));
 80030a2:	f7ff fae3 	bl	800266c <getErrorString>
 80030a6:	4601      	mov	r1, r0
 80030a8:	483b      	ldr	r0, [pc, #236]	@ (8003198 <Target_Connect+0x178>)
 80030aa:	f7ff fcff 	bl	8002aac <log_message>
    	log_message("Failed to connect. Retrying...\n");
 80030ae:	483b      	ldr	r0, [pc, #236]	@ (800319c <Target_Connect+0x17c>)
 80030b0:	f7ff fcfc 	bl	8002aac <log_message>
    	delayMs(200);
 80030b4:	20c8      	movs	r0, #200	@ 0xc8
 80030b6:	f7ff facb 	bl	8002650 <delayMs>
    ENDTRY
 80030ba:	4a31      	ldr	r2, [pc, #196]	@ (8003180 <Target_Connect+0x160>)
 80030bc:	9801      	ldr	r0, [sp, #4]
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	4601      	mov	r1, r0
 80030c2:	3b01      	subs	r3, #1
	while ( retry-- > 0 )
 80030c4:	3801      	subs	r0, #1
 80030c6:	9001      	str	r0, [sp, #4]
    ENDTRY
 80030c8:	6013      	str	r3, [r2, #0]
	while ( retry-- > 0 )
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d1b6      	bne.n	800303c <Target_Connect+0x1c>
  log_message("Target Probe Error\n");
 80030ce:	4834      	ldr	r0, [pc, #208]	@ (80031a0 <Target_Connect+0x180>)
 80030d0:	f7ff fcec 	bl	8002aac <log_message>
  return TARGET_ERROR;
 80030d4:	2001      	movs	r0, #1
}
 80030d6:	b002      	add	sp, #8
 80030d8:	bd10      	pop	{r4, pc}
            log_message("Unsupported Device Family\n");
 80030da:	4832      	ldr	r0, [pc, #200]	@ (80031a4 <Target_Connect+0x184>)
 80030dc:	f7ff fce6 	bl	8002aac <log_message>
            return;
 80030e0:	e7da      	b.n	8003098 <Target_Connect+0x78>
    target->TargetFamily = TARGET_STM32C0;
 80030e2:	2305      	movs	r3, #5
    uint32_t tmp = readMem(STM32C0_REG_DEVICE_ID);
 80030e4:	4830      	ldr	r0, [pc, #192]	@ (80031a8 <Target_Connect+0x188>)
    target->TargetFamily = TARGET_STM32C0;
 80030e6:	7223      	strb	r3, [r4, #8]
    uint32_t tmp = readMem(STM32C0_REG_DEVICE_ID);
 80030e8:	f7ff fb64 	bl	80027b4 <readMem>
    target->TargetDevId = tmp & 0xFFF;
 80030ec:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 80030f0:	0c00      	lsrs	r0, r0, #16
}
 80030f2:	e7c6      	b.n	8003082 <Target_Connect+0x62>
    switch(target->TargetDevId)
 80030f4:	f5b1 6f90 	cmp.w	r1, #1152	@ 0x480
 80030f8:	d03a      	beq.n	8003170 <Target_Connect+0x150>
 80030fa:	f240 4383 	movw	r3, #1155	@ 0x483
 80030fe:	4299      	cmp	r1, r3
 8003100:	d02d      	beq.n	800315e <Target_Connect+0x13e>
 8003102:	f5b1 6f8a 	cmp.w	r1, #1104	@ 0x450
 8003106:	d017      	beq.n	8003138 <Target_Connect+0x118>
            log_message("Unknown STM32H7 Device ID: 0x%03X\n", target->TargetDevId);
 8003108:	4828      	ldr	r0, [pc, #160]	@ (80031ac <Target_Connect+0x18c>)
 800310a:	f7ff fccf 	bl	8002aac <log_message>
            break;
 800310e:	e7c3      	b.n	8003098 <Target_Connect+0x78>
    switch(target->TargetDevId)
 8003110:	f240 4343 	movw	r3, #1091	@ 0x443
 8003114:	4299      	cmp	r1, r3
 8003116:	d00b      	beq.n	8003130 <Target_Connect+0x110>
 8003118:	f240 4353 	movw	r3, #1107	@ 0x453
 800311c:	4299      	cmp	r1, r3
 800311e:	d003      	beq.n	8003128 <Target_Connect+0x108>
            log_message("Unknown STM32C0 Device ID: 0x%03X\n", target->TargetDevId);
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <Target_Connect+0x190>)
 8003122:	f7ff fcc3 	bl	8002aac <log_message>
            break;
 8003126:	e7b7      	b.n	8003098 <Target_Connect+0x78>
            log_message("STM32C031xx\n");
 8003128:	4822      	ldr	r0, [pc, #136]	@ (80031b4 <Target_Connect+0x194>)
 800312a:	f7ff fcbf 	bl	8002aac <log_message>
            break;
 800312e:	e7b3      	b.n	8003098 <Target_Connect+0x78>
            log_message("STM32C011xx\n");
 8003130:	4821      	ldr	r0, [pc, #132]	@ (80031b8 <Target_Connect+0x198>)
 8003132:	f7ff fcbb 	bl	8002aac <log_message>
            break;
 8003136:	e7af      	b.n	8003098 <Target_Connect+0x78>
            log_message("STM32H742, STM32H743/753, STM32H750, STM32H745/755, STM32H747/757\n");
 8003138:	4820      	ldr	r0, [pc, #128]	@ (80031bc <Target_Connect+0x19c>)
 800313a:	f7ff fcb7 	bl	8002aac <log_message>
            tmp = readMem(STM32H7_FLASH_SIZE_REG1);
 800313e:	4820      	ldr	r0, [pc, #128]	@ (80031c0 <Target_Connect+0x1a0>)
 8003140:	f7ff fb38 	bl	80027b4 <readMem>
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <Target_Connect+0x1a4>)
 8003146:	4920      	ldr	r1, [pc, #128]	@ (80031c8 <Target_Connect+0x1a8>)
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8003148:	2880      	cmp	r0, #128	@ 0x80
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8003150:	481e      	ldr	r0, [pc, #120]	@ (80031cc <Target_Connect+0x1ac>)
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8003152:	6163      	str	r3, [r4, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8003154:	bf18      	it	ne
 8003156:	4611      	movne	r1, r2
 8003158:	f7ff fca8 	bl	8002aac <log_message>
            break;
 800315c:	e79c      	b.n	8003098 <Target_Connect+0x78>
            log_message("STM32H72x, STM32H73x\n");
 800315e:	481c      	ldr	r0, [pc, #112]	@ (80031d0 <Target_Connect+0x1b0>)
 8003160:	f7ff fca4 	bl	8002aac <log_message>
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_DUALBANK;
 8003164:	2301      	movs	r3, #1
            log_message("Flash Bank: Dual\n");
 8003166:	481b      	ldr	r0, [pc, #108]	@ (80031d4 <Target_Connect+0x1b4>)
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_DUALBANK;
 8003168:	6163      	str	r3, [r4, #20]
            log_message("Flash Bank: Dual\n");
 800316a:	f7ff fc9f 	bl	8002aac <log_message>
            break;
 800316e:	e793      	b.n	8003098 <Target_Connect+0x78>
            log_message("STM32H7A3/7B3/7B0\n");
 8003170:	4819      	ldr	r0, [pc, #100]	@ (80031d8 <Target_Connect+0x1b8>)
 8003172:	f7ff fc9b 	bl	8002aac <log_message>
            uint32_t tmp = readMem(STM32H7_FLASH_SIZE_REG2);
 8003176:	4819      	ldr	r0, [pc, #100]	@ (80031dc <Target_Connect+0x1bc>)
 8003178:	e7e2      	b.n	8003140 <Target_Connect+0x120>
 800317a:	bf00      	nop
 800317c:	08010f08 	.word	0x08010f08
 8003180:	20000000 	.word	0x20000000
 8003184:	20000188 	.word	0x20000188
 8003188:	200004d0 	.word	0x200004d0
 800318c:	0bc11477 	.word	0x0bc11477
 8003190:	5c001000 	.word	0x5c001000
 8003194:	08011030 	.word	0x08011030
 8003198:	08011048 	.word	0x08011048
 800319c:	08011058 	.word	0x08011058
 80031a0:	08011078 	.word	0x08011078
 80031a4:	08010f18 	.word	0x08010f18
 80031a8:	40015800 	.word	0x40015800
 80031ac:	0801100c 	.word	0x0801100c
 80031b0:	08010f54 	.word	0x08010f54
 80031b4:	08010f44 	.word	0x08010f44
 80031b8:	08010f34 	.word	0x08010f34
 80031bc:	08010fc8 	.word	0x08010fc8
 80031c0:	1ff1e880 	.word	0x1ff1e880
 80031c4:	08010ef8 	.word	0x08010ef8
 80031c8:	08010f00 	.word	0x08010f00
 80031cc:	08010f8c 	.word	0x08010f8c
 80031d0:	08010f9c 	.word	0x08010f9c
 80031d4:	08010fb4 	.word	0x08010fb4
 80031d8:	08010f78 	.word	0x08010f78
 80031dc:	08fff80c 	.word	0x08fff80c

080031e0 <Target_Protection_Lock>:
    return TARGET_OK;
}

/* Main function to lock protection */
static bool Target_Protection_Lock(void)
{
 80031e0:	b500      	push	{lr}
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target protection configure.\n");
 80031e2:	481d      	ldr	r0, [pc, #116]	@ (8003258 <Target_Protection_Lock+0x78>)
{
 80031e4:	b0c7      	sub	sp, #284	@ 0x11c
    log_message("Target protection configure.\n");
 80031e6:	f7ff fc61 	bl	8002aac <log_message>

    /* Check if the protection option file exists */
    res = f_stat(FIRMWARE_PROTECT_OPTION_FILE, &fileInfo);
 80031ea:	481c      	ldr	r0, [pc, #112]	@ (800325c <Target_Protection_Lock+0x7c>)
 80031ec:	4669      	mov	r1, sp
 80031ee:	f00b fe0f 	bl	800ee10 <f_stat>
    if (res == FR_OK)
 80031f2:	b968      	cbnz	r0, 8003210 <Target_Protection_Lock+0x30>
    {
        log_message("Protection option available.\n");
 80031f4:	481a      	ldr	r0, [pc, #104]	@ (8003260 <Target_Protection_Lock+0x80>)
 80031f6:	f7ff fc59 	bl	8002aac <log_message>

        /* Proceed with protection lock only if the file exists */
        switch(target.TargetFamily)
 80031fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <Target_Protection_Lock+0x84>)
 80031fc:	7a1b      	ldrb	r3, [r3, #8]
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d00d      	beq.n	800321e <Target_Protection_Lock+0x3e>
            /* STM32C0 */
            case TARGET_STM32C0:
                return Target_Protection_Lock_STM32C0();
                break;
            default:
                log_message("Target family not supported for protection lock.\n");
 8003202:	4819      	ldr	r0, [pc, #100]	@ (8003268 <Target_Protection_Lock+0x88>)
 8003204:	f7ff fc52 	bl	8002aac <log_message>
    {
        log_message("Protection option file not found. Skipping protection lock.\n");
    }

    return TARGET_OK;
}
 8003208:	2000      	movs	r0, #0
 800320a:	b047      	add	sp, #284	@ 0x11c
 800320c:	f85d fb04 	ldr.w	pc, [sp], #4
        log_message("Protection option file not found. Skipping protection lock.\n");
 8003210:	4816      	ldr	r0, [pc, #88]	@ (800326c <Target_Protection_Lock+0x8c>)
 8003212:	f7ff fc4b 	bl	8002aac <log_message>
}
 8003216:	2000      	movs	r0, #0
 8003218:	b047      	add	sp, #284	@ 0x11c
 800321a:	f85d fb04 	ldr.w	pc, [sp], #4
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 800321e:	4814      	ldr	r0, [pc, #80]	@ (8003270 <Target_Protection_Lock+0x90>)
 8003220:	f7ff fc44 	bl	8002aac <log_message>
    Stm32c0_Flash_Unlock();
 8003224:	f000 f910 	bl	8003448 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_OB_Unlock();
 8003228:	f000 f9d4 	bl	80035d4 <Stm32c0_Flash_OB_Unlock>
    Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_1);
 800322c:	20bb      	movs	r0, #187	@ 0xbb
 800322e:	f000 f9fd 	bl	800362c <Stm32c0_Flash_OB_Program>
    Stm32c0_Flash_OB_Launch();
 8003232:	f000 f9ed 	bl	8003610 <Stm32c0_Flash_OB_Launch>
    Target_Connect();
 8003236:	f7ff fef3 	bl	8003020 <Target_Connect>
    Stm32c0_Flash_OB_Lock();
 800323a:	f000 f9b7 	bl	80035ac <Stm32c0_Flash_OB_Lock>
    Stm32c0_Flash_Lock();
 800323e:	f000 f921 	bl	8003484 <Stm32c0_Flash_Lock>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 8003242:	480c      	ldr	r0, [pc, #48]	@ (8003274 <Target_Protection_Lock+0x94>)
 8003244:	f7ff fab6 	bl	80027b4 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8003248:	b2c1      	uxtb	r1, r0
 800324a:	480b      	ldr	r0, [pc, #44]	@ (8003278 <Target_Protection_Lock+0x98>)
 800324c:	f7ff fc2e 	bl	8002aac <log_message>
}
 8003250:	2000      	movs	r0, #0
 8003252:	b047      	add	sp, #284	@ 0x11c
 8003254:	f85d fb04 	ldr.w	pc, [sp], #4
 8003258:	0801108c 	.word	0x0801108c
 800325c:	080110ac 	.word	0x080110ac
 8003260:	080110b8 	.word	0x080110b8
 8003264:	200004d0 	.word	0x200004d0
 8003268:	08011140 	.word	0x08011140
 800326c:	08011174 	.word	0x08011174
 8003270:	080110d8 	.word	0x080110d8
 8003274:	1fff7800 	.word	0x1fff7800
 8003278:	08011128 	.word	0x08011128

0800327c <Target_MainLoop>:
        Buzzer_SetState(BUZZER_PROG_FAILED);
    }
}

void Target_MainLoop(void)
{
 800327c:	b570      	push	{r4, r5, r6, lr}
	bool status = TARGET_ERROR;
	int u32_StartTime = 0;
	int u32_ElasedTime = 0;

	/* Check button pushed */
	Button_Update();
 800327e:	f000 fb63 	bl	8003948 <Button_Update>

	/* Button programming start */
  if(Button_WasPressed() == 1)
 8003282:	f000 fb93 	bl	80039ac <Button_WasPressed>
 8003286:	2801      	cmp	r0, #1
 8003288:	d000      	beq.n	800328c <Target_MainLoop+0x10>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
    LED_SetState(TARGET_LED_STAT_COMPLETE);
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
  }
}
 800328a:	bd70      	pop	{r4, r5, r6, pc}
  	LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 800328c:	4604      	mov	r4, r0
 800328e:	f000 fe45 	bl	8003f1c <LED_SetState>
  	Buzzer_SetState(BUZZER_PROG_START);
 8003292:	4620      	mov	r0, r4
 8003294:	f000 fb94 	bl	80039c0 <Buzzer_SetState>
  	u32_StartTime = HAL_GetTick();
 8003298:	f001 fb7a 	bl	8004990 <HAL_GetTick>
 800329c:	4604      	mov	r4, r0
  	status = Target_Connect();
 800329e:	f7ff febf 	bl	8003020 <Target_Connect>
    if (status != TARGET_OK)
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d14c      	bne.n	8003340 <Target_MainLoop+0xc4>
    switch(target.TargetFamily)
 80032a6:	4d53      	ldr	r5, [pc, #332]	@ (80033f4 <Target_MainLoop+0x178>)
    log_message("Target protection check before flash programming.\n");
 80032a8:	4853      	ldr	r0, [pc, #332]	@ (80033f8 <Target_MainLoop+0x17c>)
 80032aa:	f7ff fbff 	bl	8002aac <log_message>
    switch(target.TargetFamily)
 80032ae:	7a2b      	ldrb	r3, [r5, #8]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d055      	beq.n	8003360 <Target_MainLoop+0xe4>
        		log_message("Target family not supported for protection unlock.\n");
 80032b4:	4851      	ldr	r0, [pc, #324]	@ (80033fc <Target_MainLoop+0x180>)
 80032b6:	f7ff fbf9 	bl	8002aac <log_message>
    log_message("Target MassErase\n");
 80032ba:	4851      	ldr	r0, [pc, #324]	@ (8003400 <Target_MainLoop+0x184>)
 80032bc:	f7ff fbf6 	bl	8002aac <log_message>
    switch(target.TargetFamily)
 80032c0:	7a2b      	ldrb	r3, [r5, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d061      	beq.n	800338a <Target_MainLoop+0x10e>
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d146      	bne.n	8003358 <Target_MainLoop+0xdc>
    if (isDualBank)
 80032ca:	696d      	ldr	r5, [r5, #20]
 80032cc:	2d01      	cmp	r5, #1
 80032ce:	d165      	bne.n	800339c <Target_MainLoop+0x120>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 fa53 	bl	800377c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 80032d6:	2002      	movs	r0, #2
 80032d8:	f000 fa50 	bl	800377c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 80032dc:	4629      	mov	r1, r5
 80032de:	2030      	movs	r0, #48	@ 0x30
 80032e0:	f000 f9dc 	bl	800369c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_2);
 80032e4:	2102      	movs	r1, #2
 80032e6:	2030      	movs	r0, #48	@ 0x30
 80032e8:	f000 f9d8 	bl	800369c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 fa81 	bl	80037f4 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 80032f2:	2002      	movs	r0, #2
 80032f4:	f000 fa7e 	bl	80037f4 <Stm32h7_Flash_Lock>
  	status = Target_Program();
 80032f8:	f7ff fc22 	bl	8002b40 <Target_Program>
    if (status != TARGET_OK)
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d14b      	bne.n	8003398 <Target_MainLoop+0x11c>
  	status = Target_Verify();
 8003300:	f7ff fd6c 	bl	8002ddc <Target_Verify>
    if (status != TARGET_OK)
 8003304:	2800      	cmp	r0, #0
 8003306:	d154      	bne.n	80033b2 <Target_MainLoop+0x136>
  	status = Target_Protection_Lock();
 8003308:	f7ff ff6a 	bl	80031e0 <Target_Protection_Lock>
    if (status != TARGET_OK)
 800330c:	2800      	cmp	r0, #0
 800330e:	d16f      	bne.n	80033f0 <Target_MainLoop+0x174>
  	log_message("Target program completed\n");
 8003310:	483c      	ldr	r0, [pc, #240]	@ (8003404 <Target_MainLoop+0x188>)
 8003312:	f7ff fbcb 	bl	8002aac <log_message>
  	log_message("Target Application Start!\n");
 8003316:	483c      	ldr	r0, [pc, #240]	@ (8003408 <Target_MainLoop+0x18c>)
 8003318:	f7ff fbc8 	bl	8002aac <log_message>
  	resetTarget();
 800331c:	f7ff f9c2 	bl	80026a4 <resetTarget>
  	hardResetTarget();
 8003320:	f7ff fa32 	bl	8002788 <hardResetTarget>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
 8003324:	f001 fb34 	bl	8004990 <HAL_GetTick>
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
 8003328:	1b01      	subs	r1, r0, r4
 800332a:	4838      	ldr	r0, [pc, #224]	@ (800340c <Target_MainLoop+0x190>)
 800332c:	f7ff fbbe 	bl	8002aac <log_message>
    LED_SetState(TARGET_LED_STAT_COMPLETE);
 8003330:	2002      	movs	r0, #2
 8003332:	f000 fdf3 	bl	8003f1c <LED_SetState>
}
 8003336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
 800333a:	2002      	movs	r0, #2
 800333c:	f000 bb40 	b.w	80039c0 <Buzzer_SetState>
        log_message("%s\n", errorMessage);
 8003340:	4933      	ldr	r1, [pc, #204]	@ (8003410 <Target_MainLoop+0x194>)
 8003342:	4834      	ldr	r0, [pc, #208]	@ (8003414 <Target_MainLoop+0x198>)
 8003344:	f7ff fbb2 	bl	8002aac <log_message>
        LED_SetState(TARGET_LED_STAT_FAILED);
 8003348:	2003      	movs	r0, #3
 800334a:	f000 fde7 	bl	8003f1c <LED_SetState>
}
 800334e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Buzzer_SetState(BUZZER_PROG_FAILED);
 8003352:	2003      	movs	r0, #3
 8003354:	f000 bb34 	b.w	80039c0 <Buzzer_SetState>
            log_message("Unsupported Target Family for Mass Erase\n");
 8003358:	482f      	ldr	r0, [pc, #188]	@ (8003418 <Target_MainLoop+0x19c>)
 800335a:	f7ff fba7 	bl	8002aac <log_message>
            return false;
 800335e:	e7cb      	b.n	80032f8 <Target_MainLoop+0x7c>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR) & STM32C0_FLASH_OPTR_RDP_Msk;
 8003360:	482e      	ldr	r0, [pc, #184]	@ (800341c <Target_MainLoop+0x1a0>)
 8003362:	f7ff fa27 	bl	80027b4 <readMem>
 8003366:	b2c6      	uxtb	r6, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 8003368:	4631      	mov	r1, r6
 800336a:	482d      	ldr	r0, [pc, #180]	@ (8003420 <Target_MainLoop+0x1a4>)
 800336c:	f7ff fb9e 	bl	8002aac <log_message>
    if(Option_Status == STM32C0_OB_RDP_LEVEL_1)
 8003370:	2ebb      	cmp	r6, #187	@ 0xbb
 8003372:	d020      	beq.n	80033b6 <Target_MainLoop+0x13a>
    else if(Option_Status == STM32C0_OB_RDP_LEVEL_0)
 8003374:	2eaa      	cmp	r6, #170	@ 0xaa
 8003376:	d103      	bne.n	8003380 <Target_MainLoop+0x104>
        log_message("No need to configure RDP Level.\n");
 8003378:	482a      	ldr	r0, [pc, #168]	@ (8003424 <Target_MainLoop+0x1a8>)
 800337a:	f7ff fb97 	bl	8002aac <log_message>
    if (status != TARGET_OK)
 800337e:	e79c      	b.n	80032ba <Target_MainLoop+0x3e>
        log_message("Locked chip or Error, it cannot program.\n");
 8003380:	4829      	ldr	r0, [pc, #164]	@ (8003428 <Target_MainLoop+0x1ac>)
 8003382:	f7ff fb93 	bl	8002aac <log_message>
        log_message("%s\n", errorMessage);
 8003386:	4929      	ldr	r1, [pc, #164]	@ (800342c <Target_MainLoop+0x1b0>)
 8003388:	e7db      	b.n	8003342 <Target_MainLoop+0xc6>
    Stm32c0_Flash_Unlock();
 800338a:	f000 f85d 	bl	8003448 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_MassErase();
 800338e:	f000 f8c7 	bl	8003520 <Stm32c0_Flash_MassErase>
    Stm32c0_Flash_Lock();
 8003392:	f000 f877 	bl	8003484 <Stm32c0_Flash_Lock>
}
 8003396:	e7af      	b.n	80032f8 <Target_MainLoop+0x7c>
        log_message("%s\n", errorMessage);
 8003398:	4925      	ldr	r1, [pc, #148]	@ (8003430 <Target_MainLoop+0x1b4>)
 800339a:	e7d2      	b.n	8003342 <Target_MainLoop+0xc6>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 800339c:	2001      	movs	r0, #1
 800339e:	f000 f9ed 	bl	800377c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 80033a2:	2101      	movs	r1, #1
 80033a4:	2030      	movs	r0, #48	@ 0x30
 80033a6:	f000 f979 	bl	800369c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f000 fa22 	bl	80037f4 <Stm32h7_Flash_Lock>
 80033b0:	e7a2      	b.n	80032f8 <Target_MainLoop+0x7c>
        log_message("%s\n", errorMessage);
 80033b2:	4920      	ldr	r1, [pc, #128]	@ (8003434 <Target_MainLoop+0x1b8>)
 80033b4:	e7c5      	b.n	8003342 <Target_MainLoop+0xc6>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80033b6:	4820      	ldr	r0, [pc, #128]	@ (8003438 <Target_MainLoop+0x1bc>)
 80033b8:	f7ff fb78 	bl	8002aac <log_message>
        Stm32c0_Flash_Unlock();
 80033bc:	f000 f844 	bl	8003448 <Stm32c0_Flash_Unlock>
        Stm32c0_Flash_OB_Unlock();
 80033c0:	f000 f908 	bl	80035d4 <Stm32c0_Flash_OB_Unlock>
        Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_0);
 80033c4:	20aa      	movs	r0, #170	@ 0xaa
 80033c6:	f000 f931 	bl	800362c <Stm32c0_Flash_OB_Program>
        log_message("RDP programming OK. Option Byte launch will generate 'system reset'\n");
 80033ca:	481c      	ldr	r0, [pc, #112]	@ (800343c <Target_MainLoop+0x1c0>)
 80033cc:	f7ff fb6e 	bl	8002aac <log_message>
        Stm32c0_Flash_OB_Launch();
 80033d0:	f000 f91e 	bl	8003610 <Stm32c0_Flash_OB_Launch>
        Target_Connect();
 80033d4:	f7ff fe24 	bl	8003020 <Target_Connect>
        Stm32c0_Flash_OB_Lock();
 80033d8:	f000 f8e8 	bl	80035ac <Stm32c0_Flash_OB_Lock>
        Stm32c0_Flash_Lock();
 80033dc:	f000 f852 	bl	8003484 <Stm32c0_Flash_Lock>
        Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 80033e0:	480e      	ldr	r0, [pc, #56]	@ (800341c <Target_MainLoop+0x1a0>)
 80033e2:	f7ff f9e7 	bl	80027b4 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 80033e6:	b2c1      	uxtb	r1, r0
 80033e8:	4815      	ldr	r0, [pc, #84]	@ (8003440 <Target_MainLoop+0x1c4>)
 80033ea:	f7ff fb5f 	bl	8002aac <log_message>
    if (status != TARGET_OK)
 80033ee:	e764      	b.n	80032ba <Target_MainLoop+0x3e>
        log_message("%s\n", errorMessage);
 80033f0:	4914      	ldr	r1, [pc, #80]	@ (8003444 <Target_MainLoop+0x1c8>)
 80033f2:	e7a6      	b.n	8003342 <Target_MainLoop+0xc6>
 80033f4:	200004d0 	.word	0x200004d0
 80033f8:	080111b4 	.word	0x080111b4
 80033fc:	0801130c 	.word	0x0801130c
 8003400:	08011358 	.word	0x08011358
 8003404:	080113c4 	.word	0x080113c4
 8003408:	080113e0 	.word	0x080113e0
 800340c:	080113fc 	.word	0x080113fc
 8003410:	08011340 	.word	0x08011340
 8003414:	08010f98 	.word	0x08010f98
 8003418:	0801136c 	.word	0x0801136c
 800341c:	1fff7800 	.word	0x1fff7800
 8003420:	080111e8 	.word	0x080111e8
 8003424:	0801129c 	.word	0x0801129c
 8003428:	080112c0 	.word	0x080112c0
 800342c:	080112ec 	.word	0x080112ec
 8003430:	08011398 	.word	0x08011398
 8003434:	080113b0 	.word	0x080113b0
 8003438:	08011208 	.word	0x08011208
 800343c:	08011254 	.word	0x08011254
 8003440:	08011128 	.word	0x08011128
 8003444:	08011424 	.word	0x08011424

08003448 <Stm32c0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Unlock(void)
{
 8003448:	b508      	push	{r3, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 800344a:	480a      	ldr	r0, [pc, #40]	@ (8003474 <Stm32c0_Flash_Unlock+0x2c>)
 800344c:	f7ff f9b2 	bl	80027b4 <readMem>
	if(tmp != 0x00U)
 8003450:	2800      	cmp	r0, #0
 8003452:	db01      	blt.n	8003458 <Stm32c0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8003454:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8003456:	bd08      	pop	{r3, pc}
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY1);
 8003458:	4907      	ldr	r1, [pc, #28]	@ (8003478 <Stm32c0_Flash_Unlock+0x30>)
 800345a:	4808      	ldr	r0, [pc, #32]	@ (800347c <Stm32c0_Flash_Unlock+0x34>)
 800345c:	f7ff f9bc 	bl	80027d8 <writeMem>
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY2);
 8003460:	4907      	ldr	r1, [pc, #28]	@ (8003480 <Stm32c0_Flash_Unlock+0x38>)
 8003462:	4806      	ldr	r0, [pc, #24]	@ (800347c <Stm32c0_Flash_Unlock+0x34>)
 8003464:	f7ff f9b8 	bl	80027d8 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8003468:	4802      	ldr	r0, [pc, #8]	@ (8003474 <Stm32c0_Flash_Unlock+0x2c>)
 800346a:	f7ff f9a3 	bl	80027b4 <readMem>
		if(tmp != 0x00U)
 800346e:	0fc0      	lsrs	r0, r0, #31
}
 8003470:	bd08      	pop	{r3, pc}
 8003472:	bf00      	nop
 8003474:	40022014 	.word	0x40022014
 8003478:	45670123 	.word	0x45670123
 800347c:	40022008 	.word	0x40022008
 8003480:	cdef89ab 	.word	0xcdef89ab

08003484 <Stm32c0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Lock(void)
{
 8003484:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8003486:	4c07      	ldr	r4, [pc, #28]	@ (80034a4 <Stm32c0_Flash_Lock+0x20>)
 8003488:	4620      	mov	r0, r4
 800348a:	f7ff f993 	bl	80027b4 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_LOCK|tmp);
 800348e:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8003492:	4620      	mov	r0, r4
 8003494:	f7ff f9a0 	bl	80027d8 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_LOCK;
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff f98b 	bl	80027b4 <readMem>
	if(tmp != 0x00U)
  {
    status = TARGET_OK;
  }
	return status;
}
 800349e:	43c0      	mvns	r0, r0
 80034a0:	0fc0      	lsrs	r0, r0, #31
 80034a2:	bd10      	pop	{r4, pc}
 80034a4:	40022014 	.word	0x40022014

080034a8 <Stm32c0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32c0_Flash_WaitOperation(uint32_t Timeout)
{
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4606      	mov	r6, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80034ac:	f001 fa70 	bl	8004990 <HAL_GetTick>
 80034b0:	4604      	mov	r4, r0

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 80034b2:	481a      	ldr	r0, [pc, #104]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 80034b4:	f7ff f97e 	bl	80027b4 <readMem>
  while(tmp != 0x00U)
 80034b8:	03c0      	lsls	r0, r0, #15
  uint32_t timeout = HAL_GetTick() + Timeout;
 80034ba:	4434      	add	r4, r6
  while(tmp != 0x00U)
 80034bc:	d50d      	bpl.n	80034da <Stm32c0_Flash_WaitOperation+0x32>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 80034be:	4d17      	ldr	r5, [pc, #92]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 80034c0:	e003      	b.n	80034ca <Stm32c0_Flash_WaitOperation+0x22>
 80034c2:	f7ff f977 	bl	80027b4 <readMem>
  while(tmp != 0x00U)
 80034c6:	03c1      	lsls	r1, r0, #15
 80034c8:	d507      	bpl.n	80034da <Stm32c0_Flash_WaitOperation+0x32>
    if (HAL_GetTick() >= timeout)
 80034ca:	f001 fa61 	bl	8004990 <HAL_GetTick>
 80034ce:	4603      	mov	r3, r0
 80034d0:	42a3      	cmp	r3, r4
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 80034d2:	4628      	mov	r0, r5
    if (HAL_GetTick() >= timeout)
 80034d4:	d3f5      	bcc.n	80034c2 <Stm32c0_Flash_WaitOperation+0x1a>
      return TARGET_ERROR;
 80034d6:	2001      	movs	r0, #1
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
  }

  return TARGET_OK;
}
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
  error = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_SR_ERROR;
 80034da:	4810      	ldr	r0, [pc, #64]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 80034dc:	f7ff f96a 	bl	80027b4 <readMem>
 80034e0:	f24c 31fa 	movw	r1, #50170	@ 0xc3fa
  writeMem(STM32C0_FLASH_SR, error);
 80034e4:	4001      	ands	r1, r0
 80034e6:	480d      	ldr	r0, [pc, #52]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 80034e8:	f7ff f976 	bl	80027d8 <writeMem>
  timeout = HAL_GetTick() + Timeout;
 80034ec:	f001 fa50 	bl	8004990 <HAL_GetTick>
 80034f0:	4604      	mov	r4, r0
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 80034f2:	480a      	ldr	r0, [pc, #40]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 80034f4:	f7ff f95e 	bl	80027b4 <readMem>
  while(tmp != 0x00U)
 80034f8:	0342      	lsls	r2, r0, #13
  timeout = HAL_GetTick() + Timeout;
 80034fa:	4434      	add	r4, r6
  while(tmp != 0x00U)
 80034fc:	d50c      	bpl.n	8003518 <Stm32c0_Flash_WaitOperation+0x70>
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 80034fe:	4d07      	ldr	r5, [pc, #28]	@ (800351c <Stm32c0_Flash_WaitOperation+0x74>)
 8003500:	e003      	b.n	800350a <Stm32c0_Flash_WaitOperation+0x62>
 8003502:	f7ff f957 	bl	80027b4 <readMem>
  while(tmp != 0x00U)
 8003506:	0343      	lsls	r3, r0, #13
 8003508:	d506      	bpl.n	8003518 <Stm32c0_Flash_WaitOperation+0x70>
    if (HAL_GetTick() >= timeout)
 800350a:	f001 fa41 	bl	8004990 <HAL_GetTick>
 800350e:	4603      	mov	r3, r0
 8003510:	42a3      	cmp	r3, r4
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8003512:	4628      	mov	r0, r5
    if (HAL_GetTick() >= timeout)
 8003514:	d3f5      	bcc.n	8003502 <Stm32c0_Flash_WaitOperation+0x5a>
 8003516:	e7de      	b.n	80034d6 <Stm32c0_Flash_WaitOperation+0x2e>
  return TARGET_OK;
 8003518:	2000      	movs	r0, #0
}
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	40022010 	.word	0x40022010

08003520 <Stm32c0_Flash_MassErase>:
{
 8003520:	b508      	push	{r3, lr}
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003522:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003526:	f7ff ffbf 	bl	80034a8 <Stm32c0_Flash_WaitOperation>
	if(status == TARGET_OK)
 800352a:	b100      	cbz	r0, 800352e <Stm32c0_Flash_MassErase+0xe>
}
 800352c:	bd08      	pop	{r3, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 800352e:	4808      	ldr	r0, [pc, #32]	@ (8003550 <Stm32c0_Flash_MassErase+0x30>)
 8003530:	f7ff f940 	bl	80027b4 <readMem>
		writeMem(STM32C0_FLASH_CR, (STM32C0_FLASH_CR_STRT | STM32C0_FLASH_CR_MER1)|tmp);
 8003534:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8003538:	f041 0104 	orr.w	r1, r1, #4
 800353c:	4804      	ldr	r0, [pc, #16]	@ (8003550 <Stm32c0_Flash_MassErase+0x30>)
 800353e:	f7ff f94b 	bl	80027d8 <writeMem>
}
 8003542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800354a:	f7ff bfad 	b.w	80034a8 <Stm32c0_Flash_WaitOperation>
 800354e:	bf00      	nop
 8003550:	40022014 	.word	0x40022014

08003554 <Stm32c0_Flash_Program>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4604      	mov	r4, r0
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003558:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
{
 800355c:	4616      	mov	r6, r2
 800355e:	461d      	mov	r5, r3
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003560:	f7ff ffa2 	bl	80034a8 <Stm32c0_Flash_WaitOperation>
	  if (status == TARGET_OK)
 8003564:	b170      	cbz	r0, 8003584 <Stm32c0_Flash_Program+0x30>
  	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800356a:	f7ff ff9d 	bl	80034a8 <Stm32c0_Flash_WaitOperation>
 800356e:	4604      	mov	r4, r0
  	tmp = readMem(STM32C0_FLASH_CR);
 8003570:	480d      	ldr	r0, [pc, #52]	@ (80035a8 <Stm32c0_Flash_Program+0x54>)
 8003572:	f7ff f91f 	bl	80027b4 <readMem>
  	writeMem(STM32C0_FLASH_CR, tmp & (~STM32C0_FLASH_CR_PG));
 8003576:	f020 0101 	bic.w	r1, r0, #1
 800357a:	480b      	ldr	r0, [pc, #44]	@ (80035a8 <Stm32c0_Flash_Program+0x54>)
 800357c:	f7ff f92c 	bl	80027d8 <writeMem>
}
 8003580:	4620      	mov	r0, r4
 8003582:	bd70      	pop	{r4, r5, r6, pc}
	  	tmp = readMem(STM32C0_FLASH_CR);
 8003584:	4808      	ldr	r0, [pc, #32]	@ (80035a8 <Stm32c0_Flash_Program+0x54>)
 8003586:	f7ff f915 	bl	80027b4 <readMem>
	  	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_PG|tmp);
 800358a:	f040 0101 	orr.w	r1, r0, #1
 800358e:	4806      	ldr	r0, [pc, #24]	@ (80035a8 <Stm32c0_Flash_Program+0x54>)
 8003590:	f7ff f922 	bl	80027d8 <writeMem>
	  	writeMem(Address, 	(uint32_t)Data);
 8003594:	4631      	mov	r1, r6
 8003596:	4620      	mov	r0, r4
 8003598:	f7ff f91e 	bl	80027d8 <writeMem>
	  	writeMem(Address+4, (uint32_t)(Data>>32));
 800359c:	4629      	mov	r1, r5
 800359e:	1d20      	adds	r0, r4, #4
 80035a0:	f7ff f91a 	bl	80027d8 <writeMem>
 80035a4:	e7df      	b.n	8003566 <Stm32c0_Flash_Program+0x12>
 80035a6:	bf00      	nop
 80035a8:	40022014 	.word	0x40022014

080035ac <Stm32c0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Lock(void)
{
 80035ac:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 80035ae:	4c08      	ldr	r4, [pc, #32]	@ (80035d0 <Stm32c0_Flash_OB_Lock+0x24>)
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff f8ff 	bl	80027b4 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTLOCK|tmp);
 80035b6:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff f90c 	bl	80027d8 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_OPTLOCK;
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff f8f7 	bl	80027b4 <readMem>
	if(tmp != 0x00U)
 80035c6:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 80035ca:	f3c0 7080 	ubfx	r0, r0, #30, #1
 80035ce:	bd10      	pop	{r4, pc}
 80035d0:	40022014 	.word	0x40022014

080035d4 <Stm32c0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Unlock(void)
{
 80035d4:	b508      	push	{r3, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 80035d6:	480a      	ldr	r0, [pc, #40]	@ (8003600 <Stm32c0_Flash_OB_Unlock+0x2c>)
 80035d8:	f7ff f8ec 	bl	80027b4 <readMem>
	if(tmp != 0x00U)
 80035dc:	0043      	lsls	r3, r0, #1
 80035de:	d401      	bmi.n	80035e4 <Stm32c0_Flash_OB_Unlock+0x10>
	bool status = TARGET_ERROR;
 80035e0:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 80035e2:	bd08      	pop	{r3, pc}
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY1);
 80035e4:	4907      	ldr	r1, [pc, #28]	@ (8003604 <Stm32c0_Flash_OB_Unlock+0x30>)
 80035e6:	4808      	ldr	r0, [pc, #32]	@ (8003608 <Stm32c0_Flash_OB_Unlock+0x34>)
 80035e8:	f7ff f8f6 	bl	80027d8 <writeMem>
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY2);
 80035ec:	4907      	ldr	r1, [pc, #28]	@ (800360c <Stm32c0_Flash_OB_Unlock+0x38>)
 80035ee:	4806      	ldr	r0, [pc, #24]	@ (8003608 <Stm32c0_Flash_OB_Unlock+0x34>)
 80035f0:	f7ff f8f2 	bl	80027d8 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 80035f4:	4802      	ldr	r0, [pc, #8]	@ (8003600 <Stm32c0_Flash_OB_Unlock+0x2c>)
 80035f6:	f7ff f8dd 	bl	80027b4 <readMem>
		if(tmp == 0x00U)
 80035fa:	f3c0 7080 	ubfx	r0, r0, #30, #1
}
 80035fe:	bd08      	pop	{r3, pc}
 8003600:	40022014 	.word	0x40022014
 8003604:	08192a3b 	.word	0x08192a3b
 8003608:	4002200c 	.word	0x4002200c
 800360c:	4c5d6e7f 	.word	0x4c5d6e7f

08003610 <Stm32c0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32c0_Flash_OB_Launch(void)
{
 8003610:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32C0_FLASH_CR);
 8003612:	4c05      	ldr	r4, [pc, #20]	@ (8003628 <Stm32c0_Flash_OB_Launch+0x18>)
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff f8cd 	bl	80027b4 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 800361a:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 800361e:	4620      	mov	r0, r4
}
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 8003624:	f7ff b8d8 	b.w	80027d8 <writeMem>
 8003628:	40022014 	.word	0x40022014

0800362c <Stm32c0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Program(uint32_t RDPLevel)
{
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4604      	mov	r4, r0
	tmp = readMem(STM32C0_FLASH_OPTR);
 8003630:	4817      	ldr	r0, [pc, #92]	@ (8003690 <Stm32c0_Flash_OB_Program+0x64>)
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
 8003632:	4d18      	ldr	r5, [pc, #96]	@ (8003694 <Stm32c0_Flash_OB_Program+0x68>)
	tmp = readMem(STM32C0_FLASH_OPTR);
 8003634:	f7ff f8be 	bl	80027b4 <readMem>
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
 8003638:	4005      	ands	r5, r0
  optr = readMem(STM32C0_FLASH_OPTR);
 800363a:	4815      	ldr	r0, [pc, #84]	@ (8003690 <Stm32c0_Flash_OB_Program+0x64>)
 800363c:	f7ff f8ba 	bl	80027b4 <readMem>
  optr &= ~(UserType | STM32C0_FLASH_OPTR_RDP);
 8003640:	f045 03ff 	orr.w	r3, r5, #255	@ 0xff
 8003644:	ea20 0103 	bic.w	r1, r0, r3
  tmp = optr | UserConfig | RDPLevel;
 8003648:	432c      	orrs	r4, r5
  writeMem(STM32C0_FLASH_OPTR, tmp);
 800364a:	4811      	ldr	r0, [pc, #68]	@ (8003690 <Stm32c0_Flash_OB_Program+0x64>)
 800364c:	4321      	orrs	r1, r4
 800364e:	f7ff f8c3 	bl	80027d8 <writeMem>
	/* Only modify RDP so get current user data */
	optr = Stm32c0_Flash_OB_GetUser();
	Stm32c0_Flash_OB_OptrConfig(optr, optr, RDPLevel);

	/* Wait for last operation to be completed */
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003656:	f7ff ff27 	bl	80034a8 <Stm32c0_Flash_WaitOperation>

	if(status == TARGET_OK)
 800365a:	b110      	cbz	r0, 8003662 <Stm32c0_Flash_OB_Program+0x36>
 800365c:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 800365e:	4620      	mov	r0, r4
 8003660:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8003662:	480d      	ldr	r0, [pc, #52]	@ (8003698 <Stm32c0_Flash_OB_Program+0x6c>)
 8003664:	f7ff f8a6 	bl	80027b4 <readMem>
		writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTSTRT|tmp);
 8003668:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 800366c:	480a      	ldr	r0, [pc, #40]	@ (8003698 <Stm32c0_Flash_OB_Program+0x6c>)
 800366e:	f7ff f8b3 	bl	80027d8 <writeMem>
    status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003676:	f7ff ff17 	bl	80034a8 <Stm32c0_Flash_WaitOperation>
 800367a:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
 800367c:	4806      	ldr	r0, [pc, #24]	@ (8003698 <Stm32c0_Flash_OB_Program+0x6c>)
 800367e:	f7ff f899 	bl	80027b4 <readMem>
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
 8003682:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8003686:	4804      	ldr	r0, [pc, #16]	@ (8003698 <Stm32c0_Flash_OB_Program+0x6c>)
 8003688:	f7ff f8a6 	bl	80027d8 <writeMem>
}
 800368c:	4620      	mov	r0, r4
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	40022020 	.word	0x40022020
 8003694:	3fefff00 	.word	0x3fefff00
 8003698:	40022014 	.word	0x40022014

0800369c <Stm32h7_Flash_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
void Stm32h7_Flash_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800369c:	b538      	push	{r3, r4, r5, lr}
	uint32_t tmp = 0;

  /* Flash Mass Erase */
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 800369e:	f001 0303 	and.w	r3, r1, #3
 80036a2:	2b03      	cmp	r3, #3
{
 80036a4:	4605      	mov	r5, r0
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 80036a6:	d039      	beq.n	800371c <Stm32h7_Flash_MassErase+0x80>
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 80036a8:	07ca      	lsls	r2, r1, #31
 80036aa:	460c      	mov	r4, r1
 80036ac:	d402      	bmi.n	80036b4 <Stm32h7_Flash_MassErase+0x18>
      /* Erase Bank1 */
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR1, tmp);
    }

    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 80036ae:	07a3      	lsls	r3, r4, #30
 80036b0:	d41a      	bmi.n	80036e8 <Stm32h7_Flash_MassErase+0x4c>
      /* Erase Bank2 */
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR2, tmp);
    }
  }
}
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
    	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 80036b4:	482e      	ldr	r0, [pc, #184]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036b6:	f7ff f87d 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80036ba:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 80036be:	482c      	ldr	r0, [pc, #176]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036c0:	f7ff f88a 	bl	80027d8 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 80036c4:	482a      	ldr	r0, [pc, #168]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036c6:	f7ff f875 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80036ca:	ea40 0105 	orr.w	r1, r0, r5
 80036ce:	4828      	ldr	r0, [pc, #160]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036d0:	f7ff f882 	bl	80027d8 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 80036d4:	4826      	ldr	r0, [pc, #152]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036d6:	f7ff f86d 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80036da:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 80036de:	4824      	ldr	r0, [pc, #144]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 80036e0:	f7ff f87a 	bl	80027d8 <writeMem>
    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 80036e4:	07a3      	lsls	r3, r4, #30
 80036e6:	d5e4      	bpl.n	80036b2 <Stm32h7_Flash_MassErase+0x16>
    	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 80036e8:	4822      	ldr	r0, [pc, #136]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 80036ea:	f7ff f863 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 80036ee:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 80036f2:	4820      	ldr	r0, [pc, #128]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 80036f4:	f7ff f870 	bl	80027d8 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 80036f8:	481e      	ldr	r0, [pc, #120]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 80036fa:	f7ff f85b 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 80036fe:	ea40 0105 	orr.w	r1, r0, r5
 8003702:	481c      	ldr	r0, [pc, #112]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 8003704:	f7ff f868 	bl	80027d8 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8003708:	481a      	ldr	r0, [pc, #104]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 800370a:	f7ff f853 	bl	80027b4 <readMem>
}
 800370e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8003712:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8003716:	4817      	ldr	r0, [pc, #92]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 8003718:	f7ff b85e 	b.w	80027d8 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 800371c:	4814      	ldr	r0, [pc, #80]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 800371e:	f7ff f849 	bl	80027b4 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8003722:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003726:	4812      	ldr	r0, [pc, #72]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 8003728:	f7ff f856 	bl	80027d8 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 800372c:	4811      	ldr	r0, [pc, #68]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 800372e:	f7ff f841 	bl	80027b4 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8003732:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003736:	480f      	ldr	r0, [pc, #60]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 8003738:	f7ff f84e 	bl	80027d8 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 800373c:	480c      	ldr	r0, [pc, #48]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 800373e:	f7ff f839 	bl	80027b4 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8003742:	ea40 0105 	orr.w	r1, r0, r5
 8003746:	480a      	ldr	r0, [pc, #40]	@ (8003770 <Stm32h7_Flash_MassErase+0xd4>)
 8003748:	f7ff f846 	bl	80027d8 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 800374c:	4809      	ldr	r0, [pc, #36]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 800374e:	f7ff f831 	bl	80027b4 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8003752:	ea40 0105 	orr.w	r1, r0, r5
 8003756:	4807      	ldr	r0, [pc, #28]	@ (8003774 <Stm32h7_Flash_MassErase+0xd8>)
 8003758:	f7ff f83e 	bl	80027d8 <writeMem>
  	tmp = readMem(STM32H7_FLASH_OPTCR) | STM32H7_FLASH_OPTCR_MER;
 800375c:	4806      	ldr	r0, [pc, #24]	@ (8003778 <Stm32h7_Flash_MassErase+0xdc>)
 800375e:	f7ff f829 	bl	80027b4 <readMem>
}
 8003762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
 8003766:	f040 0110 	orr.w	r1, r0, #16
 800376a:	4803      	ldr	r0, [pc, #12]	@ (8003778 <Stm32h7_Flash_MassErase+0xdc>)
 800376c:	f7ff b834 	b.w	80027d8 <writeMem>
 8003770:	5200200c 	.word	0x5200200c
 8003774:	5200210c 	.word	0x5200210c
 8003778:	52002018 	.word	0x52002018

0800377c <Stm32h7_Flash_Unlock>:
bool Stm32h7_Flash_Unlock(uint32_t Banks)
{
    uint32_t tmp = 0;

    /* BANK1 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 800377c:	07c3      	lsls	r3, r0, #31
{
 800377e:	b510      	push	{r4, lr}
 8003780:	4604      	mov	r4, r0
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8003782:	d403      	bmi.n	800378c <Stm32h7_Flash_Unlock+0x10>
            }
        }
    }

    /* BANK2 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8003784:	07a0      	lsls	r0, r4, #30
 8003786:	d415      	bmi.n	80037b4 <Stm32h7_Flash_Unlock+0x38>
                return TARGET_ERROR;
            }
        }
    }

    return TARGET_OK;
 8003788:	2000      	movs	r0, #0
}
 800378a:	bd10      	pop	{r4, pc}
        tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 800378c:	4813      	ldr	r0, [pc, #76]	@ (80037dc <Stm32h7_Flash_Unlock+0x60>)
 800378e:	f7ff f811 	bl	80027b4 <readMem>
        if (tmp != 0U)
 8003792:	07c1      	lsls	r1, r0, #31
 8003794:	d5f6      	bpl.n	8003784 <Stm32h7_Flash_Unlock+0x8>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY1);
 8003796:	4912      	ldr	r1, [pc, #72]	@ (80037e0 <Stm32h7_Flash_Unlock+0x64>)
 8003798:	4812      	ldr	r0, [pc, #72]	@ (80037e4 <Stm32h7_Flash_Unlock+0x68>)
 800379a:	f7ff f81d 	bl	80027d8 <writeMem>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY2);
 800379e:	4912      	ldr	r1, [pc, #72]	@ (80037e8 <Stm32h7_Flash_Unlock+0x6c>)
 80037a0:	4810      	ldr	r0, [pc, #64]	@ (80037e4 <Stm32h7_Flash_Unlock+0x68>)
 80037a2:	f7ff f819 	bl	80027d8 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 80037a6:	480d      	ldr	r0, [pc, #52]	@ (80037dc <Stm32h7_Flash_Unlock+0x60>)
 80037a8:	f7ff f804 	bl	80027b4 <readMem>
            if (tmp != 0U)
 80037ac:	07c2      	lsls	r2, r0, #31
 80037ae:	d5e9      	bpl.n	8003784 <Stm32h7_Flash_Unlock+0x8>
                return TARGET_ERROR;
 80037b0:	2001      	movs	r0, #1
}
 80037b2:	bd10      	pop	{r4, pc}
        tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 80037b4:	480d      	ldr	r0, [pc, #52]	@ (80037ec <Stm32h7_Flash_Unlock+0x70>)
 80037b6:	f7fe fffd 	bl	80027b4 <readMem>
        if (tmp != 0U)
 80037ba:	07c3      	lsls	r3, r0, #31
 80037bc:	d5e4      	bpl.n	8003788 <Stm32h7_Flash_Unlock+0xc>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY1);
 80037be:	4908      	ldr	r1, [pc, #32]	@ (80037e0 <Stm32h7_Flash_Unlock+0x64>)
 80037c0:	480b      	ldr	r0, [pc, #44]	@ (80037f0 <Stm32h7_Flash_Unlock+0x74>)
 80037c2:	f7ff f809 	bl	80027d8 <writeMem>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY2);
 80037c6:	4908      	ldr	r1, [pc, #32]	@ (80037e8 <Stm32h7_Flash_Unlock+0x6c>)
 80037c8:	4809      	ldr	r0, [pc, #36]	@ (80037f0 <Stm32h7_Flash_Unlock+0x74>)
 80037ca:	f7ff f805 	bl	80027d8 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 80037ce:	4807      	ldr	r0, [pc, #28]	@ (80037ec <Stm32h7_Flash_Unlock+0x70>)
 80037d0:	f7fe fff0 	bl	80027b4 <readMem>
            if (tmp != 0U)
 80037d4:	f000 0001 	and.w	r0, r0, #1
}
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	bf00      	nop
 80037dc:	5200200c 	.word	0x5200200c
 80037e0:	45670123 	.word	0x45670123
 80037e4:	52002004 	.word	0x52002004
 80037e8:	cdef89ab 	.word	0xcdef89ab
 80037ec:	5200210c 	.word	0x5200210c
 80037f0:	52002104 	.word	0x52002104

080037f4 <Stm32h7_Flash_Lock>:

bool Stm32h7_Flash_Lock(uint32_t Banks)
{
  uint32_t tmp = 0;

	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 80037f4:	07c2      	lsls	r2, r0, #31
{
 80037f6:	b510      	push	{r4, lr}
 80037f8:	4604      	mov	r4, r0
	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 80037fa:	d403      	bmi.n	8003804 <Stm32h7_Flash_Lock+0x10>
	{
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR1, tmp);
	}

  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 80037fc:	07a3      	lsls	r3, r4, #30
 80037fe:	d40b      	bmi.n	8003818 <Stm32h7_Flash_Lock+0x24>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR2, tmp);
  }

  return TARGET_OK;
}
 8003800:	2000      	movs	r0, #0
 8003802:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
 8003804:	4809      	ldr	r0, [pc, #36]	@ (800382c <Stm32h7_Flash_Lock+0x38>)
 8003806:	f7fe ffd5 	bl	80027b4 <readMem>
		writeMem(STM32H7_FLASH_CR1, tmp);
 800380a:	f040 0101 	orr.w	r1, r0, #1
 800380e:	4807      	ldr	r0, [pc, #28]	@ (800382c <Stm32h7_Flash_Lock+0x38>)
 8003810:	f7fe ffe2 	bl	80027d8 <writeMem>
  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8003814:	07a3      	lsls	r3, r4, #30
 8003816:	d5f3      	bpl.n	8003800 <Stm32h7_Flash_Lock+0xc>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
 8003818:	4805      	ldr	r0, [pc, #20]	@ (8003830 <Stm32h7_Flash_Lock+0x3c>)
 800381a:	f7fe ffcb 	bl	80027b4 <readMem>
		writeMem(STM32H7_FLASH_CR2, tmp);
 800381e:	f040 0101 	orr.w	r1, r0, #1
 8003822:	4803      	ldr	r0, [pc, #12]	@ (8003830 <Stm32h7_Flash_Lock+0x3c>)
 8003824:	f7fe ffd8 	bl	80027d8 <writeMem>
}
 8003828:	2000      	movs	r0, #0
 800382a:	bd10      	pop	{r4, pc}
 800382c:	5200200c 	.word	0x5200200c
 8003830:	5200210c 	.word	0x5200210c

08003834 <Stm32h7_Flash_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_Program(uint32_t FlashAddress, uint32_t DataAddress, uint32_t WordSize)
{
 8003834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t *src_addr = ( uint32_t*)DataAddress;
  uint8_t row_index = WordSize;
  uint32_t tmp;

  /* Check the parameters */
  if(IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8003838:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003840:	d302      	bcc.n	8003848 <Stm32h7_Flash_Program+0x14>
  {
    bank = STM32H7_FLASH_BANK_2;
  }
  else
  {
    return TARGET_ERROR;
 8003842:	2001      	movs	r0, #1
  	tmp = readMem(STM32H7_FLASH_CR2);
  	writeMem(STM32H7_FLASH_CR2, tmp & (~STM32H7_FLASH_CR_PG));
  }

  return TARGET_OK;
}
 8003844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t tickstart = HAL_GetTick();
 8003848:	4690      	mov	r8, r2
 800384a:	460c      	mov	r4, r1
 800384c:	4605      	mov	r5, r0
 800384e:	f001 f89f 	bl	8004990 <HAL_GetTick>
 8003852:	4606      	mov	r6, r0
  uint32_t tmp = readMem(sr_reg) & qw_flag;
 8003854:	4839      	ldr	r0, [pc, #228]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 8003856:	f7fe ffad 	bl	80027b4 <readMem>
  while (tmp != 0U)
 800385a:	0742      	lsls	r2, r0, #29
 800385c:	d553      	bpl.n	8003906 <Stm32h7_Flash_Program+0xd2>
    tmp = readMem(sr_reg) & qw_flag;
 800385e:	4f37      	ldr	r7, [pc, #220]	@ (800393c <Stm32h7_Flash_Program+0x108>)
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f24c 3950 	movw	r9, #50000	@ 0xc350
 8003864:	e003      	b.n	800386e <Stm32h7_Flash_Program+0x3a>
    tmp = readMem(sr_reg) & qw_flag;
 8003866:	f7fe ffa5 	bl	80027b4 <readMem>
  while (tmp != 0U)
 800386a:	0743      	lsls	r3, r0, #29
 800386c:	d54b      	bpl.n	8003906 <Stm32h7_Flash_Program+0xd2>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f001 f88f 	bl	8004990 <HAL_GetTick>
 8003872:	4603      	mov	r3, r0
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	454b      	cmp	r3, r9
    tmp = readMem(sr_reg) & qw_flag;
 8003878:	4638      	mov	r0, r7
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800387a:	d9f4      	bls.n	8003866 <Stm32h7_Flash_Program+0x32>
 800387c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003880:	fa5f f888 	uxtb.w	r8, r8
 8003884:	1d26      	adds	r6, r4, #4
 8003886:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800388a:	1b2d      	subs	r5, r5, r4
  	writeMem(dest_addr, *src_addr++);
 800388c:	6821      	ldr	r1, [r4, #0]
 800388e:	1960      	adds	r0, r4, r5
 8003890:	3404      	adds	r4, #4
 8003892:	f7fe ffa1 	bl	80027d8 <writeMem>
  }while (row_index != 0U);
 8003896:	42b4      	cmp	r4, r6
 8003898:	d1f8      	bne.n	800388c <Stm32h7_Flash_Program+0x58>
  uint32_t tickstart = HAL_GetTick();
 800389a:	f001 f879 	bl	8004990 <HAL_GetTick>
 800389e:	4604      	mov	r4, r0
  uint32_t tmp = readMem(sr_reg) & qw_flag;
 80038a0:	4826      	ldr	r0, [pc, #152]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 80038a2:	f7fe ff87 	bl	80027b4 <readMem>
  while (tmp != 0U)
 80038a6:	0741      	lsls	r1, r0, #29
 80038a8:	d519      	bpl.n	80038de <Stm32h7_Flash_Program+0xaa>
    tmp = readMem(sr_reg) & qw_flag;
 80038aa:	4e24      	ldr	r6, [pc, #144]	@ (800393c <Stm32h7_Flash_Program+0x108>)
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f24c 3550 	movw	r5, #50000	@ 0xc350
 80038b0:	e003      	b.n	80038ba <Stm32h7_Flash_Program+0x86>
    tmp = readMem(sr_reg) & qw_flag;
 80038b2:	f7fe ff7f 	bl	80027b4 <readMem>
  while (tmp != 0U)
 80038b6:	0742      	lsls	r2, r0, #29
 80038b8:	d511      	bpl.n	80038de <Stm32h7_Flash_Program+0xaa>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f001 f869 	bl	8004990 <HAL_GetTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	1b1b      	subs	r3, r3, r4
 80038c2:	42ab      	cmp	r3, r5
    tmp = readMem(sr_reg) & qw_flag;
 80038c4:	4630      	mov	r0, r6
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	d9f4      	bls.n	80038b2 <Stm32h7_Flash_Program+0x7e>
  	tmp = readMem(STM32H7_FLASH_CR1);
 80038c8:	481d      	ldr	r0, [pc, #116]	@ (8003940 <Stm32h7_Flash_Program+0x10c>)
 80038ca:	f7fe ff73 	bl	80027b4 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp & (~STM32H7_FLASH_CR_PG));
 80038ce:	f020 0102 	bic.w	r1, r0, #2
 80038d2:	481b      	ldr	r0, [pc, #108]	@ (8003940 <Stm32h7_Flash_Program+0x10c>)
 80038d4:	f7fe ff80 	bl	80027d8 <writeMem>
  return TARGET_OK;
 80038d8:	2000      	movs	r0, #0
}
 80038da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t errorflag = readMem(sr_reg) & all_errors_flag;
 80038de:	4817      	ldr	r0, [pc, #92]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 80038e0:	f7fe ff68 	bl	80027b4 <readMem>
 80038e4:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <Stm32h7_Flash_Program+0x110>)
 80038e6:	4601      	mov	r1, r0
    writeMem(sr_reg, errorflag);
 80038e8:	4019      	ands	r1, r3
 80038ea:	4814      	ldr	r0, [pc, #80]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 80038ec:	f7fe ff74 	bl	80027d8 <writeMem>
  tmp = readMem(sr_reg) & eop_flag;
 80038f0:	4812      	ldr	r0, [pc, #72]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 80038f2:	f7fe ff5f 	bl	80027b4 <readMem>
  if (tmp != 0)
 80038f6:	03c3      	lsls	r3, r0, #15
 80038f8:	d5e6      	bpl.n	80038c8 <Stm32h7_Flash_Program+0x94>
      writeMem(sr_reg, eop_flag);
 80038fa:	4810      	ldr	r0, [pc, #64]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 80038fc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003900:	f7fe ff6a 	bl	80027d8 <writeMem>
 8003904:	e7e0      	b.n	80038c8 <Stm32h7_Flash_Program+0x94>
  uint32_t errorflag = readMem(sr_reg) & all_errors_flag;
 8003906:	480d      	ldr	r0, [pc, #52]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 8003908:	f7fe ff54 	bl	80027b4 <readMem>
 800390c:	490d      	ldr	r1, [pc, #52]	@ (8003944 <Stm32h7_Flash_Program+0x110>)
    writeMem(sr_reg, errorflag);
 800390e:	4001      	ands	r1, r0
 8003910:	480a      	ldr	r0, [pc, #40]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 8003912:	f7fe ff61 	bl	80027d8 <writeMem>
  tmp = readMem(sr_reg) & eop_flag;
 8003916:	4809      	ldr	r0, [pc, #36]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 8003918:	f7fe ff4c 	bl	80027b4 <readMem>
  if (tmp != 0)
 800391c:	03c0      	lsls	r0, r0, #15
 800391e:	d504      	bpl.n	800392a <Stm32h7_Flash_Program+0xf6>
      writeMem(sr_reg, eop_flag);
 8003920:	4806      	ldr	r0, [pc, #24]	@ (800393c <Stm32h7_Flash_Program+0x108>)
 8003922:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003926:	f7fe ff57 	bl	80027d8 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_PG;
 800392a:	4805      	ldr	r0, [pc, #20]	@ (8003940 <Stm32h7_Flash_Program+0x10c>)
 800392c:	f7fe ff42 	bl	80027b4 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8003930:	f040 0102 	orr.w	r1, r0, #2
 8003934:	4802      	ldr	r0, [pc, #8]	@ (8003940 <Stm32h7_Flash_Program+0x10c>)
 8003936:	f7fe ff4f 	bl	80027d8 <writeMem>
 800393a:	e79f      	b.n	800387c <Stm32h7_Flash_Program+0x48>
 800393c:	52002010 	.word	0x52002010
 8003940:	5200200c 	.word	0x5200200c
 8003944:	17ee0000 	.word	0x17ee0000

08003948 <Button_Update>:
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
}

void Button_Update(void)
{
 8003948:	b570      	push	{r4, r5, r6, lr}
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 800394a:	4812      	ldr	r0, [pc, #72]	@ (8003994 <Button_Update+0x4c>)

    if (current_state != last_button_state)
 800394c:	4c12      	ldr	r4, [pc, #72]	@ (8003998 <Button_Update+0x50>)
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 800394e:	4d13      	ldr	r5, [pc, #76]	@ (800399c <Button_Update+0x54>)
    {
        last_debounce_time = HAL_GetTick();
 8003950:	4e13      	ldr	r6, [pc, #76]	@ (80039a0 <Button_Update+0x58>)
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 8003952:	2101      	movs	r1, #1
 8003954:	f001 fbe8 	bl	8005128 <HAL_GPIO_ReadPin>
    if (current_state != last_button_state)
 8003958:	7823      	ldrb	r3, [r4, #0]
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 800395a:	7028      	strb	r0, [r5, #0]
    if (current_state != last_button_state)
 800395c:	4283      	cmp	r3, r0
 800395e:	d002      	beq.n	8003966 <Button_Update+0x1e>
        last_debounce_time = HAL_GetTick();
 8003960:	f001 f816 	bl	8004990 <HAL_GetTick>
 8003964:	6030      	str	r0, [r6, #0]
    }

    if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY_MS)
 8003966:	f001 f813 	bl	8004990 <HAL_GetTick>
 800396a:	6833      	ldr	r3, [r6, #0]
 800396c:	1ac0      	subs	r0, r0, r3
 800396e:	2814      	cmp	r0, #20
 8003970:	d802      	bhi.n	8003978 <Button_Update+0x30>
    {
        if (current_state != button_state)
 8003972:	782b      	ldrb	r3, [r5, #0]
                button_pressed_event = 1;
            }
        }
    }

    last_button_state = current_state;
 8003974:	7023      	strb	r3, [r4, #0]
}
 8003976:	bd70      	pop	{r4, r5, r6, pc}
        if (current_state != button_state)
 8003978:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <Button_Update+0x5c>)
 800397a:	782b      	ldrb	r3, [r5, #0]
 800397c:	7811      	ldrb	r1, [r2, #0]
 800397e:	428b      	cmp	r3, r1
 8003980:	d0f8      	beq.n	8003974 <Button_Update+0x2c>
            button_state = current_state;
 8003982:	7013      	strb	r3, [r2, #0]
            if (button_state == GPIO_PIN_RESET)
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f5      	bne.n	8003974 <Button_Update+0x2c>
                button_pressed_event = 1;
 8003988:	4a07      	ldr	r2, [pc, #28]	@ (80039a8 <Button_Update+0x60>)
    last_button_state = current_state;
 800398a:	7023      	strb	r3, [r4, #0]
                button_pressed_event = 1;
 800398c:	2101      	movs	r1, #1
 800398e:	7011      	strb	r1, [r2, #0]
}
 8003990:	bd70      	pop	{r4, r5, r6, pc}
 8003992:	bf00      	nop
 8003994:	40020400 	.word	0x40020400
 8003998:	20000004 	.word	0x20000004
 800399c:	200004e9 	.word	0x200004e9
 80039a0:	200004ec 	.word	0x200004ec
 80039a4:	20000005 	.word	0x20000005
 80039a8:	200004e8 	.word	0x200004e8

080039ac <Button_WasPressed>:

uint8_t Button_WasPressed(void)
{
    if (button_pressed_event)
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <Button_WasPressed+0x10>)
 80039ae:	7818      	ldrb	r0, [r3, #0]
 80039b0:	b110      	cbz	r0, 80039b8 <Button_WasPressed+0xc>
    {
        button_pressed_event = 0;
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
        return 1;
 80039b6:	2001      	movs	r0, #1
    }
    return 0;
}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200004e8 	.word	0x200004e8

080039c0 <Buzzer_SetState>:
static void PlayProgrammingCompleteSound(void);
static void PlayProgrammingFailedSound(void);
static void PlayIdleSound(void);

void Buzzer_SetState(BuzzerState state)
{
 80039c0:	b538      	push	{r3, r4, r5, lr}

	switch(state)
 80039c2:	2804      	cmp	r0, #4
 80039c4:	d822      	bhi.n	8003a0c <Buzzer_SetState+0x4c>
 80039c6:	e8df f000 	tbb	[pc, r0]
 80039ca:	5344      	.short	0x5344
 80039cc:	0322      	.short	0x0322
 80039ce:	3b          	.byte	0x3b
 80039cf:	00          	.byte	0x00
 80039d0:	4d2e      	ldr	r5, [pc, #184]	@ (8003a8c <Buzzer_SetState+0xcc>)
 80039d2:	2405      	movs	r4, #5
    if (frequency > 0) {
        // 타이머 주기 계산: 타이머 클럭(1MHz)에서 원하는 주파수를 설정
        uint32_t period = (1000000 / frequency) - 1;

        // 주기(ARR)를 설정하여 타이머의 PWM 주파수를 조정
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 80039d4:	682a      	ldr	r2, [r5, #0]
 80039d6:	f44f 73a6 	mov.w	r3, #332	@ 0x14c

        // 듀티 사이클을 50%로 설정 (부저가 50% 듀티에서 동작하도록)
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 80039da:	21a6      	movs	r1, #166	@ 0xa6
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 80039dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        // 타이머 PWM 시작
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80039de:	4628      	mov	r0, r5
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 80039e0:	63d1      	str	r1, [r2, #60]	@ 0x3c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80039e2:	2108      	movs	r1, #8
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 80039e4:	60eb      	str	r3, [r5, #12]
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80039e6:	f004 fa57 	bl	8007e98 <HAL_TIM_PWM_Start>
    {
    		/* Set Frequency */
        SetBuzzerFrequency(DEFAULT_FREQ);

        /* Set Duration */
        HAL_Delay(150);
 80039ea:	2096      	movs	r0, #150	@ 0x96
 80039ec:	f000 ffd6 	bl	800499c <HAL_Delay>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80039f6:	2108      	movs	r1, #8
 80039f8:	4628      	mov	r0, r5
 80039fa:	f004 fab3 	bl	8007f64 <HAL_TIM_PWM_Stop>

        /* Buzzer Off */
        SetBuzzerFrequency(0);

        /* Set Duration */
        HAL_Delay(150);
 80039fe:	2096      	movs	r0, #150	@ 0x96
 8003a00:	f000 ffcc 	bl	800499c <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 8003a04:	1e63      	subs	r3, r4, #1
 8003a06:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8003a0a:	d1e3      	bne.n	80039d4 <Buzzer_SetState+0x14>
}
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a0e:	4c1f      	ldr	r4, [pc, #124]	@ (8003a8c <Buzzer_SetState+0xcc>)
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	f44f 73a6 	mov.w	r3, #332	@ 0x14c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a16:	20a6      	movs	r0, #166	@ 0xa6
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a1a:	2108      	movs	r1, #8
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a1c:	63d0      	str	r0, [r2, #60]	@ 0x3c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a1e:	4620      	mov	r0, r4
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a20:	60e3      	str	r3, [r4, #12]
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a22:	f004 fa39 	bl	8007e98 <HAL_TIM_PWM_Start>
    HAL_Delay(300);
 8003a26:	f44f 7096 	mov.w	r0, #300	@ 0x12c
    HAL_Delay(150);
 8003a2a:	f000 ffb7 	bl	800499c <HAL_Delay>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003a34:	4620      	mov	r0, r4
 8003a36:	2108      	movs	r1, #8
}
 8003a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003a3c:	f004 ba92 	b.w	8007f64 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 8003a40:	4812      	ldr	r0, [pc, #72]	@ (8003a8c <Buzzer_SetState+0xcc>)
 8003a42:	6803      	ldr	r3, [r0, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003a48:	2108      	movs	r1, #8
}
 8003a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003a4e:	f004 ba89 	b.w	8007f64 <HAL_TIM_PWM_Stop>
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a52:	4c0e      	ldr	r4, [pc, #56]	@ (8003a8c <Buzzer_SetState+0xcc>)
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	f44f 73a6 	mov.w	r3, #332	@ 0x14c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a5a:	20a6      	movs	r0, #166	@ 0xa6
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a5e:	2108      	movs	r1, #8
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a60:	63d0      	str	r0, [r2, #60]	@ 0x3c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a62:	4620      	mov	r0, r4
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a64:	60e3      	str	r3, [r4, #12]
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a66:	f004 fa17 	bl	8007e98 <HAL_TIM_PWM_Start>
    HAL_Delay(500);
 8003a6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a6e:	e7dc      	b.n	8003a2a <Buzzer_SetState+0x6a>
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a70:	4c06      	ldr	r4, [pc, #24]	@ (8003a8c <Buzzer_SetState+0xcc>)
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	f44f 73a6 	mov.w	r3, #332	@ 0x14c
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a78:	20a6      	movs	r0, #166	@ 0xa6
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a7c:	2108      	movs	r1, #8
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8003a7e:	63d0      	str	r0, [r2, #60]	@ 0x3c
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a80:	4620      	mov	r0, r4
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8003a82:	60e3      	str	r3, [r4, #12]
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a84:	f004 fa08 	bl	8007e98 <HAL_TIM_PWM_Start>
    HAL_Delay(150);
 8003a88:	2096      	movs	r0, #150	@ 0x96
 8003a8a:	e7ce      	b.n	8003a2a <Buzzer_SetState+0x6a>
 8003a8c:	200006a0 	.word	0x200006a0

08003a90 <ihex_reset_state>:
    }
}
#endif

void ihex_reset_state()
{
 8003a90:	b410      	push	{r4}
    state = 0;
 8003a92:	4c06      	ldr	r4, [pc, #24]	@ (8003aac <ihex_reset_state+0x1c>)
    address_lo = 0;
 8003a94:	4806      	ldr	r0, [pc, #24]	@ (8003ab0 <ihex_reset_state+0x20>)
    address_hi = 0;
 8003a96:	4907      	ldr	r1, [pc, #28]	@ (8003ab4 <ihex_reset_state+0x24>)
    ex_segment_addr_mode = false;
 8003a98:	4a07      	ldr	r2, [pc, #28]	@ (8003ab8 <ihex_reset_state+0x28>)
    state = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	7023      	strb	r3, [r4, #0]
}
 8003a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    address_lo = 0;
 8003aa2:	8003      	strh	r3, [r0, #0]
    address_hi = 0;
 8003aa4:	800b      	strh	r3, [r1, #0]
    ex_segment_addr_mode = false;
 8003aa6:	7013      	strb	r3, [r2, #0]
}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000603 	.word	0x20000603
 8003ab0:	20000600 	.word	0x20000600
 8003ab4:	200005fe 	.word	0x200005fe
 8003ab8:	200005fc 	.word	0x200005fc

08003abc <ihex_set_callback_func>:

void ihex_set_callback_func(ihex_callback_fp fp)
{
    callback_fp = fp;
 8003abc:	4b01      	ldr	r3, [pc, #4]	@ (8003ac4 <ihex_set_callback_func+0x8>)
 8003abe:	6018      	str	r0, [r3, #0]
}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	200004f0 	.word	0x200004f0

08003ac8 <ihex_parser>:
bool ihex_parser(const uint8_t *steambuf, uint32_t size)
{
    uint32_t i;
    uint8_t c, hc;
    
    for (i = 0; i<size; i++)
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	f000 8179 	beq.w	8003dc0 <ihex_parser+0x2f8>
{
 8003ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad2:	4401      	add	r1, r0
        if (c == '\0')
        {
            return true;
        }

        if (state == START_CODE_STATE)
 8003ad4:	4ea4      	ldr	r6, [pc, #656]	@ (8003d68 <ihex_parser+0x2a0>)
            if ((hc = HexToDec(c)) == INVALID_HEX_CHAR)
            {
                return false;
            }

            if (!calc_cs_toogle)
 8003ad6:	f8df b2d8 	ldr.w	fp, [pc, #728]	@ 8003db0 <ihex_parser+0x2e8>
            calc_cs = 0x00;
 8003ada:	4fa4      	ldr	r7, [pc, #656]	@ (8003d6c <ihex_parser+0x2a4>)
{
 8003adc:	b083      	sub	sp, #12
 8003ade:	1e44      	subs	r4, r0, #1
 8003ae0:	1e4d      	subs	r5, r1, #1
        c = steambuf[i];
 8003ae2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
        if (c == '\0')
 8003ae6:	b1ea      	cbz	r2, 8003b24 <ihex_parser+0x5c>
        if (state == START_CODE_STATE)
 8003ae8:	7833      	ldrb	r3, [r6, #0]
 8003aea:	b9fb      	cbnz	r3, 8003b2c <ihex_parser+0x64>
        }

        switch (state)
        {
        case START_CODE_STATE:
            if (c == '\r' || c == '\n')
 8003aec:	2a0d      	cmp	r2, #13
            calc_cs = 0x00;
 8003aee:	703b      	strb	r3, [r7, #0]
            calc_cs_toogle = false;
 8003af0:	f88b 3000 	strb.w	r3, [fp]
            if (c == '\r' || c == '\n')
 8003af4:	d014      	beq.n	8003b20 <ihex_parser+0x58>
 8003af6:	2a0a      	cmp	r2, #10
 8003af8:	d012      	beq.n	8003b20 <ihex_parser+0x58>
            {
                continue;
            }
            else if (c == ':')
 8003afa:	2a3a      	cmp	r2, #58	@ 0x3a
 8003afc:	d17c      	bne.n	8003bf8 <ihex_parser+0x130>
            {
                byte_count = 0;
 8003afe:	499c      	ldr	r1, [pc, #624]	@ (8003d70 <ihex_parser+0x2a8>)
                record_type = 0;
                address_lo = 0x0000;
                //memset(data, 0, sizeof(data));
                memset(data, 0xFF, sizeof(data));
 8003b00:	489c      	ldr	r0, [pc, #624]	@ (8003d74 <ihex_parser+0x2ac>)
                byte_count = 0;
 8003b02:	700b      	strb	r3, [r1, #0]
                record_type = 0;
 8003b04:	499c      	ldr	r1, [pc, #624]	@ (8003d78 <ihex_parser+0x2b0>)
                address_lo = 0x0000;
 8003b06:	9301      	str	r3, [sp, #4]
                record_type = 0;
 8003b08:	700b      	strb	r3, [r1, #0]
                address_lo = 0x0000;
 8003b0a:	499c      	ldr	r1, [pc, #624]	@ (8003d7c <ihex_parser+0x2b4>)
                memset(data, 0xFF, sizeof(data));
 8003b0c:	22ff      	movs	r2, #255	@ 0xff
                address_lo = 0x0000;
 8003b0e:	800b      	strh	r3, [r1, #0]
                memset(data, 0xFF, sizeof(data));
 8003b10:	4611      	mov	r1, r2
 8003b12:	f00b ffd3 	bl	800fabc <memset>
                data_size_in_nibble = 0;
 8003b16:	4a9a      	ldr	r2, [pc, #616]	@ (8003d80 <ihex_parser+0x2b8>)
 8003b18:	9b01      	ldr	r3, [sp, #4]
 8003b1a:	8013      	strh	r3, [r2, #0]
                ++state;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003b20:	42ac      	cmp	r4, r5
 8003b22:	d1de      	bne.n	8003ae2 <ihex_parser+0x1a>
            return true;
 8003b24:	2001      	movs	r0, #1
        default:
            return false;
        }
    }
    return true;
}
 8003b26:	b003      	add	sp, #12
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (state >= BYTE_COUNT_0_STATE && state <= CHECKSUM_1_STATE)
 8003b2c:	1e59      	subs	r1, r3, #1
 8003b2e:	290a      	cmp	r1, #10
 8003b30:	d862      	bhi.n	8003bf8 <ihex_parser+0x130>
    if (h >= '0' && h <= '9')
 8003b32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8003b36:	b2c9      	uxtb	r1, r1
 8003b38:	2909      	cmp	r1, #9
 8003b3a:	d90a      	bls.n	8003b52 <ihex_parser+0x8a>
    else if (h >= 'A' && h <= 'F')
 8003b3c:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 8003b40:	2905      	cmp	r1, #5
 8003b42:	f240 80c6 	bls.w	8003cd2 <ihex_parser+0x20a>
    else if (h >= 'a' && h <= 'z')
 8003b46:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 8003b4a:	2919      	cmp	r1, #25
 8003b4c:	d854      	bhi.n	8003bf8 <ihex_parser+0x130>
        return h - 'a' + 0xA;
 8003b4e:	3a57      	subs	r2, #87	@ 0x57
 8003b50:	b2d1      	uxtb	r1, r2
            if (!calc_cs_toogle)
 8003b52:	f89b 2000 	ldrb.w	r2, [fp]
 8003b56:	f082 0001 	eor.w	r0, r2, #1
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	f040 8096 	bne.w	8003c8c <ihex_parser+0x1c4>
                temp_cs = hc;
 8003b60:	4a88      	ldr	r2, [pc, #544]	@ (8003d84 <ihex_parser+0x2bc>)
 8003b62:	7011      	strb	r1, [r2, #0]
        switch (state)
 8003b64:	1eda      	subs	r2, r3, #3
            calc_cs_toogle = !calc_cs_toogle;
 8003b66:	f88b 0000 	strb.w	r0, [fp]
        switch (state)
 8003b6a:	2a08      	cmp	r2, #8
 8003b6c:	f200 812a 	bhi.w	8003dc4 <ihex_parser+0x2fc>
 8003b70:	e8df f002 	tbb	[pc, r2]
 8003b74:	46464646 	.word	0x46464646
 8003b78:	53597684 	.word	0x53597684
 8003b7c:	05          	.byte	0x05
 8003b7d:	00          	.byte	0x00
            if((byte_count<<1) != data_size_in_nibble)  // Check whether byte count field match the data size 
 8003b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d70 <ihex_parser+0x2a8>)
 8003b80:	f8df 91fc 	ldr.w	r9, [pc, #508]	@ 8003d80 <ihex_parser+0x2b8>
 8003b84:	7811      	ldrb	r1, [r2, #0]
 8003b86:	f8b9 2000 	ldrh.w	r2, [r9]
 8003b8a:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 8003b8e:	d133      	bne.n	8003bf8 <ihex_parser+0x130>
            if (calc_cs != 0x00)
 8003b90:	4a76      	ldr	r2, [pc, #472]	@ (8003d6c <ihex_parser+0x2a4>)
 8003b92:	7810      	ldrb	r0, [r2, #0]
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d12f      	bne.n	8003bf8 <ihex_parser+0x130>
            if (record_type == 2)           // Set extended segment addresss
 8003b98:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 8003d78 <ihex_parser+0x2b0>
 8003b9c:	f898 2000 	ldrb.w	r2, [r8]
 8003ba0:	2a02      	cmp	r2, #2
 8003ba2:	d17f      	bne.n	8003ca4 <ihex_parser+0x1dc>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003ba4:	4a73      	ldr	r2, [pc, #460]	@ (8003d74 <ihex_parser+0x2ac>)
 8003ba6:	4878      	ldr	r0, [pc, #480]	@ (8003d88 <ihex_parser+0x2c0>)
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	ba52      	rev16	r2, r2
 8003bac:	8002      	strh	r2, [r0, #0]
                ex_segment_addr_mode = true;
 8003bae:	b291      	uxth	r1, r2
 8003bb0:	4a76      	ldr	r2, [pc, #472]	@ (8003d8c <ihex_parser+0x2c4>)
    		printf("Set Extended Segment Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003bb2:	4877      	ldr	r0, [pc, #476]	@ (8003d90 <ihex_parser+0x2c8>)
                ex_segment_addr_mode = true;
 8003bb4:	f04f 0c01 	mov.w	ip, #1
    		printf("Set Extended Segment Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003bb8:	0109      	lsls	r1, r1, #4
                ex_segment_addr_mode = true;
 8003bba:	f882 c000 	strb.w	ip, [r2]
    		printf("Set Extended Segment Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003bbe:	f00b fda7 	bl	800f710 <iprintf>
            if (record_type == 0 && callback_fp != 0)
 8003bc2:	f898 2000 	ldrb.w	r2, [r8]
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d175      	bne.n	8003cb6 <ihex_parser+0x1ee>
 8003bca:	4a72      	ldr	r2, [pc, #456]	@ (8003d94 <ihex_parser+0x2cc>)
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d079      	beq.n	8003cc6 <ihex_parser+0x1fe>
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8003d8c <ihex_parser+0x2c4>)
 8003bd4:	4869      	ldr	r0, [pc, #420]	@ (8003d7c <ihex_parser+0x2b4>)
 8003bd6:	7811      	ldrb	r1, [r2, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <ihex_parser+0x2c0>)
 8003bda:	8800      	ldrh	r0, [r0, #0]
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	2900      	cmp	r1, #0
 8003be0:	f000 80e8 	beq.w	8003db4 <ihex_parser+0x2ec>
 8003be4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
                if(!callback_fp(address, data, data_size_in_nibble>>1))
 8003be8:	f8b9 2000 	ldrh.w	r2, [r9]
 8003bec:	4961      	ldr	r1, [pc, #388]	@ (8003d74 <ihex_parser+0x2ac>)
 8003bee:	f3c2 0247 	ubfx	r2, r2, #1, #8
 8003bf2:	4798      	blx	r3
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d166      	bne.n	8003cc6 <ihex_parser+0x1fe>
                return false;
 8003bf8:	2000      	movs	r0, #0
}
 8003bfa:	b003      	add	sp, #12
 8003bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8003c00:	485e      	ldr	r0, [pc, #376]	@ (8003d7c <ihex_parser+0x2b4>)
 8003c02:	8802      	ldrh	r2, [r0, #0]
            ++state;
 8003c04:	f103 0801 	add.w	r8, r3, #1
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8003c08:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    for (i = 0; i<size; i++)
 8003c0c:	42ac      	cmp	r4, r5
            ++state;
 8003c0e:	f886 8000 	strb.w	r8, [r6]
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8003c12:	8002      	strh	r2, [r0, #0]
    for (i = 0; i<size; i++)
 8003c14:	f47f af65 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003c18:	e784      	b.n	8003b24 <ihex_parser+0x5c>
            ++state;
 8003c1a:	220b      	movs	r2, #11
    for (i = 0; i<size; i++)
 8003c1c:	42ac      	cmp	r4, r5
            ++state;
 8003c1e:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003c20:	f47f af5f 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003c24:	e77e      	b.n	8003b24 <ihex_parser+0x5c>
            uint8_t b_index = data_size_in_nibble >> 1;
 8003c26:	f8df e158 	ldr.w	lr, [pc, #344]	@ 8003d80 <ihex_parser+0x2b8>
            if ((data_size_in_nibble >> 1) >= byte_count)
 8003c2a:	4851      	ldr	r0, [pc, #324]	@ (8003d70 <ihex_parser+0x2a8>)
            uint8_t b_index = data_size_in_nibble >> 1;
 8003c2c:	f8be 2000 	ldrh.w	r2, [lr]
            data[b_index] = (data[b_index] << 4) | hc;
 8003c30:	4b50      	ldr	r3, [pc, #320]	@ (8003d74 <ihex_parser+0x2ac>)
            if ((data_size_in_nibble >> 1) >= byte_count)
 8003c32:	f890 8000 	ldrb.w	r8, [r0]
            data[b_index] = (data[b_index] << 4) | hc;
 8003c36:	f3c2 0047 	ubfx	r0, r2, #1, #8
            ++data_size_in_nibble;
 8003c3a:	3201      	adds	r2, #1
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	f8ae 2000 	strh.w	r2, [lr]
            data[b_index] = (data[b_index] << 4) | hc;
 8003c42:	f813 e000 	ldrb.w	lr, [r3, r0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 8003c46:	ebb8 0f52 	cmp.w	r8, r2, lsr #1
            data[b_index] = (data[b_index] << 4) | hc;
 8003c4a:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
 8003c4e:	5419      	strb	r1, [r3, r0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 8003c50:	f63f af66 	bhi.w	8003b20 <ihex_parser+0x58>
                state = CHECKSUM_0_STATE;
 8003c54:	220a      	movs	r2, #10
    for (i = 0; i<size; i++)
 8003c56:	42ac      	cmp	r4, r5
                state = CHECKSUM_0_STATE;
 8003c58:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003c5a:	f47f af42 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003c5e:	e761      	b.n	8003b24 <ihex_parser+0x5c>
            if (hc > 5)
 8003c60:	2905      	cmp	r1, #5
 8003c62:	d8c9      	bhi.n	8003bf8 <ihex_parser+0x130>
            if (byte_count == 0)
 8003c64:	4a42      	ldr	r2, [pc, #264]	@ (8003d70 <ihex_parser+0x2a8>)
            record_type = hc;
 8003c66:	4844      	ldr	r0, [pc, #272]	@ (8003d78 <ihex_parser+0x2b0>)
            if (byte_count == 0)
 8003c68:	7812      	ldrb	r2, [r2, #0]
            record_type = hc;
 8003c6a:	7001      	strb	r1, [r0, #0]
            if (byte_count == 0)
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d0f1      	beq.n	8003c54 <ihex_parser+0x18c>
                ++state;
 8003c70:	2209      	movs	r2, #9
    for (i = 0; i<size; i++)
 8003c72:	42ac      	cmp	r4, r5
                ++state;
 8003c74:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003c76:	f47f af34 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003c7a:	e753      	b.n	8003b24 <ihex_parser+0x5c>
            if (hc != 0)
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d1bb      	bne.n	8003bf8 <ihex_parser+0x130>
            ++state;
 8003c80:	2208      	movs	r2, #8
    for (i = 0; i<size; i++)
 8003c82:	42ac      	cmp	r4, r5
            ++state;
 8003c84:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003c86:	f47f af2c 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003c8a:	e74b      	b.n	8003b24 <ihex_parser+0x5c>
                calc_cs += (temp_cs << 4) | hc;
 8003c8c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d84 <ihex_parser+0x2bc>)
 8003c8e:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003d6c <ihex_parser+0x2a4>
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	f89c e000 	ldrb.w	lr, [ip]
 8003c98:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8003c9c:	4472      	add	r2, lr
 8003c9e:	f88c 2000 	strb.w	r2, [ip]
 8003ca2:	e75f      	b.n	8003b64 <ihex_parser+0x9c>
            else if (record_type == 4)      // Set linear addresss
 8003ca4:	2a04      	cmp	r2, #4
 8003ca6:	d051      	beq.n	8003d4c <ihex_parser+0x284>
    switch (record_type)
 8003ca8:	2a05      	cmp	r2, #5
 8003caa:	d80c      	bhi.n	8003cc6 <ihex_parser+0x1fe>
 8003cac:	e8df f002 	tbb	[pc, r2]
 8003cb0:	140b2026 	.word	0x140b2026
 8003cb4:	1a0b      	.short	0x1a0b
            else if(record_type == 1) //add for h7
 8003cb6:	2a01      	cmp	r2, #1
 8003cb8:	d105      	bne.n	8003cc6 <ihex_parser+0x1fe>
            	callback_fp(0,0,0);
 8003cba:	4a36      	ldr	r2, [pc, #216]	@ (8003d94 <ihex_parser+0x2cc>)
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4798      	blx	r3
            state = START_CODE_STATE;
 8003cc6:	2200      	movs	r2, #0
    for (i = 0; i<size; i++)
 8003cc8:	42ac      	cmp	r4, r5
            state = START_CODE_STATE;
 8003cca:	7032      	strb	r2, [r6, #0]
    for (i = 0; i<size; i++)
 8003ccc:	f47f af09 	bne.w	8003ae2 <ihex_parser+0x1a>
 8003cd0:	e728      	b.n	8003b24 <ihex_parser+0x5c>
        return h - 'A' + 0xA;
 8003cd2:	3a37      	subs	r2, #55	@ 0x37
 8003cd4:	b2d1      	uxtb	r1, r2
 8003cd6:	e73c      	b.n	8003b52 <ihex_parser+0x8a>
        printf("Start extended segment address\n");
 8003cd8:	482f      	ldr	r0, [pc, #188]	@ (8003d98 <ihex_parser+0x2d0>)
 8003cda:	f00b fd89 	bl	800f7f0 <puts>
            if (record_type == 0 && callback_fp != 0)
 8003cde:	f898 2000 	ldrb.w	r2, [r8]
        break;
 8003ce2:	e770      	b.n	8003bc6 <ihex_parser+0xfe>
        printf("Start linear address\n");
 8003ce4:	482d      	ldr	r0, [pc, #180]	@ (8003d9c <ihex_parser+0x2d4>)
 8003ce6:	f00b fd83 	bl	800f7f0 <puts>
            if (record_type == 0 && callback_fp != 0)
 8003cea:	f898 2000 	ldrb.w	r2, [r8]
        break;
 8003cee:	e76a      	b.n	8003bc6 <ihex_parser+0xfe>
        printf("EOF\n");
 8003cf0:	482b      	ldr	r0, [pc, #172]	@ (8003da0 <ihex_parser+0x2d8>)
 8003cf2:	f00b fd7d 	bl	800f7f0 <puts>
            if (record_type == 0 && callback_fp != 0)
 8003cf6:	f898 2000 	ldrb.w	r2, [r8]
        break;
 8003cfa:	e764      	b.n	8003bc6 <ihex_parser+0xfe>
        uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003cfc:	4a23      	ldr	r2, [pc, #140]	@ (8003d8c <ihex_parser+0x2c4>)
 8003cfe:	7810      	ldrb	r0, [r2, #0]
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8003d00:	4a1e      	ldr	r2, [pc, #120]	@ (8003d7c <ihex_parser+0x2b4>)
        uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003d02:	8811      	ldrh	r1, [r2, #0]
 8003d04:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <ihex_parser+0x2c0>)
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d156      	bne.n	8003dba <ihex_parser+0x2f2>
 8003d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
        printf("WriteData (0x%08"PRIX32"):", address);
 8003d10:	4824      	ldr	r0, [pc, #144]	@ (8003da4 <ihex_parser+0x2dc>)
 8003d12:	f00b fcfd 	bl	800f710 <iprintf>
        uint8_t data_size = data_size_in_nibble >> 1;
 8003d16:	f8b9 2000 	ldrh.w	r2, [r9]
 8003d1a:	f3c2 0247 	ubfx	r2, r2, #1, #8
        for (i = 0; i < data_size; i++)
 8003d1e:	b17a      	cbz	r2, 8003d40 <ihex_parser+0x278>
 8003d20:	f8df a050 	ldr.w	sl, [pc, #80]	@ 8003d74 <ihex_parser+0x2ac>
 8003d24:	1e53      	subs	r3, r2, #1
 8003d26:	f10a 0101 	add.w	r1, sl, #1
 8003d2a:	fa51 f383 	uxtab	r3, r1, r3
 8003d2e:	9301      	str	r3, [sp, #4]
            printf("%02"PRIX16" ", data[i]);
 8003d30:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d34:	481c      	ldr	r0, [pc, #112]	@ (8003da8 <ihex_parser+0x2e0>)
 8003d36:	f00b fceb 	bl	800f710 <iprintf>
        for (i = 0; i < data_size; i++)
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	459a      	cmp	sl, r3
 8003d3e:	d1f7      	bne.n	8003d30 <ihex_parser+0x268>
        printf("\n");
 8003d40:	200a      	movs	r0, #10
 8003d42:	f00b fcf7 	bl	800f734 <putchar>
            if (record_type == 0 && callback_fp != 0)
 8003d46:	f898 2000 	ldrb.w	r2, [r8]
        break;
 8003d4a:	e73c      	b.n	8003bc6 <ihex_parser+0xfe>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003d4c:	4a09      	ldr	r2, [pc, #36]	@ (8003d74 <ihex_parser+0x2ac>)
 8003d4e:	8811      	ldrh	r1, [r2, #0]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <ihex_parser+0x2c0>)
 8003d52:	ba49      	rev16	r1, r1
 8003d54:	8011      	strh	r1, [r2, #0]
                ex_segment_addr_mode = false;
 8003d56:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <ihex_parser+0x2c4>)
        printf("Set Linear Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003d58:	0409      	lsls	r1, r1, #16
                ex_segment_addr_mode = false;
 8003d5a:	7010      	strb	r0, [r2, #0]
        printf("Set Linear Address:%08"PRIX32"\n", TRANSFORM_ADDR(address_hi, 0x0000));
 8003d5c:	4813      	ldr	r0, [pc, #76]	@ (8003dac <ihex_parser+0x2e4>)
 8003d5e:	f00b fcd7 	bl	800f710 <iprintf>
            if (record_type == 0 && callback_fp != 0)
 8003d62:	f898 2000 	ldrb.w	r2, [r8]
        break;
 8003d66:	e72e      	b.n	8003bc6 <ihex_parser+0xfe>
 8003d68:	20000603 	.word	0x20000603
 8003d6c:	200004f5 	.word	0x200004f5
 8003d70:	20000602 	.word	0x20000602
 8003d74:	200004fc 	.word	0x200004fc
 8003d78:	200005fb 	.word	0x200005fb
 8003d7c:	20000600 	.word	0x20000600
 8003d80:	200004f8 	.word	0x200004f8
 8003d84:	200004f6 	.word	0x200004f6
 8003d88:	200005fe 	.word	0x200005fe
 8003d8c:	200005fc 	.word	0x200005fc
 8003d90:	08011484 	.word	0x08011484
 8003d94:	200004f0 	.word	0x200004f0
 8003d98:	080114e8 	.word	0x080114e8
 8003d9c:	08011508 	.word	0x08011508
 8003da0:	080114e4 	.word	0x080114e4
 8003da4:	080114c4 	.word	0x080114c4
 8003da8:	080114dc 	.word	0x080114dc
 8003dac:	080114a8 	.word	0x080114a8
 8003db0:	200004f4 	.word	0x200004f4
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003db4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003db8:	e716      	b.n	8003be8 <ihex_parser+0x120>
        uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003dba:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003dbe:	e7a7      	b.n	8003d10 <ihex_parser+0x248>
            return true;
 8003dc0:	2001      	movs	r0, #1
}
 8003dc2:	4770      	bx	lr
            byte_count = (byte_count << 4) | hc;
 8003dc4:	4804      	ldr	r0, [pc, #16]	@ (8003dd8 <ihex_parser+0x310>)
 8003dc6:	7802      	ldrb	r2, [r0, #0]
            ++state;
 8003dc8:	f103 0801 	add.w	r8, r3, #1
            byte_count = (byte_count << 4) | hc;
 8003dcc:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
            ++state;
 8003dd0:	f886 8000 	strb.w	r8, [r6]
            byte_count = (byte_count << 4) | hc;
 8003dd4:	7002      	strb	r2, [r0, #0]
            break;
 8003dd6:	e6a3      	b.n	8003b20 <ihex_parser+0x58>
 8003dd8:	20000602 	.word	0x20000602

08003ddc <LED_Handler>:
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
}

// SysTick 인터럽트 핸들러
void LED_Handler(void)
{
 8003ddc:	b570      	push	{r4, r5, r6, lr}
    static uint32_t counter = 0;

    counter += SYS_TICK_PERIOD_MS;
 8003dde:	4c49      	ldr	r4, [pc, #292]	@ (8003f04 <LED_Handler+0x128>)
    static uint8_t step = 0;  // LED 순차적 제어를 위한 단계 변수


    switch (currentState) {
 8003de0:	4a49      	ldr	r2, [pc, #292]	@ (8003f08 <LED_Handler+0x12c>)
    counter += SYS_TICK_PERIOD_MS;
 8003de2:	6823      	ldr	r3, [r4, #0]
    switch (currentState) {
 8003de4:	7812      	ldrb	r2, [r2, #0]
    counter += SYS_TICK_PERIOD_MS;
 8003de6:	3301      	adds	r3, #1
 8003de8:	6023      	str	r3, [r4, #0]
    switch (currentState) {
 8003dea:	2a03      	cmp	r2, #3
 8003dec:	d83b      	bhi.n	8003e66 <LED_Handler+0x8a>
 8003dee:	e8df f002 	tbb	[pc, r2]
 8003df2:	242f      	.short	0x242f
 8003df4:	0213      	.short	0x0213
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003df6:	4845      	ldr	r0, [pc, #276]	@ (8003f0c <LED_Handler+0x130>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	f001 f99a 	bl	8005134 <HAL_GPIO_WritePin>
 8003e00:	4842      	ldr	r0, [pc, #264]	@ (8003f0c <LED_Handler+0x130>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	2108      	movs	r1, #8
 8003e06:	f001 f995 	bl	8005134 <HAL_GPIO_WritePin>
          LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
            break;
        default:
            break;
    }
}
 8003e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003e0e:	483f      	ldr	r0, [pc, #252]	@ (8003f0c <LED_Handler+0x130>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	2110      	movs	r1, #16
 8003e14:	f001 b98e 	b.w	8005134 <HAL_GPIO_WritePin>
 8003e18:	483c      	ldr	r0, [pc, #240]	@ (8003f0c <LED_Handler+0x130>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	f001 f989 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003e22:	483a      	ldr	r0, [pc, #232]	@ (8003f0c <LED_Handler+0x130>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	2108      	movs	r1, #8
 8003e28:	f001 f984 	bl	8005134 <HAL_GPIO_WritePin>
}
 8003e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003e30:	4836      	ldr	r0, [pc, #216]	@ (8003f0c <LED_Handler+0x130>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	2110      	movs	r1, #16
 8003e36:	f001 b97d 	b.w	8005134 <HAL_GPIO_WritePin>
        case TARGET_LED_STAT_PROGRAMMING:
 8003e3a:	4935      	ldr	r1, [pc, #212]	@ (8003f10 <LED_Handler+0x134>)
            if (counter % 100 == 0) { // Fast toggle rate
 8003e3c:	4a35      	ldr	r2, [pc, #212]	@ (8003f14 <LED_Handler+0x138>)
        case TARGET_LED_STAT_PROGRAMMING:
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
            if (counter % 100 == 0) { // Fast toggle rate
 8003e42:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003e46:	d20f      	bcs.n	8003e68 <LED_Handler+0x8c>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003e48:	4830      	ldr	r0, [pc, #192]	@ (8003f0c <LED_Handler+0x130>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	e7eb      	b.n	8003e28 <LED_Handler+0x4c>
            if (counter >= LED_TOGGLE_INTERVAL && step == 0) {
 8003e50:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e52:	d908      	bls.n	8003e66 <LED_Handler+0x8a>
 8003e54:	4e30      	ldr	r6, [pc, #192]	@ (8003f18 <LED_Handler+0x13c>)
 8003e56:	7835      	ldrb	r5, [r6, #0]
 8003e58:	b1f5      	cbz	r5, 8003e98 <LED_Handler+0xbc>
            if (counter >= LED_TOGGLE_INTERVAL && step == 1) {
 8003e5a:	2d01      	cmp	r5, #1
 8003e5c:	d045      	beq.n	8003eea <LED_Handler+0x10e>
            if (counter >= LED_TOGGLE_INTERVAL && step == 2) {
 8003e5e:	2d02      	cmp	r5, #2
 8003e60:	d02e      	beq.n	8003ec0 <LED_Handler+0xe4>
            if (counter >= LED_TOGGLE_INTERVAL && step == 3) {
 8003e62:	2d03      	cmp	r5, #3
 8003e64:	d005      	beq.n	8003e72 <LED_Handler+0x96>
}
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8003e68:	4828      	ldr	r0, [pc, #160]	@ (8003f0c <LED_Handler+0x130>)
 8003e6a:	2108      	movs	r1, #8
 8003e6c:	f001 f966 	bl	800513c <HAL_GPIO_TogglePin>
}
 8003e70:	e7ea      	b.n	8003e48 <LED_Handler+0x6c>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003e72:	4826      	ldr	r0, [pc, #152]	@ (8003f0c <LED_Handler+0x130>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	2104      	movs	r1, #4
 8003e78:	f001 f95c 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003e7c:	4823      	ldr	r0, [pc, #140]	@ (8003f0c <LED_Handler+0x130>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	2108      	movs	r1, #8
 8003e82:	f001 f957 	bl	8005134 <HAL_GPIO_WritePin>
 8003e86:	4821      	ldr	r0, [pc, #132]	@ (8003f0c <LED_Handler+0x130>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	f001 f952 	bl	8005134 <HAL_GPIO_WritePin>
            	step++;  // 마지막 단계로 진행
 8003e90:	7833      	ldrb	r3, [r6, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	7033      	strb	r3, [r6, #0]
}
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003e98:	481c      	ldr	r0, [pc, #112]	@ (8003f0c <LED_Handler+0x130>)
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	f001 f949 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003ea2:	481a      	ldr	r0, [pc, #104]	@ (8003f0c <LED_Handler+0x130>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	f001 f944 	bl	8005134 <HAL_GPIO_WritePin>
 8003eac:	4817      	ldr	r0, [pc, #92]	@ (8003f0c <LED_Handler+0x130>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2110      	movs	r1, #16
 8003eb2:	f001 f93f 	bl	8005134 <HAL_GPIO_WritePin>
            	step++;
 8003eb6:	7833      	ldrb	r3, [r6, #0]
            	counter = 0;  // 카운터 초기화
 8003eb8:	6025      	str	r5, [r4, #0]
            	step++;
 8003eba:	3301      	adds	r3, #1
 8003ebc:	7033      	strb	r3, [r6, #0]
}
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003ec0:	4812      	ldr	r0, [pc, #72]	@ (8003f0c <LED_Handler+0x130>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	f001 f935 	bl	8005134 <HAL_GPIO_WritePin>
 8003eca:	4810      	ldr	r0, [pc, #64]	@ (8003f0c <LED_Handler+0x130>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2108      	movs	r1, #8
 8003ed0:	f001 f930 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003ed4:	480d      	ldr	r0, [pc, #52]	@ (8003f0c <LED_Handler+0x130>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2110      	movs	r1, #16
 8003eda:	f001 f92b 	bl	8005134 <HAL_GPIO_WritePin>
            	step++;
 8003ede:	7833      	ldrb	r3, [r6, #0]
 8003ee0:	3301      	adds	r3, #1
            	counter = 0;
 8003ee2:	2200      	movs	r2, #0
            	step++;
 8003ee4:	7033      	strb	r3, [r6, #0]
            	counter = 0;
 8003ee6:	6022      	str	r2, [r4, #0]
}
 8003ee8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003eea:	4808      	ldr	r0, [pc, #32]	@ (8003f0c <LED_Handler+0x130>)
 8003eec:	462a      	mov	r2, r5
 8003eee:	2104      	movs	r1, #4
 8003ef0:	f001 f920 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003ef4:	4805      	ldr	r0, [pc, #20]	@ (8003f0c <LED_Handler+0x130>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2108      	movs	r1, #8
 8003efa:	f001 f91b 	bl	8005134 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003efe:	4803      	ldr	r0, [pc, #12]	@ (8003f0c <LED_Handler+0x130>)
 8003f00:	462a      	mov	r2, r5
 8003f02:	e7e9      	b.n	8003ed8 <LED_Handler+0xfc>
 8003f04:	20000608 	.word	0x20000608
 8003f08:	2000060c 	.word	0x2000060c
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	c28f5c29 	.word	0xc28f5c29
 8003f14:	028f5c28 	.word	0x028f5c28
 8003f18:	20000604 	.word	0x20000604

08003f1c <LED_SetState>:

void LED_SetState(LedStatus status)
{
	currentState = status;
 8003f1c:	4b01      	ldr	r3, [pc, #4]	@ (8003f24 <LED_SetState+0x8>)
 8003f1e:	7018      	strb	r0, [r3, #0]
}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000060c 	.word	0x2000060c

08003f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error_Handle()\n");
 8003f2a:	4802      	ldr	r0, [pc, #8]	@ (8003f34 <Error_Handler+0xc>)
 8003f2c:	f00b fc60 	bl	800f7f0 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f30:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <Error_Handler+0xa>
 8003f34:	08011520 	.word	0x08011520

08003f38 <SystemClock_Config>:
{
 8003f38:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3a:	2300      	movs	r3, #0
{
 8003f3c:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8003f42:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f46:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003f4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4921      	ldr	r1, [pc, #132]	@ (8003fd4 <SystemClock_Config+0x9c>)
 8003f50:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f52:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f56:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8003f5c:	6408      	str	r0, [r1, #64]	@ 0x40
 8003f5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f60:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8003f64:	9101      	str	r1, [sp, #4]
 8003f66:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f82:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f86:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f8c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f8e:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f92:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f94:	2105      	movs	r1, #5
 8003f96:	2002      	movs	r0, #2
 8003f98:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f9c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 120;
 8003f9e:	2378      	movs	r3, #120	@ 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fa0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fa2:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8003fa4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fa6:	f002 fa73 	bl	8006490 <HAL_RCC_OscConfig>
 8003faa:	b988      	cbnz	r0, 8003fd0 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fac:	220f      	movs	r2, #15
 8003fae:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fb0:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fb4:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003fbc:	a803      	add	r0, sp, #12
 8003fbe:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fc0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fc4:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003fc6:	f002 fc79 	bl	80068bc <HAL_RCC_ClockConfig>
 8003fca:	b908      	cbnz	r0, 8003fd0 <SystemClock_Config+0x98>
}
 8003fcc:	b015      	add	sp, #84	@ 0x54
 8003fce:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003fd0:	f7ff ffaa 	bl	8003f28 <Error_Handler>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40007000 	.word	0x40007000

08003fdc <main>:
{
 8003fdc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fde:	2400      	movs	r4, #0
{
 8003fe0:	b0a4      	sub	sp, #144	@ 0x90
  HAL_Init();
 8003fe2:	f000 fcaf 	bl	8004944 <HAL_Init>
  SystemClock_Config();
 8003fe6:	f7ff ffa7 	bl	8003f38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fea:	e9cd 441c 	strd	r4, r4, [sp, #112]	@ 0x70
 8003fee:	e9cd 441e 	strd	r4, r4, [sp, #120]	@ 0x78
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff2:	4dc0      	ldr	r5, [pc, #768]	@ (80042f4 <main+0x318>)
 8003ff4:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff6:	9420      	str	r4, [sp, #128]	@ 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8003ffa:	48bf      	ldr	r0, [pc, #764]	@ (80042f8 <main+0x31c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	632b      	str	r3, [r5, #48]	@ 0x30
 8004002:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	9302      	str	r3, [sp, #8]
 800400a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800400c:	9403      	str	r4, [sp, #12]
 800400e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004014:	632b      	str	r3, [r5, #48]	@ 0x30
 8004016:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004020:	9404      	str	r4, [sp, #16]
 8004022:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	632b      	str	r3, [r5, #48]	@ 0x30
 800402a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004034:	9405      	str	r4, [sp, #20]
 8004036:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	632b      	str	r3, [r5, #48]	@ 0x30
 800403e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004048:	9406      	str	r4, [sp, #24]
 800404a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	632b      	str	r3, [r5, #48]	@ 0x30
 8004052:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	9306      	str	r3, [sp, #24]
 800405a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800405c:	9407      	str	r4, [sp, #28]
 800405e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	632b      	str	r3, [r5, #48]	@ 0x30
 8004066:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004068:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 800406c:	211c      	movs	r1, #28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800406e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8004070:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004072:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8004074:	f001 f85e 	bl	8005134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin, GPIO_PIN_RESET);
 8004078:	48a0      	ldr	r0, [pc, #640]	@ (80042fc <main+0x320>)
 800407a:	4622      	mov	r2, r4
 800407c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004080:	f001 f858 	bl	8005134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_VDD_EN_GPIO_Port, USB_VDD_EN_Pin, GPIO_PIN_RESET);
 8004084:	489e      	ldr	r0, [pc, #632]	@ (8004300 <main+0x324>)
 8004086:	4622      	mov	r2, r4
 8004088:	2120      	movs	r1, #32
 800408a:	f001 f853 	bl	8005134 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SWD_CLK_Pin|SWD_IO_Pin, GPIO_PIN_SET);
 800408e:	2201      	movs	r2, #1
 8004090:	489b      	ldr	r0, [pc, #620]	@ (8004300 <main+0x324>)
 8004092:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8004096:	f001 f84d 	bl	8005134 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800409c:	231c      	movs	r3, #28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800409e:	4896      	ldr	r0, [pc, #600]	@ (80042f8 <main+0x31c>)
 80040a0:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a2:	e9cd 361c 	strd	r3, r6, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a6:	e9cd 441e 	strd	r4, r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040aa:	f000 ff05 	bl	8004eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 80040ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	4892      	ldr	r0, [pc, #584]	@ (80042fc <main+0x320>)
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 80040b4:	931c      	str	r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	e9cd 641d 	strd	r6, r4, [sp, #116]	@ 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	941f      	str	r4, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040be:	f000 fefb 	bl	8004eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 80040c2:	2201      	movs	r2, #1
 80040c4:	2300      	movs	r3, #0
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 80040c6:	488e      	ldr	r0, [pc, #568]	@ (8004300 <main+0x324>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	941e      	str	r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 80040ca:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 80040cc:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 80040d0:	f000 fef2 	bl	8004eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040d4:	2280      	movs	r2, #128	@ 0x80
 80040d6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040d8:	488a      	ldr	r0, [pc, #552]	@ (8004304 <main+0x328>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	941e      	str	r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040dc:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040de:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
  GPIO_InitStruct.Pin = USB_VDD_EN_Pin;
 80040e2:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e4:	f000 fee8 	bl	8004eb8 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_VDD_EN_GPIO_Port, &GPIO_InitStruct);
 80040e8:	4885      	ldr	r0, [pc, #532]	@ (8004300 <main+0x324>)
 80040ea:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ec:	e9cd 761c 	strd	r7, r6, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	e9cd 441e 	strd	r4, r4, [sp, #120]	@ 0x78
  HAL_GPIO_Init(USB_VDD_EN_GPIO_Port, &GPIO_InitStruct);
 80040f4:	f000 fee0 	bl	8004eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e9cd 431e 	strd	r4, r3, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040fe:	4880      	ldr	r0, [pc, #512]	@ (8004300 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004100:	961d      	str	r6, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pin = SWD_CLK_Pin|SWD_IO_Pin;
 8004102:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	a91c      	add	r1, sp, #112	@ 0x70
  GPIO_InitStruct.Pin = SWD_CLK_Pin|SWD_IO_Pin;
 8004108:	931c      	str	r3, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410a:	f000 fed5 	bl	8004eb8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800410e:	9401      	str	r4, [sp, #4]
 8004110:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004112:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004116:	632b      	str	r3, [r5, #48]	@ 0x30
 8004118:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  htim1.Instance = TIM1;
 800411a:	4d7b      	ldr	r5, [pc, #492]	@ (8004308 <main+0x32c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800411c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8004120:	2106      	movs	r1, #6
 8004122:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004124:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8004126:	203b      	movs	r0, #59	@ 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004128:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800412a:	f000 fc5b 	bl	80049e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800412e:	203b      	movs	r0, #59	@ 0x3b
 8004130:	f000 fc94 	bl	8004a5c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8004134:	4622      	mov	r2, r4
 8004136:	2106      	movs	r1, #6
 8004138:	2045      	movs	r0, #69	@ 0x45
 800413a:	f000 fc53 	bl	80049e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800413e:	2045      	movs	r0, #69	@ 0x45
 8004140:	f000 fc8c 	bl	8004a5c <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8004144:	4b71      	ldr	r3, [pc, #452]	@ (800430c <main+0x330>)
 8004146:	4972      	ldr	r1, [pc, #456]	@ (8004310 <main+0x334>)
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004148:	611c      	str	r4, [r3, #16]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800414a:	e9c3 1400 	strd	r1, r4, [r3]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800414e:	463a      	mov	r2, r7
 8004150:	4621      	mov	r1, r4
 8004152:	a81c      	add	r0, sp, #112	@ 0x70
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004154:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004158:	e9c3 4405 	strd	r4, r4, [r3, #20]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415c:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004160:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 8004164:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
 8004168:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800416c:	9410      	str	r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416e:	940a      	str	r4, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004170:	9414      	str	r4, [sp, #80]	@ 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004172:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004174:	940b      	str	r4, [sp, #44]	@ 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004176:	f00b fca1 	bl	800fabc <memset>
  htim1.Init.Prescaler = 120-1;
 800417a:	4966      	ldr	r1, [pc, #408]	@ (8004314 <main+0x338>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 120-1;
 800417e:	2377      	movs	r3, #119	@ 0x77
 8004180:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004184:	4628      	mov	r0, r5
  htim1.Init.Period = 1000;
 8004186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  htim1.Init.RepetitionCounter = 0;
 800418a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800418e:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 1000;
 8004190:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004192:	f003 fd19 	bl	8007bc8 <HAL_TIM_Base_Init>
 8004196:	2800      	cmp	r0, #0
 8004198:	f040 80db 	bne.w	8004352 <main+0x376>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419c:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041a0:	a910      	add	r1, sp, #64	@ 0x40
 80041a2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a4:	9610      	str	r6, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041a6:	f004 f831 	bl	800820c <HAL_TIM_ConfigClockSource>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f040 80d1 	bne.w	8004352 <main+0x376>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041b0:	4628      	mov	r0, r5
 80041b2:	f003 fdd9 	bl	8007d68 <HAL_TIM_PWM_Init>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f040 80cb 	bne.w	8004352 <main+0x376>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041bc:	f04f 0800 	mov.w	r8, #0
 80041c0:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041c4:	a90a      	add	r1, sp, #40	@ 0x28
 80041c6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041cc:	f004 f96e 	bl	80084ac <HAL_TIMEx_MasterConfigSynchronization>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f040 80be 	bne.w	8004352 <main+0x376>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d6:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041da:	9017      	str	r0, [sp, #92]	@ 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041dc:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041de:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041e0:	a914      	add	r1, sp, #80	@ 0x50
 80041e2:	2208      	movs	r2, #8
 80041e4:	4628      	mov	r0, r5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e6:	e9cd 8918 	strd	r8, r9, [sp, #96]	@ 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ea:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041ec:	f003 ff0a 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	f040 80ae 	bne.w	8004352 <main+0x376>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041f6:	e9cd 001c 	strd	r0, r0, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.DeadTime = 0;
 80041fa:	e9cd 001e 	strd	r0, r0, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041fe:	9023      	str	r0, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004206:	a91c      	add	r1, sp, #112	@ 0x70
 8004208:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800420a:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800420e:	f004 f98d 	bl	800852c <HAL_TIMEx_ConfigBreakDeadTime>
 8004212:	4604      	mov	r4, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	f040 809c 	bne.w	8004352 <main+0x376>
  HAL_TIM_MspPostInit(&htim1);
 800421a:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 800421c:	4d3e      	ldr	r5, [pc, #248]	@ (8004318 <main+0x33c>)
  HAL_TIM_MspPostInit(&htim1);
 800421e:	f000 fa27 	bl	8004670 <HAL_TIM_MspPostInit>
  htim2.Init.Prescaler = 60-1;
 8004222:	233b      	movs	r3, #59	@ 0x3b
 8004224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004228:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800422c:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 800422e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004232:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8004236:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800423c:	9409      	str	r4, [sp, #36]	@ 0x24
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800423e:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004240:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004242:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 65535;
 8004244:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004246:	f003 fcbf 	bl	8007bc8 <HAL_TIM_Base_Init>
 800424a:	2800      	cmp	r0, #0
 800424c:	f040 8081 	bne.w	8004352 <main+0x376>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004250:	a90c      	add	r1, sp, #48	@ 0x30
 8004252:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004254:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004256:	f003 ffd9 	bl	800820c <HAL_TIM_ConfigClockSource>
 800425a:	2800      	cmp	r0, #0
 800425c:	d179      	bne.n	8004352 <main+0x376>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800425e:	a908      	add	r1, sp, #32
 8004260:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	e9cd 8908 	strd	r8, r9, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004266:	f004 f921 	bl	80084ac <HAL_TIMEx_MasterConfigSynchronization>
 800426a:	4603      	mov	r3, r0
 800426c:	2800      	cmp	r0, #0
 800426e:	d170      	bne.n	8004352 <main+0x376>
  hspi1.Instance = SPI1;
 8004270:	482a      	ldr	r0, [pc, #168]	@ (800431c <main+0x340>)
 8004272:	492b      	ldr	r1, [pc, #172]	@ (8004320 <main+0x344>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004278:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800427c:	f44f 7400 	mov.w	r4, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004280:	2110      	movs	r1, #16
  hspi1.Init.CRCPolynomial = 10;
 8004282:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004284:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004288:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800428c:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004290:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 8004294:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004298:	f003 fc34 	bl	8007b04 <HAL_SPI_Init>
 800429c:	2800      	cmp	r0, #0
 800429e:	d158      	bne.n	8004352 <main+0x376>
  huart1.Instance = USART1;
 80042a0:	4820      	ldr	r0, [pc, #128]	@ (8004324 <main+0x348>)
 80042a2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042a6:	2300      	movs	r3, #0
  huart1.Instance = USART1;
 80042a8:	f504 3487 	add.w	r4, r4, #69120	@ 0x10e00
  huart1.Init.BaudRate = 921600;
 80042ac:	f44f 2161 	mov.w	r1, #921600	@ 0xe1000
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042b0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 80042b2:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042ba:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042be:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042c2:	f004 f961 	bl	8008588 <HAL_UART_Init>
 80042c6:	4604      	mov	r4, r0
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d142      	bne.n	8004352 <main+0x376>
  MX_FATFS_Init();
 80042cc:	f006 fb02 	bl	800a8d4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80042d0:	f00a fe52 	bl	800ef78 <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 80042d4:	4814      	ldr	r0, [pc, #80]	@ (8004328 <main+0x34c>)
 80042d6:	4915      	ldr	r1, [pc, #84]	@ (800432c <main+0x350>)
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042d8:	6184      	str	r4, [r0, #24]
  hrtc.Init.AsynchPrediv = 127;
 80042da:	227f      	movs	r2, #127	@ 0x7f
  hrtc.Init.SynchPrediv = 7874;
 80042dc:	f641 63c2 	movw	r3, #7874	@ 0x1ec2
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042e0:	e9c0 1400 	strd	r1, r4, [r0]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042e4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hrtc.Init.SynchPrediv = 7874;
 80042e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042ec:	f002 fcd0 	bl	8006c90 <HAL_RTC_Init>
 80042f0:	4604      	mov	r4, r0
 80042f2:	e01d      	b.n	8004330 <main+0x354>
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	200006a0 	.word	0x200006a0
 800430c:	20000800 	.word	0x20000800
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40010000 	.word	0x40010000
 8004318:	20000658 	.word	0x20000658
 800431c:	200006e8 	.word	0x200006e8
 8004320:	40013000 	.word	0x40013000
 8004324:	20000610 	.word	0x20000610
 8004328:	20000888 	.word	0x20000888
 800432c:	40002800 	.word	0x40002800
 8004330:	b978      	cbnz	r0, 8004352 <main+0x376>
	HAL_TIM_Base_Start(&htim2);
 8004332:	4628      	mov	r0, r5
 8004334:	f003 fce0 	bl	8007cf8 <HAL_TIM_Base_Start>
	LED_SetState(TARGET_LED_STAT_BOOT);
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff fdef 	bl	8003f1c <LED_SetState>
	Buzzer_SetState(BUZZER_BOOT);
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff fb3e 	bl	80039c0 <Buzzer_SetState>
	log_message("ST-Flash Boot OK! v%d\n", ST_FLASHER_VERSION);
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <main+0x37c>)
 8004346:	4805      	ldr	r0, [pc, #20]	@ (800435c <main+0x380>)
 8004348:	f7fe fbb0 	bl	8002aac <log_message>
  	Target_MainLoop();
 800434c:	f7fe ff96 	bl	800327c <Target_MainLoop>
  while (1)
 8004350:	e7fc      	b.n	800434c <main+0x370>
    Error_Handler();
 8004352:	f7ff fde9 	bl	8003f28 <Error_Handler>
 8004356:	bf00      	nop
 8004358:	0134d9ac 	.word	0x0134d9ac
 800435c:	08011530 	.word	0x08011530

08004360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004360:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <HAL_MspInit+0x34>)
 8004364:	2100      	movs	r1, #0
 8004366:	9100      	str	r1, [sp, #0]
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004372:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004376:	9200      	str	r2, [sp, #0]
 8004378:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	9101      	str	r1, [sp, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800437e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438e:	b002      	add	sp, #8
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	b08c      	sub	sp, #48	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800439e:	2230      	movs	r2, #48	@ 0x30
 80043a0:	2100      	movs	r1, #0
 80043a2:	4668      	mov	r0, sp
 80043a4:	f00b fb8a 	bl	800fabc <memset>
  if(hrtc->Instance==RTC)
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_RTC_MspInit+0x40>)
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80043b0:	b00c      	add	sp, #48	@ 0x30
 80043b2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 80043b4:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RTC_MspInit+0x44>)
 80043b6:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043b8:	2220      	movs	r2, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ba:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043bc:	9200      	str	r2, [sp, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043be:	f002 fb41 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 80043c2:	b928      	cbnz	r0, 80043d0 <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_RTC_MspInit+0x48>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 80043cc:	b00c      	add	sp, #48	@ 0x30
 80043ce:	bd10      	pop	{r4, pc}
      Error_Handler();
 80043d0:	f7ff fdaa 	bl	8003f28 <Error_Handler>
 80043d4:	e7f6      	b.n	80043c4 <HAL_RTC_MspInit+0x2c>
 80043d6:	bf00      	nop
 80043d8:	40002800 	.word	0x40002800
 80043dc:	00080300 	.word	0x00080300
 80043e0:	42470000 	.word	0x42470000

080043e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80043e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDIO)
 80043e8:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <HAL_SD_MspInit+0x16c>)
 80043ea:	6802      	ldr	r2, [r0, #0]
{
 80043ec:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ee:	2400      	movs	r4, #0
  if(hsd->Instance==SDIO)
 80043f0:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80043f6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80043fa:	9408      	str	r4, [sp, #32]
  if(hsd->Instance==SDIO)
 80043fc:	d002      	beq.n	8004404 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80043fe:	b00b      	add	sp, #44	@ 0x2c
 8004400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004404:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004408:	9401      	str	r4, [sp, #4]
 800440a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800440c:	4e51      	ldr	r6, [pc, #324]	@ (8004554 <HAL_SD_MspInit+0x170>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800440e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
 8004414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004416:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	9402      	str	r4, [sp, #8]
 8004420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004422:	f042 0204 	orr.w	r2, r2, #4
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
 8004428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442a:	f002 0204 	and.w	r2, r2, #4
 800442e:	9202      	str	r2, [sp, #8]
 8004430:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004432:	9403      	str	r4, [sp, #12]
 8004434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
 800443c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004444:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004448:	270c      	movs	r7, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800444a:	2302      	movs	r3, #2
 800444c:	f04f 0801 	mov.w	r8, #1
 8004450:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004454:	a904      	add	r1, sp, #16
 8004456:	4605      	mov	r5, r0
 8004458:	483f      	ldr	r0, [pc, #252]	@ (8004558 <HAL_SD_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800445a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800445c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004460:	e9cd 8906 	strd	r8, r9, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004464:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004466:	f000 fd27 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800446a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800446e:	2302      	movs	r3, #2
 8004470:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004474:	4838      	ldr	r0, [pc, #224]	@ (8004558 <HAL_SD_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004476:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004478:	2200      	movs	r2, #0
 800447a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800447e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004482:	f000 fd19 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004486:	2204      	movs	r2, #4
 8004488:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800448a:	4834      	ldr	r0, [pc, #208]	@ (800455c <HAL_SD_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800448c:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800448e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004494:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004498:	f000 fd0e 	bl	8004eb8 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <HAL_SD_MspInit+0x17c>)
 800449e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044a2:	e9c6 2300 	strd	r2, r3, [r6]
 80044a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ae:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80044b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044b6:	2320      	movs	r3, #32
 80044b8:	e9c6 2306 	strd	r2, r3, [r6, #24]
 80044bc:	2304      	movs	r3, #4
 80044be:	e9c6 4308 	strd	r4, r3, [r6, #32]
 80044c2:	2103      	movs	r1, #3
 80044c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80044cc:	4630      	mov	r0, r6
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80044ce:	e9c6 4402 	strd	r4, r4, [r6, #8]
 80044d2:	e9c6 120a 	strd	r1, r2, [r6, #40]	@ 0x28
 80044d6:	6333      	str	r3, [r6, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80044d8:	f000 fae8 	bl	8004aac <HAL_DMA_Init>
 80044dc:	bb90      	cbnz	r0, 8004544 <HAL_SD_MspInit+0x160>
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80044de:	4c21      	ldr	r4, [pc, #132]	@ (8004564 <HAL_SD_MspInit+0x180>)
 80044e0:	4921      	ldr	r1, [pc, #132]	@ (8004568 <HAL_SD_MspInit+0x184>)
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80044e2:	642e      	str	r6, [r5, #64]	@ 0x40
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80044e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80044e8:	2300      	movs	r3, #0
 80044ea:	e9c4 1200 	strd	r1, r2, [r4]
 80044ee:	2140      	movs	r1, #64	@ 0x40
 80044f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044f4:	e9c4 1302 	strd	r1, r3, [r4, #8]
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004502:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8004506:	2220      	movs	r2, #32
 8004508:	e9c4 2307 	strd	r2, r3, [r4, #28]
 800450c:	2104      	movs	r1, #4
 800450e:	2303      	movs	r3, #3
 8004510:	e9c4 1309 	strd	r1, r3, [r4, #36]	@ 0x24
 8004514:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004518:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800451c:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800451e:	e9c4 230b 	strd	r2, r3, [r4, #44]	@ 0x2c
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004522:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004524:	f000 fac2 	bl	8004aac <HAL_DMA_Init>
 8004528:	b978      	cbnz	r0, 800454a <HAL_SD_MspInit+0x166>
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2105      	movs	r1, #5
 800452e:	2031      	movs	r0, #49	@ 0x31
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004530:	63ec      	str	r4, [r5, #60]	@ 0x3c
 8004532:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8004534:	f000 fa56 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004538:	2031      	movs	r0, #49	@ 0x31
 800453a:	f000 fa8f 	bl	8004a5c <HAL_NVIC_EnableIRQ>
}
 800453e:	b00b      	add	sp, #44	@ 0x2c
 8004540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8004544:	f7ff fcf0 	bl	8003f28 <Error_Handler>
 8004548:	e7c9      	b.n	80044de <HAL_SD_MspInit+0xfa>
      Error_Handler();
 800454a:	f7ff fced 	bl	8003f28 <Error_Handler>
 800454e:	e7ec      	b.n	800452a <HAL_SD_MspInit+0x146>
 8004550:	40012c00 	.word	0x40012c00
 8004554:	200007a0 	.word	0x200007a0
 8004558:	40020800 	.word	0x40020800
 800455c:	40020c00 	.word	0x40020c00
 8004560:	40026458 	.word	0x40026458
 8004564:	20000740 	.word	0x20000740
 8004568:	400264a0 	.word	0x400264a0

0800456c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800456c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800456e:	4a1e      	ldr	r2, [pc, #120]	@ (80045e8 <HAL_SPI_MspInit+0x7c>)
 8004570:	6801      	ldr	r1, [r0, #0]
{
 8004572:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8004576:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800457c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004580:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 8004582:	d001      	beq.n	8004588 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004584:	b009      	add	sp, #36	@ 0x24
 8004586:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004588:	f502 3284 	add.w	r2, r2, #67584	@ 0x10800
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004590:	4816      	ldr	r0, [pc, #88]	@ (80045ec <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004592:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8004596:	6451      	str	r1, [r2, #68]	@ 0x44
 8004598:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800459a:	f401 5180 	and.w	r1, r1, #4096	@ 0x1000
 800459e:	9100      	str	r1, [sp, #0]
 80045a0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	2503      	movs	r5, #3
 80045b6:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80045ba:	22a0      	movs	r2, #160	@ 0xa0
 80045bc:	2302      	movs	r3, #2
 80045be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c2:	e9cd 5405 	strd	r5, r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f000 fc76 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045cc:	2240      	movs	r2, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ce:	2302      	movs	r3, #2
 80045d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d4:	4805      	ldr	r0, [pc, #20]	@ (80045ec <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045d6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045da:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045dc:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e0:	f000 fc6a 	bl	8004eb8 <HAL_GPIO_Init>
}
 80045e4:	b009      	add	sp, #36	@ 0x24
 80045e6:	bd30      	pop	{r4, r5, pc}
 80045e8:	40013000 	.word	0x40013000
 80045ec:	40020000 	.word	0x40020000

080045f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f0:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80045f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <HAL_TIM_Base_MspInit+0x74>)
 80045f4:	6803      	ldr	r3, [r0, #0]
 80045f6:	4293      	cmp	r3, r2
{
 80045f8:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80045fa:	d005      	beq.n	8004608 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004600:	d018      	beq.n	8004634 <HAL_TIM_Base_MspInit+0x44>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004602:	b003      	add	sp, #12
 8004604:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004608:	2200      	movs	r2, #0
 800460a:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <HAL_TIM_Base_MspInit+0x78>)
 800460c:	9200      	str	r2, [sp, #0]
 800460e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004610:	f041 0101 	orr.w	r1, r1, #1
 8004614:	6459      	str	r1, [r3, #68]	@ 0x44
 8004616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800461e:	2019      	movs	r0, #25
 8004620:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004622:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004624:	f000 f9de 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004628:	2019      	movs	r0, #25
}
 800462a:	b003      	add	sp, #12
 800462c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004630:	f000 ba14 	b.w	8004a5c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004634:	2200      	movs	r2, #0
 8004636:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800463e:	f041 0101 	orr.w	r1, r1, #1
 8004642:	6419      	str	r1, [r3, #64]	@ 0x40
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800464c:	201c      	movs	r0, #28
 800464e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004650:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004652:	f000 f9c7 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004656:	201c      	movs	r0, #28
}
 8004658:	b003      	add	sp, #12
 800465a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800465e:	f000 b9fd 	b.w	8004a5c <HAL_NVIC_EnableIRQ>
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40023800 	.word	0x40023800
 800466c:	00000000 	.word	0x00000000

08004670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004670:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <HAL_TIM_MspPostInit+0x60>)
 8004674:	6801      	ldr	r1, [r0, #0]
{
 8004676:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004678:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800467a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004680:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004684:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004686:	d002      	beq.n	800468e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004688:	b009      	add	sp, #36	@ 0x24
 800468a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800468e:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004696:	f043 0310 	orr.w	r3, r3, #16
 800469a:	6313      	str	r3, [r2, #48]	@ 0x30
 800469c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = BEEP_Pin;
 800469e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80046c8 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80046aa:	480a      	ldr	r0, [pc, #40]	@ (80046d4 <HAL_TIM_MspPostInit+0x64>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ac:	2203      	movs	r2, #3
 80046ae:	2301      	movs	r3, #1
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80046b0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BEEP_Pin;
 80046b2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b6:	9205      	str	r2, [sp, #20]
 80046b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80046ba:	f000 fbfd 	bl	8004eb8 <HAL_GPIO_Init>
}
 80046be:	b009      	add	sp, #36	@ 0x24
 80046c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046c4:	f3af 8000 	nop.w
 80046c8:	00002000 	.word	0x00002000
 80046cc:	00000002 	.word	0x00000002
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40021000 	.word	0x40021000

080046d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046d8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_UART_MspInit+0x78>)
 80046dc:	6802      	ldr	r2, [r0, #0]
{
 80046de:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80046e2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80046e8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80046ec:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80046ee:	d001      	beq.n	80046f4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80046f0:	b009      	add	sp, #36	@ 0x24
 80046f2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80046f4:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80046f8:	9400      	str	r4, [sp, #0]
 80046fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fc:	4815      	ldr	r0, [pc, #84]	@ (8004754 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80046fe:	f042 0210 	orr.w	r2, r2, #16
 8004702:	645a      	str	r2, [r3, #68]	@ 0x44
 8004704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004706:	f002 0210 	and.w	r2, r2, #16
 800470a:	9200      	str	r2, [sp, #0]
 800470c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	9401      	str	r4, [sp, #4]
 8004710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004720:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004724:	2302      	movs	r3, #2
 8004726:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472c:	2307      	movs	r3, #7
 800472e:	2203      	movs	r2, #3
 8004730:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004734:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004736:	f000 fbbf 	bl	8004eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800473a:	4622      	mov	r2, r4
 800473c:	4621      	mov	r1, r4
 800473e:	2025      	movs	r0, #37	@ 0x25
 8004740:	f000 f950 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004744:	2025      	movs	r0, #37	@ 0x25
 8004746:	f000 f989 	bl	8004a5c <HAL_NVIC_EnableIRQ>
}
 800474a:	b009      	add	sp, #36	@ 0x24
 800474c:	bd30      	pop	{r4, r5, pc}
 800474e:	bf00      	nop
 8004750:	40011000 	.word	0x40011000
 8004754:	40020000 	.word	0x40020000

08004758 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004758:	e7fe      	b.n	8004758 <NMI_Handler>
 800475a:	bf00      	nop

0800475c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <HardFault_Handler>
 800475e:	bf00      	nop

08004760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004760:	e7fe      	b.n	8004760 <MemManage_Handler>
 8004762:	bf00      	nop

08004764 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <BusFault_Handler>
 8004766:	bf00      	nop

08004768 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004768:	e7fe      	b.n	8004768 <UsageFault_Handler>
 800476a:	bf00      	nop

0800476c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800477a:	f000 f8fd 	bl	8004978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LED_Handler();
  /* USER CODE END SysTick_IRQn 1 */
}
 800477e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LED_Handler();
 8004782:	f7ff bb2b 	b.w	8003ddc <LED_Handler>
 8004786:	bf00      	nop

08004788 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004788:	4801      	ldr	r0, [pc, #4]	@ (8004790 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800478a:	f003 bdf3 	b.w	8008374 <HAL_TIM_IRQHandler>
 800478e:	bf00      	nop
 8004790:	200006a0 	.word	0x200006a0

08004794 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004794:	4801      	ldr	r0, [pc, #4]	@ (800479c <TIM2_IRQHandler+0x8>)
 8004796:	f003 bded 	b.w	8008374 <HAL_TIM_IRQHandler>
 800479a:	bf00      	nop
 800479c:	20000658 	.word	0x20000658

080047a0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047a0:	4801      	ldr	r0, [pc, #4]	@ (80047a8 <USART1_IRQHandler+0x8>)
 80047a2:	f004 b861 	b.w	8008868 <HAL_UART_IRQHandler>
 80047a6:	bf00      	nop
 80047a8:	20000610 	.word	0x20000610

080047ac <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80047ac:	4801      	ldr	r0, [pc, #4]	@ (80047b4 <SDIO_IRQHandler+0x8>)
 80047ae:	f002 bd9b 	b.w	80072e8 <HAL_SD_IRQHandler>
 80047b2:	bf00      	nop
 80047b4:	20000800 	.word	0x20000800

080047b8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80047b8:	4801      	ldr	r0, [pc, #4]	@ (80047c0 <DMA2_Stream3_IRQHandler+0x8>)
 80047ba:	f000 baa5 	b.w	8004d08 <HAL_DMA_IRQHandler>
 80047be:	bf00      	nop
 80047c0:	200007a0 	.word	0x200007a0

080047c4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80047c4:	4801      	ldr	r0, [pc, #4]	@ (80047cc <OTG_FS_IRQHandler+0x8>)
 80047c6:	f000 beed 	b.w	80055a4 <HAL_PCD_IRQHandler>
 80047ca:	bf00      	nop
 80047cc:	2000128c 	.word	0x2000128c

080047d0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80047d0:	4801      	ldr	r0, [pc, #4]	@ (80047d8 <DMA2_Stream6_IRQHandler+0x8>)
 80047d2:	f000 ba99 	b.w	8004d08 <HAL_DMA_IRQHandler>
 80047d6:	bf00      	nop
 80047d8:	20000740 	.word	0x20000740

080047dc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80047dc:	2001      	movs	r0, #1
 80047de:	4770      	bx	lr

080047e0 <_kill>:

int _kill(int pid, int sig)
{
 80047e0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047e2:	f00b f9b9 	bl	800fb58 <__errno>
 80047e6:	2316      	movs	r3, #22
 80047e8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	bd08      	pop	{r3, pc}

080047f0 <_exit>:

void _exit (int status)
{
 80047f0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80047f2:	f00b f9b1 	bl	800fb58 <__errno>
 80047f6:	2316      	movs	r3, #22
 80047f8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80047fa:	e7fe      	b.n	80047fa <_exit+0xa>

080047fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047fc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fe:	1e16      	subs	r6, r2, #0
 8004800:	dd07      	ble.n	8004812 <_read+0x16>
 8004802:	460c      	mov	r4, r1
 8004804:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004806:	f3af 8000 	nop.w
 800480a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480e:	42a5      	cmp	r5, r4
 8004810:	d1f9      	bne.n	8004806 <_read+0xa>
  }

  return len;
}
 8004812:	4630      	mov	r0, r6
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	bf00      	nop

08004818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004818:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800481a:	1e16      	subs	r6, r2, #0
 800481c:	dd07      	ble.n	800482e <_write+0x16>
 800481e:	460c      	mov	r4, r1
 8004820:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8004822:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004826:	f7fe f931 	bl	8002a8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482a:	42ac      	cmp	r4, r5
 800482c:	d1f9      	bne.n	8004822 <_write+0xa>
  }
  return len;
}
 800482e:	4630      	mov	r0, r6
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	bf00      	nop

08004834 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop

0800483c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800483c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004840:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004842:	2000      	movs	r0, #0
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004848:	2001      	movs	r0, #1
 800484a:	4770      	bx	lr

0800484c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800484c:	2000      	movs	r0, #0
 800484e:	4770      	bx	lr

08004850 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004850:	490c      	ldr	r1, [pc, #48]	@ (8004884 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004852:	4a0d      	ldr	r2, [pc, #52]	@ (8004888 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004854:	680b      	ldr	r3, [r1, #0]
{
 8004856:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004858:	4c0c      	ldr	r4, [pc, #48]	@ (800488c <_sbrk+0x3c>)
 800485a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800485c:	b12b      	cbz	r3, 800486a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800485e:	4418      	add	r0, r3
 8004860:	4290      	cmp	r0, r2
 8004862:	d807      	bhi.n	8004874 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004864:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004866:	4618      	mov	r0, r3
 8004868:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <_sbrk+0x40>)
 800486c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800486e:	4418      	add	r0, r3
 8004870:	4290      	cmp	r0, r2
 8004872:	d9f7      	bls.n	8004864 <_sbrk+0x14>
    errno = ENOMEM;
 8004874:	f00b f970 	bl	800fb58 <__errno>
 8004878:	230c      	movs	r3, #12
 800487a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd10      	pop	{r4, pc}
 8004884:	200008a8 	.word	0x200008a8
 8004888:	20030000 	.word	0x20030000
 800488c:	00002000 	.word	0x00002000
 8004890:	200018c0 	.word	0x200018c0

08004894 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004894:	4a03      	ldr	r2, [pc, #12]	@ (80048a4 <SystemInit+0x10>)
 8004896:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800489a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800489e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80048a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ac:	f7ff fff2 	bl	8004894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048b0:	480c      	ldr	r0, [pc, #48]	@ (80048e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048b2:	490d      	ldr	r1, [pc, #52]	@ (80048e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048b4:	4a0d      	ldr	r2, [pc, #52]	@ (80048ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b8:	e002      	b.n	80048c0 <LoopCopyDataInit>

080048ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048be:	3304      	adds	r3, #4

080048c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048c4:	d3f9      	bcc.n	80048ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048c6:	4a0a      	ldr	r2, [pc, #40]	@ (80048f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048c8:	4c0a      	ldr	r4, [pc, #40]	@ (80048f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048cc:	e001      	b.n	80048d2 <LoopFillZerobss>

080048ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048d0:	3204      	adds	r2, #4

080048d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048d4:	d3fb      	bcc.n	80048ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80048d6:	f00b f945 	bl	800fb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048da:	f7ff fb7f 	bl	8003fdc <main>
  bx  lr    
 80048de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80048e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80048ec:	08011ba0 	.word	0x08011ba0
  ldr r2, =_sbss
 80048f0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80048f4:	200018bc 	.word	0x200018bc

080048f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f8:	e7fe      	b.n	80048f8 <ADC_IRQHandler>
	...

080048fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004938 <HAL_InitTick+0x3c>)
 8004900:	4b0e      	ldr	r3, [pc, #56]	@ (800493c <HAL_InitTick+0x40>)
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
{
 8004906:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800490c:	fbb0 f0f2 	udiv	r0, r0, r2
 8004910:	fbb3 f0f0 	udiv	r0, r3, r0
 8004914:	f000 f8b0 	bl	8004a78 <HAL_SYSTICK_Config>
 8004918:	b908      	cbnz	r0, 800491e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491a:	2d0f      	cmp	r5, #15
 800491c:	d901      	bls.n	8004922 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004924:	4602      	mov	r2, r0
 8004926:	4629      	mov	r1, r5
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	f000 f85a 	bl	80049e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <HAL_InitTick+0x44>)
 8004932:	4620      	mov	r0, r4
 8004934:	601d      	str	r5, [r3, #0]
}
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	2000000c 	.word	0x2000000c
 800493c:	20000008 	.word	0x20000008
 8004940:	20000010 	.word	0x20000010

08004944 <HAL_Init>:
{
 8004944:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <HAL_Init+0x30>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004956:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004960:	2003      	movs	r0, #3
 8004962:	f000 f82d 	bl	80049c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004966:	2000      	movs	r0, #0
 8004968:	f7ff ffc8 	bl	80048fc <HAL_InitTick>
  HAL_MspInit();
 800496c:	f7ff fcf8 	bl	8004360 <HAL_MspInit>
}
 8004970:	2000      	movs	r0, #0
 8004972:	bd08      	pop	{r3, pc}
 8004974:	40023c00 	.word	0x40023c00

08004978 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004978:	4a03      	ldr	r2, [pc, #12]	@ (8004988 <HAL_IncTick+0x10>)
 800497a:	4b04      	ldr	r3, [pc, #16]	@ (800498c <HAL_IncTick+0x14>)
 800497c:	6811      	ldr	r1, [r2, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	440b      	add	r3, r1
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200008ac 	.word	0x200008ac
 800498c:	2000000c 	.word	0x2000000c

08004990 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004990:	4b01      	ldr	r3, [pc, #4]	@ (8004998 <HAL_GetTick+0x8>)
 8004992:	6818      	ldr	r0, [r3, #0]
}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	200008ac 	.word	0x200008ac

0800499c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049a0:	f7ff fff6 	bl	8004990 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049a4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80049a6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80049a8:	d002      	beq.n	80049b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80049aa:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <HAL_Delay+0x20>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049b0:	f7ff ffee 	bl	8004990 <HAL_GetTick>
 80049b4:	1b40      	subs	r0, r0, r5
 80049b6:	42a0      	cmp	r0, r4
 80049b8:	d3fa      	bcc.n	80049b0 <HAL_Delay+0x14>
  {
  }
}
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c0:	4907      	ldr	r1, [pc, #28]	@ (80049e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80049c2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049c6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ce:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049d2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80049da:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <HAL_NVIC_SetPriority+0x70>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ec:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ee:	f1c3 0e07 	rsb	lr, r3, #7
 80049f2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049fa:	bf28      	it	cs
 80049fc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a00:	f1bc 0f06 	cmp.w	ip, #6
 8004a04:	d91c      	bls.n	8004a40 <HAL_NVIC_SetPriority+0x5c>
 8004a06:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a12:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1a:	fa03 f30e 	lsl.w	r3, r3, lr
 8004a1e:	ea21 0303 	bic.w	r3, r1, r3
 8004a22:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a26:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004a2e:	db0a      	blt.n	8004a46 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004a34:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004a38:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a40:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a42:	4694      	mov	ip, r2
 8004a44:	e7e7      	b.n	8004a16 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	4a04      	ldr	r2, [pc, #16]	@ (8004a58 <HAL_NVIC_SetPriority+0x74>)
 8004a48:	f000 000f 	and.w	r0, r0, #15
 8004a4c:	4402      	add	r2, r0
 8004a4e:	7613      	strb	r3, [r2, #24]
 8004a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a54:	e000ed00 	.word	0xe000ed00
 8004a58:	e000ecfc 	.word	0xe000ecfc

08004a5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	db07      	blt.n	8004a70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a60:	4a04      	ldr	r2, [pc, #16]	@ (8004a74 <HAL_NVIC_EnableIRQ+0x18>)
 8004a62:	0941      	lsrs	r1, r0, #5
 8004a64:	2301      	movs	r3, #1
 8004a66:	f000 001f 	and.w	r0, r0, #31
 8004a6a:	4083      	lsls	r3, r0
 8004a6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a78:	3801      	subs	r0, #1
 8004a7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004a7e:	d301      	bcc.n	8004a84 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a80:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a82:	4770      	bx	lr
{
 8004a84:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8a:	4c07      	ldr	r4, [pc, #28]	@ (8004aa8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a8c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004a92:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a96:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a98:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a9a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a9c:	619a      	str	r2, [r3, #24]
}
 8004a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aa2:	6119      	str	r1, [r3, #16]
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004ab0:	f7ff ff6e 	bl	8004990 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ab4:	2c00      	cmp	r4, #0
 8004ab6:	d06f      	beq.n	8004b98 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ab8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004aba:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004abc:	2102      	movs	r1, #2
 8004abe:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8004ac2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	4605      	mov	r5, r0
 8004ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad0:	e005      	b.n	8004ade <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad2:	f7ff ff5d 	bl	8004990 <HAL_GetTick>
 8004ad6:	1b43      	subs	r3, r0, r5
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d839      	bhi.n	8004b50 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	07d1      	lsls	r1, r2, #31
 8004ae2:	d4f6      	bmi.n	8004ad2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ae4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004ae8:	68e1      	ldr	r1, [r4, #12]
 8004aea:	4302      	orrs	r2, r0
 8004aec:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aee:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af4:	432a      	orrs	r2, r5
 8004af6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8004afa:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afc:	4302      	orrs	r2, r0
 8004afe:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b00:	4932      	ldr	r1, [pc, #200]	@ (8004bcc <HAL_DMA_Init+0x120>)
 8004b02:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b04:	6a25      	ldr	r5, [r4, #32]
 8004b06:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b08:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b0c:	2904      	cmp	r1, #4
 8004b0e:	d026      	beq.n	8004b5e <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b10:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b12:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b14:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b18:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b1a:	b2d8      	uxtb	r0, r3
 8004b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 8004b1e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b20:	3810      	subs	r0, #16
 8004b22:	fba2 5200 	umull	r5, r2, r2, r0
 8004b26:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b28:	492a      	ldr	r1, [pc, #168]	@ (8004bd4 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b2e:	5c89      	ldrb	r1, [r1, r2]
 8004b30:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b32:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004b36:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b38:	bf88      	it	hi
 8004b3a:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3c:	223f      	movs	r2, #63	@ 0x3f
 8004b3e:	408a      	lsls	r2, r1
 8004b40:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b42:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b44:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004b46:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b48:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004b4a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b52:	2220      	movs	r2, #32
 8004b54:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b56:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8004b5a:	4618      	mov	r0, r3
}
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b5e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8004b62:	4329      	orrs	r1, r5
 8004b64:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8004b66:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004b68:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004b6a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b6c:	f021 0107 	bic.w	r1, r1, #7
 8004b70:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004b72:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	d0cf      	beq.n	8004b1a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b7a:	b178      	cbz	r0, 8004b9c <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b7c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8004b80:	d016      	beq.n	8004bb0 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b82:	2a02      	cmp	r2, #2
 8004b84:	d903      	bls.n	8004b8e <HAL_DMA_Init+0xe2>
 8004b86:	2a03      	cmp	r2, #3
 8004b88:	d1c7      	bne.n	8004b1a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b8a:	01ea      	lsls	r2, r5, #7
 8004b8c:	d5c5      	bpl.n	8004b1a <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b8e:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8004b90:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b92:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004b94:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004b98:	2001      	movs	r0, #1
}
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004b9c:	2a01      	cmp	r2, #1
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_Init+0xfc>
 8004ba0:	f032 0202 	bics.w	r2, r2, #2
 8004ba4:	d1b9      	bne.n	8004b1a <HAL_DMA_Init+0x6e>
 8004ba6:	e7f0      	b.n	8004b8a <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba8:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8004bac:	d1b5      	bne.n	8004b1a <HAL_DMA_Init+0x6e>
 8004bae:	e7ee      	b.n	8004b8e <HAL_DMA_Init+0xe2>
    switch (tmp)
 8004bb0:	2a03      	cmp	r2, #3
 8004bb2:	d8b2      	bhi.n	8004b1a <HAL_DMA_Init+0x6e>
 8004bb4:	a001      	add	r0, pc, #4	@ (adr r0, 8004bbc <HAL_DMA_Init+0x110>)
 8004bb6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004b8f 	.word	0x08004b8f
 8004bc0:	08004b8b 	.word	0x08004b8b
 8004bc4:	08004b8f 	.word	0x08004b8f
 8004bc8:	08004ba9 	.word	0x08004ba9
 8004bcc:	f010803f 	.word	0xf010803f
 8004bd0:	aaaaaaab 	.word	0xaaaaaaab
 8004bd4:	08011560 	.word	0x08011560

08004bd8 <HAL_DMA_Start_IT>:
{
 8004bd8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8004bda:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bde:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8004be0:	2c01      	cmp	r4, #1
 8004be2:	d00a      	beq.n	8004bfa <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004be4:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
  __HAL_LOCK(hdma);
 8004be8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bec:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8004bee:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bf2:	d005      	beq.n	8004c00 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8004bfa:	2002      	movs	r0, #2
}
 8004bfc:	bc70      	pop	{r4, r5, r6}
 8004bfe:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c00:	2602      	movs	r6, #2
 8004c02:	f880 6035 	strb.w	r6, [r0, #53]	@ 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c06:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c08:	2600      	movs	r6, #0
 8004c0a:	6546      	str	r6, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c0c:	6826      	ldr	r6, [r4, #0]
 8004c0e:	f426 2680 	bic.w	r6, r6, #262144	@ 0x40000
 8004c12:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004c14:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c16:	6883      	ldr	r3, [r0, #8]
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
    hdma->Instance->PAR = DstAddress;
 8004c1a:	bf0e      	itee	eq
 8004c1c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004c1e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c20:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c22:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8004c24:	bf08      	it	eq
 8004c26:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c28:	233f      	movs	r3, #63	@ 0x3f
 8004c2a:	4093      	lsls	r3, r2
 8004c2c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c2e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004c30:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c32:	f043 0316 	orr.w	r3, r3, #22
 8004c36:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004c38:	b11a      	cbz	r2, 8004c42 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004c4a:	6023      	str	r3, [r4, #0]
}
 8004c4c:	bc70      	pop	{r4, r5, r6}
 8004c4e:	4770      	bx	lr

08004c50 <HAL_DMA_Abort>:
{
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c54:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8004c56:	f7ff fe9b 	bl	8004990 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c5a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d006      	beq.n	8004c70 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004c66:	2300      	movs	r3, #0
 8004c68:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8004c6c:	2001      	movs	r0, #1
}
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	f022 0216 	bic.w	r2, r2, #22
 8004c78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c80:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c82:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004c84:	4605      	mov	r5, r0
 8004c86:	b342      	cbz	r2, 8004cda <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f022 0208 	bic.w	r2, r2, #8
 8004c8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c98:	e005      	b.n	8004ca6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c9a:	f7ff fe79 	bl	8004990 <HAL_GetTick>
 8004c9e:	1b43      	subs	r3, r0, r5
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d810      	bhi.n	8004cc6 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f013 0301 	ands.w	r3, r3, #1
 8004cac:	d1f5      	bne.n	8004c9a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cae:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004cb0:	223f      	movs	r2, #63	@ 0x3f
 8004cb2:	408a      	lsls	r2, r1
  return HAL_OK;
 8004cb4:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8004cb8:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cba:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004cbc:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004cc0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc8:	2220      	movs	r2, #32
 8004cca:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ccc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cda:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	d1d3      	bne.n	8004c88 <HAL_DMA_Abort+0x38>
 8004ce0:	e7d6      	b.n	8004c90 <HAL_DMA_Abort+0x40>
 8004ce2:	bf00      	nop

08004ce4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ce4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004cf4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cf6:	2305      	movs	r3, #5
 8004cf8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8004cfc:	6813      	ldr	r3, [r2, #0]
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8004d02:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004d04:	6013      	str	r3, [r2, #0]
}
 8004d06:	4770      	bx	lr

08004d08 <HAL_DMA_IRQHandler>:
{
 8004d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0a:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d0c:	4a67      	ldr	r2, [pc, #412]	@ (8004eac <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d10:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d16:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8004d18:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	422a      	tst	r2, r5
{
 8004d20:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d24:	6801      	ldr	r1, [r0, #0]
 8004d26:	6808      	ldr	r0, [r1, #0]
 8004d28:	0740      	lsls	r0, r0, #29
 8004d2a:	d478      	bmi.n	8004e1e <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	422a      	tst	r2, r5
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d34:	6821      	ldr	r1, [r4, #0]
 8004d36:	6949      	ldr	r1, [r1, #20]
 8004d38:	0608      	lsls	r0, r1, #24
 8004d3a:	d46a      	bmi.n	8004e12 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	422a      	tst	r2, r5
 8004d42:	d003      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d44:	6821      	ldr	r1, [r4, #0]
 8004d46:	6809      	ldr	r1, [r1, #0]
 8004d48:	0789      	lsls	r1, r1, #30
 8004d4a:	d45c      	bmi.n	8004e06 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	422a      	tst	r2, r5
 8004d52:	d003      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	6808      	ldr	r0, [r1, #0]
 8004d58:	0700      	lsls	r0, r0, #28
 8004d5a:	d441      	bmi.n	8004de0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	422a      	tst	r2, r5
 8004d62:	d014      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d64:	6821      	ldr	r1, [r4, #0]
 8004d66:	6808      	ldr	r0, [r1, #0]
 8004d68:	06c0      	lsls	r0, r0, #27
 8004d6a:	d510      	bpl.n	8004d8e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d6c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d6e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8004d72:	2a05      	cmp	r2, #5
 8004d74:	d063      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d7c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d7e:	d07e      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d80:	0319      	lsls	r1, r3, #12
 8004d82:	f140 8089 	bpl.w	8004e98 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8004d86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004d88:	b10b      	cbz	r3, 8004d8e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d90:	b323      	cbz	r3, 8004ddc <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d94:	07da      	lsls	r2, r3, #31
 8004d96:	d51a      	bpl.n	8004dce <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8004d98:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d9a:	4945      	ldr	r1, [pc, #276]	@ (8004eb0 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d9c:	2305      	movs	r3, #5
 8004d9e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004da2:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004da4:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8004da8:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dac:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e002      	b.n	8004db8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	07db      	lsls	r3, r3, #31
 8004db6:	d504      	bpl.n	8004dc2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	42b3      	cmp	r3, r6
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	d9f7      	bls.n	8004db2 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004dc4:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004dc6:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004dca:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004dce:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004dd0:	b123      	cbz	r3, 8004ddc <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8004dd2:	4620      	mov	r0, r4
}
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004dda:	4718      	bx	r3
}
 8004ddc:	b003      	add	sp, #12
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004de0:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de2:	680a      	ldr	r2, [r1, #0]
 8004de4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004de8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dea:	d122      	bne.n	8004e32 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dec:	05d2      	lsls	r2, r2, #23
 8004dee:	d403      	bmi.n	8004df8 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df0:	680a      	ldr	r2, [r1, #0]
 8004df2:	f022 0208 	bic.w	r2, r2, #8
 8004df6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004df8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004dfa:	2a00      	cmp	r2, #0
 8004dfc:	d0ae      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e02:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004e04:	e7aa      	b.n	8004d5c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e06:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e0a:	f042 0204 	orr.w	r2, r2, #4
 8004e0e:	6562      	str	r2, [r4, #84]	@ 0x54
 8004e10:	e79c      	b.n	8004d4c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e12:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e16:	f042 0202 	orr.w	r2, r2, #2
 8004e1a:	6562      	str	r2, [r4, #84]	@ 0x54
 8004e1c:	e78e      	b.n	8004d3c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e1e:	6808      	ldr	r0, [r1, #0]
 8004e20:	f020 0004 	bic.w	r0, r0, #4
 8004e24:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e26:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	6562      	str	r2, [r4, #84]	@ 0x54
 8004e30:	e77c      	b.n	8004d2c <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e32:	0311      	lsls	r1, r2, #12
 8004e34:	d5e0      	bpl.n	8004df8 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e36:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d1e0      	bne.n	8004dfe <HAL_DMA_IRQHandler+0xf6>
 8004e3c:	e78e      	b.n	8004d5c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3e:	680a      	ldr	r2, [r1, #0]
 8004e40:	f022 0216 	bic.w	r2, r2, #22
 8004e44:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e46:	694a      	ldr	r2, [r1, #20]
 8004e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e4c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e4e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004e50:	b33a      	cbz	r2, 8004ea2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e52:	680a      	ldr	r2, [r1, #0]
 8004e54:	f022 0208 	bic.w	r2, r2, #8
 8004e58:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5a:	223f      	movs	r2, #63	@ 0x3f
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8004e60:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e62:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004e64:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8004e66:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8004e68:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004e6c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d0b3      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8004e74:	4620      	mov	r0, r4
}
 8004e76:	b003      	add	sp, #12
 8004e78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8004e7c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e7e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8004e82:	d180      	bne.n	8004d86 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e84:	680a      	ldr	r2, [r1, #0]
 8004e86:	f022 0210 	bic.w	r2, r2, #16
 8004e8a:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004e92:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004e96:	e776      	b.n	8004d86 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8004e98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f47f af75 	bne.w	8004d8a <HAL_DMA_IRQHandler+0x82>
 8004ea0:	e775      	b.n	8004d8e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ea2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	d1d4      	bne.n	8004e52 <HAL_DMA_IRQHandler+0x14a>
 8004ea8:	e7d7      	b.n	8004e5a <HAL_DMA_IRQHandler+0x152>
 8004eaa:	bf00      	nop
 8004eac:	20000008 	.word	0x20000008
 8004eb0:	1b4e81b5 	.word	0x1b4e81b5

08004eb4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004eb4:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ebc:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ebe:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec0:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005108 <HAL_GPIO_Init+0x250>
{
 8004ec4:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8004ec6:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eca:	4689      	mov	r9, r1
 8004ecc:	e003      	b.n	8004ed6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	3301      	adds	r3, #1
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	f000 809c 	beq.w	800500e <HAL_GPIO_Init+0x156>
    ioposition = 0x01U << position;
 8004ed6:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eda:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8004ede:	43a2      	bics	r2, r4
 8004ee0:	d1f5      	bne.n	8004ece <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ee2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ee6:	f001 0203 	and.w	r2, r1, #3
 8004eea:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eee:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ef0:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef2:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ef6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef8:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004efc:	f240 808a 	bls.w	8005014 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f00:	2a03      	cmp	r2, #3
 8004f02:	f040 80c0 	bne.w	8005086 <HAL_GPIO_Init+0x1ce>
      temp = GPIOx->MODER;
 8004f06:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f08:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f0c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f0e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f10:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004f14:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f16:	d0da      	beq.n	8004ece <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f18:	2200      	movs	r2, #0
 8004f1a:	9203      	str	r2, [sp, #12]
 8004f1c:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f24:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004f28:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004f2c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004f34:	f023 0203 	bic.w	r2, r3, #3
 8004f38:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f3c:	f003 0703 	and.w	r7, r3, #3
 8004f40:	260f      	movs	r6, #15
 8004f42:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004f46:	00bf      	lsls	r7, r7, #2
 8004f48:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f4c:	4e6b      	ldr	r6, [pc, #428]	@ (80050fc <HAL_GPIO_Init+0x244>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004f4e:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f50:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f52:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f56:	d031      	beq.n	8004fbc <HAL_GPIO_Init+0x104>
 8004f58:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004f5c:	42b0      	cmp	r0, r6
 8004f5e:	f000 809d 	beq.w	800509c <HAL_GPIO_Init+0x1e4>
 8004f62:	4e67      	ldr	r6, [pc, #412]	@ (8005100 <HAL_GPIO_Init+0x248>)
 8004f64:	42b0      	cmp	r0, r6
 8004f66:	f000 809f 	beq.w	80050a8 <HAL_GPIO_Init+0x1f0>
 8004f6a:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800510c <HAL_GPIO_Init+0x254>
 8004f6e:	4560      	cmp	r0, ip
 8004f70:	f000 80a0 	beq.w	80050b4 <HAL_GPIO_Init+0x1fc>
 8004f74:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8005110 <HAL_GPIO_Init+0x258>
 8004f78:	4560      	cmp	r0, ip
 8004f7a:	f000 80a1 	beq.w	80050c0 <HAL_GPIO_Init+0x208>
 8004f7e:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8005114 <HAL_GPIO_Init+0x25c>
 8004f82:	4560      	cmp	r0, ip
 8004f84:	f000 80a8 	beq.w	80050d8 <HAL_GPIO_Init+0x220>
 8004f88:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8005118 <HAL_GPIO_Init+0x260>
 8004f8c:	4560      	cmp	r0, ip
 8004f8e:	f000 80a9 	beq.w	80050e4 <HAL_GPIO_Init+0x22c>
 8004f92:	f8df c188 	ldr.w	ip, [pc, #392]	@ 800511c <HAL_GPIO_Init+0x264>
 8004f96:	4560      	cmp	r0, ip
 8004f98:	f000 8098 	beq.w	80050cc <HAL_GPIO_Init+0x214>
 8004f9c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8005120 <HAL_GPIO_Init+0x268>
 8004fa0:	4560      	cmp	r0, ip
 8004fa2:	f000 80a5 	beq.w	80050f0 <HAL_GPIO_Init+0x238>
 8004fa6:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8005124 <HAL_GPIO_Init+0x26c>
 8004faa:	4560      	cmp	r0, ip
 8004fac:	bf0c      	ite	eq
 8004fae:	f04f 0c09 	moveq.w	ip, #9
 8004fb2:	f04f 0c0a 	movne.w	ip, #10
 8004fb6:	fa0c f707 	lsl.w	r7, ip, r7
 8004fba:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fbc:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fbe:	4a51      	ldr	r2, [pc, #324]	@ (8005104 <HAL_GPIO_Init+0x24c>)
 8004fc0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fc2:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004fc4:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004fc8:	4e4e      	ldr	r6, [pc, #312]	@ (8005104 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8004fca:	bf54      	ite	pl
 8004fcc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004fce:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8004fd2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8004fd4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004fd6:	4e4b      	ldr	r6, [pc, #300]	@ (8005104 <HAL_GPIO_Init+0x24c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fd8:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8004fda:	bf54      	ite	pl
 8004fdc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004fde:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004fe2:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8004fe4:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fe6:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004fe8:	4e46      	ldr	r6, [pc, #280]	@ (8005104 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8004fea:	bf54      	ite	pl
 8004fec:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004fee:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004ff2:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ff4:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff6:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ff8:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004ffc:	4941      	ldr	r1, [pc, #260]	@ (8005104 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8004ffe:	bf54      	ite	pl
 8005000:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005002:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005006:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8005008:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500a:	f47f af64 	bne.w	8004ed6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800500e:	b005      	add	sp, #20
 8005010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8005014:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005016:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800501e:	fa07 f70c 	lsl.w	r7, r7, ip
 8005022:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8005026:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005028:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800502a:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800502e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8005032:	409f      	lsls	r7, r3
 8005034:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005038:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800503a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800503c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005040:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005044:	fa07 f70c 	lsl.w	r7, r7, ip
 8005048:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800504c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800504e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005050:	f47f af59 	bne.w	8004f06 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8005054:	08df      	lsrs	r7, r3, #3
 8005056:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800505a:	9701      	str	r7, [sp, #4]
 800505c:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800505e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005062:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005064:	f003 0e07 	and.w	lr, r3, #7
 8005068:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800506c:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800506e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005072:	fa06 fe0e 	lsl.w	lr, r6, lr
 8005076:	9e00      	ldr	r6, [sp, #0]
 8005078:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800507c:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800507e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005082:	6237      	str	r7, [r6, #32]
 8005084:	e73f      	b.n	8004f06 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->PUPDR;
 8005086:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005088:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005090:	fa07 f70c 	lsl.w	r7, r7, ip
 8005094:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8005098:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800509a:	e734      	b.n	8004f06 <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509c:	f04f 0c01 	mov.w	ip, #1
 80050a0:	fa0c f707 	lsl.w	r7, ip, r7
 80050a4:	433d      	orrs	r5, r7
 80050a6:	e789      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050a8:	f04f 0c02 	mov.w	ip, #2
 80050ac:	fa0c f707 	lsl.w	r7, ip, r7
 80050b0:	433d      	orrs	r5, r7
 80050b2:	e783      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050b4:	f04f 0c03 	mov.w	ip, #3
 80050b8:	fa0c f707 	lsl.w	r7, ip, r7
 80050bc:	433d      	orrs	r5, r7
 80050be:	e77d      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050c0:	f04f 0c04 	mov.w	ip, #4
 80050c4:	fa0c f707 	lsl.w	r7, ip, r7
 80050c8:	433d      	orrs	r5, r7
 80050ca:	e777      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050cc:	f04f 0c07 	mov.w	ip, #7
 80050d0:	fa0c f707 	lsl.w	r7, ip, r7
 80050d4:	433d      	orrs	r5, r7
 80050d6:	e771      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050d8:	f04f 0c05 	mov.w	ip, #5
 80050dc:	fa0c f707 	lsl.w	r7, ip, r7
 80050e0:	433d      	orrs	r5, r7
 80050e2:	e76b      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050e4:	f04f 0c06 	mov.w	ip, #6
 80050e8:	fa0c f707 	lsl.w	r7, ip, r7
 80050ec:	433d      	orrs	r5, r7
 80050ee:	e765      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050f0:	f04f 0c08 	mov.w	ip, #8
 80050f4:	fa0c f707 	lsl.w	r7, ip, r7
 80050f8:	433d      	orrs	r5, r7
 80050fa:	e75f      	b.n	8004fbc <HAL_GPIO_Init+0x104>
 80050fc:	40020000 	.word	0x40020000
 8005100:	40020800 	.word	0x40020800
 8005104:	40013c00 	.word	0x40013c00
 8005108:	40023800 	.word	0x40023800
 800510c:	40020c00 	.word	0x40020c00
 8005110:	40021000 	.word	0x40021000
 8005114:	40021400 	.word	0x40021400
 8005118:	40021800 	.word	0x40021800
 800511c:	40021c00 	.word	0x40021c00
 8005120:	40022000 	.word	0x40022000
 8005124:	40022400 	.word	0x40022400

08005128 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005128:	6903      	ldr	r3, [r0, #16]
 800512a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800512c:	bf14      	ite	ne
 800512e:	2001      	movne	r0, #1
 8005130:	2000      	moveq	r0, #0
 8005132:	4770      	bx	lr

08005134 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005134:	b902      	cbnz	r2, 8005138 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005136:	0409      	lsls	r1, r1, #16
 8005138:	6181      	str	r1, [r0, #24]
  }
}
 800513a:	4770      	bx	lr

0800513c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800513c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800513e:	ea01 0203 	and.w	r2, r1, r3
 8005142:	ea21 0103 	bic.w	r1, r1, r3
 8005146:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800514a:	6181      	str	r1, [r0, #24]
}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005154:	b308      	cbz	r0, 800519a <HAL_PCD_Init+0x4a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005156:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 800515a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800515c:	4604      	mov	r4, r0
 800515e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 81ef 	beq.w	8005546 <HAL_PCD_Init+0x3f6>
 8005168:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800516a:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800516c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005170:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 8005174:	bf04      	itt	eq
 8005176:	2300      	moveq	r3, #0
 8005178:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800517a:	f004 fea3 	bl	8009ec4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800517e:	7c23      	ldrb	r3, [r4, #16]
 8005180:	f88d 3000 	strb.w	r3, [sp]
 8005184:	1d25      	adds	r5, r4, #4
 8005186:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	f004 fd94 	bl	8009cb8 <USB_CoreInit>
 8005190:	4601      	mov	r1, r0
 8005192:	b130      	cbz	r0, 80051a2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005194:	2302      	movs	r3, #2
 8005196:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800519a:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800519c:	4628      	mov	r0, r5
 800519e:	b003      	add	sp, #12
 80051a0:	bd30      	pop	{r4, r5, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	f004 fe96 	bl	8009ed4 <USB_SetCurrentMode>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d1f3      	bne.n	8005194 <HAL_PCD_Init+0x44>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ac:	7922      	ldrb	r2, [r4, #4]
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	f000 81b3 	beq.w	800551a <HAL_PCD_Init+0x3ca>
    hpcd->IN_ep[i].num = i;
 80051b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ba:	e9c4 0007 	strd	r0, r0, [r4, #28]
    hpcd->IN_ep[i].num = i;
 80051be:	82a3      	strh	r3, [r4, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051c0:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051c2:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051c4:	6260      	str	r0, [r4, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c6:	f000 81c4 	beq.w	8005552 <HAL_PCD_Init+0x402>
    hpcd->IN_ep[i].num = i;
 80051ca:	f240 1301 	movw	r3, #257	@ 0x101
 80051ce:	8723      	strh	r3, [r4, #56]	@ 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d0:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051d2:	f04f 0301 	mov.w	r3, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051d6:	e9c4 0010 	strd	r0, r0, [r4, #64]	@ 0x40
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051da:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051de:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80051e2:	64a0      	str	r0, [r4, #72]	@ 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e4:	f000 80e2 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80051e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80051ec:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f0:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051f2:	f04f 0302 	mov.w	r3, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051f6:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051fa:	f8a4 3076 	strh.w	r3, [r4, #118]	@ 0x76
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051fe:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].xfer_len = 0U;
 8005202:	66e0      	str	r0, [r4, #108]	@ 0x6c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005204:	f000 80d2 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005208:	f240 1303 	movw	r3, #259	@ 0x103
 800520c:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005210:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005212:	f04f 0303 	mov.w	r3, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005216:	e9c4 0022 	strd	r0, r0, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].tx_fifo_num = i;
 800521a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800521e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 8005222:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005226:	f000 80c1 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 800522a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800522e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005232:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005234:	f04f 0304 	mov.w	r3, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005238:	e9c4 002b 	strd	r0, r0, [r4, #172]	@ 0xac
    hpcd->IN_ep[i].tx_fifo_num = i;
 800523c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005240:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    hpcd->IN_ep[i].xfer_len = 0U;
 8005244:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005248:	f000 80b0 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 800524c:	f240 1305 	movw	r3, #261	@ 0x105
 8005250:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005254:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005256:	f04f 0305 	mov.w	r3, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 800525a:	e9c4 0034 	strd	r0, r0, [r4, #208]	@ 0xd0
    hpcd->IN_ep[i].tx_fifo_num = i;
 800525e:	f8a4 30e2 	strh.w	r3, [r4, #226]	@ 0xe2
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005262:	f884 00cc 	strb.w	r0, [r4, #204]	@ 0xcc
    hpcd->IN_ep[i].xfer_len = 0U;
 8005266:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526a:	f000 809f 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 800526e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005272:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005278:	f04f 0306 	mov.w	r3, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 800527c:	e9c4 003d 	strd	r0, r0, [r4, #244]	@ 0xf4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005280:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005284:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].xfer_len = 0U;
 8005288:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800528c:	f000 808e 	beq.w	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005290:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005294:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8005296:	f8a4 1110 	strh.w	r1, [r4, #272]	@ 0x110
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800529a:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].tx_fifo_num = i;
 800529c:	f04f 0107 	mov.w	r1, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052a0:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a4:	f8a4 112a 	strh.w	r1, [r4, #298]	@ 0x12a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052a8:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 80052ac:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b0:	d07c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80052b2:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80052b6:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ba:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052bc:	f04f 0108 	mov.w	r1, #8
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052c0:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052c4:	f8a4 114e 	strh.w	r1, [r4, #334]	@ 0x14e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c8:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].xfer_len = 0U;
 80052cc:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d0:	d06c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80052d2:	f240 1109 	movw	r1, #265	@ 0x109
 80052d6:	f8a4 1158 	strh.w	r1, [r4, #344]	@ 0x158
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052dc:	f04f 0109 	mov.w	r1, #9
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e0:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052e4:	f8a4 1172 	strh.w	r1, [r4, #370]	@ 0x172
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052e8:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
    hpcd->IN_ep[i].xfer_len = 0U;
 80052ec:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f0:	d05c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 80052f2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80052f6:	f8a4 117c 	strh.w	r1, [r4, #380]	@ 0x17c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fa:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052fc:	f04f 010a 	mov.w	r1, #10
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005300:	e9c4 3361 	strd	r3, r3, [r4, #388]	@ 0x184
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005304:	f8a4 1196 	strh.w	r1, [r4, #406]	@ 0x196
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005308:	f884 3180 	strb.w	r3, [r4, #384]	@ 0x180
    hpcd->IN_ep[i].xfer_len = 0U;
 800530c:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005310:	d04c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005312:	f240 110b 	movw	r1, #267	@ 0x10b
 8005316:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800531a:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].tx_fifo_num = i;
 800531c:	f04f 010b 	mov.w	r1, #11
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005320:	e9c4 336a 	strd	r3, r3, [r4, #424]	@ 0x1a8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005324:	f8a4 11ba 	strh.w	r1, [r4, #442]	@ 0x1ba
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005328:	f884 31a4 	strb.w	r3, [r4, #420]	@ 0x1a4
    hpcd->IN_ep[i].xfer_len = 0U;
 800532c:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005330:	d03c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005332:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005336:	f8a4 11c4 	strh.w	r1, [r4, #452]	@ 0x1c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533a:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].tx_fifo_num = i;
 800533c:	f04f 010c 	mov.w	r1, #12
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005340:	e9c4 3373 	strd	r3, r3, [r4, #460]	@ 0x1cc
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005344:	f8a4 11de 	strh.w	r1, [r4, #478]	@ 0x1de
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005348:	f884 31c8 	strb.w	r3, [r4, #456]	@ 0x1c8
    hpcd->IN_ep[i].xfer_len = 0U;
 800534c:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005350:	d02c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005352:	f240 110d 	movw	r1, #269	@ 0x10d
 8005356:	f8a4 11e8 	strh.w	r1, [r4, #488]	@ 0x1e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535a:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].tx_fifo_num = i;
 800535c:	f04f 010d 	mov.w	r1, #13
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005360:	e9c4 337c 	strd	r3, r3, [r4, #496]	@ 0x1f0
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005364:	f8a4 1202 	strh.w	r1, [r4, #514]	@ 0x202
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005368:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
    hpcd->IN_ep[i].xfer_len = 0U;
 800536c:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	d01c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005372:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8005376:	f8a4 120c 	strh.w	r1, [r4, #524]	@ 0x20c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537a:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].tx_fifo_num = i;
 800537c:	f04f 010e 	mov.w	r1, #14
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005380:	e9c4 3385 	strd	r3, r3, [r4, #532]	@ 0x214
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005384:	f8a4 1226 	strh.w	r1, [r4, #550]	@ 0x226
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005388:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210
    hpcd->IN_ep[i].xfer_len = 0U;
 800538c:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005390:	d00c      	beq.n	80053ac <HAL_PCD_Init+0x25c>
    hpcd->IN_ep[i].num = i;
 8005392:	f240 110f 	movw	r1, #271	@ 0x10f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005396:	e9c4 338e 	strd	r3, r3, [r4, #568]	@ 0x238
    hpcd->IN_ep[i].num = i;
 800539a:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 800539e:	210f      	movs	r1, #15
 80053a0:	f8a4 124a 	strh.w	r1, [r4, #586]	@ 0x24a
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053a4:	f884 3234 	strb.w	r3, [r4, #564]	@ 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 80053a8:	f8c4 3240 	str.w	r3, [r4, #576]	@ 0x240
    hpcd->OUT_ep[i].num = i;
 80053ac:	2300      	movs	r3, #0
 80053ae:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b0:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053b2:	e9c4 3397 	strd	r3, r3, [r4, #604]	@ 0x25c
 80053b6:	e9c4 33a0 	strd	r3, r3, [r4, #640]	@ 0x280
    hpcd->OUT_ep[i].num = i;
 80053ba:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053be:	f884 3258 	strb.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053c2:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].num = i;
 80053c6:	f8a4 1278 	strh.w	r1, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053ca:	f884 327c 	strb.w	r3, [r4, #636]	@ 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053ce:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d2:	f000 80a2 	beq.w	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80053d6:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d8:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053da:	e9c4 33a9 	strd	r3, r3, [r4, #676]	@ 0x2a4
    hpcd->OUT_ep[i].num = i;
 80053de:	f8a4 129c 	strh.w	r1, [r4, #668]	@ 0x29c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053e2:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053e6:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ea:	f000 8096 	beq.w	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80053ee:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f0:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053f2:	e9c4 33b2 	strd	r3, r3, [r4, #712]	@ 0x2c8
    hpcd->OUT_ep[i].num = i;
 80053f6:	f8a4 12c0 	strh.w	r1, [r4, #704]	@ 0x2c0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053fa:	f884 32c4 	strb.w	r3, [r4, #708]	@ 0x2c4
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053fe:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005402:	f000 808a 	beq.w	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8005406:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005408:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800540a:	e9c4 33bb 	strd	r3, r3, [r4, #748]	@ 0x2ec
    hpcd->OUT_ep[i].num = i;
 800540e:	f8a4 12e4 	strh.w	r1, [r4, #740]	@ 0x2e4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005412:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005416:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800541a:	d07e      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800541c:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800541e:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005420:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
    hpcd->OUT_ep[i].num = i;
 8005424:	f8a4 1308 	strh.w	r1, [r4, #776]	@ 0x308
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005428:	f884 330c 	strb.w	r3, [r4, #780]	@ 0x30c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800542c:	f8c4 3318 	str.w	r3, [r4, #792]	@ 0x318
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005430:	d073      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8005432:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005434:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005436:	e9c4 33cd 	strd	r3, r3, [r4, #820]	@ 0x334
    hpcd->OUT_ep[i].num = i;
 800543a:	f8a4 132c 	strh.w	r1, [r4, #812]	@ 0x32c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800543e:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005442:	f8c4 333c 	str.w	r3, [r4, #828]	@ 0x33c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005446:	d068      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8005448:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800544a:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800544c:	e9c4 33d6 	strd	r3, r3, [r4, #856]	@ 0x358
    hpcd->OUT_ep[i].num = i;
 8005450:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005454:	f884 3354 	strb.w	r3, [r4, #852]	@ 0x354
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005458:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545c:	d05d      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800545e:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005460:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005462:	e9c4 33df 	strd	r3, r3, [r4, #892]	@ 0x37c
    hpcd->OUT_ep[i].num = i;
 8005466:	f8a4 1374 	strh.w	r1, [r4, #884]	@ 0x374
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800546a:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
    hpcd->OUT_ep[i].xfer_len = 0U;
 800546e:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005472:	d052      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8005474:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005476:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005478:	e9c4 33e8 	strd	r3, r3, [r4, #928]	@ 0x3a0
    hpcd->OUT_ep[i].num = i;
 800547c:	f8a4 1398 	strh.w	r1, [r4, #920]	@ 0x398
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005480:	f884 339c 	strb.w	r3, [r4, #924]	@ 0x39c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005484:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005488:	d047      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 800548a:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800548c:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800548e:	e9c4 33f1 	strd	r3, r3, [r4, #964]	@ 0x3c4
    hpcd->OUT_ep[i].num = i;
 8005492:	f8a4 13bc 	strh.w	r1, [r4, #956]	@ 0x3bc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005496:	f884 33c0 	strb.w	r3, [r4, #960]	@ 0x3c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 800549a:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549e:	d03c      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80054a0:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a2:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054a4:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	@ 0x3e8
    hpcd->OUT_ep[i].num = i;
 80054a8:	f8a4 13e0 	strh.w	r1, [r4, #992]	@ 0x3e0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054ac:	f884 33e4 	strb.w	r3, [r4, #996]	@ 0x3e4
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054b0:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b4:	d031      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80054b6:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b8:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].num = i;
 80054ba:	f8a4 1404 	strh.w	r1, [r4, #1028]	@ 0x404
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054be:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c2:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054c6:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054ca:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ce:	d024      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80054d0:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054d2:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].num = i;
 80054d4:	f8a4 1428 	strh.w	r1, [r4, #1064]	@ 0x428
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d8:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054dc:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054e0:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054e4:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054e8:	d017      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 80054ea:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ec:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].num = i;
 80054ee:	f8a4 144c 	strh.w	r1, [r4, #1100]	@ 0x44c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054f2:	f884 3450 	strb.w	r3, [r4, #1104]	@ 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054f6:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054fa:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054fe:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005502:	d00a      	beq.n	800551a <HAL_PCD_Init+0x3ca>
    hpcd->OUT_ep[i].num = i;
 8005504:	220f      	movs	r2, #15
 8005506:	f8a4 2470 	strh.w	r2, [r4, #1136]	@ 0x470
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800550a:	f884 3474 	strb.w	r3, [r4, #1140]	@ 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 800550e:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005512:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005516:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800551a:	7c20      	ldrb	r0, [r4, #16]
 800551c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005520:	f88d 0000 	strb.w	r0, [sp]
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	f004 fd0d 	bl	8009f44 <USB_DevInit>
 800552a:	4605      	mov	r5, r0
 800552c:	2800      	cmp	r0, #0
 800552e:	f47f ae31 	bne.w	8005194 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8005532:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8005534:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8005536:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8005538:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800553c:	f005 f94e 	bl	800a7dc <USB_DevDisconnect>
}
 8005540:	4628      	mov	r0, r5
 8005542:	b003      	add	sp, #12
 8005544:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005546:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800554a:	f009 febf 	bl	800f2cc <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	e60b      	b.n	800516a <HAL_PCD_Init+0x1a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005552:	e9c4 0097 	strd	r0, r0, [r4, #604]	@ 0x25c
    hpcd->OUT_ep[i].num = i;
 8005556:	f8a4 0254 	strh.w	r0, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800555a:	f884 0258 	strb.w	r0, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800555e:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005562:	e7da      	b.n	800551a <HAL_PCD_Init+0x3ca>

08005564 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005564:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8005566:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800556a:	2b01      	cmp	r3, #1
{
 800556c:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800556e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8005570:	d016      	beq.n	80055a0 <HAL_PCD_Start+0x3c>
 8005572:	2301      	movs	r3, #1
 8005574:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005578:	68c3      	ldr	r3, [r0, #12]
 800557a:	065b      	lsls	r3, r3, #25
 800557c:	d502      	bpl.n	8005584 <HAL_PCD_Start+0x20>
 800557e:	7b63      	ldrb	r3, [r4, #13]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d008      	beq.n	8005596 <HAL_PCD_Start+0x32>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8005584:	f004 fc96 	bl	8009eb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	f005 f917 	bl	800a7bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800558e:	2000      	movs	r0, #0
 8005590:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8005594:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005596:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559c:	6383      	str	r3, [r0, #56]	@ 0x38
 800559e:	e7f1      	b.n	8005584 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 80055a0:	2002      	movs	r0, #2
}
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a8:	6806      	ldr	r6, [r0, #0]
{
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055ae:	4630      	mov	r0, r6
 80055b0:	f005 f952 	bl	800a858 <USB_GetMode>
 80055b4:	b110      	cbz	r0, 80055bc <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80055b6:	b009      	add	sp, #36	@ 0x24
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055bc:	4605      	mov	r5, r0
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	f005 f91c 	bl	800a7fc <USB_ReadInterrupts>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d0f6      	beq.n	80055b6 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055c8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055cc:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055ce:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80055d2:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055d6:	f005 f911 	bl	800a7fc <USB_ReadInterrupts>
 80055da:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055de:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055e0:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80055e4:	9303      	str	r3, [sp, #12]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055e6:	bf1e      	ittt	ne
 80055e8:	6943      	ldrne	r3, [r0, #20]
 80055ea:	f003 0302 	andne.w	r3, r3, #2
 80055ee:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055f0:	f005 f904 	bl	800a7fc <USB_ReadInterrupts>
 80055f4:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055f8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055fa:	d012      	beq.n	8005622 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055fc:	6983      	ldr	r3, [r0, #24]
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8005604:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005606:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800560a:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800560c:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005610:	f000 83b6 	beq.w	8005d80 <HAL_PCD_IRQHandler+0x7dc>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005614:	2b06      	cmp	r3, #6
 8005616:	f000 8356 	beq.w	8005cc6 <HAL_PCD_IRQHandler+0x722>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800561a:	6983      	ldr	r3, [r0, #24]
 800561c:	f043 0310 	orr.w	r3, r3, #16
 8005620:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005622:	f005 f8eb 	bl	800a7fc <USB_ReadInterrupts>
 8005626:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800562a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800562c:	f040 82b1 	bne.w	8005b92 <HAL_PCD_IRQHandler+0x5ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005630:	f005 f8e4 	bl	800a7fc <USB_ReadInterrupts>
 8005634:	0347      	lsls	r7, r0, #13
 8005636:	f100 8210 	bmi.w	8005a5a <HAL_PCD_IRQHandler+0x4b6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800563a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800563c:	f005 f8de 	bl	800a7fc <USB_ReadInterrupts>
 8005640:	2800      	cmp	r0, #0
 8005642:	f2c0 8182 	blt.w	800594a <HAL_PCD_IRQHandler+0x3a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	f005 f8d8 	bl	800a7fc <USB_ReadInterrupts>
 800564c:	0503      	lsls	r3, r0, #20
 800564e:	f100 813d 	bmi.w	80058cc <HAL_PCD_IRQHandler+0x328>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005652:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005654:	f005 f8d2 	bl	800a7fc <USB_ReadInterrupts>
 8005658:	04c0      	lsls	r0, r0, #19
 800565a:	f100 81a0 	bmi.w	800599e <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	f005 f8cc 	bl	800a7fc <USB_ReadInterrupts>
 8005664:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8005668:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800566a:	f040 8181 	bne.w	8005970 <HAL_PCD_IRQHandler+0x3cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800566e:	f005 f8c5 	bl	800a7fc <USB_ReadInterrupts>
 8005672:	0701      	lsls	r1, r0, #28
 8005674:	f100 81e8 	bmi.w	8005a48 <HAL_PCD_IRQHandler+0x4a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	f005 f8bf 	bl	800a7fc <USB_ReadInterrupts>
 800567e:	0602      	lsls	r2, r0, #24
 8005680:	d571      	bpl.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005682:	69b3      	ldr	r3, [r6, #24]
 8005684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005688:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800568a:	7923      	ldrb	r3, [r4, #4]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d96a      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005690:	f894 227b 	ldrb.w	r2, [r4, #635]	@ 0x27b
 8005694:	2a01      	cmp	r2, #1
 8005696:	f000 83e0 	beq.w	8005e5a <HAL_PCD_IRQHandler+0x8b6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800569a:	2b02      	cmp	r3, #2
 800569c:	d963      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800569e:	f894 229f 	ldrb.w	r2, [r4, #671]	@ 0x29f
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	f000 83f4 	beq.w	8005e90 <HAL_PCD_IRQHandler+0x8ec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d95c      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ac:	f894 22c3 	ldrb.w	r2, [r4, #707]	@ 0x2c3
 80056b0:	2a01      	cmp	r2, #1
 80056b2:	f000 8301 	beq.w	8005cb8 <HAL_PCD_IRQHandler+0x714>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d955      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ba:	f894 22e7 	ldrb.w	r2, [r4, #743]	@ 0x2e7
 80056be:	2a01      	cmp	r2, #1
 80056c0:	f000 8314 	beq.w	8005cec <HAL_PCD_IRQHandler+0x748>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d94e      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056c8:	f894 230b 	ldrb.w	r2, [r4, #779]	@ 0x30b
 80056cc:	2a01      	cmp	r2, #1
 80056ce:	f000 841a 	beq.w	8005f06 <HAL_PCD_IRQHandler+0x962>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d947      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056d6:	f894 232f 	ldrb.w	r2, [r4, #815]	@ 0x32f
 80056da:	2a01      	cmp	r2, #1
 80056dc:	f000 8427 	beq.w	8005f2e <HAL_PCD_IRQHandler+0x98a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d940      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056e4:	f894 2353 	ldrb.w	r2, [r4, #851]	@ 0x353
 80056e8:	2a01      	cmp	r2, #1
 80056ea:	f000 8439 	beq.w	8005f60 <HAL_PCD_IRQHandler+0x9bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d939      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056f2:	f894 2377 	ldrb.w	r2, [r4, #887]	@ 0x377
 80056f6:	2a01      	cmp	r2, #1
 80056f8:	f000 8446 	beq.w	8005f88 <HAL_PCD_IRQHandler+0x9e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d932      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005700:	f894 239b 	ldrb.w	r2, [r4, #923]	@ 0x39b
 8005704:	2a01      	cmp	r2, #1
 8005706:	f000 8453 	beq.w	8005fb0 <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800570a:	2b0a      	cmp	r3, #10
 800570c:	d92b      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800570e:	f894 23bf 	ldrb.w	r2, [r4, #959]	@ 0x3bf
 8005712:	2a01      	cmp	r2, #1
 8005714:	f000 8460 	beq.w	8005fd8 <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005718:	2b0b      	cmp	r3, #11
 800571a:	d924      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800571c:	f894 23e3 	ldrb.w	r2, [r4, #995]	@ 0x3e3
 8005720:	2a01      	cmp	r2, #1
 8005722:	f000 846d 	beq.w	8006000 <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d91d      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800572a:	f894 2407 	ldrb.w	r2, [r4, #1031]	@ 0x407
 800572e:	2a01      	cmp	r2, #1
 8005730:	f000 8472 	beq.w	8006018 <HAL_PCD_IRQHandler+0xa74>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005734:	2b0d      	cmp	r3, #13
 8005736:	d916      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005738:	f894 242b 	ldrb.w	r2, [r4, #1067]	@ 0x42b
 800573c:	2a01      	cmp	r2, #1
 800573e:	f000 8492 	beq.w	8006066 <HAL_PCD_IRQHandler+0xac2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005742:	2b0e      	cmp	r3, #14
 8005744:	d90f      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005746:	f894 244f 	ldrb.w	r2, [r4, #1103]	@ 0x44f
 800574a:	2a01      	cmp	r2, #1
 800574c:	f000 8499 	beq.w	8006082 <HAL_PCD_IRQHandler+0xade>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d908      	bls.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005754:	f894 3473 	ldrb.w	r3, [r4, #1139]	@ 0x473
 8005758:	2b01      	cmp	r3, #1
 800575a:	d104      	bne.n	8005766 <HAL_PCD_IRQHandler+0x1c2>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800575c:	6820      	ldr	r0, [r4, #0]
 800575e:	f504 618e 	add.w	r1, r4, #1136	@ 0x470
 8005762:	f004 ff3b 	bl	800a5dc <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f005 f848 	bl	800a7fc <USB_ReadInterrupts>
 800576c:	02c3      	lsls	r3, r0, #11
 800576e:	f140 80ab 	bpl.w	80058c8 <HAL_PCD_IRQHandler+0x324>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005772:	7923      	ldrb	r3, [r4, #4]
 8005774:	2b01      	cmp	r3, #1
 8005776:	f240 8089 	bls.w	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800577a:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800577e:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005782:	2a01      	cmp	r2, #1
 8005784:	f000 8261 	beq.w	8005c4a <HAL_PCD_IRQHandler+0x6a6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005788:	2b02      	cmp	r3, #2
 800578a:	d97f      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800578c:	f894 2060 	ldrb.w	r2, [r4, #96]	@ 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005790:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005794:	2a01      	cmp	r2, #1
 8005796:	f000 826b 	beq.w	8005c70 <HAL_PCD_IRQHandler+0x6cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800579a:	2b03      	cmp	r3, #3
 800579c:	d976      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800579e:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057a2:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a6:	2a01      	cmp	r2, #1
 80057a8:	f000 826e 	beq.w	8005c88 <HAL_PCD_IRQHandler+0x6e4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d96d      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057b0:	f894 20a8 	ldrb.w	r2, [r4, #168]	@ 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057b4:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057b8:	2a01      	cmp	r2, #1
 80057ba:	f000 8271 	beq.w	8005ca0 <HAL_PCD_IRQHandler+0x6fc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d964      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057c2:	f894 20cc 	ldrb.w	r2, [r4, #204]	@ 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057c6:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	f000 8339 	beq.w	8005e42 <HAL_PCD_IRQHandler+0x89e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d95b      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057d4:	f894 20f0 	ldrb.w	r2, [r4, #240]	@ 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057d8:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057dc:	2a01      	cmp	r2, #1
 80057de:	f000 834b 	beq.w	8005e78 <HAL_PCD_IRQHandler+0x8d4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057e2:	2b07      	cmp	r3, #7
 80057e4:	d952      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e6:	f894 2114 	ldrb.w	r2, [r4, #276]	@ 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057ea:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ee:	2a01      	cmp	r2, #1
 80057f0:	f000 8355 	beq.w	8005e9e <HAL_PCD_IRQHandler+0x8fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d949      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f8:	f894 2138 	ldrb.w	r2, [r4, #312]	@ 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057fc:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005800:	2a01      	cmp	r2, #1
 8005802:	f000 8358 	beq.w	8005eb6 <HAL_PCD_IRQHandler+0x912>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005806:	2b09      	cmp	r3, #9
 8005808:	d940      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800580a:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800580e:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005812:	2a01      	cmp	r2, #1
 8005814:	f000 836b 	beq.w	8005eee <HAL_PCD_IRQHandler+0x94a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d937      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800581c:	f894 2180 	ldrb.w	r2, [r4, #384]	@ 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005820:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005824:	2a01      	cmp	r2, #1
 8005826:	f000 8376 	beq.w	8005f16 <HAL_PCD_IRQHandler+0x972>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582a:	2b0b      	cmp	r3, #11
 800582c:	d92e      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800582e:	f894 21a4 	ldrb.w	r2, [r4, #420]	@ 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005832:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005836:	2a01      	cmp	r2, #1
 8005838:	f000 8386 	beq.w	8005f48 <HAL_PCD_IRQHandler+0x9a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d925      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005840:	f894 21c8 	ldrb.w	r2, [r4, #456]	@ 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005844:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005848:	2a01      	cmp	r2, #1
 800584a:	f000 8391 	beq.w	8005f70 <HAL_PCD_IRQHandler+0x9cc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800584e:	2b0d      	cmp	r3, #13
 8005850:	d91c      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005852:	f894 21ec 	ldrb.w	r2, [r4, #492]	@ 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005856:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800585a:	2a01      	cmp	r2, #1
 800585c:	f000 839c 	beq.w	8005f98 <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005860:	2b0e      	cmp	r3, #14
 8005862:	d913      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005864:	f894 2210 	ldrb.w	r2, [r4, #528]	@ 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005868:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800586c:	2a01      	cmp	r2, #1
 800586e:	f000 83a7 	beq.w	8005fc0 <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d90a      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005876:	f894 2234 	ldrb.w	r2, [r4, #564]	@ 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800587a:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800587e:	2a01      	cmp	r2, #1
 8005880:	f000 83b2 	beq.w	8005fe8 <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005884:	2b10      	cmp	r3, #16
 8005886:	d901      	bls.n	800588c <HAL_PCD_IRQHandler+0x2e8>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005888:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	6943      	ldr	r3, [r0, #20]
 8005890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005894:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005896:	f004 ffb1 	bl	800a7fc <USB_ReadInterrupts>
 800589a:	0287      	lsls	r7, r0, #10
 800589c:	d421      	bmi.n	80058e2 <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	f004 ffac 	bl	800a7fc <USB_ReadInterrupts>
 80058a4:	0040      	lsls	r0, r0, #1
 80058a6:	f100 80c6 	bmi.w	8005a36 <HAL_PCD_IRQHandler+0x492>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	f004 ffa6 	bl	800a7fc <USB_ReadInterrupts>
 80058b0:	0741      	lsls	r1, r0, #29
 80058b2:	f57f ae80 	bpl.w	80055b6 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058ba:	076a      	lsls	r2, r5, #29
 80058bc:	f100 8281 	bmi.w	8005dc2 <HAL_PCD_IRQHandler+0x81e>
      hpcd->Instance->GOTGINT |= RegVal;
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	432a      	orrs	r2, r5
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	e676      	b.n	80055b6 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	e7e4      	b.n	8005896 <HAL_PCD_IRQHandler+0x2f2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	07df      	lsls	r7, r3, #31
 80058d2:	f100 8272 	bmi.w	8005dba <HAL_PCD_IRQHandler+0x816>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	6943      	ldr	r3, [r0, #20]
 80058da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058de:	6143      	str	r3, [r0, #20]
 80058e0:	e6b8      	b.n	8005654 <HAL_PCD_IRQHandler+0xb0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058e2:	f894 c004 	ldrb.w	ip, [r4, #4]
 80058e6:	f1bc 0f01 	cmp.w	ip, #1
 80058ea:	d928      	bls.n	800593e <HAL_PCD_IRQHandler+0x39a>
 80058ec:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 80058f0:	4623      	mov	r3, r4
 80058f2:	2101      	movs	r1, #1
 80058f4:	e006      	b.n	8005904 <HAL_PCD_IRQHandler+0x360>
 80058f6:	3101      	adds	r1, #1
 80058f8:	4561      	cmp	r1, ip
 80058fa:	f102 0220 	add.w	r2, r2, #32
 80058fe:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8005902:	d01c      	beq.n	800593e <HAL_PCD_IRQHandler+0x39a>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005904:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005908:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800590a:	2801      	cmp	r0, #1
 800590c:	d1f3      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x352>
 800590e:	2d00      	cmp	r5, #0
 8005910:	daf1      	bge.n	80058f6 <HAL_PCD_IRQHandler+0x352>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005912:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8005916:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800591a:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800591e:	42bd      	cmp	r5, r7
 8005920:	d1e9      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x352>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005922:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005926:	69b0      	ldr	r0, [r6, #24]
 8005928:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800592c:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800592e:	6970      	ldr	r0, [r6, #20]
 8005930:	0605      	lsls	r5, r0, #24
 8005932:	d4e0      	bmi.n	80058f6 <HAL_PCD_IRQHandler+0x352>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005934:	9a03      	ldr	r2, [sp, #12]
 8005936:	6853      	ldr	r3, [r2, #4]
 8005938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800593c:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	6943      	ldr	r3, [r0, #20]
 8005942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005946:	6143      	str	r3, [r0, #20]
 8005948:	e7aa      	b.n	80058a0 <HAL_PCD_IRQHandler+0x2fc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	6853      	ldr	r3, [r2, #4]
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8005954:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8005958:	2b01      	cmp	r3, #1
 800595a:	f000 8182 	beq.w	8005c62 <HAL_PCD_IRQHandler+0x6be>
        HAL_PCD_ResumeCallback(hpcd);
 800595e:	4620      	mov	r0, r4
 8005960:	f009 fd42 	bl	800f3e8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	6943      	ldr	r3, [r0, #20]
 8005968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800596c:	6143      	str	r3, [r0, #20]
 800596e:	e66b      	b.n	8005648 <HAL_PCD_IRQHandler+0xa4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005970:	f004 ff76 	bl	800a860 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	f004 fc5f 	bl	800a238 <USB_GetDevSpeed>
 800597a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	f001 f83b 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 8005982:	79e2      	ldrb	r2, [r4, #7]
 8005984:	4601      	mov	r1, r0
 8005986:	4628      	mov	r0, r5
 8005988:	f004 fa1a 	bl	8009dc0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800598c:	4620      	mov	r0, r4
 800598e:	f009 fcfd 	bl	800f38c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005992:	6820      	ldr	r0, [r4, #0]
 8005994:	6943      	ldr	r3, [r0, #20]
 8005996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599a:	6143      	str	r3, [r0, #20]
 800599c:	e667      	b.n	800566e <HAL_PCD_IRQHandler+0xca>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800599e:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059a0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059a2:	6853      	ldr	r3, [r2, #4]
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059aa:	2110      	movs	r1, #16
 80059ac:	f004 fbf6 	bl	800a19c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b0:	7920      	ldrb	r0, [r4, #4]
 80059b2:	b1d8      	cbz	r0, 80059ec <HAL_PCD_IRQHandler+0x448>
 80059b4:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059b8:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80059bc:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80059c4:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059c6:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80059ce:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80059d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059da:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059dc:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e0:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e6:	f103 0320 	add.w	r3, r3, #32
 80059ea:	d1e7      	bne.n	80059bc <HAL_PCD_IRQHandler+0x418>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059ec:	9a03      	ldr	r2, [sp, #12]
 80059ee:	69d3      	ldr	r3, [r2, #28]
 80059f0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80059f4:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059f6:	7be3      	ldrb	r3, [r4, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 811b 	bne.w	8005c34 <HAL_PCD_IRQHandler+0x690>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059fe:	6953      	ldr	r3, [r2, #20]
 8005a00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a04:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005a08:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a0a:	6913      	ldr	r3, [r2, #16]
 8005a0c:	f043 030b 	orr.w	r3, r3, #11
 8005a10:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a12:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a16:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a18:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a1c:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a20:	79a1      	ldrb	r1, [r4, #6]
 8005a22:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005a26:	f004 ff2d 	bl	800a884 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	6943      	ldr	r3, [r0, #20]
 8005a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a32:	6143      	str	r3, [r0, #20]
 8005a34:	e614      	b.n	8005660 <HAL_PCD_IRQHandler+0xbc>
      HAL_PCD_ConnectCallback(hpcd);
 8005a36:	4620      	mov	r0, r4
 8005a38:	f009 fce2 	bl	800f400 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	6943      	ldr	r3, [r0, #20]
 8005a40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a44:	6143      	str	r3, [r0, #20]
 8005a46:	e731      	b.n	80058ac <HAL_PCD_IRQHandler+0x308>
      HAL_PCD_SOFCallback(hpcd);
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f009 fc9b 	bl	800f384 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a4e:	6820      	ldr	r0, [r4, #0]
 8005a50:	6943      	ldr	r3, [r0, #20]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	6143      	str	r3, [r0, #20]
 8005a58:	e60f      	b.n	800567a <HAL_PCD_IRQHandler+0xd6>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a5a:	6820      	ldr	r0, [r4, #0]
 8005a5c:	f004 feda 	bl	800a814 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8005a60:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a62:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	f43f ade8 	beq.w	800563c <HAL_PCD_IRQHandler+0x98>
 8005a6c:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a70:	9604      	str	r6, [sp, #16]
 8005a72:	46a0      	mov	r8, r4
      epnum = 0U;
 8005a74:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a78:	4606      	mov	r6, r0
 8005a7a:	9505      	str	r5, [sp, #20]
 8005a7c:	e009      	b.n	8005a92 <HAL_PCD_IRQHandler+0x4ee>
      while (ep_intr != 0U)
 8005a7e:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8005a82:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8005a86:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8005a8a:	f107 0720 	add.w	r7, r7, #32
 8005a8e:	f000 8137 	beq.w	8005d00 <HAL_PCD_IRQHandler+0x75c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a92:	f019 0f01 	tst.w	r9, #1
 8005a96:	d0f2      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x4da>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a98:	fa5f fb8a 	uxtb.w	fp, sl
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	4659      	mov	r1, fp
 8005aa0:	f004 feca 	bl	800a838 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005aa4:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aa6:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005aa8:	d512      	bpl.n	8005ad0 <HAL_PCD_IRQHandler+0x52c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005aaa:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aac:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005aae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ab0:	f00a 020f 	and.w	r2, sl, #15
 8005ab4:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ab8:	ea23 0302 	bic.w	r3, r3, r2
 8005abc:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005abe:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 8005ac0:	79a1      	ldrb	r1, [r4, #6]
 8005ac2:	2901      	cmp	r1, #1
 8005ac4:	f000 8182 	beq.w	8005dcc <HAL_PCD_IRQHandler+0x828>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ac8:	4659      	mov	r1, fp
 8005aca:	4620      	mov	r0, r4
 8005acc:	f009 fc50 	bl	800f370 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ad0:	072b      	lsls	r3, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ad2:	bf44      	itt	mi
 8005ad4:	2308      	movmi	r3, #8
 8005ad6:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ad8:	06ee      	lsls	r6, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ada:	bf44      	itt	mi
 8005adc:	2310      	movmi	r3, #16
 8005ade:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ae0:	0668      	lsls	r0, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ae2:	bf44      	itt	mi
 8005ae4:	2340      	movmi	r3, #64	@ 0x40
 8005ae6:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ae8:	07a9      	lsls	r1, r5, #30
 8005aea:	f100 813d 	bmi.w	8005d68 <HAL_PCD_IRQHandler+0x7c4>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005aee:	062a      	lsls	r2, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af0:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005af2:	d5c4      	bpl.n	8005a7e <HAL_PCD_IRQHandler+0x4da>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8005af4:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	d8c0      	bhi.n	8005a7e <HAL_PCD_IRQHandler+0x4da>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005afc:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 8005b00:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b06:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8005b0a:	eba5 0c03 	sub.w	ip, r5, r3
  len32b = (len + 3U) / 4U;
 8005b0e:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b10:	698a      	ldr	r2, [r1, #24]
  len32b = (len + 3U) / 4U;
 8005b12:	bf28      	it	cs
 8005b14:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b16:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 8005b1a:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b1e:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8005b22:	f0c0 818a 	bcc.w	8005e3a <HAL_PCD_IRQHandler+0x896>
 8005b26:	9706      	str	r7, [sp, #24]
 8005b28:	460f      	mov	r7, r1
 8005b2a:	e021      	b.n	8005b70 <HAL_PCD_IRQHandler+0x5cc>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b2c:	1aed      	subs	r5, r5, r3
 8005b2e:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b32:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8005b36:	429d      	cmp	r5, r3
 8005b38:	bf28      	it	cs
 8005b3a:	461d      	movcs	r5, r3
 8005b3c:	79a3      	ldrb	r3, [r4, #6]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	465a      	mov	r2, fp
 8005b42:	b2ab      	uxth	r3, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f004 fd93 	bl	800a670 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8005b4a:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b4e:	69ba      	ldr	r2, [r7, #24]
    ep->xfer_buff  += len;
 8005b50:	442b      	add	r3, r5
 8005b52:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8005b56:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b5a:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8005b5c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8005b5e:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b60:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8005b64:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b68:	f0c0 8163 	bcc.w	8005e32 <HAL_PCD_IRQHandler+0x88e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b6c:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b70:	429d      	cmp	r5, r3
 8005b72:	d8db      	bhi.n	8005b2c <HAL_PCD_IRQHandler+0x588>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b74:	9f06      	ldr	r7, [sp, #24]
 8005b76:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b78:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b7a:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b7e:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b82:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b84:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b88:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b8a:	ea23 0302 	bic.w	r3, r3, r2
 8005b8e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b90:	e775      	b.n	8005a7e <HAL_PCD_IRQHandler+0x4da>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b92:	f004 fe37 	bl	800a804 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8005b96:	4607      	mov	r7, r0
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	2f00      	cmp	r7, #0
 8005b9c:	f43f ad48 	beq.w	8005630 <HAL_PCD_IRQHandler+0x8c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ba0:	9504      	str	r5, [sp, #16]
 8005ba2:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8005ba6:	46a3      	mov	fp, r4
      epnum = 0U;
 8005ba8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bac:	4625      	mov	r5, r4
 8005bae:	e008      	b.n	8005bc2 <HAL_PCD_IRQHandler+0x61e>
      while (ep_intr != 0U)
 8005bb0:	087f      	lsrs	r7, r7, #1
        epnum++;
 8005bb2:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8005bb6:	f108 0820 	add.w	r8, r8, #32
 8005bba:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 8005bbe:	f000 809c 	beq.w	8005cfa <HAL_PCD_IRQHandler+0x756>
        if ((ep_intr & 0x1U) != 0U)
 8005bc2:	07fc      	lsls	r4, r7, #31
 8005bc4:	d5f4      	bpl.n	8005bb0 <HAL_PCD_IRQHandler+0x60c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bc6:	fa5f f48a 	uxtb.w	r4, sl
 8005bca:	4621      	mov	r1, r4
 8005bcc:	f004 fe2a 	bl	800a824 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005bd0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bd4:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005bd6:	f040 80a8 	bne.w	8005d2a <HAL_PCD_IRQHandler+0x786>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005bda:	f019 0f08 	tst.w	r9, #8
 8005bde:	f040 8093 	bne.w	8005d08 <HAL_PCD_IRQHandler+0x764>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005be2:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005be6:	bf1c      	itt	ne
 8005be8:	2210      	movne	r2, #16
 8005bea:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005bee:	f019 0f02 	tst.w	r9, #2
 8005bf2:	d00f      	beq.n	8005c14 <HAL_PCD_IRQHandler+0x670>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005bf4:	6972      	ldr	r2, [r6, #20]
 8005bf6:	0611      	lsls	r1, r2, #24
 8005bf8:	d504      	bpl.n	8005c04 <HAL_PCD_IRQHandler+0x660>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c02:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8005c04:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8005c08:	2a01      	cmp	r2, #1
 8005c0a:	f000 812d 	beq.w	8005e68 <HAL_PCD_IRQHandler+0x8c4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005c0e:	2302      	movs	r3, #2
 8005c10:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c14:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c18:	bf1c      	itt	ne
 8005c1a:	2320      	movne	r3, #32
 8005c1c:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c20:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c24:	bf18      	it	ne
 8005c26:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8005c2a:	6828      	ldr	r0, [r5, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	f8c8 3008 	strne.w	r3, [r8, #8]
 8005c32:	e7bd      	b.n	8005bb0 <HAL_PCD_IRQHandler+0x60c>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c34:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8005c38:	f043 030b 	orr.w	r3, r3, #11
 8005c3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c40:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005c42:	f043 030b 	orr.w	r3, r3, #11
 8005c46:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c48:	e6e3      	b.n	8005a12 <HAL_PCD_IRQHandler+0x46e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c4a:	2900      	cmp	r1, #0
 8005c4c:	f6bf ad9c 	bge.w	8005788 <HAL_PCD_IRQHandler+0x1e4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c50:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c52:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c56:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8005c5a:	f004 fcbf 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c5e:	7923      	ldrb	r3, [r4, #4]
 8005c60:	e592      	b.n	8005788 <HAL_PCD_IRQHandler+0x1e4>
        hpcd->LPM_State = LPM_L0;
 8005c62:	2100      	movs	r1, #0
 8005c64:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fc0f 	bl	800648c <HAL_PCDEx_LPM_Callback>
 8005c6e:	e679      	b.n	8005964 <HAL_PCD_IRQHandler+0x3c0>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c70:	2900      	cmp	r1, #0
 8005c72:	f6bf ad92 	bge.w	800579a <HAL_PCD_IRQHandler+0x1f6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c76:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c78:	f884 205f 	strb.w	r2, [r4, #95]	@ 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c7c:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8005c80:	f004 fcac 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c84:	7923      	ldrb	r3, [r4, #4]
 8005c86:	e588      	b.n	800579a <HAL_PCD_IRQHandler+0x1f6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	f6bf ad8f 	bge.w	80057ac <HAL_PCD_IRQHandler+0x208>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c8e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c90:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c94:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8005c98:	f004 fca0 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c9c:	7923      	ldrb	r3, [r4, #4]
 8005c9e:	e585      	b.n	80057ac <HAL_PCD_IRQHandler+0x208>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	f6bf ad8c 	bge.w	80057be <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ca6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ca8:	f884 20a7 	strb.w	r2, [r4, #167]	@ 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cac:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8005cb0:	f004 fc94 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cb4:	7923      	ldrb	r3, [r4, #4]
 8005cb6:	e582      	b.n	80057be <HAL_PCD_IRQHandler+0x21a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	f504 7130 	add.w	r1, r4, #704	@ 0x2c0
 8005cbe:	f004 fc8d 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cc2:	7923      	ldrb	r3, [r4, #4]
 8005cc4:	e4f7      	b.n	80056b6 <HAL_PCD_IRQHandler+0x112>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8005ccc:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cce:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cd2:	f004 fce3 	bl	800a69c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cd6:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8005cda:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8005cde:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ce2:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8005cea:	e496      	b.n	800561a <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	f504 7139 	add.w	r1, r4, #740	@ 0x2e4
 8005cf2:	f004 fc73 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cf6:	7923      	ldrb	r3, [r4, #4]
 8005cf8:	e4e4      	b.n	80056c4 <HAL_PCD_IRQHandler+0x120>
 8005cfa:	462c      	mov	r4, r5
 8005cfc:	9d04      	ldr	r5, [sp, #16]
 8005cfe:	e497      	b.n	8005630 <HAL_PCD_IRQHandler+0x8c>
 8005d00:	4630      	mov	r0, r6
 8005d02:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8005d06:	e499      	b.n	800563c <HAL_PCD_IRQHandler+0x98>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d08:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d10:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d12:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d16:	49be      	ldr	r1, [pc, #760]	@ (8006010 <HAL_PCD_IRQHandler+0xa6c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d18:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1c:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d1e:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d20:	d867      	bhi.n	8005df2 <HAL_PCD_IRQHandler+0x84e>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d22:	4628      	mov	r0, r5
 8005d24:	f009 fb14 	bl	800f350 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d28:	e75b      	b.n	8005be2 <HAL_PCD_IRQHandler+0x63e>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2a:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8005d32:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d34:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d38:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8005d3c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8005d40:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d42:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8005d44:	d067      	beq.n	8005e16 <HAL_PCD_IRQHandler+0x872>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d46:	49b3      	ldr	r1, [pc, #716]	@ (8006014 <HAL_PCD_IRQHandler+0xa70>)
 8005d48:	458e      	cmp	lr, r1
 8005d4a:	f000 80c0 	beq.w	8005ece <HAL_PCD_IRQHandler+0x92a>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d4e:	f1ba 0f00 	cmp.w	sl, #0
 8005d52:	d104      	bne.n	8005d5e <HAL_PCD_IRQHandler+0x7ba>
 8005d54:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	f000 818c 	beq.w	8006076 <HAL_PCD_IRQHandler+0xad2>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f009 fafb 	bl	800f35c <HAL_PCD_DataOutStageCallback>
 8005d66:	e738      	b.n	8005bda <HAL_PCD_IRQHandler+0x636>
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d68:	9804      	ldr	r0, [sp, #16]
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	f004 fa16 	bl	800a19c <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005d70:	f898 3017 	ldrb.w	r3, [r8, #23]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f000 80b2 	beq.w	8005ede <HAL_PCD_IRQHandler+0x93a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	e6b6      	b.n	8005aee <HAL_PCD_IRQHandler+0x54a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d80:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005d84:	421f      	tst	r7, r3
 8005d86:	f43f ac48 	beq.w	800561a <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d8a:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8005d8e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8005d92:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8005d96:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	4617      	mov	r7, r2
 8005d9e:	f004 fc7d 	bl	800a69c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005da2:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005da6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005da8:	443b      	add	r3, r7
 8005daa:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dae:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8005db2:	443b      	add	r3, r7
 8005db4:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8005db8:	e42f      	b.n	800561a <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f009 fafc 	bl	800f3b8 <HAL_PCD_SuspendCallback>
 8005dc0:	e589      	b.n	80058d6 <HAL_PCD_IRQHandler+0x332>
        HAL_PCD_DisconnectCallback(hpcd);
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f009 fb20 	bl	800f408 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	e579      	b.n	80058c0 <HAL_PCD_IRQHandler+0x31c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dcc:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005dd6:	f1ba 0f00 	cmp.w	sl, #0
 8005dda:	f47f ae75 	bne.w	8005ac8 <HAL_PCD_IRQHandler+0x524>
 8005dde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f47f ae71 	bne.w	8005ac8 <HAL_PCD_IRQHandler+0x524>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005dec:	f004 fd4a 	bl	800a884 <USB_EP0_OutStart>
 8005df0:	e66a      	b.n	8005ac8 <HAL_PCD_IRQHandler+0x524>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df2:	0418      	lsls	r0, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005df4:	bf44      	itt	mi
 8005df6:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8005dfa:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f009 faa7 	bl	800f350 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e02:	79a9      	ldrb	r1, [r5, #6]
 8005e04:	2901      	cmp	r1, #1
 8005e06:	f47f aeec 	bne.w	8005be2 <HAL_PCD_IRQHandler+0x63e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e0a:	6828      	ldr	r0, [r5, #0]
 8005e0c:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8005e10:	f004 fd38 	bl	800a884 <USB_EP0_OutStart>
 8005e14:	e6e5      	b.n	8005be2 <HAL_PCD_IRQHandler+0x63e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e16:	0719      	lsls	r1, r3, #28
 8005e18:	f140 8091 	bpl.w	8005f3e <HAL_PCD_IRQHandler+0x99a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e1c:	497c      	ldr	r1, [pc, #496]	@ (8006010 <HAL_PCD_IRQHandler+0xa6c>)
 8005e1e:	458e      	cmp	lr, r1
 8005e20:	f67f aedb 	bls.w	8005bda <HAL_PCD_IRQHandler+0x636>
 8005e24:	0418      	lsls	r0, r3, #16
 8005e26:	f57f aed8 	bpl.w	8005bda <HAL_PCD_IRQHandler+0x636>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e2e:	6091      	str	r1, [r2, #8]
 8005e30:	e6d3      	b.n	8005bda <HAL_PCD_IRQHandler+0x636>
  if (ep->xfer_len <= ep->xfer_count)
 8005e32:	9f06      	ldr	r7, [sp, #24]
 8005e34:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e38:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8005e3a:	429d      	cmp	r5, r3
 8005e3c:	f63f ae1f 	bhi.w	8005a7e <HAL_PCD_IRQHandler+0x4da>
 8005e40:	e69a      	b.n	8005b78 <HAL_PCD_IRQHandler+0x5d4>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e42:	2900      	cmp	r1, #0
 8005e44:	f6bf acc4 	bge.w	80057d0 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e48:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e4a:	f884 20cb 	strb.w	r2, [r4, #203]	@ 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e4e:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8005e52:	f004 fbc3 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e56:	7923      	ldrb	r3, [r4, #4]
 8005e58:	e4ba      	b.n	80057d0 <HAL_PCD_IRQHandler+0x22c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	f504 711e 	add.w	r1, r4, #632	@ 0x278
 8005e60:	f004 fbbc 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e64:	7923      	ldrb	r3, [r4, #4]
 8005e66:	e418      	b.n	800569a <HAL_PCD_IRQHandler+0xf6>
              ep->is_iso_incomplete = 0U;
 8005e68:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e6a:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 8005e6c:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e70:	4628      	mov	r0, r5
 8005e72:	f009 fabd 	bl	800f3f0 <HAL_PCD_ISOOUTIncompleteCallback>
 8005e76:	e6ca      	b.n	8005c0e <HAL_PCD_IRQHandler+0x66a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	f6bf acb2 	bge.w	80057e2 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e7e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e80:	f884 20ef 	strb.w	r2, [r4, #239]	@ 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e84:	f104 01ec 	add.w	r1, r4, #236	@ 0xec
 8005e88:	f004 fba8 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e8c:	7923      	ldrb	r3, [r4, #4]
 8005e8e:	e4a8      	b.n	80057e2 <HAL_PCD_IRQHandler+0x23e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	f504 7127 	add.w	r1, r4, #668	@ 0x29c
 8005e96:	f004 fba1 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e9a:	7923      	ldrb	r3, [r4, #4]
 8005e9c:	e404      	b.n	80056a8 <HAL_PCD_IRQHandler+0x104>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	f6bf aca8 	bge.w	80057f4 <HAL_PCD_IRQHandler+0x250>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ea4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ea6:	f884 2113 	strb.w	r2, [r4, #275]	@ 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005eaa:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 8005eae:	f004 fb95 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eb2:	7923      	ldrb	r3, [r4, #4]
 8005eb4:	e49e      	b.n	80057f4 <HAL_PCD_IRQHandler+0x250>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eb6:	2900      	cmp	r1, #0
 8005eb8:	f6bf aca5 	bge.w	8005806 <HAL_PCD_IRQHandler+0x262>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ebc:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ebe:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ec2:	f504 719a 	add.w	r1, r4, #308	@ 0x134
 8005ec6:	f004 fb89 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eca:	7923      	ldrb	r3, [r4, #4]
 8005ecc:	e49b      	b.n	8005806 <HAL_PCD_IRQHandler+0x262>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ece:	0419      	lsls	r1, r3, #16
 8005ed0:	d4ab      	bmi.n	8005e2a <HAL_PCD_IRQHandler+0x886>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ed2:	069b      	lsls	r3, r3, #26
 8005ed4:	f57f af43 	bpl.w	8005d5e <HAL_PCD_IRQHandler+0x7ba>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ed8:	2120      	movs	r1, #32
 8005eda:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005edc:	e73f      	b.n	8005d5e <HAL_PCD_IRQHandler+0x7ba>
              ep->is_iso_incomplete = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f009 fa86 	bl	800f3f8 <HAL_PCD_ISOINIncompleteCallback>
 8005eec:	e745      	b.n	8005d7a <HAL_PCD_IRQHandler+0x7d6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	f6bf ac92 	bge.w	8005818 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ef4:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ef6:	f884 215b 	strb.w	r2, [r4, #347]	@ 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005efa:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 8005efe:	f004 fb6d 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f02:	7923      	ldrb	r3, [r4, #4]
 8005f04:	e488      	b.n	8005818 <HAL_PCD_IRQHandler+0x274>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	f504 7142 	add.w	r1, r4, #776	@ 0x308
 8005f0c:	f004 fb66 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f10:	7923      	ldrb	r3, [r4, #4]
 8005f12:	f7ff bbde 	b.w	80056d2 <HAL_PCD_IRQHandler+0x12e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f16:	2900      	cmp	r1, #0
 8005f18:	f6bf ac87 	bge.w	800582a <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f1c:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f1e:	f884 217f 	strb.w	r2, [r4, #383]	@ 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f22:	f504 71be 	add.w	r1, r4, #380	@ 0x17c
 8005f26:	f004 fb59 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f2a:	7923      	ldrb	r3, [r4, #4]
 8005f2c:	e47d      	b.n	800582a <HAL_PCD_IRQHandler+0x286>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	f504 714b 	add.w	r1, r4, #812	@ 0x32c
 8005f34:	f004 fb52 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f38:	7923      	ldrb	r3, [r4, #4]
 8005f3a:	f7ff bbd1 	b.w	80056e0 <HAL_PCD_IRQHandler+0x13c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f3e:	0699      	lsls	r1, r3, #26
 8005f40:	d572      	bpl.n	8006028 <HAL_PCD_IRQHandler+0xa84>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f42:	2120      	movs	r1, #32
 8005f44:	6091      	str	r1, [r2, #8]
 8005f46:	e648      	b.n	8005bda <HAL_PCD_IRQHandler+0x636>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f48:	2900      	cmp	r1, #0
 8005f4a:	f6bf ac77 	bge.w	800583c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f4e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f50:	f884 21a3 	strb.w	r2, [r4, #419]	@ 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f54:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8005f58:	f004 fb40 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f5c:	7923      	ldrb	r3, [r4, #4]
 8005f5e:	e46d      	b.n	800583c <HAL_PCD_IRQHandler+0x298>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 8005f66:	f004 fb39 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f6a:	7923      	ldrb	r3, [r4, #4]
 8005f6c:	f7ff bbbf 	b.w	80056ee <HAL_PCD_IRQHandler+0x14a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f70:	2900      	cmp	r1, #0
 8005f72:	f6bf ac6c 	bge.w	800584e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f76:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f78:	f884 21c7 	strb.w	r2, [r4, #455]	@ 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f7c:	f504 71e2 	add.w	r1, r4, #452	@ 0x1c4
 8005f80:	f004 fb2c 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f84:	7923      	ldrb	r3, [r4, #4]
 8005f86:	e462      	b.n	800584e <HAL_PCD_IRQHandler+0x2aa>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	f504 715d 	add.w	r1, r4, #884	@ 0x374
 8005f8e:	f004 fb25 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f92:	7923      	ldrb	r3, [r4, #4]
 8005f94:	f7ff bbb2 	b.w	80056fc <HAL_PCD_IRQHandler+0x158>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	f6bf ac61 	bge.w	8005860 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f9e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005fa0:	f884 21eb 	strb.w	r2, [r4, #491]	@ 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fa4:	f504 71f4 	add.w	r1, r4, #488	@ 0x1e8
 8005fa8:	f004 fb18 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fac:	7923      	ldrb	r3, [r4, #4]
 8005fae:	e457      	b.n	8005860 <HAL_PCD_IRQHandler+0x2bc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8005fb6:	f004 fb11 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fba:	7923      	ldrb	r3, [r4, #4]
 8005fbc:	f7ff bba5 	b.w	800570a <HAL_PCD_IRQHandler+0x166>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	f6bf ac56 	bge.w	8005872 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fc6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005fc8:	f884 220f 	strb.w	r2, [r4, #527]	@ 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fcc:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8005fd0:	f004 fb04 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fd4:	7923      	ldrb	r3, [r4, #4]
 8005fd6:	e44c      	b.n	8005872 <HAL_PCD_IRQHandler+0x2ce>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 8005fde:	f004 fafd 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fe2:	7923      	ldrb	r3, [r4, #4]
 8005fe4:	f7ff bb98 	b.w	8005718 <HAL_PCD_IRQHandler+0x174>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	f6bf ac4b 	bge.w	8005884 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fee:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ff0:	f884 2233 	strb.w	r2, [r4, #563]	@ 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ff4:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 8005ff8:	f004 faf0 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ffc:	7923      	ldrb	r3, [r4, #4]
 8005ffe:	e441      	b.n	8005884 <HAL_PCD_IRQHandler+0x2e0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 8006006:	f004 fae9 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800600a:	7923      	ldrb	r3, [r4, #4]
 800600c:	f7ff bb8b 	b.w	8005726 <HAL_PCD_IRQHandler+0x182>
 8006010:	4f54300a 	.word	0x4f54300a
 8006014:	4f54310a 	.word	0x4f54310a
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 800601e:	f004 fadd 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006022:	7923      	ldrb	r3, [r4, #4]
 8006024:	f7ff bb86 	b.w	8005734 <HAL_PCD_IRQHandler+0x190>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006028:	f013 0f28 	tst.w	r3, #40	@ 0x28
 800602c:	f47f add5 	bne.w	8005bda <HAL_PCD_IRQHandler+0x636>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006030:	491b      	ldr	r1, [pc, #108]	@ (80060a0 <HAL_PCD_IRQHandler+0xafc>)
 8006032:	458e      	cmp	lr, r1
 8006034:	d902      	bls.n	800603c <HAL_PCD_IRQHandler+0xa98>
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	f53f aef7 	bmi.w	8005e2a <HAL_PCD_IRQHandler+0x886>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800603c:	6911      	ldr	r1, [r2, #16]
 800603e:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8006042:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8006046:	1a52      	subs	r2, r2, r1
 8006048:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 800604c:	f1ba 0f00 	cmp.w	sl, #0
 8006050:	f47f ae85 	bne.w	8005d5e <HAL_PCD_IRQHandler+0x7ba>
          if (ep->xfer_len == 0U)
 8006054:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8006058:	b1d9      	cbz	r1, 8006092 <HAL_PCD_IRQHandler+0xaee>
            ep->xfer_buff += ep->xfer_count;
 800605a:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 800605e:	4411      	add	r1, r2
 8006060:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006064:	e67b      	b.n	8005d5e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
 800606c:	f004 fab6 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006070:	7923      	ldrb	r3, [r4, #4]
 8006072:	f7ff bb66 	b.w	8005742 <HAL_PCD_IRQHandler+0x19e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006076:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 800607a:	4651      	mov	r1, sl
 800607c:	f004 fc02 	bl	800a884 <USB_EP0_OutStart>
 8006080:	e66d      	b.n	8005d5e <HAL_PCD_IRQHandler+0x7ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	f204 414c 	addw	r1, r4, #1100	@ 0x44c
 8006088:	f004 faa8 	bl	800a5dc <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800608c:	7923      	ldrb	r3, [r4, #4]
 800608e:	f7ff bb5f 	b.w	8005750 <HAL_PCD_IRQHandler+0x1ac>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006092:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8006096:	2101      	movs	r1, #1
 8006098:	f004 fbf4 	bl	800a884 <USB_EP0_OutStart>
 800609c:	e65f      	b.n	8005d5e <HAL_PCD_IRQHandler+0x7ba>
 800609e:	bf00      	nop
 80060a0:	4f54300a 	.word	0x4f54300a

080060a4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80060a4:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 80060a8:	2a01      	cmp	r2, #1
 80060aa:	d00c      	beq.n	80060c6 <HAL_PCD_SetAddress+0x22>
{
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80060b0:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060b2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80060b4:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80060b8:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060ba:	f004 fb6f 	bl	800a79c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060be:	2000      	movs	r0, #0
 80060c0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80060c4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80060c6:	2002      	movs	r0, #2
}
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <HAL_PCD_EP_Open>:
{
 80060cc:	b510      	push	{r4, lr}
 80060ce:	f001 0e0f 	and.w	lr, r1, #15
 80060d2:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80060d6:	0609      	lsls	r1, r1, #24
{
 80060d8:	4604      	mov	r4, r0
 80060da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80060de:	d426      	bmi.n	800612e <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e0:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 80060e4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80060e6:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 80060ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80060ee:	f04f 0c00 	mov.w	ip, #0
 80060f2:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80060f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80060fa:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80060fc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fe:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8006102:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8006104:	b10a      	cbz	r2, 800610a <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8006106:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800610a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800610c:	bf04      	itt	eq
 800610e:	2300      	moveq	r3, #0
 8006110:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8006112:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8006116:	2b01      	cmp	r3, #1
 8006118:	d015      	beq.n	8006146 <HAL_PCD_EP_Open+0x7a>
 800611a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800611c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800611e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006122:	f004 f895 	bl	800a250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006126:	2000      	movs	r0, #0
 8006128:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800612c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612e:	f10c 0114 	add.w	r1, ip, #20
 8006132:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006134:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8006138:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800613c:	f04f 0c01 	mov.w	ip, #1
 8006140:	f880 c015 	strb.w	ip, [r0, #21]
 8006144:	e7d7      	b.n	80060f6 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8006146:	2002      	movs	r0, #2
}
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop

0800614c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800614c:	f001 030f 	and.w	r3, r1, #15
 8006150:	f001 020f 	and.w	r2, r1, #15
{
 8006154:	b510      	push	{r4, lr}
 8006156:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800615a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800615c:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 800615e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8006162:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006166:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 800616a:	d415      	bmi.n	8006198 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800616c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006170:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8006172:	f04f 0c00 	mov.w	ip, #0
 8006176:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 800617a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800617c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8006180:	2b01      	cmp	r3, #1
 8006182:	d014      	beq.n	80061ae <HAL_PCD_EP_Close+0x62>
 8006184:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006186:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006188:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800618c:	f004 f8a8 	bl	800a2e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006190:	2000      	movs	r0, #0
 8006192:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8006196:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006198:	3314      	adds	r3, #20
 800619a:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800619c:	f04f 0c01 	mov.w	ip, #1
 80061a0:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80061a6:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d1ea      	bne.n	8006184 <HAL_PCD_EP_Close+0x38>
 80061ae:	2002      	movs	r0, #2
}
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop

080061b4 <HAL_PCD_EP_Receive>:
{
 80061b4:	b510      	push	{r4, lr}
 80061b6:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 80061ba:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 80061be:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 80061c2:	4614      	mov	r4, r2
  ep->xfer_len = len;
 80061c4:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 80061c8:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ca:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 80061ce:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 80061d2:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 80061d6:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 80061da:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061dc:	2124      	movs	r1, #36	@ 0x24
 80061de:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 80061e2:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e4:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 80061e8:	bf08      	it	eq
 80061ea:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061ee:	6800      	ldr	r0, [r0, #0]
 80061f0:	f004 f8d8 	bl	800a3a4 <USB_EPStartXfer>
}
 80061f4:	2000      	movs	r0, #0
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061f8:	f001 010f 	and.w	r1, r1, #15
 80061fc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006200:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006204:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop

0800620c <HAL_PCD_EP_Transmit>:
{
 800620c:	b510      	push	{r4, lr}
 800620e:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8006212:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8006216:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 800621a:	4614      	mov	r4, r2
  ep->xfer_len = len;
 800621c:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 8006226:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006228:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 800622c:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8006230:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8006234:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006236:	2124      	movs	r1, #36	@ 0x24
 8006238:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 800623c:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800623e:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 8006242:	bf08      	it	eq
 8006244:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006248:	6800      	ldr	r0, [r0, #0]
 800624a:	f004 f8ab 	bl	800a3a4 <USB_EPStartXfer>
}
 800624e:	2000      	movs	r0, #0
 8006250:	bd10      	pop	{r4, pc}
 8006252:	bf00      	nop

08006254 <HAL_PCD_EP_SetStall>:
{
 8006254:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006256:	7903      	ldrb	r3, [r0, #4]
 8006258:	f001 050f 	and.w	r5, r1, #15
 800625c:	42ab      	cmp	r3, r5
 800625e:	d332      	bcc.n	80062c6 <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8006260:	060b      	lsls	r3, r1, #24
 8006262:	4604      	mov	r4, r0
 8006264:	d41c      	bmi.n	80062a0 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8006266:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800626a:	2224      	movs	r2, #36	@ 0x24
 800626c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8006270:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8006274:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006282:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8006284:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8006288:	429a      	cmp	r2, r3
 800628a:	d01a      	beq.n	80062c2 <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800628c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800628e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006292:	f004 fa29 	bl	800a6e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006296:	b1c5      	cbz	r5, 80062ca <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 8006298:	2000      	movs	r0, #0
 800629a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800629e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80062a0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a4:	2124      	movs	r1, #36	@ 0x24
 80062a6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80062aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80062ae:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062b0:	3114      	adds	r1, #20
    ep->is_in = 1U;
 80062b2:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 80062b4:	2301      	movs	r3, #1
 80062b6:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062b8:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80062ba:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 80062be:	429a      	cmp	r2, r3
 80062c0:	d1e4      	bne.n	800628c <HAL_PCD_EP_SetStall+0x38>
 80062c2:	2002      	movs	r0, #2
}
 80062c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80062c6:	2001      	movs	r0, #1
}
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062ca:	79a1      	ldrb	r1, [r4, #6]
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80062d2:	f004 fad7 	bl	800a884 <USB_EP0_OutStart>
 80062d6:	e7df      	b.n	8006298 <HAL_PCD_EP_SetStall+0x44>

080062d8 <HAL_PCD_EP_ClrStall>:
{
 80062d8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062da:	7903      	ldrb	r3, [r0, #4]
 80062dc:	f001 020f 	and.w	r2, r1, #15
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d32e      	bcc.n	8006342 <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80062e4:	4604      	mov	r4, r0
 80062e6:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 80062ea:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80062ee:	0609      	lsls	r1, r1, #24
 80062f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 80062f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 80062f8:	d416      	bmi.n	8006328 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80062fe:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8006300:	2500      	movs	r5, #0
 8006302:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 8006306:	2500      	movs	r5, #0
 8006308:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800630a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800630c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8006310:	2b01      	cmp	r3, #1
 8006312:	d014      	beq.n	800633e <HAL_PCD_EP_ClrStall+0x66>
 8006314:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006316:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006318:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800631c:	f004 fa12 	bl	800a744 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006320:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 8006324:	4628      	mov	r0, r5
}
 8006326:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	3314      	adds	r3, #20
 800632a:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 800632c:	2501      	movs	r5, #1
 800632e:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8006330:	2500      	movs	r5, #0
 8006332:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006334:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006336:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800633a:	2b01      	cmp	r3, #1
 800633c:	d1ea      	bne.n	8006314 <HAL_PCD_EP_ClrStall+0x3c>
 800633e:	2002      	movs	r0, #2
}
 8006340:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006342:	2001      	movs	r0, #1
}
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	bf00      	nop

08006348 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8006348:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 800634c:	2b01      	cmp	r3, #1
 800634e:	d015      	beq.n	800637c <HAL_PCD_EP_Flush+0x34>
 8006350:	2301      	movs	r3, #1
{
 8006352:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006354:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 8006358:	060b      	lsls	r3, r1, #24
 800635a:	4604      	mov	r4, r0
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800635c:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 800635e:	d405      	bmi.n	800636c <HAL_PCD_EP_Flush+0x24>
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006360:	f003 ff44 	bl	800a1ec <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8006364:	2000      	movs	r0, #0
 8006366:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800636a:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800636c:	f001 010f 	and.w	r1, r1, #15
 8006370:	f003 ff14 	bl	800a19c <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8006374:	2000      	movs	r0, #0
 8006376:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800637a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800637c:	2002      	movs	r0, #2
}
 800637e:	4770      	bx	lr

08006380 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006380:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006382:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006384:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  if (fifo == 0U)
 8006386:	b919      	cbnz	r1, 8006390 <HAL_PCDEx_SetTxFiFo+0x10>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006388:	4313      	orrs	r3, r2
 800638a:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800638c:	2000      	movs	r0, #0
 800638e:	4770      	bx	lr
{
 8006390:	b430      	push	{r4, r5}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006392:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8006394:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006396:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800639a:	d06b      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800639c:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
    for (i = 0U; i < (fifo - 1U); i++)
 80063a0:	2901      	cmp	r1, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063a6:	d065      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063a8:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    for (i = 0U; i < (fifo - 1U); i++)
 80063ac:	2902      	cmp	r1, #2
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063b2:	d05f      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063b4:	f8d0 410c 	ldr.w	r4, [r0, #268]	@ 0x10c
    for (i = 0U; i < (fifo - 1U); i++)
 80063b8:	2903      	cmp	r1, #3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063be:	d059      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063c0:	f8d0 4110 	ldr.w	r4, [r0, #272]	@ 0x110
    for (i = 0U; i < (fifo - 1U); i++)
 80063c4:	2904      	cmp	r1, #4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063ca:	d053      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063cc:	f8d0 4114 	ldr.w	r4, [r0, #276]	@ 0x114
    for (i = 0U; i < (fifo - 1U); i++)
 80063d0:	2905      	cmp	r1, #5
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063d6:	d04d      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063d8:	f8d0 4118 	ldr.w	r4, [r0, #280]	@ 0x118
    for (i = 0U; i < (fifo - 1U); i++)
 80063dc:	2906      	cmp	r1, #6
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063e2:	d047      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063e4:	f8d0 411c 	ldr.w	r4, [r0, #284]	@ 0x11c
    for (i = 0U; i < (fifo - 1U); i++)
 80063e8:	2907      	cmp	r1, #7
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063ee:	d041      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063f0:	f8d0 4120 	ldr.w	r4, [r0, #288]	@ 0x120
    for (i = 0U; i < (fifo - 1U); i++)
 80063f4:	2908      	cmp	r1, #8
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80063fa:	d03b      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063fc:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
    for (i = 0U; i < (fifo - 1U); i++)
 8006400:	2909      	cmp	r1, #9
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006402:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006406:	d035      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006408:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
    for (i = 0U; i < (fifo - 1U); i++)
 800640c:	290a      	cmp	r1, #10
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800640e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006412:	d02f      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006414:	f8d0 412c 	ldr.w	r4, [r0, #300]	@ 0x12c
    for (i = 0U; i < (fifo - 1U); i++)
 8006418:	290b      	cmp	r1, #11
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800641a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800641e:	d029      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006420:	f8d0 4130 	ldr.w	r4, [r0, #304]	@ 0x130
    for (i = 0U; i < (fifo - 1U); i++)
 8006424:	290c      	cmp	r1, #12
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006426:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800642a:	d023      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800642c:	f8d0 4134 	ldr.w	r4, [r0, #308]	@ 0x134
    for (i = 0U; i < (fifo - 1U); i++)
 8006430:	290d      	cmp	r1, #13
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006432:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006436:	d01d      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006438:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
    for (i = 0U; i < (fifo - 1U); i++)
 800643c:	290e      	cmp	r1, #14
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800643e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006442:	d017      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006444:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
    for (i = 0U; i < (fifo - 1U); i++)
 8006448:	290f      	cmp	r1, #15
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800644a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800644e:	d011      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006450:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
    for (i = 0U; i < (fifo - 1U); i++)
 8006454:	2910      	cmp	r1, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006456:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800645a:	d00b      	beq.n	8006474 <HAL_PCDEx_SetTxFiFo+0xf4>
 800645c:	2410      	movs	r4, #16
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800645e:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8006462:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8006466:	3401      	adds	r4, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006468:	f8dc 5004 	ldr.w	r5, [ip, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800646c:	428c      	cmp	r4, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800646e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006472:	d3f4      	bcc.n	800645e <HAL_PCDEx_SetTxFiFo+0xde>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006474:	3140      	adds	r1, #64	@ 0x40
 8006476:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800647a:	431a      	orrs	r2, r3
}
 800647c:	2000      	movs	r0, #0
 800647e:	bc30      	pop	{r4, r5}
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006480:	604a      	str	r2, [r1, #4]
}
 8006482:	4770      	bx	lr

08006484 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006484:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8006486:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8006488:	6259      	str	r1, [r3, #36]	@ 0x24
}
 800648a:	4770      	bx	lr

0800648c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006490:	2800      	cmp	r0, #0
 8006492:	f000 81d8 	beq.w	8006846 <HAL_RCC_OscConfig+0x3b6>
{
 8006496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649a:	6803      	ldr	r3, [r0, #0]
 800649c:	07dd      	lsls	r5, r3, #31
{
 800649e:	b082      	sub	sp, #8
 80064a0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064a2:	d52f      	bpl.n	8006504 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064a4:	499d      	ldr	r1, [pc, #628]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 80064a6:	688a      	ldr	r2, [r1, #8]
 80064a8:	f002 020c 	and.w	r2, r2, #12
 80064ac:	2a04      	cmp	r2, #4
 80064ae:	f000 80ec 	beq.w	800668a <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064b2:	688a      	ldr	r2, [r1, #8]
 80064b4:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064b8:	2a08      	cmp	r2, #8
 80064ba:	f000 80e2 	beq.w	8006682 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c4:	f000 80eb 	beq.w	800669e <HAL_RCC_OscConfig+0x20e>
 80064c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064cc:	f000 8173 	beq.w	80067b6 <HAL_RCC_OscConfig+0x326>
 80064d0:	4d92      	ldr	r5, [pc, #584]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 80064d2:	682a      	ldr	r2, [r5, #0]
 80064d4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	682a      	ldr	r2, [r5, #0]
 80064dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064e0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 80e0 	bne.w	80066a8 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fe fa52 	bl	8004990 <HAL_GetTick>
 80064ec:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ee:	e005      	b.n	80064fc <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fe fa4e 	bl	8004990 <HAL_GetTick>
 80064f4:	1b80      	subs	r0, r0, r6
 80064f6:	2864      	cmp	r0, #100	@ 0x64
 80064f8:	f200 8100 	bhi.w	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	039f      	lsls	r7, r3, #14
 8006500:	d4f6      	bmi.n	80064f0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	079d      	lsls	r5, r3, #30
 8006506:	d528      	bpl.n	800655a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006508:	4a84      	ldr	r2, [pc, #528]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 800650a:	6891      	ldr	r1, [r2, #8]
 800650c:	f011 0f0c 	tst.w	r1, #12
 8006510:	f000 809b 	beq.w	800664a <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006514:	6891      	ldr	r1, [r2, #8]
 8006516:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800651a:	2908      	cmp	r1, #8
 800651c:	f000 8091 	beq.w	8006642 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006520:	68e3      	ldr	r3, [r4, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 810c 	beq.w	8006740 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006528:	4b7d      	ldr	r3, [pc, #500]	@ (8006720 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652a:	4e7c      	ldr	r6, [pc, #496]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006530:	f7fe fa2e 	bl	8004990 <HAL_GetTick>
 8006534:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006536:	e005      	b.n	8006544 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006538:	f7fe fa2a 	bl	8004990 <HAL_GetTick>
 800653c:	1b40      	subs	r0, r0, r5
 800653e:	2802      	cmp	r0, #2
 8006540:	f200 80dc 	bhi.w	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	079f      	lsls	r7, r3, #30
 8006548:	d5f6      	bpl.n	8006538 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654a:	6833      	ldr	r3, [r6, #0]
 800654c:	6922      	ldr	r2, [r4, #16]
 800654e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006556:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	071a      	lsls	r2, r3, #28
 800655c:	d45c      	bmi.n	8006618 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800655e:	075d      	lsls	r5, r3, #29
 8006560:	d53a      	bpl.n	80065d8 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006562:	4a6e      	ldr	r2, [pc, #440]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 8006564:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006566:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800656a:	f040 8088 	bne.w	800667e <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006576:	6413      	str	r3, [r2, #64]	@ 0x40
 8006578:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800657a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006582:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006584:	4e67      	ldr	r6, [pc, #412]	@ (8006724 <HAL_RCC_OscConfig+0x294>)
 8006586:	6833      	ldr	r3, [r6, #0]
 8006588:	05d8      	lsls	r0, r3, #23
 800658a:	f140 80a7 	bpl.w	80066dc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	f000 80b7 	beq.w	8006704 <HAL_RCC_OscConfig+0x274>
 8006596:	2b05      	cmp	r3, #5
 8006598:	f000 811d 	beq.w	80067d6 <HAL_RCC_OscConfig+0x346>
 800659c:	4e5f      	ldr	r6, [pc, #380]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 800659e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	6732      	str	r2, [r6, #112]	@ 0x70
 80065a6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80065a8:	f022 0204 	bic.w	r2, r2, #4
 80065ac:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 80ad 	bne.w	800670e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b4:	f7fe f9ec 	bl	8004990 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80065bc:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065be:	e005      	b.n	80065cc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fe f9e6 	bl	8004990 <HAL_GetTick>
 80065c4:	1bc0      	subs	r0, r0, r7
 80065c6:	4540      	cmp	r0, r8
 80065c8:	f200 8098 	bhi.w	80066fc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065cc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80065ce:	079b      	lsls	r3, r3, #30
 80065d0:	d4f6      	bmi.n	80065c0 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	f040 80f9 	bne.w	80067ca <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065d8:	69a3      	ldr	r3, [r4, #24]
 80065da:	b1cb      	cbz	r3, 8006610 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065dc:	4d4f      	ldr	r5, [pc, #316]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 80065de:	68aa      	ldr	r2, [r5, #8]
 80065e0:	f002 020c 	and.w	r2, r2, #12
 80065e4:	2a08      	cmp	r2, #8
 80065e6:	f000 80bc 	beq.w	8006762 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ea:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006720 <HAL_RCC_OscConfig+0x290>)
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065f4:	f000 80f9 	beq.w	80067ea <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fe f9ca 	bl	8004990 <HAL_GetTick>
 80065fc:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	e004      	b.n	800660a <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006600:	f7fe f9c6 	bl	8004990 <HAL_GetTick>
 8006604:	1b00      	subs	r0, r0, r4
 8006606:	2802      	cmp	r0, #2
 8006608:	d878      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	d4f7      	bmi.n	8006600 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006610:	2000      	movs	r0, #0
}
 8006612:	b002      	add	sp, #8
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006618:	6963      	ldr	r3, [r4, #20]
 800661a:	b1fb      	cbz	r3, 800665c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 800661c:	4b40      	ldr	r3, [pc, #256]	@ (8006720 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661e:	4e3f      	ldr	r6, [pc, #252]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8006620:	2201      	movs	r2, #1
 8006622:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8006626:	f7fe f9b3 	bl	8004990 <HAL_GetTick>
 800662a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662c:	e004      	b.n	8006638 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662e:	f7fe f9af 	bl	8004990 <HAL_GetTick>
 8006632:	1b40      	subs	r0, r0, r5
 8006634:	2802      	cmp	r0, #2
 8006636:	d861      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006638:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	d5f7      	bpl.n	800662e <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	e78d      	b.n	800655e <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006642:	6852      	ldr	r2, [r2, #4]
 8006644:	0251      	lsls	r1, r2, #9
 8006646:	f53f af6b 	bmi.w	8006520 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664a:	4a34      	ldr	r2, [pc, #208]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	0792      	lsls	r2, r2, #30
 8006650:	d538      	bpl.n	80066c4 <HAL_RCC_OscConfig+0x234>
 8006652:	68e2      	ldr	r2, [r4, #12]
 8006654:	2a01      	cmp	r2, #1
 8006656:	d035      	beq.n	80066c4 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8006658:	2001      	movs	r0, #1
 800665a:	e7da      	b.n	8006612 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 800665c:	4a30      	ldr	r2, [pc, #192]	@ (8006720 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800665e:	4e2f      	ldr	r6, [pc, #188]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8006660:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8006664:	f7fe f994 	bl	8004990 <HAL_GetTick>
 8006668:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800666a:	e004      	b.n	8006676 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666c:	f7fe f990 	bl	8004990 <HAL_GetTick>
 8006670:	1b40      	subs	r0, r0, r5
 8006672:	2802      	cmp	r0, #2
 8006674:	d842      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006676:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006678:	079f      	lsls	r7, r3, #30
 800667a:	d4f7      	bmi.n	800666c <HAL_RCC_OscConfig+0x1dc>
 800667c:	e7df      	b.n	800663e <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 800667e:	2500      	movs	r5, #0
 8006680:	e780      	b.n	8006584 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006682:	684a      	ldr	r2, [r1, #4]
 8006684:	0251      	lsls	r1, r2, #9
 8006686:	f57f af1a 	bpl.w	80064be <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668a:	4a24      	ldr	r2, [pc, #144]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	0392      	lsls	r2, r2, #14
 8006690:	f57f af38 	bpl.w	8006504 <HAL_RCC_OscConfig+0x74>
 8006694:	6862      	ldr	r2, [r4, #4]
 8006696:	2a00      	cmp	r2, #0
 8006698:	f47f af34 	bne.w	8006504 <HAL_RCC_OscConfig+0x74>
 800669c:	e7dc      	b.n	8006658 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800669e:	4a1f      	ldr	r2, [pc, #124]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 80066a0:	6813      	ldr	r3, [r2, #0]
 80066a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80066a8:	f7fe f972 	bl	8004990 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ac:	4e1b      	ldr	r6, [pc, #108]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80066ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b0:	e004      	b.n	80066bc <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066b2:	f7fe f96d 	bl	8004990 <HAL_GetTick>
 80066b6:	1b40      	subs	r0, r0, r5
 80066b8:	2864      	cmp	r0, #100	@ 0x64
 80066ba:	d81f      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	039b      	lsls	r3, r3, #14
 80066c0:	d5f7      	bpl.n	80066b2 <HAL_RCC_OscConfig+0x222>
 80066c2:	e71e      	b.n	8006502 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c4:	4915      	ldr	r1, [pc, #84]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 80066c6:	6920      	ldr	r0, [r4, #16]
 80066c8:	680a      	ldr	r2, [r1, #0]
 80066ca:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80066ce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80066d2:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066d4:	071a      	lsls	r2, r3, #28
 80066d6:	f57f af42 	bpl.w	800655e <HAL_RCC_OscConfig+0xce>
 80066da:	e79d      	b.n	8006618 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80066e4:	f7fe f954 	bl	8004990 <HAL_GetTick>
 80066e8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ea:	6833      	ldr	r3, [r6, #0]
 80066ec:	05d9      	lsls	r1, r3, #23
 80066ee:	f53f af4e 	bmi.w	800658e <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f2:	f7fe f94d 	bl	8004990 <HAL_GetTick>
 80066f6:	1bc0      	subs	r0, r0, r7
 80066f8:	2802      	cmp	r0, #2
 80066fa:	d9f6      	bls.n	80066ea <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80066fc:	2003      	movs	r0, #3
}
 80066fe:	b002      	add	sp, #8
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006704:	4a05      	ldr	r2, [pc, #20]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
 8006706:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006708:	f043 0301 	orr.w	r3, r3, #1
 800670c:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800670e:	f7fe f93f 	bl	8004990 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006712:	4f02      	ldr	r7, [pc, #8]	@ (800671c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006714:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800671a:	e00a      	b.n	8006732 <HAL_RCC_OscConfig+0x2a2>
 800671c:	40023800 	.word	0x40023800
 8006720:	42470000 	.word	0x42470000
 8006724:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006728:	f7fe f932 	bl	8004990 <HAL_GetTick>
 800672c:	1b80      	subs	r0, r0, r6
 800672e:	4540      	cmp	r0, r8
 8006730:	d8e4      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006734:	079a      	lsls	r2, r3, #30
 8006736:	d5f7      	bpl.n	8006728 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8006738:	2d00      	cmp	r5, #0
 800673a:	f43f af4d 	beq.w	80065d8 <HAL_RCC_OscConfig+0x148>
 800673e:	e044      	b.n	80067ca <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8006740:	4a42      	ldr	r2, [pc, #264]	@ (800684c <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	4e43      	ldr	r6, [pc, #268]	@ (8006850 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8006744:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006746:	f7fe f923 	bl	8004990 <HAL_GetTick>
 800674a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674c:	e004      	b.n	8006758 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800674e:	f7fe f91f 	bl	8004990 <HAL_GetTick>
 8006752:	1b40      	subs	r0, r0, r5
 8006754:	2802      	cmp	r0, #2
 8006756:	d8d1      	bhi.n	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	0799      	lsls	r1, r3, #30
 800675c:	d4f7      	bmi.n	800674e <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	e6fb      	b.n	800655a <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006762:	2b01      	cmp	r3, #1
 8006764:	f43f af78 	beq.w	8006658 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8006768:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006770:	4291      	cmp	r1, r2
 8006772:	f47f af71 	bne.w	8006658 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006776:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006778:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677c:	4291      	cmp	r1, r2
 800677e:	f47f af6b 	bne.w	8006658 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006782:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006784:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006788:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800678a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800678e:	f47f af63 	bne.w	8006658 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006792:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006794:	0852      	lsrs	r2, r2, #1
 8006796:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800679a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800679c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80067a0:	f47f af5a 	bne.w	8006658 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80067a6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067aa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80067ae:	bf14      	ite	ne
 80067b0:	2001      	movne	r0, #1
 80067b2:	2000      	moveq	r0, #0
 80067b4:	e72d      	b.n	8006612 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b6:	4b26      	ldr	r3, [pc, #152]	@ (8006850 <HAL_RCC_OscConfig+0x3c0>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80067c6:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067c8:	e76e      	b.n	80066a8 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ca:	4a21      	ldr	r2, [pc, #132]	@ (8006850 <HAL_RCC_OscConfig+0x3c0>)
 80067cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80067ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80067d4:	e700      	b.n	80065d8 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006850 <HAL_RCC_OscConfig+0x3c0>)
 80067d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067da:	f042 0204 	orr.w	r2, r2, #4
 80067de:	671a      	str	r2, [r3, #112]	@ 0x70
 80067e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067e8:	e791      	b.n	800670e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80067ea:	f7fe f8d1 	bl	8004990 <HAL_GetTick>
 80067ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f0:	e005      	b.n	80067fe <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fe f8cd 	bl	8004990 <HAL_GetTick>
 80067f6:	1b80      	subs	r0, r0, r6
 80067f8:	2802      	cmp	r0, #2
 80067fa:	f63f af7f 	bhi.w	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	0199      	lsls	r1, r3, #6
 8006802:	d4f6      	bmi.n	80067f2 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006804:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006808:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800680a:	430b      	orrs	r3, r1
 800680c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006810:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8006814:	0852      	lsrs	r2, r2, #1
 8006816:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800681a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800681c:	490b      	ldr	r1, [pc, #44]	@ (800684c <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800681e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006822:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006824:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006826:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006828:	f7fe f8b2 	bl	8004990 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682c:	4d08      	ldr	r5, [pc, #32]	@ (8006850 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 800682e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006830:	e005      	b.n	800683e <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006832:	f7fe f8ad 	bl	8004990 <HAL_GetTick>
 8006836:	1b00      	subs	r0, r0, r4
 8006838:	2802      	cmp	r0, #2
 800683a:	f63f af5f 	bhi.w	80066fc <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	019a      	lsls	r2, r3, #6
 8006842:	d5f6      	bpl.n	8006832 <HAL_RCC_OscConfig+0x3a2>
 8006844:	e6e4      	b.n	8006610 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8006846:	2001      	movs	r0, #1
}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	42470000 	.word	0x42470000
 8006850:	40023800 	.word	0x40023800

08006854 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006854:	4916      	ldr	r1, [pc, #88]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8006856:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006858:	688b      	ldr	r3, [r1, #8]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b04      	cmp	r3, #4
 8006860:	d01b      	beq.n	800689a <HAL_RCC_GetSysClockFreq+0x46>
 8006862:	2b08      	cmp	r3, #8
 8006864:	d117      	bne.n	8006896 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006866:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006868:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006870:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006874:	d113      	bne.n	800689e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006876:	480f      	ldr	r0, [pc, #60]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x60>)
 8006878:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800687c:	fba1 0100 	umull	r0, r1, r1, r0
 8006880:	f7f9 fd26 	bl	80002d0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006884:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800688c:	3301      	adds	r3, #1
 800688e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006890:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006894:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006896:	4807      	ldr	r0, [pc, #28]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8006898:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800689a:	4807      	ldr	r0, [pc, #28]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800689c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800689e:	4806      	ldr	r0, [pc, #24]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x64>)
 80068a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80068a4:	2300      	movs	r3, #0
 80068a6:	fba1 0100 	umull	r0, r1, r1, r0
 80068aa:	f7f9 fd11 	bl	80002d0 <__aeabi_uldivmod>
 80068ae:	e7e9      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0x30>
 80068b0:	40023800 	.word	0x40023800
 80068b4:	00f42400 	.word	0x00f42400
 80068b8:	007a1200 	.word	0x007a1200

080068bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80068bc:	2800      	cmp	r0, #0
 80068be:	f000 8087 	beq.w	80069d0 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c2:	4a48      	ldr	r2, [pc, #288]	@ (80069e4 <HAL_RCC_ClockConfig+0x128>)
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	428b      	cmp	r3, r1
{
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	460d      	mov	r5, r1
 80068d2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d4:	d209      	bcs.n	80068ea <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d6:	b2cb      	uxtb	r3, r1
 80068d8:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	428b      	cmp	r3, r1
 80068e2:	d002      	beq.n	80068ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
}
 80068e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0798      	lsls	r0, r3, #30
 80068ee:	d514      	bpl.n	800691a <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	0759      	lsls	r1, r3, #29
 80068f2:	d504      	bpl.n	80068fe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f4:	493c      	ldr	r1, [pc, #240]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 80068f6:	688a      	ldr	r2, [r1, #8]
 80068f8:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80068fc:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	071a      	lsls	r2, r3, #28
 8006900:	d504      	bpl.n	800690c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006902:	4939      	ldr	r1, [pc, #228]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 8006904:	688a      	ldr	r2, [r1, #8]
 8006906:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800690a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800690c:	4936      	ldr	r1, [pc, #216]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 800690e:	68a0      	ldr	r0, [r4, #8]
 8006910:	688a      	ldr	r2, [r1, #8]
 8006912:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006916:	4302      	orrs	r2, r0
 8006918:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	07df      	lsls	r7, r3, #31
 800691c:	d521      	bpl.n	8006962 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	2a01      	cmp	r2, #1
 8006922:	d057      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006924:	1e93      	subs	r3, r2, #2
 8006926:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006928:	4b2f      	ldr	r3, [pc, #188]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 800692a:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800692c:	d94d      	bls.n	80069ca <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692e:	0799      	lsls	r1, r3, #30
 8006930:	d5d8      	bpl.n	80068e4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4e2d      	ldr	r6, [pc, #180]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 8006934:	68b3      	ldr	r3, [r6, #8]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	4313      	orrs	r3, r2
 800693c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800693e:	f7fe f827 	bl	8004990 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006942:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006946:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006948:	e004      	b.n	8006954 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694a:	f7fe f821 	bl	8004990 <HAL_GetTick>
 800694e:	1bc0      	subs	r0, r0, r7
 8006950:	4540      	cmp	r0, r8
 8006952:	d844      	bhi.n	80069de <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006954:	68b3      	ldr	r3, [r6, #8]
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006960:	d1f3      	bne.n	800694a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006962:	4a20      	ldr	r2, [pc, #128]	@ (80069e4 <HAL_RCC_ClockConfig+0x128>)
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	42ab      	cmp	r3, r5
 800696c:	d906      	bls.n	800697c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	b2eb      	uxtb	r3, r5
 8006970:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	42ab      	cmp	r3, r5
 800697a:	d1b3      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	075a      	lsls	r2, r3, #29
 8006980:	d506      	bpl.n	8006990 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006982:	4919      	ldr	r1, [pc, #100]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 8006984:	68e0      	ldr	r0, [r4, #12]
 8006986:	688a      	ldr	r2, [r1, #8]
 8006988:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800698c:	4302      	orrs	r2, r0
 800698e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006990:	071b      	lsls	r3, r3, #28
 8006992:	d507      	bpl.n	80069a4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006994:	4a14      	ldr	r2, [pc, #80]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 8006996:	6921      	ldr	r1, [r4, #16]
 8006998:	6893      	ldr	r3, [r2, #8]
 800699a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800699e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80069a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069a4:	f7ff ff56 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 80069a8:	4a0f      	ldr	r2, [pc, #60]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 80069aa:	4c10      	ldr	r4, [pc, #64]	@ (80069ec <HAL_RCC_ClockConfig+0x130>)
 80069ac:	6892      	ldr	r2, [r2, #8]
 80069ae:	4910      	ldr	r1, [pc, #64]	@ (80069f0 <HAL_RCC_ClockConfig+0x134>)
 80069b0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80069b4:	4603      	mov	r3, r0
 80069b6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80069b8:	480e      	ldr	r0, [pc, #56]	@ (80069f4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ba:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 80069bc:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069be:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80069c0:	f7fd ff9c 	bl	80048fc <HAL_InitTick>
  return HAL_OK;
 80069c4:	2000      	movs	r0, #0
}
 80069c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	0198      	lsls	r0, r3, #6
 80069cc:	d4b1      	bmi.n	8006932 <HAL_RCC_ClockConfig+0x76>
 80069ce:	e789      	b.n	80068e4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80069d0:	2001      	movs	r0, #1
}
 80069d2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <HAL_RCC_ClockConfig+0x12c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	039e      	lsls	r6, r3, #14
 80069da:	d4aa      	bmi.n	8006932 <HAL_RCC_ClockConfig+0x76>
 80069dc:	e782      	b.n	80068e4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80069de:	2003      	movs	r0, #3
 80069e0:	e781      	b.n	80068e6 <HAL_RCC_ClockConfig+0x2a>
 80069e2:	bf00      	nop
 80069e4:	40023c00 	.word	0x40023c00
 80069e8:	40023800 	.word	0x40023800
 80069ec:	08011550 	.word	0x08011550
 80069f0:	20000008 	.word	0x20000008
 80069f4:	20000010 	.word	0x20000010

080069f8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80069f8:	4b01      	ldr	r3, [pc, #4]	@ (8006a00 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000008 	.word	0x20000008

08006a04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a04:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006a06:	4905      	ldr	r1, [pc, #20]	@ (8006a1c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	4a05      	ldr	r2, [pc, #20]	@ (8006a20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006a0c:	6808      	ldr	r0, [r1, #0]
 8006a0e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006a12:	5cd3      	ldrb	r3, [r2, r3]
}
 8006a14:	40d8      	lsrs	r0, r3
 8006a16:	4770      	bx	lr
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	20000008 	.word	0x20000008
 8006a20:	08011548 	.word	0x08011548

08006a24 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a24:	4b04      	ldr	r3, [pc, #16]	@ (8006a38 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006a26:	4905      	ldr	r1, [pc, #20]	@ (8006a3c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4a05      	ldr	r2, [pc, #20]	@ (8006a40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006a2c:	6808      	ldr	r0, [r1, #0]
 8006a2e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006a32:	5cd3      	ldrb	r3, [r2, r3]
}
 8006a34:	40d8      	lsrs	r0, r3
 8006a36:	4770      	bx	lr
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	20000008 	.word	0x20000008
 8006a40:	08011548 	.word	0x08011548

08006a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a46:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a48:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a50:	d10f      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a52:	f013 0f0c 	tst.w	r3, #12
 8006a56:	d16d      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a58:	069d      	lsls	r5, r3, #26
 8006a5a:	f100 80bd 	bmi.w	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a5e:	06db      	lsls	r3, r3, #27
 8006a60:	d504      	bpl.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a62:	4b87      	ldr	r3, [pc, #540]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006a64:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8006a68:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 8006a6c:	2000      	movs	r0, #0
}
 8006a6e:	b003      	add	sp, #12
 8006a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8006a72:	4b84      	ldr	r3, [pc, #528]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a74:	4e84      	ldr	r6, [pc, #528]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006a76:	2200      	movs	r2, #0
 8006a78:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006a7a:	f7fd ff89 	bl	8004990 <HAL_GetTick>
 8006a7e:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a80:	e004      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a82:	f7fd ff85 	bl	8004990 <HAL_GetTick>
 8006a86:	1b43      	subs	r3, r0, r5
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d850      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	0118      	lsls	r0, r3, #4
 8006a90:	d4f7      	bmi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	07d9      	lsls	r1, r3, #31
 8006a96:	d506      	bpl.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a98:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8006a9c:	0712      	lsls	r2, r2, #28
 8006a9e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006aa2:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006aa6:	079a      	lsls	r2, r3, #30
 8006aa8:	d515      	bpl.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x92>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006aaa:	4977      	ldr	r1, [pc, #476]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006aac:	68e2      	ldr	r2, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006aae:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ab2:	6865      	ldr	r5, [r4, #4]
 8006ab4:	0612      	lsls	r2, r2, #24
 8006ab6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8006aba:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8006abe:	4302      	orrs	r2, r0
 8006ac0:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ac4:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8006ac8:	69e2      	ldr	r2, [r4, #28]
 8006aca:	f020 001f 	bic.w	r0, r0, #31
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	4302      	orrs	r2, r0
 8006ad2:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	d509      	bpl.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006ada:	1d20      	adds	r0, r4, #4
 8006adc:	c80b      	ldmia	r0, {r0, r1, r3}
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	4a69      	ldr	r2, [pc, #420]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006ae2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006ae6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006aea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006aee:	4b65      	ldr	r3, [pc, #404]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af0:	4e65      	ldr	r6, [pc, #404]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLI2S_ENABLE();
 8006af2:	2201      	movs	r2, #1
 8006af4:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006af6:	f7fd ff4b 	bl	8004990 <HAL_GetTick>
 8006afa:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006afe:	f7fd ff47 	bl	8004990 <HAL_GetTick>
 8006b02:	1b40      	subs	r0, r0, r5
 8006b04:	2802      	cmp	r0, #2
 8006b06:	d812      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b08:	6833      	ldr	r3, [r6, #0]
 8006b0a:	011f      	lsls	r7, r3, #4
 8006b0c:	d5f7      	bpl.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xba>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	e79f      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8006b12:	f7fd ff3d 	bl	8004990 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b16:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006b1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006b1e:	079a      	lsls	r2, r3, #30
 8006b20:	f100 8090 	bmi.w	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b24:	f7fd ff34 	bl	8004990 <HAL_GetTick>
 8006b28:	1b80      	subs	r0, r0, r6
 8006b2a:	42b8      	cmp	r0, r7
 8006b2c:	d9f6      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        return HAL_TIMEOUT;
 8006b2e:	2003      	movs	r0, #3
}
 8006b30:	b003      	add	sp, #12
 8006b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8006b34:	4b53      	ldr	r3, [pc, #332]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b36:	4e54      	ldr	r6, [pc, #336]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLSAI_DISABLE();
 8006b38:	2200      	movs	r2, #0
 8006b3a:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8006b3c:	f7fd ff28 	bl	8004990 <HAL_GetTick>
 8006b40:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b42:	e004      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b44:	f7fd ff24 	bl	8004990 <HAL_GetTick>
 8006b48:	1b43      	subs	r3, r0, r5
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d8ef      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b4e:	6833      	ldr	r3, [r6, #0]
 8006b50:	0098      	lsls	r0, r3, #2
 8006b52:	d4f7      	bmi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	0751      	lsls	r1, r2, #29
 8006b58:	d515      	bpl.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b5a:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b5c:	f8d6 1088 	ldr.w	r1, [r6, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b60:	6920      	ldr	r0, [r4, #16]
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8006b68:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b72:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8006b76:	6a21      	ldr	r1, [r4, #32]
 8006b78:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8006b7c:	3901      	subs	r1, #1
 8006b7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b82:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b86:	0713      	lsls	r3, r2, #28
 8006b88:	d514      	bpl.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b8c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b92:	6920      	ldr	r0, [r4, #16]
 8006b94:	071b      	lsls	r3, r3, #28
 8006b96:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8006b9a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ba4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8006ba8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006baa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8006bb4:	4b33      	ldr	r3, [pc, #204]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bb6:	4e34      	ldr	r6, [pc, #208]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PLLSAI_ENABLE();
 8006bb8:	2201      	movs	r2, #1
 8006bba:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8006bbc:	f7fd fee8 	bl	8004990 <HAL_GetTick>
 8006bc0:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bc2:	e004      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x18a>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bc4:	f7fd fee4 	bl	8004990 <HAL_GetTick>
 8006bc8:	1b40      	subs	r0, r0, r5
 8006bca:	2802      	cmp	r0, #2
 8006bcc:	d8af      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bce:	6833      	ldr	r3, [r6, #0]
 8006bd0:	009f      	lsls	r7, r3, #2
 8006bd2:	d5f7      	bpl.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	e73f      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    PWR->CR |= PWR_CR_DBP;
 8006bda:	4d2c      	ldr	r5, [pc, #176]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bdc:	2200      	movs	r2, #0
 8006bde:	9201      	str	r2, [sp, #4]
 8006be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006be6:	641a      	str	r2, [r3, #64]	@ 0x40
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006bf2:	682b      	ldr	r3, [r5, #0]
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bf8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006bfa:	f7fd fec9 	bl	8004990 <HAL_GetTick>
 8006bfe:	4606      	mov	r6, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c00:	e004      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fd fec5 	bl	8004990 <HAL_GetTick>
 8006c06:	1b83      	subs	r3, r0, r6
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d890      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	05d8      	lsls	r0, r3, #23
 8006c10:	d5f7      	bpl.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c12:	4d1d      	ldr	r5, [pc, #116]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c14:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c16:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c18:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8006c1c:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8006c20:	d013      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006c22:	428a      	cmp	r2, r1
 8006c24:	d011      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x206>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c26:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c28:	4a16      	ldr	r2, [pc, #88]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c34:	2100      	movs	r1, #0
 8006c36:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8006c3a:	672b      	str	r3, [r5, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c3c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006c3e:	07d9      	lsls	r1, r3, #31
 8006c40:	f53f af67 	bmi.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c46:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8006c4a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8006c4e:	d00c      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
 8006c50:	490d      	ldr	r1, [pc, #52]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006c52:	688a      	ldr	r2, [r1, #8]
 8006c54:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006c58:	608a      	str	r2, [r1, #8]
 8006c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006c5c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8006c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c62:	430b      	orrs	r3, r1
 8006c64:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	e6f9      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c6a:	4807      	ldr	r0, [pc, #28]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006c6c:	6882      	ldr	r2, [r0, #8]
 8006c6e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8006c72:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006c76:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	6082      	str	r2, [r0, #8]
 8006c7e:	e7ec      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x216>
 8006c80:	42471000 	.word	0x42471000
 8006c84:	42470000 	.word	0x42470000
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40007000 	.word	0x40007000

08006c90 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d05f      	beq.n	8006d54 <HAL_RTC_Init+0xc4>
{
 8006c94:	b570      	push	{r4, r5, r6, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c96:	7f43      	ldrb	r3, [r0, #29]
 8006c98:	4604      	mov	r4, r0
 8006c9a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c9e:	b14b      	cbz	r3, 8006cb4 <HAL_RTC_Init+0x24>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca0:	2202      	movs	r2, #2

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ca2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca4:	7762      	strb	r2, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	06d5      	lsls	r5, r2, #27
 8006caa:	d507      	bpl.n	8006cbc <HAL_RTC_Init+0x2c>
    status = HAL_OK;
  }

  if (status == HAL_OK)
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cac:	2301      	movs	r3, #1
 8006cae:	7763      	strb	r3, [r4, #29]
 8006cb0:	2000      	movs	r0, #0
  }

  return status;
}
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8006cb4:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006cb6:	f7fd fb6f 	bl	8004398 <HAL_RTC_MspInit>
 8006cba:	e7f1      	b.n	8006ca0 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cbc:	21ca      	movs	r1, #202	@ 0xca
 8006cbe:	2253      	movs	r2, #83	@ 0x53
 8006cc0:	6259      	str	r1, [r3, #36]	@ 0x24
 8006cc2:	625a      	str	r2, [r3, #36]	@ 0x24
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006cc4:	68dd      	ldr	r5, [r3, #12]
 8006cc6:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8006cca:	d026      	beq.n	8006d1a <HAL_RTC_Init+0x8a>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ccc:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006cd2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8006cd6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006cda:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cdc:	6961      	ldr	r1, [r4, #20]
 8006cde:	6898      	ldr	r0, [r3, #8]
 8006ce0:	432a      	orrs	r2, r5
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ce6:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ce8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006cea:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68a1      	ldr	r1, [r4, #8]
 8006cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006cf4:	611a      	str	r2, [r3, #16]
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	0691      	lsls	r1, r2, #26
 8006d02:	d529      	bpl.n	8006d58 <HAL_RTC_Init+0xc8>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d06:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d10:	21ff      	movs	r1, #255	@ 0xff
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d12:	4302      	orrs	r2, r0
 8006d14:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d16:	6259      	str	r1, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006d18:	e7c8      	b.n	8006cac <HAL_RTC_Init+0x1c>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d20:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006d22:	f7fd fe35 	bl	8004990 <HAL_GetTick>
 8006d26:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d28:	e006      	b.n	8006d38 <HAL_RTC_Init+0xa8>
 8006d2a:	b95d      	cbnz	r5, 8006d44 <HAL_RTC_Init+0xb4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d2c:	f7fd fe30 	bl	8004990 <HAL_GetTick>
 8006d30:	1b80      	subs	r0, r0, r6
 8006d32:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d36:	d809      	bhi.n	8006d4c <HAL_RTC_Init+0xbc>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	0650      	lsls	r0, r2, #25
 8006d3e:	d5f4      	bpl.n	8006d2a <HAL_RTC_Init+0x9a>
    if (status == HAL_OK)
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	d0c3      	beq.n	8006ccc <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d44:	22ff      	movs	r2, #255	@ 0xff
 8006d46:	625a      	str	r2, [r3, #36]	@ 0x24
    return HAL_ERROR;
 8006d48:	2001      	movs	r0, #1
}
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8006d50:	2501      	movs	r5, #1
 8006d52:	e7f1      	b.n	8006d38 <HAL_RTC_Init+0xa8>
    return HAL_ERROR;
 8006d54:	2001      	movs	r0, #1
}
 8006d56:	4770      	bx	lr
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006d58:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <HAL_RTC_Init+0xf4>)
 8006d5a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8006d5c:	f7fd fe18 	bl	8004990 <HAL_GetTick>
 8006d60:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	0692      	lsls	r2, r2, #26
 8006d68:	d4cc      	bmi.n	8006d04 <HAL_RTC_Init+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d6a:	f7fd fe11 	bl	8004990 <HAL_GetTick>
 8006d6e:	1b40      	subs	r0, r0, r5
 8006d70:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d74:	d9f5      	bls.n	8006d62 <HAL_RTC_Init+0xd2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d76:	6823      	ldr	r3, [r4, #0]
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d78:	2104      	movs	r1, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d7a:	22ff      	movs	r2, #255	@ 0xff
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d7c:	7761      	strb	r1, [r4, #29]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006d80:	e7e2      	b.n	8006d48 <HAL_RTC_Init+0xb8>
 8006d82:	bf00      	nop
 8006d84:	00017f5f 	.word	0x00017f5f

08006d88 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d88:	6803      	ldr	r3, [r0, #0]
{
 8006d8a:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d8c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d8e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d90:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d92:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8006d96:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d9a:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8006d9e:	2000      	movs	r0, #0
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006da0:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006da4:	f364 0007 	bfi	r0, r4, #0, #8
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006da8:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006dac:	f36e 200f 	bfi	r0, lr, #8, #8
 8006db0:	f3c3 4506 	ubfx	r5, r3, #16, #7
 8006db4:	f36c 4017 	bfi	r0, ip, #16, #8
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006db8:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006dbc:	f363 601f 	bfi	r0, r3, #24, #8
 8006dc0:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006dc2:	b9da      	cbnz	r2, 8006dfc <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006dc4:	ea4f 131e 	mov.w	r3, lr, lsr #4
 8006dc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006dcc:	f00e 0e0f 	and.w	lr, lr, #15
 8006dd0:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006dd4:	0924      	lsrs	r4, r4, #4
 8006dd6:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8006dda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006dde:	f005 050f 	and.w	r5, r5, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006de2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006de6:	f00c 0c0f 	and.w	ip, ip, #15
 8006dea:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 8006dee:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006df2:	700d      	strb	r5, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006df4:	f881 e001 	strb.w	lr, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006df8:	f881 c002 	strb.w	ip, [r1, #2]
}
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	bd30      	pop	{r4, r5, pc}

08006e00 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e00:	6803      	ldr	r3, [r0, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
{
 8006e04:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e06:	2000      	movs	r0, #0
 8006e08:	f3c3 3e42 	ubfx	lr, r3, #13, #3
 8006e0c:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e10:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e14:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e18:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e1c:	f36e 200f 	bfi	r0, lr, #8, #8
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006e24:	f363 4017 	bfi	r0, r3, #16, #8
 8006e28:	f36c 601f 	bfi	r0, ip, #24, #8
 8006e2c:	6008      	str	r0, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006e2e:	b9d2      	cbnz	r2, 8006e66 <HAL_RTC_GetDate+0x66>
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006e30:	091a      	lsrs	r2, r3, #4
 8006e32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006e3e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006e42:	708b      	strb	r3, [r1, #2]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006e44:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8006e48:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006e4c:	f004 040f 	and.w	r4, r4, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006e54:	f00c 0c0f 	and.w	ip, ip, #15
 8006e58:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 8006e5c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e60:	704c      	strb	r4, [r1, #1]
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e62:	f881 c003 	strb.w	ip, [r1, #3]
}
 8006e66:	2000      	movs	r0, #0
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	bf00      	nop

08006e6c <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006e6c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e76:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop

08006e7c <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8006e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7e:	b089      	sub	sp, #36	@ 0x24
 8006e80:	4605      	mov	r5, r0
 8006e82:	460f      	mov	r7, r1
{
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e84:	f7fd fd84 	bl	8004990 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8006e88:	2300      	movs	r3, #0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e8a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8006e8c:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e8e:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8006e90:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e94:	f001 fedc 	bl	8008c50 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e98:	4604      	mov	r4, r0
 8006e9a:	b110      	cbz	r0, 8006ea2 <SD_FindSCR.constprop.0+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	b009      	add	sp, #36	@ 0x24
 8006ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006ea2:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8006ea4:	6828      	ldr	r0, [r5, #0]
 8006ea6:	0409      	lsls	r1, r1, #16
 8006ea8:	f002 fb88 	bl	80095bc <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eac:	4604      	mov	r4, r0
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d1f4      	bne.n	8006e9c <SD_FindSCR.constprop.0+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	9202      	str	r2, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006eb8:	2108      	movs	r1, #8
 8006eba:	2230      	movs	r2, #48	@ 0x30
 8006ebc:	e9cd 1203 	strd	r1, r2, [sp, #12]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006ec0:	2301      	movs	r3, #1
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006ec2:	2202      	movs	r2, #2
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ec4:	9006      	str	r0, [sp, #24]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006ec6:	a902      	add	r1, sp, #8
 8006ec8:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006eca:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006ecc:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006ece:	f001 fea9 	bl	8008c24 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	f002 fce8 	bl	80098a8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ed8:	4604      	mov	r4, r0
 8006eda:	b140      	cbz	r0, 8006eee <SD_FindSCR.constprop.0+0x72>
 8006edc:	e7de      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006ede:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ee0:	049b      	lsls	r3, r3, #18
 8006ee2:	d515      	bpl.n	8006f10 <SD_FindSCR.constprop.0+0x94>
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006ee4:	f7fd fd54 	bl	8004990 <HAL_GetTick>
 8006ee8:	1b83      	subs	r3, r0, r6
 8006eea:	3301      	adds	r3, #1
 8006eec:	d027      	beq.n	8006f3e <SD_FindSCR.constprop.0+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006eee:	6828      	ldr	r0, [r5, #0]
 8006ef0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ef2:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8006ef6:	d10b      	bne.n	8006f10 <SD_FindSCR.constprop.0+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006ef8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006efa:	029a      	lsls	r2, r3, #10
 8006efc:	d5ef      	bpl.n	8006ede <SD_FindSCR.constprop.0+0x62>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006efe:	f001 fe7b 	bl	8008bf8 <SDIO_ReadFIFO>
 8006f02:	ab08      	add	r3, sp, #32
 8006f04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f08:	3401      	adds	r4, #1
 8006f0a:	f843 0c20 	str.w	r0, [r3, #-32]
 8006f0e:	e7e9      	b.n	8006ee4 <SD_FindSCR.constprop.0+0x68>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006f10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006f12:	0719      	lsls	r1, r3, #28
 8006f14:	d419      	bmi.n	8006f4a <SD_FindSCR.constprop.0+0xce>
 8006f16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006f18:	059a      	lsls	r2, r3, #22
 8006f1a:	d416      	bmi.n	8006f4a <SD_FindSCR.constprop.0+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006f1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	d410      	bmi.n	8006f44 <SD_FindSCR.constprop.0+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006f22:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006f24:	f014 0420 	ands.w	r4, r4, #32
 8006f28:	d112      	bne.n	8006f50 <SD_FindSCR.constprop.0+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f2e:	f240 513a 	movw	r1, #1338	@ 0x53a
 8006f32:	ba12      	rev	r2, r2
 8006f34:	ba1b      	rev	r3, r3
 8006f36:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f38:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8006f3c:	e7ae      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8006f3e:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8006f42:	e7ab      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006f44:	2402      	movs	r4, #2
 8006f46:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f48:	e7a8      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006f4a:	2408      	movs	r4, #8
 8006f4c:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f4e:	e7a5      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006f50:	2420      	movs	r4, #32
 8006f52:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006f54:	e7a2      	b.n	8006e9c <SD_FindSCR.constprop.0+0x20>
 8006f56:	bf00      	nop

08006f58 <HAL_SD_ReadBlocks_DMA>:
{
 8006f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	b087      	sub	sp, #28
  if(NULL == pData)
 8006f60:	2900      	cmp	r1, #0
 8006f62:	d07f      	beq.n	8007064 <HAL_SD_ReadBlocks_DMA+0x10c>
  if(hsd->State == HAL_SD_STATE_READY)
 8006f64:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8006f68:	2801      	cmp	r0, #1
 8006f6a:	fa5f f880 	uxtb.w	r8, r0
 8006f6e:	d166      	bne.n	800703e <HAL_SD_ReadBlocks_DMA+0xe6>
 8006f70:	461e      	mov	r6, r3
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f72:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f74:	4617      	mov	r7, r2
 8006f76:	4432      	add	r2, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f78:	2500      	movs	r5, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f7a:	429a      	cmp	r2, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f7c:	63a5      	str	r5, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f7e:	d908      	bls.n	8006f92 <HAL_SD_ReadBlocks_DMA+0x3a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006f88:	2501      	movs	r5, #1
}
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	b007      	add	sp, #28
 8006f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006f92:	460a      	mov	r2, r1
    hsd->Instance->DCTRL = 0U;
 8006f94:	6821      	ldr	r1, [r4, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006f96:	6c20      	ldr	r0, [r4, #64]	@ 0x40
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006f98:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8007088 <HAL_SD_ReadBlocks_DMA+0x130>
    hsd->State = HAL_SD_STATE_BUSY;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8006fa2:	62cd      	str	r5, [r1, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006fa4:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8006fa6:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006faa:	f043 0302 	orr.w	r3, r3, #2
 8006fae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    hsd->hdmarx->XferAbortCallback = NULL;
 8006fb0:	6505      	str	r5, [r0, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fb2:	6085      	str	r5, [r0, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006fb4:	6805      	ldr	r5, [r0, #0]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006fb6:	4b31      	ldr	r3, [pc, #196]	@ (800707c <HAL_SD_ReadBlocks_DMA+0x124>)
 8006fb8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006fba:	682b      	ldr	r3, [r5, #0]
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006fbc:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006fc0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006fc4:	ea4f 2946 	mov.w	r9, r6, lsl #9
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006fc8:	602b      	str	r3, [r5, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006fca:	3180      	adds	r1, #128	@ 0x80
 8006fcc:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8006fd0:	f7fd fe02 	bl	8004bd8 <HAL_DMA_Start_IT>
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d136      	bne.n	8007048 <HAL_SD_ReadBlocks_DMA+0xf0>
      __HAL_SD_DMA_ENABLE(hsd);
 8006fda:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <HAL_SD_ReadBlocks_DMA+0x128>)
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006fdc:	6820      	ldr	r0, [r4, #0]
      __HAL_SD_DMA_ENABLE(hsd);
 8006fde:	f8c3 858c 	str.w	r8, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fe2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006fe4:	f8cd 9004 	str.w	r9, [sp, #4]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fe8:	2b01      	cmp	r3, #1
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006fea:	f04f 0290 	mov.w	r2, #144	@ 0x90
 8006fee:	f04f 0302 	mov.w	r3, #2
 8006ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	f04f 0301 	mov.w	r3, #1
 8006ffe:	e9cd 1304 	strd	r1, r3, [sp, #16]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007002:	f04f 33ff 	mov.w	r3, #4294967295
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007006:	4669      	mov	r1, sp
        add *= 512U;
 8007008:	bf18      	it	ne
 800700a:	027f      	lslne	r7, r7, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800700c:	9300      	str	r3, [sp, #0]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800700e:	f001 fe09 	bl	8008c24 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8007012:	2e01      	cmp	r6, #1
 8007014:	d92b      	bls.n	800706e <HAL_SD_ReadBlocks_DMA+0x116>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007016:	2382      	movs	r3, #130	@ 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007018:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800701a:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800701c:	4639      	mov	r1, r7
 800701e:	f001 ff51 	bl	8008ec4 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8007022:	2800      	cmp	r0, #0
 8007024:	d0b1      	beq.n	8006f8a <HAL_SD_ReadBlocks_DMA+0x32>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	4a16      	ldr	r2, [pc, #88]	@ (8007084 <HAL_SD_ReadBlocks_DMA+0x12c>)
 800702a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800702c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800702e:	2101      	movs	r1, #1
        hsd->ErrorCode |= errorstate;
 8007030:	4303      	orrs	r3, r0
        hsd->Context = SD_CONTEXT_NONE;
 8007032:	2200      	movs	r2, #0
        hsd->ErrorCode |= errorstate;
 8007034:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007036:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800703a:	6322      	str	r2, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800703c:	e7a4      	b.n	8006f88 <HAL_SD_ReadBlocks_DMA+0x30>
    return HAL_BUSY;
 800703e:	2502      	movs	r5, #2
}
 8007040:	4628      	mov	r0, r5
 8007042:	b007      	add	sp, #28
 8007044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007048:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800704a:	490e      	ldr	r1, [pc, #56]	@ (8007084 <HAL_SD_ReadBlocks_DMA+0x12c>)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800704c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800704e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007052:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007054:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007056:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800705c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800705e:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8007062:	e791      	b.n	8006f88 <HAL_SD_ReadBlocks_DMA+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007064:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007066:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800706a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800706c:	e78c      	b.n	8006f88 <HAL_SD_ReadBlocks_DMA+0x30>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800706e:	2381      	movs	r3, #129	@ 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007070:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007072:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007074:	4639      	mov	r1, r7
 8007076:	f001 fe87 	bl	8008d88 <SDMMC_CmdReadSingleBlock>
 800707a:	e7d2      	b.n	8007022 <HAL_SD_ReadBlocks_DMA+0xca>
 800707c:	080071bd 	.word	0x080071bd
 8007080:	42258000 	.word	0x42258000
 8007084:	004005ff 	.word	0x004005ff
 8007088:	08007205 	.word	0x08007205

0800708c <HAL_SD_WriteBlocks_DMA>:
{
 800708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	b086      	sub	sp, #24
  if(NULL == pData)
 8007094:	2900      	cmp	r1, #0
 8007096:	d06d      	beq.n	8007174 <HAL_SD_WriteBlocks_DMA+0xe8>
  if(hsd->State == HAL_SD_STATE_READY)
 8007098:	461d      	mov	r5, r3
 800709a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d130      	bne.n	8007104 <HAL_SD_WriteBlocks_DMA+0x78>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070a2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80070a4:	460e      	mov	r6, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070a6:	2100      	movs	r1, #0
 80070a8:	6381      	str	r1, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070aa:	1950      	adds	r0, r2, r5
 80070ac:	4298      	cmp	r0, r3
 80070ae:	d82e      	bhi.n	800710e <HAL_SD_WriteBlocks_DMA+0x82>
    hsd->Instance->DCTRL = 0U;
 80070b0:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80070b2:	4f3d      	ldr	r7, [pc, #244]	@ (80071a8 <HAL_SD_WriteBlocks_DMA+0x11c>)
    hsd->State = HAL_SD_STATE_BUSY;
 80070b4:	2303      	movs	r3, #3
 80070b6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80070ba:	62c1      	str	r1, [r0, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80070bc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80070be:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80070c2:	f043 0302 	orr.w	r3, r3, #2
 80070c6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80070c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    hsd->hdmatx->XferAbortCallback = NULL;
 80070ca:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80070ce:	63df      	str	r7, [r3, #60]	@ 0x3c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070d0:	2901      	cmp	r1, #1
      add *= 512U;
 80070d2:	bf18      	it	ne
 80070d4:	0252      	lslne	r2, r2, #9
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80070d6:	4f35      	ldr	r7, [pc, #212]	@ (80071ac <HAL_SD_WriteBlocks_DMA+0x120>)
 80070d8:	64df      	str	r7, [r3, #76]	@ 0x4c
    if(NumberOfBlocks > 1U)
 80070da:	2d01      	cmp	r5, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070dc:	4611      	mov	r1, r2
    if(NumberOfBlocks > 1U)
 80070de:	d94e      	bls.n	800717e <HAL_SD_WriteBlocks_DMA+0xf2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070e0:	23a0      	movs	r3, #160	@ 0xa0
 80070e2:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070e4:	f002 f828 	bl	8009138 <SDMMC_CmdWriteMultiBlock>
 80070e8:	4607      	mov	r7, r0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070ea:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ec:	b1c7      	cbz	r7, 8007120 <HAL_SD_WriteBlocks_DMA+0x94>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070ee:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <HAL_SD_WriteBlocks_DMA+0x124>)
 80070f0:	6393      	str	r3, [r2, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80070f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070f4:	2101      	movs	r1, #1
      hsd->ErrorCode |= errorstate;
 80070f6:	433b      	orrs	r3, r7
      hsd->Context = SD_CONTEXT_NONE;
 80070f8:	2200      	movs	r2, #0
      hsd->ErrorCode |= errorstate;
 80070fa:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070fc:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007100:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8007102:	e008      	b.n	8007116 <HAL_SD_WriteBlocks_DMA+0x8a>
    return HAL_BUSY;
 8007104:	2602      	movs	r6, #2
}
 8007106:	4630      	mov	r0, r6
 8007108:	b006      	add	sp, #24
 800710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800710e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007114:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8007116:	2601      	movs	r6, #1
}
 8007118:	4630      	mov	r0, r6
 800711a:	b006      	add	sp, #24
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007120:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
    __HAL_SD_DMA_ENABLE(hsd);
 8007122:	4b24      	ldr	r3, [pc, #144]	@ (80071b4 <HAL_SD_WriteBlocks_DMA+0x128>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007124:	4631      	mov	r1, r6
    __HAL_SD_DMA_ENABLE(hsd);
 8007126:	f04f 0801 	mov.w	r8, #1
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800712a:	6806      	ldr	r6, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 800712c:	f8c3 858c 	str.w	r8, [r3, #1420]	@ 0x58c
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007130:	6833      	ldr	r3, [r6, #0]
 8007132:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800713a:	f04f 0c40 	mov.w	ip, #64	@ 0x40
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800713e:	026d      	lsls	r5, r5, #9
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007140:	f8c0 c008 	str.w	ip, [r0, #8]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007144:	3280      	adds	r2, #128	@ 0x80
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007146:	6033      	str	r3, [r6, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007148:	08ab      	lsrs	r3, r5, #2
 800714a:	f7fd fd45 	bl	8004bd8 <HAL_DMA_Start_IT>
 800714e:	4606      	mov	r6, r0
 8007150:	b1d8      	cbz	r0, 800718a <HAL_SD_WriteBlocks_DMA+0xfe>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007156:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800715a:	f023 0302 	bic.w	r3, r3, #2
 800715e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007160:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <HAL_SD_WriteBlocks_DMA+0x124>)
 8007162:	6393      	str	r3, [r2, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007164:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800716a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800716c:	f884 8034 	strb.w	r8, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007170:	6327      	str	r7, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8007172:	e7d0      	b.n	8007116 <HAL_SD_WriteBlocks_DMA+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007174:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007176:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800717a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800717c:	e7cb      	b.n	8007116 <HAL_SD_WriteBlocks_DMA+0x8a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800717e:	2390      	movs	r3, #144	@ 0x90
 8007180:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007182:	f001 ff3d 	bl	8009000 <SDMMC_CmdWriteSingleBlock>
 8007186:	4607      	mov	r7, r0
 8007188:	e7af      	b.n	80070ea <HAL_SD_WriteBlocks_DMA+0x5e>
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800718a:	2390      	movs	r3, #144	@ 0x90
 800718c:	9302      	str	r3, [sp, #8]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800718e:	6820      	ldr	r0, [r4, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007190:	9501      	str	r5, [sp, #4]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007192:	f04f 33ff 	mov.w	r3, #4294967295
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007196:	4669      	mov	r1, sp
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007198:	e9cd 7703 	strd	r7, r7, [sp, #12]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800719c:	f8cd 8014 	str.w	r8, [sp, #20]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071a0:	9300      	str	r3, [sp, #0]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80071a2:	f001 fd3f 	bl	8008c24 <SDIO_ConfigData>
      return HAL_OK;
 80071a6:	e7ae      	b.n	8007106 <HAL_SD_WriteBlocks_DMA+0x7a>
 80071a8:	08006e6d 	.word	0x08006e6d
 80071ac:	08007205 	.word	0x08007205
 80071b0:	004005ff 	.word	0x004005ff
 80071b4:	42258000 	.word	0x42258000

080071b8 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <SD_DMAReceiveCplt>:
{
 80071bc:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071be:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80071c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071c2:	6820      	ldr	r0, [r4, #0]
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80071c4:	2b82      	cmp	r3, #130	@ 0x82
 80071c6:	d00f      	beq.n	80071e8 <SD_DMAReceiveCplt+0x2c>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80071c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80071ca:	f023 0308 	bic.w	r3, r3, #8
 80071ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071d0:	f240 513a 	movw	r1, #1338	@ 0x53a
  hsd->State = HAL_SD_STATE_READY;
 80071d4:	2201      	movs	r2, #1
  hsd->Context = SD_CONTEXT_NONE;
 80071d6:	2300      	movs	r3, #0
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071d8:	6381      	str	r1, [r0, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 80071da:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  HAL_SD_RxCpltCallback(hsd);
 80071de:	4620      	mov	r0, r4
  hsd->Context = SD_CONTEXT_NONE;
 80071e0:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 80071e2:	f003 fbd3 	bl	800a98c <HAL_SD_RxCpltCallback>
}
 80071e6:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071e8:	f002 f844 	bl	8009274 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ec:	4603      	mov	r3, r0
 80071ee:	b908      	cbnz	r0, 80071f4 <SD_DMAReceiveCplt+0x38>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	e7e9      	b.n	80071c8 <SD_DMAReceiveCplt+0xc>
      hsd->ErrorCode |= errorstate;
 80071f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80071f6:	4313      	orrs	r3, r2
      HAL_SD_ErrorCallback(hsd);
 80071f8:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 80071fa:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 80071fc:	f7ff ffdc 	bl	80071b8 <HAL_SD_ErrorCallback>
 8007200:	e7f6      	b.n	80071f0 <SD_DMAReceiveCplt+0x34>
 8007202:	bf00      	nop

08007204 <SD_DMAError>:
{
 8007204:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007206:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007208:	f7fd fe54 	bl	8004eb4 <HAL_DMA_GetError>
 800720c:	2802      	cmp	r0, #2
 800720e:	d00a      	beq.n	8007226 <SD_DMAError+0x22>
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007210:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007216:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007218:	2b01      	cmp	r3, #1
 800721a:	d005      	beq.n	8007228 <SD_DMAError+0x24>
 800721c:	2a01      	cmp	r2, #1
 800721e:	d003      	beq.n	8007228 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff ffc9 	bl	80071b8 <HAL_SD_ErrorCallback>
}
 8007226:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <SD_DMAError+0x7c>)
 800722c:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800722e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007230:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007232:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8007236:	63c3      	str	r3, [r0, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007238:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800723a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800723e:	0409      	lsls	r1, r1, #16
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007240:	63a3      	str	r3, [r4, #56]	@ 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007242:	f002 fc9b 	bl	8009b7c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007246:	4601      	mov	r1, r0
 8007248:	b158      	cbz	r0, 8007262 <SD_DMAError+0x5e>
    hsd->ErrorCode |= errorstate;
 800724a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800724c:	4303      	orrs	r3, r0
 800724e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007250:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8007252:	2300      	movs	r3, #0
      hsd->State= HAL_SD_STATE_READY;
 8007254:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    HAL_SD_ErrorCallback(hsd);
 8007258:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800725a:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_SD_ErrorCallback(hsd);
 800725c:	f7ff ffac 	bl	80071b8 <HAL_SD_ErrorCallback>
 8007260:	e7e1      	b.n	8007226 <SD_DMAError+0x22>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007262:	6820      	ldr	r0, [r4, #0]
 8007264:	f001 fcda 	bl	8008c1c <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007268:	f3c0 2043 	ubfx	r0, r0, #9, #4
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800726c:	3805      	subs	r0, #5
 800726e:	2801      	cmp	r0, #1
 8007270:	d8ee      	bhi.n	8007250 <SD_DMAError+0x4c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	f001 fffe 	bl	8009274 <SDMMC_CmdStopTransfer>
 8007278:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800727a:	4303      	orrs	r3, r0
 800727c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800727e:	e7e7      	b.n	8007250 <SD_DMAError+0x4c>
 8007280:	004005ff 	.word	0x004005ff

08007284 <SD_DMATxAbort>:
{
 8007284:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007286:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007288:	6d21      	ldr	r1, [r4, #80]	@ 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	f240 533a 	movw	r3, #1338	@ 0x53a
 8007290:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007292:	0409      	lsls	r1, r1, #16
 8007294:	f002 fc72 	bl	8009b7c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007298:	4605      	mov	r5, r0
 800729a:	b180      	cbz	r0, 80072be <SD_DMATxAbort+0x3a>
    hsd->ErrorCode |= errorstate;
 800729c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 800729e:	2101      	movs	r1, #1
    hsd->ErrorCode |= errorstate;
 80072a0:	4303      	orrs	r3, r0
  hsd->Context = SD_CONTEXT_NONE;
 80072a2:	2200      	movs	r2, #0
    hsd->ErrorCode |= errorstate;
 80072a4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 80072a6:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80072aa:	6322      	str	r2, [r4, #48]	@ 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80072ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    HAL_SD_AbortCallback(hsd);
 80072ae:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80072b0:	b913      	cbnz	r3, 80072b8 <SD_DMATxAbort+0x34>
    HAL_SD_AbortCallback(hsd);
 80072b2:	f003 fb63 	bl	800a97c <HAL_SD_AbortCallback>
}
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_ErrorCallback(hsd);
 80072b8:	f7ff ff7e 	bl	80071b8 <HAL_SD_ErrorCallback>
}
 80072bc:	bd38      	pop	{r3, r4, r5, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	4629      	mov	r1, r5
 80072c2:	f001 fcab 	bl	8008c1c <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80072c6:	f3c0 2043 	ubfx	r0, r0, #9, #4
  hsd->State = HAL_SD_STATE_READY;
 80072ca:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072cc:	3805      	subs	r0, #5
 80072ce:	4298      	cmp	r0, r3
  hsd->State = HAL_SD_STATE_READY;
 80072d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80072d4:	6325      	str	r5, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072d6:	d8e9      	bhi.n	80072ac <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	f001 ffcb 	bl	8009274 <SDMMC_CmdStopTransfer>
 80072de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80072e0:	4303      	orrs	r3, r0
 80072e2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80072e4:	e7e2      	b.n	80072ac <SD_DMATxAbort+0x28>
 80072e6:	bf00      	nop

080072e8 <HAL_SD_IRQHandler>:
{
 80072e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ec:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072ee:	6800      	ldr	r0, [r0, #0]
  uint32_t context = hsd->Context;
 80072f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80072f4:	041a      	lsls	r2, r3, #16
{
 80072f6:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072f8:	d51d      	bpl.n	8007336 <HAL_SD_IRQHandler+0x4e>
 80072fa:	072b      	lsls	r3, r5, #28
 80072fc:	f100 80c0 	bmi.w	8007480 <HAL_SD_IRQHandler+0x198>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007300:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007302:	05db      	lsls	r3, r3, #23
 8007304:	d56b      	bpl.n	80073de <HAL_SD_IRQHandler+0xf6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800730a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800730c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800730e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007312:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007316:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007318:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007320:	0629      	lsls	r1, r5, #24
 8007322:	d505      	bpl.n	8007330 <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007324:	06aa      	lsls	r2, r5, #26
 8007326:	f100 80ec 	bmi.w	8007502 <HAL_SD_IRQHandler+0x21a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800732a:	07ab      	lsls	r3, r5, #30
 800732c:	f000 80bb 	beq.w	80074a6 <HAL_SD_IRQHandler+0x1be>
}
 8007330:	b002      	add	sp, #8
 8007332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007336:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007338:	05df      	lsls	r7, r3, #23
 800733a:	d523      	bpl.n	8007384 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800733c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007340:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007342:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007344:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007348:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800734c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800734e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8007350:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	62c3      	str	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8007358:	d5e2      	bpl.n	8007320 <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800735a:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800735e:	f040 80b0 	bne.w	80074c2 <HAL_SD_IRQHandler+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007362:	f240 533a 	movw	r3, #1338	@ 0x53a
 8007366:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007368:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800736a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800736c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        HAL_SD_RxCpltCallback(hsd);
 8007370:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8007372:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007374:	07ac      	lsls	r4, r5, #30
 8007376:	f000 809f 	beq.w	80074b8 <HAL_SD_IRQHandler+0x1d0>
        HAL_SD_RxCpltCallback(hsd);
 800737a:	f003 fb07 	bl	800a98c <HAL_SD_RxCpltCallback>
}
 800737e:	b002      	add	sp, #8
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007384:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007386:	045f      	lsls	r7, r3, #17
 8007388:	d52a      	bpl.n	80073e0 <HAL_SD_IRQHandler+0xf8>
 800738a:	072e      	lsls	r6, r5, #28
 800738c:	d528      	bpl.n	80073e0 <HAL_SD_IRQHandler+0xf8>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800738e:	6a66      	ldr	r6, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 8007390:	2e00      	cmp	r6, #0
 8007392:	d0cd      	beq.n	8007330 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8007394:	6a27      	ldr	r7, [r4, #32]
 8007396:	f107 0804 	add.w	r8, r7, #4
 800739a:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 800739e:	e000      	b.n	80073a2 <HAL_SD_IRQHandler+0xba>
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80073a0:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80073a2:	f818 3c04 	ldrb.w	r3, [r8, #-4]
 80073a6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80073a8:	f818 2c03 	ldrb.w	r2, [r8, #-3]
 80073ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80073b0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80073b2:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 80073b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ba:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80073bc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80073c0:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80073c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 80073c6:	f108 0804 	add.w	r8, r8, #4
      data |= ((uint32_t)(*tmp) << 24U);
 80073ca:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80073cc:	f001 fc18 	bl	8008c00 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80073d0:	45a8      	cmp	r8, r5
 80073d2:	d1e5      	bne.n	80073a0 <HAL_SD_IRQHandler+0xb8>
      tmp++;
 80073d4:	3720      	adds	r7, #32
      dataremaining--;
 80073d6:	3e20      	subs	r6, #32
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize = dataremaining;
 80073d8:	e9c4 7608 	strd	r7, r6, [r4, #32]
  }
}
 80073dc:	e7a8      	b.n	8007330 <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80073de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80073e0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80073e2:	f240 233a 	movw	r3, #570	@ 0x23a
 80073e6:	421a      	tst	r2, r3
 80073e8:	d0a2      	beq.n	8007330 <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80073ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80073ec:	0799      	lsls	r1, r3, #30
 80073ee:	d503      	bpl.n	80073f8 <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80073f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80073f2:	f043 0302 	orr.w	r3, r3, #2
 80073f6:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80073f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80073fa:	071a      	lsls	r2, r3, #28
 80073fc:	d503      	bpl.n	8007406 <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80073fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007400:	f043 0308 	orr.w	r3, r3, #8
 8007404:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007406:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007408:	069b      	lsls	r3, r3, #26
 800740a:	d503      	bpl.n	8007414 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800740c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800740e:	f043 0320 	orr.w	r3, r3, #32
 8007412:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007414:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007416:	06df      	lsls	r7, r3, #27
 8007418:	d503      	bpl.n	8007422 <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800741a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800741c:	f043 0310 	orr.w	r3, r3, #16
 8007420:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007422:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007424:	059e      	lsls	r6, r3, #22
 8007426:	d503      	bpl.n	8007430 <HAL_SD_IRQHandler+0x148>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007428:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007430:	f240 733a 	movw	r3, #1850	@ 0x73a
 8007434:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007436:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007438:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800743c:	f023 0302 	bic.w	r3, r3, #2
 8007440:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007442:	f001 ff17 	bl	8009274 <SDMMC_CmdStopTransfer>
 8007446:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007448:	0729      	lsls	r1, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800744a:	ea43 0300 	orr.w	r3, r3, r0
 800744e:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007450:	d43d      	bmi.n	80074ce <HAL_SD_IRQHandler+0x1e6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007452:	062a      	lsls	r2, r5, #24
 8007454:	f57f af6c 	bpl.w	8007330 <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007458:	f015 0f30 	tst.w	r5, #48	@ 0x30
 800745c:	d147      	bne.n	80074ee <HAL_SD_IRQHandler+0x206>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800745e:	f015 0503 	ands.w	r5, r5, #3
 8007462:	d05b      	beq.n	800751c <HAL_SD_IRQHandler+0x234>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007464:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007466:	4b32      	ldr	r3, [pc, #200]	@ (8007530 <HAL_SD_IRQHandler+0x248>)
 8007468:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800746a:	f7fd fc3b 	bl	8004ce4 <HAL_DMA_Abort_IT>
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f af5e 	beq.w	8007330 <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 8007474:	6c20      	ldr	r0, [r4, #64]	@ 0x40
}
 8007476:	b002      	add	sp, #8
 8007478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800747c:	f7ff bf02 	b.w	8007284 <SD_DMATxAbort>
  tmp = hsd->pRxBuffPtr;
 8007480:	e9d4 570a 	ldrd	r5, r7, [r4, #40]	@ 0x28
  if (dataremaining > 0U)
 8007484:	2f00      	cmp	r7, #0
 8007486:	f43f af53 	beq.w	8007330 <HAL_SD_IRQHandler+0x48>
 800748a:	f105 0620 	add.w	r6, r5, #32
 800748e:	e000      	b.n	8007492 <HAL_SD_IRQHandler+0x1aa>
      data = SDIO_ReadFIFO(hsd->Instance);
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	f001 fbb1 	bl	8008bf8 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8007496:	f845 0b04 	str.w	r0, [r5], #4
    for(count = 0U; count < 8U; count++)
 800749a:	42ae      	cmp	r6, r5
 800749c:	d1f8      	bne.n	8007490 <HAL_SD_IRQHandler+0x1a8>
      dataremaining--;
 800749e:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 80074a0:	e9c4 670a 	strd	r6, r7, [r4, #40]	@ 0x28
 80074a4:	e744      	b.n	8007330 <HAL_SD_IRQHandler+0x48>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80074aa:	2101      	movs	r1, #1
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074ac:	f023 0308 	bic.w	r3, r3, #8
 80074b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        HAL_SD_TxCpltCallback(hsd);
 80074b2:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80074b4:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80074b8:	f003 fa64 	bl	800a984 <HAL_SD_TxCpltCallback>
}
 80074bc:	b002      	add	sp, #8
 80074be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074c2:	f001 fed7 	bl	8009274 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80074c6:	4603      	mov	r3, r0
 80074c8:	b950      	cbnz	r0, 80074e0 <HAL_SD_IRQHandler+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074ca:	6820      	ldr	r0, [r4, #0]
 80074cc:	e749      	b.n	8007362 <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 80074ce:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80074d0:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80074d2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
      HAL_SD_ErrorCallback(hsd);
 80074d6:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 80074d8:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80074da:	f7ff fe6d 	bl	80071b8 <HAL_SD_ErrorCallback>
 80074de:	e727      	b.n	8007330 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 80074e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80074e2:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 80074e4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80074e6:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80074e8:	f7ff fe66 	bl	80071b8 <HAL_SD_ErrorCallback>
 80074ec:	e7ed      	b.n	80074ca <HAL_SD_IRQHandler+0x1e2>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80074ee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80074f0:	4b10      	ldr	r3, [pc, #64]	@ (8007534 <HAL_SD_IRQHandler+0x24c>)
 80074f2:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80074f4:	f7fd fbf6 	bl	8004ce4 <HAL_DMA_Abort_IT>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f43f af19 	beq.w	8007330 <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 80074fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007500:	e7b9      	b.n	8007476 <HAL_SD_IRQHandler+0x18e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007502:	f001 feb7 	bl	8009274 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8007506:	4603      	mov	r3, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	f43f af0e 	beq.w	800732a <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 800750e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007510:	4313      	orrs	r3, r2
          HAL_SD_ErrorCallback(hsd);
 8007512:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8007514:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007516:	f7ff fe4f 	bl	80071b8 <HAL_SD_ErrorCallback>
 800751a:	e706      	b.n	800732a <HAL_SD_IRQHandler+0x42>
        hsd->State = HAL_SD_STATE_READY;
 800751c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800751e:	63a5      	str	r5, [r4, #56]	@ 0x38
        HAL_SD_AbortCallback(hsd);
 8007520:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8007522:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007526:	6325      	str	r5, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007528:	f003 fa28 	bl	800a97c <HAL_SD_AbortCallback>
}
 800752c:	e700      	b.n	8007330 <HAL_SD_IRQHandler+0x48>
 800752e:	bf00      	nop
 8007530:	08007539 	.word	0x08007539
 8007534:	08007285 	.word	0x08007285

08007538 <SD_DMARxAbort>:
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800753c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	f240 533a 	movw	r3, #1338	@ 0x53a
 8007544:	6383      	str	r3, [r0, #56]	@ 0x38
 8007546:	0409      	lsls	r1, r1, #16
 8007548:	f002 fb18 	bl	8009b7c <SDMMC_CmdSendStatus>
 800754c:	4605      	mov	r5, r0
 800754e:	b180      	cbz	r0, 8007572 <SD_DMARxAbort+0x3a>
 8007550:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007552:	2101      	movs	r1, #1
 8007554:	4303      	orrs	r3, r0
 8007556:	2200      	movs	r2, #0
 8007558:	63a3      	str	r3, [r4, #56]	@ 0x38
 800755a:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 800755e:	6322      	str	r2, [r4, #48]	@ 0x30
 8007560:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007562:	4620      	mov	r0, r4
 8007564:	b913      	cbnz	r3, 800756c <SD_DMARxAbort+0x34>
 8007566:	f003 fa09 	bl	800a97c <HAL_SD_AbortCallback>
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	f7ff fe24 	bl	80071b8 <HAL_SD_ErrorCallback>
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	4629      	mov	r1, r5
 8007576:	f001 fb51 	bl	8008c1c <SDIO_GetResponse>
 800757a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800757e:	2301      	movs	r3, #1
 8007580:	3805      	subs	r0, #5
 8007582:	4298      	cmp	r0, r3
 8007584:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8007588:	6325      	str	r5, [r4, #48]	@ 0x30
 800758a:	d8e9      	bhi.n	8007560 <SD_DMARxAbort+0x28>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	f001 fe71 	bl	8009274 <SDMMC_CmdStopTransfer>
 8007592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007594:	4318      	orrs	r0, r3
 8007596:	63a0      	str	r0, [r4, #56]	@ 0x38
 8007598:	e7e2      	b.n	8007560 <SD_DMARxAbort+0x28>
 800759a:	bf00      	nop

0800759c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800759c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
{
 800759e:	b410      	push	{r4}
 80075a0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075a2:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075a4:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075a8:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075aa:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075ac:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80075b0:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075b4:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80075b6:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80075b8:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80075bc:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80075be:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80075c0:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80075c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80075c4:	0d14      	lsrs	r4, r2, #20
 80075c6:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80075c8:	f3c2 4403 	ubfx	r4, r2, #16, #4
 80075cc:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80075ce:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 80075d2:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80075d4:	f3c2 3480 	ubfx	r4, r2, #14, #1
 80075d8:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80075da:	f3c2 3440 	ubfx	r4, r2, #13, #1
 80075de:	72cc      	strb	r4, [r1, #11]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80075e0:	2000      	movs	r0, #0
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80075e2:	f3c2 3400 	ubfx	r4, r2, #12, #1
 80075e6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80075e8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80075ea:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d16f      	bne.n	80076d0 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80075f0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80075f2:	f640 74fc 	movw	r4, #4092	@ 0xffc
 80075f6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 80075fa:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80075fe:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007602:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007604:	750c      	strb	r4, [r1, #20]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007606:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800760a:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800760e:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007610:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007612:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007616:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800761a:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800761c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800761e:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007620:	7e0a      	ldrb	r2, [r1, #24]
 8007622:	f002 0207 	and.w	r2, r2, #7
 8007626:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007628:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800762a:	4094      	lsls	r4, r2
 800762c:	655c      	str	r4, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800762e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8007632:	2201      	movs	r2, #1
 8007634:	f00c 0c0f 	and.w	ip, ip, #15
 8007638:	fa02 f20c 	lsl.w	r2, r2, ip
 800763c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800763e:	0a52      	lsrs	r2, r2, #9
 8007640:	fb04 f202 	mul.w	r2, r4, r2
 8007644:	65da      	str	r2, [r3, #92]	@ 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007646:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800764a:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800764e:	661c      	str	r4, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007650:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007652:	f3c0 12c6 	ubfx	r2, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007656:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800765a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800765c:	76c8      	strb	r0, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800765e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007660:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007662:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007666:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007668:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800766a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800766e:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007672:	778c      	strb	r4, [r1, #30]
  pCSD->Reserved3 = 0;
 8007674:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007676:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007678:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800767c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007680:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->Reserved3 = 0;
 8007684:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007688:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800768c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007690:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007694:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007698:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800769c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076a0:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80076a4:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076a8:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80076ac:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076b0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80076b4:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076bc:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 80076c0:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076c2:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 80076c6:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 80076ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ce:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80076d0:	2801      	cmp	r0, #1
 80076d2:	d10f      	bne.n	80076f4 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80076d4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80076d6:	0412      	lsls	r2, r2, #16
 80076d8:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80076dc:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80076e0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80076e2:	690a      	ldr	r2, [r1, #16]
 80076e4:	3201      	adds	r2, #1
 80076e6:	0292      	lsls	r2, r2, #10
    hsd->SdCard.BlockSize = 512U;
 80076e8:	f44f 7400 	mov.w	r4, #512	@ 0x200
 80076ec:	e9c3 4216 	strd	r4, r2, [r3, #88]	@ 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80076f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80076f2:	e7a8      	b.n	8007646 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4906      	ldr	r1, [pc, #24]	@ (8007710 <HAL_SD_GetCardCSD+0x174>)
 80076f8:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076fc:	2101      	movs	r1, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007704:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007708:	4608      	mov	r0, r1
}
 800770a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	004005ff 	.word	0x004005ff

08007714 <HAL_SD_InitCard>:
{
 8007714:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007716:	2200      	movs	r2, #0
{
 8007718:	b099      	sub	sp, #100	@ 0x64
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800771a:	2376      	movs	r3, #118	@ 0x76
 800771c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007720:	2300      	movs	r3, #0
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007722:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8007724:	aa09      	add	r2, sp, #36	@ 0x24
{
 8007726:	4605      	mov	r5, r0
  status = SDIO_Init(hsd->Instance, Init);
 8007728:	ca07      	ldmia	r2, {r0, r1, r2}
 800772a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800772e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007732:	9308      	str	r3, [sp, #32]
  status = SDIO_Init(hsd->Instance, Init);
 8007734:	ab06      	add	r3, sp, #24
 8007736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007738:	6828      	ldr	r0, [r5, #0]
 800773a:	f001 fa41 	bl	8008bc0 <SDIO_Init>
  if(status != HAL_OK)
 800773e:	b118      	cbz	r0, 8007748 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8007740:	2401      	movs	r4, #1
}
 8007742:	4620      	mov	r0, r4
 8007744:	b019      	add	sp, #100	@ 0x64
 8007746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 8007748:	4e79      	ldr	r6, [pc, #484]	@ (8007930 <HAL_SD_InitCard+0x21c>)
 800774a:	4604      	mov	r4, r0
  __HAL_SD_ENABLE(hsd);
 800774c:	2701      	movs	r7, #1
  (void)SDIO_PowerState_ON(hsd->Instance);
 800774e:	6828      	ldr	r0, [r5, #0]
  __HAL_SD_DISABLE(hsd);
 8007750:	f8c6 40a0 	str.w	r4, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007754:	f001 fa5a 	bl	8008c0c <SDIO_PowerState_ON>
  HAL_Delay(2);
 8007758:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 800775a:	f8c6 70a0 	str.w	r7, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 800775e:	f7fd f91d 	bl	800499c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007762:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t count = 0U;
 8007764:	9405      	str	r4, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007766:	f001 fec7 	bl	80094f8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800776a:	4604      	mov	r4, r0
 800776c:	b958      	cbnz	r0, 8007786 <HAL_SD_InitCard+0x72>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800776e:	6828      	ldr	r0, [r5, #0]
 8007770:	f001 fee8 	bl	8009544 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007774:	b970      	cbnz	r0, 8007794 <HAL_SD_InitCard+0x80>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007776:	64af      	str	r7, [r5, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007778:	6828      	ldr	r0, [r5, #0]
 800777a:	2100      	movs	r1, #0
 800777c:	f001 ff1e 	bl	80095bc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007780:	b190      	cbz	r0, 80077a8 <HAL_SD_InitCard+0x94>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007782:	f04f 5480 	mov.w	r4, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8007786:	2301      	movs	r3, #1
 8007788:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800778c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800778e:	4323      	orrs	r3, r4
 8007790:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8007792:	e7d5      	b.n	8007740 <HAL_SD_InitCard+0x2c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007794:	6828      	ldr	r0, [r5, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007796:	64ac      	str	r4, [r5, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007798:	f001 feae 	bl	80094f8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 80c2 	bne.w	8007926 <HAL_SD_InitCard+0x212>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077a2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d0e7      	beq.n	8007778 <HAL_SD_InitCard+0x64>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80077a8:	9b05      	ldr	r3, [sp, #20]
 80077aa:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 80077ae:	42b3      	cmp	r3, r6
 80077b0:	d81d      	bhi.n	80077ee <HAL_SD_InitCard+0xda>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077b2:	4f60      	ldr	r7, [pc, #384]	@ (8007934 <HAL_SD_InitCard+0x220>)
 80077b4:	e012      	b.n	80077dc <HAL_SD_InitCard+0xc8>
 80077b6:	6828      	ldr	r0, [r5, #0]
 80077b8:	f001 ff9e 	bl	80096f8 <SDMMC_CmdAppOperCommand>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077bc:	4621      	mov	r1, r4
    if(errorstate != HAL_SD_ERROR_NONE)
 80077be:	2800      	cmp	r0, #0
 80077c0:	d1df      	bne.n	8007782 <HAL_SD_InitCard+0x6e>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077c2:	6828      	ldr	r0, [r5, #0]
 80077c4:	f001 fa2a 	bl	8008c1c <SDIO_GetResponse>
    count++;
 80077c8:	9b05      	ldr	r3, [sp, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80077ce:	9b05      	ldr	r3, [sp, #20]
 80077d0:	42b3      	cmp	r3, r6
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077d2:	4604      	mov	r4, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80077d4:	ea4f 72d0 	mov.w	r2, r0, lsr #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80077d8:	d809      	bhi.n	80077ee <HAL_SD_InitCard+0xda>
 80077da:	b942      	cbnz	r2, 80077ee <HAL_SD_InitCard+0xda>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077dc:	2100      	movs	r1, #0
 80077de:	6828      	ldr	r0, [r5, #0]
 80077e0:	f001 feec 	bl	80095bc <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077e4:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e6:	4604      	mov	r4, r0
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d0e4      	beq.n	80077b6 <HAL_SD_InitCard+0xa2>
 80077ec:	e7cb      	b.n	8007786 <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80077ee:	9a05      	ldr	r2, [sp, #20]
 80077f0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80077f4:	429a      	cmp	r2, r3
 80077f6:	f200 8098 	bhi.w	800792a <HAL_SD_InitCard+0x216>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077fa:	f3c4 7480 	ubfx	r4, r4, #30, #1
  uint16_t sd_rca = 1U;
 80077fe:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007800:	6828      	ldr	r0, [r5, #0]
 8007802:	646c      	str	r4, [r5, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8007804:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007808:	f001 fa04 	bl	8008c14 <SDIO_GetPowerState>
 800780c:	2800      	cmp	r0, #0
 800780e:	f000 8084 	beq.w	800791a <HAL_SD_InitCard+0x206>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007812:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007814:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007816:	2b03      	cmp	r3, #3
 8007818:	d12f      	bne.n	800787a <HAL_SD_InitCard+0x166>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800781a:	2104      	movs	r1, #4
 800781c:	f001 f9fe 	bl	8008c1c <SDIO_GetResponse>
 8007820:	0d00      	lsrs	r0, r0, #20
 8007822:	64e8      	str	r0, [r5, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007824:	a90d      	add	r1, sp, #52	@ 0x34
 8007826:	4628      	mov	r0, r5
 8007828:	f7ff feb8 	bl	800759c <HAL_SD_GetCardCSD>
 800782c:	4604      	mov	r4, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d176      	bne.n	8007920 <HAL_SD_InitCard+0x20c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007832:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8007834:	6828      	ldr	r0, [r5, #0]
 8007836:	0412      	lsls	r2, r2, #16
 8007838:	4623      	mov	r3, r4
 800783a:	f001 fdbf 	bl	80093bc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800783e:	b9f8      	cbnz	r0, 8007880 <HAL_SD_InitCard+0x16c>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007840:	462a      	mov	r2, r5
 8007842:	1d2b      	adds	r3, r5, #4
 8007844:	f852 6b10 	ldr.w	r6, [r2], #16
 8007848:	ca07      	ldmia	r2, {r0, r1, r2}
 800784a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800784e:	4630      	mov	r0, r6
 8007850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007852:	f001 f9b5 	bl	8008bc0 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007856:	6828      	ldr	r0, [r5, #0]
 8007858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800785c:	f001 f9f8 	bl	8008c50 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f af6e 	beq.w	8007742 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007866:	682b      	ldr	r3, [r5, #0]
 8007868:	4a33      	ldr	r2, [pc, #204]	@ (8007938 <HAL_SD_InitCard+0x224>)
 800786a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800786c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800786e:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 8007870:	4303      	orrs	r3, r0
 8007872:	63ab      	str	r3, [r5, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007874:	f885 2034 	strb.w	r2, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8007878:	e762      	b.n	8007740 <HAL_SD_InitCard+0x2c>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800787a:	f002 f8b5 	bl	80099e8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800787e:	b130      	cbz	r0, 800788e <HAL_SD_InitCard+0x17a>
    hsd->State = HAL_SD_STATE_READY;
 8007880:	2301      	movs	r3, #1
 8007882:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007886:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8007888:	4303      	orrs	r3, r0
 800788a:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800788c:	e758      	b.n	8007740 <HAL_SD_InitCard+0x2c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800788e:	4601      	mov	r1, r0
 8007890:	6828      	ldr	r0, [r5, #0]
 8007892:	f001 f9c3 	bl	8008c1c <SDIO_GetResponse>
 8007896:	4603      	mov	r3, r0
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007898:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800789a:	676b      	str	r3, [r5, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800789c:	6828      	ldr	r0, [r5, #0]
 800789e:	f001 f9bd 	bl	8008c1c <SDIO_GetResponse>
 80078a2:	4603      	mov	r3, r0
 80078a4:	67ab      	str	r3, [r5, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80078a6:	2108      	movs	r1, #8
 80078a8:	6828      	ldr	r0, [r5, #0]
 80078aa:	f001 f9b7 	bl	8008c1c <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80078ae:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80078b0:	67e8      	str	r0, [r5, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80078b2:	6828      	ldr	r0, [r5, #0]
 80078b4:	f001 f9b2 	bl	8008c1c <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078b8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80078ba:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078be:	2b03      	cmp	r3, #3
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078c0:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078c2:	d0aa      	beq.n	800781a <HAL_SD_InitCard+0x106>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078c4:	f10d 0112 	add.w	r1, sp, #18
 80078c8:	f002 f902 	bl	8009ad0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d1d7      	bne.n	8007880 <HAL_SD_InitCard+0x16c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078d0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078d2:	6828      	ldr	r0, [r5, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d0a0      	beq.n	800781a <HAL_SD_InitCard+0x106>
    hsd->SdCard.RelCardAdd = sd_rca;
 80078d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80078dc:	6529      	str	r1, [r5, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078de:	0409      	lsls	r1, r1, #16
 80078e0:	f002 f8ba 	bl	8009a58 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1cb      	bne.n	8007880 <HAL_SD_InitCard+0x16c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80078e8:	4601      	mov	r1, r0
 80078ea:	6828      	ldr	r0, [r5, #0]
 80078ec:	f001 f996 	bl	8008c1c <SDIO_GetResponse>
 80078f0:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80078f2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80078f4:	666b      	str	r3, [r5, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80078f6:	6828      	ldr	r0, [r5, #0]
 80078f8:	f001 f990 	bl	8008c1c <SDIO_GetResponse>
 80078fc:	4603      	mov	r3, r0
 80078fe:	66ab      	str	r3, [r5, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007900:	2108      	movs	r1, #8
 8007902:	6828      	ldr	r0, [r5, #0]
 8007904:	f001 f98a 	bl	8008c1c <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007908:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800790a:	66e8      	str	r0, [r5, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800790c:	6828      	ldr	r0, [r5, #0]
 800790e:	f001 f985 	bl	8008c1c <SDIO_GetResponse>
 8007912:	4603      	mov	r3, r0
 8007914:	672b      	str	r3, [r5, #112]	@ 0x70
 8007916:	6828      	ldr	r0, [r5, #0]
 8007918:	e77f      	b.n	800781a <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800791a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800791e:	e7af      	b.n	8007880 <HAL_SD_InitCard+0x16c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007920:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8007924:	e7ac      	b.n	8007880 <HAL_SD_InitCard+0x16c>
      return errorstate;
 8007926:	4604      	mov	r4, r0
 8007928:	e72d      	b.n	8007786 <HAL_SD_InitCard+0x72>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800792a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 800792e:	e72a      	b.n	8007786 <HAL_SD_InitCard+0x72>
 8007930:	42258000 	.word	0x42258000
 8007934:	c1100000 	.word	0xc1100000
 8007938:	004005ff 	.word	0x004005ff

0800793c <HAL_SD_Init>:
  if(hsd == NULL)
 800793c:	b1c8      	cbz	r0, 8007972 <HAL_SD_Init+0x36>
{
 800793e:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8007940:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8007944:	4604      	mov	r4, r0
 8007946:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800794a:	b173      	cbz	r3, 800796a <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 800794c:	2303      	movs	r3, #3
 800794e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff fede 	bl	8007714 <HAL_SD_InitCard>
 8007958:	b928      	cbnz	r0, 8007966 <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 800795a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800795c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800795e:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8007960:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8007964:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007966:	2001      	movs	r0, #1
}
 8007968:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800796a:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800796c:	f7fc fd3a 	bl	80043e4 <HAL_SD_MspInit>
 8007970:	e7ec      	b.n	800794c <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8007972:	2001      	movs	r0, #1
}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop

08007978 <HAL_SD_GetCardInfo>:
{
 8007978:	b4f0      	push	{r4, r5, r6, r7}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800797a:	e9d0 c711 	ldrd	ip, r7, [r0, #68]	@ 0x44
 800797e:	e9d0 6513 	ldrd	r6, r5, [r0, #76]	@ 0x4c
 8007982:	e9d0 4215 	ldrd	r4, r2, [r0, #84]	@ 0x54
 8007986:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	@ 0x5c
 800798a:	e9c1 c700 	strd	ip, r7, [r1]
 800798e:	e9c1 6502 	strd	r6, r5, [r1, #8]
 8007992:	e9c1 4204 	strd	r4, r2, [r1, #16]
 8007996:	61c8      	str	r0, [r1, #28]
}
 8007998:	bcf0      	pop	{r4, r5, r6, r7}
 800799a:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800799c:	618b      	str	r3, [r1, #24]
}
 800799e:	4770      	bx	lr

080079a0 <HAL_SD_ConfigWideBusOperation>:
{
 80079a0:	b570      	push	{r4, r5, r6, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 80079a2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  hsd->State = HAL_SD_STATE_BUSY;
 80079a4:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 80079a6:	2a03      	cmp	r2, #3
  hsd->State = HAL_SD_STATE_BUSY;
 80079a8:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
{
 80079ac:	b08a      	sub	sp, #40	@ 0x28
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079ae:	6803      	ldr	r3, [r0, #0]
{
 80079b0:	4604      	mov	r4, r0
 80079b2:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80079b4:	d025      	beq.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x62>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80079b6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80079ba:	d022      	beq.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x62>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80079bc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80079c0:	d05f      	beq.n	8007a82 <HAL_SD_ConfigWideBusOperation+0xe2>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d03d      	beq.n	8007a42 <HAL_SD_ConfigWideBusOperation+0xa2>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079c6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80079c8:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80079cc:	6382      	str	r2, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079ce:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80079d0:	b9f5      	cbnz	r5, 8007a10 <HAL_SD_ConfigWideBusOperation+0x70>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80079d2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 80079d6:	e9cd 1208 	strd	r1, r2, [sp, #32]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80079da:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80079de:	e9cd 1204 	strd	r1, r2, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80079e2:	68e2      	ldr	r2, [r4, #12]
    Init.BusWide             = WideMode;
 80079e4:	9607      	str	r6, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80079e6:	9206      	str	r2, [sp, #24]
    (void)SDIO_Init(hsd->Instance, Init);
 80079e8:	aa0a      	add	r2, sp, #40	@ 0x28
 80079ea:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80079ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80079f2:	ae04      	add	r6, sp, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80079fa:	f001 f8e1 	bl	8008bc0 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	e00c      	b.n	8007a1c <HAL_SD_ConfigWideBusOperation+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a02:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a04:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007a08:	63a2      	str	r2, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a0a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	d0e0      	beq.n	80079d2 <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8007a10:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a12:	4931      	ldr	r1, [pc, #196]	@ (8007ad8 <HAL_SD_ConfigWideBusOperation+0x138>)
 8007a14:	6399      	str	r1, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007a16:	4615      	mov	r5, r2
    hsd->State = HAL_SD_STATE_READY;
 8007a18:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f915 	bl	8008c50 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a26:	b130      	cbz	r0, 8007a36 <HAL_SD_ConfigWideBusOperation+0x96>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad8 <HAL_SD_ConfigWideBusOperation+0x138>)
 8007a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007a2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a30:	4303      	orrs	r3, r0
    status = HAL_ERROR;
 8007a32:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 8007a34:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007a36:	2301      	movs	r3, #1
}
 8007a38:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8007a3a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8007a3e:	b00a      	add	sp, #40	@ 0x28
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 8007a42:	2200      	movs	r2, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a44:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0U, 0U};
 8007a46:	2300      	movs	r3, #0
 8007a48:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a4c:	f001 f8e6 	bl	8008c1c <SDIO_GetResponse>
 8007a50:	0182      	lsls	r2, r0, #6
 8007a52:	d435      	bmi.n	8007ac0 <HAL_SD_ConfigWideBusOperation+0x120>
  errorstate = SD_FindSCR(hsd, scr);
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff fa10 	bl	8006e7c <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a5c:	b960      	cbnz	r0, 8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a5e:	9b05      	ldr	r3, [sp, #20]
 8007a60:	03db      	lsls	r3, r3, #15
 8007a62:	d530      	bpl.n	8007ac6 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a64:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	0409      	lsls	r1, r1, #16
 8007a6a:	f001 fda7 	bl	80095bc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a6e:	b918      	cbnz	r0, 8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007a70:	4601      	mov	r1, r0
 8007a72:	6820      	ldr	r0, [r4, #0]
 8007a74:	f001 fe7a 	bl	800976c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007a78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	4302      	orrs	r2, r0
 8007a7e:	63a2      	str	r2, [r4, #56]	@ 0x38
 8007a80:	e7c3      	b.n	8007a0a <HAL_SD_ConfigWideBusOperation+0x6a>
  uint32_t scr[2U] = {0U, 0U};
 8007a82:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8007ad0 <HAL_SD_ConfigWideBusOperation+0x130>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a86:	4618      	mov	r0, r3
 8007a88:	2100      	movs	r1, #0
  uint32_t scr[2U] = {0U, 0U};
 8007a8a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a8e:	f001 f8c5 	bl	8008c1c <SDIO_GetResponse>
 8007a92:	0180      	lsls	r0, r0, #6
 8007a94:	d414      	bmi.n	8007ac0 <HAL_SD_ConfigWideBusOperation+0x120>
  errorstate = SD_FindSCR(hsd, scr);
 8007a96:	a904      	add	r1, sp, #16
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7ff f9ef 	bl	8006e7c <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d1ea      	bne.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	0359      	lsls	r1, r3, #13
 8007aa6:	d50e      	bpl.n	8007ac6 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007aa8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007aaa:	6820      	ldr	r0, [r4, #0]
 8007aac:	0409      	lsls	r1, r1, #16
 8007aae:	f001 fd85 	bl	80095bc <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d1e0      	bne.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	2102      	movs	r1, #2
 8007aba:	f001 fe57 	bl	800976c <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007abe:	e7db      	b.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ac0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007ac4:	e7d8      	b.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ac6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8007aca:	e7d5      	b.n	8007a78 <HAL_SD_ConfigWideBusOperation+0xd8>
 8007acc:	f3af 8000 	nop.w
	...
 8007ad8:	004005ff 	.word	0x004005ff

08007adc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007adc:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 8007ade:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ae0:	0409      	lsls	r1, r1, #16
{
 8007ae2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ae4:	6800      	ldr	r0, [r0, #0]
 8007ae6:	f002 f849 	bl	8009b7c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	4601      	mov	r1, r0
 8007aec:	b120      	cbz	r0, 8007af8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8007aee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007af0:	430b      	orrs	r3, r1
 8007af2:	2000      	movs	r0, #0
 8007af4:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8007af6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	f001 f88f 	bl	8008c1c <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007afe:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d05c      	beq.n	8007bc2 <HAL_SPI_Init+0xbe>
{
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b0c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d047      	beq.n	8007ba2 <HAL_SPI_Init+0x9e>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e9c4 3304 	strd	r3, r3, [r4, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b18:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b20:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d042      	beq.n	8007bae <HAL_SPI_Init+0xaa>
 8007b28:	4694      	mov	ip, r2
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b2a:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b2c:	68a5      	ldr	r5, [r4, #8]
 8007b2e:	69a2      	ldr	r2, [r4, #24]
 8007b30:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007b32:	2302      	movs	r3, #2
 8007b34:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8007b38:	680b      	ldr	r3, [r1, #0]
 8007b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b3e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 8007b46:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8007b4a:	432b      	orrs	r3, r5
 8007b4c:	68e5      	ldr	r5, [r4, #12]
 8007b4e:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 8007b52:	432b      	orrs	r3, r5
 8007b54:	6925      	ldr	r5, [r4, #16]
 8007b56:	f005 0502 	and.w	r5, r5, #2
 8007b5a:	432b      	orrs	r3, r5
 8007b5c:	6965      	ldr	r5, [r4, #20]
 8007b5e:	f005 0501 	and.w	r5, r5, #1
 8007b62:	432b      	orrs	r3, r5
 8007b64:	69e5      	ldr	r5, [r4, #28]
 8007b66:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 8007b6a:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8007b6e:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8007b72:	4333      	orrs	r3, r6
 8007b74:	432b      	orrs	r3, r5
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b76:	0c12      	lsrs	r2, r2, #16
 8007b78:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b7c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b80:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b84:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b88:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b8a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b8c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b8e:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b90:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007b96:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b98:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b9a:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b9c:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba8:	d0b6      	beq.n	8007b18 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007baa:	61e0      	str	r0, [r4, #28]
 8007bac:	e7b4      	b.n	8007b18 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8007bae:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007bb0:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8007bb4:	f7fc fcda 	bl	800456c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007bb8:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bbc:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8007bc0:	e7b3      	b.n	8007b2a <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8007bc2:	2001      	movs	r0, #1
}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop

08007bc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f000 808f 	beq.w	8007cec <HAL_TIM_Base_Init+0x124>
{
 8007bce:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8081 	beq.w	8007ce2 <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be2:	4943      	ldr	r1, [pc, #268]	@ (8007cf0 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007be4:	2302      	movs	r3, #2
 8007be6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bea:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007bec:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bee:	d064      	beq.n	8007cba <HAL_TIM_Base_Init+0xf2>
 8007bf0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007bf4:	d030      	beq.n	8007c58 <HAL_TIM_Base_Init+0x90>
 8007bf6:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8007bfa:	428a      	cmp	r2, r1
 8007bfc:	d02c      	beq.n	8007c58 <HAL_TIM_Base_Init+0x90>
 8007bfe:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c02:	428a      	cmp	r2, r1
 8007c04:	d028      	beq.n	8007c58 <HAL_TIM_Base_Init+0x90>
 8007c06:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c0a:	428a      	cmp	r2, r1
 8007c0c:	d024      	beq.n	8007c58 <HAL_TIM_Base_Init+0x90>
 8007c0e:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8007c12:	428a      	cmp	r2, r1
 8007c14:	d051      	beq.n	8007cba <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c16:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8007c1a:	428a      	cmp	r2, r1
 8007c1c:	d020      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
 8007c1e:	4935      	ldr	r1, [pc, #212]	@ (8007cf4 <HAL_TIM_Base_Init+0x12c>)
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d01d      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
 8007c24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c28:	428a      	cmp	r2, r1
 8007c2a:	d019      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
 8007c2c:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8007c30:	428a      	cmp	r2, r1
 8007c32:	d015      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
 8007c34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c38:	428a      	cmp	r2, r1
 8007c3a:	d011      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
 8007c3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c40:	428a      	cmp	r2, r1
 8007c42:	d00d      	beq.n	8007c60 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c44:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c46:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c48:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c4e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007c50:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c52:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c54:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c56:	e010      	b.n	8007c7a <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8007c58:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c5e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c60:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c62:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c70:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007c72:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007c74:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c76:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c78:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c7e:	6913      	ldr	r3, [r2, #16]
 8007c80:	07db      	lsls	r3, r3, #31
 8007c82:	d503      	bpl.n	8007c8c <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c84:	6913      	ldr	r3, [r2, #16]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007c96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007c9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007c9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007caa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007cae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007cb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007cb6:	2000      	movs	r0, #0
}
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007cba:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cbc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007cc2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cca:	69a1      	ldr	r1, [r4, #24]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007cd2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cd4:	68e3      	ldr	r3, [r4, #12]
 8007cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ce0:	e7cb      	b.n	8007c7a <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8007ce2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007ce6:	f7fc fc83 	bl	80045f0 <HAL_TIM_Base_MspInit>
 8007cea:	e779      	b.n	8007be0 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8007cec:	2001      	movs	r0, #1
}
 8007cee:	4770      	bx	lr
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40014400 	.word	0x40014400

08007cf8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d12c      	bne.n	8007d5a <HAL_TIM_Base_Start+0x62>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	6803      	ldr	r3, [r0, #0]
 8007d02:	4a17      	ldr	r2, [pc, #92]	@ (8007d60 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8007d08:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0c:	d01a      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d12:	d017      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d14:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d013      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00f      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d2c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d34:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <HAL_TIM_Base_Start+0x4c>
 8007d3c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_Base_Start+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4a:	2a06      	cmp	r2, #6
 8007d4c:	d003      	beq.n	8007d56 <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007d56:	2000      	movs	r0, #0
 8007d58:	4770      	bx	lr
    return HAL_ERROR;
 8007d5a:	2001      	movs	r0, #1
}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000

08007d64 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f000 808f 	beq.w	8007e8c <HAL_TIM_PWM_Init+0x124>
{
 8007d6e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d70:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007d74:	4604      	mov	r4, r0
 8007d76:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8081 	beq.w	8007e82 <HAL_TIM_PWM_Init+0x11a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d80:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d82:	4943      	ldr	r1, [pc, #268]	@ (8007e90 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d84:	2302      	movs	r3, #2
 8007d86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d8a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007d8c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d8e:	d064      	beq.n	8007e5a <HAL_TIM_PWM_Init+0xf2>
 8007d90:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007d94:	d030      	beq.n	8007df8 <HAL_TIM_PWM_Init+0x90>
 8007d96:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8007d9a:	428a      	cmp	r2, r1
 8007d9c:	d02c      	beq.n	8007df8 <HAL_TIM_PWM_Init+0x90>
 8007d9e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007da2:	428a      	cmp	r2, r1
 8007da4:	d028      	beq.n	8007df8 <HAL_TIM_PWM_Init+0x90>
 8007da6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007daa:	428a      	cmp	r2, r1
 8007dac:	d024      	beq.n	8007df8 <HAL_TIM_PWM_Init+0x90>
 8007dae:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8007db2:	428a      	cmp	r2, r1
 8007db4:	d051      	beq.n	8007e5a <HAL_TIM_PWM_Init+0xf2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007db6:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8007dba:	428a      	cmp	r2, r1
 8007dbc:	d020      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
 8007dbe:	4935      	ldr	r1, [pc, #212]	@ (8007e94 <HAL_TIM_PWM_Init+0x12c>)
 8007dc0:	428a      	cmp	r2, r1
 8007dc2:	d01d      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
 8007dc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007dc8:	428a      	cmp	r2, r1
 8007dca:	d019      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
 8007dcc:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8007dd0:	428a      	cmp	r2, r1
 8007dd2:	d015      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
 8007dd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d011      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
 8007ddc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007de0:	428a      	cmp	r2, r1
 8007de2:	d00d      	beq.n	8007e00 <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de4:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8007de6:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dee:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007df0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007df4:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df6:	e010      	b.n	8007e1a <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8007df8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007dfe:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e00:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e02:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e0e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e10:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007e12:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007e14:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e16:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e18:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e1e:	6913      	ldr	r3, [r2, #16]
 8007e20:	07db      	lsls	r3, r3, #31
 8007e22:	d503      	bpl.n	8007e2c <HAL_TIM_PWM_Init+0xc4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e24:	6913      	ldr	r3, [r2, #16]
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e32:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007e36:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007e3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007e3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e4a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007e4e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007e52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007e56:	2000      	movs	r0, #0
}
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007e5a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e62:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e68:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e6a:	69a1      	ldr	r1, [r4, #24]
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e70:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007e72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e74:	68e3      	ldr	r3, [r4, #12]
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007e7c:	6963      	ldr	r3, [r4, #20]
 8007e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e80:	e7cb      	b.n	8007e1a <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8007e82:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007e86:	f7ff ff6d 	bl	8007d64 <HAL_TIM_PWM_MspInit>
 8007e8a:	e779      	b.n	8007d80 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8007e8c:	2001      	movs	r0, #1
}
 8007e8e:	4770      	bx	lr
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40014400 	.word	0x40014400

08007e98 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	d139      	bne.n	8007f10 <HAL_TIM_PWM_Start+0x78>
 8007e9c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d141      	bne.n	8007f28 <HAL_TIM_PWM_Start+0x90>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8007eaa:	6803      	ldr	r3, [r0, #0]
 8007eac:	f001 011f 	and.w	r1, r1, #31
 8007eb0:	6a18      	ldr	r0, [r3, #32]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	408a      	lsls	r2, r1
 8007eb6:	ea20 0002 	bic.w	r0, r0, r2
 8007eba:	6218      	str	r0, [r3, #32]
 8007ebc:	6a18      	ldr	r0, [r3, #32]
 8007ebe:	4926      	ldr	r1, [pc, #152]	@ (8007f58 <HAL_TIM_PWM_Start+0xc0>)
 8007ec0:	4302      	orrs	r2, r0
 8007ec2:	428b      	cmp	r3, r1
 8007ec4:	621a      	str	r2, [r3, #32]
 8007ec6:	d031      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x94>
 8007ec8:	4a24      	ldr	r2, [pc, #144]	@ (8007f5c <HAL_TIM_PWM_Start+0xc4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d02e      	beq.n	8007f2c <HAL_TIM_PWM_Start+0x94>
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed2:	d012      	beq.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007ed4:	4a22      	ldr	r2, [pc, #136]	@ (8007f60 <HAL_TIM_PWM_Start+0xc8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007eda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007ee2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007eea:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007ef2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d104      	bne.n	8007f04 <HAL_TIM_PWM_Start+0x6c>
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	f002 0207 	and.w	r2, r2, #7
 8007f00:	2a06      	cmp	r2, #6
 8007f02:	d003      	beq.n	8007f0c <HAL_TIM_PWM_Start+0x74>
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	4770      	bx	lr
 8007f10:	2904      	cmp	r1, #4
 8007f12:	d010      	beq.n	8007f36 <HAL_TIM_PWM_Start+0x9e>
 8007f14:	2908      	cmp	r1, #8
 8007f16:	d016      	beq.n	8007f46 <HAL_TIM_PWM_Start+0xae>
 8007f18:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d103      	bne.n	8007f28 <HAL_TIM_PWM_Start+0x90>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8007f26:	e7c0      	b.n	8007eaa <HAL_TIM_PWM_Start+0x12>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	4770      	bx	lr
 8007f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f32:	645a      	str	r2, [r3, #68]	@ 0x44
 8007f34:	e7e1      	b.n	8007efa <HAL_TIM_PWM_Start+0x62>
 8007f36:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d1f4      	bne.n	8007f28 <HAL_TIM_PWM_Start+0x90>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8007f44:	e7b1      	b.n	8007eaa <HAL_TIM_PWM_Start+0x12>
 8007f46:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d1ec      	bne.n	8007f28 <HAL_TIM_PWM_Start+0x90>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8007f54:	e7a9      	b.n	8007eaa <HAL_TIM_PWM_Start+0x12>
 8007f56:	bf00      	nop
 8007f58:	40010000 	.word	0x40010000
 8007f5c:	40010400 	.word	0x40010400
 8007f60:	40000400 	.word	0x40000400

08007f64 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8007f64:	6803      	ldr	r3, [r0, #0]
 8007f66:	b410      	push	{r4}
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	f001 041f 	and.w	r4, r1, #31
 8007f6e:	f04f 0c01 	mov.w	ip, #1
 8007f72:	fa0c fc04 	lsl.w	ip, ip, r4
 8007f76:	ea22 020c 	bic.w	r2, r2, ip
 8007f7a:	621a      	str	r2, [r3, #32]
 8007f7c:	4a20      	ldr	r2, [pc, #128]	@ (8008000 <HAL_TIM_PWM_Stop+0x9c>)
 8007f7e:	6a1c      	ldr	r4, [r3, #32]
 8007f80:	621c      	str	r4, [r3, #32]
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d015      	beq.n	8007fb2 <HAL_TIM_PWM_Stop+0x4e>
 8007f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d011      	beq.n	8007fb2 <HAL_TIM_PWM_Stop+0x4e>
 8007f8e:	6a1c      	ldr	r4, [r3, #32]
 8007f90:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007f94:	4214      	tst	r4, r2
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_PWM_Stop+0x3e>
 8007f98:	6a1c      	ldr	r4, [r3, #32]
 8007f9a:	f240 4244 	movw	r2, #1092	@ 0x444
 8007f9e:	4214      	tst	r4, r2
 8007fa0:	d022      	beq.n	8007fe8 <HAL_TIM_PWM_Stop+0x84>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	b9a1      	cbnz	r1, 8007fd0 <HAL_TIM_PWM_Stop+0x6c>
 8007fa6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8007faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fae:	2000      	movs	r0, #0
 8007fb0:	4770      	bx	lr
 8007fb2:	6a1c      	ldr	r4, [r3, #32]
 8007fb4:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007fb8:	4214      	tst	r4, r2
 8007fba:	d1e8      	bne.n	8007f8e <HAL_TIM_PWM_Stop+0x2a>
 8007fbc:	6a1c      	ldr	r4, [r3, #32]
 8007fbe:	f240 4244 	movw	r2, #1092	@ 0x444
 8007fc2:	4214      	tst	r4, r2
 8007fc4:	d1e3      	bne.n	8007f8e <HAL_TIM_PWM_Stop+0x2a>
 8007fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
 8007fce:	e7de      	b.n	8007f8e <HAL_TIM_PWM_Stop+0x2a>
 8007fd0:	2904      	cmp	r1, #4
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIM_PWM_Stop+0x8e>
 8007fd4:	2908      	cmp	r1, #8
 8007fd6:	bf0c      	ite	eq
 8007fd8:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 8007fdc:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
 8007fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4770      	bx	lr
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e7d7      	b.n	8007fa2 <HAL_TIM_PWM_Stop+0x3e>
 8007ff2:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8007ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40010000 	.word	0x40010000

08008004 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008004:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	f000 80c6 	beq.w	800819a <HAL_TIM_PWM_ConfigChannel+0x196>
 800800e:	2301      	movs	r3, #1
{
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8008014:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008018:	2a0c      	cmp	r2, #12
 800801a:	d808      	bhi.n	800802e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800801c:	e8df f002 	tbb	[pc, r2]
 8008020:	0707073e 	.word	0x0707073e
 8008024:	07070767 	.word	0x07070767
 8008028:	07070793 	.word	0x07070793
 800802c:	0c          	.byte	0x0c
 800802d:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800802e:	2300      	movs	r3, #0
 8008030:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8008034:	2001      	movs	r0, #1
}
 8008036:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008038:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800803a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800803c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803e:	6a18      	ldr	r0, [r3, #32]
 8008040:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008044:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008046:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8008048:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800804a:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800804e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008052:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008054:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008058:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800805c:	4d6a      	ldr	r5, [pc, #424]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800805e:	42ab      	cmp	r3, r5
 8008060:	f000 80bc 	beq.w	80081dc <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8008064:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008068:	42ab      	cmp	r3, r5
 800806a:	f000 80b7 	beq.w	80081dc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806e:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008070:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008072:	6848      	ldr	r0, [r1, #4]
 8008074:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008078:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800807a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800807c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800808a:	69da      	ldr	r2, [r3, #28]
 800808c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008090:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008092:	2300      	movs	r3, #0
 8008094:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008098:	2000      	movs	r0, #0
}
 800809a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800809c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800809e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80080a0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a2:	6a18      	ldr	r0, [r3, #32]
 80080a4:	f020 0001 	bic.w	r0, r0, #1
 80080a8:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80080aa:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80080ac:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080ae:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80080b2:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80080b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80080b6:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80080ba:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080bc:	4d52      	ldr	r5, [pc, #328]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80080be:	42ab      	cmp	r3, r5
 80080c0:	d06d      	beq.n	800819e <HAL_TIM_PWM_ConfigChannel+0x19a>
 80080c2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80080c6:	42ab      	cmp	r3, r5
 80080c8:	d069      	beq.n	800819e <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 80080ca:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80080cc:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80080ce:	6848      	ldr	r0, [r1, #4]
 80080d0:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80080d2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d4:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d8:	f042 0208 	orr.w	r2, r2, #8
 80080dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	f022 0204 	bic.w	r2, r2, #4
 80080e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	619a      	str	r2, [r3, #24]
      break;
 80080ec:	e7d1      	b.n	8008092 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080ee:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f0:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80080f2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	6a18      	ldr	r0, [r3, #32]
 80080f6:	f020 0010 	bic.w	r0, r0, #16
 80080fa:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80080fc:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80080fe:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008100:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008108:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800810a:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800810e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008112:	4d3d      	ldr	r5, [pc, #244]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8008114:	42ab      	cmp	r3, r5
 8008116:	d051      	beq.n	80081bc <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8008118:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800811c:	42ab      	cmp	r3, r5
 800811e:	d04d      	beq.n	80081bc <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 8008120:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008122:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008124:	6848      	ldr	r0, [r1, #4]
 8008126:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008128:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800812a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800812c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800812e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800813a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008142:	619a      	str	r2, [r3, #24]
      break;
 8008144:	e7a5      	b.n	8008092 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008146:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008148:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800814a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814c:	6a18      	ldr	r0, [r3, #32]
 800814e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8008152:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008154:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8008156:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008158:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800815c:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800815e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008160:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008164:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008168:	4d27      	ldr	r5, [pc, #156]	@ (8008208 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800816a:	42ab      	cmp	r3, r5
 800816c:	d03c      	beq.n	80081e8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800816e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008172:	42ab      	cmp	r3, r5
 8008174:	d038      	beq.n	80081e8 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 8008176:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008178:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800817a:	6848      	ldr	r0, [r1, #4]
 800817c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800817e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008180:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008182:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008184:	f042 0208 	orr.w	r2, r2, #8
 8008188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	f022 0204 	bic.w	r2, r2, #4
 8008190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	430a      	orrs	r2, r1
 8008196:	61da      	str	r2, [r3, #28]
      break;
 8008198:	e77b      	b.n	8008092 <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 800819a:	2002      	movs	r0, #2
}
 800819c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800819e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80081a0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80081a4:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081aa:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80081ae:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80081b2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80081b6:	ea4e 0404 	orr.w	r4, lr, r4
 80081ba:	e786      	b.n	80080ca <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80081be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081c2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081c6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081ca:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081ce:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80081d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081d6:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80081da:	e7a1      	b.n	8008120 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081de:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081e2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80081e6:	e742      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081f2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081f6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081fa:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80081fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008202:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8008206:	e7b6      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008208:	40010000 	.word	0x40010000

0800820c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800820c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008210:	2b01      	cmp	r3, #1
 8008212:	d071      	beq.n	80082f8 <HAL_TIM_ConfigClockSource+0xec>
 8008214:	4602      	mov	r2, r0
{
 8008216:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8008218:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800821a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800821c:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8008220:	2001      	movs	r0, #1
 8008222:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008226:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008228:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800822c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008230:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8008232:	680b      	ldr	r3, [r1, #0]
 8008234:	2b60      	cmp	r3, #96	@ 0x60
 8008236:	d061      	beq.n	80082fc <HAL_TIM_ConfigClockSource+0xf0>
 8008238:	d824      	bhi.n	8008284 <HAL_TIM_ConfigClockSource+0x78>
 800823a:	2b40      	cmp	r3, #64	@ 0x40
 800823c:	d077      	beq.n	800832e <HAL_TIM_ConfigClockSource+0x122>
 800823e:	d94a      	bls.n	80082d6 <HAL_TIM_ConfigClockSource+0xca>
 8008240:	2b50      	cmp	r3, #80	@ 0x50
 8008242:	d117      	bne.n	8008274 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8008244:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008246:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008248:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800824a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800824e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008250:	6a23      	ldr	r3, [r4, #32]
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008258:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800825a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800825e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008262:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008264:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008266:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800826c:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008270:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008274:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008276:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008278:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800827c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8008280:	bc30      	pop	{r4, r5}
 8008282:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008288:	d0f3      	beq.n	8008272 <HAL_TIM_ConfigClockSource+0x66>
 800828a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800828e:	d110      	bne.n	80082b2 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008290:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008294:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008296:	432b      	orrs	r3, r5
 8008298:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800829a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800829e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80082a2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082ac:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2000      	movs	r0, #0
 80082b0:	e7e0      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80082b2:	2b70      	cmp	r3, #112	@ 0x70
 80082b4:	d1de      	bne.n	8008274 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082b6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80082ba:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082bc:	432b      	orrs	r3, r5
 80082be:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082c0:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80082c8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80082ca:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80082cc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082ce:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80082d2:	60a3      	str	r3, [r4, #8]
      break;
 80082d4:	e7cd      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d002      	beq.n	80082e0 <HAL_TIM_ConfigClockSource+0xd4>
 80082da:	d909      	bls.n	80082f0 <HAL_TIM_ConfigClockSource+0xe4>
 80082dc:	2b30      	cmp	r3, #48	@ 0x30
 80082de:	d1c9      	bne.n	8008274 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80082e0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80082e2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082e6:	430b      	orrs	r3, r1
 80082e8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80082ec:	60a3      	str	r3, [r4, #8]
}
 80082ee:	e7c0      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80082f0:	f033 0110 	bics.w	r1, r3, #16
 80082f4:	d1be      	bne.n	8008274 <HAL_TIM_ConfigClockSource+0x68>
 80082f6:	e7f3      	b.n	80082e0 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 80082f8:	2002      	movs	r0, #2
}
 80082fa:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80082fc:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 80082fe:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008300:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008302:	6a21      	ldr	r1, [r4, #32]
 8008304:	f021 0110 	bic.w	r1, r1, #16
 8008308:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830a:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800830c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008310:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8008314:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008318:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800831c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800831e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008320:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008326:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800832a:	60a3      	str	r3, [r4, #8]
}
 800832c:	e7a1      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800832e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008330:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8008332:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008334:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008338:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833a:	6a23      	ldr	r3, [r4, #32]
 800833c:	f023 0301 	bic.w	r3, r3, #1
 8008340:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008342:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008344:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008348:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800834c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800834e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008350:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008356:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800835a:	60a3      	str	r3, [r4, #8]
}
 800835c:	e789      	b.n	8008272 <HAL_TIM_ConfigClockSource+0x66>
 800835e:	bf00      	nop

08008360 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop

0800836c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8008374:	6803      	ldr	r3, [r0, #0]
{
 8008376:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8008378:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800837a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800837c:	07a9      	lsls	r1, r5, #30
{
 800837e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008380:	d501      	bpl.n	8008386 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008382:	07b2      	lsls	r2, r6, #30
 8008384:	d451      	bmi.n	800842a <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008386:	0769      	lsls	r1, r5, #29
 8008388:	d501      	bpl.n	800838e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800838a:	0772      	lsls	r2, r6, #29
 800838c:	d43a      	bmi.n	8008404 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800838e:	072b      	lsls	r3, r5, #28
 8008390:	d501      	bpl.n	8008396 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008392:	0730      	lsls	r0, r6, #28
 8008394:	d424      	bmi.n	80083e0 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008396:	06ea      	lsls	r2, r5, #27
 8008398:	d501      	bpl.n	800839e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800839a:	06f3      	lsls	r3, r6, #27
 800839c:	d410      	bmi.n	80083c0 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800839e:	07e8      	lsls	r0, r5, #31
 80083a0:	d501      	bpl.n	80083a6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083a2:	07f1      	lsls	r1, r6, #31
 80083a4:	d457      	bmi.n	8008456 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083a6:	062a      	lsls	r2, r5, #24
 80083a8:	d501      	bpl.n	80083ae <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083aa:	0633      	lsls	r3, r6, #24
 80083ac:	d45b      	bmi.n	8008466 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ae:	0668      	lsls	r0, r5, #25
 80083b0:	d501      	bpl.n	80083b6 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083b2:	0671      	lsls	r1, r6, #25
 80083b4:	d45f      	bmi.n	8008476 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083b6:	06aa      	lsls	r2, r5, #26
 80083b8:	d501      	bpl.n	80083be <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083ba:	06b3      	lsls	r3, r6, #26
 80083bc:	d442      	bmi.n	8008444 <HAL_TIM_IRQHandler+0xd0>
}
 80083be:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	f06f 0210 	mvn.w	r2, #16
 80083c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c8:	2208      	movs	r2, #8
 80083ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80083d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d4:	d063      	beq.n	800849e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	f7ff ffc7 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	2300      	movs	r3, #0
 80083dc:	7723      	strb	r3, [r4, #28]
 80083de:	e7de      	b.n	800839e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	f06f 0208 	mvn.w	r2, #8
 80083e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e8:	2204      	movs	r2, #4
 80083ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80083f0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083f2:	d151      	bne.n	8008498 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f4:	f7ff ffb6 	bl	8008364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7ff ffb7 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	2300      	movs	r3, #0
 8008400:	7723      	strb	r3, [r4, #28]
 8008402:	e7c8      	b.n	8008396 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	f06f 0204 	mvn.w	r2, #4
 800840a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800840c:	2202      	movs	r2, #2
 800840e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008416:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008418:	d13b      	bne.n	8008492 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841a:	f7ff ffa3 	bl	8008364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff ffa4 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008424:	2300      	movs	r3, #0
 8008426:	7723      	strb	r3, [r4, #28]
 8008428:	e7b1      	b.n	800838e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800842a:	f06f 0202 	mvn.w	r2, #2
 800842e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008430:	2201      	movs	r2, #1
 8008432:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	079b      	lsls	r3, r3, #30
 8008438:	d025      	beq.n	8008486 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800843a:	f7ff ff95 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	2300      	movs	r3, #0
 8008440:	7723      	strb	r3, [r4, #28]
 8008442:	e7a0      	b.n	8008386 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800844a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800844c:	611a      	str	r2, [r3, #16]
}
 800844e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008452:	f000 b895 	b.w	8008580 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f06f 0201 	mvn.w	r2, #1
 800845c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff ff7e 	bl	8008360 <HAL_TIM_PeriodElapsedCallback>
 8008464:	e79f      	b.n	80083a6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800846c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f888 	bl	8008584 <HAL_TIMEx_BreakCallback>
 8008474:	e79b      	b.n	80083ae <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800847c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800847e:	4620      	mov	r0, r4
 8008480:	f7ff ff76 	bl	8008370 <HAL_TIM_TriggerCallback>
 8008484:	e797      	b.n	80083b6 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	f7ff ff6d 	bl	8008364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff ff6e 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
 8008490:	e7d5      	b.n	800843e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8008492:	f7ff ff69 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8008496:	e7c5      	b.n	8008424 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8008498:	f7ff ff66 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 800849c:	e7af      	b.n	80083fe <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	f7ff ff61 	bl	8008364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7ff ff62 	bl	800836c <HAL_TIM_PWM_PulseFinishedCallback>
 80084a8:	e797      	b.n	80083da <HAL_TIM_IRQHandler+0x66>
 80084aa:	bf00      	nop

080084ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ac:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80084b0:	2a01      	cmp	r2, #1
 80084b2:	d037      	beq.n	8008524 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80084b4:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084b6:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	2002      	movs	r0, #2
{
 80084ba:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80084c0:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80084c4:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80084c6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ca:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084cc:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ce:	4816      	ldr	r0, [pc, #88]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80084d0:	4282      	cmp	r2, r0
 80084d2:	d01a      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084d4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80084d8:	d017      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084da:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80084de:	4282      	cmp	r2, r0
 80084e0:	d013      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084e2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80084e6:	4282      	cmp	r2, r0
 80084e8:	d00f      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084ea:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80084ee:	4282      	cmp	r2, r0
 80084f0:	d00b      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084f2:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80084f6:	4282      	cmp	r2, r0
 80084f8:	d007      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80084fa:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80084fe:	4282      	cmp	r2, r0
 8008500:	d003      	beq.n	800850a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8008502:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8008506:	4282      	cmp	r2, r0
 8008508:	d104      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800850a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800850c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008510:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008512:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008514:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800851c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8008520:	bc30      	pop	{r4, r5}
 8008522:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008524:	2002      	movs	r0, #2
}
 8008526:	4770      	bx	lr
 8008528:	40010000 	.word	0x40010000

0800852c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800852c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d023      	beq.n	800857c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8008534:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008536:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800853a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800853e:	4602      	mov	r2, r0
 8008540:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008542:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008544:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008546:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800854a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800854c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008550:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008552:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008558:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800855a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800855c:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800855e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008562:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008568:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800856a:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800856c:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 800856e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8008570:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008574:	4608      	mov	r0, r1
}
 8008576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800857c:	2002      	movs	r0, #2
}
 800857e:	4770      	bx	lr

08008580 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008588:	2800      	cmp	r0, #0
 800858a:	f000 8087 	beq.w	800869c <HAL_UART_Init+0x114>
{
 800858e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008590:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008594:	4604      	mov	r4, r0
 8008596:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800859a:	2b00      	cmp	r3, #0
 800859c:	d079      	beq.n	8008692 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800859e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085a0:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80085a2:	2224      	movs	r2, #36	@ 0x24
 80085a4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085ae:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b0:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085b2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80085b8:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085ba:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085bc:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085be:	4302      	orrs	r2, r0
 80085c0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80085c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085c4:	4302      	orrs	r2, r0
 80085c6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80085c8:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80085cc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085d0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80085d2:	430a      	orrs	r2, r1
 80085d4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085d6:	695a      	ldr	r2, [r3, #20]
 80085d8:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085da:	4931      	ldr	r1, [pc, #196]	@ (80086a0 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80085e0:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085e2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085e4:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085e6:	d036      	beq.n	8008656 <HAL_UART_Init+0xce>
 80085e8:	4a2e      	ldr	r2, [pc, #184]	@ (80086a4 <HAL_UART_Init+0x11c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d033      	beq.n	8008656 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ee:	f7fe fa09 	bl	8006a04 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f2:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085f4:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085fa:	e9d4 5300 	ldrd	r5, r3, [r4]
 80085fe:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008602:	d02b      	beq.n	800865c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008604:	009a      	lsls	r2, r3, #2
 8008606:	0f9b      	lsrs	r3, r3, #30
 8008608:	f7f7 fe62 	bl	80002d0 <__aeabi_uldivmod>
 800860c:	4a26      	ldr	r2, [pc, #152]	@ (80086a8 <HAL_UART_Init+0x120>)
 800860e:	fba2 1300 	umull	r1, r3, r2, r0
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	2164      	movs	r1, #100	@ 0x64
 8008616:	fb01 0013 	mls	r0, r1, r3, r0
 800861a:	0100      	lsls	r0, r0, #4
 800861c:	3032      	adds	r0, #50	@ 0x32
 800861e:	fba2 2000 	umull	r2, r0, r2, r0
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8008628:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862a:	692a      	ldr	r2, [r5, #16]
 800862c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008630:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008632:	696a      	ldr	r2, [r5, #20]
 8008634:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008638:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 800863a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800863e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8008640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008644:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008646:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008648:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800864c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8008650:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008652:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8008654:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8008656:	f7fe f9e5 	bl	8006a24 <HAL_RCC_GetPCLK2Freq>
 800865a:	e7ca      	b.n	80085f2 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800865c:	18da      	adds	r2, r3, r3
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	415b      	adcs	r3, r3
 8008664:	f7f7 fe34 	bl	80002d0 <__aeabi_uldivmod>
 8008668:	4a0f      	ldr	r2, [pc, #60]	@ (80086a8 <HAL_UART_Init+0x120>)
 800866a:	fba2 3100 	umull	r3, r1, r2, r0
 800866e:	0949      	lsrs	r1, r1, #5
 8008670:	2364      	movs	r3, #100	@ 0x64
 8008672:	fb03 0311 	mls	r3, r3, r1, r0
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	3332      	adds	r3, #50	@ 0x32
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8008682:	091b      	lsrs	r3, r3, #4
 8008684:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800868c:	4413      	add	r3, r2
 800868e:	60ab      	str	r3, [r5, #8]
 8008690:	e7cb      	b.n	800862a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8008692:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8008696:	f7fc f81f 	bl	80046d8 <HAL_UART_MspInit>
 800869a:	e780      	b.n	800859e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800869c:	2001      	movs	r0, #1
}
 800869e:	4770      	bx	lr
 80086a0:	40011000 	.word	0x40011000
 80086a4:	40011400 	.word	0x40011400
 80086a8:	51eb851f 	.word	0x51eb851f

080086ac <HAL_UART_Transmit>:
{
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80086b2:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80086b6:	2820      	cmp	r0, #32
 80086b8:	d14b      	bne.n	8008752 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80086ba:	4688      	mov	r8, r1
 80086bc:	b109      	cbz	r1, 80086c2 <HAL_UART_Transmit+0x16>
 80086be:	4617      	mov	r7, r2
 80086c0:	b912      	cbnz	r2, 80086c8 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 80086c2:	2001      	movs	r0, #1
}
 80086c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c8:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ca:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ce:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d0:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80086d8:	f7fc f95a 	bl	8004990 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086dc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80086de:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80086e4:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 80086e6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e8:	d042      	beq.n	8008770 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 80086ea:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ec:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80086ee:	b292      	uxth	r2, r2
 80086f0:	b192      	cbz	r2, 8008718 <HAL_UART_Transmit+0x6c>
 80086f2:	1c68      	adds	r0, r5, #1
 80086f4:	d122      	bne.n	800873c <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	0612      	lsls	r2, r2, #24
 80086fa:	d5fc      	bpl.n	80086f6 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 80086fc:	f1b8 0f00 	cmp.w	r8, #0
 8008700:	d022      	beq.n	8008748 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008702:	f818 2b01 	ldrb.w	r2, [r8], #1
 8008706:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8008708:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800870a:	3a01      	subs	r2, #1
 800870c:	b292      	uxth	r2, r2
 800870e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008710:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8008712:	b292      	uxth	r2, r2
 8008714:	2a00      	cmp	r2, #0
 8008716:	d1ec      	bne.n	80086f2 <HAL_UART_Transmit+0x46>
 8008718:	1c69      	adds	r1, r5, #1
 800871a:	d125      	bne.n	8008768 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	0652      	lsls	r2, r2, #25
 8008720:	d5fc      	bpl.n	800871c <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8008722:	2320      	movs	r3, #32
 8008724:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8008728:	2000      	movs	r0, #0
 800872a:	e7cb      	b.n	80086c4 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872c:	f7fc f930 	bl	8004990 <HAL_GetTick>
 8008730:	1b80      	subs	r0, r0, r6
 8008732:	4285      	cmp	r5, r0
 8008734:	d322      	bcc.n	800877c <HAL_UART_Transmit+0xd0>
 8008736:	b30d      	cbz	r5, 800877c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	0617      	lsls	r7, r2, #24
 8008740:	d5f4      	bpl.n	800872c <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 8008742:	f1b8 0f00 	cmp.w	r8, #0
 8008746:	d1dc      	bne.n	8008702 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008748:	f839 2b02 	ldrh.w	r2, [r9], #2
 800874c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008750:	e7d9      	b.n	8008706 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8008752:	2002      	movs	r0, #2
}
 8008754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008758:	f7fc f91a 	bl	8004990 <HAL_GetTick>
 800875c:	1b83      	subs	r3, r0, r6
 800875e:	429d      	cmp	r5, r3
 8008760:	d30c      	bcc.n	800877c <HAL_UART_Transmit+0xd0>
 8008762:	b15d      	cbz	r5, 800877c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	065b      	lsls	r3, r3, #25
 800876c:	d5f4      	bpl.n	8008758 <HAL_UART_Transmit+0xac>
 800876e:	e7d8      	b.n	8008722 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1b9      	bne.n	80086ea <HAL_UART_Transmit+0x3e>
 8008776:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8008778:	4698      	mov	r8, r3
 800877a:	e7b6      	b.n	80086ea <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 800877c:	2320      	movs	r3, #32
 800877e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8008782:	2003      	movs	r0, #3
}
 8008784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008788 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop

0800878c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop

08008790 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <UART_DMAAbortOnError>:
{
 8008794:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008796:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8008798:	2300      	movs	r3, #0
 800879a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800879c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800879e:	f7ff fff7 	bl	8008790 <HAL_UART_ErrorCallback>
}
 80087a2:	bd08      	pop	{r3, pc}

080087a4 <HAL_UARTEx_RxEventCallback>:
}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a8:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087aa:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087ac:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b2:	d042      	beq.n	800883a <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d039      	beq.n	800882c <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087b8:	684b      	ldr	r3, [r1, #4]
 80087ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087be:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80087c0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80087c2:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80087c4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 80087c6:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d132      	bne.n	8008838 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087d2:	6802      	ldr	r2, [r0, #0]
 80087d4:	68d1      	ldr	r1, [r2, #12]
 80087d6:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80087da:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087dc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087de:	68d1      	ldr	r1, [r2, #12]
 80087e0:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80087e4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087e6:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80087e8:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087ec:	f021 0101 	bic.w	r1, r1, #1
 80087f0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80087f2:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80087fa:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80087fc:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fe:	d125      	bne.n	800884c <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	f102 030c 	add.w	r3, r2, #12
 8008806:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	f102 0c0c 	add.w	ip, r2, #12
 8008812:	e84c 3100 	strex	r1, r3, [ip]
 8008816:	2900      	cmp	r1, #0
 8008818:	d1f3      	bne.n	8008802 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	06db      	lsls	r3, r3, #27
 800881e:	d41a      	bmi.n	8008856 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008820:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8008822:	f7ff ffbf 	bl	80087a4 <HAL_UARTEx_RxEventCallback>
}
 8008826:	b003      	add	sp, #12
 8008828:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800882c:	6903      	ldr	r3, [r0, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1c2      	bne.n	80087b8 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008832:	684b      	ldr	r3, [r1, #4]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e7c2      	b.n	80087be <UART_Receive_IT.part.0.isra.0+0x16>
 8008838:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883a:	6903      	ldr	r3, [r0, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f8      	bne.n	8008832 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008840:	684b      	ldr	r3, [r1, #4]
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800884a:	e7bb      	b.n	80087c4 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 800884c:	f7ff ff9e 	bl	800878c <HAL_UART_RxCpltCallback>
}
 8008850:	b003      	add	sp, #12
 8008852:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008856:	2300      	movs	r3, #0
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	6853      	ldr	r3, [r2, #4]
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	e7dc      	b.n	8008820 <UART_Receive_IT.part.0.isra.0+0x78>
 8008866:	bf00      	nop

08008868 <HAL_UART_IRQHandler>:
{
 8008868:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800886a:	6803      	ldr	r3, [r0, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800886e:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008870:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8008872:	f012 0f0f 	tst.w	r2, #15
{
 8008876:	b083      	sub	sp, #12
 8008878:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800887a:	d170      	bne.n	800895e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800887c:	0691      	lsls	r1, r2, #26
 800887e:	d502      	bpl.n	8008886 <HAL_UART_IRQHandler+0x1e>
 8008880:	06a9      	lsls	r1, r5, #26
 8008882:	f100 80a1 	bmi.w	80089c8 <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008886:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008888:	2901      	cmp	r1, #1
 800888a:	d00b      	beq.n	80088a4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800888c:	0610      	lsls	r0, r2, #24
 800888e:	d502      	bpl.n	8008896 <HAL_UART_IRQHandler+0x2e>
 8008890:	0629      	lsls	r1, r5, #24
 8008892:	f100 80a3 	bmi.w	80089dc <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008896:	0652      	lsls	r2, r2, #25
 8008898:	d502      	bpl.n	80088a0 <HAL_UART_IRQHandler+0x38>
 800889a:	0668      	lsls	r0, r5, #25
 800889c:	f100 80bd 	bmi.w	8008a1a <HAL_UART_IRQHandler+0x1b2>
}
 80088a0:	b003      	add	sp, #12
 80088a2:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088a4:	06d0      	lsls	r0, r2, #27
 80088a6:	d5f1      	bpl.n	800888c <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088a8:	06e9      	lsls	r1, r5, #27
 80088aa:	d5ef      	bpl.n	800888c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ac:	2200      	movs	r2, #0
 80088ae:	9201      	str	r2, [sp, #4]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	9201      	str	r2, [sp, #4]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	9201      	str	r2, [sp, #4]
 80088b8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	0655      	lsls	r5, r2, #25
 80088be:	f140 8136 	bpl.w	8008b2e <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088c2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80088c4:	6802      	ldr	r2, [r0, #0]
 80088c6:	6852      	ldr	r2, [r2, #4]
 80088c8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	d0e8      	beq.n	80088a0 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80088d0:	4291      	cmp	r1, r2
 80088d2:	d9e5      	bls.n	80088a0 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80088d4:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088d6:	69c2      	ldr	r2, [r0, #28]
 80088d8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80088dc:	d036      	beq.n	800894c <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	f103 020c 	add.w	r2, r3, #12
 80088e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f103 050c 	add.w	r5, r3, #12
 80088ee:	e845 2100 	strex	r1, r2, [r5]
 80088f2:	2900      	cmp	r1, #0
 80088f4:	d1f3      	bne.n	80088de <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	f103 0214 	add.w	r2, r3, #20
 80088fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	f103 0514 	add.w	r5, r3, #20
 8008906:	e845 2100 	strex	r1, r2, [r5]
 800890a:	2900      	cmp	r1, #0
 800890c:	d1f3      	bne.n	80088f6 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	f103 0214 	add.w	r2, r3, #20
 8008912:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	f103 0514 	add.w	r5, r3, #20
 800891e:	e845 2100 	strex	r1, r2, [r5]
 8008922:	2900      	cmp	r1, #0
 8008924:	d1f3      	bne.n	800890e <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8008926:	2220      	movs	r2, #32
 8008928:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	f103 020c 	add.w	r2, r3, #12
 8008932:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	f103 050c 	add.w	r5, r3, #12
 800893e:	e845 2100 	strex	r1, r2, [r5]
 8008942:	2900      	cmp	r1, #0
 8008944:	d1f3      	bne.n	800892e <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008946:	f7fc f983 	bl	8004c50 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800894a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800894c:	2302      	movs	r3, #2
 800894e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008950:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8008952:	1ac9      	subs	r1, r1, r3
 8008954:	4620      	mov	r0, r4
 8008956:	b289      	uxth	r1, r1
 8008958:	f7ff ff24 	bl	80087a4 <HAL_UARTEx_RxEventCallback>
 800895c:	e7a0      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800895e:	f011 0101 	ands.w	r1, r1, #1
 8008962:	d178      	bne.n	8008a56 <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008964:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8008968:	d08d      	beq.n	8008886 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800896a:	07d0      	lsls	r0, r2, #31
 800896c:	d50a      	bpl.n	8008984 <HAL_UART_IRQHandler+0x11c>
 800896e:	05e8      	lsls	r0, r5, #23
 8008970:	f140 80d9 	bpl.w	8008b26 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008974:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008976:	f040 0001 	orr.w	r0, r0, #1
 800897a:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800897c:	0750      	lsls	r0, r2, #29
 800897e:	d55b      	bpl.n	8008a38 <HAL_UART_IRQHandler+0x1d0>
 8008980:	2900      	cmp	r1, #0
 8008982:	d16c      	bne.n	8008a5e <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008984:	0790      	lsls	r0, r2, #30
 8008986:	d570      	bpl.n	8008a6a <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008988:	0710      	lsls	r0, r2, #28
 800898a:	f100 80c9 	bmi.w	8008b20 <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800898e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008990:	2900      	cmp	r1, #0
 8008992:	d085      	beq.n	80088a0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008994:	0691      	lsls	r1, r2, #26
 8008996:	d509      	bpl.n	80089ac <HAL_UART_IRQHandler+0x144>
 8008998:	06aa      	lsls	r2, r5, #26
 800899a:	d507      	bpl.n	80089ac <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80089a0:	2a22      	cmp	r2, #34	@ 0x22
 80089a2:	d103      	bne.n	80089ac <HAL_UART_IRQHandler+0x144>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7ff feff 	bl	80087a8 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089ae:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089b0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089b4:	f001 0108 	and.w	r1, r1, #8
 80089b8:	ea52 0501 	orrs.w	r5, r2, r1
 80089bc:	d15c      	bne.n	8008a78 <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff fee6 	bl	8008790 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c4:	6465      	str	r5, [r4, #68]	@ 0x44
 80089c6:	e76b      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80089cc:	2b22      	cmp	r3, #34	@ 0x22
 80089ce:	f47f af67 	bne.w	80088a0 <HAL_UART_IRQHandler+0x38>
}
 80089d2:	b003      	add	sp, #12
 80089d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089d8:	f7ff bee6 	b.w	80087a8 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089dc:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80089e0:	2a21      	cmp	r2, #33	@ 0x21
 80089e2:	f47f af5d 	bne.w	80088a0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089e6:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089e8:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ea:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80089ee:	f000 80d9 	beq.w	8008ba4 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089f2:	1c51      	adds	r1, r2, #1
 80089f4:	6221      	str	r1, [r4, #32]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80089fa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80089fc:	3a01      	subs	r2, #1
 80089fe:	b292      	uxth	r2, r2
 8008a00:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	f47f af4c 	bne.w	80088a0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a0e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a16:	60da      	str	r2, [r3, #12]
 8008a18:	e742      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a1a:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a22:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008a24:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008a26:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8008a2a:	f7ff fead 	bl	8008788 <HAL_UART_TxCpltCallback>
    return;
 8008a2e:	e737      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a30:	05e8      	lsls	r0, r5, #23
 8008a32:	d49f      	bmi.n	8008974 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a34:	0750      	lsls	r0, r2, #29
 8008a36:	d412      	bmi.n	8008a5e <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a38:	0790      	lsls	r0, r2, #30
 8008a3a:	d516      	bpl.n	8008a6a <HAL_UART_IRQHandler+0x202>
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d0a3      	beq.n	8008988 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008a42:	f041 0104 	orr.w	r1, r1, #4
 8008a46:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a48:	0711      	lsls	r1, r2, #28
 8008a4a:	d5a0      	bpl.n	800898e <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008a4e:	f041 0108 	orr.w	r1, r1, #8
 8008a52:	6461      	str	r1, [r4, #68]	@ 0x44
 8008a54:	e79b      	b.n	800898e <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a56:	07d0      	lsls	r0, r2, #31
 8008a58:	d4ea      	bmi.n	8008a30 <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a5a:	0750      	lsls	r0, r2, #29
 8008a5c:	d55b      	bpl.n	8008b16 <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a5e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008a60:	f040 0002 	orr.w	r0, r0, #2
 8008a64:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a66:	0790      	lsls	r0, r2, #30
 8008a68:	d4ea      	bmi.n	8008a40 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a6a:	0710      	lsls	r0, r2, #28
 8008a6c:	d58f      	bpl.n	800898e <HAL_UART_IRQHandler+0x126>
 8008a6e:	f005 0020 	and.w	r0, r5, #32
 8008a72:	4308      	orrs	r0, r1
 8008a74:	d08b      	beq.n	800898e <HAL_UART_IRQHandler+0x126>
 8008a76:	e7e9      	b.n	8008a4c <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	f103 020c 	add.w	r2, r3, #12
 8008a7c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a80:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	f103 000c 	add.w	r0, r3, #12
 8008a88:	e840 2100 	strex	r1, r2, [r0]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d1f3      	bne.n	8008a78 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	f103 0214 	add.w	r2, r3, #20
 8008a94:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	f103 0014 	add.w	r0, r3, #20
 8008aa0:	e840 2100 	strex	r1, r2, [r0]
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d1f3      	bne.n	8008a90 <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	d022      	beq.n	8008af4 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	2120      	movs	r1, #32
 8008ab2:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	0655      	lsls	r5, r2, #25
 8008abc:	d527      	bpl.n	8008b0e <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	f103 0214 	add.w	r2, r3, #20
 8008ac2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	f103 0014 	add.w	r0, r3, #20
 8008ace:	e840 2100 	strex	r1, r2, [r0]
 8008ad2:	2900      	cmp	r1, #0
 8008ad4:	d1f3      	bne.n	8008abe <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 8008ad6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008ad8:	b1c8      	cbz	r0, 8008b0e <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ada:	4b38      	ldr	r3, [pc, #224]	@ (8008bbc <HAL_UART_IRQHandler+0x354>)
 8008adc:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ade:	f7fc f901 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f43f aedc 	beq.w	80088a0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ae8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008aea:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8008aec:	b003      	add	sp, #12
 8008aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008af2:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	f103 020c 	add.w	r2, r3, #12
 8008af8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	f103 000c 	add.w	r0, r3, #12
 8008b04:	e840 2100 	strex	r1, r2, [r0]
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	d1f3      	bne.n	8008af4 <HAL_UART_IRQHandler+0x28c>
 8008b0c:	e7cf      	b.n	8008aae <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fe3e 	bl	8008790 <HAL_UART_ErrorCallback>
 8008b14:	e6c4      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b16:	0791      	lsls	r1, r2, #30
 8008b18:	d492      	bmi.n	8008a40 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b1a:	0711      	lsls	r1, r2, #28
 8008b1c:	d496      	bmi.n	8008a4c <HAL_UART_IRQHandler+0x1e4>
 8008b1e:	e736      	b.n	800898e <HAL_UART_IRQHandler+0x126>
 8008b20:	06a9      	lsls	r1, r5, #26
 8008b22:	d493      	bmi.n	8008a4c <HAL_UART_IRQHandler+0x1e4>
 8008b24:	e733      	b.n	800898e <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b26:	0750      	lsls	r0, r2, #29
 8008b28:	f53f af2c 	bmi.w	8008984 <HAL_UART_IRQHandler+0x11c>
 8008b2c:	e784      	b.n	8008a38 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b2e:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8008b30:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b32:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8008b34:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b36:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	f43f aeb1 	beq.w	80088a0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b3e:	1a41      	subs	r1, r0, r1
 8008b40:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008b42:	2900      	cmp	r1, #0
 8008b44:	f43f aeac 	beq.w	80088a0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	f103 020c 	add.w	r2, r3, #12
 8008b4c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b50:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	f103 050c 	add.w	r5, r3, #12
 8008b58:	e845 2000 	strex	r0, r2, [r5]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d1f3      	bne.n	8008b48 <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	f103 0214 	add.w	r2, r3, #20
 8008b64:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b68:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	f103 0514 	add.w	r5, r3, #20
 8008b70:	e845 2000 	strex	r0, r2, [r5]
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1f3      	bne.n	8008b60 <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7e:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	f103 020c 	add.w	r2, r3, #12
 8008b84:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b88:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	f103 050c 	add.w	r5, r3, #12
 8008b90:	e845 2000 	strex	r0, r2, [r5]
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d1f3      	bne.n	8008b80 <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff fe01 	bl	80087a4 <HAL_UARTEx_RxEventCallback>
 8008ba2:	e67d      	b.n	80088a0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	f47f af23 	bne.w	80089f2 <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bac:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008bb0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008bb4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bb6:	6222      	str	r2, [r4, #32]
 8008bb8:	e71f      	b.n	80089fa <HAL_UART_IRQHandler+0x192>
 8008bba:	bf00      	nop
 8008bbc:	08008795 	.word	0x08008795

08008bc0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	b410      	push	{r4}
 8008bc4:	f10d 0c08 	add.w	ip, sp, #8
 8008bc8:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bcc:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8008bce:	9904      	ldr	r1, [sp, #16]
  tmpreg |= (Init.ClockEdge           |\
 8008bd0:	4313      	orrs	r3, r2
             Init.ClockBypass         |\
 8008bd2:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8008bd4:	e9dd 4105 	ldrd	r4, r1, [sp, #20]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bd8:	6842      	ldr	r2, [r0, #4]
             Init.ClockPowerSave      |\
 8008bda:	4323      	orrs	r3, r4
             Init.BusWide             |\
 8008bdc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8008bde:	9907      	ldr	r1, [sp, #28]

  return HAL_OK;
}
 8008be0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008be4:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.HardwareFlowControl |\
 8008be8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bea:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	6043      	str	r3, [r0, #4]
}
 8008bf2:	b004      	add	sp, #16
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	4770      	bx	lr

08008bf8 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008bf8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop

08008c00 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c00:	680b      	ldr	r3, [r1, #0]
 8008c02:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8008c06:	2000      	movs	r0, #0
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop

08008c0c <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8008c10:	2000      	movs	r0, #0
 8008c12:	4770      	bx	lr

08008c14 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c14:	6800      	ldr	r0, [r0, #0]
}
 8008c16:	f000 0003 	and.w	r0, r0, #3
 8008c1a:	4770      	bx	lr

08008c1c <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008c1c:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8008c1e:	5840      	ldr	r0, [r0, r1]
}  
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008c24:	b410      	push	{r4}

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008c26:	e9d1 4200 	ldrd	r4, r2, [r1]

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c2a:	688b      	ldr	r3, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 8008c2c:	6244      	str	r4, [r0, #36]	@ 0x24
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c2e:	68cc      	ldr	r4, [r1, #12]
  SDIOx->DLEN = Data->DataLength;
 8008c30:	6282      	str	r2, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008c32:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
                       Data->TransferMode  |\
 8008c34:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008c38:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferDir   |\
 8008c3a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008c3c:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
                       Data->TransferMode  |\
 8008c40:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008c42:	4313      	orrs	r3, r2
 8008c44:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8008c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop

08008c50 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c50:	4a4a      	ldr	r2, [pc, #296]	@ (8008d7c <SDMMC_CmdBlockLength+0x12c>)
  SDIOx->ARG = Command->Argument;
 8008c52:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c54:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c56:	494a      	ldr	r1, [pc, #296]	@ (8008d80 <SDMMC_CmdBlockLength+0x130>)
 8008c58:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c5a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c5e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c62:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c66:	0a52      	lsrs	r2, r2, #9
 8008c68:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c6c:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008c70:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c74:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 8008c76:	1e53      	subs	r3, r2, #1
 8008c78:	b14a      	cbz	r2, 8008c8e <SDMMC_CmdBlockLength+0x3e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8008c7a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c7c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8008c80:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c84:	d001      	beq.n	8008c8a <SDMMC_CmdBlockLength+0x3a>
 8008c86:	0511      	lsls	r1, r2, #20
 8008c88:	d504      	bpl.n	8008c94 <SDMMC_CmdBlockLength+0x44>
    if (count-- == 0U)
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	d1f5      	bne.n	8008c7a <SDMMC_CmdBlockLength+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8008c8e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008c92:	4770      	bx	lr
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c94:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c96:	075a      	lsls	r2, r3, #29
 8008c98:	d43e      	bmi.n	8008d18 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c9c:	07db      	lsls	r3, r3, #31
 8008c9e:	d407      	bmi.n	8008cb0 <SDMMC_CmdBlockLength+0x60>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ca0:	23c5      	movs	r3, #197	@ 0xc5
 8008ca2:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8008ca4:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b10      	cmp	r3, #16
 8008caa:	d004      	beq.n	8008cb6 <SDMMC_CmdBlockLength+0x66>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cac:	2001      	movs	r0, #1
 8008cae:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cb4:	e7fa      	b.n	8008cac <SDMMC_CmdBlockLength+0x5c>
  return (*(__IO uint32_t *) tmp);
 8008cb6:	6943      	ldr	r3, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008cb8:	4832      	ldr	r0, [pc, #200]	@ (8008d84 <SDMMC_CmdBlockLength+0x134>)
 8008cba:	4018      	ands	r0, r3
 8008cbc:	b358      	cbz	r0, 8008d16 <SDMMC_CmdBlockLength+0xc6>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	db2e      	blt.n	8008d20 <SDMMC_CmdBlockLength+0xd0>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008cc2:	0059      	lsls	r1, r3, #1
 8008cc4:	d42f      	bmi.n	8008d26 <SDMMC_CmdBlockLength+0xd6>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008cc6:	009a      	lsls	r2, r3, #2
 8008cc8:	d42f      	bmi.n	8008d2a <SDMMC_CmdBlockLength+0xda>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008cca:	00d9      	lsls	r1, r3, #3
 8008ccc:	d42f      	bmi.n	8008d2e <SDMMC_CmdBlockLength+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008cce:	011a      	lsls	r2, r3, #4
 8008cd0:	d430      	bmi.n	8008d34 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008cd2:	0159      	lsls	r1, r3, #5
 8008cd4:	d431      	bmi.n	8008d3a <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008cd6:	01da      	lsls	r2, r3, #7
 8008cd8:	d432      	bmi.n	8008d40 <SDMMC_CmdBlockLength+0xf0>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008cda:	0219      	lsls	r1, r3, #8
 8008cdc:	d433      	bmi.n	8008d46 <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008cde:	025a      	lsls	r2, r3, #9
 8008ce0:	d434      	bmi.n	8008d4c <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008ce2:	0299      	lsls	r1, r3, #10
 8008ce4:	d43e      	bmi.n	8008d64 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ce6:	02da      	lsls	r2, r3, #11
 8008ce8:	d439      	bmi.n	8008d5e <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008cea:	0359      	lsls	r1, r3, #13
 8008cec:	d434      	bmi.n	8008d58 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008cee:	039a      	lsls	r2, r3, #14
 8008cf0:	d42f      	bmi.n	8008d52 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008cf2:	03d9      	lsls	r1, r3, #15
 8008cf4:	d43f      	bmi.n	8008d76 <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008cf6:	041a      	lsls	r2, r3, #16
 8008cf8:	d43a      	bmi.n	8008d70 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008cfa:	0459      	lsls	r1, r3, #17
 8008cfc:	d435      	bmi.n	8008d6a <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008cfe:	049a      	lsls	r2, r3, #18
 8008d00:	d407      	bmi.n	8008d12 <SDMMC_CmdBlockLength+0xc2>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008d02:	f013 0f08 	tst.w	r3, #8
 8008d06:	bf0c      	ite	eq
 8008d08:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008d0c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008d10:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008d12:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008d16:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d18:	2304      	movs	r3, #4
 8008d1a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008d20:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008d24:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008d26:	2040      	movs	r0, #64	@ 0x40
 8008d28:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008d2a:	2080      	movs	r0, #128	@ 0x80
 8008d2c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008d2e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008d32:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008d34:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008d38:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008d3a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008d3e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008d40:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008d44:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d46:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008d4a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008d50:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008d52:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008d56:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008d58:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008d5c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008d5e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008d62:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008d64:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008d68:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008d6a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008d6e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008d70:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008d74:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008d76:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008d7a:	4770      	bx	lr
 8008d7c:	20000008 	.word	0x20000008
 8008d80:	10624dd3 	.word	0x10624dd3
 8008d84:	fdffe008 	.word	0xfdffe008

08008d88 <SDMMC_CmdReadSingleBlock>:
  SDIOx->ARG = Command->Argument;
 8008d88:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8008eb8 <SDMMC_CmdReadSingleBlock+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d8c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d8e:	494b      	ldr	r1, [pc, #300]	@ (8008ebc <SDMMC_CmdReadSingleBlock+0x134>)
 8008d90:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d92:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d96:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d9a:	f023 030f 	bic.w	r3, r3, #15
 8008d9e:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008da2:	0a52      	lsrs	r2, r2, #9
 8008da4:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008da8:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008dac:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008db0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8008db2:	1e53      	subs	r3, r2, #1
 8008db4:	b14a      	cbz	r2, 8008dca <SDMMC_CmdReadSingleBlock+0x42>
    sta_reg = SDIOx->STA;
 8008db6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008db8:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8008dbc:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dc0:	d001      	beq.n	8008dc6 <SDMMC_CmdReadSingleBlock+0x3e>
 8008dc2:	0511      	lsls	r1, r2, #20
 8008dc4:	d504      	bpl.n	8008dd0 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	d1f5      	bne.n	8008db6 <SDMMC_CmdReadSingleBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8008dca:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008dce:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008dd0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008dd2:	075a      	lsls	r2, r3, #29
 8008dd4:	d43e      	bmi.n	8008e54 <SDMMC_CmdReadSingleBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008dd6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008dd8:	07db      	lsls	r3, r3, #31
 8008dda:	d407      	bmi.n	8008dec <SDMMC_CmdReadSingleBlock+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ddc:	23c5      	movs	r3, #197	@ 0xc5
 8008dde:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8008de0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b11      	cmp	r3, #17
 8008de6:	d004      	beq.n	8008df2 <SDMMC_CmdReadSingleBlock+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008de8:	2001      	movs	r0, #1
 8008dea:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008dec:	2301      	movs	r3, #1
 8008dee:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008df0:	e7fa      	b.n	8008de8 <SDMMC_CmdReadSingleBlock+0x60>
  return (*(__IO uint32_t *) tmp);
 8008df2:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008df4:	4832      	ldr	r0, [pc, #200]	@ (8008ec0 <SDMMC_CmdReadSingleBlock+0x138>)
 8008df6:	4018      	ands	r0, r3
 8008df8:	b358      	cbz	r0, 8008e52 <SDMMC_CmdReadSingleBlock+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	db2e      	blt.n	8008e5c <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008dfe:	0059      	lsls	r1, r3, #1
 8008e00:	d42f      	bmi.n	8008e62 <SDMMC_CmdReadSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008e02:	009a      	lsls	r2, r3, #2
 8008e04:	d42f      	bmi.n	8008e66 <SDMMC_CmdReadSingleBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008e06:	00d9      	lsls	r1, r3, #3
 8008e08:	d42f      	bmi.n	8008e6a <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008e0a:	011a      	lsls	r2, r3, #4
 8008e0c:	d430      	bmi.n	8008e70 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008e0e:	0159      	lsls	r1, r3, #5
 8008e10:	d431      	bmi.n	8008e76 <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008e12:	01da      	lsls	r2, r3, #7
 8008e14:	d432      	bmi.n	8008e7c <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008e16:	0219      	lsls	r1, r3, #8
 8008e18:	d433      	bmi.n	8008e82 <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008e1a:	025a      	lsls	r2, r3, #9
 8008e1c:	d434      	bmi.n	8008e88 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008e1e:	0299      	lsls	r1, r3, #10
 8008e20:	d43e      	bmi.n	8008ea0 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008e22:	02da      	lsls	r2, r3, #11
 8008e24:	d439      	bmi.n	8008e9a <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008e26:	0359      	lsls	r1, r3, #13
 8008e28:	d434      	bmi.n	8008e94 <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e2a:	039a      	lsls	r2, r3, #14
 8008e2c:	d42f      	bmi.n	8008e8e <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e2e:	03d9      	lsls	r1, r3, #15
 8008e30:	d43f      	bmi.n	8008eb2 <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008e32:	041a      	lsls	r2, r3, #16
 8008e34:	d43a      	bmi.n	8008eac <SDMMC_CmdReadSingleBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008e36:	0459      	lsls	r1, r3, #17
 8008e38:	d435      	bmi.n	8008ea6 <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008e3a:	049a      	lsls	r2, r3, #18
 8008e3c:	d407      	bmi.n	8008e4e <SDMMC_CmdReadSingleBlock+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008e3e:	f013 0f08 	tst.w	r3, #8
 8008e42:	bf0c      	ite	eq
 8008e44:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008e48:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008e4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008e4e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008e52:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e54:	2304      	movs	r3, #4
 8008e56:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e58:	4618      	mov	r0, r3
 8008e5a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e5c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008e60:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008e62:	2040      	movs	r0, #64	@ 0x40
 8008e64:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008e66:	2080      	movs	r0, #128	@ 0x80
 8008e68:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008e6a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008e6e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008e70:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008e74:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008e76:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008e7a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008e7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008e80:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008e86:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008e8c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e8e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008e92:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e94:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008e98:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008e9a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008e9e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ea0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008ea4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008ea6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008eaa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008eac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008eb0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008eb2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008eb6:	4770      	bx	lr
 8008eb8:	20000008 	.word	0x20000008
 8008ebc:	10624dd3 	.word	0x10624dd3
 8008ec0:	fdffe008 	.word	0xfdffe008

08008ec4 <SDMMC_CmdReadMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8008ec4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8008ff4 <SDMMC_CmdReadMultiBlock+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ec8:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008eca:	494b      	ldr	r1, [pc, #300]	@ (8008ff8 <SDMMC_CmdReadMultiBlock+0x134>)
 8008ecc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ece:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ed2:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ed6:	f023 030f 	bic.w	r3, r3, #15
 8008eda:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ede:	0a52      	lsrs	r2, r2, #9
 8008ee0:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ee8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008eec:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8008eee:	1e53      	subs	r3, r2, #1
 8008ef0:	b14a      	cbz	r2, 8008f06 <SDMMC_CmdReadMultiBlock+0x42>
    sta_reg = SDIOx->STA;
 8008ef2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ef4:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8008ef8:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008efc:	d001      	beq.n	8008f02 <SDMMC_CmdReadMultiBlock+0x3e>
 8008efe:	0511      	lsls	r1, r2, #20
 8008f00:	d504      	bpl.n	8008f0c <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	d1f5      	bne.n	8008ef2 <SDMMC_CmdReadMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8008f06:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008f0a:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f0e:	075a      	lsls	r2, r3, #29
 8008f10:	d43e      	bmi.n	8008f90 <SDMMC_CmdReadMultiBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f14:	07db      	lsls	r3, r3, #31
 8008f16:	d407      	bmi.n	8008f28 <SDMMC_CmdReadMultiBlock+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f18:	23c5      	movs	r3, #197	@ 0xc5
 8008f1a:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8008f1c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b12      	cmp	r3, #18
 8008f22:	d004      	beq.n	8008f2e <SDMMC_CmdReadMultiBlock+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f24:	2001      	movs	r0, #1
 8008f26:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f28:	2301      	movs	r3, #1
 8008f2a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f2c:	e7fa      	b.n	8008f24 <SDMMC_CmdReadMultiBlock+0x60>
  return (*(__IO uint32_t *) tmp);
 8008f2e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008f30:	4832      	ldr	r0, [pc, #200]	@ (8008ffc <SDMMC_CmdReadMultiBlock+0x138>)
 8008f32:	4018      	ands	r0, r3
 8008f34:	b358      	cbz	r0, 8008f8e <SDMMC_CmdReadMultiBlock+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	db2e      	blt.n	8008f98 <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f3a:	0059      	lsls	r1, r3, #1
 8008f3c:	d42f      	bmi.n	8008f9e <SDMMC_CmdReadMultiBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f3e:	009a      	lsls	r2, r3, #2
 8008f40:	d42f      	bmi.n	8008fa2 <SDMMC_CmdReadMultiBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f42:	00d9      	lsls	r1, r3, #3
 8008f44:	d42f      	bmi.n	8008fa6 <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f46:	011a      	lsls	r2, r3, #4
 8008f48:	d430      	bmi.n	8008fac <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f4a:	0159      	lsls	r1, r3, #5
 8008f4c:	d431      	bmi.n	8008fb2 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f4e:	01da      	lsls	r2, r3, #7
 8008f50:	d432      	bmi.n	8008fb8 <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f52:	0219      	lsls	r1, r3, #8
 8008f54:	d433      	bmi.n	8008fbe <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f56:	025a      	lsls	r2, r3, #9
 8008f58:	d434      	bmi.n	8008fc4 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f5a:	0299      	lsls	r1, r3, #10
 8008f5c:	d43e      	bmi.n	8008fdc <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f5e:	02da      	lsls	r2, r3, #11
 8008f60:	d439      	bmi.n	8008fd6 <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f62:	0359      	lsls	r1, r3, #13
 8008f64:	d434      	bmi.n	8008fd0 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f66:	039a      	lsls	r2, r3, #14
 8008f68:	d42f      	bmi.n	8008fca <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f6a:	03d9      	lsls	r1, r3, #15
 8008f6c:	d43f      	bmi.n	8008fee <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f6e:	041a      	lsls	r2, r3, #16
 8008f70:	d43a      	bmi.n	8008fe8 <SDMMC_CmdReadMultiBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f72:	0459      	lsls	r1, r3, #17
 8008f74:	d435      	bmi.n	8008fe2 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f76:	049a      	lsls	r2, r3, #18
 8008f78:	d407      	bmi.n	8008f8a <SDMMC_CmdReadMultiBlock+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008f7a:	f013 0f08 	tst.w	r3, #8
 8008f7e:	bf0c      	ite	eq
 8008f80:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8008f84:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8008f88:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8008f8a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8008f8e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f90:	2304      	movs	r3, #4
 8008f92:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f94:	4618      	mov	r0, r3
 8008f96:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f98:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8008f9c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f9e:	2040      	movs	r0, #64	@ 0x40
 8008fa0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008fa2:	2080      	movs	r0, #128	@ 0x80
 8008fa4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008fa6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008faa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008fac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008fb0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008fb2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008fb6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008fb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008fbc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008fbe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008fc2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008fc8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008fca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008fce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fd0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008fd4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8008fd6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008fda:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008fdc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008fe0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008fe2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008fe6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008fe8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008fec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008fee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008ff2:	4770      	bx	lr
 8008ff4:	20000008 	.word	0x20000008
 8008ff8:	10624dd3 	.word	0x10624dd3
 8008ffc:	fdffe008 	.word	0xfdffe008

08009000 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009000:	4a4a      	ldr	r2, [pc, #296]	@ (800912c <SDMMC_CmdWriteSingleBlock+0x12c>)
  SDIOx->ARG = Command->Argument;
 8009002:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009004:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009006:	494a      	ldr	r1, [pc, #296]	@ (8009130 <SDMMC_CmdWriteSingleBlock+0x130>)
 8009008:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800900a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800900e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009012:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009016:	0a52      	lsrs	r2, r2, #9
 8009018:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800901c:	f443 638b 	orr.w	r3, r3, #1112	@ 0x458
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009020:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009024:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009026:	1e53      	subs	r3, r2, #1
 8009028:	b14a      	cbz	r2, 800903e <SDMMC_CmdWriteSingleBlock+0x3e>
    sta_reg = SDIOx->STA;
 800902a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800902c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009030:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009034:	d001      	beq.n	800903a <SDMMC_CmdWriteSingleBlock+0x3a>
 8009036:	0511      	lsls	r1, r2, #20
 8009038:	d504      	bpl.n	8009044 <SDMMC_CmdWriteSingleBlock+0x44>
    if (count-- == 0U)
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	d1f5      	bne.n	800902a <SDMMC_CmdWriteSingleBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800903e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009042:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009044:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009046:	075a      	lsls	r2, r3, #29
 8009048:	d43e      	bmi.n	80090c8 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800904a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800904c:	07db      	lsls	r3, r3, #31
 800904e:	d407      	bmi.n	8009060 <SDMMC_CmdWriteSingleBlock+0x60>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009050:	23c5      	movs	r3, #197	@ 0xc5
 8009052:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009054:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b18      	cmp	r3, #24
 800905a:	d004      	beq.n	8009066 <SDMMC_CmdWriteSingleBlock+0x66>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800905c:	2001      	movs	r0, #1
 800905e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009060:	2301      	movs	r3, #1
 8009062:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009064:	e7fa      	b.n	800905c <SDMMC_CmdWriteSingleBlock+0x5c>
  return (*(__IO uint32_t *) tmp);
 8009066:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009068:	4832      	ldr	r0, [pc, #200]	@ (8009134 <SDMMC_CmdWriteSingleBlock+0x134>)
 800906a:	4018      	ands	r0, r3
 800906c:	b358      	cbz	r0, 80090c6 <SDMMC_CmdWriteSingleBlock+0xc6>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800906e:	2b00      	cmp	r3, #0
 8009070:	db2e      	blt.n	80090d0 <SDMMC_CmdWriteSingleBlock+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009072:	0059      	lsls	r1, r3, #1
 8009074:	d42f      	bmi.n	80090d6 <SDMMC_CmdWriteSingleBlock+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009076:	009a      	lsls	r2, r3, #2
 8009078:	d42f      	bmi.n	80090da <SDMMC_CmdWriteSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800907a:	00d9      	lsls	r1, r3, #3
 800907c:	d42f      	bmi.n	80090de <SDMMC_CmdWriteSingleBlock+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800907e:	011a      	lsls	r2, r3, #4
 8009080:	d430      	bmi.n	80090e4 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009082:	0159      	lsls	r1, r3, #5
 8009084:	d431      	bmi.n	80090ea <SDMMC_CmdWriteSingleBlock+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009086:	01da      	lsls	r2, r3, #7
 8009088:	d432      	bmi.n	80090f0 <SDMMC_CmdWriteSingleBlock+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800908a:	0219      	lsls	r1, r3, #8
 800908c:	d433      	bmi.n	80090f6 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800908e:	025a      	lsls	r2, r3, #9
 8009090:	d434      	bmi.n	80090fc <SDMMC_CmdWriteSingleBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009092:	0299      	lsls	r1, r3, #10
 8009094:	d43e      	bmi.n	8009114 <SDMMC_CmdWriteSingleBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009096:	02da      	lsls	r2, r3, #11
 8009098:	d439      	bmi.n	800910e <SDMMC_CmdWriteSingleBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800909a:	0359      	lsls	r1, r3, #13
 800909c:	d434      	bmi.n	8009108 <SDMMC_CmdWriteSingleBlock+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800909e:	039a      	lsls	r2, r3, #14
 80090a0:	d42f      	bmi.n	8009102 <SDMMC_CmdWriteSingleBlock+0x102>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090a2:	03d9      	lsls	r1, r3, #15
 80090a4:	d43f      	bmi.n	8009126 <SDMMC_CmdWriteSingleBlock+0x126>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090a6:	041a      	lsls	r2, r3, #16
 80090a8:	d43a      	bmi.n	8009120 <SDMMC_CmdWriteSingleBlock+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090aa:	0459      	lsls	r1, r3, #17
 80090ac:	d435      	bmi.n	800911a <SDMMC_CmdWriteSingleBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80090ae:	049a      	lsls	r2, r3, #18
 80090b0:	d407      	bmi.n	80090c2 <SDMMC_CmdWriteSingleBlock+0xc2>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80090b2:	f013 0f08 	tst.w	r3, #8
 80090b6:	bf0c      	ite	eq
 80090b8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80090bc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80090c0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80090c2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 80090c6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090c8:	2304      	movs	r3, #4
 80090ca:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090cc:	4618      	mov	r0, r3
 80090ce:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090d0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80090d4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090d6:	2040      	movs	r0, #64	@ 0x40
 80090d8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090da:	2080      	movs	r0, #128	@ 0x80
 80090dc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80090e2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80090e8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090ea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80090ee:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80090f4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80090fa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009100:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009102:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009106:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009108:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800910c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800910e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009112:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009114:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009118:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800911a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800911e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009120:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009124:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009126:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800912a:	4770      	bx	lr
 800912c:	20000008 	.word	0x20000008
 8009130:	10624dd3 	.word	0x10624dd3
 8009134:	fdffe008 	.word	0xfdffe008

08009138 <SDMMC_CmdWriteMultiBlock>:
  SDIOx->ARG = Command->Argument;
 8009138:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800913a:	4a4b      	ldr	r2, [pc, #300]	@ (8009268 <SDMMC_CmdWriteMultiBlock+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800913c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800913e:	494b      	ldr	r1, [pc, #300]	@ (800926c <SDMMC_CmdWriteMultiBlock+0x134>)
 8009140:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009142:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009146:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800914a:	f023 030f 	bic.w	r3, r3, #15
 800914e:	f443 638b 	orr.w	r3, r3, #1112	@ 0x458
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009152:	0a52      	lsrs	r2, r2, #9
 8009154:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009158:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800915c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009160:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009162:	1e53      	subs	r3, r2, #1
 8009164:	b14a      	cbz	r2, 800917a <SDMMC_CmdWriteMultiBlock+0x42>
    sta_reg = SDIOx->STA;
 8009166:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009168:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800916c:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009170:	d001      	beq.n	8009176 <SDMMC_CmdWriteMultiBlock+0x3e>
 8009172:	0511      	lsls	r1, r2, #20
 8009174:	d504      	bpl.n	8009180 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	d1f5      	bne.n	8009166 <SDMMC_CmdWriteMultiBlock+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800917a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800917e:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009180:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009182:	075a      	lsls	r2, r3, #29
 8009184:	d43e      	bmi.n	8009204 <SDMMC_CmdWriteMultiBlock+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009186:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009188:	07db      	lsls	r3, r3, #31
 800918a:	d407      	bmi.n	800919c <SDMMC_CmdWriteMultiBlock+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800918c:	23c5      	movs	r3, #197	@ 0xc5
 800918e:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009190:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b19      	cmp	r3, #25
 8009196:	d004      	beq.n	80091a2 <SDMMC_CmdWriteMultiBlock+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009198:	2001      	movs	r0, #1
 800919a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800919c:	2301      	movs	r3, #1
 800919e:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091a0:	e7fa      	b.n	8009198 <SDMMC_CmdWriteMultiBlock+0x60>
  return (*(__IO uint32_t *) tmp);
 80091a2:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091a4:	4832      	ldr	r0, [pc, #200]	@ (8009270 <SDMMC_CmdWriteMultiBlock+0x138>)
 80091a6:	4018      	ands	r0, r3
 80091a8:	b358      	cbz	r0, 8009202 <SDMMC_CmdWriteMultiBlock+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	db2e      	blt.n	800920c <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091ae:	0059      	lsls	r1, r3, #1
 80091b0:	d42f      	bmi.n	8009212 <SDMMC_CmdWriteMultiBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091b2:	009a      	lsls	r2, r3, #2
 80091b4:	d42f      	bmi.n	8009216 <SDMMC_CmdWriteMultiBlock+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091b6:	00d9      	lsls	r1, r3, #3
 80091b8:	d42f      	bmi.n	800921a <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091ba:	011a      	lsls	r2, r3, #4
 80091bc:	d430      	bmi.n	8009220 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80091be:	0159      	lsls	r1, r3, #5
 80091c0:	d431      	bmi.n	8009226 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091c2:	01da      	lsls	r2, r3, #7
 80091c4:	d432      	bmi.n	800922c <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091c6:	0219      	lsls	r1, r3, #8
 80091c8:	d433      	bmi.n	8009232 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091ca:	025a      	lsls	r2, r3, #9
 80091cc:	d434      	bmi.n	8009238 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091ce:	0299      	lsls	r1, r3, #10
 80091d0:	d43e      	bmi.n	8009250 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091d2:	02da      	lsls	r2, r3, #11
 80091d4:	d439      	bmi.n	800924a <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091d6:	0359      	lsls	r1, r3, #13
 80091d8:	d434      	bmi.n	8009244 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091da:	039a      	lsls	r2, r3, #14
 80091dc:	d42f      	bmi.n	800923e <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80091de:	03d9      	lsls	r1, r3, #15
 80091e0:	d43f      	bmi.n	8009262 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80091e2:	041a      	lsls	r2, r3, #16
 80091e4:	d43a      	bmi.n	800925c <SDMMC_CmdWriteMultiBlock+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80091e6:	0459      	lsls	r1, r3, #17
 80091e8:	d435      	bmi.n	8009256 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80091ea:	049a      	lsls	r2, r3, #18
 80091ec:	d407      	bmi.n	80091fe <SDMMC_CmdWriteMultiBlock+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091ee:	f013 0f08 	tst.w	r3, #8
 80091f2:	bf0c      	ite	eq
 80091f4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80091f8:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80091fc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80091fe:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009202:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009204:	2304      	movs	r3, #4
 8009206:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009208:	4618      	mov	r0, r3
 800920a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800920c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009210:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009212:	2040      	movs	r0, #64	@ 0x40
 8009214:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009216:	2080      	movs	r0, #128	@ 0x80
 8009218:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800921a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800921e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009220:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009224:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009226:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800922a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800922c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009230:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009232:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009236:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009238:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800923c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800923e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009242:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009244:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009248:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800924a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800924e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009250:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009254:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009256:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800925a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800925c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009260:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009262:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009266:	4770      	bx	lr
 8009268:	20000008 	.word	0x20000008
 800926c:	10624dd3 	.word	0x10624dd3
 8009270:	fdffe008 	.word	0xfdffe008

08009274 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 8009274:	2300      	movs	r3, #0
{
 8009276:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009278:	4a4c      	ldr	r2, [pc, #304]	@ (80093ac <SDMMC_CmdStopTransfer+0x138>)
  SDIOx->ARG = Command->Argument;
 800927a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800927c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	494b      	ldr	r1, [pc, #300]	@ (80093b0 <SDMMC_CmdStopTransfer+0x13c>)
 8009282:	4c4c      	ldr	r4, [pc, #304]	@ (80093b4 <SDMMC_CmdStopTransfer+0x140>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009284:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009288:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800928c:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009290:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009294:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009296:	f043 0304 	orr.w	r3, r3, #4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800929a:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800929e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80092a0:	1e53      	subs	r3, r2, #1
 80092a2:	b14a      	cbz	r2, 80092b8 <SDMMC_CmdStopTransfer+0x44>
    sta_reg = SDIOx->STA;
 80092a4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092a6:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80092aa:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092ae:	d001      	beq.n	80092b4 <SDMMC_CmdStopTransfer+0x40>
 80092b0:	0512      	lsls	r2, r2, #20
 80092b2:	d506      	bpl.n	80092c2 <SDMMC_CmdStopTransfer+0x4e>
    if (count-- == 0U)
 80092b4:	1c59      	adds	r1, r3, #1
 80092b6:	d1f5      	bne.n	80092a4 <SDMMC_CmdStopTransfer+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80092b8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80092bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092c0:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80092c4:	075c      	lsls	r4, r3, #29
 80092c6:	d43c      	bmi.n	8009342 <SDMMC_CmdStopTransfer+0xce>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	d407      	bmi.n	80092de <SDMMC_CmdStopTransfer+0x6a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092ce:	23c5      	movs	r3, #197	@ 0xc5
 80092d0:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80092d2:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b0c      	cmp	r3, #12
 80092d8:	d004      	beq.n	80092e4 <SDMMC_CmdStopTransfer+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092da:	2001      	movs	r0, #1
 80092dc:	e7ee      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092de:	2301      	movs	r3, #1
 80092e0:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092e2:	e7fa      	b.n	80092da <SDMMC_CmdStopTransfer+0x66>
  return (*(__IO uint32_t *) tmp);
 80092e4:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092e6:	4834      	ldr	r0, [pc, #208]	@ (80093b8 <SDMMC_CmdStopTransfer+0x144>)
 80092e8:	4018      	ands	r0, r3
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d0e6      	beq.n	80092bc <SDMMC_CmdStopTransfer+0x48>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	db2b      	blt.n	800934a <SDMMC_CmdStopTransfer+0xd6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092f2:	005a      	lsls	r2, r3, #1
 80092f4:	d42c      	bmi.n	8009350 <SDMMC_CmdStopTransfer+0xdc>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092f6:	009c      	lsls	r4, r3, #2
 80092f8:	d42c      	bmi.n	8009354 <SDMMC_CmdStopTransfer+0xe0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092fa:	00d9      	lsls	r1, r3, #3
 80092fc:	d42c      	bmi.n	8009358 <SDMMC_CmdStopTransfer+0xe4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092fe:	011a      	lsls	r2, r3, #4
 8009300:	d42d      	bmi.n	800935e <SDMMC_CmdStopTransfer+0xea>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009302:	015c      	lsls	r4, r3, #5
 8009304:	d42e      	bmi.n	8009364 <SDMMC_CmdStopTransfer+0xf0>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009306:	01d9      	lsls	r1, r3, #7
 8009308:	d42f      	bmi.n	800936a <SDMMC_CmdStopTransfer+0xf6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800930a:	021a      	lsls	r2, r3, #8
 800930c:	d430      	bmi.n	8009370 <SDMMC_CmdStopTransfer+0xfc>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800930e:	025c      	lsls	r4, r3, #9
 8009310:	d431      	bmi.n	8009376 <SDMMC_CmdStopTransfer+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009312:	0299      	lsls	r1, r3, #10
 8009314:	d43b      	bmi.n	800938e <SDMMC_CmdStopTransfer+0x11a>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009316:	02da      	lsls	r2, r3, #11
 8009318:	d436      	bmi.n	8009388 <SDMMC_CmdStopTransfer+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800931a:	035c      	lsls	r4, r3, #13
 800931c:	d431      	bmi.n	8009382 <SDMMC_CmdStopTransfer+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800931e:	0399      	lsls	r1, r3, #14
 8009320:	d42c      	bmi.n	800937c <SDMMC_CmdStopTransfer+0x108>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009322:	03da      	lsls	r2, r3, #15
 8009324:	d43f      	bmi.n	80093a6 <SDMMC_CmdStopTransfer+0x132>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009326:	041c      	lsls	r4, r3, #16
 8009328:	d43a      	bmi.n	80093a0 <SDMMC_CmdStopTransfer+0x12c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800932a:	0459      	lsls	r1, r3, #17
 800932c:	d435      	bmi.n	800939a <SDMMC_CmdStopTransfer+0x126>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800932e:	049a      	lsls	r2, r3, #18
 8009330:	d430      	bmi.n	8009394 <SDMMC_CmdStopTransfer+0x120>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009332:	f013 0f08 	tst.w	r3, #8
 8009336:	bf0c      	ite	eq
 8009338:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800933c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009340:	e7bc      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009342:	2304      	movs	r3, #4
 8009344:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009346:	4618      	mov	r0, r3
 8009348:	e7b8      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800934a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800934e:	e7b5      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009350:	2040      	movs	r0, #64	@ 0x40
 8009352:	e7b3      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009354:	2080      	movs	r0, #128	@ 0x80
 8009356:	e7b1      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009358:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800935c:	e7ae      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800935e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009362:	e7ab      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009364:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009368:	e7a8      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800936a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800936e:	e7a5      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009370:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009374:	e7a2      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009376:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800937a:	e79f      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800937c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009380:	e79c      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009382:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009386:	e799      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CC_ERR;
 8009388:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800938c:	e796      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800938e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009392:	e793      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_ERASE_RESET;
 8009394:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8009398:	e790      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800939a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800939e:	e78d      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80093a4:	e78a      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80093aa:	e787      	b.n	80092bc <SDMMC_CmdStopTransfer+0x48>
 80093ac:	20000008 	.word	0x20000008
 80093b0:	10624dd3 	.word	0x10624dd3
 80093b4:	05f5e100 	.word	0x05f5e100
 80093b8:	fdffe008 	.word	0xfdffe008

080093bc <SDMMC_CmdSelDesel>:
  SDIOx->ARG = Command->Argument;
 80093bc:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093be:	4a4b      	ldr	r2, [pc, #300]	@ (80094ec <SDMMC_CmdSelDesel+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093c0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093c2:	494b      	ldr	r1, [pc, #300]	@ (80094f0 <SDMMC_CmdSelDesel+0x134>)
 80093c4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093ca:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093ce:	f023 030f 	bic.w	r3, r3, #15
 80093d2:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093d6:	0a52      	lsrs	r2, r2, #9
 80093d8:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093dc:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80093e0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80093e4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80093e6:	1e53      	subs	r3, r2, #1
 80093e8:	b14a      	cbz	r2, 80093fe <SDMMC_CmdSelDesel+0x42>
    sta_reg = SDIOx->STA;
 80093ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093ec:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80093f0:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093f4:	d001      	beq.n	80093fa <SDMMC_CmdSelDesel+0x3e>
 80093f6:	0511      	lsls	r1, r2, #20
 80093f8:	d504      	bpl.n	8009404 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	d1f5      	bne.n	80093ea <SDMMC_CmdSelDesel+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80093fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009402:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009404:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009406:	075a      	lsls	r2, r3, #29
 8009408:	d43e      	bmi.n	8009488 <SDMMC_CmdSelDesel+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800940a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800940c:	07db      	lsls	r3, r3, #31
 800940e:	d407      	bmi.n	8009420 <SDMMC_CmdSelDesel+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009410:	23c5      	movs	r3, #197	@ 0xc5
 8009412:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009414:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b07      	cmp	r3, #7
 800941a:	d004      	beq.n	8009426 <SDMMC_CmdSelDesel+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941c:	2001      	movs	r0, #1
 800941e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009420:	2301      	movs	r3, #1
 8009422:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009424:	e7fa      	b.n	800941c <SDMMC_CmdSelDesel+0x60>
  return (*(__IO uint32_t *) tmp);
 8009426:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009428:	4832      	ldr	r0, [pc, #200]	@ (80094f4 <SDMMC_CmdSelDesel+0x138>)
 800942a:	4018      	ands	r0, r3
 800942c:	b358      	cbz	r0, 8009486 <SDMMC_CmdSelDesel+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800942e:	2b00      	cmp	r3, #0
 8009430:	db2e      	blt.n	8009490 <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009432:	0059      	lsls	r1, r3, #1
 8009434:	d42f      	bmi.n	8009496 <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009436:	009a      	lsls	r2, r3, #2
 8009438:	d42f      	bmi.n	800949a <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800943a:	00d9      	lsls	r1, r3, #3
 800943c:	d42f      	bmi.n	800949e <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800943e:	011a      	lsls	r2, r3, #4
 8009440:	d430      	bmi.n	80094a4 <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009442:	0159      	lsls	r1, r3, #5
 8009444:	d431      	bmi.n	80094aa <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009446:	01da      	lsls	r2, r3, #7
 8009448:	d432      	bmi.n	80094b0 <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800944a:	0219      	lsls	r1, r3, #8
 800944c:	d433      	bmi.n	80094b6 <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800944e:	025a      	lsls	r2, r3, #9
 8009450:	d434      	bmi.n	80094bc <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009452:	0299      	lsls	r1, r3, #10
 8009454:	d43e      	bmi.n	80094d4 <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009456:	02da      	lsls	r2, r3, #11
 8009458:	d439      	bmi.n	80094ce <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800945a:	0359      	lsls	r1, r3, #13
 800945c:	d434      	bmi.n	80094c8 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800945e:	039a      	lsls	r2, r3, #14
 8009460:	d42f      	bmi.n	80094c2 <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009462:	03d9      	lsls	r1, r3, #15
 8009464:	d43f      	bmi.n	80094e6 <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009466:	041a      	lsls	r2, r3, #16
 8009468:	d43a      	bmi.n	80094e0 <SDMMC_CmdSelDesel+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800946a:	0459      	lsls	r1, r3, #17
 800946c:	d435      	bmi.n	80094da <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800946e:	049a      	lsls	r2, r3, #18
 8009470:	d407      	bmi.n	8009482 <SDMMC_CmdSelDesel+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009472:	f013 0f08 	tst.w	r3, #8
 8009476:	bf0c      	ite	eq
 8009478:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800947c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009480:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009482:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009486:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009488:	2304      	movs	r3, #4
 800948a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800948c:	4618      	mov	r0, r3
 800948e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009490:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009494:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009496:	2040      	movs	r0, #64	@ 0x40
 8009498:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800949a:	2080      	movs	r0, #128	@ 0x80
 800949c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800949e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80094a2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80094a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80094a8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80094aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80094ae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80094b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80094b4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80094ba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80094c0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80094c2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80094c6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80094c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80094cc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80094ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80094d2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80094d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80094d8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80094de:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80094e4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80094ea:	4770      	bx	lr
 80094ec:	20000008 	.word	0x20000008
 80094f0:	10624dd3 	.word	0x10624dd3
 80094f4:	fdffe008 	.word	0xfdffe008

080094f8 <SDMMC_CmdGoIdleState>:
  SDIOx->ARG = Command->Argument;
 80094f8:	2300      	movs	r3, #0
 80094fa:	6083      	str	r3, [r0, #8]
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094fc:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <SDMMC_CmdGoIdleState+0x44>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80094fe:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009500:	490f      	ldr	r1, [pc, #60]	@ (8009540 <SDMMC_CmdGoIdleState+0x48>)
 8009502:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009504:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009508:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800950c:	f022 020f 	bic.w	r2, r2, #15
 8009510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009514:	0a5b      	lsrs	r3, r3, #9
 8009516:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800951a:	60c2      	str	r2, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	e002      	b.n	8009528 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009522:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009524:	0612      	lsls	r2, r2, #24
 8009526:	d404      	bmi.n	8009532 <SDMMC_CmdGoIdleState+0x3a>
    if (count-- == 0U)
 8009528:	3b01      	subs	r3, #1
 800952a:	d2fa      	bcs.n	8009522 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800952c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009530:	4770      	bx	lr
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009532:	23c5      	movs	r3, #197	@ 0xc5
 8009534:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000008 	.word	0x20000008
 8009540:	10624dd3 	.word	0x10624dd3

08009544 <SDMMC_CmdOperCond>:
  SDIOx->ARG = Command->Argument;
 8009544:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009548:	4a1a      	ldr	r2, [pc, #104]	@ (80095b4 <SDMMC_CmdOperCond+0x70>)
  SDIOx->ARG = Command->Argument;
 800954a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800954c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800954e:	6812      	ldr	r2, [r2, #0]
{
 8009550:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009552:	4819      	ldr	r0, [pc, #100]	@ (80095b8 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009554:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009558:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800955c:	f023 030f 	bic.w	r3, r3, #15
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009560:	0a52      	lsrs	r2, r2, #9
 8009562:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009566:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800956a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800956e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8009570:	1e53      	subs	r3, r2, #1
 8009572:	b14a      	cbz	r2, 8009588 <SDMMC_CmdOperCond+0x44>
    sta_reg = SDIOx->STA;
 8009574:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009576:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 800957a:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800957e:	d001      	beq.n	8009584 <SDMMC_CmdOperCond+0x40>
 8009580:	0510      	lsls	r0, r2, #20
 8009582:	d504      	bpl.n	800958e <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	d1f5      	bne.n	8009574 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009588:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800958c:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800958e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009590:	075a      	lsls	r2, r3, #29
 8009592:	d40c      	bmi.n	80095ae <SDMMC_CmdOperCond+0x6a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009594:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009596:	f010 0001 	ands.w	r0, r0, #1
 800959a:	d105      	bne.n	80095a8 <SDMMC_CmdOperCond+0x64>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800959c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800959e:	065b      	lsls	r3, r3, #25
 80095a0:	d5f4      	bpl.n	800958c <SDMMC_CmdOperCond+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80095a2:	2340      	movs	r3, #64	@ 0x40
 80095a4:	638b      	str	r3, [r1, #56]	@ 0x38
 80095a6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095a8:	2301      	movs	r3, #1
 80095aa:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ac:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095ae:	2004      	movs	r0, #4
 80095b0:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095b2:	4770      	bx	lr
 80095b4:	20000008 	.word	0x20000008
 80095b8:	10624dd3 	.word	0x10624dd3

080095bc <SDMMC_CmdAppCommand>:
  SDIOx->ARG = Command->Argument;
 80095bc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095be:	4a4b      	ldr	r2, [pc, #300]	@ (80096ec <SDMMC_CmdAppCommand+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095c0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095c2:	494b      	ldr	r1, [pc, #300]	@ (80096f0 <SDMMC_CmdAppCommand+0x134>)
 80095c4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095ca:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095ce:	f023 030f 	bic.w	r3, r3, #15
 80095d2:	f443 638e 	orr.w	r3, r3, #1136	@ 0x470
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095d6:	0a52      	lsrs	r2, r2, #9
 80095d8:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095dc:	f043 0307 	orr.w	r3, r3, #7
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095e0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095e4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80095e6:	1e53      	subs	r3, r2, #1
 80095e8:	b14a      	cbz	r2, 80095fe <SDMMC_CmdAppCommand+0x42>
    sta_reg = SDIOx->STA;
 80095ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095ec:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80095f0:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095f4:	d001      	beq.n	80095fa <SDMMC_CmdAppCommand+0x3e>
 80095f6:	0511      	lsls	r1, r2, #20
 80095f8:	d504      	bpl.n	8009604 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	d1f5      	bne.n	80095ea <SDMMC_CmdAppCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80095fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009602:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009604:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009606:	075a      	lsls	r2, r3, #29
 8009608:	d43e      	bmi.n	8009688 <SDMMC_CmdAppCommand+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800960a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800960c:	07db      	lsls	r3, r3, #31
 800960e:	d407      	bmi.n	8009620 <SDMMC_CmdAppCommand+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009610:	23c5      	movs	r3, #197	@ 0xc5
 8009612:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009614:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b37      	cmp	r3, #55	@ 0x37
 800961a:	d004      	beq.n	8009626 <SDMMC_CmdAppCommand+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961c:	2001      	movs	r0, #1
 800961e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009620:	2301      	movs	r3, #1
 8009622:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009624:	e7fa      	b.n	800961c <SDMMC_CmdAppCommand+0x60>
  return (*(__IO uint32_t *) tmp);
 8009626:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009628:	4832      	ldr	r0, [pc, #200]	@ (80096f4 <SDMMC_CmdAppCommand+0x138>)
 800962a:	4018      	ands	r0, r3
 800962c:	b358      	cbz	r0, 8009686 <SDMMC_CmdAppCommand+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800962e:	2b00      	cmp	r3, #0
 8009630:	db2e      	blt.n	8009690 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009632:	0059      	lsls	r1, r3, #1
 8009634:	d42f      	bmi.n	8009696 <SDMMC_CmdAppCommand+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009636:	009a      	lsls	r2, r3, #2
 8009638:	d42f      	bmi.n	800969a <SDMMC_CmdAppCommand+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800963a:	00d9      	lsls	r1, r3, #3
 800963c:	d42f      	bmi.n	800969e <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800963e:	011a      	lsls	r2, r3, #4
 8009640:	d430      	bmi.n	80096a4 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009642:	0159      	lsls	r1, r3, #5
 8009644:	d431      	bmi.n	80096aa <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009646:	01da      	lsls	r2, r3, #7
 8009648:	d432      	bmi.n	80096b0 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800964a:	0219      	lsls	r1, r3, #8
 800964c:	d433      	bmi.n	80096b6 <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800964e:	025a      	lsls	r2, r3, #9
 8009650:	d434      	bmi.n	80096bc <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009652:	0299      	lsls	r1, r3, #10
 8009654:	d43e      	bmi.n	80096d4 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009656:	02da      	lsls	r2, r3, #11
 8009658:	d439      	bmi.n	80096ce <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800965a:	0359      	lsls	r1, r3, #13
 800965c:	d434      	bmi.n	80096c8 <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800965e:	039a      	lsls	r2, r3, #14
 8009660:	d42f      	bmi.n	80096c2 <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009662:	03d9      	lsls	r1, r3, #15
 8009664:	d43f      	bmi.n	80096e6 <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009666:	041a      	lsls	r2, r3, #16
 8009668:	d43a      	bmi.n	80096e0 <SDMMC_CmdAppCommand+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800966a:	0459      	lsls	r1, r3, #17
 800966c:	d435      	bmi.n	80096da <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800966e:	049a      	lsls	r2, r3, #18
 8009670:	d407      	bmi.n	8009682 <SDMMC_CmdAppCommand+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009672:	f013 0f08 	tst.w	r3, #8
 8009676:	bf0c      	ite	eq
 8009678:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800967c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009680:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009682:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009686:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009688:	2304      	movs	r3, #4
 800968a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800968c:	4618      	mov	r0, r3
 800968e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009690:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009694:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009696:	2040      	movs	r0, #64	@ 0x40
 8009698:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800969a:	2080      	movs	r0, #128	@ 0x80
 800969c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800969e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80096a2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80096a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80096a8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80096ae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80096b4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80096ba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80096c0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80096c2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80096c6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80096cc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80096ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80096d2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80096d8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80096de:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80096e4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80096e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80096ea:	4770      	bx	lr
 80096ec:	20000008 	.word	0x20000008
 80096f0:	10624dd3 	.word	0x10624dd3
 80096f4:	fdffe008 	.word	0xfdffe008

080096f8 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80096f8:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80096fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
  SDIOx->ARG = Command->Argument;
 8009700:	6081      	str	r1, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009702:	4a18      	ldr	r2, [pc, #96]	@ (8009764 <SDMMC_CmdAppOperCommand+0x6c>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009704:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009706:	4918      	ldr	r1, [pc, #96]	@ (8009768 <SDMMC_CmdAppOperCommand+0x70>)
 8009708:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800970a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800970e:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009712:	f023 030f 	bic.w	r3, r3, #15
 8009716:	f443 638d 	orr.w	r3, r3, #1128	@ 0x468
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800971a:	0a52      	lsrs	r2, r2, #9
 800971c:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009720:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009724:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009728:	60c3      	str	r3, [r0, #12]
{
 800972a:	4684      	mov	ip, r0
    if (count-- == 0U)
 800972c:	1e53      	subs	r3, r2, #1
 800972e:	b152      	cbz	r2, 8009746 <SDMMC_CmdAppOperCommand+0x4e>
    sta_reg = SDIOx->STA;
 8009730:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009734:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009738:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800973c:	d001      	beq.n	8009742 <SDMMC_CmdAppOperCommand+0x4a>
 800973e:	0512      	lsls	r2, r2, #20
 8009740:	d504      	bpl.n	800974c <SDMMC_CmdAppOperCommand+0x54>
    if (count-- == 0U)
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	d1f4      	bne.n	8009730 <SDMMC_CmdAppOperCommand+0x38>
      return SDMMC_ERROR_TIMEOUT;
 8009746:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800974a:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800974c:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8009750:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009754:	bf15      	itete	ne
 8009756:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009758:	23c5      	moveq	r3, #197	@ 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800975a:	f8cc 0038 	strne.w	r0, [ip, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800975e:	f8cc 3038 	streq.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8009762:	4770      	bx	lr
 8009764:	20000008 	.word	0x20000008
 8009768:	10624dd3 	.word	0x10624dd3

0800976c <SDMMC_CmdBusWidth>:
  SDIOx->ARG = Command->Argument;
 800976c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800976e:	4a4b      	ldr	r2, [pc, #300]	@ (800989c <SDMMC_CmdBusWidth+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009770:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009772:	494b      	ldr	r1, [pc, #300]	@ (80098a0 <SDMMC_CmdBusWidth+0x134>)
 8009774:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009776:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800977a:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800977e:	f023 030f 	bic.w	r3, r3, #15
 8009782:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009786:	0a52      	lsrs	r2, r2, #9
 8009788:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800978c:	f043 0306 	orr.w	r3, r3, #6
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009790:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009794:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009796:	1e53      	subs	r3, r2, #1
 8009798:	b14a      	cbz	r2, 80097ae <SDMMC_CmdBusWidth+0x42>
    sta_reg = SDIOx->STA;
 800979a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800979c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80097a0:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097a4:	d001      	beq.n	80097aa <SDMMC_CmdBusWidth+0x3e>
 80097a6:	0511      	lsls	r1, r2, #20
 80097a8:	d504      	bpl.n	80097b4 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	d1f5      	bne.n	800979a <SDMMC_CmdBusWidth+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80097ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80097b2:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80097b6:	075a      	lsls	r2, r3, #29
 80097b8:	d43e      	bmi.n	8009838 <SDMMC_CmdBusWidth+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80097bc:	07db      	lsls	r3, r3, #31
 80097be:	d407      	bmi.n	80097d0 <SDMMC_CmdBusWidth+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097c0:	23c5      	movs	r3, #197	@ 0xc5
 80097c2:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80097c4:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b06      	cmp	r3, #6
 80097ca:	d004      	beq.n	80097d6 <SDMMC_CmdBusWidth+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097cc:	2001      	movs	r0, #1
 80097ce:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097d0:	2301      	movs	r3, #1
 80097d2:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097d4:	e7fa      	b.n	80097cc <SDMMC_CmdBusWidth+0x60>
  return (*(__IO uint32_t *) tmp);
 80097d6:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097d8:	4832      	ldr	r0, [pc, #200]	@ (80098a4 <SDMMC_CmdBusWidth+0x138>)
 80097da:	4018      	ands	r0, r3
 80097dc:	b358      	cbz	r0, 8009836 <SDMMC_CmdBusWidth+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80097de:	2b00      	cmp	r3, #0
 80097e0:	db2e      	blt.n	8009840 <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097e2:	0059      	lsls	r1, r3, #1
 80097e4:	d42f      	bmi.n	8009846 <SDMMC_CmdBusWidth+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097e6:	009a      	lsls	r2, r3, #2
 80097e8:	d42f      	bmi.n	800984a <SDMMC_CmdBusWidth+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097ea:	00d9      	lsls	r1, r3, #3
 80097ec:	d42f      	bmi.n	800984e <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097ee:	011a      	lsls	r2, r3, #4
 80097f0:	d430      	bmi.n	8009854 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097f2:	0159      	lsls	r1, r3, #5
 80097f4:	d431      	bmi.n	800985a <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80097f6:	01da      	lsls	r2, r3, #7
 80097f8:	d432      	bmi.n	8009860 <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80097fa:	0219      	lsls	r1, r3, #8
 80097fc:	d433      	bmi.n	8009866 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80097fe:	025a      	lsls	r2, r3, #9
 8009800:	d434      	bmi.n	800986c <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009802:	0299      	lsls	r1, r3, #10
 8009804:	d43e      	bmi.n	8009884 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009806:	02da      	lsls	r2, r3, #11
 8009808:	d439      	bmi.n	800987e <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800980a:	0359      	lsls	r1, r3, #13
 800980c:	d434      	bmi.n	8009878 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800980e:	039a      	lsls	r2, r3, #14
 8009810:	d42f      	bmi.n	8009872 <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009812:	03d9      	lsls	r1, r3, #15
 8009814:	d43f      	bmi.n	8009896 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009816:	041a      	lsls	r2, r3, #16
 8009818:	d43a      	bmi.n	8009890 <SDMMC_CmdBusWidth+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800981a:	0459      	lsls	r1, r3, #17
 800981c:	d435      	bmi.n	800988a <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800981e:	049a      	lsls	r2, r3, #18
 8009820:	d407      	bmi.n	8009832 <SDMMC_CmdBusWidth+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009822:	f013 0f08 	tst.w	r3, #8
 8009826:	bf0c      	ite	eq
 8009828:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800982c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009830:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009832:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009836:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009838:	2304      	movs	r3, #4
 800983a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800983c:	4618      	mov	r0, r3
 800983e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009840:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009844:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009846:	2040      	movs	r0, #64	@ 0x40
 8009848:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800984a:	2080      	movs	r0, #128	@ 0x80
 800984c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800984e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009852:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009854:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009858:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800985a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800985e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009860:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009864:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009866:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800986a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800986c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009870:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009872:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009876:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009878:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800987c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800987e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009882:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009884:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009888:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800988a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800988e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009890:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009894:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009896:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800989a:	4770      	bx	lr
 800989c:	20000008 	.word	0x20000008
 80098a0:	10624dd3 	.word	0x10624dd3
 80098a4:	fdffe008 	.word	0xfdffe008

080098a8 <SDMMC_CmdSendSCR>:
  SDIOx->ARG = Command->Argument;
 80098a8:	2300      	movs	r3, #0
 80098aa:	6083      	str	r3, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098ac:	4a4b      	ldr	r2, [pc, #300]	@ (80099dc <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098ae:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098b0:	494b      	ldr	r1, [pc, #300]	@ (80099e0 <SDMMC_CmdSendSCR+0x138>)
 80098b2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098b4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098b8:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098bc:	f023 030f 	bic.w	r3, r3, #15
 80098c0:	f443 638e 	orr.w	r3, r3, #1136	@ 0x470
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098c4:	0a52      	lsrs	r2, r2, #9
 80098c6:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098ca:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80098ce:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80098d2:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80098d4:	1e53      	subs	r3, r2, #1
 80098d6:	b14a      	cbz	r2, 80098ec <SDMMC_CmdSendSCR+0x44>
    sta_reg = SDIOx->STA;
 80098d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098da:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 80098de:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098e2:	d001      	beq.n	80098e8 <SDMMC_CmdSendSCR+0x40>
 80098e4:	0511      	lsls	r1, r2, #20
 80098e6:	d504      	bpl.n	80098f2 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	d1f5      	bne.n	80098d8 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80098ec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80098f0:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80098f4:	075a      	lsls	r2, r3, #29
 80098f6:	d43e      	bmi.n	8009976 <SDMMC_CmdSendSCR+0xce>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80098fa:	07db      	lsls	r3, r3, #31
 80098fc:	d407      	bmi.n	800990e <SDMMC_CmdSendSCR+0x66>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098fe:	23c5      	movs	r3, #197	@ 0xc5
 8009900:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009902:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b33      	cmp	r3, #51	@ 0x33
 8009908:	d004      	beq.n	8009914 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990a:	2001      	movs	r0, #1
 800990c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800990e:	2301      	movs	r3, #1
 8009910:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009912:	e7fa      	b.n	800990a <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 8009914:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009916:	4833      	ldr	r0, [pc, #204]	@ (80099e4 <SDMMC_CmdSendSCR+0x13c>)
 8009918:	4018      	ands	r0, r3
 800991a:	b358      	cbz	r0, 8009974 <SDMMC_CmdSendSCR+0xcc>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800991c:	2b00      	cmp	r3, #0
 800991e:	db2e      	blt.n	800997e <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009920:	0059      	lsls	r1, r3, #1
 8009922:	d42f      	bmi.n	8009984 <SDMMC_CmdSendSCR+0xdc>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009924:	009a      	lsls	r2, r3, #2
 8009926:	d42f      	bmi.n	8009988 <SDMMC_CmdSendSCR+0xe0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009928:	00d9      	lsls	r1, r3, #3
 800992a:	d42f      	bmi.n	800998c <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800992c:	011a      	lsls	r2, r3, #4
 800992e:	d430      	bmi.n	8009992 <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009930:	0159      	lsls	r1, r3, #5
 8009932:	d431      	bmi.n	8009998 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009934:	01da      	lsls	r2, r3, #7
 8009936:	d432      	bmi.n	800999e <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009938:	0219      	lsls	r1, r3, #8
 800993a:	d433      	bmi.n	80099a4 <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800993c:	025a      	lsls	r2, r3, #9
 800993e:	d434      	bmi.n	80099aa <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009940:	0299      	lsls	r1, r3, #10
 8009942:	d43e      	bmi.n	80099c2 <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009944:	02da      	lsls	r2, r3, #11
 8009946:	d439      	bmi.n	80099bc <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009948:	0359      	lsls	r1, r3, #13
 800994a:	d434      	bmi.n	80099b6 <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800994c:	039a      	lsls	r2, r3, #14
 800994e:	d42f      	bmi.n	80099b0 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009950:	03d9      	lsls	r1, r3, #15
 8009952:	d43f      	bmi.n	80099d4 <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009954:	041a      	lsls	r2, r3, #16
 8009956:	d43a      	bmi.n	80099ce <SDMMC_CmdSendSCR+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009958:	0459      	lsls	r1, r3, #17
 800995a:	d435      	bmi.n	80099c8 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800995c:	049a      	lsls	r2, r3, #18
 800995e:	d407      	bmi.n	8009970 <SDMMC_CmdSendSCR+0xc8>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009960:	f013 0f08 	tst.w	r3, #8
 8009964:	bf0c      	ite	eq
 8009966:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800996a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800996e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009970:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009974:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009976:	2304      	movs	r3, #4
 8009978:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800997a:	4618      	mov	r0, r3
 800997c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800997e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009982:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009984:	2040      	movs	r0, #64	@ 0x40
 8009986:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009988:	2080      	movs	r0, #128	@ 0x80
 800998a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800998c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009990:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009992:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009996:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009998:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800999c:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800999e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80099a2:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80099a8:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80099ae:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099b0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80099b4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099b6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80099ba:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80099bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80099c0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099c2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80099c6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099c8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80099cc:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80099d2:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20000008 	.word	0x20000008
 80099e0:	10624dd3 	.word	0x10624dd3
 80099e4:	fdffe008 	.word	0xfdffe008

080099e8 <SDMMC_CmdSendCID>:
  SDIOx->ARG = Command->Argument;
 80099e8:	2300      	movs	r3, #0
 80099ea:	6083      	str	r3, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099ec:	4a18      	ldr	r2, [pc, #96]	@ (8009a50 <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099ee:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099f0:	6812      	ldr	r2, [r2, #0]
{
 80099f2:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099f4:	4817      	ldr	r0, [pc, #92]	@ (8009a54 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099fa:	fba0 0202 	umull	r0, r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099fe:	f023 030f 	bic.w	r3, r3, #15
 8009a02:	f443 6398 	orr.w	r3, r3, #1216	@ 0x4c0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a06:	0a52      	lsrs	r2, r2, #9
 8009a08:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a0c:	f043 0302 	orr.w	r3, r3, #2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a10:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a14:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8009a16:	1e53      	subs	r3, r2, #1
 8009a18:	b14a      	cbz	r2, 8009a2e <SDMMC_CmdSendCID+0x46>
    sta_reg = SDIOx->STA;
 8009a1a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a1c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009a20:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a24:	d001      	beq.n	8009a2a <SDMMC_CmdSendCID+0x42>
 8009a26:	0512      	lsls	r2, r2, #20
 8009a28:	d504      	bpl.n	8009a34 <SDMMC_CmdSendCID+0x4c>
    if (count-- == 0U)
 8009a2a:	1c58      	adds	r0, r3, #1
 8009a2c:	d1f5      	bne.n	8009a1a <SDMMC_CmdSendCID+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009a2e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009a32:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a34:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009a36:	075b      	lsls	r3, r3, #29
 8009a38:	d407      	bmi.n	8009a4a <SDMMC_CmdSendCID+0x62>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a3a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009a3c:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009a40:	bf14      	ite	ne
 8009a42:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a44:	23c5      	moveq	r3, #197	@ 0xc5
 8009a46:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8009a48:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a4a:	2004      	movs	r0, #4
 8009a4c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a4e:	4770      	bx	lr
 8009a50:	20000008 	.word	0x20000008
 8009a54:	10624dd3 	.word	0x10624dd3

08009a58 <SDMMC_CmdSendCSD>:
  SDIOx->ARG = Command->Argument;
 8009a58:	6081      	str	r1, [r0, #8]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac8 <SDMMC_CmdSendCSD+0x70>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a5c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a5e:	491b      	ldr	r1, [pc, #108]	@ (8009acc <SDMMC_CmdSendCSD+0x74>)
 8009a60:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a62:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a66:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a6a:	f023 030f 	bic.w	r3, r3, #15
 8009a6e:	f443 6399 	orr.w	r3, r3, #1224	@ 0x4c8
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a72:	0a52      	lsrs	r2, r2, #9
 8009a74:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a78:	f043 0301 	orr.w	r3, r3, #1
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a80:	60c3      	str	r3, [r0, #12]
{
 8009a82:	4684      	mov	ip, r0
    if (count-- == 0U)
 8009a84:	1e53      	subs	r3, r2, #1
 8009a86:	b152      	cbz	r2, 8009a9e <SDMMC_CmdSendCSD+0x46>
    sta_reg = SDIOx->STA;
 8009a88:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a8c:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009a90:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a94:	d001      	beq.n	8009a9a <SDMMC_CmdSendCSD+0x42>
 8009a96:	0512      	lsls	r2, r2, #20
 8009a98:	d504      	bpl.n	8009aa4 <SDMMC_CmdSendCSD+0x4c>
    if (count-- == 0U)
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	d1f4      	bne.n	8009a88 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009a9e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009aa2:	4770      	bx	lr
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009aa4:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009aa8:	075b      	lsls	r3, r3, #29
 8009aaa:	d409      	bmi.n	8009ac0 <SDMMC_CmdSendCSD+0x68>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009aac:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8009ab0:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ab4:	bf14      	ite	ne
 8009ab6:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ab8:	23c5      	moveq	r3, #197	@ 0xc5
 8009aba:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8009abe:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ac0:	2004      	movs	r0, #4
 8009ac2:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ac6:	4770      	bx	lr
 8009ac8:	20000008 	.word	0x20000008
 8009acc:	10624dd3 	.word	0x10624dd3

08009ad0 <SDMMC_CmdSetRelAdd>:
  SDIOx->ARG = Command->Argument;
 8009ad0:	2300      	movs	r3, #0
{
 8009ad2:	b410      	push	{r4}
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ad4:	4a27      	ldr	r2, [pc, #156]	@ (8009b74 <SDMMC_CmdSetRelAdd+0xa4>)
  SDIOx->ARG = Command->Argument;
 8009ad6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ad8:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ada:	4c27      	ldr	r4, [pc, #156]	@ (8009b78 <SDMMC_CmdSetRelAdd+0xa8>)
 8009adc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ade:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ae2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ae6:	f023 030f 	bic.w	r3, r3, #15
 8009aea:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009aee:	0a52      	lsrs	r2, r2, #9
 8009af0:	f241 3488 	movw	r4, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009af4:	f043 0303 	orr.w	r3, r3, #3
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009af8:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009afc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009afe:	1e53      	subs	r3, r2, #1
 8009b00:	b14a      	cbz	r2, 8009b16 <SDMMC_CmdSetRelAdd+0x46>
    sta_reg = SDIOx->STA;
 8009b02:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b04:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009b08:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b0c:	d001      	beq.n	8009b12 <SDMMC_CmdSetRelAdd+0x42>
 8009b0e:	0512      	lsls	r2, r2, #20
 8009b10:	d506      	bpl.n	8009b20 <SDMMC_CmdSetRelAdd+0x50>
    if (count-- == 0U)
 8009b12:	1c5c      	adds	r4, r3, #1
 8009b14:	d1f5      	bne.n	8009b02 <SDMMC_CmdSetRelAdd+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009b16:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b1e:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b20:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b22:	075b      	lsls	r3, r3, #29
 8009b24:	d41b      	bmi.n	8009b5e <SDMMC_CmdSetRelAdd+0x8e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009b28:	07dc      	lsls	r4, r3, #31
 8009b2a:	d405      	bmi.n	8009b38 <SDMMC_CmdSetRelAdd+0x68>
  return (uint8_t)(SDIOx->RESPCMD);
 8009b2c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d004      	beq.n	8009b3e <SDMMC_CmdSetRelAdd+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b34:	2001      	movs	r0, #1
 8009b36:	e7f0      	b.n	8009b1a <SDMMC_CmdSetRelAdd+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b38:	2301      	movs	r3, #1
 8009b3a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b3c:	e7fa      	b.n	8009b34 <SDMMC_CmdSetRelAdd+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b3e:	23c5      	movs	r3, #197	@ 0xc5
 8009b40:	6383      	str	r3, [r0, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8009b42:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009b44:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8009b48:	d010      	beq.n	8009b6c <SDMMC_CmdSetRelAdd+0x9c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b4a:	045a      	lsls	r2, r3, #17
 8009b4c:	d40b      	bmi.n	8009b66 <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b4e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009b52:	bf0c      	ite	eq
 8009b54:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009b58:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8009b5c:	e7dd      	b.n	8009b1a <SDMMC_CmdSetRelAdd+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b5e:	2304      	movs	r3, #4
 8009b60:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b62:	4618      	mov	r0, r3
 8009b64:	e7d9      	b.n	8009b1a <SDMMC_CmdSetRelAdd+0x4a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b66:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009b6a:	e7d6      	b.n	8009b1a <SDMMC_CmdSetRelAdd+0x4a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 8009b70:	e7d3      	b.n	8009b1a <SDMMC_CmdSetRelAdd+0x4a>
 8009b72:	bf00      	nop
 8009b74:	20000008 	.word	0x20000008
 8009b78:	10624dd3 	.word	0x10624dd3

08009b7c <SDMMC_CmdSendStatus>:
  SDIOx->ARG = Command->Argument;
 8009b7c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8009cac <SDMMC_CmdSendStatus+0x130>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b80:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b82:	494b      	ldr	r1, [pc, #300]	@ (8009cb0 <SDMMC_CmdSendStatus+0x134>)
 8009b84:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b86:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b8a:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b8e:	f023 030f 	bic.w	r3, r3, #15
 8009b92:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b96:	0a52      	lsrs	r2, r2, #9
 8009b98:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b9c:	f043 0305 	orr.w	r3, r3, #5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009ba0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ba4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009ba6:	1e53      	subs	r3, r2, #1
 8009ba8:	b14a      	cbz	r2, 8009bbe <SDMMC_CmdSendStatus+0x42>
    sta_reg = SDIOx->STA;
 8009baa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bac:	f012 0f45 	tst.w	r2, #69	@ 0x45
    if (count-- == 0U)
 8009bb0:	f103 33ff 	add.w	r3, r3, #4294967295
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009bb4:	d001      	beq.n	8009bba <SDMMC_CmdSendStatus+0x3e>
 8009bb6:	0511      	lsls	r1, r2, #20
 8009bb8:	d504      	bpl.n	8009bc4 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	d1f5      	bne.n	8009baa <SDMMC_CmdSendStatus+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8009bbe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009bc2:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009bc4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009bc6:	075a      	lsls	r2, r3, #29
 8009bc8:	d43e      	bmi.n	8009c48 <SDMMC_CmdSendStatus+0xcc>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009bca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009bcc:	07db      	lsls	r3, r3, #31
 8009bce:	d407      	bmi.n	8009be0 <SDMMC_CmdSendStatus+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009bd0:	23c5      	movs	r3, #197	@ 0xc5
 8009bd2:	6383      	str	r3, [r0, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009bd4:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b0d      	cmp	r3, #13
 8009bda:	d004      	beq.n	8009be6 <SDMMC_CmdSendStatus+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bdc:	2001      	movs	r0, #1
 8009bde:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009be0:	2301      	movs	r3, #1
 8009be2:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009be4:	e7fa      	b.n	8009bdc <SDMMC_CmdSendStatus+0x60>
  return (*(__IO uint32_t *) tmp);
 8009be6:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009be8:	4832      	ldr	r0, [pc, #200]	@ (8009cb4 <SDMMC_CmdSendStatus+0x138>)
 8009bea:	4018      	ands	r0, r3
 8009bec:	b358      	cbz	r0, 8009c46 <SDMMC_CmdSendStatus+0xca>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	db2e      	blt.n	8009c50 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bf2:	0059      	lsls	r1, r3, #1
 8009bf4:	d42f      	bmi.n	8009c56 <SDMMC_CmdSendStatus+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bf6:	009a      	lsls	r2, r3, #2
 8009bf8:	d42f      	bmi.n	8009c5a <SDMMC_CmdSendStatus+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bfa:	00d9      	lsls	r1, r3, #3
 8009bfc:	d42f      	bmi.n	8009c5e <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009bfe:	011a      	lsls	r2, r3, #4
 8009c00:	d430      	bmi.n	8009c64 <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c02:	0159      	lsls	r1, r3, #5
 8009c04:	d431      	bmi.n	8009c6a <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c06:	01da      	lsls	r2, r3, #7
 8009c08:	d432      	bmi.n	8009c70 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c0a:	0219      	lsls	r1, r3, #8
 8009c0c:	d433      	bmi.n	8009c76 <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c0e:	025a      	lsls	r2, r3, #9
 8009c10:	d434      	bmi.n	8009c7c <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c12:	0299      	lsls	r1, r3, #10
 8009c14:	d43e      	bmi.n	8009c94 <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c16:	02da      	lsls	r2, r3, #11
 8009c18:	d439      	bmi.n	8009c8e <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c1a:	0359      	lsls	r1, r3, #13
 8009c1c:	d434      	bmi.n	8009c88 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c1e:	039a      	lsls	r2, r3, #14
 8009c20:	d42f      	bmi.n	8009c82 <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c22:	03d9      	lsls	r1, r3, #15
 8009c24:	d43f      	bmi.n	8009ca6 <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c26:	041a      	lsls	r2, r3, #16
 8009c28:	d43a      	bmi.n	8009ca0 <SDMMC_CmdSendStatus+0x124>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c2a:	0459      	lsls	r1, r3, #17
 8009c2c:	d435      	bmi.n	8009c9a <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c2e:	049a      	lsls	r2, r3, #18
 8009c30:	d407      	bmi.n	8009c42 <SDMMC_CmdSendStatus+0xc6>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c32:	f013 0f08 	tst.w	r3, #8
 8009c36:	bf0c      	ite	eq
 8009c38:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009c3c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009c40:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009c42:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009c46:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c48:	2304      	movs	r3, #4
 8009c4a:	6383      	str	r3, [r0, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c50:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009c54:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c56:	2040      	movs	r0, #64	@ 0x40
 8009c58:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c5a:	2080      	movs	r0, #128	@ 0x80
 8009c5c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009c62:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009c68:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c6a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009c6e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c74:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c76:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009c7a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009c80:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c82:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009c86:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c88:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009c8c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009c8e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009c92:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009c98:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c9a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009c9e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ca0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009ca4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ca6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009caa:	4770      	bx	lr
 8009cac:	20000008 	.word	0x20000008
 8009cb0:	10624dd3 	.word	0x10624dd3
 8009cb4:	fdffe008 	.word	0xfdffe008

08009cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb8:	b084      	sub	sp, #16
 8009cba:	b082      	sub	sp, #8
 8009cbc:	f10d 0c0c 	add.w	ip, sp, #12
 8009cc0:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cc4:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8009cc8:	2a01      	cmp	r2, #1
{
 8009cca:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ccc:	d12e      	bne.n	8009d2c <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cce:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8009cd0:	f89d 1018 	ldrb.w	r1, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cd4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009cd8:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cda:	68c2      	ldr	r2, [r0, #12]
 8009cdc:	f422 0284 	bic.w	r2, r2, #4325376	@ 0x420000
 8009ce0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ce4:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ce6:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8009ce8:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009cea:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8009cee:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8009cf0:	d061      	beq.n	8009db6 <USB_CoreInit+0xfe>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	9200      	str	r2, [sp, #0]
 8009cf6:	e002      	b.n	8009cfe <USB_CoreInit+0x46>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	db30      	blt.n	8009d60 <USB_CoreInit+0xa8>
    count++;
 8009cfe:	9a00      	ldr	r2, [sp, #0]
 8009d00:	3201      	adds	r2, #1
 8009d02:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8009d04:	9a00      	ldr	r2, [sp, #0]
 8009d06:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8009d0a:	d9f5      	bls.n	8009cf8 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 8009d0c:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 8009d0e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8009d12:	2a01      	cmp	r2, #1
 8009d14:	d107      	bne.n	8009d26 <USB_CoreInit+0x6e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	f042 0206 	orr.w	r2, r2, #6
 8009d1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	f042 0220 	orr.w	r2, r2, #32
 8009d24:	609a      	str	r2, [r3, #8]
}
 8009d26:	b002      	add	sp, #8
 8009d28:	b004      	add	sp, #16
 8009d2a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d2c:	68c2      	ldr	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8009d2e:	2100      	movs	r1, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d34:	60c2      	str	r2, [r0, #12]
  __IO uint32_t count = 0U;
 8009d36:	9101      	str	r1, [sp, #4]
 8009d38:	e002      	b.n	8009d40 <USB_CoreInit+0x88>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d3a:	691a      	ldr	r2, [r3, #16]
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	db27      	blt.n	8009d90 <USB_CoreInit+0xd8>
    count++;
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	3201      	adds	r2, #1
 8009d44:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009d46:	9a01      	ldr	r2, [sp, #4]
 8009d48:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8009d4c:	d9f5      	bls.n	8009d3a <USB_CoreInit+0x82>
      return HAL_TIMEOUT;
 8009d4e:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 8009d50:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009d54:	b9ba      	cbnz	r2, 8009d86 <USB_CoreInit+0xce>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009d5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d5e:	e7d6      	b.n	8009d0e <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 8009d60:	2200      	movs	r2, #0
 8009d62:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d64:	691a      	ldr	r2, [r3, #16]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	611a      	str	r2, [r3, #16]
 8009d6c:	e003      	b.n	8009d76 <USB_CoreInit+0xbe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d6e:	6918      	ldr	r0, [r3, #16]
 8009d70:	f010 0001 	ands.w	r0, r0, #1
 8009d74:	d0cb      	beq.n	8009d0e <USB_CoreInit+0x56>
    count++;
 8009d76:	9a00      	ldr	r2, [sp, #0]
 8009d78:	3201      	adds	r2, #1
 8009d7a:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8009d7c:	9a00      	ldr	r2, [sp, #0]
 8009d7e:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8009d82:	d9f4      	bls.n	8009d6e <USB_CoreInit+0xb6>
 8009d84:	e7c2      	b.n	8009d0c <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d88:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009d8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d8e:	e7be      	b.n	8009d0e <USB_CoreInit+0x56>
  count = 0U;
 8009d90:	2200      	movs	r2, #0
 8009d92:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	f042 0201 	orr.w	r2, r2, #1
 8009d9a:	611a      	str	r2, [r3, #16]
 8009d9c:	e003      	b.n	8009da6 <USB_CoreInit+0xee>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d9e:	6918      	ldr	r0, [r3, #16]
 8009da0:	f010 0001 	ands.w	r0, r0, #1
 8009da4:	d0d4      	beq.n	8009d50 <USB_CoreInit+0x98>
    count++;
 8009da6:	9a01      	ldr	r2, [sp, #4]
 8009da8:	3201      	adds	r2, #1
 8009daa:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009dac:	9a01      	ldr	r2, [sp, #4]
 8009dae:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8009db2:	d9f4      	bls.n	8009d9e <USB_CoreInit+0xe6>
 8009db4:	e7cb      	b.n	8009d4e <USB_CoreInit+0x96>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009db6:	68c2      	ldr	r2, [r0, #12]
 8009db8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009dbc:	60c2      	str	r2, [r0, #12]
 8009dbe:	e798      	b.n	8009cf2 <USB_CoreInit+0x3a>

08009dc0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009dc0:	2a02      	cmp	r2, #2
{
 8009dc2:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8009dc4:	d00a      	beq.n	8009ddc <USB_SetTurnaroundTime+0x1c>
 8009dc6:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8009dd0:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	430a      	orrs	r2, r1
}
 8009dd6:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009dd8:	60da      	str	r2, [r3, #12]
}
 8009dda:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ddc:	4a26      	ldr	r2, [pc, #152]	@ (8009e78 <USB_SetTurnaroundTime+0xb8>)
 8009dde:	4827      	ldr	r0, [pc, #156]	@ (8009e7c <USB_SetTurnaroundTime+0xbc>)
 8009de0:	440a      	add	r2, r1
 8009de2:	4282      	cmp	r2, r0
 8009de4:	d932      	bls.n	8009e4c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009de6:	4a26      	ldr	r2, [pc, #152]	@ (8009e80 <USB_SetTurnaroundTime+0xc0>)
 8009de8:	4826      	ldr	r0, [pc, #152]	@ (8009e84 <USB_SetTurnaroundTime+0xc4>)
 8009dea:	440a      	add	r2, r1
 8009dec:	4282      	cmp	r2, r0
 8009dee:	d930      	bls.n	8009e52 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009df0:	4825      	ldr	r0, [pc, #148]	@ (8009e88 <USB_SetTurnaroundTime+0xc8>)
 8009df2:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 8009df6:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8009dfa:	4282      	cmp	r2, r0
 8009dfc:	d92c      	bls.n	8009e58 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009dfe:	4823      	ldr	r0, [pc, #140]	@ (8009e8c <USB_SetTurnaroundTime+0xcc>)
 8009e00:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8009e04:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8009e08:	4282      	cmp	r2, r0
 8009e0a:	d328      	bcc.n	8009e5e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009e0c:	4a20      	ldr	r2, [pc, #128]	@ (8009e90 <USB_SetTurnaroundTime+0xd0>)
 8009e0e:	4821      	ldr	r0, [pc, #132]	@ (8009e94 <USB_SetTurnaroundTime+0xd4>)
 8009e10:	440a      	add	r2, r1
 8009e12:	4282      	cmp	r2, r0
 8009e14:	d926      	bls.n	8009e64 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009e16:	4a20      	ldr	r2, [pc, #128]	@ (8009e98 <USB_SetTurnaroundTime+0xd8>)
 8009e18:	4820      	ldr	r0, [pc, #128]	@ (8009e9c <USB_SetTurnaroundTime+0xdc>)
 8009e1a:	440a      	add	r2, r1
 8009e1c:	4282      	cmp	r2, r0
 8009e1e:	d324      	bcc.n	8009e6a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009e20:	4a1f      	ldr	r2, [pc, #124]	@ (8009ea0 <USB_SetTurnaroundTime+0xe0>)
 8009e22:	4820      	ldr	r0, [pc, #128]	@ (8009ea4 <USB_SetTurnaroundTime+0xe4>)
 8009e24:	440a      	add	r2, r1
 8009e26:	4282      	cmp	r2, r0
 8009e28:	d3cd      	bcc.n	8009dc6 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009e2a:	481f      	ldr	r0, [pc, #124]	@ (8009ea8 <USB_SetTurnaroundTime+0xe8>)
 8009e2c:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8009e30:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8009e34:	4282      	cmp	r2, r0
 8009e36:	d31b      	bcc.n	8009e70 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e38:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <USB_SetTurnaroundTime+0xec>)
 8009e3a:	481d      	ldr	r0, [pc, #116]	@ (8009eb0 <USB_SetTurnaroundTime+0xf0>)
 8009e3c:	440a      	add	r2, r1
 8009e3e:	4282      	cmp	r2, r0
 8009e40:	bf2c      	ite	cs
 8009e42:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8009e46:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8009e4a:	e7be      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e4c:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8009e50:	e7bb      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e52:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8009e56:	e7b8      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e58:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8009e5c:	e7b5      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e5e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8009e62:	e7b2      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e64:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8009e68:	e7af      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e6a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8009e6e:	e7ac      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009e74:	e7a9      	b.n	8009dca <USB_SetTurnaroundTime+0xa>
 8009e76:	bf00      	nop
 8009e78:	ff275340 	.word	0xff275340
 8009e7c:	000c34ff 	.word	0x000c34ff
 8009e80:	ff1b1e40 	.word	0xff1b1e40
 8009e84:	000f423f 	.word	0x000f423f
 8009e88:	00124f7f 	.word	0x00124f7f
 8009e8c:	0013d620 	.word	0x0013d620
 8009e90:	fee5b660 	.word	0xfee5b660
 8009e94:	0016e35f 	.word	0x0016e35f
 8009e98:	feced300 	.word	0xfeced300
 8009e9c:	001b7740 	.word	0x001b7740
 8009ea0:	feb35bc0 	.word	0xfeb35bc0
 8009ea4:	002191c0 	.word	0x002191c0
 8009ea8:	00387520 	.word	0x00387520
 8009eac:	fe5954e0 	.word	0xfe5954e0
 8009eb0:	00419ce0 	.word	0x00419ce0

08009eb4 <USB_EnableGlobalInt>:
{
 8009eb4:	4603      	mov	r3, r0
}
 8009eb6:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	f042 0201 	orr.w	r2, r2, #1
 8009ebe:	609a      	str	r2, [r3, #8]
}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop

08009ec4 <USB_DisableGlobalInt>:
{
 8009ec4:	4603      	mov	r3, r0
}
 8009ec6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	f022 0201 	bic.w	r2, r2, #1
 8009ece:	609a      	str	r2, [r3, #8]
}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop

08009ed4 <USB_SetCurrentMode>:
{
 8009ed4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ed6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009ed8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009eda:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8009ede:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ee0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009ee2:	d018      	beq.n	8009f16 <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8009ee4:	b9a9      	cbnz	r1, 8009f12 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ee6:	68c3      	ldr	r3, [r0, #12]
 8009ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8009eec:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009eee:	60c3      	str	r3, [r0, #12]
 8009ef0:	e001      	b.n	8009ef6 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ef2:	2cc8      	cmp	r4, #200	@ 0xc8
 8009ef4:	d00d      	beq.n	8009f12 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8009ef6:	200a      	movs	r0, #10
 8009ef8:	f7fa fd50 	bl	800499c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8009efc:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009efe:	07db      	lsls	r3, r3, #31
      ms += 10U;
 8009f00:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f04:	d4f5      	bmi.n	8009ef2 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009f06:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8009f0a:	fab0 f080 	clz	r0, r0
 8009f0e:	0940      	lsrs	r0, r0, #5
}
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009f12:	2001      	movs	r0, #1
}
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f16:	68c3      	ldr	r3, [r0, #12]
 8009f18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8009f1c:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f1e:	60c3      	str	r3, [r0, #12]
 8009f20:	e001      	b.n	8009f26 <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f22:	2cc8      	cmp	r4, #200	@ 0xc8
 8009f24:	d0f5      	beq.n	8009f12 <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 8009f26:	200a      	movs	r0, #10
 8009f28:	f7fa fd38 	bl	800499c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8009f2c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f2e:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8009f30:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f34:	d5f5      	bpl.n	8009f22 <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009f36:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8009f3a:	fab0 f080 	clz	r0, r0
 8009f3e:	0940      	lsrs	r0, r0, #5
 8009f40:	e7e6      	b.n	8009f10 <USB_SetCurrentMode+0x3c>
 8009f42:	bf00      	nop

08009f44 <USB_DevInit>:
{
 8009f44:	b084      	sub	sp, #16
 8009f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	ac09      	add	r4, sp, #36	@ 0x24
 8009f4c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009f50:	f89d 402e 	ldrb.w	r4, [sp, #46]	@ 0x2e
 8009f54:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
    USBx->DIEPTXF[i] = 0U;
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 8009f5e:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8009f60:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f64:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 8009f68:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
 8009f6c:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 8009f70:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8009f74:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 8009f78:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 8009f7c:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 8009f80:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8009f84:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 8009f88:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 8009f8c:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 8009f90:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 8009f94:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 8009f98:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8009f9c:	2c00      	cmp	r4, #0
 8009f9e:	f040 80b8 	bne.w	800a112 <USB_DevInit+0x1ce>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fa2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009fa6:	f042 0202 	orr.w	r2, r2, #2
 8009faa:	f8ce 2004 	str.w	r2, [lr, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009fae:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8009fb0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8009fb4:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009fb6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8009fb8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8009fbc:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009fbe:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8009fc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009fc4:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fcc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8009fd0:	2a01      	cmp	r2, #1
 8009fd2:	f000 80ae 	beq.w	800a132 <USB_DevInit+0x1ee>
  USBx_DEVICE->DCFG |= speed;
 8009fd6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8009fda:	f042 0203 	orr.w	r2, r2, #3
 8009fde:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	9200      	str	r2, [sp, #0]
 8009fe6:	e003      	b.n	8009ff0 <USB_DevInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	2a00      	cmp	r2, #0
 8009fec:	f2c0 80ba 	blt.w	800a164 <USB_DevInit+0x220>
    count++;
 8009ff0:	9a00      	ldr	r2, [sp, #0]
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8009ff6:	9a00      	ldr	r2, [sp, #0]
 8009ff8:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8009ffc:	d9f4      	bls.n	8009fe8 <USB_DevInit+0xa4>
 8009ffe:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800a000:	2200      	movs	r2, #0
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	e003      	b.n	800a00e <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	2a00      	cmp	r2, #0
 800a00a:	f2c0 809a 	blt.w	800a142 <USB_DevInit+0x1fe>
    count++;
 800a00e:	9a01      	ldr	r2, [sp, #4]
 800a010:	3201      	adds	r2, #1
 800a012:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a014:	9a01      	ldr	r2, [sp, #4]
 800a016:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800a01a:	d9f4      	bls.n	800a006 <USB_DevInit+0xc2>
    ret = HAL_ERROR;
 800a01c:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800a01e:	2100      	movs	r1, #0
 800a020:	f8ce 1010 	str.w	r1, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a024:	f8ce 1014 	str.w	r1, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a028:	f8ce 101c 	str.w	r1, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a02c:	b325      	cbz	r5, 800a078 <USB_DevInit+0x134>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a02e:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 800a032:	2e00      	cmp	r6, #0
 800a034:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 800a038:	db18      	blt.n	800a06c <USB_DevInit+0x128>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a03a:	2600      	movs	r6, #0
 800a03c:	6016      	str	r6, [r2, #0]
 800a03e:	468c      	mov	ip, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a040:	2700      	movs	r7, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a042:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a046:	f10c 0101 	add.w	r1, ip, #1
 800a04a:	428d      	cmp	r5, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a04c:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a04e:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a050:	f102 0220 	add.w	r2, r2, #32
 800a054:	d03a      	beq.n	800a0cc <USB_DevInit+0x188>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a056:	f8d2 c000 	ldr.w	ip, [r2]
 800a05a:	f1bc 0f00 	cmp.w	ip, #0
 800a05e:	daec      	bge.n	800a03a <USB_DevInit+0xf6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a060:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 800a064:	f8c2 c000 	str.w	ip, [r2]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a068:	468c      	mov	ip, r1
 800a06a:	e7ec      	b.n	800a046 <USB_DevInit+0x102>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a06c:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 800a070:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a074:	468c      	mov	ip, r1
 800a076:	e7e3      	b.n	800a040 <USB_DevInit+0xfc>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a078:	f8de 2010 	ldr.w	r2, [lr, #16]
 800a07c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a080:	f8ce 2010 	str.w	r2, [lr, #16]
  USBx->GINTMSK = 0U;
 800a084:	2100      	movs	r1, #0
  if (cfg.dma_enable == 0U)
 800a086:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
  USBx->GINTMSK = 0U;
 800a08a:	6199      	str	r1, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a08c:	f06f 4180 	mvn.w	r1, #1073741824	@ 0x40000000
 800a090:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 800a092:	b91a      	cbnz	r2, 800a09c <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	f042 0210 	orr.w	r2, r2, #16
 800a09a:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a09c:	6999      	ldr	r1, [r3, #24]
 800a09e:	4a3e      	ldr	r2, [pc, #248]	@ (800a198 <USB_DevInit+0x254>)
 800a0a0:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 800a0a2:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0a6:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 800a0a8:	b119      	cbz	r1, 800a0b2 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0aa:	699a      	ldr	r2, [r3, #24]
 800a0ac:	f042 0208 	orr.w	r2, r2, #8
 800a0b0:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a0b2:	2c01      	cmp	r4, #1
 800a0b4:	d105      	bne.n	800a0c2 <USB_DevInit+0x17e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0b6:	699a      	ldr	r2, [r3, #24]
 800a0b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a0bc:	f042 0204 	orr.w	r2, r2, #4
 800a0c0:	619a      	str	r2, [r3, #24]
}
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0c8:	b004      	add	sp, #16
 800a0ca:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0cc:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 800a0d6:	db16      	blt.n	800a106 <USB_DevInit+0x1c2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0d8:	2500      	movs	r5, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0da:	2100      	movs	r1, #0
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	4629      	mov	r1, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0e0:	2700      	movs	r7, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0e2:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0e6:	458c      	cmp	ip, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0e8:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ea:	f101 0501 	add.w	r5, r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0ee:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0f0:	f102 0220 	add.w	r2, r2, #32
 800a0f4:	d0c0      	beq.n	800a078 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0f6:	6811      	ldr	r1, [r2, #0]
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	daee      	bge.n	800a0da <USB_DevInit+0x196>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a0fc:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	4629      	mov	r1, r5
 800a104:	e7ef      	b.n	800a0e6 <USB_DevInit+0x1a2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a106:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800a10a:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a10e:	2100      	movs	r1, #0
 800a110:	e7e6      	b.n	800a0e0 <USB_DevInit+0x19c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a112:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800a114:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800a118:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a11a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800a11c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800a120:	6382      	str	r2, [r0, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a128:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 800a12c:	2a01      	cmp	r2, #1
 800a12e:	f47f af52 	bne.w	8009fd6 <USB_DevInit+0x92>
    if (cfg.speed == USBD_HS_SPEED)
 800a132:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 800a136:	bb42      	cbnz	r2, 800a18a <USB_DevInit+0x246>
  USBx_DEVICE->DCFG |= speed;
 800a138:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800a13c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 800a140:	e74f      	b.n	8009fe2 <USB_DevInit+0x9e>
  count = 0U;
 800a142:	2200      	movs	r2, #0
 800a144:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a146:	2210      	movs	r2, #16
 800a148:	611a      	str	r2, [r3, #16]
 800a14a:	e003      	b.n	800a154 <USB_DevInit+0x210>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a14c:	691a      	ldr	r2, [r3, #16]
 800a14e:	06d2      	lsls	r2, r2, #27
 800a150:	f57f af65 	bpl.w	800a01e <USB_DevInit+0xda>
    count++;
 800a154:	9a01      	ldr	r2, [sp, #4]
 800a156:	3201      	adds	r2, #1
 800a158:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800a160:	d9f4      	bls.n	800a14c <USB_DevInit+0x208>
 800a162:	e75b      	b.n	800a01c <USB_DevInit+0xd8>
  count = 0U;
 800a164:	2200      	movs	r2, #0
 800a166:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a168:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800a16c:	611a      	str	r2, [r3, #16]
 800a16e:	e004      	b.n	800a17a <USB_DevInit+0x236>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a170:	6918      	ldr	r0, [r3, #16]
 800a172:	f010 0020 	ands.w	r0, r0, #32
 800a176:	f43f af43 	beq.w	800a000 <USB_DevInit+0xbc>
    count++;
 800a17a:	9a00      	ldr	r2, [sp, #0]
 800a17c:	3201      	adds	r2, #1
 800a17e:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 800a180:	9a00      	ldr	r2, [sp, #0]
 800a182:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 800a186:	d9f3      	bls.n	800a170 <USB_DevInit+0x22c>
 800a188:	e739      	b.n	8009ffe <USB_DevInit+0xba>
  USBx_DEVICE->DCFG |= speed;
 800a18a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  return HAL_OK;
 800a196:	e724      	b.n	8009fe2 <USB_DevInit+0x9e>
 800a198:	803c3800 	.word	0x803c3800

0800a19c <USB_FlushTxFifo>:
{
 800a19c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	e002      	b.n	800a1aa <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1a4:	6903      	ldr	r3, [r0, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	db09      	blt.n	800a1be <USB_FlushTxFifo+0x22>
    count++;
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1b6:	d9f5      	bls.n	800a1a4 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 800a1b8:	2003      	movs	r0, #3
}
 800a1ba:	b002      	add	sp, #8
 800a1bc:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1be:	0189      	lsls	r1, r1, #6
  count = 0U;
 800a1c0:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1c2:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800a1c6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1c8:	6101      	str	r1, [r0, #16]
 800a1ca:	e003      	b.n	800a1d4 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1cc:	6903      	ldr	r3, [r0, #16]
 800a1ce:	f013 0320 	ands.w	r3, r3, #32
 800a1d2:	d007      	beq.n	800a1e4 <USB_FlushTxFifo+0x48>
    count++;
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1e0:	d9f4      	bls.n	800a1cc <USB_FlushTxFifo+0x30>
 800a1e2:	e7e9      	b.n	800a1b8 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800a1e4:	4618      	mov	r0, r3
}
 800a1e6:	b002      	add	sp, #8
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop

0800a1ec <USB_FlushRxFifo>:
{
 800a1ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	e002      	b.n	800a1fa <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1f4:	6903      	ldr	r3, [r0, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	db09      	blt.n	800a20e <USB_FlushRxFifo+0x22>
    count++;
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a206:	d9f5      	bls.n	800a1f4 <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 800a208:	2003      	movs	r0, #3
}
 800a20a:	b002      	add	sp, #8
 800a20c:	4770      	bx	lr
  count = 0U;
 800a20e:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a210:	2310      	movs	r3, #16
  count = 0U;
 800a212:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a214:	6103      	str	r3, [r0, #16]
 800a216:	e003      	b.n	800a220 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a218:	6903      	ldr	r3, [r0, #16]
 800a21a:	f013 0310 	ands.w	r3, r3, #16
 800a21e:	d007      	beq.n	800a230 <USB_FlushRxFifo+0x44>
    count++;
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	3301      	adds	r3, #1
 800a224:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a22c:	d9f4      	bls.n	800a218 <USB_FlushRxFifo+0x2c>
 800a22e:	e7eb      	b.n	800a208 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 800a230:	4618      	mov	r0, r3
}
 800a232:	b002      	add	sp, #8
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop

0800a238 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a238:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a23c:	f013 0006 	ands.w	r0, r3, #6
 800a240:	d004      	beq.n	800a24c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800a242:	f013 0f02 	tst.w	r3, #2
 800a246:	bf14      	ite	ne
 800a248:	2002      	movne	r0, #2
 800a24a:	200f      	moveq	r0, #15
}
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop

0800a250 <USB_ActivateEndpoint>:
{
 800a250:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a252:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a254:	2301      	movs	r3, #1
 800a256:	f002 0e0f 	and.w	lr, r2, #15
 800a25a:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 800a25e:	f891 e001 	ldrb.w	lr, [r1, #1]
 800a262:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a266:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a26a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800a26e:	d01a      	beq.n	800a2a6 <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a270:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800a274:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800a278:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a27c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a280:	041b      	lsls	r3, r3, #16
 800a282:	d40e      	bmi.n	800a2a2 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a284:	688b      	ldr	r3, [r1, #8]
 800a286:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800a28a:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a28c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a290:	4323      	orrs	r3, r4
 800a292:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800a296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a29a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a29e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a2a6:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800a2aa:	4323      	orrs	r3, r4
 800a2ac:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a2b0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a2b4:	041c      	lsls	r4, r3, #16
 800a2b6:	d4f4      	bmi.n	800a2a2 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2b8:	688b      	ldr	r3, [r1, #8]
 800a2ba:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2be:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2c4:	4323      	orrs	r3, r4
 800a2c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a2ca:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800a2ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2d6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800a2da:	2000      	movs	r0, #0
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	bf00      	nop

0800a2e0 <USB_DeactivateEndpoint>:
{
 800a2e0:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800a2e2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800a2e4:	7849      	ldrb	r1, [r1, #1]
 800a2e6:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2e8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 800a2ec:	d02c      	beq.n	800a348 <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2ee:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a2f2:	2900      	cmp	r1, #0
 800a2f4:	db1b      	blt.n	800a32e <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2f6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800a2fa:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800a2fe:	f002 020f 	and.w	r2, r2, #15
 800a302:	fa01 f202 	lsl.w	r2, r1, r2
 800a306:	ea24 0402 	bic.w	r4, r4, r2
 800a30a:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a30e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a312:	4922      	ldr	r1, [pc, #136]	@ (800a39c <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a314:	ea24 0202 	bic.w	r2, r4, r2
 800a318:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a31c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 800a320:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a324:	4011      	ands	r1, r2
}
 800a326:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a328:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 800a32c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a32e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a332:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800a336:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a33a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a33e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800a342:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 800a346:	e7d6      	b.n	800a2f6 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a348:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800a34c:	2900      	cmp	r1, #0
 800a34e:	da0b      	bge.n	800a368 <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a350:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800a354:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 800a358:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a35c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800a360:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800a364:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a368:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 800a36c:	f002 040f 	and.w	r4, r2, #15
 800a370:	2201      	movs	r2, #1
 800a372:	40a2      	lsls	r2, r4
 800a374:	ea21 0102 	bic.w	r1, r1, r2
 800a378:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a37c:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a380:	4907      	ldr	r1, [pc, #28]	@ (800a3a0 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a382:	ea24 0202 	bic.w	r2, r4, r2
 800a386:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a38a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 800a38e:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a392:	4011      	ands	r1, r2
}
 800a394:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a396:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 800a39a:	4770      	bx	lr
 800a39c:	eff37800 	.word	0xeff37800
 800a3a0:	ec337800 	.word	0xec337800

0800a3a4 <USB_EPStartXfer>:
{
 800a3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 800a3a8:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a3aa:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 800a3ac:	690d      	ldr	r5, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
 800a3ae:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 800a3b2:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3b4:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 800a3b8:	d05d      	beq.n	800a476 <USB_EPStartXfer+0xd2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3ba:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 800a3be:	0ce4      	lsrs	r4, r4, #19
 800a3c0:	04e4      	lsls	r4, r4, #19
 800a3c2:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3c6:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 800a3ca:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800a3ce:	f424 14c0 	bic.w	r4, r4, #1572864	@ 0x180000
 800a3d2:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3d6:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 800a3da:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 800a3dc:	bb56      	cbnz	r6, 800a434 <USB_EPStartXfer+0x90>
      if (ep->xfer_len > 0U)
 800a3de:	b105      	cbz	r5, 800a3e2 <USB_EPStartXfer+0x3e>
        ep->xfer_len = ep->maxpacket;
 800a3e0:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800a3e2:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3e4:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800a3e8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a3ec:	432c      	orrs	r4, r5
 800a3ee:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3f2:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800a3f6:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3f8:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a3fc:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800a400:	d033      	beq.n	800a46a <USB_EPStartXfer+0xc6>
    if (ep->type == EP_TYPE_ISOC)
 800a402:	f1be 0f01 	cmp.w	lr, #1
 800a406:	d10c      	bne.n	800a422 <USB_EPStartXfer+0x7e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a408:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 800a40c:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a410:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800a414:	bf0c      	ite	eq
 800a416:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a41a:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 800a41e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a422:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800a426:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 800a42a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800a42e:	2000      	movs	r0, #0
 800a430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 800a434:	2d00      	cmp	r5, #0
 800a436:	d0d5      	beq.n	800a3e4 <USB_EPStartXfer+0x40>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a438:	4e67      	ldr	r6, [pc, #412]	@ (800a5d8 <USB_EPStartXfer+0x234>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a43a:	4425      	add	r5, r4
 800a43c:	3d01      	subs	r5, #1
 800a43e:	fbb5 f5f4 	udiv	r5, r5, r4
 800a442:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a444:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a448:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800a44c:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a450:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a452:	4335      	orrs	r5, r6
 800a454:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a458:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800a45c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a460:	432c      	orrs	r4, r5
    if (dma == 1U)
 800a462:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a464:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800a468:	d1cb      	bne.n	800a402 <USB_EPStartXfer+0x5e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a46a:	68ca      	ldr	r2, [r1, #12]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d0c8      	beq.n	800a402 <USB_EPStartXfer+0x5e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a470:	f8cc 2014 	str.w	r2, [ip, #20]
 800a474:	e7c5      	b.n	800a402 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a476:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
 800a47a:	6927      	ldr	r7, [r4, #16]
    if (ep->xfer_len == 0U)
 800a47c:	b39d      	cbz	r5, 800a4e6 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a47e:	0cff      	lsrs	r7, r7, #19
 800a480:	04ff      	lsls	r7, r7, #19
 800a482:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a484:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 800a486:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a48a:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 800a48e:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 800a492:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 800a494:	2e00      	cmp	r6, #0
 800a496:	d17c      	bne.n	800a592 <USB_EPStartXfer+0x1ee>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a498:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 800a49a:	45a9      	cmp	r9, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a49c:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 800a4a0:	bf3c      	itt	cc
 800a4a2:	f8c1 9010 	strcc.w	r9, [r1, #16]
 800a4a6:	464d      	movcc	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4a8:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4aa:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a4ae:	f3c5 0712 	ubfx	r7, r5, #0, #19
 800a4b2:	ea47 070c 	orr.w	r7, r7, ip
    if (dma == 1U)
 800a4b6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4b8:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 800a4ba:	d04e      	beq.n	800a55a <USB_EPStartXfer+0x1b6>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4bc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a4c0:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4c4:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800a4c8:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a4cc:	d023      	beq.n	800a516 <USB_EPStartXfer+0x172>
        if (ep->xfer_len > 0U)
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	d0ad      	beq.n	800a42e <USB_EPStartXfer+0x8a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4d2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 800a4d6:	f006 060f 	and.w	r6, r6, #15
 800a4da:	2301      	movs	r3, #1
 800a4dc:	40b3      	lsls	r3, r6
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800a4e4:	e7a3      	b.n	800a42e <USB_EPStartXfer+0x8a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4e6:	f027 57ff 	bic.w	r7, r7, #534773760	@ 0x1fe00000
 800a4ea:	f427 17c0 	bic.w	r7, r7, #1572864	@ 0x180000
 800a4ee:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4f0:	6927      	ldr	r7, [r4, #16]
 800a4f2:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
 800a4f6:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4f8:	6927      	ldr	r7, [r4, #16]
 800a4fa:	0cff      	lsrs	r7, r7, #19
 800a4fc:	04ff      	lsls	r7, r7, #19
    if (dma == 1U)
 800a4fe:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a500:	6127      	str	r7, [r4, #16]
    if (dma == 1U)
 800a502:	d02a      	beq.n	800a55a <USB_EPStartXfer+0x1b6>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a504:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a508:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a50c:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 800a510:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a514:	d18b      	bne.n	800a42e <USB_EPStartXfer+0x8a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a516:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
 800a51a:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a51e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800a522:	bf0c      	ite	eq
 800a524:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a528:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 800a52c:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
  if (dma == 0U)
 800a530:	2a00      	cmp	r2, #0
 800a532:	f47f af7c 	bne.w	800a42e <USB_EPStartXfer+0x8a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a536:	b2ad      	uxth	r5, r5
 800a538:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800a53a:	08ad      	lsrs	r5, r5, #2
 800a53c:	f43f af77 	beq.w	800a42e <USB_EPStartXfer+0x8a>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a540:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a542:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 800a546:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800a54a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800a54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a552:	6032      	str	r2, [r6, #0]
    for (i = 0U; i < count32b; i++)
 800a554:	4299      	cmp	r1, r3
 800a556:	d1fa      	bne.n	800a54e <USB_EPStartXfer+0x1aa>
 800a558:	e769      	b.n	800a42e <USB_EPStartXfer+0x8a>
      if ((uint32_t)ep->dma_addr != 0U)
 800a55a:	69ca      	ldr	r2, [r1, #28]
 800a55c:	b102      	cbz	r2, 800a560 <USB_EPStartXfer+0x1bc>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a55e:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 800a560:	f1be 0f01 	cmp.w	lr, #1
 800a564:	d10c      	bne.n	800a580 <USB_EPStartXfer+0x1dc>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a566:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 800a56a:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a56e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800a572:	bf0c      	ite	eq
 800a574:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a578:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 800a57c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a580:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800a584:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 800a588:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 800a58c:	2000      	movs	r0, #0
 800a58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a592:	f8df c044 	ldr.w	ip, [pc, #68]	@ 800a5d8 <USB_EPStartXfer+0x234>
 800a596:	f8d4 8010 	ldr.w	r8, [r4, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a59a:	eb09 0705 	add.w	r7, r9, r5
 800a59e:	3f01      	subs	r7, #1
 800a5a0:	fbb7 f7f9 	udiv	r7, r7, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a5a4:	ea0c 4cc7 	and.w	ip, ip, r7, lsl #19
 800a5a8:	ea4c 0c08 	orr.w	ip, ip, r8
        if (ep->type == EP_TYPE_ISOC)
 800a5ac:	f1be 0f01 	cmp.w	lr, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a5b0:	f8c4 c010 	str.w	ip, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 800a5b4:	b2bf      	uxth	r7, r7
 800a5b6:	f47f af78 	bne.w	800a4aa <USB_EPStartXfer+0x106>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a5ba:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a5be:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
 800a5c2:	f8c4 c010 	str.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a5c6:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a5ca:	077f      	lsls	r7, r7, #29
 800a5cc:	f007 47c0 	and.w	r7, r7, #1610612736	@ 0x60000000
 800a5d0:	ea47 070c 	orr.w	r7, r7, ip
 800a5d4:	6127      	str	r7, [r4, #16]
 800a5d6:	e768      	b.n	800a4aa <USB_EPStartXfer+0x106>
 800a5d8:	1ff80000 	.word	0x1ff80000

0800a5dc <USB_EPStopXfer>:
{
 800a5dc:	b410      	push	{r4}
  if (ep->is_in == 1U)
 800a5de:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5e0:	780b      	ldrb	r3, [r1, #0]
{
 800a5e2:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800a5e4:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 800a5e6:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 800a5e8:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5ea:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 800a5ee:	d023      	beq.n	800a638 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5f0:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 800a5f4:	18c2      	adds	r2, r0, r3
 800a5f6:	58c1      	ldr	r1, [r0, r3]
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	db04      	blt.n	800a606 <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 800a5fc:	2000      	movs	r0, #0
}
 800a5fe:	b003      	add	sp, #12
 800a600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a604:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a606:	58c4      	ldr	r4, [r0, r3]
 800a608:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800a60c:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a60e:	58c4      	ldr	r4, [r0, r3]
 800a610:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800a614:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 800a616:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a61a:	e002      	b.n	800a622 <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a61c:	6813      	ldr	r3, [r2, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	daec      	bge.n	800a5fc <USB_EPStopXfer+0x20>
        count++;
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	3301      	adds	r3, #1
 800a626:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	428b      	cmp	r3, r1
 800a62c:	d9f6      	bls.n	800a61c <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 800a62e:	2001      	movs	r0, #1
}
 800a630:	b003      	add	sp, #12
 800a632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a636:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a638:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800a63c:	18c2      	adds	r2, r0, r3
 800a63e:	58c1      	ldr	r1, [r0, r3]
 800a640:	2900      	cmp	r1, #0
 800a642:	dadb      	bge.n	800a5fc <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a644:	58c4      	ldr	r4, [r0, r3]
 800a646:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800a64a:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a64c:	58c4      	ldr	r4, [r0, r3]
 800a64e:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800a652:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 800a654:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a658:	e002      	b.n	800a660 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a65a:	6813      	ldr	r3, [r2, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dacd      	bge.n	800a5fc <USB_EPStopXfer+0x20>
        count++;
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	3301      	adds	r3, #1
 800a664:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	428b      	cmp	r3, r1
 800a66a:	d9f6      	bls.n	800a65a <USB_EPStopXfer+0x7e>
 800a66c:	e7df      	b.n	800a62e <USB_EPStopXfer+0x52>
 800a66e:	bf00      	nop

0800a670 <USB_WritePacket>:
{
 800a670:	b410      	push	{r4}
 800a672:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800a676:	b964      	cbnz	r4, 800a692 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a678:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800a67a:	089b      	lsrs	r3, r3, #2
 800a67c:	d009      	beq.n	800a692 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a67e:	3201      	adds	r2, #1
 800a680:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800a684:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a688:	f851 2b04 	ldr.w	r2, [r1], #4
 800a68c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a68e:	428b      	cmp	r3, r1
 800a690:	d1fa      	bne.n	800a688 <USB_WritePacket+0x18>
}
 800a692:	2000      	movs	r0, #0
 800a694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <USB_ReadPacket>:
{
 800a69c:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 800a69e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 800a6a2:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800a6a4:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800a6a8:	d01c      	beq.n	800a6e4 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6aa:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 800a6ae:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a6b4:	6822      	ldr	r2, [r4, #0]
 800a6b6:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800a6ba:	459e      	cmp	lr, r3
 800a6bc:	d1f9      	bne.n	800a6b2 <USB_ReadPacket+0x16>
    pDest++;
 800a6be:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800a6c2:	b176      	cbz	r6, 800a6e2 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6c4:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
    } while (remaining_bytes != 0U);
 800a6c8:	2e01      	cmp	r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6ca:	682b      	ldr	r3, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6cc:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 800a6ce:	d007      	beq.n	800a6e0 <USB_ReadPacket+0x44>
 800a6d0:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6d2:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800a6d6:	bf18      	it	ne
 800a6d8:	0c1b      	lsrne	r3, r3, #16
 800a6da:	7042      	strb	r2, [r0, #1]
 800a6dc:	bf18      	it	ne
 800a6de:	7083      	strbne	r3, [r0, #2]
      pDest++;
 800a6e0:	4430      	add	r0, r6
}
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	e7ec      	b.n	800a6c2 <USB_ReadPacket+0x26>

0800a6e8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800a6e8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ea:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a6ec:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800a6f2:	d00c      	beq.n	800a70e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6f4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	db00      	blt.n	800a6fe <USB_EPSetStall+0x16>
 800a6fc:	b9d3      	cbnz	r3, 800a734 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a6fe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a706:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a70a:	2000      	movs	r0, #0
 800a70c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a70e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800a712:	2a00      	cmp	r2, #0
 800a714:	db06      	blt.n	800a724 <USB_EPSetStall+0x3c>
 800a716:	b12b      	cbz	r3, 800a724 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a718:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a71c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a720:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a724:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a72c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800a730:	2000      	movs	r0, #0
 800a732:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a734:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a738:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a73c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800a740:	e7dd      	b.n	800a6fe <USB_EPSetStall+0x16>
 800a742:	bf00      	nop

0800a744 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a744:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 800a746:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a748:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a74c:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 800a74e:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a750:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a754:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 800a756:	d011      	beq.n	800a77c <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a758:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a75c:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a75e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800a762:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a766:	d901      	bls.n	800a76c <USB_EPClearStall+0x28>
}
 800a768:	2000      	movs	r0, #0
 800a76a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a76c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a774:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a778:	2000      	movs	r0, #0
 800a77a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a77c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a780:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a782:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800a786:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a78a:	d8ed      	bhi.n	800a768 <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a78c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a794:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800a798:	2000      	movs	r0, #0
 800a79a:	4770      	bx	lr

0800a79c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a79c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a7a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a7a4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7a8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a7ac:	0109      	lsls	r1, r1, #4
 800a7ae:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800a7b2:	4319      	orrs	r1, r3
 800a7b4:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	4770      	bx	lr

0800a7bc <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7bc:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800a7c0:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7c2:	f022 0203 	bic.w	r2, r2, #3
 800a7c6:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a7ce:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800a7d2:	f023 0302 	bic.w	r3, r3, #2
}
 800a7d6:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7d8:	604b      	str	r3, [r1, #4]
}
 800a7da:	4770      	bx	lr

0800a7dc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7dc:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 800a7e0:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7e2:	f022 0203 	bic.w	r2, r2, #3
 800a7e6:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a7ee:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
}
 800a7f6:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7f8:	604b      	str	r3, [r1, #4]
}
 800a7fa:	4770      	bx	lr

0800a7fc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a7fc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a7fe:	6980      	ldr	r0, [r0, #24]
}
 800a800:	4010      	ands	r0, r2
 800a802:	4770      	bx	lr

0800a804 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a804:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a808:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a80c:	69c0      	ldr	r0, [r0, #28]
 800a80e:	4018      	ands	r0, r3
}
 800a810:	0c00      	lsrs	r0, r0, #16
 800a812:	4770      	bx	lr

0800a814 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a814:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a818:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a81c:	69c0      	ldr	r0, [r0, #28]
 800a81e:	4018      	ands	r0, r3
}
 800a820:	b280      	uxth	r0, r0
 800a822:	4770      	bx	lr

0800a824 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a824:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a828:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a82c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a830:	6940      	ldr	r0, [r0, #20]
}
 800a832:	4010      	ands	r0, r2
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop

0800a838 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a838:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a83c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a840:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a844:	f001 010f 	and.w	r1, r1, #15
 800a848:	40cb      	lsrs	r3, r1
 800a84a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a84c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a850:	b2db      	uxtb	r3, r3
 800a852:	4313      	orrs	r3, r2
}
 800a854:	4018      	ands	r0, r3
 800a856:	4770      	bx	lr

0800a858 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a858:	6940      	ldr	r0, [r0, #20]
}
 800a85a:	f000 0001 	and.w	r0, r0, #1
 800a85e:	4770      	bx	lr

0800a860 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a860:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 800a864:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a866:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800a86a:	f022 0207 	bic.w	r2, r2, #7
 800a86e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a872:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800a876:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 800a87a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 800a87e:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a880:	604b      	str	r3, [r1, #4]
}
 800a882:	4770      	bx	lr

0800a884 <USB_EP0_OutStart>:
{
 800a884:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a886:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a888:	4c11      	ldr	r4, [pc, #68]	@ (800a8d0 <USB_EP0_OutStart+0x4c>)
 800a88a:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a88c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a890:	d903      	bls.n	800a89a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a892:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 800a896:	2c00      	cmp	r4, #0
 800a898:	db16      	blt.n	800a8c8 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a89a:	2400      	movs	r4, #0
 800a89c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a89e:	691c      	ldr	r4, [r3, #16]
 800a8a0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a8a4:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8a6:	691c      	ldr	r4, [r3, #16]
 800a8a8:	f044 0418 	orr.w	r4, r4, #24
 800a8ac:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8ae:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 800a8b0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8b2:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800a8b6:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800a8b8:	d106      	bne.n	800a8c8 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a8ba:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a8bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a8c0:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a8c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	bc30      	pop	{r4, r5}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	4f54300a 	.word	0x4f54300a

0800a8d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a8d4:	b510      	push	{r4, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a8d6:	490c      	ldr	r1, [pc, #48]	@ (800a908 <MX_FATFS_Init+0x34>)
 800a8d8:	480c      	ldr	r0, [pc, #48]	@ (800a90c <MX_FATFS_Init+0x38>)
 800a8da:	4c0d      	ldr	r4, [pc, #52]	@ (800a910 <MX_FATFS_Init+0x3c>)
 800a8dc:	f004 fac0 	bl	800ee60 <FATFS_LinkDriver>
 800a8e0:	7020      	strb	r0, [r4, #0]

  /* USER CODE BEGIN Init */
  if(retSD != FR_OK)
 800a8e2:	b938      	cbnz	r0, 800a8f4 <MX_FATFS_Init+0x20>
  {
  	printf("FATFS_LinkDriver() failed.\n");
  	Error_Handler();
  }

  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800a8e4:	4908      	ldr	r1, [pc, #32]	@ (800a908 <MX_FATFS_Init+0x34>)
 800a8e6:	480b      	ldr	r0, [pc, #44]	@ (800a914 <MX_FATFS_Init+0x40>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f003 ff23 	bl	800e734 <f_mount>
 800a8ee:	7020      	strb	r0, [r4, #0]
  if(retSD != FR_OK)
 800a8f0:	b930      	cbnz	r0, 800a900 <MX_FATFS_Init+0x2c>
  {
  	Error_Handler();
  }
  /* USER CODE END Init */
}
 800a8f2:	bd10      	pop	{r4, pc}
  	printf("FATFS_LinkDriver() failed.\n");
 800a8f4:	4808      	ldr	r0, [pc, #32]	@ (800a918 <MX_FATFS_Init+0x44>)
 800a8f6:	f004 ff7b 	bl	800f7f0 <puts>
  	Error_Handler();
 800a8fa:	f7f9 fb15 	bl	8003f28 <Error_Handler>
 800a8fe:	e7f1      	b.n	800a8e4 <MX_FATFS_Init+0x10>
}
 800a900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  	Error_Handler();
 800a904:	f7f9 bb10 	b.w	8003f28 <Error_Handler>
 800a908:	20000ae4 	.word	0x20000ae4
 800a90c:	08011584 	.word	0x08011584
 800a910:	20000ae8 	.word	0x20000ae8
 800a914:	200008b0 	.word	0x200008b0
 800a918:	08011568 	.word	0x08011568

0800a91c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a91c:	2000      	movs	r0, #0
 800a91e:	4770      	bx	lr

0800a920 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a920:	4684      	mov	ip, r0
 800a922:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a924:	4804      	ldr	r0, [pc, #16]	@ (800a938 <BSP_SD_ReadBlocks_DMA+0x18>)
{
 800a926:	4613      	mov	r3, r2
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a928:	460a      	mov	r2, r1
 800a92a:	4661      	mov	r1, ip
 800a92c:	f7fc fb14 	bl	8006f58 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a930:	3800      	subs	r0, #0
 800a932:	bf18      	it	ne
 800a934:	2001      	movne	r0, #1
 800a936:	bd08      	pop	{r3, pc}
 800a938:	20000800 	.word	0x20000800

0800a93c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a93c:	4684      	mov	ip, r0
 800a93e:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a940:	4804      	ldr	r0, [pc, #16]	@ (800a954 <BSP_SD_WriteBlocks_DMA+0x18>)
{
 800a942:	4613      	mov	r3, r2
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a944:	460a      	mov	r2, r1
 800a946:	4661      	mov	r1, ip
 800a948:	f7fc fba0 	bl	800708c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a94c:	3800      	subs	r0, #0
 800a94e:	bf18      	it	ne
 800a950:	2001      	movne	r0, #1
 800a952:	bd08      	pop	{r3, pc}
 800a954:	20000800 	.word	0x20000800

0800a958 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a958:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a95a:	4803      	ldr	r0, [pc, #12]	@ (800a968 <BSP_SD_GetCardState+0x10>)
 800a95c:	f7fd f8be 	bl	8007adc <HAL_SD_GetCardState>
}
 800a960:	3804      	subs	r0, #4
 800a962:	bf18      	it	ne
 800a964:	2001      	movne	r0, #1
 800a966:	bd08      	pop	{r3, pc}
 800a968:	20000800 	.word	0x20000800

0800a96c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a96c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a96e:	4801      	ldr	r0, [pc, #4]	@ (800a974 <BSP_SD_GetCardInfo+0x8>)
 800a970:	f7fd b802 	b.w	8007978 <HAL_SD_GetCardInfo>
 800a974:	20000800 	.word	0x20000800

0800a978 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop

0800a97c <HAL_SD_AbortCallback>:
{
 800a97c:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800a97e:	f7ff fffb 	bl	800a978 <BSP_SD_AbortCallback>
}
 800a982:	bd08      	pop	{r3, pc}

0800a984 <HAL_SD_TxCpltCallback>:
{
 800a984:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800a986:	f000 f907 	bl	800ab98 <BSP_SD_WriteCpltCallback>
}
 800a98a:	bd08      	pop	{r3, pc}

0800a98c <HAL_SD_RxCpltCallback>:
{
 800a98c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800a98e:	f000 f90d 	bl	800abac <BSP_SD_ReadCpltCallback>
}
 800a992:	bd08      	pop	{r3, pc}

0800a994 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a994:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800a996:	2301      	movs	r3, #1
 800a998:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a99c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a9a0:	b002      	add	sp, #8
 800a9a2:	4770      	bx	lr

0800a9a4 <BSP_SD_Init>:
{
 800a9a4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a9a6:	f7ff fff5 	bl	800a994 <BSP_SD_IsDetected>
 800a9aa:	2801      	cmp	r0, #1
 800a9ac:	d001      	beq.n	800a9b2 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 800a9ae:	2001      	movs	r0, #1
}
 800a9b0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800a9b2:	4807      	ldr	r0, [pc, #28]	@ (800a9d0 <BSP_SD_Init+0x2c>)
 800a9b4:	f7fc ffc2 	bl	800793c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d1f9      	bne.n	800a9b0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a9bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a9c0:	4803      	ldr	r0, [pc, #12]	@ (800a9d0 <BSP_SD_Init+0x2c>)
 800a9c2:	f7fc ffed 	bl	80079a0 <HAL_SD_ConfigWideBusOperation>
 800a9c6:	3800      	subs	r0, #0
 800a9c8:	bf18      	it	ne
 800a9ca:	2001      	movne	r0, #1
}
 800a9cc:	bd08      	pop	{r3, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000800 	.word	0x20000800

0800a9d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a9d4:	b510      	push	{r4, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a9d6:	f7ff ffe5 	bl	800a9a4 <BSP_SD_Init>
  Stat = STA_NOINIT;
 800a9da:	4c09      	ldr	r4, [pc, #36]	@ (800aa00 <SD_initialize+0x2c>)
  if(BSP_SD_Init() == MSD_OK)
 800a9dc:	b108      	cbz	r0, 800a9e2 <SD_initialize+0xe>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a9de:	7820      	ldrb	r0, [r4, #0]
}
 800a9e0:	bd10      	pop	{r4, pc}
  Stat = STA_NOINIT;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a9e6:	f7ff ffb7 	bl	800a958 <BSP_SD_GetCardState>
 800a9ea:	b918      	cbnz	r0, 800a9f4 <SD_initialize+0x20>
    Stat &= ~STA_NOINIT;
 800a9ec:	7823      	ldrb	r3, [r4, #0]
 800a9ee:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a9f2:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a9f4:	7823      	ldrb	r3, [r4, #0]
 800a9f6:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800a9f8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a9fa:	7820      	ldrb	r0, [r4, #0]
}
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000014 	.word	0x20000014

0800aa04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aa04:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800aa06:	4c06      	ldr	r4, [pc, #24]	@ (800aa20 <SD_status+0x1c>)
 800aa08:	2301      	movs	r3, #1
 800aa0a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800aa0c:	f7ff ffa4 	bl	800a958 <BSP_SD_GetCardState>
 800aa10:	b918      	cbnz	r0, 800aa1a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800aa12:	7823      	ldrb	r3, [r4, #0]
 800aa14:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800aa18:	7023      	strb	r3, [r4, #0]
  return Stat;
 800aa1a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000014 	.word	0x20000014

0800aa24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aa24:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aa26:	4b16      	ldr	r3, [pc, #88]	@ (800aa80 <SD_ioctl+0x5c>)
 800aa28:	7818      	ldrb	r0, [r3, #0]
 800aa2a:	f010 0401 	ands.w	r4, r0, #1
{
 800aa2e:	b089      	sub	sp, #36	@ 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aa30:	d106      	bne.n	800aa40 <SD_ioctl+0x1c>
 800aa32:	4615      	mov	r5, r2

  switch (cmd)
 800aa34:	2903      	cmp	r1, #3
 800aa36:	d820      	bhi.n	800aa7a <SD_ioctl+0x56>
 800aa38:	e8df f001 	tbb	[pc, r1]
 800aa3c:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aa40:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800aa42:	4620      	mov	r0, r4
 800aa44:	b009      	add	sp, #36	@ 0x24
 800aa46:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800aa48:	4668      	mov	r0, sp
 800aa4a:	f7ff ff8f 	bl	800a96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aa4e:	9b07      	ldr	r3, [sp, #28]
}
 800aa50:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aa52:	0a5b      	lsrs	r3, r3, #9
 800aa54:	602b      	str	r3, [r5, #0]
}
 800aa56:	b009      	add	sp, #36	@ 0x24
 800aa58:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800aa5a:	4668      	mov	r0, sp
 800aa5c:	f7ff ff86 	bl	800a96c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aa60:	9b06      	ldr	r3, [sp, #24]
 800aa62:	602b      	str	r3, [r5, #0]
}
 800aa64:	4620      	mov	r0, r4
 800aa66:	b009      	add	sp, #36	@ 0x24
 800aa68:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800aa6a:	4668      	mov	r0, sp
 800aa6c:	f7ff ff7e 	bl	800a96c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aa70:	9b07      	ldr	r3, [sp, #28]
 800aa72:	802b      	strh	r3, [r5, #0]
}
 800aa74:	4620      	mov	r0, r4
 800aa76:	b009      	add	sp, #36	@ 0x24
 800aa78:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800aa7a:	2404      	movs	r4, #4
 800aa7c:	e7e1      	b.n	800aa42 <SD_ioctl+0x1e>
 800aa7e:	bf00      	nop
 800aa80:	20000014 	.word	0x20000014

0800aa84 <SD_read>:
{
 800aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa88:	460d      	mov	r5, r1
 800aa8a:	4616      	mov	r6, r2
 800aa8c:	461f      	mov	r7, r3
  uint32_t timer = HAL_GetTick();
 800aa8e:	f7f9 ff7f 	bl	8004990 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 800aa92:	f247 582f 	movw	r8, #29999	@ 0x752f
  uint32_t timer = HAL_GetTick();
 800aa96:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 800aa98:	e002      	b.n	800aaa0 <SD_read+0x1c>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa9a:	f7ff ff5d 	bl	800a958 <BSP_SD_GetCardState>
 800aa9e:	b138      	cbz	r0, 800aab0 <SD_read+0x2c>
  while(HAL_GetTick() - timer < timeout)
 800aaa0:	f7f9 ff76 	bl	8004990 <HAL_GetTick>
 800aaa4:	1b00      	subs	r0, r0, r4
 800aaa6:	4540      	cmp	r0, r8
 800aaa8:	d9f7      	bls.n	800aa9a <SD_read+0x16>
    return res;
 800aaaa:	2001      	movs	r0, #1
}
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aab0:	463a      	mov	r2, r7
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	f7ff ff33 	bl	800a920 <BSP_SD_ReadBlocks_DMA>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d1f5      	bne.n	800aaaa <SD_read+0x26>
      ReadStatus = 0;
 800aabe:	4c12      	ldr	r4, [pc, #72]	@ (800ab08 <SD_read+0x84>)
 800aac0:	6020      	str	r0, [r4, #0]
      timeout = HAL_GetTick();
 800aac2:	f7f9 ff65 	bl	8004990 <HAL_GetTick>
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aac6:	f247 562f 	movw	r6, #29999	@ 0x752f
      timeout = HAL_GetTick();
 800aaca:	4605      	mov	r5, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aacc:	e004      	b.n	800aad8 <SD_read+0x54>
 800aace:	f7f9 ff5f 	bl	8004990 <HAL_GetTick>
 800aad2:	1b40      	subs	r0, r0, r5
 800aad4:	42b0      	cmp	r0, r6
 800aad6:	d802      	bhi.n	800aade <SD_read+0x5a>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f7      	beq.n	800aace <SD_read+0x4a>
      if (ReadStatus == 0)
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0e2      	beq.n	800aaaa <SD_read+0x26>
        ReadStatus = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	6023      	str	r3, [r4, #0]
        timeout = HAL_GetTick();
 800aae8:	f7f9 ff52 	bl	8004990 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaec:	f247 552f 	movw	r5, #29999	@ 0x752f
        timeout = HAL_GetTick();
 800aaf0:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aaf2:	e003      	b.n	800aafc <SD_read+0x78>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aaf4:	f7ff ff30 	bl	800a958 <BSP_SD_GetCardState>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0d7      	beq.n	800aaac <SD_read+0x28>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aafc:	f7f9 ff48 	bl	8004990 <HAL_GetTick>
 800ab00:	1b00      	subs	r0, r0, r4
 800ab02:	42a8      	cmp	r0, r5
 800ab04:	d9f6      	bls.n	800aaf4 <SD_read+0x70>
 800ab06:	e7d0      	b.n	800aaaa <SD_read+0x26>
 800ab08:	20000aec 	.word	0x20000aec

0800ab0c <SD_write>:
{
 800ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   WriteStatus = 0;
 800ab10:	4e20      	ldr	r6, [pc, #128]	@ (800ab94 <SD_write+0x88>)
 800ab12:	2000      	movs	r0, #0
{
 800ab14:	460f      	mov	r7, r1
 800ab16:	4690      	mov	r8, r2
 800ab18:	4699      	mov	r9, r3
   WriteStatus = 0;
 800ab1a:	6030      	str	r0, [r6, #0]
  uint32_t timer = HAL_GetTick();
 800ab1c:	f7f9 ff38 	bl	8004990 <HAL_GetTick>
  while(HAL_GetTick() - timer < timeout)
 800ab20:	f247 552f 	movw	r5, #29999	@ 0x752f
  uint32_t timer = HAL_GetTick();
 800ab24:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 800ab26:	e002      	b.n	800ab2e <SD_write+0x22>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab28:	f7ff ff16 	bl	800a958 <BSP_SD_GetCardState>
 800ab2c:	b138      	cbz	r0, 800ab3e <SD_write+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ab2e:	f7f9 ff2f 	bl	8004990 <HAL_GetTick>
 800ab32:	1b00      	subs	r0, r0, r4
 800ab34:	42a8      	cmp	r0, r5
 800ab36:	d9f7      	bls.n	800ab28 <SD_write+0x1c>
    return res;
 800ab38:	2001      	movs	r0, #1
}
 800ab3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ab3e:	464a      	mov	r2, r9
 800ab40:	4641      	mov	r1, r8
 800ab42:	4638      	mov	r0, r7
 800ab44:	f7ff fefa 	bl	800a93c <BSP_SD_WriteBlocks_DMA>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d1f5      	bne.n	800ab38 <SD_write+0x2c>
      timeout = HAL_GetTick();
 800ab4c:	f7f9 ff20 	bl	8004990 <HAL_GetTick>
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ab50:	f247 552f 	movw	r5, #29999	@ 0x752f
      timeout = HAL_GetTick();
 800ab54:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ab56:	e004      	b.n	800ab62 <SD_write+0x56>
 800ab58:	f7f9 ff1a 	bl	8004990 <HAL_GetTick>
 800ab5c:	1b00      	subs	r0, r0, r4
 800ab5e:	42a8      	cmp	r0, r5
 800ab60:	d802      	bhi.n	800ab68 <SD_write+0x5c>
 800ab62:	6833      	ldr	r3, [r6, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0f7      	beq.n	800ab58 <SD_write+0x4c>
      if (WriteStatus == 0)
 800ab68:	6833      	ldr	r3, [r6, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0e4      	beq.n	800ab38 <SD_write+0x2c>
        WriteStatus = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6033      	str	r3, [r6, #0]
        timeout = HAL_GetTick();
 800ab72:	f7f9 ff0d 	bl	8004990 <HAL_GetTick>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab76:	f247 552f 	movw	r5, #29999	@ 0x752f
        timeout = HAL_GetTick();
 800ab7a:	4604      	mov	r4, r0
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab7c:	e003      	b.n	800ab86 <SD_write+0x7a>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab7e:	f7ff feeb 	bl	800a958 <BSP_SD_GetCardState>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0d9      	beq.n	800ab3a <SD_write+0x2e>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab86:	f7f9 ff03 	bl	8004990 <HAL_GetTick>
 800ab8a:	1b00      	subs	r0, r0, r4
 800ab8c:	42a8      	cmp	r0, r5
 800ab8e:	d9f6      	bls.n	800ab7e <SD_write+0x72>
 800ab90:	e7d2      	b.n	800ab38 <SD_write+0x2c>
 800ab92:	bf00      	nop
 800ab94:	20000af0 	.word	0x20000af0

0800ab98 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 800ab98:	4902      	ldr	r1, [pc, #8]	@ (800aba4 <BSP_SD_WriteCpltCallback+0xc>)
  usbd_WriteStatus = 1;
 800ab9a:	4a03      	ldr	r2, [pc, #12]	@ (800aba8 <BSP_SD_WriteCpltCallback+0x10>)
  WriteStatus = 1;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	600b      	str	r3, [r1, #0]
  usbd_WriteStatus = 1;
 800aba0:	6013      	str	r3, [r2, #0]
}
 800aba2:	4770      	bx	lr
 800aba4:	20000af0 	.word	0x20000af0
 800aba8:	20001010 	.word	0x20001010

0800abac <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 800abac:	4902      	ldr	r1, [pc, #8]	@ (800abb8 <BSP_SD_ReadCpltCallback+0xc>)
  usbd_ReadStatus = 1;
 800abae:	4a03      	ldr	r2, [pc, #12]	@ (800abbc <BSP_SD_ReadCpltCallback+0x10>)
  ReadStatus = 1;
 800abb0:	2301      	movs	r3, #1
 800abb2:	600b      	str	r3, [r1, #0]
  usbd_ReadStatus = 1;
 800abb4:	6013      	str	r3, [r2, #0]
}
 800abb6:	4770      	bx	lr
 800abb8:	20000aec 	.word	0x20000aec
 800abbc:	2000100c 	.word	0x2000100c

0800abc0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800abc0:	230a      	movs	r3, #10
 800abc2:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 800abc4:	4800      	ldr	r0, [pc, #0]	@ (800abc8 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800abc6:	4770      	bx	lr
 800abc8:	20000018 	.word	0x20000018

0800abcc <USBD_MSC_Init>:
{
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800abd0:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800abd4:	f004 fcd4 	bl	800f580 <USBD_static_malloc>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abd8:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
  if (hmsc == NULL)
 800abdc:	4603      	mov	r3, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	d03f      	beq.n	800ac62 <USBD_MSC_Init+0x96>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800abe2:	32b0      	adds	r2, #176	@ 0xb0
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800abe4:	4d21      	ldr	r5, [pc, #132]	@ (800ac6c <USBD_MSC_Init+0xa0>)
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800abe6:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abea:	7c23      	ldrb	r3, [r4, #16]
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800abec:	7829      	ldrb	r1, [r5, #0]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abee:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf2:	b313      	cbz	r3, 800ac3a <USBD_MSC_Init+0x6e>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800abf4:	2340      	movs	r3, #64	@ 0x40
 800abf6:	2202      	movs	r2, #2
 800abf8:	4620      	mov	r0, r4
 800abfa:	f004 fc47 	bl	800f48c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800abfe:	782b      	ldrb	r3, [r5, #0]
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ac00:	4e1b      	ldr	r6, [pc, #108]	@ (800ac70 <USBD_MSC_Init+0xa4>)
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ac02:	f003 030f 	and.w	r3, r3, #15
 800ac06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ac0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac0e:	2501      	movs	r5, #1
 800ac10:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ac14:	2340      	movs	r3, #64	@ 0x40
 800ac16:	7831      	ldrb	r1, [r6, #0]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f004 fc36 	bl	800f48c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800ac20:	7833      	ldrb	r3, [r6, #0]
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ac2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  MSC_BOT_Init(pdev);
 800ac2e:	4620      	mov	r0, r4
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800ac30:	849d      	strh	r5, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 800ac32:	f000 f97d 	bl	800af30 <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 800ac36:	2000      	movs	r0, #0
}
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ac3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac3e:	2202      	movs	r2, #2
 800ac40:	4620      	mov	r0, r4
 800ac42:	f004 fc23 	bl	800f48c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ac46:	782b      	ldrb	r3, [r5, #0]
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ac48:	4e09      	ldr	r6, [pc, #36]	@ (800ac70 <USBD_MSC_Init+0xa4>)
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ac52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac56:	2501      	movs	r5, #1
 800ac58:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ac5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac60:	e7d9      	b.n	800ac16 <USBD_MSC_Init+0x4a>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac62:	32b0      	adds	r2, #176	@ 0xb0
    return (uint8_t)USBD_EMEM;
 800ac64:	2002      	movs	r0, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac66:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	20000015 	.word	0x20000015
 800ac70:	20000016 	.word	0x20000016

0800ac74 <USBD_MSC_Setup>:
{
 800ac74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac76:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ac7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ac7e:	b083      	sub	sp, #12
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac80:	f8d3 62c0 	ldr.w	r6, [r3, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hmsc == NULL)
 800ac8a:	b166      	cbz	r6, 800aca6 <USBD_MSC_Setup+0x32>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac8c:	f891 c000 	ldrb.w	ip, [r1]
 800ac90:	f01c 0260 	ands.w	r2, ip, #96	@ 0x60
 800ac94:	4604      	mov	r4, r0
 800ac96:	460d      	mov	r5, r1
 800ac98:	d019      	beq.n	800acce <USBD_MSC_Setup+0x5a>
 800ac9a:	2a20      	cmp	r2, #32
 800ac9c:	d006      	beq.n	800acac <USBD_MSC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4620      	mov	r0, r4
 800aca2:	f001 fd9f 	bl	800c7e4 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 800aca6:	2003      	movs	r0, #3
}
 800aca8:	b003      	add	sp, #12
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800acac:	784a      	ldrb	r2, [r1, #1]
 800acae:	2afe      	cmp	r2, #254	@ 0xfe
 800acb0:	d02c      	beq.n	800ad0c <USBD_MSC_Setup+0x98>
 800acb2:	2aff      	cmp	r2, #255	@ 0xff
 800acb4:	d1f3      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800acb6:	884b      	ldrh	r3, [r1, #2]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f0      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
 800acbc:	88cb      	ldrh	r3, [r1, #6]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1ed      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
 800acc2:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 800acc6:	d1ea      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
            MSC_BOT_Reset(pdev);
 800acc8:	f000 f95e 	bl	800af88 <MSC_BOT_Reset>
 800accc:	e038      	b.n	800ad40 <USBD_MSC_Setup+0xcc>
      switch (req->bRequest)
 800acce:	784b      	ldrb	r3, [r1, #1]
 800acd0:	2b0b      	cmp	r3, #11
 800acd2:	d8e4      	bhi.n	800ac9e <USBD_MSC_Setup+0x2a>
 800acd4:	a201      	add	r2, pc, #4	@ (adr r2, 800acdc <USBD_MSC_Setup+0x68>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad75 	.word	0x0800ad75
 800ace0:	0800ad57 	.word	0x0800ad57
 800ace4:	0800ac9f 	.word	0x0800ac9f
 800ace8:	0800ac9f 	.word	0x0800ac9f
 800acec:	0800ac9f 	.word	0x0800ac9f
 800acf0:	0800ac9f 	.word	0x0800ac9f
 800acf4:	0800ac9f 	.word	0x0800ac9f
 800acf8:	0800ac9f 	.word	0x0800ac9f
 800acfc:	0800ac9f 	.word	0x0800ac9f
 800ad00:	0800ac9f 	.word	0x0800ac9f
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad35 	.word	0x0800ad35
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ad0c:	884a      	ldrh	r2, [r1, #2]
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	d1c5      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
 800ad12:	88cf      	ldrh	r7, [r1, #6]
 800ad14:	2f01      	cmp	r7, #1
 800ad16:	d1c2      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
 800ad18:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 800ad1c:	d0bf      	beq.n	800ac9e <USBD_MSC_Setup+0x2a>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800ad1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	4798      	blx	r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ad26:	463a      	mov	r2, r7
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800ad28:	6030      	str	r0, [r6, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f001 fd91 	bl	800c854 <USBD_CtlSendData>
 800ad32:	e005      	b.n	800ad40 <USBD_MSC_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d1b0      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
            hmsc->interface = (uint8_t)(req->wValue);
 800ad3c:	788b      	ldrb	r3, [r1, #2]
 800ad3e:	6073      	str	r3, [r6, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad40:	2000      	movs	r0, #0
 800ad42:	e7b1      	b.n	800aca8 <USBD_MSC_Setup+0x34>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad44:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d1a8      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	1d31      	adds	r1, r6, #4
 800ad50:	f001 fd80 	bl	800c854 <USBD_CtlSendData>
 800ad54:	e7f4      	b.n	800ad40 <USBD_MSC_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad56:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d1f0      	bne.n	800ad40 <USBD_MSC_Setup+0xcc>
            if (req->wValue == USB_FEATURE_EP_HALT)
 800ad5e:	884b      	ldrh	r3, [r1, #2]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1ed      	bne.n	800ad40 <USBD_MSC_Setup+0xcc>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800ad64:	7909      	ldrb	r1, [r1, #4]
 800ad66:	f004 fbab 	bl	800f4c0 <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ad6a:	7929      	ldrb	r1, [r5, #4]
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 fa4f 	bl	800b210 <MSC_BOT_CplClrFeature>
 800ad72:	e7e5      	b.n	800ad40 <USBD_MSC_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad74:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d190      	bne.n	800ac9e <USBD_MSC_Setup+0x2a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	f10d 0106 	add.w	r1, sp, #6
 800ad82:	f001 fd67 	bl	800c854 <USBD_CtlSendData>
 800ad86:	e7db      	b.n	800ad40 <USBD_MSC_Setup+0xcc>

0800ad88 <USBD_MSC_DataIn>:
{
 800ad88:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 800ad8a:	f000 f929 	bl	800afe0 <MSC_BOT_DataIn>
}
 800ad8e:	2000      	movs	r0, #0
 800ad90:	bd08      	pop	{r3, pc}
 800ad92:	bf00      	nop

0800ad94 <USBD_MSC_DataOut>:
{
 800ad94:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 800ad96:	f000 f997 	bl	800b0c8 <MSC_BOT_DataOut>
}
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	bd08      	pop	{r3, pc}
 800ad9e:	bf00      	nop

0800ada0 <USBD_MSC_GetHSCfgDesc>:
{
 800ada0:	b538      	push	{r3, r4, r5, lr}
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ada2:	2181      	movs	r1, #129	@ 0x81
{
 800ada4:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ada6:	480b      	ldr	r0, [pc, #44]	@ (800add4 <USBD_MSC_GetHSCfgDesc+0x34>)
 800ada8:	f001 fa68 	bl	800c27c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800adac:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800adae:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800adb0:	4808      	ldr	r0, [pc, #32]	@ (800add4 <USBD_MSC_GetHSCfgDesc+0x34>)
 800adb2:	f001 fa63 	bl	800c27c <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800adb6:	b11c      	cbz	r4, 800adc0 <USBD_MSC_GetHSCfgDesc+0x20>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800adb8:	2200      	movs	r2, #0
 800adba:	2302      	movs	r3, #2
 800adbc:	7122      	strb	r2, [r4, #4]
 800adbe:	7163      	strb	r3, [r4, #5]
  if (pEpOutDesc != NULL)
 800adc0:	b118      	cbz	r0, 800adca <USBD_MSC_GetHSCfgDesc+0x2a>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800adc2:	2200      	movs	r2, #0
 800adc4:	2302      	movs	r3, #2
 800adc6:	7102      	strb	r2, [r0, #4]
 800adc8:	7143      	strb	r3, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800adca:	2320      	movs	r3, #32
}
 800adcc:	4801      	ldr	r0, [pc, #4]	@ (800add4 <USBD_MSC_GetHSCfgDesc+0x34>)
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800adce:	802b      	strh	r3, [r5, #0]
}
 800add0:	bd38      	pop	{r3, r4, r5, pc}
 800add2:	bf00      	nop
 800add4:	20000024 	.word	0x20000024

0800add8 <USBD_MSC_GetFSCfgDesc>:
{
 800add8:	b538      	push	{r3, r4, r5, lr}
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800adda:	2181      	movs	r1, #129	@ 0x81
{
 800addc:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800adde:	480b      	ldr	r0, [pc, #44]	@ (800ae0c <USBD_MSC_GetFSCfgDesc+0x34>)
 800ade0:	f001 fa4c 	bl	800c27c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ade4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ade6:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ade8:	4808      	ldr	r0, [pc, #32]	@ (800ae0c <USBD_MSC_GetFSCfgDesc+0x34>)
 800adea:	f001 fa47 	bl	800c27c <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800adee:	b11c      	cbz	r4, 800adf8 <USBD_MSC_GetFSCfgDesc+0x20>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800adf0:	2300      	movs	r3, #0
 800adf2:	2240      	movs	r2, #64	@ 0x40
 800adf4:	7122      	strb	r2, [r4, #4]
 800adf6:	7163      	strb	r3, [r4, #5]
  if (pEpOutDesc != NULL)
 800adf8:	b118      	cbz	r0, 800ae02 <USBD_MSC_GetFSCfgDesc+0x2a>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800adfa:	2300      	movs	r3, #0
 800adfc:	2240      	movs	r2, #64	@ 0x40
 800adfe:	7102      	strb	r2, [r0, #4]
 800ae00:	7143      	strb	r3, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ae02:	2320      	movs	r3, #32
}
 800ae04:	4801      	ldr	r0, [pc, #4]	@ (800ae0c <USBD_MSC_GetFSCfgDesc+0x34>)
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ae06:	802b      	strh	r3, [r5, #0]
}
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20000024 	.word	0x20000024

0800ae10 <USBD_MSC_DeInit>:
{
 800ae10:	b570      	push	{r4, r5, r6, lr}
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800ae12:	4d1a      	ldr	r5, [pc, #104]	@ (800ae7c <USBD_MSC_DeInit+0x6c>)
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800ae14:	4e1a      	ldr	r6, [pc, #104]	@ (800ae80 <USBD_MSC_DeInit+0x70>)
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800ae16:	7829      	ldrb	r1, [r5, #0]
{
 800ae18:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800ae1a:	f004 fb45 	bl	800f4a8 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800ae1e:	782b      	ldrb	r3, [r5, #0]
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800ae20:	7831      	ldrb	r1, [r6, #0]
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800ae22:	f003 030f 	and.w	r3, r3, #15
 800ae26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae2e:	2500      	movs	r5, #0
 800ae30:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800ae34:	4620      	mov	r0, r4
 800ae36:	f004 fb37 	bl	800f4a8 <USBD_LL_CloseEP>
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae3a:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800ae3e:	7833      	ldrb	r3, [r6, #0]
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae40:	32b0      	adds	r2, #176	@ 0xb0
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800ae4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae52:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae54:	b182      	cbz	r2, 800ae78 <USBD_MSC_DeInit+0x68>
    MSC_BOT_DeInit(pdev);
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f8b8 	bl	800afcc <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae5c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800ae60:	33b0      	adds	r3, #176	@ 0xb0
 800ae62:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ae66:	f004 fb8f 	bl	800f588 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800ae6a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800ae6e:	33b0      	adds	r3, #176	@ 0xb0
 800ae70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800ae74:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800ae78:	2000      	movs	r0, #0
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	20000015 	.word	0x20000015
 800ae80:	20000016 	.word	0x20000016

0800ae84 <USBD_MSC_GetOtherSpeedCfgDesc>:
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	2181      	movs	r1, #129	@ 0x81
 800ae88:	4605      	mov	r5, r0
 800ae8a:	480b      	ldr	r0, [pc, #44]	@ (800aeb8 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800ae8c:	f001 f9f6 	bl	800c27c <USBD_GetEpDesc>
 800ae90:	2101      	movs	r1, #1
 800ae92:	4604      	mov	r4, r0
 800ae94:	4808      	ldr	r0, [pc, #32]	@ (800aeb8 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800ae96:	f001 f9f1 	bl	800c27c <USBD_GetEpDesc>
 800ae9a:	b11c      	cbz	r4, 800aea4 <USBD_MSC_GetOtherSpeedCfgDesc+0x20>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2240      	movs	r2, #64	@ 0x40
 800aea0:	7122      	strb	r2, [r4, #4]
 800aea2:	7163      	strb	r3, [r4, #5]
 800aea4:	b118      	cbz	r0, 800aeae <USBD_MSC_GetOtherSpeedCfgDesc+0x2a>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2240      	movs	r2, #64	@ 0x40
 800aeaa:	7102      	strb	r2, [r0, #4]
 800aeac:	7143      	strb	r3, [r0, #5]
 800aeae:	2320      	movs	r3, #32
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800aeb2:	802b      	strh	r3, [r5, #0]
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000024 	.word	0x20000024

0800aebc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800aebc:	4603      	mov	r3, r0
  if (fops == NULL)
 800aebe:	b139      	cbz	r1, 800aed0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800aec0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800aec4:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  return (uint8_t)USBD_OK;
 800aec8:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 800aeca:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 800aece:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800aed0:	2003      	movs	r0, #3
}
 800aed2:	4770      	bx	lr

0800aed4 <MSC_BOT_Abort>:
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aed8:	33b0      	adds	r3, #176	@ 0xb0
{
 800aeda:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aedc:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800aee0:	b185      	cbz	r5, 800af04 <MSC_BOT_Abort+0x30>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800aee2:	f895 321c 	ldrb.w	r3, [r5, #540]	@ 0x21c
 800aee6:	4604      	mov	r4, r0
 800aee8:	b923      	cbnz	r3, 800aef4 <MSC_BOT_Abort+0x20>
 800aeea:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800aeee:	b10b      	cbz	r3, 800aef4 <MSC_BOT_Abort+0x20>
      (hmsc->cbw.dDataLength != 0U) &&
 800aef0:	7a6b      	ldrb	r3, [r5, #9]
 800aef2:	b19b      	cbz	r3, 800af1c <MSC_BOT_Abort+0x48>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800aef4:	4e0c      	ldr	r6, [pc, #48]	@ (800af28 <MSC_BOT_Abort+0x54>)
 800aef6:	4620      	mov	r0, r4
 800aef8:	7831      	ldrb	r1, [r6, #0]
 800aefa:	f004 faed 	bl	800f4d8 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800aefe:	7a6b      	ldrb	r3, [r5, #9]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d000      	beq.n	800af06 <MSC_BOT_Abort+0x32>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
}
 800af04:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800af06:	7831      	ldrb	r1, [r6, #0]
 800af08:	4620      	mov	r0, r4
 800af0a:	f004 fae5 	bl	800f4d8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800af0e:	4b07      	ldr	r3, [pc, #28]	@ (800af2c <MSC_BOT_Abort+0x58>)
 800af10:	4620      	mov	r0, r4
 800af12:	7819      	ldrb	r1, [r3, #0]
}
 800af14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800af18:	f004 bade 	b.w	800f4d8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800af1c:	4b03      	ldr	r3, [pc, #12]	@ (800af2c <MSC_BOT_Abort+0x58>)
 800af1e:	7819      	ldrb	r1, [r3, #0]
 800af20:	f004 fada 	bl	800f4d8 <USBD_LL_StallEP>
 800af24:	e7e6      	b.n	800aef4 <MSC_BOT_Abort+0x20>
 800af26:	bf00      	nop
 800af28:	20000016 	.word	0x20000016
 800af2c:	20000015 	.word	0x20000015

0800af30 <MSC_BOT_Init>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af30:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800af34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 800af38:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af3a:	f8d3 52c0 	ldr.w	r5, [r3, #704]	@ 0x2c0
  if (hmsc == NULL)
 800af3e:	b1ed      	cbz	r5, 800af7c <MSC_BOT_Init+0x4c>
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800af40:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 800af42:	2000      	movs	r0, #0
 800af44:	8128      	strh	r0, [r5, #8]
  hmsc->scsi_sense_head = 0U;
 800af46:	f8a5 0260 	strh.w	r0, [r5, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800af4a:	f885 0262 	strb.w	r0, [r5, #610]	@ 0x262
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800af4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800af52:	4e0b      	ldr	r6, [pc, #44]	@ (800af80 <MSC_BOT_Init+0x50>)
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800af58:	7831      	ldrb	r1, [r6, #0]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f004 fab0 	bl	800f4c0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800af60:	4b08      	ldr	r3, [pc, #32]	@ (800af84 <MSC_BOT_Init+0x54>)
 800af62:	4620      	mov	r0, r4
 800af64:	7819      	ldrb	r1, [r3, #0]
 800af66:	f004 faab 	bl	800f4c0 <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800af6a:	7831      	ldrb	r1, [r6, #0]
 800af6c:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800af70:	4620      	mov	r0, r4
 800af72:	231f      	movs	r3, #31
}
 800af74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800af78:	f004 baf2 	b.w	800f560 <USBD_LL_PrepareReceive>
}
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
 800af7e:	bf00      	nop
 800af80:	20000015 	.word	0x20000015
 800af84:	20000016 	.word	0x20000016

0800af88 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af88:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800af8c:	33b0      	adds	r3, #176	@ 0xb0
{
 800af8e:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af90:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800af94:	b1ad      	cbz	r5, 800afc2 <MSC_BOT_Reset+0x3a>
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800af96:	4b0b      	ldr	r3, [pc, #44]	@ (800afc4 <MSC_BOT_Reset+0x3c>)
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800af98:	4e0b      	ldr	r6, [pc, #44]	@ (800afc8 <MSC_BOT_Reset+0x40>)
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800af9a:	7819      	ldrb	r1, [r3, #0]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800af9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afa0:	4604      	mov	r4, r0
 800afa2:	812a      	strh	r2, [r5, #8]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800afa4:	f004 faa4 	bl	800f4f0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800afa8:	7831      	ldrb	r1, [r6, #0]
 800afaa:	4620      	mov	r0, r4
 800afac:	f004 faa0 	bl	800f4f0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800afb0:	7831      	ldrb	r1, [r6, #0]
 800afb2:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800afb6:	4620      	mov	r0, r4
 800afb8:	231f      	movs	r3, #31
}
 800afba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800afbe:	f004 bacf 	b.w	800f560 <USBD_LL_PrepareReceive>
}
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	20000016 	.word	0x20000016
 800afc8:	20000015 	.word	0x20000015

0800afcc <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afcc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800afd0:	33b0      	adds	r3, #176	@ 0xb0
 800afd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 800afd6:	b10b      	cbz	r3, 800afdc <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 800afd8:	2200      	movs	r2, #0
 800afda:	721a      	strb	r2, [r3, #8]
}
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop

0800afe0 <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800afe4:	33b0      	adds	r3, #176	@ 0xb0
{
 800afe6:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800afec:	b334      	cbz	r4, 800b03c <MSC_BOT_DataIn+0x5c>
  switch (hmsc->bot_state)
 800afee:	7a23      	ldrb	r3, [r4, #8]
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	4605      	mov	r5, r0
 800aff4:	d01a      	beq.n	800b02c <MSC_BOT_DataIn+0x4c>
 800aff6:	3b03      	subs	r3, #3
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d81f      	bhi.n	800b03c <MSC_BOT_DataIn+0x5c>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800affc:	4a1b      	ldr	r2, [pc, #108]	@ (800b06c <MSC_BOT_DataIn+0x8c>)
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800affe:	491c      	ldr	r1, [pc, #112]	@ (800b070 <MSC_BOT_DataIn+0x90>)
 800b000:	f8c4 1230 	str.w	r1, [r4, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b004:	2300      	movs	r3, #0
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b006:	7811      	ldrb	r1, [r2, #0]
  hmsc->csw.bStatus = CSW_Status;
 800b008:	f884 323c 	strb.w	r3, [r4, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b00c:	7223      	strb	r3, [r4, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b00e:	f504 720c 	add.w	r2, r4, #560	@ 0x230
 800b012:	230d      	movs	r3, #13
 800b014:	f004 fa98 	bl	800f548 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b018:	4a16      	ldr	r2, [pc, #88]	@ (800b074 <MSC_BOT_DataIn+0x94>)
 800b01a:	4628      	mov	r0, r5
 800b01c:	7811      	ldrb	r1, [r2, #0]
 800b01e:	231f      	movs	r3, #31
 800b020:	f504 7204 	add.w	r2, r4, #528	@ 0x210
}
 800b024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b028:	f004 ba9a 	b.w	800f560 <USBD_LL_PrepareReceive>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b02c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b030:	f204 221f 	addw	r2, r4, #543	@ 0x21f
 800b034:	f000 f9ec 	bl	800b410 <SCSI_ProcessCmd>
 800b038:	2800      	cmp	r0, #0
 800b03a:	db00      	blt.n	800b03e <MSC_BOT_DataIn+0x5e>
}
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b03e:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800b042:	33b0      	adds	r3, #176	@ 0xb0
 800b044:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800b048:	2c00      	cmp	r4, #0
 800b04a:	d0f7      	beq.n	800b03c <MSC_BOT_DataIn+0x5c>
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b04c:	4a08      	ldr	r2, [pc, #32]	@ (800b070 <MSC_BOT_DataIn+0x90>)
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b04e:	4907      	ldr	r1, [pc, #28]	@ (800b06c <MSC_BOT_DataIn+0x8c>)
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b050:	f8c4 2230 	str.w	r2, [r4, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b054:	2301      	movs	r3, #1
  hmsc->bot_state = USBD_BOT_IDLE;
 800b056:	2200      	movs	r2, #0
  hmsc->csw.bStatus = CSW_Status;
 800b058:	f884 323c 	strb.w	r3, [r4, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b05c:	7222      	strb	r2, [r4, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b05e:	7809      	ldrb	r1, [r1, #0]
 800b060:	230d      	movs	r3, #13
 800b062:	f504 720c 	add.w	r2, r4, #560	@ 0x230
 800b066:	4628      	mov	r0, r5
 800b068:	e7d4      	b.n	800b014 <MSC_BOT_DataIn+0x34>
 800b06a:	bf00      	nop
 800b06c:	20000016 	.word	0x20000016
 800b070:	53425355 	.word	0x53425355
 800b074:	20000015 	.word	0x20000015

0800b078 <MSC_BOT_SendCSW>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b078:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800b07c:	33b0      	adds	r3, #176	@ 0xb0
{
 800b07e:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b080:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800b084:	b1cd      	cbz	r5, 800b0ba <MSC_BOT_SendCSW+0x42>
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b086:	4b0d      	ldr	r3, [pc, #52]	@ (800b0bc <MSC_BOT_SendCSW+0x44>)
 800b088:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b08c:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c0 <MSC_BOT_SendCSW+0x48>)
 800b08e:	460a      	mov	r2, r1
  hmsc->bot_state = USBD_BOT_IDLE;
 800b090:	2100      	movs	r1, #0
 800b092:	7229      	strb	r1, [r5, #8]
  hmsc->csw.bStatus = CSW_Status;
 800b094:	f885 223c 	strb.w	r2, [r5, #572]	@ 0x23c
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b098:	7819      	ldrb	r1, [r3, #0]
 800b09a:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 800b09e:	230d      	movs	r3, #13
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	f004 fa51 	bl	800f548 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b0a6:	4a07      	ldr	r2, [pc, #28]	@ (800b0c4 <MSC_BOT_SendCSW+0x4c>)
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	7811      	ldrb	r1, [r2, #0]
 800b0ac:	231f      	movs	r3, #31
 800b0ae:	f505 7204 	add.w	r2, r5, #528	@ 0x210
}
 800b0b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b0b6:	f004 ba53 	b.w	800f560 <USBD_LL_PrepareReceive>
}
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	53425355 	.word	0x53425355
 800b0c0:	20000016 	.word	0x20000016
 800b0c4:	20000015 	.word	0x20000015

0800b0c8 <MSC_BOT_DataOut>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0c8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800b0cc:	33b0      	adds	r3, #176	@ 0xb0
{
 800b0ce:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0d0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800b0d4:	b125      	cbz	r5, 800b0e0 <MSC_BOT_DataOut+0x18>
  switch (hmsc->bot_state)
 800b0d6:	7a2e      	ldrb	r6, [r5, #8]
 800b0d8:	4604      	mov	r4, r0
 800b0da:	b356      	cbz	r6, 800b132 <MSC_BOT_DataOut+0x6a>
 800b0dc:	2e01      	cmp	r6, #1
 800b0de:	d000      	beq.n	800b0e2 <MSC_BOT_DataOut+0x1a>
}
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b0e2:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800b0e6:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800b0ea:	f000 f991 	bl	800b410 <SCSI_ProcessCmd>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	daf6      	bge.n	800b0e0 <MSC_BOT_DataOut+0x18>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800b0f6:	33b0      	adds	r3, #176	@ 0xb0
 800b0f8:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  if (hmsc == NULL)
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	d0ef      	beq.n	800b0e0 <MSC_BOT_DataOut+0x18>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b100:	4a3f      	ldr	r2, [pc, #252]	@ (800b200 <MSC_BOT_DataOut+0x138>)
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b102:	4b40      	ldr	r3, [pc, #256]	@ (800b204 <MSC_BOT_DataOut+0x13c>)
 800b104:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  hmsc->bot_state = USBD_BOT_IDLE;
 800b108:	2300      	movs	r3, #0
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b10a:	7811      	ldrb	r1, [r2, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800b10c:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b10e:	f505 720c 	add.w	r2, r5, #560	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b112:	f885 623c 	strb.w	r6, [r5, #572]	@ 0x23c
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b116:	230d      	movs	r3, #13
 800b118:	4620      	mov	r0, r4
 800b11a:	f004 fa15 	bl	800f548 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b11e:	4a3a      	ldr	r2, [pc, #232]	@ (800b208 <MSC_BOT_DataOut+0x140>)
 800b120:	4620      	mov	r0, r4
 800b122:	7811      	ldrb	r1, [r2, #0]
 800b124:	231f      	movs	r3, #31
 800b126:	f505 7204 	add.w	r2, r5, #528	@ 0x210
}
 800b12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b12e:	f004 ba17 	b.w	800f560 <USBD_LL_PrepareReceive>
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b132:	e9d5 3285 	ldrd	r3, r2, [r5, #532]	@ 0x214
 800b136:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b13a:	4b33      	ldr	r3, [pc, #204]	@ (800b208 <MSC_BOT_DataOut+0x140>)
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b13c:	f8c5 2238 	str.w	r2, [r5, #568]	@ 0x238
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b140:	7819      	ldrb	r1, [r3, #0]
 800b142:	f004 fa19 	bl	800f578 <USBD_LL_GetRxDataSize>
 800b146:	281f      	cmp	r0, #31
 800b148:	d00d      	beq.n	800b166 <MSC_BOT_DataOut+0x9e>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b14a:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b14e:	4620      	mov	r0, r4
 800b150:	2320      	movs	r3, #32
 800b152:	2205      	movs	r2, #5
 800b154:	f000 feb2 	bl	800bebc <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b158:	2302      	movs	r3, #2
 800b15a:	726b      	strb	r3, [r5, #9]
    MSC_BOT_Abort(pdev);
 800b15c:	4620      	mov	r0, r4
}
 800b15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MSC_BOT_Abort(pdev);
 800b162:	f7ff beb7 	b.w	800aed4 <MSC_BOT_Abort>
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b166:	4b29      	ldr	r3, [pc, #164]	@ (800b20c <MSC_BOT_DataOut+0x144>)
 800b168:	f8d5 2210 	ldr.w	r2, [r5, #528]	@ 0x210
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b16c:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b170:	429a      	cmp	r2, r3
 800b172:	d1ec      	bne.n	800b14e <MSC_BOT_DataOut+0x86>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b174:	2901      	cmp	r1, #1
 800b176:	d8ea      	bhi.n	800b14e <MSC_BOT_DataOut+0x86>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b178:	f895 321e 	ldrb.w	r3, [r5, #542]	@ 0x21e
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2b0f      	cmp	r3, #15
 800b180:	d8e5      	bhi.n	800b14e <MSC_BOT_DataOut+0x86>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b182:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800b186:	4620      	mov	r0, r4
 800b188:	f000 f942 	bl	800b410 <SCSI_ProcessCmd>
 800b18c:	2800      	cmp	r0, #0
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b18e:	7a2b      	ldrb	r3, [r5, #8]
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b190:	db24      	blt.n	800b1dc <MSC_BOT_DataOut+0x114>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b192:	3b01      	subs	r3, #1
 800b194:	2b02      	cmp	r3, #2
 800b196:	d9a3      	bls.n	800b0e0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 800b198:	68e9      	ldr	r1, [r5, #12]
 800b19a:	b331      	cbz	r1, 800b1ea <MSC_BOT_DataOut+0x122>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b19c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800b1a0:	33b0      	adds	r3, #176	@ 0xb0
 800b1a2:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
  if (hmsc == NULL)
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d09a      	beq.n	800b0e0 <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 800b1aa:	f8d6 3218 	ldr.w	r3, [r6, #536]	@ 0x218
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1ae:	4620      	mov	r0, r4
  hmsc->csw.dDataResidue -= len;
 800b1b0:	f8d6 4238 	ldr.w	r4, [r6, #568]	@ 0x238
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1b4:	428b      	cmp	r3, r1
  hmsc->csw.dDataResidue -= len;
 800b1b6:	eba4 0401 	sub.w	r4, r4, r1
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1ba:	bf28      	it	cs
 800b1bc:	460b      	movcs	r3, r1
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b1be:	2100      	movs	r1, #0
 800b1c0:	f886 123c 	strb.w	r1, [r6, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	7231      	strb	r1, [r6, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1c8:	490d      	ldr	r1, [pc, #52]	@ (800b200 <MSC_BOT_DataOut+0x138>)
  hmsc->csw.dDataResidue -= len;
 800b1ca:	f8c6 4238 	str.w	r4, [r6, #568]	@ 0x238
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1ce:	f105 0210 	add.w	r2, r5, #16
 800b1d2:	7809      	ldrb	r1, [r1, #0]
}
 800b1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b1d8:	f004 b9b6 	b.w	800f548 <USBD_LL_Transmit>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b1dc:	2b05      	cmp	r3, #5
 800b1de:	d009      	beq.n	800b1f4 <MSC_BOT_DataOut+0x12c>
        MSC_BOT_Abort(pdev);
 800b1e0:	4620      	mov	r0, r4
}
 800b1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 800b1e6:	f7ff be75 	b.w	800aed4 <MSC_BOT_Abort>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b1ea:	4620      	mov	r0, r4
}
 800b1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b1f0:	f7ff bf42 	b.w	800b078 <MSC_BOT_SendCSW>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	2101      	movs	r1, #1
}
 800b1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b1fc:	f7ff bf3c 	b.w	800b078 <MSC_BOT_SendCSW>
 800b200:	20000016 	.word	0x20000016
 800b204:	53425355 	.word	0x53425355
 800b208:	20000015 	.word	0x20000015
 800b20c:	43425355 	.word	0x43425355

0800b210 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b210:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800b214:	33b0      	adds	r3, #176	@ 0xb0
{
 800b216:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b218:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b21c:	b305      	cbz	r5, 800b260 <MSC_BOT_CplClrFeature+0x50>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b21e:	7a6b      	ldrb	r3, [r5, #9]
 800b220:	2b02      	cmp	r3, #2
 800b222:	4604      	mov	r4, r0
 800b224:	d01d      	beq.n	800b262 <MSC_BOT_CplClrFeature+0x52>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b226:	060a      	lsls	r2, r1, #24
 800b228:	d51a      	bpl.n	800b260 <MSC_BOT_CplClrFeature+0x50>
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d018      	beq.n	800b260 <MSC_BOT_CplClrFeature+0x50>
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b22e:	4b12      	ldr	r3, [pc, #72]	@ (800b278 <MSC_BOT_CplClrFeature+0x68>)
 800b230:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b234:	4a11      	ldr	r2, [pc, #68]	@ (800b27c <MSC_BOT_CplClrFeature+0x6c>)
  hmsc->csw.bStatus = CSW_Status;
 800b236:	2301      	movs	r3, #1
 800b238:	f885 323c 	strb.w	r3, [r5, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b23c:	2300      	movs	r3, #0
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b23e:	7811      	ldrb	r1, [r2, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800b240:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b242:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 800b246:	230d      	movs	r3, #13
 800b248:	f004 f97e 	bl	800f548 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b24c:	4a0c      	ldr	r2, [pc, #48]	@ (800b280 <MSC_BOT_CplClrFeature+0x70>)
 800b24e:	4620      	mov	r0, r4
 800b250:	7811      	ldrb	r1, [r2, #0]
 800b252:	231f      	movs	r3, #31
 800b254:	f505 7204 	add.w	r2, r5, #528	@ 0x210
  }
  else
  {
    return;
  }
}
 800b258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b25c:	f004 b980 	b.w	800f560 <USBD_LL_PrepareReceive>
}
 800b260:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b262:	4b06      	ldr	r3, [pc, #24]	@ (800b27c <MSC_BOT_CplClrFeature+0x6c>)
 800b264:	7819      	ldrb	r1, [r3, #0]
 800b266:	f004 f937 	bl	800f4d8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b26a:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <MSC_BOT_CplClrFeature+0x70>)
 800b26c:	4620      	mov	r0, r4
 800b26e:	7819      	ldrb	r1, [r3, #0]
}
 800b270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b274:	f004 b930 	b.w	800f4d8 <USBD_LL_StallEP>
 800b278:	53425355 	.word	0x53425355
 800b27c:	20000016 	.word	0x20000016
 800b280:	20000015 	.word	0x20000015

0800b284 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b284:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800b288:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b290:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
{
 800b294:	4606      	mov	r6, r0
  uint32_t len;

  if (hmsc == NULL)
 800b296:	2c00      	cmp	r4, #0
 800b298:	d04e      	beq.n	800b338 <SCSI_ProcessRead+0xb4>
  {
    return -1;
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b29a:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b29e:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2a2:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b2a6:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800b2aa:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2ae:	f104 0810 	add.w	r8, r4, #16
  len = MIN(len, MSC_MEDIA_PACKET);
 800b2b2:	bf28      	it	cs
 800b2b4:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2b8:	6917      	ldr	r7, [r2, #16]
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b2ba:	fbb5 f3f3 	udiv	r3, r5, r3
 800b2be:	4608      	mov	r0, r1
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b2c0:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	47b8      	blx	r7
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	db1c      	blt.n	800b308 <SCSI_ProcessRead+0x84>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
    return -1;
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b340 <SCSI_ProcessRead+0xbc>)
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	7819      	ldrb	r1, [r3, #0]
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f004 f936 	bl	800f548 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b2dc:	e9d4 139b 	ldrd	r1, r3, [r4, #620]	@ 0x26c

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b2e0:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b2e4:	f8b4 0264 	ldrh.w	r0, [r4, #612]	@ 0x264
  hmsc->csw.dDataResidue -= len;
 800b2e8:	1b52      	subs	r2, r2, r5
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b2ea:	fbb5 f5f0 	udiv	r5, r5, r0
 800b2ee:	4429      	add	r1, r5
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b2f0:	1b5b      	subs	r3, r3, r5
 800b2f2:	e9c4 139b 	strd	r1, r3, [r4, #620]	@ 0x26c
  hmsc->csw.dDataResidue -= len;
 800b2f6:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b2fa:	b113      	cbz	r3, 800b302 <SCSI_ProcessRead+0x7e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
  }

  return 0;
 800b2fc:	2000      	movs	r0, #0
}
 800b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b302:	2303      	movs	r3, #3
 800b304:	7223      	strb	r3, [r4, #8]
 800b306:	e7f9      	b.n	800b2fc <SCSI_ProcessRead+0x78>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b308:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b30c:	33b0      	adds	r3, #176	@ 0xb0
 800b30e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
  if (hmsc == NULL)
 800b312:	b18a      	cbz	r2, 800b338 <SCSI_ProcessRead+0xb4>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b314:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800b318:	f103 0148 	add.w	r1, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800b31c:	3301      	adds	r3, #1
 800b31e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b320:	2404      	movs	r4, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b322:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b326:	42a3      	cmp	r3, r4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b328:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
    hmsc->scsi_sense_tail = 0U;
 800b32c:	bf08      	it	eq
 800b32e:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b330:	2111      	movs	r1, #17
 800b332:	8081      	strh	r1, [r0, #4]
    hmsc->scsi_sense_tail = 0U;
 800b334:	f882 3261 	strb.w	r3, [r2, #609]	@ 0x261
    return -1;
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e7df      	b.n	800b2fe <SCSI_ProcessRead+0x7a>
 800b33e:	bf00      	nop
 800b340:	20000016 	.word	0x20000016

0800b344 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b344:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800b348:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b350:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
{
 800b354:	4606      	mov	r6, r0
  uint32_t len;

  if (hmsc == NULL)
 800b356:	2c00      	cmp	r4, #0
 800b358:	d055      	beq.n	800b406 <SCSI_ProcessWrite+0xc2>
  {
    return -1;
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b35a:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b35e:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b362:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b366:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800b36a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b36e:	f104 0810 	add.w	r8, r4, #16
  len = MIN(len, MSC_MEDIA_PACKET);
 800b372:	bf28      	it	cs
 800b374:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b378:	6957      	ldr	r7, [r2, #20]
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b37a:	fbb5 f3f3 	udiv	r3, r5, r3
 800b37e:	4608      	mov	r0, r1
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b380:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b384:	b29b      	uxth	r3, r3
 800b386:	4641      	mov	r1, r8
 800b388:	47b8      	blx	r7
 800b38a:	2800      	cmp	r0, #0
 800b38c:	db23      	blt.n	800b3d6 <SCSI_ProcessWrite+0x92>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b38e:	e9d4 219b 	ldrd	r2, r1, [r4, #620]	@ 0x26c

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b392:	f8d4 0238 	ldr.w	r0, [r4, #568]	@ 0x238
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b396:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
  hmsc->csw.dDataResidue -= len;
 800b39a:	1b40      	subs	r0, r0, r5
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b39c:	fbb5 f5f3 	udiv	r5, r5, r3
 800b3a0:	442a      	add	r2, r5
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b3a2:	1b49      	subs	r1, r1, r5
 800b3a4:	e9c4 219b 	strd	r2, r1, [r4, #620]	@ 0x26c
  hmsc->csw.dDataResidue -= len;
 800b3a8:	f8c4 0238 	str.w	r0, [r4, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b3ac:	b179      	cbz	r1, 800b3ce <SCSI_ProcessWrite+0x8a>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b3ae:	fb01 f303 	mul.w	r3, r1, r3

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b3b2:	4a16      	ldr	r2, [pc, #88]	@ (800b40c <SCSI_ProcessWrite+0xc8>)
 800b3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3b8:	7811      	ldrb	r1, [r2, #0]
 800b3ba:	bf28      	it	cs
 800b3bc:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f004 f8cc 	bl	800f560 <USBD_LL_PrepareReceive>
  }

  return 0;
 800b3c8:	2000      	movs	r0, #0
}
 800b3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff fe52 	bl	800b078 <MSC_BOT_SendCSW>
 800b3d4:	e7f8      	b.n	800b3c8 <SCSI_ProcessWrite+0x84>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d6:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b3da:	33b0      	adds	r3, #176	@ 0xb0
 800b3dc:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
  if (hmsc == NULL)
 800b3e0:	b18a      	cbz	r2, 800b406 <SCSI_ProcessWrite+0xc2>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b3e2:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800b3e6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b3ee:	2404      	movs	r4, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b3f0:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b3f4:	42a3      	cmp	r3, r4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b3f6:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
    hmsc->scsi_sense_tail = 0U;
 800b3fa:	bf08      	it	eq
 800b3fc:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b3fe:	2103      	movs	r1, #3
 800b400:	8081      	strh	r1, [r0, #4]
    hmsc->scsi_sense_tail = 0U;
 800b402:	f882 3261 	strb.w	r3, [r2, #609]	@ 0x261
    return -1;
 800b406:	f04f 30ff 	mov.w	r0, #4294967295
 800b40a:	e7de      	b.n	800b3ca <SCSI_ProcessWrite+0x86>
 800b40c:	20000015 	.word	0x20000015

0800b410 <SCSI_ProcessCmd>:
{
 800b410:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800b414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b418:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800b41c:	b083      	sub	sp, #12
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b41e:	f8dc 42c0 	ldr.w	r4, [ip, #704]	@ 0x2c0
  if (hmsc == NULL)
 800b422:	2c00      	cmp	r4, #0
 800b424:	f000 810d 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  switch (cmd[0])
 800b428:	7813      	ldrb	r3, [r2, #0]
 800b42a:	2b5a      	cmp	r3, #90	@ 0x5a
 800b42c:	4605      	mov	r5, r0
 800b42e:	460f      	mov	r7, r1
 800b430:	4616      	mov	r6, r2
 800b432:	d85f      	bhi.n	800b4f4 <SCSI_ProcessCmd+0xe4>
 800b434:	2b5a      	cmp	r3, #90	@ 0x5a
 800b436:	f200 80f1 	bhi.w	800b61c <SCSI_ProcessCmd+0x20c>
 800b43a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b43e:	02fc      	.short	0x02fc
 800b440:	00ef00ef 	.word	0x00ef00ef
 800b444:	00ef0310 	.word	0x00ef0310
 800b448:	00ef00ef 	.word	0x00ef00ef
 800b44c:	00ef00ef 	.word	0x00ef00ef
 800b450:	00ef00ef 	.word	0x00ef00ef
 800b454:	00ef00ef 	.word	0x00ef00ef
 800b458:	00ef00ef 	.word	0x00ef00ef
 800b45c:	00ef00ef 	.word	0x00ef00ef
 800b460:	012400ef 	.word	0x012400ef
 800b464:	00ef00ef 	.word	0x00ef00ef
 800b468:	00ef00ef 	.word	0x00ef00ef
 800b46c:	00ef00ef 	.word	0x00ef00ef
 800b470:	013c00ef 	.word	0x013c00ef
 800b474:	00ef0110 	.word	0x00ef0110
 800b478:	010700ef 	.word	0x010700ef
 800b47c:	00ef00ef 	.word	0x00ef00ef
 800b480:	00ef00ef 	.word	0x00ef00ef
 800b484:	00ef0165 	.word	0x00ef0165
 800b488:	00ef018b 	.word	0x00ef018b
 800b48c:	01b400ef 	.word	0x01b400ef
 800b490:	024300ef 	.word	0x024300ef
 800b494:	00ef00ef 	.word	0x00ef00ef
 800b498:	00ef00ef 	.word	0x00ef00ef
 800b49c:	00ef029a 	.word	0x00ef029a
 800b4a0:	00ef00ef 	.word	0x00ef00ef
 800b4a4:	00ef00ef 	.word	0x00ef00ef
 800b4a8:	00ef00ef 	.word	0x00ef00ef
 800b4ac:	00ef00ef 	.word	0x00ef00ef
 800b4b0:	00ef00ef 	.word	0x00ef00ef
 800b4b4:	00ef00ef 	.word	0x00ef00ef
 800b4b8:	00ef00ef 	.word	0x00ef00ef
 800b4bc:	00ef00ef 	.word	0x00ef00ef
 800b4c0:	00ef00ef 	.word	0x00ef00ef
 800b4c4:	00ef00ef 	.word	0x00ef00ef
 800b4c8:	00ef00ef 	.word	0x00ef00ef
 800b4cc:	00ef00ef 	.word	0x00ef00ef
 800b4d0:	00ef00ef 	.word	0x00ef00ef
 800b4d4:	00ef00ef 	.word	0x00ef00ef
 800b4d8:	00ef00ef 	.word	0x00ef00ef
 800b4dc:	00ef00ef 	.word	0x00ef00ef
 800b4e0:	00ef00ef 	.word	0x00ef00ef
 800b4e4:	00ef00ef 	.word	0x00ef00ef
 800b4e8:	00ef00ef 	.word	0x00ef00ef
 800b4ec:	00ef00ef 	.word	0x00ef00ef
 800b4f0:	02af00ef 	.word	0x02af00ef
 800b4f4:	2ba8      	cmp	r3, #168	@ 0xa8
 800b4f6:	f000 81a1 	beq.w	800b83c <SCSI_ProcessCmd+0x42c>
 800b4fa:	2baa      	cmp	r3, #170	@ 0xaa
 800b4fc:	d155      	bne.n	800b5aa <SCSI_ProcessCmd+0x19a>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b4fe:	7a23      	ldrb	r3, [r4, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 8310 	bne.w	800bb26 <SCSI_ProcessCmd+0x716>
    if (hmsc->cbw.dDataLength == 0U)
 800b506:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	f000 8499 	beq.w	800be42 <SCSI_ProcessCmd+0xa32>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b510:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b514:	2a00      	cmp	r2, #0
 800b516:	f2c0 8356 	blt.w	800bbc6 <SCSI_ProcessCmd+0x7b6>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b51a:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b51e:	4608      	mov	r0, r1
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	4798      	blx	r3
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b524:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b528:	2800      	cmp	r0, #0
 800b52a:	f040 8473 	bne.w	800be14 <SCSI_ProcessCmd+0xa04>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b52e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b532:	4638      	mov	r0, r7
 800b534:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	4798      	blx	r3
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f040 8441 	bne.w	800bdc4 <SCSI_ProcessCmd+0x9b4>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b542:	f8d6 3002 	ldr.w	r3, [r6, #2]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b546:	f8d5 12d4 	ldr.w	r1, [r5, #724]	@ 0x2d4
 800b54a:	ba1b      	rev	r3, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b54c:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b550:	31b0      	adds	r1, #176	@ 0xb0
 800b552:	f8d6 2006 	ldr.w	r2, [r6, #6]
 800b556:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b55a:	ba12      	rev	r2, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b55c:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  if (hmsc == NULL)
 800b560:	2900      	cmp	r1, #0
 800b562:	d06e      	beq.n	800b642 <SCSI_ProcessCmd+0x232>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b564:	f8d1 0268 	ldr.w	r0, [r1, #616]	@ 0x268
 800b568:	4413      	add	r3, r2
 800b56a:	4283      	cmp	r3, r0
 800b56c:	f200 834f 	bhi.w	800bc0e <SCSI_ProcessCmd+0x7fe>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b570:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b574:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b578:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b57c:	4293      	cmp	r3, r2
 800b57e:	f000 81e9 	beq.w	800b954 <SCSI_ProcessCmd+0x544>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b582:	f891 3261 	ldrb.w	r3, [r1, #609]	@ 0x261
 800b586:	f103 0248 	add.w	r2, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800b58a:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b58c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b590:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800b592:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b594:	f801 4032 	strb.w	r4, [r1, r2, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b598:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b59a:	f04f 0220 	mov.w	r2, #32
 800b59e:	8082      	strh	r2, [r0, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b5a0:	f000 8346 	beq.w	800bc30 <SCSI_ProcessCmd+0x820>
    hmsc->scsi_sense_tail = 0U;
 800b5a4:	f881 3261 	strb.w	r3, [r1, #609]	@ 0x261
 800b5a8:	e04b      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  switch (cmd[0])
 800b5aa:	2b9e      	cmp	r3, #158	@ 0x9e
 800b5ac:	d136      	bne.n	800b61c <SCSI_ProcessCmd+0x20c>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b5ae:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800b5ba:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800b5be:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f040 82b6 	bne.w	800bb34 <SCSI_ProcessCmd+0x724>
 800b5c8:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	f000 82b1 	beq.w	800bb34 <SCSI_ProcessCmd+0x724>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b5d2:	f8d6 300a 	ldr.w	r3, [r6, #10]
 800b5d6:	ba1a      	rev	r2, r3
 800b5d8:	60e2      	str	r2, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b5da:	b11b      	cbz	r3, 800b5e4 <SCSI_ProcessCmd+0x1d4>
    hmsc->bot_data[idx] = 0U;
 800b5dc:	f104 0010 	add.w	r0, r4, #16
 800b5e0:	f004 fa6c 	bl	800fabc <memset>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b5e4:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	0e19      	lsrs	r1, r3, #24
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f361 0207 	bfi	r2, r1, #0, #8
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b5f2:	0c19      	lsrs	r1, r3, #16
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b5f4:	f361 220f 	bfi	r2, r1, #8, #8
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b5f8:	0a19      	lsrs	r1, r3, #8
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b5fa:	f361 4217 	bfi	r2, r1, #16, #8
 800b5fe:	f8b4 1264 	ldrh.w	r1, [r4, #612]	@ 0x264
 800b602:	f363 621f 	bfi	r2, r3, #24, #8
 800b606:	ba4b      	rev16	r3, r1
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b608:	8363      	strh	r3, [r4, #26]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b60a:	2300      	movs	r3, #0
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b60c:	6162      	str	r2, [r4, #20]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b60e:	8323      	strh	r3, [r4, #24]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b610:	f8d6 300a 	ldr.w	r3, [r6, #10]
 800b614:	ba1b      	rev	r3, r3
 800b616:	60e3      	str	r3, [r4, #12]
  return 0;
 800b618:	2000      	movs	r0, #0
 800b61a:	e014      	b.n	800b646 <SCSI_ProcessCmd+0x236>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b61c:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
  hmsc->scsi_sense_tail++;
 800b620:	1c53      	adds	r3, r2, #1
 800b622:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b624:	3248      	adds	r2, #72	@ 0x48
 800b626:	2005      	movs	r0, #5
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b628:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    hmsc->scsi_sense_tail = 0U;
 800b62c:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b62e:	f804 0032 	strb.w	r0, [r4, r2, lsl #3]
    hmsc->scsi_sense_tail = 0U;
 800b632:	bf08      	it	eq
 800b634:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b636:	2020      	movs	r0, #32
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b638:	2202      	movs	r2, #2
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b63a:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b63c:	f884 3261 	strb.w	r3, [r4, #609]	@ 0x261
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b640:	7262      	strb	r2, [r4, #9]
    return -1;
 800b642:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b646:	b003      	add	sp, #12
 800b648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (params[4] == 0U)
 800b64c:	7933      	ldrb	r3, [r6, #4]
  hmsc->bot_data_length = 0U;
 800b64e:	2200      	movs	r2, #0
  if (params[4] == 0U)
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	bf18      	it	ne
 800b654:	2301      	movne	r3, #1
 800b656:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 800b65a:	60e2      	str	r2, [r4, #12]
      break;
 800b65c:	e7dc      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b65e:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b662:	7933      	ldrb	r3, [r6, #4]
 800b664:	2a01      	cmp	r2, #1
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	f000 8237 	beq.w	800badc <SCSI_ProcessCmd+0x6cc>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b66e:	2b01      	cmp	r3, #1
 800b670:	f000 8239 	beq.w	800bae6 <SCSI_ProcessCmd+0x6d6>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b674:	2b02      	cmp	r3, #2
 800b676:	f000 8237 	beq.w	800bae8 <SCSI_ProcessCmd+0x6d8>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	f000 8233 	beq.w	800bae6 <SCSI_ProcessCmd+0x6d6>
  hmsc->bot_data_length = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	60e3      	str	r3, [r4, #12]
  return 0;
 800b684:	e7c8      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if (hmsc->cbw.dDataLength == 0U)
 800b686:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 829b 	beq.w	800bbc6 <SCSI_ProcessCmd+0x7b6>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b690:	7873      	ldrb	r3, [r6, #1]
 800b692:	07db      	lsls	r3, r3, #31
 800b694:	f140 822b 	bpl.w	800baee <SCSI_ProcessCmd+0x6de>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b698:	78b3      	ldrb	r3, [r6, #2]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 8266 	beq.w	800bb6c <SCSI_ProcessCmd+0x75c>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b6a0:	2b80      	cmp	r3, #128	@ 0x80
 800b6a2:	f040 827d 	bne.w	800bba0 <SCSI_ProcessCmd+0x790>
  hmsc->bot_data_length = len;

  while (len != 0U)
  {
    len--;
    hmsc->bot_data[len] = pBuff[len];
 800b6a6:	4bba      	ldr	r3, [pc, #744]	@ (800b990 <SCSI_ProcessCmd+0x580>)
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6162      	str	r2, [r4, #20]
  hmsc->bot_data_length = len;
 800b6ae:	2108      	movs	r1, #8
    hmsc->bot_data[len] = pBuff[len];
 800b6b0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b6b4:	e7b0      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b6b6:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	4798      	blx	r3
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	f040 81ff 	bne.w	800bac4 <SCSI_ProcessCmd+0x6b4>
  if (params[4] <= len)
 800b6c6:	7932      	ldrb	r2, [r6, #4]
 800b6c8:	2a04      	cmp	r2, #4
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	bf28      	it	cs
 800b6ce:	2304      	movcs	r3, #4
  hmsc->bot_data_length = len;
 800b6d0:	60e3      	str	r3, [r4, #12]
  while (len != 0U)
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	d0a0      	beq.n	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b6d6:	1e5a      	subs	r2, r3, #1
 800b6d8:	b292      	uxth	r2, r2
    hmsc->bot_data[len] = pBuff[len];
 800b6da:	49ae      	ldr	r1, [pc, #696]	@ (800b994 <SCSI_ProcessCmd+0x584>)
 800b6dc:	18a0      	adds	r0, r4, r2
 800b6de:	5c8d      	ldrb	r5, [r1, r2]
 800b6e0:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	d098      	beq.n	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b6e6:	1e9a      	subs	r2, r3, #2
 800b6e8:	b292      	uxth	r2, r2
    hmsc->bot_data[len] = pBuff[len];
 800b6ea:	18a0      	adds	r0, r4, r2
 800b6ec:	5c8d      	ldrb	r5, [r1, r2]
 800b6ee:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	d091      	beq.n	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b6f4:	3b03      	subs	r3, #3
 800b6f6:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pBuff[len];
 800b6f8:	18e2      	adds	r2, r4, r3
 800b6fa:	5cc8      	ldrb	r0, [r1, r3]
 800b6fc:	7410      	strb	r0, [r2, #16]
  while (len != 0U)
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d08a      	beq.n	800b618 <SCSI_ProcessCmd+0x208>
    hmsc->bot_data[len] = pBuff[len];
 800b702:	780b      	ldrb	r3, [r1, #0]
 800b704:	7423      	strb	r3, [r4, #16]
  while (len != 0U)
 800b706:	e787      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b708:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b70c:	4608      	mov	r0, r1
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f10d 0202 	add.w	r2, sp, #2
 800b714:	a901      	add	r1, sp, #4
 800b716:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b718:	2800      	cmp	r0, #0
 800b71a:	f040 820b 	bne.w	800bb34 <SCSI_ProcessCmd+0x724>
 800b71e:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b722:	2b02      	cmp	r3, #2
 800b724:	f000 8206 	beq.w	800bb34 <SCSI_ProcessCmd+0x724>
    hmsc->bot_data[i] = 0U;
 800b728:	6120      	str	r0, [r4, #16]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b72a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b72e:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[i] = 0U;
 800b730:	61a0      	str	r0, [r4, #24]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b732:	ba52      	rev16	r2, r2
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b734:	3b01      	subs	r3, #1
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b736:	8362      	strh	r2, [r4, #26]
  hmsc->bot_data_length = 12U;
 800b738:	220c      	movs	r2, #12
  hmsc->bot_data[3] = 0x08U;
 800b73a:	2108      	movs	r1, #8
  hmsc->bot_data_length = 12U;
 800b73c:	60e2      	str	r2, [r4, #12]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b73e:	0c1a      	lsrs	r2, r3, #16
  hmsc->bot_data[3] = 0x08U;
 800b740:	74e1      	strb	r1, [r4, #19]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b742:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b744:	0e19      	lsrs	r1, r3, #24
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b746:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b748:	0a1b      	lsrs	r3, r3, #8
  hmsc->bot_data[8] = 0x02U;
 800b74a:	2202      	movs	r2, #2
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b74c:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b74e:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[8] = 0x02U;
 800b750:	7622      	strb	r2, [r4, #24]
      break;
 800b752:	e778      	b.n	800b646 <SCSI_ProcessCmd+0x236>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b754:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b758:	4608      	mov	r0, r1
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800b760:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800b764:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b766:	2800      	cmp	r0, #0
 800b768:	f040 81e4 	bne.w	800bb34 <SCSI_ProcessCmd+0x724>
 800b76c:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b770:	2b02      	cmp	r3, #2
 800b772:	f000 81df 	beq.w	800bb34 <SCSI_ProcessCmd+0x724>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b776:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b77a:	82a0      	strh	r0, [r4, #20]
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b77c:	3b01      	subs	r3, #1
 800b77e:	0e19      	lsrs	r1, r3, #24
 800b780:	4602      	mov	r2, r0
 800b782:	f361 0207 	bfi	r2, r1, #0, #8
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b786:	0c19      	lsrs	r1, r3, #16
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b788:	f361 220f 	bfi	r2, r1, #8, #8
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b78c:	0a19      	lsrs	r1, r3, #8
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b78e:	f361 4217 	bfi	r2, r1, #16, #8
 800b792:	f8b4 1264 	ldrh.w	r1, [r4, #612]	@ 0x264
 800b796:	f363 621f 	bfi	r2, r3, #24, #8
 800b79a:	6122      	str	r2, [r4, #16]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b79c:	ba4b      	rev16	r3, r1
  hmsc->bot_data_length = 8U;
 800b79e:	2208      	movs	r2, #8
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b7a0:	82e3      	strh	r3, [r4, #22]
  hmsc->bot_data_length = 8U;
 800b7a2:	60e2      	str	r2, [r4, #12]
  return 0;
 800b7a4:	e738      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b7a6:	f894 8008 	ldrb.w	r8, [r4, #8]
 800b7aa:	f1b8 0f00 	cmp.w	r8, #0
 800b7ae:	d17f      	bne.n	800b8b0 <SCSI_ProcessCmd+0x4a0>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b7b0:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f280 8218 	bge.w	800bbea <SCSI_ProcessCmd+0x7da>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b7ba:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	f000 8318 	beq.w	800bdf4 <SCSI_ProcessCmd+0x9e4>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b7c4:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	4798      	blx	r3
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f040 8230 	bne.w	800bc34 <SCSI_ProcessCmd+0x824>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7d4:	f8d6 2002 	ldr.w	r2, [r6, #2]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7d8:	f8d5 12d4 	ldr.w	r1, [r5, #724]	@ 0x2d4
 800b7dc:	ba12      	rev	r2, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7de:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b7e2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7e6:	31b0      	adds	r1, #176	@ 0xb0
 800b7e8:	ba5b      	rev16	r3, r3
 800b7ea:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b7ee:	b29b      	uxth	r3, r3
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b7f0:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
  if (hmsc == NULL)
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	f43f af24 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b7fa:	f8d1 6268 	ldr.w	r6, [r1, #616]	@ 0x268
 800b7fe:	441a      	add	r2, r3
 800b800:	42b2      	cmp	r2, r6
 800b802:	f200 829a 	bhi.w	800bd3a <SCSI_ProcessCmd+0x92a>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b806:	f8b4 2264 	ldrh.w	r2, [r4, #612]	@ 0x264
 800b80a:	fb02 f303 	mul.w	r3, r2, r3
 800b80e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b812:	429a      	cmp	r2, r3
 800b814:	d04a      	beq.n	800b8ac <SCSI_ProcessCmd+0x49c>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b816:	f891 3261 	ldrb.w	r3, [r1, #609]	@ 0x261
 800b81a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b81e:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800b820:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b822:	f801 4032 	strb.w	r4, [r1, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800b826:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b828:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b82c:	2420      	movs	r4, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b82e:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b830:	8094      	strh	r4, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b832:	f47f aeb7 	bne.w	800b5a4 <SCSI_ProcessCmd+0x194>
    hmsc->scsi_sense_tail = 0U;
 800b836:	f881 0261 	strb.w	r0, [r1, #609]	@ 0x261
 800b83a:	e702      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b83c:	f894 8008 	ldrb.w	r8, [r4, #8]
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	d134      	bne.n	800b8b0 <SCSI_ProcessCmd+0x4a0>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b846:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f280 81cd 	bge.w	800bbea <SCSI_ProcessCmd+0x7da>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b850:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b854:	2b02      	cmp	r3, #2
 800b856:	f000 82cd 	beq.w	800bdf4 <SCSI_ProcessCmd+0x9e4>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b85a:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b85e:	4608      	mov	r0, r1
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	4798      	blx	r3
 800b864:	2800      	cmp	r0, #0
 800b866:	f040 81e5 	bne.w	800bc34 <SCSI_ProcessCmd+0x824>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b86a:	f8d6 3002 	ldr.w	r3, [r6, #2]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b86e:	f8d5 12d4 	ldr.w	r1, [r5, #724]	@ 0x2d4
 800b872:	ba1b      	rev	r3, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b874:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b878:	31b0      	adds	r1, #176	@ 0xb0
 800b87a:	f8d6 2006 	ldr.w	r2, [r6, #6]
 800b87e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b882:	ba12      	rev	r2, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b884:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  if (hmsc == NULL)
 800b888:	2900      	cmp	r1, #0
 800b88a:	f43f aeda 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b88e:	f8d1 0268 	ldr.w	r0, [r1, #616]	@ 0x268
 800b892:	4413      	add	r3, r2
 800b894:	4283      	cmp	r3, r0
 800b896:	f200 81ba 	bhi.w	800bc0e <SCSI_ProcessCmd+0x7fe>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b89a:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b89e:	fb02 f303 	mul.w	r3, r2, r3
 800b8a2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	f47f ae6b 	bne.w	800b582 <SCSI_ProcessCmd+0x172>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b8b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
  return SCSI_ProcessRead(pdev, lun);
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	4628      	mov	r0, r5
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b8b8:	60e3      	str	r3, [r4, #12]
}
 800b8ba:	b003      	add	sp, #12
 800b8bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return SCSI_ProcessRead(pdev, lun);
 800b8c0:	f7ff bce0 	b.w	800b284 <SCSI_ProcessRead>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b8c4:	f894 9008 	ldrb.w	r9, [r4, #8]
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	f040 812b 	bne.w	800bb26 <SCSI_ProcessCmd+0x716>
    if (hmsc->cbw.dDataLength == 0U)
 800b8d0:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8176 	beq.w	800bbc6 <SCSI_ProcessCmd+0x7b6>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b8da:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f2c0 82c0 	blt.w	800be64 <SCSI_ProcessCmd+0xa54>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b8e4:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	4798      	blx	r3
 800b8ee:	4680      	mov	r8, r0
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	f040 824c 	bne.w	800bd8e <SCSI_ProcessCmd+0x97e>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b8f6:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800b8fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b8fe:	4638      	mov	r0, r7
 800b900:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	4798      	blx	r3
 800b908:	4601      	mov	r1, r0
 800b90a:	2800      	cmp	r0, #0
 800b90c:	f040 8226 	bne.w	800bd5c <SCSI_ProcessCmd+0x94c>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b910:	f8d6 3002 	ldr.w	r3, [r6, #2]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b914:	f8d5 02d4 	ldr.w	r0, [r5, #724]	@ 0x2d4
 800b918:	ba1b      	rev	r3, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b91a:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b91e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b922:	30b0      	adds	r0, #176	@ 0xb0
 800b924:	ba52      	rev16	r2, r2
 800b926:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800b92a:	b292      	uxth	r2, r2
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b92c:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  if (hmsc == NULL)
 800b930:	2800      	cmp	r0, #0
 800b932:	f43f ae86 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b936:	f8d0 6268 	ldr.w	r6, [r0, #616]	@ 0x268
 800b93a:	4413      	add	r3, r2
 800b93c:	42b3      	cmp	r3, r6
 800b93e:	f200 8193 	bhi.w	800bc68 <SCSI_ProcessCmd+0x858>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b942:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b946:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b94a:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b94e:	4293      	cmp	r3, r2
 800b950:	f040 8114 	bne.w	800bb7c <SCSI_ProcessCmd+0x76c>
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b954:	4910      	ldr	r1, [pc, #64]	@ (800b998 <SCSI_ProcessCmd+0x588>)
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b956:	2201      	movs	r2, #1
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b95c:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b95e:	7809      	ldrb	r1, [r1, #0]
 800b960:	bf28      	it	cs
 800b962:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b966:	f104 0210 	add.w	r2, r4, #16
 800b96a:	4628      	mov	r0, r5
 800b96c:	f003 fdf8 	bl	800f560 <USBD_LL_PrepareReceive>
  return 0;
 800b970:	e652      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if ((params[1] & 0x02U) == 0x02U)
 800b972:	7873      	ldrb	r3, [r6, #1]
 800b974:	f013 0302 	ands.w	r3, r3, #2
 800b978:	f040 8112 	bne.w	800bba0 <SCSI_ProcessCmd+0x790>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b97c:	e9d4 209b 	ldrd	r2, r0, [r4, #620]	@ 0x26c
 800b980:	f8d4 1268 	ldr.w	r1, [r4, #616]	@ 0x268
 800b984:	4402      	add	r2, r0
 800b986:	428a      	cmp	r2, r1
 800b988:	f200 81c6 	bhi.w	800bd18 <SCSI_ProcessCmd+0x908>
    hmsc->bot_data_length = params[4];
 800b98c:	60e3      	str	r3, [r4, #12]
 800b98e:	e643      	b.n	800b618 <SCSI_ProcessCmd+0x208>
 800b990:	20000088 	.word	0x20000088
 800b994:	20000084 	.word	0x20000084
 800b998:	20000015 	.word	0x20000015
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b99c:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	4798      	blx	r3
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f040 8092 	bne.w	800bad0 <SCSI_ProcessCmd+0x6c0>
  if (params[8] <= len)
 800b9ac:	7a32      	ldrb	r2, [r6, #8]
 800b9ae:	2a08      	cmp	r2, #8
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	bf28      	it	cs
 800b9b4:	2308      	movcs	r3, #8
  hmsc->bot_data_length = len;
 800b9b6:	60e3      	str	r3, [r4, #12]
  while (len != 0U)
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	f43f ae2d 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b9be:	1e59      	subs	r1, r3, #1
 800b9c0:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800b9c2:	4ac4      	ldr	r2, [pc, #784]	@ (800bcd4 <SCSI_ProcessCmd+0x8c4>)
 800b9c4:	1860      	adds	r0, r4, r1
 800b9c6:	5c55      	ldrb	r5, [r2, r1]
 800b9c8:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b9ca:	2900      	cmp	r1, #0
 800b9cc:	f43f ae24 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b9d0:	1e99      	subs	r1, r3, #2
 800b9d2:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800b9d4:	1860      	adds	r0, r4, r1
 800b9d6:	5c55      	ldrb	r5, [r2, r1]
 800b9d8:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	f43f ae1c 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b9e0:	1ed9      	subs	r1, r3, #3
 800b9e2:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800b9e4:	1860      	adds	r0, r4, r1
 800b9e6:	5c55      	ldrb	r5, [r2, r1]
 800b9e8:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	f43f ae14 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800b9f0:	1f19      	subs	r1, r3, #4
 800b9f2:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800b9f4:	1860      	adds	r0, r4, r1
 800b9f6:	5c55      	ldrb	r5, [r2, r1]
 800b9f8:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	f43f ae0c 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800ba00:	1f59      	subs	r1, r3, #5
 800ba02:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800ba04:	1860      	adds	r0, r4, r1
 800ba06:	5c55      	ldrb	r5, [r2, r1]
 800ba08:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	f43f ae04 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800ba10:	1f99      	subs	r1, r3, #6
 800ba12:	b289      	uxth	r1, r1
    hmsc->bot_data[len] = pBuff[len];
 800ba14:	1860      	adds	r0, r4, r1
 800ba16:	5c55      	ldrb	r5, [r2, r1]
 800ba18:	7405      	strb	r5, [r0, #16]
  while (len != 0U)
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	f43f adfc 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    len--;
 800ba20:	3b07      	subs	r3, #7
 800ba22:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pBuff[len];
 800ba24:	18e1      	adds	r1, r4, r3
 800ba26:	5cd0      	ldrb	r0, [r2, r3]
 800ba28:	7408      	strb	r0, [r1, #16]
  while (len != 0U)
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f43f adf4 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
    hmsc->bot_data[len] = pBuff[len];
 800ba30:	7813      	ldrb	r3, [r2, #0]
 800ba32:	7423      	strb	r3, [r4, #16]
  while (len != 0U)
 800ba34:	e5f0      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if (hmsc->cbw.dDataLength != 0U)
 800ba36:	f8d4 6218 	ldr.w	r6, [r4, #536]	@ 0x218
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	f040 8126 	bne.w	800bc8c <SCSI_ProcessCmd+0x87c>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ba40:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800ba44:	2a02      	cmp	r2, #2
 800ba46:	f000 8221 	beq.w	800be8c <SCSI_ProcessCmd+0xa7c>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ba4a:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800ba4e:	4608      	mov	r0, r1
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	4798      	blx	r3
 800ba54:	2800      	cmp	r0, #0
 800ba56:	f040 8143 	bne.w	800bce0 <SCSI_ProcessCmd+0x8d0>
  hmsc->bot_data_length = 0U;
 800ba5a:	60e0      	str	r0, [r4, #12]
  return 0;
 800ba5c:	e5dc      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  if (hmsc->cbw.dDataLength == 0U)
 800ba5e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ba62:	f894 1261 	ldrb.w	r1, [r4, #609]	@ 0x261
  if (hmsc->cbw.dDataLength == 0U)
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	f000 8124 	beq.w	800bcb4 <SCSI_ProcessCmd+0x8a4>
  hmsc->bot_data[0] = 0x70U;
 800ba6c:	2370      	movs	r3, #112	@ 0x70
    hmsc->bot_data[i] = 0U;
 800ba6e:	2200      	movs	r2, #0
  hmsc->bot_data[0] = 0x70U;
 800ba70:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ba72:	230c      	movs	r3, #12
    hmsc->bot_data[i] = 0U;
 800ba74:	f8c4 2015 	str.w	r2, [r4, #21]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ba78:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ba7a:	f894 3260 	ldrb.w	r3, [r4, #608]	@ 0x260
    hmsc->bot_data[i] = 0U;
 800ba7e:	f8c4 2011 	str.w	r2, [r4, #17]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ba82:	4299      	cmp	r1, r3
    hmsc->bot_data[i] = 0U;
 800ba84:	f8c4 2019 	str.w	r2, [r4, #25]
 800ba88:	f8c4 201d 	str.w	r2, [r4, #29]
 800ba8c:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ba90:	d011      	beq.n	800bab6 <SCSI_ProcessCmd+0x6a6>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ba92:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 800ba96:	f891 1240 	ldrb.w	r1, [r1, #576]	@ 0x240
 800ba9a:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800ba9c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    hmsc->scsi_sense_head++;
 800baa0:	3301      	adds	r3, #1
 800baa2:	b2db      	uxtb	r3, r3
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800baa4:	f8b1 1244 	ldrh.w	r1, [r1, #580]	@ 0x244
 800baa8:	83a1      	strh	r1, [r4, #28]
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800baaa:	2b04      	cmp	r3, #4
    hmsc->scsi_sense_head++;
 800baac:	bf14      	ite	ne
 800baae:	f884 3260 	strbne.w	r3, [r4, #608]	@ 0x260
      hmsc->scsi_sense_head = 0U;
 800bab2:	f884 2260 	strbeq.w	r2, [r4, #608]	@ 0x260
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800bab6:	2312      	movs	r3, #18
 800bab8:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800baba:	7932      	ldrb	r2, [r6, #4]
    hmsc->bot_data_length = params[4];
 800babc:	429a      	cmp	r2, r3
 800babe:	bf98      	it	ls
 800bac0:	4613      	movls	r3, r2
 800bac2:	e763      	b.n	800b98c <SCSI_ProcessCmd+0x57c>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800bac4:	4a84      	ldr	r2, [pc, #528]	@ (800bcd8 <SCSI_ProcessCmd+0x8c8>)
 800bac6:	7893      	ldrb	r3, [r2, #2]
 800bac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bacc:	7093      	strb	r3, [r2, #2]
 800bace:	e5fa      	b.n	800b6c6 <SCSI_ProcessCmd+0x2b6>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800bad0:	4a80      	ldr	r2, [pc, #512]	@ (800bcd4 <SCSI_ProcessCmd+0x8c4>)
 800bad2:	78d3      	ldrb	r3, [r2, #3]
 800bad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bad8:	70d3      	strb	r3, [r2, #3]
 800bada:	e767      	b.n	800b9ac <SCSI_ProcessCmd+0x59c>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800badc:	2b02      	cmp	r3, #2
 800bade:	d05f      	beq.n	800bba0 <SCSI_ProcessCmd+0x790>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	f47f adca 	bne.w	800b67a <SCSI_ProcessCmd+0x26a>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bae6:	2300      	movs	r3, #0
 800bae8:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 800baec:	e5c8      	b.n	800b680 <SCSI_ProcessCmd+0x270>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800baee:	f8dc 32c4 	ldr.w	r3, [ip, #708]	@ 0x2c4
 800baf2:	7932      	ldrb	r2, [r6, #4]
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800baf4:	69d8      	ldr	r0, [r3, #28]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800baf6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bafa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 800bafe:	7903      	ldrb	r3, [r0, #4]
 800bb00:	3305      	adds	r3, #5
 800bb02:	4293      	cmp	r3, r2
 800bb04:	bf28      	it	cs
 800bb06:	4613      	movcs	r3, r2
  hmsc->bot_data_length = len;
 800bb08:	60e3      	str	r3, [r4, #12]
  while (len != 0U)
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f43f ad84 	beq.w	800b618 <SCSI_ProcessCmd+0x208>
 800bb10:	f103 0210 	add.w	r2, r3, #16
 800bb14:	4422      	add	r2, r4
 800bb16:	4403      	add	r3, r0
    hmsc->bot_data[len] = pBuff[len];
 800bb18:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800bb1c:	f802 1d01 	strb.w	r1, [r2, #-1]!
  while (len != 0U)
 800bb20:	4283      	cmp	r3, r0
 800bb22:	d1f9      	bne.n	800bb18 <SCSI_ProcessCmd+0x708>
 800bb24:	e578      	b.n	800b618 <SCSI_ProcessCmd+0x208>
    return SCSI_ProcessWrite(pdev, lun);
 800bb26:	4639      	mov	r1, r7
 800bb28:	4628      	mov	r0, r5
}
 800bb2a:	b003      	add	sp, #12
 800bb2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return SCSI_ProcessWrite(pdev, lun);
 800bb30:	f7ff bc08 	b.w	800b344 <SCSI_ProcessWrite>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb34:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bb38:	33b0      	adds	r3, #176	@ 0xb0
 800bb3a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bb3e:	2a00      	cmp	r2, #0
 800bb40:	f43f ad7f 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bb44:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bb48:	f103 0148 	add.w	r1, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bb4c:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bb4e:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  hmsc->scsi_sense_tail++;
 800bb52:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bb54:	2402      	movs	r4, #2
 800bb56:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bb5a:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bb5c:	f04f 013a 	mov.w	r1, #58	@ 0x3a
 800bb60:	8081      	strh	r1, [r0, #4]
    hmsc->scsi_sense_tail = 0U;
 800bb62:	bf08      	it	eq
 800bb64:	2300      	moveq	r3, #0
 800bb66:	f882 3261 	strb.w	r3, [r2, #609]	@ 0x261
 800bb6a:	e56a      	b.n	800b642 <SCSI_ProcessCmd+0x232>
    hmsc->bot_data[len] = pBuff[len];
 800bb6c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcdc <SCSI_ProcessCmd+0x8cc>)
  hmsc->bot_data_length = len;
 800bb6e:	2106      	movs	r1, #6
    hmsc->bot_data[len] = pBuff[len];
 800bb70:	889a      	ldrh	r2, [r3, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
  hmsc->bot_data_length = len;
 800bb74:	60e1      	str	r1, [r4, #12]
    hmsc->bot_data[len] = pBuff[len];
 800bb76:	82a2      	strh	r2, [r4, #20]
 800bb78:	6123      	str	r3, [r4, #16]
  while (len != 0U)
 800bb7a:	e54d      	b.n	800b618 <SCSI_ProcessCmd+0x208>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bb7c:	f890 3261 	ldrb.w	r3, [r0, #609]	@ 0x261
 800bb80:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bb84:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800bb86:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bb88:	f800 4032 	strb.w	r4, [r0, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800bb8c:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bb8e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800bb92:	2420      	movs	r4, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bb94:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bb96:	8094      	strh	r4, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bb98:	d075      	beq.n	800bc86 <SCSI_ProcessCmd+0x876>
  hmsc->scsi_sense_tail++;
 800bb9a:	f880 3261 	strb.w	r3, [r0, #609]	@ 0x261
 800bb9e:	e550      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bba0:	f894 3261 	ldrb.w	r3, [r4, #609]	@ 0x261
 800bba4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bba8:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bbaa:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbae:	2005      	movs	r0, #5
  hmsc->scsi_sense_tail++;
 800bbb0:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbb2:	f804 0032 	strb.w	r0, [r4, r2, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bbb6:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bbb8:	f04f 0224 	mov.w	r2, #36	@ 0x24
 800bbbc:	808a      	strh	r2, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bbbe:	d075      	beq.n	800bcac <SCSI_ProcessCmd+0x89c>
    hmsc->scsi_sense_tail = 0U;
 800bbc0:	f884 3261 	strb.w	r3, [r4, #609]	@ 0x261
 800bbc4:	e53d      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbc6:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 800bbca:	f102 0148 	add.w	r1, r2, #72	@ 0x48
 800bbce:	2005      	movs	r0, #5
  hmsc->scsi_sense_tail++;
 800bbd0:	3201      	adds	r2, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbd2:	f804 0031 	strb.w	r0, [r4, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bbd6:	b2d2      	uxtb	r2, r2
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bbd8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800bbdc:	2020      	movs	r0, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bbde:	2a04      	cmp	r2, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bbe0:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bbe2:	d0ed      	beq.n	800bbc0 <SCSI_ProcessCmd+0x7b0>
  hmsc->scsi_sense_tail++;
 800bbe4:	f884 2261 	strb.w	r2, [r4, #609]	@ 0x261
 800bbe8:	e52b      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbea:	f894 3261 	ldrb.w	r3, [r4, #609]	@ 0x261
 800bbee:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bbf2:	2105      	movs	r1, #5
  hmsc->scsi_sense_tail++;
 800bbf4:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bbf6:	f804 1032 	strb.w	r1, [r4, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800bbfa:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bbfc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800bc00:	2120      	movs	r1, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc02:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc04:	8091      	strh	r1, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc06:	d1db      	bne.n	800bbc0 <SCSI_ProcessCmd+0x7b0>
    hmsc->scsi_sense_tail = 0U;
 800bc08:	f884 8261 	strb.w	r8, [r4, #609]	@ 0x261
 800bc0c:	e519      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc0e:	f891 3261 	ldrb.w	r3, [r1, #609]	@ 0x261
 800bc12:	f103 0248 	add.w	r2, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bc16:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc18:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc1c:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800bc1e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc20:	f801 4032 	strb.w	r4, [r1, r2, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc24:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc26:	f04f 0221 	mov.w	r2, #33	@ 0x21
 800bc2a:	8082      	strh	r2, [r0, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc2c:	f47f acba 	bne.w	800b5a4 <SCSI_ProcessCmd+0x194>
    hmsc->scsi_sense_tail = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	e4b7      	b.n	800b5a4 <SCSI_ProcessCmd+0x194>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc34:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bc38:	33b0      	adds	r3, #176	@ 0xb0
 800bc3a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	f43f acff 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc44:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bc48:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bc4c:	2002      	movs	r0, #2
  hmsc->scsi_sense_tail++;
 800bc4e:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc50:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bc54:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc56:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800bc5a:	203a      	movs	r0, #58	@ 0x3a
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc5c:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc5e:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc60:	d181      	bne.n	800bb66 <SCSI_ProcessCmd+0x756>
    hmsc->scsi_sense_tail = 0U;
 800bc62:	f882 8261 	strb.w	r8, [r2, #609]	@ 0x261
 800bc66:	e4ec      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc68:	f890 3261 	ldrb.w	r3, [r0, #609]	@ 0x261
 800bc6c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bc70:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800bc72:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc74:	f800 4032 	strb.w	r4, [r0, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800bc78:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc7a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800bc7e:	2421      	movs	r4, #33	@ 0x21
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc80:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc82:	8094      	strh	r4, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bc84:	d189      	bne.n	800bb9a <SCSI_ProcessCmd+0x78a>
    hmsc->scsi_sense_tail = 0U;
 800bc86:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 800bc8a:	e4da      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc8c:	f894 3261 	ldrb.w	r3, [r4, #609]	@ 0x261
 800bc90:	f103 0248 	add.w	r2, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bc94:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bc96:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc9a:	2005      	movs	r0, #5
  hmsc->scsi_sense_tail++;
 800bc9c:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bc9e:	f804 0032 	strb.w	r0, [r4, r2, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bca2:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bca4:	f04f 0220 	mov.w	r2, #32
 800bca8:	808a      	strh	r2, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bcaa:	d189      	bne.n	800bbc0 <SCSI_ProcessCmd+0x7b0>
    hmsc->scsi_sense_tail = 0U;
 800bcac:	2300      	movs	r3, #0
 800bcae:	f884 3261 	strb.w	r3, [r4, #609]	@ 0x261
 800bcb2:	e4c6      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bcb4:	f101 0048 	add.w	r0, r1, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bcb8:	1c4b      	adds	r3, r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bcba:	2105      	movs	r1, #5
 800bcbc:	f804 1030 	strb.w	r1, [r4, r0, lsl #3]
  hmsc->scsi_sense_tail++;
 800bcc0:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bcc2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800bcc6:	2120      	movs	r1, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bcc8:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bcca:	8081      	strh	r1, [r0, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bccc:	f47f af78 	bne.w	800bbc0 <SCSI_ProcessCmd+0x7b0>
 800bcd0:	e788      	b.n	800bbe4 <SCSI_ProcessCmd+0x7d4>
 800bcd2:	bf00      	nop
 800bcd4:	2000007c 	.word	0x2000007c
 800bcd8:	20000084 	.word	0x20000084
 800bcdc:	20000090 	.word	0x20000090
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bce0:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bce4:	33b0      	adds	r3, #176	@ 0xb0
 800bce6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bcea:	b192      	cbz	r2, 800bd12 <SCSI_ProcessCmd+0x902>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bcec:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bcf0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bcf4:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bcf6:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  hmsc->scsi_sense_tail++;
 800bcfa:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bcfc:	2502      	movs	r5, #2
 800bcfe:	f802 5031 	strb.w	r5, [r2, r1, lsl #3]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd02:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd04:	f04f 013a 	mov.w	r1, #58	@ 0x3a
 800bd08:	8081      	strh	r1, [r0, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd0a:	f000 80d4 	beq.w	800beb6 <SCSI_ProcessCmd+0xaa6>
    hmsc->scsi_sense_tail = 0U;
 800bd0e:	f882 3261 	strb.w	r3, [r2, #609]	@ 0x261
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bd12:	2305      	movs	r3, #5
 800bd14:	7223      	strb	r3, [r4, #8]
      return -1;
 800bd16:	e494      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd18:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 800bd1c:	f102 0148 	add.w	r1, r2, #72	@ 0x48
 800bd20:	2005      	movs	r0, #5
  hmsc->scsi_sense_tail++;
 800bd22:	3201      	adds	r2, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd24:	f804 0031 	strb.w	r0, [r4, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bd28:	b2d2      	uxtb	r2, r2
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd2a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800bd2e:	2021      	movs	r0, #33	@ 0x21
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd30:	2a04      	cmp	r2, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd32:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd34:	f47f af56 	bne.w	800bbe4 <SCSI_ProcessCmd+0x7d4>
 800bd38:	e742      	b.n	800bbc0 <SCSI_ProcessCmd+0x7b0>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd3a:	f891 3261 	ldrb.w	r3, [r1, #609]	@ 0x261
 800bd3e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800bd42:	2405      	movs	r4, #5
  hmsc->scsi_sense_tail++;
 800bd44:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd46:	f801 4032 	strb.w	r4, [r1, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800bd4a:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd4c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bd50:	2421      	movs	r4, #33	@ 0x21
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd52:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd54:	8094      	strh	r4, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd56:	f47f ac25 	bne.w	800b5a4 <SCSI_ProcessCmd+0x194>
 800bd5a:	e56c      	b.n	800b836 <SCSI_ProcessCmd+0x426>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd5c:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bd60:	33b0      	adds	r3, #176	@ 0xb0
 800bd62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	f43f ac6b 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd6c:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bd70:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bd74:	2002      	movs	r0, #2
  hmsc->scsi_sense_tail++;
 800bd76:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd78:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bd7c:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd7e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800bd82:	2027      	movs	r0, #39	@ 0x27
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd84:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd86:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bd88:	f47f aeed 	bne.w	800bb66 <SCSI_ProcessCmd+0x756>
 800bd8c:	e769      	b.n	800bc62 <SCSI_ProcessCmd+0x852>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd8e:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bd92:	33b0      	adds	r3, #176	@ 0xb0
 800bd94:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	f43f ac52 	beq.w	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd9e:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bda2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bda6:	2002      	movs	r0, #2
  hmsc->scsi_sense_tail++;
 800bda8:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bdaa:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bdae:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bdb0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800bdb4:	203a      	movs	r0, #58	@ 0x3a
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bdb6:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bdb8:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bdba:	f47f aed4 	bne.w	800bb66 <SCSI_ProcessCmd+0x756>
    hmsc->scsi_sense_tail = 0U;
 800bdbe:	f882 9261 	strb.w	r9, [r2, #609]	@ 0x261
 800bdc2:	e43e      	b.n	800b642 <SCSI_ProcessCmd+0x232>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdc4:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 800bdc8:	33b0      	adds	r3, #176	@ 0xb0
 800bdca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	d09f      	beq.n	800bd12 <SCSI_ProcessCmd+0x902>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bdd2:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800bdd6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bdda:	2002      	movs	r0, #2
  hmsc->scsi_sense_tail++;
 800bddc:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bdde:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800bde2:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bde4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800bde8:	2027      	movs	r0, #39	@ 0x27
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bdea:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bdec:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bdee:	d18e      	bne.n	800bd0e <SCSI_ProcessCmd+0x8fe>
    hmsc->scsi_sense_tail = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e78c      	b.n	800bd0e <SCSI_ProcessCmd+0x8fe>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bdf4:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 800bdf8:	f102 0148 	add.w	r1, r2, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800bdfc:	3201      	adds	r2, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bdfe:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800be02:	b2d2      	uxtb	r2, r2
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be04:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800be08:	233a      	movs	r3, #58	@ 0x3a
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be0a:	2a04      	cmp	r2, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be0c:	808b      	strh	r3, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be0e:	f47f aee9 	bne.w	800bbe4 <SCSI_ProcessCmd+0x7d4>
 800be12:	e6f9      	b.n	800bc08 <SCSI_ProcessCmd+0x7f8>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be14:	33b0      	adds	r3, #176	@ 0xb0
 800be16:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  if (hmsc == NULL)
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	f43f af79 	beq.w	800bd12 <SCSI_ProcessCmd+0x902>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be20:	f892 3261 	ldrb.w	r3, [r2, #609]	@ 0x261
 800be24:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800be28:	2002      	movs	r0, #2
  hmsc->scsi_sense_tail++;
 800be2a:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be2c:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800be30:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be32:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800be36:	203a      	movs	r0, #58	@ 0x3a
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be38:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be3a:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be3c:	f47f af67 	bne.w	800bd0e <SCSI_ProcessCmd+0x8fe>
 800be40:	e7d6      	b.n	800bdf0 <SCSI_ProcessCmd+0x9e0>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be42:	f894 3261 	ldrb.w	r3, [r4, #609]	@ 0x261
 800be46:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800be4a:	2005      	movs	r0, #5
  hmsc->scsi_sense_tail++;
 800be4c:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be4e:	f804 0031 	strb.w	r0, [r4, r1, lsl #3]
  hmsc->scsi_sense_tail++;
 800be52:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be54:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800be58:	2020      	movs	r0, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be5a:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be5c:	8088      	strh	r0, [r1, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be5e:	f47f aeaf 	bne.w	800bbc0 <SCSI_ProcessCmd+0x7b0>
 800be62:	e6bf      	b.n	800bbe4 <SCSI_ProcessCmd+0x7d4>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be64:	f894 3261 	ldrb.w	r3, [r4, #609]	@ 0x261
 800be68:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800be6c:	2105      	movs	r1, #5
  hmsc->scsi_sense_tail++;
 800be6e:	3301      	adds	r3, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be70:	f804 1032 	strb.w	r1, [r4, r2, lsl #3]
  hmsc->scsi_sense_tail++;
 800be74:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be76:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800be7a:	2120      	movs	r1, #32
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be7c:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be7e:	8091      	strh	r1, [r2, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800be80:	f47f ae9e 	bne.w	800bbc0 <SCSI_ProcessCmd+0x7b0>
    hmsc->scsi_sense_tail = 0U;
 800be84:	f884 9261 	strb.w	r9, [r4, #609]	@ 0x261
 800be88:	f7ff bbdb 	b.w	800b642 <SCSI_ProcessCmd+0x232>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be8c:	f894 1261 	ldrb.w	r1, [r4, #609]	@ 0x261
 800be90:	f101 0048 	add.w	r0, r1, #72	@ 0x48
  hmsc->scsi_sense_tail++;
 800be94:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800be96:	f804 2030 	strb.w	r2, [r4, r0, lsl #3]
  hmsc->scsi_sense_tail++;
 800be9a:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800be9c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    hmsc->scsi_sense_tail = 0U;
 800bea0:	2904      	cmp	r1, #4
 800bea2:	bf08      	it	eq
 800bea4:	4619      	moveq	r1, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bea6:	223a      	movs	r2, #58	@ 0x3a
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bea8:	2305      	movs	r3, #5
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800beaa:	8082      	strh	r2, [r0, #4]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800beac:	f884 1261 	strb.w	r1, [r4, #609]	@ 0x261
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800beb0:	7223      	strb	r3, [r4, #8]
    return -1;
 800beb2:	f7ff bbc6 	b.w	800b642 <SCSI_ProcessCmd+0x232>
    hmsc->scsi_sense_tail = 0U;
 800beb6:	f882 6261 	strb.w	r6, [r2, #609]	@ 0x261
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800beba:	e72a      	b.n	800bd12 <SCSI_ProcessCmd+0x902>

0800bebc <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bebc:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 800bec0:	31b0      	adds	r1, #176	@ 0xb0
 800bec2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  if (hmsc == NULL)
 800bec6:	b1a0      	cbz	r0, 800bef2 <SCSI_SenseCode+0x36>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bec8:	f890 1261 	ldrb.w	r1, [r0, #609]	@ 0x261
 800becc:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 800bed0:	3101      	adds	r1, #1
 800bed2:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bed4:	f88c 2240 	strb.w	r2, [ip, #576]	@ 0x240
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bed8:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800beda:	f04f 0200 	mov.w	r2, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bede:	f88c 3244 	strb.w	r3, [ip, #580]	@ 0x244
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800bee2:	f88c 2245 	strb.w	r2, [ip, #581]	@ 0x245
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bee6:	d002      	beq.n	800beee <SCSI_SenseCode+0x32>
  hmsc->scsi_sense_tail++;
 800bee8:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 800beec:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0U;
 800beee:	f880 2261 	strb.w	r2, [r0, #609]	@ 0x261
}
 800bef2:	4770      	bx	lr

0800bef4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bef4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bef6:	b188      	cbz	r0, 800bf1c <USBD_Init+0x28>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800befe:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf02:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf06:	b109      	cbz	r1, 800bf0c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800bf08:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 800bf12:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);

  return ret;
}
 800bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ret = USBD_LL_Init(pdev);
 800bf18:	f003 ba7a 	b.w	800f410 <USBD_LL_Init>
    USBD_ErrLog("Invalid Device handle");
 800bf1c:	4805      	ldr	r0, [pc, #20]	@ (800bf34 <USBD_Init+0x40>)
 800bf1e:	f003 fbf7 	bl	800f710 <iprintf>
 800bf22:	4805      	ldr	r0, [pc, #20]	@ (800bf38 <USBD_Init+0x44>)
 800bf24:	f003 fbf4 	bl	800f710 <iprintf>
 800bf28:	200a      	movs	r0, #10
 800bf2a:	f003 fc03 	bl	800f734 <putchar>
}
 800bf2e:	2003      	movs	r0, #3
 800bf30:	bd08      	pop	{r3, pc}
 800bf32:	bf00      	nop
 800bf34:	08011598 	.word	0x08011598
 800bf38:	080115a0 	.word	0x080115a0

0800bf3c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf3c:	b510      	push	{r4, lr}
 800bf3e:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800bf46:	b189      	cbz	r1, 800bf6c <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bf48:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 800bf4a:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bf4e:	4604      	mov	r4, r0
 800bf50:	b123      	cbz	r3, 800bf5c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bf52:	f10d 0006 	add.w	r0, sp, #6
 800bf56:	4798      	blx	r3
 800bf58:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bf5c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800bf60:	3301      	adds	r3, #1

  return USBD_OK;
 800bf62:	2000      	movs	r0, #0
  pdev->NumClasses++;
 800bf64:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 800bf68:	b002      	add	sp, #8
 800bf6a:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800bf6c:	4805      	ldr	r0, [pc, #20]	@ (800bf84 <USBD_RegisterClass+0x48>)
 800bf6e:	f003 fbcf 	bl	800f710 <iprintf>
 800bf72:	4805      	ldr	r0, [pc, #20]	@ (800bf88 <USBD_RegisterClass+0x4c>)
 800bf74:	f003 fbcc 	bl	800f710 <iprintf>
 800bf78:	200a      	movs	r0, #10
 800bf7a:	f003 fbdb 	bl	800f734 <putchar>
    return USBD_FAIL;
 800bf7e:	2003      	movs	r0, #3
 800bf80:	e7f2      	b.n	800bf68 <USBD_RegisterClass+0x2c>
 800bf82:	bf00      	nop
 800bf84:	08011598 	.word	0x08011598
 800bf88:	080115b8 	.word	0x080115b8

0800bf8c <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf8c:	f003 ba72 	b.w	800f474 <USBD_LL_Start>

0800bf90 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bf94:	b10b      	cbz	r3, 800bf9a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop

0800bfa0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfa0:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bfa2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800bfaa:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800bfac:	bf18      	it	ne
 800bfae:	2003      	movne	r0, #3
 800bfb0:	bd08      	pop	{r3, pc}
 800bfb2:	bf00      	nop

0800bfb4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfb8:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f000 fc05 	bl	800c7cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800bfc2:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800bfc6:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800bfca:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800bfd4:	f001 031f 	and.w	r3, r1, #31
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d009      	beq.n	800bff0 <USBD_LL_SetupStage+0x3c>
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d013      	beq.n	800c008 <USBD_LL_SetupStage+0x54>
 800bfe0:	b163      	cbz	r3, 800bffc <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
      break;
  }

  return ret;
}
 800bfe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfec:	f003 ba74 	b.w	800f4d8 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bff0:	4629      	mov	r1, r5
 800bff2:	4620      	mov	r0, r4
}
 800bff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bff8:	f000 bb00 	b.w	800c5fc <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bffc:	4629      	mov	r1, r5
 800bffe:	4620      	mov	r0, r4
}
 800c000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c004:	f000 b950 	b.w	800c2a8 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c008:	4629      	mov	r1, r5
 800c00a:	4620      	mov	r0, r4
}
 800c00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c010:	f000 bb30 	b.w	800c674 <USBD_StdEPReq>

0800c014 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c014:	b510      	push	{r4, lr}
 800c016:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800c018:	b931      	cbnz	r1, 800c028 <USBD_LL_DataOutStage+0x14>
 800c01a:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c01c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800c020:	2a03      	cmp	r2, #3
 800c022:	d010      	beq.n	800c046 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 800c024:	2000      	movs	r0, #0
 800c026:	bd10      	pop	{r4, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c028:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d1f9      	bne.n	800c024 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800c030:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0f4      	beq.n	800c024 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800c03a:	2200      	movs	r2, #0
}
 800c03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          pdev->classId = idx;
 800c040:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c044:	4718      	bx	r3
 800c046:	460b      	mov	r3, r1
      if (pep->rem_length > pep->maxpacket)
 800c048:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800c04c:	4291      	cmp	r1, r2
 800c04e:	d808      	bhi.n	800c062 <USBD_LL_DataOutStage+0x4e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c050:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800c054:	2a03      	cmp	r2, #3
 800c056:	d00e      	beq.n	800c076 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fc19 	bl	800c890 <USBD_CtlSendStatus>
}
 800c05e:	2000      	movs	r0, #0
 800c060:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800c062:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c064:	428a      	cmp	r2, r1
 800c066:	bf28      	it	cs
 800c068:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800c06a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c06e:	4661      	mov	r1, ip
 800c070:	f000 fc06 	bl	800c880 <USBD_CtlContinueRx>
 800c074:	e7d6      	b.n	800c024 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c076:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800c07a:	6912      	ldr	r2, [r2, #16]
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	d0eb      	beq.n	800c058 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 800c080:	f8c0 32d4 	str.w	r3, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c084:	4790      	blx	r2
 800c086:	e7e7      	b.n	800c058 <USBD_LL_DataOutStage+0x44>

0800c088 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c08c:	b961      	cbnz	r1, 800c0a8 <USBD_LL_DataInStage+0x20>
 800c08e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c090:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800c094:	2a02      	cmp	r2, #2
 800c096:	d016      	beq.n	800c0c6 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c098:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800c09c:	b113      	cbz	r3, 800c0a4 <USBD_LL_DataInStage+0x1c>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	d1f9      	bne.n	800c0a4 <USBD_LL_DataInStage+0x1c>
        if (pdev->pClass[idx]->DataIn != NULL)
 800c0b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0f4      	beq.n	800c0a4 <USBD_LL_DataInStage+0x1c>
          pdev->classId = idx;
 800c0ba:	2200      	movs	r2, #0
}
 800c0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800c0c0:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c0c4:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c0c6:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800c0ca:	42b2      	cmp	r2, r6
 800c0cc:	460d      	mov	r5, r1
 800c0ce:	d810      	bhi.n	800c0f2 <USBD_LL_DataInStage+0x6a>
        if ((pep->maxpacket == pep->rem_length) &&
 800c0d0:	d01b      	beq.n	800c10a <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d024      	beq.n	800c124 <USBD_LL_DataInStage+0x9c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0da:	2180      	movs	r1, #128	@ 0x80
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f003 f9fb 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 fbe0 	bl	800c8a8 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800c0e8:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0d9      	beq.n	800c0a4 <USBD_LL_DataInStage+0x1c>
 800c0f0:	e7d5      	b.n	800c09e <USBD_LL_DataInStage+0x16>
        pep->rem_length -= pep->maxpacket;
 800c0f2:	1b92      	subs	r2, r2, r6
 800c0f4:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f000 fbba 	bl	800c870 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	462a      	mov	r2, r5
 800c100:	4629      	mov	r1, r5
 800c102:	4620      	mov	r0, r4
 800c104:	f003 fa2c 	bl	800f560 <USBD_LL_PrepareReceive>
 800c108:	e7c6      	b.n	800c098 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800c10a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d8e0      	bhi.n	800c0d2 <USBD_LL_DataInStage+0x4a>
            (pep->total_length >= pep->maxpacket) &&
 800c110:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800c114:	4293      	cmp	r3, r2
 800c116:	d2dc      	bcs.n	800c0d2 <USBD_LL_DataInStage+0x4a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c118:	460a      	mov	r2, r1
 800c11a:	f000 fba9 	bl	800c870 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c11e:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800c122:	e7eb      	b.n	800c0fc <USBD_LL_DataInStage+0x74>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c124:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d0d5      	beq.n	800c0da <USBD_LL_DataInStage+0x52>
              pdev->classId = 0U;
 800c12e:	2200      	movs	r2, #0
 800c130:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c134:	4620      	mov	r0, r4
 800c136:	4798      	blx	r3
 800c138:	e7cf      	b.n	800c0da <USBD_LL_DataInStage+0x52>
 800c13a:	bf00      	nop

0800c13c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c13e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800c142:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c144:	2201      	movs	r2, #1
 800c146:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
{
 800c14a:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
 800c14c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c14e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 800c152:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c156:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 800c15a:	b11b      	cbz	r3, 800c164 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	b10b      	cbz	r3, 800c164 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c160:	4798      	blx	r3
 800c162:	b9b0      	cbnz	r0, 800c192 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 800c164:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c166:	2200      	movs	r2, #0
 800c168:	2340      	movs	r3, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c16a:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c16c:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c16e:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c170:	4620      	mov	r0, r4
 800c172:	f003 f98b 	bl	800f48c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c176:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c17a:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c17e:	462b      	mov	r3, r5
 800c180:	2200      	movs	r2, #0
 800c182:	2180      	movs	r1, #128	@ 0x80
 800c184:	4620      	mov	r0, r4
 800c186:	f003 f981 	bl	800f48c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c18a:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c18c:	6225      	str	r5, [r4, #32]

  return ret;
}
 800c18e:	4638      	mov	r0, r7
 800c190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800c192:	2703      	movs	r7, #3
 800c194:	e7e7      	b.n	800c166 <USBD_LL_Reset+0x2a>
 800c196:	bf00      	nop

0800c198 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800c198:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800c19a:	2000      	movs	r0, #0
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop

0800c1a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c1a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d004      	beq.n	800c1b2 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c1a8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	4770      	bx	lr

0800c1bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c1c0:	2b04      	cmp	r3, #4
 800c1c2:	d104      	bne.n	800c1ce <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1c4:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop

0800c1d4 <USBD_LL_SOF>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800c1d8:	2a03      	cmp	r2, #3
 800c1da:	d001      	beq.n	800c1e0 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800c1dc:	2000      	movs	r0, #0
 800c1de:	4770      	bx	lr
{
 800c1e0:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 800c1e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c1e6:	b113      	cbz	r3, 800c1ee <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	b103      	cbz	r3, 800c1ee <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800c1ec:	4798      	blx	r3
}
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	bd08      	pop	{r3, pc}
 800c1f2:	bf00      	nop

0800c1f4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800c1f4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800c1f8:	32ae      	adds	r2, #174	@ 0xae
 800c1fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c1fe:	b162      	cbz	r2, 800c21a <USBD_LL_IsoINIncomplete+0x26>
{
 800c200:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c202:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c206:	2b03      	cmp	r3, #3
 800c208:	d001      	beq.n	800c20e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c20a:	2000      	movs	r0, #0
}
 800c20c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c20e:	6a13      	ldr	r3, [r2, #32]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0fa      	beq.n	800c20a <USBD_LL_IsoINIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c214:	4798      	blx	r3
  return USBD_OK;
 800c216:	2000      	movs	r0, #0
}
 800c218:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c21a:	2003      	movs	r0, #3
}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800c220:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800c224:	32ae      	adds	r2, #174	@ 0xae
 800c226:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c22a:	b162      	cbz	r2, 800c246 <USBD_LL_IsoOUTIncomplete+0x26>
{
 800c22c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c22e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c232:	2b03      	cmp	r3, #3
 800c234:	d001      	beq.n	800c23a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c236:	2000      	movs	r0, #0
}
 800c238:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c23a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0fa      	beq.n	800c236 <USBD_LL_IsoOUTIncomplete+0x16>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c240:	4798      	blx	r3
  return USBD_OK;
 800c242:	2000      	movs	r0, #0
}
 800c244:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c246:	2003      	movs	r0, #3
}
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop

0800c24c <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr

0800c250 <USBD_LL_DevDisconnected>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c250:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c254:	2101      	movs	r1, #1
 800c256:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass[0] != NULL)
 800c25a:	b142      	cbz	r2, 800c26e <USBD_LL_DevDisconnected+0x1e>
{
 800c25c:	b508      	push	{r3, lr}
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c25e:	6852      	ldr	r2, [r2, #4]
 800c260:	7901      	ldrb	r1, [r0, #4]
 800c262:	4790      	blx	r2
 800c264:	b908      	cbnz	r0, 800c26a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800c266:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800c268:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800c26a:	2003      	movs	r0, #3
}
 800c26c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800c26e:	2000      	movs	r0, #0
}
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop

0800c274 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800c274:	2000      	movs	r0, #0
 800c276:	4770      	bx	lr

0800c278 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 800c278:	2000      	movs	r0, #0
 800c27a:	4770      	bx	lr

0800c27c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c27c:	7802      	ldrb	r2, [r0, #0]
 800c27e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800c282:	4594      	cmp	ip, r2
 800c284:	4613      	mov	r3, r2
 800c286:	d803      	bhi.n	800c290 <USBD_GetEpDesc+0x14>
 800c288:	e00c      	b.n	800c2a4 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800c28a:	459c      	cmp	ip, r3
 800c28c:	d90a      	bls.n	800c2a4 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800c28e:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c290:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800c292:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c294:	7842      	ldrb	r2, [r0, #1]
 800c296:	2a05      	cmp	r2, #5
  *ptr += pnext->bLength;
 800c298:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c29a:	d1f6      	bne.n	800c28a <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800c29c:	7882      	ldrb	r2, [r0, #2]
 800c29e:	428a      	cmp	r2, r1
 800c2a0:	d1f3      	bne.n	800c28a <USBD_GetEpDesc+0xe>
}
 800c2a2:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c2a4:	2000      	movs	r0, #0
}
 800c2a6:	4770      	bx	lr

0800c2a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	780b      	ldrb	r3, [r1, #0]
 800c2ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b0:	2b20      	cmp	r3, #32
{
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b8:	d00e      	beq.n	800c2d8 <USBD_StdDevReq+0x30>
 800c2ba:	2b40      	cmp	r3, #64	@ 0x40
 800c2bc:	d00c      	beq.n	800c2d8 <USBD_StdDevReq+0x30>
 800c2be:	b1bb      	cbz	r3, 800c2f0 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c0:	2180      	movs	r1, #128	@ 0x80
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f003 f908 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f003 f904 	bl	800f4d8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2d0:	2500      	movs	r5, #0
}
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	b002      	add	sp, #8
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2d8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800c2dc:	33ae      	adds	r3, #174	@ 0xae
 800c2de:	4629      	mov	r1, r5
 800c2e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	4620      	mov	r0, r4
}
 800c2e8:	b002      	add	sp, #8
 800c2ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2ee:	4718      	bx	r3
      switch (req->bRequest)
 800c2f0:	784b      	ldrb	r3, [r1, #1]
 800c2f2:	2b09      	cmp	r3, #9
 800c2f4:	d8e4      	bhi.n	800c2c0 <USBD_StdDevReq+0x18>
 800c2f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2fc <USBD_StdDevReq+0x54>)
 800c2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fc:	0800c35d 	.word	0x0800c35d
 800c300:	0800c385 	.word	0x0800c385
 800c304:	0800c2c1 	.word	0x0800c2c1
 800c308:	0800c3a3 	.word	0x0800c3a3
 800c30c:	0800c2c1 	.word	0x0800c2c1
 800c310:	0800c3bb 	.word	0x0800c3bb
 800c314:	0800c3fb 	.word	0x0800c3fb
 800c318:	0800c2c1 	.word	0x0800c2c1
 800c31c:	0800c431 	.word	0x0800c431
 800c320:	0800c325 	.word	0x0800c325
  cfgidx = (uint8_t)(req->wValue);
 800c324:	7889      	ldrb	r1, [r1, #2]
 800c326:	4db4      	ldr	r5, [pc, #720]	@ (800c5f8 <USBD_StdDevReq+0x350>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c328:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c32a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c32c:	f200 8140 	bhi.w	800c5b0 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 800c330:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c334:	2b02      	cmp	r3, #2
 800c336:	b2de      	uxtb	r6, r3
 800c338:	f000 8126 	beq.w	800c588 <USBD_StdDevReq+0x2e0>
 800c33c:	2e03      	cmp	r6, #3
 800c33e:	f000 8101 	beq.w	800c544 <USBD_StdDevReq+0x29c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c342:	2180      	movs	r1, #128	@ 0x80
 800c344:	f003 f8c8 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c348:	2100      	movs	r1, #0
 800c34a:	4620      	mov	r0, r4
 800c34c:	f003 f8c4 	bl	800f4d8 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c350:	7829      	ldrb	r1, [r5, #0]
 800c352:	4620      	mov	r0, r4
 800c354:	f7ff fe24 	bl	800bfa0 <USBD_ClrClassConfig>
    return USBD_FAIL;
 800c358:	2503      	movs	r5, #3
 800c35a:	e7ba      	b.n	800c2d2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c35c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c360:	3b01      	subs	r3, #1
 800c362:	2b02      	cmp	r3, #2
 800c364:	d8ac      	bhi.n	800c2c0 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800c366:	88ca      	ldrh	r2, [r1, #6]
 800c368:	2a02      	cmp	r2, #2
 800c36a:	d1a9      	bne.n	800c2c0 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800c36c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800c370:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c372:	2b00      	cmp	r3, #0
 800c374:	bf0c      	ite	eq
 800c376:	2301      	moveq	r3, #1
 800c378:	2303      	movne	r3, #3
 800c37a:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c37e:	f000 fa69 	bl	800c854 <USBD_CtlSendData>
      break;
 800c382:	e7a5      	b.n	800c2d0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c384:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c388:	3b01      	subs	r3, #1
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d898      	bhi.n	800c2c0 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c38e:	884b      	ldrh	r3, [r1, #2]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d19d      	bne.n	800c2d0 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 fa78 	bl	800c890 <USBD_CtlSendStatus>
 800c3a0:	e796      	b.n	800c2d0 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3a2:	884b      	ldrh	r3, [r1, #2]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d0f6      	beq.n	800c396 <USBD_StdDevReq+0xee>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d189      	bne.n	800c2c0 <USBD_StdDevReq+0x18>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c3ac:	888b      	ldrh	r3, [r1, #4]
 800c3ae:	0a1b      	lsrs	r3, r3, #8
 800c3b0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3b4:	f000 fa6c 	bl	800c890 <USBD_CtlSendStatus>
 800c3b8:	e78a      	b.n	800c2d0 <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3ba:	888b      	ldrh	r3, [r1, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f af7f 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
 800c3c2:	88cb      	ldrh	r3, [r1, #6]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f af7b 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
 800c3ca:	884d      	ldrh	r5, [r1, #2]
 800c3cc:	2d7f      	cmp	r5, #127	@ 0x7f
 800c3ce:	f63f af77 	bhi.w	800c2c0 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	f43f af72 	beq.w	800c2c0 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3dc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800c3de:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3e2:	f003 f8a5 	bl	800f530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fa52 	bl	800c890 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c3ec:	2d00      	cmp	r5, #0
 800c3ee:	f000 80ff 	beq.w	800c5f0 <USBD_StdDevReq+0x348>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800c3f8:	e76a      	b.n	800c2d0 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800c3fa:	884a      	ldrh	r2, [r1, #2]
 800c3fc:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800c3fe:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800c400:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800c402:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800c406:	2b06      	cmp	r3, #6
 800c408:	f63f af5a 	bhi.w	800c2c0 <USBD_StdDevReq+0x18>
 800c40c:	a101      	add	r1, pc, #4	@ (adr r1, 800c414 <USBD_StdDevReq+0x16c>)
 800c40e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c412:	bf00      	nop
 800c414:	0800c4d5 	.word	0x0800c4d5
 800c418:	0800c4bb 	.word	0x0800c4bb
 800c41c:	0800c4a9 	.word	0x0800c4a9
 800c420:	0800c2c1 	.word	0x0800c2c1
 800c424:	0800c2c1 	.word	0x0800c2c1
 800c428:	0800c493 	.word	0x0800c493
 800c42c:	0800c457 	.word	0x0800c457
  if (req->wLength != 1U)
 800c430:	88ca      	ldrh	r2, [r1, #6]
 800c432:	2a01      	cmp	r2, #1
 800c434:	f47f af44 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c438:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 800c43c:	2902      	cmp	r1, #2
 800c43e:	b2cb      	uxtb	r3, r1
 800c440:	d879      	bhi.n	800c536 <USBD_StdDevReq+0x28e>
 800c442:	2b00      	cmp	r3, #0
 800c444:	f43f af3c 	beq.w	800c2c0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800c448:	4601      	mov	r1, r0
 800c44a:	2300      	movs	r3, #0
 800c44c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c450:	f000 fa00 	bl	800c854 <USBD_CtlSendData>
        break;
 800c454:	e73c      	b.n	800c2d0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c456:	7c03      	ldrb	r3, [r0, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f47f af31 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c45e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c462:	f10d 0006 	add.w	r0, sp, #6
 800c466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c468:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c46a:	2307      	movs	r3, #7
 800c46c:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800c46e:	88eb      	ldrh	r3, [r5, #6]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d092      	beq.n	800c39a <USBD_StdDevReq+0xf2>
    if (len != 0U)
 800c474:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c478:	2a00      	cmp	r2, #0
 800c47a:	f43f af21 	beq.w	800c2c0 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800c47e:	429a      	cmp	r2, r3
 800c480:	bf28      	it	cs
 800c482:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c484:	4601      	mov	r1, r0
 800c486:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800c488:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c48c:	f000 f9e2 	bl	800c854 <USBD_CtlSendData>
 800c490:	e71e      	b.n	800c2d0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	7c03      	ldrb	r3, [r0, #16]
 800c494:	2b00      	cmp	r3, #0
 800c496:	f47f af13 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c49a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c49e:	f10d 0006 	add.w	r0, sp, #6
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a4:	4798      	blx	r3
  if (err != 0U)
 800c4a6:	e7e2      	b.n	800c46e <USBD_StdDevReq+0x1c6>
      switch ((uint8_t)(req->wValue))
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	2a05      	cmp	r2, #5
 800c4ac:	f63f af08 	bhi.w	800c2c0 <USBD_StdDevReq+0x18>
 800c4b0:	e8df f002 	tbb	[pc, r2]
 800c4b4:	292f353b 	.word	0x292f353b
 800c4b8:	1823      	.short	0x1823
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ba:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c4bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	f040 8087 	bne.w	800c5d4 <USBD_StdDevReq+0x32c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c8:	f10d 0006 	add.w	r0, sp, #6
 800c4cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c4d2:	e7cc      	b.n	800c46e <USBD_StdDevReq+0x1c6>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c4d8:	7c00      	ldrb	r0, [r0, #16]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f10d 0106 	add.w	r1, sp, #6
 800c4e0:	4798      	blx	r3
  if (err != 0U)
 800c4e2:	e7c4      	b.n	800c46e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f43f aee8 	beq.w	800c2c0 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	7c20      	ldrb	r0, [r4, #16]
 800c4f2:	f10d 0106 	add.w	r1, sp, #6
 800c4f6:	4798      	blx	r3
  if (err != 0U)
 800c4f8:	e7b9      	b.n	800c46e <USBD_StdDevReq+0x1c6>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1f5      	bne.n	800c4f0 <USBD_StdDevReq+0x248>
 800c504:	e6dc      	b.n	800c2c0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c506:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1ef      	bne.n	800c4f0 <USBD_StdDevReq+0x248>
 800c510:	e6d6      	b.n	800c2c0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c512:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e9      	bne.n	800c4f0 <USBD_StdDevReq+0x248>
 800c51c:	e6d0      	b.n	800c2c0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c51e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e3      	bne.n	800c4f0 <USBD_StdDevReq+0x248>
 800c528:	e6ca      	b.n	800c2c0 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c52a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1dd      	bne.n	800c4f0 <USBD_StdDevReq+0x248>
 800c534:	e6c4      	b.n	800c2c0 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c536:	2b03      	cmp	r3, #3
 800c538:	f47f aec2 	bne.w	800c2c0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c53c:	1d01      	adds	r1, r0, #4
 800c53e:	f000 f989 	bl	800c854 <USBD_CtlSendData>
        break;
 800c542:	e6c5      	b.n	800c2d0 <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800c544:	2900      	cmp	r1, #0
 800c546:	d03b      	beq.n	800c5c0 <USBD_StdDevReq+0x318>
      else if (cfgidx != pdev->dev_config)
 800c548:	6841      	ldr	r1, [r0, #4]
 800c54a:	2901      	cmp	r1, #1
 800c54c:	f43f af25 	beq.w	800c39a <USBD_StdDevReq+0xf2>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c550:	b2c9      	uxtb	r1, r1
 800c552:	f7ff fd25 	bl	800bfa0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c556:	7829      	ldrb	r1, [r5, #0]
 800c558:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7ff fd18 	bl	800bf90 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c560:	4605      	mov	r5, r0
 800c562:	2800      	cmp	r0, #0
 800c564:	f43f af19 	beq.w	800c39a <USBD_StdDevReq+0xf2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c568:	2180      	movs	r1, #128	@ 0x80
 800c56a:	4620      	mov	r0, r4
 800c56c:	f002 ffb4 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c570:	2100      	movs	r1, #0
 800c572:	4620      	mov	r0, r4
 800c574:	f002 ffb0 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c578:	7921      	ldrb	r1, [r4, #4]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7ff fd10 	bl	800bfa0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c580:	2302      	movs	r3, #2
 800c582:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800c586:	e6a4      	b.n	800c2d2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800c588:	2900      	cmp	r1, #0
 800c58a:	f43f af06 	beq.w	800c39a <USBD_StdDevReq+0xf2>
        pdev->dev_config = cfgidx;
 800c58e:	2101      	movs	r1, #1
 800c590:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c592:	f7ff fcfd 	bl	800bf90 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c596:	4605      	mov	r5, r0
 800c598:	b318      	cbz	r0, 800c5e2 <USBD_StdDevReq+0x33a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c59a:	2180      	movs	r1, #128	@ 0x80
 800c59c:	4620      	mov	r0, r4
 800c59e:	f002 ff9b 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f002 ff97 	bl	800f4d8 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5aa:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 800c5ae:	e690      	b.n	800c2d2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5b0:	2180      	movs	r1, #128	@ 0x80
 800c5b2:	f002 ff91 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f002 ff8d 	bl	800f4d8 <USBD_LL_StallEP>
    return USBD_FAIL;
 800c5be:	e6cb      	b.n	800c358 <USBD_StdDevReq+0xb0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5c6:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5c8:	f7ff fcea 	bl	800bfa0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 f95f 	bl	800c890 <USBD_CtlSendStatus>
 800c5d2:	e67d      	b.n	800c2d0 <USBD_StdDevReq+0x28>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d6:	f10d 0006 	add.w	r0, sp, #6
 800c5da:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c5e0:	e745      	b.n	800c46e <USBD_StdDevReq+0x1c6>
          (void)USBD_CtlSendStatus(pdev);
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f954 	bl	800c890 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800c5ee:	e66f      	b.n	800c2d0 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800c5f6:	e66b      	b.n	800c2d0 <USBD_StdDevReq+0x28>
 800c5f8:	20000af4 	.word	0x20000af4

0800c5fc <USBD_StdItfReq>:
{
 800c5fc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5fe:	780b      	ldrb	r3, [r1, #0]
 800c600:	065a      	lsls	r2, r3, #25
{
 800c602:	460d      	mov	r5, r1
 800c604:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c606:	d50c      	bpl.n	800c622 <USBD_StdItfReq+0x26>
 800c608:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800c60c:	2a40      	cmp	r2, #64	@ 0x40
 800c60e:	d008      	beq.n	800c622 <USBD_StdItfReq+0x26>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c610:	2180      	movs	r1, #128	@ 0x80
 800c612:	f002 ff61 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c616:	2100      	movs	r1, #0
 800c618:	4620      	mov	r0, r4
 800c61a:	f002 ff5d 	bl	800f4d8 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800c61e:	2000      	movs	r0, #0
}
 800c620:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800c622:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800c626:	3b01      	subs	r3, #1
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d802      	bhi.n	800c632 <USBD_StdItfReq+0x36>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c62c:	7929      	ldrb	r1, [r5, #4]
 800c62e:	2901      	cmp	r1, #1
 800c630:	d908      	bls.n	800c644 <USBD_StdItfReq+0x48>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c632:	2180      	movs	r1, #128	@ 0x80
 800c634:	4620      	mov	r0, r4
 800c636:	f002 ff4f 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c63a:	2100      	movs	r1, #0
 800c63c:	4620      	mov	r0, r4
 800c63e:	f002 ff4b 	bl	800f4d8 <USBD_LL_StallEP>
}
 800c642:	e7ec      	b.n	800c61e <USBD_StdItfReq+0x22>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c644:	4620      	mov	r0, r4
 800c646:	f7ff fe15 	bl	800c274 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c64a:	b988      	cbnz	r0, 800c670 <USBD_StdItfReq+0x74>
              if (pdev->pClass[idx]->Setup != NULL)
 800c64c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	b16b      	cbz	r3, 800c670 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800c654:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c658:	4629      	mov	r1, r5
 800c65a:	4620      	mov	r0, r4
 800c65c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c65e:	88ea      	ldrh	r2, [r5, #6]
 800c660:	2a00      	cmp	r2, #0
 800c662:	d1dd      	bne.n	800c620 <USBD_StdItfReq+0x24>
 800c664:	2800      	cmp	r0, #0
 800c666:	d1db      	bne.n	800c620 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 f911 	bl	800c890 <USBD_CtlSendStatus>
 800c66e:	e7d6      	b.n	800c61e <USBD_StdItfReq+0x22>
                ret = USBD_FAIL;
 800c670:	2003      	movs	r0, #3
}
 800c672:	bd38      	pop	{r3, r4, r5, pc}

0800c674 <USBD_StdEPReq>:
{
 800c674:	b530      	push	{r4, r5, lr}
 800c676:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800c678:	888a      	ldrh	r2, [r1, #4]
 800c67a:	7823      	ldrb	r3, [r4, #0]
 800c67c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c680:	2b20      	cmp	r3, #32
{
 800c682:	b083      	sub	sp, #12
 800c684:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 800c686:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c688:	d01e      	beq.n	800c6c8 <USBD_StdEPReq+0x54>
 800c68a:	2b40      	cmp	r3, #64	@ 0x40
 800c68c:	d01c      	beq.n	800c6c8 <USBD_StdEPReq+0x54>
 800c68e:	b36b      	cbz	r3, 800c6ec <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c690:	2180      	movs	r1, #128	@ 0x80
 800c692:	4628      	mov	r0, r5
 800c694:	f002 ff20 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c698:	2100      	movs	r1, #0
 800c69a:	4628      	mov	r0, r5
 800c69c:	f002 ff1c 	bl	800f4d8 <USBD_LL_StallEP>
}
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	b003      	add	sp, #12
 800c6a4:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800c6a6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	d05e      	beq.n	800c76e <USBD_StdEPReq+0xfa>
 800c6b0:	2a03      	cmp	r2, #3
 800c6b2:	d1ed      	bne.n	800c690 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6b4:	8863      	ldrh	r3, [r4, #2]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1f2      	bne.n	800c6a0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6ba:	064b      	lsls	r3, r1, #25
 800c6bc:	d17d      	bne.n	800c7ba <USBD_StdEPReq+0x146>
                (void)USBD_CtlSendStatus(pdev);
 800c6be:	4628      	mov	r0, r5
 800c6c0:	9101      	str	r1, [sp, #4]
 800c6c2:	f000 f8e5 	bl	800c890 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c6c6:	9901      	ldr	r1, [sp, #4]
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f7ff fdd5 	bl	800c278 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d1e6      	bne.n	800c6a0 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800c6d2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
                  pdev->classId = idx;
 800c6d6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0df      	beq.n	800c6a0 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4628      	mov	r0, r5
}
 800c6e4:	b003      	add	sp, #12
 800c6e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6ea:	4718      	bx	r3
      switch (req->bRequest)
 800c6ec:	7863      	ldrb	r3, [r4, #1]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d0d9      	beq.n	800c6a6 <USBD_StdEPReq+0x32>
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d02a      	beq.n	800c74c <USBD_StdEPReq+0xd8>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1ca      	bne.n	800c690 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800c6fa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	b2d8      	uxtb	r0, r3
 800c702:	d03d      	beq.n	800c780 <USBD_StdEPReq+0x10c>
 800c704:	2803      	cmp	r0, #3
 800c706:	d1c3      	bne.n	800c690 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c708:	f001 030f 	and.w	r3, r1, #15
 800c70c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c710:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c712:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c716:	d442      	bmi.n	800c79e <USBD_StdEPReq+0x12a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c718:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0b7      	beq.n	800c690 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c720:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800c724:	2414      	movs	r4, #20
 800c726:	fb04 5403 	mla	r4, r4, r3, r5
 800c72a:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d041      	beq.n	800c7b6 <USBD_StdEPReq+0x142>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c732:	4628      	mov	r0, r5
 800c734:	f002 fee8 	bl	800f508 <USBD_LL_IsStallEP>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d03c      	beq.n	800c7b6 <USBD_StdEPReq+0x142>
 800c73c:	2301      	movs	r3, #1
                pep->status = 0x0000U;
 800c73e:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c740:	2202      	movs	r2, #2
 800c742:	4621      	mov	r1, r4
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f885 	bl	800c854 <USBD_CtlSendData>
              break;
 800c74a:	e7a9      	b.n	800c6a0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800c74c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c750:	2b02      	cmp	r3, #2
 800c752:	b2da      	uxtb	r2, r3
 800c754:	d00b      	beq.n	800c76e <USBD_StdEPReq+0xfa>
 800c756:	2a03      	cmp	r2, #3
 800c758:	d19a      	bne.n	800c690 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c75a:	8863      	ldrh	r3, [r4, #2]
 800c75c:	b91b      	cbnz	r3, 800c766 <USBD_StdEPReq+0xf2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c75e:	0648      	lsls	r0, r1, #25
 800c760:	d001      	beq.n	800c766 <USBD_StdEPReq+0xf2>
 800c762:	88e3      	ldrh	r3, [r4, #6]
 800c764:	b373      	cbz	r3, 800c7c4 <USBD_StdEPReq+0x150>
              (void)USBD_CtlSendStatus(pdev);
 800c766:	4628      	mov	r0, r5
 800c768:	f000 f892 	bl	800c890 <USBD_CtlSendStatus>
              break;
 800c76c:	e798      	b.n	800c6a0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c76e:	064a      	lsls	r2, r1, #25
 800c770:	d08e      	beq.n	800c690 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c772:	f002 feb1 	bl	800f4d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c776:	2180      	movs	r1, #128	@ 0x80
 800c778:	4628      	mov	r0, r5
 800c77a:	f002 fead 	bl	800f4d8 <USBD_LL_StallEP>
 800c77e:	e78f      	b.n	800c6a0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c780:	0648      	lsls	r0, r1, #25
 800c782:	d185      	bne.n	800c690 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c784:	0611      	lsls	r1, r2, #24
 800c786:	bf4c      	ite	mi
 800c788:	f105 0114 	addmi.w	r1, r5, #20
 800c78c:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800c790:	2300      	movs	r3, #0
 800c792:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c794:	2202      	movs	r2, #2
 800c796:	4628      	mov	r0, r5
 800c798:	f000 f85c 	bl	800c854 <USBD_CtlSendData>
              break;
 800c79c:	e780      	b.n	800c6a0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c79e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f43f af75 	beq.w	800c690 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7a6:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800c7aa:	1c5c      	adds	r4, r3, #1
 800c7ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c7b0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800c7b4:	e7bb      	b.n	800c72e <USBD_StdEPReq+0xba>
{
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e7c1      	b.n	800c73e <USBD_StdEPReq+0xca>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7ba:	9101      	str	r1, [sp, #4]
 800c7bc:	f002 fe98 	bl	800f4f0 <USBD_LL_ClearStallEP>
 800c7c0:	9901      	ldr	r1, [sp, #4]
 800c7c2:	e77c      	b.n	800c6be <USBD_StdEPReq+0x4a>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f002 fe87 	bl	800f4d8 <USBD_LL_StallEP>
 800c7ca:	e7cc      	b.n	800c766 <USBD_StdEPReq+0xf2>

0800c7cc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c7cc:	780b      	ldrb	r3, [r1, #0]
 800c7ce:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7d0:	784b      	ldrb	r3, [r1, #1]
 800c7d2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 800c7d4:	884b      	ldrh	r3, [r1, #2]
 800c7d6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 800c7d8:	888b      	ldrh	r3, [r1, #4]
 800c7da:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 800c7dc:	88cb      	ldrh	r3, [r1, #6]
 800c7de:	80c3      	strh	r3, [r0, #6]
}
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop

0800c7e4 <USBD_CtlError>:
{
 800c7e4:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7e6:	2180      	movs	r1, #128	@ 0x80
{
 800c7e8:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ea:	f002 fe75 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	2100      	movs	r1, #0
}
 800c7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7f6:	f002 be6f 	b.w	800f4d8 <USBD_LL_StallEP>
 800c7fa:	bf00      	nop

0800c7fc <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c7fc:	b330      	cbz	r0, 800c84c <USBD_GetString+0x50>
{
 800c7fe:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c800:	7803      	ldrb	r3, [r0, #0]
 800c802:	460e      	mov	r6, r1
 800c804:	4614      	mov	r4, r2
 800c806:	4605      	mov	r5, r0
 800c808:	b30b      	cbz	r3, 800c84e <USBD_GetString+0x52>
 800c80a:	4603      	mov	r3, r0
 800c80c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c810:	2900      	cmp	r1, #0
 800c812:	d1fb      	bne.n	800c80c <USBD_GetString+0x10>
 800c814:	1c68      	adds	r0, r5, #1
 800c816:	f7f3 fcfd 	bl	8000214 <strlen>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	3301      	adds	r3, #1
 800c820:	005b      	lsls	r3, r3, #1
 800c822:	b2da      	uxtb	r2, r3
 800c824:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c826:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800c828:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c82a:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 800c82c:	782c      	ldrb	r4, [r5, #0]
 800c82e:	b164      	cbz	r4, 800c84a <USBD_GetString+0x4e>
 800c830:	4628      	mov	r0, r5
  idx++;
 800c832:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c834:	2100      	movs	r1, #0
    idx++;
 800c836:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800c838:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800c83a:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 800c83c:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 800c83e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800c842:	3302      	adds	r3, #2
 800c844:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c846:	2c00      	cmp	r4, #0
 800c848:	d1f5      	bne.n	800c836 <USBD_GetString+0x3a>
}
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800c84e:	2202      	movs	r2, #2
 800c850:	4613      	mov	r3, r2
 800c852:	e7e7      	b.n	800c824 <USBD_GetString+0x28>

0800c854 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c854:	b508      	push	{r3, lr}
 800c856:	4613      	mov	r3, r2
 800c858:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c85a:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 800c85c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c860:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c864:	2100      	movs	r1, #0
 800c866:	f002 fe6f 	bl	800f548 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c86a:	2000      	movs	r0, #0
 800c86c:	bd08      	pop	{r3, pc}
 800c86e:	bf00      	nop

0800c870 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c870:	b508      	push	{r3, lr}
 800c872:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c874:	460a      	mov	r2, r1
 800c876:	2100      	movs	r1, #0
 800c878:	f002 fe66 	bl	800f548 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c87c:	2000      	movs	r0, #0
 800c87e:	bd08      	pop	{r3, pc}

0800c880 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c880:	b508      	push	{r3, lr}
 800c882:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c884:	460a      	mov	r2, r1
 800c886:	2100      	movs	r1, #0
 800c888:	f002 fe6a 	bl	800f560 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c88c:	2000      	movs	r0, #0
 800c88e:	bd08      	pop	{r3, pc}

0800c890 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c890:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c892:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c894:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c896:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c89a:	461a      	mov	r2, r3
 800c89c:	4619      	mov	r1, r3
 800c89e:	f002 fe53 	bl	800f548 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	bd08      	pop	{r3, pc}
 800c8a6:	bf00      	nop

0800c8a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8a8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8aa:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8ac:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8ae:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f002 fe53 	bl	800f560 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	bd08      	pop	{r3, pc}
 800c8be:	bf00      	nop

0800c8c0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c8c0:	4b03      	ldr	r3, [pc, #12]	@ (800c8d0 <disk_status+0x10>)
 800c8c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800c8c6:	4403      	add	r3, r0
 800c8c8:	6852      	ldr	r2, [r2, #4]
 800c8ca:	7a18      	ldrb	r0, [r3, #8]
 800c8cc:	6853      	ldr	r3, [r2, #4]
 800c8ce:	4718      	bx	r3
 800c8d0:	20000b20 	.word	0x20000b20

0800c8d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c8d4:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800c8d6:	4d09      	ldr	r5, [pc, #36]	@ (800c8fc <disk_initialize+0x28>)
 800c8d8:	5c2b      	ldrb	r3, [r5, r0]
 800c8da:	b10b      	cbz	r3, 800c8e0 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800c8dc:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8e0:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800c8e4:	182b      	adds	r3, r5, r0
 800c8e6:	6852      	ldr	r2, [r2, #4]
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	7a18      	ldrb	r0, [r3, #8]
 800c8ec:	6813      	ldr	r3, [r2, #0]
 800c8ee:	4798      	blx	r3
    if(stat == RES_OK)
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d1f4      	bne.n	800c8de <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	552b      	strb	r3, [r5, r4]
 800c8f8:	e7f0      	b.n	800c8dc <disk_initialize+0x8>
 800c8fa:	bf00      	nop
 800c8fc:	20000b20 	.word	0x20000b20

0800c900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c900:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c902:	4c05      	ldr	r4, [pc, #20]	@ (800c918 <disk_read+0x18>)
 800c904:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800c908:	4404      	add	r4, r0
 800c90a:	686d      	ldr	r5, [r5, #4]
 800c90c:	7a20      	ldrb	r0, [r4, #8]
 800c90e:	68ac      	ldr	r4, [r5, #8]
 800c910:	46a4      	mov	ip, r4
  return res;
}
 800c912:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c914:	4760      	bx	ip
 800c916:	bf00      	nop
 800c918:	20000b20 	.word	0x20000b20

0800c91c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c91c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c91e:	4c05      	ldr	r4, [pc, #20]	@ (800c934 <disk_write+0x18>)
 800c920:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800c924:	4404      	add	r4, r0
 800c926:	686d      	ldr	r5, [r5, #4]
 800c928:	7a20      	ldrb	r0, [r4, #8]
 800c92a:	68ec      	ldr	r4, [r5, #12]
 800c92c:	46a4      	mov	ip, r4
  return res;
}
 800c92e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c930:	4760      	bx	ip
 800c932:	bf00      	nop
 800c934:	20000b20 	.word	0x20000b20

0800c938 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c938:	4b04      	ldr	r3, [pc, #16]	@ (800c94c <disk_ioctl+0x14>)
 800c93a:	eb03 0c00 	add.w	ip, r3, r0
 800c93e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c942:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	4718      	bx	r3
 800c94c:	20000b20 	.word	0x20000b20

0800c950 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c950:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800c952:	4b29      	ldr	r3, [pc, #164]	@ (800c9f8 <inc_lock+0xa8>)
{
 800c954:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	6815      	ldr	r5, [r2, #0]
 800c95a:	4285      	cmp	r5, r0
 800c95c:	d024      	beq.n	800c9a8 <inc_lock+0x58>
 800c95e:	691c      	ldr	r4, [r3, #16]
 800c960:	42ac      	cmp	r4, r5
 800c962:	d006      	beq.n	800c972 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c964:	2800      	cmp	r0, #0
 800c966:	d02f      	beq.n	800c9c8 <inc_lock+0x78>
 800c968:	2c00      	cmp	r4, #0
 800c96a:	d041      	beq.n	800c9f0 <inc_lock+0xa0>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c96c:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800c96e:	bcf0      	pop	{r4, r5, r6, r7}
 800c970:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800c972:	695e      	ldr	r6, [r3, #20]
 800c974:	6897      	ldr	r7, [r2, #8]
 800c976:	42be      	cmp	r6, r7
 800c978:	d1f4      	bne.n	800c964 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800c97a:	699e      	ldr	r6, [r3, #24]
 800c97c:	6957      	ldr	r7, [r2, #20]
 800c97e:	42be      	cmp	r6, r7
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c980:	bf08      	it	eq
 800c982:	f04f 0c01 	moveq.w	ip, #1
			Files[i].clu == dp->obj.sclust &&
 800c986:	d1ed      	bne.n	800c964 <inc_lock+0x14>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c988:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800c98c:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800c990:	8992      	ldrh	r2, [r2, #12]
 800c992:	b1a1      	cbz	r1, 800c9be <inc_lock+0x6e>
 800c994:	2a00      	cmp	r2, #0
 800c996:	d1e9      	bne.n	800c96c <inc_lock+0x1c>
	return i + 1;
 800c998:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c99c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c9a0:	4423      	add	r3, r4
}
 800c9a2:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9a4:	819a      	strh	r2, [r3, #12]
}
 800c9a6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800c9a8:	6894      	ldr	r4, [r2, #8]
 800c9aa:	685e      	ldr	r6, [r3, #4]
 800c9ac:	42a6      	cmp	r6, r4
 800c9ae:	d1d6      	bne.n	800c95e <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800c9b0:	6954      	ldr	r4, [r2, #20]
 800c9b2:	689e      	ldr	r6, [r3, #8]
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	d1d2      	bne.n	800c95e <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9b8:	f04f 0c00 	mov.w	ip, #0
 800c9bc:	e7e4      	b.n	800c988 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9be:	3201      	adds	r2, #1
 800c9c0:	b292      	uxth	r2, r2
	return i + 1;
 800c9c2:	f10c 0001 	add.w	r0, ip, #1
 800c9c6:	e7eb      	b.n	800c9a0 <inc_lock+0x50>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9c8:	4684      	mov	ip, r0
 800c9ca:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800c9cc:	ea4f 140c 	mov.w	r4, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9d0:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800c9d2:	511d      	str	r5, [r3, r4]
		Files[i].clu = dp->obj.sclust;
 800c9d4:	6895      	ldr	r5, [r2, #8]
 800c9d6:	6952      	ldr	r2, [r2, #20]
		Files[i].fs = dp->obj.fs;
 800c9d8:	eb03 110c 	add.w	r1, r3, ip, lsl #4
		Files[i].clu = dp->obj.sclust;
 800c9dc:	e9c1 5201 	strd	r5, r2, [r1, #4]
		Files[i].ctr = 0;
 800c9e0:	f04f 0200 	mov.w	r2, #0
 800c9e4:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9e6:	bf14      	ite	ne
 800c9e8:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800c9ec:	2201      	moveq	r2, #1
 800c9ee:	e7d7      	b.n	800c9a0 <inc_lock+0x50>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9f0:	2002      	movs	r0, #2
 800c9f2:	f04f 0c01 	mov.w	ip, #1
 800c9f6:	e7e9      	b.n	800c9cc <inc_lock+0x7c>
 800c9f8:	20000af8 	.word	0x20000af8

0800c9fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ca00:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 800ca02:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800ca06:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca08:	69c3      	ldr	r3, [r0, #28]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d058      	beq.n	800cac0 <get_fileinfo+0xc4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ca0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca10:	3301      	adds	r3, #1
 800ca12:	4607      	mov	r7, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	d01d      	beq.n	800ca54 <get_fileinfo+0x58>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca1c:	8818      	ldrh	r0, [r3, #0]
 800ca1e:	b1a0      	cbz	r0, 800ca4a <get_fileinfo+0x4e>
 800ca20:	f101 0615 	add.w	r6, r1, #21
 800ca24:	2401      	movs	r4, #1
 800ca26:	e00b      	b.n	800ca40 <get_fileinfo+0x44>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ca28:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800ca2c:	d00d      	beq.n	800ca4a <get_fileinfo+0x4e>
				fno->fname[i++] = (TCHAR)w;
 800ca2e:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca36:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800ca3a:	1c62      	adds	r2, r4, #1
 800ca3c:	b130      	cbz	r0, 800ca4c <get_fileinfo+0x50>
 800ca3e:	4614      	mov	r4, r2
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ca40:	2100      	movs	r1, #0
 800ca42:	f002 fa31 	bl	800eea8 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d1ee      	bne.n	800ca28 <get_fileinfo+0x2c>
			i = j = 0;
 800ca4a:	2400      	movs	r4, #0
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ca4c:	442c      	add	r4, r5
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75a3      	strb	r3, [r4, #22]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ca52:	7dae      	ldrb	r6, [r5, #22]
 800ca54:	6a3f      	ldr	r7, [r7, #32]
	i = j = 0;
 800ca56:	2000      	movs	r0, #0
 800ca58:	1e7c      	subs	r4, r7, #1
 800ca5a:	4602      	mov	r2, r0
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ca5c:	f04f 08e5 	mov.w	r8, #229	@ 0xe5
		c = (TCHAR)dp->dir[i++];
 800ca60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca64:	2b20      	cmp	r3, #32
		c = (TCHAR)dp->dir[i++];
 800ca66:	f102 0201 	add.w	r2, r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca6a:	d01a      	beq.n	800caa2 <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ca6c:	2b05      	cmp	r3, #5
 800ca6e:	d029      	beq.n	800cac4 <get_fileinfo+0xc8>
		if (i == 9) {						/* Insert a . if extension is exist */
 800ca70:	2a09      	cmp	r2, #9
 800ca72:	d030      	beq.n	800cad6 <get_fileinfo+0xda>
		fno->altname[j] = c;
 800ca74:	1829      	adds	r1, r5, r0
 800ca76:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800ca78:	b996      	cbnz	r6, 800caa0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ca7a:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 800ca7e:	f1bc 0f19 	cmp.w	ip, #25
 800ca82:	d80c      	bhi.n	800ca9e <get_fileinfo+0xa2>
 800ca84:	2a09      	cmp	r2, #9
 800ca86:	f897 e00c 	ldrb.w	lr, [r7, #12]
 800ca8a:	bf34      	ite	cc
 800ca8c:	f04f 0c08 	movcc.w	ip, #8
 800ca90:	f04f 0c10 	movcs.w	ip, #16
 800ca94:	ea1e 0f0c 	tst.w	lr, ip
 800ca98:	d001      	beq.n	800ca9e <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800ca9a:	3320      	adds	r3, #32
 800ca9c:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 800ca9e:	758b      	strb	r3, [r1, #22]
		}
		j++;
 800caa0:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 800caa2:	2a0b      	cmp	r2, #11
 800caa4:	d1dc      	bne.n	800ca60 <get_fileinfo+0x64>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 800caa6:	1829      	adds	r1, r5, r0
	if (!lfv) {
 800caa8:	b3c6      	cbz	r6, 800cb1c <get_fileinfo+0x120>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800caaa:	2300      	movs	r3, #0
 800caac:	724b      	strb	r3, [r1, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800cab2:	69fb      	ldr	r3, [r7, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cab4:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800cab6:	f8d7 3016 	ldr.w	r3, [r7, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800caba:	80eb      	strh	r3, [r5, #6]
 800cabc:	0c1b      	lsrs	r3, r3, #16
 800cabe:	80ab      	strh	r3, [r5, #4]
}
 800cac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (i == 9) {						/* Insert a . if extension is exist */
 800cac4:	2a09      	cmp	r2, #9
 800cac6:	d02f      	beq.n	800cb28 <get_fileinfo+0x12c>
		fno->altname[j] = c;
 800cac8:	1829      	adds	r1, r5, r0
 800caca:	f881 8009 	strb.w	r8, [r1, #9]
		if (!lfv) {
 800cace:	2e00      	cmp	r6, #0
 800cad0:	d1e6      	bne.n	800caa0 <get_fileinfo+0xa4>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cad2:	23e5      	movs	r3, #229	@ 0xe5
 800cad4:	e7e3      	b.n	800ca9e <get_fileinfo+0xa2>
			fno->altname[j++] = '.';
 800cad6:	f100 0c01 	add.w	ip, r0, #1
			if (!lfv) fno->fname[j] = '.';
 800cada:	b9ae      	cbnz	r6, 800cb08 <get_fileinfo+0x10c>
 800cadc:	eb05 0e00 	add.w	lr, r5, r0
 800cae0:	f04f 092e 	mov.w	r9, #46	@ 0x2e
 800cae4:	f88e 9016 	strb.w	r9, [lr, #22]
			fno->altname[j++] = '.';
 800cae8:	f88e 9009 	strb.w	r9, [lr, #9]
		fno->altname[j] = c;
 800caec:	eb05 010c 	add.w	r1, r5, ip
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800caf0:	f1a3 0e41 	sub.w	lr, r3, #65	@ 0x41
 800caf4:	f1be 0f19 	cmp.w	lr, #25
		fno->altname[j] = c;
 800caf8:	724b      	strb	r3, [r1, #9]
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cafa:	d82a      	bhi.n	800cb52 <get_fileinfo+0x156>
			fno->altname[j++] = '.';
 800cafc:	4660      	mov	r0, ip
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cafe:	f897 e00c 	ldrb.w	lr, [r7, #12]
 800cb02:	f04f 0c10 	mov.w	ip, #16
 800cb06:	e7c5      	b.n	800ca94 <get_fileinfo+0x98>
			fno->altname[j++] = '.';
 800cb08:	1829      	adds	r1, r5, r0
		fno->altname[j] = c;
 800cb0a:	44ac      	add	ip, r5
			fno->altname[j++] = '.';
 800cb0c:	f04f 0e2e 	mov.w	lr, #46	@ 0x2e
 800cb10:	f881 e009 	strb.w	lr, [r1, #9]
 800cb14:	3002      	adds	r0, #2
		fno->altname[j] = c;
 800cb16:	f88c 3009 	strb.w	r3, [ip, #9]
	while (i < 11) {		/* Copy name body and extension */
 800cb1a:	e7a1      	b.n	800ca60 <get_fileinfo+0x64>
		fno->fname[j] = 0;
 800cb1c:	758e      	strb	r6, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cb1e:	7b3b      	ldrb	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	bf08      	it	eq
 800cb24:	4629      	moveq	r1, r5
 800cb26:	e7c0      	b.n	800caaa <get_fileinfo+0xae>
			fno->altname[j++] = '.';
 800cb28:	1c43      	adds	r3, r0, #1
		fno->altname[j] = c;
 800cb2a:	442b      	add	r3, r5
			if (!lfv) fno->fname[j] = '.';
 800cb2c:	1829      	adds	r1, r5, r0
 800cb2e:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
 800cb32:	b12e      	cbz	r6, 800cb40 <get_fileinfo+0x144>
			fno->altname[j++] = '.';
 800cb34:	f881 c009 	strb.w	ip, [r1, #9]
		fno->altname[j] = c;
 800cb38:	21e5      	movs	r1, #229	@ 0xe5
			fno->altname[j++] = '.';
 800cb3a:	3002      	adds	r0, #2
		fno->altname[j] = c;
 800cb3c:	7259      	strb	r1, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800cb3e:	e78f      	b.n	800ca60 <get_fileinfo+0x64>
			if (!lfv) fno->fname[j] = '.';
 800cb40:	f881 c016 	strb.w	ip, [r1, #22]
			fno->altname[j++] = '.';
 800cb44:	f881 c009 	strb.w	ip, [r1, #9]
		fno->altname[j] = c;
 800cb48:	21e5      	movs	r1, #229	@ 0xe5
			if (!lfv) fno->fname[j] = '.';
 800cb4a:	3002      	adds	r0, #2
		fno->altname[j] = c;
 800cb4c:	7259      	strb	r1, [r3, #9]
			fno->fname[j] = c;
 800cb4e:	7599      	strb	r1, [r3, #22]
	while (i < 11) {		/* Copy name body and extension */
 800cb50:	e786      	b.n	800ca60 <get_fileinfo+0x64>
			fno->fname[j] = c;
 800cb52:	758b      	strb	r3, [r1, #22]
		j++;
 800cb54:	3002      	adds	r0, #2
	while (i < 11) {		/* Copy name body and extension */
 800cb56:	e783      	b.n	800ca60 <get_fileinfo+0x64>

0800cb58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cb58:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cb5a:	f04f 36ff 	mov.w	r6, #4294967295
 800cb5e:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb60:	42b1      	cmp	r1, r6
{
 800cb62:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cb64:	70c3      	strb	r3, [r0, #3]
 800cb66:	6306      	str	r6, [r0, #48]	@ 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb68:	d122      	bne.n	800cbb0 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cb6a:	f8b4 2232 	ldrh.w	r2, [r4, #562]	@ 0x232
 800cb6e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d11a      	bne.n	800cbac <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cb76:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800cb7a:	2be9      	cmp	r3, #233	@ 0xe9
 800cb7c:	d007      	beq.n	800cb8e <check_fs+0x36>
 800cb7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb80:	4a13      	ldr	r2, [pc, #76]	@ (800cbd0 <check_fs+0x78>)
 800cb82:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d001      	beq.n	800cb8e <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb8a:	2002      	movs	r0, #2
}
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800cb8e:	f8d4 306a 	ldr.w	r3, [r4, #106]	@ 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cb92:	4a10      	ldr	r2, [pc, #64]	@ (800cbd4 <check_fs+0x7c>)
 800cb94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d017      	beq.n	800cbcc <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800cb9c:	f8d4 0086 	ldr.w	r0, [r4, #134]	@ 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cba0:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd8 <check_fs+0x80>)
 800cba2:	1ac0      	subs	r0, r0, r3
 800cba4:	bf18      	it	ne
 800cba6:	2001      	movne	r0, #1
 800cba8:	0040      	lsls	r0, r0, #1
}
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cbac:	2003      	movs	r0, #3
}
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	460a      	mov	r2, r1
 800cbb4:	7840      	ldrb	r0, [r0, #1]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800cbbc:	f7ff fea0 	bl	800c900 <disk_read>
 800cbc0:	b110      	cbz	r0, 800cbc8 <check_fs+0x70>
			fs->winsect = sector;
 800cbc2:	6326      	str	r6, [r4, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cbc4:	2004      	movs	r0, #4
}
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800cbc8:	6325      	str	r5, [r4, #48]	@ 0x30
	return res;
 800cbca:	e7ce      	b.n	800cb6a <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cbcc:	2000      	movs	r0, #0
}
 800cbce:	bd70      	pop	{r4, r5, r6, pc}
 800cbd0:	009000eb 	.word	0x009000eb
 800cbd4:	00544146 	.word	0x00544146
 800cbd8:	33544146 	.word	0x33544146

0800cbdc <sync_fs>:
{
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cbde:	78c3      	ldrb	r3, [r0, #3]
{
 800cbe0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cbe2:	b95b      	cbnz	r3, 800cbfc <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cbe4:	7823      	ldrb	r3, [r4, #0]
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d02a      	beq.n	800cc40 <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cbea:	2200      	movs	r2, #0
 800cbec:	7860      	ldrb	r0, [r4, #1]
 800cbee:	4611      	mov	r1, r2
 800cbf0:	f7ff fea2 	bl	800c938 <disk_ioctl>
 800cbf4:	3800      	subs	r0, #0
 800cbf6:	bf18      	it	ne
 800cbf8:	2001      	movne	r0, #1
}
 800cbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800cbfc:	6b05      	ldr	r5, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cbfe:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 800cc02:	2301      	movs	r3, #1
 800cc04:	7840      	ldrb	r0, [r0, #1]
 800cc06:	462a      	mov	r2, r5
 800cc08:	4639      	mov	r1, r7
 800cc0a:	f7ff fe87 	bl	800c91c <disk_write>
 800cc0e:	b9a8      	cbnz	r0, 800cc3c <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc10:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cc12:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800cc14:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc16:	1aaa      	subs	r2, r5, r2
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d2e3      	bcs.n	800cbe4 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc1c:	78a6      	ldrb	r6, [r4, #2]
 800cc1e:	2e01      	cmp	r6, #1
 800cc20:	d801      	bhi.n	800cc26 <sync_fs+0x4a>
 800cc22:	e7df      	b.n	800cbe4 <sync_fs+0x8>
					wsect += fs->fsize;
 800cc24:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc26:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800cc28:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc2e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7ff fe73 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc36:	2e01      	cmp	r6, #1
 800cc38:	d1f4      	bne.n	800cc24 <sync_fs+0x48>
 800cc3a:	e7d3      	b.n	800cbe4 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800cc3c:	2001      	movs	r0, #1
}
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc40:	7925      	ldrb	r5, [r4, #4]
 800cc42:	2d01      	cmp	r5, #1
 800cc44:	d1d1      	bne.n	800cbea <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800cc46:	f104 0634 	add.w	r6, r4, #52	@ 0x34
		*d++ = (BYTE)val;
 800cc4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4630      	mov	r0, r6
 800cc52:	f002 ff33 	bl	800fabc <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800cc56:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cc5a:	f8c4 221c 	str.w	r2, [r4, #540]	@ 0x21c
			fs->winsect = fs->volbase + 1;
 800cc5e:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc60:	490a      	ldr	r1, [pc, #40]	@ (800cc8c <sync_fs+0xb0>)
 800cc62:	480b      	ldr	r0, [pc, #44]	@ (800cc90 <sync_fs+0xb4>)
 800cc64:	6361      	str	r1, [r4, #52]	@ 0x34
			fs->winsect = fs->volbase + 1;
 800cc66:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800cc68:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cc6c:	f8a4 1232 	strh.w	r1, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 800cc70:	f8c4 3220 	str.w	r3, [r4, #544]	@ 0x220
 800cc74:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc78:	462b      	mov	r3, r5
 800cc7a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800cc7c:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc7e:	4631      	mov	r1, r6
 800cc80:	f7ff fe4c 	bl	800c91c <disk_write>
			fs->fsi_flag = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	7123      	strb	r3, [r4, #4]
 800cc88:	e7af      	b.n	800cbea <sync_fs+0xe>
 800cc8a:	bf00      	nop
 800cc8c:	41615252 	.word	0x41615252
 800cc90:	61417272 	.word	0x61417272

0800cc94 <move_window>:
{
 800cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc98:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800cc9a:	428e      	cmp	r6, r1
 800cc9c:	d102      	bne.n	800cca4 <move_window+0x10>
	FRESULT res = FR_OK;
 800cc9e:	2000      	movs	r0, #0
}
 800cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cca4:	4604      	mov	r4, r0
 800cca6:	460d      	mov	r5, r1
 800cca8:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ccaa:	7840      	ldrb	r0, [r0, #1]
 800ccac:	f104 0734 	add.w	r7, r4, #52	@ 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ccb0:	b963      	cbnz	r3, 800cccc <move_window+0x38>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7ff fe22 	bl	800c900 <disk_read>
				res = FR_DISK_ERR;
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	bf1c      	itt	ne
 800ccc0:	f04f 35ff 	movne.w	r5, #4294967295
 800ccc4:	2001      	movne	r0, #1
			fs->winsect = sector;
 800ccc6:	6325      	str	r5, [r4, #48]	@ 0x30
}
 800ccc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cccc:	2301      	movs	r3, #1
 800ccce:	4632      	mov	r2, r6
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	f7ff fe23 	bl	800c91c <disk_write>
 800ccd6:	b9d0      	cbnz	r0, 800cd0e <move_window+0x7a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccd8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ccda:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 800ccdc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccde:	1ab2      	subs	r2, r6, r2
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d212      	bcs.n	800cd0a <move_window+0x76>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cce4:	f894 8002 	ldrb.w	r8, [r4, #2]
 800cce8:	f1b8 0f01 	cmp.w	r8, #1
 800ccec:	d801      	bhi.n	800ccf2 <move_window+0x5e>
 800ccee:	e00c      	b.n	800cd0a <move_window+0x76>
					wsect += fs->fsize;
 800ccf0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccf2:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800ccf4:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccfa:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f7ff fe0c 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd04:	f1b8 0f01 	cmp.w	r8, #1
 800cd08:	d1f2      	bne.n	800ccf0 <move_window+0x5c>
 800cd0a:	7860      	ldrb	r0, [r4, #1]
 800cd0c:	e7d1      	b.n	800ccb2 <move_window+0x1e>
			res = FR_DISK_ERR;
 800cd0e:	2001      	movs	r0, #1
 800cd10:	e7c6      	b.n	800cca0 <move_window+0xc>
 800cd12:	bf00      	nop

0800cd14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 800cd18:	6804      	ldr	r4, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800cd1e:	b184      	cbz	r4, 800cd42 <find_volume+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd20:	7825      	ldrb	r5, [r4, #0]
 800cd22:	2d1f      	cmp	r5, #31
 800cd24:	d913      	bls.n	800cd4e <find_volume+0x3a>
 800cd26:	462b      	mov	r3, r5
 800cd28:	46a4      	mov	ip, r4
 800cd2a:	e003      	b.n	800cd34 <find_volume+0x20>
 800cd2c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800cd30:	2b1f      	cmp	r3, #31
 800cd32:	d90c      	bls.n	800cd4e <find_volume+0x3a>
 800cd34:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd36:	d1f9      	bne.n	800cd2c <find_volume+0x18>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd38:	2d30      	cmp	r5, #48	@ 0x30
 800cd3a:	d102      	bne.n	800cd42 <find_volume+0x2e>
			i = *tp++ - '0';
 800cd3c:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd3e:	45a4      	cmp	ip, r4
 800cd40:	d002      	beq.n	800cd48 <find_volume+0x34>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd42:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					*path = ++tt;
 800cd48:	f10c 0301 	add.w	r3, ip, #1
 800cd4c:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd4e:	4b9e      	ldr	r3, [pc, #632]	@ (800cfc8 <find_volume+0x2b4>)
 800cd50:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	f000 80c8 	beq.w	800cee8 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800cd58:	600c      	str	r4, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd5a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd5c:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd60:	b153      	cbz	r3, 800cd78 <find_volume+0x64>
		stat = disk_status(fs->drv);
 800cd62:	7860      	ldrb	r0, [r4, #1]
 800cd64:	f7ff fdac 	bl	800c8c0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd68:	07c3      	lsls	r3, r0, #31
 800cd6a:	d405      	bmi.n	800cd78 <find_volume+0x64>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd6c:	b115      	cbz	r5, 800cd74 <find_volume+0x60>
 800cd6e:	0747      	lsls	r7, r0, #29
 800cd70:	f100 80b7 	bmi.w	800cee2 <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800cd74:	2000      	movs	r0, #0
 800cd76:	e08e      	b.n	800ce96 <find_volume+0x182>
	fs->fs_type = 0;					/* Clear the file system object */
 800cd78:	2000      	movs	r0, #0
 800cd7a:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cd7c:	f7ff fdaa 	bl	800c8d4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd80:	07c6      	lsls	r6, r0, #31
 800cd82:	f100 808a 	bmi.w	800ce9a <find_volume+0x186>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd86:	b115      	cbz	r5, 800cd8e <find_volume+0x7a>
 800cd88:	0745      	lsls	r5, r0, #29
 800cd8a:	f100 80aa 	bmi.w	800cee2 <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd8e:	2100      	movs	r1, #0
 800cd90:	4620      	mov	r0, r4
 800cd92:	f7ff fee1 	bl	800cb58 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd96:	2802      	cmp	r0, #2
 800cd98:	f000 8082 	beq.w	800cea0 <find_volume+0x18c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd9c:	2804      	cmp	r0, #4
 800cd9e:	f000 80ae 	beq.w	800cefe <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cda2:	2801      	cmp	r0, #1
 800cda4:	bf98      	it	ls
 800cda6:	2500      	movls	r5, #0
 800cda8:	d874      	bhi.n	800ce94 <find_volume+0x180>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cdaa:	f8b4 303f 	ldrh.w	r3, [r4, #63]	@ 0x3f
 800cdae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdb2:	d16f      	bne.n	800ce94 <find_volume+0x180>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cdb4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cdb8:	b901      	cbnz	r1, 800cdbc <find_volume+0xa8>
	rv = rv << 8 | ptr[0];
 800cdba:	6da1      	ldr	r1, [r4, #88]	@ 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdbc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
		fs->fsize = fasize;
 800cdc0:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdc2:	1e53      	subs	r3, r2, #1
 800cdc4:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdc6:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdc8:	d864      	bhi.n	800ce94 <find_volume+0x180>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdca:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cdce:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d05f      	beq.n	800ce94 <find_volume+0x180>
 800cdd4:	1e58      	subs	r0, r3, #1
 800cdd6:	4218      	tst	r0, r3
 800cdd8:	d15c      	bne.n	800ce94 <find_volume+0x180>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdda:	f8b4 7045 	ldrh.w	r7, [r4, #69]	@ 0x45
 800cdde:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cde0:	0738      	lsls	r0, r7, #28
 800cde2:	d157      	bne.n	800ce94 <find_volume+0x180>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cde4:	f8b4 0047 	ldrh.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cde8:	b900      	cbnz	r0, 800cdec <find_volume+0xd8>
	rv = rv << 8 | ptr[0];
 800cdea:	6d60      	ldr	r0, [r4, #84]	@ 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cdec:	f8b4 c042 	ldrh.w	ip, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cdf0:	f1bc 0f00 	cmp.w	ip, #0
 800cdf4:	d04e      	beq.n	800ce94 <find_volume+0x180>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdf6:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdfa:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800cdfe:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce00:	42b0      	cmp	r0, r6
 800ce02:	d347      	bcc.n	800ce94 <find_volume+0x180>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce04:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce06:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce08:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce0c:	d342      	bcc.n	800ce94 <find_volume+0x180>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce0e:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce12:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
 800ce16:	45e6      	cmp	lr, ip
		fs->database = bsect + sysect;					/* Data start sector */
 800ce18:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce1a:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce1e:	f240 808c 	bls.w	800cf3a <find_volume+0x226>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce22:	6263      	str	r3, [r4, #36]	@ 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce24:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
		fs->database = bsect + sysect;					/* Data start sector */
 800ce28:	62e6      	str	r6, [r4, #44]	@ 0x2c
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce2a:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce2c:	61a0      	str	r0, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ce2e:	6225      	str	r5, [r4, #32]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce30:	d130      	bne.n	800ce94 <find_volume+0x180>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce32:	0083      	lsls	r3, r0, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce34:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
	rv = rv << 8 | ptr[0];
 800ce38:	6e22      	ldr	r2, [r4, #96]	@ 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce3a:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce3c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800ce40:	d328      	bcc.n	800ce94 <find_volume+0x180>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce42:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce46:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800ce4a:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce4c:	2a01      	cmp	r2, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce4e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800ce52:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce54:	f000 8096 	beq.w	800cf84 <find_volume+0x270>
		fmt = FS_FAT32;
 800ce58:	2503      	movs	r5, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800ce5a:	495c      	ldr	r1, [pc, #368]	@ (800cfcc <find_volume+0x2b8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce5c:	4a5c      	ldr	r2, [pc, #368]	@ (800cfd0 <find_volume+0x2bc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800ce5e:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce60:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce62:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce64:	3301      	adds	r3, #1
 800ce66:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce68:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800ce6a:	800b      	strh	r3, [r1, #0]
 800ce6c:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce6e:	bf04      	itt	eq
 800ce70:	2300      	moveq	r3, #0
 800ce72:	6013      	streq	r3, [r2, #0]
 800ce74:	6913      	ldr	r3, [r2, #16]
 800ce76:	429c      	cmp	r4, r3
 800ce78:	f47f af7c 	bne.w	800cd74 <find_volume+0x60>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	6113      	str	r3, [r2, #16]
 800ce80:	e778      	b.n	800cd74 <find_volume+0x60>
	rv = rv << 8 | ptr[0];
 800ce82:	f8d4 522a 	ldr.w	r5, [r4, #554]	@ 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce86:	2e00      	cmp	r6, #0
 800ce88:	d146      	bne.n	800cf18 <find_volume+0x204>
 800ce8a:	f1b8 0f00 	cmp.w	r8, #0
 800ce8e:	d14c      	bne.n	800cf2a <find_volume+0x216>
 800ce90:	bbcf      	cbnz	r7, 800cf06 <find_volume+0x1f2>
 800ce92:	bb5d      	cbnz	r5, 800ceec <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce94:	200d      	movs	r0, #13
}
 800ce96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce9a:	2003      	movs	r0, #3
}
 800ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cea0:	f894 61f6 	ldrb.w	r6, [r4, #502]	@ 0x1f6
 800cea4:	b10e      	cbz	r6, 800ceaa <find_volume+0x196>
	rv = rv << 8 | ptr[0];
 800cea6:	f8d4 61fa 	ldr.w	r6, [r4, #506]	@ 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ceaa:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 800ceae:	b343      	cbz	r3, 800cf02 <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800ceb0:	f8d4 820a 	ldr.w	r8, [r4, #522]	@ 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ceb4:	f894 7216 	ldrb.w	r7, [r4, #534]	@ 0x216
 800ceb8:	b10f      	cbz	r7, 800cebe <find_volume+0x1aa>
	rv = rv << 8 | ptr[0];
 800ceba:	f8d4 721a 	ldr.w	r7, [r4, #538]	@ 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cebe:	f894 5226 	ldrb.w	r5, [r4, #550]	@ 0x226
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	d1dd      	bne.n	800ce82 <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cec6:	bb3e      	cbnz	r6, 800cf18 <find_volume+0x204>
 800cec8:	f1b8 0f00 	cmp.w	r8, #0
 800cecc:	d12c      	bne.n	800cf28 <find_volume+0x214>
 800cece:	2f00      	cmp	r7, #0
 800ced0:	d0e0      	beq.n	800ce94 <find_volume+0x180>
 800ced2:	4639      	mov	r1, r7
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7ff fe3f 	bl	800cb58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ceda:	2801      	cmp	r0, #1
 800cedc:	d8da      	bhi.n	800ce94 <find_volume+0x180>
			bsect = br[i];
 800cede:	463d      	mov	r5, r7
 800cee0:	e763      	b.n	800cdaa <find_volume+0x96>
				return FR_WRITE_PROTECTED;
 800cee2:	200a      	movs	r0, #10
}
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cee8:	200c      	movs	r0, #12
 800ceea:	e7d4      	b.n	800ce96 <find_volume+0x182>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ceec:	4629      	mov	r1, r5
 800ceee:	4620      	mov	r0, r4
 800cef0:	f7ff fe32 	bl	800cb58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cef4:	2801      	cmp	r0, #1
 800cef6:	f67f af58 	bls.w	800cdaa <find_volume+0x96>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cefa:	2804      	cmp	r0, #4
 800cefc:	d1ca      	bne.n	800ce94 <find_volume+0x180>
 800cefe:	2001      	movs	r0, #1
 800cf00:	e7c9      	b.n	800ce96 <find_volume+0x182>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf02:	4698      	mov	r8, r3
 800cf04:	e7d6      	b.n	800ceb4 <find_volume+0x1a0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf06:	4639      	mov	r1, r7
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7ff fe25 	bl	800cb58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf0e:	2801      	cmp	r0, #1
 800cf10:	d9e5      	bls.n	800cede <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf12:	2d00      	cmp	r5, #0
 800cf14:	d0be      	beq.n	800ce94 <find_volume+0x180>
 800cf16:	e7e9      	b.n	800ceec <find_volume+0x1d8>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f7ff fe1c 	bl	800cb58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf20:	2801      	cmp	r0, #1
 800cf22:	d8b2      	bhi.n	800ce8a <find_volume+0x176>
			bsect = br[i];
 800cf24:	4635      	mov	r5, r6
 800cf26:	e740      	b.n	800cdaa <find_volume+0x96>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf28:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf2a:	4641      	mov	r1, r8
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7ff fe13 	bl	800cb58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf32:	2801      	cmp	r0, #1
 800cf34:	d8ac      	bhi.n	800ce90 <find_volume+0x17c>
			bsect = br[i];
 800cf36:	4645      	mov	r5, r8
 800cf38:	e737      	b.n	800cdaa <find_volume+0x96>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf3a:	f640 7cf5 	movw	ip, #4085	@ 0xff5
 800cf3e:	45e6      	cmp	lr, ip
		fs->volbase = bsect;							/* Volume start sector */
 800cf40:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cf42:	62e6      	str	r6, [r4, #44]	@ 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf44:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf46:	6263      	str	r3, [r4, #36]	@ 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cf48:	d816      	bhi.n	800cf78 <find_volume+0x264>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf4a:	2f00      	cmp	r7, #0
 800cf4c:	d0a2      	beq.n	800ce94 <find_volume+0x180>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf4e:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf50:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800cf54:	f000 0001 	and.w	r0, r0, #1
 800cf58:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cf5c:	2501      	movs	r5, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf5e:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
 800cf62:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf66:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf68:	d394      	bcc.n	800ce94 <find_volume+0x180>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf6a:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800cf6e:	2280      	movs	r2, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf70:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800cf74:	7122      	strb	r2, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf76:	e770      	b.n	800ce5a <find_volume+0x146>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf78:	2f00      	cmp	r7, #0
 800cf7a:	d08b      	beq.n	800ce94 <find_volume+0x180>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf7c:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf7e:	0040      	lsls	r0, r0, #1
 800cf80:	2502      	movs	r5, #2
 800cf82:	e7ec      	b.n	800cf5e <find_volume+0x24a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf84:	1c69      	adds	r1, r5, #1
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7ff fe84 	bl	800cc94 <move_window>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f47f af63 	bne.w	800ce58 <find_volume+0x144>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf92:	f8b4 1232 	ldrh.w	r1, [r4, #562]	@ 0x232
			fs->fsi_flag = 0;
 800cf96:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf98:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800cf9c:	4291      	cmp	r1, r2
 800cf9e:	f47f af5b 	bne.w	800ce58 <find_volume+0x144>
	rv = rv << 8 | ptr[0];
 800cfa2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cfa4:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd4 <find_volume+0x2c0>)
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	f47f af56 	bne.w	800ce58 <find_volume+0x144>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfac:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800cfb0:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cfb8:	3320      	adds	r3, #32
 800cfba:	429a      	cmp	r2, r3
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfbc:	bf04      	itt	eq
 800cfbe:	e9d4 3287 	ldrdeq	r3, r2, [r4, #540]	@ 0x21c
 800cfc2:	e9c4 2304 	strdeq	r2, r3, [r4, #16]
 800cfc6:	e747      	b.n	800ce58 <find_volume+0x144>
 800cfc8:	20000b1c 	.word	0x20000b1c
 800cfcc:	20000b18 	.word	0x20000b18
 800cfd0:	20000af8 	.word	0x20000af8
 800cfd4:	41615252 	.word	0x41615252

0800cfd8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800cfdc:	f890 9000 	ldrb.w	r9, [r0]
 800cfe0:	f1b9 0f02 	cmp.w	r9, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800cfea:	d008      	beq.n	800cffe <put_fat.part.0+0x26>
 800cfec:	f1b9 0f03 	cmp.w	r9, #3
 800cff0:	d042      	beq.n	800d078 <put_fat.part.0+0xa0>
 800cff2:	f1b9 0f01 	cmp.w	r9, #1
 800cff6:	d014      	beq.n	800d022 <put_fat.part.0+0x4a>
 800cff8:	2002      	movs	r0, #2
}
 800cffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cffe:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d000:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800d004:	f7ff fe46 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800d008:	2800      	cmp	r0, #0
 800d00a:	d1f6      	bne.n	800cffa <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d00c:	0076      	lsls	r6, r6, #1
 800d00e:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800d012:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
 800d016:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800d018:	559c      	strb	r4, [r3, r6]
 800d01a:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800d01e:	7054      	strb	r4, [r2, #1]
			break;
 800d020:	e03d      	b.n	800d09e <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d022:	6a41      	ldr	r1, [r0, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d024:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d028:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800d02c:	f7ff fe32 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800d030:	2800      	cmp	r0, #0
 800d032:	d1e2      	bne.n	800cffa <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800d034:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d038:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800d03a:	f3c8 0308 	ubfx	r3, r8, #0, #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d03e:	ea4f 2157 	mov.w	r1, r7, lsr #9
			p = fs->win + bc++ % SS(fs);
 800d042:	f105 0834 	add.w	r8, r5, #52	@ 0x34
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d046:	d52f      	bpl.n	800d0a8 <put_fat.part.0+0xd0>
 800d048:	f818 2003 	ldrb.w	r2, [r8, r3]
 800d04c:	f002 020f 	and.w	r2, r2, #15
 800d050:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800d054:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d058:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			fs->wflag = 1;
 800d05a:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d05e:	4419      	add	r1, r3
 800d060:	4628      	mov	r0, r5
 800d062:	f7ff fe17 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800d066:	2800      	cmp	r0, #0
 800d068:	d1c7      	bne.n	800cffa <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800d06a:	f3c7 0208 	ubfx	r2, r7, #0, #9
 800d06e:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d070:	f3c4 1307 	ubfx	r3, r4, #4, #8
 800d074:	7013      	strb	r3, [r2, #0]
			break;
 800d076:	e012      	b.n	800d09e <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d078:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d07a:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800d07e:	f7ff fe09 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800d082:	2800      	cmp	r0, #0
 800d084:	d1b9      	bne.n	800cffa <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d086:	00b6      	lsls	r6, r6, #2
 800d088:	f105 0234 	add.w	r2, r5, #52	@ 0x34
 800d08c:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 800d090:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
	rv = rv << 8 | ptr[0];
 800d094:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d096:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d09a:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800d09c:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0a2:	2000      	movs	r0, #0
}
 800d0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d0a8:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0ac:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			fs->wflag = 1;
 800d0ae:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0b2:	4419      	add	r1, r3
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f7ff fded 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d19d      	bne.n	800cffa <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800d0be:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0c2:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800d0c6:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800d0ca:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0ce:	f023 030f 	bic.w	r3, r3, #15
 800d0d2:	4323      	orrs	r3, r4
 800d0d4:	7013      	strb	r3, [r2, #0]
			break;
 800d0d6:	e7e2      	b.n	800d09e <put_fat.part.0+0xc6>

0800d0d8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0d8:	2901      	cmp	r1, #1
 800d0da:	d90e      	bls.n	800d0fa <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0de:	6983      	ldr	r3, [r0, #24]
 800d0e0:	4299      	cmp	r1, r3
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	d206      	bcs.n	800d0f6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800d0e8:	7803      	ldrb	r3, [r0, #0]
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d021      	beq.n	800d132 <get_fat.isra.0+0x5a>
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d010      	beq.n	800d114 <get_fat.isra.0+0x3c>
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d003      	beq.n	800d0fe <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800d0f6:	2001      	movs	r0, #1
}
 800d0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d0fa:	2001      	movs	r0, #1
}
 800d0fc:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0fe:	6a41      	ldr	r1, [r0, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d100:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d104:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d108:	f7ff fdc4 	bl	800cc94 <move_window>
 800d10c:	b1f0      	cbz	r0, 800d14c <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d10e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d114:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d116:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d11a:	f7ff fdbb 	bl	800cc94 <move_window>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d1f5      	bne.n	800d10e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d122:	00a4      	lsls	r4, r4, #2
 800d124:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d128:	4425      	add	r5, r4
 800d12a:	6b68      	ldr	r0, [r5, #52]	@ 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d12c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800d130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d132:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d134:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d138:	f7ff fdac 	bl	800cc94 <move_window>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d1e6      	bne.n	800d10e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d140:	0063      	lsls	r3, r4, #1
 800d142:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d146:	442b      	add	r3, r5
 800d148:	8e98      	ldrh	r0, [r3, #52]	@ 0x34
}
 800d14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800d14c:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d150:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d152:	442b      	add	r3, r5
 800d154:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d156:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d15a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d15c:	f893 6034 	ldrb.w	r6, [r3, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d160:	f7ff fd98 	bl	800cc94 <move_window>
 800d164:	2800      	cmp	r0, #0
 800d166:	d1d2      	bne.n	800d10e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d168:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d16c:	442f      	add	r7, r5
 800d16e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800d172:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d176:	07e3      	lsls	r3, r4, #31
 800d178:	bf4c      	ite	mi
 800d17a:	0900      	lsrmi	r0, r0, #4
 800d17c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800d180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d182:	bf00      	nop

0800d184 <create_chain>:
{
 800d184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800d188:	f8d0 8000 	ldr.w	r8, [r0]
{
 800d18c:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800d18e:	4689      	mov	r9, r1
 800d190:	2900      	cmp	r1, #0
 800d192:	f040 8085 	bne.w	800d2a0 <create_chain+0x11c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d196:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d19a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d19e:	b186      	cbz	r6, 800d1c2 <create_chain+0x3e>
 800d1a0:	429e      	cmp	r6, r3
 800d1a2:	d20e      	bcs.n	800d1c2 <create_chain+0x3e>
			ncl++;							/* Next cluster */
 800d1a4:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d1a6:	429c      	cmp	r4, r3
 800d1a8:	f0c0 8090 	bcc.w	800d2cc <create_chain+0x148>
				if (ncl > scl) return 0;	/* No free cluster */
 800d1ac:	2e01      	cmp	r6, #1
 800d1ae:	d00a      	beq.n	800d1c6 <create_chain+0x42>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d1b0:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800d1b2:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d1b4:	69ab      	ldr	r3, [r5, #24]
 800d1b6:	42a3      	cmp	r3, r4
 800d1b8:	d809      	bhi.n	800d1ce <create_chain+0x4a>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d1ba:	2401      	movs	r4, #1
}
 800d1bc:	4620      	mov	r0, r4
 800d1be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d87e      	bhi.n	800d2c4 <create_chain+0x140>
				if (ncl > scl) return 0;	/* No free cluster */
 800d1c6:	2400      	movs	r4, #0
}
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (fs->fs_type) {
 800d1ce:	782b      	ldrb	r3, [r5, #0]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d02a      	beq.n	800d22a <create_chain+0xa6>
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d048      	beq.n	800d26a <create_chain+0xe6>
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d1ee      	bne.n	800d1ba <create_chain+0x36>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1dc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d1de:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1e2:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7ff fd54 	bl	800cc94 <move_window>
 800d1ec:	bbc0      	cbnz	r0, 800d260 <create_chain+0xdc>
			wc = fs->win[bc++ % SS(fs)];
 800d1ee:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1f2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d1f4:	442b      	add	r3, r5
 800d1f6:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1fa:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d1fe:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d200:	f893 b034 	ldrb.w	fp, [r3, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d204:	f7ff fd46 	bl	800cc94 <move_window>
 800d208:	bb50      	cbnz	r0, 800d260 <create_chain+0xdc>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d20a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800d20e:	44aa      	add	sl, r5
 800d210:	f89a 3034 	ldrb.w	r3, [sl, #52]	@ 0x34
 800d214:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d218:	07e3      	lsls	r3, r4, #31
 800d21a:	d55f      	bpl.n	800d2dc <create_chain+0x158>
			if (cs == 0) break;				/* Found a free cluster */
 800d21c:	ea5f 1b1b 	movs.w	fp, fp, lsr #4
 800d220:	d010      	beq.n	800d244 <create_chain+0xc0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d222:	f1bb 0f01 	cmp.w	fp, #1
 800d226:	d132      	bne.n	800d28e <create_chain+0x10a>
 800d228:	e7c7      	b.n	800d1ba <create_chain+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d22a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800d22c:	4628      	mov	r0, r5
 800d22e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d232:	f7ff fd2f 	bl	800cc94 <move_window>
 800d236:	b998      	cbnz	r0, 800d260 <create_chain+0xdc>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d238:	0063      	lsls	r3, r4, #1
 800d23a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d23e:	442b      	add	r3, r5
 800d240:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
			if (cs == 0) break;				/* Found a free cluster */
 800d242:	bb13      	cbnz	r3, 800d28a <create_chain+0x106>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d244:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d248:	42a3      	cmp	r3, r4
 800d24a:	d9b6      	bls.n	800d1ba <create_chain+0x36>
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	4621      	mov	r1, r4
 800d252:	4640      	mov	r0, r8
 800d254:	f7ff fec0 	bl	800cfd8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800d258:	2800      	cmp	r0, #0
 800d25a:	d044      	beq.n	800d2e6 <create_chain+0x162>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d25c:	2801      	cmp	r0, #1
 800d25e:	d1ac      	bne.n	800d1ba <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d260:	f04f 34ff 	mov.w	r4, #4294967295
}
 800d264:	4620      	mov	r0, r4
 800d266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d26a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800d26c:	4628      	mov	r0, r5
 800d26e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d272:	f7ff fd0f 	bl	800cc94 <move_window>
 800d276:	2800      	cmp	r0, #0
 800d278:	d1f2      	bne.n	800d260 <create_chain+0xdc>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d27a:	00a3      	lsls	r3, r4, #2
 800d27c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d280:	442b      	add	r3, r5
 800d282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			if (cs == 0) break;				/* Found a free cluster */
 800d284:	f033 4370 	bics.w	r3, r3, #4026531840	@ 0xf0000000
 800d288:	d0dc      	beq.n	800d244 <create_chain+0xc0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d095      	beq.n	800d1ba <create_chain+0x36>
			if (ncl == scl) return 0;		/* No free cluster */
 800d28e:	42a6      	cmp	r6, r4
 800d290:	d099      	beq.n	800d1c6 <create_chain+0x42>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d292:	f8d8 3018 	ldr.w	r3, [r8, #24]
			ncl++;							/* Next cluster */
 800d296:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d298:	429c      	cmp	r4, r3
 800d29a:	d287      	bcs.n	800d1ac <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d29c:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d29e:	e789      	b.n	800d1b4 <create_chain+0x30>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	f7ff ff19 	bl	800d0d8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d2a6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d2a8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d2aa:	d986      	bls.n	800d1ba <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d2ac:	1c42      	adds	r2, r0, #1
 800d2ae:	d0d7      	beq.n	800d260 <create_chain+0xdc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d2b0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d2b4:	4283      	cmp	r3, r0
 800d2b6:	d881      	bhi.n	800d1bc <create_chain+0x38>
			ncl++;							/* Next cluster */
 800d2b8:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	d807      	bhi.n	800d2d0 <create_chain+0x14c>
 800d2c0:	464e      	mov	r6, r9
 800d2c2:	e773      	b.n	800d1ac <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d2c4:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d2c6:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800d2c8:	2402      	movs	r4, #2
 800d2ca:	e773      	b.n	800d1b4 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d2cc:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2ce:	e771      	b.n	800d1b4 <create_chain+0x30>
 800d2d0:	2c01      	cmp	r4, #1
 800d2d2:	683d      	ldr	r5, [r7, #0]
 800d2d4:	f67f af71 	bls.w	800d1ba <create_chain+0x36>
 800d2d8:	464e      	mov	r6, r9
 800d2da:	e76b      	b.n	800d1b4 <create_chain+0x30>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d2dc:	f3cb 030b 	ubfx	r3, fp, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1d2      	bne.n	800d28a <create_chain+0x106>
 800d2e4:	e7ae      	b.n	800d244 <create_chain+0xc0>
		if (res == FR_OK && clst != 0) {
 800d2e6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ea:	d00f      	beq.n	800d30c <create_chain+0x188>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d2ec:	f1b9 0f01 	cmp.w	r9, #1
 800d2f0:	f43f af63 	beq.w	800d1ba <create_chain+0x36>
 800d2f4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d2f8:	4599      	cmp	r9, r3
 800d2fa:	f4bf af5e 	bcs.w	800d1ba <create_chain+0x36>
 800d2fe:	4622      	mov	r2, r4
 800d300:	4649      	mov	r1, r9
 800d302:	4640      	mov	r0, r8
 800d304:	f7ff fe68 	bl	800cfd8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d308:	2800      	cmp	r0, #0
 800d30a:	d1a7      	bne.n	800d25c <create_chain+0xd8>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d30c:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800d310:	3b02      	subs	r3, #2
 800d312:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 800d314:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d318:	d802      	bhi.n	800d320 <create_chain+0x19c>
 800d31a:	3a01      	subs	r2, #1
 800d31c:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800d320:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d324:	f043 0301 	orr.w	r3, r3, #1
 800d328:	f888 3004 	strb.w	r3, [r8, #4]
 800d32c:	e746      	b.n	800d1bc <create_chain+0x38>
 800d32e:	bf00      	nop

0800d330 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
{
 800d334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800d338:	f8d0 9000 	ldr.w	r9, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d33c:	d22b      	bcs.n	800d396 <dir_sdi+0x66>
 800d33e:	06ca      	lsls	r2, r1, #27
 800d340:	460c      	mov	r4, r1
 800d342:	d128      	bne.n	800d396 <dir_sdi+0x66>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d344:	6885      	ldr	r5, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800d346:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d348:	4607      	mov	r7, r0
 800d34a:	b33d      	cbz	r5, 800d39c <dir_sdi+0x6c>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d34c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d350:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d354:	ea4f 2843 	mov.w	r8, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800d358:	f0c0 8087 	bcc.w	800d46a <dir_sdi+0x13a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d35c:	2d01      	cmp	r5, #1
 800d35e:	d01a      	beq.n	800d396 <dir_sdi+0x66>
 800d360:	464e      	mov	r6, r9
 800d362:	69b3      	ldr	r3, [r6, #24]
 800d364:	42ab      	cmp	r3, r5
 800d366:	d916      	bls.n	800d396 <dir_sdi+0x66>
		switch (fs->fs_type) {
 800d368:	7833      	ldrb	r3, [r6, #0]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d04c      	beq.n	800d408 <dir_sdi+0xd8>
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d02f      	beq.n	800d3d2 <dir_sdi+0xa2>
 800d372:	2b01      	cmp	r3, #1
 800d374:	d10f      	bne.n	800d396 <dir_sdi+0x66>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d376:	6a71      	ldr	r1, [r6, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d378:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d37c:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d380:	4630      	mov	r0, r6
 800d382:	f7ff fc87 	bl	800cc94 <move_window>
 800d386:	2800      	cmp	r0, #0
 800d388:	d052      	beq.n	800d430 <dir_sdi+0x100>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d38a:	2001      	movs	r0, #1
}
 800d38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect = fs->dirbase;
 800d390:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 800d392:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d396:	2002      	movs	r0, #2
}
 800d398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d39c:	f899 3000 	ldrb.w	r3, [r9]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d83f      	bhi.n	800d424 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d3a4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800d3a8:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800d3ac:	d9f3      	bls.n	800d396 <dir_sdi+0x66>
		dp->sect = fs->dirbase;
 800d3ae:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
	dp->clust = clst;					/* Current cluster# */
 800d3b2:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0ed      	beq.n	800d396 <dir_sdi+0x66>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d3ba:	f109 0934 	add.w	r9, r9, #52	@ 0x34
 800d3be:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d3c2:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d3c6:	4449      	add	r1, r9
 800d3c8:	e9c7 3107 	strd	r3, r1, [r7, #28]
	return FR_OK;
 800d3cc:	2000      	movs	r0, #0
}
 800d3ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3d2:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d3da:	f7ff fc5b 	bl	800cc94 <move_window>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d1d3      	bne.n	800d38a <dir_sdi+0x5a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3e2:	00ab      	lsls	r3, r5, #2
 800d3e4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d3e8:	4433      	add	r3, r6
 800d3ea:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3ec:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d3f0:	2d01      	cmp	r5, #1
 800d3f2:	d9d0      	bls.n	800d396 <dir_sdi+0x66>
 800d3f4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d3f8:	42ab      	cmp	r3, r5
 800d3fa:	d9cc      	bls.n	800d396 <dir_sdi+0x66>
			ofs -= csz;
 800d3fc:	eba4 0408 	sub.w	r4, r4, r8
		while (ofs >= csz) {				/* Follow cluster chain */
 800d400:	45a0      	cmp	r8, r4
 800d402:	d834      	bhi.n	800d46e <dir_sdi+0x13e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d404:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d406:	e7ac      	b.n	800d362 <dir_sdi+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d408:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800d40a:	4630      	mov	r0, r6
 800d40c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d410:	f7ff fc40 	bl	800cc94 <move_window>
 800d414:	2800      	cmp	r0, #0
 800d416:	d1b8      	bne.n	800d38a <dir_sdi+0x5a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d418:	006b      	lsls	r3, r5, #1
 800d41a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d41e:	4433      	add	r3, r6
 800d420:	8e9d      	ldrh	r5, [r3, #52]	@ 0x34
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d422:	e7e5      	b.n	800d3f0 <dir_sdi+0xc0>
		clst = fs->dirbase;
 800d424:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0bb      	beq.n	800d3a4 <dir_sdi+0x74>
 800d42c:	461d      	mov	r5, r3
 800d42e:	e78d      	b.n	800d34c <dir_sdi+0x1c>
			wc = fs->win[bc++ % SS(fs)];
 800d430:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d434:	6a71      	ldr	r1, [r6, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d436:	4433      	add	r3, r6
 800d438:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d43c:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d440:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 800d442:	f893 b034 	ldrb.w	fp, [r3, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d446:	f7ff fc25 	bl	800cc94 <move_window>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d19d      	bne.n	800d38a <dir_sdi+0x5a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d44e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800d452:	44b2      	add	sl, r6
 800d454:	f89a 3034 	ldrb.w	r3, [sl, #52]	@ 0x34
 800d458:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d45c:	07eb      	lsls	r3, r5, #31
 800d45e:	bf4c      	ite	mi
 800d460:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800d464:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d468:	e7c2      	b.n	800d3f0 <dir_sdi+0xc0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d46a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d46e:	3b02      	subs	r3, #2
	clst -= 2;
 800d470:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d472:	429a      	cmp	r2, r3
 800d474:	d28c      	bcs.n	800d390 <dir_sdi+0x60>
	return clst * fs->csize + fs->database;
 800d476:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800d47a:	f8d9 302c 	ldr.w	r3, [r9, #44]	@ 0x2c
 800d47e:	fb02 3301 	mla	r3, r2, r1, r3
 800d482:	e796      	b.n	800d3b2 <dir_sdi+0x82>

0800d484 <dir_find>:
{
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d488:	2100      	movs	r1, #0
{
 800d48a:	b087      	sub	sp, #28
	FATFS *fs = dp->obj.fs;
 800d48c:	6805      	ldr	r5, [r0, #0]
{
 800d48e:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d490:	f7ff ff4e 	bl	800d330 <dir_sdi>
	if (res != FR_OK) return res;
 800d494:	4680      	mov	r8, r0
 800d496:	b9f8      	cbnz	r0, 800d4d8 <dir_find+0x54>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d498:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800d49c:	f04f 37ff 	mov.w	r7, #4294967295
		res = move_window(fs, dp->sect);
 800d4a0:	f8d4 901c 	ldr.w	r9, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d4a4:	6327      	str	r7, [r4, #48]	@ 0x30
 800d4a6:	46e0      	mov	r8, ip
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4a8:	f105 0634 	add.w	r6, r5, #52	@ 0x34
 800d4ac:	f8cd c004 	str.w	ip, [sp, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d4b0:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800d4b4:	45ca      	cmp	sl, r9
 800d4b6:	d015      	beq.n	800d4e4 <dir_find+0x60>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4b8:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d4ba:	7868      	ldrb	r0, [r5, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 80b4 	bne.w	800d62a <dir_find+0x1a6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	464a      	mov	r2, r9
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	f7ff fa1a 	bl	800c900 <disk_read>
 800d4cc:	b140      	cbz	r0, 800d4e0 <dir_find+0x5c>
			fs->winsect = sector;
 800d4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d2:	632b      	str	r3, [r5, #48]	@ 0x30
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d4d4:	f04f 0801 	mov.w	r8, #1
}
 800d4d8:	4640      	mov	r0, r8
 800d4da:	b007      	add	sp, #28
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d4e0:	f8c5 9030 	str.w	r9, [r5, #48]	@ 0x30
		c = dp->dir[DIR_Name];
 800d4e4:	6a22      	ldr	r2, [r4, #32]
 800d4e6:	7811      	ldrb	r1, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	d041      	beq.n	800d570 <dir_find+0xec>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d4ec:	7ad3      	ldrb	r3, [r2, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d4ee:	29e5      	cmp	r1, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d4f0:	f003 003f 	and.w	r0, r3, #63	@ 0x3f
 800d4f4:	71a0      	strb	r0, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d4f6:	d003      	beq.n	800d500 <dir_find+0x7c>
 800d4f8:	071b      	lsls	r3, r3, #28
 800d4fa:	d53f      	bpl.n	800d57c <dir_find+0xf8>
 800d4fc:	280f      	cmp	r0, #15
 800d4fe:	d07f      	beq.n	800d600 <dir_find+0x17c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d500:	6327      	str	r7, [r4, #48]	@ 0x30
 800d502:	f04f 08ff 	mov.w	r8, #255	@ 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d506:	6963      	ldr	r3, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d508:	f8d4 901c 	ldr.w	r9, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800d50c:	6822      	ldr	r2, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d50e:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d510:	f1b9 0f00 	cmp.w	r9, #0
 800d514:	d02c      	beq.n	800d570 <dir_find+0xec>
 800d516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d51a:	d229      	bcs.n	800d570 <dir_find+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d51c:	f3c3 0b08 	ubfx	fp, r3, #0, #9
 800d520:	f1bb 0f00 	cmp.w	fp, #0
 800d524:	d109      	bne.n	800d53a <dir_find+0xb6>
		if (!dp->clust) {		/* Static table */
 800d526:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d528:	f109 0901 	add.w	r9, r9, #1
 800d52c:	f8c4 901c 	str.w	r9, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d530:	b941      	cbnz	r1, 800d544 <dir_find+0xc0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d532:	8911      	ldrh	r1, [r2, #8]
 800d534:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800d538:	d918      	bls.n	800d56c <dir_find+0xe8>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d53a:	3234      	adds	r2, #52	@ 0x34
 800d53c:	445a      	add	r2, fp
	dp->dptr = ofs;						/* Current entry */
 800d53e:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d540:	6222      	str	r2, [r4, #32]
	} while (res == FR_OK);
 800d542:	e7b5      	b.n	800d4b0 <dir_find+0x2c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d544:	8950      	ldrh	r0, [r2, #10]
 800d546:	3801      	subs	r0, #1
 800d548:	ea10 2053 	ands.w	r0, r0, r3, lsr #9
 800d54c:	d1f5      	bne.n	800d53a <dir_find+0xb6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d54e:	4610      	mov	r0, r2
 800d550:	9303      	str	r3, [sp, #12]
 800d552:	9202      	str	r2, [sp, #8]
 800d554:	f7ff fdc0 	bl	800d0d8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d558:	2801      	cmp	r0, #1
 800d55a:	f240 8124 	bls.w	800d7a6 <dir_find+0x322>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d0b8      	beq.n	800d4d4 <dir_find+0x50>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d562:	9a02      	ldr	r2, [sp, #8]
 800d564:	6991      	ldr	r1, [r2, #24]
 800d566:	4288      	cmp	r0, r1
 800d568:	f0c0 80d3 	bcc.w	800d712 <dir_find+0x28e>
				dp->sect = 0; return FR_NO_FILE;
 800d56c:	2300      	movs	r3, #0
 800d56e:	61e3      	str	r3, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d570:	f04f 0804 	mov.w	r8, #4
}
 800d574:	4640      	mov	r0, r8
 800d576:	b007      	add	sp, #28
 800d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d57c:	280f      	cmp	r0, #15
 800d57e:	d03f      	beq.n	800d600 <dir_find+0x17c>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d580:	f1b8 0f00 	cmp.w	r8, #0
 800d584:	d075      	beq.n	800d672 <dir_find+0x1ee>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d586:	f894 802f 	ldrb.w	r8, [r4, #47]	@ 0x2f
 800d58a:	f018 0801 	ands.w	r8, r8, #1
 800d58e:	d1b7      	bne.n	800d500 <dir_find+0x7c>
	} while (--cnt && r == 0);
 800d590:	7811      	ldrb	r1, [r2, #0]
 800d592:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800d596:	4299      	cmp	r1, r3
 800d598:	d1b2      	bne.n	800d500 <dir_find+0x7c>
 800d59a:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 800d59e:	7853      	ldrb	r3, [r2, #1]
 800d5a0:	4299      	cmp	r1, r3
 800d5a2:	d1ad      	bne.n	800d500 <dir_find+0x7c>
 800d5a4:	f894 1026 	ldrb.w	r1, [r4, #38]	@ 0x26
 800d5a8:	7893      	ldrb	r3, [r2, #2]
 800d5aa:	4299      	cmp	r1, r3
 800d5ac:	d1a8      	bne.n	800d500 <dir_find+0x7c>
 800d5ae:	78d1      	ldrb	r1, [r2, #3]
 800d5b0:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 800d5b4:	4299      	cmp	r1, r3
 800d5b6:	d1a3      	bne.n	800d500 <dir_find+0x7c>
 800d5b8:	7911      	ldrb	r1, [r2, #4]
 800d5ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d5be:	4299      	cmp	r1, r3
 800d5c0:	d19e      	bne.n	800d500 <dir_find+0x7c>
 800d5c2:	7951      	ldrb	r1, [r2, #5]
 800d5c4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800d5c8:	4299      	cmp	r1, r3
 800d5ca:	d199      	bne.n	800d500 <dir_find+0x7c>
 800d5cc:	7991      	ldrb	r1, [r2, #6]
 800d5ce:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800d5d2:	4299      	cmp	r1, r3
 800d5d4:	d194      	bne.n	800d500 <dir_find+0x7c>
 800d5d6:	79d1      	ldrb	r1, [r2, #7]
 800d5d8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800d5dc:	4299      	cmp	r1, r3
 800d5de:	d18f      	bne.n	800d500 <dir_find+0x7c>
 800d5e0:	7a11      	ldrb	r1, [r2, #8]
 800d5e2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d5e6:	4299      	cmp	r1, r3
 800d5e8:	d18a      	bne.n	800d500 <dir_find+0x7c>
 800d5ea:	7a51      	ldrb	r1, [r2, #9]
 800d5ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d185      	bne.n	800d500 <dir_find+0x7c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d5f4:	7a92      	ldrb	r2, [r2, #10]
 800d5f6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d180      	bne.n	800d500 <dir_find+0x7c>
 800d5fe:	e76b      	b.n	800d4d8 <dir_find+0x54>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d600:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800d604:	065b      	lsls	r3, r3, #25
 800d606:	f53f af7e 	bmi.w	800d506 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d60a:	0648      	lsls	r0, r1, #25
 800d60c:	d57c      	bpl.n	800d708 <dir_find+0x284>
						sum = dp->dir[LDIR_Chksum];
 800d60e:	7b50      	ldrb	r0, [r2, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d610:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 800d612:	9001      	str	r0, [sp, #4]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d614:	f001 01bf 	and.w	r1, r1, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d618:	6323      	str	r3, [r4, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d61a:	7b53      	ldrb	r3, [r2, #13]
 800d61c:	9801      	ldr	r0, [sp, #4]
 800d61e:	4283      	cmp	r3, r0
 800d620:	f000 8087 	beq.w	800d732 <dir_find+0x2ae>
 800d624:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800d628:	e76d      	b.n	800d506 <dir_find+0x82>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d62a:	2301      	movs	r3, #1
 800d62c:	4652      	mov	r2, sl
 800d62e:	4631      	mov	r1, r6
 800d630:	f7ff f974 	bl	800c91c <disk_write>
 800d634:	2800      	cmp	r0, #0
 800d636:	f47f af4d 	bne.w	800d4d4 <dir_find+0x50>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d63a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
			fs->wflag = 0;
 800d63c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d63e:	ebaa 0103 	sub.w	r1, sl, r3
 800d642:	69eb      	ldr	r3, [r5, #28]
 800d644:	4299      	cmp	r1, r3
 800d646:	d212      	bcs.n	800d66e <dir_find+0x1ea>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d648:	f895 b002 	ldrb.w	fp, [r5, #2]
 800d64c:	f1bb 0f01 	cmp.w	fp, #1
 800d650:	d801      	bhi.n	800d656 <dir_find+0x1d2>
 800d652:	e00c      	b.n	800d66e <dir_find+0x1ea>
					wsect += fs->fsize;
 800d654:	69eb      	ldr	r3, [r5, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d656:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 800d658:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800d65a:	4652      	mov	r2, sl
 800d65c:	2301      	movs	r3, #1
 800d65e:	4631      	mov	r1, r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d660:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800d664:	f7ff f95a 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d668:	f1bb 0f01 	cmp.w	fp, #1
 800d66c:	d1f2      	bne.n	800d654 <dir_find+0x1d0>
 800d66e:	7868      	ldrb	r0, [r5, #1]
 800d670:	e727      	b.n	800d4c2 <dir_find+0x3e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d672:	7813      	ldrb	r3, [r2, #0]
 800d674:	7850      	ldrb	r0, [r2, #1]
 800d676:	01d9      	lsls	r1, r3, #7
 800d678:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 800d67c:	4401      	add	r1, r0
 800d67e:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800d682:	7890      	ldrb	r0, [r2, #2]
 800d684:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800d688:	fa50 f383 	uxtab	r3, r0, r3
 800d68c:	f3c3 0146 	ubfx	r1, r3, #1, #7
 800d690:	78d0      	ldrb	r0, [r2, #3]
 800d692:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800d696:	fa50 f181 	uxtab	r1, r0, r1
 800d69a:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800d69e:	7910      	ldrb	r0, [r2, #4]
 800d6a0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800d6a4:	fa50 f383 	uxtab	r3, r0, r3
 800d6a8:	f3c3 0146 	ubfx	r1, r3, #1, #7
 800d6ac:	7950      	ldrb	r0, [r2, #5]
 800d6ae:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800d6b2:	fa50 f181 	uxtab	r1, r0, r1
 800d6b6:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800d6ba:	7990      	ldrb	r0, [r2, #6]
 800d6bc:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800d6c0:	fa50 f383 	uxtab	r3, r0, r3
 800d6c4:	f3c3 0146 	ubfx	r1, r3, #1, #7
 800d6c8:	79d0      	ldrb	r0, [r2, #7]
 800d6ca:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800d6ce:	fa50 f181 	uxtab	r1, r0, r1
 800d6d2:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800d6d6:	7a10      	ldrb	r0, [r2, #8]
 800d6d8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800d6dc:	fa50 f383 	uxtab	r3, r0, r3
 800d6e0:	f3c3 0146 	ubfx	r1, r3, #1, #7
 800d6e4:	7a50      	ldrb	r0, [r2, #9]
 800d6e6:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800d6ea:	fa50 f181 	uxtab	r1, r0, r1
 800d6ee:	f3c1 0346 	ubfx	r3, r1, #1, #7
 800d6f2:	7a90      	ldrb	r0, [r2, #10]
 800d6f4:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800d6f8:	fa50 f383 	uxtab	r3, r0, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6fc:	9901      	ldr	r1, [sp, #4]
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	4299      	cmp	r1, r3
 800d702:	f47f af40 	bne.w	800d586 <dir_find+0x102>
 800d706:	e6e7      	b.n	800d4d8 <dir_find+0x54>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d708:	4588      	cmp	r8, r1
 800d70a:	d086      	beq.n	800d61a <dir_find+0x196>
 800d70c:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800d710:	e6f9      	b.n	800d506 <dir_find+0x82>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d712:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800d714:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d716:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d718:	4288      	cmp	r0, r1
	return clst * fs->csize + fs->database;
 800d71a:	bf3c      	itt	cc
 800d71c:	f8b2 c00a 	ldrhcc.w	ip, [r2, #10]
 800d720:	6ad1      	ldrcc	r1, [r2, #44]	@ 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d722:	9b03      	ldr	r3, [sp, #12]
	return clst * fs->csize + fs->database;
 800d724:	bf34      	ite	cc
 800d726:	fb00 190c 	mlacc	r9, r0, ip, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d72a:	46d9      	movcs	r9, fp
				dp->sect = clust2sect(fs, clst);
 800d72c:	f8c4 901c 	str.w	r9, [r4, #28]
 800d730:	e703      	b.n	800d53a <dir_find+0xb6>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d732:	8b53      	ldrh	r3, [r2, #26]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f47f af75 	bne.w	800d624 <dir_find+0x1a0>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d73a:	f892 8000 	ldrb.w	r8, [r2]
 800d73e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d7d0 <dir_find+0x34c>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d742:	9403      	str	r4, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d744:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 800d748:	f108 38ff 	add.w	r8, r8, #4294967295
 800d74c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d750:	f8d5 a00c 	ldr.w	sl, [r5, #12]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d754:	9502      	str	r5, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d756:	eb08 0883 	add.w	r8, r8, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d75a:	f109 0b0d 	add.w	fp, r9, #13
 800d75e:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d760:	9105      	str	r1, [sp, #20]
 800d762:	4614      	mov	r4, r2
 800d764:	9604      	str	r6, [sp, #16]
 800d766:	e011      	b.n	800d78c <dir_find+0x308>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d768:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 800d76c:	4628      	mov	r0, r5
 800d76e:	d816      	bhi.n	800d79e <dir_find+0x31a>
 800d770:	f001 fbb4 	bl	800eedc <ff_wtoupper>
 800d774:	4606      	mov	r6, r0
 800d776:	f83a 0018 	ldrh.w	r0, [sl, r8, lsl #1]
 800d77a:	f001 fbaf 	bl	800eedc <ff_wtoupper>
 800d77e:	4286      	cmp	r6, r0
 800d780:	f108 0801 	add.w	r8, r8, #1
 800d784:	d10b      	bne.n	800d79e <dir_find+0x31a>
	rv = rv << 8 | ptr[0];
 800d786:	4628      	mov	r0, r5
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d788:	45d9      	cmp	r9, fp
 800d78a:	d00f      	beq.n	800d7ac <dir_find+0x328>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d78c:	f819 3b01 	ldrb.w	r3, [r9], #1
	rv = ptr[1];
 800d790:	5ae5      	ldrh	r5, [r4, r3]
		if (wc) {
 800d792:	2800      	cmp	r0, #0
 800d794:	d1e8      	bne.n	800d768 <dir_find+0x2e4>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d79a:	429d      	cmp	r5, r3
 800d79c:	d0f4      	beq.n	800d788 <dir_find+0x304>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d79e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800d7a2:	9e04      	ldr	r6, [sp, #16]
 800d7a4:	e73e      	b.n	800d624 <dir_find+0x1a0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d7a6:	f04f 0802 	mov.w	r8, #2
 800d7aa:	e695      	b.n	800d4d8 <dir_find+0x54>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	9d02      	ldr	r5, [sp, #8]
 800d7b0:	7813      	ldrb	r3, [r2, #0]
 800d7b2:	9905      	ldr	r1, [sp, #20]
 800d7b4:	065a      	lsls	r2, r3, #25
 800d7b6:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 800d7ba:	d505      	bpl.n	800d7c8 <dir_find+0x344>
 800d7bc:	b120      	cbz	r0, 800d7c8 <dir_find+0x344>
 800d7be:	f83a 3018 	ldrh.w	r3, [sl, r8, lsl #1]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af2e 	bne.w	800d624 <dir_find+0x1a0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d7c8:	3901      	subs	r1, #1
 800d7ca:	fa5f f881 	uxtb.w	r8, r1
 800d7ce:	e69a      	b.n	800d506 <dir_find+0x82>
 800d7d0:	080115e4 	.word	0x080115e4

0800d7d4 <follow_path>:
{
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 800d7d8:	f8d0 e000 	ldr.w	lr, [r0]
{
 800d7dc:	b083      	sub	sp, #12
 800d7de:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d7e0:	4689      	mov	r9, r1
 800d7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7e6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7e8:	d0fa      	beq.n	800d7e0 <follow_path+0xc>
 800d7ea:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7ec:	d0f8      	beq.n	800d7e0 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d7f2:	f899 0000 	ldrb.w	r0, [r9]
 800d7f6:	281f      	cmp	r0, #31
 800d7f8:	f240 8128 	bls.w	800da4c <follow_path+0x278>
 800d7fc:	4673      	mov	r3, lr
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d7fe:	46f0      	mov	r8, lr
		if (w < ' ') break;				/* Break if end of the path name */
 800d800:	281f      	cmp	r0, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d802:	68dd      	ldr	r5, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 800d804:	d942      	bls.n	800d88c <follow_path+0xb8>
 800d806:	f1a5 0b02 	sub.w	fp, r5, #2
 800d80a:	46ca      	mov	sl, r9
 800d80c:	465e      	mov	r6, fp
		w = p[si++];					/* Get a character */
 800d80e:	2401      	movs	r4, #1
 800d810:	e009      	b.n	800d826 <follow_path+0x52>
		lfn[di++] = w;					/* Store the Unicode character */
 800d812:	f826 0f02 	strh.w	r0, [r6, #2]!
		w = p[si++];					/* Get a character */
 800d816:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800d81a:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 800d81c:	f104 0301 	add.w	r3, r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
 800d820:	f240 80fe 	bls.w	800da20 <follow_path+0x24c>
		w = p[si++];					/* Get a character */
 800d824:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d826:	282f      	cmp	r0, #47	@ 0x2f
 800d828:	d017      	beq.n	800d85a <follow_path+0x86>
 800d82a:	285c      	cmp	r0, #92	@ 0x5c
 800d82c:	d015      	beq.n	800d85a <follow_path+0x86>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d82e:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800d832:	d00e      	beq.n	800d852 <follow_path+0x7e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d834:	2101      	movs	r1, #1
 800d836:	f001 fb37 	bl	800eea8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d83a:	b150      	cbz	r0, 800d852 <follow_path+0x7e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d83c:	287f      	cmp	r0, #127	@ 0x7f
 800d83e:	d8e8      	bhi.n	800d812 <follow_path+0x3e>
 800d840:	4a92      	ldr	r2, [pc, #584]	@ (800da8c <follow_path+0x2b8>)
	while (*str && *str != chr) str++;
 800d842:	2322      	movs	r3, #34	@ 0x22
 800d844:	e003      	b.n	800d84e <follow_path+0x7a>
 800d846:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d0e1      	beq.n	800d812 <follow_path+0x3e>
 800d84e:	4298      	cmp	r0, r3
 800d850:	d1f9      	bne.n	800d846 <follow_path+0x72>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d852:	2006      	movs	r0, #6
}
 800d854:	b003      	add	sp, #12
 800d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85a:	eb09 0304 	add.w	r3, r9, r4
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d85e:	781a      	ldrb	r2, [r3, #0]
 800d860:	2a2f      	cmp	r2, #47	@ 0x2f
 800d862:	4699      	mov	r9, r3
 800d864:	f103 0301 	add.w	r3, r3, #1
 800d868:	d0f9      	beq.n	800d85e <follow_path+0x8a>
 800d86a:	2a5c      	cmp	r2, #92	@ 0x5c
 800d86c:	d0f7      	beq.n	800d85e <follow_path+0x8a>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d86e:	3c01      	subs	r4, #1
 800d870:	f000 810a 	beq.w	800da88 <follow_path+0x2b4>
 800d874:	f04f 0a00 	mov.w	sl, #0
 800d878:	eb05 0244 	add.w	r2, r5, r4, lsl #1
		w = lfn[di - 1];
 800d87c:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800d880:	2b20      	cmp	r3, #32
 800d882:	d001      	beq.n	800d888 <follow_path+0xb4>
 800d884:	2b2e      	cmp	r3, #46	@ 0x2e
 800d886:	d104      	bne.n	800d892 <follow_path+0xbe>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d888:	3c01      	subs	r4, #1
 800d88a:	d1f7      	bne.n	800d87c <follow_path+0xa8>
	lfn[di] = 0;						/* LFN is created */
 800d88c:	2200      	movs	r2, #0
 800d88e:	802a      	strh	r2, [r5, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d890:	e7df      	b.n	800d852 <follow_path+0x7e>
		*d++ = (BYTE)val;
 800d892:	f04f 3220 	mov.w	r2, #538976288	@ 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800d896:	2300      	movs	r3, #0
 800d898:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		*d++ = (BYTE)val;
 800d89c:	f242 0120 	movw	r1, #8224	@ 0x2020
 800d8a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	85b9      	strh	r1, [r7, #44]	@ 0x2c
 800d8a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
	} while (--cnt);
 800d8ac:	e000      	b.n	800d8b0 <follow_path+0xdc>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	f83b 0f02 	ldrh.w	r0, [fp, #2]!
 800d8b4:	2820      	cmp	r0, #32
 800d8b6:	d0fa      	beq.n	800d8ae <follow_path+0xda>
 800d8b8:	282e      	cmp	r0, #46	@ 0x2e
 800d8ba:	d0f8      	beq.n	800d8ae <follow_path+0xda>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8bc:	b10b      	cbz	r3, 800d8c2 <follow_path+0xee>
 800d8be:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8c2:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800d8c6:	e001      	b.n	800d8cc <follow_path+0xf8>
 800d8c8:	3c01      	subs	r4, #1
 800d8ca:	d003      	beq.n	800d8d4 <follow_path+0x100>
 800d8cc:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 800d8d0:	292e      	cmp	r1, #46	@ 0x2e
 800d8d2:	d1f9      	bne.n	800d8c8 <follow_path+0xf4>
		w = lfn[si++];					/* Get an LFN character */
 800d8d4:	1c5e      	adds	r6, r3, #1
		if (!w) break;					/* Break on end of the LFN */
 800d8d6:	b3a8      	cbz	r0, 800d944 <follow_path+0x170>
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f04f 0b08 	mov.w	fp, #8
 800d8de:	4613      	mov	r3, r2
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d8e0:	2820      	cmp	r0, #32
 800d8e2:	d052      	beq.n	800d98a <follow_path+0x1b6>
 800d8e4:	282e      	cmp	r0, #46	@ 0x2e
 800d8e6:	d059      	beq.n	800d99c <follow_path+0x1c8>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d8e8:	455b      	cmp	r3, fp
 800d8ea:	d368      	bcc.n	800d9be <follow_path+0x1ea>
			if (ni == 11) {				/* Long extension */
 800d8ec:	f1bb 0f0b 	cmp.w	fp, #11
 800d8f0:	d059      	beq.n	800d9a6 <follow_path+0x1d2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d8f2:	42b4      	cmp	r4, r6
 800d8f4:	f000 808d 	beq.w	800da12 <follow_path+0x23e>
 800d8f8:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 800d8fc:	42b4      	cmp	r4, r6
 800d8fe:	f080 8088 	bcs.w	800da12 <follow_path+0x23e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d902:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d906:	2be5      	cmp	r3, #229	@ 0xe5
 800d908:	bf04      	itt	eq
 800d90a:	2305      	moveq	r3, #5
 800d90c:	f887 3024 	strbeq.w	r3, [r7, #36]	@ 0x24
	if (ni == 8) b <<= 2;
 800d910:	f1bb 0f08 	cmp.w	fp, #8
 800d914:	bf05      	ittet	eq
 800d916:	0093      	lsleq	r3, r2, #2
 800d918:	b2da      	uxtbeq	r2, r3
 800d91a:	f002 030c 	andne.w	r3, r2, #12
 800d91e:	f003 030c 	andeq.w	r3, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d922:	2b0c      	cmp	r3, #12
 800d924:	d062      	beq.n	800d9ec <follow_path+0x218>
 800d926:	f002 0203 	and.w	r2, r2, #3
 800d92a:	2a03      	cmp	r2, #3
 800d92c:	d05e      	beq.n	800d9ec <follow_path+0x218>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d92e:	f01a 0f02 	tst.w	sl, #2
 800d932:	d107      	bne.n	800d944 <follow_path+0x170>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d934:	2a01      	cmp	r2, #1
 800d936:	bf08      	it	eq
 800d938:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d93c:	2b04      	cmp	r3, #4
 800d93e:	bf08      	it	eq
 800d940:	f04a 0a08 	orreq.w	sl, sl, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d944:	f887 a02f 	strb.w	sl, [r7, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800d948:	4638      	mov	r0, r7
 800d94a:	f7ff fd9b 	bl	800d484 <dir_find>
			ns = dp->fn[NSFLAG];
 800d94e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800d952:	2800      	cmp	r0, #0
 800d954:	d155      	bne.n	800da02 <follow_path+0x22e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d956:	075a      	lsls	r2, r3, #29
 800d958:	f53f af7c 	bmi.w	800d854 <follow_path+0x80>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d95c:	79bb      	ldrb	r3, [r7, #6]
 800d95e:	06db      	lsls	r3, r3, #27
 800d960:	f140 808e 	bpl.w	800da80 <follow_path+0x2ac>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d964:	697a      	ldr	r2, [r7, #20]
	if (fs->fs_type == FS_FAT32) {
 800d966:	f898 1000 	ldrb.w	r1, [r8]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d96a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d96e:	f108 0334 	add.w	r3, r8, #52	@ 0x34
 800d972:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 800d974:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800d976:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d978:	bf04      	itt	eq
 800d97a:	8a9b      	ldrheq	r3, [r3, #20]
 800d97c:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d980:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d982:	683b      	ldr	r3, [r7, #0]
		w = p[si++];					/* Get a character */
 800d984:	f899 0000 	ldrb.w	r0, [r9]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d988:	e73a      	b.n	800d800 <follow_path+0x2c>
			cf |= NS_LOSS | NS_LFN; continue;
 800d98a:	f04a 0a03 	orr.w	sl, sl, #3
 800d98e:	4631      	mov	r1, r6
		w = lfn[si++];					/* Get an LFN character */
 800d990:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
 800d994:	1c4e      	adds	r6, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800d996:	2800      	cmp	r0, #0
 800d998:	d1a2      	bne.n	800d8e0 <follow_path+0x10c>
 800d99a:	e7b2      	b.n	800d902 <follow_path+0x12e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d99c:	42b4      	cmp	r4, r6
 800d99e:	d1f4      	bne.n	800d98a <follow_path+0x1b6>
			if (ni == 11) {				/* Long extension */
 800d9a0:	f1bb 0f0b 	cmp.w	fp, #11
 800d9a4:	d1aa      	bne.n	800d8fc <follow_path+0x128>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d9aa:	2be5      	cmp	r3, #229	@ 0xe5
 800d9ac:	d102      	bne.n	800d9b4 <follow_path+0x1e0>
 800d9ae:	2305      	movs	r3, #5
 800d9b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800d9b4:	f04a 0a03 	orr.w	sl, sl, #3
 800d9b8:	f002 030c 	and.w	r3, r2, #12
 800d9bc:	e7b1      	b.n	800d922 <follow_path+0x14e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d9be:	42b4      	cmp	r4, r6
 800d9c0:	d0ee      	beq.n	800d9a0 <follow_path+0x1cc>
		if (w >= 0x80) {				/* Non ASCII character */
 800d9c2:	287f      	cmp	r0, #127	@ 0x7f
 800d9c4:	d830      	bhi.n	800da28 <follow_path+0x254>
	while (*str && *str != chr) str++;
 800d9c6:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 800da94 <follow_path+0x2c0>
 800d9ca:	212b      	movs	r1, #43	@ 0x2b
 800d9cc:	e003      	b.n	800d9d6 <follow_path+0x202>
 800d9ce:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800d9d2:	2900      	cmp	r1, #0
 800d9d4:	d043      	beq.n	800da5e <follow_path+0x28a>
 800d9d6:	4281      	cmp	r1, r0
 800d9d8:	d1f9      	bne.n	800d9ce <follow_path+0x1fa>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d9da:	f04a 0a03 	orr.w	sl, sl, #3
 800d9de:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 800d9e0:	4631      	mov	r1, r6
 800d9e2:	18fe      	adds	r6, r7, r3
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	f886 0024 	strb.w	r0, [r6, #36]	@ 0x24
 800d9ea:	e7d1      	b.n	800d990 <follow_path+0x1bc>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d9ec:	f04a 0a02 	orr.w	sl, sl, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d9f0:	f887 a02f 	strb.w	sl, [r7, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	f7ff fd45 	bl	800d484 <dir_find>
			ns = dp->fn[NSFLAG];
 800d9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d0a9      	beq.n	800d956 <follow_path+0x182>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da02:	2804      	cmp	r0, #4
 800da04:	f47f af26 	bne.w	800d854 <follow_path+0x80>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da08:	f013 0f04 	tst.w	r3, #4
 800da0c:	bf08      	it	eq
 800da0e:	2005      	moveq	r0, #5
 800da10:	e720      	b.n	800d854 <follow_path+0x80>
			b <<= 2; continue;
 800da12:	0092      	lsls	r2, r2, #2
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	4621      	mov	r1, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800da18:	f04f 0b0b 	mov.w	fp, #11
 800da1c:	2308      	movs	r3, #8
			b <<= 2; continue;
 800da1e:	e7b7      	b.n	800d990 <follow_path+0x1bc>
	*path = &p[si];						/* Return pointer to the next segment */
 800da20:	4499      	add	r9, r3
 800da22:	f04f 0a04 	mov.w	sl, #4
 800da26:	e727      	b.n	800d878 <follow_path+0xa4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800da28:	2100      	movs	r1, #0
 800da2a:	e9cd 2300 	strd	r2, r3, [sp]
 800da2e:	f001 fa3b 	bl	800eea8 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 800da32:	f04a 0a02 	orr.w	sl, sl, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800da36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0cd      	beq.n	800d9da <follow_path+0x206>
 800da3e:	4914      	ldr	r1, [pc, #80]	@ (800da90 <follow_path+0x2bc>)
 800da40:	4408      	add	r0, r1
 800da42:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800da46:	2800      	cmp	r0, #0
 800da48:	d0c7      	beq.n	800d9da <follow_path+0x206>
 800da4a:	e7bc      	b.n	800d9c6 <follow_path+0x1f2>
		dp->fn[NSFLAG] = NS_NONAME;
 800da4c:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800da4e:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800da50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
}
 800da54:	b003      	add	sp, #12
 800da56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800da5a:	f7ff bc69 	b.w	800d330 <dir_sdi>
				if (IsUpper(w)) {		/* ASCII large capital */
 800da5e:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 800da62:	2919      	cmp	r1, #25
 800da64:	d803      	bhi.n	800da6e <follow_path+0x29a>
					b |= 2;
 800da66:	f042 0202 	orr.w	r2, r2, #2
		dp->fn[i++] = (BYTE)w;
 800da6a:	b2c0      	uxtb	r0, r0
 800da6c:	e7b8      	b.n	800d9e0 <follow_path+0x20c>
					if (IsLower(w)) {	/* ASCII small capital */
 800da6e:	f1a0 0161 	sub.w	r1, r0, #97	@ 0x61
 800da72:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800da74:	bf9c      	itt	ls
 800da76:	3820      	subls	r0, #32
 800da78:	f042 0201 	orrls.w	r2, r2, #1
		dp->fn[i++] = (BYTE)w;
 800da7c:	b2c0      	uxtb	r0, r0
 800da7e:	e7af      	b.n	800d9e0 <follow_path+0x20c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da80:	2005      	movs	r0, #5
}
 800da82:	b003      	add	sp, #12
 800da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800da88:	802c      	strh	r4, [r5, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800da8a:	e6e2      	b.n	800d852 <follow_path+0x7e>
 800da8c:	080115d0 	.word	0x080115d0
 800da90:	080115f4 	.word	0x080115f4
 800da94:	080115dc 	.word	0x080115dc

0800da98 <dir_next>:
{
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da9c:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da9e:	6945      	ldr	r5, [r0, #20]
{
 800daa0:	b085      	sub	sp, #20
 800daa2:	9001      	str	r0, [sp, #4]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d044      	beq.n	800db32 <dir_next+0x9a>
 800daa8:	3520      	adds	r5, #32
 800daaa:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800daae:	d240      	bcs.n	800db32 <dir_next+0x9a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dab0:	f3c5 0808 	ubfx	r8, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800dab4:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dab6:	4602      	mov	r2, r0
 800dab8:	f1b8 0f00 	cmp.w	r8, #0
 800dabc:	d009      	beq.n	800dad2 <dir_next+0x3a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dabe:	f107 0634 	add.w	r6, r7, #52	@ 0x34
 800dac2:	4613      	mov	r3, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dac4:	4446      	add	r6, r8
	dp->dptr = ofs;						/* Current entry */
 800dac6:	615d      	str	r5, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dac8:	621e      	str	r6, [r3, #32]
	return FR_OK;
 800daca:	2000      	movs	r0, #0
}
 800dacc:	b005      	add	sp, #20
 800dace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800dad2:	460e      	mov	r6, r1
		if (!dp->clust) {		/* Static table */
 800dad4:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800dad6:	3301      	adds	r3, #1
 800dad8:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800dada:	b319      	cbz	r1, 800db24 <dir_next+0x8c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dadc:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800dae0:	f109 39ff 	add.w	r9, r9, #4294967295
 800dae4:	ea19 2955 	ands.w	r9, r9, r5, lsr #9
 800dae8:	d1e9      	bne.n	800dabe <dir_next+0x26>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daea:	4638      	mov	r0, r7
 800daec:	f7ff faf4 	bl	800d0d8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daf0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daf2:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daf4:	d91f      	bls.n	800db36 <dir_next+0x9e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800daf6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dafa:	d01e      	beq.n	800db3a <dir_next+0xa2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	4283      	cmp	r3, r0
 800db00:	d91d      	bls.n	800db3e <dir_next+0xa6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db02:	f107 0634 	add.w	r6, r7, #52	@ 0x34
	clst -= 2;
 800db06:	1e84      	subs	r4, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800db08:	9a01      	ldr	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db0a:	3b02      	subs	r3, #2
 800db0c:	42a3      	cmp	r3, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 800db0e:	f8c2 a018 	str.w	sl, [r2, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db12:	d903      	bls.n	800db1c <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800db14:	897a      	ldrh	r2, [r7, #10]
 800db16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db18:	fb04 3902 	mla	r9, r4, r2, r3
				dp->sect = clust2sect(fs, clst);
 800db1c:	9b01      	ldr	r3, [sp, #4]
 800db1e:	f8c3 901c 	str.w	r9, [r3, #28]
 800db22:	e7cf      	b.n	800dac4 <dir_next+0x2c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800db24:	893b      	ldrh	r3, [r7, #8]
 800db26:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800db2a:	d8c8      	bhi.n	800dabe <dir_next+0x26>
				dp->sect = 0; return FR_NO_FILE;
 800db2c:	9a01      	ldr	r2, [sp, #4]
 800db2e:	2300      	movs	r3, #0
 800db30:	61d3      	str	r3, [r2, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db32:	2004      	movs	r0, #4
 800db34:	e7ca      	b.n	800dacc <dir_next+0x34>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db36:	2002      	movs	r0, #2
 800db38:	e7c8      	b.n	800dacc <dir_next+0x34>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db3a:	2001      	movs	r0, #1
 800db3c:	e7c6      	b.n	800dacc <dir_next+0x34>
					if (!stretch) {								/* If no stretch, report EOT */
 800db3e:	2e00      	cmp	r6, #0
 800db40:	d0f4      	beq.n	800db2c <dir_next+0x94>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	6999      	ldr	r1, [r3, #24]
 800db46:	4618      	mov	r0, r3
 800db48:	f7ff fb1c 	bl	800d184 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db4c:	4682      	mov	sl, r0
 800db4e:	2800      	cmp	r0, #0
 800db50:	d056      	beq.n	800dc00 <dir_next+0x168>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db52:	2801      	cmp	r0, #1
 800db54:	d0ef      	beq.n	800db36 <dir_next+0x9e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db56:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db5a:	d0ee      	beq.n	800db3a <dir_next+0xa2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db5c:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db5e:	f107 0634 	add.w	r6, r7, #52	@ 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800db62:	2b00      	cmp	r3, #0
 800db64:	d14e      	bne.n	800dc04 <dir_next+0x16c>
		*d++ = (BYTE)val;
 800db66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db6a:	2100      	movs	r1, #0
 800db6c:	4630      	mov	r0, r6
 800db6e:	f001 ffa5 	bl	800fabc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db72:	69bb      	ldr	r3, [r7, #24]
	return clst * fs->csize + fs->database;
 800db74:	8978      	ldrh	r0, [r7, #10]
	clst -= 2;
 800db76:	f1aa 0402 	sub.w	r4, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db7a:	1e9a      	subs	r2, r3, #2
 800db7c:	4294      	cmp	r4, r2
 800db7e:	d266      	bcs.n	800dc4e <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
 800db80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db82:	fb04 2200 	mla	r2, r4, r0, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db86:	633a      	str	r2, [r7, #48]	@ 0x30
 800db88:	2800      	cmp	r0, #0
 800db8a:	d062      	beq.n	800dc52 <dir_next+0x1ba>
						fs->wflag = 1;
 800db8c:	e9cd 8402 	strd	r8, r4, [sp, #8]
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db90:	f04f 0b00 	mov.w	fp, #0
						fs->wflag = 1;
 800db94:	4614      	mov	r4, r2
 800db96:	f04f 0301 	mov.w	r3, #1
 800db9a:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800db9c:	7878      	ldrb	r0, [r7, #1]
 800db9e:	2301      	movs	r3, #1
 800dba0:	4622      	mov	r2, r4
 800dba2:	4631      	mov	r1, r6
 800dba4:	f7fe feba 	bl	800c91c <disk_write>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d1c6      	bne.n	800db3a <dir_next+0xa2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
			fs->wflag = 0;
 800dbae:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dbb0:	1ae1      	subs	r1, r4, r3
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	4299      	cmp	r1, r3
 800dbb6:	d212      	bcs.n	800dbde <dir_next+0x146>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbb8:	f897 8002 	ldrb.w	r8, [r7, #2]
 800dbbc:	f1b8 0f01 	cmp.w	r8, #1
 800dbc0:	d801      	bhi.n	800dbc6 <dir_next+0x12e>
 800dbc2:	e00c      	b.n	800dbde <dir_next+0x146>
					wsect += fs->fsize;
 800dbc4:	69fb      	ldr	r3, [r7, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dbc6:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 800dbc8:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800dbca:	4622      	mov	r2, r4
 800dbcc:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbce:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	f7fe fea2 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbd8:	f1b8 0f01 	cmp.w	r8, #1
 800dbdc:	d1f2      	bne.n	800dbc4 <dir_next+0x12c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dbde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbe0:	897b      	ldrh	r3, [r7, #10]
 800dbe2:	f10b 0b01 	add.w	fp, fp, #1
 800dbe6:	1c54      	adds	r4, r2, #1
 800dbe8:	455b      	cmp	r3, fp
 800dbea:	633c      	str	r4, [r7, #48]	@ 0x30
 800dbec:	d8d3      	bhi.n	800db96 <dir_next+0xfe>
 800dbee:	4622      	mov	r2, r4
 800dbf0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dbf4:	9c03      	ldr	r4, [sp, #12]
 800dbf6:	69bb      	ldr	r3, [r7, #24]
					fs->winsect -= n;							/* Restore window offset */
 800dbf8:	eba2 020b 	sub.w	r2, r2, fp
 800dbfc:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbfe:	e783      	b.n	800db08 <dir_next+0x70>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dc00:	2007      	movs	r0, #7
 800dc02:	e763      	b.n	800dacc <dir_next+0x34>
		wsect = fs->winsect;	/* Current sector number */
 800dc04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc06:	7878      	ldrb	r0, [r7, #1]
 800dc08:	9202      	str	r2, [sp, #8]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	f7fe fe85 	bl	800c91c <disk_write>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d191      	bne.n	800db3a <dir_next+0xa2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc18:	9a02      	ldr	r2, [sp, #8]
			fs->wflag = 0;
 800dc1a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc1c:	1ad1      	subs	r1, r2, r3
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	4299      	cmp	r1, r3
 800dc22:	d2a0      	bcs.n	800db66 <dir_next+0xce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc24:	f897 b002 	ldrb.w	fp, [r7, #2]
 800dc28:	f1bb 0f01 	cmp.w	fp, #1
 800dc2c:	d99b      	bls.n	800db66 <dir_next+0xce>
 800dc2e:	4614      	mov	r4, r2
 800dc30:	e000      	b.n	800dc34 <dir_next+0x19c>
 800dc32:	69fb      	ldr	r3, [r7, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc34:	7878      	ldrb	r0, [r7, #1]
					wsect += fs->fsize;
 800dc36:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc38:	4622      	mov	r2, r4
 800dc3a:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc3c:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc40:	4631      	mov	r1, r6
 800dc42:	f7fe fe6b 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc46:	f1bb 0f01 	cmp.w	fp, #1
 800dc4a:	d1f2      	bne.n	800dc32 <dir_next+0x19a>
 800dc4c:	e78b      	b.n	800db66 <dir_next+0xce>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc4e:	2200      	movs	r2, #0
 800dc50:	e799      	b.n	800db86 <dir_next+0xee>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc52:	4683      	mov	fp, r0
 800dc54:	e7d0      	b.n	800dbf8 <dir_next+0x160>
 800dc56:	bf00      	nop

0800dc58 <dir_register>:
{
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dc5c:	f890 b02f 	ldrb.w	fp, [r0, #47]	@ 0x2f
 800dc60:	f01b 01a0 	ands.w	r1, fp, #160	@ 0xa0
{
 800dc64:	b08d      	sub	sp, #52	@ 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dc66:	f040 82fb 	bne.w	800e260 <dir_register+0x608>
	FATFS *fs = dp->obj.fs;
 800dc6a:	6803      	ldr	r3, [r0, #0]
 800dc6c:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	881a      	ldrh	r2, [r3, #0]
 800dc72:	4606      	mov	r6, r0
 800dc74:	2a00      	cmp	r2, #0
 800dc76:	f000 8434 	beq.w	800e4e2 <dir_register+0x88a>
 800dc7a:	468a      	mov	sl, r1
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800dc82:	f10a 0a01 	add.w	sl, sl, #1
 800dc86:	2900      	cmp	r1, #0
 800dc88:	d1f9      	bne.n	800dc7e <dir_register+0x26>
			*d++ = *s++;
 800dc8a:	f106 0524 	add.w	r5, r6, #36	@ 0x24
 800dc8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc92:	ac0c      	add	r4, sp, #48	@ 0x30
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc94:	f01b 0f01 	tst.w	fp, #1
			*d++ = *s++;
 800dc98:	e904 0007 	stmdb	r4, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc9c:	d132      	bne.n	800dd04 <dir_register+0xac>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dc9e:	f01b 0502 	ands.w	r5, fp, #2
 800dca2:	9c03      	ldr	r4, [sp, #12]
 800dca4:	f000 81de 	beq.w	800e064 <dir_register+0x40c>
 800dca8:	49d2      	ldr	r1, [pc, #840]	@ (800dff4 <dir_register+0x39c>)
 800dcaa:	f10a 020c 	add.w	r2, sl, #12
 800dcae:	fba1 1202 	umull	r1, r2, r1, r2
	res = dir_sdi(dp, 0);
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	2100      	movs	r1, #0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dcb6:	0895      	lsrs	r5, r2, #2
	res = dir_sdi(dp, 0);
 800dcb8:	f7ff fb3a 	bl	800d330 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dcbc:	f105 0b01 	add.w	fp, r5, #1
	if (res == FR_OK) {
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	f040 81d8 	bne.w	800e078 <dir_register+0x420>
		n = 0;
 800dcc8:	4680      	mov	r8, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dcca:	f104 0a34 	add.w	sl, r4, #52	@ 0x34
 800dcce:	9501      	str	r5, [sp, #4]
			res = move_window(fs, dp->sect);
 800dcd0:	69f7      	ldr	r7, [r6, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800dcd2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800dcd4:	42af      	cmp	r7, r5
 800dcd6:	f000 8173 	beq.w	800dfc0 <dir_register+0x368>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dcda:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dcdc:	7860      	ldrb	r0, [r4, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f040 8286 	bne.w	800e1f0 <dir_register+0x598>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dce4:	2301      	movs	r3, #1
 800dce6:	463a      	mov	r2, r7
 800dce8:	4651      	mov	r1, sl
 800dcea:	f7fe fe09 	bl	800c900 <disk_read>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	f000 8165 	beq.w	800dfbe <dir_register+0x366>
			fs->winsect = sector;
 800dcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf8:	6323      	str	r3, [r4, #48]	@ 0x30
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dcfa:	2101      	movs	r1, #1
}
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	b00d      	add	sp, #52	@ 0x34
 800dd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dd04:	2240      	movs	r2, #64	@ 0x40
 800dd06:	f886 202f 	strb.w	r2, [r6, #47]	@ 0x2f
			*d++ = *s++;
 800dd0a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd0e:	f8cd b010 	str.w	fp, [sp, #16]
			*d++ = *s++;
 800dd12:	f89d 802e 	ldrb.w	r8, [sp, #46]	@ 0x2e
				if (sr & 0x10000) sr ^= 0x11021;
 800dd16:	4cb8      	ldr	r4, [pc, #736]	@ (800dff8 <dir_register+0x3a0>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd18:	f8dd b00c 	ldr.w	fp, [sp, #12]
			*d++ = *s++;
 800dd1c:	9001      	str	r0, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd1e:	f8cd a014 	str.w	sl, [sp, #20]
			*d++ = *s++;
 800dd22:	9102      	str	r1, [sp, #8]
		for (n = 1; n < 100; n++) {
 800dd24:	f04f 0901 	mov.w	r9, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd28:	2720      	movs	r7, #32
 800dd2a:	4692      	mov	sl, r2
 800dd2c:	4618      	mov	r0, r3
			*d++ = *s++;
 800dd2e:	9b01      	ldr	r3, [sp, #4]
 800dd30:	6273      	str	r3, [r6, #36]	@ 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dd32:	f1b9 0f05 	cmp.w	r9, #5
			*d++ = *s++;
 800dd36:	9b02      	ldr	r3, [sp, #8]
 800dd38:	62b3      	str	r3, [r6, #40]	@ 0x28
 800dd3a:	f8a6 a02c 	strh.w	sl, [r6, #44]	@ 0x2c
 800dd3e:	f886 802e 	strb.w	r8, [r6, #46]	@ 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dd42:	f240 8130 	bls.w	800dfa6 <dir_register+0x34e>
		while (*lfn) {	/* Create a CRC */
 800dd46:	8802      	ldrh	r2, [r0, #0]
 800dd48:	46cc      	mov	ip, r9
 800dd4a:	2a00      	cmp	r2, #0
 800dd4c:	f000 8093 	beq.w	800de76 <dir_register+0x21e>
				sr = (sr << 1) + (wc & 1);
 800dd50:	f002 0e01 	and.w	lr, r2, #1
 800dd54:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
				wc >>= 1;
 800dd58:	0851      	lsrs	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800dd5a:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
 800dd5e:	bf18      	it	ne
 800dd60:	ea8e 0e04 	eorne.w	lr, lr, r4
				sr = (sr << 1) + (wc & 1);
 800dd64:	f001 0101 	and.w	r1, r1, #1
 800dd68:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
 800dd6c:	0893      	lsrs	r3, r2, #2
				if (sr & 0x10000) sr ^= 0x11021;
 800dd6e:	f41e 4f00 	tst.w	lr, #32768	@ 0x8000
 800dd72:	bf18      	it	ne
 800dd74:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800dd7e:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 800dd82:	0409      	lsls	r1, r1, #16
 800dd84:	bf48      	it	mi
 800dd86:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800dd88:	f00c 0c01 	and.w	ip, ip, #1
 800dd8c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				wc >>= 1;
 800dd90:	0911      	lsrs	r1, r2, #4
				if (sr & 0x10000) sr ^= 0x11021;
 800dd92:	041b      	lsls	r3, r3, #16
 800dd94:	bf48      	it	mi
 800dd96:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800dd9a:	f001 0101 	and.w	r1, r1, #1
 800dd9e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				wc >>= 1;
 800dda2:	0953      	lsrs	r3, r2, #5
				if (sr & 0x10000) sr ^= 0x11021;
 800dda4:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
 800dda8:	bf18      	it	ne
 800ddaa:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800ddb4:	ea4f 1c92 	mov.w	ip, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800ddb8:	0409      	lsls	r1, r1, #16
 800ddba:	bf48      	it	mi
 800ddbc:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ddbe:	f00c 0c01 	and.w	ip, ip, #1
 800ddc2:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				wc >>= 1;
 800ddc6:	09d1      	lsrs	r1, r2, #7
				if (sr & 0x10000) sr ^= 0x11021;
 800ddc8:	041b      	lsls	r3, r3, #16
 800ddca:	bf48      	it	mi
 800ddcc:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800ddd0:	f001 0101 	and.w	r1, r1, #1
 800ddd4:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				wc >>= 1;
 800ddd8:	0a13      	lsrs	r3, r2, #8
				if (sr & 0x10000) sr ^= 0x11021;
 800ddda:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
 800ddde:	bf18      	it	ne
 800dde0:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800ddea:	ea4f 2c52 	mov.w	ip, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800ddee:	0409      	lsls	r1, r1, #16
 800ddf0:	bf48      	it	mi
 800ddf2:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ddf4:	f00c 0c01 	and.w	ip, ip, #1
 800ddf8:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				wc >>= 1;
 800ddfc:	0a91      	lsrs	r1, r2, #10
				if (sr & 0x10000) sr ^= 0x11021;
 800ddfe:	041b      	lsls	r3, r3, #16
 800de00:	bf48      	it	mi
 800de02:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800de06:	f001 0101 	and.w	r1, r1, #1
 800de0a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				wc >>= 1;
 800de0e:	0ad3      	lsrs	r3, r2, #11
				if (sr & 0x10000) sr ^= 0x11021;
 800de10:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
 800de14:	bf18      	it	ne
 800de16:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800de18:	f003 0301 	and.w	r3, r3, #1
 800de1c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800de20:	ea4f 3c12 	mov.w	ip, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800de24:	0409      	lsls	r1, r1, #16
 800de26:	bf48      	it	mi
 800de28:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800de2a:	f00c 0c01 	and.w	ip, ip, #1
 800de2e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				wc >>= 1;
 800de32:	0b51      	lsrs	r1, r2, #13
				if (sr & 0x10000) sr ^= 0x11021;
 800de34:	041b      	lsls	r3, r3, #16
 800de36:	bf48      	it	mi
 800de38:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800de3c:	f001 0101 	and.w	r1, r1, #1
 800de40:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				wc >>= 1;
 800de44:	0b93      	lsrs	r3, r2, #14
				if (sr & 0x10000) sr ^= 0x11021;
 800de46:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
 800de4a:	bf18      	it	ne
 800de4c:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				wc >>= 1;
 800de56:	ea4f 3cd2 	mov.w	ip, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800de5a:	040a      	lsls	r2, r1, #16
 800de5c:	bf48      	it	mi
 800de5e:	4063      	eormi	r3, r4
		while (*lfn) {	/* Create a CRC */
 800de60:	f830 2f02 	ldrh.w	r2, [r0, #2]!
				sr = (sr << 1) + (wc & 1);
 800de64:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800de68:	041b      	lsls	r3, r3, #16
 800de6a:	bf48      	it	mi
 800de6c:	ea8c 0c04 	eormi.w	ip, ip, r4
		while (*lfn) {	/* Create a CRC */
 800de70:	2a00      	cmp	r2, #0
 800de72:	f47f af6d 	bne.w	800dd50 <dir_register+0xf8>
		c = (BYTE)((seq % 16) + '0');
 800de76:	f00c 030f 	and.w	r3, ip, #15
 800de7a:	f103 0e30 	add.w	lr, r3, #48	@ 0x30
		if (c > '9') c += 7;
 800de7e:	f1be 0f39 	cmp.w	lr, #57	@ 0x39
 800de82:	bf88      	it	hi
 800de84:	f103 0e37 	addhi.w	lr, r3, #55	@ 0x37
	} while (seq);
 800de88:	f1bc 0f0f 	cmp.w	ip, #15
		ns[i--] = c;
 800de8c:	f88d e023 	strb.w	lr, [sp, #35]	@ 0x23
		seq /= 16;
 800de90:	ea4f 121c 	mov.w	r2, ip, lsr #4
	} while (seq);
 800de94:	f240 808d 	bls.w	800dfb2 <dir_register+0x35a>
		c = (BYTE)((seq % 16) + '0');
 800de98:	f002 010f 	and.w	r1, r2, #15
 800de9c:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 800dea0:	2b39      	cmp	r3, #57	@ 0x39
 800dea2:	bf88      	it	hi
 800dea4:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 800dea8:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800deaa:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
		seq /= 16;
 800deae:	ea4f 211c 	mov.w	r1, ip, lsr #8
	} while (seq);
 800deb2:	f240 818b 	bls.w	800e1cc <dir_register+0x574>
		c = (BYTE)((seq % 16) + '0');
 800deb6:	f001 020f 	and.w	r2, r1, #15
 800deba:	f102 0330 	add.w	r3, r2, #48	@ 0x30
		if (c > '9') c += 7;
 800debe:	2b39      	cmp	r3, #57	@ 0x39
 800dec0:	bf88      	it	hi
 800dec2:	f102 0337 	addhi.w	r3, r2, #55	@ 0x37
	} while (seq);
 800dec6:	290f      	cmp	r1, #15
		ns[i--] = c;
 800dec8:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
		seq /= 16;
 800decc:	ea4f 321c 	mov.w	r2, ip, lsr #12
	} while (seq);
 800ded0:	f240 8182 	bls.w	800e1d8 <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 800ded4:	f002 010f 	and.w	r1, r2, #15
 800ded8:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 800dedc:	2b39      	cmp	r3, #57	@ 0x39
 800dede:	bf88      	it	hi
 800dee0:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 800dee4:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800dee6:	f88d 3020 	strb.w	r3, [sp, #32]
		seq /= 16;
 800deea:	ea4f 411c 	mov.w	r1, ip, lsr #16
	} while (seq);
 800deee:	f240 8179 	bls.w	800e1e4 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 800def2:	f001 020f 	and.w	r2, r1, #15
 800def6:	f102 0330 	add.w	r3, r2, #48	@ 0x30
		if (c > '9') c += 7;
 800defa:	2b39      	cmp	r3, #57	@ 0x39
 800defc:	bf88      	it	hi
 800defe:	f102 0337 	addhi.w	r3, r2, #55	@ 0x37
	} while (seq);
 800df02:	290f      	cmp	r1, #15
		ns[i--] = c;
 800df04:	f88d 301f 	strb.w	r3, [sp, #31]
		seq /= 16;
 800df08:	ea4f 521c 	mov.w	r2, ip, lsr #20
	} while (seq);
 800df0c:	f240 8193 	bls.w	800e236 <dir_register+0x5de>
		c = (BYTE)((seq % 16) + '0');
 800df10:	f002 010f 	and.w	r1, r2, #15
 800df14:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 800df18:	2b39      	cmp	r3, #57	@ 0x39
 800df1a:	bf88      	it	hi
 800df1c:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 800df20:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800df22:	f88d 301e 	strb.w	r3, [sp, #30]
		seq /= 16;
 800df26:	ea4f 631c 	mov.w	r3, ip, lsr #24
	} while (seq);
 800df2a:	f240 818a 	bls.w	800e242 <dir_register+0x5ea>
		c = (BYTE)((seq % 16) + '0');
 800df2e:	f003 010f 	and.w	r1, r3, #15
 800df32:	f101 0230 	add.w	r2, r1, #48	@ 0x30
		if (c > '9') c += 7;
 800df36:	2a39      	cmp	r2, #57	@ 0x39
 800df38:	bf88      	it	hi
 800df3a:	f101 0237 	addhi.w	r2, r1, #55	@ 0x37
	} while (seq);
 800df3e:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 800df40:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
 800df44:	f240 8183 	bls.w	800e24e <dir_register+0x5f6>
		ns[i--] = c;
 800df48:	f04f 3cff 	mov.w	ip, #4294967295
 800df4c:	f106 0123 	add.w	r1, r6, #35	@ 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800df50:	2200      	movs	r2, #0
 800df52:	e001      	b.n	800df58 <dir_register+0x300>
 800df54:	4594      	cmp	ip, r2
 800df56:	d051      	beq.n	800dffc <dir_register+0x3a4>
 800df58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df5c:	2820      	cmp	r0, #32
 800df5e:	4613      	mov	r3, r2
 800df60:	f102 0201 	add.w	r2, r2, #1
 800df64:	d1f6      	bne.n	800df54 <dir_register+0x2fc>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df66:	f1bc 0f07 	cmp.w	ip, #7
 800df6a:	d94b      	bls.n	800e004 <dir_register+0x3ac>
 800df6c:	1c58      	adds	r0, r3, #1
	} while (j < 8);
 800df6e:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df70:	54ef      	strb	r7, [r5, r3]
	} while (j < 8);
 800df72:	d80a      	bhi.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	2b08      	cmp	r3, #8
 800df78:	f1c0 0208 	rsb	r2, r0, #8
 800df7c:	f04f 0120 	mov.w	r1, #32
 800df80:	bf88      	it	hi
 800df82:	2201      	movhi	r2, #1
 800df84:	4428      	add	r0, r5
 800df86:	f001 fd99 	bl	800fabc <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7ff fa7a 	bl	800d484 <dir_find>
 800df90:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 800df92:	2800      	cmp	r0, #0
 800df94:	d15a      	bne.n	800e04c <dir_register+0x3f4>
		for (n = 1; n < 100; n++) {
 800df96:	f109 0901 	add.w	r9, r9, #1
 800df9a:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800df9e:	d024      	beq.n	800dfea <dir_register+0x392>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dfa0:	f8db 000c 	ldr.w	r0, [fp, #12]
 800dfa4:	e6c3      	b.n	800dd2e <dir_register+0xd6>
		c = (BYTE)((seq % 16) + '0');
 800dfa6:	f109 0e30 	add.w	lr, r9, #48	@ 0x30
 800dfaa:	fa5f fe8e 	uxtb.w	lr, lr
		ns[i--] = c;
 800dfae:	f88d e023 	strb.w	lr, [sp, #35]	@ 0x23
	ns[i] = '~';
 800dfb2:	237e      	movs	r3, #126	@ 0x7e
 800dfb4:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
		ns[i--] = c;
 800dfb8:	f04f 0c06 	mov.w	ip, #6
 800dfbc:	e7c6      	b.n	800df4c <dir_register+0x2f4>
			fs->winsect = sector;
 800dfbe:	6327      	str	r7, [r4, #48]	@ 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfc0:	6a33      	ldr	r3, [r6, #32]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2be5      	cmp	r3, #229	@ 0xe5
 800dfc6:	f000 80cd 	beq.w	800e164 <dir_register+0x50c>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 80ca 	beq.w	800e164 <dir_register+0x50c>
				n = 0;					/* Not a blank entry. Restart to search */
 800dfd0:	f04f 0800 	mov.w	r8, #0
			res = dir_next(dp, 1);
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f7ff fd5e 	bl	800da98 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	f43f ae77 	beq.w	800dcd0 <dir_register+0x78>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfe2:	2804      	cmp	r0, #4
 800dfe4:	4601      	mov	r1, r0
 800dfe6:	f47f ae89 	bne.w	800dcfc <dir_register+0xa4>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dfea:	2107      	movs	r1, #7
}
 800dfec:	4608      	mov	r0, r1
 800dfee:	b00d      	add	sp, #52	@ 0x34
 800dff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff4:	4ec4ec4f 	.word	0x4ec4ec4f
 800dff8:	00011021 	.word	0x00011021
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dffc:	f1bc 0f07 	cmp.w	ip, #7
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e000:	4663      	mov	r3, ip
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e002:	d8b3      	bhi.n	800df6c <dir_register+0x314>
 800e004:	f10c 0230 	add.w	r2, ip, #48	@ 0x30
 800e008:	446a      	add	r2, sp
 800e00a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e00e:	54ea      	strb	r2, [r5, r3]
 800e010:	1c5a      	adds	r2, r3, #1
	} while (j < 8);
 800e012:	2a07      	cmp	r2, #7
 800e014:	d8b9      	bhi.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e016:	f10c 0c01 	add.w	ip, ip, #1
 800e01a:	f10c 0130 	add.w	r1, ip, #48	@ 0x30
 800e01e:	4469      	add	r1, sp
	} while (j < 8);
 800e020:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e022:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e026:	54a9      	strb	r1, [r5, r2]
 800e028:	f10c 0201 	add.w	r2, ip, #1
 800e02c:	f103 0102 	add.w	r1, r3, #2
	} while (j < 8);
 800e030:	d0ab      	beq.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e032:	2a08      	cmp	r2, #8
 800e034:	d126      	bne.n	800e084 <dir_register+0x42c>
	} while (j < 8);
 800e036:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e038:	546f      	strb	r7, [r5, r1]
 800e03a:	f103 0003 	add.w	r0, r3, #3
	} while (j < 8);
 800e03e:	d199      	bne.n	800df74 <dir_register+0x31c>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e040:	4630      	mov	r0, r6
 800e042:	f7ff fa1f 	bl	800d484 <dir_find>
 800e046:	4601      	mov	r1, r0
			if (res != FR_OK) break;
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0a4      	beq.n	800df96 <dir_register+0x33e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e04c:	2804      	cmp	r0, #4
 800e04e:	e9dd ba04 	ldrd	fp, sl, [sp, #16]
 800e052:	f47f ae53 	bne.w	800dcfc <dir_register+0xa4>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e056:	f01b 0502 	ands.w	r5, fp, #2
	FATFS *fs = dp->obj.fs;
 800e05a:	6834      	ldr	r4, [r6, #0]
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e05c:	f886 b02f 	strb.w	fp, [r6, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e060:	f47f ae22 	bne.w	800dca8 <dir_register+0x50>
	res = dir_sdi(dp, 0);
 800e064:	2100      	movs	r1, #0
 800e066:	4630      	mov	r0, r6
 800e068:	f7ff f962 	bl	800d330 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e06c:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
 800e070:	4601      	mov	r1, r0
 800e072:	2800      	cmp	r0, #0
 800e074:	f43f ae28 	beq.w	800dcc8 <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e078:	2804      	cmp	r0, #4
 800e07a:	d0b6      	beq.n	800dfea <dir_register+0x392>
}
 800e07c:	4608      	mov	r0, r1
 800e07e:	b00d      	add	sp, #52	@ 0x34
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e084:	3230      	adds	r2, #48	@ 0x30
 800e086:	446a      	add	r2, sp
	} while (j < 8);
 800e088:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e08a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e08e:	546a      	strb	r2, [r5, r1]
 800e090:	f10c 0202 	add.w	r2, ip, #2
 800e094:	f103 0103 	add.w	r1, r3, #3
	} while (j < 8);
 800e098:	f43f af77 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e09c:	2a08      	cmp	r2, #8
 800e09e:	d106      	bne.n	800e0ae <dir_register+0x456>
	} while (j < 8);
 800e0a0:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0a2:	546f      	strb	r7, [r5, r1]
 800e0a4:	f103 0004 	add.w	r0, r3, #4
	} while (j < 8);
 800e0a8:	f47f af64 	bne.w	800df74 <dir_register+0x31c>
 800e0ac:	e76d      	b.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0ae:	3230      	adds	r2, #48	@ 0x30
 800e0b0:	446a      	add	r2, sp
	} while (j < 8);
 800e0b2:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e0b8:	546a      	strb	r2, [r5, r1]
 800e0ba:	f10c 0203 	add.w	r2, ip, #3
 800e0be:	f103 0104 	add.w	r1, r3, #4
	} while (j < 8);
 800e0c2:	f43f af62 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0c6:	2a08      	cmp	r2, #8
 800e0c8:	d106      	bne.n	800e0d8 <dir_register+0x480>
	} while (j < 8);
 800e0ca:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0cc:	546f      	strb	r7, [r5, r1]
 800e0ce:	f103 0005 	add.w	r0, r3, #5
	} while (j < 8);
 800e0d2:	f47f af4f 	bne.w	800df74 <dir_register+0x31c>
 800e0d6:	e758      	b.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0d8:	3230      	adds	r2, #48	@ 0x30
 800e0da:	446a      	add	r2, sp
	} while (j < 8);
 800e0dc:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e0e2:	546a      	strb	r2, [r5, r1]
 800e0e4:	f10c 0204 	add.w	r2, ip, #4
 800e0e8:	f103 0105 	add.w	r1, r3, #5
	} while (j < 8);
 800e0ec:	f43f af4d 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0f0:	2a08      	cmp	r2, #8
 800e0f2:	d106      	bne.n	800e102 <dir_register+0x4aa>
	} while (j < 8);
 800e0f4:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e0f6:	546f      	strb	r7, [r5, r1]
 800e0f8:	f103 0006 	add.w	r0, r3, #6
	} while (j < 8);
 800e0fc:	f47f af3a 	bne.w	800df74 <dir_register+0x31c>
 800e100:	e743      	b.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e102:	3230      	adds	r2, #48	@ 0x30
 800e104:	446a      	add	r2, sp
	} while (j < 8);
 800e106:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e108:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e10c:	546a      	strb	r2, [r5, r1]
 800e10e:	f10c 0205 	add.w	r2, ip, #5
 800e112:	f103 0106 	add.w	r1, r3, #6
	} while (j < 8);
 800e116:	f43f af38 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e11a:	2a08      	cmp	r2, #8
 800e11c:	d106      	bne.n	800e12c <dir_register+0x4d4>
	} while (j < 8);
 800e11e:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e120:	546f      	strb	r7, [r5, r1]
 800e122:	f103 0007 	add.w	r0, r3, #7
	} while (j < 8);
 800e126:	f47f af25 	bne.w	800df74 <dir_register+0x31c>
 800e12a:	e72e      	b.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e12c:	3230      	adds	r2, #48	@ 0x30
 800e12e:	446a      	add	r2, sp
	} while (j < 8);
 800e130:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e132:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e136:	546a      	strb	r2, [r5, r1]
 800e138:	f103 0207 	add.w	r2, r3, #7
	} while (j < 8);
 800e13c:	f43f af25 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e140:	f1bc 0f01 	cmp.w	ip, #1
 800e144:	d006      	beq.n	800e154 <dir_register+0x4fc>
	} while (j < 8);
 800e146:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e148:	54af      	strb	r7, [r5, r2]
 800e14a:	bf08      	it	eq
 800e14c:	2007      	moveq	r0, #7
	} while (j < 8);
 800e14e:	f43f af11 	beq.w	800df74 <dir_register+0x31c>
 800e152:	e71a      	b.n	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e154:	f805 e002 	strb.w	lr, [r5, r2]
	} while (j < 8);
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f43f af16 	beq.w	800df8a <dir_register+0x332>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e15e:	f886 702b 	strb.w	r7, [r6, #43]	@ 0x2b
	} while (j < 8);
 800e162:	e712      	b.n	800df8a <dir_register+0x332>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e164:	f108 0801 	add.w	r8, r8, #1
 800e168:	45c3      	cmp	fp, r8
 800e16a:	f47f af33 	bne.w	800dfd4 <dir_register+0x37c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e16e:	9d01      	ldr	r5, [sp, #4]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e170:	2d00      	cmp	r5, #0
 800e172:	d17a      	bne.n	800e26a <dir_register+0x612>
		res = move_window(fs, dp->sect);
 800e174:	69f1      	ldr	r1, [r6, #28]
 800e176:	9803      	ldr	r0, [sp, #12]
 800e178:	f7fe fd8c 	bl	800cc94 <move_window>
		if (res == FR_OK) {
 800e17c:	4601      	mov	r1, r0
 800e17e:	2800      	cmp	r0, #0
 800e180:	f47f adbc 	bne.w	800dcfc <dir_register+0xa4>
		*d++ = (BYTE)val;
 800e184:	2220      	movs	r2, #32
 800e186:	9001      	str	r0, [sp, #4]
 800e188:	6a30      	ldr	r0, [r6, #32]
 800e18a:	f001 fc97 	bl	800fabc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e18e:	6a32      	ldr	r2, [r6, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e190:	9901      	ldr	r1, [sp, #4]
 800e192:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 800e196:	1a10      	subs	r0, r2, r0
 800e198:	2802      	cmp	r0, #2
 800e19a:	f240 81a5 	bls.w	800e4e8 <dir_register+0x890>
			*d++ = *s++;
 800e19e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e1a0:	6010      	str	r0, [r2, #0]
 800e1a2:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800e1a4:	6050      	str	r0, [r2, #4]
 800e1a6:	f896 002c 	ldrb.w	r0, [r6, #44]	@ 0x2c
 800e1aa:	7210      	strb	r0, [r2, #8]
 800e1ac:	f896 002d 	ldrb.w	r0, [r6, #45]	@ 0x2d
 800e1b0:	7250      	strb	r0, [r2, #9]
 800e1b2:	f896 002e 	ldrb.w	r0, [r6, #46]	@ 0x2e
 800e1b6:	7290      	strb	r0, [r2, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e1b8:	f896 202f 	ldrb.w	r2, [r6, #47]	@ 0x2f
 800e1bc:	6a30      	ldr	r0, [r6, #32]
 800e1be:	f002 0318 	and.w	r3, r2, #24
 800e1c2:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
 800e1c4:	9b03      	ldr	r3, [sp, #12]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	70da      	strb	r2, [r3, #3]
 800e1ca:	e597      	b.n	800dcfc <dir_register+0xa4>
	ns[i] = '~';
 800e1cc:	237e      	movs	r3, #126	@ 0x7e
 800e1ce:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
		ns[i--] = c;
 800e1d2:	f04f 0c05 	mov.w	ip, #5
 800e1d6:	e6b9      	b.n	800df4c <dir_register+0x2f4>
	ns[i] = '~';
 800e1d8:	237e      	movs	r3, #126	@ 0x7e
 800e1da:	f88d 3020 	strb.w	r3, [sp, #32]
		ns[i--] = c;
 800e1de:	f04f 0c04 	mov.w	ip, #4
 800e1e2:	e6b3      	b.n	800df4c <dir_register+0x2f4>
	ns[i] = '~';
 800e1e4:	237e      	movs	r3, #126	@ 0x7e
 800e1e6:	f88d 301f 	strb.w	r3, [sp, #31]
		ns[i--] = c;
 800e1ea:	f04f 0c03 	mov.w	ip, #3
 800e1ee:	e6ad      	b.n	800df4c <dir_register+0x2f4>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	462a      	mov	r2, r5
 800e1f4:	4651      	mov	r1, sl
 800e1f6:	f7fe fb91 	bl	800c91c <disk_write>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f47f ad7d 	bne.w	800dcfa <dir_register+0xa2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e200:	6a63      	ldr	r3, [r4, #36]	@ 0x24
			fs->wflag = 0;
 800e202:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e204:	1ae9      	subs	r1, r5, r3
 800e206:	69e3      	ldr	r3, [r4, #28]
 800e208:	4299      	cmp	r1, r3
 800e20a:	d212      	bcs.n	800e232 <dir_register+0x5da>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e20c:	f894 9002 	ldrb.w	r9, [r4, #2]
 800e210:	f1b9 0f01 	cmp.w	r9, #1
 800e214:	d801      	bhi.n	800e21a <dir_register+0x5c2>
 800e216:	e00c      	b.n	800e232 <dir_register+0x5da>
					wsect += fs->fsize;
 800e218:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e21a:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800e21c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800e21e:	462a      	mov	r2, r5
 800e220:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e222:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800e226:	4651      	mov	r1, sl
 800e228:	f7fe fb78 	bl	800c91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e22c:	f1b9 0f01 	cmp.w	r9, #1
 800e230:	d1f2      	bne.n	800e218 <dir_register+0x5c0>
 800e232:	7860      	ldrb	r0, [r4, #1]
 800e234:	e556      	b.n	800dce4 <dir_register+0x8c>
	ns[i] = '~';
 800e236:	237e      	movs	r3, #126	@ 0x7e
 800e238:	f88d 301e 	strb.w	r3, [sp, #30]
		ns[i--] = c;
 800e23c:	f04f 0c02 	mov.w	ip, #2
 800e240:	e684      	b.n	800df4c <dir_register+0x2f4>
	ns[i] = '~';
 800e242:	237e      	movs	r3, #126	@ 0x7e
 800e244:	f88d 301d 	strb.w	r3, [sp, #29]
		ns[i--] = c;
 800e248:	f04f 0c01 	mov.w	ip, #1
 800e24c:	e67e      	b.n	800df4c <dir_register+0x2f4>
	ns[i] = '~';
 800e24e:	237e      	movs	r3, #126	@ 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e250:	2201      	movs	r2, #1
	ns[i] = '~';
 800e252:	f88d 301c 	strb.w	r3, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e256:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
 800e25a:	4694      	mov	ip, r2
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e25c:	2300      	movs	r3, #0
 800e25e:	e6dc      	b.n	800e01a <dir_register+0x3c2>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e260:	2106      	movs	r1, #6
}
 800e262:	4608      	mov	r0, r1
 800e264:	b00d      	add	sp, #52	@ 0x34
 800e266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e26a:	6971      	ldr	r1, [r6, #20]
 800e26c:	4630      	mov	r0, r6
 800e26e:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 800e272:	f7ff f85d 	bl	800d330 <dir_sdi>
		if (res == FR_OK) {
 800e276:	4601      	mov	r1, r0
 800e278:	2800      	cmp	r0, #0
 800e27a:	f47f ad3f 	bne.w	800dcfc <dir_register+0xa4>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e27e:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 800e282:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e286:	01ca      	lsls	r2, r1, #7
 800e288:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 800e28c:	f896 1025 	ldrb.w	r1, [r6, #37]	@ 0x25
 800e290:	440a      	add	r2, r1
 800e292:	f3c2 0146 	ubfx	r1, r2, #1, #7
 800e296:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 800e29a:	f896 2026 	ldrb.w	r2, [r6, #38]	@ 0x26
 800e29e:	fa52 f181 	uxtab	r1, r2, r1
 800e2a2:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800e2a6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800e2aa:	f896 1027 	ldrb.w	r1, [r6, #39]	@ 0x27
 800e2ae:	fa51 f282 	uxtab	r2, r1, r2
 800e2b2:	f3c2 0146 	ubfx	r1, r2, #1, #7
 800e2b6:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 800e2ba:	f896 2028 	ldrb.w	r2, [r6, #40]	@ 0x28
 800e2be:	fa52 f181 	uxtab	r1, r2, r1
 800e2c2:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800e2c6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800e2ca:	f896 1029 	ldrb.w	r1, [r6, #41]	@ 0x29
 800e2ce:	fa51 f282 	uxtab	r2, r1, r2
 800e2d2:	f3c2 0146 	ubfx	r1, r2, #1, #7
 800e2d6:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 800e2da:	f896 202a 	ldrb.w	r2, [r6, #42]	@ 0x2a
 800e2de:	fa52 f181 	uxtab	r1, r2, r1
 800e2e2:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800e2e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800e2ea:	f896 102b 	ldrb.w	r1, [r6, #43]	@ 0x2b
 800e2ee:	fa51 f282 	uxtab	r2, r1, r2
 800e2f2:	f3c2 0146 	ubfx	r1, r2, #1, #7
 800e2f6:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 800e2fa:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 800e2fe:	fa52 f181 	uxtab	r1, r2, r1
 800e302:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800e306:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800e30a:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 800e30e:	fa51 f282 	uxtab	r2, r1, r2
 800e312:	f3c2 0746 	ubfx	r7, r2, #1, #7
 800e316:	ea47 17c2 	orr.w	r7, r7, r2, lsl #7
 800e31a:	f896 202e 	ldrb.w	r2, [r6, #46]	@ 0x2e
 800e31e:	fa52 f787 	uxtab	r7, r2, r7
 800e322:	b2ff      	uxtb	r7, r7
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e324:	f04f 080f 	mov.w	r8, #15
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e328:	f64f 74fd 	movw	r4, #65533	@ 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 800e32c:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800e330:	e029      	b.n	800e386 <dir_register+0x72e>
 800e332:	f8a3 9003 	strh.w	r9, [r3, #3]
 800e336:	f8a3 9005 	strh.w	r9, [r3, #5]
 800e33a:	f8a3 9007 	strh.w	r9, [r3, #7]
 800e33e:	f8a3 9009 	strh.w	r9, [r3, #9]
 800e342:	f8a3 900e 	strh.w	r9, [r3, #14]
 800e346:	f8a3 9010 	strh.w	r9, [r3, #16]
 800e34a:	f8a3 9012 	strh.w	r9, [r3, #18]
 800e34e:	f8a3 9014 	strh.w	r9, [r3, #20]
 800e352:	f8a3 9016 	strh.w	r9, [r3, #22]
 800e356:	f8a3 9018 	strh.w	r9, [r3, #24]
 800e35a:	f8a3 901c 	strh.w	r9, [r3, #28]
 800e35e:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e362:	f04c 0c40 	orr.w	ip, ip, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e366:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
 800e36a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800e36c:	2100      	movs	r1, #0
				fs->wflag = 1;
 800e36e:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e372:	4630      	mov	r0, r6
 800e374:	f7ff fb90 	bl	800da98 <dir_next>
			} while (res == FR_OK && --nent);
 800e378:	4601      	mov	r1, r0
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f47f acbe 	bne.w	800dcfc <dir_register+0xa4>
 800e380:	3d01      	subs	r5, #1
 800e382:	f43f aef7 	beq.w	800e174 <dir_register+0x51c>
				res = move_window(fs, dp->sect);
 800e386:	69f1      	ldr	r1, [r6, #28]
 800e388:	4650      	mov	r0, sl
 800e38a:	f7fe fc83 	bl	800cc94 <move_window>
 800e38e:	4686      	mov	lr, r0
 800e390:	4601      	mov	r1, r0
				if (res != FR_OK) break;
 800e392:	2800      	cmp	r0, #0
 800e394:	f47f acb2 	bne.w	800dcfc <dir_register+0xa4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e398:	fa5f fc85 	uxtb.w	ip, r5
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e39c:	f10c 32ff 	add.w	r2, ip, #4294967295
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e3a0:	6a33      	ldr	r3, [r6, #32]
 800e3a2:	f8da 000c 	ldr.w	r0, [sl, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3a6:	f8a3 e01a 	strh.w	lr, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e3aa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e3ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e3b2:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e3b4:	f8a3 800b 	strh.w	r8, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3b8:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3bc:	7059      	strb	r1, [r3, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3be:	f101 3eff 	add.w	lr, r1, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 800e3c2:	0a09      	lsrs	r1, r1, #8
	*ptr++ = (BYTE)val;
 800e3c4:	7099      	strb	r1, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3c6:	fa1f f18e 	uxth.w	r1, lr
 800e3ca:	42a1      	cmp	r1, r4
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3cc:	ea4f 0e42 	mov.w	lr, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3d0:	d8af      	bhi.n	800e332 <dir_register+0x6da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3d2:	1c51      	adds	r1, r2, #1
 800e3d4:	004a      	lsls	r2, r1, #1
 800e3d6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3da:	70d9      	strb	r1, [r3, #3]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3dc:	f101 3bff 	add.w	fp, r1, #4294967295
 800e3e0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e3e4:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3e6:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e3e8:	7119      	strb	r1, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3ea:	d8a4      	bhi.n	800e336 <dir_register+0x6de>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3ec:	4402      	add	r2, r0
 800e3ee:	8851      	ldrh	r1, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3f0:	7159      	strb	r1, [r3, #5]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3f2:	f101 3bff 	add.w	fp, r1, #4294967295
 800e3f6:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e3fa:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3fc:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e3fe:	7199      	strb	r1, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e400:	d89b      	bhi.n	800e33a <dir_register+0x6e2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e402:	8891      	ldrh	r1, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e404:	71d9      	strb	r1, [r3, #7]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e406:	f101 3bff 	add.w	fp, r1, #4294967295
 800e40a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e40e:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e410:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e412:	7219      	strb	r1, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e414:	d893      	bhi.n	800e33e <dir_register+0x6e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e416:	88d1      	ldrh	r1, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 800e418:	7259      	strb	r1, [r3, #9]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e41a:	f101 3bff 	add.w	fp, r1, #4294967295
 800e41e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e422:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e424:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e426:	7299      	strb	r1, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e428:	d88b      	bhi.n	800e342 <dir_register+0x6ea>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e42a:	8911      	ldrh	r1, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800e42c:	7399      	strb	r1, [r3, #14]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e42e:	f101 3bff 	add.w	fp, r1, #4294967295
 800e432:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e436:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e438:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e43a:	73d9      	strb	r1, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e43c:	d883      	bhi.n	800e346 <dir_register+0x6ee>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e43e:	8951      	ldrh	r1, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 800e440:	7419      	strb	r1, [r3, #16]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e442:	f101 3bff 	add.w	fp, r1, #4294967295
 800e446:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e44a:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e44c:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e44e:	7459      	strb	r1, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e450:	f63f af7b 	bhi.w	800e34a <dir_register+0x6f2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e454:	8991      	ldrh	r1, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800e456:	7499      	strb	r1, [r3, #18]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e458:	f101 3bff 	add.w	fp, r1, #4294967295
 800e45c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e460:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e462:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e464:	74d9      	strb	r1, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e466:	f63f af72 	bhi.w	800e34e <dir_register+0x6f6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e46a:	89d1      	ldrh	r1, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800e46c:	7519      	strb	r1, [r3, #20]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e46e:	f101 3bff 	add.w	fp, r1, #4294967295
 800e472:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e476:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e478:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e47a:	7559      	strb	r1, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e47c:	f63f af69 	bhi.w	800e352 <dir_register+0x6fa>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e480:	8a11      	ldrh	r1, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800e482:	7599      	strb	r1, [r3, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e484:	f101 3bff 	add.w	fp, r1, #4294967295
 800e488:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e48c:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e48e:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e490:	75d9      	strb	r1, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e492:	f63f af60 	bhi.w	800e356 <dir_register+0x6fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e496:	8a51      	ldrh	r1, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 800e498:	7619      	strb	r1, [r3, #24]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e49a:	f101 3bff 	add.w	fp, r1, #4294967295
 800e49e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e4a2:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4a4:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e4a6:	7659      	strb	r1, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4a8:	f63f af57 	bhi.w	800e35a <dir_register+0x702>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e4ac:	8a91      	ldrh	r1, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4ae:	7719      	strb	r1, [r3, #28]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4b0:	f101 3bff 	add.w	fp, r1, #4294967295
 800e4b4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val; val >>= 8;
 800e4b8:	0a09      	lsrs	r1, r1, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4ba:	45a3      	cmp	fp, r4
	*ptr++ = (BYTE)val;
 800e4bc:	7759      	strb	r1, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4be:	f63f af4e 	bhi.w	800e35e <dir_register+0x706>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e4c2:	8ad2      	ldrh	r2, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4c4:	779a      	strb	r2, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4c6:	1e51      	subs	r1, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e4c8:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e4ca:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e4cc:	b28a      	uxth	r2, r1
 800e4ce:	42a2      	cmp	r2, r4
 800e4d0:	f63f af47 	bhi.w	800e362 <dir_register+0x70a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e4d4:	eb00 020e 	add.w	r2, r0, lr
 800e4d8:	8b52      	ldrh	r2, [r2, #26]
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	f47f af43 	bne.w	800e366 <dir_register+0x70e>
 800e4e0:	e73f      	b.n	800e362 <dir_register+0x70a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e4e2:	4692      	mov	sl, r2
 800e4e4:	f7ff bbd1 	b.w	800dc8a <dir_register+0x32>
			*d++ = *s++;
 800e4e8:	f896 0024 	ldrb.w	r0, [r6, #36]	@ 0x24
 800e4ec:	7010      	strb	r0, [r2, #0]
 800e4ee:	f896 0025 	ldrb.w	r0, [r6, #37]	@ 0x25
 800e4f2:	7050      	strb	r0, [r2, #1]
 800e4f4:	f896 0026 	ldrb.w	r0, [r6, #38]	@ 0x26
 800e4f8:	7090      	strb	r0, [r2, #2]
 800e4fa:	f896 0027 	ldrb.w	r0, [r6, #39]	@ 0x27
 800e4fe:	70d0      	strb	r0, [r2, #3]
 800e500:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 800e504:	7110      	strb	r0, [r2, #4]
 800e506:	f896 0029 	ldrb.w	r0, [r6, #41]	@ 0x29
 800e50a:	7150      	strb	r0, [r2, #5]
 800e50c:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800e510:	7190      	strb	r0, [r2, #6]
 800e512:	f896 002b 	ldrb.w	r0, [r6, #43]	@ 0x2b
 800e516:	71d0      	strb	r0, [r2, #7]
 800e518:	e645      	b.n	800e1a6 <dir_register+0x54e>
 800e51a:	bf00      	nop

0800e51c <remove_chain>:
{
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e520:	2901      	cmp	r1, #1
	FATFS *fs = obj->fs;
 800e522:	6805      	ldr	r5, [r0, #0]
{
 800e524:	b083      	sub	sp, #12
 800e526:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e528:	d90a      	bls.n	800e540 <remove_chain+0x24>
 800e52a:	69ab      	ldr	r3, [r5, #24]
 800e52c:	428b      	cmp	r3, r1
 800e52e:	d907      	bls.n	800e540 <remove_chain+0x24>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e530:	4606      	mov	r6, r0
 800e532:	4611      	mov	r1, r2
 800e534:	b942      	cbnz	r2, 800e548 <remove_chain+0x2c>
 800e536:	462f      	mov	r7, r5
			fs->wflag = 1;
 800e538:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e53c:	429c      	cmp	r4, r3
 800e53e:	d311      	bcc.n	800e564 <remove_chain+0x48>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e540:	2002      	movs	r0, #2
}
 800e542:	b003      	add	sp, #12
 800e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e548:	2a01      	cmp	r2, #1
 800e54a:	d0f9      	beq.n	800e540 <remove_chain+0x24>
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d9f7      	bls.n	800e540 <remove_chain+0x24>
 800e550:	f04f 32ff 	mov.w	r2, #4294967295
 800e554:	4628      	mov	r0, r5
 800e556:	f7fe fd3f 	bl	800cfd8 <put_fat.part.0>
		if (res != FR_OK) return res;
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d1f1      	bne.n	800e542 <remove_chain+0x26>
 800e55e:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	e7e9      	b.n	800e538 <remove_chain+0x1c>
		switch (fs->fs_type) {
 800e564:	783b      	ldrb	r3, [r7, #0]
 800e566:	2b02      	cmp	r3, #2
 800e568:	f000 8094 	beq.w	800e694 <remove_chain+0x178>
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d010      	beq.n	800e592 <remove_chain+0x76>
 800e570:	2b01      	cmp	r3, #1
 800e572:	d1e5      	bne.n	800e540 <remove_chain+0x24>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e576:	eb04 0954 	add.w	r9, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e57a:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800e57e:	4638      	mov	r0, r7
 800e580:	f7fe fb88 	bl	800cc94 <move_window>
 800e584:	2800      	cmp	r0, #0
 800e586:	f000 80ae 	beq.w	800e6e6 <remove_chain+0x1ca>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e58a:	2001      	movs	r0, #1
}
 800e58c:	b003      	add	sp, #12
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e594:	4638      	mov	r0, r7
 800e596:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e59a:	f7fe fb7b 	bl	800cc94 <move_window>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d1f3      	bne.n	800e58a <remove_chain+0x6e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e5a2:	00a3      	lsls	r3, r4, #2
 800e5a4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e5a8:	443b      	add	r3, r7
 800e5aa:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
		if (nxt == 0) break;				/* Empty cluster? */
 800e5ae:	f039 4970 	bics.w	r9, r9, #4026531840	@ 0xf0000000
 800e5b2:	f000 80b5 	beq.w	800e720 <remove_chain+0x204>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e5b6:	f1b9 0f01 	cmp.w	r9, #1
 800e5ba:	d0c1      	beq.n	800e540 <remove_chain+0x24>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5bc:	69ab      	ldr	r3, [r5, #24]
 800e5be:	429c      	cmp	r4, r3
 800e5c0:	d2be      	bcs.n	800e540 <remove_chain+0x24>
		switch (fs->fs_type) {
 800e5c2:	782f      	ldrb	r7, [r5, #0]
 800e5c4:	2f02      	cmp	r7, #2
 800e5c6:	d02d      	beq.n	800e624 <remove_chain+0x108>
 800e5c8:	2f03      	cmp	r7, #3
 800e5ca:	d04b      	beq.n	800e664 <remove_chain+0x148>
 800e5cc:	2f01      	cmp	r7, #1
 800e5ce:	d1b7      	bne.n	800e540 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5d0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e5d2:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5d6:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f7fe fb5a 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d1ae      	bne.n	800e542 <remove_chain+0x26>
			p = fs->win + bc++ % SS(fs);
 800e5e4:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e5e8:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800e5ea:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800e5ee:	f105 0334 	add.w	r3, r5, #52	@ 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5f2:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e5f6:	d461      	bmi.n	800e6bc <remove_chain+0x1a0>
 800e5f8:	f803 000a 	strb.w	r0, [r3, sl]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5fc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			fs->wflag = 1;
 800e5fe:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e600:	4411      	add	r1, r2
 800e602:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e604:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e606:	f7fe fb45 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d199      	bne.n	800e542 <remove_chain+0x26>
			p = fs->win + bc % SS(fs);
 800e60e:	9b01      	ldr	r3, [sp, #4]
 800e610:	f3cb 0208 	ubfx	r2, fp, #0, #9
 800e614:	eb03 0b02 	add.w	fp, r3, r2
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e618:	5c98      	ldrb	r0, [r3, r2]
 800e61a:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800e61e:	f88b 0000 	strb.w	r0, [fp]
			if (res != FR_OK) return res;
 800e622:	e00c      	b.n	800e63e <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e624:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800e626:	4628      	mov	r0, r5
 800e628:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e62c:	f7fe fb32 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800e630:	2800      	cmp	r0, #0
 800e632:	d186      	bne.n	800e542 <remove_chain+0x26>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e634:	0064      	lsls	r4, r4, #1
 800e636:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e63a:	442c      	add	r4, r5
 800e63c:	86a0      	strh	r0, [r4, #52]	@ 0x34
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e63e:	69aa      	ldr	r2, [r5, #24]
 800e640:	696b      	ldr	r3, [r5, #20]
			fs->wflag = 1;
 800e642:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e646:	1e91      	subs	r1, r2, #2
 800e648:	428b      	cmp	r3, r1
 800e64a:	d205      	bcs.n	800e658 <remove_chain+0x13c>
			fs->free_clst++;
 800e64c:	3301      	adds	r3, #1
 800e64e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800e650:	792b      	ldrb	r3, [r5, #4]
 800e652:	f043 0301 	orr.w	r3, r3, #1
 800e656:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e658:	454a      	cmp	r2, r9
 800e65a:	d961      	bls.n	800e720 <remove_chain+0x204>
 800e65c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e65e:	464c      	mov	r4, r9
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	e76b      	b.n	800e53c <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e664:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800e666:	4628      	mov	r0, r5
 800e668:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e66c:	f7fe fb12 	bl	800cc94 <move_window>
 800e670:	4603      	mov	r3, r0
			if (res != FR_OK) break;
 800e672:	2800      	cmp	r0, #0
 800e674:	f47f af65 	bne.w	800e542 <remove_chain+0x26>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e678:	00a4      	lsls	r4, r4, #2
 800e67a:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800e67e:	f105 0134 	add.w	r1, r5, #52	@ 0x34
 800e682:	1908      	adds	r0, r1, r4
	rv = rv << 8 | ptr[0];
 800e684:	590a      	ldr	r2, [r1, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e686:	530b      	strh	r3, [r1, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e688:	7083      	strb	r3, [r0, #2]
 800e68a:	0e13      	lsrs	r3, r2, #24
 800e68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800e690:	70c3      	strb	r3, [r0, #3]
			if (res != FR_OK) return res;
 800e692:	e7d4      	b.n	800e63e <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e696:	4638      	mov	r0, r7
 800e698:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e69c:	f7fe fafa 	bl	800cc94 <move_window>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	f47f af72 	bne.w	800e58a <remove_chain+0x6e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6a6:	0063      	lsls	r3, r4, #1
 800e6a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e6ac:	443b      	add	r3, r7
 800e6ae:	f8b3 9034 	ldrh.w	r9, [r3, #52]	@ 0x34
		if (nxt == 0) break;				/* Empty cluster? */
 800e6b2:	f1b9 0f00 	cmp.w	r9, #0
 800e6b6:	f47f af7e 	bne.w	800e5b6 <remove_chain+0x9a>
 800e6ba:	e031      	b.n	800e720 <remove_chain+0x204>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6bc:	f813 100a 	ldrb.w	r1, [r3, sl]
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	f001 010f 	and.w	r1, r1, #15
 800e6c6:	f803 100a 	strb.w	r1, [r3, sl]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6ca:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			fs->wflag = 1;
 800e6cc:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6ce:	4411      	add	r1, r2
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7fe fadf 	bl	800cc94 <move_window>
			if (res != FR_OK) break;
 800e6d6:	9b01      	ldr	r3, [sp, #4]
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	f47f af32 	bne.w	800e542 <remove_chain+0x26>
			p = fs->win + bc % SS(fs);
 800e6de:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800e6e2:	449b      	add	fp, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e6e4:	e79b      	b.n	800e61e <remove_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 800e6e6:	f3c9 0308 	ubfx	r3, r9, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
			wc = fs->win[bc++ % SS(fs)];
 800e6ec:	443b      	add	r3, r7
 800e6ee:	f109 0901 	add.w	r9, r9, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6f2:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800e6f6:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e6f8:	f893 a034 	ldrb.w	sl, [r3, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6fc:	f7fe faca 	bl	800cc94 <move_window>
 800e700:	2800      	cmp	r0, #0
 800e702:	f47f af42 	bne.w	800e58a <remove_chain+0x6e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e706:	f3c9 0908 	ubfx	r9, r9, #0, #9
 800e70a:	44b9      	add	r9, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e70c:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e70e:	f899 3034 	ldrb.w	r3, [r9, #52]	@ 0x34
 800e712:	ea4a 2903 	orr.w	r9, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e716:	d505      	bpl.n	800e724 <remove_chain+0x208>
		if (nxt == 0) break;				/* Empty cluster? */
 800e718:	ea5f 1919 	movs.w	r9, r9, lsr #4
 800e71c:	f47f af4b 	bne.w	800e5b6 <remove_chain+0x9a>
	return FR_OK;
 800e720:	2000      	movs	r0, #0
 800e722:	e70e      	b.n	800e542 <remove_chain+0x26>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e724:	f3c9 090b 	ubfx	r9, r9, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800e728:	f1b9 0f00 	cmp.w	r9, #0
 800e72c:	f47f af43 	bne.w	800e5b6 <remove_chain+0x9a>
 800e730:	e7f6      	b.n	800e720 <remove_chain+0x204>
 800e732:	bf00      	nop

0800e734 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e734:	b510      	push	{r4, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800e73c:	b199      	cbz	r1, 800e766 <f_mount+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e73e:	f891 c000 	ldrb.w	ip, [r1]
 800e742:	f1bc 0f1f 	cmp.w	ip, #31
 800e746:	d911      	bls.n	800e76c <f_mount+0x38>
 800e748:	4663      	mov	r3, ip
 800e74a:	4608      	mov	r0, r1
 800e74c:	e003      	b.n	800e756 <f_mount+0x22>
 800e74e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e752:	2b1f      	cmp	r3, #31
 800e754:	d90a      	bls.n	800e76c <f_mount+0x38>
 800e756:	2b3a      	cmp	r3, #58	@ 0x3a
 800e758:	d1f9      	bne.n	800e74e <f_mount+0x1a>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e75a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e75e:	d102      	bne.n	800e766 <f_mount+0x32>
			i = *tp++ - '0';
 800e760:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e762:	4288      	cmp	r0, r1
 800e764:	d002      	beq.n	800e76c <f_mount+0x38>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800e766:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800e768:	b002      	add	sp, #8
 800e76a:	bd10      	pop	{r4, pc}
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e76c:	4911      	ldr	r1, [pc, #68]	@ (800e7b4 <f_mount+0x80>)
 800e76e:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800e770:	b163      	cbz	r3, 800e78c <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e772:	4811      	ldr	r0, [pc, #68]	@ (800e7b8 <f_mount+0x84>)
 800e774:	6804      	ldr	r4, [r0, #0]
 800e776:	42a3      	cmp	r3, r4
 800e778:	bf04      	itt	eq
 800e77a:	2400      	moveq	r4, #0
 800e77c:	6004      	streq	r4, [r0, #0]
 800e77e:	6904      	ldr	r4, [r0, #16]
 800e780:	429c      	cmp	r4, r3
 800e782:	bf04      	itt	eq
 800e784:	2400      	moveq	r4, #0
 800e786:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 800e788:	2000      	movs	r0, #0
 800e78a:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800e78c:	9b01      	ldr	r3, [sp, #4]
 800e78e:	b173      	cbz	r3, 800e7ae <f_mount+0x7a>
		fs->fs_type = 0;				/* Clear new fs object */
 800e790:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e792:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 800e794:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 800e796:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e798:	d002      	beq.n	800e7a0 <f_mount+0x6c>
 800e79a:	2000      	movs	r0, #0
}
 800e79c:	b002      	add	sp, #8
 800e79e:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	a901      	add	r1, sp, #4
 800e7a4:	4668      	mov	r0, sp
 800e7a6:	f7fe fab5 	bl	800cd14 <find_volume>
}
 800e7aa:	b002      	add	sp, #8
 800e7ac:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800e7ae:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e7b0:	e7f3      	b.n	800e79a <f_mount+0x66>
 800e7b2:	bf00      	nop
 800e7b4:	20000b1c 	.word	0x20000b1c
 800e7b8:	20000af8 	.word	0x20000af8

0800e7bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c0:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 800e7c4:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f000 8088 	beq.w	800e8dc <f_open+0x120>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7cc:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	463a      	mov	r2, r7
 800e7d6:	a902      	add	r1, sp, #8
 800e7d8:	a801      	add	r0, sp, #4
 800e7da:	f7fe fa9b 	bl	800cd14 <find_volume>
	if (res == FR_OK) {
 800e7de:	4605      	mov	r5, r0
 800e7e0:	b130      	cbz	r0, 800e7f0 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 800e7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7f0:	e9dd 1801 	ldrd	r1, r8, [sp, #4]
		INIT_NAMBUF(fs);
 800e7f4:	ab10      	add	r3, sp, #64	@ 0x40
 800e7f6:	f8c8 300c 	str.w	r3, [r8, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7fa:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 800e7fc:	f8cd 800c 	str.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e800:	f7fe ffe8 	bl	800d7d4 <follow_path>
		if (res == FR_OK) {
 800e804:	b9a8      	cbnz	r0, 800e832 <f_open+0x76>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e806:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	db6c      	blt.n	800e8e8 <f_open+0x12c>
		if (Files[i].fs) {	/* Existing entry */
 800e80e:	4ba2      	ldr	r3, [pc, #648]	@ (800ea98 <f_open+0x2dc>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e810:	9a03      	ldr	r2, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 800e812:	6819      	ldr	r1, [r3, #0]
 800e814:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
 800e818:	2900      	cmp	r1, #0
 800e81a:	f000 80d2 	beq.w	800e9c2 <f_open+0x206>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e81e:	4291      	cmp	r1, r2
 800e820:	d064      	beq.n	800e8ec <f_open+0x130>
		if (Files[i].fs) {	/* Existing entry */
 800e822:	6919      	ldr	r1, [r3, #16]
 800e824:	2900      	cmp	r1, #0
 800e826:	d069      	beq.n	800e8fc <f_open+0x140>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e828:	428a      	cmp	r2, r1
 800e82a:	f000 80e8 	beq.w	800e9fe <f_open+0x242>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e82e:	2512      	movs	r5, #18
 800e830:	e7d7      	b.n	800e7e2 <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e832:	f016 0f1c 	tst.w	r6, #28
 800e836:	d04f      	beq.n	800e8d8 <f_open+0x11c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e838:	2804      	cmp	r0, #4
 800e83a:	d14d      	bne.n	800e8d8 <f_open+0x11c>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e83c:	4b96      	ldr	r3, [pc, #600]	@ (800ea98 <f_open+0x2dc>)
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	2a00      	cmp	r2, #0
 800e842:	d044      	beq.n	800e8ce <f_open+0x112>
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1f1      	bne.n	800e82e <f_open+0x72>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e84a:	a803      	add	r0, sp, #12
 800e84c:	f7ff fa04 	bl	800dc58 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e850:	4603      	mov	r3, r0
 800e852:	2800      	cmp	r0, #0
 800e854:	f040 80f6 	bne.w	800ea44 <f_open+0x288>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e858:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800e85c:	f7fc f85e 	bl	800a91c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e860:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e864:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800e866:	f8c9 000e 	str.w	r0, [r9, #14]
 800e86a:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e86e:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800e872:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800e876:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800e87a:	2b03      	cmp	r3, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e87c:	bf04      	itt	eq
 800e87e:	f8b9 3014 	ldrheq.w	r3, [r9, #20]
 800e882:	ea46 4603 	orreq.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e886:	2300      	movs	r3, #0
 800e888:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800e88c:	f898 2000 	ldrb.w	r2, [r8]
 800e890:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800e892:	bf08      	it	eq
 800e894:	f8a9 3014 	strheq.w	r3, [r9, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800e898:	2200      	movs	r2, #0
					fs->wflag = 1;
 800e89a:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e89c:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800e8a0:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	f040 80b9 	bne.w	800ea1c <f_open+0x260>
				mode |= FA_MODIFIED;
 800e8aa:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8ae:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8b2:	2f01      	cmp	r7, #1
			fp->dir_ptr = dj.dir;
 800e8b4:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8b8:	a803      	add	r0, sp, #12
 800e8ba:	bf94      	ite	ls
 800e8bc:	2100      	movls	r1, #0
 800e8be:	2101      	movhi	r1, #1
 800e8c0:	f7fe f846 	bl	800c950 <inc_lock>
 800e8c4:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d13a      	bne.n	800e940 <f_open+0x184>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e8ca:	2502      	movs	r5, #2
 800e8cc:	e789      	b.n	800e7e2 <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e8ce:	a803      	add	r0, sp, #12
 800e8d0:	f7ff f9c2 	bl	800dc58 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d0bf      	beq.n	800e858 <f_open+0x9c>
 800e8d8:	4605      	mov	r5, r0
 800e8da:	e782      	b.n	800e7e2 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800e8dc:	2509      	movs	r5, #9
}
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 800e8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800e8e8:	2506      	movs	r5, #6
 800e8ea:	e77a      	b.n	800e7e2 <f_open+0x26>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e8ec:	9a05      	ldr	r2, [sp, #20]
 800e8ee:	6858      	ldr	r0, [r3, #4]
 800e8f0:	4290      	cmp	r0, r2
 800e8f2:	f000 8086 	beq.w	800ea02 <f_open+0x246>
		if (Files[i].fs) {	/* Existing entry */
 800e8f6:	691a      	ldr	r2, [r3, #16]
 800e8f8:	2a00      	cmp	r2, #0
 800e8fa:	d195      	bne.n	800e828 <f_open+0x6c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e8fc:	f016 0f1c 	tst.w	r6, #28
 800e900:	d008      	beq.n	800e914 <f_open+0x158>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e902:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800e906:	f013 0f11 	tst.w	r3, #17
 800e90a:	d110      	bne.n	800e92e <f_open+0x172>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e90c:	0773      	lsls	r3, r6, #29
 800e90e:	d510      	bpl.n	800e932 <f_open+0x176>
 800e910:	2508      	movs	r5, #8
 800e912:	e766      	b.n	800e7e2 <f_open+0x26>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e914:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800e918:	06d8      	lsls	r0, r3, #27
 800e91a:	d40f      	bmi.n	800e93c <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e91c:	07b2      	lsls	r2, r6, #30
 800e91e:	d501      	bpl.n	800e924 <f_open+0x168>
 800e920:	07db      	lsls	r3, r3, #31
 800e922:	d404      	bmi.n	800e92e <f_open+0x172>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e924:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800e926:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e92a:	d5c0      	bpl.n	800e8ae <f_open+0xf2>
 800e92c:	e7bd      	b.n	800e8aa <f_open+0xee>
					res = FR_DENIED;
 800e92e:	2507      	movs	r5, #7
 800e930:	e757      	b.n	800e7e2 <f_open+0x26>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e932:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800e934:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e938:	d5b9      	bpl.n	800e8ae <f_open+0xf2>
 800e93a:	e78f      	b.n	800e85c <f_open+0xa0>
					res = FR_NO_FILE;
 800e93c:	2504      	movs	r5, #4
 800e93e:	e750      	b.n	800e7e2 <f_open+0x26>
	if (fs->fs_type == FS_FAT32) {
 800e940:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800e944:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800e948:	2b03      	cmp	r3, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e94a:	bf04      	itt	eq
 800e94c:	f8b9 3014 	ldrheq.w	r3, [r9, #20]
 800e950:	ea46 4603 	orreq.w	r6, r6, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e954:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800e956:	f8d9 901c 	ldr.w	r9, [r9, #28]
			fp->obj.id = fs->id;
 800e95a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e95e:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e962:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e964:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800e968:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e96c:	f8c4 8000 	str.w	r8, [r4]
			fp->obj.id = fs->id;
 800e970:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800e972:	7527      	strb	r7, [r4, #20]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e974:	62e1      	str	r1, [r4, #44]	@ 0x2c
			fp->err = 0;			/* Clear error flag */
 800e976:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e978:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e97a:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800e97c:	4650      	mov	r0, sl
 800e97e:	f001 f89d 	bl	800fabc <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e982:	06ba      	lsls	r2, r7, #26
 800e984:	f57f af2f 	bpl.w	800e7e6 <f_open+0x2a>
 800e988:	f1b9 0f00 	cmp.w	r9, #0
 800e98c:	f43f af2b 	beq.w	800e7e6 <f_open+0x2a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e990:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e994:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e998:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e99c:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9a0:	d804      	bhi.n	800e9ac <f_open+0x1f0>
 800e9a2:	e051      	b.n	800ea48 <f_open+0x28c>
 800e9a4:	1c43      	adds	r3, r0, #1
 800e9a6:	d075      	beq.n	800ea94 <f_open+0x2d8>
 800e9a8:	454f      	cmp	r7, r9
 800e9aa:	d24d      	bcs.n	800ea48 <f_open+0x28c>
					clst = get_fat(&fp->obj, clst);
 800e9ac:	4631      	mov	r1, r6
 800e9ae:	6820      	ldr	r0, [r4, #0]
 800e9b0:	f7fe fb92 	bl	800d0d8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800e9b4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800e9b6:	4606      	mov	r6, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9b8:	eba9 0907 	sub.w	r9, r9, r7
					if (clst <= 1) res = FR_INT_ERR;
 800e9bc:	d8f2      	bhi.n	800e9a4 <f_open+0x1e8>
				fp->clust = clst;
 800e9be:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9c0:	e783      	b.n	800e8ca <f_open+0x10e>
		if (Files[i].fs) {	/* Existing entry */
 800e9c2:	6919      	ldr	r1, [r3, #16]
 800e9c4:	2900      	cmp	r1, #0
 800e9c6:	d099      	beq.n	800e8fc <f_open+0x140>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9c8:	428a      	cmp	r2, r1
 800e9ca:	d197      	bne.n	800e8fc <f_open+0x140>
			be = 1;
 800e9cc:	2201      	movs	r2, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9ce:	6959      	ldr	r1, [r3, #20]
 800e9d0:	9805      	ldr	r0, [sp, #20]
 800e9d2:	4281      	cmp	r1, r0
 800e9d4:	d003      	beq.n	800e9de <f_open+0x222>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e9d6:	2a00      	cmp	r2, #0
 800e9d8:	f43f af29 	beq.w	800e82e <f_open+0x72>
 800e9dc:	e78e      	b.n	800e8fc <f_open+0x140>
				Files[i].clu == dp->obj.sclust &&
 800e9de:	6999      	ldr	r1, [r3, #24]
 800e9e0:	9808      	ldr	r0, [sp, #32]
 800e9e2:	4281      	cmp	r1, r0
 800e9e4:	d1f7      	bne.n	800e9d6 <f_open+0x21a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9e6:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9e8:	f1bc 0f00 	cmp.w	ip, #0
 800e9ec:	d105      	bne.n	800e9fa <f_open+0x23e>
 800e9ee:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800e9f2:	899b      	ldrh	r3, [r3, #12]
 800e9f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9f8:	d180      	bne.n	800e8fc <f_open+0x140>
 800e9fa:	2510      	movs	r5, #16
 800e9fc:	e6f1      	b.n	800e7e2 <f_open+0x26>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9fe:	462a      	mov	r2, r5
 800ea00:	e7e5      	b.n	800e9ce <f_open+0x212>
				Files[i].clu == dp->obj.sclust &&
 800ea02:	9a08      	ldr	r2, [sp, #32]
 800ea04:	6898      	ldr	r0, [r3, #8]
 800ea06:	4290      	cmp	r0, r2
 800ea08:	d042      	beq.n	800ea90 <f_open+0x2d4>
		if (Files[i].fs) {	/* Existing entry */
 800ea0a:	691a      	ldr	r2, [r3, #16]
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	f43f af75 	beq.w	800e8fc <f_open+0x140>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea12:	428a      	cmp	r2, r1
 800ea14:	f47f af0b 	bne.w	800e82e <f_open+0x72>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea18:	2200      	movs	r2, #0
 800ea1a:	e7d8      	b.n	800e9ce <f_open+0x212>
						res = remove_chain(&dj.obj, cl, 0);
 800ea1c:	4631      	mov	r1, r6
 800ea1e:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 800ea20:	f8d8 a030 	ldr.w	sl, [r8, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800ea24:	f7ff fd7a 	bl	800e51c <remove_chain>
						if (res == FR_OK) {
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	f47f af55 	bne.w	800e8d8 <f_open+0x11c>
							res = move_window(fs, dw);
 800ea2e:	4651      	mov	r1, sl
 800ea30:	4640      	mov	r0, r8
 800ea32:	f7fe f92f 	bl	800cc94 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ea36:	3e01      	subs	r6, #1
 800ea38:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f43f af33 	beq.w	800e8aa <f_open+0xee>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ea44:	461d      	mov	r5, r3
 800ea46:	e6cc      	b.n	800e7e2 <f_open+0x26>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea48:	f3c9 0308 	ubfx	r3, r9, #0, #9
				fp->clust = clst;
 800ea4c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f43f aec9 	beq.w	800e7e6 <f_open+0x2a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea54:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800ea58:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ea5a:	3b02      	subs	r3, #2
 800ea5c:	429e      	cmp	r6, r3
 800ea5e:	f4bf af34 	bcs.w	800e8ca <f_open+0x10e>
	return clst * fs->csize + fs->database;
 800ea62:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ea66:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 800ea6a:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	f43f af2b 	beq.w	800e8ca <f_open+0x10e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea74:	eb02 2259 	add.w	r2, r2, r9, lsr #9
 800ea78:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea7a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ea7e:	4651      	mov	r1, sl
 800ea80:	2301      	movs	r3, #1
 800ea82:	f7fd ff3d 	bl	800c900 <disk_read>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f43f aead 	beq.w	800e7e6 <f_open+0x2a>
 800ea8c:	2501      	movs	r5, #1
 800ea8e:	e6a8      	b.n	800e7e2 <f_open+0x26>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea90:	462a      	mov	r2, r5
 800ea92:	e7a9      	b.n	800e9e8 <f_open+0x22c>
				fp->clust = clst;
 800ea94:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea96:	e7f9      	b.n	800ea8c <f_open+0x2d0>
 800ea98:	20000af8 	.word	0x20000af8

0800ea9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800eaa2:	2300      	movs	r3, #0
{
 800eaa4:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800eaa6:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eaa8:	b150      	cbz	r0, 800eac0 <f_read+0x24>
 800eaaa:	6803      	ldr	r3, [r0, #0]
 800eaac:	4604      	mov	r4, r0
 800eaae:	b13b      	cbz	r3, 800eac0 <f_read+0x24>
 800eab0:	4691      	mov	r9, r2
 800eab2:	781a      	ldrb	r2, [r3, #0]
 800eab4:	b122      	cbz	r2, 800eac0 <f_read+0x24>
 800eab6:	88da      	ldrh	r2, [r3, #6]
 800eab8:	460e      	mov	r6, r1
 800eaba:	8881      	ldrh	r1, [r0, #4]
 800eabc:	4291      	cmp	r1, r2
 800eabe:	d004      	beq.n	800eaca <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800eac0:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800eac2:	4628      	mov	r0, r5
 800eac4:	b003      	add	sp, #12
 800eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	f7fd fef8 	bl	800c8c0 <disk_status>
 800ead0:	07c2      	lsls	r2, r0, #31
 800ead2:	d4f5      	bmi.n	800eac0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ead4:	7d65      	ldrb	r5, [r4, #21]
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	d1f3      	bne.n	800eac2 <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eada:	7d23      	ldrb	r3, [r4, #20]
 800eadc:	f013 0a01 	ands.w	sl, r3, #1
 800eae0:	f000 80d9 	beq.w	800ec96 <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800eae4:	69a0      	ldr	r0, [r4, #24]
 800eae6:	68e3      	ldr	r3, [r4, #12]
 800eae8:	eba3 0800 	sub.w	r8, r3, r0
 800eaec:	45c8      	cmp	r8, r9
 800eaee:	bf28      	it	cs
 800eaf0:	46c8      	movcs	r8, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eaf2:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 800eaf6:	f1b8 0f00 	cmp.w	r8, #0
 800eafa:	d0e2      	beq.n	800eac2 <f_read+0x26>
 800eafc:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eafe:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800eb02:	f1bc 0f00 	cmp.w	ip, #0
 800eb06:	d152      	bne.n	800ebae <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb08:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800eb0c:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800eb0e:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb12:	ea4f 2350 	mov.w	r3, r0, lsr #9
			if (csect == 0) {					/* On the cluster boundary? */
 800eb16:	d036      	beq.n	800eb86 <f_read+0xea>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb18:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb1a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800eb1e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb20:	3b02      	subs	r3, #2
 800eb22:	4298      	cmp	r0, r3
 800eb24:	d23d      	bcs.n	800eba2 <f_read+0x106>
	return clst * fs->csize + fs->database;
 800eb26:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800eb2a:	f8d9 302c 	ldr.w	r3, [r9, #44]	@ 0x2c
 800eb2e:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d035      	beq.n	800eba2 <f_read+0x106>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb36:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800eb3a:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb3e:	d377      	bcc.n	800ec30 <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb40:	eb02 2058 	add.w	r0, r2, r8, lsr #9
 800eb44:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb46:	ea4f 2558 	mov.w	r5, r8, lsr #9
					cc = fs->csize - csect;
 800eb4a:	bf88      	it	hi
 800eb4c:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb4e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb52:	462b      	mov	r3, r5
 800eb54:	465a      	mov	r2, fp
 800eb56:	4631      	mov	r1, r6
 800eb58:	f7fd fed2 	bl	800c900 <disk_read>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f040 8093 	bne.w	800ec88 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb62:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	f2c0 80ac 	blt.w	800ecc4 <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb6c:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb6e:	69a0      	ldr	r0, [r4, #24]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	4410      	add	r0, r2
 800eb74:	4413      	add	r3, r2
	for ( ;  btr;								/* Repeat until all data read */
 800eb76:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb7a:	61a0      	str	r0, [r4, #24]
 800eb7c:	4416      	add	r6, r2
 800eb7e:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800eb80:	d1bd      	bne.n	800eafe <f_read+0x62>
 800eb82:	9d00      	ldr	r5, [sp, #0]
 800eb84:	e79d      	b.n	800eac2 <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d16a      	bne.n	800ec60 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb8a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb8c:	2801      	cmp	r0, #1
 800eb8e:	d908      	bls.n	800eba2 <f_read+0x106>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d079      	beq.n	800ec88 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb94:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
 800eb98:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb9a:	3b02      	subs	r3, #2
	clst -= 2;
 800eb9c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb9e:	4298      	cmp	r0, r3
 800eba0:	d3c1      	bcc.n	800eb26 <f_read+0x8a>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eba2:	2502      	movs	r5, #2
}
 800eba4:	4628      	mov	r0, r5
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eba6:	7565      	strb	r5, [r4, #21]
}
 800eba8:	b003      	add	sp, #12
 800ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ebae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebb2:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800ebb6:	4543      	cmp	r3, r8
 800ebb8:	bf28      	it	cs
 800ebba:	4643      	movcs	r3, r8
 800ebbc:	1e58      	subs	r0, r3, #1
 800ebbe:	2805      	cmp	r0, #5
 800ebc0:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ebc2:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ebc6:	d905      	bls.n	800ebd4 <f_read+0x138>
 800ebc8:	f10c 0c01 	add.w	ip, ip, #1
 800ebcc:	4461      	add	r1, ip
 800ebce:	1a71      	subs	r1, r6, r1
 800ebd0:	2902      	cmp	r1, #2
 800ebd2:	d809      	bhi.n	800ebe8 <f_read+0x14c>
 800ebd4:	1e71      	subs	r1, r6, #1
 800ebd6:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800ebda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebde:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800ebe2:	4563      	cmp	r3, ip
 800ebe4:	d1f9      	bne.n	800ebda <f_read+0x13e>
 800ebe6:	e7c2      	b.n	800eb6e <f_read+0xd2>
 800ebe8:	f022 0e03 	bic.w	lr, r2, #3
 800ebec:	449e      	add	lr, r3
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4630      	mov	r0, r6
			*d++ = *s++;
 800ebf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ebf6:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800ebfa:	4571      	cmp	r1, lr
 800ebfc:	d1f9      	bne.n	800ebf2 <f_read+0x156>
 800ebfe:	f022 0103 	bic.w	r1, r2, #3
 800ec02:	0795      	lsls	r5, r2, #30
 800ec04:	f002 0003 	and.w	r0, r2, #3
 800ec08:	eb06 0c01 	add.w	ip, r6, r1
 800ec0c:	eb03 0e01 	add.w	lr, r3, r1
 800ec10:	d0ad      	beq.n	800eb6e <f_read+0xd2>
			*d++ = *s++;
 800ec12:	5c5b      	ldrb	r3, [r3, r1]
 800ec14:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800ec16:	2801      	cmp	r0, #1
 800ec18:	d0a9      	beq.n	800eb6e <f_read+0xd2>
			*d++ = *s++;
 800ec1a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 800ec1e:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800ec22:	2802      	cmp	r0, #2
 800ec24:	d0a3      	beq.n	800eb6e <f_read+0xd2>
			*d++ = *s++;
 800ec26:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800ec2a:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800ec2e:	e79e      	b.n	800eb6e <f_read+0xd2>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec30:	6a22      	ldr	r2, [r4, #32]
 800ec32:	455a      	cmp	r2, fp
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec34:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec38:	d00c      	beq.n	800ec54 <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec3a:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec3e:	f899 0001 	ldrb.w	r0, [r9, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	db30      	blt.n	800eca8 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec46:	2301      	movs	r3, #1
 800ec48:	465a      	mov	r2, fp
 800ec4a:	9101      	str	r1, [sp, #4]
 800ec4c:	f7fd fe58 	bl	800c900 <disk_read>
 800ec50:	9901      	ldr	r1, [sp, #4]
 800ec52:	b9c8      	cbnz	r0, 800ec88 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec54:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800ec56:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec5a:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800ec5e:	e7a8      	b.n	800ebb2 <f_read+0x116>
					if (fp->cltbl) {
 800ec60:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800ec62:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800ec64:	b1c8      	cbz	r0, 800ec9a <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ec66:	8949      	ldrh	r1, [r1, #10]
 800ec68:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec6c:	6841      	ldr	r1, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec6e:	3004      	adds	r0, #4
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec70:	b929      	cbnz	r1, 800ec7e <f_read+0x1e2>
 800ec72:	e796      	b.n	800eba2 <f_read+0x106>
		cl -= ncl; tbl++;		/* Next fragment */
 800ec74:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec76:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec7a:	2900      	cmp	r1, #0
 800ec7c:	d091      	beq.n	800eba2 <f_read+0x106>
		if (cl < ncl) break;	/* In this fragment? */
 800ec7e:	428b      	cmp	r3, r1
 800ec80:	d2f8      	bcs.n	800ec74 <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800ec82:	6840      	ldr	r0, [r0, #4]
 800ec84:	4418      	add	r0, r3
 800ec86:	e781      	b.n	800eb8c <f_read+0xf0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec88:	4655      	mov	r5, sl
 800ec8a:	2301      	movs	r3, #1
}
 800ec8c:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec8e:	7563      	strb	r3, [r4, #21]
}
 800ec90:	b003      	add	sp, #12
 800ec92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ec96:	2507      	movs	r5, #7
 800ec98:	e713      	b.n	800eac2 <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ec9a:	4608      	mov	r0, r1
 800ec9c:	69e1      	ldr	r1, [r4, #28]
 800ec9e:	9201      	str	r2, [sp, #4]
 800eca0:	f7fe fa1a 	bl	800d0d8 <get_fat.isra.0>
 800eca4:	9a01      	ldr	r2, [sp, #4]
 800eca6:	e771      	b.n	800eb8c <f_read+0xf0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eca8:	2301      	movs	r3, #1
 800ecaa:	9101      	str	r1, [sp, #4]
 800ecac:	f7fd fe36 	bl	800c91c <disk_write>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d1e9      	bne.n	800ec88 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecb4:	7d23      	ldrb	r3, [r4, #20]
 800ecb6:	9901      	ldr	r1, [sp, #4]
 800ecb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecbc:	7523      	strb	r3, [r4, #20]
 800ecbe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ecc2:	e7c0      	b.n	800ec46 <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ecc4:	6a22      	ldr	r2, [r4, #32]
 800ecc6:	eba2 020b 	sub.w	r2, r2, fp
 800ecca:	42aa      	cmp	r2, r5
 800eccc:	f4bf af4e 	bcs.w	800eb6c <f_read+0xd0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ecd0:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ecd4:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800ecd8:	1a51      	subs	r1, r2, r1
 800ecda:	2902      	cmp	r1, #2
 800ecdc:	d90a      	bls.n	800ecf4 <f_read+0x258>
 800ecde:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ece2:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800ece6:	f851 3b04 	ldr.w	r3, [r1], #4
 800ecea:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800ecee:	4562      	cmp	r2, ip
 800ecf0:	d1f9      	bne.n	800ece6 <f_read+0x24a>
 800ecf2:	e73b      	b.n	800eb6c <f_read+0xd0>
 800ecf4:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ecf6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ecfa:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800ecfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed02:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800ed06:	458c      	cmp	ip, r1
 800ed08:	d1f9      	bne.n	800ecfe <f_read+0x262>
 800ed0a:	e72f      	b.n	800eb6c <f_read+0xd0>

0800ed0c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed0c:	b158      	cbz	r0, 800ed26 <f_close+0x1a>
 800ed0e:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed14:	b12b      	cbz	r3, 800ed22 <f_close+0x16>
 800ed16:	781a      	ldrb	r2, [r3, #0]
 800ed18:	b11a      	cbz	r2, 800ed22 <f_close+0x16>
 800ed1a:	8881      	ldrh	r1, [r0, #4]
 800ed1c:	88da      	ldrh	r2, [r3, #6]
 800ed1e:	4291      	cmp	r1, r2
 800ed20:	d003      	beq.n	800ed2a <f_close+0x1e>
{
 800ed22:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800ed24:	bd70      	pop	{r4, r5, r6, pc}
{
 800ed26:	2009      	movs	r0, #9
}
 800ed28:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed2a:	7858      	ldrb	r0, [r3, #1]
 800ed2c:	f7fd fdc8 	bl	800c8c0 <disk_status>
 800ed30:	07c1      	lsls	r1, r0, #31
 800ed32:	d4f6      	bmi.n	800ed22 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed34:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed36:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ed38:	065a      	lsls	r2, r3, #25
 800ed3a:	d52e      	bpl.n	800ed9a <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ed3c:	061b      	lsls	r3, r3, #24
 800ed3e:	d451      	bmi.n	800ede4 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800ed40:	f7fb fdec 	bl	800a91c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800ed44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800ed46:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f7fd ffa3 	bl	800cc94 <move_window>
				if (res == FR_OK) {
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d1e8      	bne.n	800ed24 <f_close+0x18>
					dir = fp->dir_ptr;
 800ed52:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ed54:	7ada      	ldrb	r2, [r3, #11]
 800ed56:	f042 0220 	orr.w	r2, r2, #32
 800ed5a:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ed5c:	68a2      	ldr	r2, [r4, #8]
 800ed5e:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed60:	769a      	strb	r2, [r3, #26]
 800ed62:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE)val;
 800ed66:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800ed68:	7809      	ldrb	r1, [r1, #0]
 800ed6a:	2903      	cmp	r1, #3
 800ed6c:	d103      	bne.n	800ed76 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ed6e:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ed70:	751a      	strb	r2, [r3, #20]
 800ed72:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800ed74:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed76:	68e2      	ldr	r2, [r4, #12]
 800ed78:	61da      	str	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed7a:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800ed7c:	f8c3 6016 	str.w	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed80:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800ed82:	2301      	movs	r3, #1
 800ed84:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ed86:	4628      	mov	r0, r5
 800ed88:	f7fd ff28 	bl	800cbdc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ed8c:	7d23      	ldrb	r3, [r4, #20]
 800ed8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed92:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d1c5      	bne.n	800ed24 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed98:	6825      	ldr	r5, [r4, #0]
 800ed9a:	2d00      	cmp	r5, #0
 800ed9c:	d0c1      	beq.n	800ed22 <f_close+0x16>
 800ed9e:	782b      	ldrb	r3, [r5, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d0be      	beq.n	800ed22 <f_close+0x16>
 800eda4:	88a2      	ldrh	r2, [r4, #4]
 800eda6:	88eb      	ldrh	r3, [r5, #6]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d1ba      	bne.n	800ed22 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800edac:	7868      	ldrb	r0, [r5, #1]
 800edae:	f7fd fd87 	bl	800c8c0 <disk_status>
 800edb2:	f010 0001 	ands.w	r0, r0, #1
 800edb6:	d1b4      	bne.n	800ed22 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	3b01      	subs	r3, #1
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d81e      	bhi.n	800edfe <f_close+0xf2>
		n = Files[i].ctr;
 800edc0:	4912      	ldr	r1, [pc, #72]	@ (800ee0c <f_close+0x100>)
 800edc2:	011d      	lsls	r5, r3, #4
 800edc4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800edc8:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800edca:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800edce:	d01a      	beq.n	800ee06 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800edd0:	b11a      	cbz	r2, 800edda <f_close+0xce>
 800edd2:	3a01      	subs	r2, #1
 800edd4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800edd6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800edd8:	b90a      	cbnz	r2, 800edde <f_close+0xd2>
 800edda:	2300      	movs	r3, #0
 800eddc:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800edde:	2300      	movs	r3, #0
 800ede0:	6023      	str	r3, [r4, #0]
}
 800ede2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ede4:	6a22      	ldr	r2, [r4, #32]
 800ede6:	7868      	ldrb	r0, [r5, #1]
 800ede8:	2301      	movs	r3, #1
 800edea:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800edee:	f7fd fd95 	bl	800c91c <disk_write>
 800edf2:	b930      	cbnz	r0, 800ee02 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edf4:	7d23      	ldrb	r3, [r4, #20]
 800edf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edfa:	7523      	strb	r3, [r4, #20]
 800edfc:	e7a0      	b.n	800ed40 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800edfe:	2002      	movs	r0, #2
}
 800ee00:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee02:	2001      	movs	r0, #1
}
 800ee04:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800ee06:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ee08:	e7e7      	b.n	800edda <f_close+0xce>
 800ee0a:	bf00      	nop
 800ee0c:	20000af8 	.word	0x20000af8

0800ee10 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ee10:	b530      	push	{r4, r5, lr}
 800ee12:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800ee16:	460d      	mov	r5, r1
 800ee18:	9001      	str	r0, [sp, #4]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	a903      	add	r1, sp, #12
 800ee1e:	a801      	add	r0, sp, #4
 800ee20:	f7fd ff78 	bl	800cd14 <find_volume>
	if (res == FR_OK) {
 800ee24:	4604      	mov	r4, r0
 800ee26:	b118      	cbz	r0, 800ee30 <f_stat+0x20>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800ee2e:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj.obj.fs);
 800ee30:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee32:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 800ee34:	aa10      	add	r2, sp, #64	@ 0x40
 800ee36:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee38:	a803      	add	r0, sp, #12
 800ee3a:	f7fe fccb 	bl	800d7d4 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800ee3e:	4604      	mov	r4, r0
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d1f1      	bne.n	800ee28 <f_stat+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ee44:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	db06      	blt.n	800ee5a <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 800ee4c:	2d00      	cmp	r5, #0
 800ee4e:	d0eb      	beq.n	800ee28 <f_stat+0x18>
 800ee50:	4629      	mov	r1, r5
 800ee52:	a803      	add	r0, sp, #12
 800ee54:	f7fd fdd2 	bl	800c9fc <get_fileinfo>
 800ee58:	e7e6      	b.n	800ee28 <f_stat+0x18>
				res = FR_INVALID_NAME;
 800ee5a:	2406      	movs	r4, #6
 800ee5c:	e7e4      	b.n	800ee28 <f_stat+0x18>
 800ee5e:	bf00      	nop

0800ee60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee60:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800ee62:	4b10      	ldr	r3, [pc, #64]	@ (800eea4 <FATFS_LinkDriver+0x44>)
 800ee64:	7a5c      	ldrb	r4, [r3, #9]
 800ee66:	b9cc      	cbnz	r4, 800ee9c <FATFS_LinkDriver+0x3c>
 800ee68:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800ee6a:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800ee6e:	7a5c      	ldrb	r4, [r3, #9]
 800ee70:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800ee72:	7a5c      	ldrb	r4, [r3, #9]
 800ee74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee78:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800ee7a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800ee7c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800ee7e:	441c      	add	r4, r3
 800ee80:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800ee82:	1c54      	adds	r4, r2, #1
 800ee84:	b2e4      	uxtb	r4, r4
 800ee86:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800ee88:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 800ee8a:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800ee8c:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 800ee8e:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800ee90:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800ee92:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800ee96:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800ee98:	70c8      	strb	r0, [r1, #3]
}
 800ee9a:	4770      	bx	lr
  uint8_t ret = 1;
 800ee9c:	2001      	movs	r0, #1
}
 800ee9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	20000b20 	.word	0x20000b20

0800eea8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eea8:	287f      	cmp	r0, #127	@ 0x7f
 800eeaa:	d90f      	bls.n	800eecc <ff_convert+0x24>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800eeac:	b959      	cbnz	r1, 800eec6 <ff_convert+0x1e>
 800eeae:	4b0a      	ldr	r3, [pc, #40]	@ (800eed8 <ff_convert+0x30>)
 800eeb0:	e002      	b.n	800eeb8 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800eeb2:	3101      	adds	r1, #1
 800eeb4:	2980      	cmp	r1, #128	@ 0x80
 800eeb6:	d008      	beq.n	800eeca <ff_convert+0x22>
				if (chr == Tbl[c]) break;
 800eeb8:	f833 2b02 	ldrh.w	r2, [r3], #2
 800eebc:	4282      	cmp	r2, r0
 800eebe:	d1f8      	bne.n	800eeb2 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800eec0:	3180      	adds	r1, #128	@ 0x80
 800eec2:	b288      	uxth	r0, r1
 800eec4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eec6:	28ff      	cmp	r0, #255	@ 0xff
 800eec8:	d901      	bls.n	800eece <ff_convert+0x26>
 800eeca:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800eecc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eece:	4b02      	ldr	r3, [pc, #8]	@ (800eed8 <ff_convert+0x30>)
 800eed0:	3880      	subs	r0, #128	@ 0x80
 800eed2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800eed6:	4770      	bx	lr
 800eed8:	08011924 	.word	0x08011924

0800eedc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eedc:	b510      	push	{r4, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eede:	4b24      	ldr	r3, [pc, #144]	@ (800ef70 <ff_wtoupper+0x94>)
 800eee0:	4a24      	ldr	r2, [pc, #144]	@ (800ef74 <ff_wtoupper+0x98>)
 800eee2:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800eee6:	bf28      	it	cs
 800eee8:	4613      	movcs	r3, r2
 800eeea:	3304      	adds	r3, #4
 800eeec:	e00d      	b.n	800ef0a <ff_wtoupper+0x2e>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 800eeee:	4288      	cmp	r0, r1
 800eef0:	d310      	bcc.n	800ef14 <ff_wtoupper+0x38>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eef2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800eef6:	fa5f fc82 	uxtb.w	ip, r2
		if (chr < bc + nc) {	/* In the block? */
 800eefa:	eb0c 0e01 	add.w	lr, ip, r1
 800eefe:	4570      	cmp	r0, lr
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef00:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 800ef04:	db07      	blt.n	800ef16 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800ef06:	3304      	adds	r3, #4
 800ef08:	b172      	cbz	r2, 800ef28 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 800ef0a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800ef0e:	461c      	mov	r4, r3
 800ef10:	2900      	cmp	r1, #0
 800ef12:	d1ec      	bne.n	800eeee <ff_wtoupper+0x12>
	}

	return chr;
}
 800ef14:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800ef16:	2a08      	cmp	r2, #8
 800ef18:	d8fc      	bhi.n	800ef14 <ff_wtoupper+0x38>
 800ef1a:	e8df f002 	tbb	[pc, r2]
 800ef1e:	100c      	.short	0x100c
 800ef20:	1f1c1916 	.word	0x1f1c1916
 800ef24:	2522      	.short	0x2522
 800ef26:	08          	.byte	0x08
 800ef27:	00          	.byte	0x00
		if (!cmd) p += nc;
 800ef28:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800ef2c:	e7dd      	b.n	800eeea <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ef2e:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800ef32:	b280      	uxth	r0, r0
}
 800ef34:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ef36:	1a40      	subs	r0, r0, r1
 800ef38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 800ef3c:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ef3e:	1a43      	subs	r3, r0, r1
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	1ac0      	subs	r0, r0, r3
 800ef46:	b280      	uxth	r0, r0
}
 800ef48:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef4a:	3810      	subs	r0, #16
 800ef4c:	b280      	uxth	r0, r0
}
 800ef4e:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef50:	3820      	subs	r0, #32
 800ef52:	b280      	uxth	r0, r0
}
 800ef54:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef56:	3830      	subs	r0, #48	@ 0x30
 800ef58:	b280      	uxth	r0, r0
}
 800ef5a:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef5c:	381a      	subs	r0, #26
 800ef5e:	b280      	uxth	r0, r0
}
 800ef60:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800ef62:	3008      	adds	r0, #8
 800ef64:	b280      	uxth	r0, r0
}
 800ef66:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800ef68:	3850      	subs	r0, #80	@ 0x50
 800ef6a:	b280      	uxth	r0, r0
}
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	08011730 	.word	0x08011730
 800ef74:	08011674 	.word	0x08011674

0800ef78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef7a:	4918      	ldr	r1, [pc, #96]	@ (800efdc <MX_USB_DEVICE_Init+0x64>)
 800ef7c:	4818      	ldr	r0, [pc, #96]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f7fc ffb8 	bl	800bef4 <USBD_Init>
 800ef84:	b970      	cbnz	r0, 800efa4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800ef86:	4917      	ldr	r1, [pc, #92]	@ (800efe4 <MX_USB_DEVICE_Init+0x6c>)
 800ef88:	4815      	ldr	r0, [pc, #84]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800ef8a:	f7fc ffd7 	bl	800bf3c <USBD_RegisterClass>
 800ef8e:	b988      	cbnz	r0, 800efb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800ef90:	4915      	ldr	r1, [pc, #84]	@ (800efe8 <MX_USB_DEVICE_Init+0x70>)
 800ef92:	4813      	ldr	r0, [pc, #76]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800ef94:	f7fb ff92 	bl	800aebc <USBD_MSC_RegisterStorage>
 800ef98:	b9a0      	cbnz	r0, 800efc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef9a:	4811      	ldr	r0, [pc, #68]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800ef9c:	f7fc fff6 	bl	800bf8c <USBD_Start>
 800efa0:	b9b8      	cbnz	r0, 800efd2 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800efa2:	bd08      	pop	{r3, pc}
    Error_Handler();
 800efa4:	f7f4 ffc0 	bl	8003f28 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800efa8:	490e      	ldr	r1, [pc, #56]	@ (800efe4 <MX_USB_DEVICE_Init+0x6c>)
 800efaa:	480d      	ldr	r0, [pc, #52]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800efac:	f7fc ffc6 	bl	800bf3c <USBD_RegisterClass>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d0ed      	beq.n	800ef90 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800efb4:	f7f4 ffb8 	bl	8003f28 <Error_Handler>
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800efb8:	490b      	ldr	r1, [pc, #44]	@ (800efe8 <MX_USB_DEVICE_Init+0x70>)
 800efba:	4809      	ldr	r0, [pc, #36]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800efbc:	f7fb ff7e 	bl	800aebc <USBD_MSC_RegisterStorage>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d0ea      	beq.n	800ef9a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800efc4:	f7f4 ffb0 	bl	8003f28 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800efc8:	4805      	ldr	r0, [pc, #20]	@ (800efe0 <MX_USB_DEVICE_Init+0x68>)
 800efca:	f7fc ffdf 	bl	800bf8c <USBD_Start>
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0e7      	beq.n	800efa2 <MX_USB_DEVICE_Init+0x2a>
}
 800efd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800efd6:	f7f4 bfa7 	b.w	8003f28 <Error_Handler>
 800efda:	bf00      	nop
 800efdc:	200000cc 	.word	0x200000cc
 800efe0:	20000b2c 	.word	0x20000b2c
 800efe4:	20000044 	.word	0x20000044
 800efe8:	200000e8 	.word	0x200000e8

0800efec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800efec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800efee:	4801      	ldr	r0, [pc, #4]	@ (800eff4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800eff0:	800b      	strh	r3, [r1, #0]
}
 800eff2:	4770      	bx	lr
 800eff4:	200000b8 	.word	0x200000b8

0800eff8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eff8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800effa:	4801      	ldr	r0, [pc, #4]	@ (800f000 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800effc:	800b      	strh	r3, [r1, #0]
}
 800effe:	4770      	bx	lr
 800f000:	200000b4 	.word	0x200000b4

0800f004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f004:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f006:	4c04      	ldr	r4, [pc, #16]	@ (800f018 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800f008:	4804      	ldr	r0, [pc, #16]	@ (800f01c <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 800f00a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f00c:	4621      	mov	r1, r4
 800f00e:	f7fd fbf5 	bl	800c7fc <USBD_GetString>
  return USBD_StrDesc;
}
 800f012:	4620      	mov	r0, r4
 800f014:	bd10      	pop	{r4, pc}
 800f016:	bf00      	nop
 800f018:	20000e08 	.word	0x20000e08
 800f01c:	08011a24 	.word	0x08011a24

0800f020 <USBD_FS_ProductStrDescriptor>:
{
 800f020:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f022:	4c04      	ldr	r4, [pc, #16]	@ (800f034 <USBD_FS_ProductStrDescriptor+0x14>)
 800f024:	4804      	ldr	r0, [pc, #16]	@ (800f038 <USBD_FS_ProductStrDescriptor+0x18>)
{
 800f026:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f028:	4621      	mov	r1, r4
 800f02a:	f7fd fbe7 	bl	800c7fc <USBD_GetString>
}
 800f02e:	4620      	mov	r0, r4
 800f030:	bd10      	pop	{r4, pc}
 800f032:	bf00      	nop
 800f034:	20000e08 	.word	0x20000e08
 800f038:	08011a38 	.word	0x08011a38

0800f03c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f03c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f03e:	4c04      	ldr	r4, [pc, #16]	@ (800f050 <USBD_FS_ConfigStrDescriptor+0x14>)
 800f040:	4804      	ldr	r0, [pc, #16]	@ (800f054 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 800f042:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f044:	4621      	mov	r1, r4
 800f046:	f7fd fbd9 	bl	800c7fc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f04a:	4620      	mov	r0, r4
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop
 800f050:	20000e08 	.word	0x20000e08
 800f054:	08011a4c 	.word	0x08011a4c

0800f058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f058:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f05a:	4c04      	ldr	r4, [pc, #16]	@ (800f06c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800f05c:	4804      	ldr	r0, [pc, #16]	@ (800f070 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 800f05e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f060:	4621      	mov	r1, r4
 800f062:	f7fd fbcb 	bl	800c7fc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f066:	4620      	mov	r0, r4
 800f068:	bd10      	pop	{r4, pc}
 800f06a:	bf00      	nop
 800f06c:	20000e08 	.word	0x20000e08
 800f070:	08011a58 	.word	0x08011a58

0800f074 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f074:	4a51      	ldr	r2, [pc, #324]	@ (800f1bc <USBD_FS_SerialStrDescriptor+0x148>)
 800f076:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800f07a:	f8d2 0a18 	ldr.w	r0, [r2, #2584]	@ 0xa18
  *length = USB_SIZ_STRING_SERIAL;
 800f07e:	f04f 0c1a 	mov.w	ip, #26

  if (deviceserial0 != 0)
 800f082:	181b      	adds	r3, r3, r0
  *length = USB_SIZ_STRING_SERIAL;
 800f084:	f8a1 c000 	strh.w	ip, [r1]
  if (deviceserial0 != 0)
 800f088:	d101      	bne.n	800f08e <USBD_FS_SerialStrDescriptor+0x1a>
}
 800f08a:	484d      	ldr	r0, [pc, #308]	@ (800f1c0 <USBD_FS_SerialStrDescriptor+0x14c>)
 800f08c:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f08e:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	@ 0xa14

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f092:	4a4b      	ldr	r2, [pc, #300]	@ (800f1c0 <USBD_FS_SerialStrDescriptor+0x14c>)
 800f094:	0f18      	lsrs	r0, r3, #28
    if (((value >> 28)) < 0xA)
 800f096:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800f09a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f09e:	bf2c      	ite	cs
 800f0a0:	3037      	addcs	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0a2:	3030      	addcc	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f0a4:	f882 c003 	strb.w	ip, [r2, #3]
    if (((value >> 28)) < 0xA)
 800f0a8:	f3c3 6c03 	ubfx	ip, r3, #24, #4
 800f0ac:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0b0:	7090      	strb	r0, [r2, #2]
 800f0b2:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800f0b4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0b8:	bf8c      	ite	hi
 800f0ba:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0bc:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f0be:	f882 c005 	strb.w	ip, [r2, #5]
    if (((value >> 28)) < 0xA)
 800f0c2:	f3c3 5c03 	ubfx	ip, r3, #20, #4
 800f0c6:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0ca:	7110      	strb	r0, [r2, #4]
 800f0cc:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800f0ce:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0d2:	bf8c      	ite	hi
 800f0d4:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0d6:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f0d8:	f882 c007 	strb.w	ip, [r2, #7]
    if (((value >> 28)) < 0xA)
 800f0dc:	f3c3 4c03 	ubfx	ip, r3, #16, #4
 800f0e0:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0e4:	7190      	strb	r0, [r2, #6]
 800f0e6:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800f0e8:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0ec:	bf8c      	ite	hi
 800f0ee:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0f0:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f0f2:	f882 c009 	strb.w	ip, [r2, #9]
    if (((value >> 28)) < 0xA)
 800f0f6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 800f0fa:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0fe:	7210      	strb	r0, [r2, #8]
 800f100:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800f102:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f106:	bf8c      	ite	hi
 800f108:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f10a:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f10c:	f882 c00b 	strb.w	ip, [r2, #11]
    if (((value >> 28)) < 0xA)
 800f110:	f3c3 2c03 	ubfx	ip, r3, #8, #4
 800f114:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f118:	7290      	strb	r0, [r2, #10]
 800f11a:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800f11c:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f120:	bf8c      	ite	hi
 800f122:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f124:	3030      	addls	r0, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f126:	f882 c00d 	strb.w	ip, [r2, #13]
    if (((value >> 28)) < 0xA)
 800f12a:	f3c3 1c03 	ubfx	ip, r3, #4, #4
 800f12e:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f132:	7310      	strb	r0, [r2, #12]
 800f134:	4660      	mov	r0, ip
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f136:	bf8c      	ite	hi
 800f138:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f13a:	3030      	addls	r0, #48	@ 0x30
 800f13c:	7390      	strb	r0, [r2, #14]
    if (((value >> 28)) < 0xA)
 800f13e:	f003 000f 	and.w	r0, r3, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 800f142:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 800f144:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f146:	bf94      	ite	ls
 800f148:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f14a:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 800f14c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800f14e:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800f152:	7413      	strb	r3, [r2, #16]
 800f154:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f158:	bf2c      	ite	cs
 800f15a:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f15c:	3330      	addcc	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f15e:	7450      	strb	r0, [r2, #17]
    if (((value >> 28)) < 0xA)
 800f160:	f3c1 6003 	ubfx	r0, r1, #24, #4
 800f164:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f166:	7493      	strb	r3, [r2, #18]
 800f168:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f16a:	bf8c      	ite	hi
 800f16c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f16e:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800f170:	f3c1 5003 	ubfx	r0, r1, #20, #4
 800f174:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f176:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f17a:	7513      	strb	r3, [r2, #20]
 800f17c:	4603      	mov	r3, r0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f17e:	bf8c      	ite	hi
 800f180:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f182:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 800f184:	f3c1 4003 	ubfx	r0, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800f188:	f882 c00f 	strb.w	ip, [r2, #15]
 800f18c:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800f190:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f192:	f882 c013 	strb.w	ip, [r2, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 800f196:	7593      	strb	r3, [r2, #22]
    pbuf[2 * idx + 1] = 0;
 800f198:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f19c:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 800f19e:	f882 c015 	strb.w	ip, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1a2:	bf98      	it	ls
 800f1a4:	3330      	addls	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800f1a6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f1aa:	bf88      	it	hi
 800f1ac:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 800f1ae:	2100      	movs	r1, #0
}
 800f1b0:	4803      	ldr	r0, [pc, #12]	@ (800f1c0 <USBD_FS_SerialStrDescriptor+0x14c>)
    pbuf[2 * idx + 1] = 0;
 800f1b2:	f882 c017 	strb.w	ip, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1b6:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800f1b8:	7651      	strb	r1, [r2, #25]
}
 800f1ba:	4770      	bx	lr
 800f1bc:	1fff7000 	.word	0x1fff7000
 800f1c0:	20000098 	.word	0x20000098

0800f1c4 <STORAGE_IsWriteProtected_FS>:
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	4770      	bx	lr

0800f1c8 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	4770      	bx	lr

0800f1cc <STORAGE_Write_FS>:
{
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	4615      	mov	r5, r2
 800f1d2:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800f1d4:	f7fb fbde 	bl	800a994 <BSP_SD_IsDetected>
 800f1d8:	b198      	cbz	r0, 800f202 <STORAGE_Write_FS+0x36>
    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800f1da:	4632      	mov	r2, r6
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f7fb fbac 	bl	800a93c <BSP_SD_WriteBlocks_DMA>
    while (usbd_WriteStatus == 0)
 800f1e4:	4a08      	ldr	r2, [pc, #32]	@ (800f208 <STORAGE_Write_FS+0x3c>)
 800f1e6:	6813      	ldr	r3, [r2, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d0fc      	beq.n	800f1e6 <STORAGE_Write_FS+0x1a>
    usbd_WriteStatus = 0;
 800f1ec:	2300      	movs	r3, #0
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f1ee:	4c07      	ldr	r4, [pc, #28]	@ (800f20c <STORAGE_Write_FS+0x40>)
    usbd_WriteStatus = 0;
 800f1f0:	6013      	str	r3, [r2, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f1f2:	e001      	b.n	800f1f8 <STORAGE_Write_FS+0x2c>
      if (timeout-- == 0)
 800f1f4:	3c01      	subs	r4, #1
 800f1f6:	d004      	beq.n	800f202 <STORAGE_Write_FS+0x36>
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f1f8:	f7fb fbae 	bl	800a958 <BSP_SD_GetCardState>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d1f9      	bne.n	800f1f4 <STORAGE_Write_FS+0x28>
}
 800f200:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
 800f202:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	20001010 	.word	0x20001010
 800f20c:	000186a1 	.word	0x000186a1

0800f210 <STORAGE_Read_FS>:
{
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	460c      	mov	r4, r1
 800f214:	4615      	mov	r5, r2
 800f216:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800f218:	f7fb fbbc 	bl	800a994 <BSP_SD_IsDetected>
 800f21c:	b198      	cbz	r0, 800f246 <STORAGE_Read_FS+0x36>
    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800f21e:	4632      	mov	r2, r6
 800f220:	4629      	mov	r1, r5
 800f222:	4620      	mov	r0, r4
 800f224:	f7fb fb7c 	bl	800a920 <BSP_SD_ReadBlocks_DMA>
    while (usbd_ReadStatus == 0)
 800f228:	4a08      	ldr	r2, [pc, #32]	@ (800f24c <STORAGE_Read_FS+0x3c>)
 800f22a:	6813      	ldr	r3, [r2, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d0fc      	beq.n	800f22a <STORAGE_Read_FS+0x1a>
    usbd_ReadStatus = 0;
 800f230:	2300      	movs	r3, #0
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f232:	4c07      	ldr	r4, [pc, #28]	@ (800f250 <STORAGE_Read_FS+0x40>)
    usbd_ReadStatus = 0;
 800f234:	6013      	str	r3, [r2, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f236:	e001      	b.n	800f23c <STORAGE_Read_FS+0x2c>
      if (timeout-- == 0)
 800f238:	3c01      	subs	r4, #1
 800f23a:	d004      	beq.n	800f246 <STORAGE_Read_FS+0x36>
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800f23c:	f7fb fb8c 	bl	800a958 <BSP_SD_GetCardState>
 800f240:	2800      	cmp	r0, #0
 800f242:	d1f9      	bne.n	800f238 <STORAGE_Read_FS+0x28>
}
 800f244:	bd70      	pop	{r4, r5, r6, pc}
        return ret;
 800f246:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
 800f24c:	2000100c 	.word	0x2000100c
 800f250:	000186a1 	.word	0x000186a1

0800f254 <STORAGE_IsReady_FS>:
{
 800f254:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800f256:	f7fb fb9d 	bl	800a994 <BSP_SD_IsDetected>
 800f25a:	b180      	cbz	r0, 800f27e <STORAGE_IsReady_FS+0x2a>
    if (prev_status < 0)
 800f25c:	4c0c      	ldr	r4, [pc, #48]	@ (800f290 <STORAGE_IsReady_FS+0x3c>)
 800f25e:	f994 3000 	ldrsb.w	r3, [r4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	db06      	blt.n	800f274 <STORAGE_IsReady_FS+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f266:	f7fb fb77 	bl	800a958 <BSP_SD_GetCardState>
 800f26a:	3800      	subs	r0, #0
 800f26c:	bf18      	it	ne
 800f26e:	2001      	movne	r0, #1
 800f270:	4240      	negs	r0, r0
}
 800f272:	bd10      	pop	{r4, pc}
      BSP_SD_Init();
 800f274:	f7fb fb96 	bl	800a9a4 <BSP_SD_Init>
      prev_status = 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	7023      	strb	r3, [r4, #0]
 800f27c:	e7f3      	b.n	800f266 <STORAGE_IsReady_FS+0x12>
  else if (prev_status == 0)
 800f27e:	4b04      	ldr	r3, [pc, #16]	@ (800f290 <STORAGE_IsReady_FS+0x3c>)
 800f280:	f993 2000 	ldrsb.w	r2, [r3]
 800f284:	b90a      	cbnz	r2, 800f28a <STORAGE_IsReady_FS+0x36>
    prev_status = -1;
 800f286:	22ff      	movs	r2, #255	@ 0xff
 800f288:	701a      	strb	r2, [r3, #0]
  int8_t ret = -1;
 800f28a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f28e:	bd10      	pop	{r4, pc}
 800f290:	20001008 	.word	0x20001008

0800f294 <STORAGE_Init_FS>:
{
 800f294:	b508      	push	{r3, lr}
 BSP_SD_Init();
 800f296:	f7fb fb85 	bl	800a9a4 <BSP_SD_Init>
}
 800f29a:	2000      	movs	r0, #0
 800f29c:	bd08      	pop	{r3, pc}
 800f29e:	bf00      	nop

0800f2a0 <STORAGE_GetCapacity_FS>:
{
 800f2a0:	b530      	push	{r4, r5, lr}
 800f2a2:	b089      	sub	sp, #36	@ 0x24
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	4614      	mov	r4, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800f2a8:	f7fb fb74 	bl	800a994 <BSP_SD_IsDetected>
 800f2ac:	b150      	cbz	r0, 800f2c4 <STORAGE_GetCapacity_FS+0x24>
    BSP_SD_GetCardInfo(&info);
 800f2ae:	4668      	mov	r0, sp
 800f2b0:	f7fb fb5c 	bl	800a96c <BSP_SD_GetCardInfo>
    *block_size = info.LogBlockSize;
 800f2b4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    *block_num = info.LogBlockNbr - 1;
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	602b      	str	r3, [r5, #0]
    ret = 0;
 800f2bc:	2000      	movs	r0, #0
    *block_size = info.LogBlockSize;
 800f2be:	8022      	strh	r2, [r4, #0]
}
 800f2c0:	b009      	add	sp, #36	@ 0x24
 800f2c2:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	e7fa      	b.n	800f2c0 <STORAGE_GetCapacity_FS+0x20>
 800f2ca:	bf00      	nop

0800f2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2cc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2ce:	6803      	ldr	r3, [r0, #0]
{
 800f2d0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2d2:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800f2dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800f2e0:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2e2:	d001      	beq.n	800f2e8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f2e4:	b009      	add	sp, #36	@ 0x24
 800f2e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2e8:	4d17      	ldr	r5, [pc, #92]	@ (800f348 <HAL_PCD_MspInit+0x7c>)
 800f2ea:	9400      	str	r4, [sp, #0]
 800f2ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2ee:	4817      	ldr	r0, [pc, #92]	@ (800f34c <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2f0:	f043 0301 	orr.w	r3, r3, #1
 800f2f4:	632b      	str	r3, [r5, #48]	@ 0x30
 800f2f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f2fe:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800f302:	2302      	movs	r3, #2
 800f304:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f308:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f30a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f30c:	9305      	str	r3, [sp, #20]
 800f30e:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f310:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f312:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f314:	f7f5 fdd0 	bl	8004eb8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f318:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f31e:	636b      	str	r3, [r5, #52]	@ 0x34
 800f320:	9401      	str	r4, [sp, #4]
 800f322:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f328:	646b      	str	r3, [r5, #68]	@ 0x44
 800f32a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800f32c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800f330:	4622      	mov	r2, r4
 800f332:	2107      	movs	r1, #7
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f334:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800f336:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f338:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800f33a:	f7f5 fb53 	bl	80049e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f33e:	2043      	movs	r0, #67	@ 0x43
 800f340:	f7f5 fb8c 	bl	8004a5c <HAL_NVIC_EnableIRQ>
}
 800f344:	b009      	add	sp, #36	@ 0x24
 800f346:	bd30      	pop	{r4, r5, pc}
 800f348:	40023800 	.word	0x40023800
 800f34c:	40020000 	.word	0x40020000

0800f350 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f350:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800f354:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f358:	f7fc be2c 	b.w	800bfb4 <USBD_LL_SetupStage>

0800f35c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f35c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800f360:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f364:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f368:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800f36c:	f7fc be52 	b.w	800c014 <USBD_LL_DataOutStage>

0800f370 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f370:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800f374:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f378:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f37c:	6a1a      	ldr	r2, [r3, #32]
 800f37e:	f7fc be83 	b.w	800c088 <USBD_LL_DataInStage>
 800f382:	bf00      	nop

0800f384 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f384:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f388:	f7fc bf24 	b.w	800c1d4 <USBD_LL_SOF>

0800f38c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f38c:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f38e:	79c1      	ldrb	r1, [r0, #7]
{
 800f390:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f392:	b111      	cbz	r1, 800f39a <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f394:	2902      	cmp	r1, #2
 800f396:	d10a      	bne.n	800f3ae <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800f398:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f39a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800f39e:	f7fc fefb 	bl	800c198 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3a2:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 800f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3aa:	f7fc bec7 	b.w	800c13c <USBD_LL_Reset>
    Error_Handler();
 800f3ae:	f7f4 fdbb 	bl	8003f28 <Error_Handler>
    speed = USBD_SPEED_FULL;
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	e7f1      	b.n	800f39a <HAL_PCD_ResetCallback+0xe>
 800f3b6:	bf00      	nop

0800f3b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f3bc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f3c0:	f7fc feee 	bl	800c1a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f3c4:	6822      	ldr	r2, [r4, #0]
 800f3c6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800f3ca:	f043 0301 	orr.w	r3, r3, #1
 800f3ce:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f3d2:	7ae3      	ldrb	r3, [r4, #11]
 800f3d4:	b123      	cbz	r3, 800f3e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f3d6:	4a03      	ldr	r2, [pc, #12]	@ (800f3e4 <HAL_PCD_SuspendCallback+0x2c>)
 800f3d8:	6913      	ldr	r3, [r2, #16]
 800f3da:	f043 0306 	orr.w	r3, r3, #6
 800f3de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f3e0:	bd10      	pop	{r4, pc}
 800f3e2:	bf00      	nop
 800f3e4:	e000ed00 	.word	0xe000ed00

0800f3e8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f3e8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f3ec:	f7fc bee6 	b.w	800c1bc <USBD_LL_Resume>

0800f3f0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3f0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f3f4:	f7fc bf14 	b.w	800c220 <USBD_LL_IsoOUTIncomplete>

0800f3f8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3f8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f3fc:	f7fc befa 	b.w	800c1f4 <USBD_LL_IsoINIncomplete>

0800f400 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f400:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f404:	f7fc bf22 	b.w	800c24c <USBD_LL_DevConnected>

0800f408 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f408:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800f40c:	f7fc bf20 	b.w	800c250 <USBD_LL_DevDisconnected>

0800f410 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f410:	7802      	ldrb	r2, [r0, #0]
 800f412:	b10a      	cbz	r2, 800f418 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800f414:	2000      	movs	r0, #0
 800f416:	4770      	bx	lr
{
 800f418:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800f41a:	4b15      	ldr	r3, [pc, #84]	@ (800f470 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f41c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 800f420:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f424:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f428:	f44f 7000 	mov.w	r0, #512	@ 0x200
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f42c:	f04f 0c04 	mov.w	ip, #4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f430:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f432:	80d8      	strh	r0, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f434:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f436:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f438:	f883 c004 	strb.w	ip, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f43c:	f8c3 1009 	str.w	r1, [r3, #9]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f440:	81da      	strh	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f442:	f7f5 fe85 	bl	8005150 <HAL_PCD_Init>
 800f446:	b978      	cbnz	r0, 800f468 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f448:	2180      	movs	r1, #128	@ 0x80
 800f44a:	4809      	ldr	r0, [pc, #36]	@ (800f470 <USBD_LL_Init+0x60>)
 800f44c:	f7f7 f81a 	bl	8006484 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f450:	2240      	movs	r2, #64	@ 0x40
 800f452:	2100      	movs	r1, #0
 800f454:	4806      	ldr	r0, [pc, #24]	@ (800f470 <USBD_LL_Init+0x60>)
 800f456:	f7f6 ff93 	bl	8006380 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f45a:	2280      	movs	r2, #128	@ 0x80
 800f45c:	2101      	movs	r1, #1
 800f45e:	4804      	ldr	r0, [pc, #16]	@ (800f470 <USBD_LL_Init+0x60>)
 800f460:	f7f6 ff8e 	bl	8006380 <HAL_PCDEx_SetTxFiFo>
}
 800f464:	2000      	movs	r0, #0
 800f466:	bd08      	pop	{r3, pc}
    Error_Handler( );
 800f468:	f7f4 fd5e 	bl	8003f28 <Error_Handler>
 800f46c:	e7ec      	b.n	800f448 <USBD_LL_Init+0x38>
 800f46e:	bf00      	nop
 800f470:	2000128c 	.word	0x2000128c

0800f474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f474:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800f476:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f47a:	f7f6 f873 	bl	8005564 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800f47e:	b118      	cbz	r0, 800f488 <USBD_LL_Start+0x14>
 800f480:	2802      	cmp	r0, #2
 800f482:	bf0c      	ite	eq
 800f484:	2001      	moveq	r0, #1
 800f486:	2003      	movne	r0, #3
}
 800f488:	bd08      	pop	{r3, pc}
 800f48a:	bf00      	nop

0800f48c <USBD_LL_OpenEP>:
{
 800f48c:	4694      	mov	ip, r2
 800f48e:	b508      	push	{r3, lr}
 800f490:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f492:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f496:	4663      	mov	r3, ip
 800f498:	f7f6 fe18 	bl	80060cc <HAL_PCD_EP_Open>
  switch (hal_status)
 800f49c:	b118      	cbz	r0, 800f4a6 <USBD_LL_OpenEP+0x1a>
 800f49e:	2802      	cmp	r0, #2
 800f4a0:	bf0c      	ite	eq
 800f4a2:	2001      	moveq	r0, #1
 800f4a4:	2003      	movne	r0, #3
}
 800f4a6:	bd08      	pop	{r3, pc}

0800f4a8 <USBD_LL_CloseEP>:
{
 800f4a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4aa:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f4ae:	f7f6 fe4d 	bl	800614c <HAL_PCD_EP_Close>
  switch (hal_status)
 800f4b2:	b118      	cbz	r0, 800f4bc <USBD_LL_CloseEP+0x14>
 800f4b4:	2802      	cmp	r0, #2
 800f4b6:	bf0c      	ite	eq
 800f4b8:	2001      	moveq	r0, #1
 800f4ba:	2003      	movne	r0, #3
}
 800f4bc:	bd08      	pop	{r3, pc}
 800f4be:	bf00      	nop

0800f4c0 <USBD_LL_FlushEP>:
{
 800f4c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f4c2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f4c6:	f7f6 ff3f 	bl	8006348 <HAL_PCD_EP_Flush>
  switch (hal_status)
 800f4ca:	b118      	cbz	r0, 800f4d4 <USBD_LL_FlushEP+0x14>
 800f4cc:	2802      	cmp	r0, #2
 800f4ce:	bf0c      	ite	eq
 800f4d0:	2001      	moveq	r0, #1
 800f4d2:	2003      	movne	r0, #3
}
 800f4d4:	bd08      	pop	{r3, pc}
 800f4d6:	bf00      	nop

0800f4d8 <USBD_LL_StallEP>:
{
 800f4d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4da:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f4de:	f7f6 feb9 	bl	8006254 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800f4e2:	b118      	cbz	r0, 800f4ec <USBD_LL_StallEP+0x14>
 800f4e4:	2802      	cmp	r0, #2
 800f4e6:	bf0c      	ite	eq
 800f4e8:	2001      	moveq	r0, #1
 800f4ea:	2003      	movne	r0, #3
}
 800f4ec:	bd08      	pop	{r3, pc}
 800f4ee:	bf00      	nop

0800f4f0 <USBD_LL_ClearStallEP>:
{
 800f4f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f4f2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f4f6:	f7f6 feef 	bl	80062d8 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800f4fa:	b118      	cbz	r0, 800f504 <USBD_LL_ClearStallEP+0x14>
 800f4fc:	2802      	cmp	r0, #2
 800f4fe:	bf0c      	ite	eq
 800f500:	2001      	moveq	r0, #1
 800f502:	2003      	movne	r0, #3
}
 800f504:	bd08      	pop	{r3, pc}
 800f506:	bf00      	nop

0800f508 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800f508:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f50a:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 800f50e:	d406      	bmi.n	800f51e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f510:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f514:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f518:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 800f51c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f51e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800f522:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f526:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f52a:	7d98      	ldrb	r0, [r3, #22]
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop

0800f530 <USBD_LL_SetUSBAddress>:
{
 800f530:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f532:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f536:	f7f6 fdb5 	bl	80060a4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800f53a:	b118      	cbz	r0, 800f544 <USBD_LL_SetUSBAddress+0x14>
 800f53c:	2802      	cmp	r0, #2
 800f53e:	bf0c      	ite	eq
 800f540:	2001      	moveq	r0, #1
 800f542:	2003      	movne	r0, #3
}
 800f544:	bd08      	pop	{r3, pc}
 800f546:	bf00      	nop

0800f548 <USBD_LL_Transmit>:
{
 800f548:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f54a:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f54e:	f7f6 fe5d 	bl	800620c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800f552:	b118      	cbz	r0, 800f55c <USBD_LL_Transmit+0x14>
 800f554:	2802      	cmp	r0, #2
 800f556:	bf0c      	ite	eq
 800f558:	2001      	moveq	r0, #1
 800f55a:	2003      	movne	r0, #3
}
 800f55c:	bd08      	pop	{r3, pc}
 800f55e:	bf00      	nop

0800f560 <USBD_LL_PrepareReceive>:
{
 800f560:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f562:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f566:	f7f6 fe25 	bl	80061b4 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800f56a:	b118      	cbz	r0, 800f574 <USBD_LL_PrepareReceive+0x14>
 800f56c:	2802      	cmp	r0, #2
 800f56e:	bf0c      	ite	eq
 800f570:	2001      	moveq	r0, #1
 800f572:	2003      	movne	r0, #3
}
 800f574:	bd08      	pop	{r3, pc}
 800f576:	bf00      	nop

0800f578 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f578:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800f57c:	f7f6 be3c 	b.w	80061f8 <HAL_PCD_EP_GetRxCount>

0800f580 <USBD_static_malloc>:
}
 800f580:	4800      	ldr	r0, [pc, #0]	@ (800f584 <USBD_static_malloc+0x4>)
 800f582:	4770      	bx	lr
 800f584:	20001014 	.word	0x20001014

0800f588 <USBD_static_free>:
}
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop

0800f58c <std>:
 800f58c:	2300      	movs	r3, #0
 800f58e:	b510      	push	{r4, lr}
 800f590:	4604      	mov	r4, r0
 800f592:	e9c0 3300 	strd	r3, r3, [r0]
 800f596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f59a:	6083      	str	r3, [r0, #8]
 800f59c:	8181      	strh	r1, [r0, #12]
 800f59e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f5a0:	81c2      	strh	r2, [r0, #14]
 800f5a2:	6183      	str	r3, [r0, #24]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	2208      	movs	r2, #8
 800f5a8:	305c      	adds	r0, #92	@ 0x5c
 800f5aa:	f000 fa87 	bl	800fabc <memset>
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e4 <std+0x58>)
 800f5b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e8 <std+0x5c>)
 800f5b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ec <std+0x60>)
 800f5b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f0 <std+0x64>)
 800f5bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5be:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f4 <std+0x68>)
 800f5c0:	6224      	str	r4, [r4, #32]
 800f5c2:	429c      	cmp	r4, r3
 800f5c4:	d006      	beq.n	800f5d4 <std+0x48>
 800f5c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5ca:	4294      	cmp	r4, r2
 800f5cc:	d002      	beq.n	800f5d4 <std+0x48>
 800f5ce:	33d0      	adds	r3, #208	@ 0xd0
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	d105      	bne.n	800f5e0 <std+0x54>
 800f5d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5dc:	f000 bae6 	b.w	800fbac <__retarget_lock_init_recursive>
 800f5e0:	bd10      	pop	{r4, pc}
 800f5e2:	bf00      	nop
 800f5e4:	0800f869 	.word	0x0800f869
 800f5e8:	0800f88b 	.word	0x0800f88b
 800f5ec:	0800f8c3 	.word	0x0800f8c3
 800f5f0:	0800f8e7 	.word	0x0800f8e7
 800f5f4:	20001770 	.word	0x20001770

0800f5f8 <stdio_exit_handler>:
 800f5f8:	4a02      	ldr	r2, [pc, #8]	@ (800f604 <stdio_exit_handler+0xc>)
 800f5fa:	4903      	ldr	r1, [pc, #12]	@ (800f608 <stdio_exit_handler+0x10>)
 800f5fc:	4803      	ldr	r0, [pc, #12]	@ (800f60c <stdio_exit_handler+0x14>)
 800f5fe:	f000 b869 	b.w	800f6d4 <_fwalk_sglue>
 800f602:	bf00      	nop
 800f604:	20000108 	.word	0x20000108
 800f608:	08010719 	.word	0x08010719
 800f60c:	20000118 	.word	0x20000118

0800f610 <cleanup_stdio>:
 800f610:	6841      	ldr	r1, [r0, #4]
 800f612:	4b0c      	ldr	r3, [pc, #48]	@ (800f644 <cleanup_stdio+0x34>)
 800f614:	4299      	cmp	r1, r3
 800f616:	b510      	push	{r4, lr}
 800f618:	4604      	mov	r4, r0
 800f61a:	d001      	beq.n	800f620 <cleanup_stdio+0x10>
 800f61c:	f001 f87c 	bl	8010718 <_fflush_r>
 800f620:	68a1      	ldr	r1, [r4, #8]
 800f622:	4b09      	ldr	r3, [pc, #36]	@ (800f648 <cleanup_stdio+0x38>)
 800f624:	4299      	cmp	r1, r3
 800f626:	d002      	beq.n	800f62e <cleanup_stdio+0x1e>
 800f628:	4620      	mov	r0, r4
 800f62a:	f001 f875 	bl	8010718 <_fflush_r>
 800f62e:	68e1      	ldr	r1, [r4, #12]
 800f630:	4b06      	ldr	r3, [pc, #24]	@ (800f64c <cleanup_stdio+0x3c>)
 800f632:	4299      	cmp	r1, r3
 800f634:	d004      	beq.n	800f640 <cleanup_stdio+0x30>
 800f636:	4620      	mov	r0, r4
 800f638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f63c:	f001 b86c 	b.w	8010718 <_fflush_r>
 800f640:	bd10      	pop	{r4, pc}
 800f642:	bf00      	nop
 800f644:	20001770 	.word	0x20001770
 800f648:	200017d8 	.word	0x200017d8
 800f64c:	20001840 	.word	0x20001840

0800f650 <global_stdio_init.part.0>:
 800f650:	b510      	push	{r4, lr}
 800f652:	4b0b      	ldr	r3, [pc, #44]	@ (800f680 <global_stdio_init.part.0+0x30>)
 800f654:	4c0b      	ldr	r4, [pc, #44]	@ (800f684 <global_stdio_init.part.0+0x34>)
 800f656:	4a0c      	ldr	r2, [pc, #48]	@ (800f688 <global_stdio_init.part.0+0x38>)
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	4620      	mov	r0, r4
 800f65c:	2200      	movs	r2, #0
 800f65e:	2104      	movs	r1, #4
 800f660:	f7ff ff94 	bl	800f58c <std>
 800f664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f668:	2201      	movs	r2, #1
 800f66a:	2109      	movs	r1, #9
 800f66c:	f7ff ff8e 	bl	800f58c <std>
 800f670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f674:	2202      	movs	r2, #2
 800f676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f67a:	2112      	movs	r1, #18
 800f67c:	f7ff bf86 	b.w	800f58c <std>
 800f680:	200018a8 	.word	0x200018a8
 800f684:	20001770 	.word	0x20001770
 800f688:	0800f5f9 	.word	0x0800f5f9

0800f68c <__sfp_lock_acquire>:
 800f68c:	4801      	ldr	r0, [pc, #4]	@ (800f694 <__sfp_lock_acquire+0x8>)
 800f68e:	f000 ba8e 	b.w	800fbae <__retarget_lock_acquire_recursive>
 800f692:	bf00      	nop
 800f694:	200018b1 	.word	0x200018b1

0800f698 <__sfp_lock_release>:
 800f698:	4801      	ldr	r0, [pc, #4]	@ (800f6a0 <__sfp_lock_release+0x8>)
 800f69a:	f000 ba89 	b.w	800fbb0 <__retarget_lock_release_recursive>
 800f69e:	bf00      	nop
 800f6a0:	200018b1 	.word	0x200018b1

0800f6a4 <__sinit>:
 800f6a4:	b510      	push	{r4, lr}
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	f7ff fff0 	bl	800f68c <__sfp_lock_acquire>
 800f6ac:	6a23      	ldr	r3, [r4, #32]
 800f6ae:	b11b      	cbz	r3, 800f6b8 <__sinit+0x14>
 800f6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b4:	f7ff bff0 	b.w	800f698 <__sfp_lock_release>
 800f6b8:	4b04      	ldr	r3, [pc, #16]	@ (800f6cc <__sinit+0x28>)
 800f6ba:	6223      	str	r3, [r4, #32]
 800f6bc:	4b04      	ldr	r3, [pc, #16]	@ (800f6d0 <__sinit+0x2c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1f5      	bne.n	800f6b0 <__sinit+0xc>
 800f6c4:	f7ff ffc4 	bl	800f650 <global_stdio_init.part.0>
 800f6c8:	e7f2      	b.n	800f6b0 <__sinit+0xc>
 800f6ca:	bf00      	nop
 800f6cc:	0800f611 	.word	0x0800f611
 800f6d0:	200018a8 	.word	0x200018a8

0800f6d4 <_fwalk_sglue>:
 800f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d8:	4607      	mov	r7, r0
 800f6da:	4688      	mov	r8, r1
 800f6dc:	4614      	mov	r4, r2
 800f6de:	2600      	movs	r6, #0
 800f6e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6e4:	f1b9 0901 	subs.w	r9, r9, #1
 800f6e8:	d505      	bpl.n	800f6f6 <_fwalk_sglue+0x22>
 800f6ea:	6824      	ldr	r4, [r4, #0]
 800f6ec:	2c00      	cmp	r4, #0
 800f6ee:	d1f7      	bne.n	800f6e0 <_fwalk_sglue+0xc>
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6f6:	89ab      	ldrh	r3, [r5, #12]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d907      	bls.n	800f70c <_fwalk_sglue+0x38>
 800f6fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f700:	3301      	adds	r3, #1
 800f702:	d003      	beq.n	800f70c <_fwalk_sglue+0x38>
 800f704:	4629      	mov	r1, r5
 800f706:	4638      	mov	r0, r7
 800f708:	47c0      	blx	r8
 800f70a:	4306      	orrs	r6, r0
 800f70c:	3568      	adds	r5, #104	@ 0x68
 800f70e:	e7e9      	b.n	800f6e4 <_fwalk_sglue+0x10>

0800f710 <iprintf>:
 800f710:	b40f      	push	{r0, r1, r2, r3}
 800f712:	b507      	push	{r0, r1, r2, lr}
 800f714:	4906      	ldr	r1, [pc, #24]	@ (800f730 <iprintf+0x20>)
 800f716:	ab04      	add	r3, sp, #16
 800f718:	6808      	ldr	r0, [r1, #0]
 800f71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71e:	6881      	ldr	r1, [r0, #8]
 800f720:	9301      	str	r3, [sp, #4]
 800f722:	f000 fccf 	bl	80100c4 <_vfiprintf_r>
 800f726:	b003      	add	sp, #12
 800f728:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72c:	b004      	add	sp, #16
 800f72e:	4770      	bx	lr
 800f730:	20000114 	.word	0x20000114

0800f734 <putchar>:
 800f734:	4b02      	ldr	r3, [pc, #8]	@ (800f740 <putchar+0xc>)
 800f736:	4601      	mov	r1, r0
 800f738:	6818      	ldr	r0, [r3, #0]
 800f73a:	6882      	ldr	r2, [r0, #8]
 800f73c:	f001 b876 	b.w	801082c <_putc_r>
 800f740:	20000114 	.word	0x20000114

0800f744 <_puts_r>:
 800f744:	6a03      	ldr	r3, [r0, #32]
 800f746:	b570      	push	{r4, r5, r6, lr}
 800f748:	6884      	ldr	r4, [r0, #8]
 800f74a:	4605      	mov	r5, r0
 800f74c:	460e      	mov	r6, r1
 800f74e:	b90b      	cbnz	r3, 800f754 <_puts_r+0x10>
 800f750:	f7ff ffa8 	bl	800f6a4 <__sinit>
 800f754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f756:	07db      	lsls	r3, r3, #31
 800f758:	d405      	bmi.n	800f766 <_puts_r+0x22>
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	0598      	lsls	r0, r3, #22
 800f75e:	d402      	bmi.n	800f766 <_puts_r+0x22>
 800f760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f762:	f000 fa24 	bl	800fbae <__retarget_lock_acquire_recursive>
 800f766:	89a3      	ldrh	r3, [r4, #12]
 800f768:	0719      	lsls	r1, r3, #28
 800f76a:	d502      	bpl.n	800f772 <_puts_r+0x2e>
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d135      	bne.n	800f7de <_puts_r+0x9a>
 800f772:	4621      	mov	r1, r4
 800f774:	4628      	mov	r0, r5
 800f776:	f000 f931 	bl	800f9dc <__swsetup_r>
 800f77a:	b380      	cbz	r0, 800f7de <_puts_r+0x9a>
 800f77c:	f04f 35ff 	mov.w	r5, #4294967295
 800f780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f782:	07da      	lsls	r2, r3, #31
 800f784:	d405      	bmi.n	800f792 <_puts_r+0x4e>
 800f786:	89a3      	ldrh	r3, [r4, #12]
 800f788:	059b      	lsls	r3, r3, #22
 800f78a:	d402      	bmi.n	800f792 <_puts_r+0x4e>
 800f78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f78e:	f000 fa0f 	bl	800fbb0 <__retarget_lock_release_recursive>
 800f792:	4628      	mov	r0, r5
 800f794:	bd70      	pop	{r4, r5, r6, pc}
 800f796:	2b00      	cmp	r3, #0
 800f798:	da04      	bge.n	800f7a4 <_puts_r+0x60>
 800f79a:	69a2      	ldr	r2, [r4, #24]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	dc17      	bgt.n	800f7d0 <_puts_r+0x8c>
 800f7a0:	290a      	cmp	r1, #10
 800f7a2:	d015      	beq.n	800f7d0 <_puts_r+0x8c>
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	6022      	str	r2, [r4, #0]
 800f7aa:	7019      	strb	r1, [r3, #0]
 800f7ac:	68a3      	ldr	r3, [r4, #8]
 800f7ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	60a3      	str	r3, [r4, #8]
 800f7b6:	2900      	cmp	r1, #0
 800f7b8:	d1ed      	bne.n	800f796 <_puts_r+0x52>
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	da11      	bge.n	800f7e2 <_puts_r+0x9e>
 800f7be:	4622      	mov	r2, r4
 800f7c0:	210a      	movs	r1, #10
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f000 f8cc 	bl	800f960 <__swbuf_r>
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d0d7      	beq.n	800f77c <_puts_r+0x38>
 800f7cc:	250a      	movs	r5, #10
 800f7ce:	e7d7      	b.n	800f780 <_puts_r+0x3c>
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f000 f8c4 	bl	800f960 <__swbuf_r>
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d1e7      	bne.n	800f7ac <_puts_r+0x68>
 800f7dc:	e7ce      	b.n	800f77c <_puts_r+0x38>
 800f7de:	3e01      	subs	r6, #1
 800f7e0:	e7e4      	b.n	800f7ac <_puts_r+0x68>
 800f7e2:	6823      	ldr	r3, [r4, #0]
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	6022      	str	r2, [r4, #0]
 800f7e8:	220a      	movs	r2, #10
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	e7ee      	b.n	800f7cc <_puts_r+0x88>
	...

0800f7f0 <puts>:
 800f7f0:	4b02      	ldr	r3, [pc, #8]	@ (800f7fc <puts+0xc>)
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	f7ff bfa5 	b.w	800f744 <_puts_r>
 800f7fa:	bf00      	nop
 800f7fc:	20000114 	.word	0x20000114

0800f800 <sniprintf>:
 800f800:	b40c      	push	{r2, r3}
 800f802:	b530      	push	{r4, r5, lr}
 800f804:	4b17      	ldr	r3, [pc, #92]	@ (800f864 <sniprintf+0x64>)
 800f806:	1e0c      	subs	r4, r1, #0
 800f808:	681d      	ldr	r5, [r3, #0]
 800f80a:	b09d      	sub	sp, #116	@ 0x74
 800f80c:	da08      	bge.n	800f820 <sniprintf+0x20>
 800f80e:	238b      	movs	r3, #139	@ 0x8b
 800f810:	602b      	str	r3, [r5, #0]
 800f812:	f04f 30ff 	mov.w	r0, #4294967295
 800f816:	b01d      	add	sp, #116	@ 0x74
 800f818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f81c:	b002      	add	sp, #8
 800f81e:	4770      	bx	lr
 800f820:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f824:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f828:	bf14      	ite	ne
 800f82a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f82e:	4623      	moveq	r3, r4
 800f830:	9304      	str	r3, [sp, #16]
 800f832:	9307      	str	r3, [sp, #28]
 800f834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f838:	9002      	str	r0, [sp, #8]
 800f83a:	9006      	str	r0, [sp, #24]
 800f83c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f840:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f842:	ab21      	add	r3, sp, #132	@ 0x84
 800f844:	a902      	add	r1, sp, #8
 800f846:	4628      	mov	r0, r5
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	f000 fb15 	bl	800fe78 <_svfiprintf_r>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	bfbc      	itt	lt
 800f852:	238b      	movlt	r3, #139	@ 0x8b
 800f854:	602b      	strlt	r3, [r5, #0]
 800f856:	2c00      	cmp	r4, #0
 800f858:	d0dd      	beq.n	800f816 <sniprintf+0x16>
 800f85a:	9b02      	ldr	r3, [sp, #8]
 800f85c:	2200      	movs	r2, #0
 800f85e:	701a      	strb	r2, [r3, #0]
 800f860:	e7d9      	b.n	800f816 <sniprintf+0x16>
 800f862:	bf00      	nop
 800f864:	20000114 	.word	0x20000114

0800f868 <__sread>:
 800f868:	b510      	push	{r4, lr}
 800f86a:	460c      	mov	r4, r1
 800f86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f870:	f000 f94e 	bl	800fb10 <_read_r>
 800f874:	2800      	cmp	r0, #0
 800f876:	bfab      	itete	ge
 800f878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f87a:	89a3      	ldrhlt	r3, [r4, #12]
 800f87c:	181b      	addge	r3, r3, r0
 800f87e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f882:	bfac      	ite	ge
 800f884:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f886:	81a3      	strhlt	r3, [r4, #12]
 800f888:	bd10      	pop	{r4, pc}

0800f88a <__swrite>:
 800f88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88e:	461f      	mov	r7, r3
 800f890:	898b      	ldrh	r3, [r1, #12]
 800f892:	05db      	lsls	r3, r3, #23
 800f894:	4605      	mov	r5, r0
 800f896:	460c      	mov	r4, r1
 800f898:	4616      	mov	r6, r2
 800f89a:	d505      	bpl.n	800f8a8 <__swrite+0x1e>
 800f89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f000 f922 	bl	800faec <_lseek_r>
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	463b      	mov	r3, r7
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8be:	f000 b939 	b.w	800fb34 <_write_r>

0800f8c2 <__sseek>:
 800f8c2:	b510      	push	{r4, lr}
 800f8c4:	460c      	mov	r4, r1
 800f8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8ca:	f000 f90f 	bl	800faec <_lseek_r>
 800f8ce:	1c43      	adds	r3, r0, #1
 800f8d0:	89a3      	ldrh	r3, [r4, #12]
 800f8d2:	bf15      	itete	ne
 800f8d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f8d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f8da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f8de:	81a3      	strheq	r3, [r4, #12]
 800f8e0:	bf18      	it	ne
 800f8e2:	81a3      	strhne	r3, [r4, #12]
 800f8e4:	bd10      	pop	{r4, pc}

0800f8e6 <__sclose>:
 800f8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8ea:	f000 b8ef 	b.w	800facc <_close_r>

0800f8ee <_vsniprintf_r>:
 800f8ee:	b530      	push	{r4, r5, lr}
 800f8f0:	4614      	mov	r4, r2
 800f8f2:	2c00      	cmp	r4, #0
 800f8f4:	b09b      	sub	sp, #108	@ 0x6c
 800f8f6:	4605      	mov	r5, r0
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	da05      	bge.n	800f908 <_vsniprintf_r+0x1a>
 800f8fc:	238b      	movs	r3, #139	@ 0x8b
 800f8fe:	6003      	str	r3, [r0, #0]
 800f900:	f04f 30ff 	mov.w	r0, #4294967295
 800f904:	b01b      	add	sp, #108	@ 0x6c
 800f906:	bd30      	pop	{r4, r5, pc}
 800f908:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f90c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f910:	bf14      	ite	ne
 800f912:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f916:	4623      	moveq	r3, r4
 800f918:	9302      	str	r3, [sp, #8]
 800f91a:	9305      	str	r3, [sp, #20]
 800f91c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f920:	9100      	str	r1, [sp, #0]
 800f922:	9104      	str	r1, [sp, #16]
 800f924:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f928:	4669      	mov	r1, sp
 800f92a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f92c:	f000 faa4 	bl	800fe78 <_svfiprintf_r>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	bfbc      	itt	lt
 800f934:	238b      	movlt	r3, #139	@ 0x8b
 800f936:	602b      	strlt	r3, [r5, #0]
 800f938:	2c00      	cmp	r4, #0
 800f93a:	d0e3      	beq.n	800f904 <_vsniprintf_r+0x16>
 800f93c:	9b00      	ldr	r3, [sp, #0]
 800f93e:	2200      	movs	r2, #0
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	e7df      	b.n	800f904 <_vsniprintf_r+0x16>

0800f944 <vsniprintf>:
 800f944:	b507      	push	{r0, r1, r2, lr}
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	4613      	mov	r3, r2
 800f94a:	460a      	mov	r2, r1
 800f94c:	4601      	mov	r1, r0
 800f94e:	4803      	ldr	r0, [pc, #12]	@ (800f95c <vsniprintf+0x18>)
 800f950:	6800      	ldr	r0, [r0, #0]
 800f952:	f7ff ffcc 	bl	800f8ee <_vsniprintf_r>
 800f956:	b003      	add	sp, #12
 800f958:	f85d fb04 	ldr.w	pc, [sp], #4
 800f95c:	20000114 	.word	0x20000114

0800f960 <__swbuf_r>:
 800f960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f962:	460e      	mov	r6, r1
 800f964:	4614      	mov	r4, r2
 800f966:	4605      	mov	r5, r0
 800f968:	b118      	cbz	r0, 800f972 <__swbuf_r+0x12>
 800f96a:	6a03      	ldr	r3, [r0, #32]
 800f96c:	b90b      	cbnz	r3, 800f972 <__swbuf_r+0x12>
 800f96e:	f7ff fe99 	bl	800f6a4 <__sinit>
 800f972:	69a3      	ldr	r3, [r4, #24]
 800f974:	60a3      	str	r3, [r4, #8]
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	071a      	lsls	r2, r3, #28
 800f97a:	d501      	bpl.n	800f980 <__swbuf_r+0x20>
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	b943      	cbnz	r3, 800f992 <__swbuf_r+0x32>
 800f980:	4621      	mov	r1, r4
 800f982:	4628      	mov	r0, r5
 800f984:	f000 f82a 	bl	800f9dc <__swsetup_r>
 800f988:	b118      	cbz	r0, 800f992 <__swbuf_r+0x32>
 800f98a:	f04f 37ff 	mov.w	r7, #4294967295
 800f98e:	4638      	mov	r0, r7
 800f990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	6922      	ldr	r2, [r4, #16]
 800f996:	1a98      	subs	r0, r3, r2
 800f998:	6963      	ldr	r3, [r4, #20]
 800f99a:	b2f6      	uxtb	r6, r6
 800f99c:	4283      	cmp	r3, r0
 800f99e:	4637      	mov	r7, r6
 800f9a0:	dc05      	bgt.n	800f9ae <__swbuf_r+0x4e>
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f000 feb7 	bl	8010718 <_fflush_r>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d1ed      	bne.n	800f98a <__swbuf_r+0x2a>
 800f9ae:	68a3      	ldr	r3, [r4, #8]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	60a3      	str	r3, [r4, #8]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	6022      	str	r2, [r4, #0]
 800f9ba:	701e      	strb	r6, [r3, #0]
 800f9bc:	6962      	ldr	r2, [r4, #20]
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d004      	beq.n	800f9ce <__swbuf_r+0x6e>
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	07db      	lsls	r3, r3, #31
 800f9c8:	d5e1      	bpl.n	800f98e <__swbuf_r+0x2e>
 800f9ca:	2e0a      	cmp	r6, #10
 800f9cc:	d1df      	bne.n	800f98e <__swbuf_r+0x2e>
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 fea1 	bl	8010718 <_fflush_r>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d0d9      	beq.n	800f98e <__swbuf_r+0x2e>
 800f9da:	e7d6      	b.n	800f98a <__swbuf_r+0x2a>

0800f9dc <__swsetup_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4b29      	ldr	r3, [pc, #164]	@ (800fa84 <__swsetup_r+0xa8>)
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	6818      	ldr	r0, [r3, #0]
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	b118      	cbz	r0, 800f9f0 <__swsetup_r+0x14>
 800f9e8:	6a03      	ldr	r3, [r0, #32]
 800f9ea:	b90b      	cbnz	r3, 800f9f0 <__swsetup_r+0x14>
 800f9ec:	f7ff fe5a 	bl	800f6a4 <__sinit>
 800f9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f4:	0719      	lsls	r1, r3, #28
 800f9f6:	d422      	bmi.n	800fa3e <__swsetup_r+0x62>
 800f9f8:	06da      	lsls	r2, r3, #27
 800f9fa:	d407      	bmi.n	800fa0c <__swsetup_r+0x30>
 800f9fc:	2209      	movs	r2, #9
 800f9fe:	602a      	str	r2, [r5, #0]
 800fa00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa04:	81a3      	strh	r3, [r4, #12]
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	e033      	b.n	800fa74 <__swsetup_r+0x98>
 800fa0c:	0758      	lsls	r0, r3, #29
 800fa0e:	d512      	bpl.n	800fa36 <__swsetup_r+0x5a>
 800fa10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa12:	b141      	cbz	r1, 800fa26 <__swsetup_r+0x4a>
 800fa14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa18:	4299      	cmp	r1, r3
 800fa1a:	d002      	beq.n	800fa22 <__swsetup_r+0x46>
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	f000 f8d7 	bl	800fbd0 <_free_r>
 800fa22:	2300      	movs	r3, #0
 800fa24:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	6063      	str	r3, [r4, #4]
 800fa32:	6923      	ldr	r3, [r4, #16]
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	89a3      	ldrh	r3, [r4, #12]
 800fa38:	f043 0308 	orr.w	r3, r3, #8
 800fa3c:	81a3      	strh	r3, [r4, #12]
 800fa3e:	6923      	ldr	r3, [r4, #16]
 800fa40:	b94b      	cbnz	r3, 800fa56 <__swsetup_r+0x7a>
 800fa42:	89a3      	ldrh	r3, [r4, #12]
 800fa44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa4c:	d003      	beq.n	800fa56 <__swsetup_r+0x7a>
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4628      	mov	r0, r5
 800fa52:	f000 feaf 	bl	80107b4 <__smakebuf_r>
 800fa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa5a:	f013 0201 	ands.w	r2, r3, #1
 800fa5e:	d00a      	beq.n	800fa76 <__swsetup_r+0x9a>
 800fa60:	2200      	movs	r2, #0
 800fa62:	60a2      	str	r2, [r4, #8]
 800fa64:	6962      	ldr	r2, [r4, #20]
 800fa66:	4252      	negs	r2, r2
 800fa68:	61a2      	str	r2, [r4, #24]
 800fa6a:	6922      	ldr	r2, [r4, #16]
 800fa6c:	b942      	cbnz	r2, 800fa80 <__swsetup_r+0xa4>
 800fa6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa72:	d1c5      	bne.n	800fa00 <__swsetup_r+0x24>
 800fa74:	bd38      	pop	{r3, r4, r5, pc}
 800fa76:	0799      	lsls	r1, r3, #30
 800fa78:	bf58      	it	pl
 800fa7a:	6962      	ldrpl	r2, [r4, #20]
 800fa7c:	60a2      	str	r2, [r4, #8]
 800fa7e:	e7f4      	b.n	800fa6a <__swsetup_r+0x8e>
 800fa80:	2000      	movs	r0, #0
 800fa82:	e7f7      	b.n	800fa74 <__swsetup_r+0x98>
 800fa84:	20000114 	.word	0x20000114

0800fa88 <memmove>:
 800fa88:	4288      	cmp	r0, r1
 800fa8a:	b510      	push	{r4, lr}
 800fa8c:	eb01 0402 	add.w	r4, r1, r2
 800fa90:	d902      	bls.n	800fa98 <memmove+0x10>
 800fa92:	4284      	cmp	r4, r0
 800fa94:	4623      	mov	r3, r4
 800fa96:	d807      	bhi.n	800faa8 <memmove+0x20>
 800fa98:	1e43      	subs	r3, r0, #1
 800fa9a:	42a1      	cmp	r1, r4
 800fa9c:	d008      	beq.n	800fab0 <memmove+0x28>
 800fa9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800faa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800faa6:	e7f8      	b.n	800fa9a <memmove+0x12>
 800faa8:	4402      	add	r2, r0
 800faaa:	4601      	mov	r1, r0
 800faac:	428a      	cmp	r2, r1
 800faae:	d100      	bne.n	800fab2 <memmove+0x2a>
 800fab0:	bd10      	pop	{r4, pc}
 800fab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faba:	e7f7      	b.n	800faac <memmove+0x24>

0800fabc <memset>:
 800fabc:	4402      	add	r2, r0
 800fabe:	4603      	mov	r3, r0
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d100      	bne.n	800fac6 <memset+0xa>
 800fac4:	4770      	bx	lr
 800fac6:	f803 1b01 	strb.w	r1, [r3], #1
 800faca:	e7f9      	b.n	800fac0 <memset+0x4>

0800facc <_close_r>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	4d06      	ldr	r5, [pc, #24]	@ (800fae8 <_close_r+0x1c>)
 800fad0:	2300      	movs	r3, #0
 800fad2:	4604      	mov	r4, r0
 800fad4:	4608      	mov	r0, r1
 800fad6:	602b      	str	r3, [r5, #0]
 800fad8:	f7f4 feac 	bl	8004834 <_close>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_close_r+0x1a>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_close_r+0x1a>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	200018ac 	.word	0x200018ac

0800faec <_lseek_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4d07      	ldr	r5, [pc, #28]	@ (800fb0c <_lseek_r+0x20>)
 800faf0:	4604      	mov	r4, r0
 800faf2:	4608      	mov	r0, r1
 800faf4:	4611      	mov	r1, r2
 800faf6:	2200      	movs	r2, #0
 800faf8:	602a      	str	r2, [r5, #0]
 800fafa:	461a      	mov	r2, r3
 800fafc:	f7f4 fea6 	bl	800484c <_lseek>
 800fb00:	1c43      	adds	r3, r0, #1
 800fb02:	d102      	bne.n	800fb0a <_lseek_r+0x1e>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	b103      	cbz	r3, 800fb0a <_lseek_r+0x1e>
 800fb08:	6023      	str	r3, [r4, #0]
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}
 800fb0c:	200018ac 	.word	0x200018ac

0800fb10 <_read_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d07      	ldr	r5, [pc, #28]	@ (800fb30 <_read_r+0x20>)
 800fb14:	4604      	mov	r4, r0
 800fb16:	4608      	mov	r0, r1
 800fb18:	4611      	mov	r1, r2
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	602a      	str	r2, [r5, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	f7f4 fe6c 	bl	80047fc <_read>
 800fb24:	1c43      	adds	r3, r0, #1
 800fb26:	d102      	bne.n	800fb2e <_read_r+0x1e>
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	b103      	cbz	r3, 800fb2e <_read_r+0x1e>
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	200018ac 	.word	0x200018ac

0800fb34 <_write_r>:
 800fb34:	b538      	push	{r3, r4, r5, lr}
 800fb36:	4d07      	ldr	r5, [pc, #28]	@ (800fb54 <_write_r+0x20>)
 800fb38:	4604      	mov	r4, r0
 800fb3a:	4608      	mov	r0, r1
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	2200      	movs	r2, #0
 800fb40:	602a      	str	r2, [r5, #0]
 800fb42:	461a      	mov	r2, r3
 800fb44:	f7f4 fe68 	bl	8004818 <_write>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d102      	bne.n	800fb52 <_write_r+0x1e>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	b103      	cbz	r3, 800fb52 <_write_r+0x1e>
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	200018ac 	.word	0x200018ac

0800fb58 <__errno>:
 800fb58:	4b01      	ldr	r3, [pc, #4]	@ (800fb60 <__errno+0x8>)
 800fb5a:	6818      	ldr	r0, [r3, #0]
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	20000114 	.word	0x20000114

0800fb64 <__libc_init_array>:
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	4d0d      	ldr	r5, [pc, #52]	@ (800fb9c <__libc_init_array+0x38>)
 800fb68:	4c0d      	ldr	r4, [pc, #52]	@ (800fba0 <__libc_init_array+0x3c>)
 800fb6a:	1b64      	subs	r4, r4, r5
 800fb6c:	10a4      	asrs	r4, r4, #2
 800fb6e:	2600      	movs	r6, #0
 800fb70:	42a6      	cmp	r6, r4
 800fb72:	d109      	bne.n	800fb88 <__libc_init_array+0x24>
 800fb74:	4d0b      	ldr	r5, [pc, #44]	@ (800fba4 <__libc_init_array+0x40>)
 800fb76:	4c0c      	ldr	r4, [pc, #48]	@ (800fba8 <__libc_init_array+0x44>)
 800fb78:	f000 ff40 	bl	80109fc <_init>
 800fb7c:	1b64      	subs	r4, r4, r5
 800fb7e:	10a4      	asrs	r4, r4, #2
 800fb80:	2600      	movs	r6, #0
 800fb82:	42a6      	cmp	r6, r4
 800fb84:	d105      	bne.n	800fb92 <__libc_init_array+0x2e>
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb8c:	4798      	blx	r3
 800fb8e:	3601      	adds	r6, #1
 800fb90:	e7ee      	b.n	800fb70 <__libc_init_array+0xc>
 800fb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb96:	4798      	blx	r3
 800fb98:	3601      	adds	r6, #1
 800fb9a:	e7f2      	b.n	800fb82 <__libc_init_array+0x1e>
 800fb9c:	08011b98 	.word	0x08011b98
 800fba0:	08011b98 	.word	0x08011b98
 800fba4:	08011b98 	.word	0x08011b98
 800fba8:	08011b9c 	.word	0x08011b9c

0800fbac <__retarget_lock_init_recursive>:
 800fbac:	4770      	bx	lr

0800fbae <__retarget_lock_acquire_recursive>:
 800fbae:	4770      	bx	lr

0800fbb0 <__retarget_lock_release_recursive>:
 800fbb0:	4770      	bx	lr

0800fbb2 <memcpy>:
 800fbb2:	440a      	add	r2, r1
 800fbb4:	4291      	cmp	r1, r2
 800fbb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbba:	d100      	bne.n	800fbbe <memcpy+0xc>
 800fbbc:	4770      	bx	lr
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc8:	4291      	cmp	r1, r2
 800fbca:	d1f9      	bne.n	800fbc0 <memcpy+0xe>
 800fbcc:	bd10      	pop	{r4, pc}
	...

0800fbd0 <_free_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	2900      	cmp	r1, #0
 800fbd6:	d041      	beq.n	800fc5c <_free_r+0x8c>
 800fbd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbdc:	1f0c      	subs	r4, r1, #4
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfb8      	it	lt
 800fbe2:	18e4      	addlt	r4, r4, r3
 800fbe4:	f000 f8e0 	bl	800fda8 <__malloc_lock>
 800fbe8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc60 <_free_r+0x90>)
 800fbea:	6813      	ldr	r3, [r2, #0]
 800fbec:	b933      	cbnz	r3, 800fbfc <_free_r+0x2c>
 800fbee:	6063      	str	r3, [r4, #4]
 800fbf0:	6014      	str	r4, [r2, #0]
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf8:	f000 b8dc 	b.w	800fdb4 <__malloc_unlock>
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d908      	bls.n	800fc12 <_free_r+0x42>
 800fc00:	6820      	ldr	r0, [r4, #0]
 800fc02:	1821      	adds	r1, r4, r0
 800fc04:	428b      	cmp	r3, r1
 800fc06:	bf01      	itttt	eq
 800fc08:	6819      	ldreq	r1, [r3, #0]
 800fc0a:	685b      	ldreq	r3, [r3, #4]
 800fc0c:	1809      	addeq	r1, r1, r0
 800fc0e:	6021      	streq	r1, [r4, #0]
 800fc10:	e7ed      	b.n	800fbee <_free_r+0x1e>
 800fc12:	461a      	mov	r2, r3
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	b10b      	cbz	r3, 800fc1c <_free_r+0x4c>
 800fc18:	42a3      	cmp	r3, r4
 800fc1a:	d9fa      	bls.n	800fc12 <_free_r+0x42>
 800fc1c:	6811      	ldr	r1, [r2, #0]
 800fc1e:	1850      	adds	r0, r2, r1
 800fc20:	42a0      	cmp	r0, r4
 800fc22:	d10b      	bne.n	800fc3c <_free_r+0x6c>
 800fc24:	6820      	ldr	r0, [r4, #0]
 800fc26:	4401      	add	r1, r0
 800fc28:	1850      	adds	r0, r2, r1
 800fc2a:	4283      	cmp	r3, r0
 800fc2c:	6011      	str	r1, [r2, #0]
 800fc2e:	d1e0      	bne.n	800fbf2 <_free_r+0x22>
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	6053      	str	r3, [r2, #4]
 800fc36:	4408      	add	r0, r1
 800fc38:	6010      	str	r0, [r2, #0]
 800fc3a:	e7da      	b.n	800fbf2 <_free_r+0x22>
 800fc3c:	d902      	bls.n	800fc44 <_free_r+0x74>
 800fc3e:	230c      	movs	r3, #12
 800fc40:	602b      	str	r3, [r5, #0]
 800fc42:	e7d6      	b.n	800fbf2 <_free_r+0x22>
 800fc44:	6820      	ldr	r0, [r4, #0]
 800fc46:	1821      	adds	r1, r4, r0
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	bf04      	itt	eq
 800fc4c:	6819      	ldreq	r1, [r3, #0]
 800fc4e:	685b      	ldreq	r3, [r3, #4]
 800fc50:	6063      	str	r3, [r4, #4]
 800fc52:	bf04      	itt	eq
 800fc54:	1809      	addeq	r1, r1, r0
 800fc56:	6021      	streq	r1, [r4, #0]
 800fc58:	6054      	str	r4, [r2, #4]
 800fc5a:	e7ca      	b.n	800fbf2 <_free_r+0x22>
 800fc5c:	bd38      	pop	{r3, r4, r5, pc}
 800fc5e:	bf00      	nop
 800fc60:	200018b8 	.word	0x200018b8

0800fc64 <sbrk_aligned>:
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	4e0f      	ldr	r6, [pc, #60]	@ (800fca4 <sbrk_aligned+0x40>)
 800fc68:	460c      	mov	r4, r1
 800fc6a:	6831      	ldr	r1, [r6, #0]
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	b911      	cbnz	r1, 800fc76 <sbrk_aligned+0x12>
 800fc70:	f000 fe32 	bl	80108d8 <_sbrk_r>
 800fc74:	6030      	str	r0, [r6, #0]
 800fc76:	4621      	mov	r1, r4
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f000 fe2d 	bl	80108d8 <_sbrk_r>
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	d103      	bne.n	800fc8a <sbrk_aligned+0x26>
 800fc82:	f04f 34ff 	mov.w	r4, #4294967295
 800fc86:	4620      	mov	r0, r4
 800fc88:	bd70      	pop	{r4, r5, r6, pc}
 800fc8a:	1cc4      	adds	r4, r0, #3
 800fc8c:	f024 0403 	bic.w	r4, r4, #3
 800fc90:	42a0      	cmp	r0, r4
 800fc92:	d0f8      	beq.n	800fc86 <sbrk_aligned+0x22>
 800fc94:	1a21      	subs	r1, r4, r0
 800fc96:	4628      	mov	r0, r5
 800fc98:	f000 fe1e 	bl	80108d8 <_sbrk_r>
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	d1f2      	bne.n	800fc86 <sbrk_aligned+0x22>
 800fca0:	e7ef      	b.n	800fc82 <sbrk_aligned+0x1e>
 800fca2:	bf00      	nop
 800fca4:	200018b4 	.word	0x200018b4

0800fca8 <_malloc_r>:
 800fca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcac:	1ccd      	adds	r5, r1, #3
 800fcae:	f025 0503 	bic.w	r5, r5, #3
 800fcb2:	3508      	adds	r5, #8
 800fcb4:	2d0c      	cmp	r5, #12
 800fcb6:	bf38      	it	cc
 800fcb8:	250c      	movcc	r5, #12
 800fcba:	2d00      	cmp	r5, #0
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	db01      	blt.n	800fcc4 <_malloc_r+0x1c>
 800fcc0:	42a9      	cmp	r1, r5
 800fcc2:	d904      	bls.n	800fcce <_malloc_r+0x26>
 800fcc4:	230c      	movs	r3, #12
 800fcc6:	6033      	str	r3, [r6, #0]
 800fcc8:	2000      	movs	r0, #0
 800fcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fda4 <_malloc_r+0xfc>
 800fcd2:	f000 f869 	bl	800fda8 <__malloc_lock>
 800fcd6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcda:	461c      	mov	r4, r3
 800fcdc:	bb44      	cbnz	r4, 800fd30 <_malloc_r+0x88>
 800fcde:	4629      	mov	r1, r5
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7ff ffbf 	bl	800fc64 <sbrk_aligned>
 800fce6:	1c43      	adds	r3, r0, #1
 800fce8:	4604      	mov	r4, r0
 800fcea:	d158      	bne.n	800fd9e <_malloc_r+0xf6>
 800fcec:	f8d8 4000 	ldr.w	r4, [r8]
 800fcf0:	4627      	mov	r7, r4
 800fcf2:	2f00      	cmp	r7, #0
 800fcf4:	d143      	bne.n	800fd7e <_malloc_r+0xd6>
 800fcf6:	2c00      	cmp	r4, #0
 800fcf8:	d04b      	beq.n	800fd92 <_malloc_r+0xea>
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	4630      	mov	r0, r6
 800fd00:	eb04 0903 	add.w	r9, r4, r3
 800fd04:	f000 fde8 	bl	80108d8 <_sbrk_r>
 800fd08:	4581      	cmp	r9, r0
 800fd0a:	d142      	bne.n	800fd92 <_malloc_r+0xea>
 800fd0c:	6821      	ldr	r1, [r4, #0]
 800fd0e:	1a6d      	subs	r5, r5, r1
 800fd10:	4629      	mov	r1, r5
 800fd12:	4630      	mov	r0, r6
 800fd14:	f7ff ffa6 	bl	800fc64 <sbrk_aligned>
 800fd18:	3001      	adds	r0, #1
 800fd1a:	d03a      	beq.n	800fd92 <_malloc_r+0xea>
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	442b      	add	r3, r5
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	f8d8 3000 	ldr.w	r3, [r8]
 800fd26:	685a      	ldr	r2, [r3, #4]
 800fd28:	bb62      	cbnz	r2, 800fd84 <_malloc_r+0xdc>
 800fd2a:	f8c8 7000 	str.w	r7, [r8]
 800fd2e:	e00f      	b.n	800fd50 <_malloc_r+0xa8>
 800fd30:	6822      	ldr	r2, [r4, #0]
 800fd32:	1b52      	subs	r2, r2, r5
 800fd34:	d420      	bmi.n	800fd78 <_malloc_r+0xd0>
 800fd36:	2a0b      	cmp	r2, #11
 800fd38:	d917      	bls.n	800fd6a <_malloc_r+0xc2>
 800fd3a:	1961      	adds	r1, r4, r5
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	6025      	str	r5, [r4, #0]
 800fd40:	bf18      	it	ne
 800fd42:	6059      	strne	r1, [r3, #4]
 800fd44:	6863      	ldr	r3, [r4, #4]
 800fd46:	bf08      	it	eq
 800fd48:	f8c8 1000 	streq.w	r1, [r8]
 800fd4c:	5162      	str	r2, [r4, r5]
 800fd4e:	604b      	str	r3, [r1, #4]
 800fd50:	4630      	mov	r0, r6
 800fd52:	f000 f82f 	bl	800fdb4 <__malloc_unlock>
 800fd56:	f104 000b 	add.w	r0, r4, #11
 800fd5a:	1d23      	adds	r3, r4, #4
 800fd5c:	f020 0007 	bic.w	r0, r0, #7
 800fd60:	1ac2      	subs	r2, r0, r3
 800fd62:	bf1c      	itt	ne
 800fd64:	1a1b      	subne	r3, r3, r0
 800fd66:	50a3      	strne	r3, [r4, r2]
 800fd68:	e7af      	b.n	800fcca <_malloc_r+0x22>
 800fd6a:	6862      	ldr	r2, [r4, #4]
 800fd6c:	42a3      	cmp	r3, r4
 800fd6e:	bf0c      	ite	eq
 800fd70:	f8c8 2000 	streq.w	r2, [r8]
 800fd74:	605a      	strne	r2, [r3, #4]
 800fd76:	e7eb      	b.n	800fd50 <_malloc_r+0xa8>
 800fd78:	4623      	mov	r3, r4
 800fd7a:	6864      	ldr	r4, [r4, #4]
 800fd7c:	e7ae      	b.n	800fcdc <_malloc_r+0x34>
 800fd7e:	463c      	mov	r4, r7
 800fd80:	687f      	ldr	r7, [r7, #4]
 800fd82:	e7b6      	b.n	800fcf2 <_malloc_r+0x4a>
 800fd84:	461a      	mov	r2, r3
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	42a3      	cmp	r3, r4
 800fd8a:	d1fb      	bne.n	800fd84 <_malloc_r+0xdc>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6053      	str	r3, [r2, #4]
 800fd90:	e7de      	b.n	800fd50 <_malloc_r+0xa8>
 800fd92:	230c      	movs	r3, #12
 800fd94:	6033      	str	r3, [r6, #0]
 800fd96:	4630      	mov	r0, r6
 800fd98:	f000 f80c 	bl	800fdb4 <__malloc_unlock>
 800fd9c:	e794      	b.n	800fcc8 <_malloc_r+0x20>
 800fd9e:	6005      	str	r5, [r0, #0]
 800fda0:	e7d6      	b.n	800fd50 <_malloc_r+0xa8>
 800fda2:	bf00      	nop
 800fda4:	200018b8 	.word	0x200018b8

0800fda8 <__malloc_lock>:
 800fda8:	4801      	ldr	r0, [pc, #4]	@ (800fdb0 <__malloc_lock+0x8>)
 800fdaa:	f7ff bf00 	b.w	800fbae <__retarget_lock_acquire_recursive>
 800fdae:	bf00      	nop
 800fdb0:	200018b0 	.word	0x200018b0

0800fdb4 <__malloc_unlock>:
 800fdb4:	4801      	ldr	r0, [pc, #4]	@ (800fdbc <__malloc_unlock+0x8>)
 800fdb6:	f7ff befb 	b.w	800fbb0 <__retarget_lock_release_recursive>
 800fdba:	bf00      	nop
 800fdbc:	200018b0 	.word	0x200018b0

0800fdc0 <__ssputs_r>:
 800fdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc4:	688e      	ldr	r6, [r1, #8]
 800fdc6:	461f      	mov	r7, r3
 800fdc8:	42be      	cmp	r6, r7
 800fdca:	680b      	ldr	r3, [r1, #0]
 800fdcc:	4682      	mov	sl, r0
 800fdce:	460c      	mov	r4, r1
 800fdd0:	4690      	mov	r8, r2
 800fdd2:	d82d      	bhi.n	800fe30 <__ssputs_r+0x70>
 800fdd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fddc:	d026      	beq.n	800fe2c <__ssputs_r+0x6c>
 800fdde:	6965      	ldr	r5, [r4, #20]
 800fde0:	6909      	ldr	r1, [r1, #16]
 800fde2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fde6:	eba3 0901 	sub.w	r9, r3, r1
 800fdea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdee:	1c7b      	adds	r3, r7, #1
 800fdf0:	444b      	add	r3, r9
 800fdf2:	106d      	asrs	r5, r5, #1
 800fdf4:	429d      	cmp	r5, r3
 800fdf6:	bf38      	it	cc
 800fdf8:	461d      	movcc	r5, r3
 800fdfa:	0553      	lsls	r3, r2, #21
 800fdfc:	d527      	bpl.n	800fe4e <__ssputs_r+0x8e>
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7ff ff52 	bl	800fca8 <_malloc_r>
 800fe04:	4606      	mov	r6, r0
 800fe06:	b360      	cbz	r0, 800fe62 <__ssputs_r+0xa2>
 800fe08:	6921      	ldr	r1, [r4, #16]
 800fe0a:	464a      	mov	r2, r9
 800fe0c:	f7ff fed1 	bl	800fbb2 <memcpy>
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe1a:	81a3      	strh	r3, [r4, #12]
 800fe1c:	6126      	str	r6, [r4, #16]
 800fe1e:	6165      	str	r5, [r4, #20]
 800fe20:	444e      	add	r6, r9
 800fe22:	eba5 0509 	sub.w	r5, r5, r9
 800fe26:	6026      	str	r6, [r4, #0]
 800fe28:	60a5      	str	r5, [r4, #8]
 800fe2a:	463e      	mov	r6, r7
 800fe2c:	42be      	cmp	r6, r7
 800fe2e:	d900      	bls.n	800fe32 <__ssputs_r+0x72>
 800fe30:	463e      	mov	r6, r7
 800fe32:	6820      	ldr	r0, [r4, #0]
 800fe34:	4632      	mov	r2, r6
 800fe36:	4641      	mov	r1, r8
 800fe38:	f7ff fe26 	bl	800fa88 <memmove>
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	1b9b      	subs	r3, r3, r6
 800fe40:	60a3      	str	r3, [r4, #8]
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	4433      	add	r3, r6
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	2000      	movs	r0, #0
 800fe4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe4e:	462a      	mov	r2, r5
 800fe50:	f000 fd52 	bl	80108f8 <_realloc_r>
 800fe54:	4606      	mov	r6, r0
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d1e0      	bne.n	800fe1c <__ssputs_r+0x5c>
 800fe5a:	6921      	ldr	r1, [r4, #16]
 800fe5c:	4650      	mov	r0, sl
 800fe5e:	f7ff feb7 	bl	800fbd0 <_free_r>
 800fe62:	230c      	movs	r3, #12
 800fe64:	f8ca 3000 	str.w	r3, [sl]
 800fe68:	89a3      	ldrh	r3, [r4, #12]
 800fe6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe6e:	81a3      	strh	r3, [r4, #12]
 800fe70:	f04f 30ff 	mov.w	r0, #4294967295
 800fe74:	e7e9      	b.n	800fe4a <__ssputs_r+0x8a>
	...

0800fe78 <_svfiprintf_r>:
 800fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	4698      	mov	r8, r3
 800fe7e:	898b      	ldrh	r3, [r1, #12]
 800fe80:	061b      	lsls	r3, r3, #24
 800fe82:	b09d      	sub	sp, #116	@ 0x74
 800fe84:	4607      	mov	r7, r0
 800fe86:	460d      	mov	r5, r1
 800fe88:	4614      	mov	r4, r2
 800fe8a:	d510      	bpl.n	800feae <_svfiprintf_r+0x36>
 800fe8c:	690b      	ldr	r3, [r1, #16]
 800fe8e:	b973      	cbnz	r3, 800feae <_svfiprintf_r+0x36>
 800fe90:	2140      	movs	r1, #64	@ 0x40
 800fe92:	f7ff ff09 	bl	800fca8 <_malloc_r>
 800fe96:	6028      	str	r0, [r5, #0]
 800fe98:	6128      	str	r0, [r5, #16]
 800fe9a:	b930      	cbnz	r0, 800feaa <_svfiprintf_r+0x32>
 800fe9c:	230c      	movs	r3, #12
 800fe9e:	603b      	str	r3, [r7, #0]
 800fea0:	f04f 30ff 	mov.w	r0, #4294967295
 800fea4:	b01d      	add	sp, #116	@ 0x74
 800fea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feaa:	2340      	movs	r3, #64	@ 0x40
 800feac:	616b      	str	r3, [r5, #20]
 800feae:	2300      	movs	r3, #0
 800feb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800feb2:	2320      	movs	r3, #32
 800feb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800feb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800febc:	2330      	movs	r3, #48	@ 0x30
 800febe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801005c <_svfiprintf_r+0x1e4>
 800fec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fec6:	f04f 0901 	mov.w	r9, #1
 800feca:	4623      	mov	r3, r4
 800fecc:	469a      	mov	sl, r3
 800fece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fed2:	b10a      	cbz	r2, 800fed8 <_svfiprintf_r+0x60>
 800fed4:	2a25      	cmp	r2, #37	@ 0x25
 800fed6:	d1f9      	bne.n	800fecc <_svfiprintf_r+0x54>
 800fed8:	ebba 0b04 	subs.w	fp, sl, r4
 800fedc:	d00b      	beq.n	800fef6 <_svfiprintf_r+0x7e>
 800fede:	465b      	mov	r3, fp
 800fee0:	4622      	mov	r2, r4
 800fee2:	4629      	mov	r1, r5
 800fee4:	4638      	mov	r0, r7
 800fee6:	f7ff ff6b 	bl	800fdc0 <__ssputs_r>
 800feea:	3001      	adds	r0, #1
 800feec:	f000 80a7 	beq.w	801003e <_svfiprintf_r+0x1c6>
 800fef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fef2:	445a      	add	r2, fp
 800fef4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fef6:	f89a 3000 	ldrb.w	r3, [sl]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f000 809f 	beq.w	801003e <_svfiprintf_r+0x1c6>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f04f 32ff 	mov.w	r2, #4294967295
 800ff06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff0a:	f10a 0a01 	add.w	sl, sl, #1
 800ff0e:	9304      	str	r3, [sp, #16]
 800ff10:	9307      	str	r3, [sp, #28]
 800ff12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff16:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff18:	4654      	mov	r4, sl
 800ff1a:	2205      	movs	r2, #5
 800ff1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff20:	484e      	ldr	r0, [pc, #312]	@ (801005c <_svfiprintf_r+0x1e4>)
 800ff22:	f7f0 f985 	bl	8000230 <memchr>
 800ff26:	9a04      	ldr	r2, [sp, #16]
 800ff28:	b9d8      	cbnz	r0, 800ff62 <_svfiprintf_r+0xea>
 800ff2a:	06d0      	lsls	r0, r2, #27
 800ff2c:	bf44      	itt	mi
 800ff2e:	2320      	movmi	r3, #32
 800ff30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff34:	0711      	lsls	r1, r2, #28
 800ff36:	bf44      	itt	mi
 800ff38:	232b      	movmi	r3, #43	@ 0x2b
 800ff3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff44:	d015      	beq.n	800ff72 <_svfiprintf_r+0xfa>
 800ff46:	9a07      	ldr	r2, [sp, #28]
 800ff48:	4654      	mov	r4, sl
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	f04f 0c0a 	mov.w	ip, #10
 800ff50:	4621      	mov	r1, r4
 800ff52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff56:	3b30      	subs	r3, #48	@ 0x30
 800ff58:	2b09      	cmp	r3, #9
 800ff5a:	d94b      	bls.n	800fff4 <_svfiprintf_r+0x17c>
 800ff5c:	b1b0      	cbz	r0, 800ff8c <_svfiprintf_r+0x114>
 800ff5e:	9207      	str	r2, [sp, #28]
 800ff60:	e014      	b.n	800ff8c <_svfiprintf_r+0x114>
 800ff62:	eba0 0308 	sub.w	r3, r0, r8
 800ff66:	fa09 f303 	lsl.w	r3, r9, r3
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	9304      	str	r3, [sp, #16]
 800ff6e:	46a2      	mov	sl, r4
 800ff70:	e7d2      	b.n	800ff18 <_svfiprintf_r+0xa0>
 800ff72:	9b03      	ldr	r3, [sp, #12]
 800ff74:	1d19      	adds	r1, r3, #4
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	9103      	str	r1, [sp, #12]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	bfbb      	ittet	lt
 800ff7e:	425b      	neglt	r3, r3
 800ff80:	f042 0202 	orrlt.w	r2, r2, #2
 800ff84:	9307      	strge	r3, [sp, #28]
 800ff86:	9307      	strlt	r3, [sp, #28]
 800ff88:	bfb8      	it	lt
 800ff8a:	9204      	strlt	r2, [sp, #16]
 800ff8c:	7823      	ldrb	r3, [r4, #0]
 800ff8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff90:	d10a      	bne.n	800ffa8 <_svfiprintf_r+0x130>
 800ff92:	7863      	ldrb	r3, [r4, #1]
 800ff94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff96:	d132      	bne.n	800fffe <_svfiprintf_r+0x186>
 800ff98:	9b03      	ldr	r3, [sp, #12]
 800ff9a:	1d1a      	adds	r2, r3, #4
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	9203      	str	r2, [sp, #12]
 800ffa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffa4:	3402      	adds	r4, #2
 800ffa6:	9305      	str	r3, [sp, #20]
 800ffa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801006c <_svfiprintf_r+0x1f4>
 800ffac:	7821      	ldrb	r1, [r4, #0]
 800ffae:	2203      	movs	r2, #3
 800ffb0:	4650      	mov	r0, sl
 800ffb2:	f7f0 f93d 	bl	8000230 <memchr>
 800ffb6:	b138      	cbz	r0, 800ffc8 <_svfiprintf_r+0x150>
 800ffb8:	9b04      	ldr	r3, [sp, #16]
 800ffba:	eba0 000a 	sub.w	r0, r0, sl
 800ffbe:	2240      	movs	r2, #64	@ 0x40
 800ffc0:	4082      	lsls	r2, r0
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	3401      	adds	r4, #1
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffcc:	4824      	ldr	r0, [pc, #144]	@ (8010060 <_svfiprintf_r+0x1e8>)
 800ffce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffd2:	2206      	movs	r2, #6
 800ffd4:	f7f0 f92c 	bl	8000230 <memchr>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d036      	beq.n	801004a <_svfiprintf_r+0x1d2>
 800ffdc:	4b21      	ldr	r3, [pc, #132]	@ (8010064 <_svfiprintf_r+0x1ec>)
 800ffde:	bb1b      	cbnz	r3, 8010028 <_svfiprintf_r+0x1b0>
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	3307      	adds	r3, #7
 800ffe4:	f023 0307 	bic.w	r3, r3, #7
 800ffe8:	3308      	adds	r3, #8
 800ffea:	9303      	str	r3, [sp, #12]
 800ffec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffee:	4433      	add	r3, r6
 800fff0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fff2:	e76a      	b.n	800feca <_svfiprintf_r+0x52>
 800fff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fff8:	460c      	mov	r4, r1
 800fffa:	2001      	movs	r0, #1
 800fffc:	e7a8      	b.n	800ff50 <_svfiprintf_r+0xd8>
 800fffe:	2300      	movs	r3, #0
 8010000:	3401      	adds	r4, #1
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	4619      	mov	r1, r3
 8010006:	f04f 0c0a 	mov.w	ip, #10
 801000a:	4620      	mov	r0, r4
 801000c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010010:	3a30      	subs	r2, #48	@ 0x30
 8010012:	2a09      	cmp	r2, #9
 8010014:	d903      	bls.n	801001e <_svfiprintf_r+0x1a6>
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0c6      	beq.n	800ffa8 <_svfiprintf_r+0x130>
 801001a:	9105      	str	r1, [sp, #20]
 801001c:	e7c4      	b.n	800ffa8 <_svfiprintf_r+0x130>
 801001e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010022:	4604      	mov	r4, r0
 8010024:	2301      	movs	r3, #1
 8010026:	e7f0      	b.n	801000a <_svfiprintf_r+0x192>
 8010028:	ab03      	add	r3, sp, #12
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	462a      	mov	r2, r5
 801002e:	4b0e      	ldr	r3, [pc, #56]	@ (8010068 <_svfiprintf_r+0x1f0>)
 8010030:	a904      	add	r1, sp, #16
 8010032:	4638      	mov	r0, r7
 8010034:	f3af 8000 	nop.w
 8010038:	1c42      	adds	r2, r0, #1
 801003a:	4606      	mov	r6, r0
 801003c:	d1d6      	bne.n	800ffec <_svfiprintf_r+0x174>
 801003e:	89ab      	ldrh	r3, [r5, #12]
 8010040:	065b      	lsls	r3, r3, #25
 8010042:	f53f af2d 	bmi.w	800fea0 <_svfiprintf_r+0x28>
 8010046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010048:	e72c      	b.n	800fea4 <_svfiprintf_r+0x2c>
 801004a:	ab03      	add	r3, sp, #12
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	462a      	mov	r2, r5
 8010050:	4b05      	ldr	r3, [pc, #20]	@ (8010068 <_svfiprintf_r+0x1f0>)
 8010052:	a904      	add	r1, sp, #16
 8010054:	4638      	mov	r0, r7
 8010056:	f000 f9bb 	bl	80103d0 <_printf_i>
 801005a:	e7ed      	b.n	8010038 <_svfiprintf_r+0x1c0>
 801005c:	08011a8c 	.word	0x08011a8c
 8010060:	08011a96 	.word	0x08011a96
 8010064:	00000000 	.word	0x00000000
 8010068:	0800fdc1 	.word	0x0800fdc1
 801006c:	08011a92 	.word	0x08011a92

08010070 <__sfputc_r>:
 8010070:	6893      	ldr	r3, [r2, #8]
 8010072:	3b01      	subs	r3, #1
 8010074:	2b00      	cmp	r3, #0
 8010076:	b410      	push	{r4}
 8010078:	6093      	str	r3, [r2, #8]
 801007a:	da08      	bge.n	801008e <__sfputc_r+0x1e>
 801007c:	6994      	ldr	r4, [r2, #24]
 801007e:	42a3      	cmp	r3, r4
 8010080:	db01      	blt.n	8010086 <__sfputc_r+0x16>
 8010082:	290a      	cmp	r1, #10
 8010084:	d103      	bne.n	801008e <__sfputc_r+0x1e>
 8010086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801008a:	f7ff bc69 	b.w	800f960 <__swbuf_r>
 801008e:	6813      	ldr	r3, [r2, #0]
 8010090:	1c58      	adds	r0, r3, #1
 8010092:	6010      	str	r0, [r2, #0]
 8010094:	7019      	strb	r1, [r3, #0]
 8010096:	4608      	mov	r0, r1
 8010098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801009c:	4770      	bx	lr

0801009e <__sfputs_r>:
 801009e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	4614      	mov	r4, r2
 80100a6:	18d5      	adds	r5, r2, r3
 80100a8:	42ac      	cmp	r4, r5
 80100aa:	d101      	bne.n	80100b0 <__sfputs_r+0x12>
 80100ac:	2000      	movs	r0, #0
 80100ae:	e007      	b.n	80100c0 <__sfputs_r+0x22>
 80100b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b4:	463a      	mov	r2, r7
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff ffda 	bl	8010070 <__sfputc_r>
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	d1f3      	bne.n	80100a8 <__sfputs_r+0xa>
 80100c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100c4 <_vfiprintf_r>:
 80100c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	460d      	mov	r5, r1
 80100ca:	b09d      	sub	sp, #116	@ 0x74
 80100cc:	4614      	mov	r4, r2
 80100ce:	4698      	mov	r8, r3
 80100d0:	4606      	mov	r6, r0
 80100d2:	b118      	cbz	r0, 80100dc <_vfiprintf_r+0x18>
 80100d4:	6a03      	ldr	r3, [r0, #32]
 80100d6:	b90b      	cbnz	r3, 80100dc <_vfiprintf_r+0x18>
 80100d8:	f7ff fae4 	bl	800f6a4 <__sinit>
 80100dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100de:	07d9      	lsls	r1, r3, #31
 80100e0:	d405      	bmi.n	80100ee <_vfiprintf_r+0x2a>
 80100e2:	89ab      	ldrh	r3, [r5, #12]
 80100e4:	059a      	lsls	r2, r3, #22
 80100e6:	d402      	bmi.n	80100ee <_vfiprintf_r+0x2a>
 80100e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100ea:	f7ff fd60 	bl	800fbae <__retarget_lock_acquire_recursive>
 80100ee:	89ab      	ldrh	r3, [r5, #12]
 80100f0:	071b      	lsls	r3, r3, #28
 80100f2:	d501      	bpl.n	80100f8 <_vfiprintf_r+0x34>
 80100f4:	692b      	ldr	r3, [r5, #16]
 80100f6:	b99b      	cbnz	r3, 8010120 <_vfiprintf_r+0x5c>
 80100f8:	4629      	mov	r1, r5
 80100fa:	4630      	mov	r0, r6
 80100fc:	f7ff fc6e 	bl	800f9dc <__swsetup_r>
 8010100:	b170      	cbz	r0, 8010120 <_vfiprintf_r+0x5c>
 8010102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010104:	07dc      	lsls	r4, r3, #31
 8010106:	d504      	bpl.n	8010112 <_vfiprintf_r+0x4e>
 8010108:	f04f 30ff 	mov.w	r0, #4294967295
 801010c:	b01d      	add	sp, #116	@ 0x74
 801010e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010112:	89ab      	ldrh	r3, [r5, #12]
 8010114:	0598      	lsls	r0, r3, #22
 8010116:	d4f7      	bmi.n	8010108 <_vfiprintf_r+0x44>
 8010118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801011a:	f7ff fd49 	bl	800fbb0 <__retarget_lock_release_recursive>
 801011e:	e7f3      	b.n	8010108 <_vfiprintf_r+0x44>
 8010120:	2300      	movs	r3, #0
 8010122:	9309      	str	r3, [sp, #36]	@ 0x24
 8010124:	2320      	movs	r3, #32
 8010126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801012a:	f8cd 800c 	str.w	r8, [sp, #12]
 801012e:	2330      	movs	r3, #48	@ 0x30
 8010130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80102e0 <_vfiprintf_r+0x21c>
 8010134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010138:	f04f 0901 	mov.w	r9, #1
 801013c:	4623      	mov	r3, r4
 801013e:	469a      	mov	sl, r3
 8010140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010144:	b10a      	cbz	r2, 801014a <_vfiprintf_r+0x86>
 8010146:	2a25      	cmp	r2, #37	@ 0x25
 8010148:	d1f9      	bne.n	801013e <_vfiprintf_r+0x7a>
 801014a:	ebba 0b04 	subs.w	fp, sl, r4
 801014e:	d00b      	beq.n	8010168 <_vfiprintf_r+0xa4>
 8010150:	465b      	mov	r3, fp
 8010152:	4622      	mov	r2, r4
 8010154:	4629      	mov	r1, r5
 8010156:	4630      	mov	r0, r6
 8010158:	f7ff ffa1 	bl	801009e <__sfputs_r>
 801015c:	3001      	adds	r0, #1
 801015e:	f000 80a7 	beq.w	80102b0 <_vfiprintf_r+0x1ec>
 8010162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010164:	445a      	add	r2, fp
 8010166:	9209      	str	r2, [sp, #36]	@ 0x24
 8010168:	f89a 3000 	ldrb.w	r3, [sl]
 801016c:	2b00      	cmp	r3, #0
 801016e:	f000 809f 	beq.w	80102b0 <_vfiprintf_r+0x1ec>
 8010172:	2300      	movs	r3, #0
 8010174:	f04f 32ff 	mov.w	r2, #4294967295
 8010178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017c:	f10a 0a01 	add.w	sl, sl, #1
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	9307      	str	r3, [sp, #28]
 8010184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010188:	931a      	str	r3, [sp, #104]	@ 0x68
 801018a:	4654      	mov	r4, sl
 801018c:	2205      	movs	r2, #5
 801018e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010192:	4853      	ldr	r0, [pc, #332]	@ (80102e0 <_vfiprintf_r+0x21c>)
 8010194:	f7f0 f84c 	bl	8000230 <memchr>
 8010198:	9a04      	ldr	r2, [sp, #16]
 801019a:	b9d8      	cbnz	r0, 80101d4 <_vfiprintf_r+0x110>
 801019c:	06d1      	lsls	r1, r2, #27
 801019e:	bf44      	itt	mi
 80101a0:	2320      	movmi	r3, #32
 80101a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101a6:	0713      	lsls	r3, r2, #28
 80101a8:	bf44      	itt	mi
 80101aa:	232b      	movmi	r3, #43	@ 0x2b
 80101ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101b0:	f89a 3000 	ldrb.w	r3, [sl]
 80101b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80101b6:	d015      	beq.n	80101e4 <_vfiprintf_r+0x120>
 80101b8:	9a07      	ldr	r2, [sp, #28]
 80101ba:	4654      	mov	r4, sl
 80101bc:	2000      	movs	r0, #0
 80101be:	f04f 0c0a 	mov.w	ip, #10
 80101c2:	4621      	mov	r1, r4
 80101c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101c8:	3b30      	subs	r3, #48	@ 0x30
 80101ca:	2b09      	cmp	r3, #9
 80101cc:	d94b      	bls.n	8010266 <_vfiprintf_r+0x1a2>
 80101ce:	b1b0      	cbz	r0, 80101fe <_vfiprintf_r+0x13a>
 80101d0:	9207      	str	r2, [sp, #28]
 80101d2:	e014      	b.n	80101fe <_vfiprintf_r+0x13a>
 80101d4:	eba0 0308 	sub.w	r3, r0, r8
 80101d8:	fa09 f303 	lsl.w	r3, r9, r3
 80101dc:	4313      	orrs	r3, r2
 80101de:	9304      	str	r3, [sp, #16]
 80101e0:	46a2      	mov	sl, r4
 80101e2:	e7d2      	b.n	801018a <_vfiprintf_r+0xc6>
 80101e4:	9b03      	ldr	r3, [sp, #12]
 80101e6:	1d19      	adds	r1, r3, #4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	9103      	str	r1, [sp, #12]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	bfbb      	ittet	lt
 80101f0:	425b      	neglt	r3, r3
 80101f2:	f042 0202 	orrlt.w	r2, r2, #2
 80101f6:	9307      	strge	r3, [sp, #28]
 80101f8:	9307      	strlt	r3, [sp, #28]
 80101fa:	bfb8      	it	lt
 80101fc:	9204      	strlt	r2, [sp, #16]
 80101fe:	7823      	ldrb	r3, [r4, #0]
 8010200:	2b2e      	cmp	r3, #46	@ 0x2e
 8010202:	d10a      	bne.n	801021a <_vfiprintf_r+0x156>
 8010204:	7863      	ldrb	r3, [r4, #1]
 8010206:	2b2a      	cmp	r3, #42	@ 0x2a
 8010208:	d132      	bne.n	8010270 <_vfiprintf_r+0x1ac>
 801020a:	9b03      	ldr	r3, [sp, #12]
 801020c:	1d1a      	adds	r2, r3, #4
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	9203      	str	r2, [sp, #12]
 8010212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010216:	3402      	adds	r4, #2
 8010218:	9305      	str	r3, [sp, #20]
 801021a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80102f0 <_vfiprintf_r+0x22c>
 801021e:	7821      	ldrb	r1, [r4, #0]
 8010220:	2203      	movs	r2, #3
 8010222:	4650      	mov	r0, sl
 8010224:	f7f0 f804 	bl	8000230 <memchr>
 8010228:	b138      	cbz	r0, 801023a <_vfiprintf_r+0x176>
 801022a:	9b04      	ldr	r3, [sp, #16]
 801022c:	eba0 000a 	sub.w	r0, r0, sl
 8010230:	2240      	movs	r2, #64	@ 0x40
 8010232:	4082      	lsls	r2, r0
 8010234:	4313      	orrs	r3, r2
 8010236:	3401      	adds	r4, #1
 8010238:	9304      	str	r3, [sp, #16]
 801023a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023e:	4829      	ldr	r0, [pc, #164]	@ (80102e4 <_vfiprintf_r+0x220>)
 8010240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010244:	2206      	movs	r2, #6
 8010246:	f7ef fff3 	bl	8000230 <memchr>
 801024a:	2800      	cmp	r0, #0
 801024c:	d03f      	beq.n	80102ce <_vfiprintf_r+0x20a>
 801024e:	4b26      	ldr	r3, [pc, #152]	@ (80102e8 <_vfiprintf_r+0x224>)
 8010250:	bb1b      	cbnz	r3, 801029a <_vfiprintf_r+0x1d6>
 8010252:	9b03      	ldr	r3, [sp, #12]
 8010254:	3307      	adds	r3, #7
 8010256:	f023 0307 	bic.w	r3, r3, #7
 801025a:	3308      	adds	r3, #8
 801025c:	9303      	str	r3, [sp, #12]
 801025e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010260:	443b      	add	r3, r7
 8010262:	9309      	str	r3, [sp, #36]	@ 0x24
 8010264:	e76a      	b.n	801013c <_vfiprintf_r+0x78>
 8010266:	fb0c 3202 	mla	r2, ip, r2, r3
 801026a:	460c      	mov	r4, r1
 801026c:	2001      	movs	r0, #1
 801026e:	e7a8      	b.n	80101c2 <_vfiprintf_r+0xfe>
 8010270:	2300      	movs	r3, #0
 8010272:	3401      	adds	r4, #1
 8010274:	9305      	str	r3, [sp, #20]
 8010276:	4619      	mov	r1, r3
 8010278:	f04f 0c0a 	mov.w	ip, #10
 801027c:	4620      	mov	r0, r4
 801027e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010282:	3a30      	subs	r2, #48	@ 0x30
 8010284:	2a09      	cmp	r2, #9
 8010286:	d903      	bls.n	8010290 <_vfiprintf_r+0x1cc>
 8010288:	2b00      	cmp	r3, #0
 801028a:	d0c6      	beq.n	801021a <_vfiprintf_r+0x156>
 801028c:	9105      	str	r1, [sp, #20]
 801028e:	e7c4      	b.n	801021a <_vfiprintf_r+0x156>
 8010290:	fb0c 2101 	mla	r1, ip, r1, r2
 8010294:	4604      	mov	r4, r0
 8010296:	2301      	movs	r3, #1
 8010298:	e7f0      	b.n	801027c <_vfiprintf_r+0x1b8>
 801029a:	ab03      	add	r3, sp, #12
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	462a      	mov	r2, r5
 80102a0:	4b12      	ldr	r3, [pc, #72]	@ (80102ec <_vfiprintf_r+0x228>)
 80102a2:	a904      	add	r1, sp, #16
 80102a4:	4630      	mov	r0, r6
 80102a6:	f3af 8000 	nop.w
 80102aa:	4607      	mov	r7, r0
 80102ac:	1c78      	adds	r0, r7, #1
 80102ae:	d1d6      	bne.n	801025e <_vfiprintf_r+0x19a>
 80102b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80102b2:	07d9      	lsls	r1, r3, #31
 80102b4:	d405      	bmi.n	80102c2 <_vfiprintf_r+0x1fe>
 80102b6:	89ab      	ldrh	r3, [r5, #12]
 80102b8:	059a      	lsls	r2, r3, #22
 80102ba:	d402      	bmi.n	80102c2 <_vfiprintf_r+0x1fe>
 80102bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102be:	f7ff fc77 	bl	800fbb0 <__retarget_lock_release_recursive>
 80102c2:	89ab      	ldrh	r3, [r5, #12]
 80102c4:	065b      	lsls	r3, r3, #25
 80102c6:	f53f af1f 	bmi.w	8010108 <_vfiprintf_r+0x44>
 80102ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102cc:	e71e      	b.n	801010c <_vfiprintf_r+0x48>
 80102ce:	ab03      	add	r3, sp, #12
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	462a      	mov	r2, r5
 80102d4:	4b05      	ldr	r3, [pc, #20]	@ (80102ec <_vfiprintf_r+0x228>)
 80102d6:	a904      	add	r1, sp, #16
 80102d8:	4630      	mov	r0, r6
 80102da:	f000 f879 	bl	80103d0 <_printf_i>
 80102de:	e7e4      	b.n	80102aa <_vfiprintf_r+0x1e6>
 80102e0:	08011a8c 	.word	0x08011a8c
 80102e4:	08011a96 	.word	0x08011a96
 80102e8:	00000000 	.word	0x00000000
 80102ec:	0801009f 	.word	0x0801009f
 80102f0:	08011a92 	.word	0x08011a92

080102f4 <_printf_common>:
 80102f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f8:	4616      	mov	r6, r2
 80102fa:	4698      	mov	r8, r3
 80102fc:	688a      	ldr	r2, [r1, #8]
 80102fe:	690b      	ldr	r3, [r1, #16]
 8010300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010304:	4293      	cmp	r3, r2
 8010306:	bfb8      	it	lt
 8010308:	4613      	movlt	r3, r2
 801030a:	6033      	str	r3, [r6, #0]
 801030c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010310:	4607      	mov	r7, r0
 8010312:	460c      	mov	r4, r1
 8010314:	b10a      	cbz	r2, 801031a <_printf_common+0x26>
 8010316:	3301      	adds	r3, #1
 8010318:	6033      	str	r3, [r6, #0]
 801031a:	6823      	ldr	r3, [r4, #0]
 801031c:	0699      	lsls	r1, r3, #26
 801031e:	bf42      	ittt	mi
 8010320:	6833      	ldrmi	r3, [r6, #0]
 8010322:	3302      	addmi	r3, #2
 8010324:	6033      	strmi	r3, [r6, #0]
 8010326:	6825      	ldr	r5, [r4, #0]
 8010328:	f015 0506 	ands.w	r5, r5, #6
 801032c:	d106      	bne.n	801033c <_printf_common+0x48>
 801032e:	f104 0a19 	add.w	sl, r4, #25
 8010332:	68e3      	ldr	r3, [r4, #12]
 8010334:	6832      	ldr	r2, [r6, #0]
 8010336:	1a9b      	subs	r3, r3, r2
 8010338:	42ab      	cmp	r3, r5
 801033a:	dc26      	bgt.n	801038a <_printf_common+0x96>
 801033c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	3b00      	subs	r3, #0
 8010344:	bf18      	it	ne
 8010346:	2301      	movne	r3, #1
 8010348:	0692      	lsls	r2, r2, #26
 801034a:	d42b      	bmi.n	80103a4 <_printf_common+0xb0>
 801034c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010350:	4641      	mov	r1, r8
 8010352:	4638      	mov	r0, r7
 8010354:	47c8      	blx	r9
 8010356:	3001      	adds	r0, #1
 8010358:	d01e      	beq.n	8010398 <_printf_common+0xa4>
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	6922      	ldr	r2, [r4, #16]
 801035e:	f003 0306 	and.w	r3, r3, #6
 8010362:	2b04      	cmp	r3, #4
 8010364:	bf02      	ittt	eq
 8010366:	68e5      	ldreq	r5, [r4, #12]
 8010368:	6833      	ldreq	r3, [r6, #0]
 801036a:	1aed      	subeq	r5, r5, r3
 801036c:	68a3      	ldr	r3, [r4, #8]
 801036e:	bf0c      	ite	eq
 8010370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010374:	2500      	movne	r5, #0
 8010376:	4293      	cmp	r3, r2
 8010378:	bfc4      	itt	gt
 801037a:	1a9b      	subgt	r3, r3, r2
 801037c:	18ed      	addgt	r5, r5, r3
 801037e:	2600      	movs	r6, #0
 8010380:	341a      	adds	r4, #26
 8010382:	42b5      	cmp	r5, r6
 8010384:	d11a      	bne.n	80103bc <_printf_common+0xc8>
 8010386:	2000      	movs	r0, #0
 8010388:	e008      	b.n	801039c <_printf_common+0xa8>
 801038a:	2301      	movs	r3, #1
 801038c:	4652      	mov	r2, sl
 801038e:	4641      	mov	r1, r8
 8010390:	4638      	mov	r0, r7
 8010392:	47c8      	blx	r9
 8010394:	3001      	adds	r0, #1
 8010396:	d103      	bne.n	80103a0 <_printf_common+0xac>
 8010398:	f04f 30ff 	mov.w	r0, #4294967295
 801039c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103a0:	3501      	adds	r5, #1
 80103a2:	e7c6      	b.n	8010332 <_printf_common+0x3e>
 80103a4:	18e1      	adds	r1, r4, r3
 80103a6:	1c5a      	adds	r2, r3, #1
 80103a8:	2030      	movs	r0, #48	@ 0x30
 80103aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80103ae:	4422      	add	r2, r4
 80103b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80103b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80103b8:	3302      	adds	r3, #2
 80103ba:	e7c7      	b.n	801034c <_printf_common+0x58>
 80103bc:	2301      	movs	r3, #1
 80103be:	4622      	mov	r2, r4
 80103c0:	4641      	mov	r1, r8
 80103c2:	4638      	mov	r0, r7
 80103c4:	47c8      	blx	r9
 80103c6:	3001      	adds	r0, #1
 80103c8:	d0e6      	beq.n	8010398 <_printf_common+0xa4>
 80103ca:	3601      	adds	r6, #1
 80103cc:	e7d9      	b.n	8010382 <_printf_common+0x8e>
	...

080103d0 <_printf_i>:
 80103d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103d4:	7e0f      	ldrb	r7, [r1, #24]
 80103d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80103d8:	2f78      	cmp	r7, #120	@ 0x78
 80103da:	4691      	mov	r9, r2
 80103dc:	4680      	mov	r8, r0
 80103de:	460c      	mov	r4, r1
 80103e0:	469a      	mov	sl, r3
 80103e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80103e6:	d807      	bhi.n	80103f8 <_printf_i+0x28>
 80103e8:	2f62      	cmp	r7, #98	@ 0x62
 80103ea:	d80a      	bhi.n	8010402 <_printf_i+0x32>
 80103ec:	2f00      	cmp	r7, #0
 80103ee:	f000 80d2 	beq.w	8010596 <_printf_i+0x1c6>
 80103f2:	2f58      	cmp	r7, #88	@ 0x58
 80103f4:	f000 80b9 	beq.w	801056a <_printf_i+0x19a>
 80103f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010400:	e03a      	b.n	8010478 <_printf_i+0xa8>
 8010402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010406:	2b15      	cmp	r3, #21
 8010408:	d8f6      	bhi.n	80103f8 <_printf_i+0x28>
 801040a:	a101      	add	r1, pc, #4	@ (adr r1, 8010410 <_printf_i+0x40>)
 801040c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010410:	08010469 	.word	0x08010469
 8010414:	0801047d 	.word	0x0801047d
 8010418:	080103f9 	.word	0x080103f9
 801041c:	080103f9 	.word	0x080103f9
 8010420:	080103f9 	.word	0x080103f9
 8010424:	080103f9 	.word	0x080103f9
 8010428:	0801047d 	.word	0x0801047d
 801042c:	080103f9 	.word	0x080103f9
 8010430:	080103f9 	.word	0x080103f9
 8010434:	080103f9 	.word	0x080103f9
 8010438:	080103f9 	.word	0x080103f9
 801043c:	0801057d 	.word	0x0801057d
 8010440:	080104a7 	.word	0x080104a7
 8010444:	08010537 	.word	0x08010537
 8010448:	080103f9 	.word	0x080103f9
 801044c:	080103f9 	.word	0x080103f9
 8010450:	0801059f 	.word	0x0801059f
 8010454:	080103f9 	.word	0x080103f9
 8010458:	080104a7 	.word	0x080104a7
 801045c:	080103f9 	.word	0x080103f9
 8010460:	080103f9 	.word	0x080103f9
 8010464:	0801053f 	.word	0x0801053f
 8010468:	6833      	ldr	r3, [r6, #0]
 801046a:	1d1a      	adds	r2, r3, #4
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	6032      	str	r2, [r6, #0]
 8010470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010478:	2301      	movs	r3, #1
 801047a:	e09d      	b.n	80105b8 <_printf_i+0x1e8>
 801047c:	6833      	ldr	r3, [r6, #0]
 801047e:	6820      	ldr	r0, [r4, #0]
 8010480:	1d19      	adds	r1, r3, #4
 8010482:	6031      	str	r1, [r6, #0]
 8010484:	0606      	lsls	r6, r0, #24
 8010486:	d501      	bpl.n	801048c <_printf_i+0xbc>
 8010488:	681d      	ldr	r5, [r3, #0]
 801048a:	e003      	b.n	8010494 <_printf_i+0xc4>
 801048c:	0645      	lsls	r5, r0, #25
 801048e:	d5fb      	bpl.n	8010488 <_printf_i+0xb8>
 8010490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010494:	2d00      	cmp	r5, #0
 8010496:	da03      	bge.n	80104a0 <_printf_i+0xd0>
 8010498:	232d      	movs	r3, #45	@ 0x2d
 801049a:	426d      	negs	r5, r5
 801049c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104a0:	4859      	ldr	r0, [pc, #356]	@ (8010608 <_printf_i+0x238>)
 80104a2:	230a      	movs	r3, #10
 80104a4:	e011      	b.n	80104ca <_printf_i+0xfa>
 80104a6:	6821      	ldr	r1, [r4, #0]
 80104a8:	6833      	ldr	r3, [r6, #0]
 80104aa:	0608      	lsls	r0, r1, #24
 80104ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80104b0:	d402      	bmi.n	80104b8 <_printf_i+0xe8>
 80104b2:	0649      	lsls	r1, r1, #25
 80104b4:	bf48      	it	mi
 80104b6:	b2ad      	uxthmi	r5, r5
 80104b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80104ba:	4853      	ldr	r0, [pc, #332]	@ (8010608 <_printf_i+0x238>)
 80104bc:	6033      	str	r3, [r6, #0]
 80104be:	bf14      	ite	ne
 80104c0:	230a      	movne	r3, #10
 80104c2:	2308      	moveq	r3, #8
 80104c4:	2100      	movs	r1, #0
 80104c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80104ca:	6866      	ldr	r6, [r4, #4]
 80104cc:	60a6      	str	r6, [r4, #8]
 80104ce:	2e00      	cmp	r6, #0
 80104d0:	bfa2      	ittt	ge
 80104d2:	6821      	ldrge	r1, [r4, #0]
 80104d4:	f021 0104 	bicge.w	r1, r1, #4
 80104d8:	6021      	strge	r1, [r4, #0]
 80104da:	b90d      	cbnz	r5, 80104e0 <_printf_i+0x110>
 80104dc:	2e00      	cmp	r6, #0
 80104de:	d04b      	beq.n	8010578 <_printf_i+0x1a8>
 80104e0:	4616      	mov	r6, r2
 80104e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80104e6:	fb03 5711 	mls	r7, r3, r1, r5
 80104ea:	5dc7      	ldrb	r7, [r0, r7]
 80104ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104f0:	462f      	mov	r7, r5
 80104f2:	42bb      	cmp	r3, r7
 80104f4:	460d      	mov	r5, r1
 80104f6:	d9f4      	bls.n	80104e2 <_printf_i+0x112>
 80104f8:	2b08      	cmp	r3, #8
 80104fa:	d10b      	bne.n	8010514 <_printf_i+0x144>
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	07df      	lsls	r7, r3, #31
 8010500:	d508      	bpl.n	8010514 <_printf_i+0x144>
 8010502:	6923      	ldr	r3, [r4, #16]
 8010504:	6861      	ldr	r1, [r4, #4]
 8010506:	4299      	cmp	r1, r3
 8010508:	bfde      	ittt	le
 801050a:	2330      	movle	r3, #48	@ 0x30
 801050c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010514:	1b92      	subs	r2, r2, r6
 8010516:	6122      	str	r2, [r4, #16]
 8010518:	f8cd a000 	str.w	sl, [sp]
 801051c:	464b      	mov	r3, r9
 801051e:	aa03      	add	r2, sp, #12
 8010520:	4621      	mov	r1, r4
 8010522:	4640      	mov	r0, r8
 8010524:	f7ff fee6 	bl	80102f4 <_printf_common>
 8010528:	3001      	adds	r0, #1
 801052a:	d14a      	bne.n	80105c2 <_printf_i+0x1f2>
 801052c:	f04f 30ff 	mov.w	r0, #4294967295
 8010530:	b004      	add	sp, #16
 8010532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	f043 0320 	orr.w	r3, r3, #32
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	4833      	ldr	r0, [pc, #204]	@ (801060c <_printf_i+0x23c>)
 8010540:	2778      	movs	r7, #120	@ 0x78
 8010542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	6831      	ldr	r1, [r6, #0]
 801054a:	061f      	lsls	r7, r3, #24
 801054c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010550:	d402      	bmi.n	8010558 <_printf_i+0x188>
 8010552:	065f      	lsls	r7, r3, #25
 8010554:	bf48      	it	mi
 8010556:	b2ad      	uxthmi	r5, r5
 8010558:	6031      	str	r1, [r6, #0]
 801055a:	07d9      	lsls	r1, r3, #31
 801055c:	bf44      	itt	mi
 801055e:	f043 0320 	orrmi.w	r3, r3, #32
 8010562:	6023      	strmi	r3, [r4, #0]
 8010564:	b11d      	cbz	r5, 801056e <_printf_i+0x19e>
 8010566:	2310      	movs	r3, #16
 8010568:	e7ac      	b.n	80104c4 <_printf_i+0xf4>
 801056a:	4827      	ldr	r0, [pc, #156]	@ (8010608 <_printf_i+0x238>)
 801056c:	e7e9      	b.n	8010542 <_printf_i+0x172>
 801056e:	6823      	ldr	r3, [r4, #0]
 8010570:	f023 0320 	bic.w	r3, r3, #32
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	e7f6      	b.n	8010566 <_printf_i+0x196>
 8010578:	4616      	mov	r6, r2
 801057a:	e7bd      	b.n	80104f8 <_printf_i+0x128>
 801057c:	6833      	ldr	r3, [r6, #0]
 801057e:	6825      	ldr	r5, [r4, #0]
 8010580:	6961      	ldr	r1, [r4, #20]
 8010582:	1d18      	adds	r0, r3, #4
 8010584:	6030      	str	r0, [r6, #0]
 8010586:	062e      	lsls	r6, r5, #24
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	d501      	bpl.n	8010590 <_printf_i+0x1c0>
 801058c:	6019      	str	r1, [r3, #0]
 801058e:	e002      	b.n	8010596 <_printf_i+0x1c6>
 8010590:	0668      	lsls	r0, r5, #25
 8010592:	d5fb      	bpl.n	801058c <_printf_i+0x1bc>
 8010594:	8019      	strh	r1, [r3, #0]
 8010596:	2300      	movs	r3, #0
 8010598:	6123      	str	r3, [r4, #16]
 801059a:	4616      	mov	r6, r2
 801059c:	e7bc      	b.n	8010518 <_printf_i+0x148>
 801059e:	6833      	ldr	r3, [r6, #0]
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	6032      	str	r2, [r6, #0]
 80105a4:	681e      	ldr	r6, [r3, #0]
 80105a6:	6862      	ldr	r2, [r4, #4]
 80105a8:	2100      	movs	r1, #0
 80105aa:	4630      	mov	r0, r6
 80105ac:	f7ef fe40 	bl	8000230 <memchr>
 80105b0:	b108      	cbz	r0, 80105b6 <_printf_i+0x1e6>
 80105b2:	1b80      	subs	r0, r0, r6
 80105b4:	6060      	str	r0, [r4, #4]
 80105b6:	6863      	ldr	r3, [r4, #4]
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	2300      	movs	r3, #0
 80105bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105c0:	e7aa      	b.n	8010518 <_printf_i+0x148>
 80105c2:	6923      	ldr	r3, [r4, #16]
 80105c4:	4632      	mov	r2, r6
 80105c6:	4649      	mov	r1, r9
 80105c8:	4640      	mov	r0, r8
 80105ca:	47d0      	blx	sl
 80105cc:	3001      	adds	r0, #1
 80105ce:	d0ad      	beq.n	801052c <_printf_i+0x15c>
 80105d0:	6823      	ldr	r3, [r4, #0]
 80105d2:	079b      	lsls	r3, r3, #30
 80105d4:	d413      	bmi.n	80105fe <_printf_i+0x22e>
 80105d6:	68e0      	ldr	r0, [r4, #12]
 80105d8:	9b03      	ldr	r3, [sp, #12]
 80105da:	4298      	cmp	r0, r3
 80105dc:	bfb8      	it	lt
 80105de:	4618      	movlt	r0, r3
 80105e0:	e7a6      	b.n	8010530 <_printf_i+0x160>
 80105e2:	2301      	movs	r3, #1
 80105e4:	4632      	mov	r2, r6
 80105e6:	4649      	mov	r1, r9
 80105e8:	4640      	mov	r0, r8
 80105ea:	47d0      	blx	sl
 80105ec:	3001      	adds	r0, #1
 80105ee:	d09d      	beq.n	801052c <_printf_i+0x15c>
 80105f0:	3501      	adds	r5, #1
 80105f2:	68e3      	ldr	r3, [r4, #12]
 80105f4:	9903      	ldr	r1, [sp, #12]
 80105f6:	1a5b      	subs	r3, r3, r1
 80105f8:	42ab      	cmp	r3, r5
 80105fa:	dcf2      	bgt.n	80105e2 <_printf_i+0x212>
 80105fc:	e7eb      	b.n	80105d6 <_printf_i+0x206>
 80105fe:	2500      	movs	r5, #0
 8010600:	f104 0619 	add.w	r6, r4, #25
 8010604:	e7f5      	b.n	80105f2 <_printf_i+0x222>
 8010606:	bf00      	nop
 8010608:	08011a9d 	.word	0x08011a9d
 801060c:	08011aae 	.word	0x08011aae

08010610 <__sflush_r>:
 8010610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010618:	0716      	lsls	r6, r2, #28
 801061a:	4605      	mov	r5, r0
 801061c:	460c      	mov	r4, r1
 801061e:	d454      	bmi.n	80106ca <__sflush_r+0xba>
 8010620:	684b      	ldr	r3, [r1, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	dc02      	bgt.n	801062c <__sflush_r+0x1c>
 8010626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010628:	2b00      	cmp	r3, #0
 801062a:	dd48      	ble.n	80106be <__sflush_r+0xae>
 801062c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801062e:	2e00      	cmp	r6, #0
 8010630:	d045      	beq.n	80106be <__sflush_r+0xae>
 8010632:	2300      	movs	r3, #0
 8010634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010638:	682f      	ldr	r7, [r5, #0]
 801063a:	6a21      	ldr	r1, [r4, #32]
 801063c:	602b      	str	r3, [r5, #0]
 801063e:	d030      	beq.n	80106a2 <__sflush_r+0x92>
 8010640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010642:	89a3      	ldrh	r3, [r4, #12]
 8010644:	0759      	lsls	r1, r3, #29
 8010646:	d505      	bpl.n	8010654 <__sflush_r+0x44>
 8010648:	6863      	ldr	r3, [r4, #4]
 801064a:	1ad2      	subs	r2, r2, r3
 801064c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801064e:	b10b      	cbz	r3, 8010654 <__sflush_r+0x44>
 8010650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010652:	1ad2      	subs	r2, r2, r3
 8010654:	2300      	movs	r3, #0
 8010656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010658:	6a21      	ldr	r1, [r4, #32]
 801065a:	4628      	mov	r0, r5
 801065c:	47b0      	blx	r6
 801065e:	1c43      	adds	r3, r0, #1
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	d106      	bne.n	8010672 <__sflush_r+0x62>
 8010664:	6829      	ldr	r1, [r5, #0]
 8010666:	291d      	cmp	r1, #29
 8010668:	d82b      	bhi.n	80106c2 <__sflush_r+0xb2>
 801066a:	4a2a      	ldr	r2, [pc, #168]	@ (8010714 <__sflush_r+0x104>)
 801066c:	410a      	asrs	r2, r1
 801066e:	07d6      	lsls	r6, r2, #31
 8010670:	d427      	bmi.n	80106c2 <__sflush_r+0xb2>
 8010672:	2200      	movs	r2, #0
 8010674:	6062      	str	r2, [r4, #4]
 8010676:	04d9      	lsls	r1, r3, #19
 8010678:	6922      	ldr	r2, [r4, #16]
 801067a:	6022      	str	r2, [r4, #0]
 801067c:	d504      	bpl.n	8010688 <__sflush_r+0x78>
 801067e:	1c42      	adds	r2, r0, #1
 8010680:	d101      	bne.n	8010686 <__sflush_r+0x76>
 8010682:	682b      	ldr	r3, [r5, #0]
 8010684:	b903      	cbnz	r3, 8010688 <__sflush_r+0x78>
 8010686:	6560      	str	r0, [r4, #84]	@ 0x54
 8010688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801068a:	602f      	str	r7, [r5, #0]
 801068c:	b1b9      	cbz	r1, 80106be <__sflush_r+0xae>
 801068e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010692:	4299      	cmp	r1, r3
 8010694:	d002      	beq.n	801069c <__sflush_r+0x8c>
 8010696:	4628      	mov	r0, r5
 8010698:	f7ff fa9a 	bl	800fbd0 <_free_r>
 801069c:	2300      	movs	r3, #0
 801069e:	6363      	str	r3, [r4, #52]	@ 0x34
 80106a0:	e00d      	b.n	80106be <__sflush_r+0xae>
 80106a2:	2301      	movs	r3, #1
 80106a4:	4628      	mov	r0, r5
 80106a6:	47b0      	blx	r6
 80106a8:	4602      	mov	r2, r0
 80106aa:	1c50      	adds	r0, r2, #1
 80106ac:	d1c9      	bne.n	8010642 <__sflush_r+0x32>
 80106ae:	682b      	ldr	r3, [r5, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d0c6      	beq.n	8010642 <__sflush_r+0x32>
 80106b4:	2b1d      	cmp	r3, #29
 80106b6:	d001      	beq.n	80106bc <__sflush_r+0xac>
 80106b8:	2b16      	cmp	r3, #22
 80106ba:	d11e      	bne.n	80106fa <__sflush_r+0xea>
 80106bc:	602f      	str	r7, [r5, #0]
 80106be:	2000      	movs	r0, #0
 80106c0:	e022      	b.n	8010708 <__sflush_r+0xf8>
 80106c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106c6:	b21b      	sxth	r3, r3
 80106c8:	e01b      	b.n	8010702 <__sflush_r+0xf2>
 80106ca:	690f      	ldr	r7, [r1, #16]
 80106cc:	2f00      	cmp	r7, #0
 80106ce:	d0f6      	beq.n	80106be <__sflush_r+0xae>
 80106d0:	0793      	lsls	r3, r2, #30
 80106d2:	680e      	ldr	r6, [r1, #0]
 80106d4:	bf08      	it	eq
 80106d6:	694b      	ldreq	r3, [r1, #20]
 80106d8:	600f      	str	r7, [r1, #0]
 80106da:	bf18      	it	ne
 80106dc:	2300      	movne	r3, #0
 80106de:	eba6 0807 	sub.w	r8, r6, r7
 80106e2:	608b      	str	r3, [r1, #8]
 80106e4:	f1b8 0f00 	cmp.w	r8, #0
 80106e8:	dde9      	ble.n	80106be <__sflush_r+0xae>
 80106ea:	6a21      	ldr	r1, [r4, #32]
 80106ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106ee:	4643      	mov	r3, r8
 80106f0:	463a      	mov	r2, r7
 80106f2:	4628      	mov	r0, r5
 80106f4:	47b0      	blx	r6
 80106f6:	2800      	cmp	r0, #0
 80106f8:	dc08      	bgt.n	801070c <__sflush_r+0xfc>
 80106fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010702:	81a3      	strh	r3, [r4, #12]
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	4407      	add	r7, r0
 801070e:	eba8 0800 	sub.w	r8, r8, r0
 8010712:	e7e7      	b.n	80106e4 <__sflush_r+0xd4>
 8010714:	dfbffffe 	.word	0xdfbffffe

08010718 <_fflush_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	690b      	ldr	r3, [r1, #16]
 801071c:	4605      	mov	r5, r0
 801071e:	460c      	mov	r4, r1
 8010720:	b913      	cbnz	r3, 8010728 <_fflush_r+0x10>
 8010722:	2500      	movs	r5, #0
 8010724:	4628      	mov	r0, r5
 8010726:	bd38      	pop	{r3, r4, r5, pc}
 8010728:	b118      	cbz	r0, 8010732 <_fflush_r+0x1a>
 801072a:	6a03      	ldr	r3, [r0, #32]
 801072c:	b90b      	cbnz	r3, 8010732 <_fflush_r+0x1a>
 801072e:	f7fe ffb9 	bl	800f6a4 <__sinit>
 8010732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d0f3      	beq.n	8010722 <_fflush_r+0xa>
 801073a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801073c:	07d0      	lsls	r0, r2, #31
 801073e:	d404      	bmi.n	801074a <_fflush_r+0x32>
 8010740:	0599      	lsls	r1, r3, #22
 8010742:	d402      	bmi.n	801074a <_fflush_r+0x32>
 8010744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010746:	f7ff fa32 	bl	800fbae <__retarget_lock_acquire_recursive>
 801074a:	4628      	mov	r0, r5
 801074c:	4621      	mov	r1, r4
 801074e:	f7ff ff5f 	bl	8010610 <__sflush_r>
 8010752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010754:	07da      	lsls	r2, r3, #31
 8010756:	4605      	mov	r5, r0
 8010758:	d4e4      	bmi.n	8010724 <_fflush_r+0xc>
 801075a:	89a3      	ldrh	r3, [r4, #12]
 801075c:	059b      	lsls	r3, r3, #22
 801075e:	d4e1      	bmi.n	8010724 <_fflush_r+0xc>
 8010760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010762:	f7ff fa25 	bl	800fbb0 <__retarget_lock_release_recursive>
 8010766:	e7dd      	b.n	8010724 <_fflush_r+0xc>

08010768 <__swhatbuf_r>:
 8010768:	b570      	push	{r4, r5, r6, lr}
 801076a:	460c      	mov	r4, r1
 801076c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010770:	2900      	cmp	r1, #0
 8010772:	b096      	sub	sp, #88	@ 0x58
 8010774:	4615      	mov	r5, r2
 8010776:	461e      	mov	r6, r3
 8010778:	da0d      	bge.n	8010796 <__swhatbuf_r+0x2e>
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010780:	f04f 0100 	mov.w	r1, #0
 8010784:	bf14      	ite	ne
 8010786:	2340      	movne	r3, #64	@ 0x40
 8010788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801078c:	2000      	movs	r0, #0
 801078e:	6031      	str	r1, [r6, #0]
 8010790:	602b      	str	r3, [r5, #0]
 8010792:	b016      	add	sp, #88	@ 0x58
 8010794:	bd70      	pop	{r4, r5, r6, pc}
 8010796:	466a      	mov	r2, sp
 8010798:	f000 f87c 	bl	8010894 <_fstat_r>
 801079c:	2800      	cmp	r0, #0
 801079e:	dbec      	blt.n	801077a <__swhatbuf_r+0x12>
 80107a0:	9901      	ldr	r1, [sp, #4]
 80107a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107aa:	4259      	negs	r1, r3
 80107ac:	4159      	adcs	r1, r3
 80107ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107b2:	e7eb      	b.n	801078c <__swhatbuf_r+0x24>

080107b4 <__smakebuf_r>:
 80107b4:	898b      	ldrh	r3, [r1, #12]
 80107b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b8:	079d      	lsls	r5, r3, #30
 80107ba:	4606      	mov	r6, r0
 80107bc:	460c      	mov	r4, r1
 80107be:	d507      	bpl.n	80107d0 <__smakebuf_r+0x1c>
 80107c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	6123      	str	r3, [r4, #16]
 80107c8:	2301      	movs	r3, #1
 80107ca:	6163      	str	r3, [r4, #20]
 80107cc:	b003      	add	sp, #12
 80107ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d0:	ab01      	add	r3, sp, #4
 80107d2:	466a      	mov	r2, sp
 80107d4:	f7ff ffc8 	bl	8010768 <__swhatbuf_r>
 80107d8:	9f00      	ldr	r7, [sp, #0]
 80107da:	4605      	mov	r5, r0
 80107dc:	4639      	mov	r1, r7
 80107de:	4630      	mov	r0, r6
 80107e0:	f7ff fa62 	bl	800fca8 <_malloc_r>
 80107e4:	b948      	cbnz	r0, 80107fa <__smakebuf_r+0x46>
 80107e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ea:	059a      	lsls	r2, r3, #22
 80107ec:	d4ee      	bmi.n	80107cc <__smakebuf_r+0x18>
 80107ee:	f023 0303 	bic.w	r3, r3, #3
 80107f2:	f043 0302 	orr.w	r3, r3, #2
 80107f6:	81a3      	strh	r3, [r4, #12]
 80107f8:	e7e2      	b.n	80107c0 <__smakebuf_r+0xc>
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	6020      	str	r0, [r4, #0]
 80107fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010802:	81a3      	strh	r3, [r4, #12]
 8010804:	9b01      	ldr	r3, [sp, #4]
 8010806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801080a:	b15b      	cbz	r3, 8010824 <__smakebuf_r+0x70>
 801080c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010810:	4630      	mov	r0, r6
 8010812:	f000 f851 	bl	80108b8 <_isatty_r>
 8010816:	b128      	cbz	r0, 8010824 <__smakebuf_r+0x70>
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	f023 0303 	bic.w	r3, r3, #3
 801081e:	f043 0301 	orr.w	r3, r3, #1
 8010822:	81a3      	strh	r3, [r4, #12]
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	431d      	orrs	r5, r3
 8010828:	81a5      	strh	r5, [r4, #12]
 801082a:	e7cf      	b.n	80107cc <__smakebuf_r+0x18>

0801082c <_putc_r>:
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	460d      	mov	r5, r1
 8010830:	4614      	mov	r4, r2
 8010832:	4606      	mov	r6, r0
 8010834:	b118      	cbz	r0, 801083e <_putc_r+0x12>
 8010836:	6a03      	ldr	r3, [r0, #32]
 8010838:	b90b      	cbnz	r3, 801083e <_putc_r+0x12>
 801083a:	f7fe ff33 	bl	800f6a4 <__sinit>
 801083e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010840:	07d8      	lsls	r0, r3, #31
 8010842:	d405      	bmi.n	8010850 <_putc_r+0x24>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	0599      	lsls	r1, r3, #22
 8010848:	d402      	bmi.n	8010850 <_putc_r+0x24>
 801084a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801084c:	f7ff f9af 	bl	800fbae <__retarget_lock_acquire_recursive>
 8010850:	68a3      	ldr	r3, [r4, #8]
 8010852:	3b01      	subs	r3, #1
 8010854:	2b00      	cmp	r3, #0
 8010856:	60a3      	str	r3, [r4, #8]
 8010858:	da05      	bge.n	8010866 <_putc_r+0x3a>
 801085a:	69a2      	ldr	r2, [r4, #24]
 801085c:	4293      	cmp	r3, r2
 801085e:	db12      	blt.n	8010886 <_putc_r+0x5a>
 8010860:	b2eb      	uxtb	r3, r5
 8010862:	2b0a      	cmp	r3, #10
 8010864:	d00f      	beq.n	8010886 <_putc_r+0x5a>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	1c5a      	adds	r2, r3, #1
 801086a:	6022      	str	r2, [r4, #0]
 801086c:	701d      	strb	r5, [r3, #0]
 801086e:	b2ed      	uxtb	r5, r5
 8010870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010872:	07da      	lsls	r2, r3, #31
 8010874:	d405      	bmi.n	8010882 <_putc_r+0x56>
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	059b      	lsls	r3, r3, #22
 801087a:	d402      	bmi.n	8010882 <_putc_r+0x56>
 801087c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801087e:	f7ff f997 	bl	800fbb0 <__retarget_lock_release_recursive>
 8010882:	4628      	mov	r0, r5
 8010884:	bd70      	pop	{r4, r5, r6, pc}
 8010886:	4629      	mov	r1, r5
 8010888:	4622      	mov	r2, r4
 801088a:	4630      	mov	r0, r6
 801088c:	f7ff f868 	bl	800f960 <__swbuf_r>
 8010890:	4605      	mov	r5, r0
 8010892:	e7ed      	b.n	8010870 <_putc_r+0x44>

08010894 <_fstat_r>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	4d07      	ldr	r5, [pc, #28]	@ (80108b4 <_fstat_r+0x20>)
 8010898:	2300      	movs	r3, #0
 801089a:	4604      	mov	r4, r0
 801089c:	4608      	mov	r0, r1
 801089e:	4611      	mov	r1, r2
 80108a0:	602b      	str	r3, [r5, #0]
 80108a2:	f7f3 ffcb 	bl	800483c <_fstat>
 80108a6:	1c43      	adds	r3, r0, #1
 80108a8:	d102      	bne.n	80108b0 <_fstat_r+0x1c>
 80108aa:	682b      	ldr	r3, [r5, #0]
 80108ac:	b103      	cbz	r3, 80108b0 <_fstat_r+0x1c>
 80108ae:	6023      	str	r3, [r4, #0]
 80108b0:	bd38      	pop	{r3, r4, r5, pc}
 80108b2:	bf00      	nop
 80108b4:	200018ac 	.word	0x200018ac

080108b8 <_isatty_r>:
 80108b8:	b538      	push	{r3, r4, r5, lr}
 80108ba:	4d06      	ldr	r5, [pc, #24]	@ (80108d4 <_isatty_r+0x1c>)
 80108bc:	2300      	movs	r3, #0
 80108be:	4604      	mov	r4, r0
 80108c0:	4608      	mov	r0, r1
 80108c2:	602b      	str	r3, [r5, #0]
 80108c4:	f7f3 ffc0 	bl	8004848 <_isatty>
 80108c8:	1c43      	adds	r3, r0, #1
 80108ca:	d102      	bne.n	80108d2 <_isatty_r+0x1a>
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	b103      	cbz	r3, 80108d2 <_isatty_r+0x1a>
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	bd38      	pop	{r3, r4, r5, pc}
 80108d4:	200018ac 	.word	0x200018ac

080108d8 <_sbrk_r>:
 80108d8:	b538      	push	{r3, r4, r5, lr}
 80108da:	4d06      	ldr	r5, [pc, #24]	@ (80108f4 <_sbrk_r+0x1c>)
 80108dc:	2300      	movs	r3, #0
 80108de:	4604      	mov	r4, r0
 80108e0:	4608      	mov	r0, r1
 80108e2:	602b      	str	r3, [r5, #0]
 80108e4:	f7f3 ffb4 	bl	8004850 <_sbrk>
 80108e8:	1c43      	adds	r3, r0, #1
 80108ea:	d102      	bne.n	80108f2 <_sbrk_r+0x1a>
 80108ec:	682b      	ldr	r3, [r5, #0]
 80108ee:	b103      	cbz	r3, 80108f2 <_sbrk_r+0x1a>
 80108f0:	6023      	str	r3, [r4, #0]
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
 80108f4:	200018ac 	.word	0x200018ac

080108f8 <_realloc_r>:
 80108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fc:	4680      	mov	r8, r0
 80108fe:	4615      	mov	r5, r2
 8010900:	460c      	mov	r4, r1
 8010902:	b921      	cbnz	r1, 801090e <_realloc_r+0x16>
 8010904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010908:	4611      	mov	r1, r2
 801090a:	f7ff b9cd 	b.w	800fca8 <_malloc_r>
 801090e:	b92a      	cbnz	r2, 801091c <_realloc_r+0x24>
 8010910:	f7ff f95e 	bl	800fbd0 <_free_r>
 8010914:	2400      	movs	r4, #0
 8010916:	4620      	mov	r0, r4
 8010918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091c:	f000 f81a 	bl	8010954 <_malloc_usable_size_r>
 8010920:	4285      	cmp	r5, r0
 8010922:	4606      	mov	r6, r0
 8010924:	d802      	bhi.n	801092c <_realloc_r+0x34>
 8010926:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801092a:	d8f4      	bhi.n	8010916 <_realloc_r+0x1e>
 801092c:	4629      	mov	r1, r5
 801092e:	4640      	mov	r0, r8
 8010930:	f7ff f9ba 	bl	800fca8 <_malloc_r>
 8010934:	4607      	mov	r7, r0
 8010936:	2800      	cmp	r0, #0
 8010938:	d0ec      	beq.n	8010914 <_realloc_r+0x1c>
 801093a:	42b5      	cmp	r5, r6
 801093c:	462a      	mov	r2, r5
 801093e:	4621      	mov	r1, r4
 8010940:	bf28      	it	cs
 8010942:	4632      	movcs	r2, r6
 8010944:	f7ff f935 	bl	800fbb2 <memcpy>
 8010948:	4621      	mov	r1, r4
 801094a:	4640      	mov	r0, r8
 801094c:	f7ff f940 	bl	800fbd0 <_free_r>
 8010950:	463c      	mov	r4, r7
 8010952:	e7e0      	b.n	8010916 <_realloc_r+0x1e>

08010954 <_malloc_usable_size_r>:
 8010954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010958:	1f18      	subs	r0, r3, #4
 801095a:	2b00      	cmp	r3, #0
 801095c:	bfbc      	itt	lt
 801095e:	580b      	ldrlt	r3, [r1, r0]
 8010960:	18c0      	addlt	r0, r0, r3
 8010962:	4770      	bx	lr

08010964 <abort>:
 8010964:	b508      	push	{r3, lr}
 8010966:	2006      	movs	r0, #6
 8010968:	f000 f82c 	bl	80109c4 <raise>
 801096c:	2001      	movs	r0, #1
 801096e:	f7f3 ff3f 	bl	80047f0 <_exit>

08010972 <_raise_r>:
 8010972:	291f      	cmp	r1, #31
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4605      	mov	r5, r0
 8010978:	460c      	mov	r4, r1
 801097a:	d904      	bls.n	8010986 <_raise_r+0x14>
 801097c:	2316      	movs	r3, #22
 801097e:	6003      	str	r3, [r0, #0]
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	bd38      	pop	{r3, r4, r5, pc}
 8010986:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010988:	b112      	cbz	r2, 8010990 <_raise_r+0x1e>
 801098a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801098e:	b94b      	cbnz	r3, 80109a4 <_raise_r+0x32>
 8010990:	4628      	mov	r0, r5
 8010992:	f000 f831 	bl	80109f8 <_getpid_r>
 8010996:	4622      	mov	r2, r4
 8010998:	4601      	mov	r1, r0
 801099a:	4628      	mov	r0, r5
 801099c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109a0:	f000 b818 	b.w	80109d4 <_kill_r>
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d00a      	beq.n	80109be <_raise_r+0x4c>
 80109a8:	1c59      	adds	r1, r3, #1
 80109aa:	d103      	bne.n	80109b4 <_raise_r+0x42>
 80109ac:	2316      	movs	r3, #22
 80109ae:	6003      	str	r3, [r0, #0]
 80109b0:	2001      	movs	r0, #1
 80109b2:	e7e7      	b.n	8010984 <_raise_r+0x12>
 80109b4:	2100      	movs	r1, #0
 80109b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109ba:	4620      	mov	r0, r4
 80109bc:	4798      	blx	r3
 80109be:	2000      	movs	r0, #0
 80109c0:	e7e0      	b.n	8010984 <_raise_r+0x12>
	...

080109c4 <raise>:
 80109c4:	4b02      	ldr	r3, [pc, #8]	@ (80109d0 <raise+0xc>)
 80109c6:	4601      	mov	r1, r0
 80109c8:	6818      	ldr	r0, [r3, #0]
 80109ca:	f7ff bfd2 	b.w	8010972 <_raise_r>
 80109ce:	bf00      	nop
 80109d0:	20000114 	.word	0x20000114

080109d4 <_kill_r>:
 80109d4:	b538      	push	{r3, r4, r5, lr}
 80109d6:	4d07      	ldr	r5, [pc, #28]	@ (80109f4 <_kill_r+0x20>)
 80109d8:	2300      	movs	r3, #0
 80109da:	4604      	mov	r4, r0
 80109dc:	4608      	mov	r0, r1
 80109de:	4611      	mov	r1, r2
 80109e0:	602b      	str	r3, [r5, #0]
 80109e2:	f7f3 fefd 	bl	80047e0 <_kill>
 80109e6:	1c43      	adds	r3, r0, #1
 80109e8:	d102      	bne.n	80109f0 <_kill_r+0x1c>
 80109ea:	682b      	ldr	r3, [r5, #0]
 80109ec:	b103      	cbz	r3, 80109f0 <_kill_r+0x1c>
 80109ee:	6023      	str	r3, [r4, #0]
 80109f0:	bd38      	pop	{r3, r4, r5, pc}
 80109f2:	bf00      	nop
 80109f4:	200018ac 	.word	0x200018ac

080109f8 <_getpid_r>:
 80109f8:	f7f3 bef0 	b.w	80047dc <_getpid>

080109fc <_init>:
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fe:	bf00      	nop
 8010a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a02:	bc08      	pop	{r3}
 8010a04:	469e      	mov	lr, r3
 8010a06:	4770      	bx	lr

08010a08 <_fini>:
 8010a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a0a:	bf00      	nop
 8010a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a0e:	bc08      	pop	{r3}
 8010a10:	469e      	mov	lr, r3
 8010a12:	4770      	bx	lr
