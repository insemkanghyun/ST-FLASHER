
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e30c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001060  0800e4bc  0800e4bc  0000f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800f51c  0800f51c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  0800f534  0800f534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5f4  0800f5f4  00011164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5f4  0800f5f4  000105f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f5f8  0800f5f8  000105f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800f5fc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011164  2**0
                  CONTENTS
 10 .bss          000020bc  20000168  20000168  00011168  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  20002224  20002224  00011168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003aa4f  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000081ab  00000000  00000000  0004bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001c800  00000000  00000000  00053d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002118  00000000  00000000  00070590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001fd2  00000000  00000000  000726a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003113e  00000000  00000000  0007467a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040dc0  00000000  00000000  000a57b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9942  00000000  00000000  000e6578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dfeba  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006aa8  00000000  00000000  001dff00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  001e69a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000168 	.word	0x20000168
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e4a4 	.word	0x0800e4a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	0800e4a4 	.word	0x0800e4a4

080001f0 <setjmp>:
 80001f0:	46ec      	mov	ip, sp
 80001f2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001fa:	f04f 0000 	mov.w	r0, #0
 80001fe:	4770      	bx	lr

08000200 <longjmp>:
 8000200:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000204:	46e5      	mov	sp, ip
 8000206:	ec90 8b10 	vldmia	r0, {d8-d15}
 800020a:	0008      	movs	r0, r1
 800020c:	bf08      	it	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f001 b8f6 	b.w	80014c4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <selfrel_offset31>:
 80005ac:	6803      	ldr	r3, [r0, #0]
 80005ae:	005a      	lsls	r2, r3, #1
 80005b0:	bf4c      	ite	mi
 80005b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80005b6:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 80005ba:	4418      	add	r0, r3
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <search_EIT_table>:
 80005c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005c4:	b349      	cbz	r1, 800061a <search_EIT_table+0x5a>
 80005c6:	1e4f      	subs	r7, r1, #1
 80005c8:	4604      	mov	r4, r0
 80005ca:	4615      	mov	r5, r2
 80005cc:	463e      	mov	r6, r7
 80005ce:	f04f 0900 	mov.w	r9, #0
 80005d2:	eb09 0106 	add.w	r1, r9, r6
 80005d6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80005da:	1049      	asrs	r1, r1, #1
 80005dc:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 80005e0:	4640      	mov	r0, r8
 80005e2:	f7ff ffe3 	bl	80005ac <selfrel_offset31>
 80005e6:	428f      	cmp	r7, r1
 80005e8:	4603      	mov	r3, r0
 80005ea:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 80005ee:	d00f      	beq.n	8000610 <search_EIT_table+0x50>
 80005f0:	3008      	adds	r0, #8
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	4420      	add	r0, r4
 80005f6:	d807      	bhi.n	8000608 <search_EIT_table+0x48>
 80005f8:	f7ff ffd8 	bl	80005ac <selfrel_offset31>
 80005fc:	3801      	subs	r0, #1
 80005fe:	42a8      	cmp	r0, r5
 8000600:	d208      	bcs.n	8000614 <search_EIT_table+0x54>
 8000602:	f101 0901 	add.w	r9, r1, #1
 8000606:	e7e4      	b.n	80005d2 <search_EIT_table+0x12>
 8000608:	4589      	cmp	r9, r1
 800060a:	d006      	beq.n	800061a <search_EIT_table+0x5a>
 800060c:	1e4e      	subs	r6, r1, #1
 800060e:	e7e0      	b.n	80005d2 <search_EIT_table+0x12>
 8000610:	42ab      	cmp	r3, r5
 8000612:	d8f9      	bhi.n	8000608 <search_EIT_table+0x48>
 8000614:	4640      	mov	r0, r8
 8000616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800061a:	f04f 0800 	mov.w	r8, #0
 800061e:	4640      	mov	r0, r8
 8000620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000624 <__gnu_unwind_get_pr_addr>:
 8000624:	2801      	cmp	r0, #1
 8000626:	d007      	beq.n	8000638 <__gnu_unwind_get_pr_addr+0x14>
 8000628:	2802      	cmp	r0, #2
 800062a:	d007      	beq.n	800063c <__gnu_unwind_get_pr_addr+0x18>
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <__gnu_unwind_get_pr_addr+0x1c>)
 800062e:	2800      	cmp	r0, #0
 8000630:	bf0c      	ite	eq
 8000632:	4618      	moveq	r0, r3
 8000634:	2000      	movne	r0, #0
 8000636:	4770      	bx	lr
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <__gnu_unwind_get_pr_addr+0x20>)
 800063a:	4770      	bx	lr
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <__gnu_unwind_get_pr_addr+0x24>)
 800063e:	4770      	bx	lr
 8000640:	08000ced 	.word	0x08000ced
 8000644:	08000cf1 	.word	0x08000cf1
 8000648:	08000cf5 	.word	0x08000cf5

0800064c <get_eit_entry>:
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <get_eit_entry+0x88>)
 8000650:	b083      	sub	sp, #12
 8000652:	4604      	mov	r4, r0
 8000654:	1e8d      	subs	r5, r1, #2
 8000656:	b31b      	cbz	r3, 80006a0 <get_eit_entry+0x54>
 8000658:	a901      	add	r1, sp, #4
 800065a:	4628      	mov	r0, r5
 800065c:	f3af 8000 	nop.w
 8000660:	b388      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 8000662:	9901      	ldr	r1, [sp, #4]
 8000664:	462a      	mov	r2, r5
 8000666:	f7ff ffab 	bl	80005c0 <search_EIT_table>
 800066a:	4601      	mov	r1, r0
 800066c:	b358      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 800066e:	f7ff ff9d 	bl	80005ac <selfrel_offset31>
 8000672:	684b      	ldr	r3, [r1, #4]
 8000674:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000676:	2b01      	cmp	r3, #1
 8000678:	d028      	beq.n	80006cc <get_eit_entry+0x80>
 800067a:	2b00      	cmp	r3, #0
 800067c:	f101 0004 	add.w	r0, r1, #4
 8000680:	db1f      	blt.n	80006c2 <get_eit_entry+0x76>
 8000682:	f7ff ff93 	bl	80005ac <selfrel_offset31>
 8000686:	2300      	movs	r3, #0
 8000688:	6523      	str	r3, [r4, #80]	@ 0x50
 800068a:	6803      	ldr	r3, [r0, #0]
 800068c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0d      	blt.n	80006ae <get_eit_entry+0x62>
 8000692:	f7ff ff8b 	bl	80005ac <selfrel_offset31>
 8000696:	4603      	mov	r3, r0
 8000698:	2000      	movs	r0, #0
 800069a:	6123      	str	r3, [r4, #16]
 800069c:	b003      	add	sp, #12
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <get_eit_entry+0x8c>)
 80006a2:	490e      	ldr	r1, [pc, #56]	@ (80006dc <get_eit_entry+0x90>)
 80006a4:	1ac9      	subs	r1, r1, r3
 80006a6:	10c9      	asrs	r1, r1, #3
 80006a8:	4618      	mov	r0, r3
 80006aa:	9101      	str	r1, [sp, #4]
 80006ac:	e7da      	b.n	8000664 <get_eit_entry+0x18>
 80006ae:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006b2:	f7ff ffb7 	bl	8000624 <__gnu_unwind_get_pr_addr>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b128      	cbz	r0, 80006c6 <get_eit_entry+0x7a>
 80006ba:	2000      	movs	r0, #0
 80006bc:	6123      	str	r3, [r4, #16]
 80006be:	b003      	add	sp, #12
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	2301      	movs	r3, #1
 80006c4:	e7e0      	b.n	8000688 <get_eit_entry+0x3c>
 80006c6:	2300      	movs	r3, #0
 80006c8:	2009      	movs	r0, #9
 80006ca:	e7e6      	b.n	800069a <get_eit_entry+0x4e>
 80006cc:	2300      	movs	r3, #0
 80006ce:	2005      	movs	r0, #5
 80006d0:	e7e3      	b.n	800069a <get_eit_entry+0x4e>
 80006d2:	bf00      	nop
 80006d4:	00000000 	.word	0x00000000
 80006d8:	0800f534 	.word	0x0800f534
 80006dc:	0800f5f4 	.word	0x0800f5f4

080006e0 <restore_non_core_regs>:
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	07da      	lsls	r2, r3, #31
 80006e4:	b510      	push	{r4, lr}
 80006e6:	4604      	mov	r4, r0
 80006e8:	d406      	bmi.n	80006f8 <restore_non_core_regs+0x18>
 80006ea:	079b      	lsls	r3, r3, #30
 80006ec:	f100 0048 	add.w	r0, r0, #72	@ 0x48
 80006f0:	d509      	bpl.n	8000706 <restore_non_core_regs+0x26>
 80006f2:	f000 fc69 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d509      	bpl.n	8000710 <restore_non_core_regs+0x30>
 80006fc:	071a      	lsls	r2, r3, #28
 80006fe:	d50e      	bpl.n	800071e <restore_non_core_regs+0x3e>
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d513      	bpl.n	800072c <restore_non_core_regs+0x4c>
 8000704:	bd10      	pop	{r4, pc}
 8000706:	f000 fc57 	bl	8000fb8 <__gnu_Unwind_Restore_VFP>
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	0759      	lsls	r1, r3, #29
 800070e:	d4f5      	bmi.n	80006fc <restore_non_core_regs+0x1c>
 8000710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000714:	f000 fc60 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	071a      	lsls	r2, r3, #28
 800071c:	d4f0      	bmi.n	8000700 <restore_non_core_regs+0x20>
 800071e:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8000722:	f000 fc61 	bl	8000fe8 <__gnu_Unwind_Restore_WMMXD>
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	06db      	lsls	r3, r3, #27
 800072a:	d4eb      	bmi.n	8000704 <restore_non_core_regs+0x24>
 800072c:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 8000730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000734:	f000 bc9c 	b.w	8001070 <__gnu_Unwind_Restore_WMMXC>

08000738 <__gnu_unwind_24bit.constprop.0>:
 8000738:	2009      	movs	r0, #9
 800073a:	4770      	bx	lr

0800073c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800073c:	4603      	mov	r3, r0
 800073e:	6800      	ldr	r0, [r0, #0]
 8000740:	b100      	cbz	r0, 8000744 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000742:	4418      	add	r0, r3
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <_Unwind_DebugHook>:
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <unwind_phase2>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4604      	mov	r4, r0
 8000750:	460e      	mov	r6, r1
 8000752:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000754:	4620      	mov	r0, r4
 8000756:	f7ff ff79 	bl	800064c <get_eit_entry>
 800075a:	4605      	mov	r5, r0
 800075c:	b988      	cbnz	r0, 8000782 <unwind_phase2+0x36>
 800075e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8000760:	6162      	str	r2, [r4, #20]
 8000762:	6923      	ldr	r3, [r4, #16]
 8000764:	4632      	mov	r2, r6
 8000766:	4621      	mov	r1, r4
 8000768:	2001      	movs	r0, #1
 800076a:	4798      	blx	r3
 800076c:	2808      	cmp	r0, #8
 800076e:	d0f0      	beq.n	8000752 <unwind_phase2+0x6>
 8000770:	2807      	cmp	r0, #7
 8000772:	d106      	bne.n	8000782 <unwind_phase2+0x36>
 8000774:	4628      	mov	r0, r5
 8000776:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000778:	f7ff ffe6 	bl	8000748 <_Unwind_DebugHook>
 800077c:	1d30      	adds	r0, r6, #4
 800077e:	f000 fc0f 	bl	8000fa0 <__restore_core_regs>
 8000782:	f00d fe43 	bl	800e40c <abort>
 8000786:	bf00      	nop

08000788 <unwind_phase2_forced>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	1d0d      	adds	r5, r1, #4
 800078e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000792:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000796:	4607      	mov	r7, r0
 8000798:	4614      	mov	r4, r2
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80007a0:	f10d 0c0c 	add.w	ip, sp, #12
 80007a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007b8:	ae02      	add	r6, sp, #8
 80007ba:	f04f 0e00 	mov.w	lr, #0
 80007be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80007c2:	f8c6 e000 	str.w	lr, [r6]
 80007c6:	e020      	b.n	800080a <unwind_phase2_forced+0x82>
 80007c8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007d0:	4631      	mov	r1, r6
 80007d2:	a87a      	add	r0, sp, #488	@ 0x1e8
 80007d4:	f00c ff41 	bl	800d65a <memcpy>
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	aa7a      	add	r2, sp, #488	@ 0x1e8
 80007dc:	4639      	mov	r1, r7
 80007de:	4650      	mov	r0, sl
 80007e0:	4798      	blx	r3
 80007e2:	9b88      	ldr	r3, [sp, #544]	@ 0x220
 80007e4:	6473      	str	r3, [r6, #68]	@ 0x44
 80007e6:	4621      	mov	r1, r4
 80007e8:	e9cd 6900 	strd	r6, r9, [sp]
 80007ec:	4605      	mov	r5, r0
 80007ee:	463b      	mov	r3, r7
 80007f0:	463a      	mov	r2, r7
 80007f2:	2001      	movs	r0, #1
 80007f4:	47c0      	blx	r8
 80007f6:	4604      	mov	r4, r0
 80007f8:	bb18      	cbnz	r0, 8000842 <unwind_phase2_forced+0xba>
 80007fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80007fe:	a97a      	add	r1, sp, #488	@ 0x1e8
 8000800:	4630      	mov	r0, r6
 8000802:	f00c ff2a 	bl	800d65a <memcpy>
 8000806:	2d08      	cmp	r5, #8
 8000808:	d119      	bne.n	800083e <unwind_phase2_forced+0xb6>
 800080a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800080c:	4638      	mov	r0, r7
 800080e:	f7ff ff1d 	bl	800064c <get_eit_entry>
 8000812:	3409      	adds	r4, #9
 8000814:	fa5f fa84 	uxtb.w	sl, r4
 8000818:	4605      	mov	r5, r0
 800081a:	2800      	cmp	r0, #0
 800081c:	d0d4      	beq.n	80007c8 <unwind_phase2_forced+0x40>
 800081e:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000820:	6473      	str	r3, [r6, #68]	@ 0x44
 8000822:	463a      	mov	r2, r7
 8000824:	e9cd 6900 	strd	r6, r9, [sp]
 8000828:	463b      	mov	r3, r7
 800082a:	f04a 0110 	orr.w	r1, sl, #16
 800082e:	2001      	movs	r0, #1
 8000830:	47c0      	blx	r8
 8000832:	b930      	cbnz	r0, 8000842 <unwind_phase2_forced+0xba>
 8000834:	4628      	mov	r0, r5
 8000836:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	2d07      	cmp	r5, #7
 8000840:	d005      	beq.n	800084e <unwind_phase2_forced+0xc6>
 8000842:	2509      	movs	r5, #9
 8000844:	4628      	mov	r0, r5
 8000846:	f50d 7d72 	add.w	sp, sp, #968	@ 0x3c8
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	4620      	mov	r0, r4
 8000850:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8000852:	f7ff ff79 	bl	8000748 <_Unwind_DebugHook>
 8000856:	a803      	add	r0, sp, #12
 8000858:	f000 fba2 	bl	8000fa0 <__restore_core_regs>

0800085c <_Unwind_GetCFA>:
 800085c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800085e:	4770      	bx	lr

08000860 <__gnu_Unwind_RaiseException>:
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000864:	640b      	str	r3, [r1, #64]	@ 0x40
 8000866:	f101 0c04 	add.w	ip, r1, #4
 800086a:	460e      	mov	r6, r1
 800086c:	4605      	mov	r5, r0
 800086e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000872:	b0f9      	sub	sp, #484	@ 0x1e4
 8000874:	ac01      	add	r4, sp, #4
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000884:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000888:	f04f 37ff 	mov.w	r7, #4294967295
 800088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000890:	9700      	str	r7, [sp, #0]
 8000892:	e006      	b.n	80008a2 <__gnu_Unwind_RaiseException+0x42>
 8000894:	692b      	ldr	r3, [r5, #16]
 8000896:	466a      	mov	r2, sp
 8000898:	4629      	mov	r1, r5
 800089a:	4798      	blx	r3
 800089c:	2808      	cmp	r0, #8
 800089e:	4604      	mov	r4, r0
 80008a0:	d108      	bne.n	80008b4 <__gnu_Unwind_RaiseException+0x54>
 80008a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80008a4:	4628      	mov	r0, r5
 80008a6:	f7ff fed1 	bl	800064c <get_eit_entry>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d0f2      	beq.n	8000894 <__gnu_Unwind_RaiseException+0x34>
 80008ae:	2009      	movs	r0, #9
 80008b0:	b079      	add	sp, #484	@ 0x1e4
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	4668      	mov	r0, sp
 80008b6:	f7ff ff13 	bl	80006e0 <restore_non_core_regs>
 80008ba:	2c06      	cmp	r4, #6
 80008bc:	d1f7      	bne.n	80008ae <__gnu_Unwind_RaiseException+0x4e>
 80008be:	4631      	mov	r1, r6
 80008c0:	4628      	mov	r0, r5
 80008c2:	f7ff ff43 	bl	800074c <unwind_phase2>
 80008c6:	bf00      	nop

080008c8 <__gnu_Unwind_ForcedUnwind>:
 80008c8:	60c1      	str	r1, [r0, #12]
 80008ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80008cc:	6182      	str	r2, [r0, #24]
 80008ce:	6419      	str	r1, [r3, #64]	@ 0x40
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	e758      	b.n	8000788 <unwind_phase2_forced>
 80008d6:	bf00      	nop

080008d8 <__gnu_Unwind_Resume>:
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	68c6      	ldr	r6, [r0, #12]
 80008dc:	6943      	ldr	r3, [r0, #20]
 80008de:	640b      	str	r3, [r1, #64]	@ 0x40
 80008e0:	b9ae      	cbnz	r6, 800090e <__gnu_Unwind_Resume+0x36>
 80008e2:	6903      	ldr	r3, [r0, #16]
 80008e4:	460a      	mov	r2, r1
 80008e6:	4604      	mov	r4, r0
 80008e8:	460d      	mov	r5, r1
 80008ea:	4601      	mov	r1, r0
 80008ec:	2002      	movs	r0, #2
 80008ee:	4798      	blx	r3
 80008f0:	2807      	cmp	r0, #7
 80008f2:	d005      	beq.n	8000900 <__gnu_Unwind_Resume+0x28>
 80008f4:	2808      	cmp	r0, #8
 80008f6:	d10f      	bne.n	8000918 <__gnu_Unwind_Resume+0x40>
 80008f8:	4629      	mov	r1, r5
 80008fa:	4620      	mov	r0, r4
 80008fc:	f7ff ff26 	bl	800074c <unwind_phase2>
 8000900:	4630      	mov	r0, r6
 8000902:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8000904:	f7ff ff20 	bl	8000748 <_Unwind_DebugHook>
 8000908:	1d28      	adds	r0, r5, #4
 800090a:	f000 fb49 	bl	8000fa0 <__restore_core_regs>
 800090e:	2201      	movs	r2, #1
 8000910:	f7ff ff3a 	bl	8000788 <unwind_phase2_forced>
 8000914:	f00d fd7a 	bl	800e40c <abort>
 8000918:	f00d fd78 	bl	800e40c <abort>

0800091c <__gnu_Unwind_Resume_or_Rethrow>:
 800091c:	68c2      	ldr	r2, [r0, #12]
 800091e:	b11a      	cbz	r2, 8000928 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000920:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000922:	640a      	str	r2, [r1, #64]	@ 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	e72f      	b.n	8000788 <unwind_phase2_forced>
 8000928:	e79a      	b.n	8000860 <__gnu_Unwind_RaiseException>
 800092a:	bf00      	nop

0800092c <_Unwind_Complete>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <_Unwind_DeleteException>:
 8000930:	6883      	ldr	r3, [r0, #8]
 8000932:	4601      	mov	r1, r0
 8000934:	b10b      	cbz	r3, 800093a <_Unwind_DeleteException+0xa>
 8000936:	2001      	movs	r0, #1
 8000938:	4718      	bx	r3
 800093a:	4770      	bx	lr

0800093c <_Unwind_VRS_Get>:
 800093c:	2901      	cmp	r1, #1
 800093e:	d010      	beq.n	8000962 <_Unwind_VRS_Get+0x26>
 8000940:	d809      	bhi.n	8000956 <_Unwind_VRS_Get+0x1a>
 8000942:	b983      	cbnz	r3, 8000966 <_Unwind_VRS_Get+0x2a>
 8000944:	2a0f      	cmp	r2, #15
 8000946:	d80e      	bhi.n	8000966 <_Unwind_VRS_Get+0x2a>
 8000948:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800094c:	4618      	mov	r0, r3
 800094e:	6853      	ldr	r3, [r2, #4]
 8000950:	9a00      	ldr	r2, [sp, #0]
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4770      	bx	lr
 8000956:	3903      	subs	r1, #3
 8000958:	2901      	cmp	r1, #1
 800095a:	bf8c      	ite	hi
 800095c:	2002      	movhi	r0, #2
 800095e:	2001      	movls	r0, #1
 8000960:	4770      	bx	lr
 8000962:	4608      	mov	r0, r1
 8000964:	4770      	bx	lr
 8000966:	2002      	movs	r0, #2
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <_Unwind_GetGR>:
 800096c:	b500      	push	{lr}
 800096e:	b085      	sub	sp, #20
 8000970:	460a      	mov	r2, r1
 8000972:	2300      	movs	r3, #0
 8000974:	a903      	add	r1, sp, #12
 8000976:	9100      	str	r1, [sp, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f7ff ffdf 	bl	800093c <_Unwind_VRS_Get>
 800097e:	9803      	ldr	r0, [sp, #12]
 8000980:	b005      	add	sp, #20
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	bf00      	nop

08000988 <_Unwind_VRS_Set>:
 8000988:	2901      	cmp	r1, #1
 800098a:	d010      	beq.n	80009ae <_Unwind_VRS_Set+0x26>
 800098c:	d809      	bhi.n	80009a2 <_Unwind_VRS_Set+0x1a>
 800098e:	b983      	cbnz	r3, 80009b2 <_Unwind_VRS_Set+0x2a>
 8000990:	2a0f      	cmp	r2, #15
 8000992:	d80e      	bhi.n	80009b2 <_Unwind_VRS_Set+0x2a>
 8000994:	9900      	ldr	r1, [sp, #0]
 8000996:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800099a:	6809      	ldr	r1, [r1, #0]
 800099c:	6051      	str	r1, [r2, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	4770      	bx	lr
 80009a2:	3903      	subs	r1, #3
 80009a4:	2901      	cmp	r1, #1
 80009a6:	bf8c      	ite	hi
 80009a8:	2002      	movhi	r0, #2
 80009aa:	2001      	movls	r0, #1
 80009ac:	4770      	bx	lr
 80009ae:	4608      	mov	r0, r1
 80009b0:	4770      	bx	lr
 80009b2:	2002      	movs	r0, #2
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <_Unwind_SetGR>:
 80009b8:	b510      	push	{r4, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	2300      	movs	r3, #0
 80009be:	ac03      	add	r4, sp, #12
 80009c0:	9203      	str	r2, [sp, #12]
 80009c2:	9400      	str	r4, [sp, #0]
 80009c4:	460a      	mov	r2, r1
 80009c6:	4619      	mov	r1, r3
 80009c8:	f7ff ffde 	bl	8000988 <_Unwind_VRS_Set>
 80009cc:	b004      	add	sp, #16
 80009ce:	bd10      	pop	{r4, pc}

080009d0 <__gnu_Unwind_Backtrace>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	f102 0c04 	add.w	ip, r2, #4
 80009da:	4605      	mov	r5, r0
 80009dc:	460c      	mov	r4, r1
 80009de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009e2:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80009e6:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 80009ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009fe:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a02:	f04f 36ff 	mov.w	r6, #4294967295
 8000a06:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000a0a:	9616      	str	r6, [sp, #88]	@ 0x58
 8000a0c:	e010      	b.n	8000a30 <__gnu_Unwind_Backtrace+0x60>
 8000a0e:	f7ff ffd3 	bl	80009b8 <_Unwind_SetGR>
 8000a12:	4621      	mov	r1, r4
 8000a14:	a816      	add	r0, sp, #88	@ 0x58
 8000a16:	47a8      	blx	r5
 8000a18:	4603      	mov	r3, r0
 8000a1a:	aa16      	add	r2, sp, #88	@ 0x58
 8000a1c:	4669      	mov	r1, sp
 8000a1e:	2008      	movs	r0, #8
 8000a20:	b983      	cbnz	r3, 8000a44 <__gnu_Unwind_Backtrace+0x74>
 8000a22:	9b04      	ldr	r3, [sp, #16]
 8000a24:	4798      	blx	r3
 8000a26:	2805      	cmp	r0, #5
 8000a28:	4606      	mov	r6, r0
 8000a2a:	d00c      	beq.n	8000a46 <__gnu_Unwind_Backtrace+0x76>
 8000a2c:	2809      	cmp	r0, #9
 8000a2e:	d009      	beq.n	8000a44 <__gnu_Unwind_Backtrace+0x74>
 8000a30:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000a32:	4668      	mov	r0, sp
 8000a34:	f7ff fe0a 	bl	800064c <get_eit_entry>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	466a      	mov	r2, sp
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	a816      	add	r0, sp, #88	@ 0x58
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0e4      	beq.n	8000a0e <__gnu_Unwind_Backtrace+0x3e>
 8000a44:	2609      	movs	r6, #9
 8000a46:	a816      	add	r0, sp, #88	@ 0x58
 8000a48:	f7ff fe4a 	bl	80006e0 <restore_non_core_regs>
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f50d 7d0e 	add.w	sp, sp, #568	@ 0x238
 8000a52:	bd70      	pop	{r4, r5, r6, pc}

08000a54 <__gnu_unwind_pr_common>:
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4693      	mov	fp, r2
 8000a5a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000a5c:	b089      	sub	sp, #36	@ 0x24
 8000a5e:	460d      	mov	r5, r1
 8000a60:	f852 1b04 	ldr.w	r1, [r2], #4
 8000a64:	9206      	str	r2, [sp, #24]
 8000a66:	f000 0c03 	and.w	ip, r0, #3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d079      	beq.n	8000b62 <__gnu_unwind_pr_common+0x10e>
 8000a6e:	0c0c      	lsrs	r4, r1, #16
 8000a70:	f88d 401d 	strb.w	r4, [sp, #29]
 8000a74:	0409      	lsls	r1, r1, #16
 8000a76:	b2e4      	uxtb	r4, r4
 8000a78:	9105      	str	r1, [sp, #20]
 8000a7a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8000a7e:	2102      	movs	r1, #2
 8000a80:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 8000a82:	f88d 101c 	strb.w	r1, [sp, #28]
 8000a86:	f1bc 0f02 	cmp.w	ip, #2
 8000a8a:	bf08      	it	eq
 8000a8c:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000a8e:	f017 0701 	ands.w	r7, r7, #1
 8000a92:	d00c      	beq.n	8000aae <__gnu_unwind_pr_common+0x5a>
 8000a94:	a905      	add	r1, sp, #20
 8000a96:	4658      	mov	r0, fp
 8000a98:	f000 fb84 	bl	80011a4 <__gnu_unwind_execute>
 8000a9c:	b918      	cbnz	r0, 8000aa6 <__gnu_unwind_pr_common+0x52>
 8000a9e:	2008      	movs	r0, #8
 8000aa0:	b009      	add	sp, #36	@ 0x24
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	b009      	add	sp, #36	@ 0x24
 8000aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aae:	6816      	ldr	r6, [r2, #0]
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d0ef      	beq.n	8000a94 <__gnu_unwind_pr_common+0x40>
 8000ab4:	f000 0108 	and.w	r1, r0, #8
 8000ab8:	9101      	str	r1, [sp, #4]
 8000aba:	46b2      	mov	sl, r6
 8000abc:	9702      	str	r7, [sp, #8]
 8000abe:	4664      	mov	r4, ip
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	f1b9 0f02 	cmp.w	r9, #2
 8000ac6:	d048      	beq.n	8000b5a <__gnu_unwind_pr_common+0x106>
 8000ac8:	f8b2 a000 	ldrh.w	sl, [r2]
 8000acc:	8856      	ldrh	r6, [r2, #2]
 8000ace:	f102 0804 	add.w	r8, r2, #4
 8000ad2:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000ad4:	f026 0301 	bic.w	r3, r6, #1
 8000ad8:	210f      	movs	r1, #15
 8000ada:	4658      	mov	r0, fp
 8000adc:	189f      	adds	r7, r3, r2
 8000ade:	f7ff ff45 	bl	800096c <_Unwind_GetGR>
 8000ae2:	4287      	cmp	r7, r0
 8000ae4:	d837      	bhi.n	8000b56 <__gnu_unwind_pr_common+0x102>
 8000ae6:	f02a 0201 	bic.w	r2, sl, #1
 8000aea:	443a      	add	r2, r7
 8000aec:	4282      	cmp	r2, r0
 8000aee:	bf94      	ite	ls
 8000af0:	2200      	movls	r2, #0
 8000af2:	2201      	movhi	r2, #1
 8000af4:	0073      	lsls	r3, r6, #1
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	f00a 0a01 	and.w	sl, sl, #1
 8000afe:	ea43 030a 	orr.w	r3, r3, sl
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d047      	beq.n	8000b96 <__gnu_unwind_pr_common+0x142>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d031      	beq.n	8000b6e <__gnu_unwind_pr_common+0x11a>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1cb      	bne.n	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000b0e:	b114      	cbz	r4, 8000b16 <__gnu_unwind_pr_common+0xc2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 80c9 	bne.w	8000ca8 <__gnu_unwind_pr_common+0x254>
 8000b16:	f108 0204 	add.w	r2, r8, #4
 8000b1a:	f8d2 a000 	ldr.w	sl, [r2]
 8000b1e:	f1ba 0f00 	cmp.w	sl, #0
 8000b22:	d1ce      	bne.n	8000ac2 <__gnu_unwind_pr_common+0x6e>
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4658      	mov	r0, fp
 8000b28:	9f02      	ldr	r7, [sp, #8]
 8000b2a:	f000 fb3b 	bl	80011a4 <__gnu_unwind_execute>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d1b9      	bne.n	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d0b3      	beq.n	8000a9e <__gnu_unwind_pr_common+0x4a>
 8000b36:	210f      	movs	r1, #15
 8000b38:	4658      	mov	r0, fp
 8000b3a:	f7ff ff17 	bl	800096c <_Unwind_GetGR>
 8000b3e:	210e      	movs	r1, #14
 8000b40:	4602      	mov	r2, r0
 8000b42:	4658      	mov	r0, fp
 8000b44:	f7ff ff38 	bl	80009b8 <_Unwind_SetGR>
 8000b48:	4a67      	ldr	r2, [pc, #412]	@ (8000ce8 <__gnu_unwind_pr_common+0x294>)
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	4658      	mov	r0, fp
 8000b4e:	f7ff ff33 	bl	80009b8 <_Unwind_SetGR>
 8000b52:	2007      	movs	r0, #7
 8000b54:	e7a8      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000b56:	2200      	movs	r2, #0
 8000b58:	e7cc      	b.n	8000af4 <__gnu_unwind_pr_common+0xa0>
 8000b5a:	6856      	ldr	r6, [r2, #4]
 8000b5c:	f102 0808 	add.w	r8, r2, #8
 8000b60:	e7b7      	b.n	8000ad2 <__gnu_unwind_pr_common+0x7e>
 8000b62:	0209      	lsls	r1, r1, #8
 8000b64:	9105      	str	r1, [sp, #20]
 8000b66:	f88d 301d 	strb.w	r3, [sp, #29]
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	e788      	b.n	8000a80 <__gnu_unwind_pr_common+0x2c>
 8000b6e:	f8d8 6000 	ldr.w	r6, [r8]
 8000b72:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d144      	bne.n	8000c04 <__gnu_unwind_pr_common+0x1b0>
 8000b7a:	b122      	cbz	r2, 8000b86 <__gnu_unwind_pr_common+0x132>
 8000b7c:	9a01      	ldr	r2, [sp, #4]
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d05a      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1e4>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d058      	beq.n	8000c38 <__gnu_unwind_pr_common+0x1e4>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	da01      	bge.n	8000b8e <__gnu_unwind_pr_common+0x13a>
 8000b8a:	f108 0804 	add.w	r8, r8, #4
 8000b8e:	3301      	adds	r3, #1
 8000b90:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8000b94:	e7c1      	b.n	8000b1a <__gnu_unwind_pr_common+0xc6>
 8000b96:	b9ec      	cbnz	r4, 8000bd4 <__gnu_unwind_pr_common+0x180>
 8000b98:	b1ca      	cbz	r2, 8000bce <__gnu_unwind_pr_common+0x17a>
 8000b9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000b9e:	f8d8 2000 	ldr.w	r2, [r8]
 8000ba2:	1c99      	adds	r1, r3, #2
 8000ba4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ba8:	f43f af7d 	beq.w	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000bac:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	9104      	str	r1, [sp, #16]
 8000bb4:	f000 808b 	beq.w	8000cce <__gnu_unwind_pr_common+0x27a>
 8000bb8:	f108 0004 	add.w	r0, r8, #4
 8000bbc:	f7ff fdbe 	bl	800073c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000bc0:	ab04      	add	r3, sp, #16
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f3af 8000 	nop.w
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d157      	bne.n	8000c7e <__gnu_unwind_pr_common+0x22a>
 8000bce:	f108 0208 	add.w	r2, r8, #8
 8000bd2:	e7a2      	b.n	8000b1a <__gnu_unwind_pr_common+0xc6>
 8000bd4:	210d      	movs	r1, #13
 8000bd6:	4658      	mov	r0, fp
 8000bd8:	f7ff fec8 	bl	800096c <_Unwind_GetGR>
 8000bdc:	6a2b      	ldr	r3, [r5, #32]
 8000bde:	4283      	cmp	r3, r0
 8000be0:	d1f5      	bne.n	8000bce <__gnu_unwind_pr_common+0x17a>
 8000be2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000be4:	4598      	cmp	r8, r3
 8000be6:	d1f2      	bne.n	8000bce <__gnu_unwind_pr_common+0x17a>
 8000be8:	4640      	mov	r0, r8
 8000bea:	f7ff fcdf 	bl	80005ac <selfrel_offset31>
 8000bee:	210f      	movs	r1, #15
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4658      	mov	r0, fp
 8000bf4:	f7ff fee0 	bl	80009b8 <_Unwind_SetGR>
 8000bf8:	462a      	mov	r2, r5
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4658      	mov	r0, fp
 8000bfe:	f7ff fedb 	bl	80009b8 <_Unwind_SetGR>
 8000c02:	e7a6      	b.n	8000b52 <__gnu_unwind_pr_common+0xfe>
 8000c04:	210d      	movs	r1, #13
 8000c06:	4658      	mov	r0, fp
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	f7ff feaf 	bl	800096c <_Unwind_GetGR>
 8000c0e:	6a2a      	ldr	r2, [r5, #32]
 8000c10:	9b03      	ldr	r3, [sp, #12]
 8000c12:	4282      	cmp	r2, r0
 8000c14:	d1b7      	bne.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000c16:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000c18:	4590      	cmp	r8, r2
 8000c1a:	d1b4      	bne.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	2204      	movs	r2, #4
 8000c20:	e9c5 720b 	strd	r7, r2, [r5, #44]	@ 0x2c
 8000c24:	4442      	add	r2, r8
 8000c26:	62ab      	str	r3, [r5, #40]	@ 0x28
 8000c28:	636a      	str	r2, [r5, #52]	@ 0x34
 8000c2a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c2e:	42ba      	cmp	r2, r7
 8000c30:	db55      	blt.n	8000cde <__gnu_unwind_pr_common+0x28a>
 8000c32:	2201      	movs	r2, #1
 8000c34:	9202      	str	r2, [sp, #8]
 8000c36:	e7aa      	b.n	8000b8e <__gnu_unwind_pr_common+0x13a>
 8000c38:	9403      	str	r4, [sp, #12]
 8000c3a:	f108 0a04 	add.w	sl, r8, #4
 8000c3e:	2600      	movs	r6, #0
 8000c40:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8000c44:	461c      	mov	r4, r3
 8000c46:	e00d      	b.n	8000c64 <__gnu_unwind_pr_common+0x210>
 8000c48:	4650      	mov	r0, sl
 8000c4a:	9704      	str	r7, [sp, #16]
 8000c4c:	f7ff fd76 	bl	800073c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000c50:	2200      	movs	r2, #0
 8000c52:	4601      	mov	r1, r0
 8000c54:	ab04      	add	r3, sp, #16
 8000c56:	4628      	mov	r0, r5
 8000c58:	3601      	adds	r6, #1
 8000c5a:	f10a 0a04 	add.w	sl, sl, #4
 8000c5e:	f3af 8000 	nop.w
 8000c62:	b9e0      	cbnz	r0, 8000c9e <__gnu_unwind_pr_common+0x24a>
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d1ef      	bne.n	8000c48 <__gnu_unwind_pr_common+0x1f4>
 8000c68:	210d      	movs	r1, #13
 8000c6a:	4658      	mov	r0, fp
 8000c6c:	f7ff fe7e 	bl	800096c <_Unwind_GetGR>
 8000c70:	9b04      	ldr	r3, [sp, #16]
 8000c72:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000c76:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000c7a:	2006      	movs	r0, #6
 8000c7c:	e714      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	210d      	movs	r1, #13
 8000c82:	4658      	mov	r0, fp
 8000c84:	f7ff fe72 	bl	800096c <_Unwind_GetGR>
 8000c88:	9e04      	ldr	r6, [sp, #16]
 8000c8a:	6228      	str	r0, [r5, #32]
 8000c8c:	2c02      	cmp	r4, #2
 8000c8e:	bf04      	itt	eq
 8000c90:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000c92:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000c96:	e9c5 6809 	strd	r6, r8, [r5, #36]	@ 0x24
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	e704      	b.n	8000aa8 <__gnu_unwind_pr_common+0x54>
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	f8d8 6000 	ldr.w	r6, [r8]
 8000ca4:	9c03      	ldr	r4, [sp, #12]
 8000ca6:	e76e      	b.n	8000b86 <__gnu_unwind_pr_common+0x132>
 8000ca8:	4640      	mov	r0, r8
 8000caa:	f7ff fc7f 	bl	80005ac <selfrel_offset31>
 8000cae:	f108 0204 	add.w	r2, r8, #4
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	f43f aef2 	beq.w	8000aa6 <__gnu_unwind_pr_common+0x52>
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	4658      	mov	r0, fp
 8000cc8:	f7ff fe76 	bl	80009b8 <_Unwind_SetGR>
 8000ccc:	e741      	b.n	8000b52 <__gnu_unwind_pr_common+0xfe>
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4658      	mov	r0, fp
 8000cd2:	210d      	movs	r1, #13
 8000cd4:	f7ff fe4a 	bl	800096c <_Unwind_GetGR>
 8000cd8:	4626      	mov	r6, r4
 8000cda:	6228      	str	r0, [r5, #32]
 8000cdc:	e7db      	b.n	8000c96 <__gnu_unwind_pr_common+0x242>
 8000cde:	1c58      	adds	r0, r3, #1
 8000ce0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8000ce4:	e781      	b.n	8000bea <__gnu_unwind_pr_common+0x196>
 8000ce6:	bf00      	nop
 8000ce8:	00000000 	.word	0x00000000

08000cec <__aeabi_unwind_cpp_pr0>:
 8000cec:	2300      	movs	r3, #0
 8000cee:	e6b1      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf0 <__aeabi_unwind_cpp_pr1>:
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e6af      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf4 <__aeabi_unwind_cpp_pr2>:
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e6ad      	b.n	8000a54 <__gnu_unwind_pr_common>

08000cf8 <_Unwind_VRS_Pop>:
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	b0c3      	sub	sp, #268	@ 0x10c
 8000d00:	4615      	mov	r5, r2
 8000d02:	461c      	mov	r4, r3
 8000d04:	2904      	cmp	r1, #4
 8000d06:	f200 80d1 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	51ac      	.short	0x51ac
 8000d10:	2acf      	.short	0x2acf
 8000d12:	03          	.byte	0x03
 8000d13:	00          	.byte	0x00
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	f040 80c9 	bne.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d1a:	2a10      	cmp	r2, #16
 8000d1c:	f200 80c6 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d20:	6803      	ldr	r3, [r0, #0]
 8000d22:	06dc      	lsls	r4, r3, #27
 8000d24:	f100 80e7 	bmi.w	8000ef6 <_Unwind_VRS_Pop+0x1fe>
 8000d28:	af20      	add	r7, sp, #128	@ 0x80
 8000d2a:	4638      	mov	r0, r7
 8000d2c:	f000 f9aa 	bl	8001084 <__gnu_Unwind_Save_WMMXC>
 8000d30:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 8000d32:	4639      	mov	r1, r7
 8000d34:	2300      	movs	r3, #0
 8000d36:	f04f 0c01 	mov.w	ip, #1
 8000d3a:	fa0c f203 	lsl.w	r2, ip, r3
 8000d3e:	422a      	tst	r2, r5
 8000d40:	4620      	mov	r0, r4
 8000d42:	f103 0301 	add.w	r3, r3, #1
 8000d46:	d003      	beq.n	8000d50 <_Unwind_VRS_Pop+0x58>
 8000d48:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d4c:	600a      	str	r2, [r1, #0]
 8000d4e:	4604      	mov	r4, r0
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	f101 0104 	add.w	r1, r1, #4
 8000d56:	d1f0      	bne.n	8000d3a <_Unwind_VRS_Pop+0x42>
 8000d58:	63b4      	str	r4, [r6, #56]	@ 0x38
 8000d5a:	4638      	mov	r0, r7
 8000d5c:	f000 f988 	bl	8001070 <__gnu_Unwind_Restore_WMMXC>
 8000d60:	e099      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000d62:	2c03      	cmp	r4, #3
 8000d64:	f040 80a2 	bne.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d68:	b294      	uxth	r4, r2
 8000d6a:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000d6e:	2b10      	cmp	r3, #16
 8000d70:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d74:	f200 809a 	bhi.w	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	071f      	lsls	r7, r3, #28
 8000d7c:	f100 80c3 	bmi.w	8000f06 <_Unwind_VRS_Pop+0x20e>
 8000d80:	af20      	add	r7, sp, #128	@ 0x80
 8000d82:	4638      	mov	r0, r7
 8000d84:	f000 f952 	bl	800102c <__gnu_Unwind_Save_WMMXD>
 8000d88:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000d8a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d8e:	b154      	cbz	r4, 8000da6 <_Unwind_VRS_Pop+0xae>
 8000d90:	460b      	mov	r3, r1
 8000d92:	1ad0      	subs	r0, r2, r3
 8000d94:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d98:	00e4      	lsls	r4, r4, #3
 8000d9a:	581d      	ldr	r5, [r3, r0]
 8000d9c:	f843 5b04 	str.w	r5, [r3], #4
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d1fa      	bne.n	8000d9a <_Unwind_VRS_Pop+0xa2>
 8000da4:	4422      	add	r2, r4
 8000da6:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000da8:	4638      	mov	r0, r7
 8000daa:	f000 f91d 	bl	8000fe8 <__gnu_Unwind_Restore_WMMXD>
 8000dae:	e072      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000db6:	b295      	uxth	r5, r2
 8000db8:	d071      	beq.n	8000e9e <_Unwind_VRS_Pop+0x1a6>
 8000dba:	2c05      	cmp	r4, #5
 8000dbc:	d176      	bne.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000dbe:	eb08 0905 	add.w	r9, r8, r5
 8000dc2:	f1b9 0f20 	cmp.w	r9, #32
 8000dc6:	d871      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000dc8:	f1b8 0f0f 	cmp.w	r8, #15
 8000dcc:	d872      	bhi.n	8000eb4 <_Unwind_VRS_Pop+0x1bc>
 8000dce:	f1b9 0f10 	cmp.w	r9, #16
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	f200 809f 	bhi.w	8000f16 <_Unwind_VRS_Pop+0x21e>
 8000dd8:	07d9      	lsls	r1, r3, #31
 8000dda:	d508      	bpl.n	8000dee <_Unwind_VRS_Pop+0xf6>
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	4630      	mov	r0, r6
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f840 3b48 	str.w	r3, [r0], #72
 8000dea:	f000 f8f1 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000dee:	af20      	add	r7, sp, #128	@ 0x80
 8000df0:	4638      	mov	r0, r7
 8000df2:	f000 f8ed 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000df6:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	f000 80b9 	beq.w	8000f70 <_Unwind_VRS_Pop+0x278>
 8000dfe:	006d      	lsls	r5, r5, #1
 8000e00:	1e6a      	subs	r2, r5, #1
 8000e02:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000e06:	2500      	movs	r5, #0
 8000e08:	3201      	adds	r2, #1
 8000e0a:	3904      	subs	r1, #4
 8000e0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e10:	f853 0b04 	ldr.w	r0, [r3], #4
 8000e14:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x118>
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	f000 80a1 	beq.w	8000f64 <_Unwind_VRS_Pop+0x26c>
 8000e22:	4641      	mov	r1, r8
 8000e24:	2910      	cmp	r1, #16
 8000e26:	bf38      	it	cc
 8000e28:	2110      	movcc	r1, #16
 8000e2a:	006b      	lsls	r3, r5, #1
 8000e2c:	3910      	subs	r1, #16
 8000e2e:	466f      	mov	r7, sp
 8000e30:	3b01      	subs	r3, #1
 8000e32:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000e36:	3301      	adds	r3, #1
 8000e38:	3904      	subs	r1, #4
 8000e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e3e:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e42:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d1f9      	bne.n	8000e3e <_Unwind_VRS_Pop+0x146>
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	f000 8088 	beq.w	8000f60 <_Unwind_VRS_Pop+0x268>
 8000e50:	f1b8 0f0f 	cmp.w	r8, #15
 8000e54:	63b2      	str	r2, [r6, #56]	@ 0x38
 8000e56:	d802      	bhi.n	8000e5e <_Unwind_VRS_Pop+0x166>
 8000e58:	a820      	add	r0, sp, #128	@ 0x80
 8000e5a:	f000 f8b5 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 8000e5e:	4638      	mov	r0, r7
 8000e60:	f000 f8ba 	bl	8000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e64:	e017      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000e66:	bb0c      	cbnz	r4, 8000eac <_Unwind_VRS_Pop+0x1b4>
 8000e68:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	fa1f fc82 	uxth.w	ip, r2
 8000e70:	2401      	movs	r4, #1
 8000e72:	1d37      	adds	r7, r6, #4
 8000e74:	fa04 f103 	lsl.w	r1, r4, r3
 8000e78:	ea11 0f0c 	tst.w	r1, ip
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	d004      	beq.n	8000e8a <_Unwind_VRS_Pop+0x192>
 8000e80:	f852 1b04 	ldr.w	r1, [r2], #4
 8000e84:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d1f1      	bne.n	8000e74 <_Unwind_VRS_Pop+0x17c>
 8000e90:	04ac      	lsls	r4, r5, #18
 8000e92:	d400      	bmi.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000e94:	63b0      	str	r0, [r6, #56]	@ 0x38
 8000e96:	2000      	movs	r0, #0
 8000e98:	b043      	add	sp, #268	@ 0x10c
 8000e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e9e:	eb08 0305 	add.w	r3, r8, r5
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d802      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1b4>
 8000ea6:	f1b8 0f10 	cmp.w	r8, #16
 8000eaa:	d114      	bne.n	8000ed6 <_Unwind_VRS_Pop+0x1de>
 8000eac:	2002      	movs	r0, #2
 8000eae:	b043      	add	sp, #268	@ 0x10c
 8000eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d0ee      	beq.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	075a      	lsls	r2, r3, #29
 8000ebc:	d45c      	bmi.n	8000f78 <_Unwind_VRS_Pop+0x280>
 8000ebe:	466f      	mov	r7, sp
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f000 f88d 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ec6:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000ec8:	006b      	lsls	r3, r5, #1
 8000eca:	f1a8 0110 	sub.w	r1, r8, #16
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000ed4:	e7af      	b.n	8000e36 <_Unwind_VRS_Pop+0x13e>
 8000ed6:	6803      	ldr	r3, [r0, #0]
 8000ed8:	07da      	lsls	r2, r3, #31
 8000eda:	d459      	bmi.n	8000f90 <_Unwind_VRS_Pop+0x298>
 8000edc:	af20      	add	r7, sp, #128	@ 0x80
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f000 f86e 	bl	8000fc0 <__gnu_Unwind_Save_VFP>
 8000ee4:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d189      	bne.n	8000dfe <_Unwind_VRS_Pop+0x106>
 8000eea:	3304      	adds	r3, #4
 8000eec:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f000 f862 	bl	8000fb8 <__gnu_Unwind_Restore_VFP>
 8000ef4:	e7cf      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000ef6:	f023 0310 	bic.w	r3, r3, #16
 8000efa:	6003      	str	r3, [r0, #0]
 8000efc:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8000f00:	f000 f8c0 	bl	8001084 <__gnu_Unwind_Save_WMMXC>
 8000f04:	e710      	b.n	8000d28 <_Unwind_VRS_Pop+0x30>
 8000f06:	f023 0308 	bic.w	r3, r3, #8
 8000f0a:	6003      	str	r3, [r0, #0]
 8000f0c:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8000f10:	f000 f88c 	bl	800102c <__gnu_Unwind_Save_WMMXD>
 8000f14:	e734      	b.n	8000d80 <_Unwind_VRS_Pop+0x88>
 8000f16:	07d9      	lsls	r1, r3, #31
 8000f18:	d508      	bpl.n	8000f2c <_Unwind_VRS_Pop+0x234>
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f840 3b48 	str.w	r3, [r0], #72
 8000f26:	f000 f853 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000f2a:	6833      	ldr	r3, [r6, #0]
 8000f2c:	0758      	lsls	r0, r3, #29
 8000f2e:	d506      	bpl.n	8000f3e <_Unwind_VRS_Pop+0x246>
 8000f30:	4630      	mov	r0, r6
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	f840 3bd0 	str.w	r3, [r0], #208
 8000f3a:	f000 f851 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f3e:	af20      	add	r7, sp, #128	@ 0x80
 8000f40:	4638      	mov	r0, r7
 8000f42:	f000 f845 	bl	8000fd0 <__gnu_Unwind_Save_VFP_D>
 8000f46:	4668      	mov	r0, sp
 8000f48:	f000 f84a 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f4c:	f1c8 0210 	rsb	r2, r8, #16
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 8000f54:	f1a9 0510 	sub.w	r5, r9, #16
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000f5e:	e753      	b.n	8000e08 <_Unwind_VRS_Pop+0x110>
 8000f60:	af20      	add	r7, sp, #128	@ 0x80
 8000f62:	e7c2      	b.n	8000eea <_Unwind_VRS_Pop+0x1f2>
 8000f64:	2c01      	cmp	r4, #1
 8000f66:	d0c0      	beq.n	8000eea <_Unwind_VRS_Pop+0x1f2>
 8000f68:	f1b8 0f0f 	cmp.w	r8, #15
 8000f6c:	63b3      	str	r3, [r6, #56]	@ 0x38
 8000f6e:	d892      	bhi.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000f70:	4638      	mov	r0, r7
 8000f72:	f000 f829 	bl	8000fc8 <__gnu_Unwind_Restore_VFP_D>
 8000f76:	e78e      	b.n	8000e96 <_Unwind_VRS_Pop+0x19e>
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	f840 3bd0 	str.w	r3, [r0], #208
 8000f80:	466f      	mov	r7, sp
 8000f82:	f000 f82d 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f86:	4638      	mov	r0, r7
 8000f88:	f000 f82a 	bl	8000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f8c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 8000f8e:	e79b      	b.n	8000ec8 <_Unwind_VRS_Pop+0x1d0>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f840 3b48 	str.w	r3, [r0], #72
 8000f9a:	f000 f811 	bl	8000fc0 <__gnu_Unwind_Save_VFP>
 8000f9e:	e79d      	b.n	8000edc <_Unwind_VRS_Pop+0x1e4>

08000fa0 <__restore_core_regs>:
 8000fa0:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8000fa4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000fa8:	469c      	mov	ip, r3
 8000faa:	46a6      	mov	lr, r4
 8000fac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000fb0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000fb4:	46e5      	mov	sp, ip
 8000fb6:	bd00      	pop	{pc}

08000fb8 <__gnu_Unwind_Restore_VFP>:
 8000fb8:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_VFP>:
 8000fc0:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Restore_VFP_D>:
 8000fc8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Save_VFP_D>:
 8000fd0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000fd8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000fe0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Restore_WMMXD>:
 8000fe8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fec:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ff0:	ecf0 2102 	ldfe	f2, [r0], #8
 8000ff4:	ecf0 3102 	ldfe	f3, [r0], #8
 8000ff8:	ecf0 4102 	ldfe	f4, [r0], #8
 8000ffc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001000:	ecf0 6102 	ldfe	f6, [r0], #8
 8001004:	ecf0 7102 	ldfe	f7, [r0], #8
 8001008:	ecf0 8102 	ldfp	f0, [r0], #8
 800100c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001010:	ecf0 a102 	ldfp	f2, [r0], #8
 8001014:	ecf0 b102 	ldfp	f3, [r0], #8
 8001018:	ecf0 c102 	ldfp	f4, [r0], #8
 800101c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001020:	ecf0 e102 	ldfp	f6, [r0], #8
 8001024:	ecf0 f102 	ldfp	f7, [r0], #8
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXD>:
 800102c:	ece0 0102 	stfe	f0, [r0], #8
 8001030:	ece0 1102 	stfe	f1, [r0], #8
 8001034:	ece0 2102 	stfe	f2, [r0], #8
 8001038:	ece0 3102 	stfe	f3, [r0], #8
 800103c:	ece0 4102 	stfe	f4, [r0], #8
 8001040:	ece0 5102 	stfe	f5, [r0], #8
 8001044:	ece0 6102 	stfe	f6, [r0], #8
 8001048:	ece0 7102 	stfe	f7, [r0], #8
 800104c:	ece0 8102 	stfp	f0, [r0], #8
 8001050:	ece0 9102 	stfp	f1, [r0], #8
 8001054:	ece0 a102 	stfp	f2, [r0], #8
 8001058:	ece0 b102 	stfp	f3, [r0], #8
 800105c:	ece0 c102 	stfp	f4, [r0], #8
 8001060:	ece0 d102 	stfp	f5, [r0], #8
 8001064:	ece0 e102 	stfp	f6, [r0], #8
 8001068:	ece0 f102 	stfp	f7, [r0], #8
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__gnu_Unwind_Restore_WMMXC>:
 8001070:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001074:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001078:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800107c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__gnu_Unwind_Save_WMMXC>:
 8001084:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001088:	fca0 9101 	stc2	1, cr9, [r0], #4
 800108c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001090:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <_Unwind_RaiseException>:
 8001098:	46ec      	mov	ip, sp
 800109a:	b500      	push	{lr}
 800109c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	f7ff fbd7 	bl	8000860 <__gnu_Unwind_RaiseException>
 80010b2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010b6:	b012      	add	sp, #72	@ 0x48
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <_Unwind_Resume>:
 80010bc:	46ec      	mov	ip, sp
 80010be:	b500      	push	{lr}
 80010c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d0:	a901      	add	r1, sp, #4
 80010d2:	f7ff fc01 	bl	80008d8 <__gnu_Unwind_Resume>
 80010d6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010da:	b012      	add	sp, #72	@ 0x48
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <_Unwind_Resume_or_Rethrow>:
 80010e0:	46ec      	mov	ip, sp
 80010e2:	b500      	push	{lr}
 80010e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010f4:	a901      	add	r1, sp, #4
 80010f6:	f7ff fc11 	bl	800091c <__gnu_Unwind_Resume_or_Rethrow>
 80010fa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80010fe:	b012      	add	sp, #72	@ 0x48
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <_Unwind_ForcedUnwind>:
 8001104:	46ec      	mov	ip, sp
 8001106:	b500      	push	{lr}
 8001108:	e92d 5000 	stmdb	sp!, {ip, lr}
 800110c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001118:	ab01      	add	r3, sp, #4
 800111a:	f7ff fbd5 	bl	80008c8 <__gnu_Unwind_ForcedUnwind>
 800111e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001122:	b012      	add	sp, #72	@ 0x48
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <_Unwind_Backtrace>:
 8001128:	46ec      	mov	ip, sp
 800112a:	b500      	push	{lr}
 800112c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001130:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e92d 000c 	stmdb	sp!, {r2, r3}
 800113c:	aa01      	add	r2, sp, #4
 800113e:	f7ff fc47 	bl	80009d0 <__gnu_Unwind_Backtrace>
 8001142:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001146:	b012      	add	sp, #72	@ 0x48
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <next_unwind_byte>:
 800114c:	7a02      	ldrb	r2, [r0, #8]
 800114e:	4603      	mov	r3, r0
 8001150:	b97a      	cbnz	r2, 8001172 <next_unwind_byte+0x26>
 8001152:	7a42      	ldrb	r2, [r0, #9]
 8001154:	b1a2      	cbz	r2, 8001180 <next_unwind_byte+0x34>
 8001156:	6841      	ldr	r1, [r0, #4]
 8001158:	3a01      	subs	r2, #1
 800115a:	b410      	push	{r4}
 800115c:	7242      	strb	r2, [r0, #9]
 800115e:	6808      	ldr	r0, [r1, #0]
 8001160:	2203      	movs	r2, #3
 8001162:	1d0c      	adds	r4, r1, #4
 8001164:	721a      	strb	r2, [r3, #8]
 8001166:	0202      	lsls	r2, r0, #8
 8001168:	605c      	str	r4, [r3, #4]
 800116a:	0e00      	lsrs	r0, r0, #24
 800116c:	bc10      	pop	{r4}
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4770      	bx	lr
 8001172:	6800      	ldr	r0, [r0, #0]
 8001174:	3a01      	subs	r2, #1
 8001176:	721a      	strb	r2, [r3, #8]
 8001178:	0202      	lsls	r2, r0, #8
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	0e00      	lsrs	r0, r0, #24
 800117e:	4770      	bx	lr
 8001180:	20b0      	movs	r0, #176	@ 0xb0
 8001182:	4770      	bx	lr

08001184 <_Unwind_GetGR.constprop.0>:
 8001184:	b500      	push	{lr}
 8001186:	b085      	sub	sp, #20
 8001188:	2300      	movs	r3, #0
 800118a:	aa03      	add	r2, sp, #12
 800118c:	9200      	str	r2, [sp, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	220c      	movs	r2, #12
 8001192:	f7ff fbd3 	bl	800093c <_Unwind_VRS_Get>
 8001196:	9803      	ldr	r0, [sp, #12]
 8001198:	b005      	add	sp, #20
 800119a:	f85d fb04 	ldr.w	pc, [sp], #4
 800119e:	bf00      	nop

080011a0 <unwind_UCB_from_context>:
 80011a0:	e7f0      	b.n	8001184 <_Unwind_GetGR.constprop.0>
 80011a2:	bf00      	nop

080011a4 <__gnu_unwind_execute>:
 80011a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a8:	4606      	mov	r6, r0
 80011aa:	b085      	sub	sp, #20
 80011ac:	460d      	mov	r5, r1
 80011ae:	f04f 0800 	mov.w	r8, #0
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff ffca 	bl	800114c <next_unwind_byte>
 80011b8:	28b0      	cmp	r0, #176	@ 0xb0
 80011ba:	4604      	mov	r4, r0
 80011bc:	f000 80da 	beq.w	8001374 <__gnu_unwind_execute+0x1d0>
 80011c0:	0607      	lsls	r7, r0, #24
 80011c2:	d546      	bpl.n	8001252 <__gnu_unwind_execute+0xae>
 80011c4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80011c8:	2b80      	cmp	r3, #128	@ 0x80
 80011ca:	d05e      	beq.n	800128a <__gnu_unwind_execute+0xe6>
 80011cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80011ce:	d073      	beq.n	80012b8 <__gnu_unwind_execute+0x114>
 80011d0:	d81b      	bhi.n	800120a <__gnu_unwind_execute+0x66>
 80011d2:	2b90      	cmp	r3, #144	@ 0x90
 80011d4:	f000 809b 	beq.w	800130e <__gnu_unwind_execute+0x16a>
 80011d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80011da:	d112      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80011dc:	43c3      	mvns	r3, r0
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80011e6:	411a      	asrs	r2, r3
 80011e8:	0701      	lsls	r1, r0, #28
 80011ea:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 80011ee:	d501      	bpl.n	80011f4 <__gnu_unwind_execute+0x50>
 80011f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011f4:	2300      	movs	r3, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4630      	mov	r0, r6
 80011fa:	f7ff fd7d 	bl	8000cf8 <_Unwind_VRS_Pop>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0d7      	beq.n	80011b2 <__gnu_unwind_execute+0xe>
 8001202:	2009      	movs	r0, #9
 8001204:	b005      	add	sp, #20
 8001206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120a:	2bc0      	cmp	r3, #192	@ 0xc0
 800120c:	d16d      	bne.n	80012ea <__gnu_unwind_execute+0x146>
 800120e:	28c6      	cmp	r0, #198	@ 0xc6
 8001210:	f000 8093 	beq.w	800133a <__gnu_unwind_execute+0x196>
 8001214:	28c7      	cmp	r0, #199	@ 0xc7
 8001216:	f000 80b2 	beq.w	800137e <__gnu_unwind_execute+0x1da>
 800121a:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 800121e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001220:	f000 80d2 	beq.w	80013c8 <__gnu_unwind_execute+0x224>
 8001224:	28c8      	cmp	r0, #200	@ 0xc8
 8001226:	f000 80dd 	beq.w	80013e4 <__gnu_unwind_execute+0x240>
 800122a:	28c9      	cmp	r0, #201	@ 0xc9
 800122c:	d1e9      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff ff8c 	bl	800114c <next_unwind_byte>
 8001234:	0302      	lsls	r2, r0, #12
 8001236:	f000 000f 	and.w	r0, r0, #15
 800123a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800123e:	3001      	adds	r0, #1
 8001240:	4302      	orrs	r2, r0
 8001242:	2101      	movs	r1, #1
 8001244:	2305      	movs	r3, #5
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff fd56 	bl	8000cf8 <_Unwind_VRS_Pop>
 800124c:	2800      	cmp	r0, #0
 800124e:	d0b0      	beq.n	80011b2 <__gnu_unwind_execute+0xe>
 8001250:	e7d7      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001252:	0083      	lsls	r3, r0, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	1d1f      	adds	r7, r3, #4
 8001258:	f10d 090c 	add.w	r9, sp, #12
 800125c:	2300      	movs	r3, #0
 800125e:	4619      	mov	r1, r3
 8001260:	f8cd 9000 	str.w	r9, [sp]
 8001264:	220d      	movs	r2, #13
 8001266:	4630      	mov	r0, r6
 8001268:	f7ff fb68 	bl	800093c <_Unwind_VRS_Get>
 800126c:	9b03      	ldr	r3, [sp, #12]
 800126e:	f8cd 9000 	str.w	r9, [sp]
 8001272:	0660      	lsls	r0, r4, #25
 8001274:	bf4c      	ite	mi
 8001276:	1bdf      	submi	r7, r3, r7
 8001278:	18ff      	addpl	r7, r7, r3
 800127a:	2300      	movs	r3, #0
 800127c:	220d      	movs	r2, #13
 800127e:	4619      	mov	r1, r3
 8001280:	4630      	mov	r0, r6
 8001282:	9703      	str	r7, [sp, #12]
 8001284:	f7ff fb80 	bl	8000988 <_Unwind_VRS_Set>
 8001288:	e793      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 800128a:	4628      	mov	r0, r5
 800128c:	f7ff ff5e 	bl	800114c <next_unwind_byte>
 8001290:	0224      	lsls	r4, r4, #8
 8001292:	4320      	orrs	r0, r4
 8001294:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001298:	d0b3      	beq.n	8001202 <__gnu_unwind_execute+0x5e>
 800129a:	0104      	lsls	r4, r0, #4
 800129c:	2300      	movs	r3, #0
 800129e:	b2a2      	uxth	r2, r4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4630      	mov	r0, r6
 80012a4:	f7ff fd28 	bl	8000cf8 <_Unwind_VRS_Pop>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1aa      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ac:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80012b0:	bf18      	it	ne
 80012b2:	f04f 0801 	movne.w	r8, #1
 80012b6:	e77c      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 80012b8:	28b1      	cmp	r0, #177	@ 0xb1
 80012ba:	d051      	beq.n	8001360 <__gnu_unwind_execute+0x1bc>
 80012bc:	28b2      	cmp	r0, #178	@ 0xb2
 80012be:	f000 80ad 	beq.w	800141c <__gnu_unwind_execute+0x278>
 80012c2:	28b3      	cmp	r0, #179	@ 0xb3
 80012c4:	d06d      	beq.n	80013a2 <__gnu_unwind_execute+0x1fe>
 80012c6:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 80012ca:	2bb4      	cmp	r3, #180	@ 0xb4
 80012cc:	d099      	beq.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ce:	f000 0207 	and.w	r2, r0, #7
 80012d2:	3201      	adds	r2, #1
 80012d4:	2301      	movs	r3, #1
 80012d6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012da:	4619      	mov	r1, r3
 80012dc:	4630      	mov	r0, r6
 80012de:	f7ff fd0b 	bl	8000cf8 <_Unwind_VRS_Pop>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	f43f af65 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80012e8:	e78b      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80012ea:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80012ee:	2bd0      	cmp	r3, #208	@ 0xd0
 80012f0:	d187      	bne.n	8001202 <__gnu_unwind_execute+0x5e>
 80012f2:	f000 0207 	and.w	r2, r0, #7
 80012f6:	3201      	adds	r2, #1
 80012f8:	2305      	movs	r3, #5
 80012fa:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80012fe:	2101      	movs	r1, #1
 8001300:	4630      	mov	r0, r6
 8001302:	f7ff fcf9 	bl	8000cf8 <_Unwind_VRS_Pop>
 8001306:	2800      	cmp	r0, #0
 8001308:	f43f af53 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 800130c:	e779      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 800130e:	f000 030d 	and.w	r3, r0, #13
 8001312:	2b0d      	cmp	r3, #13
 8001314:	f43f af75 	beq.w	8001202 <__gnu_unwind_execute+0x5e>
 8001318:	af03      	add	r7, sp, #12
 800131a:	2300      	movs	r3, #0
 800131c:	f000 020f 	and.w	r2, r0, #15
 8001320:	4619      	mov	r1, r3
 8001322:	9700      	str	r7, [sp, #0]
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff fb09 	bl	800093c <_Unwind_VRS_Get>
 800132a:	2300      	movs	r3, #0
 800132c:	9700      	str	r7, [sp, #0]
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	4630      	mov	r0, r6
 8001334:	f7ff fb28 	bl	8000988 <_Unwind_VRS_Set>
 8001338:	e73b      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff ff06 	bl	800114c <next_unwind_byte>
 8001340:	0302      	lsls	r2, r0, #12
 8001342:	f000 000f 	and.w	r0, r0, #15
 8001346:	3001      	adds	r0, #1
 8001348:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800134c:	2303      	movs	r3, #3
 800134e:	4302      	orrs	r2, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4630      	mov	r0, r6
 8001354:	f7ff fcd0 	bl	8000cf8 <_Unwind_VRS_Pop>
 8001358:	2800      	cmp	r0, #0
 800135a:	f43f af2a 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 800135e:	e750      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fef3 	bl	800114c <next_unwind_byte>
 8001366:	1e43      	subs	r3, r0, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b0e      	cmp	r3, #14
 800136c:	4602      	mov	r2, r0
 800136e:	f67f af41 	bls.w	80011f4 <__gnu_unwind_execute+0x50>
 8001372:	e746      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 8001374:	f1b8 0f00 	cmp.w	r8, #0
 8001378:	d040      	beq.n	80013fc <__gnu_unwind_execute+0x258>
 800137a:	2000      	movs	r0, #0
 800137c:	e742      	b.n	8001204 <__gnu_unwind_execute+0x60>
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff fee4 	bl	800114c <next_unwind_byte>
 8001384:	1e43      	subs	r3, r0, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b0e      	cmp	r3, #14
 800138a:	4602      	mov	r2, r0
 800138c:	f63f af39 	bhi.w	8001202 <__gnu_unwind_execute+0x5e>
 8001390:	2300      	movs	r3, #0
 8001392:	2104      	movs	r1, #4
 8001394:	4630      	mov	r0, r6
 8001396:	f7ff fcaf 	bl	8000cf8 <_Unwind_VRS_Pop>
 800139a:	2800      	cmp	r0, #0
 800139c:	f43f af09 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013a0:	e72f      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013a2:	4628      	mov	r0, r5
 80013a4:	f7ff fed2 	bl	800114c <next_unwind_byte>
 80013a8:	0302      	lsls	r2, r0, #12
 80013aa:	f000 000f 	and.w	r0, r0, #15
 80013ae:	3001      	adds	r0, #1
 80013b0:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80013b4:	2301      	movs	r3, #1
 80013b6:	4302      	orrs	r2, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fc9c 	bl	8000cf8 <_Unwind_VRS_Pop>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	f43f aef6 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013c6:	e71c      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013c8:	f000 020f 	and.w	r2, r0, #15
 80013cc:	3201      	adds	r2, #1
 80013ce:	2303      	movs	r3, #3
 80013d0:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 80013d4:	4619      	mov	r1, r3
 80013d6:	4630      	mov	r0, r6
 80013d8:	f7ff fc8e 	bl	8000cf8 <_Unwind_VRS_Pop>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f43f aee8 	beq.w	80011b2 <__gnu_unwind_execute+0xe>
 80013e2:	e70e      	b.n	8001202 <__gnu_unwind_execute+0x5e>
 80013e4:	4628      	mov	r0, r5
 80013e6:	f7ff feb1 	bl	800114c <next_unwind_byte>
 80013ea:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 80013ee:	f000 030f 	and.w	r3, r0, #15
 80013f2:	3210      	adds	r2, #16
 80013f4:	3301      	adds	r3, #1
 80013f6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013fa:	e722      	b.n	8001242 <__gnu_unwind_execute+0x9e>
 80013fc:	ac03      	add	r4, sp, #12
 80013fe:	4643      	mov	r3, r8
 8001400:	4641      	mov	r1, r8
 8001402:	220e      	movs	r2, #14
 8001404:	9400      	str	r4, [sp, #0]
 8001406:	4630      	mov	r0, r6
 8001408:	f7ff fa98 	bl	800093c <_Unwind_VRS_Get>
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	4643      	mov	r3, r8
 8001410:	220f      	movs	r2, #15
 8001412:	4641      	mov	r1, r8
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff fab7 	bl	8000988 <_Unwind_VRS_Set>
 800141a:	e7ae      	b.n	800137a <__gnu_unwind_execute+0x1d6>
 800141c:	2300      	movs	r3, #0
 800141e:	f10d 090c 	add.w	r9, sp, #12
 8001422:	220d      	movs	r2, #13
 8001424:	4619      	mov	r1, r3
 8001426:	f8cd 9000 	str.w	r9, [sp]
 800142a:	4630      	mov	r0, r6
 800142c:	f7ff fa86 	bl	800093c <_Unwind_VRS_Get>
 8001430:	4628      	mov	r0, r5
 8001432:	f7ff fe8b 	bl	800114c <next_unwind_byte>
 8001436:	0602      	lsls	r2, r0, #24
 8001438:	9c03      	ldr	r4, [sp, #12]
 800143a:	f04f 0702 	mov.w	r7, #2
 800143e:	d50b      	bpl.n	8001458 <__gnu_unwind_execute+0x2b4>
 8001440:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001444:	40b8      	lsls	r0, r7
 8001446:	4404      	add	r4, r0
 8001448:	4628      	mov	r0, r5
 800144a:	9403      	str	r4, [sp, #12]
 800144c:	f7ff fe7e 	bl	800114c <next_unwind_byte>
 8001450:	0603      	lsls	r3, r0, #24
 8001452:	f107 0707 	add.w	r7, r7, #7
 8001456:	d4f3      	bmi.n	8001440 <__gnu_unwind_execute+0x29c>
 8001458:	fa00 f207 	lsl.w	r2, r0, r7
 800145c:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001460:	4422      	add	r2, r4
 8001462:	2300      	movs	r3, #0
 8001464:	9203      	str	r2, [sp, #12]
 8001466:	f8cd 9000 	str.w	r9, [sp]
 800146a:	220d      	movs	r2, #13
 800146c:	4619      	mov	r1, r3
 800146e:	4630      	mov	r0, r6
 8001470:	f7ff fa8a 	bl	8000988 <_Unwind_VRS_Set>
 8001474:	e69d      	b.n	80011b2 <__gnu_unwind_execute+0xe>
 8001476:	bf00      	nop

08001478 <__gnu_unwind_frame>:
 8001478:	b510      	push	{r4, lr}
 800147a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800147c:	6853      	ldr	r3, [r2, #4]
 800147e:	b084      	sub	sp, #16
 8001480:	f04f 0c03 	mov.w	ip, #3
 8001484:	3208      	adds	r2, #8
 8001486:	021c      	lsls	r4, r3, #8
 8001488:	4608      	mov	r0, r1
 800148a:	0e1b      	lsrs	r3, r3, #24
 800148c:	a901      	add	r1, sp, #4
 800148e:	9401      	str	r4, [sp, #4]
 8001490:	9202      	str	r2, [sp, #8]
 8001492:	f88d c00c 	strb.w	ip, [sp, #12]
 8001496:	f88d 300d 	strb.w	r3, [sp, #13]
 800149a:	f7ff fe83 	bl	80011a4 <__gnu_unwind_execute>
 800149e:	b004      	add	sp, #16
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	bf00      	nop

080014a4 <_Unwind_GetRegionStart>:
 80014a4:	b508      	push	{r3, lr}
 80014a6:	f7ff fe7b 	bl	80011a0 <unwind_UCB_from_context>
 80014aa:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80014ac:	bd08      	pop	{r3, pc}
 80014ae:	bf00      	nop

080014b0 <_Unwind_GetLanguageSpecificData>:
 80014b0:	b508      	push	{r3, lr}
 80014b2:	f7ff fe75 	bl	80011a0 <unwind_UCB_from_context>
 80014b6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80014b8:	79c3      	ldrb	r3, [r0, #7]
 80014ba:	3302      	adds	r3, #2
 80014bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014c0:	bd08      	pop	{r3, pc}
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <readReg>:
 * 
 * @param data[out]
 *   The register value is written to this parameter
 **********************************************************/    
static uint32_t readReg(bool ap, int reg, uint32_t *data)
{
 80014c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014cc:	4607      	mov	r7, r0
 80014ce:	4614      	mov	r4, r2
  uint32_t b;
  uint32_t ack = 0;
  uint32_t ret = SWD_ERROR_OK;
   
  /* Initalize output variable */
  *data = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	6013      	str	r3, [r2, #0]
  
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)1;
  
  int A2 = reg & 0x1;
 80014d4:	f001 0801 	and.w	r8, r1, #1
  int A3 = (reg >> 1) & 0x1;
 80014d8:	f3c1 0640 	ubfx	r6, r1, #1, #1
  
  /* Calulate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 80014dc:	1c45      	adds	r5, r0, #1
 80014de:	4445      	add	r5, r8
 80014e0:	4435      	add	r5, r6
 80014e2:	f005 0501 	and.w	r5, r5, #1
  
  
  SWDIO_SET_OUTPUT();
 80014e6:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 80016fc <readReg+0x234>
 80014ea:	2201      	movs	r2, #1
 80014ec:	2110      	movs	r1, #16
 80014ee:	4648      	mov	r0, r9
 80014f0:	f003 faa4 	bl	8004a3c <HAL_GPIO_WritePin>
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80014f4:	f8d9 1000 	ldr.w	r1, [r9]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fc:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001514:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2201      	movs	r2, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	430b      	orrs	r3, r1
 8001526:	f8c9 3000 	str.w	r3, [r9]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800152a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800152e:	f8c9 3018 	str.w	r3, [r9, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001532:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001536:	f8c9 3018 	str.w	r3, [r9, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800153a:	2340      	movs	r3, #64	@ 0x40
 800153c:	f8c9 3018 	str.w	r3, [r9, #24]
  
  /* Send request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 8001540:	2f00      	cmp	r7, #0
 8001542:	f000 809d 	beq.w	8001680 <readReg+0x1b8>
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	f8c9 2018 	str.w	r2, [r9, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800154e:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <readReg+0x234>)
 8001550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001554:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001556:	2240      	movs	r2, #64	@ 0x40
 8001558:	619a      	str	r2, [r3, #24]
 800155a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800155e:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001560:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001562:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8001564:	f1b8 0f00 	cmp.w	r8, #0
 8001568:	f000 808f 	beq.w	800168a <readReg+0x1c2>
 800156c:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800156e:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <readReg+0x234>)
 8001570:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001574:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001576:	2240      	movs	r2, #64	@ 0x40
 8001578:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(A3);
 800157a:	2e00      	cmp	r6, #0
 800157c:	f000 808a 	beq.w	8001694 <readReg+0x1cc>
 8001580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001584:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001586:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <readReg+0x234>)
 8001588:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800158c:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800158e:	2240      	movs	r2, #64	@ 0x40
 8001590:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(parity);
 8001592:	2d00      	cmp	r5, #0
 8001594:	f000 8083 	beq.w	800169e <readReg+0x1d6>
 8001598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800159c:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800159e:	4d57      	ldr	r5, [pc, #348]	@ (80016fc <readReg+0x234>)
 80015a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015a4:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015a6:	2340      	movs	r3, #64	@ 0x40
 80015a8:	61ab      	str	r3, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015aa:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80015ae:	61a9      	str	r1, [r5, #24]
 80015b0:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015b2:	61ab      	str	r3, [r5, #24]
 80015b4:	f44f 7680 	mov.w	r6, #256	@ 0x100
 80015b8:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015ba:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015bc:	61ab      	str	r3, [r5, #24]
  SWD_WRITE_BIT(0);
  SWD_WRITE_BIT(1);
  
  /* Turnaround */
  SWDIO_SET_INPUT();
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	4628      	mov	r0, r5
 80015c4:	f003 fa3a 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015c8:	682a      	ldr	r2, [r5, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80015ce:	fab6 f686 	clz	r6, r6
 80015d2:	0076      	lsls	r6, r6, #1
 80015d4:	2303      	movs	r3, #3
 80015d6:	40b3      	lsls	r3, r6
 80015d8:	ea22 0203 	bic.w	r2, r2, r3
 80015dc:	462b      	mov	r3, r5
 80015de:	602a      	str	r2, [r5, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015e4:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015e6:	2240      	movs	r2, #64	@ 0x40
 80015e8:	61aa      	str	r2, [r5, #24]
  uint32_t ack = 0;
 80015ea:	2500      	movs	r5, #0
  SWCLK_CYCLE();
  
  /* Read ACK */
  for ( i=0; i<3; i++ ) {
 80015ec:	462a      	mov	r2, r5
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015ee:	4619      	mov	r1, r3
 80015f0:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015f4:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80015f6:	618e      	str	r6, [r1, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80015f8:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015fa:	6188      	str	r0, [r1, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80015fc:	f3c3 2300 	ubfx	r3, r3, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 8001600:	4093      	lsls	r3, r2
 8001602:	431d      	orrs	r5, r3
  for ( i=0; i<3; i++ ) {
 8001604:	3201      	adds	r2, #1
 8001606:	2a03      	cmp	r2, #3
 8001608:	d1f5      	bne.n	80015f6 <readReg+0x12e>
  }
  
  /* Verify that ACK is OK */
  if ( ack == ACK_OK ) {
 800160a:	2d01      	cmp	r5, #1
 800160c:	d04c      	beq.n	80016a8 <readReg+0x1e0>
    } else {
      ret = SWD_ERROR_PARITY;
    }
    
  } 
  else if ( ack == ACK_WAIT ) 
 800160e:	2d02      	cmp	r5, #2
 8001610:	d003      	beq.n	800161a <readReg+0x152>
  {
    ret = SWD_ERROR_WAIT;
  } 
  else if ( ack == ACK_FAULT ) 
  {
    ret = SWD_ERROR_FAULT;
 8001612:	2d04      	cmp	r5, #4
 8001614:	bf14      	ite	ne
 8001616:	2504      	movne	r5, #4
 8001618:	2503      	moveq	r5, #3
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800161a:	4c38      	ldr	r4, [pc, #224]	@ (80016fc <readReg+0x234>)
 800161c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001620:	61a3      	str	r3, [r4, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001622:	2340      	movs	r3, #64	@ 0x40
 8001624:	61a3      	str	r3, [r4, #24]
  /* Turnaround */
  SWCLK_CYCLE();
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
 8001626:	2201      	movs	r2, #1
 8001628:	2110      	movs	r1, #16
 800162a:	4620      	mov	r0, r4
 800162c:	f003 fa06 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001630:	6821      	ldr	r1, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	430b      	orrs	r3, r1
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001664:	4623      	mov	r3, r4
 8001666:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 800166a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800166e:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001670:	619c      	str	r4, [r3, #24]
 8001672:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001674:	6199      	str	r1, [r3, #24]
  for ( i=0; i<8; i++ ) {
 8001676:	3a01      	subs	r2, #1
 8001678:	d1fa      	bne.n	8001670 <readReg+0x1a8>
    SWD_WRITE_BIT(0);
  }
  
  return ret;
}
 800167a:	4628      	mov	r0, r5
 800167c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <readReg+0x234>)
 8001682:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001686:	619a      	str	r2, [r3, #24]
}
 8001688:	e761      	b.n	800154e <readReg+0x86>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <readReg+0x234>)
 800168c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	e76c      	b.n	800156e <readReg+0xa6>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <readReg+0x234>)
 8001696:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800169a:	619a      	str	r2, [r3, #24]
}
 800169c:	e773      	b.n	8001586 <readReg+0xbe>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <readReg+0x234>)
 80016a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	e77a      	b.n	800159e <readReg+0xd6>
  uint32_t cb = 0;
 80016a8:	f04f 0c00 	mov.w	ip, #0
    for ( i=0; i<32; i++ ) 
 80016ac:	4663      	mov	r3, ip
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016ae:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <readReg+0x234>)
 80016b0:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016b4:	2640      	movs	r6, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016b6:	6197      	str	r7, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016b8:	6911      	ldr	r1, [r2, #16]
 80016ba:	f401 7180 	and.w	r1, r1, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016be:	6196      	str	r6, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016c0:	2900      	cmp	r1, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2001      	movne	r0, #1
 80016c6:	2000      	moveq	r0, #0
      *data |= b << i;
 80016c8:	fa00 f003 	lsl.w	r0, r0, r3
 80016cc:	6821      	ldr	r1, [r4, #0]
 80016ce:	ea41 0100 	orr.w	r1, r1, r0
 80016d2:	6021      	str	r1, [r4, #0]
      if ( b ) cb = !cb;
 80016d4:	bf18      	it	ne
 80016d6:	f08c 0c01 	eorne.w	ip, ip, #1
    for ( i=0; i<32; i++ ) 
 80016da:	3301      	adds	r3, #1
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d1ea      	bne.n	80016b6 <readReg+0x1ee>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <readReg+0x234>)
 80016e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016e6:	6193      	str	r3, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016e8:	6913      	ldr	r3, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016ea:	2140      	movs	r1, #64	@ 0x40
 80016ec:	6191      	str	r1, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80016ee:	f3c3 2300 	ubfx	r3, r3, #8, #1
      ret = SWD_ERROR_PARITY;
 80016f2:	459c      	cmp	ip, r3
 80016f4:	bf18      	it	ne
 80016f6:	2505      	movne	r5, #5
 80016f8:	e78f      	b.n	800161a <readReg+0x152>
 80016fa:	bf00      	nop
 80016fc:	40020400 	.word	0x40020400

08001700 <writeReg>:
 * 
 * @param data
 *   The value to write to the register
 **********************************************************/
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
{
 8001700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001704:	4680      	mov	r8, r0
 8001706:	4614      	mov	r4, r2
 8001708:	461e      	mov	r6, r3
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)0;
  
  /* Calulate address bits */
  int A2 = reg & 0x1;
 800170a:	f001 0901 	and.w	r9, r1, #1
  int A3 = (reg >> 1) & 0x1;
 800170e:	f3c1 0540 	ubfx	r5, r1, #1, #1
  
  /* Calculate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001712:	eb00 0709 	add.w	r7, r0, r9
 8001716:	442f      	add	r7, r5
 8001718:	f007 0701 	and.w	r7, r7, #1
  
  SWDIO_SET_OUTPUT();
 800171c:	f8df a268 	ldr.w	sl, [pc, #616]	@ 8001988 <writeReg+0x288>
 8001720:	2201      	movs	r2, #1
 8001722:	2110      	movs	r1, #16
 8001724:	4650      	mov	r0, sl
 8001726:	f003 f989 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800172a:	f8da 1000 	ldr.w	r1, [sl]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001732:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	430b      	orrs	r3, r1
 800175c:	f8ca 3000 	str.w	r3, [sl]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001764:	f8ca 3018 	str.w	r3, [sl, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001768:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800176c:	f8ca 3018 	str.w	r3, [sl, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001770:	2340      	movs	r3, #64	@ 0x40
 8001772:	f8ca 3018 	str.w	r3, [sl, #24]
  
  /* Write request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 8001776:	f1b8 0f00 	cmp.w	r8, #0
 800177a:	f000 8097 	beq.w	80018ac <writeReg+0x1ac>
 800177e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001782:	f8ca 2018 	str.w	r2, [sl, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001786:	4b80      	ldr	r3, [pc, #512]	@ (8001988 <writeReg+0x288>)
 8001788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800178c:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001792:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001796:	6198      	str	r0, [r3, #24]
 8001798:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800179a:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 800179c:	f1b9 0f00 	cmp.w	r9, #0
 80017a0:	f000 8089 	beq.w	80018b6 <writeReg+0x1b6>
 80017a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a8:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017aa:	4b77      	ldr	r3, [pc, #476]	@ (8001988 <writeReg+0x288>)
 80017ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017b0:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(A3);
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	f000 8082 	beq.w	80018c0 <writeReg+0x1c0>
 80017bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c0:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017c2:	4b71      	ldr	r3, [pc, #452]	@ (8001988 <writeReg+0x288>)
 80017c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017c8:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017ca:	2240      	movs	r2, #64	@ 0x40
 80017cc:	619a      	str	r2, [r3, #24]
  SWD_WRITE_BIT(parity);
 80017ce:	2f00      	cmp	r7, #0
 80017d0:	d07b      	beq.n	80018ca <writeReg+0x1ca>
 80017d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d6:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017d8:	4d6b      	ldr	r5, [pc, #428]	@ (8001988 <writeReg+0x288>)
 80017da:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017de:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017e0:	2340      	movs	r3, #64	@ 0x40
 80017e2:	61ab      	str	r3, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017e4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80017e8:	61a9      	str	r1, [r5, #24]
 80017ea:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017ec:	61ab      	str	r3, [r5, #24]
 80017ee:	f44f 7780 	mov.w	r7, #256	@ 0x100
 80017f2:	61af      	str	r7, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017f4:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017f6:	61ab      	str	r3, [r5, #24]
  SWD_WRITE_BIT(0);
  SWD_WRITE_BIT(1);
  
  SWDIO_SET_INPUT();
 80017f8:	2200      	movs	r2, #0
 80017fa:	2110      	movs	r1, #16
 80017fc:	4628      	mov	r0, r5
 80017fe:	f003 f91d 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001802:	682a      	ldr	r2, [r5, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	fa97 f3a7 	rbit	r3, r7
  return __builtin_clz(value);
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2103      	movs	r1, #3
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	ea22 0203 	bic.w	r2, r2, r3
 8001818:	462b      	mov	r3, r5
 800181a:	602a      	str	r2, [r5, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800181c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001820:	61aa      	str	r2, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	61aa      	str	r2, [r5, #24]
  
  /* Turnaround */
  SWCLK_CYCLE();
  
  /* Read acknowledge */
  for ( i=0; i<3; i++ ) {
 8001826:	2100      	movs	r1, #0
  uint32_t ack = 0;
 8001828:	460d      	mov	r5, r1
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800182a:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800182e:	4610      	mov	r0, r2
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001830:	619f      	str	r7, [r3, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001832:	691a      	ldr	r2, [r3, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001834:	6198      	str	r0, [r3, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001836:	f3c2 2200 	ubfx	r2, r2, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 800183a:	408a      	lsls	r2, r1
 800183c:	4315      	orrs	r5, r2
  for ( i=0; i<3; i++ ) {
 800183e:	3101      	adds	r1, #1
 8001840:	2903      	cmp	r1, #3
 8001842:	d1f5      	bne.n	8001830 <writeReg+0x130>
  }
  
  if ( ack == ACK_OK || ignoreAck ) 
 8001844:	2d01      	cmp	r5, #1
 8001846:	d002      	beq.n	800184e <writeReg+0x14e>
 8001848:	2e00      	cmp	r6, #0
 800184a:	f000 8095 	beq.w	8001978 <writeReg+0x278>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800184e:	4d4e      	ldr	r5, [pc, #312]	@ (8001988 <writeReg+0x288>)
 8001850:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001854:	61ab      	str	r3, [r5, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001856:	2340      	movs	r3, #64	@ 0x40
 8001858:	61ab      	str	r3, [r5, #24]
  {
    /* Turnaround */
    SWCLK_CYCLE();
  
    SWDIO_SET_OUTPUT();
 800185a:	2201      	movs	r2, #1
 800185c:	2110      	movs	r1, #16
 800185e:	4628      	mov	r0, r5
 8001860:	f003 f8ec 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001864:	6829      	ldr	r1, [r5, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001882:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	430b      	orrs	r3, r1
 8001894:	602b      	str	r3, [r5, #0]
    
    /* Write data */
    parity = 0;
 8001896:	2200      	movs	r2, #0
    for ( i=0; i<32; i++ ) {
 8001898:	4613      	mov	r3, r2
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800189a:	4629      	mov	r1, r5
 800189c:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 80018a0:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018a4:	2540      	movs	r5, #64	@ 0x40
 80018a6:	f44f 7780 	mov.w	r7, #256	@ 0x100
 80018aa:	e01a      	b.n	80018e2 <writeReg+0x1e2>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018ac:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <writeReg+0x288>)
 80018ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	e767      	b.n	8001786 <writeReg+0x86>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018b6:	4b34      	ldr	r3, [pc, #208]	@ (8001988 <writeReg+0x288>)
 80018b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	e774      	b.n	80017aa <writeReg+0xaa>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <writeReg+0x288>)
 80018c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018c6:	619a      	str	r2, [r3, #24]
}
 80018c8:	e77b      	b.n	80017c2 <writeReg+0xc2>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <writeReg+0x288>)
 80018cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018d0:	619a      	str	r2, [r3, #24]
}
 80018d2:	e781      	b.n	80017d8 <writeReg+0xd8>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018d4:	f8c1 c018 	str.w	ip, [r1, #24]
 80018d8:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018da:	618d      	str	r5, [r1, #24]
 80018dc:	3301      	adds	r3, #1
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d00a      	beq.n	80018f8 <writeReg+0x1f8>
      b = (data >> i) & 0x1;
 80018e2:	fa24 f003 	lsr.w	r0, r4, r3
      SWD_WRITE_BIT(b);
 80018e6:	f010 0f01 	tst.w	r0, #1
 80018ea:	d0f3      	beq.n	80018d4 <writeReg+0x1d4>
 80018ec:	618f      	str	r7, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018ee:	618e      	str	r6, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018f0:	618d      	str	r5, [r1, #24]
      if (b) parity = !parity;
 80018f2:	f082 0201 	eor.w	r2, r2, #1
 80018f6:	e7f1      	b.n	80018dc <writeReg+0x1dc>
    }
    
    /* Write parity bit */
    SWD_WRITE_BIT(parity);
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d038      	beq.n	800196e <writeReg+0x26e>
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <writeReg+0x288>)
 80018fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001902:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <writeReg+0x288>)
 8001906:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800190a:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800190c:	2240      	movs	r2, #64	@ 0x40
 800190e:	619a      	str	r2, [r3, #24]
  uint32_t ret = SWD_ERROR_OK;
 8001910:	2501      	movs	r5, #1
  }
    
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
 8001912:	4c1d      	ldr	r4, [pc, #116]	@ (8001988 <writeReg+0x288>)
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4620      	mov	r0, r4
 800191a:	f003 f88f 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800191e:	6821      	ldr	r1, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001924:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800193c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2201      	movs	r2, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	430b      	orrs	r3, r1
 800194e:	6023      	str	r3, [r4, #0]
 8001950:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001952:	4623      	mov	r3, r4
 8001954:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001958:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800195c:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800195e:	619c      	str	r4, [r3, #24]
 8001960:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001962:	6199      	str	r1, [r3, #24]
  for ( i=0; i<8; i++ ) {
 8001964:	3a01      	subs	r2, #1
 8001966:	d1fa      	bne.n	800195e <writeReg+0x25e>
	  SWD_WRITE_BIT(0);
  }
  
  return ret;
  
}
 8001968:	4628      	mov	r0, r5
 800196a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <writeReg+0x288>)
 8001970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	e7c5      	b.n	8001904 <writeReg+0x204>
  else if ( ack == ACK_WAIT ) 
 8001978:	2d02      	cmp	r5, #2
 800197a:	d0ca      	beq.n	8001912 <writeReg+0x212>
    ret = SWD_ERROR_FAULT;
 800197c:	2d04      	cmp	r5, #4
 800197e:	bf14      	ite	ne
 8001980:	2504      	movne	r5, #4
 8001982:	2503      	moveq	r5, #3
 8001984:	e7c5      	b.n	8001912 <writeReg+0x212>
 8001986:	bf00      	nop
 8001988:	40020400 	.word	0x40020400

0800198c <JTAG_to_SWD_Sequence>:
 * Sends the JTAG-to-SWD sequence. This must be performed
 * at the very beginning of every debug session and
 * again in case of a protocol error. 
 **********************************************************/
void JTAG_to_SWD_Sequence(void)
{
 800198c:	b570      	push	{r4, r5, r6, lr}
  int i;
  int b;
  
  SWDIO_SET_OUTPUT();
 800198e:	4c30      	ldr	r4, [pc, #192]	@ (8001a50 <JTAG_to_SWD_Sequence+0xc4>)
 8001990:	2201      	movs	r2, #1
 8001992:	2110      	movs	r1, #16
 8001994:	4620      	mov	r0, r4
 8001996:	f003 f851 	bl	8004a3c <HAL_GPIO_WritePin>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800199a:	6821      	ldr	r1, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a0:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2201      	movs	r2, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	430b      	orrs	r3, r1
 80019ca:	4622      	mov	r2, r4
 80019cc:	6023      	str	r3, [r4, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d2:	61a3      	str	r3, [r4, #24]
 80019d4:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019d6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019da:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019dc:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019de:	6191      	str	r1, [r2, #24]
  
  /* First reset line with > 50 cycles with SWDIO high */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 80019e0:	3b01      	subs	r3, #1
 80019e2:	d1fb      	bne.n	80019dc <JTAG_to_SWD_Sequence+0x50>
    SWCLK_CYCLE();
  }
  
  /* Transmit 16-bit JTAG-to-SWD sequence */
  for ( i=0; i<16; i++ ) {
 80019e4:	2300      	movs	r3, #0
    b = (JTAG2SWD >> i) & 0x1;
 80019e6:	f24e 7c9e 	movw	ip, #59294	@ 0xe79e
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019ea:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <JTAG_to_SWD_Sequence+0xc4>)
 80019ec:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019f0:	f44f 7580 	mov.w	r5, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019f4:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019f8:	2040      	movs	r0, #64	@ 0x40
 80019fa:	fa4c f103 	asr.w	r1, ip, r3
    SWD_WRITE_BIT(b);
 80019fe:	f011 0f01 	tst.w	r1, #1
 8001a02:	bf14      	ite	ne
 8001a04:	6195      	strne	r5, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a06:	6196      	streq	r6, [r2, #24]
 8001a08:	6194      	str	r4, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0a:	6190      	str	r0, [r2, #24]
  for ( i=0; i<16; i++ ) {
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d1f3      	bne.n	80019fa <JTAG_to_SWD_Sequence+0x6e>
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <JTAG_to_SWD_Sequence+0xc4>)
 8001a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <JTAG_to_SWD_Sequence+0xc4>)
 8001a1e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a22:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a24:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a26:	6191      	str	r1, [r2, #24]
  }
  
  /* Do another reset to make sure SW-DP is in reset state */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	d1fb      	bne.n	8001a24 <JTAG_to_SWD_Sequence+0x98>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <JTAG_to_SWD_Sequence+0xc4>)
 8001a2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a32:	619a      	str	r2, [r3, #24]
 8001a34:	2310      	movs	r3, #16
 8001a36:	f102 527c 	add.w	r2, r2, #1056964608	@ 0x3f000000
 8001a3a:	f502 3201 	add.w	r2, r2, #132096	@ 0x20400
 8001a3e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a42:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a44:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a46:	6191      	str	r1, [r2, #24]
    SWCLK_CYCLE();
  }
  
  /* Insert a 16 cycle idle period */
  SWDIO_OUT(0);
  for ( i=0; i<16; i++ ) {
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	d1fb      	bne.n	8001a44 <JTAG_to_SWD_Sequence+0xb8>
    SWCLK_CYCLE();
  }
}
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020400 	.word	0x40020400

08001a54 <writeAP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeAP(int reg, uint32_t data)
{
 8001a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a58:	4606      	mov	r6, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;

  do {
    swdStatus = writeReg(true, reg, data, false);
 8001a5e:	f04f 0800 	mov.w	r8, #0
 8001a62:	2701      	movs	r7, #1
 8001a64:	4643      	mov	r3, r8
 8001a66:	462a      	mov	r2, r5
 8001a68:	4631      	mov	r1, r6
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f7ff fe48 	bl	8001700 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 8001a70:	2802      	cmp	r0, #2
 8001a72:	d10a      	bne.n	8001a8a <writeAP+0x36>
 8001a74:	3c01      	subs	r4, #1
 8001a76:	d1f5      	bne.n	8001a64 <writeAP+0x10>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <writeAP+0x40>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	20a0      	movs	r0, #160	@ 0xa0
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <writeAP+0x44>)
 8001a82:	fb00 3002 	mla	r0, r0, r2, r3
 8001a86:	f7fe fbbb 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001a8a:	2801      	cmp	r0, #1
 8001a8c:	d1f4      	bne.n	8001a78 <writeAP+0x24>
  }
}
 8001a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000188 	.word	0x20000188

08001a9c <writeDP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeDP(int reg, uint32_t data)
{
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	4607      	mov	r7, r0
 8001aa0:	460e      	mov	r6, r1
 8001aa2:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = writeReg(false, reg, data, false);
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	4639      	mov	r1, r7
 8001aac:	4628      	mov	r0, r5
 8001aae:	f7ff fe27 	bl	8001700 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d10a      	bne.n	8001acc <writeDP+0x30>
 8001ab6:	3c01      	subs	r4, #1
 8001ab8:	d1f5      	bne.n	8001aa6 <writeDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <writeDP+0x38>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4601      	mov	r1, r0
 8001ac0:	20a0      	movs	r0, #160	@ 0xa0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <writeDP+0x3c>)
 8001ac4:	fb00 3002 	mla	r0, r0, r2, r3
 8001ac8:	f7fe fb9a 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001acc:	2801      	cmp	r0, #1
 8001ace:	d1f4      	bne.n	8001aba <writeDP+0x1e>
  }
}
 8001ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000188 	.word	0x20000188

08001adc <readAP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readAP(int reg, uint32_t *data)
{
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	4606      	mov	r6, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(true, reg, data);
 8001ae4:	2701      	movs	r7, #1
 8001ae6:	462a      	mov	r2, r5
 8001ae8:	4631      	mov	r1, r6
 8001aea:	4638      	mov	r0, r7
 8001aec:	f7ff fcec 	bl	80014c8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001af0:	2802      	cmp	r0, #2
 8001af2:	d10a      	bne.n	8001b0a <readAP+0x2e>
 8001af4:	3c01      	subs	r4, #1
 8001af6:	d1f6      	bne.n	8001ae6 <readAP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <readAP+0x34>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4601      	mov	r1, r0
 8001afe:	20a0      	movs	r0, #160	@ 0xa0
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <readAP+0x38>)
 8001b02:	fb00 3002 	mla	r0, r0, r2, r3
 8001b06:	f7fe fb7b 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8001b0a:	2801      	cmp	r0, #1
 8001b0c:	d1f4      	bne.n	8001af8 <readAP+0x1c>
  }
}
 8001b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000188 	.word	0x20000188

08001b18 <readDP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readDP(int reg, uint32_t *data)
{
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	4606      	mov	r6, r0
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(false, reg, data);
 8001b20:	2700      	movs	r7, #0
 8001b22:	462a      	mov	r2, r5
 8001b24:	4631      	mov	r1, r6
 8001b26:	4638      	mov	r0, r7
 8001b28:	f7ff fcce 	bl	80014c8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	d10a      	bne.n	8001b46 <readDP+0x2e>
 8001b30:	3c01      	subs	r4, #1
 8001b32:	d1f6      	bne.n	8001b22 <readDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) {
    RAISE(swdStatus);
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <readDP+0x34>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4601      	mov	r1, r0
 8001b3a:	20a0      	movs	r0, #160	@ 0xa0
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <readDP+0x38>)
 8001b3e:	fb00 3002 	mla	r0, r0, r2, r3
 8001b42:	f7fe fb5d 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) {
 8001b46:	2801      	cmp	r0, #1
 8001b48:	d1f4      	bne.n	8001b34 <readDP+0x1c>
  }
}
 8001b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000188 	.word	0x20000188

08001b54 <initDp>:
 * @returns
 *    The value of the IDCODE register
 **********************************************************/
uint32_t test = 0;
uint32_t initDp(void)
{
 8001b54:	b530      	push	{r4, r5, lr}
 8001b56:	b083      	sub	sp, #12
  uint32_t dpId = 0;
 8001b58:	2400      	movs	r4, #0
 8001b5a:	9401      	str	r4, [sp, #4]
  /* If connecting to a Multidrop capable SW-DP (SWD version 2), this 
   * function must be run first. */
  //exitDormantState();
  
  /* Send the JTAG-to-SWD switching sequence */
  JTAG_to_SWD_Sequence();
 8001b5c:	f7ff ff16 	bl	800198c <JTAG_to_SWD_Sequence>
  
  /* Read IDCODE to get the DAP out of reset state */
  readDP(DP_IDCODE, &dpId);
 8001b60:	a901      	add	r1, sp, #4
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ffd8 	bl	8001b18 <readDP>

  /* Debug power up request */
  //khchoi: Sticky error clear & CTRL/STAT Register Clear.(Black Magic Probe)
  writeDP(DP_ABORT, (1 << 2));
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff ff96 	bl	8001a9c <writeDP>
  //writeDP(DP_ABORT, (1 << 3)); //wderrclr
  readDP(DP_CTRL, &test);
 8001b70:	4d18      	ldr	r5, [pc, #96]	@ (8001bd4 <initDp+0x80>)
 8001b72:	4629      	mov	r1, r5
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff ffcf 	bl	8001b18 <readDP>
  writeDP(DP_CTRL, 0);
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff ff8d 	bl	8001a9c <writeDP>
  readDP(DP_CTRL, &test);
 8001b82:	4629      	mov	r1, r5
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff ffc7 	bl	8001b18 <readDP>
  writeDP(DP_CTRL, DP_CTRL_CSYSPWRUPREQ | DP_CTRL_CDBGPWRUPREQ);
 8001b8a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff ff84 	bl	8001a9c <writeDP>
 8001b94:	f44f 7496 	mov.w	r4, #300	@ 0x12c
  /* Wait until we receive powerup ACK */
  int retry = PWRUP_TIMEOUT + 200;
  uint32_t status;
  while ( retry > 0 )
  {
    readDP(DP_CTRL, &status);
 8001b98:	2501      	movs	r5, #1
 8001b9a:	4669      	mov	r1, sp
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f7ff ffbb 	bl	8001b18 <readDP>
    if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
 8001ba2:	9b00      	ldr	r3, [sp, #0]
 8001ba4:	f003 4320 	and.w	r3, r3, #2684354560	@ 0xa0000000
 8001ba8:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8001bac:	d00a      	beq.n	8001bc4 <initDp+0x70>
  while ( retry > 0 )
 8001bae:	3c01      	subs	r4, #1
 8001bb0:	d1f3      	bne.n	8001b9a <initDp+0x46>
  
  /* Throw error if we failed to power up the debug interface */
  if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
              != (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK) )
  {
    RAISE(SWD_ERROR_DEBUG_POWER);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <initDp+0x84>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2115      	movs	r1, #21
 8001bb8:	20a0      	movs	r0, #160	@ 0xa0
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <initDp+0x88>)
 8001bbc:	fb00 3002 	mla	r0, r0, r2, r3
 8001bc0:	f7fe fb1e 	bl	8000200 <longjmp>
  }

  /* Select first AP bank */
  writeDP(DP_SELECT, 0x00);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f7ff ff68 	bl	8001a9c <writeDP>

  return dpId;
 8001bcc:	9801      	ldr	r0, [sp, #4]
}
 8001bce:	b003      	add	sp, #12
 8001bd0:	bd30      	pop	{r4, r5, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000184 	.word	0x20000184
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000188 	.word	0x20000188

08001be0 <readApId>:
 * 
 * @returns
 *    The value of IDR register (address 0xFC) for AP #0
 **********************************************************/
uint32_t readApId(void)
{
 8001be0:	b500      	push	{lr}
 8001be2:	b083      	sub	sp, #12
  uint32_t apId;
  
  /* Select last AP bank */
  writeDP(DP_SELECT, 0xf0);
 8001be4:	21f0      	movs	r1, #240	@ 0xf0
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff ff58 	bl	8001a9c <writeDP>
  
  /* Dummy read AP ID */
  readAP(AP_IDR, &apId);
 8001bec:	a901      	add	r1, sp, #4
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f7ff ff74 	bl	8001adc <readAP>
  
  /* Read AP ID */
  readDP(DP_RDBUFF, &apId);
 8001bf4:	a901      	add	r1, sp, #4
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	f7ff ff8e 	bl	8001b18 <readDP>
  
  /* Select first AP bank again */
  writeDP(DP_SELECT, 0x00);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f7ff ff4c 	bl	8001a9c <writeDP>
  
  return apId;
}
 8001c04:	9801      	ldr	r0, [sp, #4]
 8001c06:	b003      	add	sp, #12
 8001c08:	f85d fb04 	ldr.w	pc, [sp], #4

08001c0c <initAhbAp>:
 * Initalize the AHB-AP. The transfer size must be set
 * to 32-bit before trying to access any internal
 * memory. 
 **********************************************************/
void initAhbAp(void)
{    
 8001c0c:	b508      	push	{r3, lr}
  /* Set transfer size to 32 bit */  
  writeAP(AP_CSW, AP_CSW_DEFAULT);  
 8001c0e:	4902      	ldr	r1, [pc, #8]	@ (8001c18 <initAhbAp+0xc>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff ff1f 	bl	8001a54 <writeAP>
}
 8001c16:	bd08      	pop	{r3, pc}
 8001c18:	22000002 	.word	0x22000002

08001c1c <delayMs>:

/**********************************************************
 * Delay a number of milliseconds
 **********************************************************/
void delayMs(int ms)
{
 8001c1c:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 8001c1e:	f002 fb7b 	bl	8004318 <HAL_Delay>
}
 8001c22:	bd08      	pop	{r3, pc}

08001c24 <delayUs>:
/**********************************************************
 * Delay a number of microseconds
 **********************************************************/
void delayUs(int us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <delayUs+0x14>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < (us-1));  // wait for the counter to reach the us input in the parameter
 8001c2c:	3801      	subs	r0, #1
 8001c2e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001c30:	4283      	cmp	r3, r0
 8001c32:	d3fc      	bcc.n	8001c2e <delayUs+0xa>
}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000fc4 	.word	0x20000fc4

08001c3c <getErrorString>:
jmp_buf swdErrors[EXCEPTION_MAX_LEVEL];
int swdErrorIndex = -1;

char *getErrorString(int errorCode)
{
  switch (errorCode)
 8001c3c:	3801      	subs	r0, #1
 8001c3e:	2814      	cmp	r0, #20
 8001c40:	d834      	bhi.n	8001cac <getErrorString+0x70>
 8001c42:	e8df f000 	tbb	[pc, r0]
 8001c46:	350b      	.short	0x350b
 8001c48:	13110f0d 	.word	0x13110f0d
 8001c4c:	19173115 	.word	0x19173115
 8001c50:	211f1d1b 	.word	0x211f1d1b
 8001c54:	29272523 	.word	0x29272523
 8001c58:	2d2b      	.short	0x2d2b
 8001c5a:	2f          	.byte	0x2f
 8001c5b:	00          	.byte	0x00
  {
  case SWD_ERROR_OK:
    return "No error.";
 8001c5c:	4815      	ldr	r0, [pc, #84]	@ (8001cb4 <getErrorString+0x78>)
 8001c5e:	4770      	bx	lr
  case SWD_ERROR_WAIT:
    return "Timed out while waiting for WAIT response.";
  case SWD_ERROR_FAULT:
    return "Target returned FAULT response.";
 8001c60:	4815      	ldr	r0, [pc, #84]	@ (8001cb8 <getErrorString+0x7c>)
 8001c62:	4770      	bx	lr
  case SWD_ERROR_PROTOCOL:
    return "Protocol error. Target does not respond.";
 8001c64:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <getErrorString+0x80>)
 8001c66:	4770      	bx	lr
  case SWD_ERROR_PARITY:
    return "Parity error.";
 8001c68:	4815      	ldr	r0, [pc, #84]	@ (8001cc0 <getErrorString+0x84>)
 8001c6a:	4770      	bx	lr
  case SWD_ERROR_MCU_LOCKED:
    return "MCU locked.";
 8001c6c:	4815      	ldr	r0, [pc, #84]	@ (8001cc4 <getErrorString+0x88>)
 8001c6e:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDR:
    return "Invalid IDR value.";
 8001c70:	4815      	ldr	r0, [pc, #84]	@ (8001cc8 <getErrorString+0x8c>)
 8001c72:	4770      	bx	lr
  case SWD_ERROR_FLASH_WRITE_FAILED:
    return "Write to flash failed.";
 8001c74:	4815      	ldr	r0, [pc, #84]	@ (8001ccc <getErrorString+0x90>)
 8001c76:	4770      	bx	lr
  case SWD_ERROR_UNLOCK_FAILED:
    return "Failed to unlock target.";
 8001c78:	4815      	ldr	r0, [pc, #84]	@ (8001cd0 <getErrorString+0x94>)
 8001c7a:	4770      	bx	lr
  case SWD_ERROR_AAP_EXTENSION_FAILED:
    return "Unable to access AAP registers. Is the reset pin connected?";
 8001c7c:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <getErrorString+0x98>)
 8001c7e:	4770      	bx	lr
  case SWD_ERROR_LOCK_FAILED:
    return "Failed to lock target.";
 8001c80:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <getErrorString+0x9c>)
 8001c82:	4770      	bx	lr
  case SWD_ERROR_CLR_DLW_FAILED:
    return "Failed to clear Debug Lock Word.";
 8001c84:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <getErrorString+0xa0>)
 8001c86:	4770      	bx	lr
  case SWD_ERROR_MASS_ERASE_TIMEOUT:
    return "Timed out while waiting for Mass Erase to complete.";
 8001c88:	4815      	ldr	r0, [pc, #84]	@ (8001ce0 <getErrorString+0xa4>)
 8001c8a:	4770      	bx	lr
  case SWD_ERROR_VERIFY_FW_FAILED:
    return "Application verification failed.";
 8001c8c:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <getErrorString+0xa8>)
 8001c8e:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_WAITING_RESET:
    return "Timeout while waiting for target to reset.";
 8001c90:	4815      	ldr	r0, [pc, #84]	@ (8001ce8 <getErrorString+0xac>)
 8001c92:	4770      	bx	lr
  case SWD_ERROR_TARGET_NOT_HALTED:
    return "Target is halted.";
 8001c94:	4815      	ldr	r0, [pc, #84]	@ (8001cec <getErrorString+0xb0>)
 8001c96:	4770      	bx	lr
  case SWD_ERROR_FLASHLOADER_ERROR:
    return "Error in flashloader.";
 8001c98:	4815      	ldr	r0, [pc, #84]	@ (8001cf0 <getErrorString+0xb4>)
 8001c9a:	4770      	bx	lr
  case SWD_ERROR_DEVICE_ERASE_FAILED:
    return "Device Erase failed."; 
 8001c9c:	4815      	ldr	r0, [pc, #84]	@ (8001cf4 <getErrorString+0xb8>)
 8001c9e:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_HALT:
    return "Timeout while waiting to halt target.";
 8001ca0:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <getErrorString+0xbc>)
 8001ca2:	4770      	bx	lr
  case SWD_ERROR_DEBUG_POWER:
    return "Failed to power up debug interface.";
 8001ca4:	4815      	ldr	r0, [pc, #84]	@ (8001cfc <getErrorString+0xc0>)
 8001ca6:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDCODE:
    return "Invalid IDCODE.";
 8001ca8:	4815      	ldr	r0, [pc, #84]	@ (8001d00 <getErrorString+0xc4>)
 8001caa:	4770      	bx	lr
  default:
    return "Unknown error.";
 8001cac:	4815      	ldr	r0, [pc, #84]	@ (8001d04 <getErrorString+0xc8>)
 8001cae:	4770      	bx	lr
  switch (errorCode)
 8001cb0:	4815      	ldr	r0, [pc, #84]	@ (8001d08 <getErrorString+0xcc>)
  }
 8001cb2:	4770      	bx	lr
 8001cb4:	0800e4bc 	.word	0x0800e4bc
 8001cb8:	0800e4f4 	.word	0x0800e4f4
 8001cbc:	0800e514 	.word	0x0800e514
 8001cc0:	0800e540 	.word	0x0800e540
 8001cc4:	0800e550 	.word	0x0800e550
 8001cc8:	0800e55c 	.word	0x0800e55c
 8001ccc:	0800e570 	.word	0x0800e570
 8001cd0:	0800e588 	.word	0x0800e588
 8001cd4:	0800e5a4 	.word	0x0800e5a4
 8001cd8:	0800e5e0 	.word	0x0800e5e0
 8001cdc:	0800e5f8 	.word	0x0800e5f8
 8001ce0:	0800e61c 	.word	0x0800e61c
 8001ce4:	0800e650 	.word	0x0800e650
 8001ce8:	0800e674 	.word	0x0800e674
 8001cec:	0800e6a0 	.word	0x0800e6a0
 8001cf0:	0800e6b4 	.word	0x0800e6b4
 8001cf4:	0800e6cc 	.word	0x0800e6cc
 8001cf8:	0800e6e4 	.word	0x0800e6e4
 8001cfc:	0800e70c 	.word	0x0800e70c
 8001d00:	0800e730 	.word	0x0800e730
 8001d04:	0800e740 	.word	0x0800e740
 8001d08:	0800e4c8 	.word	0x0800e4c8

08001d0c <haltTarget>:
/**********************************************************
 * Halts the target CPU
 **********************************************************/

void haltTarget(void)
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b083      	sub	sp, #12
  int timeout = DEBUG_EVENT_TIMEOUT;
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001d10:	4914      	ldr	r1, [pc, #80]	@ (8001d64 <haltTarget+0x58>)
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff fe9e 	bl	8001a54 <writeAP>
  writeAP(AP_DRW, STOP_CMD);
 8001d18:	4913      	ldr	r1, [pc, #76]	@ (8001d68 <haltTarget+0x5c>)
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f7ff fe9a 	bl	8001a54 <writeAP>
 8001d20:	24c8      	movs	r4, #200	@ 0xc8
  
  uint32_t dhcrState;
  do {
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001d22:	4f10      	ldr	r7, [pc, #64]	@ (8001d64 <haltTarget+0x58>)
 8001d24:	2601      	movs	r6, #1
    readAP(AP_DRW, &dhcrState);
 8001d26:	2503      	movs	r5, #3
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 8001d28:	4639      	mov	r1, r7
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	f7ff fe92 	bl	8001a54 <writeAP>
    readAP(AP_DRW, &dhcrState);
 8001d30:	a901      	add	r1, sp, #4
 8001d32:	4628      	mov	r0, r5
 8001d34:	f7ff fed2 	bl	8001adc <readAP>
    readDP(DP_RDBUFF, &dhcrState);
 8001d38:	a901      	add	r1, sp, #4
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f7ff feec 	bl	8001b18 <readDP>
    timeout--;
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 ); 
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d46:	d10a      	bne.n	8001d5e <haltTarget+0x52>
 8001d48:	3c01      	subs	r4, #1
 8001d4a:	d1ed      	bne.n	8001d28 <haltTarget+0x1c>
  
  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
    RAISE(SWD_ERROR_TIMEOUT_HALT);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <haltTarget+0x60>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2114      	movs	r1, #20
 8001d52:	20a0      	movs	r0, #160	@ 0xa0
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <haltTarget+0x64>)
 8001d56:	fb00 3002 	mla	r0, r0, r2, r3
 8001d5a:	f7fe fa51 	bl	8000200 <longjmp>
  }
}
 8001d5e:	b003      	add	sp, #12
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000edf0 	.word	0xe000edf0
 8001d68:	a05f0003 	.word	0xa05f0003
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000188 	.word	0x20000188

08001d74 <hardResetTarget>:

/**********************************************************
 * Performs a pin reset on the target
 **********************************************************/
void hardResetTarget(void)
{
 8001d74:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_RESET);
 8001d76:	4c08      	ldr	r4, [pc, #32]	@ (8001d98 <hardResetTarget+0x24>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f002 fe5c 	bl	8004a3c <HAL_GPIO_WritePin>
    delayMs(50);
 8001d84:	2032      	movs	r0, #50	@ 0x32
 8001d86:	f7ff ff49 	bl	8001c1c <delayMs>
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d90:	4620      	mov	r0, r4
 8001d92:	f002 fe53 	bl	8004a3c <HAL_GPIO_WritePin>
}
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	40020000 	.word	0x40020000

08001d9c <readMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
uint32_t readMem(uint32_t addr)
{
 8001d9c:	b500      	push	{lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	4601      	mov	r1, r0
  uint32_t ret;
  writeAP(AP_TAR, addr);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff fe56 	bl	8001a54 <writeAP>
  readAP(AP_DRW, &ret);
 8001da8:	a901      	add	r1, sp, #4
 8001daa:	2003      	movs	r0, #3
 8001dac:	f7ff fe96 	bl	8001adc <readAP>
  readDP(DP_RDBUFF, &ret);
 8001db0:	a901      	add	r1, sp, #4
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7ff feb0 	bl	8001b18 <readDP>
  return ret;
}
 8001db8:	9801      	ldr	r0, [sp, #4]
 8001dba:	b003      	add	sp, #12
 8001dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001dc0 <writeMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
void writeMem(uint32_t addr, uint32_t data)
{
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	460c      	mov	r4, r1
#if 1
  writeAP(AP_TAR, addr);
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff fe44 	bl	8001a54 <writeAP>
  writeAP(AP_DRW, data);
 8001dcc:	4621      	mov	r1, r4
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f7ff fe40 	bl	8001a54 <writeAP>
  writeAP(AP_TAR, addr);
  writeAP(AP_DRW, data);
  log_message("AP_TAR: 0x%08"PRIX32"\n", addr);
	log_message("AP_DRW: 0x%08"PRIX32"\n", data);
#endif
}
 8001dd4:	bd10      	pop	{r4, pc}
	...

08001dd8 <resetTarget>:
{  
 8001dd8:	b570      	push	{r4, r5, r6, lr}
  writeMem((uint32_t)&(CoreDebug->DEMCR), 0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <resetTarget+0x84>)
 8001dde:	f7ff ffef 	bl	8001dc0 <writeMem>
  readMem((uint32_t)&(CoreDebug->DHCSR));
 8001de2:	4c1f      	ldr	r4, [pc, #124]	@ (8001e60 <resetTarget+0x88>)
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff ffd9 	bl	8001d9c <readMem>
  dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff ffd6 	bl	8001d9c <readMem>
  writeMem((uint32_t)&(SCB->AIRCR), AIRCR_RESET_CMD);
 8001df0:	491c      	ldr	r1, [pc, #112]	@ (8001e64 <resetTarget+0x8c>)
 8001df2:	481d      	ldr	r0, [pc, #116]	@ (8001e68 <resetTarget+0x90>)
 8001df4:	f7ff ffe4 	bl	8001dc0 <writeMem>
  delayUs(100);
 8001df8:	2064      	movs	r0, #100	@ 0x64
 8001dfa:	f7ff ff13 	bl	8001c24 <delayUs>
 8001dfe:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 8001e00:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e02:	4d17      	ldr	r5, [pc, #92]	@ (8001e60 <resetTarget+0x88>)
    delayUs(10);
 8001e04:	4630      	mov	r0, r6
 8001e06:	f7ff ff0d 	bl	8001c24 <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff ffc6 	bl	8001d9c <readMem>
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 8001e10:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8001e14:	d10a      	bne.n	8001e2c <resetTarget+0x54>
 8001e16:	3c01      	subs	r4, #1
 8001e18:	d1f4      	bne.n	8001e04 <resetTarget+0x2c>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <resetTarget+0x94>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2110      	movs	r1, #16
 8001e20:	20a0      	movs	r0, #160	@ 0xa0
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <resetTarget+0x98>)
 8001e24:	fb00 3002 	mla	r0, r0, r2, r3
 8001e28:	f7fe f9ea 	bl	8000200 <longjmp>
 8001e2c:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 8001e2e:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e30:	4d0b      	ldr	r5, [pc, #44]	@ (8001e60 <resetTarget+0x88>)
    delayUs(10);
 8001e32:	4630      	mov	r0, r6
 8001e34:	f7ff fef6 	bl	8001c24 <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f7ff ffaf 	bl	8001d9c <readMem>
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 8001e3e:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8001e42:	d00a      	beq.n	8001e5a <resetTarget+0x82>
 8001e44:	3c01      	subs	r4, #1
 8001e46:	d1f4      	bne.n	8001e32 <resetTarget+0x5a>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <resetTarget+0x94>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	20a0      	movs	r0, #160	@ 0xa0
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <resetTarget+0x98>)
 8001e52:	fb00 3002 	mla	r0, r0, r2, r3
 8001e56:	f7fe f9d3 	bl	8000200 <longjmp>
}
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
 8001e5c:	e000edfc 	.word	0xe000edfc
 8001e60:	e000edf0 	.word	0xe000edf0
 8001e64:	05fa0004 	.word	0x05fa0004
 8001e68:	e000ed0c 	.word	0xe000ed0c
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000188 	.word	0x20000188

08001e74 <verifyDpId>:
 * Returns true if the @param dpId is a valid
 * IDCODE value. 
 **********************************************************/
bool verifyDpId(uint32_t dpId)
{
  if ( dpId == STM32C0_SWDP_ID )
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <verifyDpId+0x20>)
 8001e76:	4298      	cmp	r0, r3
 8001e78:	d00a      	beq.n	8001e90 <verifyDpId+0x1c>
  {
    return true;
  }
  else if ( dpId == STM32H7_SWDP_ID )
 8001e7a:	f103 43bf 	add.w	r3, r3, #1602224128	@ 0x5f800000
 8001e7e:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 8001e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e86:	4298      	cmp	r0, r3
 8001e88:	bf14      	ite	ne
 8001e8a:	2000      	movne	r0, #0
 8001e8c:	2001      	moveq	r0, #1
 8001e8e:	4770      	bx	lr
    return true;
 8001e90:	2001      	movs	r0, #1
  } 
  else 
  {
    return false;
  }
}
 8001e92:	4770      	bx	lr
 8001e94:	0bc11477 	.word	0x0bc11477

08001e98 <verifyAhbApId>:
 * Returns true if the @param apId is a valid
 * IDR value for the AHB-AP. 
 **********************************************************/
bool verifyAhbApId(uint32_t apId)
{
  if ( apId == STM32_AHBAP_ID_1 )
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <verifyAhbApId+0x1c>)
 8001e9a:	4298      	cmp	r0, r3
 8001e9c:	d007      	beq.n	8001eae <verifyAhbApId+0x16>
  {
    return true; // Valid for G, LG, GG, TG, WG
  }
  else if ( apId == STM32_AHBAP_ID_2 )
 8001e9e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001ea2:	3b30      	subs	r3, #48	@ 0x30
 8001ea4:	4298      	cmp	r0, r3
 8001ea6:	bf14      	ite	ne
 8001ea8:	2000      	movne	r0, #0
 8001eaa:	2001      	moveq	r0, #1
 8001eac:	4770      	bx	lr
    return true; // Valid for G, LG, GG, TG, WG
 8001eae:	2001      	movs	r0, #1
  } 
  else 
  {
    return false;
  }
}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	04770031 	.word	0x04770031

08001eb8 <connectToTarget>:
 * Performs the initialization sequence on the SW-DP. 
 * After this completes the debug interface can be used. 
 * Raises an exception on any error during connection. 
 **********************************************************/
void connectToTarget(Target_InfoTypeDef *target)
{
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4605      	mov	r5, r0
  delayUs(500);
 8001ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ec0:	f7ff feb0 	bl	8001c24 <delayUs>
  target->TargetDpId = initDp();
 8001ec4:	f7ff fe46 	bl	8001b54 <initDp>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	6028      	str	r0, [r5, #0]
  /* Verify that the DP returns the correct ID */
  if ( !verifyDpId(target->TargetDpId) )
 8001ecc:	f7ff ffd2 	bl	8001e74 <verifyDpId>
 8001ed0:	b168      	cbz	r0, 8001eee <connectToTarget+0x36>
 8001ed2:	2414      	movs	r4, #20
  
  /* Verify that the AP returns the correct ID */
  int retry = AHB_IDR_RETRY_COUNT;
  while ( retry > 0 )
  {
    target->TargetApId = readApId();
 8001ed4:	f7ff fe84 	bl	8001be0 <readApId>
 8001ed8:	6068      	str	r0, [r5, #4]
    if ( verifyAhbApId(target->TargetApId) )
 8001eda:	f7ff ffdd 	bl	8001e98 <verifyAhbApId>
 8001ede:	b908      	cbnz	r0, 8001ee4 <connectToTarget+0x2c>
  while ( retry > 0 )
 8001ee0:	3c01      	subs	r4, #1
 8001ee2:	d1f7      	bne.n	8001ed4 <connectToTarget+0x1c>
    retry--;
  }
    
  /* Set up parameters for AHB-AP. This must be done before accessing
   * internal memory. */
  initAhbAp();
 8001ee4:	f7ff fe92 	bl	8001c0c <initAhbAp>
  haltTarget();
 8001ee8:	f7ff ff10 	bl	8001d0c <haltTarget>
}
 8001eec:	bd38      	pop	{r3, r4, r5, pc}
    printf("Read IDCODE = 0x%08"PRIX32"\n", target->TargetDpId);
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <connectToTarget+0x50>)
 8001ef2:	f00b f961 	bl	800d1b8 <iprintf>
    RAISE(SWD_ERROR_INVALID_IDCODE);
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <connectToTarget+0x54>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2108      	movs	r1, #8
 8001efc:	20a0      	movs	r0, #160	@ 0xa0
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <connectToTarget+0x58>)
 8001f00:	fb00 3002 	mla	r0, r0, r2, r3
 8001f04:	f7fe f97c 	bl	8000200 <longjmp>
 8001f08:	0800e750 	.word	0x0800e750
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000188 	.word	0x20000188

08001f14 <Target_ProgramCallback_STM32H7>:
}
#endif

// Callback function to program the Stm32h7 flash memory
static bool Target_ProgramCallback_STM32H7(uint32_t address, const uint8_t *data, uint8_t data_size)
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4615      	mov	r5, r2
    if (data_size % 2 != 0 || data_size > 32) {
        //return false;
    }

    // combined_offset이 0일 때 현재 주소를 업데이트
    if (combined_offset == 0) {
 8001f18:	4b33      	ldr	r3, [pc, #204]	@ (8001fe8 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f1a:	781c      	ldrb	r4, [r3, #0]
 8001f1c:	b90c      	cbnz	r4, 8001f22 <Target_ProgramCallback_STM32H7+0xe>
        current_address = address;
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <Target_ProgramCallback_STM32H7+0xd8>)
 8001f20:	6018      	str	r0, [r3, #0]
    }

    // 데이터를 combined_data에 복사
    memcpy(combined_data + combined_offset, data, data_size);
 8001f22:	462a      	mov	r2, r5
 8001f24:	4832      	ldr	r0, [pc, #200]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001f26:	4420      	add	r0, r4
 8001f28:	f00b fb97 	bl	800d65a <memcpy>
    combined_offset += data_size;
 8001f2c:	442c      	add	r4, r5
 8001f2e:	b2e4      	uxtb	r4, r4
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f32:	701c      	strb	r4, [r3, #0]

    // 프로그래밍할 워드 크기 결정 (TargetDevId에 따라)
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <Target_ProgramCallback_STM32H7+0xe0>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001f3c:	bf14      	ite	ne
 8001f3e:	2208      	movne	r2, #8
 8001f40:	2204      	moveq	r2, #4
    uint8_t bytes_to_program = words_to_program * 4;
 8001f42:	0096      	lsls	r6, r2, #2

    // 충분한 데이터가 쌓였을 때 플래시 프로그래밍 수행
    if (combined_offset >= bytes_to_program) {
 8001f44:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 8001f48:	d210      	bcs.n	8001f6c <Target_ProgramCallback_STM32H7+0x58>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
        }
    }

    // 마지막 호출이며 combined_offset이 0이 아닐 때, 남은 데이터를 패딩하여 프로그래밍
    if (data_size == 0 && combined_offset > 0) {
 8001f4a:	bb65      	cbnz	r5, 8001fa6 <Target_ProgramCallback_STM32H7+0x92>
 8001f4c:	b36c      	cbz	r4, 8001faa <Target_ProgramCallback_STM32H7+0x96>
        // 0xFF로 패딩하여 워드 크기를 맞춤
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <Target_ProgramCallback_STM32H7+0xe0>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001f56:	d02c      	beq.n	8001fb2 <Target_ProgramCallback_STM32H7+0x9e>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8001f58:	f1c4 0220 	rsb	r2, r4, #32
 8001f5c:	21ff      	movs	r1, #255	@ 0xff
 8001f5e:	4824      	ldr	r0, [pc, #144]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001f60:	4420      	add	r0, r4
 8001f62:	f00b faff 	bl	800d564 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001f66:	2420      	movs	r4, #32
        combined_offset = padding_size;

        // 플래시 메모리 프로그래밍
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8001f68:	2208      	movs	r2, #8
 8001f6a:	e02b      	b.n	8001fc4 <Target_ProgramCallback_STM32H7+0xb0>
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8001f6c:	4920      	ldr	r1, [pc, #128]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <Target_ProgramCallback_STM32H7+0xd8>)
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	f001 f8ab 	bl	80030cc <Stm32h7_Flash_Program>
 8001f76:	b9a0      	cbnz	r0, 8001fa2 <Target_ProgramCallback_STM32H7+0x8e>
        current_address += bytes_to_program;
 8001f78:	4a1c      	ldr	r2, [pc, #112]	@ (8001fec <Target_ProgramCallback_STM32H7+0xd8>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	4433      	add	r3, r6
 8001f7e:	6013      	str	r3, [r2, #0]
        combined_offset -= bytes_to_program;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <Target_ProgramCallback_STM32H7+0xd4>)
 8001f82:	781c      	ldrb	r4, [r3, #0]
 8001f84:	1ba4      	subs	r4, r4, r6
 8001f86:	b2e4      	uxtb	r4, r4
 8001f88:	701c      	strb	r4, [r3, #0]
        if (combined_offset > 0) {
 8001f8a:	b90c      	cbnz	r4, 8001f90 <Target_ProgramCallback_STM32H7+0x7c>
        current_address += padding_size;

        // combined_offset 초기화
        combined_offset = 0;
    }
    return true;
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	e00b      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
 8001f90:	4817      	ldr	r0, [pc, #92]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001f92:	4622      	mov	r2, r4
 8001f94:	1981      	adds	r1, r0, r6
 8001f96:	f00b facb 	bl	800d530 <memmove>
    if (data_size == 0 && combined_offset > 0) {
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	d0d7      	beq.n	8001f4e <Target_ProgramCallback_STM32H7+0x3a>
    return true;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e002      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	e000      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
    return true;
 8001fa6:	2001      	movs	r0, #1
}
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
    return true;
 8001faa:	2001      	movs	r0, #1
 8001fac:	e7fc      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8001fae:	2000      	movs	r0, #0
 8001fb0:	e7fa      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8001fb2:	f1c4 0210 	rsb	r2, r4, #16
 8001fb6:	21ff      	movs	r1, #255	@ 0xff
 8001fb8:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001fba:	4420      	add	r0, r4
 8001fbc:	f00b fad2 	bl	800d564 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8001fc0:	2410      	movs	r4, #16
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8001fc2:	2204      	movs	r2, #4
        combined_offset = padding_size;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <Target_ProgramCallback_STM32H7+0xd4>)
 8001fc6:	701c      	strb	r4, [r3, #0]
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8001fc8:	4909      	ldr	r1, [pc, #36]	@ (8001ff0 <Target_ProgramCallback_STM32H7+0xdc>)
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <Target_ProgramCallback_STM32H7+0xd8>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f001 f87d 	bl	80030cc <Stm32h7_Flash_Program>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d1eb      	bne.n	8001fae <Target_ProgramCallback_STM32H7+0x9a>
        current_address += padding_size;
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <Target_ProgramCallback_STM32H7+0xd8>)
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	4423      	add	r3, r4
 8001fdc:	6013      	str	r3, [r2, #0]
        combined_offset = 0;
 8001fde:	4b02      	ldr	r3, [pc, #8]	@ (8001fe8 <Target_ProgramCallback_STM32H7+0xd4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
    return true;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7df      	b.n	8001fa8 <Target_ProgramCallback_STM32H7+0x94>
 8001fe8:	20000e2c 	.word	0x20000e2c
 8001fec:	20000e28 	.word	0x20000e28
 8001ff0:	20000e08 	.word	0x20000e08
 8001ff4:	20000e30 	.word	0x20000e30

08001ff8 <Target_ProgramCallback_STM32C0>:
	for (uint32_t i = 0; i < bufsize; i += 8)
 8001ff8:	b36a      	cbz	r2, 8002056 <Target_ProgramCallback_STM32C0+0x5e>
{
 8001ffa:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	4607      	mov	r7, r0
 8002002:	4690      	mov	r8, r2
 8002004:	460d      	mov	r5, r1
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002006:	4616      	mov	r6, r2
 8002008:	2400      	movs	r4, #0
		tmp = 0xFFFFFFFFFFFFFFFF;
 800200a:	f04f 3aff 	mov.w	sl, #4294967295
 800200e:	f04f 3bff 	mov.w	fp, #4294967295
 8002012:	e00e      	b.n	8002032 <Target_ProgramCallback_STM32C0+0x3a>
			tmp = ((uint64_t*)(&buf[i]))[0];
 8002014:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002018:	e9cd 2300 	strd	r2, r3, [sp]
		status = Stm32c0_Flash_Program(addr + i, tmp);
 800201c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002020:	1938      	adds	r0, r7, r4
 8002022:	f000 fe6b 	bl	8002cfc <Stm32c0_Flash_Program>
		if (status != TARGET_OK)
 8002026:	b970      	cbnz	r0, 8002046 <Target_ProgramCallback_STM32C0+0x4e>
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002028:	3408      	adds	r4, #8
 800202a:	3e08      	subs	r6, #8
 800202c:	3508      	adds	r5, #8
 800202e:	4544      	cmp	r4, r8
 8002030:	d20f      	bcs.n	8002052 <Target_ProgramCallback_STM32C0+0x5a>
		tmp = 0xFFFFFFFFFFFFFFFF;
 8002032:	e9cd ab00 	strd	sl, fp, [sp]
		if (bufsize - i >= 8) {
 8002036:	2e07      	cmp	r6, #7
 8002038:	d8ec      	bhi.n	8002014 <Target_ProgramCallback_STM32C0+0x1c>
			memcpy(&tmp, &buf[i], bufsize - i);
 800203a:	4632      	mov	r2, r6
 800203c:	4629      	mov	r1, r5
 800203e:	4668      	mov	r0, sp
 8002040:	f00b fb0b 	bl	800d65a <memcpy>
 8002044:	e7ea      	b.n	800201c <Target_ProgramCallback_STM32C0+0x24>
			Stm32c0_Flash_Lock();
 8002046:	f000 fdef 	bl	8002c28 <Stm32c0_Flash_Lock>
			return false;
 800204a:	2000      	movs	r0, #0
}
 800204c:	b002      	add	sp, #8
 800204e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	return true;
 8002052:	2001      	movs	r0, #1
 8002054:	e7fa      	b.n	800204c <Target_ProgramCallback_STM32C0+0x54>
 8002056:	2001      	movs	r0, #1
}
 8002058:	4770      	bx	lr
	...

0800205c <__io_putchar>:
{
 800205c:	b500      	push	{lr}
 800205e:	b083      	sub	sp, #12
 8002060:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002062:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002066:	2201      	movs	r2, #1
 8002068:	a901      	add	r1, sp, #4
 800206a:	4803      	ldr	r0, [pc, #12]	@ (8002078 <__io_putchar+0x1c>)
 800206c:	f005 fd8d 	bl	8007b8a <HAL_UART_Transmit>
}
 8002070:	9801      	ldr	r0, [sp, #4]
 8002072:	b003      	add	sp, #12
 8002074:	f85d fb04 	ldr.w	pc, [sp], #4
 8002078:	20000f7c 	.word	0x20000f7c

0800207c <log_message>:
{
 800207c:	b40f      	push	{r0, r1, r2, r3}
 800207e:	b510      	push	{r4, lr}
 8002080:	b0d6      	sub	sp, #344	@ 0x158
 8002082:	ab58      	add	r3, sp, #352	@ 0x160
 8002084:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002088:	9315      	str	r3, [sp, #84]	@ 0x54
    vsnprintf(buffer, sizeof(buffer), format, args);
 800208a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208e:	a816      	add	r0, sp, #88	@ 0x58
 8002090:	f00b f9ac 	bl	800d3ec <vsniprintf>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002094:	4c1b      	ldr	r4, [pc, #108]	@ (8002104 <log_message+0x88>)
 8002096:	2200      	movs	r2, #0
 8002098:	a910      	add	r1, sp, #64	@ 0x40
 800209a:	4620      	mov	r0, r4
 800209c:	f003 fff7 	bl	800608e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80020a0:	2200      	movs	r2, #0
 80020a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80020a4:	4620      	mov	r0, r4
 80020a6:	f004 f818 	bl	80060da <HAL_RTC_GetDate>
    uint32_t SecondFraction = hrtc.Init.SynchPrediv;
 80020aa:	68e1      	ldr	r1, [r4, #12]
             2000 + sDate.Year, sDate.Month, sDate.Date,
 80020ac:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 80020b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80020b2:	1a8a      	subs	r2, r1, r2
 80020b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020b8:	fb00 f202 	mul.w	r2, r0, r2
 80020bc:	3101      	adds	r1, #1
 80020be:	fbb2 f2f1 	udiv	r2, r2, r1
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 80020c2:	9205      	str	r2, [sp, #20]
 80020c4:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 80020c8:	9204      	str	r2, [sp, #16]
 80020ca:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 80020ce:	9203      	str	r2, [sp, #12]
 80020d0:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 80020d4:	9202      	str	r2, [sp, #8]
 80020d6:	f89d 203e 	ldrb.w	r2, [sp, #62]	@ 0x3e
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <log_message+0x8c>)
 80020e8:	2120      	movs	r1, #32
 80020ea:	a807      	add	r0, sp, #28
 80020ec:	f00b f8dc 	bl	800d2a8 <sniprintf>
    printf("[%s] %s", time_str, buffer);
 80020f0:	aa16      	add	r2, sp, #88	@ 0x58
 80020f2:	a907      	add	r1, sp, #28
 80020f4:	4805      	ldr	r0, [pc, #20]	@ (800210c <log_message+0x90>)
 80020f6:	f00b f85f 	bl	800d1b8 <iprintf>
}
 80020fa:	b056      	add	sp, #344	@ 0x158
 80020fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002100:	b004      	add	sp, #16
 8002102:	4770      	bx	lr
 8002104:	200011f0 	.word	0x200011f0
 8002108:	0800e768 	.word	0x0800e768
 800210c:	0800e78c 	.word	0x0800e78c

08002110 <Target_Connect>:
{
 8002110:	b510      	push	{r4, lr}
  log_message("Target Connect\n");
 8002112:	4858      	ldr	r0, [pc, #352]	@ (8002274 <Target_Connect+0x164>)
 8002114:	f7ff ffb2 	bl	800207c <log_message>
  hardResetTarget();
 8002118:	f7ff fe2c 	bl	8001d74 <hardResetTarget>
  delayMs(50);
 800211c:	2032      	movs	r0, #50	@ 0x32
 800211e:	f7ff fd7d 	bl	8001c1c <delayMs>
		TRY
 8002122:	4b55      	ldr	r3, [pc, #340]	@ (8002278 <Target_Connect+0x168>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	3001      	adds	r0, #1
 8002128:	6018      	str	r0, [r3, #0]
 800212a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800212e:	4b53      	ldr	r3, [pc, #332]	@ (800227c <Target_Connect+0x16c>)
 8002130:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8002134:	f7fe f85c 	bl	80001f0 <setjmp>
 8002138:	2800      	cmp	r0, #0
 800213a:	f040 808c 	bne.w	8002256 <Target_Connect+0x146>
			connectToTarget(&target);
 800213e:	4c50      	ldr	r4, [pc, #320]	@ (8002280 <Target_Connect+0x170>)
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff feb9 	bl	8001eb8 <connectToTarget>
    switch(target->TargetDpId)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	4a4e      	ldr	r2, [pc, #312]	@ (8002284 <Target_Connect+0x174>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00e      	beq.n	800216c <Target_Connect+0x5c>
 800214e:	f102 42bf 	add.w	r2, r2, #1602224128	@ 0x5f800000
 8002152:	f502 02be 	add.w	r2, r2, #6225920	@ 0x5f0000
 8002156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800215a:	4293      	cmp	r3, r2
 800215c:	d01b      	beq.n	8002196 <Target_Connect+0x86>
            log_message("Unsupported Device Family\n");
 800215e:	484a      	ldr	r0, [pc, #296]	@ (8002288 <Target_Connect+0x178>)
 8002160:	f7ff ff8c 	bl	800207c <log_message>
			swdErrorIndex = 0;
 8002164:	2000      	movs	r0, #0
 8002166:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <Target_Connect+0x168>)
 8002168:	6018      	str	r0, [r3, #0]
    	return TARGET_OK;
 800216a:	e081      	b.n	8002270 <Target_Connect+0x160>
    target->TargetFamily = TARGET_STM32C0;
 800216c:	4b44      	ldr	r3, [pc, #272]	@ (8002280 <Target_Connect+0x170>)
 800216e:	2205      	movs	r2, #5
 8002170:	721a      	strb	r2, [r3, #8]
    uint32_t tmp = readMem(STM32C0_REG_DEVICE_ID);
 8002172:	4846      	ldr	r0, [pc, #280]	@ (800228c <Target_Connect+0x17c>)
 8002174:	f7ff fe12 	bl	8001d9c <readMem>
    target->TargetDevId = tmp & 0xFFF;
 8002178:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 800217c:	0c00      	lsrs	r0, r0, #16
    target->TargetDevId = tmp & 0xFFF;
 800217e:	4b40      	ldr	r3, [pc, #256]	@ (8002280 <Target_Connect+0x170>)
 8002180:	60d9      	str	r1, [r3, #12]
    target->TargetRevId = tmp >> 16;
 8002182:	6118      	str	r0, [r3, #16]
    switch(target->TargetFamily)
 8002184:	7a1b      	ldrb	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d00f      	beq.n	80021aa <Target_Connect+0x9a>
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d021      	beq.n	80021d2 <Target_Connect+0xc2>
            log_message("Unknown Target Family\n");
 800218e:	4840      	ldr	r0, [pc, #256]	@ (8002290 <Target_Connect+0x180>)
 8002190:	f7ff ff74 	bl	800207c <log_message>
            break;
 8002194:	e7e6      	b.n	8002164 <Target_Connect+0x54>
    target->TargetFamily = TARGET_STM32H7;
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <Target_Connect+0x170>)
 8002198:	220f      	movs	r2, #15
 800219a:	721a      	strb	r2, [r3, #8]
    uint32_t tmp = readMem(STM32H7_REG_DEVICE_ID);
 800219c:	483d      	ldr	r0, [pc, #244]	@ (8002294 <Target_Connect+0x184>)
 800219e:	f7ff fdfd 	bl	8001d9c <readMem>
    target->TargetDevId = tmp & 0xFFF;
 80021a2:	f3c0 010b 	ubfx	r1, r0, #0, #12
    target->TargetRevId = tmp >> 16;
 80021a6:	0c00      	lsrs	r0, r0, #16
}
 80021a8:	e7e9      	b.n	800217e <Target_Connect+0x6e>
    switch(target->TargetDevId)
 80021aa:	f240 4343 	movw	r3, #1091	@ 0x443
 80021ae:	4299      	cmp	r1, r3
 80021b0:	d007      	beq.n	80021c2 <Target_Connect+0xb2>
 80021b2:	f240 4353 	movw	r3, #1107	@ 0x453
 80021b6:	4299      	cmp	r1, r3
 80021b8:	d007      	beq.n	80021ca <Target_Connect+0xba>
            log_message("Unknown STM32C0 Device ID: 0x%03X\n", target->TargetDevId);
 80021ba:	4837      	ldr	r0, [pc, #220]	@ (8002298 <Target_Connect+0x188>)
 80021bc:	f7ff ff5e 	bl	800207c <log_message>
            break;
 80021c0:	e7d0      	b.n	8002164 <Target_Connect+0x54>
            log_message("STM32C011xx\n");
 80021c2:	4836      	ldr	r0, [pc, #216]	@ (800229c <Target_Connect+0x18c>)
 80021c4:	f7ff ff5a 	bl	800207c <log_message>
            break;
 80021c8:	e7cc      	b.n	8002164 <Target_Connect+0x54>
            log_message("STM32C031xx\n");
 80021ca:	4835      	ldr	r0, [pc, #212]	@ (80022a0 <Target_Connect+0x190>)
 80021cc:	f7ff ff56 	bl	800207c <log_message>
            break;
 80021d0:	e7c8      	b.n	8002164 <Target_Connect+0x54>
    switch(target->TargetDevId)
 80021d2:	f5b1 6f90 	cmp.w	r1, #1152	@ 0x480
 80021d6:	d00a      	beq.n	80021ee <Target_Connect+0xde>
 80021d8:	f240 4383 	movw	r3, #1155	@ 0x483
 80021dc:	4299      	cmp	r1, r3
 80021de:	d01b      	beq.n	8002218 <Target_Connect+0x108>
 80021e0:	f5b1 6f8a 	cmp.w	r1, #1104	@ 0x450
 80021e4:	d022      	beq.n	800222c <Target_Connect+0x11c>
            log_message("Unknown STM32H7 Device ID: 0x%03X\n", target->TargetDevId);
 80021e6:	482f      	ldr	r0, [pc, #188]	@ (80022a4 <Target_Connect+0x194>)
 80021e8:	f7ff ff48 	bl	800207c <log_message>
            break;
 80021ec:	e7ba      	b.n	8002164 <Target_Connect+0x54>
            log_message("STM32H7A3/7B3/7B0\n");
 80021ee:	482e      	ldr	r0, [pc, #184]	@ (80022a8 <Target_Connect+0x198>)
 80021f0:	f7ff ff44 	bl	800207c <log_message>
            uint32_t tmp = readMem(STM32H7_FLASH_SIZE_REG2);
 80021f4:	482d      	ldr	r0, [pc, #180]	@ (80022ac <Target_Connect+0x19c>)
 80021f6:	f7ff fdd1 	bl	8001d9c <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 80021fa:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 80021fe:	bf18      	it	ne
 8002200:	2201      	movne	r2, #1
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <Target_Connect+0x170>)
 8002204:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002206:	492a      	ldr	r1, [pc, #168]	@ (80022b0 <Target_Connect+0x1a0>)
 8002208:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <Target_Connect+0x1a4>)
 800220a:	2880      	cmp	r0, #128	@ 0x80
 800220c:	bf18      	it	ne
 800220e:	4619      	movne	r1, r3
 8002210:	4829      	ldr	r0, [pc, #164]	@ (80022b8 <Target_Connect+0x1a8>)
 8002212:	f7ff ff33 	bl	800207c <log_message>
            break;
 8002216:	e7a5      	b.n	8002164 <Target_Connect+0x54>
            log_message("STM32H72x, STM32H73x\n");
 8002218:	4828      	ldr	r0, [pc, #160]	@ (80022bc <Target_Connect+0x1ac>)
 800221a:	f7ff ff2f 	bl	800207c <log_message>
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_DUALBANK;
 800221e:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <Target_Connect+0x170>)
 8002220:	2201      	movs	r2, #1
 8002222:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: Dual\n");
 8002224:	4826      	ldr	r0, [pc, #152]	@ (80022c0 <Target_Connect+0x1b0>)
 8002226:	f7ff ff29 	bl	800207c <log_message>
            break;
 800222a:	e79b      	b.n	8002164 <Target_Connect+0x54>
            log_message("STM32H742, STM32H743/753, STM32H750, STM32H745/755, STM32H747/757\n");
 800222c:	4825      	ldr	r0, [pc, #148]	@ (80022c4 <Target_Connect+0x1b4>)
 800222e:	f7ff ff25 	bl	800207c <log_message>
            tmp = readMem(STM32H7_FLASH_SIZE_REG1);
 8002232:	4825      	ldr	r0, [pc, #148]	@ (80022c8 <Target_Connect+0x1b8>)
 8002234:	f7ff fdb2 	bl	8001d9c <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002238:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 800223c:	bf18      	it	ne
 800223e:	2201      	movne	r2, #1
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <Target_Connect+0x170>)
 8002242:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002244:	491a      	ldr	r1, [pc, #104]	@ (80022b0 <Target_Connect+0x1a0>)
 8002246:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <Target_Connect+0x1a4>)
 8002248:	2880      	cmp	r0, #128	@ 0x80
 800224a:	bf18      	it	ne
 800224c:	4619      	movne	r1, r3
 800224e:	481a      	ldr	r0, [pc, #104]	@ (80022b8 <Target_Connect+0x1a8>)
 8002250:	f7ff ff14 	bl	800207c <log_message>
            break;
 8002254:	e786      	b.n	8002164 <Target_Connect+0x54>
    	log_message("SWD Error: %s\n", getErrorString(errorCode));
 8002256:	f7ff fcf1 	bl	8001c3c <getErrorString>
 800225a:	4601      	mov	r1, r0
 800225c:	481b      	ldr	r0, [pc, #108]	@ (80022cc <Target_Connect+0x1bc>)
 800225e:	f7ff ff0d 	bl	800207c <log_message>
    	log_message("Failed to connect. Retrying...\n");
 8002262:	481b      	ldr	r0, [pc, #108]	@ (80022d0 <Target_Connect+0x1c0>)
 8002264:	f7ff ff0a 	bl	800207c <log_message>
    	delayMs(200);
 8002268:	20c8      	movs	r0, #200	@ 0xc8
 800226a:	f7ff fcd7 	bl	8001c1c <delayMs>
    	return TARGET_ERROR;
 800226e:	2001      	movs	r0, #1
}
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	0800e7a4 	.word	0x0800e7a4
 8002278:	20000000 	.word	0x20000000
 800227c:	20000188 	.word	0x20000188
 8002280:	20000e30 	.word	0x20000e30
 8002284:	0bc11477 	.word	0x0bc11477
 8002288:	0800e7b4 	.word	0x0800e7b4
 800228c:	40015800 	.word	0x40015800
 8002290:	0800e8cc 	.word	0x0800e8cc
 8002294:	5c001000 	.word	0x5c001000
 8002298:	0800e7f0 	.word	0x0800e7f0
 800229c:	0800e7d0 	.word	0x0800e7d0
 80022a0:	0800e7e0 	.word	0x0800e7e0
 80022a4:	0800e8a8 	.word	0x0800e8a8
 80022a8:	0800e814 	.word	0x0800e814
 80022ac:	08fff80c 	.word	0x08fff80c
 80022b0:	0800e79c 	.word	0x0800e79c
 80022b4:	0800e794 	.word	0x0800e794
 80022b8:	0800e828 	.word	0x0800e828
 80022bc:	0800e838 	.word	0x0800e838
 80022c0:	0800e850 	.word	0x0800e850
 80022c4:	0800e864 	.word	0x0800e864
 80022c8:	1ff1e880 	.word	0x1ff1e880
 80022cc:	0800e8e4 	.word	0x0800e8e4
 80022d0:	0800e8f4 	.word	0x0800e8f4

080022d4 <Target_GetFlashStartAddress>:
{
 80022d4:	b508      	push	{r3, lr}
    switch(target.TargetFamily)
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <Target_GetFlashStartAddress+0x24>)
 80022d8:	7a1a      	ldrb	r2, [r3, #8]
 80022da:	2a0f      	cmp	r2, #15
 80022dc:	d805      	bhi.n	80022ea <Target_GetFlashStartAddress+0x16>
 80022de:	f249 0320 	movw	r3, #36896	@ 0x9020
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	f013 0f01 	tst.w	r3, #1
 80022e8:	d102      	bne.n	80022f0 <Target_GetFlashStartAddress+0x1c>
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 80022ea:	4804      	ldr	r0, [pc, #16]	@ (80022fc <Target_GetFlashStartAddress+0x28>)
 80022ec:	f7ff fec6 	bl	800207c <log_message>
}
 80022f0:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80022f4:	bd08      	pop	{r3, pc}
 80022f6:	bf00      	nop
 80022f8:	20000e30 	.word	0x20000e30
 80022fc:	0800e914 	.word	0x0800e914

08002300 <Target_Program>:
{
 8002300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002304:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    log_message("Target Program\n");
 8002308:	487a      	ldr	r0, [pc, #488]	@ (80024f4 <Target_Program+0x1f4>)
 800230a:	f7ff feb7 	bl	800207c <log_message>
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 800230e:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 8002312:	4879      	ldr	r0, [pc, #484]	@ (80024f8 <Target_Program+0x1f8>)
 8002314:	f00a fb4c 	bl	800c9b0 <f_stat>
    if (res == FR_OK)
 8002318:	2800      	cmp	r0, #0
 800231a:	d037      	beq.n	800238c <Target_Program+0x8c>
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 800231c:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 8002320:	4876      	ldr	r0, [pc, #472]	@ (80024fc <Target_Program+0x1fc>)
 8002322:	f00a fb45 	bl	800c9b0 <f_stat>
        if (res == FR_OK)
 8002326:	2800      	cmp	r0, #0
 8002328:	f040 80dc 	bne.w	80024e4 <Target_Program+0x1e4>
    size_t readcount = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for binary programming
 8002330:	f7ff ffd0 	bl	80022d4 <Target_GetFlashStartAddress>
 8002334:	4605      	mov	r5, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002336:	a942      	add	r1, sp, #264	@ 0x108
 8002338:	4870      	ldr	r0, [pc, #448]	@ (80024fc <Target_Program+0x1fc>)
 800233a:	f00a fb39 	bl	800c9b0 <f_stat>
    if (res != FR_OK)
 800233e:	2800      	cmp	r0, #0
 8002340:	f040 8082 	bne.w	8002448 <Target_Program+0x148>
    log_message("Firmware File Information\n");
 8002344:	486e      	ldr	r0, [pc, #440]	@ (8002500 <Target_Program+0x200>)
 8002346:	f7ff fe99 	bl	800207c <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 800234a:	f50d 718f 	add.w	r1, sp, #286	@ 0x11e
 800234e:	486d      	ldr	r0, [pc, #436]	@ (8002504 <Target_Program+0x204>)
 8002350:	f7ff fe94 	bl	800207c <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002354:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8002356:	486c      	ldr	r0, [pc, #432]	@ (8002508 <Target_Program+0x208>)
 8002358:	f7ff fe90 	bl	800207c <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 800235c:	2201      	movs	r2, #1
 800235e:	4967      	ldr	r1, [pc, #412]	@ (80024fc <Target_Program+0x1fc>)
 8002360:	a888      	add	r0, sp, #544	@ 0x220
 8002362:	f00a f8b5 	bl	800c4d0 <f_open>
    if (res != FR_OK)
 8002366:	2800      	cmp	r0, #0
 8002368:	d173      	bne.n	8002452 <Target_Program+0x152>
                if (!Target_ProgramCallback[target.TargetFamily](current_address, &fbuf[i], 16))
 800236a:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8002510 <Target_Program+0x210>
 800236e:	4f67      	ldr	r7, [pc, #412]	@ (800250c <Target_Program+0x20c>)
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002370:	ab01      	add	r3, sp, #4
 8002372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002376:	a902      	add	r1, sp, #8
 8002378:	a888      	add	r0, sp, #544	@ 0x220
 800237a:	f00a f9df 	bl	800c73c <f_read>
        if (res != FR_OK)
 800237e:	2800      	cmp	r0, #0
 8002380:	d16c      	bne.n	800245c <Target_Program+0x15c>
        if (readcount == 0)
 8002382:	9b01      	ldr	r3, [sp, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d071      	beq.n	800246c <Target_Program+0x16c>
            size_t i = 0;
 8002388:	2400      	movs	r4, #0
 800238a:	e093      	b.n	80024b4 <Target_Program+0x1b4>
    size_t readcount = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002390:	a942      	add	r1, sp, #264	@ 0x108
 8002392:	4859      	ldr	r0, [pc, #356]	@ (80024f8 <Target_Program+0x1f8>)
 8002394:	f00a fb0c 	bl	800c9b0 <f_stat>
    if (res != FR_OK)
 8002398:	b9d8      	cbnz	r0, 80023d2 <Target_Program+0xd2>
    log_message("Firmware File Information\n");
 800239a:	4859      	ldr	r0, [pc, #356]	@ (8002500 <Target_Program+0x200>)
 800239c:	f7ff fe6e 	bl	800207c <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 80023a0:	f50d 718f 	add.w	r1, sp, #286	@ 0x11e
 80023a4:	4857      	ldr	r0, [pc, #348]	@ (8002504 <Target_Program+0x204>)
 80023a6:	f7ff fe69 	bl	800207c <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 80023aa:	9942      	ldr	r1, [sp, #264]	@ 0x108
 80023ac:	4856      	ldr	r0, [pc, #344]	@ (8002508 <Target_Program+0x208>)
 80023ae:	f7ff fe65 	bl	800207c <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 80023b2:	2201      	movs	r2, #1
 80023b4:	4950      	ldr	r1, [pc, #320]	@ (80024f8 <Target_Program+0x1f8>)
 80023b6:	a888      	add	r0, sp, #544	@ 0x220
 80023b8:	f00a f88a 	bl	800c4d0 <f_open>
    if (res != FR_OK)
 80023bc:	b970      	cbnz	r0, 80023dc <Target_Program+0xdc>
    ihex_set_callback_func((ihex_callback_fp)*Target_ProgramCallback[target.TargetFamily]);
 80023be:	4b53      	ldr	r3, [pc, #332]	@ (800250c <Target_Program+0x20c>)
 80023c0:	7a1a      	ldrb	r2, [r3, #8]
 80023c2:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <Target_Program+0x210>)
 80023c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80023c8:	f001 f856 	bl	8003478 <ihex_set_callback_func>
    ihex_reset_state();
 80023cc:	f001 f842 	bl	8003454 <ihex_reset_state>
 80023d0:	e020      	b.n	8002414 <Target_Program+0x114>
        log_message("f_stat error\n");
 80023d2:	4850      	ldr	r0, [pc, #320]	@ (8002514 <Target_Program+0x214>)
 80023d4:	f7ff fe52 	bl	800207c <log_message>
        return TARGET_ERROR;
 80023d8:	2001      	movs	r0, #1
 80023da:	e087      	b.n	80024ec <Target_Program+0x1ec>
        log_message("f_open error\n");
 80023dc:	484e      	ldr	r0, [pc, #312]	@ (8002518 <Target_Program+0x218>)
 80023de:	f7ff fe4d 	bl	800207c <log_message>
        return TARGET_ERROR;
 80023e2:	2001      	movs	r0, #1
 80023e4:	e082      	b.n	80024ec <Target_Program+0x1ec>
            log_message("f_read error\n");
 80023e6:	484d      	ldr	r0, [pc, #308]	@ (800251c <Target_Program+0x21c>)
 80023e8:	f7ff fe48 	bl	800207c <log_message>
            f_close(&file);
 80023ec:	a888      	add	r0, sp, #544	@ 0x220
 80023ee:	f00a faca 	bl	800c986 <f_close>
            return TARGET_ERROR;
 80023f2:	2001      	movs	r0, #1
 80023f4:	e07a      	b.n	80024ec <Target_Program+0x1ec>
            res = f_close(&file);
 80023f6:	a888      	add	r0, sp, #544	@ 0x220
 80023f8:	f00a fac5 	bl	800c986 <f_close>
            if (res != FR_OK)
 80023fc:	b908      	cbnz	r0, 8002402 <Target_Program+0x102>
    return TARGET_OK;
 80023fe:	2000      	movs	r0, #0
        return Target_ProgramHex();
 8002400:	e074      	b.n	80024ec <Target_Program+0x1ec>
                log_message("f_close error\n");
 8002402:	4847      	ldr	r0, [pc, #284]	@ (8002520 <Target_Program+0x220>)
 8002404:	f7ff fe3a 	bl	800207c <log_message>
                return TARGET_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e06f      	b.n	80024ec <Target_Program+0x1ec>
            if (!ihex_parser(fbuf, readcount))
 800240c:	a802      	add	r0, sp, #8
 800240e:	f001 f839 	bl	8003484 <ihex_parser>
 8002412:	b188      	cbz	r0, 8002438 <Target_Program+0x138>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002414:	ab01      	add	r3, sp, #4
 8002416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800241a:	a902      	add	r1, sp, #8
 800241c:	a888      	add	r0, sp, #544	@ 0x220
 800241e:	f00a f98d 	bl	800c73c <f_read>
        if (res != FR_OK)
 8002422:	2800      	cmp	r0, #0
 8002424:	d1df      	bne.n	80023e6 <Target_Program+0xe6>
        if (readcount == 0)
 8002426:	9901      	ldr	r1, [sp, #4]
 8002428:	2900      	cmp	r1, #0
 800242a:	d0e4      	beq.n	80023f6 <Target_Program+0xf6>
            if (readcount < sizeof(fbuf))
 800242c:	29ff      	cmp	r1, #255	@ 0xff
 800242e:	d8ed      	bhi.n	800240c <Target_Program+0x10c>
                fbuf[readcount] = '\0';
 8002430:	2300      	movs	r3, #0
 8002432:	aa02      	add	r2, sp, #8
 8002434:	5453      	strb	r3, [r2, r1]
 8002436:	e7e9      	b.n	800240c <Target_Program+0x10c>
                log_message("ihex_parser error\n");
 8002438:	483a      	ldr	r0, [pc, #232]	@ (8002524 <Target_Program+0x224>)
 800243a:	f7ff fe1f 	bl	800207c <log_message>
                f_close(&file);
 800243e:	a888      	add	r0, sp, #544	@ 0x220
 8002440:	f00a faa1 	bl	800c986 <f_close>
                return TARGET_ERROR;
 8002444:	2001      	movs	r0, #1
 8002446:	e051      	b.n	80024ec <Target_Program+0x1ec>
        log_message("f_stat error\n");
 8002448:	4832      	ldr	r0, [pc, #200]	@ (8002514 <Target_Program+0x214>)
 800244a:	f7ff fe17 	bl	800207c <log_message>
        return TARGET_ERROR;
 800244e:	2001      	movs	r0, #1
 8002450:	e04c      	b.n	80024ec <Target_Program+0x1ec>
        log_message("f_open error\n");
 8002452:	4831      	ldr	r0, [pc, #196]	@ (8002518 <Target_Program+0x218>)
 8002454:	f7ff fe12 	bl	800207c <log_message>
        return TARGET_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	e047      	b.n	80024ec <Target_Program+0x1ec>
            log_message("f_read error\n");
 800245c:	482f      	ldr	r0, [pc, #188]	@ (800251c <Target_Program+0x21c>)
 800245e:	f7ff fe0d 	bl	800207c <log_message>
            f_close(&file);
 8002462:	a888      	add	r0, sp, #544	@ 0x220
 8002464:	f00a fa8f 	bl	800c986 <f_close>
            return TARGET_ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e03f      	b.n	80024ec <Target_Program+0x1ec>
            if(target.TargetFamily == TARGET_STM32H7) // STM32H7 Dummy Callback
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <Target_Program+0x20c>)
 800246e:	7a1b      	ldrb	r3, [r3, #8]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d005      	beq.n	8002480 <Target_Program+0x180>
            res = f_close(&file);
 8002474:	a888      	add	r0, sp, #544	@ 0x220
 8002476:	f00a fa86 	bl	800c986 <f_close>
            if (res != FR_OK)
 800247a:	b938      	cbnz	r0, 800248c <Target_Program+0x18c>
    return TARGET_OK;
 800247c:	2000      	movs	r0, #0
            return Target_ProgramBin();
 800247e:	e035      	b.n	80024ec <Target_Program+0x1ec>
                Target_ProgramCallback[target.TargetFamily](0, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	4611      	mov	r1, r2
 8002484:	4610      	mov	r0, r2
 8002486:	f7ff fd45 	bl	8001f14 <Target_ProgramCallback_STM32H7>
 800248a:	e7f3      	b.n	8002474 <Target_Program+0x174>
                log_message("f_close error\n");
 800248c:	4824      	ldr	r0, [pc, #144]	@ (8002520 <Target_Program+0x220>)
 800248e:	f7ff fdf5 	bl	800207c <log_message>
                return TARGET_ERROR;
 8002492:	2001      	movs	r0, #1
 8002494:	e02a      	b.n	80024ec <Target_Program+0x1ec>
                if (!Target_ProgramCallback[target.TargetFamily](current_address, &fbuf[i], 16))
 8002496:	7a3b      	ldrb	r3, [r7, #8]
 8002498:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800249c:	2210      	movs	r2, #16
 800249e:	a902      	add	r1, sp, #8
 80024a0:	4421      	add	r1, r4
 80024a2:	4628      	mov	r0, r5
 80024a4:	4798      	blx	r3
 80024a6:	b1a8      	cbz	r0, 80024d4 <Target_Program+0x1d4>
                current_address += 16;
 80024a8:	3510      	adds	r5, #16
                i += chunk_size;
 80024aa:	4434      	add	r4, r6
            while (i < readcount)
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	f67f af5e 	bls.w	8002370 <Target_Program+0x70>
                size_t chunk_size = (readcount - i) >= 16 ? 16 : (readcount - i);
 80024b4:	1b1b      	subs	r3, r3, r4
 80024b6:	461e      	mov	r6, r3
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	bf28      	it	cs
 80024bc:	2610      	movcs	r6, #16
                if (chunk_size < 16)
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d8e9      	bhi.n	8002496 <Target_Program+0x196>
                    memset(&fbuf[i + chunk_size], 0xFF, 16 - chunk_size);
 80024c2:	19a0      	adds	r0, r4, r6
 80024c4:	f1c6 0210 	rsb	r2, r6, #16
 80024c8:	21ff      	movs	r1, #255	@ 0xff
 80024ca:	ab02      	add	r3, sp, #8
 80024cc:	4418      	add	r0, r3
 80024ce:	f00b f849 	bl	800d564 <memset>
 80024d2:	e7e0      	b.n	8002496 <Target_Program+0x196>
                    log_message("Flash write error\n");
 80024d4:	4814      	ldr	r0, [pc, #80]	@ (8002528 <Target_Program+0x228>)
 80024d6:	f7ff fdd1 	bl	800207c <log_message>
                    f_close(&file);
 80024da:	a888      	add	r0, sp, #544	@ 0x220
 80024dc:	f00a fa53 	bl	800c986 <f_close>
                    return TARGET_ERROR;
 80024e0:	2001      	movs	r0, #1
 80024e2:	e003      	b.n	80024ec <Target_Program+0x1ec>
            log_message("No firmware file found\n");
 80024e4:	4811      	ldr	r0, [pc, #68]	@ (800252c <Target_Program+0x22c>)
 80024e6:	f7ff fdc9 	bl	800207c <log_message>
            return TARGET_ERROR;
 80024ea:	2001      	movs	r0, #1
}
 80024ec:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f4:	0800e954 	.word	0x0800e954
 80024f8:	0800e964 	.word	0x0800e964
 80024fc:	0800ea14 	.word	0x0800ea14
 8002500:	0800e984 	.word	0x0800e984
 8002504:	0800e9a0 	.word	0x0800e9a0
 8002508:	0800e9b4 	.word	0x0800e9b4
 800250c:	20000e30 	.word	0x20000e30
 8002510:	0800ef3c 	.word	0x0800ef3c
 8002514:	0800e974 	.word	0x0800e974
 8002518:	0800e9d0 	.word	0x0800e9d0
 800251c:	0800e9e0 	.word	0x0800e9e0
 8002520:	0800e9f0 	.word	0x0800e9f0
 8002524:	0800ea00 	.word	0x0800ea00
 8002528:	0800ea24 	.word	0x0800ea24
 800252c:	0800ea38 	.word	0x0800ea38

08002530 <Target_VerifyCallback>:
  uint8_t tmp[32];
  uint32_t u32_ReadData[8];

  /* Read required words from target flash memory */
  int num_words = (bufsize + 3) / 4;  // Calculate the number of words needed to cover bufsize bytes
  for(int i = 0; i < num_words; i++)
 8002530:	2a00      	cmp	r2, #0
 8002532:	d04a      	beq.n	80025ca <Target_VerifyCallback+0x9a>
{
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	b091      	sub	sp, #68	@ 0x44
 800253a:	4606      	mov	r6, r0
 800253c:	460c      	mov	r4, r1
 800253e:	4615      	mov	r5, r2
 8002540:	1cd7      	adds	r7, r2, #3
 8002542:	10bf      	asrs	r7, r7, #2
 8002544:	f1ad 0804 	sub.w	r8, sp, #4
  for(int i = 0; i < num_words; i++)
 8002548:	46c2      	mov	sl, r8
 800254a:	f04f 0900 	mov.w	r9, #0
  {
      u32_ReadData[i] = readMem(addr + (i * 4));
 800254e:	ab10      	add	r3, sp, #64	@ 0x40
 8002550:	f1c3 0b44 	rsb	fp, r3, #68	@ 0x44
 8002554:	4483      	add	fp, r0
 8002556:	eb0b 000a 	add.w	r0, fp, sl
 800255a:	f7ff fc1f 	bl	8001d9c <readMem>
 800255e:	f84a 0f04 	str.w	r0, [sl, #4]!
  for(int i = 0; i < num_words; i++)
 8002562:	f109 0901 	add.w	r9, r9, #1
 8002566:	454f      	cmp	r7, r9
 8002568:	dcf5      	bgt.n	8002556 <Target_VerifyCallback+0x26>
  }

  /* Convert uint32_t to uint8_t */
  for (int i = 0; i < num_words; i++) {
 800256a:	a808      	add	r0, sp, #32
  for(int i = 0; i < num_words; i++)
 800256c:	4684      	mov	ip, r0
  for (int i = 0; i < num_words; i++) {
 800256e:	2200      	movs	r2, #0
      tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002570:	f858 3f04 	ldr.w	r3, [r8, #4]!
 8002574:	f88c 3000 	strb.w	r3, [ip]
      tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8002578:	0a19      	lsrs	r1, r3, #8
 800257a:	f88c 1001 	strb.w	r1, [ip, #1]
      tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 800257e:	0c19      	lsrs	r1, r3, #16
 8002580:	f88c 1002 	strb.w	r1, [ip, #2]
      tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 8002584:	0e1b      	lsrs	r3, r3, #24
 8002586:	f88c 3003 	strb.w	r3, [ip, #3]
  for (int i = 0; i < num_words; i++) {
 800258a:	3201      	adds	r2, #1
 800258c:	f10c 0c04 	add.w	ip, ip, #4
 8002590:	4297      	cmp	r7, r2
 8002592:	dced      	bgt.n	8002570 <Target_VerifyCallback+0x40>
  }

  /* Compare Hex & Flash Data */
  for(int i = 0; i < bufsize; i++)
 8002594:	4621      	mov	r1, r4
 8002596:	2300      	movs	r3, #0
  {
#if 0 //debug message
      log_message("Address: 0x%08"PRIX32"\n", (addr + i));
      log_message("Flash: 0x%02"PRIX16", BIN File: 0x%02"PRIX16"\n", tmp[i], buf[i]);
#endif
      if(buf[i] != tmp[i])
 8002598:	460f      	mov	r7, r1
 800259a:	3101      	adds	r1, #1
 800259c:	f810 4b01 	ldrb.w	r4, [r0], #1
 80025a0:	783a      	ldrb	r2, [r7, #0]
 80025a2:	42a2      	cmp	r2, r4
 80025a4:	d104      	bne.n	80025b0 <Target_VerifyCallback+0x80>
  for(int i = 0; i < bufsize; i++)
 80025a6:	3301      	adds	r3, #1
 80025a8:	429d      	cmp	r5, r3
 80025aa:	d1f5      	bne.n	8002598 <Target_VerifyCallback+0x68>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
          return false;
      }
  }
  return true;
 80025ac:	2001      	movs	r0, #1
 80025ae:	e009      	b.n	80025c4 <Target_VerifyCallback+0x94>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 80025b0:	1999      	adds	r1, r3, r6
 80025b2:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <Target_VerifyCallback+0xa0>)
 80025b4:	f7ff fd62 	bl	800207c <log_message>
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 80025b8:	783a      	ldrb	r2, [r7, #0]
 80025ba:	4621      	mov	r1, r4
 80025bc:	4805      	ldr	r0, [pc, #20]	@ (80025d4 <Target_VerifyCallback+0xa4>)
 80025be:	f7ff fd5d 	bl	800207c <log_message>
          return false;
 80025c2:	2000      	movs	r0, #0
}
 80025c4:	b011      	add	sp, #68	@ 0x44
 80025c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
 80025ca:	2001      	movs	r0, #1
}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	0800ea50 	.word	0x0800ea50
 80025d4:	0800ea78 	.word	0x0800ea78

080025d8 <Target_Verify>:
    return TARGET_OK;
}

/* Main function to verify the target */
static bool Target_Verify(void)
{
 80025d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025dc:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target Verify\n");
 80025e0:	486e      	ldr	r0, [pc, #440]	@ (800279c <Target_Verify+0x1c4>)
 80025e2:	f7ff fd4b 	bl	800207c <log_message>

    /* Check if HEX file exists */
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 80025e6:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80025ea:	486d      	ldr	r0, [pc, #436]	@ (80027a0 <Target_Verify+0x1c8>)
 80025ec:	f00a f9e0 	bl	800c9b0 <f_stat>
    if(res == FR_OK)
 80025f0:	b348      	cbz	r0, 8002646 <Target_Verify+0x6e>
        return Target_VerifyHex();
    }
    else
    {
        /* HEX file does not exist, check for BIN file */
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80025f2:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80025f6:	486b      	ldr	r0, [pc, #428]	@ (80027a4 <Target_Verify+0x1cc>)
 80025f8:	f00a f9da 	bl	800c9b0 <f_stat>
        if(res == FR_OK)
 80025fc:	2800      	cmp	r0, #0
 80025fe:	f040 80c4 	bne.w	800278a <Target_Verify+0x1b2>
    size_t readcount = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for verification
 8002606:	f7ff fe65 	bl	80022d4 <Target_GetFlashStartAddress>
 800260a:	4607      	mov	r7, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 800260c:	a942      	add	r1, sp, #264	@ 0x108
 800260e:	4865      	ldr	r0, [pc, #404]	@ (80027a4 <Target_Verify+0x1cc>)
 8002610:	f00a f9ce 	bl	800c9b0 <f_stat>
    if(res != FR_OK)
 8002614:	2800      	cmp	r0, #0
 8002616:	d164      	bne.n	80026e2 <Target_Verify+0x10a>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8002618:	2201      	movs	r2, #1
 800261a:	4962      	ldr	r1, [pc, #392]	@ (80027a4 <Target_Verify+0x1cc>)
 800261c:	a888      	add	r0, sp, #544	@ 0x220
 800261e:	f009 ff57 	bl	800c4d0 <f_open>
    if(res != FR_OK)
 8002622:	2800      	cmp	r0, #0
 8002624:	d162      	bne.n	80026ec <Target_Verify+0x114>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002626:	466b      	mov	r3, sp
 8002628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800262c:	a902      	add	r1, sp, #8
 800262e:	a888      	add	r0, sp, #544	@ 0x220
 8002630:	f00a f884 	bl	800c73c <f_read>
        if(res != FR_OK)
 8002634:	2800      	cmp	r0, #0
 8002636:	d15e      	bne.n	80026f6 <Target_Verify+0x11e>
        if(readcount == 0)
 8002638:	9e00      	ldr	r6, [sp, #0]
 800263a:	2e00      	cmp	r6, #0
 800263c:	d063      	beq.n	8002706 <Target_Verify+0x12e>
            size_t i = 0;
 800263e:	2400      	movs	r4, #0
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8002640:	f04f 38ff 	mov.w	r8, #4294967295
 8002644:	e07e      	b.n	8002744 <Target_Verify+0x16c>
    size_t readcount = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 800264a:	a942      	add	r1, sp, #264	@ 0x108
 800264c:	4854      	ldr	r0, [pc, #336]	@ (80027a0 <Target_Verify+0x1c8>)
 800264e:	f00a f9af 	bl	800c9b0 <f_stat>
    if(res != FR_OK)
 8002652:	b958      	cbnz	r0, 800266c <Target_Verify+0x94>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8002654:	2201      	movs	r2, #1
 8002656:	4952      	ldr	r1, [pc, #328]	@ (80027a0 <Target_Verify+0x1c8>)
 8002658:	a888      	add	r0, sp, #544	@ 0x220
 800265a:	f009 ff39 	bl	800c4d0 <f_open>
    if(res != FR_OK)
 800265e:	b950      	cbnz	r0, 8002676 <Target_Verify+0x9e>
    ihex_set_callback_func((ihex_callback_fp)*Target_VerifyCallback);
 8002660:	4851      	ldr	r0, [pc, #324]	@ (80027a8 <Target_Verify+0x1d0>)
 8002662:	f000 ff09 	bl	8003478 <ihex_set_callback_func>
    ihex_reset_state();
 8002666:	f000 fef5 	bl	8003454 <ihex_reset_state>
 800266a:	e020      	b.n	80026ae <Target_Verify+0xd6>
        log_message("f_stat error\n");
 800266c:	484f      	ldr	r0, [pc, #316]	@ (80027ac <Target_Verify+0x1d4>)
 800266e:	f7ff fd05 	bl	800207c <log_message>
        return TARGET_ERROR;
 8002672:	2001      	movs	r0, #1
 8002674:	e08d      	b.n	8002792 <Target_Verify+0x1ba>
        log_message("f_open error\n");
 8002676:	484e      	ldr	r0, [pc, #312]	@ (80027b0 <Target_Verify+0x1d8>)
 8002678:	f7ff fd00 	bl	800207c <log_message>
        return TARGET_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	e088      	b.n	8002792 <Target_Verify+0x1ba>
            log_message("f_read error\n");
 8002680:	484c      	ldr	r0, [pc, #304]	@ (80027b4 <Target_Verify+0x1dc>)
 8002682:	f7ff fcfb 	bl	800207c <log_message>
            f_close(&file);
 8002686:	a888      	add	r0, sp, #544	@ 0x220
 8002688:	f00a f97d 	bl	800c986 <f_close>
            return TARGET_ERROR;
 800268c:	2001      	movs	r0, #1
 800268e:	e080      	b.n	8002792 <Target_Verify+0x1ba>
            res = f_close(&file);
 8002690:	a888      	add	r0, sp, #544	@ 0x220
 8002692:	f00a f978 	bl	800c986 <f_close>
            if(res != FR_OK)
 8002696:	b908      	cbnz	r0, 800269c <Target_Verify+0xc4>
    return TARGET_OK;
 8002698:	2000      	movs	r0, #0
        return Target_VerifyHex();
 800269a:	e07a      	b.n	8002792 <Target_Verify+0x1ba>
                log_message("f_close error\n");
 800269c:	4846      	ldr	r0, [pc, #280]	@ (80027b8 <Target_Verify+0x1e0>)
 800269e:	f7ff fced 	bl	800207c <log_message>
                return TARGET_ERROR;
 80026a2:	2001      	movs	r0, #1
 80026a4:	e075      	b.n	8002792 <Target_Verify+0x1ba>
            if (!ihex_parser(fbuf, readcount))
 80026a6:	a802      	add	r0, sp, #8
 80026a8:	f000 feec 	bl	8003484 <ihex_parser>
 80026ac:	b188      	cbz	r0, 80026d2 <Target_Verify+0xfa>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 80026ae:	ab01      	add	r3, sp, #4
 80026b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b4:	a902      	add	r1, sp, #8
 80026b6:	a888      	add	r0, sp, #544	@ 0x220
 80026b8:	f00a f840 	bl	800c73c <f_read>
        if(res != FR_OK)
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1df      	bne.n	8002680 <Target_Verify+0xa8>
        if(readcount == 0)
 80026c0:	9901      	ldr	r1, [sp, #4]
 80026c2:	2900      	cmp	r1, #0
 80026c4:	d0e4      	beq.n	8002690 <Target_Verify+0xb8>
            if(readcount < sizeof(fbuf))
 80026c6:	29ff      	cmp	r1, #255	@ 0xff
 80026c8:	d8ed      	bhi.n	80026a6 <Target_Verify+0xce>
                fbuf[readcount] = '\0';
 80026ca:	2300      	movs	r3, #0
 80026cc:	aa02      	add	r2, sp, #8
 80026ce:	5453      	strb	r3, [r2, r1]
 80026d0:	e7e9      	b.n	80026a6 <Target_Verify+0xce>
                log_message("ihex_parser error\n");
 80026d2:	483a      	ldr	r0, [pc, #232]	@ (80027bc <Target_Verify+0x1e4>)
 80026d4:	f7ff fcd2 	bl	800207c <log_message>
                f_close(&file);
 80026d8:	a888      	add	r0, sp, #544	@ 0x220
 80026da:	f00a f954 	bl	800c986 <f_close>
                return TARGET_ERROR;
 80026de:	2001      	movs	r0, #1
 80026e0:	e057      	b.n	8002792 <Target_Verify+0x1ba>
        log_message("f_stat error\n");
 80026e2:	4832      	ldr	r0, [pc, #200]	@ (80027ac <Target_Verify+0x1d4>)
 80026e4:	f7ff fcca 	bl	800207c <log_message>
        return TARGET_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	e052      	b.n	8002792 <Target_Verify+0x1ba>
        log_message("f_open error\n");
 80026ec:	4830      	ldr	r0, [pc, #192]	@ (80027b0 <Target_Verify+0x1d8>)
 80026ee:	f7ff fcc5 	bl	800207c <log_message>
        return TARGET_ERROR;
 80026f2:	2001      	movs	r0, #1
 80026f4:	e04d      	b.n	8002792 <Target_Verify+0x1ba>
            log_message("f_read error\n");
 80026f6:	482f      	ldr	r0, [pc, #188]	@ (80027b4 <Target_Verify+0x1dc>)
 80026f8:	f7ff fcc0 	bl	800207c <log_message>
            f_close(&file);
 80026fc:	a888      	add	r0, sp, #544	@ 0x220
 80026fe:	f00a f942 	bl	800c986 <f_close>
            return TARGET_ERROR;
 8002702:	2001      	movs	r0, #1
 8002704:	e045      	b.n	8002792 <Target_Verify+0x1ba>
            res = f_close(&file);
 8002706:	a888      	add	r0, sp, #544	@ 0x220
 8002708:	f00a f93d 	bl	800c986 <f_close>
            if(res != FR_OK)
 800270c:	b908      	cbnz	r0, 8002712 <Target_Verify+0x13a>
    return TARGET_OK;
 800270e:	2000      	movs	r0, #0
        {
            /* BIN file exists */
            return Target_VerifyBin();
 8002710:	e03f      	b.n	8002792 <Target_Verify+0x1ba>
                log_message("f_close error\n");
 8002712:	4829      	ldr	r0, [pc, #164]	@ (80027b8 <Target_Verify+0x1e0>)
 8002714:	f7ff fcb2 	bl	800207c <log_message>
                return TARGET_ERROR;
 8002718:	2001      	movs	r0, #1
 800271a:	e03a      	b.n	8002792 <Target_Verify+0x1ba>
                        log_message("Verification failed\n");
 800271c:	4828      	ldr	r0, [pc, #160]	@ (80027c0 <Target_Verify+0x1e8>)
 800271e:	f7ff fcad 	bl	800207c <log_message>
                        f_close(&file);
 8002722:	a888      	add	r0, sp, #544	@ 0x220
 8002724:	f00a f92f 	bl	800c986 <f_close>
                        return TARGET_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e032      	b.n	8002792 <Target_Verify+0x1ba>
                    if(!Target_VerifyCallback(address + i, &fbuf[i], (uint8_t)adjusted_chunk_size))
 800272c:	f005 02fc 	and.w	r2, r5, #252	@ 0xfc
 8002730:	ab02      	add	r3, sp, #8
 8002732:	1919      	adds	r1, r3, r4
 8002734:	19e0      	adds	r0, r4, r7
 8002736:	f7ff fefb 	bl	8002530 <Target_VerifyCallback>
 800273a:	b1e0      	cbz	r0, 8002776 <Target_Verify+0x19e>
                    i += adjusted_chunk_size;
 800273c:	442c      	add	r4, r5
            while (i < readcount)
 800273e:	9e00      	ldr	r6, [sp, #0]
 8002740:	42a6      	cmp	r6, r4
 8002742:	d920      	bls.n	8002786 <Target_Verify+0x1ae>
                size_t chunk_size = readcount - i;
 8002744:	1b32      	subs	r2, r6, r4
                if(chunk_size > 16)
 8002746:	4613      	mov	r3, r2
 8002748:	2a10      	cmp	r2, #16
 800274a:	bf28      	it	cs
 800274c:	2310      	movcs	r3, #16
                if(adjusted_chunk_size == 0)
 800274e:	f033 0503 	bics.w	r5, r3, #3
 8002752:	d1eb      	bne.n	800272c <Target_Verify+0x154>
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8002754:	f8cd 8004 	str.w	r8, [sp, #4]
                    memcpy(tmp, &fbuf[i], remaining);
 8002758:	ab02      	add	r3, sp, #8
 800275a:	1919      	adds	r1, r3, r4
 800275c:	a801      	add	r0, sp, #4
 800275e:	f00a ff7c 	bl	800d65a <memcpy>
                    if(!Target_VerifyCallback(address + i, tmp, 4))
 8002762:	2204      	movs	r2, #4
 8002764:	eb0d 0102 	add.w	r1, sp, r2
 8002768:	19e0      	adds	r0, r4, r7
 800276a:	f7ff fee1 	bl	8002530 <Target_VerifyCallback>
 800276e:	2800      	cmp	r0, #0
 8002770:	d0d4      	beq.n	800271c <Target_Verify+0x144>
                    i += remaining;
 8002772:	4634      	mov	r4, r6
 8002774:	e7e3      	b.n	800273e <Target_Verify+0x166>
                        log_message("Verification failed\n");
 8002776:	4812      	ldr	r0, [pc, #72]	@ (80027c0 <Target_Verify+0x1e8>)
 8002778:	f7ff fc80 	bl	800207c <log_message>
                        f_close(&file);
 800277c:	a888      	add	r0, sp, #544	@ 0x220
 800277e:	f00a f902 	bl	800c986 <f_close>
                        return TARGET_ERROR;
 8002782:	2001      	movs	r0, #1
 8002784:	e005      	b.n	8002792 <Target_Verify+0x1ba>
            address += readcount;
 8002786:	4437      	add	r7, r6
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8002788:	e74d      	b.n	8002626 <Target_Verify+0x4e>
        }
        else
        {
            /* Neither HEX nor BIN file exists */
            log_message("No firmware file found\n");
 800278a:	480e      	ldr	r0, [pc, #56]	@ (80027c4 <Target_Verify+0x1ec>)
 800278c:	f7ff fc76 	bl	800207c <log_message>
            return TARGET_ERROR;
 8002790:	2001      	movs	r0, #1
        }
    }
}
 8002792:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 8002796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279a:	bf00      	nop
 800279c:	0800eaa4 	.word	0x0800eaa4
 80027a0:	0800e964 	.word	0x0800e964
 80027a4:	0800ea14 	.word	0x0800ea14
 80027a8:	08002531 	.word	0x08002531
 80027ac:	0800e974 	.word	0x0800e974
 80027b0:	0800e9d0 	.word	0x0800e9d0
 80027b4:	0800e9e0 	.word	0x0800e9e0
 80027b8:	0800e9f0 	.word	0x0800e9f0
 80027bc:	0800ea00 	.word	0x0800ea00
 80027c0:	0800eab4 	.word	0x0800eab4
 80027c4:	0800ea38 	.word	0x0800ea38

080027c8 <Target_Protection_Lock>:
}


/* Main function to lock protection */
static bool Target_Protection_Lock(void)
{
 80027c8:	b500      	push	{lr}
 80027ca:	b0c7      	sub	sp, #284	@ 0x11c
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target protection configure.\n");
 80027cc:	482c      	ldr	r0, [pc, #176]	@ (8002880 <Target_Protection_Lock+0xb8>)
 80027ce:	f7ff fc55 	bl	800207c <log_message>

    /* Check if the protection option file exists */
    res = f_stat(FIRMWARE_PROTECT_OPTION_FILE, &fileInfo);
 80027d2:	4669      	mov	r1, sp
 80027d4:	482b      	ldr	r0, [pc, #172]	@ (8002884 <Target_Protection_Lock+0xbc>)
 80027d6:	f00a f8eb 	bl	800c9b0 <f_stat>
    if (res == FR_OK)
 80027da:	2800      	cmp	r0, #0
 80027dc:	d148      	bne.n	8002870 <Target_Protection_Lock+0xa8>
    {
        log_message("Protection option available.\n");
 80027de:	482a      	ldr	r0, [pc, #168]	@ (8002888 <Target_Protection_Lock+0xc0>)
 80027e0:	f7ff fc4c 	bl	800207c <log_message>

        /* Proceed with protection lock only if the file exists */
        switch(target.TargetFamily)
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <Target_Protection_Lock+0xc4>)
 80027e6:	7a1b      	ldrb	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d005      	beq.n	80027f8 <Target_Protection_Lock+0x30>
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d01d      	beq.n	800282c <Target_Protection_Lock+0x64>
                return Target_Protection_Lock_STM32C0();
                break;
            case TARGET_STM32H7:
            		return Target_Protection_Lock_STM32H7();
            default:
                log_message("Target family not supported for protection lock.\n");
 80027f0:	4827      	ldr	r0, [pc, #156]	@ (8002890 <Target_Protection_Lock+0xc8>)
 80027f2:	f7ff fc43 	bl	800207c <log_message>
                break;
 80027f6:	e03e      	b.n	8002876 <Target_Protection_Lock+0xae>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 80027f8:	4826      	ldr	r0, [pc, #152]	@ (8002894 <Target_Protection_Lock+0xcc>)
 80027fa:	f7ff fc3f 	bl	800207c <log_message>
    Stm32c0_Flash_Unlock();
 80027fe:	f000 f9f5 	bl	8002bec <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_OB_Unlock();
 8002802:	f000 fabd 	bl	8002d80 <Stm32c0_Flash_OB_Unlock>
    Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_1);
 8002806:	20bb      	movs	r0, #187	@ 0xbb
 8002808:	f000 fb08 	bl	8002e1c <Stm32c0_Flash_OB_Program>
    Stm32c0_Flash_OB_Launch();
 800280c:	f000 faf8 	bl	8002e00 <Stm32c0_Flash_OB_Launch>
    Target_Connect();
 8002810:	f7ff fc7e 	bl	8002110 <Target_Connect>
    Stm32c0_Flash_OB_Lock();
 8002814:	f000 faa0 	bl	8002d58 <Stm32c0_Flash_OB_Lock>
    Stm32c0_Flash_Lock();
 8002818:	f000 fa06 	bl	8002c28 <Stm32c0_Flash_Lock>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 800281c:	481e      	ldr	r0, [pc, #120]	@ (8002898 <Target_Protection_Lock+0xd0>)
 800281e:	f7ff fabd 	bl	8001d9c <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8002822:	b2c1      	uxtb	r1, r0
 8002824:	481d      	ldr	r0, [pc, #116]	@ (800289c <Target_Protection_Lock+0xd4>)
 8002826:	f7ff fc29 	bl	800207c <log_message>
                return Target_Protection_Lock_STM32C0();
 800282a:	e024      	b.n	8002876 <Target_Protection_Lock+0xae>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 800282c:	4819      	ldr	r0, [pc, #100]	@ (8002894 <Target_Protection_Lock+0xcc>)
 800282e:	f7ff fc25 	bl	800207c <log_message>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002832:	2001      	movs	r0, #1
 8002834:	f000 fbe4 	bl	8003000 <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002838:	2002      	movs	r0, #2
 800283a:	f000 fbe1 	bl	8003000 <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_OB_Unlock();
 800283e:	f000 fc9b 	bl	8003178 <Stm32h7_Flash_OB_Unlock>
    Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_1);
 8002842:	f44f 403b 	mov.w	r0, #47872	@ 0xbb00
 8002846:	f000 fd03 	bl	8003250 <Stm32h7_Flash_OB_Program>
    Stm32h7_Flash_OB_Launch();
 800284a:	f000 fcc9 	bl	80031e0 <Stm32h7_Flash_OB_Launch>
    Stm32h7_Flash_OB_Lock();
 800284e:	f000 fcb3 	bl	80031b8 <Stm32h7_Flash_OB_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002852:	2002      	movs	r0, #2
 8002854:	f000 fc18 	bl	8003088 <Stm32h7_Flash_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002858:	2001      	movs	r0, #1
 800285a:	f000 fc15 	bl	8003088 <Stm32h7_Flash_Lock>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 800285e:	4810      	ldr	r0, [pc, #64]	@ (80028a0 <Target_Protection_Lock+0xd8>)
 8002860:	f7ff fa9c 	bl	8001d9c <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8002864:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 8002868:	480c      	ldr	r0, [pc, #48]	@ (800289c <Target_Protection_Lock+0xd4>)
 800286a:	f7ff fc07 	bl	800207c <log_message>
            		return Target_Protection_Lock_STM32H7();
 800286e:	e002      	b.n	8002876 <Target_Protection_Lock+0xae>
        }
    }
    else
    {
        log_message("Protection option file not found. Skipping protection lock.\n");
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <Target_Protection_Lock+0xdc>)
 8002872:	f7ff fc03 	bl	800207c <log_message>
    }

    return TARGET_OK;
}
 8002876:	2000      	movs	r0, #0
 8002878:	b047      	add	sp, #284	@ 0x11c
 800287a:	f85d fb04 	ldr.w	pc, [sp], #4
 800287e:	bf00      	nop
 8002880:	0800eacc 	.word	0x0800eacc
 8002884:	0800eaec 	.word	0x0800eaec
 8002888:	0800eaf8 	.word	0x0800eaf8
 800288c:	20000e30 	.word	0x20000e30
 8002890:	0800eb80 	.word	0x0800eb80
 8002894:	0800eb18 	.word	0x0800eb18
 8002898:	1fff7800 	.word	0x1fff7800
 800289c:	0800eb68 	.word	0x0800eb68
 80028a0:	5200201c 	.word	0x5200201c
 80028a4:	0800ebb4 	.word	0x0800ebb4

080028a8 <Target_ErrorHandle>:

static void Target_ErrorHandle(bool status, const char *errorMessage)
{
    if (status != TARGET_OK)
 80028a8:	b900      	cbnz	r0, 80028ac <Target_ErrorHandle+0x4>
 80028aa:	4770      	bx	lr
{
 80028ac:	b508      	push	{r3, lr}
    {
        log_message("%s\n", errorMessage);
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <Target_ErrorHandle+0x1c>)
 80028b0:	f7ff fbe4 	bl	800207c <log_message>
        LED_SetState(TARGET_LED_STAT_FAILED);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 ffd1 	bl	800385c <LED_SetState>
        Buzzer_SetState(BUZZER_PROG_FAILED);
 80028ba:	2003      	movs	r0, #3
 80028bc:	f000 fd88 	bl	80033d0 <Buzzer_SetState>
    }
}
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	0800e834 	.word	0x0800e834

080028c8 <Target_MainLoop>:
          break;
  }
}

void Target_MainLoop(void)
{
 80028c8:	b538      	push	{r3, r4, r5, lr}

	int u32_StartTime = 0;
	int u32_ElasedTime = 0;

	/* Check button pushed */
	Button_Update();
 80028ca:	f000 fd25 	bl	8003318 <Button_Update>

	/* Check File Transfer status */
	FileTransferCheck();
 80028ce:	f000 fd15 	bl	80032fc <FileTransferCheck>

	/* Button programming start */
	if(Button_WasPressed() == 1)
 80028d2:	f000 fd57 	bl	8003384 <Button_WasPressed>
 80028d6:	2801      	cmp	r0, #1
 80028d8:	d000      	beq.n	80028dc <Target_MainLoop+0x14>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
    LED_SetState(TARGET_LED_STAT_COMPLETE);
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
  }
}
 80028da:	bd38      	pop	{r3, r4, r5, pc}
  	LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 80028dc:	f000 ffbe 	bl	800385c <LED_SetState>
  	Buzzer_SetState(BUZZER_PROG_START);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f000 fd75 	bl	80033d0 <Buzzer_SetState>
  	u32_StartTime = HAL_GetTick();
 80028e6:	f001 fd11 	bl	800430c <HAL_GetTick>
 80028ea:	4605      	mov	r5, r0
  	status = Target_Connect();
 80028ec:	f7ff fc10 	bl	8002110 <Target_Connect>
 80028f0:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Connect Error");
 80028f2:	49a3      	ldr	r1, [pc, #652]	@ (8002b80 <Target_MainLoop+0x2b8>)
 80028f4:	f7ff ffd8 	bl	80028a8 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 80028f8:	2c00      	cmp	r4, #0
 80028fa:	d1ee      	bne.n	80028da <Target_MainLoop+0x12>
    log_message("Target protection check before flash programming.\n");
 80028fc:	48a1      	ldr	r0, [pc, #644]	@ (8002b84 <Target_MainLoop+0x2bc>)
 80028fe:	f7ff fbbd 	bl	800207c <log_message>
    switch(target.TargetFamily)
 8002902:	4ba1      	ldr	r3, [pc, #644]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002904:	7a1b      	ldrb	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d026      	beq.n	8002958 <Target_MainLoop+0x90>
 800290a:	2b0f      	cmp	r3, #15
 800290c:	d05c      	beq.n	80029c8 <Target_MainLoop+0x100>
            log_message("Target family not supported for protection unlock.\n");
 800290e:	489f      	ldr	r0, [pc, #636]	@ (8002b8c <Target_MainLoop+0x2c4>)
 8002910:	f7ff fbb4 	bl	800207c <log_message>
  	Target_ErrorHandle(status, "Target Protection Unlock Error");
 8002914:	499e      	ldr	r1, [pc, #632]	@ (8002b90 <Target_MainLoop+0x2c8>)
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff ffc6 	bl	80028a8 <Target_ErrorHandle>
	if(target.TargetChipErased  == 0)
 800291c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b88 <Target_MainLoop+0x2c0>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8090 	beq.w	8002a46 <Target_MainLoop+0x17e>
		log_message("No need to mass erase(RDP Regression).\n");
 8002926:	489b      	ldr	r0, [pc, #620]	@ (8002b94 <Target_MainLoop+0x2cc>)
 8002928:	f7ff fba8 	bl	800207c <log_message>
		target.TargetChipErased = 0;
 800292c:	4b96      	ldr	r3, [pc, #600]	@ (8002b88 <Target_MainLoop+0x2c0>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  	Target_ErrorHandle(status, "Target MassErase Error");
 8002932:	4999      	ldr	r1, [pc, #612]	@ (8002b98 <Target_MainLoop+0x2d0>)
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff ffb7 	bl	80028a8 <Target_ErrorHandle>
  log_message("Target flash memory global unlock before flash programming.\n");
 800293a:	4898      	ldr	r0, [pc, #608]	@ (8002b9c <Target_MainLoop+0x2d4>)
 800293c:	f7ff fb9e 	bl	800207c <log_message>
  switch(target.TargetFamily)
 8002940:	4b91      	ldr	r3, [pc, #580]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002942:	7a1b      	ldrb	r3, [r3, #8]
 8002944:	2b05      	cmp	r3, #5
 8002946:	f000 80b9 	beq.w	8002abc <Target_MainLoop+0x1f4>
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f000 80c8 	beq.w	8002ae0 <Target_MainLoop+0x218>
          log_message("Not implemented.\n");
 8002950:	4893      	ldr	r0, [pc, #588]	@ (8002ba0 <Target_MainLoop+0x2d8>)
 8002952:	f7ff fb93 	bl	800207c <log_message>
          break;
 8002956:	e0b3      	b.n	8002ac0 <Target_MainLoop+0x1f8>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR) & STM32C0_FLASH_OPTR_RDP_Msk;
 8002958:	4892      	ldr	r0, [pc, #584]	@ (8002ba4 <Target_MainLoop+0x2dc>)
 800295a:	f7ff fa1f 	bl	8001d9c <readMem>
 800295e:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 8002960:	4621      	mov	r1, r4
 8002962:	4891      	ldr	r0, [pc, #580]	@ (8002ba8 <Target_MainLoop+0x2e0>)
 8002964:	f7ff fb8a 	bl	800207c <log_message>
    if(Option_Status == STM32C0_OB_RDP_LEVEL_1)
 8002968:	2cbb      	cmp	r4, #187	@ 0xbb
 800296a:	d005      	beq.n	8002978 <Target_MainLoop+0xb0>
    else if(Option_Status == STM32C0_OB_RDP_LEVEL_0)
 800296c:	2caa      	cmp	r4, #170	@ 0xaa
 800296e:	d123      	bne.n	80029b8 <Target_MainLoop+0xf0>
        log_message("No need to configure RDP Level.\n");
 8002970:	488e      	ldr	r0, [pc, #568]	@ (8002bac <Target_MainLoop+0x2e4>)
 8002972:	f7ff fb83 	bl	800207c <log_message>
 8002976:	e7cd      	b.n	8002914 <Target_MainLoop+0x4c>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8002978:	488d      	ldr	r0, [pc, #564]	@ (8002bb0 <Target_MainLoop+0x2e8>)
 800297a:	f7ff fb7f 	bl	800207c <log_message>
        Stm32c0_Flash_Unlock();
 800297e:	f000 f935 	bl	8002bec <Stm32c0_Flash_Unlock>
        Stm32c0_Flash_OB_Unlock();
 8002982:	f000 f9fd 	bl	8002d80 <Stm32c0_Flash_OB_Unlock>
        Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_0);
 8002986:	20aa      	movs	r0, #170	@ 0xaa
 8002988:	f000 fa48 	bl	8002e1c <Stm32c0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 800298c:	4889      	ldr	r0, [pc, #548]	@ (8002bb4 <Target_MainLoop+0x2ec>)
 800298e:	f7ff fb75 	bl	800207c <log_message>
        Stm32c0_Flash_OB_Launch();
 8002992:	f000 fa35 	bl	8002e00 <Stm32c0_Flash_OB_Launch>
        Target_Connect();
 8002996:	f7ff fbbb 	bl	8002110 <Target_Connect>
        Stm32c0_Flash_OB_Lock();
 800299a:	f000 f9dd 	bl	8002d58 <Stm32c0_Flash_OB_Lock>
        Stm32c0_Flash_Lock();
 800299e:	f000 f943 	bl	8002c28 <Stm32c0_Flash_Lock>
        Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 80029a2:	4880      	ldr	r0, [pc, #512]	@ (8002ba4 <Target_MainLoop+0x2dc>)
 80029a4:	f7ff f9fa 	bl	8001d9c <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 80029a8:	b2c1      	uxtb	r1, r0
 80029aa:	4883      	ldr	r0, [pc, #524]	@ (8002bb8 <Target_MainLoop+0x2f0>)
 80029ac:	f7ff fb66 	bl	800207c <log_message>
        target.TargetChipErased = 1;
 80029b0:	4b75      	ldr	r3, [pc, #468]	@ (8002b88 <Target_MainLoop+0x2c0>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	619a      	str	r2, [r3, #24]
 80029b6:	e7ad      	b.n	8002914 <Target_MainLoop+0x4c>
        log_message("Locked chip or Error, it cannot program.\n");
 80029b8:	4880      	ldr	r0, [pc, #512]	@ (8002bbc <Target_MainLoop+0x2f4>)
 80029ba:	f7ff fb5f 	bl	800207c <log_message>
  	Target_ErrorHandle(status, "Target Protection Unlock Error");
 80029be:	4974      	ldr	r1, [pc, #464]	@ (8002b90 <Target_MainLoop+0x2c8>)
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7ff ff71 	bl	80028a8 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 80029c6:	e788      	b.n	80028da <Target_MainLoop+0x12>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_RDP_Msk;
 80029c8:	487d      	ldr	r0, [pc, #500]	@ (8002bc0 <Target_MainLoop+0x2f8>)
 80029ca:	f7ff f9e7 	bl	8001d9c <readMem>
 80029ce:	f400 447f 	and.w	r4, r0, #65280	@ 0xff00
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 80029d2:	4621      	mov	r1, r4
 80029d4:	4874      	ldr	r0, [pc, #464]	@ (8002ba8 <Target_MainLoop+0x2e0>)
 80029d6:	f7ff fb51 	bl	800207c <log_message>
    if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_1)
 80029da:	f5b4 4f3b 	cmp.w	r4, #47872	@ 0xbb00
 80029de:	d006      	beq.n	80029ee <Target_MainLoop+0x126>
    else if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_0)
 80029e0:	f5b4 4f2a 	cmp.w	r4, #43520	@ 0xaa00
 80029e4:	d12b      	bne.n	8002a3e <Target_MainLoop+0x176>
        log_message("No need to configure RDP Level.\n");
 80029e6:	4871      	ldr	r0, [pc, #452]	@ (8002bac <Target_MainLoop+0x2e4>)
 80029e8:	f7ff fb48 	bl	800207c <log_message>
 80029ec:	e792      	b.n	8002914 <Target_MainLoop+0x4c>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80029ee:	4870      	ldr	r0, [pc, #448]	@ (8002bb0 <Target_MainLoop+0x2e8>)
 80029f0:	f7ff fb44 	bl	800207c <log_message>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 fb03 	bl	8003000 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 80029fa:	2002      	movs	r0, #2
 80029fc:	f000 fb00 	bl	8003000 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_OB_Unlock();
 8002a00:	f000 fbba 	bl	8003178 <Stm32h7_Flash_OB_Unlock>
        Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_0);
 8002a04:	f44f 402a 	mov.w	r0, #43520	@ 0xaa00
 8002a08:	f000 fc22 	bl	8003250 <Stm32h7_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 8002a0c:	4869      	ldr	r0, [pc, #420]	@ (8002bb4 <Target_MainLoop+0x2ec>)
 8002a0e:	f7ff fb35 	bl	800207c <log_message>
        Stm32h7_Flash_OB_Launch();
 8002a12:	f000 fbe5 	bl	80031e0 <Stm32h7_Flash_OB_Launch>
        Stm32h7_Flash_OB_Lock();
 8002a16:	f000 fbcf 	bl	80031b8 <Stm32h7_Flash_OB_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 fb34 	bl	8003088 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002a20:	2002      	movs	r0, #2
 8002a22:	f000 fb31 	bl	8003088 <Stm32h7_Flash_Lock>
        Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 8002a26:	4866      	ldr	r0, [pc, #408]	@ (8002bc0 <Target_MainLoop+0x2f8>)
 8002a28:	f7ff f9b8 	bl	8001d9c <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8002a2c:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 8002a30:	4861      	ldr	r0, [pc, #388]	@ (8002bb8 <Target_MainLoop+0x2f0>)
 8002a32:	f7ff fb23 	bl	800207c <log_message>
        target.TargetChipErased = 1;
 8002a36:	4b54      	ldr	r3, [pc, #336]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	e76a      	b.n	8002914 <Target_MainLoop+0x4c>
        log_message("Locked chip or Error, it cannot program.\n");
 8002a3e:	485f      	ldr	r0, [pc, #380]	@ (8002bbc <Target_MainLoop+0x2f4>)
 8002a40:	f7ff fb1c 	bl	800207c <log_message>
        return TARGET_ERROR;
 8002a44:	e7bb      	b.n	80029be <Target_MainLoop+0xf6>
    log_message("Target MassErase\n");
 8002a46:	485f      	ldr	r0, [pc, #380]	@ (8002bc4 <Target_MainLoop+0x2fc>)
 8002a48:	f7ff fb18 	bl	800207c <log_message>
    switch(target.TargetFamily)
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002a4e:	7a1b      	ldrb	r3, [r3, #8]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d005      	beq.n	8002a60 <Target_MainLoop+0x198>
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d00d      	beq.n	8002a74 <Target_MainLoop+0x1ac>
            log_message("Unsupported Target Family for Mass Erase\n");
 8002a58:	485b      	ldr	r0, [pc, #364]	@ (8002bc8 <Target_MainLoop+0x300>)
 8002a5a:	f7ff fb0f 	bl	800207c <log_message>
            return false;
 8002a5e:	e768      	b.n	8002932 <Target_MainLoop+0x6a>
    Stm32c0_Flash_Unlock();
 8002a60:	f000 f8c4 	bl	8002bec <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_MassErase();
 8002a64:	f000 f930 	bl	8002cc8 <Stm32c0_Flash_MassErase>
    Stm32c0_Flash_Lock();
 8002a68:	f000 f8de 	bl	8002c28 <Stm32c0_Flash_Lock>
    log_message("Target MassErase Done.\n");
 8002a6c:	4857      	ldr	r0, [pc, #348]	@ (8002bcc <Target_MainLoop+0x304>)
 8002a6e:	f7ff fb05 	bl	800207c <log_message>
 8002a72:	e75e      	b.n	8002932 <Target_MainLoop+0x6a>
        		Target_MassErase_STM32H7(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK);
 8002a74:	4b44      	ldr	r3, [pc, #272]	@ (8002b88 <Target_MainLoop+0x2c0>)
    if (isDualBank)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d114      	bne.n	8002aa6 <Target_MainLoop+0x1de>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f000 fabf 	bl	8003000 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002a82:	2002      	movs	r0, #2
 8002a84:	f000 fabc 	bl	8003000 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2030      	movs	r0, #48	@ 0x30
 8002a8c:	f000 fa3c 	bl	8002f08 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_2);
 8002a90:	2102      	movs	r1, #2
 8002a92:	2030      	movs	r0, #48	@ 0x30
 8002a94:	f000 fa38 	bl	8002f08 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f000 faf5 	bl	8003088 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f000 faf2 	bl	8003088 <Stm32h7_Flash_Lock>
 8002aa4:	e7e2      	b.n	8002a6c <Target_MainLoop+0x1a4>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 faaa 	bl	8003000 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8002aac:	2101      	movs	r1, #1
 8002aae:	2030      	movs	r0, #48	@ 0x30
 8002ab0:	f000 fa2a 	bl	8002f08 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f000 fae7 	bl	8003088 <Stm32h7_Flash_Lock>
 8002aba:	e7d7      	b.n	8002a6c <Target_MainLoop+0x1a4>
      	Stm32c0_Flash_Unlock();
 8002abc:	f000 f896 	bl	8002bec <Stm32c0_Flash_Unlock>
  	status = Target_Program();
 8002ac0:	f7ff fc1e 	bl	8002300 <Target_Program>
 8002ac4:	4604      	mov	r4, r0
  log_message("Target flash memory global lock after flash programming.\n");
 8002ac6:	4842      	ldr	r0, [pc, #264]	@ (8002bd0 <Target_MainLoop+0x308>)
 8002ac8:	f7ff fad8 	bl	800207c <log_message>
  switch(target.TargetFamily)
 8002acc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002ace:	7a1b      	ldrb	r3, [r3, #8]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d014      	beq.n	8002afe <Target_MainLoop+0x236>
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d044      	beq.n	8002b62 <Target_MainLoop+0x29a>
          log_message("Not implemented.\n");
 8002ad8:	4831      	ldr	r0, [pc, #196]	@ (8002ba0 <Target_MainLoop+0x2d8>)
 8002ada:	f7ff facf 	bl	800207c <log_message>
          break;
 8002ade:	e010      	b.n	8002b02 <Target_MainLoop+0x23a>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8002ae0:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d003      	beq.n	8002af0 <Target_MainLoop+0x228>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 fa89 	bl	8003000 <Stm32h7_Flash_Unlock>
 8002aee:	e7e7      	b.n	8002ac0 <Target_MainLoop+0x1f8>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f000 fa85 	bl	8003000 <Stm32h7_Flash_Unlock>
						Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8002af6:	2002      	movs	r0, #2
 8002af8:	f000 fa82 	bl	8003000 <Stm32h7_Flash_Unlock>
 8002afc:	e7e0      	b.n	8002ac0 <Target_MainLoop+0x1f8>
      		Stm32c0_Flash_Lock();
 8002afe:	f000 f893 	bl	8002c28 <Stm32c0_Flash_Lock>
  	Target_ErrorHandle(status, "Target Program Error");
 8002b02:	4934      	ldr	r1, [pc, #208]	@ (8002bd4 <Target_MainLoop+0x30c>)
 8002b04:	4620      	mov	r0, r4
 8002b06:	f7ff fecf 	bl	80028a8 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002b0a:	2c00      	cmp	r4, #0
 8002b0c:	f47f aee5 	bne.w	80028da <Target_MainLoop+0x12>
  	status = Target_Verify();
 8002b10:	f7ff fd62 	bl	80025d8 <Target_Verify>
 8002b14:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Verify Error");
 8002b16:	4930      	ldr	r1, [pc, #192]	@ (8002bd8 <Target_MainLoop+0x310>)
 8002b18:	f7ff fec6 	bl	80028a8 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002b1c:	2c00      	cmp	r4, #0
 8002b1e:	f47f aedc 	bne.w	80028da <Target_MainLoop+0x12>
  	status = Target_Protection_Lock();
 8002b22:	f7ff fe51 	bl	80027c8 <Target_Protection_Lock>
 8002b26:	4604      	mov	r4, r0
  	Target_ErrorHandle(status, "Target Protection Lock Error");
 8002b28:	492c      	ldr	r1, [pc, #176]	@ (8002bdc <Target_MainLoop+0x314>)
 8002b2a:	f7ff febd 	bl	80028a8 <Target_ErrorHandle>
  	if(status != TARGET_OK) return;
 8002b2e:	2c00      	cmp	r4, #0
 8002b30:	f47f aed3 	bne.w	80028da <Target_MainLoop+0x12>
  	log_message("Target program completed\n");
 8002b34:	482a      	ldr	r0, [pc, #168]	@ (8002be0 <Target_MainLoop+0x318>)
 8002b36:	f7ff faa1 	bl	800207c <log_message>
  	log_message("Target Application Start!\n");
 8002b3a:	482a      	ldr	r0, [pc, #168]	@ (8002be4 <Target_MainLoop+0x31c>)
 8002b3c:	f7ff fa9e 	bl	800207c <log_message>
  	resetTarget();
 8002b40:	f7ff f94a 	bl	8001dd8 <resetTarget>
  	hardResetTarget();
 8002b44:	f7ff f916 	bl	8001d74 <hardResetTarget>
    u32_ElasedTime = HAL_GetTick() - u32_StartTime;
 8002b48:	f001 fbe0 	bl	800430c <HAL_GetTick>
    log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
 8002b4c:	1b41      	subs	r1, r0, r5
 8002b4e:	4826      	ldr	r0, [pc, #152]	@ (8002be8 <Target_MainLoop+0x320>)
 8002b50:	f7ff fa94 	bl	800207c <log_message>
    LED_SetState(TARGET_LED_STAT_COMPLETE);
 8002b54:	2002      	movs	r0, #2
 8002b56:	f000 fe81 	bl	800385c <LED_SetState>
    Buzzer_SetState(BUZZER_PROG_COMPLETE);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f000 fc38 	bl	80033d0 <Buzzer_SetState>
 8002b60:	e6bb      	b.n	80028da <Target_MainLoop+0x12>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <Target_MainLoop+0x2c0>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <Target_MainLoop+0x2aa>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f000 fa8c 	bl	8003088 <Stm32h7_Flash_Lock>
 8002b70:	e7c7      	b.n	8002b02 <Target_MainLoop+0x23a>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f000 fa88 	bl	8003088 <Stm32h7_Flash_Lock>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f000 fa85 	bl	8003088 <Stm32h7_Flash_Lock>
 8002b7e:	e7c0      	b.n	8002b02 <Target_MainLoop+0x23a>
 8002b80:	0800ebf4 	.word	0x0800ebf4
 8002b84:	0800ec0c 	.word	0x0800ec0c
 8002b88:	20000e30 	.word	0x20000e30
 8002b8c:	0800ed14 	.word	0x0800ed14
 8002b90:	0800ef1c 	.word	0x0800ef1c
 8002b94:	0800eda0 	.word	0x0800eda0
 8002b98:	0800edc8 	.word	0x0800edc8
 8002b9c:	0800ede0 	.word	0x0800ede0
 8002ba0:	0800ee20 	.word	0x0800ee20
 8002ba4:	1fff7800 	.word	0x1fff7800
 8002ba8:	0800ec40 	.word	0x0800ec40
 8002bac:	0800ecc4 	.word	0x0800ecc4
 8002bb0:	0800ec60 	.word	0x0800ec60
 8002bb4:	0800ecac 	.word	0x0800ecac
 8002bb8:	0800eb68 	.word	0x0800eb68
 8002bbc:	0800ece8 	.word	0x0800ece8
 8002bc0:	5200201c 	.word	0x5200201c
 8002bc4:	0800ed48 	.word	0x0800ed48
 8002bc8:	0800ed5c 	.word	0x0800ed5c
 8002bcc:	0800ed88 	.word	0x0800ed88
 8002bd0:	0800ee34 	.word	0x0800ee34
 8002bd4:	0800ee70 	.word	0x0800ee70
 8002bd8:	0800ee88 	.word	0x0800ee88
 8002bdc:	0800ee9c 	.word	0x0800ee9c
 8002be0:	0800eebc 	.word	0x0800eebc
 8002be4:	0800eed8 	.word	0x0800eed8
 8002be8:	0800eef4 	.word	0x0800eef4

08002bec <Stm32c0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Unlock(void)
{
 8002bec:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8002bee:	480a      	ldr	r0, [pc, #40]	@ (8002c18 <Stm32c0_Flash_Unlock+0x2c>)
 8002bf0:	f7ff f8d4 	bl	8001d9c <readMem>
	if(tmp != 0x00U)
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	db01      	blt.n	8002bfc <Stm32c0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8002bf8:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8002bfa:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY1);
 8002bfc:	4c07      	ldr	r4, [pc, #28]	@ (8002c1c <Stm32c0_Flash_Unlock+0x30>)
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <Stm32c0_Flash_Unlock+0x34>)
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff f8dd 	bl	8001dc0 <writeMem>
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY2);
 8002c06:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <Stm32c0_Flash_Unlock+0x38>)
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7ff f8d9 	bl	8001dc0 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8002c0e:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <Stm32c0_Flash_Unlock+0x2c>)
 8002c10:	f7ff f8c4 	bl	8001d9c <readMem>
		if(tmp != 0x00U)
 8002c14:	0fc0      	lsrs	r0, r0, #31
 8002c16:	e7f0      	b.n	8002bfa <Stm32c0_Flash_Unlock+0xe>
 8002c18:	40022014 	.word	0x40022014
 8002c1c:	40022008 	.word	0x40022008
 8002c20:	45670123 	.word	0x45670123
 8002c24:	cdef89ab 	.word	0xcdef89ab

08002c28 <Stm32c0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Lock(void)
{
 8002c28:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8002c2a:	4c07      	ldr	r4, [pc, #28]	@ (8002c48 <Stm32c0_Flash_Lock+0x20>)
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff f8b5 	bl	8001d9c <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_LOCK|tmp);
 8002c32:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff f8c2 	bl	8001dc0 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_LOCK;
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff f8ad 	bl	8001d9c <readMem>
	if(tmp != 0x00U)
  {
    status = TARGET_OK;
  }
	return status;
}
 8002c42:	43c0      	mvns	r0, r0
 8002c44:	0fc0      	lsrs	r0, r0, #31
 8002c46:	bd10      	pop	{r4, pc}
 8002c48:	40022014 	.word	0x40022014

08002c4c <Stm32c0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32c0_Flash_WaitOperation(uint32_t Timeout)
{
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4606      	mov	r6, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8002c50:	f001 fb5c 	bl	800430c <HAL_GetTick>
 8002c54:	1984      	adds	r4, r0, r6

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c56:	481b      	ldr	r0, [pc, #108]	@ (8002cc4 <Stm32c0_Flash_WaitOperation+0x78>)
 8002c58:	f7ff f8a0 	bl	8001d9c <readMem>
  while(tmp != 0x00U)
 8002c5c:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8002c60:	d00a      	beq.n	8002c78 <Stm32c0_Flash_WaitOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c62:	4d18      	ldr	r5, [pc, #96]	@ (8002cc4 <Stm32c0_Flash_WaitOperation+0x78>)
    if (HAL_GetTick() >= timeout)
 8002c64:	f001 fb52 	bl	800430c <HAL_GetTick>
 8002c68:	42a0      	cmp	r0, r4
 8002c6a:	d224      	bcs.n	8002cb6 <Stm32c0_Flash_WaitOperation+0x6a>
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f7ff f895 	bl	8001d9c <readMem>
  while(tmp != 0x00U)
 8002c72:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8002c76:	d1f5      	bne.n	8002c64 <Stm32c0_Flash_WaitOperation+0x18>
  }

  /* check flash errors */
  error = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_SR_ERROR;
 8002c78:	4d12      	ldr	r5, [pc, #72]	@ (8002cc4 <Stm32c0_Flash_WaitOperation+0x78>)
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7ff f88e 	bl	8001d9c <readMem>

  /* clear error flags */
  writeMem(STM32C0_FLASH_SR, error);
 8002c80:	f24c 31fa 	movw	r1, #50170	@ 0xc3fa
 8002c84:	4001      	ands	r1, r0
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff f89a 	bl	8001dc0 <writeMem>

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8002c8c:	f001 fb3e 	bl	800430c <HAL_GetTick>
 8002c90:	4406      	add	r6, r0
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7ff f882 	bl	8001d9c <readMem>
  while(tmp != 0x00U)
 8002c98:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002c9c:	d00d      	beq.n	8002cba <Stm32c0_Flash_WaitOperation+0x6e>
  {
    if (HAL_GetTick() >= timeout)
 8002c9e:	f001 fb35 	bl	800430c <HAL_GetTick>
 8002ca2:	42b0      	cmp	r0, r6
 8002ca4:	d20b      	bcs.n	8002cbe <Stm32c0_Flash_WaitOperation+0x72>
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7ff f878 	bl	8001d9c <readMem>
  while(tmp != 0x00U)
 8002cac:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8002cb0:	d1f5      	bne.n	8002c9e <Stm32c0_Flash_WaitOperation+0x52>
  }

  return TARGET_OK;
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e000      	b.n	8002cb8 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8002cb6:	2001      	movs	r0, #1
}
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
  return TARGET_OK;
 8002cba:	2000      	movs	r0, #0
 8002cbc:	e7fc      	b.n	8002cb8 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	e7fa      	b.n	8002cb8 <Stm32c0_Flash_WaitOperation+0x6c>
 8002cc2:	bf00      	nop
 8002cc4:	40022010 	.word	0x40022010

08002cc8 <Stm32c0_Flash_MassErase>:
{
 8002cc8:	b510      	push	{r4, lr}
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cce:	f7ff ffbd 	bl	8002c4c <Stm32c0_Flash_WaitOperation>
	if(status == TARGET_OK)
 8002cd2:	b100      	cbz	r0, 8002cd6 <Stm32c0_Flash_MassErase+0xe>
}
 8002cd4:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8002cd6:	4c08      	ldr	r4, [pc, #32]	@ (8002cf8 <Stm32c0_Flash_MassErase+0x30>)
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff f85f 	bl	8001d9c <readMem>
		writeMem(STM32C0_FLASH_CR, (STM32C0_FLASH_CR_STRT | STM32C0_FLASH_CR_MER1)|tmp);
 8002cde:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8002ce2:	f041 0104 	orr.w	r1, r1, #4
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7ff f86a 	bl	8001dc0 <writeMem>
		status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002cec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cf0:	f7ff ffac 	bl	8002c4c <Stm32c0_Flash_WaitOperation>
 8002cf4:	e7ee      	b.n	8002cd4 <Stm32c0_Flash_MassErase+0xc>
 8002cf6:	bf00      	nop
 8002cf8:	40022014 	.word	0x40022014

08002cfc <Stm32c0_Flash_Program>:
{
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	4604      	mov	r4, r0
 8002d00:	4616      	mov	r6, r2
 8002d02:	461d      	mov	r5, r3
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002d04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d08:	f7ff ffa0 	bl	8002c4c <Stm32c0_Flash_WaitOperation>
	  if (status == TARGET_OK)
 8002d0c:	b178      	cbz	r0, 8002d2e <Stm32c0_Flash_Program+0x32>
  	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002d0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d12:	f7ff ff9b 	bl	8002c4c <Stm32c0_Flash_WaitOperation>
 8002d16:	4604      	mov	r4, r0
  	tmp = readMem(STM32C0_FLASH_CR);
 8002d18:	4d0e      	ldr	r5, [pc, #56]	@ (8002d54 <Stm32c0_Flash_Program+0x58>)
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f7ff f83e 	bl	8001d9c <readMem>
  	writeMem(STM32C0_FLASH_CR, tmp & (~STM32C0_FLASH_CR_PG));
 8002d20:	f020 0101 	bic.w	r1, r0, #1
 8002d24:	4628      	mov	r0, r5
 8002d26:	f7ff f84b 	bl	8001dc0 <writeMem>
}
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  	tmp = readMem(STM32C0_FLASH_CR);
 8002d2e:	4f09      	ldr	r7, [pc, #36]	@ (8002d54 <Stm32c0_Flash_Program+0x58>)
 8002d30:	4638      	mov	r0, r7
 8002d32:	f7ff f833 	bl	8001d9c <readMem>
	  	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_PG|tmp);
 8002d36:	f040 0101 	orr.w	r1, r0, #1
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	f7ff f840 	bl	8001dc0 <writeMem>
	  	writeMem(Address, 	(uint32_t)Data);
 8002d40:	4631      	mov	r1, r6
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff f83c 	bl	8001dc0 <writeMem>
	  	writeMem(Address+4, (uint32_t)(Data>>32));
 8002d48:	4629      	mov	r1, r5
 8002d4a:	1d20      	adds	r0, r4, #4
 8002d4c:	f7ff f838 	bl	8001dc0 <writeMem>
 8002d50:	e7dd      	b.n	8002d0e <Stm32c0_Flash_Program+0x12>
 8002d52:	bf00      	nop
 8002d54:	40022014 	.word	0x40022014

08002d58 <Stm32c0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Lock(void)
{
 8002d58:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8002d5a:	4c08      	ldr	r4, [pc, #32]	@ (8002d7c <Stm32c0_Flash_OB_Lock+0x24>)
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff f81d 	bl	8001d9c <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTLOCK|tmp);
 8002d62:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff f82a 	bl	8001dc0 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_OPTLOCK;
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff f815 	bl	8001d9c <readMem>
	if(tmp != 0x00U)
 8002d72:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 8002d76:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8002d7a:	bd10      	pop	{r4, pc}
 8002d7c:	40022014 	.word	0x40022014

08002d80 <Stm32c0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Unlock(void)
{
 8002d80:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8002d82:	480b      	ldr	r0, [pc, #44]	@ (8002db0 <Stm32c0_Flash_OB_Unlock+0x30>)
 8002d84:	f7ff f80a 	bl	8001d9c <readMem>
	if(tmp != 0x00U)
 8002d88:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8002d8c:	d101      	bne.n	8002d92 <Stm32c0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 8002d8e:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 8002d90:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY1);
 8002d92:	4c08      	ldr	r4, [pc, #32]	@ (8002db4 <Stm32c0_Flash_OB_Unlock+0x34>)
 8002d94:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <Stm32c0_Flash_OB_Unlock+0x38>)
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff f812 	bl	8001dc0 <writeMem>
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY2);
 8002d9c:	4907      	ldr	r1, [pc, #28]	@ (8002dbc <Stm32c0_Flash_OB_Unlock+0x3c>)
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff f80e 	bl	8001dc0 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <Stm32c0_Flash_OB_Unlock+0x30>)
 8002da6:	f7fe fff9 	bl	8001d9c <readMem>
		if(tmp == 0x00U)
 8002daa:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8002dae:	e7ef      	b.n	8002d90 <Stm32c0_Flash_OB_Unlock+0x10>
 8002db0:	40022014 	.word	0x40022014
 8002db4:	4002200c 	.word	0x4002200c
 8002db8:	08192a3b 	.word	0x08192a3b
 8002dbc:	4c5d6e7f 	.word	0x4c5d6e7f

08002dc0 <Stm32c0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32c0_Flash_OB_GetUser(void)
{
 8002dc0:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32C0_FLASH_OPTR);
 8002dc2:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <Stm32c0_Flash_OB_GetUser+0x10>)
 8002dc4:	f7fe ffea 	bl	8001d9c <readMem>
 8002dc8:	4603      	mov	r3, r0
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
  return user;
}
 8002dca:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <Stm32c0_Flash_OB_GetUser+0x14>)
 8002dcc:	4018      	ands	r0, r3
 8002dce:	bd08      	pop	{r3, pc}
 8002dd0:	40022020 	.word	0x40022020
 8002dd4:	3fefff00 	.word	0x3fefff00

08002dd8 <Stm32c0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32c0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	4605      	mov	r5, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

  /* Configure the RDP level in the option bytes register */
  optr = readMem(STM32C0_FLASH_OPTR);
 8002de0:	4f06      	ldr	r7, [pc, #24]	@ (8002dfc <Stm32c0_Flash_OB_OptrConfig+0x24>)
 8002de2:	4638      	mov	r0, r7
 8002de4:	f7fe ffda 	bl	8001d9c <readMem>
  optr &= ~(UserType | STM32C0_FLASH_OPTR_RDP);
 8002de8:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 8002dec:	ea20 0105 	bic.w	r1, r0, r5
  tmp = optr | UserConfig | RDPLevel;
 8002df0:	4334      	orrs	r4, r6
  writeMem(STM32C0_FLASH_OPTR, tmp);
 8002df2:	4321      	orrs	r1, r4
 8002df4:	4638      	mov	r0, r7
 8002df6:	f7fe ffe3 	bl	8001dc0 <writeMem>
}
 8002dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfc:	40022020 	.word	0x40022020

08002e00 <Stm32c0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32c0_Flash_OB_Launch(void)
{
 8002e00:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32C0_FLASH_CR);
 8002e02:	4c05      	ldr	r4, [pc, #20]	@ (8002e18 <Stm32c0_Flash_OB_Launch+0x18>)
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7fe ffc9 	bl	8001d9c <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 8002e0a:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f7fe ffd6 	bl	8001dc0 <writeMem>
}
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	bf00      	nop
 8002e18:	40022014 	.word	0x40022014

08002e1c <Stm32c0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Program(uint32_t RDPLevel)
{
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32c0_Flash_OB_GetUser();
 8002e20:	f7ff ffce 	bl	8002dc0 <Stm32c0_Flash_OB_GetUser>
 8002e24:	4601      	mov	r1, r0
	Stm32c0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 8002e26:	4622      	mov	r2, r4
 8002e28:	f7ff ffd6 	bl	8002dd8 <Stm32c0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002e2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e30:	f7ff ff0c 	bl	8002c4c <Stm32c0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8002e34:	4604      	mov	r4, r0
 8002e36:	b108      	cbz	r0, 8002e3c <Stm32c0_Flash_OB_Program+0x20>
    tmp = readMem(STM32C0_FLASH_CR);
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8002e38:	4620      	mov	r0, r4
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8002e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8002e6c <Stm32c0_Flash_OB_Program+0x50>)
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7fe ffac 	bl	8001d9c <readMem>
		writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTSTRT|tmp);
 8002e44:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f7fe ffb9 	bl	8001dc0 <writeMem>
    status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8002e4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e52:	f7ff fefb 	bl	8002c4c <Stm32c0_Flash_WaitOperation>
 8002e56:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f7fe ff9f 	bl	8001d9c <readMem>
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
 8002e5e:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8002e62:	4628      	mov	r0, r5
 8002e64:	f7fe ffac 	bl	8001dc0 <writeMem>
 8002e68:	e7e6      	b.n	8002e38 <Stm32c0_Flash_OB_Program+0x1c>
 8002e6a:	bf00      	nop
 8002e6c:	40022014 	.word	0x40022014

08002e70 <Stm32h7_Flash_WaitOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_WaitOperation(uint32_t Timeout, uint32_t Bank)
{
 8002e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	4605      	mov	r5, r0
    uint32_t sr_reg = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_SR1 : STM32H7_FLASH_SR2;
    uint32_t qw_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_QW_BANK1 : STM32H7_FLASH_FLAG_QW_BANK2;
    uint32_t all_errors_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_ALL_ERRORS_BANK1 : STM32H7_FLASH_FLAG_ALL_ERRORS_BANK2;
 8002e76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <Stm32h7_Flash_WaitOperation+0x80>)
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <Stm32h7_Flash_WaitOperation+0x84>)
 8002e7a:	2901      	cmp	r1, #1
 8002e7c:	bf14      	ite	ne
 8002e7e:	4691      	movne	r9, r2
 8002e80:	4699      	moveq	r9, r3
 8002e82:	2901      	cmp	r1, #1
 8002e84:	4f1c      	ldr	r7, [pc, #112]	@ (8002ef8 <Stm32h7_Flash_WaitOperation+0x88>)
 8002e86:	bf08      	it	eq
 8002e88:	2704      	moveq	r7, #4
 8002e8a:	4e1c      	ldr	r6, [pc, #112]	@ (8002efc <Stm32h7_Flash_WaitOperation+0x8c>)
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <Stm32h7_Flash_WaitOperation+0x90>)
 8002e8e:	2901      	cmp	r1, #1
 8002e90:	bf08      	it	eq
 8002e92:	461e      	moveq	r6, r3
 8002e94:	2901      	cmp	r1, #1
 8002e96:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <Stm32h7_Flash_WaitOperation+0x94>)
 8002e98:	bf14      	ite	ne
 8002e9a:	469a      	movne	sl, r3
 8002e9c:	f44f 3a80 	moveq.w	sl, #65536	@ 0x10000
    uint32_t eop_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_EOP_BANK1 : STM32H7_FLASH_FLAG_EOP_BANK2;

    uint32_t tickstart = HAL_GetTick();
 8002ea0:	f001 fa34 	bl	800430c <HAL_GetTick>
 8002ea4:	4680      	mov	r8, r0
 8002ea6:	e001      	b.n	8002eac <Stm32h7_Flash_WaitOperation+0x3c>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기

        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
            return TARGET_ERROR;
        }
    } while (status & qw_flag);  // QW 플래그가 0이 될 때까지 대기
 8002ea8:	4227      	tst	r7, r4
 8002eaa:	d00e      	beq.n	8002eca <Stm32h7_Flash_WaitOperation+0x5a>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기
 8002eac:	4630      	mov	r0, r6
 8002eae:	f7fe ff75 	bl	8001d9c <readMem>
 8002eb2:	4604      	mov	r4, r0
        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
 8002eb4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002eb8:	d0f6      	beq.n	8002ea8 <Stm32h7_Flash_WaitOperation+0x38>
 8002eba:	f001 fa27 	bl	800430c <HAL_GetTick>
 8002ebe:	eba0 0008 	sub.w	r0, r0, r8
 8002ec2:	42a8      	cmp	r0, r5
 8002ec4:	d9f0      	bls.n	8002ea8 <Stm32h7_Flash_WaitOperation+0x38>
            return TARGET_ERROR;
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	e006      	b.n	8002ed8 <Stm32h7_Flash_WaitOperation+0x68>

    // 에러 플래그 확인 및 클리어
    uint32_t errorflag = status & all_errors_flag;
    if (errorflag != 0) {
 8002eca:	ea19 0104 	ands.w	r1, r9, r4
 8002ece:	d105      	bne.n	8002edc <Stm32h7_Flash_WaitOperation+0x6c>
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
    }

    // EOP 플래그 확인 및 클리어
    if (status & eop_flag) {
 8002ed0:	ea1a 0f04 	tst.w	sl, r4
 8002ed4:	d106      	bne.n	8002ee4 <Stm32h7_Flash_WaitOperation+0x74>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
    }

    return TARGET_OK;
 8002ed6:	2000      	movs	r0, #0
}
 8002ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
 8002edc:	4630      	mov	r0, r6
 8002ede:	f7fe ff6f 	bl	8001dc0 <writeMem>
 8002ee2:	e7f5      	b.n	8002ed0 <Stm32h7_Flash_WaitOperation+0x60>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f7fe ff6a 	bl	8001dc0 <writeMem>
    return TARGET_OK;
 8002eec:	2000      	movs	r0, #0
 8002eee:	e7f3      	b.n	8002ed8 <Stm32h7_Flash_WaitOperation+0x68>
 8002ef0:	97ee0000 	.word	0x97ee0000
 8002ef4:	17ee0000 	.word	0x17ee0000
 8002ef8:	80000004 	.word	0x80000004
 8002efc:	52002110 	.word	0x52002110
 8002f00:	52002010 	.word	0x52002010
 8002f04:	80010000 	.word	0x80010000

08002f08 <Stm32h7_Flash_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
void Stm32h7_Flash_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	4605      	mov	r5, r0
	uint32_t tmp = 0;

  /* Flash Mass Erase */
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 8002f0c:	f001 0303 	and.w	r3, r1, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d011      	beq.n	8002f38 <Stm32h7_Flash_MassErase+0x30>
 8002f14:	460c      	mov	r4, r1
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8002f16:	f011 0f01 	tst.w	r1, #1
 8002f1a:	d139      	bne.n	8002f90 <Stm32h7_Flash_MassErase+0x88>
      /* Erase Bank1 */
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR1, tmp);
    }

    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8002f1c:	f014 0f02 	tst.w	r4, #2
 8002f20:	d150      	bne.n	8002fc4 <Stm32h7_Flash_MassErase+0xbc>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR2, tmp);
    }
  }

  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1);
 8002f22:	2101      	movs	r1, #1
 8002f24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f28:	f7ff ffa2 	bl	8002e70 <Stm32h7_Flash_WaitOperation>
  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2);
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f32:	f7ff ff9d 	bl	8002e70 <Stm32h7_Flash_WaitOperation>

}
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
  	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8002f38:	4e2f      	ldr	r6, [pc, #188]	@ (8002ff8 <Stm32h7_Flash_MassErase+0xf0>)
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	f7fe ff2e 	bl	8001d9c <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f40:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7fe ff3b 	bl	8001dc0 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8002f4a:	4c2c      	ldr	r4, [pc, #176]	@ (8002ffc <Stm32h7_Flash_MassErase+0xf4>)
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7fe ff25 	bl	8001d9c <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8002f52:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7fe ff32 	bl	8001dc0 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f7fe ff1d 	bl	8001d9c <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f62:	ea40 0105 	orr.w	r1, r0, r5
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7fe ff2a 	bl	8001dc0 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7fe ff15 	bl	8001d9c <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8002f72:	ea40 0105 	orr.w	r1, r0, r5
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7fe ff22 	bl	8001dc0 <writeMem>
  	tmp = readMem(STM32H7_FLASH_OPTCR) | STM32H7_FLASH_OPTCR_MER;
 8002f7c:	3cf4      	subs	r4, #244	@ 0xf4
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7fe ff0c 	bl	8001d9c <readMem>
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
 8002f84:	f040 0110 	orr.w	r1, r0, #16
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7fe ff19 	bl	8001dc0 <writeMem>
 8002f8e:	e7c8      	b.n	8002f22 <Stm32h7_Flash_MassErase+0x1a>
    	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8002f90:	4e19      	ldr	r6, [pc, #100]	@ (8002ff8 <Stm32h7_Flash_MassErase+0xf0>)
 8002f92:	4630      	mov	r0, r6
 8002f94:	f7fe ff02 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002f98:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f7fe ff0f 	bl	8001dc0 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7fe fefa 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002fa8:	ea40 0105 	orr.w	r1, r0, r5
 8002fac:	4630      	mov	r0, r6
 8002fae:	f7fe ff07 	bl	8001dc0 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7fe fef2 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8002fb8:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f7fe feff 	bl	8001dc0 <writeMem>
 8002fc2:	e7ab      	b.n	8002f1c <Stm32h7_Flash_MassErase+0x14>
    	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002ffc <Stm32h7_Flash_MassErase+0xf4>)
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7fe fee8 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fcc:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7fe fef5 	bl	8001dc0 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7fe fee0 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fdc:	ea40 0105 	orr.w	r1, r0, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f7fe feed 	bl	8001dc0 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7fe fed8 	bl	8001d9c <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8002fec:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7fe fee5 	bl	8001dc0 <writeMem>
 8002ff6:	e794      	b.n	8002f22 <Stm32h7_Flash_MassErase+0x1a>
 8002ff8:	5200200c 	.word	0x5200200c
 8002ffc:	5200210c 	.word	0x5200210c

08003000 <Stm32h7_Flash_Unlock>:

bool Stm32h7_Flash_Unlock(uint32_t Banks)
{
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	4604      	mov	r4, r0
    uint32_t tmp = 0;

    /* BANK1 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8003004:	f010 0f01 	tst.w	r0, #1
 8003008:	d104      	bne.n	8003014 <Stm32h7_Flash_Unlock+0x14>
            }
        }
    }

    /* BANK2 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 800300a:	f014 0f02 	tst.w	r4, #2
 800300e:	d118      	bne.n	8003042 <Stm32h7_Flash_Unlock+0x42>
                return TARGET_ERROR;
            }
        }
    }

    return TARGET_OK;
 8003010:	2000      	movs	r0, #0
}
 8003012:	bd38      	pop	{r3, r4, r5, pc}
        tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8003014:	4816      	ldr	r0, [pc, #88]	@ (8003070 <Stm32h7_Flash_Unlock+0x70>)
 8003016:	f7fe fec1 	bl	8001d9c <readMem>
        if (tmp != 0U)
 800301a:	f010 0f01 	tst.w	r0, #1
 800301e:	d0f4      	beq.n	800300a <Stm32h7_Flash_Unlock+0xa>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY1);
 8003020:	4d14      	ldr	r5, [pc, #80]	@ (8003074 <Stm32h7_Flash_Unlock+0x74>)
 8003022:	4915      	ldr	r1, [pc, #84]	@ (8003078 <Stm32h7_Flash_Unlock+0x78>)
 8003024:	4628      	mov	r0, r5
 8003026:	f7fe fecb 	bl	8001dc0 <writeMem>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY2);
 800302a:	4914      	ldr	r1, [pc, #80]	@ (800307c <Stm32h7_Flash_Unlock+0x7c>)
 800302c:	4628      	mov	r0, r5
 800302e:	f7fe fec7 	bl	8001dc0 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8003032:	480f      	ldr	r0, [pc, #60]	@ (8003070 <Stm32h7_Flash_Unlock+0x70>)
 8003034:	f7fe feb2 	bl	8001d9c <readMem>
            if (tmp != 0U)
 8003038:	f010 0f01 	tst.w	r0, #1
 800303c:	d0e5      	beq.n	800300a <Stm32h7_Flash_Unlock+0xa>
                return TARGET_ERROR;
 800303e:	2001      	movs	r0, #1
 8003040:	e7e7      	b.n	8003012 <Stm32h7_Flash_Unlock+0x12>
        tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8003042:	480f      	ldr	r0, [pc, #60]	@ (8003080 <Stm32h7_Flash_Unlock+0x80>)
 8003044:	f7fe feaa 	bl	8001d9c <readMem>
        if (tmp != 0U)
 8003048:	f010 0f01 	tst.w	r0, #1
 800304c:	d101      	bne.n	8003052 <Stm32h7_Flash_Unlock+0x52>
    return TARGET_OK;
 800304e:	2000      	movs	r0, #0
 8003050:	e7df      	b.n	8003012 <Stm32h7_Flash_Unlock+0x12>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY1);
 8003052:	4c0c      	ldr	r4, [pc, #48]	@ (8003084 <Stm32h7_Flash_Unlock+0x84>)
 8003054:	4908      	ldr	r1, [pc, #32]	@ (8003078 <Stm32h7_Flash_Unlock+0x78>)
 8003056:	4620      	mov	r0, r4
 8003058:	f7fe feb2 	bl	8001dc0 <writeMem>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY2);
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <Stm32h7_Flash_Unlock+0x7c>)
 800305e:	4620      	mov	r0, r4
 8003060:	f7fe feae 	bl	8001dc0 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8003064:	4806      	ldr	r0, [pc, #24]	@ (8003080 <Stm32h7_Flash_Unlock+0x80>)
 8003066:	f7fe fe99 	bl	8001d9c <readMem>
            if (tmp != 0U)
 800306a:	f000 0001 	and.w	r0, r0, #1
 800306e:	e7d0      	b.n	8003012 <Stm32h7_Flash_Unlock+0x12>
 8003070:	5200200c 	.word	0x5200200c
 8003074:	52002004 	.word	0x52002004
 8003078:	45670123 	.word	0x45670123
 800307c:	cdef89ab 	.word	0xcdef89ab
 8003080:	5200210c 	.word	0x5200210c
 8003084:	52002104 	.word	0x52002104

08003088 <Stm32h7_Flash_Lock>:

bool Stm32h7_Flash_Lock(uint32_t Banks)
{
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4604      	mov	r4, r0
  uint32_t tmp = 0;

	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 800308c:	f010 0f01 	tst.w	r0, #1
 8003090:	d104      	bne.n	800309c <Stm32h7_Flash_Lock+0x14>
	{
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR1, tmp);
	}

  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8003092:	f014 0f02 	tst.w	r4, #2
 8003096:	d10b      	bne.n	80030b0 <Stm32h7_Flash_Lock+0x28>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR2, tmp);
  }

  return TARGET_OK;
}
 8003098:	2000      	movs	r0, #0
 800309a:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
 800309c:	4d09      	ldr	r5, [pc, #36]	@ (80030c4 <Stm32h7_Flash_Lock+0x3c>)
 800309e:	4628      	mov	r0, r5
 80030a0:	f7fe fe7c 	bl	8001d9c <readMem>
		writeMem(STM32H7_FLASH_CR1, tmp);
 80030a4:	f040 0101 	orr.w	r1, r0, #1
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7fe fe89 	bl	8001dc0 <writeMem>
 80030ae:	e7f0      	b.n	8003092 <Stm32h7_Flash_Lock+0xa>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
 80030b0:	4c05      	ldr	r4, [pc, #20]	@ (80030c8 <Stm32h7_Flash_Lock+0x40>)
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7fe fe72 	bl	8001d9c <readMem>
		writeMem(STM32H7_FLASH_CR2, tmp);
 80030b8:	f040 0101 	orr.w	r1, r0, #1
 80030bc:	4620      	mov	r0, r4
 80030be:	f7fe fe7f 	bl	8001dc0 <writeMem>
 80030c2:	e7e9      	b.n	8003098 <Stm32h7_Flash_Lock+0x10>
 80030c4:	5200200c 	.word	0x5200200c
 80030c8:	5200210c 	.word	0x5200210c

080030cc <Stm32h7_Flash_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_Program(uint32_t FlashAddress, uint32_t DataAddress, uint32_t WordSize)
{
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	b083      	sub	sp, #12
 80030d2:	4681      	mov	r9, r0
 80030d4:	4688      	mov	r8, r1
 80030d6:	4692      	mov	sl, r2
    bool status;
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 80030d8:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 80030dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e0:	d216      	bcs.n	8003110 <Stm32h7_Flash_Program+0x44>
    uint32_t dest_addr = FlashAddress;
    uint32_t *src_addr = (uint32_t *)DataAddress;

    // Set PG bit once at the beginning
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 80030e2:	4c23      	ldr	r4, [pc, #140]	@ (8003170 <Stm32h7_Flash_Program+0xa4>)
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7fe fe59 	bl	8001d9c <readMem>
 80030ea:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 80030ee:	2301      	movs	r3, #1
 80030f0:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 80030f2:	9401      	str	r4, [sp, #4]
 80030f4:	9801      	ldr	r0, [sp, #4]
 80030f6:	f7fe fe63 	bl	8001dc0 <writeMem>

    // Program flash with burst writes (32-byte aligned)
    for (uint32_t i = 0; i < WordSize; i += 32) {
 80030fa:	f1ba 0f00 	cmp.w	sl, #0
 80030fe:	d029      	beq.n	8003154 <Stm32h7_Flash_Program+0x88>
 8003100:	f108 0520 	add.w	r5, r8, #32
 8003104:	4647      	mov	r7, r8
 8003106:	f06f 0b1f 	mvn.w	fp, #31
 800310a:	ebab 0b08 	sub.w	fp, fp, r8
 800310e:	e016      	b.n	800313e <Stm32h7_Flash_Program+0x72>
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 8003110:	4c18      	ldr	r4, [pc, #96]	@ (8003174 <Stm32h7_Flash_Program+0xa8>)
 8003112:	4620      	mov	r0, r4
 8003114:	f7fe fe42 	bl	8001d9c <readMem>
 8003118:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 800311c:	2302      	movs	r3, #2
 800311e:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 8003120:	9401      	str	r4, [sp, #4]
 8003122:	e7e7      	b.n	80030f4 <Stm32h7_Flash_Program+0x28>
        for (uint32_t j = 0; j < 32; j += 4) {
            writeMem(dest_addr + j, *src_addr++);
 8003124:	3720      	adds	r7, #32
        }
        dest_addr += 32;

        // Wait for operation to complete after each burst
        status = Stm32h7_Flash_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE, bank);
 8003126:	9900      	ldr	r1, [sp, #0]
 8003128:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800312c:	f7ff fea0 	bl	8002e70 <Stm32h7_Flash_WaitOperation>
        if (status != TARGET_OK) {
 8003130:	4603      	mov	r3, r0
 8003132:	b9c8      	cbnz	r0, 8003168 <Stm32h7_Flash_Program+0x9c>
    for (uint32_t i = 0; i < WordSize; i += 32) {
 8003134:	3520      	adds	r5, #32
 8003136:	eb0b 0305 	add.w	r3, fp, r5
 800313a:	4553      	cmp	r3, sl
 800313c:	d20a      	bcs.n	8003154 <Stm32h7_Flash_Program+0x88>
 800313e:	eba9 0608 	sub.w	r6, r9, r8
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 8003142:	463c      	mov	r4, r7
            writeMem(dest_addr + j, *src_addr++);
 8003144:	19a0      	adds	r0, r4, r6
 8003146:	f854 1b04 	ldr.w	r1, [r4], #4
 800314a:	f7fe fe39 	bl	8001dc0 <writeMem>
        for (uint32_t j = 0; j < 32; j += 4) {
 800314e:	42ac      	cmp	r4, r5
 8003150:	d1f8      	bne.n	8003144 <Stm32h7_Flash_Program+0x78>
 8003152:	e7e7      	b.n	8003124 <Stm32h7_Flash_Program+0x58>
            return TARGET_ERROR;
        }
    }

    // Clear PG bit at the end
    tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2);
 8003154:	9c01      	ldr	r4, [sp, #4]
 8003156:	4620      	mov	r0, r4
 8003158:	f7fe fe20 	bl	8001d9c <readMem>
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp & (~STM32H7_FLASH_CR_PG));
 800315c:	f020 0102 	bic.w	r1, r0, #2
 8003160:	4620      	mov	r0, r4
 8003162:	f7fe fe2d 	bl	8001dc0 <writeMem>

    return TARGET_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	b003      	add	sp, #12
 800316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003170:	5200200c 	.word	0x5200200c
 8003174:	5200210c 	.word	0x5200210c

08003178 <Stm32h7_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Unlock(void)
{
 8003178:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

	tmp = readMem(STM32H7_FLASH_OPTCR) & STM32H7_FLASH_OPTCR_OPTLOCK;
 800317a:	480b      	ldr	r0, [pc, #44]	@ (80031a8 <Stm32h7_Flash_OB_Unlock+0x30>)
 800317c:	f7fe fe0e 	bl	8001d9c <readMem>
  if(tmp != 0x00U)
 8003180:	f010 0f01 	tst.w	r0, #1
 8003184:	d101      	bne.n	800318a <Stm32h7_Flash_OB_Unlock+0x12>
		if(tmp != 0x00U)
		{
			return TARGET_ERROR;
		}
  }
  return TARGET_OK;
 8003186:	2000      	movs	r0, #0
}
 8003188:	bd10      	pop	{r4, pc}
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY1);
 800318a:	4c08      	ldr	r4, [pc, #32]	@ (80031ac <Stm32h7_Flash_OB_Unlock+0x34>)
 800318c:	4908      	ldr	r1, [pc, #32]	@ (80031b0 <Stm32h7_Flash_OB_Unlock+0x38>)
 800318e:	4620      	mov	r0, r4
 8003190:	f7fe fe16 	bl	8001dc0 <writeMem>
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY2);
 8003194:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <Stm32h7_Flash_OB_Unlock+0x3c>)
 8003196:	4620      	mov	r0, r4
 8003198:	f7fe fe12 	bl	8001dc0 <writeMem>
		tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 800319c:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <Stm32h7_Flash_OB_Unlock+0x30>)
 800319e:	f7fe fdfd 	bl	8001d9c <readMem>
		if(tmp != 0x00U)
 80031a2:	f000 0001 	and.w	r0, r0, #1
 80031a6:	e7ef      	b.n	8003188 <Stm32h7_Flash_OB_Unlock+0x10>
 80031a8:	52002018 	.word	0x52002018
 80031ac:	52002008 	.word	0x52002008
 80031b0:	08192a3b 	.word	0x08192a3b
 80031b4:	4c5d6e7f 	.word	0x4c5d6e7f

080031b8 <Stm32h7_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Lock(void)
{
 80031b8:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 80031ba:	4c08      	ldr	r4, [pc, #32]	@ (80031dc <Stm32h7_Flash_OB_Lock+0x24>)
 80031bc:	4620      	mov	r0, r4
 80031be:	f7fe fded 	bl	8001d9c <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTLOCK | tmp);
 80031c2:	f040 0101 	orr.w	r1, r0, #1
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7fe fdfa 	bl	8001dc0 <writeMem>

  /* Verify that the Option Bytes are locked */
	tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7fe fde5 	bl	8001d9c <readMem>
	if(tmp == 0x00U)
 80031d2:	f080 0001 	eor.w	r0, r0, #1
	{
		return TARGET_ERROR;
	}

	return TARGET_OK;
}
 80031d6:	f000 0001 	and.w	r0, r0, #1
 80031da:	bd10      	pop	{r4, pc}
 80031dc:	52002018 	.word	0x52002018

080031e0 <Stm32h7_Flash_OB_Launch>:
	return TARGET_OK;
}


bool Stm32h7_Flash_OB_Launch(void)
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = 0;

	/* Set OPTSTRT Bit */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 80031e2:	4c18      	ldr	r4, [pc, #96]	@ (8003244 <Stm32h7_Flash_OB_Launch+0x64>)
 80031e4:	4620      	mov	r0, r4
 80031e6:	f7fe fdd9 	bl	8001d9c <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTSTART | tmp);
 80031ea:	f040 0102 	orr.w	r1, r0, #2
 80031ee:	4620      	mov	r0, r4
 80031f0:	f7fe fde6 	bl	8001dc0 <writeMem>
	uint32_t tickstart = HAL_GetTick();
 80031f4:	f001 f88a 	bl	800430c <HAL_GetTick>
 80031f8:	4604      	mov	r4, r0
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 80031fa:	4813      	ldr	r0, [pc, #76]	@ (8003248 <Stm32h7_Flash_OB_Launch+0x68>)
 80031fc:	f7fe fdce 	bl	8001d9c <readMem>
	while(tmp != 0U)
 8003200:	f010 0f01 	tst.w	r0, #1
 8003204:	d00d      	beq.n	8003222 <Stm32h7_Flash_OB_Launch+0x42>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f24c 3550 	movw	r5, #50000	@ 0xc350
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 800320a:	4e0f      	ldr	r6, [pc, #60]	@ (8003248 <Stm32h7_Flash_OB_Launch+0x68>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f001 f87e 	bl	800430c <HAL_GetTick>
 8003210:	1b00      	subs	r0, r0, r4
 8003212:	42a8      	cmp	r0, r5
 8003214:	d814      	bhi.n	8003240 <Stm32h7_Flash_OB_Launch+0x60>
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 8003216:	4630      	mov	r0, r6
 8003218:	f7fe fdc0 	bl	8001d9c <readMem>
	while(tmp != 0U)
 800321c:	f010 0f01 	tst.w	r0, #1
 8003220:	d1f4      	bne.n	800320c <Stm32h7_Flash_OB_Launch+0x2c>
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPTCHANGEERR;
 8003222:	4809      	ldr	r0, [pc, #36]	@ (8003248 <Stm32h7_Flash_OB_Launch+0x68>)
 8003224:	f7fe fdba 	bl	8001d9c <readMem>
	if(tmp != 0x00U)
 8003228:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800322c:	d101      	bne.n	8003232 <Stm32h7_Flash_OB_Launch+0x52>
	return TARGET_OK;
 800322e:	2000      	movs	r0, #0
 8003230:	e007      	b.n	8003242 <Stm32h7_Flash_OB_Launch+0x62>
		writeMem(STM32H7_FLASH_OPTCCR, STM32H7_FLASH_OPTCCR_CLR_OPTCHANGEERR);
 8003232:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003236:	4805      	ldr	r0, [pc, #20]	@ (800324c <Stm32h7_Flash_OB_Launch+0x6c>)
 8003238:	f7fe fdc2 	bl	8001dc0 <writeMem>
		return TARGET_ERROR;
 800323c:	2001      	movs	r0, #1
 800323e:	e000      	b.n	8003242 <Stm32h7_Flash_OB_Launch+0x62>
        return TARGET_ERROR;
 8003240:	2001      	movs	r0, #1
	return Stm32h7_Flash_OB_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE);
}
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	52002018 	.word	0x52002018
 8003248:	5200201c 	.word	0x5200201c
 800324c:	52002024 	.word	0x52002024

08003250 <Stm32h7_Flash_OB_Program>:
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
}

bool Stm32h7_Flash_OB_Program(uint32_t RDPLevel)
{
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	4604      	mov	r4, r0
	bool status = 0;

  /* Wait for last operation to be completed */
	if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1))
 8003254:	2101      	movs	r1, #1
 8003256:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800325a:	f7ff fe09 	bl	8002e70 <Stm32h7_Flash_WaitOperation>
 800325e:	4605      	mov	r5, r0
 8003260:	b108      	cbz	r0, 8003266 <Stm32h7_Flash_OB_Program+0x16>
		/* Read protection configuration */
		STM32H7_FLASH_OB_RDPConfig(RDPLevel);
	}

	return status;
}
 8003262:	4628      	mov	r0, r5
 8003264:	bd70      	pop	{r4, r5, r6, pc}
	else if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2))
 8003266:	2102      	movs	r1, #2
 8003268:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800326c:	f7ff fe00 	bl	8002e70 <Stm32h7_Flash_WaitOperation>
 8003270:	4605      	mov	r5, r0
 8003272:	2800      	cmp	r0, #0
 8003274:	d1f5      	bne.n	8003262 <Stm32h7_Flash_OB_Program+0x12>
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
 8003276:	4e05      	ldr	r6, [pc, #20]	@ (800328c <Stm32h7_Flash_OB_Program+0x3c>)
 8003278:	4630      	mov	r0, r6
 800327a:	f7fe fd8f 	bl	8001d9c <readMem>
 800327e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
 8003282:	4321      	orrs	r1, r4
 8003284:	4630      	mov	r0, r6
 8003286:	f7fe fd9b 	bl	8001dc0 <writeMem>
}
 800328a:	e7ea      	b.n	8003262 <Stm32h7_Flash_OB_Program+0x12>
 800328c:	52002020 	.word	0x52002020

08003290 <FileTransferCheck_Init>:

// LED 상태 초기화 함수
void FileTransferCheck_Init(void)
{
    // 초기 상태로 LED 설정
}
 8003290:	4770      	bx	lr
	...

08003294 <FileTransferCheck_UpdateOnWrite>:

// 파일 전송 중 상태 업데이트 함수
void FileTransferCheck_UpdateOnWrite(void)
{
 8003294:	b508      	push	{r3, lr}
  // 파일 전송 중 LED1을 토글
  LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 8003296:	2001      	movs	r0, #1
 8003298:	f000 fae0 	bl	800385c <LED_SetState>

  // 마지막 파일 전송 시간을 현재 시간으로 업데이트
  last_write_time = HAL_GetTick();
 800329c:	f001 f836 	bl	800430c <HAL_GetTick>
 80032a0:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <FileTransferCheck_UpdateOnWrite+0x20>)
 80032a2:	6018      	str	r0, [r3, #0]

  // 전송 활성화 플래그 설정 (파일 전송 시작)
  transfer_active_flag = 1;
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <FileTransferCheck_UpdateOnWrite+0x24>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]

  // 전송 완료 플래그 리셋
  transfer_complete_flag = 0;
 80032aa:	4b04      	ldr	r3, [pc, #16]	@ (80032bc <FileTransferCheck_UpdateOnWrite+0x28>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
}
 80032b0:	bd08      	pop	{r3, pc}
 80032b2:	bf00      	nop
 80032b4:	20000e50 	.word	0x20000e50
 80032b8:	20000e4c 	.word	0x20000e4c
 80032bc:	20000e4d 	.word	0x20000e4d

080032c0 <FileTransferCheck_CheckCompletion>:

// 파일 전송 완료 상태 감지 함수
void FileTransferCheck_CheckCompletion(void)
{
 80032c0:	b508      	push	{r3, lr}
  // 전송 활성화 플래그가 설정된 경우에만 완료 상태 감지
  if (transfer_active_flag && ((HAL_GetTick() - last_write_time) > FILE_TRANSFER_TIMEOUT))
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <FileTransferCheck_CheckCompletion+0x30>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b903      	cbnz	r3, 80032ca <FileTransferCheck_CheckCompletion+0xa>
      transfer_complete_flag = 1;

      // 전송 활성화 플래그 리셋 (다음 전송을 대기)
      transfer_active_flag = 0;
  }
}
 80032c8:	bd08      	pop	{r3, pc}
  if (transfer_active_flag && ((HAL_GetTick() - last_write_time) > FILE_TRANSFER_TIMEOUT))
 80032ca:	f001 f81f 	bl	800430c <HAL_GetTick>
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <FileTransferCheck_CheckCompletion+0x34>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1ac0      	subs	r0, r0, r3
 80032d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80032d8:	d9f6      	bls.n	80032c8 <FileTransferCheck_CheckCompletion+0x8>
      LED_SetState(TARGET_LED_STAT_COMPLETE);
 80032da:	2002      	movs	r0, #2
 80032dc:	f000 fabe 	bl	800385c <LED_SetState>
      transfer_complete_flag = 1;
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <FileTransferCheck_CheckCompletion+0x38>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
      transfer_active_flag = 0;
 80032e6:	4b02      	ldr	r3, [pc, #8]	@ (80032f0 <FileTransferCheck_CheckCompletion+0x30>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
}
 80032ec:	e7ec      	b.n	80032c8 <FileTransferCheck_CheckCompletion+0x8>
 80032ee:	bf00      	nop
 80032f0:	20000e4c 	.word	0x20000e4c
 80032f4:	20000e50 	.word	0x20000e50
 80032f8:	20000e4d 	.word	0x20000e4d

080032fc <FileTransferCheck>:
    transfer_complete_flag = 0;
}

// 파일 전송 완료 상태를 처리하는 함수
void FileTransferCheck(void)
{
 80032fc:	b508      	push	{r3, lr}
    return transfer_complete_flag;
 80032fe:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <FileTransferCheck+0x18>)
    if (FileTransferCheck_IsTransferComplete())
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b903      	cbnz	r3, 8003306 <FileTransferCheck+0xa>
    {
    	Buzzer_SetState(BUZZER_PROG_COMPLETE);               // 버저 완료 사운드 재생
      FileTransferCheck_ResetTransferCompleteFlag(); // 플래그 리셋
    }
}
 8003304:	bd08      	pop	{r3, pc}
    	Buzzer_SetState(BUZZER_PROG_COMPLETE);               // 버저 완료 사운드 재생
 8003306:	2002      	movs	r0, #2
 8003308:	f000 f862 	bl	80033d0 <Buzzer_SetState>
    transfer_complete_flag = 0;
 800330c:	4b01      	ldr	r3, [pc, #4]	@ (8003314 <FileTransferCheck+0x18>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
}
 8003312:	e7f7      	b.n	8003304 <FileTransferCheck+0x8>
 8003314:	20000e4d 	.word	0x20000e4d

08003318 <Button_Update>:
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
}

void Button_Update(void)
{
 8003318:	b508      	push	{r3, lr}
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 800331a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800331e:	4813      	ldr	r0, [pc, #76]	@ (800336c <Button_Update+0x54>)
 8003320:	f001 fb86 	bl	8004a30 <HAL_GPIO_ReadPin>
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <Button_Update+0x58>)
 8003326:	7018      	strb	r0, [r3, #0]

    if (current_state != last_button_state)
 8003328:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <Button_Update+0x5c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4283      	cmp	r3, r0
 800332e:	d117      	bne.n	8003360 <Button_Update+0x48>
    {
        last_debounce_time = HAL_GetTick();
    }

    if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY_MS)
 8003330:	f000 ffec 	bl	800430c <HAL_GetTick>
 8003334:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <Button_Update+0x60>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1ac0      	subs	r0, r0, r3
 800333a:	2814      	cmp	r0, #20
 800333c:	d90b      	bls.n	8003356 <Button_Update+0x3e>
    {
        if (current_state != button_state)
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <Button_Update+0x58>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4a0e      	ldr	r2, [pc, #56]	@ (800337c <Button_Update+0x64>)
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d005      	beq.n	8003356 <Button_Update+0x3e>
        {
            button_state = current_state;
 800334a:	4a0c      	ldr	r2, [pc, #48]	@ (800337c <Button_Update+0x64>)
 800334c:	7013      	strb	r3, [r2, #0]

            if (button_state == GPIO_PIN_RESET)
 800334e:	b913      	cbnz	r3, 8003356 <Button_Update+0x3e>
            {
                button_pressed_event = 1;
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <Button_Update+0x68>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    last_button_state = current_state;
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <Button_Update+0x58>)
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <Button_Update+0x5c>)
 800335c:	701a      	strb	r2, [r3, #0]
}
 800335e:	bd08      	pop	{r3, pc}
        last_debounce_time = HAL_GetTick();
 8003360:	f000 ffd4 	bl	800430c <HAL_GetTick>
 8003364:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <Button_Update+0x60>)
 8003366:	6018      	str	r0, [r3, #0]
 8003368:	e7e2      	b.n	8003330 <Button_Update+0x18>
 800336a:	bf00      	nop
 800336c:	40020000 	.word	0x40020000
 8003370:	20000e55 	.word	0x20000e55
 8003374:	20000004 	.word	0x20000004
 8003378:	20000e58 	.word	0x20000e58
 800337c:	20000005 	.word	0x20000005
 8003380:	20000e54 	.word	0x20000e54

08003384 <Button_WasPressed>:

uint8_t Button_WasPressed(void)
{
    if (button_pressed_event)
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <Button_WasPressed+0x10>)
 8003386:	7818      	ldrb	r0, [r3, #0]
 8003388:	b900      	cbnz	r0, 800338c <Button_WasPressed+0x8>
    {
        button_pressed_event = 0;
        return 1;
    }
    return 0;
}
 800338a:	4770      	bx	lr
        button_pressed_event = 0;
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
        return 1;
 8003390:	2001      	movs	r0, #1
 8003392:	e7fa      	b.n	800338a <Button_WasPressed+0x6>
 8003394:	20000e54 	.word	0x20000e54

08003398 <SetBuzzerFrequency>:
			break;
	}
	state = BUZZER_IDLE;
}

void SetBuzzerFrequency(uint32_t frequency) {
 8003398:	b508      	push	{r3, lr}
    if (frequency > 0) {
 800339a:	b168      	cbz	r0, 80033b8 <SetBuzzerFrequency+0x20>
        // 타이머 주기 계산: 타이머 클럭(1MHz)에서 원하는 주파수를 설정
        uint32_t period = (1000000 / frequency) - 1;
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <SetBuzzerFrequency+0x30>)
 800339e:	fbb3 f3f0 	udiv	r3, r3, r0
 80033a2:	3b01      	subs	r3, #1

        // 주기(ARR)를 설정하여 타이머의 PWM 주파수를 조정
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 80033a4:	4809      	ldr	r0, [pc, #36]	@ (80033cc <SetBuzzerFrequency+0x34>)
 80033a6:	6802      	ldr	r2, [r0, #0]
 80033a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80033aa:	60c3      	str	r3, [r0, #12]

        // 듀티 사이클을 50%로 설정 (부저가 50% 듀티에서 동작하도록)
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	63d3      	str	r3, [r2, #60]	@ 0x3c

        // 타이머 PWM 시작
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80033b0:	2108      	movs	r1, #8
 80033b2:	f004 f999 	bl	80076e8 <HAL_TIM_PWM_Start>
    } else {
        // 주파수가 0이면 부저를 끕니다
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
    }
}
 80033b6:	bd08      	pop	{r3, pc}
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 80033b8:	4804      	ldr	r0, [pc, #16]	@ (80033cc <SetBuzzerFrequency+0x34>)
 80033ba:	6803      	ldr	r3, [r0, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80033c0:	2108      	movs	r1, #8
 80033c2:	f004 fa0b 	bl	80077dc <HAL_TIM_PWM_Stop>
}
 80033c6:	e7f6      	b.n	80033b6 <SetBuzzerFrequency+0x1e>
 80033c8:	000f4240 	.word	0x000f4240
 80033cc:	2000100c 	.word	0x2000100c

080033d0 <Buzzer_SetState>:
{
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 80033d2:	2804      	cmp	r0, #4
 80033d4:	d80e      	bhi.n	80033f4 <Buzzer_SetState+0x24>
 80033d6:	e8df f000 	tbb	[pc, r0]
 80033da:	0e03      	.short	0x0e03
 80033dc:	2318      	.short	0x2318
 80033de:	38          	.byte	0x38
 80033df:	00          	.byte	0x00

void PlayBootSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 80033e0:	2064      	movs	r0, #100	@ 0x64
 80033e2:	f7ff ffd9 	bl	8003398 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(500);
 80033e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ea:	f000 ff95 	bl	8004318 <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7ff ffd2 	bl	8003398 <SetBuzzerFrequency>
}
 80033f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

void PlayDuringProgrammingSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 80033f6:	2064      	movs	r0, #100	@ 0x64
 80033f8:	f7ff ffce 	bl	8003398 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(150);
 80033fc:	2096      	movs	r0, #150	@ 0x96
 80033fe:	f000 ff8b 	bl	8004318 <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff ffc8 	bl	8003398 <SetBuzzerFrequency>
}
 8003408:	e7f4      	b.n	80033f4 <Buzzer_SetState+0x24>

void PlayProgrammingCompleteSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 800340a:	2064      	movs	r0, #100	@ 0x64
 800340c:	f7ff ffc4 	bl	8003398 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(300);
 8003410:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003414:	f000 ff80 	bl	8004318 <HAL_Delay>

    /* Set Frequency */
    SetBuzzerFrequency(0);
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff ffbd 	bl	8003398 <SetBuzzerFrequency>

    /* Set Duration */
    //HAL_Delay(300);
}
 800341e:	e7e9      	b.n	80033f4 <Buzzer_SetState+0x24>
	switch(state)
 8003420:	2405      	movs	r4, #5
void PlayProgrammingFailedSound(void){

    for (uint8_t i = 0; i < 5; i++)
    {
    		/* Set Frequency */
        SetBuzzerFrequency(DEFAULT_FREQ);
 8003422:	2764      	movs	r7, #100	@ 0x64

        /* Set Duration */
        HAL_Delay(150);
 8003424:	2596      	movs	r5, #150	@ 0x96

        /* Buzzer Off */
        SetBuzzerFrequency(0);
 8003426:	2600      	movs	r6, #0
        SetBuzzerFrequency(DEFAULT_FREQ);
 8003428:	4638      	mov	r0, r7
 800342a:	f7ff ffb5 	bl	8003398 <SetBuzzerFrequency>
        HAL_Delay(150);
 800342e:	4628      	mov	r0, r5
 8003430:	f000 ff72 	bl	8004318 <HAL_Delay>
        SetBuzzerFrequency(0);
 8003434:	4630      	mov	r0, r6
 8003436:	f7ff ffaf 	bl	8003398 <SetBuzzerFrequency>

        /* Set Duration */
        HAL_Delay(150);
 800343a:	4628      	mov	r0, r5
 800343c:	f000 ff6c 	bl	8004318 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 8003440:	1e63      	subs	r3, r4, #1
 8003442:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8003446:	d1ef      	bne.n	8003428 <Buzzer_SetState+0x58>
 8003448:	e7d4      	b.n	80033f4 <Buzzer_SetState+0x24>
}

void PlayIdleSound(void)
{
    // No sound during idle
    SetBuzzerFrequency(0);
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff ffa4 	bl	8003398 <SetBuzzerFrequency>
}
 8003450:	e7d0      	b.n	80033f4 <Buzzer_SetState+0x24>
	...

08003454 <ihex_reset_state>:
}
#endif

void ihex_reset_state()
{
    state = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <ihex_reset_state+0x14>)
 8003458:	7013      	strb	r3, [r2, #0]
    address_lo = 0;
 800345a:	4a04      	ldr	r2, [pc, #16]	@ (800346c <ihex_reset_state+0x18>)
 800345c:	8013      	strh	r3, [r2, #0]
    address_hi = 0;
 800345e:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <ihex_reset_state+0x1c>)
 8003460:	8013      	strh	r3, [r2, #0]
    ex_segment_addr_mode = false;
 8003462:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <ihex_reset_state+0x20>)
 8003464:	7013      	strb	r3, [r2, #0]
}
 8003466:	4770      	bx	lr
 8003468:	20000f6f 	.word	0x20000f6f
 800346c:	20000f6c 	.word	0x20000f6c
 8003470:	20000f6a 	.word	0x20000f6a
 8003474:	20000f68 	.word	0x20000f68

08003478 <ihex_set_callback_func>:

void ihex_set_callback_func(ihex_callback_fp fp)
{
    callback_fp = fp;
 8003478:	4b01      	ldr	r3, [pc, #4]	@ (8003480 <ihex_set_callback_func+0x8>)
 800347a:	6018      	str	r0, [r3, #0]
}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000e5c 	.word	0x20000e5c

08003484 <ihex_parser>:
bool ihex_parser(const uint8_t *steambuf, uint32_t size)
{
    uint32_t i;
    uint8_t c, hc;
    
    for (i = 0; i<size; i++)
 8003484:	2900      	cmp	r1, #0
 8003486:	f000 8109 	beq.w	800369c <ihex_parser+0x218>
{
 800348a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800348e:	2500      	movs	r5, #0
 8003490:	1e44      	subs	r4, r0, #1
 8003492:	4408      	add	r0, r1
 8003494:	1e46      	subs	r6, r0, #1
        if (c == '\0')
        {
            return true;
        }

        if (state == START_CODE_STATE)
 8003496:	4f8b      	ldr	r7, [pc, #556]	@ (80036c4 <ihex_parser+0x240>)
            if ((hc = HexToDec(c)) == INVALID_HEX_CHAR)
            {
                return false;
            }

            if (!calc_cs_toogle)
 8003498:	f8df 8258 	ldr.w	r8, [pc, #600]	@ 80036f4 <ihex_parser+0x270>
            calc_cs = 0x00;
 800349c:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 80036e0 <ihex_parser+0x25c>
 80034a0:	e045      	b.n	800352e <ihex_parser+0xaa>
        else if (state >= BYTE_COUNT_0_STATE && state <= CHECKSUM_1_STATE)
 80034a2:	1e59      	subs	r1, r3, #1
 80034a4:	b2c9      	uxtb	r1, r1
 80034a6:	290a      	cmp	r1, #10
 80034a8:	d81b      	bhi.n	80034e2 <ihex_parser+0x5e>
    if (h >= '0' && h <= '9')
 80034aa:	f1a2 0530 	sub.w	r5, r2, #48	@ 0x30
 80034ae:	b2ed      	uxtb	r5, r5
 80034b0:	2d09      	cmp	r5, #9
 80034b2:	d90d      	bls.n	80034d0 <ihex_parser+0x4c>
    else if (h >= 'A' && h <= 'F')
 80034b4:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 80034b8:	b2c9      	uxtb	r1, r1
 80034ba:	2905      	cmp	r1, #5
 80034bc:	d91c      	bls.n	80034f8 <ihex_parser+0x74>
    else if (h >= 'a' && h <= 'z')
 80034be:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 80034c2:	b2c9      	uxtb	r1, r1
 80034c4:	2919      	cmp	r1, #25
 80034c6:	f200 80ed 	bhi.w	80036a4 <ihex_parser+0x220>
        return h - 'a' + 0xA;
 80034ca:	f1a2 0557 	sub.w	r5, r2, #87	@ 0x57
 80034ce:	b2ed      	uxtb	r5, r5
            if (!calc_cs_toogle)
 80034d0:	f898 1000 	ldrb.w	r1, [r8]
 80034d4:	f081 0001 	eor.w	r0, r1, #1
 80034d8:	b991      	cbnz	r1, 8003500 <ihex_parser+0x7c>
            {
                temp_cs = hc;
 80034da:	497b      	ldr	r1, [pc, #492]	@ (80036c8 <ihex_parser+0x244>)
 80034dc:	700d      	strb	r5, [r1, #0]
            }
            else
            {
                calc_cs += (temp_cs << 4) | hc;
            }
            calc_cs_toogle = !calc_cs_toogle;
 80034de:	f888 0000 	strb.w	r0, [r8]
        }

        switch (state)
 80034e2:	2b0b      	cmp	r3, #11
 80034e4:	f200 80e1 	bhi.w	80036aa <ihex_parser+0x226>
 80034e8:	e8df f003 	tbb	[pc, r3]
 80034ec:	4b16162d 	.word	0x4b16162d
 80034f0:	544b4b4b 	.word	0x544b4b4b
 80034f4:	87836b5b 	.word	0x87836b5b
        return h - 'A' + 0xA;
 80034f8:	f1a2 0537 	sub.w	r5, r2, #55	@ 0x37
 80034fc:	b2ed      	uxtb	r5, r5
 80034fe:	e7e7      	b.n	80034d0 <ihex_parser+0x4c>
                calc_cs += (temp_cs << 4) | hc;
 8003500:	f8df c1dc 	ldr.w	ip, [pc, #476]	@ 80036e0 <ihex_parser+0x25c>
 8003504:	4970      	ldr	r1, [pc, #448]	@ (80036c8 <ihex_parser+0x244>)
 8003506:	7809      	ldrb	r1, [r1, #0]
 8003508:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
 800350c:	f89c e000 	ldrb.w	lr, [ip]
 8003510:	4471      	add	r1, lr
 8003512:	f88c 1000 	strb.w	r1, [ip]
 8003516:	e7e2      	b.n	80034de <ihex_parser+0x5a>
            }
            break;

        case BYTE_COUNT_0_STATE:
        case BYTE_COUNT_1_STATE:
            byte_count = (byte_count << 4) | hc;
 8003518:	496c      	ldr	r1, [pc, #432]	@ (80036cc <ihex_parser+0x248>)
 800351a:	780a      	ldrb	r2, [r1, #0]
 800351c:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 8003520:	700a      	strb	r2, [r1, #0]
            ++state;
 8003522:	3301      	adds	r3, #1
 8003524:	4a67      	ldr	r2, [pc, #412]	@ (80036c4 <ihex_parser+0x240>)
 8003526:	7013      	strb	r3, [r2, #0]
    for (i = 0; i<size; i++)
 8003528:	42a6      	cmp	r6, r4
 800352a:	f000 80b5 	beq.w	8003698 <ihex_parser+0x214>
        c = steambuf[i];
 800352e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
        if (c == '\0')
 8003532:	2a00      	cmp	r2, #0
 8003534:	f000 80b4 	beq.w	80036a0 <ihex_parser+0x21c>
        if (state == START_CODE_STATE)
 8003538:	783b      	ldrb	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1b1      	bne.n	80034a2 <ihex_parser+0x1e>
            calc_cs = 0x00;
 800353e:	f889 3000 	strb.w	r3, [r9]
            calc_cs_toogle = false;
 8003542:	f888 3000 	strb.w	r3, [r8]
            if (c == '\r' || c == '\n')
 8003546:	2a0d      	cmp	r2, #13
 8003548:	d0ee      	beq.n	8003528 <ihex_parser+0xa4>
 800354a:	2a0a      	cmp	r2, #10
 800354c:	d0ec      	beq.n	8003528 <ihex_parser+0xa4>
            else if (c == ':')
 800354e:	2a3a      	cmp	r2, #58	@ 0x3a
 8003550:	f040 80ad 	bne.w	80036ae <ihex_parser+0x22a>
                byte_count = 0;
 8003554:	f04f 0a00 	mov.w	sl, #0
 8003558:	4b5c      	ldr	r3, [pc, #368]	@ (80036cc <ihex_parser+0x248>)
 800355a:	f883 a000 	strb.w	sl, [r3]
                record_type = 0;
 800355e:	4b5c      	ldr	r3, [pc, #368]	@ (80036d0 <ihex_parser+0x24c>)
 8003560:	f883 a000 	strb.w	sl, [r3]
                address_lo = 0x0000;
 8003564:	4b5b      	ldr	r3, [pc, #364]	@ (80036d4 <ihex_parser+0x250>)
 8003566:	f8a3 a000 	strh.w	sl, [r3]
                memset(data, 0xFF, sizeof(data));
 800356a:	22ff      	movs	r2, #255	@ 0xff
 800356c:	4611      	mov	r1, r2
 800356e:	485a      	ldr	r0, [pc, #360]	@ (80036d8 <ihex_parser+0x254>)
 8003570:	f009 fff8 	bl	800d564 <memset>
                data_size_in_nibble = 0;
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <ihex_parser+0x258>)
 8003576:	f8a3 a000 	strh.w	sl, [r3]
                ++state;
 800357a:	4b52      	ldr	r3, [pc, #328]	@ (80036c4 <ihex_parser+0x240>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
            break;
 8003580:	e7d2      	b.n	8003528 <ihex_parser+0xa4>
        case ADDR_0_STATE:
        case ADDR_1_STATE:
        case ADDR_2_STATE:
        case ADDR_3_STATE:
        {
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8003582:	4954      	ldr	r1, [pc, #336]	@ (80036d4 <ihex_parser+0x250>)
 8003584:	880a      	ldrh	r2, [r1, #0]
 8003586:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 800358a:	800a      	strh	r2, [r1, #0]
            ++state;
 800358c:	3301      	adds	r3, #1
 800358e:	4a4d      	ldr	r2, [pc, #308]	@ (80036c4 <ihex_parser+0x240>)
 8003590:	7013      	strb	r3, [r2, #0]
            break;
 8003592:	e7c9      	b.n	8003528 <ihex_parser+0xa4>
        }
        
        case RECORD_TYPE_0_STATE:
            if (hc != 0)
 8003594:	2d00      	cmp	r5, #0
 8003596:	f040 808c 	bne.w	80036b2 <ihex_parser+0x22e>
            {
                return false;
            }
            ++state;
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <ihex_parser+0x240>)
 800359c:	2208      	movs	r2, #8
 800359e:	701a      	strb	r2, [r3, #0]
            break;
 80035a0:	e7c2      	b.n	8003528 <ihex_parser+0xa4>

        case RECORD_TYPE_1_STATE:
            if (hc > 5)
 80035a2:	2d05      	cmp	r5, #5
 80035a4:	f200 8087 	bhi.w	80036b6 <ihex_parser+0x232>
            {
                return false;
            }
            
            record_type = hc;
 80035a8:	4b49      	ldr	r3, [pc, #292]	@ (80036d0 <ihex_parser+0x24c>)
 80035aa:	701d      	strb	r5, [r3, #0]

            if (byte_count == 0)
 80035ac:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <ihex_parser+0x248>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b91b      	cbnz	r3, 80035ba <ihex_parser+0x136>
            {
                state = CHECKSUM_0_STATE;
 80035b2:	4b44      	ldr	r3, [pc, #272]	@ (80036c4 <ihex_parser+0x240>)
 80035b4:	220a      	movs	r2, #10
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e7b6      	b.n	8003528 <ihex_parser+0xa4>
            {
                return false;
            }
            else
            {
                ++state;
 80035ba:	4b42      	ldr	r3, [pc, #264]	@ (80036c4 <ihex_parser+0x240>)
 80035bc:	2209      	movs	r2, #9
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e7b2      	b.n	8003528 <ihex_parser+0xa4>

            break;

        case DATA_STATE:
        {
            uint8_t b_index = data_size_in_nibble >> 1;
 80035c2:	4946      	ldr	r1, [pc, #280]	@ (80036dc <ihex_parser+0x258>)
 80035c4:	880b      	ldrh	r3, [r1, #0]
            data[b_index] = (data[b_index] << 4) | hc;
 80035c6:	f3c3 0047 	ubfx	r0, r3, #1, #8
 80035ca:	f8df c10c 	ldr.w	ip, [pc, #268]	@ 80036d8 <ihex_parser+0x254>
 80035ce:	f81c 2000 	ldrb.w	r2, [ip, r0]
 80035d2:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
 80035d6:	f80c 2000 	strb.w	r2, [ip, r0]

            ++data_size_in_nibble;
 80035da:	3301      	adds	r3, #1
 80035dc:	b29b      	uxth	r3, r3
 80035de:	800b      	strh	r3, [r1, #0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 80035e0:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <ihex_parser+0x248>)
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 80035e8:	d89e      	bhi.n	8003528 <ihex_parser+0xa4>
            {
                ++state;
 80035ea:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <ihex_parser+0x240>)
 80035ec:	220a      	movs	r2, #10
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e79a      	b.n	8003528 <ihex_parser+0xa4>
            }
            break;
        }
        
        case CHECKSUM_0_STATE:
            ++state;
 80035f2:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <ihex_parser+0x240>)
 80035f4:	220b      	movs	r2, #11
 80035f6:	701a      	strb	r2, [r3, #0]
            break;
 80035f8:	e796      	b.n	8003528 <ihex_parser+0xa4>

        case CHECKSUM_1_STATE:
            if((byte_count<<1) != data_size_in_nibble)  // Check whether byte count field match the data size 
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <ihex_parser+0x258>)
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	4b33      	ldr	r3, [pc, #204]	@ (80036cc <ihex_parser+0x248>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8003606:	d158      	bne.n	80036ba <ihex_parser+0x236>
            {
                return false;
            }
            
            if (calc_cs != 0x00)
 8003608:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <ihex_parser+0x25c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d156      	bne.n	80036be <ihex_parser+0x23a>
            {
                return false;
            }

            if (record_type == 2)           // Set extended segment addresss
 8003610:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <ihex_parser+0x24c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d019      	beq.n	800364c <ihex_parser+0x1c8>
            {
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
                ex_segment_addr_mode = true;
            }
            else if (record_type == 4)      // Set linear addresss
 8003618:	2b04      	cmp	r3, #4
 800361a:	d022      	beq.n	8003662 <ihex_parser+0x1de>

#if (CONFIG_IHEX_DEBUG_OUTPUT > 0u)
            ihex_debug_output();
#endif

            if (record_type == 0 && callback_fp != 0)
 800361c:	2b00      	cmp	r3, #0
 800361e:	d12e      	bne.n	800367e <ihex_parser+0x1fa>
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <ihex_parser+0x260>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b173      	cbz	r3, 8003644 <ihex_parser+0x1c0>
            {
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003626:	4930      	ldr	r1, [pc, #192]	@ (80036e8 <ihex_parser+0x264>)
 8003628:	7809      	ldrb	r1, [r1, #0]
 800362a:	b309      	cbz	r1, 8003670 <ihex_parser+0x1ec>
 800362c:	492f      	ldr	r1, [pc, #188]	@ (80036ec <ihex_parser+0x268>)
 800362e:	8809      	ldrh	r1, [r1, #0]
 8003630:	4828      	ldr	r0, [pc, #160]	@ (80036d4 <ihex_parser+0x250>)
 8003632:	8800      	ldrh	r0, [r0, #0]
 8003634:	eb00 1001 	add.w	r0, r0, r1, lsl #4
                if(!callback_fp(address, data, data_size_in_nibble>>1))
 8003638:	f3c2 0247 	ubfx	r2, r2, #1, #8
 800363c:	4926      	ldr	r1, [pc, #152]	@ (80036d8 <ihex_parser+0x254>)
 800363e:	4798      	blx	r3
 8003640:	2800      	cmp	r0, #0
 8003642:	d030      	beq.n	80036a6 <ihex_parser+0x222>
            {
            	callback_fp(0,0,0);
            }


            state = START_CODE_STATE;
 8003644:	4b1f      	ldr	r3, [pc, #124]	@ (80036c4 <ihex_parser+0x240>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
            break;
 800364a:	e76d      	b.n	8003528 <ihex_parser+0xa4>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 800364c:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <ihex_parser+0x254>)
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	785b      	ldrb	r3, [r3, #1]
 8003652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                ex_segment_addr_mode = true;
 8003656:	2201      	movs	r2, #1
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003658:	4924      	ldr	r1, [pc, #144]	@ (80036ec <ihex_parser+0x268>)
 800365a:	800b      	strh	r3, [r1, #0]
                ex_segment_addr_mode = false;
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <ihex_parser+0x264>)
 800365e:	701a      	strb	r2, [r3, #0]
            if (record_type == 0 && callback_fp != 0)
 8003660:	e7f0      	b.n	8003644 <ihex_parser+0x1c0>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8003662:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <ihex_parser+0x254>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800366c:	2200      	movs	r2, #0
 800366e:	e7f3      	b.n	8003658 <ihex_parser+0x1d4>
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8003670:	491e      	ldr	r1, [pc, #120]	@ (80036ec <ihex_parser+0x268>)
 8003672:	8809      	ldrh	r1, [r1, #0]
 8003674:	4817      	ldr	r0, [pc, #92]	@ (80036d4 <ihex_parser+0x250>)
 8003676:	8800      	ldrh	r0, [r0, #0]
 8003678:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800367c:	e7dc      	b.n	8003638 <ihex_parser+0x1b4>
            else if((record_type == 1) && (target.TargetFamily == TARGET_STM32H7)) //Add for STM32H7, hex 'End Of File' 32byte(8word) programming unit
 800367e:	2b01      	cmp	r3, #1
 8003680:	d1e0      	bne.n	8003644 <ihex_parser+0x1c0>
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <ihex_parser+0x26c>)
 8003684:	7a1b      	ldrb	r3, [r3, #8]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d1dc      	bne.n	8003644 <ihex_parser+0x1c0>
            	callback_fp(0,0,0);
 800368a:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <ihex_parser+0x260>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	4611      	mov	r1, r2
 8003692:	4610      	mov	r0, r2
 8003694:	4798      	blx	r3
 8003696:	e7d5      	b.n	8003644 <ihex_parser+0x1c0>

        default:
            return false;
        }
    }
    return true;
 8003698:	2001      	movs	r0, #1
 800369a:	e004      	b.n	80036a6 <ihex_parser+0x222>
 800369c:	2001      	movs	r0, #1
}
 800369e:	4770      	bx	lr
            return true;
 80036a0:	2001      	movs	r0, #1
 80036a2:	e000      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036a4:	2000      	movs	r0, #0
}
 80036a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        switch (state)
 80036aa:	2000      	movs	r0, #0
 80036ac:	e7fb      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7f9      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036b2:	2000      	movs	r0, #0
 80036b4:	e7f7      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036b6:	2000      	movs	r0, #0
 80036b8:	e7f5      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036ba:	2000      	movs	r0, #0
 80036bc:	e7f3      	b.n	80036a6 <ihex_parser+0x222>
                return false;
 80036be:	2000      	movs	r0, #0
 80036c0:	e7f1      	b.n	80036a6 <ihex_parser+0x222>
 80036c2:	bf00      	nop
 80036c4:	20000f6f 	.word	0x20000f6f
 80036c8:	20000e62 	.word	0x20000e62
 80036cc:	20000f6e 	.word	0x20000f6e
 80036d0:	20000f67 	.word	0x20000f67
 80036d4:	20000f6c 	.word	0x20000f6c
 80036d8:	20000e68 	.word	0x20000e68
 80036dc:	20000e64 	.word	0x20000e64
 80036e0:	20000e61 	.word	0x20000e61
 80036e4:	20000e5c 	.word	0x20000e5c
 80036e8:	20000f68 	.word	0x20000f68
 80036ec:	20000f6a 	.word	0x20000f6a
 80036f0:	20000e30 	.word	0x20000e30
 80036f4:	20000e60 	.word	0x20000e60

080036f8 <LED_On>:
// LED 제어 함수
void LED_Toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
}

void LED_On(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80036f8:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80036fa:	2200      	movs	r2, #0
 80036fc:	f001 f99e 	bl	8004a3c <HAL_GPIO_WritePin>
}
 8003700:	bd08      	pop	{r3, pc}

08003702 <LED_Off>:

void LED_Off(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8003702:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8003704:	2201      	movs	r2, #1
 8003706:	f001 f999 	bl	8004a3c <HAL_GPIO_WritePin>
}
 800370a:	bd08      	pop	{r3, pc}

0800370c <LED_Handler>:

// SysTick 인터럽트 핸들러
void LED_Handler(void)
{
 800370c:	b510      	push	{r4, lr}
    static uint32_t counter = 0;

    counter += SYS_TICK_PERIOD_MS;
 800370e:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <LED_Handler+0x13c>)
 8003710:	6813      	ldr	r3, [r2, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	6013      	str	r3, [r2, #0]
    static uint8_t step = 0;  // LED 순차적 제어를 위한 단계 변수


    switch (currentState) {
 8003716:	4a4d      	ldr	r2, [pc, #308]	@ (800384c <LED_Handler+0x140>)
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	2a03      	cmp	r2, #3
 800371c:	d871      	bhi.n	8003802 <LED_Handler+0xf6>
 800371e:	e8df f002 	tbb	[pc, r2]
 8003722:	5f02      	.short	0x5f02
 8003724:	8476      	.short	0x8476
        case TARGET_LED_STAT_BOOT:
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 0) {
 8003726:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800372a:	d36a      	bcc.n	8003802 <LED_Handler+0xf6>
 800372c:	4b48      	ldr	r3, [pc, #288]	@ (8003850 <LED_Handler+0x144>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b1bb      	cbz	r3, 8003762 <LED_Handler+0x56>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
            	step++;
            	counter = 0;  // 카운터 초기화
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 1) {
 8003732:	2b01      	cmp	r3, #1
 8003734:	d02a      	beq.n	800378c <LED_Handler+0x80>
            	LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);  // 주황색 켜기
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
            	step++;
            	counter = 0;
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 2) {
 8003736:	2b02      	cmp	r3, #2
 8003738:	d03d      	beq.n	80037b6 <LED_Handler+0xaa>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            	LED_On(LED_RED_GPIO_Port, LED_RED_Pin);        // 빨간색 켜기
            	step++;
            	counter = 0;
            }
            if (counter >= LED_TOGGLE_INTERVAL*2 && step == 3) {
 800373a:	2b03      	cmp	r3, #3
 800373c:	d161      	bne.n	8003802 <LED_Handler+0xf6>
            	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);    // 초록색 켜고 나머지 끄기
 800373e:	4c45      	ldr	r4, [pc, #276]	@ (8003854 <LED_Handler+0x148>)
 8003740:	2104      	movs	r1, #4
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff ffd8 	bl	80036f8 <LED_On>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003748:	2108      	movs	r1, #8
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff ffd9 	bl	8003702 <LED_Off>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003750:	2110      	movs	r1, #16
 8003752:	4620      	mov	r0, r4
 8003754:	f7ff ffd5 	bl	8003702 <LED_Off>
            	step++;  // 마지막 단계로 진행
 8003758:	4a3d      	ldr	r2, [pc, #244]	@ (8003850 <LED_Handler+0x144>)
 800375a:	7813      	ldrb	r3, [r2, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	7013      	strb	r3, [r2, #0]
 8003760:	e04f      	b.n	8003802 <LED_Handler+0xf6>
            	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);   // 초록색 켜기
 8003762:	4c3c      	ldr	r4, [pc, #240]	@ (8003854 <LED_Handler+0x148>)
 8003764:	2104      	movs	r1, #4
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ffc6 	bl	80036f8 <LED_On>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800376c:	2108      	movs	r1, #8
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff ffc7 	bl	8003702 <LED_Off>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003774:	2110      	movs	r1, #16
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff ffc3 	bl	8003702 <LED_Off>
            	step++;
 800377c:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <LED_Handler+0x144>)
 800377e:	7813      	ldrb	r3, [r2, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	7013      	strb	r3, [r2, #0]
            	counter = 0;  // 카운터 초기화
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <LED_Handler+0x13c>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e03a      	b.n	8003802 <LED_Handler+0xf6>
            	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800378c:	4c31      	ldr	r4, [pc, #196]	@ (8003854 <LED_Handler+0x148>)
 800378e:	2104      	movs	r1, #4
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ffb6 	bl	8003702 <LED_Off>
            	LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);  // 주황색 켜기
 8003796:	2108      	movs	r1, #8
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ffad 	bl	80036f8 <LED_On>
            	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 800379e:	2110      	movs	r1, #16
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ffae 	bl	8003702 <LED_Off>
            	step++;
 80037a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <LED_Handler+0x144>)
 80037a8:	7813      	ldrb	r3, [r2, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	7013      	strb	r3, [r2, #0]
            	counter = 0;
 80037ae:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <LED_Handler+0x13c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e025      	b.n	8003802 <LED_Handler+0xf6>
            	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80037b6:	4c27      	ldr	r4, [pc, #156]	@ (8003854 <LED_Handler+0x148>)
 80037b8:	2104      	movs	r1, #4
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff ffa1 	bl	8003702 <LED_Off>
            	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80037c0:	2108      	movs	r1, #8
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff ff9d 	bl	8003702 <LED_Off>
            	LED_On(LED_RED_GPIO_Port, LED_RED_Pin);        // 빨간색 켜기
 80037c8:	2110      	movs	r1, #16
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff94 	bl	80036f8 <LED_On>
            	step++;
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <LED_Handler+0x144>)
 80037d2:	7813      	ldrb	r3, [r2, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	7013      	strb	r3, [r2, #0]
            	counter = 0;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <LED_Handler+0x13c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e010      	b.n	8003802 <LED_Handler+0xf6>
            }
            break;
        case TARGET_LED_STAT_PROGRAMMING:
            if (counter % 100 == 0) { // Fast toggle rate
 80037e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <LED_Handler+0x14c>)
 80037e2:	fba2 1203 	umull	r1, r2, r2, r3
 80037e6:	0952      	lsrs	r2, r2, #5
 80037e8:	2164      	movs	r1, #100	@ 0x64
 80037ea:	fb01 3312 	mls	r3, r1, r2, r3
 80037ee:	b14b      	cbz	r3, 8003804 <LED_Handler+0xf8>
                LED_Toggle(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
            }
          	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80037f0:	4c18      	ldr	r4, [pc, #96]	@ (8003854 <LED_Handler+0x148>)
 80037f2:	2104      	movs	r1, #4
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ff84 	bl	8003702 <LED_Off>
          	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 80037fa:	2110      	movs	r1, #16
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7ff ff80 	bl	8003702 <LED_Off>
          LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
            break;
        default:
            break;
    }
}
 8003802:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8003804:	2108      	movs	r1, #8
 8003806:	4813      	ldr	r0, [pc, #76]	@ (8003854 <LED_Handler+0x148>)
 8003808:	f001 f91e 	bl	8004a48 <HAL_GPIO_TogglePin>
}
 800380c:	e7f0      	b.n	80037f0 <LED_Handler+0xe4>
        	LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800380e:	4c11      	ldr	r4, [pc, #68]	@ (8003854 <LED_Handler+0x148>)
 8003810:	2104      	movs	r1, #4
 8003812:	4620      	mov	r0, r4
 8003814:	f7ff ff70 	bl	80036f8 <LED_On>
        	LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003818:	2108      	movs	r1, #8
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff ff71 	bl	8003702 <LED_Off>
        	LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8003820:	2110      	movs	r1, #16
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ff6d 	bl	8003702 <LED_Off>
            break;
 8003828:	e7eb      	b.n	8003802 <LED_Handler+0xf6>
        	LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800382a:	4c0a      	ldr	r4, [pc, #40]	@ (8003854 <LED_Handler+0x148>)
 800382c:	2104      	movs	r1, #4
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff ff67 	bl	8003702 <LED_Off>
          LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8003834:	2108      	movs	r1, #8
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff ff63 	bl	8003702 <LED_Off>
          LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 800383c:	2110      	movs	r1, #16
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff ff5a 	bl	80036f8 <LED_On>
}
 8003844:	e7dd      	b.n	8003802 <LED_Handler+0xf6>
 8003846:	bf00      	nop
 8003848:	20000f74 	.word	0x20000f74
 800384c:	20000f78 	.word	0x20000f78
 8003850:	20000f70 	.word	0x20000f70
 8003854:	40021000 	.word	0x40021000
 8003858:	51eb851f 	.word	0x51eb851f

0800385c <LED_SetState>:

void LED_SetState(LedStatus status)
{
	currentState = status;
 800385c:	4b01      	ldr	r3, [pc, #4]	@ (8003864 <LED_SetState+0x8>)
 800385e:	7018      	strb	r0, [r3, #0]
}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000f78 	.word	0x20000f78

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error_Handle()\n");
 800386a:	4802      	ldr	r0, [pc, #8]	@ (8003874 <Error_Handler+0xc>)
 800386c:	f009 fd14 	bl	800d298 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003870:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003872:	e7fe      	b.n	8003872 <Error_Handler+0xa>
 8003874:	0800ef7c 	.word	0x0800ef7c

08003878 <SystemClock_Config>:
{
 8003878:	b500      	push	{lr}
 800387a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800387c:	2230      	movs	r2, #48	@ 0x30
 800387e:	2100      	movs	r1, #0
 8003880:	a808      	add	r0, sp, #32
 8003882:	f009 fe6f 	bl	800d564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003886:	2300      	movs	r3, #0
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	9304      	str	r3, [sp, #16]
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	9306      	str	r3, [sp, #24]
 8003890:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	4a21      	ldr	r2, [pc, #132]	@ (800391c <SystemClock_Config+0xa4>)
 8003896:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003898:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800389c:	6411      	str	r1, [r2, #64]	@ 0x40
 800389e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038a0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80038a8:	9302      	str	r3, [sp, #8]
 80038aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003920 <SystemClock_Config+0xa8>)
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80038b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ca:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038cc:	2302      	movs	r3, #2
 80038ce:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80038d4:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038d6:	2204      	movs	r2, #4
 80038d8:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80038da:	2278      	movs	r2, #120	@ 0x78
 80038dc:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038de:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80038e0:	2305      	movs	r3, #5
 80038e2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038e4:	a808      	add	r0, sp, #32
 80038e6:	f001 fea3 	bl	8005630 <HAL_RCC_OscConfig>
 80038ea:	b998      	cbnz	r0, 8003914 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ec:	230f      	movs	r3, #15
 80038ee:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f0:	2302      	movs	r3, #2
 80038f2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f4:	2300      	movs	r3, #0
 80038f6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003902:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003904:	2103      	movs	r1, #3
 8003906:	a803      	add	r0, sp, #12
 8003908:	f002 f8fc 	bl	8005b04 <HAL_RCC_ClockConfig>
 800390c:	b920      	cbnz	r0, 8003918 <SystemClock_Config+0xa0>
}
 800390e:	b015      	add	sp, #84	@ 0x54
 8003910:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003914:	f7ff ffa8 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003918:	f7ff ffa6 	bl	8003868 <Error_Handler>
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000

08003924 <main>:
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8003928:	f000 fcca 	bl	80042c0 <HAL_Init>
  SystemClock_Config();
 800392c:	f7ff ffa4 	bl	8003878 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	2400      	movs	r4, #0
 8003932:	9414      	str	r4, [sp, #80]	@ 0x50
 8003934:	9415      	str	r4, [sp, #84]	@ 0x54
 8003936:	9416      	str	r4, [sp, #88]	@ 0x58
 8003938:	9417      	str	r4, [sp, #92]	@ 0x5c
 800393a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800393c:	9401      	str	r4, [sp, #4]
 800393e:	4da9      	ldr	r5, [pc, #676]	@ (8003be4 <main+0x2c0>)
 8003940:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003942:	f043 0310 	orr.w	r3, r3, #16
 8003946:	632b      	str	r3, [r5, #48]	@ 0x30
 8003948:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003952:	9402      	str	r4, [sp, #8]
 8003954:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395a:	632b      	str	r3, [r5, #48]	@ 0x30
 800395c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	9403      	str	r4, [sp, #12]
 8003968:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	632b      	str	r3, [r5, #48]	@ 0x30
 8003970:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	9303      	str	r3, [sp, #12]
 8003978:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800397a:	9404      	str	r4, [sp, #16]
 800397c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	632b      	str	r3, [r5, #48]	@ 0x30
 8003984:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	9304      	str	r3, [sp, #16]
 800398c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398e:	9405      	str	r4, [sp, #20]
 8003990:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	632b      	str	r3, [r5, #48]	@ 0x30
 8003998:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	9305      	str	r3, [sp, #20]
 80039a0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	9406      	str	r4, [sp, #24]
 80039a4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	632b      	str	r3, [r5, #48]	@ 0x30
 80039ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	9306      	str	r3, [sp, #24]
 80039b4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 80039b6:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 8003c08 <main+0x2e4>
 80039ba:	2201      	movs	r2, #1
 80039bc:	211c      	movs	r1, #28
 80039be:	4648      	mov	r0, r9
 80039c0:	f001 f83c 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin, GPIO_PIN_RESET);
 80039c4:	f8df 8244 	ldr.w	r8, [pc, #580]	@ 8003c0c <main+0x2e8>
 80039c8:	4622      	mov	r2, r4
 80039ca:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80039ce:	4640      	mov	r0, r8
 80039d0:	f001 f834 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SWD_BUF_DIR_Pin|SWD_IO_Pin, GPIO_PIN_RESET);
 80039d4:	4f84      	ldr	r7, [pc, #528]	@ (8003be8 <main+0x2c4>)
 80039d6:	4622      	mov	r2, r4
 80039d8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80039dc:	4638      	mov	r0, r7
 80039de:	f001 f82d 	bl	8004a3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWD_CLK_GPIO_Port, SWD_CLK_Pin, GPIO_PIN_SET);
 80039e2:	2201      	movs	r2, #1
 80039e4:	2140      	movs	r1, #64	@ 0x40
 80039e6:	4638      	mov	r0, r7
 80039e8:	f001 f828 	bl	8004a3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 80039ec:	231c      	movs	r3, #28
 80039ee:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f0:	2601      	movs	r6, #1
 80039f2:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f8:	a914      	add	r1, sp, #80	@ 0x50
 80039fa:	4648      	mov	r0, r9
 80039fc:	f000 ff0e 	bl	800481c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 8003a00:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003a04:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a06:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	a914      	add	r1, sp, #80	@ 0x50
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f000 ff04 	bl	800481c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 8003a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a18:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a1a:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	a914      	add	r1, sp, #80	@ 0x50
 8003a20:	4640      	mov	r0, r8
 8003a22:	f000 fefb 	bl	800481c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_BUF_DIR_Pin|SWD_CLK_Pin;
 8003a26:	2350      	movs	r3, #80	@ 0x50
 8003a28:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2e:	f04f 0803 	mov.w	r8, #3
 8003a32:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a36:	eb0d 0103 	add.w	r1, sp, r3
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f000 feee 	bl	800481c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_IO_Pin;
 8003a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a44:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a46:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a48:	9616      	str	r6, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4a:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_IO_GPIO_Port, &GPIO_InitStruct);
 8003a4e:	a914      	add	r1, sp, #80	@ 0x50
 8003a50:	4638      	mov	r0, r7
 8003a52:	f000 fee3 	bl	800481c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a56:	9400      	str	r4, [sp, #0]
 8003a58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a60:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	2106      	movs	r1, #6
 8003a6e:	203b      	movs	r0, #59	@ 0x3b
 8003a70:	f000 fc78 	bl	8004364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003a74:	203b      	movs	r0, #59	@ 0x3b
 8003a76:	f000 fcab 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	2106      	movs	r1, #6
 8003a7e:	2045      	movs	r0, #69	@ 0x45
 8003a80:	f000 fc70 	bl	8004364 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003a84:	2045      	movs	r0, #69	@ 0x45
 8003a86:	f000 fca3 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8003a8a:	4b58      	ldr	r3, [pc, #352]	@ (8003bec <main+0x2c8>)
 8003a8c:	4a58      	ldr	r2, [pc, #352]	@ (8003bf0 <main+0x2cc>)
 8003a8e:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a90:	605c      	str	r4, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a92:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a94:	60dc      	str	r4, [r3, #12]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a96:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003a98:	619c      	str	r4, [r3, #24]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a9a:	611c      	str	r4, [r3, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9c:	9409      	str	r4, [sp, #36]	@ 0x24
 8003a9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003aa0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003aa2:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa4:	9407      	str	r4, [sp, #28]
 8003aa6:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa8:	940d      	str	r4, [sp, #52]	@ 0x34
 8003aaa:	940e      	str	r4, [sp, #56]	@ 0x38
 8003aac:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003aae:	9410      	str	r4, [sp, #64]	@ 0x40
 8003ab0:	9411      	str	r4, [sp, #68]	@ 0x44
 8003ab2:	9412      	str	r4, [sp, #72]	@ 0x48
 8003ab4:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	4621      	mov	r1, r4
 8003aba:	a814      	add	r0, sp, #80	@ 0x50
 8003abc:	f009 fd52 	bl	800d564 <memset>
  htim1.Instance = TIM1;
 8003ac0:	484c      	ldr	r0, [pc, #304]	@ (8003bf4 <main+0x2d0>)
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf8 <main+0x2d4>)
 8003ac4:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 120-1;
 8003ac6:	2377      	movs	r3, #119	@ 0x77
 8003ac8:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aca:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1000;
 8003acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ad0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ad4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ad8:	f003 fc34 	bl	8007344 <HAL_TIM_Base_Init>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f040 80cf 	bne.w	8003c80 <main+0x35c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ae6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ae8:	a909      	add	r1, sp, #36	@ 0x24
 8003aea:	4842      	ldr	r0, [pc, #264]	@ (8003bf4 <main+0x2d0>)
 8003aec:	f003 fd37 	bl	800755e <HAL_TIM_ConfigClockSource>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	f040 80c7 	bne.w	8003c84 <main+0x360>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003af6:	483f      	ldr	r0, [pc, #252]	@ (8003bf4 <main+0x2d0>)
 8003af8:	f003 fc50 	bl	800739c <HAL_TIM_PWM_Init>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 80c3 	bne.w	8003c88 <main+0x364>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b06:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b08:	a907      	add	r1, sp, #28
 8003b0a:	483a      	ldr	r0, [pc, #232]	@ (8003bf4 <main+0x2d0>)
 8003b0c:	f003 feaa 	bl	8007864 <HAL_TIMEx_MasterConfigSynchronization>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f040 80bb 	bne.w	8003c8c <main+0x368>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b16:	2360      	movs	r3, #96	@ 0x60
 8003b18:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b1e:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b20:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b22:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b24:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b26:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b28:	2208      	movs	r2, #8
 8003b2a:	a90d      	add	r1, sp, #52	@ 0x34
 8003b2c:	4831      	ldr	r0, [pc, #196]	@ (8003bf4 <main+0x2d0>)
 8003b2e:	f003 fc9b 	bl	8007468 <HAL_TIM_PWM_ConfigChannel>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f040 80ac 	bne.w	8003c90 <main+0x36c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b3c:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b3e:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b40:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b42:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b48:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b4a:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b4c:	a914      	add	r1, sp, #80	@ 0x50
 8003b4e:	4829      	ldr	r0, [pc, #164]	@ (8003bf4 <main+0x2d0>)
 8003b50:	f003 fecc 	bl	80078ec <HAL_TIMEx_ConfigBreakDeadTime>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f040 809d 	bne.w	8003c94 <main+0x370>
  HAL_TIM_MspPostInit(&htim1);
 8003b5a:	4826      	ldr	r0, [pc, #152]	@ (8003bf4 <main+0x2d0>)
 8003b5c:	f000 fa3e 	bl	8003fdc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b60:	2300      	movs	r3, #0
 8003b62:	9314      	str	r3, [sp, #80]	@ 0x50
 8003b64:	9315      	str	r3, [sp, #84]	@ 0x54
 8003b66:	9316      	str	r3, [sp, #88]	@ 0x58
 8003b68:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8003b6c:	930e      	str	r3, [sp, #56]	@ 0x38
  htim2.Instance = TIM2;
 8003b6e:	4823      	ldr	r0, [pc, #140]	@ (8003bfc <main+0x2d8>)
 8003b70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b74:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 60-1;
 8003b76:	223b      	movs	r2, #59	@ 0x3b
 8003b78:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8003b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b80:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b82:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b84:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b86:	f003 fbdd 	bl	8007344 <HAL_TIM_Base_Init>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f040 8084 	bne.w	8003c98 <main+0x374>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b94:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b96:	a914      	add	r1, sp, #80	@ 0x50
 8003b98:	4818      	ldr	r0, [pc, #96]	@ (8003bfc <main+0x2d8>)
 8003b9a:	f003 fce0 	bl	800755e <HAL_TIM_ConfigClockSource>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d17c      	bne.n	8003c9c <main+0x378>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ba8:	a90d      	add	r1, sp, #52	@ 0x34
 8003baa:	4814      	ldr	r0, [pc, #80]	@ (8003bfc <main+0x2d8>)
 8003bac:	f003 fe5a 	bl	8007864 <HAL_TIMEx_MasterConfigSynchronization>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d175      	bne.n	8003ca0 <main+0x37c>
  hspi1.Instance = SPI1;
 8003bb4:	4812      	ldr	r0, [pc, #72]	@ (8003c00 <main+0x2dc>)
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <main+0x2e0>)
 8003bb8:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bba:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003bbe:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc4:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc6:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc8:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bce:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bd6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bda:	230a      	movs	r3, #10
 8003bdc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bde:	f003 f939 	bl	8006e54 <HAL_SPI_Init>
 8003be2:	e015      	b.n	8003c10 <main+0x2ec>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020400 	.word	0x40020400
 8003bec:	2000116c 	.word	0x2000116c
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	2000100c 	.word	0x2000100c
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	20000fc4 	.word	0x20000fc4
 8003c00:	20001054 	.word	0x20001054
 8003c04:	40013000 	.word	0x40013000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d147      	bne.n	8003ca4 <main+0x380>
  huart1.Instance = USART1;
 8003c14:	4826      	ldr	r0, [pc, #152]	@ (8003cb0 <main+0x38c>)
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <main+0x390>)
 8003c18:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8003c1a:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8003c1e:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c20:	2300      	movs	r3, #0
 8003c22:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c24:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c26:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8003c28:	2208      	movs	r2, #8
 8003c2a:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c30:	f003 ff7b 	bl	8007b2a <HAL_UART_Init>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d137      	bne.n	8003ca8 <main+0x384>
  MX_FATFS_Init();
 8003c38:	f005 f952 	bl	8008ee0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8003c3c:	f008 ff76 	bl	800cb2c <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 8003c40:	481d      	ldr	r0, [pc, #116]	@ (8003cb8 <main+0x394>)
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <main+0x398>)
 8003c44:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c46:	2300      	movs	r3, #0
 8003c48:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c4a:	227f      	movs	r2, #127	@ 0x7f
 8003c4c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 7874;
 8003c4e:	f641 62c2 	movw	r2, #7874	@ 0x1ec2
 8003c52:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c54:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c56:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c58:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c5a:	f002 f9bf 	bl	8005fdc <HAL_RTC_Init>
 8003c5e:	bb28      	cbnz	r0, 8003cac <main+0x388>
	HAL_TIM_Base_Start(&htim2);
 8003c60:	4817      	ldr	r0, [pc, #92]	@ (8003cc0 <main+0x39c>)
 8003c62:	f003 f9ed 	bl	8007040 <HAL_TIM_Base_Start>
	LED_SetState(TARGET_LED_STAT_BOOT);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7ff fdf8 	bl	800385c <LED_SetState>
	Buzzer_SetState(BUZZER_BOOT);
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7ff fbaf 	bl	80033d0 <Buzzer_SetState>
	log_message("ST-Flash Boot OK! v%d\n", ST_FLASHER_VERSION);
 8003c72:	4914      	ldr	r1, [pc, #80]	@ (8003cc4 <main+0x3a0>)
 8003c74:	4814      	ldr	r0, [pc, #80]	@ (8003cc8 <main+0x3a4>)
 8003c76:	f7fe fa01 	bl	800207c <log_message>
  	Target_MainLoop();
 8003c7a:	f7fe fe25 	bl	80028c8 <Target_MainLoop>
  while (1)
 8003c7e:	e7fc      	b.n	8003c7a <main+0x356>
    Error_Handler();
 8003c80:	f7ff fdf2 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c84:	f7ff fdf0 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c88:	f7ff fdee 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c8c:	f7ff fdec 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c90:	f7ff fdea 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c94:	f7ff fde8 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c98:	f7ff fde6 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c9c:	f7ff fde4 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003ca0:	f7ff fde2 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003ca4:	f7ff fde0 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003ca8:	f7ff fdde 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003cac:	f7ff fddc 	bl	8003868 <Error_Handler>
 8003cb0:	20000f7c 	.word	0x20000f7c
 8003cb4:	40011000 	.word	0x40011000
 8003cb8:	200011f0 	.word	0x200011f0
 8003cbc:	40002800 	.word	0x40002800
 8003cc0:	20000fc4 	.word	0x20000fc4
 8003cc4:	0134da86 	.word	0x0134da86
 8003cc8:	0800ef8c 	.word	0x0800ef8c

08003ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2100      	movs	r1, #0
 8003cd0:	9100      	str	r1, [sp, #0]
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_MspInit+0x34>)
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cde:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	9101      	str	r1, [sp, #4]
 8003ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfa:	b002      	add	sp, #8
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800

08003d04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	b08c      	sub	sp, #48	@ 0x30
 8003d08:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d0a:	2230      	movs	r2, #48	@ 0x30
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4668      	mov	r0, sp
 8003d10:	f009 fc28 	bl	800d564 <memset>
  if(hrtc->Instance==RTC)
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <HAL_RTC_MspInit+0x3c>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003d1c:	b00c      	add	sp, #48	@ 0x30
 8003d1e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d20:	2320      	movs	r3, #32
 8003d22:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <HAL_RTC_MspInit+0x40>)
 8003d26:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d28:	4668      	mov	r0, sp
 8003d2a:	f001 ffc3 	bl	8005cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003d2e:	b920      	cbnz	r0, 8003d3a <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RTC_MspInit+0x44>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 8003d38:	e7f0      	b.n	8003d1c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8003d3a:	f7ff fd95 	bl	8003868 <Error_Handler>
 8003d3e:	e7f7      	b.n	8003d30 <HAL_RTC_MspInit+0x2c>
 8003d40:	40002800 	.word	0x40002800
 8003d44:	00080300 	.word	0x00080300
 8003d48:	42470000 	.word	0x42470000

08003d4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d52:	2300      	movs	r3, #0
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	9305      	str	r3, [sp, #20]
 8003d5a:	9306      	str	r3, [sp, #24]
 8003d5c:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8003d5e:	6802      	ldr	r2, [r0, #0]
 8003d60:	4b59      	ldr	r3, [pc, #356]	@ (8003ec8 <HAL_SD_MspInit+0x17c>)
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d002      	beq.n	8003d6c <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003d66:	b009      	add	sp, #36	@ 0x24
 8003d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6c:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003d6e:	2500      	movs	r5, #0
 8003d70:	9500      	str	r5, [sp, #0]
 8003d72:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8003d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d84:	9200      	str	r2, [sp, #0]
 8003d86:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d88:	9501      	str	r5, [sp, #4]
 8003d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d8c:	f042 0204 	orr.w	r2, r2, #4
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d94:	f002 0204 	and.w	r2, r2, #4
 8003d98:	9201      	str	r2, [sp, #4]
 8003d9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9c:	9502      	str	r5, [sp, #8]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003da0:	f042 0208 	orr.w	r2, r2, #8
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003db0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003db4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	f04f 0802 	mov.w	r8, #2
 8003dba:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dbe:	f04f 0b01 	mov.w	fp, #1
 8003dc2:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc6:	2603      	movs	r6, #3
 8003dc8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003dca:	270c      	movs	r7, #12
 8003dcc:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dce:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8003ee0 <HAL_SD_MspInit+0x194>
 8003dd2:	eb0d 0107 	add.w	r1, sp, r7
 8003dd6:	4648      	mov	r0, r9
 8003dd8:	f000 fd20 	bl	800481c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ddc:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8003de0:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dea:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003dec:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dee:	eb0d 0107 	add.w	r1, sp, r7
 8003df2:	4648      	mov	r0, r9
 8003df4:	f000 fd12 	bl	800481c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003df8:	f04f 0904 	mov.w	r9, #4
 8003dfc:	f8cd 900c 	str.w	r9, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e00:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e04:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003e0a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0c:	eb0d 0107 	add.w	r1, sp, r7
 8003e10:	482e      	ldr	r0, [pc, #184]	@ (8003ecc <HAL_SD_MspInit+0x180>)
 8003e12:	f000 fd03 	bl	800481c <HAL_GPIO_Init>
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003e16:	482e      	ldr	r0, [pc, #184]	@ (8003ed0 <HAL_SD_MspInit+0x184>)
 8003e18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed4 <HAL_SD_MspInit+0x188>)
 8003e1a:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003e1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e20:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e22:	6085      	str	r5, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e24:	60c5      	str	r5, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e2a:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e2c:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e34:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003e36:	2320      	movs	r3, #32
 8003e38:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e3a:	6205      	str	r5, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e3c:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e40:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003e42:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003e46:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003e48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e4c:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003e4e:	f000 fb01 	bl	8004454 <HAL_DMA_Init>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d131      	bne.n	8003eba <HAL_SD_MspInit+0x16e>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003e56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <HAL_SD_MspInit+0x184>)
 8003e58:	6423      	str	r3, [r4, #64]	@ 0x40
 8003e5a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003e5c:	481e      	ldr	r0, [pc, #120]	@ (8003ed8 <HAL_SD_MspInit+0x18c>)
 8003e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_SD_MspInit+0x190>)
 8003e60:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003e62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e66:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e68:	2340      	movs	r3, #64	@ 0x40
 8003e6a:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60c3      	str	r3, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e74:	6102      	str	r2, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e7a:	6142      	str	r2, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e80:	6182      	str	r2, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003e82:	2220      	movs	r2, #32
 8003e84:	61c2      	str	r2, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e86:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e88:	2304      	movs	r3, #4
 8003e8a:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	6283      	str	r3, [r0, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003e90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003e94:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003e96:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e9a:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003e9c:	f000 fada 	bl	8004454 <HAL_DMA_Init>
 8003ea0:	b970      	cbnz	r0, 8003ec0 <HAL_SD_MspInit+0x174>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <HAL_SD_MspInit+0x18c>)
 8003ea4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003ea6:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2105      	movs	r1, #5
 8003eac:	2031      	movs	r0, #49	@ 0x31
 8003eae:	f000 fa59 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003eb2:	2031      	movs	r0, #49	@ 0x31
 8003eb4:	f000 fa8c 	bl	80043d0 <HAL_NVIC_EnableIRQ>
}
 8003eb8:	e755      	b.n	8003d66 <HAL_SD_MspInit+0x1a>
      Error_Handler();
 8003eba:	f7ff fcd5 	bl	8003868 <Error_Handler>
 8003ebe:	e7ca      	b.n	8003e56 <HAL_SD_MspInit+0x10a>
      Error_Handler();
 8003ec0:	f7ff fcd2 	bl	8003868 <Error_Handler>
 8003ec4:	e7ed      	b.n	8003ea2 <HAL_SD_MspInit+0x156>
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40020c00 	.word	0x40020c00
 8003ed0:	2000110c 	.word	0x2000110c
 8003ed4:	40026458 	.word	0x40026458
 8003ed8:	200010ac 	.word	0x200010ac
 8003edc:	400264a0 	.word	0x400264a0
 8003ee0:	40020800 	.word	0x40020800

08003ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9303      	str	r3, [sp, #12]
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	9306      	str	r3, [sp, #24]
 8003ef2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003ef4:	6802      	ldr	r2, [r0, #0]
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_SPI_MspInit+0x7c>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003efc:	b009      	add	sp, #36	@ 0x24
 8003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f00:	2100      	movs	r1, #0
 8003f02:	9101      	str	r1, [sp, #4]
 8003f04:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8003f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f12:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	9102      	str	r1, [sp, #8]
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	9302      	str	r3, [sp, #8]
 8003f2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f2e:	23a0      	movs	r3, #160	@ 0xa0
 8003f30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f32:	2702      	movs	r7, #2
 8003f34:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f36:	2603      	movs	r6, #3
 8003f38:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f3a:	2505      	movs	r5, #5
 8003f3c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3e:	4c09      	ldr	r4, [pc, #36]	@ (8003f64 <HAL_SPI_MspInit+0x80>)
 8003f40:	a903      	add	r1, sp, #12
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 fc6a 	bl	800481c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f48:	2340      	movs	r3, #64	@ 0x40
 8003f4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f54:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f56:	a903      	add	r1, sp, #12
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fc5f 	bl	800481c <HAL_GPIO_Init>
}
 8003f5e:	e7cd      	b.n	8003efc <HAL_SPI_MspInit+0x18>
 8003f60:	40013000 	.word	0x40013000
 8003f64:	40020000 	.word	0x40020000

08003f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f68:	b500      	push	{lr}
 8003f6a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	@ (8003fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d005      	beq.n	8003f80 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d016      	beq.n	8003fa8 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f7a:	b003      	add	sp, #12
 8003f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f80:	2100      	movs	r1, #0
 8003f82:	9100      	str	r1, [sp, #0]
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <HAL_TIM_Base_MspInit+0x70>)
 8003f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003f98:	460a      	mov	r2, r1
 8003f9a:	2019      	movs	r0, #25
 8003f9c:	f000 f9e2 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fa0:	2019      	movs	r0, #25
 8003fa2:	f000 fa15 	bl	80043d0 <HAL_NVIC_EnableIRQ>
 8003fa6:	e7e8      	b.n	8003f7a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fa8:	2100      	movs	r1, #0
 8003faa:	9101      	str	r1, [sp, #4]
 8003fac:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8003fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	201c      	movs	r0, #28
 8003fc6:	f000 f9cd 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fca:	201c      	movs	r0, #28
 8003fcc:	f000 fa00 	bl	80043d0 <HAL_NVIC_EnableIRQ>
}
 8003fd0:	e7d3      	b.n	8003f7a <HAL_TIM_Base_MspInit+0x12>
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40023800 	.word	0x40023800

08003fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fdc:	b500      	push	{lr}
 8003fde:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8003fec:	6802      	ldr	r2, [r0, #0]
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_TIM_MspPostInit+0x54>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d002      	beq.n	8003ffa <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ff4:	b007      	add	sp, #28
 8003ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <HAL_TIM_MspPostInit+0x58>)
 8004000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004002:	f042 0210 	orr.w	r2, r2, #16
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BEEP_Pin;
 8004012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004016:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401c:	2303      	movs	r3, #3
 800401e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004020:	2301      	movs	r3, #1
 8004022:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8004024:	a901      	add	r1, sp, #4
 8004026:	4804      	ldr	r0, [pc, #16]	@ (8004038 <HAL_TIM_MspPostInit+0x5c>)
 8004028:	f000 fbf8 	bl	800481c <HAL_GPIO_Init>
}
 800402c:	e7e2      	b.n	8003ff4 <HAL_TIM_MspPostInit+0x18>
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000
 8004034:	40023800 	.word	0x40023800
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004040:	2300      	movs	r3, #0
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	9304      	str	r3, [sp, #16]
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	9306      	str	r3, [sp, #24]
 800404a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004052:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800405a:	b009      	add	sp, #36	@ 0x24
 800405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800405e:	2400      	movs	r4, #0
 8004060:	9400      	str	r4, [sp, #0]
 8004062:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8004066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004068:	f042 0210 	orr.w	r2, r2, #16
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
 800406e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004070:	f002 0210 	and.w	r2, r2, #16
 8004074:	9200      	str	r2, [sp, #0]
 8004076:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004078:	9401      	str	r4, [sp, #4]
 800407a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
 8004082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004084:	f002 0201 	and.w	r2, r2, #1
 8004088:	9201      	str	r2, [sp, #4]
 800408a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800408c:	9402      	str	r4, [sp, #8]
 800408e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004090:	f042 0202 	orr.w	r2, r2, #2
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	9302      	str	r3, [sp, #8]
 800409e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2702      	movs	r7, #2
 80040a8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040aa:	2603      	movs	r6, #3
 80040ac:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040ae:	2507      	movs	r5, #7
 80040b0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	a903      	add	r1, sp, #12
 80040b4:	4806      	ldr	r0, [pc, #24]	@ (80040d0 <HAL_UART_MspInit+0x94>)
 80040b6:	f000 fbb1 	bl	800481c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040c4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c6:	a903      	add	r1, sp, #12
 80040c8:	4802      	ldr	r0, [pc, #8]	@ (80040d4 <HAL_UART_MspInit+0x98>)
 80040ca:	f000 fba7 	bl	800481c <HAL_GPIO_Init>
}
 80040ce:	e7c4      	b.n	800405a <HAL_UART_MspInit+0x1e>
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400

080040d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040d8:	e7fe      	b.n	80040d8 <NMI_Handler>

080040da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040da:	e7fe      	b.n	80040da <HardFault_Handler>

080040dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <MemManage_Handler>

080040de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <BusFault_Handler>

080040e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e0:	e7fe      	b.n	80040e0 <UsageFault_Handler>

080040e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040e2:	4770      	bx	lr

080040e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e4:	4770      	bx	lr

080040e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e6:	4770      	bx	lr

080040e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ea:	f000 f903 	bl	80042f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LED_Handler();
 80040ee:	f7ff fb0d 	bl	800370c <LED_Handler>
  FileTransferCheck_CheckCompletion();
 80040f2:	f7ff f8e5 	bl	80032c0 <FileTransferCheck_CheckCompletion>
  /* USER CODE END SysTick_IRQn 1 */
}
 80040f6:	bd08      	pop	{r3, pc}

080040f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80040f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040fa:	4802      	ldr	r0, [pc, #8]	@ (8004104 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80040fc:	f002 ffe4 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004100:	bd08      	pop	{r3, pc}
 8004102:	bf00      	nop
 8004104:	2000100c 	.word	0x2000100c

08004108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004108:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800410a:	4802      	ldr	r0, [pc, #8]	@ (8004114 <TIM2_IRQHandler+0xc>)
 800410c:	f002 ffdc 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004110:	bd08      	pop	{r3, pc}
 8004112:	bf00      	nop
 8004114:	20000fc4 	.word	0x20000fc4

08004118 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800411a:	4802      	ldr	r0, [pc, #8]	@ (8004124 <SDIO_IRQHandler+0xc>)
 800411c:	f002 fd48 	bl	8006bb0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004120:	bd08      	pop	{r3, pc}
 8004122:	bf00      	nop
 8004124:	2000116c 	.word	0x2000116c

08004128 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800412a:	4802      	ldr	r0, [pc, #8]	@ (8004134 <DMA2_Stream3_IRQHandler+0xc>)
 800412c:	f000 fa86 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004130:	bd08      	pop	{r3, pc}
 8004132:	bf00      	nop
 8004134:	2000110c 	.word	0x2000110c

08004138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800413a:	4802      	ldr	r0, [pc, #8]	@ (8004144 <OTG_FS_IRQHandler+0xc>)
 800413c:	f000 fe8c 	bl	8004e58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004140:	bd08      	pop	{r3, pc}
 8004142:	bf00      	nop
 8004144:	20001bf4 	.word	0x20001bf4

08004148 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800414a:	4802      	ldr	r0, [pc, #8]	@ (8004154 <DMA2_Stream6_IRQHandler+0xc>)
 800414c:	f000 fa76 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004150:	bd08      	pop	{r3, pc}
 8004152:	bf00      	nop
 8004154:	200010ac 	.word	0x200010ac

08004158 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004158:	2001      	movs	r0, #1
 800415a:	4770      	bx	lr

0800415c <_kill>:

int _kill(int pid, int sig)
{
 800415c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800415e:	f009 fa4f 	bl	800d600 <__errno>
 8004162:	2316      	movs	r3, #22
 8004164:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004166:	f04f 30ff 	mov.w	r0, #4294967295
 800416a:	bd08      	pop	{r3, pc}

0800416c <_exit>:

void _exit (int status)
{
 800416c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800416e:	f009 fa47 	bl	800d600 <__errno>
 8004172:	2316      	movs	r3, #22
 8004174:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004176:	e7fe      	b.n	8004176 <_exit+0xa>

08004178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004178:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800417a:	1e16      	subs	r6, r2, #0
 800417c:	dd07      	ble.n	800418e <_read+0x16>
 800417e:	460c      	mov	r4, r1
 8004180:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004182:	f3af 8000 	nop.w
 8004186:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418a:	42a5      	cmp	r5, r4
 800418c:	d1f9      	bne.n	8004182 <_read+0xa>
  }

  return len;
}
 800418e:	4630      	mov	r0, r6
 8004190:	bd70      	pop	{r4, r5, r6, pc}

08004192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004192:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004194:	1e16      	subs	r6, r2, #0
 8004196:	dd07      	ble.n	80041a8 <_write+0x16>
 8004198:	460c      	mov	r4, r1
 800419a:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800419c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80041a0:	f7fd ff5c 	bl	800205c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a4:	42a5      	cmp	r5, r4
 80041a6:	d1f9      	bne.n	800419c <_write+0xa>
  }
  return len;
}
 80041a8:	4630      	mov	r0, r6
 80041aa:	bd70      	pop	{r4, r5, r6, pc}

080041ac <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	4770      	bx	lr

080041b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80041b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041b6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80041bc:	2001      	movs	r0, #1
 80041be:	4770      	bx	lr

080041c0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80041c0:	2000      	movs	r0, #0
 80041c2:	4770      	bx	lr

080041c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041c8:	4a0c      	ldr	r2, [pc, #48]	@ (80041fc <_sbrk+0x38>)
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	b152      	cbz	r2, 80041e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ce:	4a0b      	ldr	r2, [pc, #44]	@ (80041fc <_sbrk+0x38>)
 80041d0:	6810      	ldr	r0, [r2, #0]
 80041d2:	4403      	add	r3, r0
 80041d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <_sbrk+0x3c>)
 80041d6:	490b      	ldr	r1, [pc, #44]	@ (8004204 <_sbrk+0x40>)
 80041d8:	1a52      	subs	r2, r2, r1
 80041da:	4293      	cmp	r3, r2
 80041dc:	d806      	bhi.n	80041ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80041de:	4a07      	ldr	r2, [pc, #28]	@ (80041fc <_sbrk+0x38>)
 80041e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80041e2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80041e4:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <_sbrk+0x38>)
 80041e6:	4908      	ldr	r1, [pc, #32]	@ (8004208 <_sbrk+0x44>)
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	e7f0      	b.n	80041ce <_sbrk+0xa>
    errno = ENOMEM;
 80041ec:	f009 fa08 	bl	800d600 <__errno>
 80041f0:	230c      	movs	r3, #12
 80041f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e7f3      	b.n	80041e2 <_sbrk+0x1e>
 80041fa:	bf00      	nop
 80041fc:	20001210 	.word	0x20001210
 8004200:	20030000 	.word	0x20030000
 8004204:	00002000 	.word	0x00002000
 8004208:	20002228 	.word	0x20002228

0800420c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4a03      	ldr	r2, [pc, #12]	@ (800421c <SystemInit+0x10>)
 800420e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004216:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004258 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004224:	f7ff fff2 	bl	800420c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004228:	480c      	ldr	r0, [pc, #48]	@ (800425c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800422a:	490d      	ldr	r1, [pc, #52]	@ (8004260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800422c:	4a0d      	ldr	r2, [pc, #52]	@ (8004264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800422e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004230:	e002      	b.n	8004238 <LoopCopyDataInit>

08004232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004236:	3304      	adds	r3, #4

08004238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800423a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800423c:	d3f9      	bcc.n	8004232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800423e:	4a0a      	ldr	r2, [pc, #40]	@ (8004268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004240:	4c0a      	ldr	r4, [pc, #40]	@ (800426c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004244:	e001      	b.n	800424a <LoopFillZerobss>

08004246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004248:	3204      	adds	r2, #4

0800424a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800424a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800424c:	d3fb      	bcc.n	8004246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800424e:	f009 f9dd 	bl	800d60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004252:	f7ff fb67 	bl	8003924 <main>
  bx  lr    
 8004256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004258:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800425c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004260:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8004264:	0800f5fc 	.word	0x0800f5fc
  ldr r2, =_sbss
 8004268:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800426c:	20002224 	.word	0x20002224

08004270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004270:	e7fe      	b.n	8004270 <ADC_IRQHandler>
	...

08004274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004274:	b510      	push	{r4, lr}
 8004276:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <HAL_InitTick+0x40>)
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004280:	fbb3 f3f2 	udiv	r3, r3, r2
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <HAL_InitTick+0x44>)
 8004286:	6810      	ldr	r0, [r2, #0]
 8004288:	fbb0 f0f3 	udiv	r0, r0, r3
 800428c:	f000 f8ae 	bl	80043ec <HAL_SYSTICK_Config>
 8004290:	b968      	cbnz	r0, 80042ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004292:	2c0f      	cmp	r4, #15
 8004294:	d901      	bls.n	800429a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004296:	2001      	movs	r0, #1
 8004298:	e00a      	b.n	80042b0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800429a:	2200      	movs	r2, #0
 800429c:	4621      	mov	r1, r4
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	f000 f85f 	bl	8004364 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a6:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_InitTick+0x48>)
 80042a8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042aa:	2000      	movs	r0, #0
 80042ac:	e000      	b.n	80042b0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
}
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
 80042b8:	20000008 	.word	0x20000008
 80042bc:	20000010 	.word	0x20000010

080042c0 <HAL_Init>:
{
 80042c0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_Init+0x30>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042da:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042dc:	2003      	movs	r0, #3
 80042de:	f000 f82f 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7ff ffc6 	bl	8004274 <HAL_InitTick>
  HAL_MspInit();
 80042e8:	f7ff fcf0 	bl	8003ccc <HAL_MspInit>
}
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd08      	pop	{r3, pc}
 80042f0:	40023c00 	.word	0x40023c00

080042f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80042f4:	4a03      	ldr	r2, [pc, #12]	@ (8004304 <HAL_IncTick+0x10>)
 80042f6:	6811      	ldr	r1, [r2, #0]
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <HAL_IncTick+0x14>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	440b      	add	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]
}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20001214 	.word	0x20001214
 8004308:	2000000c 	.word	0x2000000c

0800430c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800430c:	4b01      	ldr	r3, [pc, #4]	@ (8004314 <HAL_GetTick+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20001214 	.word	0x20001214

08004318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800431c:	f7ff fff6 	bl	800430c <HAL_GetTick>
 8004320:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004322:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004326:	d002      	beq.n	800432e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004328:	4b04      	ldr	r3, [pc, #16]	@ (800433c <HAL_Delay+0x24>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800432e:	f7ff ffed 	bl	800430c <HAL_GetTick>
 8004332:	1b40      	subs	r0, r0, r5
 8004334:	42a0      	cmp	r0, r4
 8004336:	d3fa      	bcc.n	800432e <HAL_Delay+0x16>
  {
  }
}
 8004338:	bd38      	pop	{r3, r4, r5, pc}
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c

08004340 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4907      	ldr	r1, [pc, #28]	@ (8004360 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004342:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004344:	0203      	lsls	r3, r0, #8
 8004346:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800434e:	0412      	lsls	r2, r2, #16
 8004350:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800435c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004364:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004366:	4b18      	ldr	r3, [pc, #96]	@ (80043c8 <HAL_NVIC_SetPriority+0x64>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436e:	f1c3 0c07 	rsb	ip, r3, #7
 8004372:	f1bc 0f04 	cmp.w	ip, #4
 8004376:	bf28      	it	cs
 8004378:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437c:	f103 0e04 	add.w	lr, r3, #4
 8004380:	f1be 0f06 	cmp.w	lr, #6
 8004384:	bf8c      	ite	hi
 8004386:	3b03      	subhi	r3, #3
 8004388:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438a:	f04f 3eff 	mov.w	lr, #4294967295
 800438e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004392:	ea21 010c 	bic.w	r1, r1, ip
 8004396:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	fa0e fe03 	lsl.w	lr, lr, r3
 800439c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80043a2:	2800      	cmp	r0, #0
 80043a4:	db09      	blt.n	80043ba <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	0109      	lsls	r1, r1, #4
 80043a8:	b2c9      	uxtb	r1, r1
 80043aa:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80043ae:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80043b2:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043b6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	f000 000f 	and.w	r0, r0, #15
 80043be:	0109      	lsls	r1, r1, #4
 80043c0:	b2c9      	uxtb	r1, r1
 80043c2:	4b02      	ldr	r3, [pc, #8]	@ (80043cc <HAL_NVIC_SetPriority+0x68>)
 80043c4:	5419      	strb	r1, [r3, r0]
 80043c6:	e7f6      	b.n	80043b6 <HAL_NVIC_SetPriority+0x52>
 80043c8:	e000ed00 	.word	0xe000ed00
 80043cc:	e000ed14 	.word	0xe000ed14

080043d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043d0:	2800      	cmp	r0, #0
 80043d2:	db07      	blt.n	80043e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d4:	0941      	lsrs	r1, r0, #5
 80043d6:	f000 001f 	and.w	r0, r0, #31
 80043da:	2301      	movs	r3, #1
 80043dc:	4083      	lsls	r3, r0
 80043de:	4a02      	ldr	r2, [pc, #8]	@ (80043e8 <HAL_NVIC_EnableIRQ+0x18>)
 80043e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100

080043ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043ec:	3801      	subs	r0, #1
 80043ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80043f2:	d20b      	bcs.n	800440c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043f8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <HAL_SYSTICK_Config+0x24>)
 80043fc:	21f0      	movs	r1, #240	@ 0xf0
 80043fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004402:	2000      	movs	r0, #0
 8004404:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004406:	2207      	movs	r2, #7
 8004408:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800440a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800440c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800440e:	4770      	bx	lr
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004414:	b410      	push	{r4}
 8004416:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	b2d8      	uxtb	r0, r3
 800441c:	3810      	subs	r0, #16
 800441e:	490b      	ldr	r1, [pc, #44]	@ (800444c <DMA_CalcBaseAndBitshift+0x38>)
 8004420:	fba1 4100 	umull	r4, r1, r1, r0
 8004424:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004426:	4c0a      	ldr	r4, [pc, #40]	@ (8004450 <DMA_CalcBaseAndBitshift+0x3c>)
 8004428:	5c61      	ldrb	r1, [r4, r1]
 800442a:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800442c:	285f      	cmp	r0, #95	@ 0x5f
 800442e:	d908      	bls.n	8004442 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004430:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004434:	f023 0303 	bic.w	r3, r3, #3
 8004438:	1d18      	adds	r0, r3, #4
 800443a:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800443c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004440:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004442:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8004446:	f020 0003 	bic.w	r0, r0, #3
 800444a:	e7f6      	b.n	800443a <DMA_CalcBaseAndBitshift+0x26>
 800444c:	aaaaaaab 	.word	0xaaaaaaab
 8004450:	0800efbc 	.word	0x0800efbc

08004454 <HAL_DMA_Init>:
{
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff ff58 	bl	800430c <HAL_GetTick>
  if(hdma == NULL)
 800445c:	2c00      	cmp	r4, #0
 800445e:	f000 808c 	beq.w	800457a <HAL_DMA_Init+0x126>
 8004462:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800446a:	2300      	movs	r3, #0
 800446c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f012 0f01 	tst.w	r2, #1
 8004482:	d00a      	beq.n	800449a <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004484:	f7ff ff42 	bl	800430c <HAL_GetTick>
 8004488:	1b43      	subs	r3, r0, r5
 800448a:	2b05      	cmp	r3, #5
 800448c:	d9f5      	bls.n	800447a <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800448e:	2320      	movs	r3, #32
 8004490:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004492:	2003      	movs	r0, #3
 8004494:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8004498:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 800449a:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800449c:	4938      	ldr	r1, [pc, #224]	@ (8004580 <HAL_DMA_Init+0x12c>)
 800449e:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	68a0      	ldr	r0, [r4, #8]
 80044a4:	4302      	orrs	r2, r0
 80044a6:	68e0      	ldr	r0, [r4, #12]
 80044a8:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044aa:	6920      	ldr	r0, [r4, #16]
 80044ac:	4302      	orrs	r2, r0
 80044ae:	6960      	ldr	r0, [r4, #20]
 80044b0:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b2:	69a0      	ldr	r0, [r4, #24]
 80044b4:	4302      	orrs	r2, r0
 80044b6:	69e0      	ldr	r0, [r4, #28]
 80044b8:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ba:	6a20      	ldr	r0, [r4, #32]
 80044bc:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044be:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044c2:	2904      	cmp	r1, #4
 80044c4:	d021      	beq.n	800450a <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 80044c6:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80044c8:	6821      	ldr	r1, [r4, #0]
 80044ca:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044cc:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 80044d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80044d2:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d10a      	bne.n	80044ee <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80044d8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80044da:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044de:	b133      	cbz	r3, 80044ee <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044e0:	69a5      	ldr	r5, [r4, #24]
 80044e2:	bb3d      	cbnz	r5, 8004534 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80044e4:	2801      	cmp	r0, #1
 80044e6:	d01f      	beq.n	8004528 <HAL_DMA_Init+0xd4>
 80044e8:	f030 0002 	bics.w	r0, r0, #2
 80044ec:	d012      	beq.n	8004514 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80044ee:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff ff8f 	bl	8004414 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80044f8:	233f      	movs	r3, #63	@ 0x3f
 80044fa:	4093      	lsls	r3, r2
 80044fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fe:	2000      	movs	r0, #0
 8004500:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004502:	2301      	movs	r3, #1
 8004504:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004508:	e7c6      	b.n	8004498 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800450a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800450c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800450e:	4301      	orrs	r1, r0
 8004510:	430a      	orrs	r2, r1
 8004512:	e7d8      	b.n	80044c6 <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004514:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0e8      	beq.n	80044ee <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800451c:	2340      	movs	r3, #64	@ 0x40
 800451e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004520:	2001      	movs	r0, #1
 8004522:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8004526:	e7b7      	b.n	8004498 <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004528:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800452c:	bf14      	ite	ne
 800452e:	2300      	movne	r3, #0
 8004530:	2301      	moveq	r3, #1
 8004532:	e7f1      	b.n	8004518 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004534:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8004538:	d008      	beq.n	800454c <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800453a:	2802      	cmp	r0, #2
 800453c:	d9ee      	bls.n	800451c <HAL_DMA_Init+0xc8>
 800453e:	2803      	cmp	r0, #3
 8004540:	d1d5      	bne.n	80044ee <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004542:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0d1      	beq.n	80044ee <HAL_DMA_Init+0x9a>
 800454a:	e7e7      	b.n	800451c <HAL_DMA_Init+0xc8>
    switch (tmp)
 800454c:	2803      	cmp	r0, #3
 800454e:	d8ce      	bhi.n	80044ee <HAL_DMA_Init+0x9a>
 8004550:	a501      	add	r5, pc, #4	@ (adr r5, 8004558 <HAL_DMA_Init+0x104>)
 8004552:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8004556:	bf00      	nop
 8004558:	0800451d 	.word	0x0800451d
 800455c:	08004569 	.word	0x08004569
 8004560:	0800451d 	.word	0x0800451d
 8004564:	0800456f 	.word	0x0800456f
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004568:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800456c:	e7eb      	b.n	8004546 <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800456e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004572:	bf14      	ite	ne
 8004574:	2300      	movne	r3, #0
 8004576:	2301      	moveq	r3, #1
 8004578:	e7e5      	b.n	8004546 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
 800457c:	e78c      	b.n	8004498 <HAL_DMA_Init+0x44>
 800457e:	bf00      	nop
 8004580:	f010803f 	.word	0xf010803f

08004584 <HAL_DMA_Start_IT>:
{
 8004584:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004586:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8004588:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 800458c:	f1bc 0f01 	cmp.w	ip, #1
 8004590:	d03f      	beq.n	8004612 <HAL_DMA_Start_IT+0x8e>
 8004592:	f04f 0c01 	mov.w	ip, #1
 8004596:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800459a:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 800459e:	fa5f fc8c 	uxtb.w	ip, ip
 80045a2:	f1bc 0f01 	cmp.w	ip, #1
 80045a6:	d005      	beq.n	80045b4 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 80045a8:	2300      	movs	r3, #0
 80045aa:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 80045ae:	2002      	movs	r0, #2
}
 80045b0:	bc70      	pop	{r4, r5, r6}
 80045b2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	2502      	movs	r5, #2
 80045b6:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ba:	2500      	movs	r5, #0
 80045bc:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045be:	6806      	ldr	r6, [r0, #0]
 80045c0:	6835      	ldr	r5, [r6, #0]
 80045c2:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80045c6:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80045c8:	6805      	ldr	r5, [r0, #0]
 80045ca:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045cc:	6883      	ldr	r3, [r0, #8]
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d01a      	beq.n	8004608 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80045d2:	6803      	ldr	r3, [r0, #0]
 80045d4:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045d6:	6803      	ldr	r3, [r0, #0]
 80045d8:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045da:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80045dc:	233f      	movs	r3, #63	@ 0x3f
 80045de:	4093      	lsls	r3, r2
 80045e0:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045e2:	6802      	ldr	r2, [r0, #0]
 80045e4:	6813      	ldr	r3, [r2, #0]
 80045e6:	f043 0316 	orr.w	r3, r3, #22
 80045ea:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80045ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80045ee:	b123      	cbz	r3, 80045fa <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 80045f0:	6802      	ldr	r2, [r0, #0]
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80045fa:	6802      	ldr	r2, [r0, #0]
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2000      	movs	r0, #0
 8004606:	e7d3      	b.n	80045b0 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8004608:	6803      	ldr	r3, [r0, #0]
 800460a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800460c:	6803      	ldr	r3, [r0, #0]
 800460e:	60d9      	str	r1, [r3, #12]
 8004610:	e7e3      	b.n	80045da <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8004612:	2002      	movs	r0, #2
 8004614:	e7cc      	b.n	80045b0 <HAL_DMA_Start_IT+0x2c>

08004616 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004616:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d003      	beq.n	8004628 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004624:	2001      	movs	r0, #1
 8004626:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8004628:	2305      	movs	r3, #5
 800462a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800462e:	6802      	ldr	r2, [r0, #0]
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004638:	2000      	movs	r0, #0
}
 800463a:	4770      	bx	lr

0800463c <HAL_DMA_IRQHandler>:
{
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463e:	b083      	sub	sp, #12
 8004640:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004646:	4b72      	ldr	r3, [pc, #456]	@ (8004810 <HAL_DMA_IRQHandler+0x1d4>)
 8004648:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800464c:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800464e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004650:	2308      	movs	r3, #8
 8004652:	4093      	lsls	r3, r2
 8004654:	422b      	tst	r3, r5
 8004656:	d010      	beq.n	800467a <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004658:	6803      	ldr	r3, [r0, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f012 0f04 	tst.w	r2, #4
 8004660:	d00b      	beq.n	800467a <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800466a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800466c:	2308      	movs	r3, #8
 800466e:	4093      	lsls	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004672:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800467a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800467c:	2301      	movs	r3, #1
 800467e:	4093      	lsls	r3, r2
 8004680:	422b      	tst	r3, r5
 8004682:	d009      	beq.n	8004698 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	6952      	ldr	r2, [r2, #20]
 8004688:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800468c:	d004      	beq.n	8004698 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800468e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004690:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004698:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800469a:	2304      	movs	r3, #4
 800469c:	4093      	lsls	r3, r2
 800469e:	422b      	tst	r3, r5
 80046a0:	d009      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	f012 0f02 	tst.w	r2, #2
 80046aa:	d004      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80046b8:	2310      	movs	r3, #16
 80046ba:	4093      	lsls	r3, r2
 80046bc:	422b      	tst	r3, r5
 80046be:	d024      	beq.n	800470a <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f012 0f08 	tst.w	r2, #8
 80046c8:	d01f      	beq.n	800470a <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80046d4:	d00d      	beq.n	80046f2 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80046dc:	d104      	bne.n	80046e8 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80046de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046e0:	b19b      	cbz	r3, 800470a <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80046e2:	4620      	mov	r0, r4
 80046e4:	4798      	blx	r3
 80046e6:	e010      	b.n	800470a <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80046ea:	b173      	cbz	r3, 800470a <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80046ec:	4620      	mov	r0, r4
 80046ee:	4798      	blx	r3
 80046f0:	e00b      	b.n	800470a <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80046f8:	d103      	bne.n	8004702 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004702:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004704:	b10b      	cbz	r3, 800470a <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8004706:	4620      	mov	r0, r4
 8004708:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800470a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800470c:	2320      	movs	r3, #32
 800470e:	4093      	lsls	r3, r2
 8004710:	422b      	tst	r3, r5
 8004712:	d055      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	f012 0f10 	tst.w	r2, #16
 800471c:	d050      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800471e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004720:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b05      	cmp	r3, #5
 8004728:	d00e      	beq.n	8004748 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004732:	d033      	beq.n	800479c <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800473a:	d12a      	bne.n	8004792 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 800473c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03e      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8004742:	4620      	mov	r0, r4
 8004744:	4798      	blx	r3
 8004746:	e03b      	b.n	80047c0 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	f023 0316 	bic.w	r3, r3, #22
 8004750:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	6953      	ldr	r3, [r2, #20]
 8004756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800475e:	b1a3      	cbz	r3, 800478a <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f023 0308 	bic.w	r3, r3, #8
 8004768:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800476a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800476c:	233f      	movs	r3, #63	@ 0x3f
 800476e:	4093      	lsls	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004772:	2301      	movs	r3, #1
 8004774:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004778:	2300      	movs	r3, #0
 800477a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800477e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d043      	beq.n	800480c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004784:	4620      	mov	r0, r4
 8004786:	4798      	blx	r3
 8004788:	e040      	b.n	800480c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800478a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e7      	bne.n	8004760 <HAL_DMA_IRQHandler+0x124>
 8004790:	e7eb      	b.n	800476a <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8004792:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004794:	b1a3      	cbz	r3, 80047c0 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8004796:	4620      	mov	r0, r4
 8004798:	4798      	blx	r3
 800479a:	e011      	b.n	80047c0 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80047a2:	d109      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f022 0210 	bic.w	r2, r2, #16
 80047aa:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80047b2:	2300      	movs	r3, #0
 80047b4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80047b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80047ba:	b10b      	cbz	r3, 80047c0 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 80047bc:	4620      	mov	r0, r4
 80047be:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80047c2:	b31b      	cbz	r3, 800480c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80047c6:	f013 0f01 	tst.w	r3, #1
 80047ca:	d01b      	beq.n	8004804 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 80047cc:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <HAL_DMA_IRQHandler+0x1d8>)
 80047ce:	fba3 3606 	umull	r3, r6, r3, r6
 80047d2:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 80047d4:	2305      	movs	r3, #5
 80047d6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	42b3      	cmp	r3, r6
 80047ec:	d804      	bhi.n	80047f8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f013 0f01 	tst.w	r3, #1
 80047f6:	d1f5      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80047fe:	2300      	movs	r3, #0
 8004800:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004804:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004806:	b10b      	cbz	r3, 800480c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004808:	4620      	mov	r0, r4
 800480a:	4798      	blx	r3
}
 800480c:	b003      	add	sp, #12
 800480e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004810:	20000008 	.word	0x20000008
 8004814:	1b4e81b5 	.word	0x1b4e81b5

08004818 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004818:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800481a:	4770      	bx	lr

0800481c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b083      	sub	sp, #12
 8004822:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004824:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004826:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800482a:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800482c:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004830:	4c7c      	ldr	r4, [pc, #496]	@ (8004a24 <HAL_GPIO_Init+0x208>)
 8004832:	e04b      	b.n	80048cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8004834:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004836:	fa05 fa02 	lsl.w	sl, r5, r2
 800483a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800483e:	68cf      	ldr	r7, [r1, #12]
 8004840:	4097      	lsls	r7, r2
 8004842:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004846:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004848:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800484a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484e:	684f      	ldr	r7, [r1, #4]
 8004850:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8004854:	409f      	lsls	r7, r3
 8004856:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800485a:	6047      	str	r7, [r0, #4]
 800485c:	e044      	b.n	80048e8 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800485e:	f04f 0c00 	mov.w	ip, #0
 8004862:	fa0c fc0b 	lsl.w	ip, ip, fp
 8004866:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800486a:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 800486e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004870:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004874:	684e      	ldr	r6, [r1, #4]
 8004876:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800487a:	bf0c      	ite	eq
 800487c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8004880:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8004884:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8004886:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004888:	684e      	ldr	r6, [r1, #4]
 800488a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800488e:	bf0c      	ite	eq
 8004890:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8004894:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8004898:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 800489a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800489c:	684e      	ldr	r6, [r1, #4]
 800489e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80048a2:	bf0c      	ite	eq
 80048a4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80048a8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 80048ac:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ae:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b0:	684e      	ldr	r6, [r1, #4]
 80048b2:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80048b6:	bf0c      	ite	eq
 80048b8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 80048bc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 80048c0:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c2:	3301      	adds	r3, #1
 80048c4:	3202      	adds	r2, #2
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	f000 80a9 	beq.w	8004a1e <HAL_GPIO_Init+0x202>
    ioposition = 0x01U << position;
 80048cc:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d0:	680f      	ldr	r7, [r1, #0]
 80048d2:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 80048d6:	ea3c 0707 	bics.w	r7, ip, r7
 80048da:	d1f2      	bne.n	80048c2 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048dc:	684f      	ldr	r7, [r1, #4]
 80048de:	f007 0703 	and.w	r7, r7, #3
 80048e2:	3f01      	subs	r7, #1
 80048e4:	2f01      	cmp	r7, #1
 80048e6:	d9a5      	bls.n	8004834 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e8:	684f      	ldr	r7, [r1, #4]
 80048ea:	f007 0703 	and.w	r7, r7, #3
 80048ee:	2f03      	cmp	r7, #3
 80048f0:	d023      	beq.n	800493a <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 80048f2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048f4:	fa05 fc02 	lsl.w	ip, r5, r2
 80048f8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fc:	688f      	ldr	r7, [r1, #8]
 80048fe:	4097      	lsls	r7, r2
 8004900:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8004904:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004906:	684f      	ldr	r7, [r1, #4]
 8004908:	f007 0703 	and.w	r7, r7, #3
 800490c:	2f02      	cmp	r7, #2
 800490e:	d114      	bne.n	800493a <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8004910:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004914:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004918:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491c:	f003 0b07 	and.w	fp, r3, #7
 8004920:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004924:	fa08 fa0b 	lsl.w	sl, r8, fp
 8004928:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800492c:	690f      	ldr	r7, [r1, #16]
 800492e:	fa07 f70b 	lsl.w	r7, r7, fp
 8004932:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004936:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 800493a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493c:	fa05 fc02 	lsl.w	ip, r5, r2
 8004940:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004944:	684f      	ldr	r7, [r1, #4]
 8004946:	f007 0703 	and.w	r7, r7, #3
 800494a:	4097      	lsls	r7, r2
 800494c:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8004950:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004952:	684f      	ldr	r7, [r1, #4]
 8004954:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8004958:	d0b3      	beq.n	80048c2 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495a:	2700      	movs	r7, #0
 800495c:	9701      	str	r7, [sp, #4]
 800495e:	4e32      	ldr	r6, [pc, #200]	@ (8004a28 <HAL_GPIO_Init+0x20c>)
 8004960:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8004962:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8004966:	6477      	str	r7, [r6, #68]	@ 0x44
 8004968:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800496a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 800496e:	9701      	str	r7, [sp, #4]
 8004970:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004972:	f023 0703 	bic.w	r7, r3, #3
 8004976:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800497a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800497e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004982:	f003 0b03 	and.w	fp, r3, #3
 8004986:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800498a:	fa08 fc0b 	lsl.w	ip, r8, fp
 800498e:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004992:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8004996:	42b0      	cmp	r0, r6
 8004998:	f43f af61 	beq.w	800485e <HAL_GPIO_Init+0x42>
 800499c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80049a0:	42b0      	cmp	r0, r6
 80049a2:	d024      	beq.n	80049ee <HAL_GPIO_Init+0x1d2>
 80049a4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80049a8:	42b0      	cmp	r0, r6
 80049aa:	d023      	beq.n	80049f4 <HAL_GPIO_Init+0x1d8>
 80049ac:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8004a2c <HAL_GPIO_Init+0x210>
 80049b0:	4560      	cmp	r0, ip
 80049b2:	d022      	beq.n	80049fa <HAL_GPIO_Init+0x1de>
 80049b4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049b8:	4560      	cmp	r0, ip
 80049ba:	d021      	beq.n	8004a00 <HAL_GPIO_Init+0x1e4>
 80049bc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049c0:	4560      	cmp	r0, ip
 80049c2:	d020      	beq.n	8004a06 <HAL_GPIO_Init+0x1ea>
 80049c4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049c8:	4560      	cmp	r0, ip
 80049ca:	d01f      	beq.n	8004a0c <HAL_GPIO_Init+0x1f0>
 80049cc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049d0:	4560      	cmp	r0, ip
 80049d2:	d01e      	beq.n	8004a12 <HAL_GPIO_Init+0x1f6>
 80049d4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049d8:	4560      	cmp	r0, ip
 80049da:	d01d      	beq.n	8004a18 <HAL_GPIO_Init+0x1fc>
 80049dc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80049e0:	4560      	cmp	r0, ip
 80049e2:	bf14      	ite	ne
 80049e4:	f04f 0c0a 	movne.w	ip, #10
 80049e8:	f04f 0c09 	moveq.w	ip, #9
 80049ec:	e739      	b.n	8004862 <HAL_GPIO_Init+0x46>
 80049ee:	f04f 0c01 	mov.w	ip, #1
 80049f2:	e736      	b.n	8004862 <HAL_GPIO_Init+0x46>
 80049f4:	f04f 0c02 	mov.w	ip, #2
 80049f8:	e733      	b.n	8004862 <HAL_GPIO_Init+0x46>
 80049fa:	f04f 0c03 	mov.w	ip, #3
 80049fe:	e730      	b.n	8004862 <HAL_GPIO_Init+0x46>
 8004a00:	f04f 0c04 	mov.w	ip, #4
 8004a04:	e72d      	b.n	8004862 <HAL_GPIO_Init+0x46>
 8004a06:	f04f 0c05 	mov.w	ip, #5
 8004a0a:	e72a      	b.n	8004862 <HAL_GPIO_Init+0x46>
 8004a0c:	f04f 0c06 	mov.w	ip, #6
 8004a10:	e727      	b.n	8004862 <HAL_GPIO_Init+0x46>
 8004a12:	f04f 0c07 	mov.w	ip, #7
 8004a16:	e724      	b.n	8004862 <HAL_GPIO_Init+0x46>
 8004a18:	f04f 0c08 	mov.w	ip, #8
 8004a1c:	e721      	b.n	8004862 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8004a1e:	b003      	add	sp, #12
 8004a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a24:	40013c00 	.word	0x40013c00
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40020c00 	.word	0x40020c00

08004a30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a30:	6903      	ldr	r3, [r0, #16]
 8004a32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004a34:	bf14      	ite	ne
 8004a36:	2001      	movne	r0, #1
 8004a38:	2000      	moveq	r0, #0
 8004a3a:	4770      	bx	lr

08004a3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a3c:	b10a      	cbz	r2, 8004a42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	6181      	str	r1, [r0, #24]
 8004a40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a42:	0409      	lsls	r1, r1, #16
 8004a44:	6181      	str	r1, [r0, #24]
  }
}
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a48:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a4a:	ea01 0203 	and.w	r2, r1, r3
 8004a4e:	ea21 0103 	bic.w	r1, r1, r3
 8004a52:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a56:	6181      	str	r1, [r0, #24]
}
 8004a58:	4770      	bx	lr

08004a5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a5a:	b530      	push	{r4, r5, lr}
 8004a5c:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d06e      	beq.n	8004b40 <HAL_PCD_Init+0xe6>
 8004a62:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004a64:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a66:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8004a6a:	b1d3      	cbz	r3, 8004aa2 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004a72:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  {
    hpcd->Init.dma_enable = 0U;
 8004a76:	bf04      	itt	eq
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	f003 fd79 	bl	8008574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a82:	7c23      	ldrb	r3, [r4, #16]
 8004a84:	f88d 3000 	strb.w	r3, [sp]
 8004a88:	1d23      	adds	r3, r4, #4
 8004a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	f003 fcaf 	bl	80083f0 <USB_CoreInit>
 8004a92:	b158      	cbz	r0, 8004aac <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a94:	2302      	movs	r3, #2
 8004a96:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004a9a:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	b003      	add	sp, #12
 8004aa0:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004aa2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8004aa6:	f008 f971 	bl	800cd8c <HAL_PCD_MspInit>
 8004aaa:	e7df      	b.n	8004a6c <HAL_PCD_Init+0x12>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004aac:	2100      	movs	r1, #0
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	f003 fd66 	bl	8008580 <USB_SetCurrentMode>
 8004ab4:	bbb0      	cbnz	r0, 8004b24 <HAL_PCD_Init+0xca>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab6:	7925      	ldrb	r5, [r4, #4]
 8004ab8:	b32d      	cbz	r5, 8004b06 <HAL_PCD_Init+0xac>
 8004aba:	4623      	mov	r3, r4
 8004abc:	4622      	mov	r2, r4
 8004abe:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8004ac0:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ac4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 8004ac6:	f882 e015 	strb.w	lr, [r2, #21]
    hpcd->IN_ep[i].num = i;
 8004aca:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004acc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ace:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ad0:	61d0      	str	r0, [r2, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad2:	6210      	str	r0, [r2, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ad4:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad8:	468c      	mov	ip, r1
 8004ada:	3101      	adds	r1, #1
 8004adc:	42a9      	cmp	r1, r5
 8004ade:	d1f2      	bne.n	8004ac6 <HAL_PCD_Init+0x6c>
 8004ae0:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8004ae8:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004aec:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004af0:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004af4:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004af8:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afc:	3324      	adds	r3, #36	@ 0x24
 8004afe:	4561      	cmp	r1, ip
 8004b00:	f101 0101 	add.w	r1, r1, #1
 8004b04:	d1ee      	bne.n	8004ae4 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b06:	7c23      	ldrb	r3, [r4, #16]
 8004b08:	f88d 3000 	strb.w	r3, [sp]
 8004b0c:	1d23      	adds	r3, r4, #4
 8004b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	f003 fdb5 	bl	8008680 <USB_DevInit>
 8004b16:	4605      	mov	r5, r0
 8004b18:	b148      	cbz	r0, 8004b2e <HAL_PCD_Init+0xd4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004b20:	2501      	movs	r5, #1
 8004b22:	e7bb      	b.n	8004a9c <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b24:	2302      	movs	r3, #2
 8004b26:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004b2a:	2501      	movs	r5, #1
 8004b2c:	e7b6      	b.n	8004a9c <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	f004 f950 	bl	8008dde <USB_DevDisconnect>
  return HAL_OK;
 8004b3e:	e7ad      	b.n	8004a9c <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8004b40:	2501      	movs	r5, #1
 8004b42:	e7ab      	b.n	8004a9c <HAL_PCD_Init+0x42>

08004b44 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b44:	6803      	ldr	r3, [r0, #0]

  __HAL_LOCK(hpcd);
 8004b46:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8004b4a:	2a01      	cmp	r2, #1
 8004b4c:	d01a      	beq.n	8004b84 <HAL_PCD_Start+0x40>
{
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004b52:	2201      	movs	r2, #1
 8004b54:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004b5e:	d002      	beq.n	8004b66 <HAL_PCD_Start+0x22>
 8004b60:	7b42      	ldrb	r2, [r0, #13]
 8004b62:	2a01      	cmp	r2, #1
 8004b64:	d009      	beq.n	8004b7a <HAL_PCD_Start+0x36>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b66:	6820      	ldr	r0, [r4, #0]
 8004b68:	f003 fcfe 	bl	8008568 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	f004 f928 	bl	8008dc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004b78:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004b80:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b82:	e7f0      	b.n	8004b66 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8004b84:	2002      	movs	r0, #2
}
 8004b86:	4770      	bx	lr

08004b88 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8004b88:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d00c      	beq.n	8004baa <HAL_PCD_SetAddress+0x22>
{
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004b94:	2301      	movs	r3, #1
 8004b96:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004b9a:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f004 f900 	bl	8008da2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004ba8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004baa:	2002      	movs	r0, #2
}
 8004bac:	4770      	bx	lr

08004bae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	468c      	mov	ip, r1
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bb4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004bb8:	d12a      	bne.n	8004c10 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bba:	f001 000f 	and.w	r0, r1, #15
 8004bbe:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8004bc2:	eb04 0e81 	add.w	lr, r4, r1, lsl #2
 8004bc6:	f50e 7115 	add.w	r1, lr, #596	@ 0x254
    ep->is_in = 0U;
 8004bca:	4670      	mov	r0, lr
 8004bcc:	f04f 0e00 	mov.w	lr, #0
 8004bd0:	f880 e255 	strb.w	lr, [r0, #597]	@ 0x255
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd4:	f00c 0c0f 	and.w	ip, ip, #15
 8004bd8:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004bdc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004be0:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8004be2:	710b      	strb	r3, [r1, #4]

  if (ep->is_in != 0U)
 8004be4:	784a      	ldrb	r2, [r1, #1]
 8004be6:	b10a      	cbz	r2, 8004bec <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004be8:	f8a1 c01a 	strh.w	ip, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bec:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8004bee:	bf04      	itt	eq
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 8004bf4:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d019      	beq.n	8004c30 <HAL_PCD_EP_Open+0x82>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	f003 fe19 	bl	800883a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return ret;
}
 8004c0e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c10:	f001 000f 	and.w	r0, r1, #15
 8004c14:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8004c18:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004c1c:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004c1e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004c22:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004c26:	f04f 0e01 	mov.w	lr, #1
 8004c2a:	f880 e015 	strb.w	lr, [r0, #21]
 8004c2e:	e7d1      	b.n	8004bd4 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8004c30:	2002      	movs	r0, #2
 8004c32:	e7ec      	b.n	8004c0e <HAL_PCD_EP_Open+0x60>

08004c34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c3a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004c3e:	d11f      	bne.n	8004c80 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c40:	f001 020f 	and.w	r2, r1, #15
 8004c44:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8004c48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004c4c:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004c50:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8004c54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8004c64:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d017      	beq.n	8004c9c <HAL_PCD_EP_Close+0x68>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c72:	6820      	ldr	r0, [r4, #0]
 8004c74:	f003 fe2c 	bl	80088d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
  return HAL_OK;
}
 8004c7e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	f001 020f 	and.w	r2, r1, #15
 8004c84:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8004c88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004c8c:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004c8e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8004c92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004c96:	2001      	movs	r0, #1
 8004c98:	7550      	strb	r0, [r2, #21]
 8004c9a:	e7e0      	b.n	8004c5e <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8004c9c:	2002      	movs	r0, #2
 8004c9e:	e7ee      	b.n	8004c7e <HAL_PCD_EP_Close+0x4a>

08004ca0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ca4:	f001 0c0f 	and.w	ip, r1, #15
 8004ca8:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004cac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004cb0:	f501 7115 	add.w	r1, r1, #596	@ 0x254

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb4:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004cb8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004cbc:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8004cc0:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8004cca:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cce:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
 8004cd2:	7982      	ldrb	r2, [r0, #6]
 8004cd4:	2a01      	cmp	r2, #1
 8004cd6:	d004      	beq.n	8004ce2 <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd8:	6800      	ldr	r0, [r0, #0]
 8004cda:	f003 fecf 	bl	8008a7c <USB_EPStartXfer>

  return HAL_OK;
}
 8004cde:	2000      	movs	r0, #0
 8004ce0:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004ce2:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8004ce6:	e7f7      	b.n	8004cd8 <HAL_PCD_EP_Receive+0x38>

08004ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ce8:	f001 010f 	and.w	r1, r1, #15
 8004cec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004cf0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8004cf4:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8004cf8:	4770      	bx	lr

08004cfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfe:	f001 0c0f 	and.w	ip, r1, #15
 8004d02:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004d06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004d0a:	3114      	adds	r1, #20

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d0c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004d10:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004d14:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8004d18:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d28:	f88e c014 	strb.w	ip, [lr, #20]

  if (hpcd->Init.dma_enable == 1U)
 8004d2c:	7982      	ldrb	r2, [r0, #6]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d004      	beq.n	8004d3c <HAL_PCD_EP_Transmit+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d32:	6800      	ldr	r0, [r0, #0]
 8004d34:	f003 fea2 	bl	8008a7c <USB_EPStartXfer>

  return HAL_OK;
}
 8004d38:	2000      	movs	r0, #0
 8004d3a:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004d3c:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8004d40:	e7f7      	b.n	8004d32 <HAL_PCD_EP_Transmit+0x38>

08004d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d42:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d44:	f001 050f 	and.w	r5, r1, #15
 8004d48:	7902      	ldrb	r2, [r0, #4]
 8004d4a:	42aa      	cmp	r2, r5
 8004d4c:	d336      	bcc.n	8004dbc <HAL_PCD_EP_SetStall+0x7a>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460b      	mov	r3, r1
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d52:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004d56:	d11e      	bne.n	8004d96 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d58:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004d60:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004d64:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004d68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  }

  ep->is_stall = 1U;
 8004d72:	2301      	movs	r3, #1
 8004d74:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d76:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 8004d78:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d01f      	beq.n	8004dc0 <HAL_PCD_EP_SetStall+0x7e>
 8004d80:	2301      	movs	r3, #1
 8004d82:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	f003 ffb0 	bl	8008cec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8c:	b17d      	cbz	r5, 8004dae <HAL_PCD_EP_SetStall+0x6c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }

  __HAL_UNLOCK(hpcd);
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d96:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8004d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004d9e:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004da0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004da4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004da8:	2201      	movs	r2, #1
 8004daa:	755a      	strb	r2, [r3, #21]
 8004dac:	e7e1      	b.n	8004d72 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004dae:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004db2:	79a1      	ldrb	r1, [r4, #6]
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	f004 f863 	bl	8008e80 <USB_EP0_OutStart>
 8004dba:	e7e8      	b.n	8004d8e <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	e7e9      	b.n	8004d94 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8004dc0:	2002      	movs	r0, #2
 8004dc2:	e7e7      	b.n	8004d94 <HAL_PCD_EP_SetStall+0x52>

08004dc4 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dc4:	f001 030f 	and.w	r3, r1, #15
 8004dc8:	7902      	ldrb	r2, [r0, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d32e      	bcc.n	8004e2c <HAL_PCD_EP_ClrStall+0x68>
{
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dd2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004dd6:	d11d      	bne.n	8004e14 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004ddc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004de0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8004de4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004de8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004dec:	2000      	movs	r0, #0
 8004dee:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }

  ep->is_stall = 0U;
 8004df2:	2200      	movs	r2, #0
 8004df4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df6:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8004df8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d017      	beq.n	8004e30 <HAL_PCD_EP_ClrStall+0x6c>
 8004e00:	2301      	movs	r3, #1
 8004e02:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	f003 ff9d 	bl	8008d46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8004e12:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e14:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004e18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e1c:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8004e1e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004e22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004e26:	2001      	movs	r0, #1
 8004e28:	7550      	strb	r0, [r2, #21]
 8004e2a:	e7e2      	b.n	8004df2 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 8004e2c:	2001      	movs	r0, #1
}
 8004e2e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004e30:	2002      	movs	r0, #2
 8004e32:	e7ee      	b.n	8004e12 <HAL_PCD_EP_ClrStall+0x4e>

08004e34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e36:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3a:	f001 010f 	and.w	r1, r1, #15
 8004e3e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004e42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e46:	bf14      	ite	ne
 8004e48:	3114      	addne	r1, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e4a:	f501 7115 	addeq.w	r1, r1, #596	@ 0x254
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e4e:	6800      	ldr	r0, [r0, #0]
 8004e50:	f003 fdac 	bl	80089ac <USB_EPStopXfer>

  return ret;
}
 8004e54:	bd08      	pop	{r3, pc}
	...

08004e58 <HAL_PCD_IRQHandler>:
{
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	b089      	sub	sp, #36	@ 0x24
 8004e5e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e60:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e62:	4630      	mov	r0, r6
 8004e64:	f003 fff7 	bl	8008e56 <USB_GetMode>
 8004e68:	b110      	cbz	r0, 8004e70 <HAL_PCD_IRQHandler+0x18>
}
 8004e6a:	b009      	add	sp, #36	@ 0x24
 8004e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e70:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	f003 ffc1 	bl	8008dfa <USB_ReadInterrupts>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0f6      	beq.n	8004e6a <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e7c:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8004e86:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8004e8a:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	f003 ffb3 	bl	8008dfa <USB_ReadInterrupts>
 8004e94:	f010 0f02 	tst.w	r0, #2
 8004e98:	d004      	beq.n	8004ea4 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	6953      	ldr	r3, [r2, #20]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	f003 ffa8 	bl	8008dfa <USB_ReadInterrupts>
 8004eaa:	f010 0f10 	tst.w	r0, #16
 8004eae:	d012      	beq.n	8004ed6 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	6993      	ldr	r3, [r2, #24]
 8004eb4:	f023 0310 	bic.w	r3, r3, #16
 8004eb8:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8004eba:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ebc:	f005 070f 	and.w	r7, r5, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ec0:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d051      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x114>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d06d      	beq.n	8004fa8 <HAL_PCD_IRQHandler+0x150>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	6993      	ldr	r3, [r2, #24]
 8004ed0:	f043 0310 	orr.w	r3, r3, #16
 8004ed4:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	f003 ff8f 	bl	8008dfa <USB_ReadInterrupts>
 8004edc:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8004ee0:	d174      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x174>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	f003 ff89 	bl	8008dfa <USB_ReadInterrupts>
 8004ee8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8004eec:	f040 8155 	bne.w	800519a <HAL_PCD_IRQHandler+0x342>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f003 ff82 	bl	8008dfa <USB_ReadInterrupts>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f2c0 8225 	blt.w	8005346 <HAL_PCD_IRQHandler+0x4ee>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	f003 ff7c 	bl	8008dfa <USB_ReadInterrupts>
 8004f02:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8004f06:	d00a      	beq.n	8004f1e <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f013 0f01 	tst.w	r3, #1
 8004f10:	f040 8232 	bne.w	8005378 <HAL_PCD_IRQHandler+0x520>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	6953      	ldr	r3, [r2, #20]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	f003 ff6b 	bl	8008dfa <USB_ReadInterrupts>
 8004f24:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8004f28:	f040 822a 	bne.w	8005380 <HAL_PCD_IRQHandler+0x528>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	f003 ff64 	bl	8008dfa <USB_ReadInterrupts>
 8004f32:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8004f36:	f040 827a 	bne.w	800542e <HAL_PCD_IRQHandler+0x5d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f3a:	6820      	ldr	r0, [r4, #0]
 8004f3c:	f003 ff5d 	bl	8008dfa <USB_ReadInterrupts>
 8004f40:	f010 0f08 	tst.w	r0, #8
 8004f44:	f040 828b 	bne.w	800545e <HAL_PCD_IRQHandler+0x606>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	f003 ff56 	bl	8008dfa <USB_ReadInterrupts>
 8004f4e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004f52:	f000 829b 	beq.w	800548c <HAL_PCD_IRQHandler+0x634>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f56:	69b3      	ldr	r3, [r6, #24]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5c:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f5e:	7923      	ldrb	r3, [r4, #4]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	f240 8293 	bls.w	800548c <HAL_PCD_IRQHandler+0x634>
 8004f66:	4627      	mov	r7, r4
 8004f68:	2501      	movs	r5, #1
 8004f6a:	e28a      	b.n	8005482 <HAL_PCD_IRQHandler+0x62a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004f70:	421d      	tst	r5, r3
 8004f72:	d0ab      	beq.n	8004ecc <HAL_PCD_IRQHandler+0x74>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f74:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f78:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
 8004f7c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8004f80:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8004f84:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f003 fe8b 	bl	8008ca4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f8e:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8004f92:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
 8004f96:	4453      	add	r3, sl
 8004f98:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f9c:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8004fa0:	4453      	add	r3, sl
 8004fa2:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8004fa6:	e791      	b.n	8004ecc <HAL_PCD_IRQHandler+0x74>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fa8:	2208      	movs	r2, #8
 8004faa:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f003 fe78 	bl	8008ca4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fb4:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 8004fb8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004fbc:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8004fc0:	f8d1 2268 	ldr.w	r2, [r1, #616]	@ 0x268
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
 8004fca:	e77f      	b.n	8004ecc <HAL_PCD_IRQHandler+0x74>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	f003 ff18 	bl	8008e02 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d084      	beq.n	8004ee2 <HAL_PCD_IRQHandler+0x8a>
 8004fd8:	f506 6730 	add.w	r7, r6, #2816	@ 0xb00
 8004fdc:	46a2      	mov	sl, r4
      epnum = 0U;
 8004fde:	46d9      	mov	r9, fp
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004fe0:	f8cd b010 	str.w	fp, [sp, #16]
 8004fe4:	e0ab      	b.n	800513e <HAL_PCD_IRQHandler+0x2e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fea:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fec:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ff0:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8004ff4:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 8004ff8:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004ffa:	79a2      	ldrb	r2, [r4, #6]
 8004ffc:	2a01      	cmp	r2, #1
 8004ffe:	d00e      	beq.n	800501e <HAL_PCD_IRQHandler+0x1c6>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005000:	4aa0      	ldr	r2, [pc, #640]	@ (8005284 <HAL_PCD_IRQHandler+0x42c>)
 8005002:	4594      	cmp	ip, r2
 8005004:	d04c      	beq.n	80050a0 <HAL_PCD_IRQHandler+0x248>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005006:	f1b9 0f00 	cmp.w	r9, #0
 800500a:	d103      	bne.n	8005014 <HAL_PCD_IRQHandler+0x1bc>
 800500c:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 8005010:	2b00      	cmp	r3, #0
 8005012:	d056      	beq.n	80050c2 <HAL_PCD_IRQHandler+0x26a>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005014:	4659      	mov	r1, fp
 8005016:	4620      	mov	r0, r4
 8005018:	f007 ff02 	bl	800ce20 <HAL_PCD_DataOutStageCallback>
 800501c:	e09d      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800501e:	f011 0f08 	tst.w	r1, #8
 8005022:	d00b      	beq.n	800503c <HAL_PCD_IRQHandler+0x1e4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005024:	4a98      	ldr	r2, [pc, #608]	@ (8005288 <HAL_PCD_IRQHandler+0x430>)
 8005026:	4594      	cmp	ip, r2
 8005028:	f240 8097 	bls.w	800515a <HAL_PCD_IRQHandler+0x302>
 800502c:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8005030:	f000 8093 	beq.w	800515a <HAL_PCD_IRQHandler+0x302>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005034:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	e08e      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800503c:	f011 0f20 	tst.w	r1, #32
 8005040:	d002      	beq.n	8005048 <HAL_PCD_IRQHandler+0x1f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005042:	2220      	movs	r2, #32
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	e088      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005048:	f011 0f28 	tst.w	r1, #40	@ 0x28
 800504c:	f040 8085 	bne.w	800515a <HAL_PCD_IRQHandler+0x302>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005050:	4a8d      	ldr	r2, [pc, #564]	@ (8005288 <HAL_PCD_IRQHandler+0x430>)
 8005052:	4594      	cmp	ip, r2
 8005054:	d906      	bls.n	8005064 <HAL_PCD_IRQHandler+0x20c>
 8005056:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800505a:	d003      	beq.n	8005064 <HAL_PCD_IRQHandler+0x20c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800505c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	e07a      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800506a:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
 8005074:	f1b9 0f00 	cmp.w	r9, #0
 8005078:	d107      	bne.n	800508a <HAL_PCD_IRQHandler+0x232>
          if (ep->xfer_len == 0U)
 800507a:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 800507e:	b14a      	cbz	r2, 8005094 <HAL_PCD_IRQHandler+0x23c>
            ep->xfer_buff += ep->xfer_count;
 8005080:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 8005084:	441a      	add	r2, r3
 8005086:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800508a:	4659      	mov	r1, fp
 800508c:	4620      	mov	r0, r4
 800508e:	f007 fec7 	bl	800ce20 <HAL_PCD_DataOutStageCallback>
 8005092:	e062      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005094:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005098:	2101      	movs	r1, #1
 800509a:	f003 fef1 	bl	8008e80 <USB_EP0_OutStart>
 800509e:	e7f4      	b.n	800508a <HAL_PCD_IRQHandler+0x232>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050a0:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80050a4:	d003      	beq.n	80050ae <HAL_PCD_IRQHandler+0x256>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	e055      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050ae:	f011 0f20 	tst.w	r1, #32
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050b2:	bf1c      	itt	ne
 80050b4:	2220      	movne	r2, #32
 80050b6:	609a      	strne	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b8:	4659      	mov	r1, fp
 80050ba:	4620      	mov	r0, r4
 80050bc:	f007 feb0 	bl	800ce20 <HAL_PCD_DataOutStageCallback>
 80050c0:	e04b      	b.n	800515a <HAL_PCD_IRQHandler+0x302>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050c2:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80050c6:	2100      	movs	r1, #0
 80050c8:	f003 feda 	bl	8008e80 <USB_EP0_OutStart>
 80050cc:	e7a2      	b.n	8005014 <HAL_PCD_IRQHandler+0x1bc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050ce:	2308      	movs	r3, #8
 80050d0:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d2:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050da:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 80050de:	6898      	ldr	r0, [r3, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050e0:	4a69      	ldr	r2, [pc, #420]	@ (8005288 <HAL_PCD_IRQHandler+0x430>)
 80050e2:	4291      	cmp	r1, r2
 80050e4:	f240 8259 	bls.w	800559a <HAL_PCD_IRQHandler+0x742>
 80050e8:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80050ec:	d002      	beq.n	80050f4 <HAL_PCD_IRQHandler+0x29c>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80050f2:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050f4:	4620      	mov	r0, r4
 80050f6:	f007 fe8b 	bl	800ce10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050fa:	79a3      	ldrb	r3, [r4, #6]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d12f      	bne.n	8005160 <HAL_PCD_IRQHandler+0x308>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005100:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005104:	2101      	movs	r1, #1
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	f003 feba 	bl	8008e80 <USB_EP0_OutStart>
 800510c:	e028      	b.n	8005160 <HAL_PCD_IRQHandler+0x308>
            if (ep->is_iso_incomplete == 1U)
 800510e:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 8005112:	2b01      	cmp	r3, #1
 8005114:	d036      	beq.n	8005184 <HAL_PCD_IRQHandler+0x32c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005116:	2302      	movs	r3, #2
 8005118:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800511a:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800511e:	bf1c      	itt	ne
 8005120:	2320      	movne	r3, #32
 8005122:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005124:	f418 5f00 	tst.w	r8, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005128:	bf1c      	itt	ne
 800512a:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 800512e:	60bb      	strne	r3, [r7, #8]
        epnum++;
 8005130:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8005134:	3720      	adds	r7, #32
 8005136:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 800513a:	086d      	lsrs	r5, r5, #1
 800513c:	d02a      	beq.n	8005194 <HAL_PCD_IRQHandler+0x33c>
        if ((ep_intr & 0x1U) != 0U)
 800513e:	f015 0f01 	tst.w	r5, #1
 8005142:	d0f5      	beq.n	8005130 <HAL_PCD_IRQHandler+0x2d8>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005144:	fa5f fb89 	uxtb.w	fp, r9
 8005148:	4659      	mov	r1, fp
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	f003 fe69 	bl	8008e22 <USB_ReadDevOutEPInterrupt>
 8005150:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005152:	f010 0f01 	tst.w	r0, #1
 8005156:	f47f af46 	bne.w	8004fe6 <HAL_PCD_IRQHandler+0x18e>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800515a:	f018 0f08 	tst.w	r8, #8
 800515e:	d1b6      	bne.n	80050ce <HAL_PCD_IRQHandler+0x276>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005160:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005164:	bf1c      	itt	ne
 8005166:	2310      	movne	r3, #16
 8005168:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800516a:	f018 0f02 	tst.w	r8, #2
 800516e:	d0d4      	beq.n	800511a <HAL_PCD_IRQHandler+0x2c2>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005170:	6973      	ldr	r3, [r6, #20]
 8005172:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005176:	d0ca      	beq.n	800510e <HAL_PCD_IRQHandler+0x2b6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005178:	9a03      	ldr	r2, [sp, #12]
 800517a:	6853      	ldr	r3, [r2, #4]
 800517c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	e7c4      	b.n	800510e <HAL_PCD_IRQHandler+0x2b6>
              ep->is_iso_incomplete = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800518a:	4659      	mov	r1, fp
 800518c:	4620      	mov	r0, r4
 800518e:	f007 fe97 	bl	800cec0 <HAL_PCD_ISOOUTIncompleteCallback>
 8005192:	e7c0      	b.n	8005116 <HAL_PCD_IRQHandler+0x2be>
 8005194:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005198:	e6a3      	b.n	8004ee2 <HAL_PCD_IRQHandler+0x8a>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800519a:	6820      	ldr	r0, [r4, #0]
 800519c:	f003 fe39 	bl	8008e12 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80051a0:	4680      	mov	r8, r0
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f43f aea4 	beq.w	8004ef0 <HAL_PCD_IRQHandler+0x98>
 80051a8:	46a2      	mov	sl, r4
 80051aa:	f506 6910 	add.w	r9, r6, #2304	@ 0x900
      epnum = 0U;
 80051ae:	465d      	mov	r5, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051b0:	f8cd b010 	str.w	fp, [sp, #16]
 80051b4:	e024      	b.n	8005200 <HAL_PCD_IRQHandler+0x3a8>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051b6:	4659      	mov	r1, fp
 80051b8:	4620      	mov	r0, r4
 80051ba:	f007 fe3d 	bl	800ce38 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051be:	f017 0f08 	tst.w	r7, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051c2:	bf1c      	itt	ne
 80051c4:	2308      	movne	r3, #8
 80051c6:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051ca:	f017 0f10 	tst.w	r7, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051ce:	bf1c      	itt	ne
 80051d0:	2310      	movne	r3, #16
 80051d2:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051d6:	f017 0f40 	tst.w	r7, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051da:	bf1c      	itt	ne
 80051dc:	2340      	movne	r3, #64	@ 0x40
 80051de:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051e2:	f017 0f02 	tst.w	r7, #2
 80051e6:	d139      	bne.n	800525c <HAL_PCD_IRQHandler+0x404>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051e8:	f017 0f80 	tst.w	r7, #128	@ 0x80
 80051ec:	d14e      	bne.n	800528c <HAL_PCD_IRQHandler+0x434>
        epnum++;
 80051ee:	3501      	adds	r5, #1
      while (ep_intr != 0U)
 80051f0:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80051f4:	f109 0920 	add.w	r9, r9, #32
 80051f8:	ea5f 0858 	movs.w	r8, r8, lsr #1
 80051fc:	f000 80a0 	beq.w	8005340 <HAL_PCD_IRQHandler+0x4e8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005200:	f018 0f01 	tst.w	r8, #1
 8005204:	d0f3      	beq.n	80051ee <HAL_PCD_IRQHandler+0x396>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005206:	fa5f fb85 	uxtb.w	fp, r5
 800520a:	4659      	mov	r1, fp
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	f003 fe11 	bl	8008e34 <USB_ReadDevInEPInterrupt>
 8005212:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005214:	f010 0f01 	tst.w	r0, #1
 8005218:	d0d1      	beq.n	80051be <HAL_PCD_IRQHandler+0x366>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800521a:	9803      	ldr	r0, [sp, #12]
 800521c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800521e:	f005 020f 	and.w	r2, r5, #15
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005228:	ea23 0302 	bic.w	r3, r3, r2
 800522c:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800522e:	f8c9 1008 	str.w	r1, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8005232:	79a3      	ldrb	r3, [r4, #6]
 8005234:	428b      	cmp	r3, r1
 8005236:	d1be      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x35e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005238:	f8da 3020 	ldr.w	r3, [sl, #32]
 800523c:	f8da 201c 	ldr.w	r2, [sl, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f8ca 3020 	str.w	r3, [sl, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005246:	2d00      	cmp	r5, #0
 8005248:	d1b5      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x35e>
 800524a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1b2      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x35e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005250:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	f003 fe13 	bl	8008e80 <USB_EP0_OutStart>
 800525a:	e7ac      	b.n	80051b6 <HAL_PCD_IRQHandler+0x35e>
            (void)USB_FlushTxFifo(USBx, epnum);
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f003 f9bf 	bl	80085e2 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005264:	f89a 3017 	ldrb.w	r3, [sl, #23]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d003      	beq.n	8005274 <HAL_PCD_IRQHandler+0x41c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800526c:	2302      	movs	r3, #2
 800526e:	f8c9 3008 	str.w	r3, [r9, #8]
 8005272:	e7b9      	b.n	80051e8 <HAL_PCD_IRQHandler+0x390>
              ep->is_iso_incomplete = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	f88a 3017 	strb.w	r3, [sl, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800527a:	4659      	mov	r1, fp
 800527c:	4620      	mov	r0, r4
 800527e:	f007 fe25 	bl	800cecc <HAL_PCD_ISOINIncompleteCallback>
 8005282:	e7f3      	b.n	800526c <HAL_PCD_IRQHandler+0x414>
 8005284:	4f54310a 	.word	0x4f54310a
 8005288:	4f54300a 	.word	0x4f54300a
  if (ep->xfer_count > ep->xfer_len)
 800528c:	4657      	mov	r7, sl
 800528e:	f8da c028 	ldr.w	ip, [sl, #40]	@ 0x28
 8005292:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8005296:	459c      	cmp	ip, r3
 8005298:	d8a9      	bhi.n	80051ee <HAL_PCD_IRQHandler+0x396>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800529a:	6821      	ldr	r1, [r4, #0]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800529c:	f501 6010 	add.w	r0, r1, #2304	@ 0x900
 80052a0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80052a4:	f8d0 e018 	ldr.w	lr, [r0, #24]
  len = ep->xfer_len - ep->xfer_count;
 80052a8:	eba3 030c 	sub.w	r3, r3, ip
  len32b = (len + 3U) / 4U;
 80052ac:	f8da 201c 	ldr.w	r2, [sl, #28]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf28      	it	cs
 80052b4:	4613      	movcs	r3, r2
 80052b6:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052b8:	fa1f f28e 	uxth.w	r2, lr
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80052bc:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 80052c0:	d328      	bcc.n	8005314 <HAL_PCD_IRQHandler+0x4bc>
 80052c2:	f8cd a014 	str.w	sl, [sp, #20]
 80052c6:	9606      	str	r6, [sp, #24]
 80052c8:	9507      	str	r5, [sp, #28]
 80052ca:	460e      	mov	r6, r1
 80052cc:	4682      	mov	sl, r0
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 80052d2:	429d      	cmp	r5, r3
 80052d4:	d924      	bls.n	8005320 <HAL_PCD_IRQHandler+0x4c8>
    len = ep->xfer_len - ep->xfer_count;
 80052d6:	1aed      	subs	r5, r5, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	429d      	cmp	r5, r3
 80052dc:	bf28      	it	cs
 80052de:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052e0:	79a3      	ldrb	r3, [r4, #6]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	b2ab      	uxth	r3, r5
 80052e6:	465a      	mov	r2, fp
 80052e8:	6a39      	ldr	r1, [r7, #32]
 80052ea:	4630      	mov	r0, r6
 80052ec:	f003 fbaf 	bl	8008a4e <USB_WritePacket>
    ep->xfer_buff  += len;
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	442b      	add	r3, r5
 80052f4:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	442b      	add	r3, r5
 80052fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052fc:	f8da 3018 	ldr.w	r3, [sl, #24]
    len32b = (len + 3U) / 4U;
 8005300:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005302:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005304:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8005308:	d2e1      	bcs.n	80052ce <HAL_PCD_IRQHandler+0x476>
 800530a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800530e:	9d07      	ldr	r5, [sp, #28]
 8005310:	4631      	mov	r1, r6
 8005312:	9e06      	ldr	r6, [sp, #24]
  if (ep->xfer_len <= ep->xfer_count)
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	429a      	cmp	r2, r3
 800531a:	f63f af68 	bhi.w	80051ee <HAL_PCD_IRQHandler+0x396>
 800531e:	e004      	b.n	800532a <HAL_PCD_IRQHandler+0x4d2>
 8005320:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005324:	9d07      	ldr	r5, [sp, #28]
 8005326:	4631      	mov	r1, r6
 8005328:	9e06      	ldr	r6, [sp, #24]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800532a:	f8d1 3834 	ldr.w	r3, [r1, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800532e:	f005 000f 	and.w	r0, r5, #15
 8005332:	2201      	movs	r2, #1
 8005334:	4082      	lsls	r2, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005336:	ea23 0302 	bic.w	r3, r3, r2
 800533a:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834
 800533e:	e756      	b.n	80051ee <HAL_PCD_IRQHandler+0x396>
 8005340:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005344:	e5d4      	b.n	8004ef0 <HAL_PCD_IRQHandler+0x98>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005346:	9a03      	ldr	r2, [sp, #12]
 8005348:	6853      	ldr	r3, [r2, #4]
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8005350:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8005354:	2b01      	cmp	r3, #1
 8005356:	d008      	beq.n	800536a <HAL_PCD_IRQHandler+0x512>
        HAL_PCD_ResumeCallback(hpcd);
 8005358:	4620      	mov	r0, r4
 800535a:	f007 fdab 	bl	800ceb4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	6953      	ldr	r3, [r2, #20]
 8005362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005366:	6153      	str	r3, [r2, #20]
 8005368:	e5c8      	b.n	8004efc <HAL_PCD_IRQHandler+0xa4>
        hpcd->LPM_State = LPM_L0;
 800536a:	2100      	movs	r1, #0
 800536c:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005370:	4620      	mov	r0, r4
 8005372:	f000 f95b 	bl	800562c <HAL_PCDEx_LPM_Callback>
 8005376:	e7f2      	b.n	800535e <HAL_PCD_IRQHandler+0x506>
        HAL_PCD_SuspendCallback(hpcd);
 8005378:	4620      	mov	r0, r4
 800537a:	f007 fd83 	bl	800ce84 <HAL_PCD_SuspendCallback>
 800537e:	e5c9      	b.n	8004f14 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005380:	9a03      	ldr	r2, [sp, #12]
 8005382:	6853      	ldr	r3, [r2, #4]
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800538a:	2110      	movs	r1, #16
 800538c:	6820      	ldr	r0, [r4, #0]
 800538e:	f003 f928 	bl	80085e2 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005392:	7923      	ldrb	r3, [r4, #4]
 8005394:	b1e3      	cbz	r3, 80053d0 <HAL_PCD_IRQHandler+0x578>
 8005396:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800539a:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800539e:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80053a6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053a8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80053b0:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80053b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80053bc:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80053c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c4:	f10b 0b01 	add.w	fp, fp, #1
 80053c8:	3320      	adds	r3, #32
 80053ca:	7922      	ldrb	r2, [r4, #4]
 80053cc:	455a      	cmp	r2, fp
 80053ce:	d8e6      	bhi.n	800539e <HAL_PCD_IRQHandler+0x546>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053d0:	9a03      	ldr	r2, [sp, #12]
 80053d2:	69d3      	ldr	r3, [r2, #28]
 80053d4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80053d8:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053da:	7be3      	ldrb	r3, [r4, #15]
 80053dc:	b1db      	cbz	r3, 8005416 <HAL_PCD_IRQHandler+0x5be>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053de:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 80053e2:	f043 030b 	orr.w	r3, r3, #11
 80053e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053ea:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80053ec:	f043 030b 	orr.w	r3, r3, #11
 80053f0:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053f2:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
 80053f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053fa:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053fe:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005402:	79a1      	ldrb	r1, [r4, #6]
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	f003 fd3b 	bl	8008e80 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	6953      	ldr	r3, [r2, #20]
 800540e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005412:	6153      	str	r3, [r2, #20]
 8005414:	e58a      	b.n	8004f2c <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005416:	9a03      	ldr	r2, [sp, #12]
 8005418:	6953      	ldr	r3, [r2, #20]
 800541a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800541e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005422:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005424:	6913      	ldr	r3, [r2, #16]
 8005426:	f043 030b 	orr.w	r3, r3, #11
 800542a:	6113      	str	r3, [r2, #16]
 800542c:	e7e1      	b.n	80053f2 <HAL_PCD_IRQHandler+0x59a>
      (void)USB_ActivateSetup(hpcd->Instance);
 800542e:	6820      	ldr	r0, [r4, #0]
 8005430:	f003 fd15 	bl	8008e5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	f003 f9f1 	bl	800881c <USB_GetDevSpeed>
 800543a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800543c:	6825      	ldr	r5, [r4, #0]
 800543e:	f000 fc13 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005442:	4601      	mov	r1, r0
 8005444:	79e2      	ldrb	r2, [r4, #7]
 8005446:	4628      	mov	r0, r5
 8005448:	f003 f81c 	bl	8008484 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800544c:	4620      	mov	r0, r4
 800544e:	f007 fd04 	bl	800ce5a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6953      	ldr	r3, [r2, #20]
 8005456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800545a:	6153      	str	r3, [r2, #20]
 800545c:	e56d      	b.n	8004f3a <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 800545e:	4620      	mov	r0, r4
 8005460:	f007 fcf5 	bl	800ce4e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	6953      	ldr	r3, [r2, #20]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	6153      	str	r3, [r2, #20]
 800546e:	e56b      	b.n	8004f48 <HAL_PCD_IRQHandler+0xf0>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005470:	b2e9      	uxtb	r1, r5
 8005472:	4620      	mov	r0, r4
 8005474:	f7ff fcde 	bl	8004e34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005478:	3501      	adds	r5, #1
 800547a:	3724      	adds	r7, #36	@ 0x24
 800547c:	7923      	ldrb	r3, [r4, #4]
 800547e:	42ab      	cmp	r3, r5
 8005480:	d904      	bls.n	800548c <HAL_PCD_IRQHandler+0x634>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005482:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 8005486:	2b01      	cmp	r3, #1
 8005488:	d1f6      	bne.n	8005478 <HAL_PCD_IRQHandler+0x620>
 800548a:	e7f1      	b.n	8005470 <HAL_PCD_IRQHandler+0x618>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	f003 fcb4 	bl	8008dfa <USB_ReadInterrupts>
 8005492:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8005496:	d024      	beq.n	80054e2 <HAL_PCD_IRQHandler+0x68a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005498:	7923      	ldrb	r3, [r4, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d91c      	bls.n	80054d8 <HAL_PCD_IRQHandler+0x680>
 800549e:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 80054a2:	4625      	mov	r5, r4
 80054a4:	2701      	movs	r7, #1
 80054a6:	e006      	b.n	80054b6 <HAL_PCD_IRQHandler+0x65e>
 80054a8:	3701      	adds	r7, #1
 80054aa:	f108 0820 	add.w	r8, r8, #32
 80054ae:	3524      	adds	r5, #36	@ 0x24
 80054b0:	7923      	ldrb	r3, [r4, #4]
 80054b2:	42bb      	cmp	r3, r7
 80054b4:	d910      	bls.n	80054d8 <HAL_PCD_IRQHandler+0x680>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054b6:	f8d8 2000 	ldr.w	r2, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054ba:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d1f2      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x650>
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	daf0      	bge.n	80054a8 <HAL_PCD_IRQHandler+0x650>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054c6:	f885 303b 	strb.w	r3, [r5, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054ca:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 80054ce:	b2c9      	uxtb	r1, r1
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff fcaf 	bl	8004e34 <HAL_PCD_EP_Abort>
 80054d6:	e7e7      	b.n	80054a8 <HAL_PCD_IRQHandler+0x650>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	6953      	ldr	r3, [r2, #20]
 80054dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054e0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	f003 fc89 	bl	8008dfa <USB_ReadInterrupts>
 80054e8:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80054ec:	d031      	beq.n	8005552 <HAL_PCD_IRQHandler+0x6fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ee:	7923      	ldrb	r3, [r4, #4]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d929      	bls.n	8005548 <HAL_PCD_IRQHandler+0x6f0>
 80054f4:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 80054f8:	4623      	mov	r3, r4
 80054fa:	2101      	movs	r1, #1
 80054fc:	e005      	b.n	800550a <HAL_PCD_IRQHandler+0x6b2>
 80054fe:	3101      	adds	r1, #1
 8005500:	3220      	adds	r2, #32
 8005502:	3324      	adds	r3, #36	@ 0x24
 8005504:	7920      	ldrb	r0, [r4, #4]
 8005506:	4288      	cmp	r0, r1
 8005508:	d91e      	bls.n	8005548 <HAL_PCD_IRQHandler+0x6f0>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800550a:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800550c:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
 8005510:	2801      	cmp	r0, #1
 8005512:	d1f4      	bne.n	80054fe <HAL_PCD_IRQHandler+0x6a6>
 8005514:	2d00      	cmp	r5, #0
 8005516:	daf2      	bge.n	80054fe <HAL_PCD_IRQHandler+0x6a6>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005518:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800551c:	f8d4 04d4 	ldr.w	r0, [r4, #1236]	@ 0x4d4
 8005520:	f000 0001 	and.w	r0, r0, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005524:	4285      	cmp	r5, r0
 8005526:	d1ea      	bne.n	80054fe <HAL_PCD_IRQHandler+0x6a6>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005528:	2001      	movs	r0, #1
 800552a:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800552e:	69b0      	ldr	r0, [r6, #24]
 8005530:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8005534:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005536:	6970      	ldr	r0, [r6, #20]
 8005538:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800553c:	d1df      	bne.n	80054fe <HAL_PCD_IRQHandler+0x6a6>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800553e:	9a03      	ldr	r2, [sp, #12]
 8005540:	6853      	ldr	r3, [r2, #4]
 8005542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005546:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	6953      	ldr	r3, [r2, #20]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005550:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	f003 fc51 	bl	8008dfa <USB_ReadInterrupts>
 8005558:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800555c:	d110      	bne.n	8005580 <HAL_PCD_IRQHandler+0x728>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	f003 fc4b 	bl	8008dfa <USB_ReadInterrupts>
 8005564:	f010 0f04 	tst.w	r0, #4
 8005568:	f43f ac7f 	beq.w	8004e6a <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005570:	f015 0f04 	tst.w	r5, #4
 8005574:	d10d      	bne.n	8005592 <HAL_PCD_IRQHandler+0x73a>
      hpcd->Instance->GOTGINT |= RegVal;
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	6853      	ldr	r3, [r2, #4]
 800557a:	432b      	orrs	r3, r5
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	e474      	b.n	8004e6a <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8005580:	4620      	mov	r0, r4
 8005582:	f007 fca9 	bl	800ced8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	6953      	ldr	r3, [r2, #20]
 800558a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800558e:	6153      	str	r3, [r2, #20]
 8005590:	e7e5      	b.n	800555e <HAL_PCD_IRQHandler+0x706>
        HAL_PCD_DisconnectCallback(hpcd);
 8005592:	4620      	mov	r0, r4
 8005594:	f007 fca6 	bl	800cee4 <HAL_PCD_DisconnectCallback>
 8005598:	e7ed      	b.n	8005576 <HAL_PCD_IRQHandler+0x71e>
  HAL_PCD_SetupStageCallback(hpcd);
 800559a:	4620      	mov	r0, r4
 800559c:	f007 fc38 	bl	800ce10 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055a0:	e5de      	b.n	8005160 <HAL_PCD_IRQHandler+0x308>
 80055a2:	bf00      	nop

080055a4 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 80055a4:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d014      	beq.n	80055d6 <HAL_PCD_EP_Flush+0x32>
{
 80055ac:	b510      	push	{r4, lr}
 80055ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80055b0:	2301      	movs	r3, #1
 80055b2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 80055b6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80055ba:	d106      	bne.n	80055ca <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f003 f835 	bl	800862c <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 80055c2:	2000      	movs	r0, #0
 80055c4:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80055c8:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80055ca:	f001 010f 	and.w	r1, r1, #15
 80055ce:	6800      	ldr	r0, [r0, #0]
 80055d0:	f003 f807 	bl	80085e2 <USB_FlushTxFifo>
 80055d4:	e7f5      	b.n	80055c2 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 80055d6:	2002      	movs	r0, #2
}
 80055d8:	4770      	bx	lr

080055da <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80055da:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80055dc:	6804      	ldr	r4, [r0, #0]
 80055de:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 80055e0:	b931      	cbnz	r1, 80055f0 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80055e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80055e6:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80055e8:	2000      	movs	r0, #0
 80055ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ee:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80055f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80055f2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80055f6:	f1b1 0c01 	subs.w	ip, r1, #1
 80055fa:	d00b      	beq.n	8005614 <HAL_PCDEx_SetTxFiFo+0x3a>
 80055fc:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80055fe:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8005602:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005606:	6849      	ldr	r1, [r1, #4]
 8005608:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800560c:	3301      	adds	r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	4563      	cmp	r3, ip
 8005612:	d3f4      	bcc.n	80055fe <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005614:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005618:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 800561c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8005620:	6060      	str	r0, [r4, #4]
 8005622:	e7e1      	b.n	80055e8 <HAL_PCDEx_SetTxFiFo+0xe>

08005624 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8005628:	2000      	movs	r0, #0
 800562a:	4770      	bx	lr

0800562c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800562c:	4770      	bx	lr
	...

08005630 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005630:	2800      	cmp	r0, #0
 8005632:	f000 81e1 	beq.w	80059f8 <HAL_RCC_OscConfig+0x3c8>
{
 8005636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563e:	6803      	ldr	r3, [r0, #0]
 8005640:	f013 0f01 	tst.w	r3, #1
 8005644:	d03b      	beq.n	80056be <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005646:	4b9f      	ldr	r3, [pc, #636]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b04      	cmp	r3, #4
 8005650:	d02c      	beq.n	80056ac <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005652:	4b9c      	ldr	r3, [pc, #624]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800565a:	2b08      	cmp	r3, #8
 800565c:	d021      	beq.n	80056a2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005664:	d04f      	beq.n	8005706 <HAL_RCC_OscConfig+0xd6>
 8005666:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800566a:	d052      	beq.n	8005712 <HAL_RCC_OscConfig+0xe2>
 800566c:	4b95      	ldr	r3, [pc, #596]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800567c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d050      	beq.n	8005726 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fe fe42 	bl	800430c <HAL_GetTick>
 8005688:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4e8e      	ldr	r6, [pc, #568]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005692:	d114      	bne.n	80056be <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005694:	f7fe fe3a 	bl	800430c <HAL_GetTick>
 8005698:	1b40      	subs	r0, r0, r5
 800569a:	2864      	cmp	r0, #100	@ 0x64
 800569c:	d9f6      	bls.n	800568c <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 800569e:	2003      	movs	r0, #3
 80056a0:	e1b1      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80056aa:	d0d8      	beq.n	800565e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ac:	4b85      	ldr	r3, [pc, #532]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80056b4:	d003      	beq.n	80056be <HAL_RCC_OscConfig+0x8e>
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 819f 	beq.w	80059fc <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f013 0f02 	tst.w	r3, #2
 80056c4:	d054      	beq.n	8005770 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056c6:	4b7f      	ldr	r3, [pc, #508]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f013 0f0c 	tst.w	r3, #12
 80056ce:	d03e      	beq.n	800574e <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d0:	4b7c      	ldr	r3, [pc, #496]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d033      	beq.n	8005744 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056dc:	68e3      	ldr	r3, [r4, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d068      	beq.n	80057b4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e2:	4b79      	ldr	r3, [pc, #484]	@ (80058c8 <HAL_RCC_OscConfig+0x298>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fe fe10 	bl	800430c <HAL_GetTick>
 80056ec:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ee:	4e75      	ldr	r6, [pc, #468]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	f013 0f02 	tst.w	r3, #2
 80056f6:	d154      	bne.n	80057a2 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fe fe08 	bl	800430c <HAL_GetTick>
 80056fc:	1b40      	subs	r0, r0, r5
 80056fe:	2802      	cmp	r0, #2
 8005700:	d9f6      	bls.n	80056f0 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8005702:	2003      	movs	r0, #3
 8005704:	e17f      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005706:	4a6f      	ldr	r2, [pc, #444]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005708:	6813      	ldr	r3, [r2, #0]
 800570a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e7b5      	b.n	800567e <HAL_RCC_OscConfig+0x4e>
 8005712:	4b6c      	ldr	r3, [pc, #432]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e7ab      	b.n	800567e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8005726:	f7fe fdf1 	bl	800430c <HAL_GetTick>
 800572a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572c:	4e65      	ldr	r6, [pc, #404]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005734:	d0c3      	beq.n	80056be <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005736:	f7fe fde9 	bl	800430c <HAL_GetTick>
 800573a:	1b40      	subs	r0, r0, r5
 800573c:	2864      	cmp	r0, #100	@ 0x64
 800573e:	d9f6      	bls.n	800572e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8005740:	2003      	movs	r0, #3
 8005742:	e160      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005744:	4b5f      	ldr	r3, [pc, #380]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800574c:	d1c6      	bne.n	80056dc <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	4b5d      	ldr	r3, [pc, #372]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f013 0f02 	tst.w	r3, #2
 8005756:	d003      	beq.n	8005760 <HAL_RCC_OscConfig+0x130>
 8005758:	68e3      	ldr	r3, [r4, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	f040 8150 	bne.w	8005a00 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005760:	4a58      	ldr	r2, [pc, #352]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	6921      	ldr	r1, [r4, #16]
 8005766:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800576a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800576e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	f013 0f08 	tst.w	r3, #8
 8005776:	d042      	beq.n	80057fe <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005778:	6963      	ldr	r3, [r4, #20]
 800577a:	b36b      	cbz	r3, 80057d8 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577c:	4b52      	ldr	r3, [pc, #328]	@ (80058c8 <HAL_RCC_OscConfig+0x298>)
 800577e:	2201      	movs	r2, #1
 8005780:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fe fdc2 	bl	800430c <HAL_GetTick>
 8005788:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578a:	4e4e      	ldr	r6, [pc, #312]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 800578c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800578e:	f013 0f02 	tst.w	r3, #2
 8005792:	d134      	bne.n	80057fe <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005794:	f7fe fdba 	bl	800430c <HAL_GetTick>
 8005798:	1b40      	subs	r0, r0, r5
 800579a:	2802      	cmp	r0, #2
 800579c:	d9f6      	bls.n	800578c <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 800579e:	2003      	movs	r0, #3
 80057a0:	e131      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	4a48      	ldr	r2, [pc, #288]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	6921      	ldr	r1, [r4, #16]
 80057a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80057ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e7dd      	b.n	8005770 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80057b4:	4b44      	ldr	r3, [pc, #272]	@ (80058c8 <HAL_RCC_OscConfig+0x298>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80057ba:	f7fe fda7 	bl	800430c <HAL_GetTick>
 80057be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c0:	4e40      	ldr	r6, [pc, #256]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	f013 0f02 	tst.w	r3, #2
 80057c8:	d0d2      	beq.n	8005770 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ca:	f7fe fd9f 	bl	800430c <HAL_GetTick>
 80057ce:	1b40      	subs	r0, r0, r5
 80057d0:	2802      	cmp	r0, #2
 80057d2:	d9f6      	bls.n	80057c2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80057d4:	2003      	movs	r0, #3
 80057d6:	e116      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d8:	4b3b      	ldr	r3, [pc, #236]	@ (80058c8 <HAL_RCC_OscConfig+0x298>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e0:	f7fe fd94 	bl	800430c <HAL_GetTick>
 80057e4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e6:	4e37      	ldr	r6, [pc, #220]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80057e8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80057ea:	f013 0f02 	tst.w	r3, #2
 80057ee:	d006      	beq.n	80057fe <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe fd8c 	bl	800430c <HAL_GetTick>
 80057f4:	1b40      	subs	r0, r0, r5
 80057f6:	2802      	cmp	r0, #2
 80057f8:	d9f6      	bls.n	80057e8 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80057fa:	2003      	movs	r0, #3
 80057fc:	e103      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f013 0f04 	tst.w	r3, #4
 8005804:	d076      	beq.n	80058f4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005806:	4b2f      	ldr	r3, [pc, #188]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800580e:	d133      	bne.n	8005878 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005810:	2300      	movs	r3, #0
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005818:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800581c:	641a      	str	r2, [r3, #64]	@ 0x40
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005828:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582a:	4b28      	ldr	r3, [pc, #160]	@ (80058cc <HAL_RCC_OscConfig+0x29c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005832:	d023      	beq.n	800587c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005834:	68a3      	ldr	r3, [r4, #8]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d034      	beq.n	80058a4 <HAL_RCC_OscConfig+0x274>
 800583a:	2b05      	cmp	r3, #5
 800583c:	d038      	beq.n	80058b0 <HAL_RCC_OscConfig+0x280>
 800583e:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 8005840:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	671a      	str	r2, [r3, #112]	@ 0x70
 8005848:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800584a:	f022 0204 	bic.w	r2, r2, #4
 800584e:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d03c      	beq.n	80058d0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fe fd59 	bl	800430c <HAL_GetTick>
 800585a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585c:	4f19      	ldr	r7, [pc, #100]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005864:	f013 0f02 	tst.w	r3, #2
 8005868:	d143      	bne.n	80058f2 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fe fd4f 	bl	800430c <HAL_GetTick>
 800586e:	1b80      	subs	r0, r0, r6
 8005870:	4540      	cmp	r0, r8
 8005872:	d9f6      	bls.n	8005862 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8005874:	2003      	movs	r0, #3
 8005876:	e0c6      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8005878:	2500      	movs	r5, #0
 800587a:	e7d6      	b.n	800582a <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800587c:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <HAL_RCC_OscConfig+0x29c>)
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005884:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005886:	f7fe fd41 	bl	800430c <HAL_GetTick>
 800588a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	4f0f      	ldr	r7, [pc, #60]	@ (80058cc <HAL_RCC_OscConfig+0x29c>)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005894:	d1ce      	bne.n	8005834 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fe fd39 	bl	800430c <HAL_GetTick>
 800589a:	1b80      	subs	r0, r0, r6
 800589c:	2802      	cmp	r0, #2
 800589e:	d9f6      	bls.n	800588e <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80058a0:	2003      	movs	r0, #3
 80058a2:	e0b0      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a4:	4a07      	ldr	r2, [pc, #28]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80058a6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ae:	e7cf      	b.n	8005850 <HAL_RCC_OscConfig+0x220>
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <HAL_RCC_OscConfig+0x294>)
 80058b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058b4:	f042 0204 	orr.w	r2, r2, #4
 80058b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80058ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80058c2:	e7c5      	b.n	8005850 <HAL_RCC_OscConfig+0x220>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470000 	.word	0x42470000
 80058cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d0:	f7fe fd1c 	bl	800430c <HAL_GetTick>
 80058d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d6:	4f52      	ldr	r7, [pc, #328]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d8:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058de:	f013 0f02 	tst.w	r3, #2
 80058e2:	d006      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fe fd12 	bl	800430c <HAL_GetTick>
 80058e8:	1b80      	subs	r0, r0, r6
 80058ea:	4540      	cmp	r0, r8
 80058ec:	d9f6      	bls.n	80058dc <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80058ee:	2003      	movs	r0, #3
 80058f0:	e089      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058f2:	b9ed      	cbnz	r5, 8005930 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f4:	69a3      	ldr	r3, [r4, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8084 	beq.w	8005a04 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058fc:	4a48      	ldr	r2, [pc, #288]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	f002 020c 	and.w	r2, r2, #12
 8005904:	2a08      	cmp	r2, #8
 8005906:	d051      	beq.n	80059ac <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005908:	2b02      	cmp	r3, #2
 800590a:	d017      	beq.n	800593c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590c:	4b45      	ldr	r3, [pc, #276]	@ (8005a24 <HAL_RCC_OscConfig+0x3f4>)
 800590e:	2200      	movs	r2, #0
 8005910:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005912:	f7fe fcfb 	bl	800430c <HAL_GetTick>
 8005916:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005918:	4d41      	ldr	r5, [pc, #260]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005920:	d042      	beq.n	80059a8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005922:	f7fe fcf3 	bl	800430c <HAL_GetTick>
 8005926:	1b00      	subs	r0, r0, r4
 8005928:	2802      	cmp	r0, #2
 800592a:	d9f6      	bls.n	800591a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800592c:	2003      	movs	r0, #3
 800592e:	e06a      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4a3b      	ldr	r2, [pc, #236]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 8005932:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	@ 0x40
 800593a:	e7db      	b.n	80058f4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800593c:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <HAL_RCC_OscConfig+0x3f4>)
 800593e:	2200      	movs	r2, #0
 8005940:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005942:	f7fe fce3 	bl	800430c <HAL_GetTick>
 8005946:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005948:	4e35      	ldr	r6, [pc, #212]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 800594a:	6833      	ldr	r3, [r6, #0]
 800594c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005950:	d006      	beq.n	8005960 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7fe fcdb 	bl	800430c <HAL_GetTick>
 8005956:	1b40      	subs	r0, r0, r5
 8005958:	2802      	cmp	r0, #2
 800595a:	d9f6      	bls.n	800594a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800595c:	2003      	movs	r0, #3
 800595e:	e052      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005960:	69e3      	ldr	r3, [r4, #28]
 8005962:	6a22      	ldr	r2, [r4, #32]
 8005964:	4313      	orrs	r3, r2
 8005966:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005968:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800596c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800596e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005972:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005974:	0852      	lsrs	r2, r2, #1
 8005976:	3a01      	subs	r2, #1
 8005978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800597c:	4a28      	ldr	r2, [pc, #160]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 800597e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_RCC_OscConfig+0x3f4>)
 8005982:	2201      	movs	r2, #1
 8005984:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005986:	f7fe fcc1 	bl	800430c <HAL_GetTick>
 800598a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598c:	4d24      	ldr	r5, [pc, #144]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005996:	f7fe fcb9 	bl	800430c <HAL_GetTick>
 800599a:	1b00      	subs	r0, r0, r4
 800599c:	2802      	cmp	r0, #2
 800599e:	d9f6      	bls.n	800598e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80059a0:	2003      	movs	r0, #3
 80059a2:	e030      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80059a4:	2000      	movs	r0, #0
 80059a6:	e02e      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
 80059a8:	2000      	movs	r0, #0
 80059aa:	e02c      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d02d      	beq.n	8005a0c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80059b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <HAL_RCC_OscConfig+0x3f0>)
 80059b2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b8:	69e2      	ldr	r2, [r4, #28]
 80059ba:	4291      	cmp	r1, r2
 80059bc:	d128      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	6a21      	ldr	r1, [r4, #32]
 80059c4:	428a      	cmp	r2, r1
 80059c6:	d125      	bne.n	8005a14 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ca:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80059ce:	401a      	ands	r2, r3
 80059d0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80059d4:	d120      	bne.n	8005a18 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80059da:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80059dc:	0852      	lsrs	r2, r2, #1
 80059de:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80059e4:	d11a      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80059e8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ec:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80059f0:	bf14      	ite	ne
 80059f2:	2001      	movne	r0, #1
 80059f4:	2000      	moveq	r0, #0
 80059f6:	e006      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 80059f8:	2001      	movs	r0, #1
}
 80059fa:	4770      	bx	lr
        return HAL_ERROR;
 80059fc:	2001      	movs	r0, #1
 80059fe:	e002      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8005a00:	2001      	movs	r0, #1
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8005a04:	2000      	movs	r0, #0
}
 8005a06:	b002      	add	sp, #8
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	e7fa      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8005a10:	2001      	movs	r0, #1
 8005a12:	e7f8      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
 8005a14:	2001      	movs	r0, #1
 8005a16:	e7f6      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e7f4      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	e7f2      	b.n	8005a06 <HAL_RCC_OscConfig+0x3d6>
 8005a20:	40023800 	.word	0x40023800
 8005a24:	42470000 	.word	0x42470000

08005a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a2a:	4b33      	ldr	r3, [pc, #204]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d05b      	beq.n	8005aee <HAL_RCC_GetSysClockFreq+0xc6>
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d15b      	bne.n	8005af2 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005a48:	d02c      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a4c:	6858      	ldr	r0, [r3, #4]
 8005a4e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005a52:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005a56:	ebbc 0c00 	subs.w	ip, ip, r0
 8005a5a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005a5e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005a62:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005a66:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005a6a:	ebb1 010c 	subs.w	r1, r1, ip
 8005a6e:	eb63 030e 	sbc.w	r3, r3, lr
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a78:	00c9      	lsls	r1, r1, #3
 8005a7a:	eb11 0c00 	adds.w	ip, r1, r0
 8005a7e:	f143 0300 	adc.w	r3, r3, #0
 8005a82:	0259      	lsls	r1, r3, #9
 8005a84:	2300      	movs	r3, #0
 8005a86:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8005a8a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8005a8e:	f7fa fc17 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a92:	4b19      	ldr	r3, [pc, #100]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005a9e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005aa2:	e027      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa4:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005aa6:	6858      	ldr	r0, [r3, #4]
 8005aa8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005aac:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005ab0:	ebbc 0c00 	subs.w	ip, ip, r0
 8005ab4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005ab8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005abc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005ac0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005ac4:	ebb1 010c 	subs.w	r1, r1, ip
 8005ac8:	eb63 030e 	sbc.w	r3, r3, lr
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad2:	00c9      	lsls	r1, r1, #3
 8005ad4:	eb11 0c00 	adds.w	ip, r1, r0
 8005ad8:	f143 0300 	adc.w	r3, r3, #0
 8005adc:	0299      	lsls	r1, r3, #10
 8005ade:	2300      	movs	r3, #0
 8005ae0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005ae4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005ae8:	f7fa fbea 	bl	80002c0 <__aeabi_uldivmod>
 8005aec:	e7d1      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aee:	4803      	ldr	r0, [pc, #12]	@ (8005afc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005af0:	e000      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0xcc>
      sysclockfreq = HSI_VALUE;
 8005af2:	4803      	ldr	r0, [pc, #12]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005af4:	bd08      	pop	{r3, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	007a1200 	.word	0x007a1200
 8005b00:	00f42400 	.word	0x00f42400

08005b04 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f000 809d 	beq.w	8005c44 <HAL_RCC_ClockConfig+0x140>
{
 8005b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	460d      	mov	r5, r1
 8005b10:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b12:	4b50      	ldr	r3, [pc, #320]	@ (8005c54 <HAL_RCC_ClockConfig+0x150>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	428b      	cmp	r3, r1
 8005b1c:	d208      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	b2cb      	uxtb	r3, r1
 8005b20:	4a4c      	ldr	r2, [pc, #304]	@ (8005c54 <HAL_RCC_ClockConfig+0x150>)
 8005b22:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b24:	6813      	ldr	r3, [r2, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	428b      	cmp	r3, r1
 8005b2c:	f040 808c 	bne.w	8005c48 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	f013 0f02 	tst.w	r3, #2
 8005b36:	d017      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	f013 0f04 	tst.w	r3, #4
 8005b3c:	d004      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b3e:	4a46      	ldr	r2, [pc, #280]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b46:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	f013 0f08 	tst.w	r3, #8
 8005b4e:	d004      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b50:	4a41      	ldr	r2, [pc, #260]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005b52:	6893      	ldr	r3, [r2, #8]
 8005b54:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b58:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005b5c:	6893      	ldr	r3, [r2, #8]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b62:	68a1      	ldr	r1, [r4, #8]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	f013 0f01 	tst.w	r3, #1
 8005b6e:	d032      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	6862      	ldr	r2, [r4, #4]
 8005b72:	2a01      	cmp	r2, #1
 8005b74:	d021      	beq.n	8005bba <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b76:	1e93      	subs	r3, r2, #2
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d925      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7c:	4b36      	ldr	r3, [pc, #216]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f013 0f02 	tst.w	r3, #2
 8005b84:	d062      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b86:	4934      	ldr	r1, [pc, #208]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005b88:	688b      	ldr	r3, [r1, #8]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b92:	f7fe fbbb 	bl	800430c <HAL_GetTick>
 8005b96:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b98:	4f2f      	ldr	r7, [pc, #188]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b9a:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	6862      	ldr	r2, [r4, #4]
 8005ba6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005baa:	d014      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	f7fe fbae 	bl	800430c <HAL_GetTick>
 8005bb0:	1b80      	subs	r0, r0, r6
 8005bb2:	4540      	cmp	r0, r8
 8005bb4:	d9f3      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8005bb6:	2003      	movs	r0, #3
 8005bb8:	e042      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	4b27      	ldr	r3, [pc, #156]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005bc2:	d1e0      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e03b      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc8:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005bd0:	d1d9      	bne.n	8005b86 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e034      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c54 <HAL_RCC_ClockConfig+0x150>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	d907      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	b2ea      	uxtb	r2, r5
 8005be4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c54 <HAL_RCC_ClockConfig+0x150>)
 8005be6:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	42ab      	cmp	r3, r5
 8005bf0:	d12e      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f013 0f04 	tst.w	r3, #4
 8005bf8:	d006      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfa:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005bfc:	6893      	ldr	r3, [r2, #8]
 8005bfe:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005c02:	68e1      	ldr	r1, [r4, #12]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f013 0f08 	tst.w	r3, #8
 8005c0e:	d007      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c10:	4a11      	ldr	r2, [pc, #68]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005c12:	6893      	ldr	r3, [r2, #8]
 8005c14:	6921      	ldr	r1, [r4, #16]
 8005c16:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005c1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c20:	f7ff ff02 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 8005c24:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <HAL_RCC_ClockConfig+0x154>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c5c <HAL_RCC_ClockConfig+0x158>)
 8005c2e:	5cd3      	ldrb	r3, [r2, r3]
 8005c30:	40d8      	lsrs	r0, r3
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_ClockConfig+0x15c>)
 8005c34:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_ClockConfig+0x160>)
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f7fe fb1b 	bl	8004274 <HAL_InitTick>
  return HAL_OK;
 8005c3e:	2000      	movs	r0, #0
}
 8005c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
}
 8005c46:	4770      	bx	lr
      return HAL_ERROR;
 8005c48:	2001      	movs	r0, #1
 8005c4a:	e7f9      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7f7      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7f5      	b.n	8005c40 <HAL_RCC_ClockConfig+0x13c>
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	0800efac 	.word	0x0800efac
 8005c60:	20000008 	.word	0x20000008
 8005c64:	20000010 	.word	0x20000010

08005c68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005c68:	4b01      	ldr	r3, [pc, #4]	@ (8005c70 <HAL_RCC_GetHCLKFreq+0x8>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000008 	.word	0x20000008

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c74:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c7c:	4a03      	ldr	r2, [pc, #12]	@ (8005c8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c7e:	5cd3      	ldrb	r3, [r2, r3]
 8005c80:	4a03      	ldr	r2, [pc, #12]	@ (8005c90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c82:	6810      	ldr	r0, [r2, #0]
}
 8005c84:	40d8      	lsrs	r0, r3
 8005c86:	4770      	bx	lr
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	0800efa4 	.word	0x0800efa4
 8005c90:	20000008 	.word	0x20000008

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005c9c:	4a03      	ldr	r2, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	4a03      	ldr	r2, [pc, #12]	@ (8005cb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005ca2:	6810      	ldr	r0, [r2, #0]
}
 8005ca4:	40d8      	lsrs	r0, r3
 8005ca6:	4770      	bx	lr
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	0800efa4 	.word	0x0800efa4
 8005cb0:	20000008 	.word	0x20000008

08005cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cba:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cbc:	f013 0f43 	tst.w	r3, #67	@ 0x43
 8005cc0:	d115      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f013 0f0c 	tst.w	r3, #12
 8005cc8:	d16a      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	f013 0f20 	tst.w	r3, #32
 8005cd0:	f040 80bf 	bne.w	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	f013 0f10 	tst.w	r3, #16
 8005cda:	f000 8123 	beq.w	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cde:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8005ce2:	4b91      	ldr	r3, [pc, #580]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005ce4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 8005ce8:	2000      	movs	r0, #0
}
 8005cea:	b003      	add	sp, #12
 8005cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005cee:	4b8f      	ldr	r3, [pc, #572]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005cf4:	f7fe fb0a 	bl	800430c <HAL_GetTick>
 8005cf8:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cfa:	4e8d      	ldr	r6, [pc, #564]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005d02:	d006      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d04:	f7fe fb02 	bl	800430c <HAL_GetTick>
 8005d08:	1b43      	subs	r3, r0, r5
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d9f6      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x48>
        return HAL_TIMEOUT;
 8005d0e:	2003      	movs	r0, #3
 8005d10:	e7eb      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f013 0f01 	tst.w	r3, #1
 8005d18:	d007      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	68a3      	ldr	r3, [r4, #8]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005d24:	4a82      	ldr	r2, [pc, #520]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f013 0f02 	tst.w	r3, #2
 8005d30:	d015      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d32:	4a7f      	ldr	r2, [pc, #508]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d34:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d38:	6860      	ldr	r0, [r4, #4]
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d42:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8005d46:	430b      	orrs	r3, r1
 8005d48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d4c:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8005d50:	69e3      	ldr	r3, [r4, #28]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	f021 011f 	bic.w	r1, r1, #31
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	68e3      	ldr	r3, [r4, #12]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005d70:	68a2      	ldr	r2, [r4, #8]
 8005d72:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005d76:	4a6e      	ldr	r2, [pc, #440]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005d82:	f7fe fac3 	bl	800430c <HAL_GetTick>
 8005d86:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d88:	4e69      	ldr	r6, [pc, #420]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d8a:	6833      	ldr	r3, [r6, #0]
 8005d8c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005d90:	d197      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d92:	f7fe fabb 	bl	800430c <HAL_GetTick>
 8005d96:	1b40      	subs	r0, r0, r5
 8005d98:	2802      	cmp	r0, #2
 8005d9a:	d9f6      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        return HAL_TIMEOUT;
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	e7a4      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLSAI_DISABLE();
 8005da0:	4b62      	ldr	r3, [pc, #392]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005da6:	f7fe fab1 	bl	800430c <HAL_GetTick>
 8005daa:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dac:	4e60      	ldr	r6, [pc, #384]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005dae:	6833      	ldr	r3, [r6, #0]
 8005db0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005db4:	d006      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005db6:	f7fe faa9 	bl	800430c <HAL_GetTick>
 8005dba:	1b43      	subs	r3, r0, r5
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d9f6      	bls.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xfa>
        return HAL_TIMEOUT;
 8005dc0:	2003      	movs	r0, #3
 8005dc2:	e792      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	f013 0f04 	tst.w	r3, #4
 8005dca:	d016      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x146>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dcc:	4a58      	ldr	r2, [pc, #352]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005dce:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dd2:	6920      	ldr	r0, [r4, #16]
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ddc:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8005de0:	430b      	orrs	r3, r1
 8005de2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005de6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005dea:	6a21      	ldr	r1, [r4, #32]
 8005dec:	3901      	subs	r1, #1
 8005dee:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005df2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005df6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	f013 0f08 	tst.w	r3, #8
 8005e00:	d014      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e02:	4a4b      	ldr	r2, [pc, #300]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e04:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e08:	6920      	ldr	r0, [r4, #16]
 8005e0a:	69a3      	ldr	r3, [r4, #24]
 8005e0c:	071b      	lsls	r3, r3, #28
 8005e0e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e12:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005e16:	430b      	orrs	r3, r1
 8005e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e20:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005e24:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005e26:	430b      	orrs	r3, r1
 8005e28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005e32:	f7fe fa6b 	bl	800430c <HAL_GetTick>
 8005e36:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e38:	4e3d      	ldr	r6, [pc, #244]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e3a:	6833      	ldr	r3, [r6, #0]
 8005e3c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005e40:	f47f af43 	bne.w	8005cca <HAL_RCCEx_PeriphCLKConfig+0x16>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e44:	f7fe fa62 	bl	800430c <HAL_GetTick>
 8005e48:	1b40      	subs	r0, r0, r5
 8005e4a:	2802      	cmp	r0, #2
 8005e4c:	d9f5      	bls.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x186>
        return HAL_TIMEOUT;
 8005e4e:	2003      	movs	r0, #3
 8005e50:	e74b      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	4b36      	ldr	r3, [pc, #216]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005e6a:	4a32      	ldr	r2, [pc, #200]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e74:	f7fe fa4a 	bl	800430c <HAL_GetTick>
 8005e78:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e7a:	4e2e      	ldr	r6, [pc, #184]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005e82:	d106      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e84:	f7fe fa42 	bl	800430c <HAL_GetTick>
 8005e88:	1b40      	subs	r0, r0, r5
 8005e8a:	2802      	cmp	r0, #2
 8005e8c:	d9f6      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        return HAL_TIMEOUT;
 8005e8e:	2003      	movs	r0, #3
 8005e90:	e72b      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e92:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e96:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005e9a:	d014      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005e9c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005e9e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d00f      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea6:	4b22      	ldr	r3, [pc, #136]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ea8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005eaa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eae:	491f      	ldr	r1, [pc, #124]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005ebc:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	f013 0f01 	tst.w	r3, #1
 8005ec4:	d112      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ec8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005ecc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005ed0:	d01d      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005ed2:	4a17      	ldr	r2, [pc, #92]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ed4:	6893      	ldr	r3, [r2, #8]
 8005ed6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005eda:	6093      	str	r3, [r2, #8]
 8005edc:	4a14      	ldr	r2, [pc, #80]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ede:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005ee0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eea:	e6f3      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8005eec:	f7fe fa0e 	bl	800430c <HAL_GetTick>
 8005ef0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef4:	f241 3788 	movw	r7, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005efa:	f013 0f02 	tst.w	r3, #2
 8005efe:	d1e2      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fe fa04 	bl	800430c <HAL_GetTick>
 8005f04:	1b40      	subs	r0, r0, r5
 8005f06:	42b8      	cmp	r0, r7
 8005f08:	d9f6      	bls.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x244>
            return HAL_TIMEOUT;
 8005f0a:	2003      	movs	r0, #3
 8005f0c:	e6ed      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f0e:	4908      	ldr	r1, [pc, #32]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f10:	688a      	ldr	r2, [r1, #8]
 8005f12:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8005f16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
 8005f22:	e7db      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  return HAL_OK;
 8005f24:	2000      	movs	r0, #0
 8005f26:	e6e0      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x36>
 8005f28:	42471000 	.word	0x42471000
 8005f2c:	42470000 	.word	0x42470000
 8005f30:	40023800 	.word	0x40023800
 8005f34:	40007000 	.word	0x40007000

08005f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005f3c:	6803      	ldr	r3, [r0, #0]
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f68 <HAL_RTC_WaitForSynchro+0x30>)
 8005f40:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f42:	f7fe f9e3 	bl	800430c <HAL_GetTick>
 8005f46:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f013 0f20 	tst.w	r3, #32
 8005f50:	d107      	bne.n	8005f62 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f52:	f7fe f9db 	bl	800430c <HAL_GetTick>
 8005f56:	1b40      	subs	r0, r0, r5
 8005f58:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005f5c:	d9f4      	bls.n	8005f48 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8005f5e:	2003      	movs	r0, #3
 8005f60:	e000      	b.n	8005f64 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 8005f62:	2000      	movs	r0, #0
}
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	00017f5f 	.word	0x00017f5f

08005f6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005f76:	d002      	beq.n	8005f7e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005f78:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
 8005f7e:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f86:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005f88:	f7fe f9c0 	bl	800430c <HAL_GetTick>
 8005f8c:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005f8e:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005f98:	d1ef      	bne.n	8005f7a <RTC_EnterInitMode+0xe>
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	d1ed      	bne.n	8005f7a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f9e:	f7fe f9b5 	bl	800430c <HAL_GetTick>
 8005fa2:	1b83      	subs	r3, r0, r6
 8005fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fa8:	d9f2      	bls.n	8005f90 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005faa:	2304      	movs	r3, #4
 8005fac:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8005fae:	2501      	movs	r5, #1
 8005fb0:	e7ee      	b.n	8005f90 <RTC_EnterInitMode+0x24>

08005fb2 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fb2:	6802      	ldr	r2, [r0, #0]
 8005fb4:	68d3      	ldr	r3, [r2, #12]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fbc:	6803      	ldr	r3, [r0, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f013 0f20 	tst.w	r3, #32
 8005fc4:	d001      	beq.n	8005fca <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005fc6:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005fc8:	4770      	bx	lr
{
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fce:	f7ff ffb3 	bl	8005f38 <HAL_RTC_WaitForSynchro>
 8005fd2:	b110      	cbz	r0, 8005fda <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8005fd8:	2001      	movs	r0, #1
}
 8005fda:	bd10      	pop	{r4, pc}

08005fdc <HAL_RTC_Init>:
  if (hrtc == NULL)
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d04b      	beq.n	8006078 <HAL_RTC_Init+0x9c>
{
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fe4:	7f43      	ldrb	r3, [r0, #29]
 8005fe6:	b153      	cbz	r3, 8005ffe <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	f012 0f10 	tst.w	r2, #16
 8005ff4:	d007      	beq.n	8006006 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	7763      	strb	r3, [r4, #29]
 8005ffa:	2000      	movs	r0, #0
}
 8005ffc:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005ffe:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006000:	f7fd fe80 	bl	8003d04 <HAL_RTC_MspInit>
 8006004:	e7f0      	b.n	8005fe8 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006006:	22ca      	movs	r2, #202	@ 0xca
 8006008:	625a      	str	r2, [r3, #36]	@ 0x24
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	2253      	movs	r2, #83	@ 0x53
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff ffab 	bl	8005f6c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006016:	b118      	cbz	r0, 8006020 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	22ff      	movs	r2, #255	@ 0xff
 800601c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800601e:	e7ed      	b.n	8005ffc <HAL_RTC_Init+0x20>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	6893      	ldr	r3, [r2, #8]
 8006024:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602c:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	6891      	ldr	r1, [r2, #8]
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	6920      	ldr	r0, [r4, #16]
 8006036:	4303      	orrs	r3, r0
 8006038:	6960      	ldr	r0, [r4, #20]
 800603a:	4303      	orrs	r3, r0
 800603c:	430b      	orrs	r3, r1
 800603e:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	68e2      	ldr	r2, [r4, #12]
 8006044:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	6913      	ldr	r3, [r2, #16]
 800604a:	68a1      	ldr	r1, [r4, #8]
 800604c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006050:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff ffad 	bl	8005fb2 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006058:	2800      	cmp	r0, #0
 800605a:	d1dd      	bne.n	8006018 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006064:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800606a:	69a1      	ldr	r1, [r4, #24]
 800606c:	430b      	orrs	r3, r1
 800606e:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	22ff      	movs	r2, #255	@ 0xff
 8006074:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006076:	e7be      	b.n	8005ff6 <HAL_RTC_Init+0x1a>
    return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
}
 800607a:	4770      	bx	lr

0800607c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800607c:	0903      	lsrs	r3, r0, #4
 800607e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006082:	f000 000f 	and.w	r0, r0, #15
 8006086:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800608a:	b2c0      	uxtb	r0, r0
 800608c:	4770      	bx	lr

0800608e <HAL_RTC_GetTime>:
{
 800608e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006090:	6803      	ldr	r3, [r0, #0]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006096:	6803      	ldr	r3, [r0, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800609e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060a0:	6803      	ldr	r3, [r0, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060a4:	f3c3 4005 	ubfx	r0, r3, #16, #6
 80060a8:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060aa:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80060ae:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80060b0:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 80060b4:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80060b6:	f3c3 5380 	ubfx	r3, r3, #22, #1
 80060ba:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80060bc:	b95a      	cbnz	r2, 80060d6 <HAL_RTC_GetTime+0x48>
 80060be:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060c0:	f7ff ffdc 	bl	800607c <RTC_Bcd2ToByte>
 80060c4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7ff ffd8 	bl	800607c <RTC_Bcd2ToByte>
 80060cc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7ff ffd4 	bl	800607c <RTC_Bcd2ToByte>
 80060d4:	70a0      	strb	r0, [r4, #2]
}
 80060d6:	2000      	movs	r0, #0
 80060d8:	bd70      	pop	{r4, r5, r6, pc}

080060da <HAL_RTC_GetDate>:
{
 80060da:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060dc:	6803      	ldr	r3, [r0, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060e0:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80060e4:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060e6:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80060ea:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80060ec:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80060f0:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80060f2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80060f6:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80060f8:	b95a      	cbnz	r2, 8006112 <HAL_RTC_GetDate+0x38>
 80060fa:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80060fc:	f7ff ffbe 	bl	800607c <RTC_Bcd2ToByte>
 8006100:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ffba 	bl	800607c <RTC_Bcd2ToByte>
 8006108:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800610a:	4628      	mov	r0, r5
 800610c:	f7ff ffb6 	bl	800607c <RTC_Bcd2ToByte>
 8006110:	70a0      	strb	r0, [r4, #2]
}
 8006112:	2000      	movs	r0, #0
 8006114:	bd70      	pop	{r4, r5, r6, pc}

08006116 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006116:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800611c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006120:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8006122:	4770      	bx	lr

08006124 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006126:	b089      	sub	sp, #36	@ 0x24
 8006128:	4604      	mov	r4, r0
 800612a:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800612c:	f7fe f8ee 	bl	800430c <HAL_GetTick>
 8006130:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006138:	2108      	movs	r1, #8
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	f001 fec4 	bl	8007ec8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006140:	4605      	mov	r5, r0
 8006142:	b110      	cbz	r0, 800614a <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8006144:	4628      	mov	r0, r5
 8006146:	b009      	add	sp, #36	@ 0x24
 8006148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800614a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800614c:	0409      	lsls	r1, r1, #16
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	f001 ff64 	bl	800801c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006154:	4605      	mov	r5, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d1f4      	bne.n	8006144 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8006160:	2308      	movs	r3, #8
 8006162:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006164:	2330      	movs	r3, #48	@ 0x30
 8006166:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006168:	2302      	movs	r3, #2
 800616a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800616c:	2300      	movs	r3, #0
 800616e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006170:	2301      	movs	r3, #1
 8006172:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006174:	a902      	add	r1, sp, #8
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	f001 fdb5 	bl	8007ce6 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	f001 ff7d 	bl	800807c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006182:	4605      	mov	r5, r0
 8006184:	b170      	cbz	r0, 80061a4 <SD_FindSCR+0x80>
 8006186:	e7dd      	b.n	8006144 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006188:	f001 fd85 	bl	8007c96 <SDIO_ReadFIFO>
 800618c:	ab08      	add	r3, sp, #32
 800618e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006192:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 8006196:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006198:	f7fe f8b8 	bl	800430c <HAL_GetTick>
 800619c:	1b83      	subs	r3, r0, r6
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d043      	beq.n	800622c <SD_FindSCR+0x108>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061a8:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 80061ac:	d107      	bne.n	80061be <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80061ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061b0:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80061b4:	d1e8      	bne.n	8006188 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80061b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061b8:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80061bc:	d1ec      	bne.n	8006198 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80061be:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061c0:	f013 0f08 	tst.w	r3, #8
 80061c4:	d129      	bne.n	800621a <SD_FindSCR+0xf6>
 80061c6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061c8:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80061cc:	d125      	bne.n	800621a <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80061ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80061d0:	f013 0f02 	tst.w	r3, #2
 80061d4:	d124      	bne.n	8006220 <SD_FindSCR+0xfc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80061d6:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80061d8:	f015 0520 	ands.w	r5, r5, #32
 80061dc:	d123      	bne.n	8006226 <SD_FindSCR+0x102>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061de:	f240 533a 	movw	r3, #1338	@ 0x53a
 80061e2:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061e4:	9b01      	ldr	r3, [sp, #4]
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061e6:	0e1a      	lsrs	r2, r3, #24
 80061e8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061ec:	0219      	lsls	r1, r3, #8
 80061ee:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061f2:	430a      	orrs	r2, r1
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80061fa:	4313      	orrs	r3, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061fc:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061fe:	9b00      	ldr	r3, [sp, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006200:	0e1a      	lsrs	r2, r3, #24
 8006202:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006206:	0219      	lsls	r1, r3, #8
 8006208:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800620c:	430a      	orrs	r2, r1
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006214:	4313      	orrs	r3, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006216:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8006218:	e794      	b.n	8006144 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800621a:	2508      	movs	r5, #8
 800621c:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800621e:	e791      	b.n	8006144 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006220:	2502      	movs	r5, #2
 8006222:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006224:	e78e      	b.n	8006144 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006226:	2520      	movs	r5, #32
 8006228:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800622a:	e78b      	b.n	8006144 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800622c:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8006230:	e788      	b.n	8006144 <SD_FindSCR+0x20>
	...

08006234 <HAL_SD_ReadBlocks_DMA>:
{
 8006234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006238:	b087      	sub	sp, #28
 800623a:	4604      	mov	r4, r0
  if(NULL == pData)
 800623c:	b191      	cbz	r1, 8006264 <HAL_SD_ReadBlocks_DMA+0x30>
 800623e:	4616      	mov	r6, r2
 8006240:	461f      	mov	r7, r3
 8006242:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8006244:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8006248:	b2ed      	uxtb	r5, r5
 800624a:	2d01      	cmp	r5, #1
 800624c:	d17f      	bne.n	800634e <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
 8006250:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006252:	19f0      	adds	r0, r6, r7
 8006254:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006256:	4298      	cmp	r0, r3
 8006258:	d90a      	bls.n	8006270 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800625a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800625c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006260:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8006262:	e075      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006264:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006266:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800626a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 800626c:	2501      	movs	r5, #1
 800626e:	e06f      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 8006270:	2303      	movs	r3, #3
 8006272:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	2100      	movs	r1, #0
 800627a:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006280:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800628a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800628c:	4833      	ldr	r0, [pc, #204]	@ (800635c <HAL_SD_ReadBlocks_DMA+0x128>)
 800628e:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006292:	4833      	ldr	r0, [pc, #204]	@ (8006360 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8006294:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8006296:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006298:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800629a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800629c:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800629e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80062a0:	6801      	ldr	r1, [r0, #0]
 80062a2:	680b      	ldr	r3, [r1, #0]
 80062a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80062a8:	6880      	ldr	r0, [r0, #8]
 80062aa:	4303      	orrs	r3, r0
 80062ac:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80062ae:	ea4f 2947 	mov.w	r9, r7, lsl #9
 80062b2:	6821      	ldr	r1, [r4, #0]
 80062b4:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80062b8:	3180      	adds	r1, #128	@ 0x80
 80062ba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80062bc:	f7fe f962 	bl	8004584 <HAL_DMA_Start_IT>
 80062c0:	4680      	mov	r8, r0
 80062c2:	bb68      	cbnz	r0, 8006320 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 80062c4:	4b27      	ldr	r3, [pc, #156]	@ (8006364 <HAL_SD_ReadBlocks_DMA+0x130>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80062ce:	4293      	cmp	r3, r2
        add *= 512U;
 80062d0:	bf18      	it	ne
 80062d2:	0276      	lslne	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062d4:	f04f 33ff 	mov.w	r3, #4294967295
 80062d8:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062da:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80062de:	2390      	movs	r3, #144	@ 0x90
 80062e0:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80062e2:	2302      	movs	r3, #2
 80062e4:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80062ee:	4669      	mov	r1, sp
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	f001 fcf8 	bl	8007ce6 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80062f6:	2f01      	cmp	r7, #1
 80062f8:	d922      	bls.n	8006340 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062fa:	2382      	movs	r3, #130	@ 0x82
 80062fc:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80062fe:	4631      	mov	r1, r6
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	f001 fe11 	bl	8007f28 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006306:	b338      	cbz	r0, 8006358 <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <HAL_SD_ReadBlocks_DMA+0x134>)
 800630c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800630e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006310:	4303      	orrs	r3, r0
 8006312:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006314:	2301      	movs	r3, #1
 8006316:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800631a:	2300      	movs	r3, #0
 800631c:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800631e:	e017      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006324:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8006328:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	4a0e      	ldr	r2, [pc, #56]	@ (8006368 <HAL_SD_ReadBlocks_DMA+0x134>)
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006330:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006336:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006338:	2301      	movs	r3, #1
 800633a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800633e:	e007      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006340:	2381      	movs	r3, #129	@ 0x81
 8006342:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006344:	4631      	mov	r1, r6
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	f001 fdd6 	bl	8007ef8 <SDMMC_CmdReadSingleBlock>
 800634c:	e7db      	b.n	8006306 <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 800634e:	2502      	movs	r5, #2
}
 8006350:	4628      	mov	r0, r5
 8006352:	b007      	add	sp, #28
 8006354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8006358:	4645      	mov	r5, r8
 800635a:	e7f9      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x11c>
 800635c:	080064ab 	.word	0x080064ab
 8006360:	08006ac1 	.word	0x08006ac1
 8006364:	42258000 	.word	0x42258000
 8006368:	004005ff 	.word	0x004005ff

0800636c <HAL_SD_WriteBlocks_DMA>:
{
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b087      	sub	sp, #28
 8006370:	4604      	mov	r4, r0
  if(NULL == pData)
 8006372:	2900      	cmp	r1, #0
 8006374:	d03b      	beq.n	80063ee <HAL_SD_WriteBlocks_DMA+0x82>
 8006376:	461e      	mov	r6, r3
 8006378:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800637a:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 800637e:	b2ed      	uxtb	r5, r5
 8006380:	2d01      	cmp	r5, #1
 8006382:	f040 8084 	bne.w	800648e <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006386:	2300      	movs	r3, #0
 8006388:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800638a:	1993      	adds	r3, r2, r6
 800638c:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800638e:	428b      	cmp	r3, r1
 8006390:	d833      	bhi.n	80063fa <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8006392:	2303      	movs	r3, #3
 8006394:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	2100      	movs	r1, #0
 800639c:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80063a2:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80063a6:	f043 0302 	orr.w	r3, r3, #2
 80063aa:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80063ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063ae:	483a      	ldr	r0, [pc, #232]	@ (8006498 <HAL_SD_WriteBlocks_DMA+0x12c>)
 80063b0:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80063b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063b4:	4839      	ldr	r0, [pc, #228]	@ (800649c <HAL_SD_WriteBlocks_DMA+0x130>)
 80063b6:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80063b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063ba:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80063be:	2b01      	cmp	r3, #1
      add *= 512U;
 80063c0:	bf18      	it	ne
 80063c2:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 80063c4:	2e01      	cmp	r6, #1
 80063c6:	d91d      	bls.n	8006404 <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063c8:	23a0      	movs	r3, #160	@ 0xa0
 80063ca:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80063cc:	4611      	mov	r1, r2
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	f001 fdda 	bl	8007f88 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d4:	b1e8      	cbz	r0, 8006412 <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4a31      	ldr	r2, [pc, #196]	@ (80064a0 <HAL_SD_WriteBlocks_DMA+0x134>)
 80063da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80063dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063de:	4303      	orrs	r3, r0
 80063e0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80063ec:	e050      	b.n	8006490 <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80063f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063f4:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80063f6:	2501      	movs	r5, #1
 80063f8:	e04a      	b.n	8006490 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80063fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006400:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 8006402:	e045      	b.n	8006490 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006404:	2390      	movs	r3, #144	@ 0x90
 8006406:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006408:	4611      	mov	r1, r2
 800640a:	6820      	ldr	r0, [r4, #0]
 800640c:	f001 fda4 	bl	8007f58 <SDMMC_CmdWriteSingleBlock>
 8006410:	e7e0      	b.n	80063d4 <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_SD_WriteBlocks_DMA+0x138>)
 8006414:	2201      	movs	r2, #1
 8006416:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800641a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800641c:	2240      	movs	r2, #64	@ 0x40
 800641e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006420:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006422:	680a      	ldr	r2, [r1, #0]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800642a:	6889      	ldr	r1, [r1, #8]
 800642c:	430b      	orrs	r3, r1
 800642e:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006430:	0276      	lsls	r6, r6, #9
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	08b3      	lsrs	r3, r6, #2
 8006436:	3280      	adds	r2, #128	@ 0x80
 8006438:	4639      	mov	r1, r7
 800643a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800643c:	f7fe f8a2 	bl	8004584 <HAL_DMA_Start_IT>
 8006440:	4607      	mov	r7, r0
 8006442:	b198      	cbz	r0, 800646c <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006448:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800644c:	f023 0302 	bic.w	r3, r3, #2
 8006450:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	4a12      	ldr	r2, [pc, #72]	@ (80064a0 <HAL_SD_WriteBlocks_DMA+0x134>)
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006458:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800645a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800645e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006460:	2301      	movs	r3, #1
 8006462:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006466:	2300      	movs	r3, #0
 8006468:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800646a:	e011      	b.n	8006490 <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
 8006470:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006472:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006474:	2390      	movs	r3, #144	@ 0x90
 8006476:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006478:	2300      	movs	r3, #0
 800647a:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800647c:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800647e:	2301      	movs	r3, #1
 8006480:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006482:	4669      	mov	r1, sp
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	f001 fc2e 	bl	8007ce6 <SDIO_ConfigData>
      return HAL_OK;
 800648a:	463d      	mov	r5, r7
 800648c:	e000      	b.n	8006490 <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 800648e:	2502      	movs	r5, #2
}
 8006490:	4628      	mov	r0, r5
 8006492:	b007      	add	sp, #28
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006496:	bf00      	nop
 8006498:	08006117 	.word	0x08006117
 800649c:	08006ac1 	.word	0x08006ac1
 80064a0:	004005ff 	.word	0x004005ff
 80064a4:	42258000 	.word	0x42258000

080064a8 <HAL_SD_ErrorCallback>:
}
 80064a8:	4770      	bx	lr

080064aa <SD_DMAReceiveCplt>:
{
 80064aa:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064ac:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80064ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80064b0:	2b82      	cmp	r3, #130	@ 0x82
 80064b2:	d011      	beq.n	80064d8 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80064b8:	f023 0308 	bic.w	r3, r3, #8
 80064bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80064c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 80064d0:	4620      	mov	r0, r4
 80064d2:	f002 fd62 	bl	8008f9a <HAL_SD_RxCpltCallback>
}
 80064d6:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	f001 fd6d 	bl	8007fb8 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80064de:	4603      	mov	r3, r0
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d0e7      	beq.n	80064b4 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 80064e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80064e6:	4313      	orrs	r3, r2
 80064e8:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff ffdc 	bl	80064a8 <HAL_SD_ErrorCallback>
 80064f0:	e7e0      	b.n	80064b4 <SD_DMAReceiveCplt+0xa>
	...

080064f4 <HAL_SD_GetCardCSD>:
{
 80064f4:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064f6:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80064f8:	0f92      	lsrs	r2, r2, #30
 80064fa:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064fc:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80064fe:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8006502:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006504:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8006508:	f002 0203 	and.w	r2, r2, #3
 800650c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800650e:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8006512:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006514:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8006518:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800651a:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 800651e:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006520:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006522:	0d12      	lsrs	r2, r2, #20
 8006524:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006526:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 800652a:	f002 020f 	and.w	r2, r2, #15
 800652e:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006530:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006532:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006536:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006538:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800653a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800653e:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006540:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006542:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006546:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006548:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800654a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800654e:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006550:	2200      	movs	r2, #0
 8006552:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006554:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006556:	2a00      	cmp	r2, #0
 8006558:	f040 8086 	bne.w	8006668 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800655c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800655e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8006562:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8006566:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006568:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800656c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800656e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006570:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8006574:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006576:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 800657a:	f002 0207 	and.w	r2, r2, #7
 800657e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006580:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006582:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8006586:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006588:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800658a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800658e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006590:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006592:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8006596:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006598:	6908      	ldr	r0, [r1, #16]
 800659a:	3001      	adds	r0, #1
 800659c:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800659e:	7e0a      	ldrb	r2, [r1, #24]
 80065a0:	f002 0207 	and.w	r2, r2, #7
 80065a4:	3202      	adds	r2, #2
 80065a6:	4090      	lsls	r0, r2
 80065a8:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065aa:	f891 c008 	ldrb.w	ip, [r1, #8]
 80065ae:	f00c 0c0f 	and.w	ip, ip, #15
 80065b2:	2201      	movs	r2, #1
 80065b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80065b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80065ba:	0a52      	lsrs	r2, r2, #9
 80065bc:	fb00 f202 	mul.w	r2, r0, r2
 80065c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80065c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c6:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80065ca:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80065ce:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80065d2:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80065d6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80065d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80065da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065de:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065e2:	0fd2      	lsrs	r2, r2, #31
 80065e4:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80065e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065e8:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80065ec:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80065ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065f0:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80065f4:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80065f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065f8:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80065fc:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80065fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006600:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8006604:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8006608:	2000      	movs	r0, #0
 800660a:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800660e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8006612:	f002 0201 	and.w	r2, r2, #1
 8006616:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800661a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800661c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006620:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006624:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006626:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800662a:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800662e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006630:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006634:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006638:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800663a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800663e:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006642:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006644:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8006648:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800664c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800664e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006652:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006658:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800665c:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8006660:	2301      	movs	r3, #1
 8006662:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8006666:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006668:	2a01      	cmp	r2, #1
 800666a:	d110      	bne.n	800668e <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800666c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800666e:	0412      	lsls	r2, r2, #16
 8006670:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006674:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8006678:	4302      	orrs	r2, r0
 800667a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800667c:	690a      	ldr	r2, [r1, #16]
 800667e:	3201      	adds	r2, #1
 8006680:	0292      	lsls	r2, r2, #10
 8006682:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006684:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800668a:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800668c:	e799      	b.n	80065c2 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800668e:	6802      	ldr	r2, [r0, #0]
 8006690:	4904      	ldr	r1, [pc, #16]	@ (80066a4 <HAL_SD_GetCardCSD+0x1b0>)
 8006692:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006694:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8006696:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800669a:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800669c:	2001      	movs	r0, #1
 800669e:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80066a2:	4770      	bx	lr
 80066a4:	004005ff 	.word	0x004005ff

080066a8 <HAL_SD_InitCard>:
{
 80066a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ac:	b098      	sub	sp, #96	@ 0x60
 80066ae:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80066b0:	2300      	movs	r3, #0
 80066b2:	9312      	str	r3, [sp, #72]	@ 0x48
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80066b4:	9313      	str	r3, [sp, #76]	@ 0x4c
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80066b6:	9314      	str	r3, [sp, #80]	@ 0x50
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80066b8:	9315      	str	r3, [sp, #84]	@ 0x54
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80066ba:	9316      	str	r3, [sp, #88]	@ 0x58
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80066bc:	2376      	movs	r3, #118	@ 0x76
 80066be:	9317      	str	r3, [sp, #92]	@ 0x5c
  status = SDIO_Init(hsd->Instance, Init);
 80066c0:	ab18      	add	r3, sp, #96	@ 0x60
 80066c2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80066c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80066ca:	ab12      	add	r3, sp, #72	@ 0x48
 80066cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	f001 fac7 	bl	8007c62 <SDIO_Init>
  if(status != HAL_OK)
 80066d4:	b120      	cbz	r0, 80066e0 <HAL_SD_InitCard+0x38>
    return HAL_ERROR;
 80066d6:	2501      	movs	r5, #1
}
 80066d8:	4628      	mov	r0, r5
 80066da:	b018      	add	sp, #96	@ 0x60
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_SD_DISABLE(hsd);
 80066e0:	4e81      	ldr	r6, [pc, #516]	@ (80068e8 <HAL_SD_InitCard+0x240>)
 80066e2:	2500      	movs	r5, #0
 80066e4:	f8c6 50a0 	str.w	r5, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	f001 fadc 	bl	8007ca6 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80066ee:	2301      	movs	r3, #1
 80066f0:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80066f4:	2002      	movs	r0, #2
 80066f6:	f7fd fe0f 	bl	8004318 <HAL_Delay>
  __IO uint32_t count = 0U;
 80066fa:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	f001 fb07 	bl	8007d10 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006702:	4605      	mov	r5, r0
 8006704:	b138      	cbz	r0, 8006716 <HAL_SD_InitCard+0x6e>
    hsd->State = HAL_SD_STATE_READY;
 8006706:	2201      	movs	r2, #1
 8006708:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800670c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800670e:	432b      	orrs	r3, r5
 8006710:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006712:	4615      	mov	r5, r2
 8006714:	e7e0      	b.n	80066d8 <HAL_SD_InitCard+0x30>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006716:	6820      	ldr	r0, [r4, #0]
 8006718:	f001 fe2e 	bl	8008378 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800671c:	b948      	cbnz	r0, 8006732 <HAL_SD_InitCard+0x8a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800671e:	2301      	movs	r3, #1
 8006720:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006722:	2100      	movs	r1, #0
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	f001 fc79 	bl	800801c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800672a:	b168      	cbz	r0, 8006748 <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800672c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8006730:	e7e9      	b.n	8006706 <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006732:	2300      	movs	r3, #0
 8006734:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	f001 faea 	bl	8007d10 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 80c1 	bne.w	80068c4 <HAL_SD_InitCard+0x21c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006742:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006744:	2b01      	cmp	r3, #1
 8006746:	d0ec      	beq.n	8006722 <HAL_SD_InitCard+0x7a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006748:	9a06      	ldr	r2, [sp, #24]
 800674a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800674e:	429a      	cmp	r2, r3
 8006750:	f200 80c0 	bhi.w	80068d4 <HAL_SD_InitCard+0x22c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006754:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006756:	4f65      	ldr	r7, [pc, #404]	@ (80068ec <HAL_SD_InitCard+0x244>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006758:	4698      	mov	r8, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800675a:	4631      	mov	r1, r6
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	f001 fc5d 	bl	800801c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006762:	4605      	mov	r5, r0
 8006764:	2800      	cmp	r0, #0
 8006766:	d1ce      	bne.n	8006706 <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006768:	4639      	mov	r1, r7
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	f001 fd3e 	bl	80081ec <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006770:	2800      	cmp	r0, #0
 8006772:	f040 80ac 	bne.w	80068ce <HAL_SD_InitCard+0x226>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006776:	4631      	mov	r1, r6
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	f001 fab1 	bl	8007ce0 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800677e:	0fc2      	lsrs	r2, r0, #31
    count++;
 8006780:	9b06      	ldr	r3, [sp, #24]
 8006782:	3301      	adds	r3, #1
 8006784:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	4543      	cmp	r3, r8
 800678a:	d801      	bhi.n	8006790 <HAL_SD_InitCard+0xe8>
 800678c:	2a00      	cmp	r2, #0
 800678e:	d0e4      	beq.n	800675a <HAL_SD_InitCard+0xb2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006790:	9a06      	ldr	r2, [sp, #24]
 8006792:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006796:	429a      	cmp	r2, r3
 8006798:	f200 8096 	bhi.w	80068c8 <HAL_SD_InitCard+0x220>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800679c:	f3c0 7580 	ubfx	r5, r0, #30, #1
    hsd->SdCard.CardType = CARD_SDSC;
 80067a0:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	f001 fa80 	bl	8007cae <SDIO_GetPowerState>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d07f      	beq.n	80068b2 <HAL_SD_InitCard+0x20a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d133      	bne.n	8006820 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80067b8:	2104      	movs	r1, #4
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	f001 fa90 	bl	8007ce0 <SDIO_GetResponse>
 80067c0:	0d00      	lsrs	r0, r0, #20
 80067c2:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80067c4:	a907      	add	r1, sp, #28
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff fe94 	bl	80064f4 <HAL_SD_GetCardCSD>
 80067cc:	4605      	mov	r5, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d16c      	bne.n	80068ac <HAL_SD_InitCard+0x204>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80067d2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80067d4:	0412      	lsls	r2, r2, #16
 80067d6:	2300      	movs	r3, #0
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	f001 fc07 	bl	8007fec <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067de:	4602      	mov	r2, r0
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d168      	bne.n	80068b6 <HAL_SD_InitCard+0x20e>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80067e4:	4623      	mov	r3, r4
 80067e6:	f853 6b10 	ldr.w	r6, [r3], #16
 80067ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067f6:	4630      	mov	r0, r6
 80067f8:	f001 fa33 	bl	8007c62 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	f001 fb61 	bl	8007ec8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006806:	2800      	cmp	r0, #0
 8006808:	f43f af66 	beq.w	80066d8 <HAL_SD_InitCard+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	4938      	ldr	r1, [pc, #224]	@ (80068f0 <HAL_SD_InitCard+0x248>)
 8006810:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006812:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006814:	4303      	orrs	r3, r0
 8006816:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006818:	2501      	movs	r5, #1
 800681a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800681e:	e75b      	b.n	80066d8 <HAL_SD_InitCard+0x30>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	f001 fc8d 	bl	8008140 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006826:	4602      	mov	r2, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	d144      	bne.n	80068b6 <HAL_SD_InitCard+0x20e>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800682c:	2100      	movs	r1, #0
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	f001 fa56 	bl	8007ce0 <SDIO_GetResponse>
 8006834:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006836:	2104      	movs	r1, #4
 8006838:	6820      	ldr	r0, [r4, #0]
 800683a:	f001 fa51 	bl	8007ce0 <SDIO_GetResponse>
 800683e:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006840:	2108      	movs	r1, #8
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	f001 fa4c 	bl	8007ce0 <SDIO_GetResponse>
 8006848:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800684a:	210c      	movs	r1, #12
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	f001 fa47 	bl	8007ce0 <SDIO_GetResponse>
 8006852:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006856:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006858:	2b03      	cmp	r3, #3
 800685a:	d0ad      	beq.n	80067b8 <HAL_SD_InitCard+0x110>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800685c:	f10d 0116 	add.w	r1, sp, #22
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	f001 fd37 	bl	80082d4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006866:	4602      	mov	r2, r0
 8006868:	bb28      	cbnz	r0, 80068b6 <HAL_SD_InitCard+0x20e>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800686a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800686c:	2b03      	cmp	r3, #3
 800686e:	d0a3      	beq.n	80067b8 <HAL_SD_InitCard+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006870:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8006874:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006876:	0409      	lsls	r1, r1, #16
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	f001 fc76 	bl	800816a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800687e:	4602      	mov	r2, r0
 8006880:	b9c8      	cbnz	r0, 80068b6 <HAL_SD_InitCard+0x20e>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006882:	2100      	movs	r1, #0
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	f001 fa2b 	bl	8007ce0 <SDIO_GetResponse>
 800688a:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800688c:	2104      	movs	r1, #4
 800688e:	6820      	ldr	r0, [r4, #0]
 8006890:	f001 fa26 	bl	8007ce0 <SDIO_GetResponse>
 8006894:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006896:	2108      	movs	r1, #8
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	f001 fa21 	bl	8007ce0 <SDIO_GetResponse>
 800689e:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80068a0:	210c      	movs	r1, #12
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	f001 fa1c 	bl	8007ce0 <SDIO_GetResponse>
 80068a8:	6720      	str	r0, [r4, #112]	@ 0x70
 80068aa:	e785      	b.n	80067b8 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b0:	e001      	b.n	80068b6 <HAL_SD_InitCard+0x20e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 80068b6:	2501      	movs	r5, #1
 80068b8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068be:	4313      	orrs	r3, r2
 80068c0:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80068c2:	e709      	b.n	80066d8 <HAL_SD_InitCard+0x30>
      return errorstate;
 80068c4:	4605      	mov	r5, r0
 80068c6:	e71e      	b.n	8006706 <HAL_SD_InitCard+0x5e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068c8:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80068cc:	e71b      	b.n	8006706 <HAL_SD_InitCard+0x5e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ce:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	e718      	b.n	8006706 <HAL_SD_InitCard+0x5e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80068d4:	9a06      	ldr	r2, [sp, #24]
 80068d6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80068da:	429a      	cmp	r2, r3
 80068dc:	f67f af60 	bls.w	80067a0 <HAL_SD_InitCard+0xf8>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80068e0:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  if(errorstate != HAL_SD_ERROR_NONE)
 80068e4:	e70f      	b.n	8006706 <HAL_SD_InitCard+0x5e>
 80068e6:	bf00      	nop
 80068e8:	42258000 	.word	0x42258000
 80068ec:	c1100000 	.word	0xc1100000
 80068f0:	004005ff 	.word	0x004005ff

080068f4 <HAL_SD_Init>:
  if(hsd == NULL)
 80068f4:	b1a8      	cbz	r0, 8006922 <HAL_SD_Init+0x2e>
{
 80068f6:	b510      	push	{r4, lr}
 80068f8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80068fa:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80068fe:	b163      	cbz	r3, 800691a <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8006900:	2303      	movs	r3, #3
 8006902:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fece 	bl	80066a8 <HAL_SD_InitCard>
 800690c:	b958      	cbnz	r0, 8006926 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006910:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006912:	2301      	movs	r3, #1
 8006914:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8006918:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800691a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 800691c:	f7fd fa16 	bl	8003d4c <HAL_SD_MspInit>
 8006920:	e7ee      	b.n	8006900 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8006922:	2001      	movs	r0, #1
}
 8006924:	4770      	bx	lr
    return HAL_ERROR;
 8006926:	2001      	movs	r0, #1
 8006928:	e7f6      	b.n	8006918 <HAL_SD_Init+0x24>

0800692a <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800692a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800692c:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800692e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006930:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006932:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8006934:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006936:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006938:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800693a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800693c:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800693e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006940:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006942:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006944:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006946:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006948:	61cb      	str	r3, [r1, #28]
}
 800694a:	2000      	movs	r0, #0
 800694c:	4770      	bx	lr
	...

08006950 <HAL_SD_ConfigWideBusOperation>:
{
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	b08d      	sub	sp, #52	@ 0x34
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006958:	2303      	movs	r3, #3
 800695a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800695e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006960:	2b03      	cmp	r3, #3
 8006962:	d061      	beq.n	8006a28 <HAL_SD_ConfigWideBusOperation+0xd8>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006964:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006968:	d008      	beq.n	800697c <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800696a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800696e:	d00a      	beq.n	8006986 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006970:	b389      	cbz	r1, 80069d6 <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006972:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006974:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006978:	6383      	str	r3, [r0, #56]	@ 0x38
 800697a:	e059      	b.n	8006a30 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800697c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800697e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006982:	6383      	str	r3, [r0, #56]	@ 0x38
 8006984:	e054      	b.n	8006a30 <HAL_SD_ConfigWideBusOperation+0xe0>
  uint32_t scr[2U] = {0U, 0U};
 8006986:	2100      	movs	r1, #0
 8006988:	9104      	str	r1, [sp, #16]
 800698a:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	f001 f9a7 	bl	8007ce0 <SDIO_GetResponse>
 8006992:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8006996:	d116      	bne.n	80069c6 <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8006998:	a904      	add	r1, sp, #16
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff fbc2 	bl	8006124 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80069a0:	4602      	mov	r2, r0
 80069a2:	b988      	cbnz	r0, 80069c8 <HAL_SD_ConfigWideBusOperation+0x78>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069a4:	9b05      	ldr	r3, [sp, #20]
 80069a6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80069aa:	d011      	beq.n	80069d0 <HAL_SD_ConfigWideBusOperation+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069ac:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80069ae:	0409      	lsls	r1, r1, #16
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	f001 fb33 	bl	800801c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80069b6:	4602      	mov	r2, r0
 80069b8:	b930      	cbnz	r0, 80069c8 <HAL_SD_ConfigWideBusOperation+0x78>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80069ba:	2102      	movs	r1, #2
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	f001 fb45 	bl	800804c <SDMMC_CmdBusWidth>
 80069c2:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80069c4:	e000      	b.n	80069c8 <HAL_SD_ConfigWideBusOperation+0x78>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069c6:	462a      	mov	r2, r5
      hsd->ErrorCode |= errorstate;
 80069c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80069ca:	4313      	orrs	r3, r2
 80069cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80069ce:	e02f      	b.n	8006a30 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80069d4:	e7f8      	b.n	80069c8 <HAL_SD_ConfigWideBusOperation+0x78>
  uint32_t scr[2U] = {0U, 0U};
 80069d6:	2100      	movs	r1, #0
 80069d8:	9104      	str	r1, [sp, #16]
 80069da:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f001 f97f 	bl	8007ce0 <SDIO_GetResponse>
 80069e2:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80069e6:	d116      	bne.n	8006a16 <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 80069e8:	a904      	add	r1, sp, #16
 80069ea:	4620      	mov	r0, r4
 80069ec:	f7ff fb9a 	bl	8006124 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80069f0:	4602      	mov	r2, r0
 80069f2:	b990      	cbnz	r0, 8006a1a <HAL_SD_ConfigWideBusOperation+0xca>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80069fa:	d012      	beq.n	8006a22 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069fc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80069fe:	0409      	lsls	r1, r1, #16
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	f001 fb0b 	bl	800801c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a06:	4602      	mov	r2, r0
 8006a08:	b938      	cbnz	r0, 8006a1a <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f001 fb1d 	bl	800804c <SDMMC_CmdBusWidth>
 8006a12:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a14:	e001      	b.n	8006a1a <HAL_SD_ConfigWideBusOperation+0xca>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 8006a1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006a20:	e006      	b.n	8006a30 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a26:	e7f8      	b.n	8006a1a <HAL_SD_ConfigWideBusOperation+0xca>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a28:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a2e:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a32:	b1c3      	cbz	r3, 8006a66 <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	4a17      	ldr	r2, [pc, #92]	@ (8006a94 <HAL_SD_ConfigWideBusOperation+0x144>)
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a3a:	2501      	movs	r5, #1
 8006a3c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	f001 fa3f 	bl	8007ec8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	b130      	cbz	r0, 8006a5a <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	4911      	ldr	r1, [pc, #68]	@ (8006a94 <HAL_SD_ConfigWideBusOperation+0x144>)
 8006a50:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006a52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a54:	4303      	orrs	r3, r0
 8006a56:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8006a58:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8006a60:	4628      	mov	r0, r5
 8006a62:	b00d      	add	sp, #52	@ 0x34
 8006a64:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a66:	6863      	ldr	r3, [r4, #4]
 8006a68:	9306      	str	r3, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	9307      	str	r3, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	9308      	str	r3, [sp, #32]
    Init.BusWide             = WideMode;
 8006a72:	9509      	str	r5, [sp, #36]	@ 0x24
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a74:	6963      	ldr	r3, [r4, #20]
 8006a76:	930a      	str	r3, [sp, #40]	@ 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a78:	69a3      	ldr	r3, [r4, #24]
 8006a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
    (void)SDIO_Init(hsd->Instance, Init);
 8006a7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8006a7e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006a82:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006a86:	ab06      	add	r3, sp, #24
 8006a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	f001 f8e9 	bl	8007c62 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006a90:	2500      	movs	r5, #0
 8006a92:	e7d5      	b.n	8006a40 <HAL_SD_ConfigWideBusOperation+0xf0>
 8006a94:	004005ff 	.word	0x004005ff

08006a98 <HAL_SD_GetCardState>:
{
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a9c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8006a9e:	0409      	lsls	r1, r1, #16
 8006aa0:	6800      	ldr	r0, [r0, #0]
 8006aa2:	f001 fb03 	bl	80080ac <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	b130      	cbz	r0, 8006ab6 <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 8006aa8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006aaa:	4303      	orrs	r3, r0
 8006aac:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t resp1 = 0;
 8006aae:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ab0:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006ab4:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	f001 f911 	bl	8007ce0 <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006abe:	e7f7      	b.n	8006ab0 <HAL_SD_GetCardState+0x18>

08006ac0 <SD_DMAError>:
{
 8006ac0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ac2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006ac4:	f7fd fea8 	bl	8004818 <HAL_DMA_GetError>
 8006ac8:	2802      	cmp	r0, #2
 8006aca:	d00a      	beq.n	8006ae2 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006acc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006ad0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006ad2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d005      	beq.n	8006ae4 <SD_DMAError+0x24>
 8006ad8:	2a01      	cmp	r2, #1
 8006ada:	d003      	beq.n	8006ae4 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8006adc:	4620      	mov	r0, r4
 8006ade:	f7ff fce3 	bl	80064a8 <HAL_SD_ErrorCallback>
}
 8006ae2:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b24 <SD_DMAError+0x64>)
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006aee:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8006af2:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006af4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006afa:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006afc:	4620      	mov	r0, r4
 8006afe:	f7ff ffcb 	bl	8006a98 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b02:	3805      	subs	r0, #5
 8006b04:	2801      	cmp	r0, #1
 8006b06:	d905      	bls.n	8006b14 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b12:	e7e3      	b.n	8006adc <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	f001 fa4f 	bl	8007fb8 <SDMMC_CmdStopTransfer>
 8006b1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b1c:	4303      	orrs	r3, r0
 8006b1e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b20:	e7f2      	b.n	8006b08 <SD_DMAError+0x48>
 8006b22:	bf00      	nop
 8006b24:	004005ff 	.word	0x004005ff

08006b28 <SD_DMATxAbort>:
{
 8006b28:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b2a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006b32:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff ffaf 	bl	8006a98 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b44:	3805      	subs	r0, #5
 8006b46:	2801      	cmp	r0, #1
 8006b48:	d905      	bls.n	8006b56 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b4c:	b953      	cbnz	r3, 8006b64 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f002 fa1b 	bl	8008f8a <HAL_SD_AbortCallback>
}
 8006b54:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	f001 fa2e 	bl	8007fb8 <SDMMC_CmdStopTransfer>
 8006b5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b5e:	4303      	orrs	r3, r0
 8006b60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b62:	e7f2      	b.n	8006b4a <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff fc9f 	bl	80064a8 <HAL_SD_ErrorCallback>
}
 8006b6a:	e7f3      	b.n	8006b54 <SD_DMATxAbort+0x2c>

08006b6c <SD_DMARxAbort>:
{
 8006b6c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b6e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff ff8d 	bl	8006a98 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b88:	3805      	subs	r0, #5
 8006b8a:	2801      	cmp	r0, #1
 8006b8c:	d905      	bls.n	8006b9a <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b90:	b953      	cbnz	r3, 8006ba8 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8006b92:	4620      	mov	r0, r4
 8006b94:	f002 f9f9 	bl	8008f8a <HAL_SD_AbortCallback>
}
 8006b98:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	f001 fa0c 	bl	8007fb8 <SDMMC_CmdStopTransfer>
 8006ba0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006ba6:	e7f2      	b.n	8006b8e <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff fc7d 	bl	80064a8 <HAL_SD_ErrorCallback>
}
 8006bae:	e7f3      	b.n	8006b98 <SD_DMARxAbort+0x2c>

08006bb0 <HAL_SD_IRQHandler>:
{
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8006bb8:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006bba:	6803      	ldr	r3, [r0, #0]
 8006bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bbe:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8006bc2:	f000 8082 	beq.w	8006cca <HAL_SD_IRQHandler+0x11a>
 8006bc6:	f015 0f08 	tst.w	r5, #8
 8006bca:	d15e      	bne.n	8006c8a <HAL_SD_IRQHandler+0xda>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bce:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006bd2:	f040 8114 	bne.w	8006dfe <HAL_SD_IRQHandler+0x24e>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006bda:	f240 223a 	movw	r2, #570	@ 0x23a
 8006bde:	4211      	tst	r1, r2
 8006be0:	f000 809c 	beq.w	8006d1c <HAL_SD_IRQHandler+0x16c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be6:	f012 0f02 	tst.w	r2, #2
 8006bea:	d003      	beq.n	8006bf4 <HAL_SD_IRQHandler+0x44>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006bee:	f042 0202 	orr.w	r2, r2, #2
 8006bf2:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bf6:	f012 0f08 	tst.w	r2, #8
 8006bfa:	d003      	beq.n	8006c04 <HAL_SD_IRQHandler+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bfc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006bfe:	f042 0208 	orr.w	r2, r2, #8
 8006c02:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c06:	f012 0f20 	tst.w	r2, #32
 8006c0a:	d003      	beq.n	8006c14 <HAL_SD_IRQHandler+0x64>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c0c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006c0e:	f042 0220 	orr.w	r2, r2, #32
 8006c12:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c16:	f012 0f10 	tst.w	r2, #16
 8006c1a:	d003      	beq.n	8006c24 <HAL_SD_IRQHandler+0x74>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006c1e:	f042 0210 	orr.w	r2, r2, #16
 8006c22:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c26:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8006c2a:	d003      	beq.n	8006c34 <HAL_SD_IRQHandler+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006c34:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006c3a:	6822      	ldr	r2, [r4, #0]
 8006c3c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006c3e:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006c42:	f023 0302 	bic.w	r3, r3, #2
 8006c46:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	f001 f9b5 	bl	8007fb8 <SDMMC_CmdStopTransfer>
 8006c4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c50:	4303      	orrs	r3, r0
 8006c52:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c54:	f015 0f08 	tst.w	r5, #8
 8006c58:	f040 80b2 	bne.w	8006dc0 <HAL_SD_IRQHandler+0x210>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c5c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006c60:	d05c      	beq.n	8006d1c <HAL_SD_IRQHandler+0x16c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c62:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8006c66:	f040 80b4 	bne.w	8006dd2 <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c6a:	f015 0f03 	tst.w	r5, #3
 8006c6e:	f000 80bc 	beq.w	8006dea <HAL_SD_IRQHandler+0x23a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c74:	4a75      	ldr	r2, [pc, #468]	@ (8006e4c <HAL_SD_IRQHandler+0x29c>)
 8006c76:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c78:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006c7a:	f7fd fccc 	bl	8004616 <HAL_DMA_Abort_IT>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d04c      	beq.n	8006d1c <HAL_SD_IRQHandler+0x16c>
          SD_DMARxAbort(hsd->hdmarx);
 8006c82:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006c84:	f7ff ff72 	bl	8006b6c <SD_DMARxAbort>
 8006c88:	e048      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8006c8a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8006c8c:	2f00      	cmp	r7, #0
 8006c8e:	d045      	beq.n	8006d1c <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pRxBuffPtr;
 8006c90:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8006c94:	f108 0504 	add.w	r5, r8, #4
 8006c98:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	f000 fffa 	bl	8007c96 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8006ca2:	f805 0c04 	strb.w	r0, [r5, #-4]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006ca6:	0a03      	lsrs	r3, r0, #8
 8006ca8:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006cac:	0c03      	lsrs	r3, r0, #16
 8006cae:	f805 3c02 	strb.w	r3, [r5, #-2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006cb2:	0e00      	lsrs	r0, r0, #24
 8006cb4:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 8006cb8:	3504      	adds	r5, #4
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	d1ee      	bne.n	8006c9c <HAL_SD_IRQHandler+0xec>
      tmp++;
 8006cbe:	f108 0320 	add.w	r3, r8, #32
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 8006cc2:	62a3      	str	r3, [r4, #40]	@ 0x28
      dataremaining--;
 8006cc4:	3f20      	subs	r7, #32
    hsd->RxXferSize = dataremaining;
 8006cc6:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8006cc8:	e028      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ccc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006cd0:	d045      	beq.n	8006d5e <HAL_SD_IRQHandler+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006cd8:	6802      	ldr	r2, [r0, #0]
 8006cda:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006cdc:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006ce0:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006ce4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006ce6:	6802      	ldr	r2, [r0, #0]
 8006ce8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8006cf0:	f015 0f08 	tst.w	r5, #8
 8006cf4:	f000 8092 	beq.w	8006e1c <HAL_SD_IRQHandler+0x26c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006cf8:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8006cfc:	d111      	bne.n	8006d22 <HAL_SD_IRQHandler+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d10:	f015 0f03 	tst.w	r5, #3
 8006d14:	d012      	beq.n	8006d3c <HAL_SD_IRQHandler+0x18c>
        HAL_SD_RxCpltCallback(hsd);
 8006d16:	4620      	mov	r0, r4
 8006d18:	f002 f93f 	bl	8008f9a <HAL_SD_RxCpltCallback>
}
 8006d1c:	b002      	add	sp, #8
 8006d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d22:	6800      	ldr	r0, [r0, #0]
 8006d24:	f001 f948 	bl	8007fb8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d0e7      	beq.n	8006cfe <HAL_SD_IRQHandler+0x14e>
          hsd->ErrorCode |= errorstate;
 8006d2e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d30:	4313      	orrs	r3, r2
 8006d32:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff fbb7 	bl	80064a8 <HAL_SD_ErrorCallback>
 8006d3a:	e7e0      	b.n	8006cfe <HAL_SD_IRQHandler+0x14e>
        HAL_SD_TxCpltCallback(hsd);
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f002 f928 	bl	8008f92 <HAL_SD_TxCpltCallback>
 8006d42:	e7eb      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	f001 f937 	bl	8007fb8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d06c      	beq.n	8006e2a <HAL_SD_IRQHandler+0x27a>
          hsd->ErrorCode |= errorstate;
 8006d50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006d52:	4313      	orrs	r3, r2
 8006d54:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff fba6 	bl	80064a8 <HAL_SD_ErrorCallback>
 8006d5c:	e065      	b.n	8006e2a <HAL_SD_IRQHandler+0x27a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d60:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8006d64:	f43f af38 	beq.w	8006bd8 <HAL_SD_IRQHandler+0x28>
 8006d68:	f015 0f08 	tst.w	r5, #8
 8006d6c:	f43f af34 	beq.w	8006bd8 <HAL_SD_IRQHandler+0x28>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8006d70:	6a47      	ldr	r7, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d0d2      	beq.n	8006d1c <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pTxBuffPtr;
 8006d76:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8006d7a:	f108 0504 	add.w	r5, r8, #4
 8006d7e:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8006d82:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8006d86:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8006d88:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8006d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006d90:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 8006d92:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8006d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d9a:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8006d9c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006da0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006da4:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006da6:	a901      	add	r1, sp, #4
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	f000 ff77 	bl	8007c9c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006dae:	3504      	adds	r5, #4
 8006db0:	42b5      	cmp	r5, r6
 8006db2:	d1e6      	bne.n	8006d82 <HAL_SD_IRQHandler+0x1d2>
      tmp++;
 8006db4:	f108 0320 	add.w	r3, r8, #32
    }

    hsd->pTxBuffPtr = tmp;
 8006db8:	6223      	str	r3, [r4, #32]
      dataremaining--;
 8006dba:	3f20      	subs	r7, #32
    hsd->TxXferSize = dataremaining;
 8006dbc:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 8006dbe:	e7ad      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
      hsd->State = HAL_SD_STATE_READY;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fb6c 	bl	80064a8 <HAL_SD_ErrorCallback>
 8006dd0:	e7a4      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006dd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e50 <HAL_SD_IRQHandler+0x2a0>)
 8006dd6:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006dd8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006dda:	f7fd fc1c 	bl	8004616 <HAL_DMA_Abort_IT>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d09c      	beq.n	8006d1c <HAL_SD_IRQHandler+0x16c>
          SD_DMATxAbort(hsd->hdmatx);
 8006de2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006de4:	f7ff fea0 	bl	8006b28 <SD_DMATxAbort>
 8006de8:	e798      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006dee:	2201      	movs	r2, #1
 8006df0:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006df4:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8006df6:	4620      	mov	r0, r4
 8006df8:	f002 f8c7 	bl	8008f8a <HAL_SD_AbortCallback>
}
 8006dfc:	e78e      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006dfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e02:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006e08:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006e0c:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006e10:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006e1c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006e20:	f43f af7c 	beq.w	8006d1c <HAL_SD_IRQHandler+0x16c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e24:	f015 0f20 	tst.w	r5, #32
 8006e28:	d18c      	bne.n	8006d44 <HAL_SD_IRQHandler+0x194>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e2a:	f015 0f03 	tst.w	r5, #3
 8006e2e:	f47f af75 	bne.w	8006d1c <HAL_SD_IRQHandler+0x16c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006e36:	f023 0308 	bic.w	r3, r3, #8
 8006e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e42:	4620      	mov	r0, r4
 8006e44:	f002 f8a5 	bl	8008f92 <HAL_SD_TxCpltCallback>
 8006e48:	e768      	b.n	8006d1c <HAL_SD_IRQHandler+0x16c>
 8006e4a:	bf00      	nop
 8006e4c:	08006b6d 	.word	0x08006b6d
 8006e50:	08006b29 	.word	0x08006b29

08006e54 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d05a      	beq.n	8006f0e <HAL_SPI_Init+0xba>
{
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006e5e:	b933      	cbnz	r3, 8006e6e <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e60:	6843      	ldr	r3, [r0, #4]
 8006e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e66:	d005      	beq.n	8006e74 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61c3      	str	r3, [r0, #28]
 8006e6c:	e002      	b.n	8006e74 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e72:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d040      	beq.n	8006f02 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e80:	2302      	movs	r3, #2
 8006e82:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e8e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006e98:	68a1      	ldr	r1, [r4, #8]
 8006e9a:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	68e1      	ldr	r1, [r4, #12]
 8006ea2:	f401 6100 	and.w	r1, r1, #2048	@ 0x800
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6921      	ldr	r1, [r4, #16]
 8006eaa:	f001 0102 	and.w	r1, r1, #2
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	6961      	ldr	r1, [r4, #20]
 8006eb2:	f001 0101 	and.w	r1, r1, #1
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	69a1      	ldr	r1, [r4, #24]
 8006eba:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	69e1      	ldr	r1, [r4, #28]
 8006ec2:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6a21      	ldr	r1, [r4, #32]
 8006eca:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006ed2:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eda:	6821      	ldr	r1, [r4, #0]
 8006edc:	8b63      	ldrh	r3, [r4, #26]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006ee4:	f002 0210 	and.w	r2, r2, #16
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	69d3      	ldr	r3, [r2, #28]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ef4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8006f00:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006f02:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7fc ffec 	bl	8003ee4 <HAL_SPI_MspInit>
 8006f0c:	e7b8      	b.n	8006e80 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8006f0e:	2001      	movs	r0, #1
}
 8006f10:	4770      	bx	lr
	...

08006f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f18:	6a02      	ldr	r2, [r0, #32]
 8006f1a:	f022 0201 	bic.w	r2, r2, #1
 8006f1e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f22:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f24:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	680d      	ldr	r5, [r1, #0]
 8006f2a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f2c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f30:	688d      	ldr	r5, [r1, #8]
 8006f32:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f34:	4d11      	ldr	r5, [pc, #68]	@ (8006f7c <TIM_OC1_SetConfig+0x68>)
 8006f36:	42a8      	cmp	r0, r5
 8006f38:	d00a      	beq.n	8006f50 <TIM_OC1_SetConfig+0x3c>
 8006f3a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f3e:	42a8      	cmp	r0, r5
 8006f40:	d114      	bne.n	8006f6c <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f42:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f46:	68cd      	ldr	r5, [r1, #12]
 8006f48:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f4a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4e:	e005      	b.n	8006f5c <TIM_OC1_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f50:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006f54:	68cd      	ldr	r5, [r1, #12]
 8006f56:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f58:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f5c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f60:	698d      	ldr	r5, [r1, #24]
 8006f62:	694e      	ldr	r6, [r1, #20]
 8006f64:	ea46 0c05 	orr.w	ip, r6, r5
 8006f68:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f6e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f70:	684a      	ldr	r2, [r1, #4]
 8006f72:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f74:	6203      	str	r3, [r0, #32]
}
 8006f76:	bc70      	pop	{r4, r5, r6}
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000

08006f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f84:	6a02      	ldr	r2, [r0, #32]
 8006f86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f8a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f8e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f90:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f94:	680d      	ldr	r5, [r1, #0]
 8006f96:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f9c:	688d      	ldr	r5, [r1, #8]
 8006f9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fa2:	4d12      	ldr	r5, [pc, #72]	@ (8006fec <TIM_OC3_SetConfig+0x6c>)
 8006fa4:	42a8      	cmp	r0, r5
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_OC3_SetConfig+0x40>
 8006fa8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fac:	42a8      	cmp	r0, r5
 8006fae:	d116      	bne.n	8006fde <TIM_OC3_SetConfig+0x5e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fb4:	68cd      	ldr	r5, [r1, #12]
 8006fb6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	e006      	b.n	8006fce <TIM_OC3_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fc4:	68cd      	ldr	r5, [r1, #12]
 8006fc6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fce:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fd2:	698d      	ldr	r5, [r1, #24]
 8006fd4:	694e      	ldr	r6, [r1, #20]
 8006fd6:	ea46 0c05 	orr.w	ip, r6, r5
 8006fda:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fde:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fe2:	684a      	ldr	r2, [r1, #4]
 8006fe4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe6:	6203      	str	r3, [r0, #32]
}
 8006fe8:	bc70      	pop	{r4, r5, r6}
 8006fea:	4770      	bx	lr
 8006fec:	40010000 	.word	0x40010000

08006ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff4:	6a02      	ldr	r2, [r0, #32]
 8006ff6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ffa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ffe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	680d      	ldr	r5, [r1, #0]
 8007006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800700a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800700e:	688d      	ldr	r5, [r1, #8]
 8007010:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007014:	4d09      	ldr	r5, [pc, #36]	@ (800703c <TIM_OC4_SetConfig+0x4c>)
 8007016:	42a8      	cmp	r0, r5
 8007018:	d003      	beq.n	8007022 <TIM_OC4_SetConfig+0x32>
 800701a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800701e:	42a8      	cmp	r0, r5
 8007020:	d104      	bne.n	800702c <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007022:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007026:	694d      	ldr	r5, [r1, #20]
 8007028:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007030:	684a      	ldr	r2, [r1, #4]
 8007032:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	6203      	str	r3, [r0, #32]
}
 8007036:	bc30      	pop	{r4, r5}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010000 	.word	0x40010000

08007040 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007040:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d132      	bne.n	80070b0 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007050:	6803      	ldr	r3, [r0, #0]
 8007052:	4a19      	ldr	r2, [pc, #100]	@ (80070b8 <HAL_TIM_Base_Start+0x78>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d020      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d01d      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 800705e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007062:	4293      	cmp	r3, r2
 8007064:	d019      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 8007066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800706a:	4293      	cmp	r3, r2
 800706c:	d015      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 800706e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007072:	4293      	cmp	r3, r2
 8007074:	d011      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 8007076:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800707a:	4293      	cmp	r3, r2
 800707c:	d00d      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 800707e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
 8007086:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800708a:	4293      	cmp	r3, r2
 800708c:	d005      	beq.n	800709a <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007096:	2000      	movs	r0, #0
 8007098:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	2a06      	cmp	r2, #6
 80070a2:	d007      	beq.n	80070b4 <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80070ac:	2000      	movs	r0, #0
 80070ae:	4770      	bx	lr
    return HAL_ERROR;
 80070b0:	2001      	movs	r0, #1
 80070b2:	4770      	bx	lr
  return HAL_OK;
 80070b4:	2000      	movs	r0, #0
}
 80070b6:	4770      	bx	lr
 80070b8:	40010000 	.word	0x40010000

080070bc <HAL_TIM_PWM_MspInit>:
}
 80070bc:	4770      	bx	lr

080070be <HAL_TIM_PeriodElapsedCallback>:
}
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80070c0:	4770      	bx	lr

080070c2 <HAL_TIM_IC_CaptureCallback>:
}
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_TriggerCallback>:
}
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIM_IRQHandler>:
{
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80070cc:	6803      	ldr	r3, [r0, #0]
 80070ce:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070d0:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070d2:	f015 0f02 	tst.w	r5, #2
 80070d6:	d010      	beq.n	80070fa <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070d8:	f016 0f02 	tst.w	r6, #2
 80070dc:	d00d      	beq.n	80070fa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070de:	f06f 0202 	mvn.w	r2, #2
 80070e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e4:	2301      	movs	r3, #1
 80070e6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e8:	6803      	ldr	r3, [r0, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f013 0f03 	tst.w	r3, #3
 80070f0:	d05e      	beq.n	80071b0 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	f7ff ffe6 	bl	80070c2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	2300      	movs	r3, #0
 80070f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070fa:	f015 0f04 	tst.w	r5, #4
 80070fe:	d012      	beq.n	8007126 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007100:	f016 0f04 	tst.w	r6, #4
 8007104:	d00f      	beq.n	8007126 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	2302      	movs	r3, #2
 8007110:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800711a:	d04f      	beq.n	80071bc <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800711c:	4620      	mov	r0, r4
 800711e:	f7ff ffd0 	bl	80070c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	2300      	movs	r3, #0
 8007124:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007126:	f015 0f08 	tst.w	r5, #8
 800712a:	d012      	beq.n	8007152 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800712c:	f016 0f08 	tst.w	r6, #8
 8007130:	d00f      	beq.n	8007152 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f06f 0208 	mvn.w	r2, #8
 8007138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800713a:	2304      	movs	r3, #4
 800713c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f013 0f03 	tst.w	r3, #3
 8007146:	d040      	beq.n	80071ca <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff ffba 	bl	80070c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	2300      	movs	r3, #0
 8007150:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007152:	f015 0f10 	tst.w	r5, #16
 8007156:	d012      	beq.n	800717e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007158:	f016 0f10 	tst.w	r6, #16
 800715c:	d00f      	beq.n	800717e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f06f 0210 	mvn.w	r2, #16
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007166:	2308      	movs	r3, #8
 8007168:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007172:	d031      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8007174:	4620      	mov	r0, r4
 8007176:	f7ff ffa4 	bl	80070c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717a:	2300      	movs	r3, #0
 800717c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800717e:	f015 0f01 	tst.w	r5, #1
 8007182:	d002      	beq.n	800718a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007184:	f016 0f01 	tst.w	r6, #1
 8007188:	d12d      	bne.n	80071e6 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800718a:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800718e:	d002      	beq.n	8007196 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007190:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8007194:	d12f      	bne.n	80071f6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007196:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800719a:	d002      	beq.n	80071a2 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800719c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80071a0:	d131      	bne.n	8007206 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071a2:	f015 0f20 	tst.w	r5, #32
 80071a6:	d002      	beq.n	80071ae <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071a8:	f016 0f20 	tst.w	r6, #32
 80071ac:	d133      	bne.n	8007216 <HAL_TIM_IRQHandler+0x14e>
}
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b0:	f7ff ff86 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7ff ff85 	bl	80070c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80071ba:	e79c      	b.n	80070f6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff ff7f 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff ff7e 	bl	80070c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80071c8:	e7ab      	b.n	8007122 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	4620      	mov	r0, r4
 80071cc:	f7ff ff78 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff ff77 	bl	80070c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80071d6:	e7ba      	b.n	800714e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff ff71 	bl	80070c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff ff70 	bl	80070c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80071e4:	e7c9      	b.n	800717a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f06f 0201 	mvn.w	r2, #1
 80071ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff ff65 	bl	80070be <HAL_TIM_PeriodElapsedCallback>
 80071f4:	e7c9      	b.n	800718a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fb9e 	bl	8007940 <HAL_TIMEx_BreakCallback>
 8007204:	e7c7      	b.n	8007196 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800720c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800720e:	4620      	mov	r0, r4
 8007210:	f7ff ff59 	bl	80070c6 <HAL_TIM_TriggerCallback>
 8007214:	e7c5      	b.n	80071a2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f06f 0220 	mvn.w	r2, #32
 800721c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fb8d 	bl	800793e <HAL_TIMEx_CommutCallback>
}
 8007224:	e7c3      	b.n	80071ae <HAL_TIM_IRQHandler+0xe6>
	...

08007228 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007228:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800722a:	4a45      	ldr	r2, [pc, #276]	@ (8007340 <TIM_Base_SetConfig+0x118>)
 800722c:	4290      	cmp	r0, r2
 800722e:	d067      	beq.n	8007300 <TIM_Base_SetConfig+0xd8>
 8007230:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007234:	d031      	beq.n	800729a <TIM_Base_SetConfig+0x72>
 8007236:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800723a:	4290      	cmp	r0, r2
 800723c:	d056      	beq.n	80072ec <TIM_Base_SetConfig+0xc4>
 800723e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007242:	4290      	cmp	r0, r2
 8007244:	d03b      	beq.n	80072be <TIM_Base_SetConfig+0x96>
 8007246:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800724a:	4290      	cmp	r0, r2
 800724c:	d053      	beq.n	80072f6 <TIM_Base_SetConfig+0xce>
 800724e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007252:	4290      	cmp	r0, r2
 8007254:	d038      	beq.n	80072c8 <TIM_Base_SetConfig+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007256:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800725a:	4290      	cmp	r0, r2
 800725c:	d021      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
 800725e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007262:	4290      	cmp	r0, r2
 8007264:	d01d      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
 8007266:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800726a:	4290      	cmp	r0, r2
 800726c:	d019      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
 800726e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007272:	4290      	cmp	r0, r2
 8007274:	d015      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
 8007276:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800727a:	4290      	cmp	r0, r2
 800727c:	d011      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
 800727e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007282:	4290      	cmp	r0, r2
 8007284:	d00d      	beq.n	80072a2 <TIM_Base_SetConfig+0x7a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728a:	694a      	ldr	r2, [r1, #20]
 800728c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800728e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007290:	688b      	ldr	r3, [r1, #8]
 8007292:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007294:	680b      	ldr	r3, [r1, #0]
 8007296:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007298:	e045      	b.n	8007326 <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800729a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800729e:	684a      	ldr	r2, [r1, #4]
 80072a0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a6:	68ca      	ldr	r2, [r1, #12]
 80072a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ae:	694a      	ldr	r2, [r1, #20]
 80072b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80072b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b4:	688b      	ldr	r3, [r1, #8]
 80072b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072b8:	680b      	ldr	r3, [r1, #0]
 80072ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072bc:	e033      	b.n	8007326 <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80072c2:	684a      	ldr	r2, [r1, #4]
 80072c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072c6:	e7ec      	b.n	80072a2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80072cc:	684a      	ldr	r2, [r1, #4]
 80072ce:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072d4:	68ca      	ldr	r2, [r1, #12]
 80072d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072dc:	694a      	ldr	r2, [r1, #20]
 80072de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80072e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072e2:	688b      	ldr	r3, [r1, #8]
 80072e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072e6:	680b      	ldr	r3, [r1, #0]
 80072e8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ea:	e01a      	b.n	8007322 <TIM_Base_SetConfig+0xfa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80072f0:	684a      	ldr	r2, [r1, #4]
 80072f2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f4:	e7d5      	b.n	80072a2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80072fa:	684a      	ldr	r2, [r1, #4]
 80072fc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072fe:	e7d0      	b.n	80072a2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007304:	684a      	ldr	r2, [r1, #4]
 8007306:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730c:	68ca      	ldr	r2, [r1, #12]
 800730e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007314:	694a      	ldr	r2, [r1, #20]
 8007316:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007318:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800731a:	688b      	ldr	r3, [r1, #8]
 800731c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800731e:	680b      	ldr	r3, [r1, #0]
 8007320:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007326:	2301      	movs	r3, #1
 8007328:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800732a:	6903      	ldr	r3, [r0, #16]
 800732c:	f013 0f01 	tst.w	r3, #1
 8007330:	d004      	beq.n	800733c <TIM_Base_SetConfig+0x114>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007332:	6903      	ldr	r3, [r0, #16]
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	6103      	str	r3, [r0, #16]
}
 800733a:	4770      	bx	lr
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40010000 	.word	0x40010000

08007344 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007344:	b340      	cbz	r0, 8007398 <HAL_TIM_Base_Init+0x54>
{
 8007346:	b510      	push	{r4, lr}
 8007348:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800734a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800734e:	b1f3      	cbz	r3, 800738e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	2302      	movs	r3, #2
 8007352:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007356:	4621      	mov	r1, r4
 8007358:	f851 0b04 	ldr.w	r0, [r1], #4
 800735c:	f7ff ff64 	bl	8007228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007360:	2301      	movs	r3, #1
 8007362:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800736a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800736e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007372:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007376:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800737a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800737e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007382:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007386:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800738a:	2000      	movs	r0, #0
}
 800738c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800738e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007392:	f7fc fde9 	bl	8003f68 <HAL_TIM_Base_MspInit>
 8007396:	e7db      	b.n	8007350 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007398:	2001      	movs	r0, #1
}
 800739a:	4770      	bx	lr

0800739c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800739c:	b340      	cbz	r0, 80073f0 <HAL_TIM_PWM_Init+0x54>
{
 800739e:	b510      	push	{r4, lr}
 80073a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80073a6:	b1f3      	cbz	r3, 80073e6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	2302      	movs	r3, #2
 80073aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ae:	4621      	mov	r1, r4
 80073b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80073b4:	f7ff ff38 	bl	8007228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80073c2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80073c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80073ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80073da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80073de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80073e2:	2000      	movs	r0, #0
}
 80073e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80073e6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80073ea:	f7ff fe67 	bl	80070bc <HAL_TIM_PWM_MspInit>
 80073ee:	e7db      	b.n	80073a8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80073f0:	2001      	movs	r0, #1
}
 80073f2:	4770      	bx	lr

080073f4 <TIM_OC2_SetConfig>:
{
 80073f4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80073f6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f8:	6a02      	ldr	r2, [r0, #32]
 80073fa:	f022 0210 	bic.w	r2, r2, #16
 80073fe:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007400:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007402:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007404:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007408:	680d      	ldr	r5, [r1, #0]
 800740a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800740e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007412:	688d      	ldr	r5, [r1, #8]
 8007414:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007418:	4d12      	ldr	r5, [pc, #72]	@ (8007464 <TIM_OC2_SetConfig+0x70>)
 800741a:	42a8      	cmp	r0, r5
 800741c:	d00b      	beq.n	8007436 <TIM_OC2_SetConfig+0x42>
 800741e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007422:	42a8      	cmp	r0, r5
 8007424:	d116      	bne.n	8007454 <TIM_OC2_SetConfig+0x60>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800742a:	68cd      	ldr	r5, [r1, #12]
 800742c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	e006      	b.n	8007444 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800743a:	68cd      	ldr	r5, [r1, #12]
 800743c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007444:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007448:	698d      	ldr	r5, [r1, #24]
 800744a:	694e      	ldr	r6, [r1, #20]
 800744c:	ea46 0c05 	orr.w	ip, r6, r5
 8007450:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8007454:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007456:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007458:	684a      	ldr	r2, [r1, #4]
 800745a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800745c:	6203      	str	r3, [r0, #32]
}
 800745e:	bc70      	pop	{r4, r5, r6}
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010000 	.word	0x40010000

08007468 <HAL_TIM_PWM_ConfigChannel>:
{
 8007468:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800746a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d066      	beq.n	8007540 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007472:	4604      	mov	r4, r0
 8007474:	460d      	mov	r5, r1
 8007476:	2301      	movs	r3, #1
 8007478:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800747c:	2a0c      	cmp	r2, #12
 800747e:	d85a      	bhi.n	8007536 <HAL_TIM_PWM_ConfigChannel+0xce>
 8007480:	e8df f002 	tbb	[pc, r2]
 8007484:	59595907 	.word	0x59595907
 8007488:	5959591b 	.word	0x5959591b
 800748c:	59595930 	.word	0x59595930
 8007490:	44          	.byte	0x44
 8007491:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007492:	6800      	ldr	r0, [r0, #0]
 8007494:	f7ff fd3e 	bl	8006f14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	6993      	ldr	r3, [r2, #24]
 800749c:	f043 0308 	orr.w	r3, r3, #8
 80074a0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	6993      	ldr	r3, [r2, #24]
 80074a6:	f023 0304 	bic.w	r3, r3, #4
 80074aa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	6993      	ldr	r3, [r2, #24]
 80074b0:	6929      	ldr	r1, [r5, #16]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80074b6:	2000      	movs	r0, #0
      break;
 80074b8:	e03e      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	f7ff ff9a 	bl	80073f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	6993      	ldr	r3, [r2, #24]
 80074c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80074c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	6993      	ldr	r3, [r2, #24]
 80074ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	6993      	ldr	r3, [r2, #24]
 80074d8:	6929      	ldr	r1, [r5, #16]
 80074da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80074de:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2000      	movs	r0, #0
      break;
 80074e2:	e029      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e4:	6800      	ldr	r0, [r0, #0]
 80074e6:	f7ff fd4b 	bl	8006f80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	69d3      	ldr	r3, [r2, #28]
 80074ee:	f043 0308 	orr.w	r3, r3, #8
 80074f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	69d3      	ldr	r3, [r2, #28]
 80074f8:	f023 0304 	bic.w	r3, r3, #4
 80074fc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	69d3      	ldr	r3, [r2, #28]
 8007502:	6929      	ldr	r1, [r5, #16]
 8007504:	430b      	orrs	r3, r1
 8007506:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007508:	2000      	movs	r0, #0
      break;
 800750a:	e015      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f7ff fd6f 	bl	8006ff0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	69d3      	ldr	r3, [r2, #28]
 8007516:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800751a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	69d3      	ldr	r3, [r2, #28]
 8007520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007524:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	69d3      	ldr	r3, [r2, #28]
 800752a:	6929      	ldr	r1, [r5, #16]
 800752c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007530:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2000      	movs	r0, #0
      break;
 8007534:	e000      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8007536:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007538:	2300      	movs	r3, #0
 800753a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800753e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007540:	2002      	movs	r0, #2
 8007542:	e7fc      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0xd6>

08007544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007544:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007546:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007548:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800754c:	430a      	orrs	r2, r1
 800754e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007552:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007556:	6082      	str	r2, [r0, #8]
}
 8007558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_TIM_ConfigClockSource>:
{
 800755e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007560:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	f000 80ad 	beq.w	80076c4 <HAL_TIM_ConfigClockSource+0x166>
 800756a:	4604      	mov	r4, r0
 800756c:	2301      	movs	r3, #1
 800756e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007572:	2302      	movs	r3, #2
 8007574:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007578:	6802      	ldr	r2, [r0, #0]
 800757a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800757c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007580:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007584:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007586:	680b      	ldr	r3, [r1, #0]
 8007588:	2b60      	cmp	r3, #96	@ 0x60
 800758a:	d060      	beq.n	800764e <HAL_TIM_ConfigClockSource+0xf0>
 800758c:	d83d      	bhi.n	800760a <HAL_TIM_ConfigClockSource+0xac>
 800758e:	2b40      	cmp	r3, #64	@ 0x40
 8007590:	d079      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x128>
 8007592:	d91c      	bls.n	80075ce <HAL_TIM_ConfigClockSource+0x70>
 8007594:	2b50      	cmp	r3, #80	@ 0x50
 8007596:	d136      	bne.n	8007606 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007598:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800759a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800759c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800759e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a0:	6a1a      	ldr	r2, [r3, #32]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075aa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075b2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80075b6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80075b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ba:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075bc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80075be:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80075c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075c4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80075c8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2000      	movs	r0, #0
}
 80075cc:	e012      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d002      	beq.n	80075d8 <HAL_TIM_ConfigClockSource+0x7a>
 80075d2:	d90b      	bls.n	80075ec <HAL_TIM_ConfigClockSource+0x8e>
 80075d4:	2b30      	cmp	r3, #48	@ 0x30
 80075d6:	d114      	bne.n	8007602 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075d8:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80075da:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80075dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80075e6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075e8:	2000      	movs	r0, #0
}
 80075ea:	e003      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80075ec:	f033 0210 	bics.w	r2, r3, #16
 80075f0:	d0f2      	beq.n	80075d8 <HAL_TIM_ConfigClockSource+0x7a>
 80075f2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80075fa:	2300      	movs	r3, #0
 80075fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007600:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007602:	2001      	movs	r0, #1
 8007604:	e7f6      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
 8007606:	2001      	movs	r0, #1
 8007608:	e7f4      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
 800760a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760e:	d055      	beq.n	80076bc <HAL_TIM_ConfigClockSource+0x15e>
 8007610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007614:	d10c      	bne.n	8007630 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8007616:	68cb      	ldr	r3, [r1, #12]
 8007618:	684a      	ldr	r2, [r1, #4]
 800761a:	6889      	ldr	r1, [r1, #8]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f7ff ff91 	bl	8007544 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	6893      	ldr	r3, [r2, #8]
 8007626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800762a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800762c:	2000      	movs	r0, #0
      break;
 800762e:	e7e1      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8007630:	2b70      	cmp	r3, #112	@ 0x70
 8007632:	d145      	bne.n	80076c0 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8007634:	68cb      	ldr	r3, [r1, #12]
 8007636:	684a      	ldr	r2, [r1, #4]
 8007638:	6889      	ldr	r1, [r1, #8]
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	f7ff ff82 	bl	8007544 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007644:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007648:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2000      	movs	r0, #0
      break;
 800764c:	e7d2      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800764e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8007650:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007654:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007656:	6a19      	ldr	r1, [r3, #32]
 8007658:	f021 0110 	bic.w	r1, r1, #16
 800765c:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007660:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007664:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007668:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800766c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007670:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007672:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007674:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007676:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800767c:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007680:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007682:	2000      	movs	r0, #0
}
 8007684:	e7b6      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8007688:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800768a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800768c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007696:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800769c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80076a4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80076a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076aa:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80076ac:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b2:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80076b6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076b8:	2000      	movs	r0, #0
}
 80076ba:	e79b      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80076bc:	2000      	movs	r0, #0
 80076be:	e799      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80076c0:	2001      	movs	r0, #1
 80076c2:	e797      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80076c4:	2002      	movs	r0, #2
 80076c6:	e79b      	b.n	8007600 <HAL_TIM_ConfigClockSource+0xa2>

080076c8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076cc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076ce:	f04f 0c01 	mov.w	ip, #1
 80076d2:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80076d6:	ea23 030c 	bic.w	r3, r3, ip
 80076da:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076dc:	6a03      	ldr	r3, [r0, #32]
 80076de:	408a      	lsls	r2, r1
 80076e0:	431a      	orrs	r2, r3
 80076e2:	6202      	str	r2, [r0, #32]
}
 80076e4:	4770      	bx	lr
	...

080076e8 <HAL_TIM_PWM_Start>:
{
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ec:	4608      	mov	r0, r1
 80076ee:	bba1      	cbnz	r1, 800775a <HAL_TIM_PWM_Start+0x72>
 80076f0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d167      	bne.n	80077ca <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	2302      	movs	r3, #2
 80076fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007700:	2201      	movs	r2, #1
 8007702:	4601      	mov	r1, r0
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	f7ff ffdf 	bl	80076c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	4a31      	ldr	r2, [pc, #196]	@ (80077d4 <HAL_TIM_PWM_Start+0xec>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d048      	beq.n	80077a4 <HAL_TIM_PWM_Start+0xbc>
 8007712:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007716:	4293      	cmp	r3, r2
 8007718:	d044      	beq.n	80077a4 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800771a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771e:	d049      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 8007720:	4a2d      	ldr	r2, [pc, #180]	@ (80077d8 <HAL_TIM_PWM_Start+0xf0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d046      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 8007726:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800772a:	4293      	cmp	r3, r2
 800772c:	d042      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 800772e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007732:	4293      	cmp	r3, r2
 8007734:	d03e      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 8007736:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800773a:	4293      	cmp	r3, r2
 800773c:	d03a      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 800773e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007742:	4293      	cmp	r3, r2
 8007744:	d036      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
 8007746:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800774a:	4293      	cmp	r3, r2
 800774c:	d032      	beq.n	80077b4 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007756:	2000      	movs	r0, #0
 8007758:	e036      	b.n	80077c8 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800775a:	2904      	cmp	r1, #4
 800775c:	d00c      	beq.n	8007778 <HAL_TIM_PWM_Start+0x90>
 800775e:	2908      	cmp	r1, #8
 8007760:	bf0c      	ite	eq
 8007762:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8007766:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	bf18      	it	ne
 8007770:	2301      	movne	r3, #1
 8007772:	b143      	cbz	r3, 8007786 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8007774:	2001      	movs	r0, #1
 8007776:	e027      	b.n	80077c8 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007778:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800777c:	b2db      	uxtb	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	e7f5      	b.n	8007772 <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007786:	2804      	cmp	r0, #4
 8007788:	d008      	beq.n	800779c <HAL_TIM_PWM_Start+0xb4>
 800778a:	2808      	cmp	r0, #8
 800778c:	f04f 0302 	mov.w	r3, #2
 8007790:	bf0c      	ite	eq
 8007792:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8007796:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800779a:	e7b1      	b.n	8007700 <HAL_TIM_PWM_Start+0x18>
 800779c:	2302      	movs	r3, #2
 800779e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80077a2:	e7ad      	b.n	8007700 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 80077a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077aa:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	4a09      	ldr	r2, [pc, #36]	@ (80077d4 <HAL_TIM_PWM_Start+0xec>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d1b2      	bne.n	800771a <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	2a06      	cmp	r2, #6
 80077bc:	d007      	beq.n	80077ce <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	f042 0201 	orr.w	r2, r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80077c6:	2000      	movs	r0, #0
}
 80077c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80077ca:	2001      	movs	r0, #1
 80077cc:	e7fc      	b.n	80077c8 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 80077ce:	2000      	movs	r0, #0
 80077d0:	e7fa      	b.n	80077c8 <HAL_TIM_PWM_Start+0xe0>
 80077d2:	bf00      	nop
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40000400 	.word	0x40000400

080077dc <HAL_TIM_PWM_Stop>:
{
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80077e2:	2200      	movs	r2, #0
 80077e4:	6800      	ldr	r0, [r0, #0]
 80077e6:	f7ff ff6f 	bl	80076c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007860 <HAL_TIM_PWM_Stop+0x84>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d018      	beq.n	8007824 <HAL_TIM_PWM_Stop+0x48>
 80077f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d014      	beq.n	8007824 <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	6a19      	ldr	r1, [r3, #32]
 80077fe:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007802:	4211      	tst	r1, r2
 8007804:	d108      	bne.n	8007818 <HAL_TIM_PWM_Stop+0x3c>
 8007806:	6a19      	ldr	r1, [r3, #32]
 8007808:	f240 4244 	movw	r2, #1092	@ 0x444
 800780c:	4211      	tst	r1, r2
 800780e:	d103      	bne.n	8007818 <HAL_TIM_PWM_Stop+0x3c>
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	b99d      	cbnz	r5, 8007842 <HAL_TIM_PWM_Stop+0x66>
 800781a:	2301      	movs	r3, #1
 800781c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8007820:	2000      	movs	r0, #0
 8007822:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007824:	6a19      	ldr	r1, [r3, #32]
 8007826:	f241 1211 	movw	r2, #4369	@ 0x1111
 800782a:	4211      	tst	r1, r2
 800782c:	d1e5      	bne.n	80077fa <HAL_TIM_PWM_Stop+0x1e>
 800782e:	6a19      	ldr	r1, [r3, #32]
 8007830:	f240 4244 	movw	r2, #1092	@ 0x444
 8007834:	4211      	tst	r1, r2
 8007836:	d1e0      	bne.n	80077fa <HAL_TIM_PWM_Stop+0x1e>
 8007838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800783a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800783e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007840:	e7db      	b.n	80077fa <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007842:	2d04      	cmp	r5, #4
 8007844:	d008      	beq.n	8007858 <HAL_TIM_PWM_Stop+0x7c>
 8007846:	2d08      	cmp	r5, #8
 8007848:	f04f 0301 	mov.w	r3, #1
 800784c:	bf0c      	ite	eq
 800784e:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8007852:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8007856:	e7e3      	b.n	8007820 <HAL_TIM_PWM_Stop+0x44>
 8007858:	2301      	movs	r3, #1
 800785a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800785e:	e7df      	b.n	8007820 <HAL_TIM_PWM_Stop+0x44>
 8007860:	40010000 	.word	0x40010000

08007864 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007864:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007868:	2a01      	cmp	r2, #1
 800786a:	d03b      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800786c:	b430      	push	{r4, r5}
 800786e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007870:	2201      	movs	r2, #1
 8007872:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007876:	2202      	movs	r2, #2
 8007878:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800787c:	6804      	ldr	r4, [r0, #0]
 800787e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007880:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007882:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007886:	680d      	ldr	r5, [r1, #0]
 8007888:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788a:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4c16      	ldr	r4, [pc, #88]	@ (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8007890:	42a2      	cmp	r2, r4
 8007892:	d01a      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8007894:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007898:	d017      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800789a:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 800789e:	42a2      	cmp	r2, r4
 80078a0:	d013      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80078a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80078a6:	42a2      	cmp	r2, r4
 80078a8:	d00f      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80078aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80078ae:	42a2      	cmp	r2, r4
 80078b0:	d00b      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80078b2:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80078b6:	42a2      	cmp	r2, r4
 80078b8:	d007      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80078ba:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 80078be:	42a2      	cmp	r2, r4
 80078c0:	d003      	beq.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80078c2:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 80078c6:	42a2      	cmp	r2, r4
 80078c8:	d104      	bne.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ca:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ce:	6849      	ldr	r1, [r1, #4]
 80078d0:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078d2:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078da:	2000      	movs	r0, #0
 80078dc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80078e0:	bc30      	pop	{r4, r5}
 80078e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80078e4:	2002      	movs	r0, #2
}
 80078e6:	4770      	bx	lr
 80078e8:	40010000 	.word	0x40010000

080078ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078ec:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d021      	beq.n	800793a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80078f6:	2301      	movs	r3, #1
 80078f8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078fc:	68cb      	ldr	r3, [r1, #12]
 80078fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007902:	6888      	ldr	r0, [r1, #8]
 8007904:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007906:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800790a:	6848      	ldr	r0, [r1, #4]
 800790c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800790e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007912:	6808      	ldr	r0, [r1, #0]
 8007914:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800791a:	6908      	ldr	r0, [r1, #16]
 800791c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800791e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007922:	6948      	ldr	r0, [r1, #20]
 8007924:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800792a:	69c9      	ldr	r1, [r1, #28]
 800792c:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800792e:	6811      	ldr	r1, [r2, #0]
 8007930:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007932:	2000      	movs	r0, #0
 8007934:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8007938:	4770      	bx	lr
  __HAL_LOCK(htim);
 800793a:	2002      	movs	r0, #2
}
 800793c:	4770      	bx	lr

0800793e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800793e:	4770      	bx	lr

08007940 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007940:	4770      	bx	lr

08007942 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007942:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f102 030c 	add.w	r3, r2, #12
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	320c      	adds	r2, #12
 8007952:	e842 3100 	strex	r1, r3, [r2]
 8007956:	2900      	cmp	r1, #0
 8007958:	d1f3      	bne.n	8007942 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	f102 0314 	add.w	r3, r2, #20
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	3214      	adds	r2, #20
 800796a:	e842 3100 	strex	r1, r3, [r2]
 800796e:	2900      	cmp	r1, #0
 8007970:	d1f3      	bne.n	800795a <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007972:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007974:	2b01      	cmp	r3, #1
 8007976:	d005      	beq.n	8007984 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007978:	2320      	movs	r3, #32
 800797a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	2300      	movs	r3, #0
 8007980:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8007982:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007984:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	f102 030c 	add.w	r3, r2, #12
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	320c      	adds	r2, #12
 8007994:	e842 3100 	strex	r1, r3, [r2]
 8007998:	2900      	cmp	r1, #0
 800799a:	d1f3      	bne.n	8007984 <UART_EndRxTransfer+0x42>
 800799c:	e7ec      	b.n	8007978 <UART_EndRxTransfer+0x36>
	...

080079a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a4:	6802      	ldr	r2, [r0, #0]
 80079a6:	6913      	ldr	r3, [r2, #16]
 80079a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80079ac:	68c1      	ldr	r1, [r0, #12]
 80079ae:	430b      	orrs	r3, r1
 80079b0:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80079b2:	6801      	ldr	r1, [r0, #0]
 80079b4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079b6:	6883      	ldr	r3, [r0, #8]
 80079b8:	6900      	ldr	r0, [r0, #16]
 80079ba:	4303      	orrs	r3, r0
 80079bc:	6960      	ldr	r0, [r4, #20]
 80079be:	4303      	orrs	r3, r0
 80079c0:	69e0      	ldr	r0, [r4, #28]
 80079c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80079c4:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 80079c8:	f022 020c 	bic.w	r2, r2, #12
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	6953      	ldr	r3, [r2, #20]
 80079d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d8:	69a1      	ldr	r1, [r4, #24]
 80079da:	430b      	orrs	r3, r1
 80079dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4a2e      	ldr	r2, [pc, #184]	@ (8007a9c <UART_SetConfig+0xfc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d006      	beq.n	80079f4 <UART_SetConfig+0x54>
 80079e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d002      	beq.n	80079f4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ee:	f7fe f941 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 80079f2:	e001      	b.n	80079f8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f4:	f7fe f94e 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f8:	69e3      	ldr	r3, [r4, #28]
 80079fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079fe:	d024      	beq.n	8007a4a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a00:	2100      	movs	r1, #0
 8007a02:	1803      	adds	r3, r0, r0
 8007a04:	4149      	adcs	r1, r1
 8007a06:	181b      	adds	r3, r3, r0
 8007a08:	f141 0100 	adc.w	r1, r1, #0
 8007a0c:	00c9      	lsls	r1, r1, #3
 8007a0e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	1818      	adds	r0, r3, r0
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007a1c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8007a20:	f141 0100 	adc.w	r1, r1, #0
 8007a24:	f7f8 fc4c 	bl	80002c0 <__aeabi_uldivmod>
 8007a28:	6821      	ldr	r1, [r4, #0]
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <UART_SetConfig+0x100>)
 8007a2c:	fba2 4300 	umull	r4, r3, r2, r0
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	2464      	movs	r4, #100	@ 0x64
 8007a34:	fb04 0013 	mls	r0, r4, r3, r0
 8007a38:	0100      	lsls	r0, r0, #4
 8007a3a:	3032      	adds	r0, #50	@ 0x32
 8007a3c:	fba2 2000 	umull	r2, r0, r2, r0
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8007a46:	608b      	str	r3, [r1, #8]
  }
}
 8007a48:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	1802      	adds	r2, r0, r0
 8007a4e:	eb43 0103 	adc.w	r1, r3, r3
 8007a52:	1812      	adds	r2, r2, r0
 8007a54:	f141 0100 	adc.w	r1, r1, #0
 8007a58:	00c9      	lsls	r1, r1, #3
 8007a5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a5e:	00d2      	lsls	r2, r2, #3
 8007a60:	1810      	adds	r0, r2, r0
 8007a62:	f141 0100 	adc.w	r1, r1, #0
 8007a66:	6862      	ldr	r2, [r4, #4]
 8007a68:	1892      	adds	r2, r2, r2
 8007a6a:	415b      	adcs	r3, r3
 8007a6c:	f7f8 fc28 	bl	80002c0 <__aeabi_uldivmod>
 8007a70:	4a0b      	ldr	r2, [pc, #44]	@ (8007aa0 <UART_SetConfig+0x100>)
 8007a72:	fba2 3100 	umull	r3, r1, r2, r0
 8007a76:	0949      	lsrs	r1, r1, #5
 8007a78:	2364      	movs	r3, #100	@ 0x64
 8007a7a:	fb03 0311 	mls	r3, r3, r1, r0
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	3332      	adds	r3, #50	@ 0x32
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	6820      	ldr	r0, [r4, #0]
 8007a88:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8007a8c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a96:	4413      	add	r3, r2
 8007a98:	6083      	str	r3, [r0, #8]
 8007a9a:	e7d5      	b.n	8007a48 <UART_SetConfig+0xa8>
 8007a9c:	40011000 	.word	0x40011000
 8007aa0:	51eb851f 	.word	0x51eb851f

08007aa4 <UART_WaitOnFlagUntilTimeout>:
{
 8007aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	4680      	mov	r8, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	4616      	mov	r6, r2
 8007ab0:	4699      	mov	r9, r3
 8007ab2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab8:	681c      	ldr	r4, [r3, #0]
 8007aba:	ea35 0404 	bics.w	r4, r5, r4
 8007abe:	bf0c      	ite	eq
 8007ac0:	2401      	moveq	r4, #1
 8007ac2:	2400      	movne	r4, #0
 8007ac4:	42b4      	cmp	r4, r6
 8007ac6:	d128      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8007ac8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007acc:	d0f4      	beq.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ace:	f7fc fc1d 	bl	800430c <HAL_GetTick>
 8007ad2:	eba0 0009 	sub.w	r0, r0, r9
 8007ad6:	42b8      	cmp	r0, r7
 8007ad8:	d823      	bhi.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x7e>
 8007ada:	b327      	cbz	r7, 8007b26 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007adc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	f012 0f04 	tst.w	r2, #4
 8007ae6:	d0e5      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x10>
 8007ae8:	2d80      	cmp	r5, #128	@ 0x80
 8007aea:	d0e3      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x10>
 8007aec:	2d40      	cmp	r5, #64	@ 0x40
 8007aee:	d0e1      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f012 0f08 	tst.w	r2, #8
 8007af6:	d0dd      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007af8:	2400      	movs	r4, #0
 8007afa:	9401      	str	r4, [sp, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	9201      	str	r2, [sp, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8007b06:	4640      	mov	r0, r8
 8007b08:	f7ff ff1b 	bl	8007942 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8007b12:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8007b16:	2001      	movs	r0, #1
 8007b18:	e000      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8007b1a:	2000      	movs	r0, #0
}
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007b22:	2003      	movs	r0, #3
 8007b24:	e7fa      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x78>
 8007b26:	2003      	movs	r0, #3
 8007b28:	e7f8      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x78>

08007b2a <HAL_UART_Init>:
  if (huart == NULL)
 8007b2a:	b360      	cbz	r0, 8007b86 <HAL_UART_Init+0x5c>
{
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b30:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007b34:	b313      	cbz	r3, 8007b7c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8007b36:	2324      	movs	r3, #36	@ 0x24
 8007b38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	68d3      	ldr	r3, [r2, #12]
 8007b40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b44:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff ff2a 	bl	80079a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	6913      	ldr	r3, [r2, #16]
 8007b50:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007b54:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	6953      	ldr	r3, [r2, #20]
 8007b5a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007b5e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	68d3      	ldr	r3, [r2, #12]
 8007b64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b68:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b6e:	2320      	movs	r3, #32
 8007b70:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b78:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8007b7a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007b7c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8007b80:	f7fc fa5c 	bl	800403c <HAL_UART_MspInit>
 8007b84:	e7d7      	b.n	8007b36 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007b86:	2001      	movs	r0, #1
}
 8007b88:	4770      	bx	lr

08007b8a <HAL_UART_Transmit>:
{
 8007b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007b92:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d15c      	bne.n	8007c56 <HAL_UART_Transmit+0xcc>
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	d05b      	beq.n	8007c5e <HAL_UART_Transmit+0xd4>
 8007ba6:	b90a      	cbnz	r2, 8007bac <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8007ba8:	2001      	movs	r0, #1
 8007baa:	e055      	b.n	8007c58 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bb0:	2321      	movs	r3, #33	@ 0x21
 8007bb2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8007bb6:	f7fc fba9 	bl	800430c <HAL_GetTick>
 8007bba:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8007bbc:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007bc0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc4:	68a3      	ldr	r3, [r4, #8]
 8007bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bca:	d009      	beq.n	8007be0 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8007bcc:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8007bd0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	b373      	cbz	r3, 8007c34 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bd6:	f04f 0900 	mov.w	r9, #0
 8007bda:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8007bde:	e019      	b.n	8007c14 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	b113      	cbz	r3, 8007bea <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8007be4:	f04f 0a00 	mov.w	sl, #0
 8007be8:	e7f2      	b.n	8007bd0 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8007bea:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8007bec:	2500      	movs	r5, #0
 8007bee:	e7ef      	b.n	8007bd0 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	e02e      	b.n	8007c58 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8007c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c04:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007c06:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007c08:	3a01      	subs	r2, #1
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007c0e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	b17b      	cbz	r3, 8007c34 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c14:	9600      	str	r6, [sp, #0]
 8007c16:	463b      	mov	r3, r7
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff ff41 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d1e4      	bne.n	8007bf0 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d0e7      	beq.n	8007bfa <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007c30:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c32:	e7e8      	b.n	8007c06 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c34:	9600      	str	r6, [sp, #0]
 8007c36:	463b      	mov	r3, r7
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2140      	movs	r1, #64	@ 0x40
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7ff ff31 	bl	8007aa4 <UART_WaitOnFlagUntilTimeout>
 8007c42:	b918      	cbnz	r0, 8007c4c <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8007c44:	2320      	movs	r3, #32
 8007c46:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8007c4a:	e005      	b.n	8007c58 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 8007c4c:	2320      	movs	r3, #32
 8007c4e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8007c52:	2003      	movs	r0, #3
 8007c54:	e000      	b.n	8007c58 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8007c56:	2002      	movs	r0, #2
}
 8007c58:	b002      	add	sp, #8
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7fa      	b.n	8007c58 <HAL_UART_Transmit+0xce>

08007c62 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007c62:	b084      	sub	sp, #16
 8007c64:	f10d 0c04 	add.w	ip, sp, #4
 8007c68:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007c6c:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8007c6e:	460b      	mov	r3, r1
 8007c70:	9902      	ldr	r1, [sp, #8]
 8007c72:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8007c74:	9903      	ldr	r1, [sp, #12]
 8007c76:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8007c78:	9904      	ldr	r1, [sp, #16]
 8007c7a:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8007c7c:	9905      	ldr	r1, [sp, #20]
 8007c7e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007c80:	9906      	ldr	r1, [sp, #24]
 8007c82:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007c84:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8007c88:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8007c90:	2000      	movs	r0, #0
 8007c92:	b004      	add	sp, #16
 8007c94:	4770      	bx	lr

08007c96 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007c96:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8007c9a:	4770      	bx	lr

08007c9c <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007c9c:	680b      	ldr	r3, [r1, #0]
 8007c9e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	4770      	bx	lr

08007ca6 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8007caa:	2000      	movs	r0, #0
 8007cac:	4770      	bx	lr

08007cae <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007cae:	6800      	ldr	r0, [r0, #0]
}
 8007cb0:	f000 0003 	and.w	r0, r0, #3
 8007cb4:	4770      	bx	lr

08007cb6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007cb6:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007cbc:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cbe:	684b      	ldr	r3, [r1, #4]
 8007cc0:	688c      	ldr	r4, [r1, #8]
 8007cc2:	4323      	orrs	r3, r4
                       Command->Response         |\
 8007cc4:	68cc      	ldr	r4, [r1, #12]
 8007cc6:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8007cc8:	6909      	ldr	r1, [r1, #16]
 8007cca:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007ccc:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
 8007cd0:	f022 020f 	bic.w	r2, r2, #15
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007ce0:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8007ce2:	5840      	ldr	r0, [r0, r1]
}  
 8007ce4:	4770      	bx	lr

08007ce6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007ce6:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007ce8:	680b      	ldr	r3, [r1, #0]
 8007cea:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007cec:	684b      	ldr	r3, [r1, #4]
 8007cee:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007cf0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cf2:	688b      	ldr	r3, [r1, #8]
 8007cf4:	68cc      	ldr	r4, [r1, #12]
 8007cf6:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8007cf8:	690c      	ldr	r4, [r1, #16]
 8007cfa:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8007cfc:	6949      	ldr	r1, [r1, #20]
 8007cfe:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d00:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8007d04:	4313      	orrs	r3, r2
 8007d06:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d10:	b510      	push	{r4, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d1a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d1e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d24:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d26:	a901      	add	r1, sp, #4
 8007d28:	f7ff ffc5 	bl	8007cb6 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d60 <SDMMC_CmdGoIdleState+0x50>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0c      	ldr	r2, [pc, #48]	@ (8007d64 <SDMMC_CmdGoIdleState+0x54>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	0a5b      	lsrs	r3, r3, #9
 8007d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d40:	3b01      	subs	r3, #1
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d007      	beq.n	8007d58 <SDMMC_CmdGoIdleState+0x48>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007d48:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007d4a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8007d4e:	d0f7      	beq.n	8007d40 <SDMMC_CmdGoIdleState+0x30>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d50:	23c5      	movs	r3, #197	@ 0xc5
 8007d52:	63a3      	str	r3, [r4, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007d54:	2000      	movs	r0, #0
 8007d56:	e001      	b.n	8007d5c <SDMMC_CmdGoIdleState+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8007d58:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007d5c:	b006      	add	sp, #24
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	20000008 	.word	0x20000008
 8007d64:	10624dd3 	.word	0x10624dd3

08007d68 <SDMMC_GetCmdResp1>:
{
 8007d68:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d6a:	4b54      	ldr	r3, [pc, #336]	@ (8007ebc <SDMMC_GetCmdResp1+0x154>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4854      	ldr	r0, [pc, #336]	@ (8007ec0 <SDMMC_GetCmdResp1+0x158>)
 8007d70:	fba0 0303 	umull	r0, r3, r0, r3
 8007d74:	0a5b      	lsrs	r3, r3, #9
 8007d76:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8007d7a:	1e53      	subs	r3, r2, #1
 8007d7c:	b932      	cbnz	r2, 8007d8c <SDMMC_GetCmdResp1+0x24>
      return SDMMC_ERROR_TIMEOUT;
 8007d7e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007d82:	4770      	bx	lr
    if (count-- == 0U)
 8007d84:	3b01      	subs	r3, #1
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d063      	beq.n	8007e54 <SDMMC_GetCmdResp1+0xec>
    sta_reg = SDIOx->STA;
 8007d8c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8007d94:	d0f6      	beq.n	8007d84 <SDMMC_GetCmdResp1+0x1c>
 8007d96:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007d9a:	d1f3      	bne.n	8007d84 <SDMMC_GetCmdResp1+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d9c:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8007da0:	f013 0f04 	tst.w	r3, #4
 8007da4:	d108      	bne.n	8007db8 <SDMMC_GetCmdResp1+0x50>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007da6:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8007daa:	f010 0001 	ands.w	r0, r0, #1
 8007dae:	d007      	beq.n	8007dc0 <SDMMC_GetCmdResp1+0x58>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007db0:	2301      	movs	r3, #1
 8007db2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007db6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007db8:	2004      	movs	r0, #4
 8007dba:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dbe:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007dc0:	23c5      	movs	r3, #197	@ 0xc5
 8007dc2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8007dc6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d001      	beq.n	8007dd4 <SDMMC_GetCmdResp1+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	4770      	bx	lr
  return (*(__IO uint32_t *) tmp);
 8007dd4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007dd8:	483a      	ldr	r0, [pc, #232]	@ (8007ec4 <SDMMC_GetCmdResp1+0x15c>)
 8007dda:	4018      	ands	r0, r3
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d06c      	beq.n	8007eba <SDMMC_GetCmdResp1+0x152>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db3a      	blt.n	8007e5a <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007de4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007de8:	d13a      	bne.n	8007e60 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007dea:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007dee:	d139      	bne.n	8007e64 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007df0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007df4:	d138      	bne.n	8007e68 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007df6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007dfa:	d138      	bne.n	8007e6e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007dfc:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8007e00:	d138      	bne.n	8007e74 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e02:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007e06:	d138      	bne.n	8007e7a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e08:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007e0c:	d138      	bne.n	8007e80 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e0e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007e12:	d138      	bne.n	8007e86 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e14:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8007e18:	d138      	bne.n	8007e8c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e1a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007e1e:	d138      	bne.n	8007e92 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e20:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007e24:	d138      	bne.n	8007e98 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e26:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007e2a:	d138      	bne.n	8007e9e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e2c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007e30:	d138      	bne.n	8007ea4 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e32:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007e36:	d138      	bne.n	8007eaa <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e38:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8007e3c:	d138      	bne.n	8007eb0 <SDMMC_GetCmdResp1+0x148>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e3e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007e42:	d138      	bne.n	8007eb6 <SDMMC_GetCmdResp1+0x14e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e44:	f013 0f08 	tst.w	r3, #8
 8007e48:	bf0c      	ite	eq
 8007e4a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8007e4e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8007e52:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007e54:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007e58:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e5a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8007e5e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e60:	2040      	movs	r0, #64	@ 0x40
 8007e62:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e64:	2080      	movs	r0, #128	@ 0x80
 8007e66:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007e6c:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e72:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007e78:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007e7e:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e80:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007e84:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007e8a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e8c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007e90:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8007e92:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007e96:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e98:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8007e9c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e9e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8007ea2:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ea4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007ea8:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007eaa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007eae:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007eb0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007eb4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8007eb6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8007eba:	4770      	bx	lr
 8007ebc:	20000008 	.word	0x20000008
 8007ec0:	10624dd3 	.word	0x10624dd3
 8007ec4:	fdffe008 	.word	0xfdffe008

08007ec8 <SDMMC_CmdBlockLength>:
{
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ece:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007ed0:	2510      	movs	r5, #16
 8007ed2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ed4:	2340      	movs	r3, #64	@ 0x40
 8007ed6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ee0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee2:	a901      	add	r1, sp, #4
 8007ee4:	f7ff fee7 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eec:	4629      	mov	r1, r5
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff ff3a 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007ef4:	b007      	add	sp, #28
 8007ef6:	bd30      	pop	{r4, r5, pc}

08007ef8 <SDMMC_CmdReadSingleBlock>:
{
 8007ef8:	b530      	push	{r4, r5, lr}
 8007efa:	b087      	sub	sp, #28
 8007efc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007efe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f00:	2511      	movs	r5, #17
 8007f02:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f04:	2340      	movs	r3, #64	@ 0x40
 8007f06:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f10:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f12:	a901      	add	r1, sp, #4
 8007f14:	f7ff fecf 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff ff22 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007f24:	b007      	add	sp, #28
 8007f26:	bd30      	pop	{r4, r5, pc}

08007f28 <SDMMC_CmdReadMultiBlock>:
{
 8007f28:	b530      	push	{r4, r5, lr}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f2e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f30:	2512      	movs	r5, #18
 8007f32:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f34:	2340      	movs	r3, #64	@ 0x40
 8007f36:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f40:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f42:	a901      	add	r1, sp, #4
 8007f44:	f7ff feb7 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff ff0a 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007f54:	b007      	add	sp, #28
 8007f56:	bd30      	pop	{r4, r5, pc}

08007f58 <SDMMC_CmdWriteSingleBlock>:
{
 8007f58:	b530      	push	{r4, r5, lr}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f5e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f60:	2518      	movs	r5, #24
 8007f62:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f64:	2340      	movs	r3, #64	@ 0x40
 8007f66:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f70:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f72:	a901      	add	r1, sp, #4
 8007f74:	f7ff fe9f 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff fef2 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007f84:	b007      	add	sp, #28
 8007f86:	bd30      	pop	{r4, r5, pc}

08007f88 <SDMMC_CmdWriteMultiBlock>:
{
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f8e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f90:	2519      	movs	r5, #25
 8007f92:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f94:	2340      	movs	r3, #64	@ 0x40
 8007f96:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fa0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fa2:	a901      	add	r1, sp, #4
 8007fa4:	f7ff fe87 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fac:	4629      	mov	r1, r5
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f7ff feda 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007fb4:	b007      	add	sp, #28
 8007fb6:	bd30      	pop	{r4, r5, pc}

08007fb8 <SDMMC_CmdStopTransfer>:
{
 8007fb8:	b530      	push	{r4, r5, lr}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007fc2:	250c      	movs	r5, #12
 8007fc4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fc6:	2240      	movs	r2, #64	@ 0x40
 8007fc8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fd0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fd2:	a901      	add	r1, sp, #4
 8007fd4:	f7ff fe6f 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007fd8:	4a03      	ldr	r2, [pc, #12]	@ (8007fe8 <SDMMC_CmdStopTransfer+0x30>)
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff fec3 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8007fe2:	b007      	add	sp, #28
 8007fe4:	bd30      	pop	{r4, r5, pc}
 8007fe6:	bf00      	nop
 8007fe8:	05f5e100 	.word	0x05f5e100

08007fec <SDMMC_CmdSelDesel>:
{
 8007fec:	b530      	push	{r4, r5, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007ff2:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007ff4:	2507      	movs	r5, #7
 8007ff6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff8:	2340      	movs	r3, #64	@ 0x40
 8007ffa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008004:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008006:	a901      	add	r1, sp, #4
 8008008:	f7ff fe55 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800800c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008010:	4629      	mov	r1, r5
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff fea8 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8008018:	b007      	add	sp, #28
 800801a:	bd30      	pop	{r4, r5, pc}

0800801c <SDMMC_CmdAppCommand>:
{
 800801c:	b530      	push	{r4, r5, lr}
 800801e:	b087      	sub	sp, #28
 8008020:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008022:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008024:	2537      	movs	r5, #55	@ 0x37
 8008026:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800802c:	2300      	movs	r3, #0
 800802e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008034:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008036:	a901      	add	r1, sp, #4
 8008038:	f7ff fe3d 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800803c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008040:	4629      	mov	r1, r5
 8008042:	4620      	mov	r0, r4
 8008044:	f7ff fe90 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8008048:	b007      	add	sp, #28
 800804a:	bd30      	pop	{r4, r5, pc}

0800804c <SDMMC_CmdBusWidth>:
{
 800804c:	b530      	push	{r4, r5, lr}
 800804e:	b087      	sub	sp, #28
 8008050:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008052:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008054:	2506      	movs	r5, #6
 8008056:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008058:	2340      	movs	r3, #64	@ 0x40
 800805a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800805c:	2300      	movs	r3, #0
 800805e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008064:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008066:	a901      	add	r1, sp, #4
 8008068:	f7ff fe25 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800806c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fe78 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 8008078:	b007      	add	sp, #28
 800807a:	bd30      	pop	{r4, r5, pc}

0800807c <SDMMC_CmdSendSCR>:
{
 800807c:	b530      	push	{r4, r5, lr}
 800807e:	b087      	sub	sp, #28
 8008080:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008086:	2533      	movs	r5, #51	@ 0x33
 8008088:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800808a:	2240      	movs	r2, #64	@ 0x40
 800808c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800808e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008094:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008096:	a901      	add	r1, sp, #4
 8008098:	f7ff fe0d 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800809c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a0:	4629      	mov	r1, r5
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff fe60 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 80080a8:	b007      	add	sp, #28
 80080aa:	bd30      	pop	{r4, r5, pc}

080080ac <SDMMC_CmdSendStatus>:
{
 80080ac:	b530      	push	{r4, r5, lr}
 80080ae:	b087      	sub	sp, #28
 80080b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80080b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80080b4:	250d      	movs	r5, #13
 80080b6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080b8:	2340      	movs	r3, #64	@ 0x40
 80080ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080bc:	2300      	movs	r3, #0
 80080be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080c4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080c6:	a901      	add	r1, sp, #4
 80080c8:	f7ff fdf5 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80080cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d0:	4629      	mov	r1, r5
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff fe48 	bl	8007d68 <SDMMC_GetCmdResp1>
}
 80080d8:	b007      	add	sp, #28
 80080da:	bd30      	pop	{r4, r5, pc}

080080dc <SDMMC_GetCmdResp2>:
{
 80080dc:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080de:	4b16      	ldr	r3, [pc, #88]	@ (8008138 <SDMMC_GetCmdResp2+0x5c>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b16      	ldr	r3, [pc, #88]	@ (800813c <SDMMC_GetCmdResp2+0x60>)
 80080e4:	fba3 3202 	umull	r3, r2, r3, r2
 80080e8:	0a52      	lsrs	r2, r2, #9
 80080ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080ee:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80080f2:	1e53      	subs	r3, r2, #1
 80080f4:	b932      	cbnz	r2, 8008104 <SDMMC_GetCmdResp2+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80080f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80080fa:	4770      	bx	lr
    if (count-- == 0U)
 80080fc:	3b01      	subs	r3, #1
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008102:	d015      	beq.n	8008130 <SDMMC_GetCmdResp2+0x54>
    sta_reg = SDIOx->STA;
 8008104:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008106:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800810a:	d0f7      	beq.n	80080fc <SDMMC_GetCmdResp2+0x20>
 800810c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008110:	d1f4      	bne.n	80080fc <SDMMC_GetCmdResp2+0x20>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008112:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008114:	f013 0f04 	tst.w	r3, #4
 8008118:	d107      	bne.n	800812a <SDMMC_GetCmdResp2+0x4e>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800811a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800811c:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008120:	bf14      	ite	ne
 8008122:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008124:	23c5      	moveq	r3, #197	@ 0xc5
 8008126:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8008128:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800812a:	2004      	movs	r0, #4
 800812c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800812e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008130:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000008 	.word	0x20000008
 800813c:	10624dd3 	.word	0x10624dd3

08008140 <SDMMC_CmdSendCID>:
{
 8008140:	b510      	push	{r4, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800814a:	2202      	movs	r2, #2
 800814c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800814e:	22c0      	movs	r2, #192	@ 0xc0
 8008150:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008152:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008158:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815a:	a901      	add	r1, sp, #4
 800815c:	f7ff fdab 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008160:	4620      	mov	r0, r4
 8008162:	f7ff ffbb 	bl	80080dc <SDMMC_GetCmdResp2>
}
 8008166:	b006      	add	sp, #24
 8008168:	bd10      	pop	{r4, pc}

0800816a <SDMMC_CmdSendCSD>:
{
 800816a:	b510      	push	{r4, lr}
 800816c:	b086      	sub	sp, #24
 800816e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8008170:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008172:	2309      	movs	r3, #9
 8008174:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008176:	23c0      	movs	r3, #192	@ 0xc0
 8008178:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800817e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008182:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008184:	a901      	add	r1, sp, #4
 8008186:	f7ff fd96 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff ffa6 	bl	80080dc <SDMMC_GetCmdResp2>
}
 8008190:	b006      	add	sp, #24
 8008192:	bd10      	pop	{r4, pc}

08008194 <SDMMC_GetCmdResp3>:
{
 8008194:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008196:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <SDMMC_GetCmdResp3+0x50>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b13      	ldr	r3, [pc, #76]	@ (80081e8 <SDMMC_GetCmdResp3+0x54>)
 800819c:	fba3 3202 	umull	r3, r2, r3, r2
 80081a0:	0a52      	lsrs	r2, r2, #9
 80081a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80081a6:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80081aa:	1e53      	subs	r3, r2, #1
 80081ac:	b932      	cbnz	r2, 80081bc <SDMMC_GetCmdResp3+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80081ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80081b2:	4770      	bx	lr
    if (count-- == 0U)
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d00f      	beq.n	80081dc <SDMMC_GetCmdResp3+0x48>
    sta_reg = SDIOx->STA;
 80081bc:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081be:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80081c2:	d0f7      	beq.n	80081b4 <SDMMC_GetCmdResp3+0x20>
 80081c4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80081c8:	d1f4      	bne.n	80081b4 <SDMMC_GetCmdResp3+0x20>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081ca:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80081cc:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081d0:	bf19      	ittee	ne
 80081d2:	2004      	movne	r0, #4
 80081d4:	6388      	strne	r0, [r1, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081d6:	23c5      	moveq	r3, #197	@ 0xc5
 80081d8:	638b      	streq	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80081da:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80081dc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000008 	.word	0x20000008
 80081e8:	10624dd3 	.word	0x10624dd3

080081ec <SDMMC_CmdAppOperCommand>:
{
 80081ec:	b510      	push	{r4, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80081f2:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80081f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80081fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80081fc:	2329      	movs	r3, #41	@ 0x29
 80081fe:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008200:	2340      	movs	r3, #64	@ 0x40
 8008202:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008204:	2300      	movs	r3, #0
 8008206:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800820c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800820e:	a901      	add	r1, sp, #4
 8008210:	f7ff fd51 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008214:	4620      	mov	r0, r4
 8008216:	f7ff ffbd 	bl	8008194 <SDMMC_GetCmdResp3>
}
 800821a:	b006      	add	sp, #24
 800821c:	bd10      	pop	{r4, pc}
	...

08008220 <SDMMC_GetCmdResp6>:
{
 8008220:	4684      	mov	ip, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008222:	4b2a      	ldr	r3, [pc, #168]	@ (80082cc <SDMMC_GetCmdResp6+0xac>)
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	4b2a      	ldr	r3, [pc, #168]	@ (80082d0 <SDMMC_GetCmdResp6+0xb0>)
 8008228:	fba3 3000 	umull	r3, r0, r3, r0
 800822c:	0a40      	lsrs	r0, r0, #9
 800822e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008232:	fb03 f000 	mul.w	r0, r3, r0
    if (count-- == 0U)
 8008236:	1e43      	subs	r3, r0, #1
 8008238:	b3e0      	cbz	r0, 80082b4 <SDMMC_GetCmdResp6+0x94>
{
 800823a:	b410      	push	{r4}
 800823c:	e003      	b.n	8008246 <SDMMC_GetCmdResp6+0x26>
    if (count-- == 0U)
 800823e:	3b01      	subs	r3, #1
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d039      	beq.n	80082ba <SDMMC_GetCmdResp6+0x9a>
    sta_reg = SDIOx->STA;
 8008246:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800824a:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800824e:	d0f6      	beq.n	800823e <SDMMC_GetCmdResp6+0x1e>
 8008250:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8008254:	d1f3      	bne.n	800823e <SDMMC_GetCmdResp6+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008256:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800825a:	f013 0f04 	tst.w	r3, #4
 800825e:	d108      	bne.n	8008272 <SDMMC_GetCmdResp6+0x52>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008260:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8008264:	f010 0001 	ands.w	r0, r0, #1
 8008268:	d007      	beq.n	800827a <SDMMC_GetCmdResp6+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800826a:	2301      	movs	r3, #1
 800826c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008270:	e025      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008272:	2004      	movs	r0, #4
 8008274:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008278:	e021      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
  return (uint8_t)(SDIOx->RESPCMD);
 800827a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4299      	cmp	r1, r3
 8008282:	d001      	beq.n	8008288 <SDMMC_GetCmdResp6+0x68>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008284:	2001      	movs	r0, #1
 8008286:	e01a      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008288:	23c5      	movs	r3, #197	@ 0xc5
 800828a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800828e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008292:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8008296:	d00a      	beq.n	80082ae <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008298:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800829c:	d112      	bne.n	80082c4 <SDMMC_GetCmdResp6+0xa4>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800829e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80082a2:	bf0c      	ite	eq
 80082a4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80082a8:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 80082ac:	e007      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80082ae:	0c1b      	lsrs	r3, r3, #16
 80082b0:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80082b2:	e004      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
      return SDMMC_ERROR_TIMEOUT;
 80082b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80082b8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80082ba:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80082be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80082c8:	e7f9      	b.n	80082be <SDMMC_GetCmdResp6+0x9e>
 80082ca:	bf00      	nop
 80082cc:	20000008 	.word	0x20000008
 80082d0:	10624dd3 	.word	0x10624dd3

080082d4 <SDMMC_CmdSetRelAdd>:
{
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082e0:	2603      	movs	r6, #3
 80082e2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082e4:	2240      	movs	r2, #64	@ 0x40
 80082e6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ee:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082f0:	a901      	add	r1, sp, #4
 80082f2:	f7ff fce0 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80082f6:	462a      	mov	r2, r5
 80082f8:	4631      	mov	r1, r6
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff ff90 	bl	8008220 <SDMMC_GetCmdResp6>
}
 8008300:	b006      	add	sp, #24
 8008302:	bd70      	pop	{r4, r5, r6, pc}

08008304 <SDMMC_GetCmdResp7>:
{
 8008304:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008306:	4b1a      	ldr	r3, [pc, #104]	@ (8008370 <SDMMC_GetCmdResp7+0x6c>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b1a      	ldr	r3, [pc, #104]	@ (8008374 <SDMMC_GetCmdResp7+0x70>)
 800830c:	fba3 3202 	umull	r3, r2, r3, r2
 8008310:	0a52      	lsrs	r2, r2, #9
 8008312:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008316:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800831a:	1e53      	subs	r3, r2, #1
 800831c:	b932      	cbnz	r2, 800832c <SDMMC_GetCmdResp7+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800831e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008322:	4770      	bx	lr
    if (count-- == 0U)
 8008324:	3b01      	subs	r3, #1
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d01b      	beq.n	8008364 <SDMMC_GetCmdResp7+0x60>
    sta_reg = SDIOx->STA;
 800832c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800832e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8008332:	d0f7      	beq.n	8008324 <SDMMC_GetCmdResp7+0x20>
 8008334:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008338:	d1f4      	bne.n	8008324 <SDMMC_GetCmdResp7+0x20>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800833a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800833c:	f013 0f04 	tst.w	r3, #4
 8008340:	d10a      	bne.n	8008358 <SDMMC_GetCmdResp7+0x54>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008342:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8008344:	f010 0001 	ands.w	r0, r0, #1
 8008348:	d109      	bne.n	800835e <SDMMC_GetCmdResp7+0x5a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800834a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800834c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8008350:	d00b      	beq.n	800836a <SDMMC_GetCmdResp7+0x66>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008352:	2340      	movs	r3, #64	@ 0x40
 8008354:	638b      	str	r3, [r1, #56]	@ 0x38
 8008356:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008358:	2004      	movs	r0, #4
 800835a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800835c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800835e:	2301      	movs	r3, #1
 8008360:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008362:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008364:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008368:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800836a:	4618      	mov	r0, r3
}
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20000008 	.word	0x20000008
 8008374:	10624dd3 	.word	0x10624dd3

08008378 <SDMMC_CmdOperCond>:
{
 8008378:	b510      	push	{r4, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800837e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008382:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008384:	2308      	movs	r3, #8
 8008386:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008388:	2340      	movs	r3, #64	@ 0x40
 800838a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800838c:	2300      	movs	r3, #0
 800838e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008394:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008396:	a901      	add	r1, sp, #4
 8008398:	f7ff fc8d 	bl	8007cb6 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800839c:	4620      	mov	r0, r4
 800839e:	f7ff ffb1 	bl	8008304 <SDMMC_GetCmdResp7>
}
 80083a2:	b006      	add	sp, #24
 80083a4:	bd10      	pop	{r4, pc}

080083a6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083a6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b8:	d815      	bhi.n	80083e6 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ba:	6903      	ldr	r3, [r0, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	daf5      	bge.n	80083ac <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083c4:	6903      	ldr	r3, [r0, #16]
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	3301      	adds	r3, #1
 80083d0:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80083d2:	9b01      	ldr	r3, [sp, #4]
 80083d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083d8:	d808      	bhi.n	80083ec <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083da:	6903      	ldr	r3, [r0, #16]
 80083dc:	f013 0f01 	tst.w	r3, #1
 80083e0:	d1f4      	bne.n	80083cc <USB_CoreReset+0x26>

  return HAL_OK;
 80083e2:	2000      	movs	r0, #0
 80083e4:	e000      	b.n	80083e8 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80083e6:	2003      	movs	r0, #3
}
 80083e8:	b002      	add	sp, #8
 80083ea:	4770      	bx	lr
      return HAL_TIMEOUT;
 80083ec:	2003      	movs	r0, #3
 80083ee:	e7fb      	b.n	80083e8 <USB_CoreReset+0x42>

080083f0 <USB_CoreInit>:
{
 80083f0:	b084      	sub	sp, #16
 80083f2:	b510      	push	{r4, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	a803      	add	r0, sp, #12
 80083f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083fc:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d121      	bne.n	8008448 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008404:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800840a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800840c:	68e3      	ldr	r3, [r4, #12]
 800840e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008416:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008418:	68e3      	ldr	r3, [r4, #12]
 800841a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800841e:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8008420:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d00a      	beq.n	800843e <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8008428:	4620      	mov	r0, r4
 800842a:	f7ff ffbc 	bl	80083a6 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800842e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d01c      	beq.n	8008470 <USB_CoreInit+0x80>
}
 8008436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800843a:	b004      	add	sp, #16
 800843c:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800843e:	68e3      	ldr	r3, [r4, #12]
 8008440:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008444:	60e3      	str	r3, [r4, #12]
 8008446:	e7ef      	b.n	8008428 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008448:	68e3      	ldr	r3, [r4, #12]
 800844a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800844e:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8008450:	4620      	mov	r0, r4
 8008452:	f7ff ffa8 	bl	80083a6 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8008456:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800845a:	b923      	cbnz	r3, 8008466 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800845c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800845e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008462:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008464:	e7e3      	b.n	800842e <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008466:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800846c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800846e:	e7de      	b.n	800842e <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	f043 0306 	orr.w	r3, r3, #6
 8008476:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008478:	68a3      	ldr	r3, [r4, #8]
 800847a:	f043 0320 	orr.w	r3, r3, #32
 800847e:	60a3      	str	r3, [r4, #8]
 8008480:	e7d9      	b.n	8008436 <USB_CoreInit+0x46>
	...

08008484 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8008484:	2a02      	cmp	r2, #2
 8008486:	d00a      	beq.n	800849e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008488:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800848a:	68c3      	ldr	r3, [r0, #12]
 800848c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8008490:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008492:	68c3      	ldr	r3, [r0, #12]
 8008494:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8008498:	60c3      	str	r3, [r0, #12]
}
 800849a:	2000      	movs	r0, #0
 800849c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800849e:	4b23      	ldr	r3, [pc, #140]	@ (800852c <USB_SetTurnaroundTime+0xa8>)
 80084a0:	440b      	add	r3, r1
 80084a2:	4a23      	ldr	r2, [pc, #140]	@ (8008530 <USB_SetTurnaroundTime+0xac>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d930      	bls.n	800850a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80084a8:	4b22      	ldr	r3, [pc, #136]	@ (8008534 <USB_SetTurnaroundTime+0xb0>)
 80084aa:	440b      	add	r3, r1
 80084ac:	4a22      	ldr	r2, [pc, #136]	@ (8008538 <USB_SetTurnaroundTime+0xb4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d92d      	bls.n	800850e <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084b2:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80084b6:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80084ba:	4a20      	ldr	r2, [pc, #128]	@ (800853c <USB_SetTurnaroundTime+0xb8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d928      	bls.n	8008512 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084c0:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80084c4:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <USB_SetTurnaroundTime+0xbc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d323      	bcc.n	8008516 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008544 <USB_SetTurnaroundTime+0xc0>)
 80084d0:	440b      	add	r3, r1
 80084d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <USB_SetTurnaroundTime+0xc4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d920      	bls.n	800851a <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084d8:	4b1c      	ldr	r3, [pc, #112]	@ (800854c <USB_SetTurnaroundTime+0xc8>)
 80084da:	440b      	add	r3, r1
 80084dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008550 <USB_SetTurnaroundTime+0xcc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d31d      	bcc.n	800851e <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008554 <USB_SetTurnaroundTime+0xd0>)
 80084e4:	440b      	add	r3, r1
 80084e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008558 <USB_SetTurnaroundTime+0xd4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d31a      	bcc.n	8008522 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084ec:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 80084f0:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 80084f4:	4a19      	ldr	r2, [pc, #100]	@ (800855c <USB_SetTurnaroundTime+0xd8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d315      	bcc.n	8008526 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80084fa:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <USB_SetTurnaroundTime+0xdc>)
 80084fc:	440a      	add	r2, r1
      UsbTrd = 0x7U;
 80084fe:	4b19      	ldr	r3, [pc, #100]	@ (8008564 <USB_SetTurnaroundTime+0xe0>)
 8008500:	429a      	cmp	r2, r3
 8008502:	bf2c      	ite	cs
 8008504:	2206      	movcs	r2, #6
 8008506:	2207      	movcc	r2, #7
 8008508:	e7bf      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800850a:	220f      	movs	r2, #15
 800850c:	e7bd      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800850e:	220e      	movs	r2, #14
 8008510:	e7bb      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8008512:	220d      	movs	r2, #13
 8008514:	e7b9      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8008516:	220c      	movs	r2, #12
 8008518:	e7b7      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800851a:	220b      	movs	r2, #11
 800851c:	e7b5      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800851e:	220a      	movs	r2, #10
 8008520:	e7b3      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8008522:	2209      	movs	r2, #9
 8008524:	e7b1      	b.n	800848a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8008526:	2208      	movs	r2, #8
 8008528:	e7af      	b.n	800848a <USB_SetTurnaroundTime+0x6>
 800852a:	bf00      	nop
 800852c:	ff275340 	.word	0xff275340
 8008530:	000c34ff 	.word	0x000c34ff
 8008534:	ff1b1e40 	.word	0xff1b1e40
 8008538:	000f423f 	.word	0x000f423f
 800853c:	00124f7f 	.word	0x00124f7f
 8008540:	0013d620 	.word	0x0013d620
 8008544:	fee5b660 	.word	0xfee5b660
 8008548:	0016e35f 	.word	0x0016e35f
 800854c:	feced300 	.word	0xfeced300
 8008550:	001b7740 	.word	0x001b7740
 8008554:	feb35bc0 	.word	0xfeb35bc0
 8008558:	002191c0 	.word	0x002191c0
 800855c:	00387520 	.word	0x00387520
 8008560:	fe5954e0 	.word	0xfe5954e0
 8008564:	00419ce0 	.word	0x00419ce0

08008568 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008568:	6883      	ldr	r3, [r0, #8]
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6083      	str	r3, [r0, #8]
}
 8008570:	2000      	movs	r0, #0
 8008572:	4770      	bx	lr

08008574 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008574:	6883      	ldr	r3, [r0, #8]
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	6083      	str	r3, [r0, #8]
}
 800857c:	2000      	movs	r0, #0
 800857e:	4770      	bx	lr

08008580 <USB_SetCurrentMode>:
{
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008584:	68c3      	ldr	r3, [r0, #12]
 8008586:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800858a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800858c:	2901      	cmp	r1, #1
 800858e:	d015      	beq.n	80085bc <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8008590:	bb29      	cbnz	r1, 80085de <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008592:	68c3      	ldr	r3, [r0, #12]
 8008594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008598:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800859a:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800859c:	260a      	movs	r6, #10
 800859e:	4630      	mov	r0, r6
 80085a0:	f7fb feba 	bl	8004318 <HAL_Delay>
      ms += 10U;
 80085a4:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 80085a6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80085a8:	f013 0f01 	tst.w	r3, #1
 80085ac:	d001      	beq.n	80085b2 <USB_SetCurrentMode+0x32>
 80085ae:	2cc8      	cmp	r4, #200	@ 0xc8
 80085b0:	d1f5      	bne.n	800859e <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80085b2:	2cc8      	cmp	r4, #200	@ 0xc8
 80085b4:	bf14      	ite	ne
 80085b6:	2000      	movne	r0, #0
 80085b8:	2001      	moveq	r0, #1
}
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085bc:	68c3      	ldr	r3, [r0, #12]
 80085be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085c2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80085c4:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80085c6:	260a      	movs	r6, #10
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7fb fea5 	bl	8004318 <HAL_Delay>
      ms += 10U;
 80085ce:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 80085d0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80085d2:	f013 0f01 	tst.w	r3, #1
 80085d6:	d1ec      	bne.n	80085b2 <USB_SetCurrentMode+0x32>
 80085d8:	2cc8      	cmp	r4, #200	@ 0xc8
 80085da:	d1f5      	bne.n	80085c8 <USB_SetCurrentMode+0x48>
 80085dc:	e7e9      	b.n	80085b2 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 80085de:	2001      	movs	r0, #1
 80085e0:	e7eb      	b.n	80085ba <USB_SetCurrentMode+0x3a>

080085e2 <USB_FlushTxFifo>:
{
 80085e2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	9301      	str	r3, [sp, #4]
    count++;
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	3301      	adds	r3, #1
 80085ec:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085f4:	d815      	bhi.n	8008622 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085f6:	6903      	ldr	r3, [r0, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	daf5      	bge.n	80085e8 <USB_FlushTxFifo+0x6>
  count = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008600:	0189      	lsls	r1, r1, #6
 8008602:	f041 0120 	orr.w	r1, r1, #32
 8008606:	6101      	str	r1, [r0, #16]
    count++;
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	3301      	adds	r3, #1
 800860c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008614:	d808      	bhi.n	8008628 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008616:	6903      	ldr	r3, [r0, #16]
 8008618:	f013 0f20 	tst.w	r3, #32
 800861c:	d1f4      	bne.n	8008608 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 800861e:	2000      	movs	r0, #0
 8008620:	e000      	b.n	8008624 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8008622:	2003      	movs	r0, #3
}
 8008624:	b002      	add	sp, #8
 8008626:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008628:	2003      	movs	r0, #3
 800862a:	e7fb      	b.n	8008624 <USB_FlushTxFifo+0x42>

0800862c <USB_FlushRxFifo>:
{
 800862c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	9301      	str	r3, [sp, #4]
    count++;
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	3301      	adds	r3, #1
 8008636:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800863e:	d813      	bhi.n	8008668 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008640:	6903      	ldr	r3, [r0, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	daf5      	bge.n	8008632 <USB_FlushRxFifo+0x6>
  count = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800864a:	2310      	movs	r3, #16
 800864c:	6103      	str	r3, [r0, #16]
    count++;
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	3301      	adds	r3, #1
 8008652:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800865a:	d808      	bhi.n	800866e <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800865c:	6903      	ldr	r3, [r0, #16]
 800865e:	f013 0f10 	tst.w	r3, #16
 8008662:	d1f4      	bne.n	800864e <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8008664:	2000      	movs	r0, #0
 8008666:	e000      	b.n	800866a <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8008668:	2003      	movs	r0, #3
}
 800866a:	b002      	add	sp, #8
 800866c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800866e:	2003      	movs	r0, #3
 8008670:	e7fb      	b.n	800866a <USB_FlushRxFifo+0x3e>

08008672 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8008672:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008676:	4319      	orrs	r1, r3
 8008678:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800867c:	2000      	movs	r0, #0
 800867e:	4770      	bx	lr

08008680 <USB_DevInit>:
{
 8008680:	b084      	sub	sp, #16
 8008682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	a809      	add	r0, sp, #36	@ 0x24
 800868a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800868e:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 8008692:	f89d 602e 	ldrb.w	r6, [sp, #46]	@ 0x2e
  for (i = 0U; i < 15U; i++)
 8008696:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8008698:	4619      	mov	r1, r3
 800869a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800869e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80086a2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80086a4:	3301      	adds	r3, #1
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	d1f7      	bne.n	800869a <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 80086aa:	bb06      	cbnz	r6, 80086ee <USB_DevInit+0x6e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086ac:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80086b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086be:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086c2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80086c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ce:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086d6:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d115      	bne.n	800870a <USB_DevInit+0x8a>
    if (cfg.speed == USBD_HS_SPEED)
 80086de:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80086e2:	b96b      	cbnz	r3, 8008700 <USB_DevInit+0x80>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086e4:	2100      	movs	r1, #0
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7ff ffc3 	bl	8008672 <USB_SetDevSpeed>
 80086ec:	e011      	b.n	8008712 <USB_DevInit+0x92>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086f4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80086f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80086fe:	e7e7      	b.n	80086d0 <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008700:	2101      	movs	r1, #1
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff ffb5 	bl	8008672 <USB_SetDevSpeed>
 8008708:	e003      	b.n	8008712 <USB_DevInit+0x92>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800870a:	2103      	movs	r1, #3
 800870c:	4620      	mov	r0, r4
 800870e:	f7ff ffb0 	bl	8008672 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008712:	2110      	movs	r1, #16
 8008714:	4620      	mov	r0, r4
 8008716:	f7ff ff64 	bl	80085e2 <USB_FlushTxFifo>
 800871a:	4607      	mov	r7, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800871c:	4620      	mov	r0, r4
 800871e:	f7ff ff85 	bl	800862c <USB_FlushRxFifo>
 8008722:	4307      	orrs	r7, r0
 8008724:	f017 0fff 	tst.w	r7, #255	@ 0xff
 8008728:	bf14      	ite	ne
 800872a:	f04f 0e01 	movne.w	lr, #1
 800872e:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8008732:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8008736:	2300      	movs	r3, #0
 8008738:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800873c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008740:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008744:	2d00      	cmp	r5, #0
 8008746:	d03b      	beq.n	80087c0 <USB_DevInit+0x140>
 8008748:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 800874c:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 800874e:	4610      	mov	r0, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008750:	f04f 4a90 	mov.w	sl, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008754:	f04f 6900 	mov.w	r9, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008758:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 800875c:	e009      	b.n	8008772 <USB_DevInit+0xf2>
      if (i == 0U)
 800875e:	b972      	cbnz	r2, 800877e <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008760:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008764:	6108      	str	r0, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008766:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800876a:	3201      	adds	r2, #1
 800876c:	3320      	adds	r3, #32
 800876e:	42aa      	cmp	r2, r5
 8008770:	d008      	beq.n	8008784 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008772:	4619      	mov	r1, r3
 8008774:	681f      	ldr	r7, [r3, #0]
 8008776:	2f00      	cmp	r7, #0
 8008778:	dbf1      	blt.n	800875e <USB_DevInit+0xde>
      USBx_INEP(i)->DIEPCTL = 0U;
 800877a:	6018      	str	r0, [r3, #0]
 800877c:	e7f2      	b.n	8008764 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800877e:	f8c3 a000 	str.w	sl, [r3]
 8008782:	e7ef      	b.n	8008764 <USB_DevInit+0xe4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008784:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 8008788:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800878a:	4610      	mov	r0, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800878c:	f04f 4990 	mov.w	r9, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008790:	f04f 6a00 	mov.w	sl, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008794:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8008798:	e009      	b.n	80087ae <USB_DevInit+0x12e>
      if (i == 0U)
 800879a:	b172      	cbz	r2, 80087ba <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800879c:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087a0:	6108      	str	r0, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087a2:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a6:	3201      	adds	r2, #1
 80087a8:	3320      	adds	r3, #32
 80087aa:	42aa      	cmp	r2, r5
 80087ac:	d008      	beq.n	80087c0 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087ae:	4619      	mov	r1, r3
 80087b0:	681f      	ldr	r7, [r3, #0]
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	dbf1      	blt.n	800879a <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087b6:	6018      	str	r0, [r3, #0]
 80087b8:	e7f2      	b.n	80087a0 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087ba:	f8c3 a000 	str.w	sl, [r3]
 80087be:	e7ef      	b.n	80087a0 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80087c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087c8:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087d0:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80087d4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80087d6:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 80087da:	b91b      	cbnz	r3, 80087e4 <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087dc:	69a3      	ldr	r3, [r4, #24]
 80087de:	f043 0310 	orr.w	r3, r3, #16
 80087e2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087e4:	69a2      	ldr	r2, [r4, #24]
 80087e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <USB_DevInit+0x198>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80087ec:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 80087f0:	b11b      	cbz	r3, 80087fa <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087f2:	69a3      	ldr	r3, [r4, #24]
 80087f4:	f043 0308 	orr.w	r3, r3, #8
 80087f8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80087fa:	2e01      	cmp	r6, #1
 80087fc:	d004      	beq.n	8008808 <USB_DevInit+0x188>
}
 80087fe:	4670      	mov	r0, lr
 8008800:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	b004      	add	sp, #16
 8008806:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008808:	69a3      	ldr	r3, [r4, #24]
 800880a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800880e:	f043 0304 	orr.w	r3, r3, #4
 8008812:	61a3      	str	r3, [r4, #24]
 8008814:	e7f3      	b.n	80087fe <USB_DevInit+0x17e>
 8008816:	bf00      	nop
 8008818:	803c3800 	.word	0x803c3800

0800881c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800881c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008820:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008824:	f013 0f06 	tst.w	r3, #6
 8008828:	d005      	beq.n	8008836 <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 800882a:	f013 0f02 	tst.w	r3, #2
 800882e:	bf0c      	ite	eq
 8008830:	200f      	moveq	r0, #15
 8008832:	2002      	movne	r0, #2
 8008834:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8008836:	2000      	movs	r0, #0
}
 8008838:	4770      	bx	lr

0800883a <USB_ActivateEndpoint>:
{
 800883a:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800883c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800883e:	784b      	ldrb	r3, [r1, #1]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d022      	beq.n	800888a <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008844:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
 8008848:	f002 0e0f 	and.w	lr, r2, #15
 800884c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008850:	fa03 f30e 	lsl.w	r3, r3, lr
 8008854:	4323      	orrs	r3, r4
 8008856:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800885a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800885e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008862:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008866:	d10e      	bne.n	8008886 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008868:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800886c:	688b      	ldr	r3, [r1, #8]
 800886e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008872:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8008874:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008876:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800887a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800887e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008882:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008886:	2000      	movs	r0, #0
 8008888:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800888a:	f8d0 581c 	ldr.w	r5, [r0, #2076]	@ 0x81c
 800888e:	f002 0c0f 	and.w	ip, r2, #15
 8008892:	fa03 f30c 	lsl.w	r3, r3, ip
 8008896:	432b      	orrs	r3, r5
 8008898:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800889c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80088a0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80088a4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80088a8:	d1ed      	bne.n	8008886 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088aa:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
 80088ae:	688b      	ldr	r3, [r1, #8]
 80088b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088b4:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088b6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088b8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80088bc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80088c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80088cc:	e7db      	b.n	8008886 <USB_ActivateEndpoint+0x4c>
	...

080088d0 <USB_DeactivateEndpoint>:
{
 80088d0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80088d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80088d4:	784a      	ldrb	r2, [r1, #1]
 80088d6:	2a01      	cmp	r2, #1
 80088d8:	d026      	beq.n	8008928 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088da:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80088de:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	db50      	blt.n	8008988 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088e6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80088ea:	780a      	ldrb	r2, [r1, #0]
 80088ec:	f002 020f 	and.w	r2, r2, #15
 80088f0:	f04f 0c01 	mov.w	ip, #1
 80088f4:	fa0c f202 	lsl.w	r2, ip, r2
 80088f8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80088fc:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008900:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008904:	7809      	ldrb	r1, [r1, #0]
 8008906:	f001 010f 	and.w	r1, r1, #15
 800890a:	fa0c fc01 	lsl.w	ip, ip, r1
 800890e:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8008912:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008916:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800891a:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <USB_DeactivateEndpoint+0xd4>)
 800891c:	400a      	ands	r2, r1
 800891e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8008922:	2000      	movs	r0, #0
 8008924:	bc30      	pop	{r4, r5}
 8008926:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008928:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800892c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008930:	2a00      	cmp	r2, #0
 8008932:	db1c      	blt.n	800896e <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008934:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8008938:	780a      	ldrb	r2, [r1, #0]
 800893a:	f002 020f 	and.w	r2, r2, #15
 800893e:	2401      	movs	r4, #1
 8008940:	fa04 f202 	lsl.w	r2, r4, r2
 8008944:	ea25 0202 	bic.w	r2, r5, r2
 8008948:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800894c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008950:	7809      	ldrb	r1, [r1, #0]
 8008952:	f001 010f 	and.w	r1, r1, #15
 8008956:	408c      	lsls	r4, r1
 8008958:	ea22 0204 	bic.w	r2, r2, r4
 800895c:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008960:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8008964:	4a10      	ldr	r2, [pc, #64]	@ (80089a8 <USB_DeactivateEndpoint+0xd8>)
 8008966:	400a      	ands	r2, r1
 8008968:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800896c:	e7d9      	b.n	8008922 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800896e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008972:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008976:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800897a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800897e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008982:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8008986:	e7d5      	b.n	8008934 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008988:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800898c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008990:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008994:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008998:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800899c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80089a0:	e7a1      	b.n	80088e6 <USB_DeactivateEndpoint+0x16>
 80089a2:	bf00      	nop
 80089a4:	eff37800 	.word	0xeff37800
 80089a8:	ec337800 	.word	0xec337800

080089ac <USB_EPStopXfer>:
{
 80089ac:	b410      	push	{r4}
 80089ae:	b083      	sub	sp, #12
 80089b0:	4603      	mov	r3, r0
  __IO uint32_t count = 0U;
 80089b2:	2200      	movs	r2, #0
 80089b4:	9201      	str	r2, [sp, #4]
  if (ep->is_in == 1U)
 80089b6:	7848      	ldrb	r0, [r1, #1]
 80089b8:	2801      	cmp	r0, #1
 80089ba:	d00b      	beq.n	80089d4 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089bc:	f503 6030 	add.w	r0, r3, #2816	@ 0xb00
 80089c0:	780b      	ldrb	r3, [r1, #0]
 80089c2:	015b      	lsls	r3, r3, #5
 80089c4:	581a      	ldr	r2, [r3, r0]
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	db26      	blt.n	8008a18 <USB_EPStopXfer+0x6c>
  HAL_StatusTypeDef ret = HAL_OK;
 80089ca:	2000      	movs	r0, #0
}
 80089cc:	b003      	add	sp, #12
 80089ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d2:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d8:	780a      	ldrb	r2, [r1, #0]
 80089da:	0152      	lsls	r2, r2, #5
 80089dc:	58d4      	ldr	r4, [r2, r3]
 80089de:	2c00      	cmp	r4, #0
 80089e0:	db01      	blt.n	80089e6 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 80089e2:	2000      	movs	r0, #0
 80089e4:	e7f2      	b.n	80089cc <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80089e6:	58d4      	ldr	r4, [r2, r3]
 80089e8:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80089ec:	50d4      	str	r4, [r2, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80089ee:	780a      	ldrb	r2, [r1, #0]
 80089f0:	0152      	lsls	r2, r2, #5
 80089f2:	58d4      	ldr	r4, [r2, r3]
 80089f4:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80089f8:	50d4      	str	r4, [r2, r3]
        if (count > 10000U)
 80089fa:	f242 7c10 	movw	ip, #10000	@ 0x2710
        count++;
 80089fe:	9a01      	ldr	r2, [sp, #4]
 8008a00:	3201      	adds	r2, #1
 8008a02:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8008a04:	9a01      	ldr	r2, [sp, #4]
 8008a06:	4562      	cmp	r2, ip
 8008a08:	d8e0      	bhi.n	80089cc <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a0a:	780a      	ldrb	r2, [r1, #0]
 8008a0c:	0152      	lsls	r2, r2, #5
 8008a0e:	58d2      	ldr	r2, [r2, r3]
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	dbf4      	blt.n	80089fe <USB_EPStopXfer+0x52>
  HAL_StatusTypeDef ret = HAL_OK;
 8008a14:	2000      	movs	r0, #0
 8008a16:	e7d9      	b.n	80089cc <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a18:	581a      	ldr	r2, [r3, r0]
 8008a1a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008a1e:	501a      	str	r2, [r3, r0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008a20:	780b      	ldrb	r3, [r1, #0]
 8008a22:	015b      	lsls	r3, r3, #5
 8008a24:	581a      	ldr	r2, [r3, r0]
 8008a26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008a2a:	501a      	str	r2, [r3, r0]
        if (count > 10000U)
 8008a2c:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8008a30:	9b01      	ldr	r3, [sp, #4]
 8008a32:	3301      	adds	r3, #1
 8008a34:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d806      	bhi.n	8008a4a <USB_EPStopXfer+0x9e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008a3c:	780b      	ldrb	r3, [r1, #0]
 8008a3e:	015b      	lsls	r3, r3, #5
 8008a40:	581b      	ldr	r3, [r3, r0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dbf4      	blt.n	8008a30 <USB_EPStopXfer+0x84>
  HAL_StatusTypeDef ret = HAL_OK;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e7c0      	b.n	80089cc <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	e7be      	b.n	80089cc <USB_EPStopXfer+0x20>

08008a4e <USB_WritePacket>:
{
 8008a4e:	b410      	push	{r4}
 8008a50:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8008a54:	b974      	cbnz	r4, 8008a74 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a56:	3303      	adds	r3, #3
 8008a58:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d909      	bls.n	8008a74 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a60:	3201      	adds	r2, #1
 8008a62:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8008a66:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a68:	f851 2b04 	ldr.w	r2, [r1], #4
 8008a6c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8008a6e:	3301      	adds	r3, #1
 8008a70:	459c      	cmp	ip, r3
 8008a72:	d8f9      	bhi.n	8008a68 <USB_WritePacket+0x1a>
}
 8008a74:	2000      	movs	r0, #0
 8008a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_EPStartXfer>:
{
 8008a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7e:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8008a80:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8008a82:	784b      	ldrb	r3, [r1, #1]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d02f      	beq.n	8008ae8 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a88:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8008a8c:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8008a90:	691d      	ldr	r5, [r3, #16]
 8008a92:	0ced      	lsrs	r5, r5, #19
 8008a94:	04ed      	lsls	r5, r5, #19
 8008a96:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a98:	691d      	ldr	r5, [r3, #16]
 8008a9a:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008a9e:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008aa2:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8008aa4:	2c00      	cmp	r4, #0
 8008aa6:	f040 80c4 	bne.w	8008c32 <USB_EPStartXfer+0x1b6>
      if (ep->xfer_len > 0U)
 8008aaa:	690c      	ldr	r4, [r1, #16]
 8008aac:	b10c      	cbz	r4, 8008ab2 <USB_EPStartXfer+0x36>
        ep->xfer_len = ep->maxpacket;
 8008aae:	688c      	ldr	r4, [r1, #8]
 8008ab0:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8008ab2:	688c      	ldr	r4, [r1, #8]
 8008ab4:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ab6:	691d      	ldr	r5, [r3, #16]
 8008ab8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008abc:	432c      	orrs	r4, r5
 8008abe:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ac0:	691c      	ldr	r4, [r3, #16]
 8008ac2:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008ac6:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8008ac8:	2a01      	cmp	r2, #1
 8008aca:	f000 80d5 	beq.w	8008c78 <USB_EPStartXfer+0x1fc>
    if (ep->type == EP_TYPE_ISOC)
 8008ace:	790b      	ldrb	r3, [r1, #4]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	f000 80d7 	beq.w	8008c84 <USB_EPStartXfer+0x208>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ad6:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008ada:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ade:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	b003      	add	sp, #12
 8008ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8008ae8:	690b      	ldr	r3, [r1, #16]
 8008aea:	bb83      	cbnz	r3, 8008b4e <USB_EPStartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008aec:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008af0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008af4:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008af8:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008afc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b00:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008b04:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008b08:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b0c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008b10:	0ced      	lsrs	r5, r5, #19
 8008b12:	04ed      	lsls	r5, r5, #19
 8008b14:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8008b18:	2a01      	cmp	r2, #1
 8008b1a:	d054      	beq.n	8008bc6 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b1c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008b20:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008b24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b28:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8008b2c:	790b      	ldrb	r3, [r1, #4]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d06b      	beq.n	8008c0a <USB_EPStartXfer+0x18e>
        if (ep->xfer_len > 0U)
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0d4      	beq.n	8008ae2 <USB_EPStartXfer+0x66>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b38:	f8d0 4834 	ldr.w	r4, [r0, #2100]	@ 0x834
 8008b3c:	780a      	ldrb	r2, [r1, #0]
 8008b3e:	f002 020f 	and.w	r2, r2, #15
 8008b42:	2301      	movs	r3, #1
 8008b44:	4093      	lsls	r3, r2
 8008b46:	4323      	orrs	r3, r4
 8008b48:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8008b4c:	e7c9      	b.n	8008ae2 <USB_EPStartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b4e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b56:	691d      	ldr	r5, [r3, #16]
 8008b58:	0ced      	lsrs	r5, r5, #19
 8008b5a:	04ed      	lsls	r5, r5, #19
 8008b5c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b5e:	691d      	ldr	r5, [r3, #16]
 8008b60:	f025 55ff 	bic.w	r5, r5, #534773760	@ 0x1fe00000
 8008b64:	f425 15c0 	bic.w	r5, r5, #1572864	@ 0x180000
 8008b68:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8008b6a:	b97c      	cbnz	r4, 8008b8c <USB_EPStartXfer+0x110>
        if (ep->xfer_len > ep->maxpacket)
 8008b6c:	688d      	ldr	r5, [r1, #8]
 8008b6e:	690e      	ldr	r6, [r1, #16]
 8008b70:	42ae      	cmp	r6, r5
          ep->xfer_len = ep->maxpacket;
 8008b72:	bf88      	it	hi
 8008b74:	610d      	strhi	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b76:	691d      	ldr	r5, [r3, #16]
 8008b78:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008b7c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b7e:	691e      	ldr	r6, [r3, #16]
 8008b80:	690d      	ldr	r5, [r1, #16]
 8008b82:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8008b86:	4335      	orrs	r5, r6
 8008b88:	611d      	str	r5, [r3, #16]
 8008b8a:	e7c5      	b.n	8008b18 <USB_EPStartXfer+0x9c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b8c:	688e      	ldr	r6, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008b8e:	691f      	ldr	r7, [r3, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b90:	690d      	ldr	r5, [r1, #16]
 8008b92:	4435      	add	r5, r6
 8008b94:	3d01      	subs	r5, #1
 8008b96:	fbb5 f5f6 	udiv	r5, r5, r6
 8008b9a:	fa1f fc85 	uxth.w	ip, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008b9e:	4e40      	ldr	r6, [pc, #256]	@ (8008ca0 <USB_EPStartXfer+0x224>)
 8008ba0:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8008ba4:	433d      	orrs	r5, r7
 8008ba6:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8008ba8:	790d      	ldrb	r5, [r1, #4]
 8008baa:	2d01      	cmp	r5, #1
 8008bac:	d1e7      	bne.n	8008b7e <USB_EPStartXfer+0x102>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bae:	691d      	ldr	r5, [r3, #16]
 8008bb0:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8008bb4:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008bb6:	691e      	ldr	r6, [r3, #16]
 8008bb8:	ea4f 754c 	mov.w	r5, ip, lsl #29
 8008bbc:	f005 45c0 	and.w	r5, r5, #1610612736	@ 0x60000000
 8008bc0:	4335      	orrs	r5, r6
 8008bc2:	611d      	str	r5, [r3, #16]
 8008bc4:	e7db      	b.n	8008b7e <USB_EPStartXfer+0x102>
      if ((uint32_t)ep->dma_addr != 0U)
 8008bc6:	69cb      	ldr	r3, [r1, #28]
 8008bc8:	b11b      	cbz	r3, 8008bd2 <USB_EPStartXfer+0x156>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bca:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008bce:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8008bd2:	790b      	ldrb	r3, [r1, #4]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d008      	beq.n	8008bea <USB_EPStartXfer+0x16e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bd8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008bdc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008be0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008be4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8008be8:	e77b      	b.n	8008ae2 <USB_EPStartXfer+0x66>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008bee:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bf2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008bf6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8008bfa:	bf0c      	ite	eq
 8008bfc:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c00:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008c04:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8008c08:	e7e6      	b.n	8008bd8 <USB_EPStartXfer+0x15c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c0a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008c0e:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c12:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008c16:	bf0c      	ite	eq
 8008c18:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c1c:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008c20:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c24:	9200      	str	r2, [sp, #0]
 8008c26:	8a0b      	ldrh	r3, [r1, #16]
 8008c28:	780a      	ldrb	r2, [r1, #0]
 8008c2a:	68c9      	ldr	r1, [r1, #12]
 8008c2c:	f7ff ff0f 	bl	8008a4e <USB_WritePacket>
 8008c30:	e757      	b.n	8008ae2 <USB_EPStartXfer+0x66>
      if (ep->xfer_len == 0U)
 8008c32:	690c      	ldr	r4, [r1, #16]
 8008c34:	b954      	cbnz	r4, 8008c4c <USB_EPStartXfer+0x1d0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c36:	691d      	ldr	r5, [r3, #16]
 8008c38:	688c      	ldr	r4, [r1, #8]
 8008c3a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008c3e:	432c      	orrs	r4, r5
 8008c40:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c42:	691c      	ldr	r4, [r3, #16]
 8008c44:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008c48:	611c      	str	r4, [r3, #16]
 8008c4a:	e73d      	b.n	8008ac8 <USB_EPStartXfer+0x4c>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c4c:	688d      	ldr	r5, [r1, #8]
 8008c4e:	442c      	add	r4, r5
 8008c50:	3c01      	subs	r4, #1
 8008c52:	fbb4 f4f5 	udiv	r4, r4, r5
 8008c56:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008c58:	fb04 f505 	mul.w	r5, r4, r5
 8008c5c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c5e:	691e      	ldr	r6, [r3, #16]
 8008c60:	4d0f      	ldr	r5, [pc, #60]	@ (8008ca0 <USB_EPStartXfer+0x224>)
 8008c62:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 8008c66:	4334      	orrs	r4, r6
 8008c68:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c6a:	691d      	ldr	r5, [r3, #16]
 8008c6c:	6a0c      	ldr	r4, [r1, #32]
 8008c6e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008c72:	432c      	orrs	r4, r5
 8008c74:	611c      	str	r4, [r3, #16]
 8008c76:	e727      	b.n	8008ac8 <USB_EPStartXfer+0x4c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c78:	68ca      	ldr	r2, [r1, #12]
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	f43f af27 	beq.w	8008ace <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008c80:	615a      	str	r2, [r3, #20]
 8008c82:	e724      	b.n	8008ace <USB_EPStartXfer+0x52>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c84:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008c88:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c8c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008c90:	bf0c      	ite	eq
 8008c92:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c96:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8008c9a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8008c9e:	e71a      	b.n	8008ad6 <USB_EPStartXfer+0x5a>
 8008ca0:	1ff80000 	.word	0x1ff80000

08008ca4 <USB_ReadPacket>:
{
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 8008ca8:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 8008cac:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8008cb0:	d01a      	beq.n	8008ce8 <USB_ReadPacket+0x44>
  uint8_t *pDest = dest;
 8008cb2:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8008cb4:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cb6:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	459e      	cmp	lr, r3
 8008cc4:	d1f9      	bne.n	8008cba <USB_ReadPacket+0x16>
    pDest++;
 8008cc6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 8008cca:	b165      	cbz	r5, 8008ce6 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ccc:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8008cd0:	6834      	ldr	r4, [r6, #0]
 8008cd2:	1941      	adds	r1, r0, r5
 8008cd4:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cd6:	fa24 f203 	lsr.w	r2, r4, r3
 8008cda:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8008cde:	3308      	adds	r3, #8
 8008ce0:	4288      	cmp	r0, r1
 8008ce2:	d1f8      	bne.n	8008cd6 <USB_ReadPacket+0x32>
      pDest++;
 8008ce4:	4608      	mov	r0, r1
}
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8008ce8:	4608      	mov	r0, r1
 8008cea:	e7ee      	b.n	8008cca <USB_ReadPacket+0x26>

08008cec <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008cec:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008cee:	784a      	ldrb	r2, [r1, #1]
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	d014      	beq.n	8008d1e <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cf4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008cf8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	db06      	blt.n	8008d0e <USB_EPSetStall+0x22>
 8008d00:	b12b      	cbz	r3, 8008d0e <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d02:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008d06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d0a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d0e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008d12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d16:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d1e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008d22:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	db06      	blt.n	8008d38 <USB_EPSetStall+0x4c>
 8008d2a:	b12b      	cbz	r3, 8008d38 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d2c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008d30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d34:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d38:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d40:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008d44:	e7e9      	b.n	8008d1a <USB_EPSetStall+0x2e>

08008d46 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008d46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008d48:	784a      	ldrb	r2, [r1, #1]
 8008d4a:	2a01      	cmp	r2, #1
 8008d4c:	d00e      	beq.n	8008d6c <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d4e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008d52:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008d56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d5a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d5e:	790b      	ldrb	r3, [r1, #4]
 8008d60:	3b02      	subs	r3, #2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d915      	bls.n	8008d94 <USB_EPClearStall+0x4e>
}
 8008d68:	2000      	movs	r0, #0
 8008d6a:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d6c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008d70:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008d74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d78:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d7c:	790b      	ldrb	r3, [r1, #4]
 8008d7e:	3b02      	subs	r3, #2
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d8f0      	bhi.n	8008d68 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d86:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008d92:	e7e9      	b.n	8008d68 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d94:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d9c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008da0:	e7e2      	b.n	8008d68 <USB_EPClearStall+0x22>

08008da2 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008da2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008da6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008daa:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008dae:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008db2:	0109      	lsls	r1, r1, #4
 8008db4:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8008db8:	4319      	orrs	r1, r3
 8008dba:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	4770      	bx	lr

08008dc2 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dc2:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008dce:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008dd2:	f023 0302 	bic.w	r3, r3, #2
 8008dd6:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008dda:	2000      	movs	r0, #0
 8008ddc:	4770      	bx	lr

08008dde <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dde:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dea:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008dee:	f043 0302 	orr.w	r3, r3, #2
 8008df2:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr

08008dfa <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008dfa:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008dfc:	6980      	ldr	r0, [r0, #24]
}
 8008dfe:	4010      	ands	r0, r2
 8008e00:	4770      	bx	lr

08008e02 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008e02:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8008e06:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e0a:	69c0      	ldr	r0, [r0, #28]
 8008e0c:	4018      	ands	r0, r3
}
 8008e0e:	0c00      	lsrs	r0, r0, #16
 8008e10:	4770      	bx	lr

08008e12 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8008e12:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8008e16:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e1a:	69c0      	ldr	r0, [r0, #28]
 8008e1c:	4018      	ands	r0, r3
}
 8008e1e:	b280      	uxth	r0, r0
 8008e20:	4770      	bx	lr

08008e22 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e22:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8008e26:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e2a:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8008e2e:	6940      	ldr	r0, [r0, #20]
}
 8008e30:	4010      	ands	r0, r2
 8008e32:	4770      	bx	lr

08008e34 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8008e34:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e38:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e3c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8008e40:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8008e44:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e46:	f001 010f 	and.w	r1, r1, #15
 8008e4a:	40cb      	lsrs	r3, r1
 8008e4c:	01db      	lsls	r3, r3, #7
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	4313      	orrs	r3, r2
}
 8008e52:	4018      	ands	r0, r3
 8008e54:	4770      	bx	lr

08008e56 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8008e56:	6940      	ldr	r0, [r0, #20]
}
 8008e58:	f000 0001 	and.w	r0, r0, #1
 8008e5c:	4770      	bx	lr

08008e5e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e5e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008e62:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e6e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e76:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	4770      	bx	lr
	...

08008e80 <USB_EP0_OutStart>:
{
 8008e80:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e82:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e84:	4b15      	ldr	r3, [pc, #84]	@ (8008edc <USB_EP0_OutStart+0x5c>)
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d903      	bls.n	8008e92 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db16      	blt.n	8008ec0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e92:	2400      	movs	r4, #0
 8008e94:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e98:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008e9c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008ea0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ea4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008ea8:	f044 0418 	orr.w	r4, r4, #24
 8008eac:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008eb0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008eb4:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8008eb8:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8008ebc:	2901      	cmp	r1, #1
 8008ebe:	d003      	beq.n	8008ec8 <USB_EP0_OutStart+0x48>
}
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ec8:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ecc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008ed0:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ed4:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008ed8:	e7f2      	b.n	8008ec0 <USB_EP0_OutStart+0x40>
 8008eda:	bf00      	nop
 8008edc:	4f54300a 	.word	0x4f54300a

08008ee0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ee0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008ee2:	490c      	ldr	r1, [pc, #48]	@ (8008f14 <MX_FATFS_Init+0x34>)
 8008ee4:	480c      	ldr	r0, [pc, #48]	@ (8008f18 <MX_FATFS_Init+0x38>)
 8008ee6:	f003 fdb5 	bl	800ca54 <FATFS_LinkDriver>
 8008eea:	4b0c      	ldr	r3, [pc, #48]	@ (8008f1c <MX_FATFS_Init+0x3c>)
 8008eec:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  if(retSD != FR_OK)
 8008eee:	b940      	cbnz	r0, 8008f02 <MX_FATFS_Init+0x22>
  {
  	printf("FATFS_LinkDriver() failed.\n");
  	Error_Handler();
  }

  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4908      	ldr	r1, [pc, #32]	@ (8008f14 <MX_FATFS_Init+0x34>)
 8008ef4:	480a      	ldr	r0, [pc, #40]	@ (8008f20 <MX_FATFS_Init+0x40>)
 8008ef6:	f003 fabb 	bl	800c470 <f_mount>
 8008efa:	4b08      	ldr	r3, [pc, #32]	@ (8008f1c <MX_FATFS_Init+0x3c>)
 8008efc:	7018      	strb	r0, [r3, #0]
  if(retSD != FR_OK)
 8008efe:	b930      	cbnz	r0, 8008f0e <MX_FATFS_Init+0x2e>
  {
  	Error_Handler();
  }
  /* USER CODE END Init */
}
 8008f00:	bd08      	pop	{r3, pc}
  	printf("FATFS_LinkDriver() failed.\n");
 8008f02:	4808      	ldr	r0, [pc, #32]	@ (8008f24 <MX_FATFS_Init+0x44>)
 8008f04:	f004 f9c8 	bl	800d298 <puts>
  	Error_Handler();
 8008f08:	f7fa fcae 	bl	8003868 <Error_Handler>
 8008f0c:	e7f0      	b.n	8008ef0 <MX_FATFS_Init+0x10>
  	Error_Handler();
 8008f0e:	f7fa fcab 	bl	8003868 <Error_Handler>
}
 8008f12:	e7f5      	b.n	8008f00 <MX_FATFS_Init+0x20>
 8008f14:	2000144c 	.word	0x2000144c
 8008f18:	0800efe0 	.word	0x0800efe0
 8008f1c:	20001450 	.word	0x20001450
 8008f20:	20001218 	.word	0x20001218
 8008f24:	0800efc4 	.word	0x0800efc4

08008f28 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4770      	bx	lr

08008f2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008f2c:	b508      	push	{r3, lr}
 8008f2e:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008f30:	460a      	mov	r2, r1
 8008f32:	4601      	mov	r1, r0
 8008f34:	4803      	ldr	r0, [pc, #12]	@ (8008f44 <BSP_SD_ReadBlocks_DMA+0x18>)
 8008f36:	f7fd f97d 	bl	8006234 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8008f3a:	3800      	subs	r0, #0
 8008f3c:	bf18      	it	ne
 8008f3e:	2001      	movne	r0, #1
 8008f40:	bd08      	pop	{r3, pc}
 8008f42:	bf00      	nop
 8008f44:	2000116c 	.word	0x2000116c

08008f48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008f48:	b508      	push	{r3, lr}
 8008f4a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008f4c:	460a      	mov	r2, r1
 8008f4e:	4601      	mov	r1, r0
 8008f50:	4803      	ldr	r0, [pc, #12]	@ (8008f60 <BSP_SD_WriteBlocks_DMA+0x18>)
 8008f52:	f7fd fa0b 	bl	800636c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8008f56:	3800      	subs	r0, #0
 8008f58:	bf18      	it	ne
 8008f5a:	2001      	movne	r0, #1
 8008f5c:	bd08      	pop	{r3, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000116c 	.word	0x2000116c

08008f64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008f64:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008f66:	4803      	ldr	r0, [pc, #12]	@ (8008f74 <BSP_SD_GetCardState+0x10>)
 8008f68:	f7fd fd96 	bl	8006a98 <HAL_SD_GetCardState>
}
 8008f6c:	3804      	subs	r0, #4
 8008f6e:	bf18      	it	ne
 8008f70:	2001      	movne	r0, #1
 8008f72:	bd08      	pop	{r3, pc}
 8008f74:	2000116c 	.word	0x2000116c

08008f78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008f78:	b508      	push	{r3, lr}
 8008f7a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008f7c:	4801      	ldr	r0, [pc, #4]	@ (8008f84 <BSP_SD_GetCardInfo+0xc>)
 8008f7e:	f7fd fcd4 	bl	800692a <HAL_SD_GetCardInfo>
}
 8008f82:	bd08      	pop	{r3, pc}
 8008f84:	2000116c 	.word	0x2000116c

08008f88 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8008f88:	4770      	bx	lr

08008f8a <HAL_SD_AbortCallback>:
{
 8008f8a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8008f8c:	f7ff fffc 	bl	8008f88 <BSP_SD_AbortCallback>
}
 8008f90:	bd08      	pop	{r3, pc}

08008f92 <HAL_SD_TxCpltCallback>:
{
 8008f92:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8008f94:	f000 f912 	bl	80091bc <BSP_SD_WriteCpltCallback>
}
 8008f98:	bd08      	pop	{r3, pc}

08008f9a <HAL_SD_RxCpltCallback>:
{
 8008f9a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8008f9c:	f000 f918 	bl	80091d0 <BSP_SD_ReadCpltCallback>
}
 8008fa0:	bd08      	pop	{r3, pc}

08008fa2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008fa2:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008faa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8008fae:	b002      	add	sp, #8
 8008fb0:	4770      	bx	lr
	...

08008fb4 <BSP_SD_Init>:
{
 8008fb4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008fb6:	f7ff fff4 	bl	8008fa2 <BSP_SD_IsDetected>
 8008fba:	2801      	cmp	r0, #1
 8008fbc:	d001      	beq.n	8008fc2 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8008fbe:	2001      	movs	r0, #1
}
 8008fc0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8008fc2:	4807      	ldr	r0, [pc, #28]	@ (8008fe0 <BSP_SD_Init+0x2c>)
 8008fc4:	f7fd fc96 	bl	80068f4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d1f9      	bne.n	8008fc0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008fcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008fd0:	4803      	ldr	r0, [pc, #12]	@ (8008fe0 <BSP_SD_Init+0x2c>)
 8008fd2:	f7fd fcbd 	bl	8006950 <HAL_SD_ConfigWideBusOperation>
 8008fd6:	3800      	subs	r0, #0
 8008fd8:	bf18      	it	ne
 8008fda:	2001      	movne	r0, #1
 8008fdc:	e7f0      	b.n	8008fc0 <BSP_SD_Init+0xc>
 8008fde:	bf00      	nop
 8008fe0:	2000116c 	.word	0x2000116c

08008fe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008fe4:	b508      	push	{r3, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008fe6:	f7ff ffe5 	bl	8008fb4 <BSP_SD_Init>
 8008fea:	b110      	cbz	r0, 8008ff2 <SD_initialize+0xe>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008fec:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <SD_initialize+0x30>)
 8008fee:	7818      	ldrb	r0, [r3, #0]
}
 8008ff0:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 8008ff2:	4b08      	ldr	r3, [pc, #32]	@ (8009014 <SD_initialize+0x30>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008ff8:	f7ff ffb4 	bl	8008f64 <BSP_SD_GetCardState>
 8008ffc:	b920      	cbnz	r0, 8009008 <SD_initialize+0x24>
    Stat &= ~STA_NOINIT;
 8008ffe:	4a05      	ldr	r2, [pc, #20]	@ (8009014 <SD_initialize+0x30>)
 8009000:	7813      	ldrb	r3, [r2, #0]
 8009002:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009006:	7013      	strb	r3, [r2, #0]
  return Stat;
 8009008:	4a02      	ldr	r2, [pc, #8]	@ (8009014 <SD_initialize+0x30>)
 800900a:	7813      	ldrb	r3, [r2, #0]
 800900c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800900e:	7013      	strb	r3, [r2, #0]
 8009010:	e7ec      	b.n	8008fec <SD_initialize+0x8>
 8009012:	bf00      	nop
 8009014:	20000014 	.word	0x20000014

08009018 <SD_CheckStatusWithTimeout>:
{
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 800901c:	f7fb f976 	bl	800430c <HAL_GetTick>
 8009020:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 8009022:	f7fb f973 	bl	800430c <HAL_GetTick>
 8009026:	1b00      	subs	r0, r0, r4
 8009028:	42a8      	cmp	r0, r5
 800902a:	d205      	bcs.n	8009038 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800902c:	f7ff ff9a 	bl	8008f64 <BSP_SD_GetCardState>
 8009030:	2800      	cmp	r0, #0
 8009032:	d1f6      	bne.n	8009022 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8009034:	2000      	movs	r0, #0
 8009036:	e001      	b.n	800903c <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
}
 800903c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009040 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	460c      	mov	r4, r1
 8009044:	4615      	mov	r5, r2
 8009046:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009048:	f247 5030 	movw	r0, #30000	@ 0x7530
 800904c:	f7ff ffe4 	bl	8009018 <SD_CheckStatusWithTimeout>
 8009050:	2800      	cmp	r0, #0
 8009052:	db30      	blt.n	80090b6 <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009054:	4632      	mov	r2, r6
 8009056:	4629      	mov	r1, r5
 8009058:	4620      	mov	r0, r4
 800905a:	f7ff ff67 	bl	8008f2c <BSP_SD_ReadBlocks_DMA>
 800905e:	b108      	cbz	r0, 8009064 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 8009060:	2001      	movs	r0, #1
 8009062:	e029      	b.n	80090b8 <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009064:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <SD_read+0x7c>)
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800906a:	f7fb f94f 	bl	800430c <HAL_GetTick>
 800906e:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009070:	4d12      	ldr	r5, [pc, #72]	@ (80090bc <SD_read+0x7c>)
 8009072:	f247 562f 	movw	r6, #29999	@ 0x752f
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b923      	cbnz	r3, 8009084 <SD_read+0x44>
 800907a:	f7fb f947 	bl	800430c <HAL_GetTick>
 800907e:	1b00      	subs	r0, r0, r4
 8009080:	42b0      	cmp	r0, r6
 8009082:	d9f8      	bls.n	8009076 <SD_read+0x36>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009084:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <SD_read+0x7c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	b90b      	cbnz	r3, 800908e <SD_read+0x4e>
      {
        res = RES_ERROR;
 800908a:	2001      	movs	r0, #1
 800908c:	e014      	b.n	80090b8 <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <SD_read+0x7c>)
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009094:	f7fb f93a 	bl	800430c <HAL_GetTick>
 8009098:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800909a:	f247 552f 	movw	r5, #29999	@ 0x752f
 800909e:	f7fb f935 	bl	800430c <HAL_GetTick>
 80090a2:	1b00      	subs	r0, r0, r4
 80090a4:	42a8      	cmp	r0, r5
 80090a6:	d804      	bhi.n	80090b2 <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090a8:	f7ff ff5c 	bl	8008f64 <BSP_SD_GetCardState>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1f6      	bne.n	800909e <SD_read+0x5e>
 80090b0:	e002      	b.n	80090b8 <SD_read+0x78>
  DRESULT res = RES_ERROR;
 80090b2:	2001      	movs	r0, #1
 80090b4:	e000      	b.n	80090b8 <SD_read+0x78>
    return res;
 80090b6:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	bf00      	nop
 80090bc:	20001454 	.word	0x20001454

080090c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	4615      	mov	r5, r2
 80090c6:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80090c8:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <SD_write+0x7c>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80090ce:	f247 5030 	movw	r0, #30000	@ 0x7530
 80090d2:	f7ff ffa1 	bl	8009018 <SD_CheckStatusWithTimeout>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	db2d      	blt.n	8009136 <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80090da:	4632      	mov	r2, r6
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff ff32 	bl	8008f48 <BSP_SD_WriteBlocks_DMA>
 80090e4:	b108      	cbz	r0, 80090ea <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 80090e6:	2001      	movs	r0, #1
 80090e8:	e026      	b.n	8009138 <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80090ea:	f7fb f90f 	bl	800430c <HAL_GetTick>
 80090ee:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80090f0:	4d12      	ldr	r5, [pc, #72]	@ (800913c <SD_write+0x7c>)
 80090f2:	f247 562f 	movw	r6, #29999	@ 0x752f
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b923      	cbnz	r3, 8009104 <SD_write+0x44>
 80090fa:	f7fb f907 	bl	800430c <HAL_GetTick>
 80090fe:	1b00      	subs	r0, r0, r4
 8009100:	42b0      	cmp	r0, r6
 8009102:	d9f8      	bls.n	80090f6 <SD_write+0x36>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009104:	4b0d      	ldr	r3, [pc, #52]	@ (800913c <SD_write+0x7c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	b90b      	cbnz	r3, 800910e <SD_write+0x4e>
      {
        res = RES_ERROR;
 800910a:	2001      	movs	r0, #1
 800910c:	e014      	b.n	8009138 <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 800910e:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <SD_write+0x7c>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009114:	f7fb f8fa 	bl	800430c <HAL_GetTick>
 8009118:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800911a:	f247 552f 	movw	r5, #29999	@ 0x752f
 800911e:	f7fb f8f5 	bl	800430c <HAL_GetTick>
 8009122:	1b00      	subs	r0, r0, r4
 8009124:	42a8      	cmp	r0, r5
 8009126:	d804      	bhi.n	8009132 <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009128:	f7ff ff1c 	bl	8008f64 <BSP_SD_GetCardState>
 800912c:	2800      	cmp	r0, #0
 800912e:	d1f6      	bne.n	800911e <SD_write+0x5e>
 8009130:	e002      	b.n	8009138 <SD_write+0x78>
  DRESULT res = RES_ERROR;
 8009132:	2001      	movs	r0, #1
 8009134:	e000      	b.n	8009138 <SD_write+0x78>
    return res;
 8009136:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 8009138:	bd70      	pop	{r4, r5, r6, pc}
 800913a:	bf00      	nop
 800913c:	20001458 	.word	0x20001458

08009140 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009140:	b530      	push	{r4, r5, lr}
 8009142:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009144:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <SD_ioctl+0x54>)
 8009146:	7818      	ldrb	r0, [r3, #0]
 8009148:	f010 0401 	ands.w	r4, r0, #1
 800914c:	d11b      	bne.n	8009186 <SD_ioctl+0x46>
 800914e:	4615      	mov	r5, r2

  switch (cmd)
 8009150:	2903      	cmp	r1, #3
 8009152:	d81c      	bhi.n	800918e <SD_ioctl+0x4e>
 8009154:	e8df f001 	tbb	[pc, r1]
 8009158:	100a0402 	.word	0x100a0402
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800915c:	460c      	mov	r4, r1
 800915e:	e013      	b.n	8009188 <SD_ioctl+0x48>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009160:	4668      	mov	r0, sp
 8009162:	f7ff ff09 	bl	8008f78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800916a:	e00d      	b.n	8009188 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800916c:	4668      	mov	r0, sp
 800916e:	f7ff ff03 	bl	8008f78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009172:	9b07      	ldr	r3, [sp, #28]
 8009174:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8009176:	e007      	b.n	8009188 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009178:	4668      	mov	r0, sp
 800917a:	f7ff fefd 	bl	8008f78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800917e:	9b07      	ldr	r3, [sp, #28]
 8009180:	0a5b      	lsrs	r3, r3, #9
 8009182:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8009184:	e000      	b.n	8009188 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009186:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8009188:	4620      	mov	r0, r4
 800918a:	b009      	add	sp, #36	@ 0x24
 800918c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800918e:	2404      	movs	r4, #4
 8009190:	e7fa      	b.n	8009188 <SD_ioctl+0x48>
 8009192:	bf00      	nop
 8009194:	20000014 	.word	0x20000014

08009198 <SD_status>:
{
 8009198:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800919a:	4b07      	ldr	r3, [pc, #28]	@ (80091b8 <SD_status+0x20>)
 800919c:	2201      	movs	r2, #1
 800919e:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80091a0:	f7ff fee0 	bl	8008f64 <BSP_SD_GetCardState>
 80091a4:	b920      	cbnz	r0, 80091b0 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 80091a6:	4a04      	ldr	r2, [pc, #16]	@ (80091b8 <SD_status+0x20>)
 80091a8:	7813      	ldrb	r3, [r2, #0]
 80091aa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80091ae:	7013      	strb	r3, [r2, #0]
  return Stat;
 80091b0:	4b01      	ldr	r3, [pc, #4]	@ (80091b8 <SD_status+0x20>)
 80091b2:	7818      	ldrb	r0, [r3, #0]
}
 80091b4:	bd08      	pop	{r3, pc}
 80091b6:	bf00      	nop
 80091b8:	20000014 	.word	0x20000014

080091bc <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 80091bc:	2301      	movs	r3, #1
 80091be:	4a02      	ldr	r2, [pc, #8]	@ (80091c8 <BSP_SD_WriteCpltCallback+0xc>)
 80091c0:	6013      	str	r3, [r2, #0]
  usbd_WriteStatus = 1;
 80091c2:	4a02      	ldr	r2, [pc, #8]	@ (80091cc <BSP_SD_WriteCpltCallback+0x10>)
 80091c4:	6013      	str	r3, [r2, #0]
}
 80091c6:	4770      	bx	lr
 80091c8:	20001458 	.word	0x20001458
 80091cc:	20001978 	.word	0x20001978

080091d0 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 80091d0:	2301      	movs	r3, #1
 80091d2:	4a02      	ldr	r2, [pc, #8]	@ (80091dc <BSP_SD_ReadCpltCallback+0xc>)
 80091d4:	6013      	str	r3, [r2, #0]
  usbd_ReadStatus = 1;
 80091d6:	4a02      	ldr	r2, [pc, #8]	@ (80091e0 <BSP_SD_ReadCpltCallback+0x10>)
 80091d8:	6013      	str	r3, [r2, #0]
}
 80091da:	4770      	bx	lr
 80091dc:	20001454 	.word	0x20001454
 80091e0:	20001974 	.word	0x20001974

080091e4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80091e4:	230a      	movs	r3, #10
 80091e6:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 80091e8:	4800      	ldr	r0, [pc, #0]	@ (80091ec <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 80091ea:	4770      	bx	lr
 80091ec:	20000018 	.word	0x20000018

080091f0 <USBD_MSC_Init>:
{
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80091f4:	f44f 701d 	mov.w	r0, #628	@ 0x274
 80091f8:	f003 fec4 	bl	800cf84 <USBD_static_malloc>
  if (hmsc == NULL)
 80091fc:	b378      	cbz	r0, 800925e <USBD_MSC_Init+0x6e>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80091fe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009202:	33b0      	adds	r3, #176	@ 0xb0
 8009204:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009208:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800920c:	7c23      	ldrb	r3, [r4, #16]
 800920e:	bb73      	cbnz	r3, 800926e <USBD_MSC_Init+0x7e>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009210:	4d27      	ldr	r5, [pc, #156]	@ (80092b0 <USBD_MSC_Init+0xc0>)
 8009212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009216:	2202      	movs	r2, #2
 8009218:	7829      	ldrb	r1, [r5, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	f003 fec6 	bl	800cfac <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009220:	782b      	ldrb	r3, [r5, #0]
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800922a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800922e:	2501      	movs	r5, #1
 8009230:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009234:	4e1f      	ldr	r6, [pc, #124]	@ (80092b4 <USBD_MSC_Init+0xc4>)
 8009236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800923a:	2202      	movs	r2, #2
 800923c:	7831      	ldrb	r1, [r6, #0]
 800923e:	4620      	mov	r0, r4
 8009240:	f003 feb4 	bl	800cfac <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009244:	7833      	ldrb	r3, [r6, #0]
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800924e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009252:	849d      	strh	r5, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f9a1 	bl	800959c <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 800925a:	2000      	movs	r0, #0
}
 800925c:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800925e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009262:	33b0      	adds	r3, #176	@ 0xb0
 8009264:	2200      	movs	r2, #0
 8009266:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800926a:	2002      	movs	r0, #2
 800926c:	e7f6      	b.n	800925c <USBD_MSC_Init+0x6c>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800926e:	4d10      	ldr	r5, [pc, #64]	@ (80092b0 <USBD_MSC_Init+0xc0>)
 8009270:	2340      	movs	r3, #64	@ 0x40
 8009272:	2202      	movs	r2, #2
 8009274:	7829      	ldrb	r1, [r5, #0]
 8009276:	4620      	mov	r0, r4
 8009278:	f003 fe98 	bl	800cfac <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800927c:	782b      	ldrb	r3, [r5, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009286:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800928a:	2501      	movs	r5, #1
 800928c:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009290:	4e08      	ldr	r6, [pc, #32]	@ (80092b4 <USBD_MSC_Init+0xc4>)
 8009292:	2340      	movs	r3, #64	@ 0x40
 8009294:	2202      	movs	r2, #2
 8009296:	7831      	ldrb	r1, [r6, #0]
 8009298:	4620      	mov	r0, r4
 800929a:	f003 fe87 	bl	800cfac <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800929e:	7833      	ldrb	r3, [r6, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092ac:	849d      	strh	r5, [r3, #36]	@ 0x24
 80092ae:	e7d1      	b.n	8009254 <USBD_MSC_Init+0x64>
 80092b0:	20000015 	.word	0x20000015
 80092b4:	20000016 	.word	0x20000016

080092b8 <USBD_MSC_DeInit>:
{
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80092bc:	4d19      	ldr	r5, [pc, #100]	@ (8009324 <USBD_MSC_DeInit+0x6c>)
 80092be:	7829      	ldrb	r1, [r5, #0]
 80092c0:	f003 fe7f 	bl	800cfc2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80092c4:	782b      	ldrb	r3, [r5, #0]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092d2:	2500      	movs	r5, #0
 80092d4:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80092d8:	4e13      	ldr	r6, [pc, #76]	@ (8009328 <USBD_MSC_DeInit+0x70>)
 80092da:	7831      	ldrb	r1, [r6, #0]
 80092dc:	4620      	mov	r0, r4
 80092de:	f003 fe70 	bl	800cfc2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80092e2:	7833      	ldrb	r3, [r6, #0]
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092f0:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80092f2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80092f6:	33b0      	adds	r3, #176	@ 0xb0
 80092f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80092fc:	b183      	cbz	r3, 8009320 <USBD_MSC_DeInit+0x68>
    MSC_BOT_DeInit(pdev);
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f99e 	bl	8009640 <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009304:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009308:	33b0      	adds	r3, #176	@ 0xb0
 800930a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800930e:	f003 fe3d 	bl	800cf8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009312:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009316:	33b0      	adds	r3, #176	@ 0xb0
 8009318:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800931c:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8009320:	2000      	movs	r0, #0
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	20000015 	.word	0x20000015
 8009328:	20000016 	.word	0x20000016

0800932c <USBD_MSC_Setup>:
{
 800932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009332:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009336:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800933a:	f8d3 72c0 	ldr.w	r7, [r3, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 800933e:	2200      	movs	r2, #0
 8009340:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hmsc == NULL)
 8009344:	2f00      	cmp	r7, #0
 8009346:	f000 808e 	beq.w	8009466 <USBD_MSC_Setup+0x13a>
 800934a:	4604      	mov	r4, r0
 800934c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800934e:	780a      	ldrb	r2, [r1, #0]
 8009350:	f012 0660 	ands.w	r6, r2, #96	@ 0x60
 8009354:	d036      	beq.n	80093c4 <USBD_MSC_Setup+0x98>
 8009356:	2e20      	cmp	r6, #32
 8009358:	d17e      	bne.n	8009458 <USBD_MSC_Setup+0x12c>
      switch (req->bRequest)
 800935a:	7849      	ldrb	r1, [r1, #1]
 800935c:	29fe      	cmp	r1, #254	@ 0xfe
 800935e:	d006      	beq.n	800936e <USBD_MSC_Setup+0x42>
 8009360:	29ff      	cmp	r1, #255	@ 0xff
 8009362:	d01e      	beq.n	80093a2 <USBD_MSC_Setup+0x76>
          USBD_CtlError(pdev, req);
 8009364:	4629      	mov	r1, r5
 8009366:	f001 f9d5 	bl	800a714 <USBD_CtlError>
          ret = USBD_FAIL;
 800936a:	2603      	movs	r6, #3
          break;
 800936c:	e077      	b.n	800945e <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800936e:	8869      	ldrh	r1, [r5, #2]
 8009370:	b911      	cbnz	r1, 8009378 <USBD_MSC_Setup+0x4c>
 8009372:	88e9      	ldrh	r1, [r5, #6]
 8009374:	2901      	cmp	r1, #1
 8009376:	d005      	beq.n	8009384 <USBD_MSC_Setup+0x58>
            USBD_CtlError(pdev, req);
 8009378:	4629      	mov	r1, r5
 800937a:	4620      	mov	r0, r4
 800937c:	f001 f9ca 	bl	800a714 <USBD_CtlError>
            ret = USBD_FAIL;
 8009380:	2603      	movs	r6, #3
 8009382:	e06c      	b.n	800945e <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009384:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009388:	d0f6      	beq.n	8009378 <USBD_MSC_Setup+0x4c>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800938a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	4798      	blx	r3
 8009392:	6038      	str	r0, [r7, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009394:	2201      	movs	r2, #1
 8009396:	4639      	mov	r1, r7
 8009398:	4620      	mov	r0, r4
 800939a:	f001 fd08 	bl	800adae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800939e:	2600      	movs	r6, #0
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80093a0:	e05d      	b.n	800945e <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80093a2:	886b      	ldrh	r3, [r5, #2]
 80093a4:	b943      	cbnz	r3, 80093b8 <USBD_MSC_Setup+0x8c>
 80093a6:	88eb      	ldrh	r3, [r5, #6]
 80093a8:	b933      	cbnz	r3, 80093b8 <USBD_MSC_Setup+0x8c>
 80093aa:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80093ae:	d103      	bne.n	80093b8 <USBD_MSC_Setup+0x8c>
            MSC_BOT_Reset(pdev);
 80093b0:	f000 f924 	bl	80095fc <MSC_BOT_Reset>
  USBD_StatusTypeDef ret = USBD_OK;
 80093b4:	2600      	movs	r6, #0
            MSC_BOT_Reset(pdev);
 80093b6:	e052      	b.n	800945e <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 80093b8:	4629      	mov	r1, r5
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 f9aa 	bl	800a714 <USBD_CtlError>
            ret = USBD_FAIL;
 80093c0:	2603      	movs	r6, #3
 80093c2:	e04c      	b.n	800945e <USBD_MSC_Setup+0x132>
      switch (req->bRequest)
 80093c4:	f891 8001 	ldrb.w	r8, [r1, #1]
 80093c8:	f1b8 0f0b 	cmp.w	r8, #11
 80093cc:	d840      	bhi.n	8009450 <USBD_MSC_Setup+0x124>
 80093ce:	e8df f008 	tbb	[pc, r8]
 80093d2:	3006      	.short	0x3006
 80093d4:	3f3f3f3f 	.word	0x3f3f3f3f
 80093d8:	3f3f3f3f 	.word	0x3f3f3f3f
 80093dc:	2416      	.short	0x2416
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093de:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d003      	beq.n	80093f0 <USBD_MSC_Setup+0xc4>
            USBD_CtlError(pdev, req);
 80093e8:	f001 f994 	bl	800a714 <USBD_CtlError>
            ret = USBD_FAIL;
 80093ec:	2603      	movs	r6, #3
 80093ee:	e036      	b.n	800945e <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093f0:	2202      	movs	r2, #2
 80093f2:	f10d 0106 	add.w	r1, sp, #6
 80093f6:	f001 fcda 	bl	800adae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80093fa:	4646      	mov	r6, r8
 80093fc:	e02f      	b.n	800945e <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b03      	cmp	r3, #3
 8009406:	d003      	beq.n	8009410 <USBD_MSC_Setup+0xe4>
            USBD_CtlError(pdev, req);
 8009408:	f001 f984 	bl	800a714 <USBD_CtlError>
            ret = USBD_FAIL;
 800940c:	2603      	movs	r6, #3
 800940e:	e026      	b.n	800945e <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009410:	2201      	movs	r2, #1
 8009412:	1d39      	adds	r1, r7, #4
 8009414:	f001 fccb 	bl	800adae <USBD_CtlSendData>
 8009418:	e021      	b.n	800945e <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b03      	cmp	r3, #3
 8009422:	d102      	bne.n	800942a <USBD_MSC_Setup+0xfe>
            hmsc->interface = (uint8_t)(req->wValue);
 8009424:	788b      	ldrb	r3, [r1, #2]
 8009426:	607b      	str	r3, [r7, #4]
 8009428:	e019      	b.n	800945e <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800942a:	f001 f973 	bl	800a714 <USBD_CtlError>
            ret = USBD_FAIL;
 800942e:	2603      	movs	r6, #3
 8009430:	e015      	b.n	800945e <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b03      	cmp	r3, #3
 800943a:	d110      	bne.n	800945e <USBD_MSC_Setup+0x132>
            if (req->wValue == USB_FEATURE_EP_HALT)
 800943c:	884b      	ldrh	r3, [r1, #2]
 800943e:	b973      	cbnz	r3, 800945e <USBD_MSC_Setup+0x132>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009440:	7909      	ldrb	r1, [r1, #4]
 8009442:	f003 fdc6 	bl	800cfd2 <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009446:	7929      	ldrb	r1, [r5, #4]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f9d3 	bl	80097f4 <MSC_BOT_CplClrFeature>
 800944e:	e006      	b.n	800945e <USBD_MSC_Setup+0x132>
          USBD_CtlError(pdev, req);
 8009450:	f001 f960 	bl	800a714 <USBD_CtlError>
          ret = USBD_FAIL;
 8009454:	2603      	movs	r6, #3
          break;
 8009456:	e002      	b.n	800945e <USBD_MSC_Setup+0x132>
      USBD_CtlError(pdev, req);
 8009458:	f001 f95c 	bl	800a714 <USBD_CtlError>
      ret = USBD_FAIL;
 800945c:	2603      	movs	r6, #3
}
 800945e:	4630      	mov	r0, r6
 8009460:	b002      	add	sp, #8
 8009462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_FAIL;
 8009466:	2603      	movs	r6, #3
 8009468:	e7f9      	b.n	800945e <USBD_MSC_Setup+0x132>

0800946a <USBD_MSC_DataIn>:
{
 800946a:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 800946c:	f000 f918 	bl	80096a0 <MSC_BOT_DataIn>
}
 8009470:	2000      	movs	r0, #0
 8009472:	bd08      	pop	{r3, pc}

08009474 <USBD_MSC_DataOut>:
{
 8009474:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 8009476:	f000 f935 	bl	80096e4 <MSC_BOT_DataOut>
}
 800947a:	2000      	movs	r0, #0
 800947c:	bd08      	pop	{r3, pc}
	...

08009480 <USBD_MSC_GetHSCfgDesc>:
{
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009484:	4e0b      	ldr	r6, [pc, #44]	@ (80094b4 <USBD_MSC_GetHSCfgDesc+0x34>)
 8009486:	2181      	movs	r1, #129	@ 0x81
 8009488:	4630      	mov	r0, r6
 800948a:	f001 f919 	bl	800a6c0 <USBD_GetEpDesc>
 800948e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009490:	2101      	movs	r1, #1
 8009492:	4630      	mov	r0, r6
 8009494:	f001 f914 	bl	800a6c0 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 8009498:	b11c      	cbz	r4, 80094a2 <USBD_MSC_GetHSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800949a:	2200      	movs	r2, #0
 800949c:	7122      	strb	r2, [r4, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 80094a2:	b118      	cbz	r0, 80094ac <USBD_MSC_GetHSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80094a4:	2200      	movs	r2, #0
 80094a6:	7102      	strb	r2, [r0, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80094ac:	2320      	movs	r3, #32
 80094ae:	802b      	strh	r3, [r5, #0]
}
 80094b0:	4800      	ldr	r0, [pc, #0]	@ (80094b4 <USBD_MSC_GetHSCfgDesc+0x34>)
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	20000024 	.word	0x20000024

080094b8 <USBD_MSC_GetFSCfgDesc>:
{
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80094bc:	4e0b      	ldr	r6, [pc, #44]	@ (80094ec <USBD_MSC_GetFSCfgDesc+0x34>)
 80094be:	2181      	movs	r1, #129	@ 0x81
 80094c0:	4630      	mov	r0, r6
 80094c2:	f001 f8fd 	bl	800a6c0 <USBD_GetEpDesc>
 80094c6:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80094c8:	2101      	movs	r1, #1
 80094ca:	4630      	mov	r0, r6
 80094cc:	f001 f8f8 	bl	800a6c0 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 80094d0:	b11c      	cbz	r4, 80094da <USBD_MSC_GetFSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80094d2:	2240      	movs	r2, #64	@ 0x40
 80094d4:	7122      	strb	r2, [r4, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 80094da:	b118      	cbz	r0, 80094e4 <USBD_MSC_GetFSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80094dc:	2240      	movs	r2, #64	@ 0x40
 80094de:	7102      	strb	r2, [r0, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80094e4:	2320      	movs	r3, #32
 80094e6:	802b      	strh	r3, [r5, #0]
}
 80094e8:	4800      	ldr	r0, [pc, #0]	@ (80094ec <USBD_MSC_GetFSCfgDesc+0x34>)
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	20000024 	.word	0x20000024

080094f0 <USBD_MSC_GetOtherSpeedCfgDesc>:
{
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80094f4:	4e0b      	ldr	r6, [pc, #44]	@ (8009524 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 80094f6:	2181      	movs	r1, #129	@ 0x81
 80094f8:	4630      	mov	r0, r6
 80094fa:	f001 f8e1 	bl	800a6c0 <USBD_GetEpDesc>
 80094fe:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009500:	2101      	movs	r1, #1
 8009502:	4630      	mov	r0, r6
 8009504:	f001 f8dc 	bl	800a6c0 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 8009508:	b11c      	cbz	r4, 8009512 <USBD_MSC_GetOtherSpeedCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800950a:	2240      	movs	r2, #64	@ 0x40
 800950c:	7122      	strb	r2, [r4, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 8009512:	b118      	cbz	r0, 800951c <USBD_MSC_GetOtherSpeedCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009514:	2240      	movs	r2, #64	@ 0x40
 8009516:	7102      	strb	r2, [r0, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800951c:	2320      	movs	r3, #32
 800951e:	802b      	strh	r3, [r5, #0]
}
 8009520:	4800      	ldr	r0, [pc, #0]	@ (8009524 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	20000024 	.word	0x20000024

08009528 <USBD_MSC_RegisterStorage>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
  if (fops == NULL)
 8009528:	b139      	cbz	r1, 800953a <USBD_MSC_RegisterStorage+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800952a:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800952e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009532:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4

  return (uint8_t)USBD_OK;
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800953a:	2003      	movs	r0, #3
}
 800953c:	4770      	bx	lr
	...

08009540 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009540:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009542:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009546:	33b0      	adds	r3, #176	@ 0xb0
 8009548:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800954c:	b185      	cbz	r5, 8009570 <MSC_BOT_Abort+0x30>
 800954e:	4604      	mov	r4, r0
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009550:	f895 321c 	ldrb.w	r3, [r5, #540]	@ 0x21c
 8009554:	b923      	cbnz	r3, 8009560 <MSC_BOT_Abort+0x20>
 8009556:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800955a:	b10b      	cbz	r3, 8009560 <MSC_BOT_Abort+0x20>
      (hmsc->cbw.dDataLength != 0U) &&
 800955c:	7a6b      	ldrb	r3, [r5, #9]
 800955e:	b143      	cbz	r3, 8009572 <MSC_BOT_Abort+0x32>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009560:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <MSC_BOT_Abort+0x54>)
 8009562:	7819      	ldrb	r1, [r3, #0]
 8009564:	4620      	mov	r0, r4
 8009566:	f003 fd3c 	bl	800cfe2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800956a:	7a6b      	ldrb	r3, [r5, #9]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d005      	beq.n	800957c <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
}
 8009570:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009572:	4b09      	ldr	r3, [pc, #36]	@ (8009598 <MSC_BOT_Abort+0x58>)
 8009574:	7819      	ldrb	r1, [r3, #0]
 8009576:	f003 fd34 	bl	800cfe2 <USBD_LL_StallEP>
 800957a:	e7f1      	b.n	8009560 <MSC_BOT_Abort+0x20>
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800957c:	4b05      	ldr	r3, [pc, #20]	@ (8009594 <MSC_BOT_Abort+0x54>)
 800957e:	7819      	ldrb	r1, [r3, #0]
 8009580:	4620      	mov	r0, r4
 8009582:	f003 fd2e 	bl	800cfe2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009586:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <MSC_BOT_Abort+0x58>)
 8009588:	7819      	ldrb	r1, [r3, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	f003 fd29 	bl	800cfe2 <USBD_LL_StallEP>
 8009590:	e7ee      	b.n	8009570 <MSC_BOT_Abort+0x30>
 8009592:	bf00      	nop
 8009594:	20000016 	.word	0x20000016
 8009598:	20000015 	.word	0x20000015

0800959c <MSC_BOT_Init>:
{
 800959c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80095a2:	33b0      	adds	r3, #176	@ 0xb0
 80095a4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 80095a8:	b315      	cbz	r5, 80095f0 <MSC_BOT_Init+0x54>
 80095aa:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 80095ac:	2000      	movs	r0, #0
 80095ae:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80095b0:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 80095b2:	f885 0261 	strb.w	r0, [r5, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 80095b6:	f885 0260 	strb.w	r0, [r5, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80095ba:	f885 0262 	strb.w	r0, [r5, #610]	@ 0x262
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80095be:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80095c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80095ce:	4e09      	ldr	r6, [pc, #36]	@ (80095f4 <MSC_BOT_Init+0x58>)
 80095d0:	7831      	ldrb	r1, [r6, #0]
 80095d2:	4620      	mov	r0, r4
 80095d4:	f003 fcfd 	bl	800cfd2 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80095d8:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <MSC_BOT_Init+0x5c>)
 80095da:	7819      	ldrb	r1, [r3, #0]
 80095dc:	4620      	mov	r0, r4
 80095de:	f003 fcf8 	bl	800cfd2 <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80095e2:	231f      	movs	r3, #31
 80095e4:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 80095e8:	7831      	ldrb	r1, [r6, #0]
 80095ea:	4620      	mov	r0, r4
 80095ec:	f003 fd19 	bl	800d022 <USBD_LL_PrepareReceive>
}
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
 80095f2:	bf00      	nop
 80095f4:	20000015 	.word	0x20000015
 80095f8:	20000016 	.word	0x20000016

080095fc <MSC_BOT_Reset>:
{
 80095fc:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095fe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009602:	33b0      	adds	r3, #176	@ 0xb0
 8009604:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 8009608:	b1a5      	cbz	r5, 8009634 <MSC_BOT_Reset+0x38>
 800960a:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 800960c:	2300      	movs	r3, #0
 800960e:	722b      	strb	r3, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009610:	2301      	movs	r3, #1
 8009612:	726b      	strb	r3, [r5, #9]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009614:	4b08      	ldr	r3, [pc, #32]	@ (8009638 <MSC_BOT_Reset+0x3c>)
 8009616:	7819      	ldrb	r1, [r3, #0]
 8009618:	f003 fceb 	bl	800cff2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800961c:	4e07      	ldr	r6, [pc, #28]	@ (800963c <MSC_BOT_Reset+0x40>)
 800961e:	7831      	ldrb	r1, [r6, #0]
 8009620:	4620      	mov	r0, r4
 8009622:	f003 fce6 	bl	800cff2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009626:	231f      	movs	r3, #31
 8009628:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800962c:	7831      	ldrb	r1, [r6, #0]
 800962e:	4620      	mov	r0, r4
 8009630:	f003 fcf7 	bl	800d022 <USBD_LL_PrepareReceive>
}
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	bf00      	nop
 8009638:	20000016 	.word	0x20000016
 800963c:	20000015 	.word	0x20000015

08009640 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009640:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009644:	33b0      	adds	r3, #176	@ 0xb0
 8009646:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 800964a:	b10b      	cbz	r3, 8009650 <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 800964c:	2200      	movs	r2, #0
 800964e:	721a      	strb	r2, [r3, #8]
}
 8009650:	4770      	bx	lr
	...

08009654 <MSC_BOT_SendCSW>:
{
 8009654:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009656:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800965a:	33b0      	adds	r3, #176	@ 0xb0
 800965c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 8009660:	b1b5      	cbz	r5, 8009690 <MSC_BOT_SendCSW+0x3c>
 8009662:	4604      	mov	r4, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009664:	4b0b      	ldr	r3, [pc, #44]	@ (8009694 <MSC_BOT_SendCSW+0x40>)
 8009666:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800966a:	f885 123c 	strb.w	r1, [r5, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800966e:	2300      	movs	r3, #0
 8009670:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009672:	230d      	movs	r3, #13
 8009674:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 8009678:	4907      	ldr	r1, [pc, #28]	@ (8009698 <MSC_BOT_SendCSW+0x44>)
 800967a:	7809      	ldrb	r1, [r1, #0]
 800967c:	f003 fcc9 	bl	800d012 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009680:	231f      	movs	r3, #31
 8009682:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 8009686:	4905      	ldr	r1, [pc, #20]	@ (800969c <MSC_BOT_SendCSW+0x48>)
 8009688:	7809      	ldrb	r1, [r1, #0]
 800968a:	4620      	mov	r0, r4
 800968c:	f003 fcc9 	bl	800d022 <USBD_LL_PrepareReceive>
}
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	53425355 	.word	0x53425355
 8009698:	20000016 	.word	0x20000016
 800969c:	20000015 	.word	0x20000015

080096a0 <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096a0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80096a4:	33b0      	adds	r3, #176	@ 0xb0
 80096a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hmsc == NULL)
 80096aa:	b1c9      	cbz	r1, 80096e0 <MSC_BOT_DataIn+0x40>
{
 80096ac:	b510      	push	{r4, lr}
 80096ae:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 80096b0:	7a0b      	ldrb	r3, [r1, #8]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d007      	beq.n	80096c6 <MSC_BOT_DataIn+0x26>
 80096b6:	3b03      	subs	r3, #3
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d802      	bhi.n	80096c4 <MSC_BOT_DataIn+0x24>
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80096be:	2100      	movs	r1, #0
 80096c0:	f7ff ffc8 	bl	8009654 <MSC_BOT_SendCSW>
}
 80096c4:	bd10      	pop	{r4, pc}
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80096c6:	f201 221f 	addw	r2, r1, #543	@ 0x21f
 80096ca:	f891 121d 	ldrb.w	r1, [r1, #541]	@ 0x21d
 80096ce:	f000 f9b9 	bl	8009a44 <SCSI_ProcessCmd>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	daf6      	bge.n	80096c4 <MSC_BOT_DataIn+0x24>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80096d6:	2101      	movs	r1, #1
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff ffbb 	bl	8009654 <MSC_BOT_SendCSW>
 80096de:	e7f1      	b.n	80096c4 <MSC_BOT_DataIn+0x24>
 80096e0:	4770      	bx	lr
	...

080096e4 <MSC_BOT_DataOut>:
{
 80096e4:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096e6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80096ea:	33b0      	adds	r3, #176	@ 0xb0
 80096ec:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 80096f0:	b125      	cbz	r5, 80096fc <MSC_BOT_DataOut+0x18>
 80096f2:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 80096f4:	7a2b      	ldrb	r3, [r5, #8]
 80096f6:	b113      	cbz	r3, 80096fe <MSC_BOT_DataOut+0x1a>
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d067      	beq.n	80097cc <MSC_BOT_DataOut+0xe8>
}
 80096fc:	bd38      	pop	{r3, r4, r5, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 80096fe:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 8009702:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009706:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800970a:	f8c5 3238 	str.w	r3, [r5, #568]	@ 0x238
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800970e:	4b36      	ldr	r3, [pc, #216]	@ (80097e8 <MSC_BOT_DataOut+0x104>)
 8009710:	7819      	ldrb	r1, [r3, #0]
 8009712:	f003 fc30 	bl	800cf76 <USBD_LL_GetRxDataSize>
 8009716:	281f      	cmp	r0, #31
 8009718:	d104      	bne.n	8009724 <MSC_BOT_DataOut+0x40>
 800971a:	f8d5 2210 	ldr.w	r2, [r5, #528]	@ 0x210
 800971e:	4b33      	ldr	r3, [pc, #204]	@ (80097ec <MSC_BOT_DataOut+0x108>)
 8009720:	429a      	cmp	r2, r3
 8009722:	d00c      	beq.n	800973e <MSC_BOT_DataOut+0x5a>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009724:	2320      	movs	r3, #32
 8009726:	2205      	movs	r2, #5
 8009728:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f89a 	bl	8009866 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009732:	2302      	movs	r3, #2
 8009734:	726b      	strb	r3, [r5, #9]
    MSC_BOT_Abort(pdev);
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff ff02 	bl	8009540 <MSC_BOT_Abort>
 800973c:	e7de      	b.n	80096fc <MSC_BOT_DataOut+0x18>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800973e:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009742:	2901      	cmp	r1, #1
 8009744:	d8ee      	bhi.n	8009724 <MSC_BOT_DataOut+0x40>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009746:	f895 321e 	ldrb.w	r3, [r5, #542]	@ 0x21e
 800974a:	3b01      	subs	r3, #1
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b0f      	cmp	r3, #15
 8009750:	d8e8      	bhi.n	8009724 <MSC_BOT_DataOut+0x40>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009752:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 8009756:	4620      	mov	r0, r4
 8009758:	f000 f974 	bl	8009a44 <SCSI_ProcessCmd>
 800975c:	2800      	cmp	r0, #0
 800975e:	db24      	blt.n	80097aa <MSC_BOT_DataOut+0xc6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009760:	7a2b      	ldrb	r3, [r5, #8]
 8009762:	3b01      	subs	r3, #1
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d9c8      	bls.n	80096fc <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 800976a:	68eb      	ldr	r3, [r5, #12]
 800976c:	b34b      	cbz	r3, 80097c2 <MSC_BOT_DataOut+0xde>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800976e:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 8009772:	32b0      	adds	r2, #176	@ 0xb0
 8009774:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  if (hmsc == NULL)
 8009778:	2a00      	cmp	r2, #0
 800977a:	d0bf      	beq.n	80096fc <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 800977c:	f8d2 0218 	ldr.w	r0, [r2, #536]	@ 0x218
  hmsc->csw.dDataResidue -= len;
 8009780:	f8d2 1238 	ldr.w	r1, [r2, #568]	@ 0x238
 8009784:	1ac9      	subs	r1, r1, r3
 8009786:	f8c2 1238 	str.w	r1, [r2, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800978a:	2100      	movs	r1, #0
 800978c:	f882 123c 	strb.w	r1, [r2, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009790:	2104      	movs	r1, #4
 8009792:	7211      	strb	r1, [r2, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009794:	4283      	cmp	r3, r0
 8009796:	bf28      	it	cs
 8009798:	4603      	movcs	r3, r0
 800979a:	f105 0210 	add.w	r2, r5, #16
 800979e:	4914      	ldr	r1, [pc, #80]	@ (80097f0 <MSC_BOT_DataOut+0x10c>)
 80097a0:	7809      	ldrb	r1, [r1, #0]
 80097a2:	4620      	mov	r0, r4
 80097a4:	f003 fc35 	bl	800d012 <USBD_LL_Transmit>
 80097a8:	e7a8      	b.n	80096fc <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80097aa:	7a2b      	ldrb	r3, [r5, #8]
 80097ac:	2b05      	cmp	r3, #5
 80097ae:	d003      	beq.n	80097b8 <MSC_BOT_DataOut+0xd4>
        MSC_BOT_Abort(pdev);
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7ff fec5 	bl	8009540 <MSC_BOT_Abort>
 80097b6:	e7a1      	b.n	80096fc <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097b8:	2101      	movs	r1, #1
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7ff ff4a 	bl	8009654 <MSC_BOT_SendCSW>
 80097c0:	e79c      	b.n	80096fc <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80097c2:	2100      	movs	r1, #0
 80097c4:	4620      	mov	r0, r4
 80097c6:	f7ff ff45 	bl	8009654 <MSC_BOT_SendCSW>
 80097ca:	e797      	b.n	80096fc <MSC_BOT_DataOut+0x18>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80097cc:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 80097d0:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 80097d4:	f000 f936 	bl	8009a44 <SCSI_ProcessCmd>
 80097d8:	2800      	cmp	r0, #0
 80097da:	da8f      	bge.n	80096fc <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80097dc:	2101      	movs	r1, #1
 80097de:	4620      	mov	r0, r4
 80097e0:	f7ff ff38 	bl	8009654 <MSC_BOT_SendCSW>
 80097e4:	e78a      	b.n	80096fc <MSC_BOT_DataOut+0x18>
 80097e6:	bf00      	nop
 80097e8:	20000015 	.word	0x20000015
 80097ec:	43425355 	.word	0x43425355
 80097f0:	20000016 	.word	0x20000016

080097f4 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80097f8:	33b0      	adds	r3, #176	@ 0xb0
 80097fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80097fe:	b1bb      	cbz	r3, 8009830 <MSC_BOT_CplClrFeature+0x3c>
{
 8009800:	b510      	push	{r4, lr}
 8009802:	4604      	mov	r4, r0
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009804:	7a5b      	ldrb	r3, [r3, #9]
 8009806:	2b02      	cmp	r3, #2
 8009808:	d008      	beq.n	800981c <MSC_BOT_CplClrFeature+0x28>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800980a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800980e:	d004      	beq.n	800981a <MSC_BOT_CplClrFeature+0x26>
 8009810:	2b01      	cmp	r3, #1
 8009812:	d002      	beq.n	800981a <MSC_BOT_CplClrFeature+0x26>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009814:	2101      	movs	r1, #1
 8009816:	f7ff ff1d 	bl	8009654 <MSC_BOT_SendCSW>
  }
  else
  {
    return;
  }
}
 800981a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <MSC_BOT_CplClrFeature+0x40>)
 800981e:	7819      	ldrb	r1, [r3, #0]
 8009820:	f003 fbdf 	bl	800cfe2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009824:	4b04      	ldr	r3, [pc, #16]	@ (8009838 <MSC_BOT_CplClrFeature+0x44>)
 8009826:	7819      	ldrb	r1, [r3, #0]
 8009828:	4620      	mov	r0, r4
 800982a:	f003 fbda 	bl	800cfe2 <USBD_LL_StallEP>
 800982e:	e7f4      	b.n	800981a <MSC_BOT_CplClrFeature+0x26>
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000016 	.word	0x20000016
 8009838:	20000015 	.word	0x20000015

0800983c <SCSI_UpdateBotData>:
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
  uint16_t len = length;

  if (hmsc == NULL)
 800983c:	b170      	cbz	r0, 800985c <SCSI_UpdateBotData+0x20>
  {
    return -1;
  }

  hmsc->bot_data_length = len;
 800983e:	60c2      	str	r2, [r0, #12]

  while (len != 0U)
 8009840:	b17a      	cbz	r2, 8009862 <SCSI_UpdateBotData+0x26>
 8009842:	188b      	adds	r3, r1, r2
 8009844:	3a01      	subs	r2, #1
 8009846:	b292      	uxth	r2, r2
 8009848:	3211      	adds	r2, #17
 800984a:	4402      	add	r2, r0
  {
    len--;
    hmsc->bot_data[len] = pBuff[len];
 800984c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 8009850:	f802 0d01 	strb.w	r0, [r2, #-1]!
  while (len != 0U)
 8009854:	428b      	cmp	r3, r1
 8009856:	d1f9      	bne.n	800984c <SCSI_UpdateBotData+0x10>
  }

  return 0;
 8009858:	2000      	movs	r0, #0
 800985a:	4770      	bx	lr
    return -1;
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	4770      	bx	lr
  return 0;
 8009862:	2000      	movs	r0, #0
}
 8009864:	4770      	bx	lr

08009866 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009866:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 800986a:	31b0      	adds	r1, #176	@ 0xb0
 800986c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  if (hmsc == NULL)
 8009870:	b1a0      	cbz	r0, 800989c <SCSI_SenseCode+0x36>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009872:	f890 1261 	ldrb.w	r1, [r0, #609]	@ 0x261
 8009876:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 800987a:	f88c 2240 	strb.w	r2, [ip, #576]	@ 0x240
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800987e:	f88c 3244 	strb.w	r3, [ip, #580]	@ 0x244
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	f88c 3245 	strb.w	r3, [ip, #581]	@ 0x245
  hmsc->scsi_sense_tail++;
 8009888:	3101      	adds	r1, #1
 800988a:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800988c:	2904      	cmp	r1, #4
 800988e:	d002      	beq.n	8009896 <SCSI_SenseCode+0x30>
  hmsc->scsi_sense_tail++;
 8009890:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 8009894:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	f880 3261 	strb.w	r3, [r0, #609]	@ 0x261
}
 800989c:	4770      	bx	lr

0800989e <SCSI_CheckAddressRange>:
{
 800989e:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a0:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 80098a4:	f104 0cb0 	add.w	ip, r4, #176	@ 0xb0
 80098a8:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
  if (hmsc == NULL)
 80098ac:	b174      	cbz	r4, 80098cc <SCSI_CheckAddressRange+0x2e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80098ae:	441a      	add	r2, r3
 80098b0:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 80098b4:	429a      	cmp	r2, r3
  return 0;
 80098b6:	bf98      	it	ls
 80098b8:	2000      	movls	r0, #0
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80098ba:	d800      	bhi.n	80098be <SCSI_CheckAddressRange+0x20>
}
 80098bc:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80098be:	2321      	movs	r3, #33	@ 0x21
 80098c0:	2205      	movs	r2, #5
 80098c2:	f7ff ffd0 	bl	8009866 <SCSI_SenseCode>
    return -1;
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	e7f7      	b.n	80098bc <SCSI_CheckAddressRange+0x1e>
    return -1;
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e7f4      	b.n	80098bc <SCSI_CheckAddressRange+0x1e>
	...

080098d4 <SCSI_ProcessRead>:
{
 80098d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098d8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80098dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80098e0:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 80098e4:	2c00      	cmp	r4, #0
 80098e6:	d044      	beq.n	8009972 <SCSI_ProcessRead+0x9e>
 80098e8:	4606      	mov	r6, r0
 80098ea:	460f      	mov	r7, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80098ec:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 80098f0:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 80098f4:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 80098f8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80098fc:	bf28      	it	cs
 80098fe:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009902:	f104 0810 	add.w	r8, r4, #16
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8009906:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800990a:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 800990e:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 8009918:	4641      	mov	r1, r8
 800991a:	4638      	mov	r0, r7
 800991c:	47c8      	blx	r9
 800991e:	2800      	cmp	r0, #0
 8009920:	db1e      	blt.n	8009960 <SCSI_ProcessRead+0x8c>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009922:	462b      	mov	r3, r5
 8009924:	4642      	mov	r2, r8
 8009926:	4916      	ldr	r1, [pc, #88]	@ (8009980 <SCSI_ProcessRead+0xac>)
 8009928:	7809      	ldrb	r1, [r1, #0]
 800992a:	4630      	mov	r0, r6
 800992c:	f003 fb71 	bl	800d012 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8009930:	f8b4 2264 	ldrh.w	r2, [r4, #612]	@ 0x264
 8009934:	fbb5 f2f2 	udiv	r2, r5, r2
 8009938:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 800993c:	4413      	add	r3, r2
 800993e:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009942:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 800994c:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 8009950:	1b52      	subs	r2, r2, r5
 8009952:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 8009956:	b97b      	cbnz	r3, 8009978 <SCSI_ProcessRead+0xa4>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009958:	2303      	movs	r3, #3
 800995a:	7223      	strb	r3, [r4, #8]
  return 0;
 800995c:	2000      	movs	r0, #0
 800995e:	e00c      	b.n	800997a <SCSI_ProcessRead+0xa6>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009960:	2311      	movs	r3, #17
 8009962:	2204      	movs	r2, #4
 8009964:	4639      	mov	r1, r7
 8009966:	4630      	mov	r0, r6
 8009968:	f7ff ff7d 	bl	8009866 <SCSI_SenseCode>
    return -1;
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	e003      	b.n	800997a <SCSI_ProcessRead+0xa6>
    return -1;
 8009972:	f04f 30ff 	mov.w	r0, #4294967295
 8009976:	e000      	b.n	800997a <SCSI_ProcessRead+0xa6>
  return 0;
 8009978:	2000      	movs	r0, #0
}
 800997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997e:	bf00      	nop
 8009980:	20000016 	.word	0x20000016

08009984 <SCSI_ProcessWrite>:
{
 8009984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009988:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800998c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009990:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 8009994:	2c00      	cmp	r4, #0
 8009996:	d04f      	beq.n	8009a38 <SCSI_ProcessWrite+0xb4>
 8009998:	4606      	mov	r6, r0
 800999a:	4688      	mov	r8, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800999c:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 80099a0:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 80099a4:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 80099a8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80099ac:	bf28      	it	cs
 80099ae:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80099b2:	f104 0710 	add.w	r7, r4, #16
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80099b6:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80099ba:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 80099be:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 80099c8:	4639      	mov	r1, r7
 80099ca:	4640      	mov	r0, r8
 80099cc:	47c8      	blx	r9
 80099ce:	2800      	cmp	r0, #0
 80099d0:	db1a      	blt.n	8009a08 <SCSI_ProcessWrite+0x84>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80099d2:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 80099d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80099da:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 80099de:	440a      	add	r2, r1
 80099e0:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80099e4:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 80099e8:	1a52      	subs	r2, r2, r1
 80099ea:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 80099ee:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 80099f2:	1b49      	subs	r1, r1, r5
 80099f4:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 80099f8:	b97a      	cbnz	r2, 8009a1a <SCSI_ProcessWrite+0x96>
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80099fa:	2100      	movs	r1, #0
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7ff fe29 	bl	8009654 <MSC_BOT_SendCSW>
  return 0;
 8009a02:	2000      	movs	r0, #0
}
 8009a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009a08:	2303      	movs	r3, #3
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff ff29 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	e7f4      	b.n	8009a04 <SCSI_ProcessWrite+0x80>
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009a1a:	fb02 f303 	mul.w	r3, r2, r3
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a22:	bf28      	it	cs
 8009a24:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009a28:	463a      	mov	r2, r7
 8009a2a:	4905      	ldr	r1, [pc, #20]	@ (8009a40 <SCSI_ProcessWrite+0xbc>)
 8009a2c:	7809      	ldrb	r1, [r1, #0]
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f003 faf7 	bl	800d022 <USBD_LL_PrepareReceive>
  return 0;
 8009a34:	2000      	movs	r0, #0
 8009a36:	e7e5      	b.n	8009a04 <SCSI_ProcessWrite+0x80>
    return -1;
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e7e2      	b.n	8009a04 <SCSI_ProcessWrite+0x80>
 8009a3e:	bf00      	nop
 8009a40:	20000015 	.word	0x20000015

08009a44 <SCSI_ProcessCmd>:
{
 8009a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	4615      	mov	r5, r2
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a4c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009a50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009a54:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 8009a58:	2c00      	cmp	r4, #0
 8009a5a:	f000 843d 	beq.w	800a2d8 <SCSI_ProcessCmd+0x894>
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
  switch (cmd[0])
 8009a62:	782b      	ldrb	r3, [r5, #0]
 8009a64:	2b5a      	cmp	r3, #90	@ 0x5a
 8009a66:	d85f      	bhi.n	8009b28 <SCSI_ProcessCmd+0xe4>
 8009a68:	2b5a      	cmp	r3, #90	@ 0x5a
 8009a6a:	f200 842a 	bhi.w	800a2c2 <SCSI_ProcessCmd+0x87e>
 8009a6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a72:	0104      	.short	0x0104
 8009a74:	04280428 	.word	0x04280428
 8009a78:	04280133 	.word	0x04280133
 8009a7c:	04280428 	.word	0x04280428
 8009a80:	04280428 	.word	0x04280428
 8009a84:	04280428 	.word	0x04280428
 8009a88:	04280428 	.word	0x04280428
 8009a8c:	04280428 	.word	0x04280428
 8009a90:	04280428 	.word	0x04280428
 8009a94:	016e0428 	.word	0x016e0428
 8009a98:	04280428 	.word	0x04280428
 8009a9c:	04280428 	.word	0x04280428
 8009aa0:	04280428 	.word	0x04280428
 8009aa4:	01e50428 	.word	0x01e50428
 8009aa8:	042801ae 	.word	0x042801ae
 8009aac:	01d80428 	.word	0x01d80428
 8009ab0:	04280428 	.word	0x04280428
 8009ab4:	04280428 	.word	0x04280428
 8009ab8:	0428021b 	.word	0x0428021b
 8009abc:	04280253 	.word	0x04280253
 8009ac0:	028a0428 	.word	0x028a0428
 8009ac4:	03560428 	.word	0x03560428
 8009ac8:	04280428 	.word	0x04280428
 8009acc:	04280428 	.word	0x04280428
 8009ad0:	0428040f 	.word	0x0428040f
 8009ad4:	04280428 	.word	0x04280428
 8009ad8:	04280428 	.word	0x04280428
 8009adc:	04280428 	.word	0x04280428
 8009ae0:	04280428 	.word	0x04280428
 8009ae4:	04280428 	.word	0x04280428
 8009ae8:	04280428 	.word	0x04280428
 8009aec:	04280428 	.word	0x04280428
 8009af0:	04280428 	.word	0x04280428
 8009af4:	04280428 	.word	0x04280428
 8009af8:	04280428 	.word	0x04280428
 8009afc:	04280428 	.word	0x04280428
 8009b00:	04280428 	.word	0x04280428
 8009b04:	04280428 	.word	0x04280428
 8009b08:	04280428 	.word	0x04280428
 8009b0c:	04280428 	.word	0x04280428
 8009b10:	04280428 	.word	0x04280428
 8009b14:	04280428 	.word	0x04280428
 8009b18:	04280428 	.word	0x04280428
 8009b1c:	04280428 	.word	0x04280428
 8009b20:	04280428 	.word	0x04280428
 8009b24:	01fb0428 	.word	0x01fb0428
 8009b28:	2ba8      	cmp	r3, #168	@ 0xa8
 8009b2a:	f000 828f 	beq.w	800a04c <SCSI_ProcessCmd+0x608>
 8009b2e:	2baa      	cmp	r3, #170	@ 0xaa
 8009b30:	d15b      	bne.n	8009bea <SCSI_ProcessCmd+0x1a6>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009b32:	7a23      	ldrb	r3, [r4, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f040 83a7 	bne.w	800a288 <SCSI_ProcessCmd+0x844>
    if (hmsc->cbw.dDataLength == 0U)
 8009b3a:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 8370 	beq.w	800a224 <SCSI_ProcessCmd+0x7e0>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009b44:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f2c0 8374 	blt.w	800a236 <SCSI_ProcessCmd+0x7f2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b4e:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	4608      	mov	r0, r1
 8009b56:	4798      	blx	r3
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	f040 8375 	bne.w	800a248 <SCSI_ProcessCmd+0x804>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009b5e:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 8009b62:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	4798      	blx	r3
 8009b70:	4680      	mov	r8, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f040 8373 	bne.w	800a25e <SCSI_ProcessCmd+0x81a>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b78:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 8009b7a:	78ea      	ldrb	r2, [r5, #3]
 8009b7c:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b7e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 8009b82:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 8009b84:	431a      	orrs	r2, r3
 8009b86:	792b      	ldrb	r3, [r5, #4]
 8009b88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b8c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009b90:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 8009b92:	79eb      	ldrb	r3, [r5, #7]
 8009b94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009b96:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 8009b9a:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	7a29      	ldrb	r1, [r5, #8]
 8009ba0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009ba4:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7ff fe77 	bl	800989e <SCSI_CheckAddressRange>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	f2c0 83a0 	blt.w	800a2f6 <SCSI_ProcessCmd+0x8b2>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009bb6:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009bba:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 8009bbe:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 8009bc2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	f040 8354 	bne.w	800a274 <SCSI_ProcessCmd+0x830>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009bcc:	2201      	movs	r2, #1
 8009bce:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd4:	bf28      	it	cs
 8009bd6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009bda:	f104 0210 	add.w	r2, r4, #16
 8009bde:	49ad      	ldr	r1, [pc, #692]	@ (8009e94 <SCSI_ProcessCmd+0x450>)
 8009be0:	7809      	ldrb	r1, [r1, #0]
 8009be2:	4630      	mov	r0, r6
 8009be4:	f003 fa1d 	bl	800d022 <USBD_LL_PrepareReceive>
  return 0;
 8009be8:	e124      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  switch (cmd[0])
 8009bea:	2b9e      	cmp	r3, #158	@ 0x9e
 8009bec:	f040 8369 	bne.w	800a2c2 <SCSI_ProcessCmd+0x87e>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009bf0:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 8009bfa:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 8009bfe:	4638      	mov	r0, r7
 8009c00:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009c02:	4680      	mov	r8, r0
 8009c04:	2800      	cmp	r0, #0
 8009c06:	f040 81b5 	bne.w	8009f74 <SCSI_ProcessCmd+0x530>
 8009c0a:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	f000 81b0 	beq.w	8009f74 <SCSI_ProcessCmd+0x530>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c14:	7aab      	ldrb	r3, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 8009c16:	7aea      	ldrb	r2, [r5, #11]
 8009c18:	0412      	lsls	r2, r2, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c1a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[13];
 8009c1e:	7b6b      	ldrb	r3, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 8009c20:	431a      	orrs	r2, r3
 8009c22:	7b2b      	ldrb	r3, [r5, #12]
 8009c24:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c28:	60e2      	str	r2, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c2a:	b13a      	cbz	r2, 8009c3c <SCSI_ProcessCmd+0x1f8>
 8009c2c:	f104 030f 	add.w	r3, r4, #15
 8009c30:	441a      	add	r2, r3
    hmsc->bot_data[idx] = 0U;
 8009c32:	2100      	movs	r1, #0
 8009c34:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d1fb      	bne.n	8009c34 <SCSI_ProcessCmd+0x1f0>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009c3c:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 8009c40:	1e53      	subs	r3, r2, #1
 8009c42:	0e19      	lsrs	r1, r3, #24
 8009c44:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009c46:	0c19      	lsrs	r1, r3, #16
 8009c48:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009c4e:	3a01      	subs	r2, #1
 8009c50:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009c52:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009c56:	2200      	movs	r2, #0
 8009c58:	7622      	strb	r2, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009c5a:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009c5c:	0a1a      	lsrs	r2, r3, #8
 8009c5e:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009c60:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c62:	7aaa      	ldrb	r2, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 8009c64:	7aeb      	ldrb	r3, [r5, #11]
 8009c66:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                          (uint32_t)params[13];
 8009c6c:	7b6a      	ldrb	r2, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	7b2a      	ldrb	r2, [r5, #12]
 8009c72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c76:	60e3      	str	r3, [r4, #12]
  return 0;
 8009c78:	e0dc      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength != 0U)
 8009c7a:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009c7e:	b96b      	cbnz	r3, 8009c9c <SCSI_ProcessCmd+0x258>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009c80:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d012      	beq.n	8009cae <SCSI_ProcessCmd+0x26a>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009c88:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	4798      	blx	r3
 8009c92:	4680      	mov	r8, r0
 8009c94:	b9a8      	cbnz	r0, 8009cc2 <SCSI_ProcessCmd+0x27e>
  hmsc->bot_data_length = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60e3      	str	r3, [r4, #12]
  return 0;
 8009c9a:	e0cb      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c9c:	2320      	movs	r3, #32
 8009c9e:	2205      	movs	r2, #5
 8009ca0:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009ca4:	f7ff fddf 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009ca8:	f04f 38ff 	mov.w	r8, #4294967295
 8009cac:	e0c2      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cae:	233a      	movs	r3, #58	@ 0x3a
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7ff fdd7 	bl	8009866 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009cb8:	2305      	movs	r3, #5
 8009cba:	7223      	strb	r3, [r4, #8]
    return -1;
 8009cbc:	f04f 38ff 	mov.w	r8, #4294967295
 8009cc0:	e0b8      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cc2:	233a      	movs	r3, #58	@ 0x3a
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff fdcc 	bl	8009866 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009cce:	2305      	movs	r3, #5
 8009cd0:	7223      	strb	r3, [r4, #8]
    return -1;
 8009cd2:	f04f 38ff 	mov.w	r8, #4294967295
 8009cd6:	e0ad      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength == 0U)
 8009cd8:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009cdc:	b373      	cbz	r3, 8009d3c <SCSI_ProcessCmd+0x2f8>
 8009cde:	f104 030f 	add.w	r3, r4, #15
 8009ce2:	f104 0121 	add.w	r1, r4, #33	@ 0x21
    hmsc->bot_data[i] = 0U;
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009cec:	428b      	cmp	r3, r1
 8009cee:	d1fb      	bne.n	8009ce8 <SCSI_ProcessCmd+0x2a4>
  hmsc->bot_data[0] = 0x70U;
 8009cf0:	2370      	movs	r3, #112	@ 0x70
 8009cf2:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009cf8:	f894 3260 	ldrb.w	r3, [r4, #608]	@ 0x260
 8009cfc:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d011      	beq.n	8009d28 <SCSI_ProcessCmd+0x2e4>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009d04:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8009d08:	f892 1240 	ldrb.w	r1, [r2, #576]	@ 0x240
 8009d0c:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009d0e:	f892 1244 	ldrb.w	r1, [r2, #580]	@ 0x244
 8009d12:	7721      	strb	r1, [r4, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009d14:	f892 2245 	ldrb.w	r2, [r2, #581]	@ 0x245
 8009d18:	7762      	strb	r2, [r4, #29]
    hmsc->scsi_sense_head++;
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009d1e:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0U;
 8009d20:	bf08      	it	eq
 8009d22:	2300      	moveq	r3, #0
 8009d24:	f884 3260 	strb.w	r3, [r4, #608]	@ 0x260
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009d28:	2312      	movs	r3, #18
 8009d2a:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009d2c:	792b      	ldrb	r3, [r5, #4]
 8009d2e:	2b12      	cmp	r3, #18
 8009d30:	f200 82d5 	bhi.w	800a2de <SCSI_ProcessCmd+0x89a>
    hmsc->bot_data_length = params[4];
 8009d34:	60e3      	str	r3, [r4, #12]
  return 0;
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	e07b      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	2205      	movs	r2, #5
 8009d40:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009d44:	f7ff fd8f 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009d48:	f04f 38ff 	mov.w	r8, #4294967295
 8009d4c:	e072      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->cbw.dDataLength == 0U)
 8009d4e:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8009d52:	b17b      	cbz	r3, 8009d74 <SCSI_ProcessCmd+0x330>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009d54:	786b      	ldrb	r3, [r5, #1]
 8009d56:	f013 0f01 	tst.w	r3, #1
 8009d5a:	d025      	beq.n	8009da8 <SCSI_ProcessCmd+0x364>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009d5c:	78ab      	ldrb	r3, [r5, #2]
 8009d5e:	b193      	cbz	r3, 8009d86 <SCSI_ProcessCmd+0x342>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009d60:	2b80      	cmp	r3, #128	@ 0x80
 8009d62:	d118      	bne.n	8009d96 <SCSI_ProcessCmd+0x352>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009d64:	2208      	movs	r2, #8
 8009d66:	494c      	ldr	r1, [pc, #304]	@ (8009e98 <SCSI_ProcessCmd+0x454>)
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f7ff fd67 	bl	800983c <SCSI_UpdateBotData>
  return 0;
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	e05f      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d74:	2320      	movs	r3, #32
 8009d76:	2205      	movs	r2, #5
 8009d78:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009d7c:	f7ff fd73 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009d80:	f04f 38ff 	mov.w	r8, #4294967295
 8009d84:	e056      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009d86:	2206      	movs	r2, #6
 8009d88:	4944      	ldr	r1, [pc, #272]	@ (8009e9c <SCSI_ProcessCmd+0x458>)
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7ff fd56 	bl	800983c <SCSI_UpdateBotData>
  return 0;
 8009d90:	f04f 0800 	mov.w	r8, #0
 8009d94:	e04e      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009d96:	2324      	movs	r3, #36	@ 0x24
 8009d98:	2205      	movs	r2, #5
 8009d9a:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 8009d9e:	f7ff fd62 	bl	8009866 <SCSI_SenseCode>
      return -1;
 8009da2:	f04f 38ff 	mov.w	r8, #4294967295
 8009da6:	e045      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009da8:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009dac:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009db0:	69d9      	ldr	r1, [r3, #28]
 8009db2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 8009db6:	790b      	ldrb	r3, [r1, #4]
    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009db8:	3305      	adds	r3, #5
 8009dba:	792a      	ldrb	r2, [r5, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	bf28      	it	cs
 8009dc0:	461a      	movcs	r2, r3
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7ff fd3a 	bl	800983c <SCSI_UpdateBotData>
  return 0;
 8009dc8:	f04f 0800 	mov.w	r8, #0
 8009dcc:	e032      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009dce:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d009      	beq.n	8009dea <SCSI_ProcessCmd+0x3a6>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009dd6:	792b      	ldrb	r3, [r5, #4]
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d01c      	beq.n	8009e1a <SCSI_ProcessCmd+0x3d6>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d109      	bne.n	8009df8 <SCSI_ProcessCmd+0x3b4>
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009de4:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 8009de8:	e00b      	b.n	8009e02 <SCSI_ProcessCmd+0x3be>
 8009dea:	792b      	ldrb	r3, [r5, #4]
 8009dec:	f003 0303 	and.w	r3, r3, #3
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d00a      	beq.n	8009e0a <SCSI_ProcessCmd+0x3c6>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d010      	beq.n	8009e1a <SCSI_ProcessCmd+0x3d6>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009df8:	2b03      	cmp	r3, #3
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009dfa:	bf04      	itt	eq
 8009dfc:	2300      	moveq	r3, #0
 8009dfe:	f884 3262 	strbeq.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60e3      	str	r3, [r4, #12]
  return 0;
 8009e06:	4698      	mov	r8, r3
 8009e08:	e014      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009e0a:	2324      	movs	r3, #36	@ 0x24
 8009e0c:	2205      	movs	r2, #5
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7ff fd29 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009e14:	f04f 38ff 	mov.w	r8, #4294967295
 8009e18:	e00c      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 8009e20:	e7ef      	b.n	8009e02 <SCSI_ProcessCmd+0x3be>
  if (params[4] == 0U)
 8009e22:	792b      	ldrb	r3, [r5, #4]
 8009e24:	3b00      	subs	r3, #0
 8009e26:	bf18      	it	ne
 8009e28:	2301      	movne	r3, #1
 8009e2a:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60e3      	str	r3, [r4, #12]
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009e32:	4698      	mov	r8, r3
}
 8009e34:	4640      	mov	r0, r8
 8009e36:	b002      	add	sp, #8
 8009e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009e3c:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	4638      	mov	r0, r7
 8009e44:	4798      	blx	r3
 8009e46:	b120      	cbz	r0, 8009e52 <SCSI_ProcessCmd+0x40e>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8009e48:	4a15      	ldr	r2, [pc, #84]	@ (8009ea0 <SCSI_ProcessCmd+0x45c>)
 8009e4a:	7893      	ldrb	r3, [r2, #2]
 8009e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e50:	7093      	strb	r3, [r2, #2]
  if (params[4] <= len)
 8009e52:	792a      	ldrb	r2, [r5, #4]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009e54:	2a04      	cmp	r2, #4
 8009e56:	bf28      	it	cs
 8009e58:	2204      	movcs	r2, #4
 8009e5a:	4911      	ldr	r1, [pc, #68]	@ (8009ea0 <SCSI_ProcessCmd+0x45c>)
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff fced 	bl	800983c <SCSI_UpdateBotData>
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009e62:	f04f 0800 	mov.w	r8, #0
      break;
 8009e66:	e7e5      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009e68:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	4798      	blx	r3
 8009e72:	b120      	cbz	r0, 8009e7e <SCSI_ProcessCmd+0x43a>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8009e74:	4a0b      	ldr	r2, [pc, #44]	@ (8009ea4 <SCSI_ProcessCmd+0x460>)
 8009e76:	78d3      	ldrb	r3, [r2, #3]
 8009e78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e7c:	70d3      	strb	r3, [r2, #3]
  if (params[8] <= len)
 8009e7e:	7a2a      	ldrb	r2, [r5, #8]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009e80:	2a08      	cmp	r2, #8
 8009e82:	bf28      	it	cs
 8009e84:	2208      	movcs	r2, #8
 8009e86:	4907      	ldr	r1, [pc, #28]	@ (8009ea4 <SCSI_ProcessCmd+0x460>)
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f7ff fcd7 	bl	800983c <SCSI_UpdateBotData>
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009e8e:	f04f 0800 	mov.w	r8, #0
      break;
 8009e92:	e7cf      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
 8009e94:	20000015 	.word	0x20000015
 8009e98:	20000088 	.word	0x20000088
 8009e9c:	20000090 	.word	0x20000090
 8009ea0:	20000084 	.word	0x20000084
 8009ea4:	2000007c 	.word	0x2000007c
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009ea8:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f10d 0202 	add.w	r2, sp, #2
 8009eb2:	a901      	add	r1, sp, #4
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009eb8:	4680      	mov	r8, r0
 8009eba:	bb20      	cbnz	r0, 8009f06 <SCSI_ProcessCmd+0x4c2>
 8009ebc:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d020      	beq.n	8009f06 <SCSI_ProcessCmd+0x4c2>
 8009ec4:	f104 030f 	add.w	r3, r4, #15
 8009ec8:	f104 011b 	add.w	r1, r4, #27
    hmsc->bot_data[i] = 0U;
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < 12U ; i++)
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	d1fb      	bne.n	8009ece <SCSI_ProcessCmd+0x48a>
  hmsc->bot_data[3] = 0x08U;
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009eda:	9a01      	ldr	r2, [sp, #4]
 8009edc:	1e53      	subs	r3, r2, #1
 8009ede:	0e19      	lsrs	r1, r3, #24
 8009ee0:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009ee2:	0c19      	lsrs	r1, r3, #16
 8009ee4:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009eea:	3a01      	subs	r2, #1
 8009eec:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = 0x02U;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	7623      	strb	r3, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009ef2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009efa:	0a1a      	lsrs	r2, r3, #8
 8009efc:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009efe:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = 12U;
 8009f00:	230c      	movs	r3, #12
 8009f02:	60e3      	str	r3, [r4, #12]
      break;
 8009f04:	e796      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f06:	233a      	movs	r3, #58	@ 0x3a
 8009f08:	2202      	movs	r2, #2
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f7ff fcaa 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009f12:	f04f 38ff 	mov.w	r8, #4294967295
 8009f16:	e78d      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009f18:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 8009f22:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 8009f26:	4638      	mov	r0, r7
 8009f28:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	b9c8      	cbnz	r0, 8009f62 <SCSI_ProcessCmd+0x51e>
 8009f2e:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d015      	beq.n	8009f62 <SCSI_ProcessCmd+0x51e>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009f36:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 8009f3a:	1e53      	subs	r3, r2, #1
 8009f3c:	0e19      	lsrs	r1, r3, #24
 8009f3e:	7421      	strb	r1, [r4, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009f40:	0c19      	lsrs	r1, r3, #16
 8009f42:	7461      	strb	r1, [r4, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	74a3      	strb	r3, [r4, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009f48:	3a01      	subs	r2, #1
 8009f4a:	74e2      	strb	r2, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009f4c:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009f50:	2200      	movs	r2, #0
 8009f52:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009f54:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009f56:	0a1a      	lsrs	r2, r3, #8
 8009f58:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009f5a:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data_length = 8U;
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	60e3      	str	r3, [r4, #12]
  return 0;
 8009f60:	e768      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f62:	233a      	movs	r3, #58	@ 0x3a
 8009f64:	2202      	movs	r2, #2
 8009f66:	4639      	mov	r1, r7
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff fc7c 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009f6e:	f04f 38ff 	mov.w	r8, #4294967295
 8009f72:	e75f      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f74:	233a      	movs	r3, #58	@ 0x3a
 8009f76:	2202      	movs	r2, #2
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f7ff fc73 	bl	8009866 <SCSI_SenseCode>
    return -1;
 8009f80:	f04f 38ff 	mov.w	r8, #4294967295
 8009f84:	e756      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f86:	7a23      	ldrb	r3, [r4, #8]
 8009f88:	bb9b      	cbnz	r3, 8009ff2 <SCSI_ProcessCmd+0x5ae>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009f8a:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da38      	bge.n	800a004 <SCSI_ProcessCmd+0x5c0>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009f92:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d03d      	beq.n	800a016 <SCSI_ProcessCmd+0x5d2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009f9a:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	4798      	blx	r3
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d13e      	bne.n	800a026 <SCSI_ProcessCmd+0x5e2>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fa8:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 8009faa:	78ea      	ldrb	r2, [r5, #3]
 8009fac:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fae:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 8009fb2:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	792b      	ldrb	r3, [r5, #4]
 8009fb8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fbc:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009fc0:	79e9      	ldrb	r1, [r5, #7]
 8009fc2:	7a2b      	ldrb	r3, [r5, #8]
 8009fc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009fc8:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009fcc:	4639      	mov	r1, r7
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff fc65 	bl	800989e <SCSI_CheckAddressRange>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f2c0 8185 	blt.w	800a2e4 <SCSI_ProcessCmd+0x8a0>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009fda:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 8009fde:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
 8009fe6:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d124      	bne.n	800a038 <SCSI_ProcessCmd+0x5f4>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ff6:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff fc6a 	bl	80098d4 <SCSI_ProcessRead>
 800a000:	4680      	mov	r8, r0
 800a002:	e717      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a004:	2320      	movs	r3, #32
 800a006:	2205      	movs	r2, #5
 800a008:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a00c:	f7ff fc2b 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a010:	f04f 38ff 	mov.w	r8, #4294967295
 800a014:	e70e      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a016:	233a      	movs	r3, #58	@ 0x3a
 800a018:	2202      	movs	r2, #2
 800a01a:	4639      	mov	r1, r7
 800a01c:	f7ff fc23 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a020:	f04f 38ff 	mov.w	r8, #4294967295
 800a024:	e706      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a026:	233a      	movs	r3, #58	@ 0x3a
 800a028:	2202      	movs	r2, #2
 800a02a:	4639      	mov	r1, r7
 800a02c:	4630      	mov	r0, r6
 800a02e:	f7ff fc1a 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a032:	f04f 38ff 	mov.w	r8, #4294967295
 800a036:	e6fd      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a038:	2320      	movs	r3, #32
 800a03a:	2205      	movs	r2, #5
 800a03c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fc10 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a046:	f04f 38ff 	mov.w	r8, #4294967295
 800a04a:	e6f3      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a04c:	7a23      	ldrb	r3, [r4, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d139      	bne.n	800a0c6 <SCSI_ProcessCmd+0x682>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a052:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800a056:	2b00      	cmp	r3, #0
 800a058:	da3e      	bge.n	800a0d8 <SCSI_ProcessCmd+0x694>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a05a:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d043      	beq.n	800a0ea <SCSI_ProcessCmd+0x6a6>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a062:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	4608      	mov	r0, r1
 800a06a:	4798      	blx	r3
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d143      	bne.n	800a0f8 <SCSI_ProcessCmd+0x6b4>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a070:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800a072:	78ea      	ldrb	r2, [r5, #3]
 800a074:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a076:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800a07a:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800a07c:	431a      	orrs	r2, r3
 800a07e:	792b      	ldrb	r3, [r5, #4]
 800a080:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a084:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a088:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800a08a:	79eb      	ldrb	r3, [r5, #7]
 800a08c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a08e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800a092:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800a094:	430b      	orrs	r3, r1
 800a096:	7a29      	ldrb	r1, [r5, #8]
 800a098:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a09c:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7ff fbfb 	bl	800989e <SCSI_CheckAddressRange>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f2c0 811e 	blt.w	800a2ea <SCSI_ProcessCmd+0x8a6>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a0ae:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a0b2:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d123      	bne.n	800a10a <SCSI_ProcessCmd+0x6c6>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a0c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ca:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff fc00 	bl	80098d4 <SCSI_ProcessRead>
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	e6ad      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0d8:	2320      	movs	r3, #32
 800a0da:	2205      	movs	r2, #5
 800a0dc:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a0e0:	f7ff fbc1 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a0e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a0e8:	e6a4      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0ea:	233a      	movs	r3, #58	@ 0x3a
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	f7ff fbba 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a0f2:	f04f 38ff 	mov.w	r8, #4294967295
 800a0f6:	e69d      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0f8:	233a      	movs	r3, #58	@ 0x3a
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff fbb1 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a104:	f04f 38ff 	mov.w	r8, #4294967295
 800a108:	e694      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a10a:	2320      	movs	r3, #32
 800a10c:	2205      	movs	r2, #5
 800a10e:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff fba7 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a118:	f04f 38ff 	mov.w	r8, #4294967295
 800a11c:	e68a      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a11e:	7a23      	ldrb	r3, [r4, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d17a      	bne.n	800a21a <SCSI_ProcessCmd+0x7d6>
    if (hmsc->cbw.dDataLength == 0U)
 800a124:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d048      	beq.n	800a1be <SCSI_ProcessCmd+0x77a>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a12c:	f994 321c 	ldrsb.w	r3, [r4, #540]	@ 0x21c
 800a130:	2b00      	cmp	r3, #0
 800a132:	db4d      	blt.n	800a1d0 <SCSI_ProcessCmd+0x78c>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a134:	f8d2 32c4 	ldr.w	r3, [r2, #708]	@ 0x2c4
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	4638      	mov	r0, r7
 800a13c:	4798      	blx	r3
 800a13e:	2800      	cmp	r0, #0
 800a140:	d14f      	bne.n	800a1e2 <SCSI_ProcessCmd+0x79e>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a142:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800a146:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a14a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4638      	mov	r0, r7
 800a152:	4798      	blx	r3
 800a154:	4680      	mov	r8, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	d14c      	bne.n	800a1f4 <SCSI_ProcessCmd+0x7b0>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a15a:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800a15c:	78ea      	ldrb	r2, [r5, #3]
 800a15e:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a160:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800a164:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800a166:	431a      	orrs	r2, r3
 800a168:	792b      	ldrb	r3, [r5, #4]
 800a16a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a16e:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a172:	79e9      	ldrb	r1, [r5, #7]
                         (uint32_t)params[8];
 800a174:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a176:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a17a:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a17e:	4639      	mov	r1, r7
 800a180:	4630      	mov	r0, r6
 800a182:	f7ff fb8c 	bl	800989e <SCSI_CheckAddressRange>
 800a186:	2800      	cmp	r0, #0
 800a188:	f2c0 80b2 	blt.w	800a2f0 <SCSI_ProcessCmd+0x8ac>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a18c:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800a190:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800a194:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800a198:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d132      	bne.n	800a206 <SCSI_ProcessCmd+0x7c2>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a1a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a8:	bf28      	it	cs
 800a1aa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800a1ae:	f104 0210 	add.w	r2, r4, #16
 800a1b2:	4954      	ldr	r1, [pc, #336]	@ (800a304 <SCSI_ProcessCmd+0x8c0>)
 800a1b4:	7809      	ldrb	r1, [r1, #0]
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f002 ff33 	bl	800d022 <USBD_LL_PrepareReceive>
  return 0;
 800a1bc:	e63a      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1be:	2320      	movs	r3, #32
 800a1c0:	2205      	movs	r2, #5
 800a1c2:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a1c6:	f7ff fb4e 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a1ca:	f04f 38ff 	mov.w	r8, #4294967295
 800a1ce:	e631      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	2205      	movs	r2, #5
 800a1d4:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a1d8:	f7ff fb45 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a1dc:	f04f 38ff 	mov.w	r8, #4294967295
 800a1e0:	e628      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1e2:	233a      	movs	r3, #58	@ 0x3a
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff fb3c 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a1ee:	f04f 38ff 	mov.w	r8, #4294967295
 800a1f2:	e61f      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a1f4:	2327      	movs	r3, #39	@ 0x27
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7ff fb33 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a200:	f04f 38ff 	mov.w	r8, #4294967295
 800a204:	e616      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a206:	2320      	movs	r3, #32
 800a208:	2205      	movs	r2, #5
 800a20a:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff fb29 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a214:	f04f 38ff 	mov.w	r8, #4294967295
 800a218:	e60c      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    return SCSI_ProcessWrite(pdev, lun);
 800a21a:	4639      	mov	r1, r7
 800a21c:	f7ff fbb2 	bl	8009984 <SCSI_ProcessWrite>
 800a220:	4680      	mov	r8, r0
 800a222:	e607      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a224:	2320      	movs	r3, #32
 800a226:	2205      	movs	r2, #5
 800a228:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a22c:	f7ff fb1b 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a230:	f04f 38ff 	mov.w	r8, #4294967295
 800a234:	e5fe      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a236:	2320      	movs	r3, #32
 800a238:	2205      	movs	r2, #5
 800a23a:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a23e:	f7ff fb12 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a242:	f04f 38ff 	mov.w	r8, #4294967295
 800a246:	e5f5      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a248:	233a      	movs	r3, #58	@ 0x3a
 800a24a:	2202      	movs	r2, #2
 800a24c:	4639      	mov	r1, r7
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff fb09 	bl	8009866 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a254:	2305      	movs	r3, #5
 800a256:	7223      	strb	r3, [r4, #8]
      return -1;
 800a258:	f04f 38ff 	mov.w	r8, #4294967295
 800a25c:	e5ea      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a25e:	2327      	movs	r3, #39	@ 0x27
 800a260:	2202      	movs	r2, #2
 800a262:	4639      	mov	r1, r7
 800a264:	4630      	mov	r0, r6
 800a266:	f7ff fafe 	bl	8009866 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a26a:	2305      	movs	r3, #5
 800a26c:	7223      	strb	r3, [r4, #8]
      return -1;
 800a26e:	f04f 38ff 	mov.w	r8, #4294967295
 800a272:	e5df      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a274:	2320      	movs	r3, #32
 800a276:	2205      	movs	r2, #5
 800a278:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff faf2 	bl	8009866 <SCSI_SenseCode>
      return -1;
 800a282:	f04f 38ff 	mov.w	r8, #4294967295
 800a286:	e5d5      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    return SCSI_ProcessWrite(pdev, lun);
 800a288:	f7ff fb7c 	bl	8009984 <SCSI_ProcessWrite>
 800a28c:	4680      	mov	r8, r0
 800a28e:	e5d1      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  if ((params[1] & 0x02U) == 0x02U)
 800a290:	786b      	ldrb	r3, [r5, #1]
 800a292:	f013 0f02 	tst.w	r3, #2
 800a296:	d10c      	bne.n	800a2b2 <SCSI_ProcessCmd+0x86e>
  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a298:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800a29c:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	f7ff fafc 	bl	800989e <SCSI_CheckAddressRange>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	db28      	blt.n	800a2fc <SCSI_ProcessCmd+0x8b8>
  hmsc->bot_data_length = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60e3      	str	r3, [r4, #12]
  return 0;
 800a2ae:	4698      	mov	r8, r3
 800a2b0:	e5c0      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a2b2:	2324      	movs	r3, #36	@ 0x24
 800a2b4:	2205      	movs	r2, #5
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7ff fad5 	bl	8009866 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a2bc:	f04f 38ff 	mov.w	r8, #4294967295
 800a2c0:	e5b8      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a2c2:	2320      	movs	r3, #32
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff facc 	bl	8009866 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	7263      	strb	r3, [r4, #9]
      ret = -1;
 800a2d2:	f04f 38ff 	mov.w	r8, #4294967295
      break;
 800a2d6:	e5ad      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    return -1;
 800a2d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a2dc:	e5aa      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
  return 0;
 800a2de:	f04f 0800 	mov.w	r8, #0
 800a2e2:	e5a7      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a2e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a2e8:	e5a4      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a2ea:	f04f 38ff 	mov.w	r8, #4294967295
 800a2ee:	e5a1      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a2f0:	f04f 38ff 	mov.w	r8, #4294967295
 800a2f4:	e59e      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
      return -1; /* error */
 800a2f6:	f04f 38ff 	mov.w	r8, #4294967295
 800a2fa:	e59b      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
    return -1; /* error */
 800a2fc:	f04f 38ff 	mov.w	r8, #4294967295
 800a300:	e598      	b.n	8009e34 <SCSI_ProcessCmd+0x3f0>
 800a302:	bf00      	nop
 800a304:	20000015 	.word	0x20000015

0800a308 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a308:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a30a:	b190      	cbz	r0, 800a332 <USBD_Init+0x2a>
 800a30c:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a30e:	2000      	movs	r0, #0
 800a310:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a314:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a318:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a31c:	b109      	cbz	r1, 800a322 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800a31e:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a322:	2101      	movs	r1, #1
 800a324:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a328:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 fde0 	bl	800cef0 <USBD_LL_Init>

  return ret;
}
 800a330:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 800a332:	4805      	ldr	r0, [pc, #20]	@ (800a348 <USBD_Init+0x40>)
 800a334:	f002 ff40 	bl	800d1b8 <iprintf>
 800a338:	4804      	ldr	r0, [pc, #16]	@ (800a34c <USBD_Init+0x44>)
 800a33a:	f002 ff3d 	bl	800d1b8 <iprintf>
 800a33e:	200a      	movs	r0, #10
 800a340:	f002 ff4c 	bl	800d1dc <putchar>
    return USBD_FAIL;
 800a344:	2003      	movs	r0, #3
 800a346:	e7f3      	b.n	800a330 <USBD_Init+0x28>
 800a348:	0800eff4 	.word	0x0800eff4
 800a34c:	0800effc 	.word	0x0800effc

0800a350 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a350:	b510      	push	{r4, lr}
 800a352:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800a35a:	b189      	cbz	r1, 800a380 <USBD_RegisterClass+0x30>
 800a35c:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a35e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a362:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a364:	b123      	cbz	r3, 800a370 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a366:	f10d 0006 	add.w	r0, sp, #6
 800a36a:	4798      	blx	r3
 800a36c:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a370:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800a374:	3301      	adds	r3, #1
 800a376:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800a37a:	2000      	movs	r0, #0
}
 800a37c:	b002      	add	sp, #8
 800a37e:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800a380:	4805      	ldr	r0, [pc, #20]	@ (800a398 <USBD_RegisterClass+0x48>)
 800a382:	f002 ff19 	bl	800d1b8 <iprintf>
 800a386:	4805      	ldr	r0, [pc, #20]	@ (800a39c <USBD_RegisterClass+0x4c>)
 800a388:	f002 ff16 	bl	800d1b8 <iprintf>
 800a38c:	200a      	movs	r0, #10
 800a38e:	f002 ff25 	bl	800d1dc <putchar>
    return USBD_FAIL;
 800a392:	2003      	movs	r0, #3
 800a394:	e7f2      	b.n	800a37c <USBD_RegisterClass+0x2c>
 800a396:	bf00      	nop
 800a398:	0800eff4 	.word	0x0800eff4
 800a39c:	0800f014 	.word	0x0800f014

0800a3a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3a0:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3a2:	f002 fdfb 	bl	800cf9c <USBD_LL_Start>
}
 800a3a6:	bd08      	pop	{r3, pc}

0800a3a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3a8:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a3ae:	b113      	cbz	r3, 800a3b6 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a3b4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	e7fc      	b.n	800a3b4 <USBD_SetClassConfig+0xc>

0800a3ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ba:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800a3c4:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a3c6:	bf18      	it	ne
 800a3c8:	2003      	movne	r0, #3
 800a3ca:	bd08      	pop	{r3, pc}

0800a3cc <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3d0:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f000 f989 	bl	800a6ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3e0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800a3e4:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3e8:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800a3ec:	f001 031f 	and.w	r3, r1, #31
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d00d      	beq.n	800a410 <USBD_LL_SetupStage+0x44>
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d010      	beq.n	800a41a <USBD_LL_SetupStage+0x4e>
 800a3f8:	b12b      	cbz	r3, 800a406 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3fa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a3fe:	4620      	mov	r0, r4
 800a400:	f002 fdef 	bl	800cfe2 <USBD_LL_StallEP>
      break;
 800a404:	e003      	b.n	800a40e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a406:	4629      	mov	r1, r5
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 f98d 	bl	800a728 <USBD_StdDevReq>
  }

  return ret;
}
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a410:	4629      	mov	r1, r5
 800a412:	4620      	mov	r0, r4
 800a414:	f000 fb66 	bl	800aae4 <USBD_StdItfReq>
      break;
 800a418:	e7f9      	b.n	800a40e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a41a:	4629      	mov	r1, r5
 800a41c:	4620      	mov	r0, r4
 800a41e:	f000 fba2 	bl	800ab66 <USBD_StdEPReq>
      break;
 800a422:	e7f4      	b.n	800a40e <USBD_LL_SetupStage+0x42>

0800a424 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800a428:	460d      	mov	r5, r1
 800a42a:	bb61      	cbnz	r1, 800a486 <USBD_LL_DataOutStage+0x62>
 800a42c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a42e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a432:	2a03      	cmp	r2, #3
 800a434:	d001      	beq.n	800a43a <USBD_LL_DataOutStage+0x16>
        return ret;
      }
    }
  }

  return USBD_OK;
 800a436:	4608      	mov	r0, r1
}
 800a438:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800a43a:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800a43e:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800a442:	4291      	cmp	r1, r2
 800a444:	d809      	bhi.n	800a45a <USBD_LL_DataOutStage+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d00f      	beq.n	800a470 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fcc9 	bl	800ade8 <USBD_CtlSendStatus>
  return USBD_OK;
 800a456:	4628      	mov	r0, r5
 800a458:	e7ee      	b.n	800a438 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a45a:	1a89      	subs	r1, r1, r2
 800a45c:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a460:	428a      	cmp	r2, r1
 800a462:	bf28      	it	cs
 800a464:	460a      	movcs	r2, r1
 800a466:	4619      	mov	r1, r3
 800a468:	f000 fcb6 	bl	800add8 <USBD_CtlContinueRx>
  return USBD_OK;
 800a46c:	4628      	mov	r0, r5
 800a46e:	e7e3      	b.n	800a438 <USBD_LL_DataOutStage+0x14>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a470:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	2a00      	cmp	r2, #0
 800a478:	d0ea      	beq.n	800a450 <USBD_LL_DataOutStage+0x2c>
              pdev->classId = idx;
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	4798      	blx	r3
 800a484:	e7e4      	b.n	800a450 <USBD_LL_DataOutStage+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a486:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d001      	beq.n	800a494 <USBD_LL_DataOutStage+0x70>
  return USBD_OK;
 800a490:	2000      	movs	r0, #0
 800a492:	e7d1      	b.n	800a438 <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 800a494:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a498:	699a      	ldr	r2, [r3, #24]
 800a49a:	b12a      	cbz	r2, 800a4a8 <USBD_LL_DataOutStage+0x84>
          pdev->classId = idx;
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	4798      	blx	r3
      if (ret != USBD_OK)
 800a4a6:	e7c7      	b.n	800a438 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e7c5      	b.n	800a438 <USBD_LL_DataOutStage+0x14>

0800a4ac <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	d14c      	bne.n	800a550 <USBD_LL_DataInStage+0xa4>
 800a4b6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4b8:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a4bc:	2a02      	cmp	r2, #2
 800a4be:	d008      	beq.n	800a4d2 <USBD_LL_DataInStage+0x26>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a4c0:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d049      	beq.n	800a55c <USBD_LL_DataInStage+0xb0>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
        }
      }
    }
  }

  return USBD_OK;
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	e044      	b.n	800a55c <USBD_LL_DataInStage+0xb0>
      if (pep->rem_length > pep->maxpacket)
 800a4d2:	69c2      	ldr	r2, [r0, #28]
 800a4d4:	6a01      	ldr	r1, [r0, #32]
 800a4d6:	428a      	cmp	r2, r1
 800a4d8:	d80e      	bhi.n	800a4f8 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 800a4da:	428a      	cmp	r2, r1
 800a4dc:	d018      	beq.n	800a510 <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4de:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d027      	beq.n	800a538 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4e8:	2180      	movs	r1, #128	@ 0x80
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f002 fd79 	bl	800cfe2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f000 fc84 	bl	800adfe <USBD_CtlReceiveStatus>
 800a4f6:	e7e3      	b.n	800a4c0 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800a4f8:	1a52      	subs	r2, r2, r1
 800a4fa:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f000 fc63 	bl	800adc8 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a502:	2300      	movs	r3, #0
 800a504:	461a      	mov	r2, r3
 800a506:	4619      	mov	r1, r3
 800a508:	4620      	mov	r0, r4
 800a50a:	f002 fd8a 	bl	800d022 <USBD_LL_PrepareReceive>
 800a50e:	e7d7      	b.n	800a4c0 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800a510:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800a512:	4299      	cmp	r1, r3
 800a514:	d8e3      	bhi.n	800a4de <USBD_LL_DataInStage+0x32>
            (pep->total_length >= pep->maxpacket) &&
 800a516:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d2df      	bcs.n	800a4de <USBD_LL_DataInStage+0x32>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a51e:	2200      	movs	r2, #0
 800a520:	4611      	mov	r1, r2
 800a522:	f000 fc51 	bl	800adc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a526:	2100      	movs	r1, #0
 800a528:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52c:	460b      	mov	r3, r1
 800a52e:	460a      	mov	r2, r1
 800a530:	4620      	mov	r0, r4
 800a532:	f002 fd76 	bl	800d022 <USBD_LL_PrepareReceive>
 800a536:	e7c3      	b.n	800a4c0 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a538:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	2a00      	cmp	r2, #0
 800a540:	d0d2      	beq.n	800a4e8 <USBD_LL_DataInStage+0x3c>
              pdev->classId = 0U;
 800a542:	2200      	movs	r2, #0
 800a544:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	4620      	mov	r0, r4
 800a54c:	4798      	blx	r3
 800a54e:	e7cb      	b.n	800a4e8 <USBD_LL_DataInStage+0x3c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a550:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b03      	cmp	r3, #3
 800a558:	d001      	beq.n	800a55e <USBD_LL_DataInStage+0xb2>
  return USBD_OK;
 800a55a:	2000      	movs	r0, #0
}
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
        if (pdev->pClass[idx]->DataIn != NULL)
 800a55e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a562:	695a      	ldr	r2, [r3, #20]
 800a564:	b12a      	cbz	r2, 800a572 <USBD_LL_DataInStage+0xc6>
          pdev->classId = idx;
 800a566:	2200      	movs	r2, #0
 800a568:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	4798      	blx	r3
          if (ret != USBD_OK)
 800a570:	e7f4      	b.n	800a55c <USBD_LL_DataInStage+0xb0>
  return USBD_OK;
 800a572:	2000      	movs	r0, #0
 800a574:	e7f2      	b.n	800a55c <USBD_LL_DataInStage+0xb0>

0800a576 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a578:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a580:	2300      	movs	r3, #0
 800a582:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a586:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800a588:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a58c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a590:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a594:	b1e3      	cbz	r3, 800a5d0 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	b1e3      	cbz	r3, 800a5d4 <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a59a:	2100      	movs	r1, #0
 800a59c:	4798      	blx	r3
      {
        ret = USBD_FAIL;
 800a59e:	1e05      	subs	r5, r0, #0
 800a5a0:	bf18      	it	ne
 800a5a2:	2503      	movne	r5, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5a4:	2340      	movs	r3, #64	@ 0x40
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f002 fcfe 	bl	800cfac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5b0:	2701      	movs	r7, #1
 800a5b2:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5b6:	2640      	movs	r6, #64	@ 0x40
 800a5b8:	f8c4 6160 	str.w	r6, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5bc:	4633      	mov	r3, r6
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2180      	movs	r1, #128	@ 0x80
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f002 fcf2 	bl	800cfac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5c8:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5ca:	6226      	str	r6, [r4, #32]

  return ret;
}
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d0:	2500      	movs	r5, #0
 800a5d2:	e7e7      	b.n	800a5a4 <USBD_LL_Reset+0x2e>
 800a5d4:	2500      	movs	r5, #0
 800a5d6:	e7e5      	b.n	800a5a4 <USBD_LL_Reset+0x2e>

0800a5d8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a5d8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a5da:	2000      	movs	r0, #0
 800a5dc:	4770      	bx	lr

0800a5de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a5de:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	d004      	beq.n	800a5f2 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a5e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a5f2:	2304      	movs	r3, #4
 800a5f4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	4770      	bx	lr

0800a5fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b04      	cmp	r3, #4
 800a604:	d001      	beq.n	800a60a <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800a606:	2000      	movs	r0, #0
 800a608:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800a60a:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800a614:	e7f7      	b.n	800a606 <USBD_LL_Resume+0xa>

0800a616 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a616:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a618:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d001      	beq.n	800a626 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800a622:	2000      	movs	r0, #0
 800a624:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800a626:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0f9      	beq.n	800a622 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d0f6      	beq.n	800a622 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800a634:	4798      	blx	r3
 800a636:	e7f4      	b.n	800a622 <USBD_LL_SOF+0xc>

0800a638 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a638:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a63a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a63e:	33ae      	adds	r3, #174	@ 0xae
 800a640:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a644:	b15a      	cbz	r2, 800a65e <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a646:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d001      	beq.n	800a654 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a650:	2000      	movs	r0, #0
}
 800a652:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a654:	6a13      	ldr	r3, [r2, #32]
 800a656:	b123      	cbz	r3, 800a662 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a658:	4798      	blx	r3
  return USBD_OK;
 800a65a:	2000      	movs	r0, #0
 800a65c:	e7f9      	b.n	800a652 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800a65e:	2003      	movs	r0, #3
 800a660:	e7f7      	b.n	800a652 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 800a662:	2000      	movs	r0, #0
 800a664:	e7f5      	b.n	800a652 <USBD_LL_IsoINIncomplete+0x1a>

0800a666 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a666:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800a668:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a66c:	33ae      	adds	r3, #174	@ 0xae
 800a66e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800a672:	b15a      	cbz	r2, 800a68c <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a674:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d001      	beq.n	800a682 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800a67e:	2000      	movs	r0, #0
}
 800a680:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a682:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800a684:	b123      	cbz	r3, 800a690 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a686:	4798      	blx	r3
  return USBD_OK;
 800a688:	2000      	movs	r0, #0
 800a68a:	e7f9      	b.n	800a680 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800a68c:	2003      	movs	r0, #3
 800a68e:	e7f7      	b.n	800a680 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 800a690:	2000      	movs	r0, #0
 800a692:	e7f5      	b.n	800a680 <USBD_LL_IsoOUTIncomplete+0x1a>

0800a694 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800a694:	2000      	movs	r0, #0
 800a696:	4770      	bx	lr

0800a698 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a698:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a6a4:	b133      	cbz	r3, 800a6b4 <USBD_LL_DevDisconnected+0x1c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	7901      	ldrb	r1, [r0, #4]
 800a6aa:	4798      	blx	r3
    {
      ret = USBD_FAIL;
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	bf18      	it	ne
 800a6b0:	2003      	movne	r0, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800a6b2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7fc      	b.n	800a6b2 <USBD_LL_DevDisconnected+0x1a>

0800a6b8 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	4770      	bx	lr

0800a6bc <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a6bc:	2000      	movs	r0, #0
 800a6be:	4770      	bx	lr

0800a6c0 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6c0:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800a6c4:	7803      	ldrb	r3, [r0, #0]
 800a6c6:	459c      	cmp	ip, r3
 800a6c8:	d803      	bhi.n	800a6d2 <USBD_GetEpDesc+0x12>
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6ca:	2000      	movs	r0, #0
      }
    }
  }

  return (void *)pEpDesc;
}
 800a6cc:	4770      	bx	lr
    while (ptr < desc->wTotalLength)
 800a6ce:	459c      	cmp	ip, r3
 800a6d0:	d90a      	bls.n	800a6e8 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800a6d2:	7802      	ldrb	r2, [r0, #0]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6d8:	4410      	add	r0, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6da:	7842      	ldrb	r2, [r0, #1]
 800a6dc:	2a05      	cmp	r2, #5
 800a6de:	d1f6      	bne.n	800a6ce <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6e0:	7882      	ldrb	r2, [r0, #2]
 800a6e2:	428a      	cmp	r2, r1
 800a6e4:	d1f3      	bne.n	800a6ce <USBD_GetEpDesc+0xe>
 800a6e6:	e7f1      	b.n	800a6cc <USBD_GetEpDesc+0xc>
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	4770      	bx	lr

0800a6ec <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6ec:	780b      	ldrb	r3, [r1, #0]
 800a6ee:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800a6f0:	784b      	ldrb	r3, [r1, #1]
 800a6f2:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6f4:	78ca      	ldrb	r2, [r1, #3]
 800a6f6:	788b      	ldrb	r3, [r1, #2]
 800a6f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800a6fc:	8043      	strh	r3, [r0, #2]
 800a6fe:	794a      	ldrb	r2, [r1, #5]
 800a700:	790b      	ldrb	r3, [r1, #4]
 800a702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800a706:	8083      	strh	r3, [r0, #4]
 800a708:	79ca      	ldrb	r2, [r1, #7]
 800a70a:	798b      	ldrb	r3, [r1, #6]
 800a70c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800a710:	80c3      	strh	r3, [r0, #6]
}
 800a712:	4770      	bx	lr

0800a714 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a714:	b510      	push	{r4, lr}
 800a716:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a718:	2180      	movs	r1, #128	@ 0x80
 800a71a:	f002 fc62 	bl	800cfe2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a71e:	2100      	movs	r1, #0
 800a720:	4620      	mov	r0, r4
 800a722:	f002 fc5e 	bl	800cfe2 <USBD_LL_StallEP>
}
 800a726:	bd10      	pop	{r4, pc}

0800a728 <USBD_StdDevReq>:
{
 800a728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72a:	b083      	sub	sp, #12
 800a72c:	4607      	mov	r7, r0
 800a72e:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a730:	780c      	ldrb	r4, [r1, #0]
 800a732:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a736:	2c20      	cmp	r4, #32
 800a738:	d006      	beq.n	800a748 <USBD_StdDevReq+0x20>
 800a73a:	2c40      	cmp	r4, #64	@ 0x40
 800a73c:	d004      	beq.n	800a748 <USBD_StdDevReq+0x20>
 800a73e:	b184      	cbz	r4, 800a762 <USBD_StdDevReq+0x3a>
      USBD_CtlError(pdev, req);
 800a740:	f7ff ffe8 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a744:	2400      	movs	r4, #0
      break;
 800a746:	e009      	b.n	800a75c <USBD_StdDevReq+0x34>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a748:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800a74c:	33ae      	adds	r3, #174	@ 0xae
 800a74e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4631      	mov	r1, r6
 800a756:	4638      	mov	r0, r7
 800a758:	4798      	blx	r3
 800a75a:	4604      	mov	r4, r0
}
 800a75c:	4620      	mov	r0, r4
 800a75e:	b003      	add	sp, #12
 800a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800a762:	784d      	ldrb	r5, [r1, #1]
 800a764:	2d09      	cmp	r5, #9
 800a766:	f200 81b8 	bhi.w	800aada <USBD_StdDevReq+0x3b2>
 800a76a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a76e:	0172      	.short	0x0172
 800a770:	01b601a4 	.word	0x01b601a4
 800a774:	01b60190 	.word	0x01b60190
 800a778:	000a00ca 	.word	0x000a00ca
 800a77c:	015201b6 	.word	0x015201b6
 800a780:	00f1      	.short	0x00f1
  uint16_t len = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a788:	884a      	ldrh	r2, [r1, #2]
 800a78a:	0a13      	lsrs	r3, r2, #8
 800a78c:	3b01      	subs	r3, #1
 800a78e:	2b06      	cmp	r3, #6
 800a790:	f200 80aa 	bhi.w	800a8e8 <USBD_StdDevReq+0x1c0>
 800a794:	e8df f003 	tbb	[pc, r3]
 800a798:	a8321e04 	.word	0xa8321e04
 800a79c:	8ca8      	.short	0x8ca8
 800a79e:	99          	.byte	0x99
 800a79f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f10d 0106 	add.w	r1, sp, #6
 800a7aa:	7c00      	ldrb	r0, [r0, #16]
 800a7ac:	4798      	blx	r3
  if (req->wLength != 0U)
 800a7ae:	88f3      	ldrh	r3, [r6, #6]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80a2 	beq.w	800a8fa <USBD_StdDevReq+0x1d2>
    if (len != 0U)
 800a7b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	f000 8098 	beq.w	800a8f0 <USBD_StdDevReq+0x1c8>
      len = MIN(len, req->wLength);
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	bf28      	it	cs
 800a7c4:	461a      	movcs	r2, r3
 800a7c6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	f000 faee 	bl	800adae <USBD_CtlSendData>
 800a7d2:	e7c3      	b.n	800a75c <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d4:	7c03      	ldrb	r3, [r0, #16]
 800a7d6:	b943      	cbnz	r3, 800a7ea <USBD_StdDevReq+0xc2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a7d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7de:	f10d 0006 	add.w	r0, sp, #6
 800a7e2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a7e8:	e7e1      	b.n	800a7ae <USBD_StdDevReq+0x86>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f0:	f10d 0006 	add.w	r0, sp, #6
 800a7f4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a7fa:	e7d8      	b.n	800a7ae <USBD_StdDevReq+0x86>
      switch ((uint8_t)(req->wValue))
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	2a05      	cmp	r2, #5
 800a800:	d852      	bhi.n	800a8a8 <USBD_StdDevReq+0x180>
 800a802:	e8df f002 	tbb	[pc, r2]
 800a806:	1003      	.short	0x1003
 800a808:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a80c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	b123      	cbz	r3, 800a81e <USBD_StdDevReq+0xf6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a814:	f10d 0106 	add.w	r1, sp, #6
 800a818:	7c00      	ldrb	r0, [r0, #16]
 800a81a:	4798      	blx	r3
  if (err != 0U)
 800a81c:	e7c7      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a81e:	4631      	mov	r1, r6
 800a820:	f7ff ff78 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a824:	e79a      	b.n	800a75c <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a826:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	b123      	cbz	r3, 800a838 <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a82e:	f10d 0106 	add.w	r1, sp, #6
 800a832:	7c00      	ldrb	r0, [r0, #16]
 800a834:	4798      	blx	r3
  if (err != 0U)
 800a836:	e7ba      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a838:	4631      	mov	r1, r6
 800a83a:	f7ff ff6b 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a83e:	e78d      	b.n	800a75c <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a840:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	b123      	cbz	r3, 800a852 <USBD_StdDevReq+0x12a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a848:	f10d 0106 	add.w	r1, sp, #6
 800a84c:	7c00      	ldrb	r0, [r0, #16]
 800a84e:	4798      	blx	r3
  if (err != 0U)
 800a850:	e7ad      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a852:	4631      	mov	r1, r6
 800a854:	f7ff ff5e 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a858:	e780      	b.n	800a75c <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a85a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	b123      	cbz	r3, 800a86c <USBD_StdDevReq+0x144>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a862:	f10d 0106 	add.w	r1, sp, #6
 800a866:	7c00      	ldrb	r0, [r0, #16]
 800a868:	4798      	blx	r3
  if (err != 0U)
 800a86a:	e7a0      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a86c:	4631      	mov	r1, r6
 800a86e:	f7ff ff51 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a872:	e773      	b.n	800a75c <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a874:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	b123      	cbz	r3, 800a886 <USBD_StdDevReq+0x15e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a87c:	f10d 0106 	add.w	r1, sp, #6
 800a880:	7c00      	ldrb	r0, [r0, #16]
 800a882:	4798      	blx	r3
  if (err != 0U)
 800a884:	e793      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a886:	4631      	mov	r1, r6
 800a888:	f7ff ff44 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a88c:	e766      	b.n	800a75c <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a88e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	b123      	cbz	r3, 800a8a0 <USBD_StdDevReq+0x178>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a896:	f10d 0106 	add.w	r1, sp, #6
 800a89a:	7c00      	ldrb	r0, [r0, #16]
 800a89c:	4798      	blx	r3
  if (err != 0U)
 800a89e:	e786      	b.n	800a7ae <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	f7ff ff37 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a8a6:	e759      	b.n	800a75c <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	f7ff ff33 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a8ae:	e755      	b.n	800a75c <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b0:	7c03      	ldrb	r3, [r0, #16]
 800a8b2:	b933      	cbnz	r3, 800a8c2 <USBD_StdDevReq+0x19a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a8b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a8b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ba:	f10d 0006 	add.w	r0, sp, #6
 800a8be:	4798      	blx	r3
  if (err != 0U)
 800a8c0:	e775      	b.n	800a7ae <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	f7ff ff26 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a8c8:	e748      	b.n	800a75c <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ca:	7c03      	ldrb	r3, [r0, #16]
 800a8cc:	b943      	cbnz	r3, 800a8e0 <USBD_StdDevReq+0x1b8>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d4:	f10d 0006 	add.w	r0, sp, #6
 800a8d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8da:	2307      	movs	r3, #7
 800a8dc:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a8de:	e766      	b.n	800a7ae <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	f7ff ff17 	bl	800a714 <USBD_CtlError>
  if (err != 0U)
 800a8e6:	e739      	b.n	800a75c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	f7ff ff13 	bl	800a714 <USBD_CtlError>
    return;
 800a8ee:	e735      	b.n	800a75c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f7ff ff0e 	bl	800a714 <USBD_CtlError>
 800a8f8:	e730      	b.n	800a75c <USBD_StdDevReq+0x34>
    (void)USBD_CtlSendStatus(pdev);
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f000 fa74 	bl	800ade8 <USBD_CtlSendStatus>
 800a900:	e72c      	b.n	800a75c <USBD_StdDevReq+0x34>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a902:	888b      	ldrh	r3, [r1, #4]
 800a904:	b9fb      	cbnz	r3, 800a946 <USBD_StdDevReq+0x21e>
 800a906:	88cb      	ldrh	r3, [r1, #6]
 800a908:	b9eb      	cbnz	r3, 800a946 <USBD_StdDevReq+0x21e>
 800a90a:	884b      	ldrh	r3, [r1, #2]
 800a90c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a90e:	d81a      	bhi.n	800a946 <USBD_StdDevReq+0x21e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a910:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	2a03      	cmp	r2, #3
 800a918:	d00d      	beq.n	800a936 <USBD_StdDevReq+0x20e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a91a:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 800a91c:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a920:	4629      	mov	r1, r5
 800a922:	f002 fb6e 	bl	800d002 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a926:	4638      	mov	r0, r7
 800a928:	f000 fa5e 	bl	800ade8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a92c:	b135      	cbz	r5, 800a93c <USBD_StdDevReq+0x214>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a92e:	2302      	movs	r3, #2
 800a930:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800a934:	e712      	b.n	800a75c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800a936:	f7ff feed 	bl	800a714 <USBD_CtlError>
 800a93a:	e70f      	b.n	800a75c <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800a942:	462c      	mov	r4, r5
 800a944:	e70a      	b.n	800a75c <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800a946:	4631      	mov	r1, r6
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff fee3 	bl	800a714 <USBD_CtlError>
 800a94e:	e705      	b.n	800a75c <USBD_StdDevReq+0x34>
  cfgidx = (uint8_t)(req->wValue);
 800a950:	788d      	ldrb	r5, [r1, #2]
 800a952:	4b63      	ldr	r3, [pc, #396]	@ (800aae0 <USBD_StdDevReq+0x3b8>)
 800a954:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a956:	2d01      	cmp	r5, #1
 800a958:	d80f      	bhi.n	800a97a <USBD_StdDevReq+0x252>
  switch (pdev->dev_state)
 800a95a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d00e      	beq.n	800a982 <USBD_StdDevReq+0x25a>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d026      	beq.n	800a9b6 <USBD_StdDevReq+0x28e>
      USBD_CtlError(pdev, req);
 800a968:	f7ff fed4 	bl	800a714 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a96c:	4b5c      	ldr	r3, [pc, #368]	@ (800aae0 <USBD_StdDevReq+0x3b8>)
 800a96e:	7819      	ldrb	r1, [r3, #0]
 800a970:	4638      	mov	r0, r7
 800a972:	f7ff fd22 	bl	800a3ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a976:	2403      	movs	r4, #3
      break;
 800a978:	e6f0      	b.n	800a75c <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800a97a:	f7ff fecb 	bl	800a714 <USBD_CtlError>
    return USBD_FAIL;
 800a97e:	2403      	movs	r4, #3
 800a980:	e6ec      	b.n	800a75c <USBD_StdDevReq+0x34>
      if (cfgidx != 0U)
 800a982:	b1a5      	cbz	r5, 800a9ae <USBD_StdDevReq+0x286>
        pdev->dev_config = cfgidx;
 800a984:	2101      	movs	r1, #1
 800a986:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a988:	f7ff fd0e 	bl	800a3a8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a98c:	4604      	mov	r4, r0
 800a98e:	b138      	cbz	r0, 800a9a0 <USBD_StdDevReq+0x278>
          USBD_CtlError(pdev, req);
 800a990:	4631      	mov	r1, r6
 800a992:	4638      	mov	r0, r7
 800a994:	f7ff febe 	bl	800a714 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a998:	2302      	movs	r3, #2
 800a99a:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800a99e:	e6dd      	b.n	800a75c <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f000 fa21 	bl	800ade8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800a9ac:	e6d6      	b.n	800a75c <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800a9ae:	f000 fa1b 	bl	800ade8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a9b2:	462c      	mov	r4, r5
 800a9b4:	e6d2      	b.n	800a75c <USBD_StdDevReq+0x34>
      if (cfgidx == 0U)
 800a9b6:	b1cd      	cbz	r5, 800a9ec <USBD_StdDevReq+0x2c4>
      else if (cfgidx != pdev->dev_config)
 800a9b8:	6841      	ldr	r1, [r0, #4]
 800a9ba:	2901      	cmp	r1, #1
 800a9bc:	d026      	beq.n	800aa0c <USBD_StdDevReq+0x2e4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9be:	b2c9      	uxtb	r1, r1
 800a9c0:	f7ff fcfb 	bl	800a3ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9c4:	4b46      	ldr	r3, [pc, #280]	@ (800aae0 <USBD_StdDevReq+0x3b8>)
 800a9c6:	7819      	ldrb	r1, [r3, #0]
 800a9c8:	6079      	str	r1, [r7, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	f7ff fcec 	bl	800a3a8 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	b1b8      	cbz	r0, 800aa04 <USBD_StdDevReq+0x2dc>
          USBD_CtlError(pdev, req);
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff fe9c 	bl	800a714 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9dc:	7939      	ldrb	r1, [r7, #4]
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f7ff fceb 	bl	800a3ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800a9ea:	e6b7      	b.n	800a75c <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9f6:	f7ff fce0 	bl	800a3ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	f000 f9f4 	bl	800ade8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa00:	462c      	mov	r4, r5
 800aa02:	e6ab      	b.n	800a75c <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800aa04:	4638      	mov	r0, r7
 800aa06:	f000 f9ef 	bl	800ade8 <USBD_CtlSendStatus>
 800aa0a:	e6a7      	b.n	800a75c <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800aa0c:	f000 f9ec 	bl	800ade8 <USBD_CtlSendStatus>
 800aa10:	e6a4      	b.n	800a75c <USBD_StdDevReq+0x34>
  if (req->wLength != 1U)
 800aa12:	88cb      	ldrh	r3, [r1, #6]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d10b      	bne.n	800aa30 <USBD_StdDevReq+0x308>
    switch (pdev->dev_state)
 800aa18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d909      	bls.n	800aa36 <USBD_StdDevReq+0x30e>
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d108      	bne.n	800aa38 <USBD_StdDevReq+0x310>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa26:	2201      	movs	r2, #1
 800aa28:	1d01      	adds	r1, r0, #4
 800aa2a:	f000 f9c0 	bl	800adae <USBD_CtlSendData>
        break;
 800aa2e:	e695      	b.n	800a75c <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800aa30:	f7ff fe70 	bl	800a714 <USBD_CtlError>
 800aa34:	e692      	b.n	800a75c <USBD_StdDevReq+0x34>
    switch (pdev->dev_state)
 800aa36:	b923      	cbnz	r3, 800aa42 <USBD_StdDevReq+0x31a>
        USBD_CtlError(pdev, req);
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	f7ff fe6a 	bl	800a714 <USBD_CtlError>
        break;
 800aa40:	e68c      	b.n	800a75c <USBD_StdDevReq+0x34>
        pdev->dev_default_config = 0U;
 800aa42:	4601      	mov	r1, r0
 800aa44:	2300      	movs	r3, #0
 800aa46:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f000 f9af 	bl	800adae <USBD_CtlSendData>
        break;
 800aa50:	e684      	b.n	800a75c <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800aa52:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa56:	3b01      	subs	r3, #1
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d814      	bhi.n	800aa86 <USBD_StdDevReq+0x35e>
      if (req->wLength != 0x2U)
 800aa5c:	88cb      	ldrh	r3, [r1, #6]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d10d      	bne.n	800aa7e <USBD_StdDevReq+0x356>
      if (pdev->dev_remote_wakeup != 0U)
 800aa62:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf0c      	ite	eq
 800aa6a:	2301      	moveq	r3, #1
 800aa6c:	2303      	movne	r3, #3
 800aa6e:	4601      	mov	r1, r0
 800aa70:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa74:	2202      	movs	r2, #2
 800aa76:	f000 f99a 	bl	800adae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7a:	462c      	mov	r4, r5
      break;
 800aa7c:	e66e      	b.n	800a75c <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800aa7e:	f7ff fe49 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa82:	462c      	mov	r4, r5
        break;
 800aa84:	e66a      	b.n	800a75c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800aa86:	f7ff fe45 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8a:	462c      	mov	r4, r5
      break;
 800aa8c:	e666      	b.n	800a75c <USBD_StdDevReq+0x34>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa8e:	884b      	ldrh	r3, [r1, #2]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d004      	beq.n	800aa9e <USBD_StdDevReq+0x376>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d007      	beq.n	800aaa8 <USBD_StdDevReq+0x380>
    USBD_CtlError(pdev, req);
 800aa98:	f7ff fe3c 	bl	800a714 <USBD_CtlError>
 800aa9c:	e65e      	b.n	800a75c <USBD_StdDevReq+0x34>
    pdev->dev_remote_wakeup = 1U;
 800aa9e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aaa2:	f000 f9a1 	bl	800ade8 <USBD_CtlSendStatus>
 800aaa6:	e659      	b.n	800a75c <USBD_StdDevReq+0x34>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aaa8:	888b      	ldrh	r3, [r1, #4]
 800aaaa:	0a1b      	lsrs	r3, r3, #8
 800aaac:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aab0:	f000 f99a 	bl	800ade8 <USBD_CtlSendStatus>
 800aab4:	e652      	b.n	800a75c <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800aab6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aaba:	3b01      	subs	r3, #1
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d809      	bhi.n	800aad4 <USBD_StdDevReq+0x3ac>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac0:	884b      	ldrh	r3, [r1, #2]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	f47f ae4a 	bne.w	800a75c <USBD_StdDevReq+0x34>
        pdev->dev_remote_wakeup = 0U;
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aace:	f000 f98b 	bl	800ade8 <USBD_CtlSendStatus>
 800aad2:	e643      	b.n	800a75c <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800aad4:	f7ff fe1e 	bl	800a714 <USBD_CtlError>
      break;
 800aad8:	e640      	b.n	800a75c <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800aada:	f7ff fe1b 	bl	800a714 <USBD_CtlError>
          break;
 800aade:	e63d      	b.n	800a75c <USBD_StdDevReq+0x34>
 800aae0:	2000145c 	.word	0x2000145c

0800aae4 <USBD_StdItfReq>:
{
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	4605      	mov	r5, r0
 800aae8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaea:	780b      	ldrb	r3, [r1, #0]
 800aaec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800aaf0:	d008      	beq.n	800ab04 <USBD_StdItfReq+0x20>
 800aaf2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800aaf6:	2a40      	cmp	r2, #64	@ 0x40
 800aaf8:	d004      	beq.n	800ab04 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800aafa:	f7ff fe0b 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aafe:	2600      	movs	r6, #0
}
 800ab00:	4630      	mov	r0, r6
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800ab04:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d821      	bhi.n	800ab52 <USBD_StdItfReq+0x6e>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab0e:	7921      	ldrb	r1, [r4, #4]
 800ab10:	2901      	cmp	r1, #1
 800ab12:	d905      	bls.n	800ab20 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800ab14:	4621      	mov	r1, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7ff fdfc 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	e7ef      	b.n	800ab00 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab20:	4628      	mov	r0, r5
 800ab22:	f7ff fdc9 	bl	800a6b8 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab26:	b9d0      	cbnz	r0, 800ab5e <USBD_StdItfReq+0x7a>
              if (pdev->pClass[idx]->Setup != NULL)
 800ab28:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 800ab2c:	689a      	ldr	r2, [r3, #8]
 800ab2e:	b1c2      	cbz	r2, 800ab62 <USBD_StdItfReq+0x7e>
                pdev->classId = idx;
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c5 22d4 	str.w	r2, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	4798      	blx	r3
 800ab3e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab40:	88e3      	ldrh	r3, [r4, #6]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1dc      	bne.n	800ab00 <USBD_StdItfReq+0x1c>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d1da      	bne.n	800ab00 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 f94c 	bl	800ade8 <USBD_CtlSendStatus>
 800ab50:	e7d6      	b.n	800ab00 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800ab52:	4621      	mov	r1, r4
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7ff fddd 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5a:	2600      	movs	r6, #0
          break;
 800ab5c:	e7d0      	b.n	800ab00 <USBD_StdItfReq+0x1c>
 800ab5e:	2603      	movs	r6, #3
 800ab60:	e7ce      	b.n	800ab00 <USBD_StdItfReq+0x1c>
 800ab62:	2603      	movs	r6, #3
 800ab64:	e7cc      	b.n	800ab00 <USBD_StdItfReq+0x1c>

0800ab66 <USBD_StdEPReq>:
{
 800ab66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800ab6e:	888b      	ldrh	r3, [r1, #4]
 800ab70:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab72:	780c      	ldrb	r4, [r1, #0]
 800ab74:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800ab78:	2c20      	cmp	r4, #32
 800ab7a:	d008      	beq.n	800ab8e <USBD_StdEPReq+0x28>
 800ab7c:	2c40      	cmp	r4, #64	@ 0x40
 800ab7e:	d006      	beq.n	800ab8e <USBD_StdEPReq+0x28>
 800ab80:	b1d4      	cbz	r4, 800abb8 <USBD_StdEPReq+0x52>
      USBD_CtlError(pdev, req);
 800ab82:	f7ff fdc7 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab86:	2400      	movs	r4, #0
}
 800ab88:	4620      	mov	r0, r4
 800ab8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab8e:	4639      	mov	r1, r7
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff fd93 	bl	800a6bc <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab96:	4604      	mov	r4, r0
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f040 80db 	bne.w	800ad54 <USBD_StdEPReq+0x1ee>
        pdev->classId = idx;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800aba4:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ec      	beq.n	800ab88 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800abae:	4629      	mov	r1, r5
 800abb0:	4630      	mov	r0, r6
 800abb2:	4798      	blx	r3
 800abb4:	4604      	mov	r4, r0
 800abb6:	e7e7      	b.n	800ab88 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800abb8:	f891 8001 	ldrb.w	r8, [r1, #1]
 800abbc:	f1b8 0f01 	cmp.w	r8, #1
 800abc0:	d030      	beq.n	800ac24 <USBD_StdEPReq+0xbe>
 800abc2:	f1b8 0f03 	cmp.w	r8, #3
 800abc6:	d005      	beq.n	800abd4 <USBD_StdEPReq+0x6e>
 800abc8:	f1b8 0f00 	cmp.w	r8, #0
 800abcc:	d063      	beq.n	800ac96 <USBD_StdEPReq+0x130>
          USBD_CtlError(pdev, req);
 800abce:	f7ff fda1 	bl	800a714 <USBD_CtlError>
          break;
 800abd2:	e7d9      	b.n	800ab88 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800abd4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d004      	beq.n	800abe8 <USBD_StdEPReq+0x82>
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d011      	beq.n	800ac06 <USBD_StdEPReq+0xa0>
              USBD_CtlError(pdev, req);
 800abe2:	f7ff fd97 	bl	800a714 <USBD_CtlError>
              break;
 800abe6:	e7cf      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abe8:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800abec:	d007      	beq.n	800abfe <USBD_StdEPReq+0x98>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abee:	4639      	mov	r1, r7
 800abf0:	f002 f9f7 	bl	800cfe2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abf4:	2180      	movs	r1, #128	@ 0x80
 800abf6:	4630      	mov	r0, r6
 800abf8:	f002 f9f3 	bl	800cfe2 <USBD_LL_StallEP>
 800abfc:	e7c4      	b.n	800ab88 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800abfe:	f7ff fd89 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac02:	4644      	mov	r4, r8
 800ac04:	e7c0      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac06:	884b      	ldrh	r3, [r1, #2]
 800ac08:	b923      	cbnz	r3, 800ac14 <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac0a:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800ac0e:	d001      	beq.n	800ac14 <USBD_StdEPReq+0xae>
 800ac10:	88cb      	ldrh	r3, [r1, #6]
 800ac12:	b11b      	cbz	r3, 800ac1c <USBD_StdEPReq+0xb6>
              (void)USBD_CtlSendStatus(pdev);
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 f8e7 	bl	800ade8 <USBD_CtlSendStatus>
              break;
 800ac1a:	e7b5      	b.n	800ab88 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f002 f9e0 	bl	800cfe2 <USBD_LL_StallEP>
 800ac22:	e7f7      	b.n	800ac14 <USBD_StdEPReq+0xae>
          switch (pdev->dev_state)
 800ac24:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d004      	beq.n	800ac38 <USBD_StdEPReq+0xd2>
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d011      	beq.n	800ac56 <USBD_StdEPReq+0xf0>
              USBD_CtlError(pdev, req);
 800ac32:	f7ff fd6f 	bl	800a714 <USBD_CtlError>
              break;
 800ac36:	e7a7      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac38:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800ac3c:	d007      	beq.n	800ac4e <USBD_StdEPReq+0xe8>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac3e:	4639      	mov	r1, r7
 800ac40:	f002 f9cf 	bl	800cfe2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac44:	2180      	movs	r1, #128	@ 0x80
 800ac46:	4630      	mov	r0, r6
 800ac48:	f002 f9cb 	bl	800cfe2 <USBD_LL_StallEP>
 800ac4c:	e79c      	b.n	800ab88 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800ac4e:	f7ff fd61 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac52:	4644      	mov	r4, r8
 800ac54:	e798      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac56:	884b      	ldrh	r3, [r1, #2]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d195      	bne.n	800ab88 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac5c:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800ac60:	d115      	bne.n	800ac8e <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 f8c0 	bl	800ade8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff fd26 	bl	800a6bc <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d189      	bne.n	800ab88 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800ac7a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d069      	beq.n	800ad58 <USBD_StdEPReq+0x1f2>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac84:	4629      	mov	r1, r5
 800ac86:	4630      	mov	r0, r6
 800ac88:	4798      	blx	r3
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	e77c      	b.n	800ab88 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f002 f9af 	bl	800cff2 <USBD_LL_ClearStallEP>
 800ac94:	e7e5      	b.n	800ac62 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 800ac96:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	2a02      	cmp	r2, #2
 800ac9e:	d005      	beq.n	800acac <USBD_StdEPReq+0x146>
 800aca0:	2a03      	cmp	r2, #3
 800aca2:	d017      	beq.n	800acd4 <USBD_StdEPReq+0x16e>
              USBD_CtlError(pdev, req);
 800aca4:	f7ff fd36 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800aca8:	4644      	mov	r4, r8
              break;
 800acaa:	e76d      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acac:	f017 047f 	ands.w	r4, r7, #127	@ 0x7f
 800acb0:	d003      	beq.n	800acba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800acb2:	f7ff fd2f 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800acb6:	4644      	mov	r4, r8
                break;
 800acb8:	e766      	b.n	800ab88 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acbe:	bf14      	ite	ne
 800acc0:	f100 0114 	addne.w	r1, r0, #20
 800acc4:	f500 71aa 	addeq.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800acc8:	2300      	movs	r3, #0
 800acca:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800accc:	2202      	movs	r2, #2
 800acce:	f000 f86e 	bl	800adae <USBD_CtlSendData>
              break;
 800acd2:	e759      	b.n	800ab88 <USBD_StdEPReq+0x22>
              if ((ep_addr & 0x80U) == 0x80U)
 800acd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acd8:	d11b      	bne.n	800ad12 <USBD_StdEPReq+0x1ac>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acda:	f007 030f 	and.w	r3, r7, #15
 800acde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ace2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ace6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800acea:	b333      	cbz	r3, 800ad3a <USBD_StdEPReq+0x1d4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acec:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800acf4:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800acf8:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acfc:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800ad00:	d01f      	beq.n	800ad42 <USBD_StdEPReq+0x1dc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad02:	4639      	mov	r1, r7
 800ad04:	4630      	mov	r0, r6
 800ad06:	f002 f927 	bl	800cf58 <USBD_LL_IsStallEP>
 800ad0a:	3800      	subs	r0, #0
 800ad0c:	bf18      	it	ne
 800ad0e:	2001      	movne	r0, #1
 800ad10:	e018      	b.n	800ad44 <USBD_StdEPReq+0x1de>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad12:	f007 030f 	and.w	r3, r7, #15
 800ad16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ad1a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ad1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ad20:	b13b      	cbz	r3, 800ad32 <USBD_StdEPReq+0x1cc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad22:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
 800ad26:	3401      	adds	r4, #1
 800ad28:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ad2c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ad30:	e7e4      	b.n	800acfc <USBD_StdEPReq+0x196>
                  USBD_CtlError(pdev, req);
 800ad32:	f7ff fcef 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad36:	4644      	mov	r4, r8
                  break;
 800ad38:	e726      	b.n	800ab88 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800ad3a:	f7ff fceb 	bl	800a714 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3e:	4644      	mov	r4, r8
                  break;
 800ad40:	e722      	b.n	800ab88 <USBD_StdEPReq+0x22>
 800ad42:	2000      	movs	r0, #0
                pep->status = 0x0000U;
 800ad44:	6020      	str	r0, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad46:	2202      	movs	r2, #2
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f000 f82f 	bl	800adae <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad50:	4644      	mov	r4, r8
              break;
 800ad52:	e719      	b.n	800ab88 <USBD_StdEPReq+0x22>
  USBD_StatusTypeDef ret = USBD_OK;
 800ad54:	2400      	movs	r4, #0
 800ad56:	e717      	b.n	800ab88 <USBD_StdEPReq+0x22>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	e715      	b.n	800ab88 <USBD_StdEPReq+0x22>

0800ad5c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800ad5c:	b330      	cbz	r0, 800adac <USBD_GetString+0x50>
{
 800ad5e:	b410      	push	{r4}
 800ad60:	4684      	mov	ip, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ad62:	7800      	ldrb	r0, [r0, #0]
 800ad64:	b148      	cbz	r0, 800ad7a <USBD_GetString+0x1e>
  uint8_t *pbuff = buf;
 800ad66:	4663      	mov	r3, ip
  {
    len++;
    pbuff++;
 800ad68:	4618      	mov	r0, r3
  while (*pbuff != (uint8_t)'\0')
 800ad6a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	d1fa      	bne.n	800ad68 <USBD_GetString+0xc>
    len++;
 800ad72:	f1cc 0301 	rsb	r3, ip, #1
 800ad76:	4418      	add	r0, r3
 800ad78:	b2c0      	uxtb	r0, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ad7a:	0040      	lsls	r0, r0, #1
 800ad7c:	3002      	adds	r0, #2
 800ad7e:	8010      	strh	r0, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800ad80:	7008      	strb	r0, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad82:	2303      	movs	r3, #3
 800ad84:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800ad86:	f89c 2000 	ldrb.w	r2, [ip]
 800ad8a:	b162      	cbz	r2, 800ada6 <USBD_GetString+0x4a>
 800ad8c:	4660      	mov	r0, ip
  idx++;
 800ad8e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800ad90:	2400      	movs	r4, #0
    unicode[idx] = *pdesc;
 800ad92:	54ca      	strb	r2, [r1, r3]
    idx++;
 800ad94:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	548c      	strb	r4, [r1, r2]
    idx++;
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800ad9e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d1f5      	bne.n	800ad92 <USBD_GetString+0x36>
}
 800ada6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	4770      	bx	lr

0800adae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adae:	b508      	push	{r3, lr}
 800adb0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adb2:	2202      	movs	r2, #2
 800adb4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800adb8:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800adba:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adbc:	460a      	mov	r2, r1
 800adbe:	2100      	movs	r1, #0
 800adc0:	f002 f927 	bl	800d012 <USBD_LL_Transmit>

  return USBD_OK;
}
 800adc4:	2000      	movs	r0, #0
 800adc6:	bd08      	pop	{r3, pc}

0800adc8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adc8:	b508      	push	{r3, lr}
 800adca:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adcc:	460a      	mov	r2, r1
 800adce:	2100      	movs	r1, #0
 800add0:	f002 f91f 	bl	800d012 <USBD_LL_Transmit>

  return USBD_OK;
}
 800add4:	2000      	movs	r0, #0
 800add6:	bd08      	pop	{r3, pc}

0800add8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800add8:	b508      	push	{r3, lr}
 800adda:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800addc:	460a      	mov	r2, r1
 800adde:	2100      	movs	r1, #0
 800ade0:	f002 f91f 	bl	800d022 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ade4:	2000      	movs	r0, #0
 800ade6:	bd08      	pop	{r3, pc}

0800ade8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ade8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adea:	2204      	movs	r2, #4
 800adec:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adf0:	2300      	movs	r3, #0
 800adf2:	461a      	mov	r2, r3
 800adf4:	4619      	mov	r1, r3
 800adf6:	f002 f90c 	bl	800d012 <USBD_LL_Transmit>

  return USBD_OK;
}
 800adfa:	2000      	movs	r0, #0
 800adfc:	bd08      	pop	{r3, pc}

0800adfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adfe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae00:	2205      	movs	r2, #5
 800ae02:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae06:	2300      	movs	r3, #0
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f002 f909 	bl	800d022 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ae10:	2000      	movs	r0, #0
 800ae12:	bd08      	pop	{r3, pc}

0800ae14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae14:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae16:	4b04      	ldr	r3, [pc, #16]	@ (800ae28 <disk_status+0x14>)
 800ae18:	181a      	adds	r2, r3, r0
 800ae1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	7a10      	ldrb	r0, [r2, #8]
 800ae24:	4798      	blx	r3
  return stat;
}
 800ae26:	bd08      	pop	{r3, pc}
 800ae28:	20001488 	.word	0x20001488

0800ae2c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ae2c:	4b09      	ldr	r3, [pc, #36]	@ (800ae54 <disk_initialize+0x28>)
 800ae2e:	5c1b      	ldrb	r3, [r3, r0]
 800ae30:	b973      	cbnz	r3, 800ae50 <disk_initialize+0x24>
{
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae36:	4b07      	ldr	r3, [pc, #28]	@ (800ae54 <disk_initialize+0x28>)
 800ae38:	181a      	adds	r2, r3, r0
 800ae3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	7a10      	ldrb	r0, [r2, #8]
 800ae44:	4798      	blx	r3
    if(stat == RES_OK)
 800ae46:	b910      	cbnz	r0, 800ae4e <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 800ae48:	4b02      	ldr	r3, [pc, #8]	@ (800ae54 <disk_initialize+0x28>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800ae4e:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800ae50:	2000      	movs	r0, #0
}
 800ae52:	4770      	bx	lr
 800ae54:	20001488 	.word	0x20001488

0800ae58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae58:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae5a:	4c05      	ldr	r4, [pc, #20]	@ (800ae70 <disk_read+0x18>)
 800ae5c:	eb04 0c00 	add.w	ip, r4, r0
 800ae60:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800ae64:	6860      	ldr	r0, [r4, #4]
 800ae66:	6884      	ldr	r4, [r0, #8]
 800ae68:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ae6c:	47a0      	blx	r4
  return res;
}
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	20001488 	.word	0x20001488

0800ae74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae74:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae76:	4c05      	ldr	r4, [pc, #20]	@ (800ae8c <disk_write+0x18>)
 800ae78:	eb04 0c00 	add.w	ip, r4, r0
 800ae7c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800ae80:	6860      	ldr	r0, [r4, #4]
 800ae82:	68c4      	ldr	r4, [r0, #12]
 800ae84:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ae88:	47a0      	blx	r4
  return res;
}
 800ae8a:	bd10      	pop	{r4, pc}
 800ae8c:	20001488 	.word	0x20001488

0800ae90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae90:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae92:	4b05      	ldr	r3, [pc, #20]	@ (800aea8 <disk_ioctl+0x18>)
 800ae94:	eb03 0c00 	add.w	ip, r3, r0
 800ae98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800aea4:	4798      	blx	r3
  return res;
}
 800aea6:	bd08      	pop	{r3, pc}
 800aea8:	20001488 	.word	0x20001488

0800aeac <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800aeac:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800aeae:	7882      	ldrb	r2, [r0, #2]
 800aeb0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800aeb4:	7843      	ldrb	r3, [r0, #1]
 800aeb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800aeba:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800aebc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800aec0:	4770      	bx	lr

0800aec2 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800aec2:	7001      	strb	r1, [r0, #0]
 800aec4:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800aec6:	7043      	strb	r3, [r0, #1]
 800aec8:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800aeca:	7083      	strb	r3, [r0, #2]
 800aecc:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 800aece:	70c1      	strb	r1, [r0, #3]
}
 800aed0:	4770      	bx	lr

0800aed2 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800aed2:	b13a      	cbz	r2, 800aee4 <mem_cpy+0x12>
 800aed4:	3801      	subs	r0, #1
 800aed6:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 800aed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aedc:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800aee0:	4291      	cmp	r1, r2
 800aee2:	d1f9      	bne.n	800aed8 <mem_cpy+0x6>
	}
}
 800aee4:	4770      	bx	lr

0800aee6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800aee6:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800aee8:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800aeec:	4290      	cmp	r0, r2
 800aeee:	d1fb      	bne.n	800aee8 <mem_set+0x2>
}
 800aef0:	4770      	bx	lr
	...

0800aef4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aef4:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800aef6:	4b22      	ldr	r3, [pc, #136]	@ (800af80 <chk_lock+0x8c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	b1f3      	cbz	r3, 800af3a <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aefc:	6802      	ldr	r2, [r0, #0]
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00d      	beq.n	800af1e <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af02:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 800af04:	4b1e      	ldr	r3, [pc, #120]	@ (800af80 <chk_lock+0x8c>)
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	b32b      	cbz	r3, 800af56 <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af0a:	6804      	ldr	r4, [r0, #0]
 800af0c:	42a3      	cmp	r3, r4
 800af0e:	d016      	beq.n	800af3e <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af10:	2a00      	cmp	r2, #0
 800af12:	d131      	bne.n	800af78 <chk_lock+0x84>
 800af14:	2902      	cmp	r1, #2
 800af16:	bf14      	ite	ne
 800af18:	2012      	movne	r0, #18
 800af1a:	2000      	moveq	r0, #0
 800af1c:	e029      	b.n	800af72 <chk_lock+0x7e>
				Files[i].clu == dp->obj.sclust &&
 800af1e:	4b18      	ldr	r3, [pc, #96]	@ (800af80 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	6883      	ldr	r3, [r0, #8]
 800af24:	429a      	cmp	r2, r3
 800af26:	d001      	beq.n	800af2c <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af28:	2200      	movs	r2, #0
 800af2a:	e7eb      	b.n	800af04 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 800af2c:	4b14      	ldr	r3, [pc, #80]	@ (800af80 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	6943      	ldr	r3, [r0, #20]
 800af32:	429a      	cmp	r2, r3
 800af34:	d011      	beq.n	800af5a <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af36:	2200      	movs	r2, #0
 800af38:	e7e4      	b.n	800af04 <chk_lock+0x10>
			be = 1;
 800af3a:	2201      	movs	r2, #1
 800af3c:	e7e2      	b.n	800af04 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800af3e:	4b10      	ldr	r3, [pc, #64]	@ (800af80 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af40:	695c      	ldr	r4, [r3, #20]
 800af42:	6883      	ldr	r3, [r0, #8]
 800af44:	429c      	cmp	r4, r3
 800af46:	d1e3      	bne.n	800af10 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 800af48:	4b0d      	ldr	r3, [pc, #52]	@ (800af80 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800af4a:	699c      	ldr	r4, [r3, #24]
 800af4c:	6943      	ldr	r3, [r0, #20]
 800af4e:	429c      	cmp	r4, r3
 800af50:	d1de      	bne.n	800af10 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af52:	2201      	movs	r2, #1
 800af54:	e002      	b.n	800af5c <chk_lock+0x68>
			be = 1;
 800af56:	2201      	movs	r2, #1
 800af58:	e7da      	b.n	800af10 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af5a:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af5c:	b971      	cbnz	r1, 800af7c <chk_lock+0x88>
 800af5e:	4b08      	ldr	r3, [pc, #32]	@ (800af80 <chk_lock+0x8c>)
 800af60:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800af64:	8998      	ldrh	r0, [r3, #12]
 800af66:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800af6a:	bf14      	ite	ne
 800af6c:	2000      	movne	r0, #0
 800af6e:	2001      	moveq	r0, #1
 800af70:	0100      	lsls	r0, r0, #4
}
 800af72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af76:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af78:	2000      	movs	r0, #0
 800af7a:	e7fa      	b.n	800af72 <chk_lock+0x7e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af7c:	2010      	movs	r0, #16
 800af7e:	e7f8      	b.n	800af72 <chk_lock+0x7e>
 800af80:	20001460 	.word	0x20001460

0800af84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af84:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800af86:	6802      	ldr	r2, [r0, #0]
 800af88:	4b2b      	ldr	r3, [pc, #172]	@ (800b038 <inc_lock+0xb4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d00c      	beq.n	800afaa <inc_lock+0x26>
 800af90:	4c29      	ldr	r4, [pc, #164]	@ (800b038 <inc_lock+0xb4>)
 800af92:	6924      	ldr	r4, [r4, #16]
 800af94:	4294      	cmp	r4, r2
 800af96:	d024      	beq.n	800afe2 <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af98:	f04f 0c00 	mov.w	ip, #0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d02f      	beq.n	800b000 <inc_lock+0x7c>
 800afa0:	4b25      	ldr	r3, [pc, #148]	@ (800b038 <inc_lock+0xb4>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	b353      	cbz	r3, 800affc <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800afa6:	2000      	movs	r0, #0
 800afa8:	e019      	b.n	800afde <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 800afaa:	4c23      	ldr	r4, [pc, #140]	@ (800b038 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800afac:	6865      	ldr	r5, [r4, #4]
 800afae:	6884      	ldr	r4, [r0, #8]
 800afb0:	42a5      	cmp	r5, r4
 800afb2:	d1ed      	bne.n	800af90 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 800afb4:	4c20      	ldr	r4, [pc, #128]	@ (800b038 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800afb6:	68a5      	ldr	r5, [r4, #8]
 800afb8:	6944      	ldr	r4, [r0, #20]
 800afba:	42a5      	cmp	r5, r4
 800afbc:	d1e8      	bne.n	800af90 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afbe:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800afc2:	2900      	cmp	r1, #0
 800afc4:	d12d      	bne.n	800b022 <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800afc6:	4b1c      	ldr	r3, [pc, #112]	@ (800b038 <inc_lock+0xb4>)
 800afc8:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800afcc:	899b      	ldrh	r3, [r3, #12]
 800afce:	3301      	adds	r3, #1
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	4a19      	ldr	r2, [pc, #100]	@ (800b038 <inc_lock+0xb4>)
 800afd4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800afd8:	8193      	strh	r3, [r2, #12]

	return i + 1;
 800afda:	f10c 0001 	add.w	r0, ip, #1
}
 800afde:	bc30      	pop	{r4, r5}
 800afe0:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 800afe2:	4c15      	ldr	r4, [pc, #84]	@ (800b038 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800afe4:	6965      	ldr	r5, [r4, #20]
 800afe6:	6884      	ldr	r4, [r0, #8]
 800afe8:	42a5      	cmp	r5, r4
 800afea:	d1d5      	bne.n	800af98 <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 800afec:	4c12      	ldr	r4, [pc, #72]	@ (800b038 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800afee:	69a5      	ldr	r5, [r4, #24]
 800aff0:	6944      	ldr	r4, [r0, #20]
 800aff2:	42a5      	cmp	r5, r4
 800aff4:	d1d0      	bne.n	800af98 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aff6:	f04f 0c01 	mov.w	ip, #1
 800affa:	e7e2      	b.n	800afc2 <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800affc:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 800b000:	4d0d      	ldr	r5, [pc, #52]	@ (800b038 <inc_lock+0xb4>)
 800b002:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800b006:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800b00a:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800b00c:	6882      	ldr	r2, [r0, #8]
 800b00e:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 800b010:	6942      	ldr	r2, [r0, #20]
 800b012:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 800b014:	2200      	movs	r2, #0
 800b016:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b018:	2900      	cmp	r1, #0
 800b01a:	d0d4      	beq.n	800afc6 <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b01c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b020:	e7d7      	b.n	800afd2 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b022:	4b05      	ldr	r3, [pc, #20]	@ (800b038 <inc_lock+0xb4>)
 800b024:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800b028:	899b      	ldrh	r3, [r3, #12]
 800b02a:	b913      	cbnz	r3, 800b032 <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b02c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b030:	e7cf      	b.n	800afd2 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b032:	2000      	movs	r0, #0
 800b034:	e7d3      	b.n	800afde <inc_lock+0x5a>
 800b036:	bf00      	nop
 800b038:	20001460 	.word	0x20001460

0800b03c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b03c:	3801      	subs	r0, #1
 800b03e:	2801      	cmp	r0, #1
 800b040:	d810      	bhi.n	800b064 <dec_lock+0x28>
		n = Files[i].ctr;
 800b042:	4b0e      	ldr	r3, [pc, #56]	@ (800b07c <dec_lock+0x40>)
 800b044:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b048:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b04a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b04e:	d00b      	beq.n	800b068 <dec_lock+0x2c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800b050:	b17b      	cbz	r3, 800b072 <dec_lock+0x36>
 800b052:	3b01      	subs	r3, #1
 800b054:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800b056:	4a09      	ldr	r2, [pc, #36]	@ (800b07c <dec_lock+0x40>)
 800b058:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800b05c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b05e:	b143      	cbz	r3, 800b072 <dec_lock+0x36>
		res = FR_OK;
 800b060:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 800b062:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b064:	2002      	movs	r0, #2
 800b066:	4770      	bx	lr
		Files[i].ctr = n;
 800b068:	4b04      	ldr	r3, [pc, #16]	@ (800b07c <dec_lock+0x40>)
 800b06a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b06e:	2200      	movs	r2, #0
 800b070:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b072:	0103      	lsls	r3, r0, #4
 800b074:	2000      	movs	r0, #0
 800b076:	4a01      	ldr	r2, [pc, #4]	@ (800b07c <dec_lock+0x40>)
 800b078:	50d0      	str	r0, [r2, r3]
 800b07a:	4770      	bx	lr
 800b07c:	20001460 	.word	0x20001460

0800b080 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b080:	4b08      	ldr	r3, [pc, #32]	@ (800b0a4 <clear_lock+0x24>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4298      	cmp	r0, r3
 800b086:	d004      	beq.n	800b092 <clear_lock+0x12>
 800b088:	4b06      	ldr	r3, [pc, #24]	@ (800b0a4 <clear_lock+0x24>)
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	4283      	cmp	r3, r0
 800b08e:	d004      	beq.n	800b09a <clear_lock+0x1a>
	}
}
 800b090:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b092:	4b04      	ldr	r3, [pc, #16]	@ (800b0a4 <clear_lock+0x24>)
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e7f6      	b.n	800b088 <clear_lock+0x8>
 800b09a:	4b02      	ldr	r3, [pc, #8]	@ (800b0a4 <clear_lock+0x24>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	611a      	str	r2, [r3, #16]
}
 800b0a0:	e7f6      	b.n	800b090 <clear_lock+0x10>
 800b0a2:	bf00      	nop
 800b0a4:	20001460 	.word	0x20001460

0800b0a8 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800b0a8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0aa:	6983      	ldr	r3, [r0, #24]
 800b0ac:	3b02      	subs	r3, #2
 800b0ae:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800b0b0:	bf83      	ittte	hi
 800b0b2:	8943      	ldrhhi	r3, [r0, #10]
 800b0b4:	6ac0      	ldrhi	r0, [r0, #44]	@ 0x2c
 800b0b6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b0ba:	2000      	movls	r0, #0
}
 800b0bc:	4770      	bx	lr

0800b0be <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b0be:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b0c0:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b0c2:	0a49      	lsrs	r1, r1, #9
 800b0c4:	6800      	ldr	r0, [r0, #0]
 800b0c6:	8940      	ldrh	r0, [r0, #10]
 800b0c8:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b0cc:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b0ce:	b148      	cbz	r0, 800b0e4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b0d0:	4281      	cmp	r1, r0
 800b0d2:	d305      	bcc.n	800b0e0 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 800b0d4:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b0d6:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d1f8      	bne.n	800b0d0 <clmt_clust+0x12>
 800b0de:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	4408      	add	r0, r1
}
 800b0e4:	4770      	bx	lr

0800b0e6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b0e6:	4602      	mov	r2, r0
	BYTE sum = 0;
	UINT n = 11;
 800b0e8:	f100 0c0b 	add.w	ip, r0, #11
	BYTE sum = 0;
 800b0ec:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b0ee:	01c3      	lsls	r3, r0, #7
 800b0f0:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800b0f4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b0f8:	fa51 f383 	uxtab	r3, r1, r3
 800b0fc:	b2d8      	uxtb	r0, r3
	} while (--n);
 800b0fe:	4562      	cmp	r2, ip
 800b100:	d1f5      	bne.n	800b0ee <sum_sfn+0x8>
	return sum;
}
 800b102:	4770      	bx	lr

0800b104 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b104:	6801      	ldr	r1, [r0, #0]
 800b106:	b301      	cbz	r1, 800b14a <get_ldnumber+0x46>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b108:	f891 c000 	ldrb.w	ip, [r1]
 800b10c:	f1bc 0f1f 	cmp.w	ip, #31
 800b110:	d90b      	bls.n	800b12a <get_ldnumber+0x26>
 800b112:	460a      	mov	r2, r1
 800b114:	4663      	mov	r3, ip
 800b116:	2b3a      	cmp	r3, #58	@ 0x3a
 800b118:	d00a      	beq.n	800b130 <get_ldnumber+0x2c>
 800b11a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b11e:	2b1f      	cmp	r3, #31
 800b120:	d8f9      	bhi.n	800b116 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b122:	2b3a      	cmp	r3, #58	@ 0x3a
 800b124:	d004      	beq.n	800b130 <get_ldnumber+0x2c>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b126:	2000      	movs	r0, #0
 800b128:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b12a:	460a      	mov	r2, r1
 800b12c:	4663      	mov	r3, ip
 800b12e:	e7f8      	b.n	800b122 <get_ldnumber+0x1e>
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b130:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b134:	d10c      	bne.n	800b150 <get_ldnumber+0x4c>
			i = *tp++ - '0';
 800b136:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b138:	428a      	cmp	r2, r1
 800b13a:	d002      	beq.n	800b142 <get_ldnumber+0x3e>
	int vol = -1;
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 800b140:	4770      	bx	lr
					*path = ++tt;
 800b142:	3201      	adds	r2, #1
 800b144:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 800b146:	2000      	movs	r0, #0
 800b148:	4770      	bx	lr
	int vol = -1;
 800b14a:	f04f 30ff 	mov.w	r0, #4294967295
 800b14e:	4770      	bx	lr
 800b150:	f04f 30ff 	mov.w	r0, #4294967295
 800b154:	4770      	bx	lr

0800b156 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b156:	b538      	push	{r3, r4, r5, lr}
 800b158:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b15a:	4604      	mov	r4, r0
 800b15c:	b198      	cbz	r0, 800b186 <validate+0x30>
 800b15e:	6803      	ldr	r3, [r0, #0]
 800b160:	b19b      	cbz	r3, 800b18a <validate+0x34>
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	b1a2      	cbz	r2, 800b190 <validate+0x3a>
 800b166:	8881      	ldrh	r1, [r0, #4]
 800b168:	88da      	ldrh	r2, [r3, #6]
 800b16a:	4291      	cmp	r1, r2
 800b16c:	d003      	beq.n	800b176 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800b16e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b170:	2400      	movs	r4, #0
 800b172:	602c      	str	r4, [r5, #0]
	return res;
}
 800b174:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b176:	7858      	ldrb	r0, [r3, #1]
 800b178:	f7ff fe4c 	bl	800ae14 <disk_status>
 800b17c:	f010 0001 	ands.w	r0, r0, #1
 800b180:	d109      	bne.n	800b196 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b182:	6824      	ldr	r4, [r4, #0]
 800b184:	e7f5      	b.n	800b172 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800b186:	2009      	movs	r0, #9
 800b188:	e7f3      	b.n	800b172 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b18a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800b18c:	2009      	movs	r0, #9
 800b18e:	e7f0      	b.n	800b172 <validate+0x1c>
 800b190:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b192:	2400      	movs	r4, #0
 800b194:	e7ed      	b.n	800b172 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800b196:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b198:	2400      	movs	r4, #0
 800b19a:	e7ea      	b.n	800b172 <validate+0x1c>

0800b19c <sync_window>:
{
 800b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b1a0:	78c5      	ldrb	r5, [r0, #3]
 800b1a2:	b915      	cbnz	r5, 800b1aa <sync_window+0xe>
}
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800b1ac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b1ae:	f100 0834 	add.w	r8, r0, #52	@ 0x34
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	4641      	mov	r1, r8
 800b1b8:	7840      	ldrb	r0, [r0, #1]
 800b1ba:	f7ff fe5b 	bl	800ae74 <disk_write>
 800b1be:	4605      	mov	r5, r0
 800b1c0:	b9b8      	cbnz	r0, 800b1f2 <sync_window+0x56>
			fs->wflag = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b1c8:	1af3      	subs	r3, r6, r3
 800b1ca:	69e2      	ldr	r2, [r4, #28]
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d2e9      	bcs.n	800b1a4 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1d0:	78a7      	ldrb	r7, [r4, #2]
 800b1d2:	2f01      	cmp	r7, #1
 800b1d4:	d9e6      	bls.n	800b1a4 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1d6:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 800b1da:	69e3      	ldr	r3, [r4, #28]
 800b1dc:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1de:	464b      	mov	r3, r9
 800b1e0:	4632      	mov	r2, r6
 800b1e2:	4641      	mov	r1, r8
 800b1e4:	7860      	ldrb	r0, [r4, #1]
 800b1e6:	f7ff fe45 	bl	800ae74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1ea:	3f01      	subs	r7, #1
 800b1ec:	2f01      	cmp	r7, #1
 800b1ee:	d1f4      	bne.n	800b1da <sync_window+0x3e>
 800b1f0:	e7d8      	b.n	800b1a4 <sync_window+0x8>
			res = FR_DISK_ERR;
 800b1f2:	2501      	movs	r5, #1
 800b1f4:	e7d6      	b.n	800b1a4 <sync_window+0x8>

0800b1f6 <move_window>:
{
 800b1f6:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b1fa:	428b      	cmp	r3, r1
 800b1fc:	d101      	bne.n	800b202 <move_window+0xc>
	FRESULT res = FR_OK;
 800b1fe:	2000      	movs	r0, #0
}
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	4604      	mov	r4, r0
 800b204:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800b206:	f7ff ffc9 	bl	800b19c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d1f8      	bne.n	800b200 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b20e:	2301      	movs	r3, #1
 800b210:	462a      	mov	r2, r5
 800b212:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800b216:	7860      	ldrb	r0, [r4, #1]
 800b218:	f7ff fe1e 	bl	800ae58 <disk_read>
				res = FR_DISK_ERR;
 800b21c:	2800      	cmp	r0, #0
 800b21e:	bf1c      	itt	ne
 800b220:	2001      	movne	r0, #1
 800b222:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800b226:	6325      	str	r5, [r4, #48]	@ 0x30
 800b228:	e7ea      	b.n	800b200 <move_window+0xa>

0800b22a <get_fileinfo>:
{
 800b22a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800b22e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800b232:	2300      	movs	r3, #0
 800b234:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b236:	69c3      	ldr	r3, [r0, #28]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d079      	beq.n	800b330 <get_fileinfo+0x106>
 800b23c:	4605      	mov	r5, r0
 800b23e:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b240:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b246:	d01d      	beq.n	800b284 <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b248:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b24c:	8818      	ldrh	r0, [r3, #0]
 800b24e:	b198      	cbz	r0, 800b278 <get_fileinfo+0x4e>
 800b250:	f101 0715 	add.w	r7, r1, #21
			i = j = 0;
 800b254:	2600      	movs	r6, #0
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b256:	46b1      	mov	r9, r6
 800b258:	4649      	mov	r1, r9
 800b25a:	f001 fc01 	bl	800ca60 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b25e:	b168      	cbz	r0, 800b27c <get_fileinfo+0x52>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b260:	2eff      	cmp	r6, #255	@ 0xff
 800b262:	d015      	beq.n	800b290 <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 800b264:	3601      	adds	r6, #1
 800b266:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b26a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b26e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800b272:	2800      	cmp	r0, #0
 800b274:	d1f0      	bne.n	800b258 <get_fileinfo+0x2e>
 800b276:	e002      	b.n	800b27e <get_fileinfo+0x54>
			i = j = 0;
 800b278:	2600      	movs	r6, #0
 800b27a:	e000      	b.n	800b27e <get_fileinfo+0x54>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b27c:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b27e:	4426      	add	r6, r4
 800b280:	2300      	movs	r3, #0
 800b282:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b284:	7da0      	ldrb	r0, [r4, #22]
	i = j = 0;
 800b286:	f04f 0c00 	mov.w	ip, #0
 800b28a:	4662      	mov	r2, ip
			fno->altname[j++] = '.';
 800b28c:	262e      	movs	r6, #46	@ 0x2e
 800b28e:	e013      	b.n	800b2b8 <get_fileinfo+0x8e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b290:	2600      	movs	r6, #0
 800b292:	e7f4      	b.n	800b27e <get_fileinfo+0x54>
			if (!lfv) fno->fname[j] = '.';
 800b294:	b918      	cbnz	r0, 800b29e <get_fileinfo+0x74>
 800b296:	eb04 010c 	add.w	r1, r4, ip
 800b29a:	272e      	movs	r7, #46	@ 0x2e
 800b29c:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800b29e:	eb04 010c 	add.w	r1, r4, ip
 800b2a2:	724e      	strb	r6, [r1, #9]
 800b2a4:	f10c 0c01 	add.w	ip, ip, #1
 800b2a8:	e010      	b.n	800b2cc <get_fileinfo+0xa2>
			fno->fname[j] = c;
 800b2aa:	eb04 010c 	add.w	r1, r4, ip
 800b2ae:	758b      	strb	r3, [r1, #22]
		j++;
 800b2b0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800b2b4:	2a0b      	cmp	r2, #11
 800b2b6:	d01e      	beq.n	800b2f6 <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[i++];
 800b2b8:	6a29      	ldr	r1, [r5, #32]
 800b2ba:	5c8b      	ldrb	r3, [r1, r2]
 800b2bc:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d0f8      	beq.n	800b2b4 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b2c2:	2b05      	cmp	r3, #5
 800b2c4:	bf08      	it	eq
 800b2c6:	23e5      	moveq	r3, #229	@ 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800b2c8:	2a09      	cmp	r2, #9
 800b2ca:	d0e3      	beq.n	800b294 <get_fileinfo+0x6a>
		fno->altname[j] = c;
 800b2cc:	eb04 010c 	add.w	r1, r4, ip
 800b2d0:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d1ec      	bne.n	800b2b0 <get_fileinfo+0x86>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b2d6:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 800b2da:	b2c9      	uxtb	r1, r1
 800b2dc:	2919      	cmp	r1, #25
 800b2de:	d8e4      	bhi.n	800b2aa <get_fileinfo+0x80>
 800b2e0:	6a29      	ldr	r1, [r5, #32]
 800b2e2:	7b0f      	ldrb	r7, [r1, #12]
 800b2e4:	2a09      	cmp	r2, #9
 800b2e6:	bf34      	ite	cc
 800b2e8:	2108      	movcc	r1, #8
 800b2ea:	2110      	movcs	r1, #16
 800b2ec:	420f      	tst	r7, r1
				c += 0x20;			/* To lower */
 800b2ee:	bf1c      	itt	ne
 800b2f0:	3320      	addne	r3, #32
 800b2f2:	b2db      	uxtbne	r3, r3
 800b2f4:	e7d9      	b.n	800b2aa <get_fileinfo+0x80>
	if (!lfv) {
 800b2f6:	b940      	cbnz	r0, 800b30a <get_fileinfo+0xe0>
		fno->fname[j] = 0;
 800b2f8:	eb04 030c 	add.w	r3, r4, ip
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	759a      	strb	r2, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b300:	6a2b      	ldr	r3, [r5, #32]
 800b302:	7b1b      	ldrb	r3, [r3, #12]
 800b304:	4293      	cmp	r3, r2
 800b306:	bf08      	it	eq
 800b308:	4694      	moveq	ip, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b30a:	44a4      	add	ip, r4
 800b30c:	2300      	movs	r3, #0
 800b30e:	f88c 3009 	strb.w	r3, [ip, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b312:	6a2b      	ldr	r3, [r5, #32]
 800b314:	7adb      	ldrb	r3, [r3, #11]
 800b316:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b318:	6a28      	ldr	r0, [r5, #32]
 800b31a:	301c      	adds	r0, #28
 800b31c:	f7ff fdc6 	bl	800aeac <ld_dword>
 800b320:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b322:	6a28      	ldr	r0, [r5, #32]
 800b324:	3016      	adds	r0, #22
 800b326:	f7ff fdc1 	bl	800aeac <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b32a:	80e0      	strh	r0, [r4, #6]
 800b32c:	0c00      	lsrs	r0, r0, #16
 800b32e:	80a0      	strh	r0, [r4, #4]
}
 800b330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b334 <sync_fs>:
{
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4604      	mov	r4, r0
	res = sync_window(fs);
 800b338:	f7ff ff30 	bl	800b19c <sync_window>
	if (res == FR_OK) {
 800b33c:	b950      	cbnz	r0, 800b354 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b33e:	7823      	ldrb	r3, [r4, #0]
 800b340:	2b03      	cmp	r3, #3
 800b342:	d008      	beq.n	800b356 <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b344:	2200      	movs	r2, #0
 800b346:	4611      	mov	r1, r2
 800b348:	7860      	ldrb	r0, [r4, #1]
 800b34a:	f7ff fda1 	bl	800ae90 <disk_ioctl>
 800b34e:	3800      	subs	r0, #0
 800b350:	bf18      	it	ne
 800b352:	2001      	movne	r0, #1
}
 800b354:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b356:	7923      	ldrb	r3, [r4, #4]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d1f3      	bne.n	800b344 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 800b35c:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800b360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b364:	2100      	movs	r1, #0
 800b366:	4628      	mov	r0, r5
 800b368:	f7ff fdbd 	bl	800aee6 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800b36c:	2355      	movs	r3, #85	@ 0x55
 800b36e:	f884 3232 	strb.w	r3, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val;
 800b372:	23aa      	movs	r3, #170	@ 0xaa
 800b374:	f884 3233 	strb.w	r3, [r4, #563]	@ 0x233
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b378:	490e      	ldr	r1, [pc, #56]	@ (800b3b4 <sync_fs+0x80>)
 800b37a:	4628      	mov	r0, r5
 800b37c:	f7ff fda1 	bl	800aec2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b380:	490d      	ldr	r1, [pc, #52]	@ (800b3b8 <sync_fs+0x84>)
 800b382:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800b386:	f7ff fd9c 	bl	800aec2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b38a:	6961      	ldr	r1, [r4, #20]
 800b38c:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800b390:	f7ff fd97 	bl	800aec2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b394:	6921      	ldr	r1, [r4, #16]
 800b396:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800b39a:	f7ff fd92 	bl	800aec2 <st_dword>
			fs->winsect = fs->volbase + 1;
 800b39e:	6a22      	ldr	r2, [r4, #32]
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	7860      	ldrb	r0, [r4, #1]
 800b3aa:	f7ff fd63 	bl	800ae74 <disk_write>
			fs->fsi_flag = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	7123      	strb	r3, [r4, #4]
 800b3b2:	e7c7      	b.n	800b344 <sync_fs+0x10>
 800b3b4:	41615252 	.word	0x41615252
 800b3b8:	61417272 	.word	0x61417272

0800b3bc <put_fat>:
{
 800b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3c0:	2901      	cmp	r1, #1
 800b3c2:	f240 8089 	bls.w	800b4d8 <put_fat+0x11c>
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	4615      	mov	r5, r2
 800b3cc:	6983      	ldr	r3, [r0, #24]
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	f240 8084 	bls.w	800b4dc <put_fat+0x120>
		switch (fs->fs_type) {
 800b3d4:	7803      	ldrb	r3, [r0, #0]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d04d      	beq.n	800b476 <put_fat+0xba>
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d060      	beq.n	800b4a0 <put_fat+0xe4>
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d003      	beq.n	800b3ea <put_fat+0x2e>
 800b3e2:	2702      	movs	r7, #2
}
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b3ea:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3ee:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b3f0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b3f4:	f7ff feff 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d1f2      	bne.n	800b3e4 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 800b3fe:	f106 0934 	add.w	r9, r6, #52	@ 0x34
 800b402:	f108 0a01 	add.w	sl, r8, #1
 800b406:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b40a:	f014 0f01 	tst.w	r4, #1
 800b40e:	d01a      	beq.n	800b446 <put_fat+0x8a>
 800b410:	f819 3008 	ldrb.w	r3, [r9, r8]
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800b41c:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800b420:	2301      	movs	r3, #1
 800b422:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b424:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b426:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800b42a:	4630      	mov	r0, r6
 800b42c:	f7ff fee3 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800b430:	2800      	cmp	r0, #0
 800b432:	d155      	bne.n	800b4e0 <put_fat+0x124>
			p = fs->win + bc % SS(fs);
 800b434:	f3ca 0108 	ubfx	r1, sl, #0, #9
 800b438:	4449      	add	r1, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b43a:	f3c5 1307 	ubfx	r3, r5, #4, #8
 800b43e:	700b      	strb	r3, [r1, #0]
			fs->wflag = 1;
 800b440:	2301      	movs	r3, #1
 800b442:	70f3      	strb	r3, [r6, #3]
			break;
 800b444:	e7ce      	b.n	800b3e4 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b446:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 800b44a:	2301      	movs	r3, #1
 800b44c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b44e:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b450:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fece 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d142      	bne.n	800b4e4 <put_fat+0x128>
			p = fs->win + bc % SS(fs);
 800b45e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800b462:	eb09 010a 	add.w	r1, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b466:	f819 300a 	ldrb.w	r3, [r9, sl]
 800b46a:	f023 030f 	bic.w	r3, r3, #15
 800b46e:	f3c5 2203 	ubfx	r2, r5, #8, #4
 800b472:	4313      	orrs	r3, r2
 800b474:	e7e3      	b.n	800b43e <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b476:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b478:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b47c:	f7ff febb 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800b480:	4607      	mov	r7, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d1ae      	bne.n	800b3e4 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b486:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800b48a:	0064      	lsls	r4, r4, #1
 800b48c:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800b490:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800b492:	551d      	strb	r5, [r3, r4]
 800b494:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 800b498:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800b49a:	2301      	movs	r3, #1
 800b49c:	70f3      	strb	r3, [r6, #3]
			break;
 800b49e:	e7a1      	b.n	800b3e4 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4a0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b4a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b4a6:	f7ff fea6 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d199      	bne.n	800b3e4 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4b0:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 800b4b4:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800b4b8:	00a4      	lsls	r4, r4, #2
 800b4ba:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800b4be:	441c      	add	r4, r3
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7ff fcf3 	bl	800aeac <ld_dword>
 800b4c6:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b4ca:	4329      	orrs	r1, r5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f7ff fcf8 	bl	800aec2 <st_dword>
			fs->wflag = 1;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	70f3      	strb	r3, [r6, #3]
			break;
 800b4d6:	e785      	b.n	800b3e4 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 800b4d8:	2702      	movs	r7, #2
 800b4da:	e783      	b.n	800b3e4 <put_fat+0x28>
 800b4dc:	2702      	movs	r7, #2
 800b4de:	e781      	b.n	800b3e4 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4e0:	4607      	mov	r7, r0
 800b4e2:	e77f      	b.n	800b3e4 <put_fat+0x28>
 800b4e4:	4607      	mov	r7, r0
	return res;
 800b4e6:	e77d      	b.n	800b3e4 <put_fat+0x28>

0800b4e8 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800b4e8:	768a      	strb	r2, [r1, #26]
 800b4ea:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 800b4ee:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800b4f0:	7803      	ldrb	r3, [r0, #0]
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d000      	beq.n	800b4f8 <st_clust+0x10>
}
 800b4f6:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b4f8:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b4fa:	750a      	strb	r2, [r1, #20]
 800b4fc:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800b4fe:	754a      	strb	r2, [r1, #21]
}
 800b500:	e7f9      	b.n	800b4f6 <st_clust+0xe>

0800b502 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b502:	2901      	cmp	r1, #1
 800b504:	d958      	bls.n	800b5b8 <get_fat+0xb6>
{
 800b506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b508:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b50a:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b50c:	69b3      	ldr	r3, [r6, #24]
 800b50e:	428b      	cmp	r3, r1
 800b510:	d954      	bls.n	800b5bc <get_fat+0xba>
		switch (fs->fs_type) {
 800b512:	7833      	ldrb	r3, [r6, #0]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d02c      	beq.n	800b572 <get_fat+0x70>
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d03b      	beq.n	800b594 <get_fat+0x92>
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d001      	beq.n	800b524 <get_fat+0x22>
 800b520:	2001      	movs	r0, #1
 800b522:	e04c      	b.n	800b5be <get_fat+0xbc>
			bc = (UINT)clst; bc += bc / 2;
 800b524:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b528:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b52a:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff fe61 	bl	800b1f6 <move_window>
 800b534:	b110      	cbz	r0, 800b53c <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
 800b53a:	e040      	b.n	800b5be <get_fat+0xbc>
			wc = fs->win[bc++ % SS(fs)];
 800b53c:	1c6f      	adds	r7, r5, #1
 800b53e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800b542:	4435      	add	r5, r6
 800b544:	f895 5034 	ldrb.w	r5, [r5, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b548:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b54a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff fe51 	bl	800b1f6 <move_window>
 800b554:	bba0      	cbnz	r0, 800b5c0 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b556:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b55a:	4437      	add	r7, r6
 800b55c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b560:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b564:	f014 0f01 	tst.w	r4, #1
 800b568:	bf14      	ite	ne
 800b56a:	0900      	lsrne	r0, r0, #4
 800b56c:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 800b570:	e025      	b.n	800b5be <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b572:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b574:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff fe3c 	bl	800b1f6 <move_window>
 800b57e:	bb10      	cbnz	r0, 800b5c6 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b580:	3634      	adds	r6, #52	@ 0x34
 800b582:	0064      	lsls	r4, r4, #1
 800b584:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800b588:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	5d30      	ldrb	r0, [r6, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b58e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 800b592:	e014      	b.n	800b5be <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b594:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800b596:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff fe2b 	bl	800b1f6 <move_window>
 800b5a0:	b9a0      	cbnz	r0, 800b5cc <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b5a2:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800b5a6:	00a4      	lsls	r4, r4, #2
 800b5a8:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800b5ac:	4420      	add	r0, r4
 800b5ae:	f7ff fc7d 	bl	800aeac <ld_dword>
 800b5b2:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800b5b6:	e002      	b.n	800b5be <get_fat+0xbc>
		val = 1;	/* Internal error */
 800b5b8:	2001      	movs	r0, #1
}
 800b5ba:	4770      	bx	lr
		val = 1;	/* Internal error */
 800b5bc:	2001      	movs	r0, #1
}
 800b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c4:	e7fb      	b.n	800b5be <get_fat+0xbc>
 800b5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ca:	e7f8      	b.n	800b5be <get_fat+0xbc>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800b5d0:	e7f5      	b.n	800b5be <get_fat+0xbc>

0800b5d2 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5d2:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800b5d6:	d245      	bcs.n	800b664 <dir_sdi+0x92>
{
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	4606      	mov	r6, r0
 800b5de:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5e0:	f011 0f1f 	tst.w	r1, #31
 800b5e4:	d140      	bne.n	800b668 <dir_sdi+0x96>
	FATFS *fs = dp->obj.fs;
 800b5e6:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800b5ea:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b5ec:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b5ee:	b93c      	cbnz	r4, 800b600 <dir_sdi+0x2e>
 800b5f0:	f898 3000 	ldrb.w	r3, [r8]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d91f      	bls.n	800b638 <dir_sdi+0x66>
		clst = fs->dirbase;
 800b5f8:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b5fc:	b1e3      	cbz	r3, 800b638 <dir_sdi+0x66>
		clst = fs->dirbase;
 800b5fe:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b600:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800b604:	025f      	lsls	r7, r3, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800b606:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 800b60a:	d310      	bcc.n	800b62e <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b60c:	4621      	mov	r1, r4
 800b60e:	4630      	mov	r0, r6
 800b610:	f7ff ff77 	bl	800b502 <get_fat>
 800b614:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b616:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b61a:	d029      	beq.n	800b670 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b61c:	2801      	cmp	r0, #1
 800b61e:	d929      	bls.n	800b674 <dir_sdi+0xa2>
 800b620:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b624:	4283      	cmp	r3, r0
 800b626:	d927      	bls.n	800b678 <dir_sdi+0xa6>
			ofs -= csz;
 800b628:	1bed      	subs	r5, r5, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 800b62a:	42af      	cmp	r7, r5
 800b62c:	d9ee      	bls.n	800b60c <dir_sdi+0x3a>
		dp->sect = clust2sect(fs, clst);
 800b62e:	4621      	mov	r1, r4
 800b630:	4640      	mov	r0, r8
 800b632:	f7ff fd39 	bl	800b0a8 <clust2sect>
 800b636:	e006      	b.n	800b646 <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b638:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b63c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b640:	d914      	bls.n	800b66c <dir_sdi+0x9a>
		dp->sect = fs->dirbase;
 800b642:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 800b646:	61f0      	str	r0, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800b648:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b64a:	b1b8      	cbz	r0, 800b67c <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b64c:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 800b650:	61f0      	str	r0, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b652:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 800b656:	f3c5 0108 	ubfx	r1, r5, #0, #9
 800b65a:	4441      	add	r1, r8
 800b65c:	6231      	str	r1, [r6, #32]
	return FR_OK;
 800b65e:	2000      	movs	r0, #0
}
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800b664:	2002      	movs	r0, #2
}
 800b666:	4770      	bx	lr
		return FR_INT_ERR;
 800b668:	2002      	movs	r0, #2
 800b66a:	e7f9      	b.n	800b660 <dir_sdi+0x8e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b66c:	2002      	movs	r0, #2
 800b66e:	e7f7      	b.n	800b660 <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b670:	2001      	movs	r0, #1
 800b672:	e7f5      	b.n	800b660 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b674:	2002      	movs	r0, #2
 800b676:	e7f3      	b.n	800b660 <dir_sdi+0x8e>
 800b678:	2002      	movs	r0, #2
 800b67a:	e7f1      	b.n	800b660 <dir_sdi+0x8e>
	if (!dp->sect) return FR_INT_ERR;
 800b67c:	2002      	movs	r0, #2
 800b67e:	e7ef      	b.n	800b660 <dir_sdi+0x8e>

0800b680 <create_chain>:
{
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800b686:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800b688:	4688      	mov	r8, r1
 800b68a:	b939      	cbnz	r1, 800b69c <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b68c:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b68e:	b195      	cbz	r5, 800b6b6 <create_chain+0x36>
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	42ab      	cmp	r3, r5
 800b694:	bf98      	it	ls
 800b696:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 800b698:	462c      	mov	r4, r5
 800b69a:	e01b      	b.n	800b6d4 <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b69c:	f7ff ff31 	bl	800b502 <get_fat>
 800b6a0:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b6a2:	2801      	cmp	r0, #1
 800b6a4:	d946      	bls.n	800b734 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b6a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6aa:	d048      	beq.n	800b73e <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	4282      	cmp	r2, r0
 800b6b0:	d845      	bhi.n	800b73e <create_chain+0xbe>
		scl = clst;
 800b6b2:	4645      	mov	r5, r8
 800b6b4:	e7f0      	b.n	800b698 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6b6:	2501      	movs	r5, #1
 800b6b8:	e7ee      	b.n	800b698 <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff ff20 	bl	800b502 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	b170      	cbz	r0, 800b6e4 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	d039      	beq.n	800b73e <create_chain+0xbe>
 800b6ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6ce:	d036      	beq.n	800b73e <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6d0:	42ac      	cmp	r4, r5
 800b6d2:	d033      	beq.n	800b73c <create_chain+0xbc>
			ncl++;							/* Next cluster */
 800b6d4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	d8ee      	bhi.n	800b6ba <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800b6dc:	2d01      	cmp	r5, #1
 800b6de:	d92b      	bls.n	800b738 <create_chain+0xb8>
				ncl = 2;
 800b6e0:	2402      	movs	r4, #2
 800b6e2:	e7ea      	b.n	800b6ba <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f7ff fe66 	bl	800b3bc <put_fat>
		if (res == FR_OK && clst != 0) {
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	b9c8      	cbnz	r0, 800b728 <create_chain+0xa8>
 800b6f4:	f1b8 0f00 	cmp.w	r8, #0
 800b6f8:	d10e      	bne.n	800b718 <create_chain+0x98>
		fs->last_clst = ncl;
 800b6fa:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	3b02      	subs	r3, #2
 800b702:	429a      	cmp	r2, r3
 800b704:	bf9c      	itt	ls
 800b706:	f102 32ff 	addls.w	r2, r2, #4294967295
 800b70a:	617a      	strls	r2, [r7, #20]
		fs->fsi_flag |= 1;
 800b70c:	793b      	ldrb	r3, [r7, #4]
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	713b      	strb	r3, [r7, #4]
 800b714:	4623      	mov	r3, r4
 800b716:	e012      	b.n	800b73e <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b718:	4622      	mov	r2, r4
 800b71a:	4641      	mov	r1, r8
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff fe4d 	bl	800b3bc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b722:	4603      	mov	r3, r0
 800b724:	2800      	cmp	r0, #0
 800b726:	d0e8      	beq.n	800b6fa <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b728:	2b01      	cmp	r3, #1
 800b72a:	bf14      	ite	ne
 800b72c:	2301      	movne	r3, #1
 800b72e:	f04f 33ff 	moveq.w	r3, #4294967295
 800b732:	e004      	b.n	800b73e <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b734:	2301      	movs	r3, #1
 800b736:	e002      	b.n	800b73e <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 800b738:	2300      	movs	r3, #0
 800b73a:	e000      	b.n	800b73e <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b744 <remove_chain>:
{
 800b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b748:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b74a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b74c:	2901      	cmp	r1, #1
 800b74e:	d931      	bls.n	800b7b4 <remove_chain+0x70>
 800b750:	4606      	mov	r6, r0
 800b752:	4611      	mov	r1, r2
 800b754:	69ab      	ldr	r3, [r5, #24]
 800b756:	42a3      	cmp	r3, r4
 800b758:	d92f      	bls.n	800b7ba <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b75a:	b90a      	cbnz	r2, 800b760 <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b75c:	2700      	movs	r7, #0
 800b75e:	e00a      	b.n	800b776 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b760:	f04f 32ff 	mov.w	r2, #4294967295
 800b764:	4628      	mov	r0, r5
 800b766:	f7ff fe29 	bl	800b3bc <put_fat>
		if (res != FR_OK) return res;
 800b76a:	4684      	mov	ip, r0
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0f5      	beq.n	800b75c <remove_chain+0x18>
 800b770:	e025      	b.n	800b7be <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b772:	42a2      	cmp	r2, r4
 800b774:	d923      	bls.n	800b7be <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b776:	46a0      	mov	r8, r4
 800b778:	4621      	mov	r1, r4
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff fec1 	bl	800b502 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800b780:	4604      	mov	r4, r0
 800b782:	b1f8      	cbz	r0, 800b7c4 <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b784:	2801      	cmp	r0, #1
 800b786:	d020      	beq.n	800b7ca <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b788:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b78c:	d020      	beq.n	800b7d0 <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b78e:	463a      	mov	r2, r7
 800b790:	4641      	mov	r1, r8
 800b792:	4628      	mov	r0, r5
 800b794:	f7ff fe12 	bl	800b3bc <put_fat>
			if (res != FR_OK) return res;
 800b798:	4684      	mov	ip, r0
 800b79a:	b980      	cbnz	r0, 800b7be <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b79c:	696b      	ldr	r3, [r5, #20]
 800b79e:	69aa      	ldr	r2, [r5, #24]
 800b7a0:	1e91      	subs	r1, r2, #2
 800b7a2:	428b      	cmp	r3, r1
 800b7a4:	d2e5      	bcs.n	800b772 <remove_chain+0x2e>
			fs->free_clst++;
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800b7aa:	792b      	ldrb	r3, [r5, #4]
 800b7ac:	f043 0301 	orr.w	r3, r3, #1
 800b7b0:	712b      	strb	r3, [r5, #4]
 800b7b2:	e7de      	b.n	800b772 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b7b4:	f04f 0c02 	mov.w	ip, #2
 800b7b8:	e001      	b.n	800b7be <remove_chain+0x7a>
 800b7ba:	f04f 0c02 	mov.w	ip, #2
}
 800b7be:	4660      	mov	r0, ip
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 800b7c4:	f04f 0c00 	mov.w	ip, #0
 800b7c8:	e7f9      	b.n	800b7be <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b7ca:	f04f 0c02 	mov.w	ip, #2
 800b7ce:	e7f6      	b.n	800b7be <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b7d0:	f04f 0c01 	mov.w	ip, #1
 800b7d4:	e7f3      	b.n	800b7be <remove_chain+0x7a>

0800b7d6 <dir_next>:
{
 800b7d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7da:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7dc:	69c3      	ldr	r3, [r0, #28]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d06d      	beq.n	800b8be <dir_next+0xe8>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	3520      	adds	r5, #32
 800b7e8:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800b7ec:	d269      	bcs.n	800b8c2 <dir_next+0xec>
	FATFS *fs = dp->obj.fs;
 800b7ee:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7f0:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800b7f4:	f1b8 0f00 	cmp.w	r8, #0
 800b7f8:	d107      	bne.n	800b80a <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800b7fe:	6981      	ldr	r1, [r0, #24]
 800b800:	b971      	cbnz	r1, 800b820 <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b802:	8933      	ldrh	r3, [r6, #8]
 800b804:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b808:	d906      	bls.n	800b818 <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 800b80a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b80c:	3634      	adds	r6, #52	@ 0x34
 800b80e:	4446      	add	r6, r8
 800b810:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800b812:	2000      	movs	r0, #0
}
 800b814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800b818:	2300      	movs	r3, #0
 800b81a:	61c3      	str	r3, [r0, #28]
 800b81c:	2004      	movs	r0, #4
 800b81e:	e7f9      	b.n	800b814 <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b820:	8973      	ldrh	r3, [r6, #10]
 800b822:	3b01      	subs	r3, #1
 800b824:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800b828:	d1ef      	bne.n	800b80a <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b82a:	f7ff fe6a 	bl	800b502 <get_fat>
 800b82e:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b830:	2801      	cmp	r0, #1
 800b832:	d948      	bls.n	800b8c6 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b834:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b838:	d047      	beq.n	800b8ca <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b83a:	69b3      	ldr	r3, [r6, #24]
 800b83c:	4283      	cmp	r3, r0
 800b83e:	d836      	bhi.n	800b8ae <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800b840:	b18f      	cbz	r7, 800b866 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b842:	69a1      	ldr	r1, [r4, #24]
 800b844:	4620      	mov	r0, r4
 800b846:	f7ff ff1b 	bl	800b680 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b84a:	4682      	mov	sl, r0
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d03e      	beq.n	800b8ce <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b850:	2801      	cmp	r0, #1
 800b852:	d03e      	beq.n	800b8d2 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b854:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b858:	d03d      	beq.n	800b8d6 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff fc9e 	bl	800b19c <sync_window>
 800b860:	b128      	cbz	r0, 800b86e <dir_next+0x98>
 800b862:	2001      	movs	r0, #1
 800b864:	e7d6      	b.n	800b814 <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 800b866:	2300      	movs	r3, #0
 800b868:	61e3      	str	r3, [r4, #28]
 800b86a:	2004      	movs	r0, #4
 800b86c:	e7d2      	b.n	800b814 <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b86e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b872:	2100      	movs	r1, #0
 800b874:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800b878:	f7ff fb35 	bl	800aee6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b87c:	4651      	mov	r1, sl
 800b87e:	4630      	mov	r0, r6
 800b880:	f7ff fc12 	bl	800b0a8 <clust2sect>
 800b884:	6330      	str	r0, [r6, #48]	@ 0x30
 800b886:	8973      	ldrh	r3, [r6, #10]
 800b888:	b16b      	cbz	r3, 800b8a6 <dir_next+0xd0>
						fs->wflag = 1;
 800b88a:	2701      	movs	r7, #1
 800b88c:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b88e:	4630      	mov	r0, r6
 800b890:	f7ff fc84 	bl	800b19c <sync_window>
 800b894:	bb08      	cbnz	r0, 800b8da <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b896:	f109 0901 	add.w	r9, r9, #1
 800b89a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b89c:	3301      	adds	r3, #1
 800b89e:	6333      	str	r3, [r6, #48]	@ 0x30
 800b8a0:	8973      	ldrh	r3, [r6, #10]
 800b8a2:	454b      	cmp	r3, r9
 800b8a4:	d8f2      	bhi.n	800b88c <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 800b8a6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800b8a8:	eba3 0309 	sub.w	r3, r3, r9
 800b8ac:	6333      	str	r3, [r6, #48]	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8ae:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800b8b2:	4651      	mov	r1, sl
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f7ff fbf7 	bl	800b0a8 <clust2sect>
 800b8ba:	61e0      	str	r0, [r4, #28]
 800b8bc:	e7a5      	b.n	800b80a <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8be:	2004      	movs	r0, #4
 800b8c0:	e7a8      	b.n	800b814 <dir_next+0x3e>
 800b8c2:	2004      	movs	r0, #4
 800b8c4:	e7a6      	b.n	800b814 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b8c6:	2002      	movs	r0, #2
 800b8c8:	e7a4      	b.n	800b814 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	e7a2      	b.n	800b814 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b8ce:	2007      	movs	r0, #7
 800b8d0:	e7a0      	b.n	800b814 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b8d2:	2002      	movs	r0, #2
 800b8d4:	e79e      	b.n	800b814 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	e79c      	b.n	800b814 <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e79a      	b.n	800b814 <dir_next+0x3e>
	...

0800b8e0 <dir_find>:
{
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	b087      	sub	sp, #28
 800b8e6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800b8e8:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	f7ff fe71 	bl	800b5d2 <dir_sdi>
	if (res != FR_OK) return res;
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f040 80c4 	bne.w	800ba80 <dir_find+0x1a0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fc:	632b      	str	r3, [r5, #48]	@ 0x30
 800b8fe:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800b902:	46c1      	mov	r9, r8
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b904:	469a      	mov	sl, r3
 800b906:	46c3      	mov	fp, r8
		res = dir_next(dp, 0);	/* Next entry */
 800b908:	2700      	movs	r7, #0
 800b90a:	e00a      	b.n	800b922 <dir_find+0x42>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b90c:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800b910:	46d9      	mov	r9, fp
		res = dir_next(dp, 0);	/* Next entry */
 800b912:	4639      	mov	r1, r7
 800b914:	4628      	mov	r0, r5
 800b916:	f7ff ff5e 	bl	800b7d6 <dir_next>
	} while (res == FR_OK);
 800b91a:	4602      	mov	r2, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f040 80af 	bne.w	800ba80 <dir_find+0x1a0>
		res = move_window(fs, dp->sect);
 800b922:	69e9      	ldr	r1, [r5, #28]
 800b924:	4630      	mov	r0, r6
 800b926:	f7ff fc66 	bl	800b1f6 <move_window>
		if (res != FR_OK) break;
 800b92a:	4602      	mov	r2, r0
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f040 80a7 	bne.w	800ba80 <dir_find+0x1a0>
		c = dp->dir[DIR_Name];
 800b932:	6a2c      	ldr	r4, [r5, #32]
 800b934:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80a1 	beq.w	800ba7e <dir_find+0x19e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b93c:	7ae2      	ldrb	r2, [r4, #11]
 800b93e:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 800b942:	71a9      	strb	r1, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b944:	2be5      	cmp	r3, #229	@ 0xe5
 800b946:	d0e1      	beq.n	800b90c <dir_find+0x2c>
 800b948:	f012 0f08 	tst.w	r2, #8
 800b94c:	d015      	beq.n	800b97a <dir_find+0x9a>
 800b94e:	290f      	cmp	r1, #15
 800b950:	d1dc      	bne.n	800b90c <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b952:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800b956:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b95a:	d1da      	bne.n	800b912 <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b95c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b960:	d028      	beq.n	800b9b4 <dir_find+0xd4>
						sum = dp->dir[LDIR_Chksum];
 800b962:	f894 800d 	ldrb.w	r8, [r4, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b966:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b96a:	696a      	ldr	r2, [r5, #20]
 800b96c:	632a      	str	r2, [r5, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b96e:	7b62      	ldrb	r2, [r4, #13]
 800b970:	4542      	cmp	r2, r8
 800b972:	d024      	beq.n	800b9be <dir_find+0xde>
 800b974:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800b978:	e7cb      	b.n	800b912 <dir_find+0x32>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b97a:	290f      	cmp	r1, #15
 800b97c:	d0e9      	beq.n	800b952 <dir_find+0x72>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b97e:	f1b9 0f00 	cmp.w	r9, #0
 800b982:	d104      	bne.n	800b98e <dir_find+0xae>
 800b984:	4620      	mov	r0, r4
 800b986:	f7ff fbae 	bl	800b0e6 <sum_sfn>
 800b98a:	4540      	cmp	r0, r8
 800b98c:	d07c      	beq.n	800ba88 <dir_find+0x1a8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b98e:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800b992:	f012 0201 	ands.w	r2, r2, #1
 800b996:	d16b      	bne.n	800ba70 <dir_find+0x190>
 800b998:	f105 0124 	add.w	r1, r5, #36	@ 0x24
	int r = 0;
 800b99c:	f104 0c0b 	add.w	ip, r4, #11
		r = *d++ - *s++;
 800b9a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b9a8:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800b9aa:	45a4      	cmp	ip, r4
 800b9ac:	d05f      	beq.n	800ba6e <dir_find+0x18e>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0f6      	beq.n	800b9a0 <dir_find+0xc0>
 800b9b2:	e05d      	b.n	800ba70 <dir_find+0x190>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9b4:	4599      	cmp	r9, r3
 800b9b6:	bf18      	it	ne
 800b9b8:	46d9      	movne	r9, fp
 800b9ba:	d1aa      	bne.n	800b912 <dir_find+0x32>
 800b9bc:	e7d7      	b.n	800b96e <dir_find+0x8e>
	rv = rv << 8 | ptr[0];
 800b9be:	7ee1      	ldrb	r1, [r4, #27]
 800b9c0:	7ea2      	ldrb	r2, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b9c2:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800b9c6:	d157      	bne.n	800ba78 <dir_find+0x198>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9c8:	68f2      	ldr	r2, [r6, #12]
 800b9ca:	9201      	str	r2, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b9cc:	7822      	ldrb	r2, [r4, #0]
 800b9ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b9d2:	3a01      	subs	r2, #1
 800b9d4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800b9d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9dc:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800ba90 <dir_find+0x1b0>
 800b9e0:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b9e6:	9603      	str	r6, [sp, #12]
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	4616      	mov	r6, r2
 800b9ec:	9504      	str	r5, [sp, #16]
 800b9ee:	e006      	b.n	800b9fe <dir_find+0x11e>
 800b9f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b9f4:	429d      	cmp	r5, r3
 800b9f6:	d133      	bne.n	800ba60 <dir_find+0x180>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9f8:	4b24      	ldr	r3, [pc, #144]	@ (800ba8c <dir_find+0x1ac>)
 800b9fa:	4599      	cmp	r9, r3
 800b9fc:	d01a      	beq.n	800ba34 <dir_find+0x154>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b9fe:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ba02:	18e2      	adds	r2, r4, r3
	rv = rv << 8 | ptr[0];
 800ba04:	7852      	ldrb	r2, [r2, #1]
 800ba06:	5ce5      	ldrb	r5, [r4, r3]
 800ba08:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		if (wc) {
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d0ef      	beq.n	800b9f0 <dir_find+0x110>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba10:	2efe      	cmp	r6, #254	@ 0xfe
 800ba12:	d825      	bhi.n	800ba60 <dir_find+0x180>
 800ba14:	4628      	mov	r0, r5
 800ba16:	f001 f83f 	bl	800ca98 <ff_wtoupper>
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	1c73      	adds	r3, r6, #1
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800ba26:	f001 f837 	bl	800ca98 <ff_wtoupper>
 800ba2a:	4580      	cmp	r8, r0
 800ba2c:	d118      	bne.n	800ba60 <dir_find+0x180>
			wc = uc;
 800ba2e:	4628      	mov	r0, r5
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ba30:	9e00      	ldr	r6, [sp, #0]
 800ba32:	e7e1      	b.n	800b9f8 <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ba34:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ba38:	9b05      	ldr	r3, [sp, #20]
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	9e03      	ldr	r6, [sp, #12]
 800ba3e:	9d04      	ldr	r5, [sp, #16]
 800ba40:	7822      	ldrb	r2, [r4, #0]
 800ba42:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800ba46:	d004      	beq.n	800ba52 <dir_find+0x172>
 800ba48:	b118      	cbz	r0, 800ba52 <dir_find+0x172>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba4a:	9a01      	ldr	r2, [sp, #4]
 800ba4c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ba50:	b91a      	cbnz	r2, 800ba5a <dir_find+0x17a>
 800ba52:	3b01      	subs	r3, #1
 800ba54:	fa5f f983 	uxtb.w	r9, r3
 800ba58:	e75b      	b.n	800b912 <dir_find+0x32>
 800ba5a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ba5e:	e758      	b.n	800b912 <dir_find+0x32>
 800ba60:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ba64:	9e03      	ldr	r6, [sp, #12]
 800ba66:	9d04      	ldr	r5, [sp, #16]
 800ba68:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ba6c:	e751      	b.n	800b912 <dir_find+0x32>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba6e:	b13b      	cbz	r3, 800ba80 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba70:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800ba74:	46d9      	mov	r9, fp
 800ba76:	e74c      	b.n	800b912 <dir_find+0x32>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba78:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ba7c:	e749      	b.n	800b912 <dir_find+0x32>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba7e:	2204      	movs	r2, #4
}
 800ba80:	4610      	mov	r0, r2
 800ba82:	b007      	add	sp, #28
 800ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = move_window(fs, dp->sect);
 800ba88:	464a      	mov	r2, r9
 800ba8a:	e7f9      	b.n	800ba80 <dir_find+0x1a0>
 800ba8c:	0800f04d 	.word	0x0800f04d
 800ba90:	0800f040 	.word	0x0800f040

0800ba94 <dir_register>:
{
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	b08b      	sub	sp, #44	@ 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ba9a:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 800ba9e:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 800baa2:	f040 8141 	bne.w	800bd28 <dir_register+0x294>
 800baa6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800baa8:	6805      	ldr	r5, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800baaa:	68eb      	ldr	r3, [r5, #12]
 800baac:	881a      	ldrh	r2, [r3, #0]
 800baae:	b1da      	cbz	r2, 800bae8 <dir_register+0x54>
 800bab0:	f04f 0a00 	mov.w	sl, #0
 800bab4:	f10a 0a01 	add.w	sl, sl, #1
 800bab8:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800babc:	2a00      	cmp	r2, #0
 800babe:	d1f9      	bne.n	800bab4 <dir_register+0x20>
	mem_cpy(sn, dp->fn, 12);
 800bac0:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 800bac4:	220c      	movs	r2, #12
 800bac6:	4631      	mov	r1, r6
 800bac8:	a807      	add	r0, sp, #28
 800baca:	f7ff fa02 	bl	800aed2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bace:	f89d b027 	ldrb.w	fp, [sp, #39]	@ 0x27
 800bad2:	f01b 0f01 	tst.w	fp, #1
 800bad6:	d07d      	beq.n	800bbd4 <dir_register+0x140>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bad8:	2340      	movs	r3, #64	@ 0x40
 800bada:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800bade:	f04f 0801 	mov.w	r8, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bae2:	f04f 0920 	mov.w	r9, #32
 800bae6:	e049      	b.n	800bb7c <dir_register+0xe8>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bae8:	f04f 0a00 	mov.w	sl, #0
 800baec:	e7e8      	b.n	800bac0 <dir_register+0x2c>
 800baee:	4643      	mov	r3, r8
 800baf0:	af07      	add	r7, sp, #28
		while (*lfn) {	/* Create a CRC */
 800baf2:	2207      	movs	r2, #7
 800baf4:	e002      	b.n	800bafc <dir_register+0x68>
 800baf6:	4643      	mov	r3, r8
 800baf8:	e7fa      	b.n	800baf0 <dir_register+0x5c>
		seq /= 16;
 800bafa:	460b      	mov	r3, r1
		c = (BYTE)((seq % 16) + '0');
 800bafc:	f003 000f 	and.w	r0, r3, #15
 800bb00:	f100 0130 	add.w	r1, r0, #48	@ 0x30
		if (c > '9') c += 7;
 800bb04:	2939      	cmp	r1, #57	@ 0x39
 800bb06:	bf88      	it	hi
 800bb08:	f100 0137 	addhi.w	r1, r0, #55	@ 0x37
		ns[i--] = c;
 800bb0c:	3a01      	subs	r2, #1
 800bb0e:	f807 1d01 	strb.w	r1, [r7, #-1]!
		seq /= 16;
 800bb12:	0919      	lsrs	r1, r3, #4
	} while (seq);
 800bb14:	2b0f      	cmp	r3, #15
 800bb16:	d8f0      	bhi.n	800bafa <dir_register+0x66>
	ns[i] = '~';
 800bb18:	217e      	movs	r1, #126	@ 0x7e
 800bb1a:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800bb1e:	446b      	add	r3, sp
 800bb20:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bb24:	b16a      	cbz	r2, 800bb42 <dir_register+0xae>
 800bb26:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb30:	2820      	cmp	r0, #32
 800bb32:	d003      	beq.n	800bb3c <dir_register+0xa8>
 800bb34:	3301      	adds	r3, #1
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d1f8      	bne.n	800bb2c <dir_register+0x98>
		ns[i--] = c;
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	3323      	adds	r3, #35	@ 0x23
 800bb3e:	4423      	add	r3, r4
 800bb40:	e00e      	b.n	800bb60 <dir_register+0xcc>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bb42:	4613      	mov	r3, r2
 800bb44:	e7fa      	b.n	800bb3c <dir_register+0xa8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bb46:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 800bb4a:	4469      	add	r1, sp
 800bb4c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800bb50:	3201      	adds	r2, #1
 800bb52:	1c58      	adds	r0, r3, #1
 800bb54:	7059      	strb	r1, [r3, #1]
	} while (j < 8);
 800bb56:	3b22      	subs	r3, #34	@ 0x22
 800bb58:	1b1b      	subs	r3, r3, r4
 800bb5a:	2b07      	cmp	r3, #7
 800bb5c:	d804      	bhi.n	800bb68 <dir_register+0xd4>
 800bb5e:	4603      	mov	r3, r0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bb60:	2a07      	cmp	r2, #7
 800bb62:	d9f0      	bls.n	800bb46 <dir_register+0xb2>
 800bb64:	4649      	mov	r1, r9
 800bb66:	e7f4      	b.n	800bb52 <dir_register+0xbe>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7ff feb9 	bl	800b8e0 <dir_find>
			if (res != FR_OK) break;
 800bb6e:	4607      	mov	r7, r0
 800bb70:	bb38      	cbnz	r0, 800bbc2 <dir_register+0x12e>
		for (n = 1; n < 100; n++) {
 800bb72:	f108 0801 	add.w	r8, r8, #1
 800bb76:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800bb7a:	d020      	beq.n	800bbbe <dir_register+0x12a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bb7c:	68ef      	ldr	r7, [r5, #12]
	mem_cpy(dst, src, 11);
 800bb7e:	220b      	movs	r2, #11
 800bb80:	a907      	add	r1, sp, #28
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff f9a5 	bl	800aed2 <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bb88:	f1b8 0f05 	cmp.w	r8, #5
 800bb8c:	d9af      	bls.n	800baee <dir_register+0x5a>
		while (*lfn) {	/* Create a CRC */
 800bb8e:	883a      	ldrh	r2, [r7, #0]
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	d0b0      	beq.n	800baf6 <dir_register+0x62>
 800bb94:	4643      	mov	r3, r8
 800bb96:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800bb98:	f002 0001 	and.w	r0, r2, #1
 800bb9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 800bba0:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800bba2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800bba6:	bf1c      	itt	ne
 800bba8:	f483 3388 	eorne.w	r3, r3, #69632	@ 0x11000
 800bbac:	f083 0321 	eorne.w	r3, r3, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 800bbb0:	3901      	subs	r1, #1
 800bbb2:	d1f1      	bne.n	800bb98 <dir_register+0x104>
		while (*lfn) {	/* Create a CRC */
 800bbb4:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d1ec      	bne.n	800bb96 <dir_register+0x102>
 800bbbc:	e798      	b.n	800baf0 <dir_register+0x5c>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bbbe:	2707      	movs	r7, #7
 800bbc0:	e0b3      	b.n	800bd2a <dir_register+0x296>
 800bbc2:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800bbc6:	f000 80b4 	beq.w	800bd32 <dir_register+0x29e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bbca:	2804      	cmp	r0, #4
 800bbcc:	f040 80ad 	bne.w	800bd2a <dir_register+0x296>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bbd0:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bbd4:	f01b 0f02 	tst.w	fp, #2
 800bbd8:	d009      	beq.n	800bbee <dir_register+0x15a>
 800bbda:	f10a 080c 	add.w	r8, sl, #12
 800bbde:	4b64      	ldr	r3, [pc, #400]	@ (800bd70 <dir_register+0x2dc>)
 800bbe0:	fba3 3808 	umull	r3, r8, r3, r8
 800bbe4:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800bbe8:	f108 0801 	add.w	r8, r8, #1
 800bbec:	e001      	b.n	800bbf2 <dir_register+0x15e>
 800bbee:	f04f 0801 	mov.w	r8, #1
	FATFS *fs = dp->obj.fs;
 800bbf2:	f8d4 a000 	ldr.w	sl, [r4]
	res = dir_sdi(dp, 0);
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7ff fcea 	bl	800b5d2 <dir_sdi>
	if (res == FR_OK) {
 800bbfe:	4607      	mov	r7, r0
 800bc00:	b9e8      	cbnz	r0, 800bc3e <dir_register+0x1aa>
		n = 0;
 800bc02:	f04f 0900 	mov.w	r9, #0
			res = dir_next(dp, 1);
 800bc06:	f04f 0b01 	mov.w	fp, #1
 800bc0a:	e009      	b.n	800bc20 <dir_register+0x18c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bc0c:	f109 0901 	add.w	r9, r9, #1
 800bc10:	45c8      	cmp	r8, r9
 800bc12:	d018      	beq.n	800bc46 <dir_register+0x1b2>
			res = dir_next(dp, 1);
 800bc14:	4659      	mov	r1, fp
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff fddd 	bl	800b7d6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bc1c:	4607      	mov	r7, r0
 800bc1e:	b970      	cbnz	r0, 800bc3e <dir_register+0x1aa>
			res = move_window(fs, dp->sect);
 800bc20:	69e1      	ldr	r1, [r4, #28]
 800bc22:	4650      	mov	r0, sl
 800bc24:	f7ff fae7 	bl	800b1f6 <move_window>
			if (res != FR_OK) break;
 800bc28:	4607      	mov	r7, r0
 800bc2a:	b940      	cbnz	r0, 800bc3e <dir_register+0x1aa>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc2c:	6a23      	ldr	r3, [r4, #32]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2be5      	cmp	r3, #229	@ 0xe5
 800bc32:	d0eb      	beq.n	800bc0c <dir_register+0x178>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0e9      	beq.n	800bc0c <dir_register+0x178>
				n = 0;					/* Not a blank entry. Restart to search */
 800bc38:	f04f 0900 	mov.w	r9, #0
 800bc3c:	e7ea      	b.n	800bc14 <dir_register+0x180>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bc3e:	2f04      	cmp	r7, #4
 800bc40:	d079      	beq.n	800bd36 <dir_register+0x2a2>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bc42:	2f00      	cmp	r7, #0
 800bc44:	d171      	bne.n	800bd2a <dir_register+0x296>
 800bc46:	f1b8 0a01 	subs.w	sl, r8, #1
 800bc4a:	d119      	bne.n	800bc80 <dir_register+0x1ec>
		res = move_window(fs, dp->sect);
 800bc4c:	69e1      	ldr	r1, [r4, #28]
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f7ff fad1 	bl	800b1f6 <move_window>
		if (res == FR_OK) {
 800bc54:	4607      	mov	r7, r0
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d167      	bne.n	800bd2a <dir_register+0x296>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	6a20      	ldr	r0, [r4, #32]
 800bc60:	f7ff f941 	bl	800aee6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc64:	220b      	movs	r2, #11
 800bc66:	4631      	mov	r1, r6
 800bc68:	6a20      	ldr	r0, [r4, #32]
 800bc6a:	f7ff f932 	bl	800aed2 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bc6e:	6a22      	ldr	r2, [r4, #32]
 800bc70:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800bc74:	f003 0318 	and.w	r3, r3, #24
 800bc78:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	70eb      	strb	r3, [r5, #3]
 800bc7e:	e054      	b.n	800bd2a <dir_register+0x296>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bc80:	6961      	ldr	r1, [r4, #20]
 800bc82:	eba1 114a 	sub.w	r1, r1, sl, lsl #5
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fca3 	bl	800b5d2 <dir_sdi>
		if (res == FR_OK) {
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d14b      	bne.n	800bd2a <dir_register+0x296>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7ff fa27 	bl	800b0e6 <sum_sfn>
 800bc98:	9001      	str	r0, [sp, #4]
	dir[LDIR_Type] = 0;
 800bc9a:	f04f 0b00 	mov.w	fp, #0
 800bc9e:	9602      	str	r6, [sp, #8]
 800bca0:	e019      	b.n	800bcd6 <dir_register+0x242>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bca2:	4638      	mov	r0, r7
 800bca4:	e050      	b.n	800bd48 <dir_register+0x2b4>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bca6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800bcaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d002      	beq.n	800bcb8 <dir_register+0x224>
 800bcb2:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 800bcb6:	b90b      	cbnz	r3, 800bcbc <dir_register+0x228>
 800bcb8:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bcbc:	f881 9000 	strb.w	r9, [r1]
				fs->wflag = 1;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bcc4:	4659      	mov	r1, fp
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff fd85 	bl	800b7d6 <dir_next>
			} while (res == FR_OK && --nent);
 800bccc:	4607      	mov	r7, r0
 800bcce:	bb60      	cbnz	r0, 800bd2a <dir_register+0x296>
 800bcd0:	f1ba 0a01 	subs.w	sl, sl, #1
 800bcd4:	d026      	beq.n	800bd24 <dir_register+0x290>
				res = move_window(fs, dp->sect);
 800bcd6:	69e1      	ldr	r1, [r4, #28]
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f7ff fa8c 	bl	800b1f6 <move_window>
				if (res != FR_OK) break;
 800bcde:	4607      	mov	r7, r0
 800bce0:	bb18      	cbnz	r0, 800bd2a <dir_register+0x296>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bce2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	fa5f f98a 	uxtb.w	r9, sl
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bcf0:	f04f 030f 	mov.w	r3, #15
 800bcf4:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800bcf6:	f881 b00c 	strb.w	fp, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcfa:	f881 b01a 	strb.w	fp, [r1, #26]
	*ptr++ = (BYTE)val;
 800bcfe:	f881 b01b 	strb.w	fp, [r1, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bd02:	f109 30ff 	add.w	r0, r9, #4294967295
 800bd06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800bd0a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	s = wc = 0;
 800bd0e:	4a19      	ldr	r2, [pc, #100]	@ (800bd74 <dir_register+0x2e0>)
 800bd10:	f102 0c0d 	add.w	ip, r2, #13
 800bd14:	465b      	mov	r3, fp
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd16:	f64f 76ff 	movw	r6, #65535	@ 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800bd1a:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800bd1e:	f8cd a00c 	str.w	sl, [sp, #12]
 800bd22:	e014      	b.n	800bd4e <dir_register+0x2ba>
 800bd24:	9e02      	ldr	r6, [sp, #8]
 800bd26:	e791      	b.n	800bc4c <dir_register+0x1b8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd28:	2706      	movs	r7, #6
}
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	b00b      	add	sp, #44	@ 0x2c
 800bd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bd32:	2707      	movs	r7, #7
 800bd34:	e7f9      	b.n	800bd2a <dir_register+0x296>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd36:	2707      	movs	r7, #7
 800bd38:	e7f7      	b.n	800bd2a <dir_register+0x296>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd3a:	7817      	ldrb	r7, [r2, #0]
 800bd3c:	eb01 0a07 	add.w	sl, r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800bd40:	f801 8007 	strb.w	r8, [r1, r7]
	*ptr++ = (BYTE)val;
 800bd44:	f88a 8001 	strb.w	r8, [sl, #1]
	} while (++s < 13);
 800bd48:	3201      	adds	r2, #1
 800bd4a:	4562      	cmp	r2, ip
 800bd4c:	d0ab      	beq.n	800bca6 <dir_register+0x212>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd4e:	42b3      	cmp	r3, r6
 800bd50:	d0f3      	beq.n	800bd3a <dir_register+0x2a6>
 800bd52:	1c47      	adds	r7, r0, #1
 800bd54:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd58:	7810      	ldrb	r0, [r2, #0]
 800bd5a:	eb01 0a00 	add.w	sl, r1, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800bd5e:	540b      	strb	r3, [r1, r0]
 800bd60:	0a18      	lsrs	r0, r3, #8
	*ptr++ = (BYTE)val;
 800bd62:	f88a 0001 	strb.w	r0, [sl, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d19b      	bne.n	800bca2 <dir_register+0x20e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd6a:	4638      	mov	r0, r7
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd6c:	4633      	mov	r3, r6
 800bd6e:	e7eb      	b.n	800bd48 <dir_register+0x2b4>
 800bd70:	4ec4ec4f 	.word	0x4ec4ec4f
 800bd74:	0800f040 	.word	0x0800f040

0800bd78 <check_fs>:
{
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	70c3      	strb	r3, [r0, #3]
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295
 800bd84:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd86:	f7ff fa36 	bl	800b1f6 <move_window>
 800bd8a:	bb48      	cbnz	r0, 800bde0 <check_fs+0x68>
 800bd8c:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 800bd8e:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800bd92:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800bd96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd9a:	b21b      	sxth	r3, r3
 800bd9c:	4a13      	ldr	r2, [pc, #76]	@ (800bdec <check_fs+0x74>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d120      	bne.n	800bde4 <check_fs+0x6c>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bda2:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800bda6:	2be9      	cmp	r3, #233	@ 0xe9
 800bda8:	d007      	beq.n	800bdba <check_fs+0x42>
 800bdaa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800bdb0:	4a0f      	ldr	r2, [pc, #60]	@ (800bdf0 <check_fs+0x78>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d001      	beq.n	800bdba <check_fs+0x42>
	return 2;
 800bdb6:	2502      	movs	r5, #2
 800bdb8:	e015      	b.n	800bde6 <check_fs+0x6e>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bdba:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 800bdbe:	f7ff f875 	bl	800aeac <ld_dword>
 800bdc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf4 <check_fs+0x7c>)
 800bdc8:	4298      	cmp	r0, r3
 800bdca:	d00c      	beq.n	800bde6 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bdcc:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 800bdd0:	f7ff f86c 	bl	800aeac <ld_dword>
 800bdd4:	4d08      	ldr	r5, [pc, #32]	@ (800bdf8 <check_fs+0x80>)
 800bdd6:	1b45      	subs	r5, r0, r5
 800bdd8:	bf18      	it	ne
 800bdda:	2501      	movne	r5, #1
 800bddc:	006d      	lsls	r5, r5, #1
 800bdde:	e002      	b.n	800bde6 <check_fs+0x6e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bde0:	2504      	movs	r5, #4
 800bde2:	e000      	b.n	800bde6 <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bde4:	2503      	movs	r5, #3
}
 800bde6:	4628      	mov	r0, r5
 800bde8:	bd38      	pop	{r3, r4, r5, pc}
 800bdea:	bf00      	nop
 800bdec:	ffffaa55 	.word	0xffffaa55
 800bdf0:	009000eb 	.word	0x009000eb
 800bdf4:	00544146 	.word	0x00544146
 800bdf8:	33544146 	.word	0x33544146

0800bdfc <find_volume>:
{
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	b085      	sub	sp, #20
 800be02:	460e      	mov	r6, r1
 800be04:	4615      	mov	r5, r2
	*rfs = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800be0a:	f7ff f97b 	bl	800b104 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800be0e:	1e07      	subs	r7, r0, #0
 800be10:	f2c0 810a 	blt.w	800c028 <find_volume+0x22c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be14:	4bb0      	ldr	r3, [pc, #704]	@ (800c0d8 <find_volume+0x2dc>)
 800be16:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	f000 8109 	beq.w	800c032 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 800be20:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800be22:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be26:	7823      	ldrb	r3, [r4, #0]
 800be28:	b16b      	cbz	r3, 800be46 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800be2a:	7860      	ldrb	r0, [r4, #1]
 800be2c:	f7fe fff2 	bl	800ae14 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be30:	f010 0f01 	tst.w	r0, #1
 800be34:	d107      	bne.n	800be46 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be36:	2d00      	cmp	r5, #0
 800be38:	f000 80f7 	beq.w	800c02a <find_volume+0x22e>
				return FR_WRITE_PROTECTED;
 800be3c:	f010 0504 	ands.w	r5, r0, #4
 800be40:	bf18      	it	ne
 800be42:	250a      	movne	r5, #10
 800be44:	e0f1      	b.n	800c02a <find_volume+0x22e>
	fs->fs_type = 0;					/* Clear the file system object */
 800be46:	2300      	movs	r3, #0
 800be48:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be4a:	b2f8      	uxtb	r0, r7
 800be4c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be4e:	f7fe ffed 	bl	800ae2c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be52:	f010 0601 	ands.w	r6, r0, #1
 800be56:	f040 80ee 	bne.w	800c036 <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be5a:	b11d      	cbz	r5, 800be64 <find_volume+0x68>
 800be5c:	f010 0f04 	tst.w	r0, #4
 800be60:	f040 80eb 	bne.w	800c03a <find_volume+0x23e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be64:	2100      	movs	r1, #0
 800be66:	4620      	mov	r0, r4
 800be68:	f7ff ff86 	bl	800bd78 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be6c:	2802      	cmp	r0, #2
 800be6e:	d07c      	beq.n	800bf6a <find_volume+0x16e>
	bsect = 0;
 800be70:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be72:	2804      	cmp	r0, #4
 800be74:	f000 80e3 	beq.w	800c03e <find_volume+0x242>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be78:	2801      	cmp	r0, #1
 800be7a:	f200 80e2 	bhi.w	800c042 <find_volume+0x246>
	rv = rv << 8 | ptr[0];
 800be7e:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800be82:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800be86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be8a:	b21b      	sxth	r3, r3
 800be8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be90:	f040 80d9 	bne.w	800c046 <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 800be94:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800be98:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800be9c:	ea53 2802 	orrs.w	r8, r3, r2, lsl #8
 800bea0:	d104      	bne.n	800beac <find_volume+0xb0>
 800bea2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bea6:	f7ff f801 	bl	800aeac <ld_dword>
 800beaa:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800beac:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800beb0:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800beb4:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800beb8:	f109 33ff 	add.w	r3, r9, #4294967295
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	f200 80c3 	bhi.w	800c04a <find_volume+0x24e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bec4:	f894 7041 	ldrb.w	r7, [r4, #65]	@ 0x41
 800bec8:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800beca:	2f00      	cmp	r7, #0
 800becc:	f000 80bf 	beq.w	800c04e <find_volume+0x252>
 800bed0:	1e7b      	subs	r3, r7, #1
 800bed2:	423b      	tst	r3, r7
 800bed4:	f040 80bd 	bne.w	800c052 <find_volume+0x256>
	rv = rv << 8 | ptr[0];
 800bed8:	f894 2046 	ldrb.w	r2, [r4, #70]	@ 0x46
 800bedc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bee4:	fa0f fb83 	sxth.w	fp, r3
 800bee8:	469a      	mov	sl, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800beea:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800beec:	f013 0f0f 	tst.w	r3, #15
 800bef0:	f040 80b1 	bne.w	800c056 <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 800bef4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800bef8:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800befc:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800bf00:	d103      	bne.n	800bf0a <find_volume+0x10e>
 800bf02:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800bf06:	f7fe ffd1 	bl	800aeac <ld_dword>
	rv = rv << 8 | ptr[0];
 800bf0a:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800bf0e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf12:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800bf16:	f000 80a0 	beq.w	800c05a <find_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf1a:	fb08 f909 	mul.w	r9, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bf1e:	eb03 121a 	add.w	r2, r3, sl, lsr #4
 800bf22:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bf24:	4290      	cmp	r0, r2
 800bf26:	f0c0 809a 	bcc.w	800c05e <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bf2a:	1a80      	subs	r0, r0, r2
 800bf2c:	fbb0 f1f7 	udiv	r1, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bf30:	42b8      	cmp	r0, r7
 800bf32:	f0c0 8096 	bcc.w	800c062 <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bf36:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800bf3a:	4281      	cmp	r1, r0
 800bf3c:	f200 809d 	bhi.w	800c07a <find_volume+0x27e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bf40:	f640 70f5 	movw	r0, #4085	@ 0xff5
 800bf44:	4281      	cmp	r1, r0
 800bf46:	f240 80cf 	bls.w	800c0e8 <find_volume+0x2ec>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bf4a:	3102      	adds	r1, #2
 800bf4c:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bf4e:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bf50:	442b      	add	r3, r5
 800bf52:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bf54:	442a      	add	r2, r5
 800bf56:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf58:	f1ba 0f00 	cmp.w	sl, #0
 800bf5c:	f000 8089 	beq.w	800c072 <find_volume+0x276>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf60:	eb09 0203 	add.w	r2, r9, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf64:	004b      	lsls	r3, r1, #1
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bf66:	2102      	movs	r1, #2
 800bf68:	e0d1      	b.n	800c10e <find_volume+0x312>
 800bf6a:	466f      	mov	r7, sp
 800bf6c:	f504 75fd 	add.w	r5, r4, #506	@ 0x1fa
 800bf70:	f204 293a 	addw	r9, r4, #570	@ 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf74:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf76:	f04f 0a00 	mov.w	sl, #0
 800bf7a:	e005      	b.n	800bf88 <find_volume+0x18c>
 800bf7c:	4650      	mov	r0, sl
 800bf7e:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf82:	3510      	adds	r5, #16
 800bf84:	454d      	cmp	r5, r9
 800bf86:	d007      	beq.n	800bf98 <find_volume+0x19c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf88:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d0f5      	beq.n	800bf7c <find_volume+0x180>
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7fe ff8b 	bl	800aeac <ld_dword>
 800bf96:	e7f2      	b.n	800bf7e <find_volume+0x182>
 800bf98:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf9c:	f04f 0903 	mov.w	r9, #3
 800bfa0:	e009      	b.n	800bfb6 <find_volume+0x1ba>
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f7ff fee7 	bl	800bd78 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bfaa:	2801      	cmp	r0, #1
 800bfac:	f240 80c7 	bls.w	800c13e <find_volume+0x342>
 800bfb0:	45b8      	cmp	r8, r7
 800bfb2:	f43f af5e 	beq.w	800be72 <find_volume+0x76>
			bsect = br[i];
 800bfb6:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	d1f1      	bne.n	800bfa2 <find_volume+0x1a6>
 800bfbe:	4648      	mov	r0, r9
 800bfc0:	e7f6      	b.n	800bfb0 <find_volume+0x1b4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfc2:	1c69      	adds	r1, r5, #1
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff f916 	bl	800b1f6 <move_window>
 800bfca:	bb58      	cbnz	r0, 800c024 <find_volume+0x228>
			fs->fsi_flag = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800bfd0:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800bfd4:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800bfd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bfdc:	b21b      	sxth	r3, r3
 800bfde:	4a3f      	ldr	r2, [pc, #252]	@ (800c0dc <find_volume+0x2e0>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d001      	beq.n	800bfe8 <find_volume+0x1ec>
		fmt = FS_FAT32;
 800bfe4:	2103      	movs	r1, #3
 800bfe6:	e09e      	b.n	800c126 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bfe8:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800bfec:	f7fe ff5e 	bl	800aeac <ld_dword>
 800bff0:	4b3b      	ldr	r3, [pc, #236]	@ (800c0e0 <find_volume+0x2e4>)
 800bff2:	4298      	cmp	r0, r3
 800bff4:	d001      	beq.n	800bffa <find_volume+0x1fe>
		fmt = FS_FAT32;
 800bff6:	2103      	movs	r1, #3
 800bff8:	e095      	b.n	800c126 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bffa:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800bffe:	f7fe ff55 	bl	800aeac <ld_dword>
 800c002:	4b38      	ldr	r3, [pc, #224]	@ (800c0e4 <find_volume+0x2e8>)
 800c004:	4298      	cmp	r0, r3
 800c006:	d001      	beq.n	800c00c <find_volume+0x210>
		fmt = FS_FAT32;
 800c008:	2103      	movs	r1, #3
 800c00a:	e08c      	b.n	800c126 <find_volume+0x32a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c00c:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800c010:	f7fe ff4c 	bl	800aeac <ld_dword>
 800c014:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c016:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800c01a:	f7fe ff47 	bl	800aeac <ld_dword>
 800c01e:	6120      	str	r0, [r4, #16]
		fmt = FS_FAT32;
 800c020:	2103      	movs	r1, #3
 800c022:	e080      	b.n	800c126 <find_volume+0x32a>
 800c024:	2103      	movs	r1, #3
 800c026:	e07e      	b.n	800c126 <find_volume+0x32a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c028:	250b      	movs	r5, #11
}
 800c02a:	4628      	mov	r0, r5
 800c02c:	b005      	add	sp, #20
 800c02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c032:	250c      	movs	r5, #12
 800c034:	e7f9      	b.n	800c02a <find_volume+0x22e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c036:	2503      	movs	r5, #3
 800c038:	e7f7      	b.n	800c02a <find_volume+0x22e>
		return FR_WRITE_PROTECTED;
 800c03a:	250a      	movs	r5, #10
 800c03c:	e7f5      	b.n	800c02a <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c03e:	2501      	movs	r5, #1
 800c040:	e7f3      	b.n	800c02a <find_volume+0x22e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c042:	250d      	movs	r5, #13
 800c044:	e7f1      	b.n	800c02a <find_volume+0x22e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c046:	250d      	movs	r5, #13
 800c048:	e7ef      	b.n	800c02a <find_volume+0x22e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c04a:	250d      	movs	r5, #13
 800c04c:	e7ed      	b.n	800c02a <find_volume+0x22e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c04e:	250d      	movs	r5, #13
 800c050:	e7eb      	b.n	800c02a <find_volume+0x22e>
 800c052:	250d      	movs	r5, #13
 800c054:	e7e9      	b.n	800c02a <find_volume+0x22e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c056:	250d      	movs	r5, #13
 800c058:	e7e7      	b.n	800c02a <find_volume+0x22e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c05a:	250d      	movs	r5, #13
 800c05c:	e7e5      	b.n	800c02a <find_volume+0x22e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c05e:	250d      	movs	r5, #13
 800c060:	e7e3      	b.n	800c02a <find_volume+0x22e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c062:	250d      	movs	r5, #13
 800c064:	e7e1      	b.n	800c02a <find_volume+0x22e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c066:	250d      	movs	r5, #13
 800c068:	e7df      	b.n	800c02a <find_volume+0x22e>
 800c06a:	250d      	movs	r5, #13
 800c06c:	e7dd      	b.n	800c02a <find_volume+0x22e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c06e:	250d      	movs	r5, #13
 800c070:	e7db      	b.n	800c02a <find_volume+0x22e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c072:	250d      	movs	r5, #13
 800c074:	e7d9      	b.n	800c02a <find_volume+0x22e>
 800c076:	250d      	movs	r5, #13
 800c078:	e7d7      	b.n	800c02a <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c07a:	1c8f      	adds	r7, r1, #2
 800c07c:	61a7      	str	r7, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c07e:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c080:	442b      	add	r3, r5
 800c082:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c084:	442a      	add	r2, r5
 800c086:	62e2      	str	r2, [r4, #44]	@ 0x2c
	rv = rv << 8 | ptr[0];
 800c088:	f894 205f 	ldrb.w	r2, [r4, #95]	@ 0x5f
 800c08c:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 800c090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c094:	fa1f fb8b 	uxth.w	fp, fp
 800c098:	ea5b 0b03 	orrs.w	fp, fp, r3
 800c09c:	d1e7      	bne.n	800c06e <find_volume+0x272>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c09e:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800c0a2:	f7fe ff03 	bl	800aeac <ld_dword>
 800c0a6:	62a0      	str	r0, [r4, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c0a8:	00bb      	lsls	r3, r7, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c0ae:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800c0b2:	d3d8      	bcc.n	800c066 <find_volume+0x26a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b8:	6163      	str	r3, [r4, #20]
 800c0ba:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c0bc:	2380      	movs	r3, #128	@ 0x80
 800c0be:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800c0c0:	f894 2065 	ldrb.w	r2, [r4, #101]	@ 0x65
 800c0c4:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 800c0c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c0cc:	b21b      	sxth	r3, r3
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	f43f af77 	beq.w	800bfc2 <find_volume+0x1c6>
		fmt = FS_FAT32;
 800c0d4:	2103      	movs	r1, #3
 800c0d6:	e026      	b.n	800c126 <find_volume+0x32a>
 800c0d8:	20001484 	.word	0x20001484
 800c0dc:	ffffaa55 	.word	0xffffaa55
 800c0e0:	41615252 	.word	0x41615252
 800c0e4:	61417272 	.word	0x61417272
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c0e8:	3102      	adds	r1, #2
 800c0ea:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c0ec:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c0ee:	442b      	add	r3, r5
 800c0f0:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c0f2:	442a      	add	r2, r5
 800c0f4:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c0f6:	f1ba 0f00 	cmp.w	sl, #0
 800c0fa:	d0bc      	beq.n	800c076 <find_volume+0x27a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0fc:	eb09 0203 	add.w	r2, r9, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c100:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800c104:	f001 0101 	and.w	r1, r1, #1
 800c108:	eb01 0353 	add.w	r3, r1, r3, lsr #1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c10c:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c10e:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c110:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c114:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800c118:	d3a7      	bcc.n	800c06a <find_volume+0x26e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c11a:	f04f 33ff 	mov.w	r3, #4294967295
 800c11e:	6163      	str	r3, [r4, #20]
 800c120:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c122:	2380      	movs	r3, #128	@ 0x80
 800c124:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 800c126:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c128:	4a07      	ldr	r2, [pc, #28]	@ (800c148 <find_volume+0x34c>)
 800c12a:	8813      	ldrh	r3, [r2, #0]
 800c12c:	3301      	adds	r3, #1
 800c12e:	b29b      	uxth	r3, r3
 800c130:	8013      	strh	r3, [r2, #0]
 800c132:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800c134:	4620      	mov	r0, r4
 800c136:	f7fe ffa3 	bl	800b080 <clear_lock>
	return FR_OK;
 800c13a:	4635      	mov	r5, r6
 800c13c:	e775      	b.n	800c02a <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c13e:	2804      	cmp	r0, #4
 800c140:	f47f ae9d 	bne.w	800be7e <find_volume+0x82>
 800c144:	2501      	movs	r5, #1
 800c146:	e770      	b.n	800c02a <find_volume+0x22e>
 800c148:	20001480 	.word	0x20001480

0800c14c <ld_clust>:
{
 800c14c:	4602      	mov	r2, r0
	rv = rv << 8 | ptr[0];
 800c14e:	7ec8      	ldrb	r0, [r1, #27]
 800c150:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 800c152:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800c156:	7813      	ldrb	r3, [r2, #0]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d000      	beq.n	800c15e <ld_clust+0x12>
}
 800c15c:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800c15e:	7d4a      	ldrb	r2, [r1, #21]
 800c160:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c166:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	return cl;
 800c16a:	e7f7      	b.n	800c15c <ld_clust+0x10>

0800c16c <follow_path>:
{
 800c16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	b085      	sub	sp, #20
 800c172:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 800c174:	f8d0 c000 	ldr.w	ip, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c178:	460b      	mov	r3, r1
 800c17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c17e:	2a2f      	cmp	r2, #47	@ 0x2f
 800c180:	d0fa      	beq.n	800c178 <follow_path+0xc>
 800c182:	2a5c      	cmp	r2, #92	@ 0x5c
 800c184:	d0f8      	beq.n	800c178 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800c186:	2200      	movs	r2, #0
 800c188:	f8ca 2008 	str.w	r2, [sl, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c18c:	781a      	ldrb	r2, [r3, #0]
 800c18e:	2a1f      	cmp	r2, #31
 800c190:	d905      	bls.n	800c19e <follow_path+0x32>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	f8cd c00c 	str.w	ip, [sp, #12]
 800c19a:	9302      	str	r3, [sp, #8]
 800c19c:	e0f7      	b.n	800c38e <follow_path+0x222>
		dp->fn[NSFLAG] = NS_NONAME;
 800c19e:	2380      	movs	r3, #128	@ 0x80
 800c1a0:	f88a 302f 	strb.w	r3, [sl, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4650      	mov	r0, sl
 800c1a8:	f7ff fa13 	bl	800b5d2 <dir_sdi>
 800c1ac:	4601      	mov	r1, r0
}
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	b005      	add	sp, #20
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	3c01      	subs	r4, #1
 800c1ba:	9b02      	ldr	r3, [sp, #8]
 800c1bc:	191a      	adds	r2, r3, r4
 800c1be:	e000      	b.n	800c1c2 <follow_path+0x56>
		w = p[si++];					/* Get a character */
 800c1c0:	460a      	mov	r2, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c1c2:	1c51      	adds	r1, r2, #1
 800c1c4:	7853      	ldrb	r3, [r2, #1]
 800c1c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1c8:	d0fa      	beq.n	800c1c0 <follow_path+0x54>
 800c1ca:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1cc:	d0f8      	beq.n	800c1c0 <follow_path+0x54>
 800c1ce:	f1c6 0301 	rsb	r3, r6, #1
 800c1d2:	4413      	add	r3, r2
	*path = &p[si];						/* Return pointer to the next segment */
 800c1d4:	9a02      	ldr	r2, [sp, #8]
 800c1d6:	441a      	add	r2, r3
 800c1d8:	9202      	str	r2, [sp, #8]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c1da:	2c00      	cmp	r4, #0
 800c1dc:	f000 8138 	beq.w	800c450 <follow_path+0x2e4>
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 800c1e6:	e029      	b.n	800c23c <follow_path+0xd0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f040 8138 	bne.w	800c45e <follow_path+0x2f2>
		lfn[di++] = w;					/* Store the Unicode character */
 800c1ee:	f827 2f02 	strh.w	r2, [r7, #2]!
		w = p[si++];					/* Get a character */
 800c1f2:	1c63      	adds	r3, r4, #1
 800c1f4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800c1f8:	281f      	cmp	r0, #31
 800c1fa:	d91a      	bls.n	800c232 <follow_path+0xc6>
		w = p[si++];					/* Get a character */
 800c1fc:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c1fe:	282f      	cmp	r0, #47	@ 0x2f
 800c200:	d0d9      	beq.n	800c1b6 <follow_path+0x4a>
 800c202:	285c      	cmp	r0, #92	@ 0x5c
 800c204:	d0d7      	beq.n	800c1b6 <follow_path+0x4a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c206:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800c20a:	f000 8128 	beq.w	800c45e <follow_path+0x2f2>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c20e:	4649      	mov	r1, r9
 800c210:	f000 fc26 	bl	800ca60 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c214:	4602      	mov	r2, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	f000 8121 	beq.w	800c45e <follow_path+0x2f2>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c21c:	287f      	cmp	r0, #127	@ 0x7f
 800c21e:	d8e6      	bhi.n	800c1ee <follow_path+0x82>
	while (*str && *str != chr) str++;
 800c220:	2322      	movs	r3, #34	@ 0x22
 800c222:	4990      	ldr	r1, [pc, #576]	@ (800c464 <follow_path+0x2f8>)
 800c224:	429a      	cmp	r2, r3
 800c226:	d0df      	beq.n	800c1e8 <follow_path+0x7c>
 800c228:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1f9      	bne.n	800c224 <follow_path+0xb8>
 800c230:	e7dd      	b.n	800c1ee <follow_path+0x82>
 800c232:	4605      	mov	r5, r0
 800c234:	e7ce      	b.n	800c1d4 <follow_path+0x68>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c236:	3c01      	subs	r4, #1
 800c238:	f000 810e 	beq.w	800c458 <follow_path+0x2ec>
		w = lfn[di - 1];
 800c23c:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800c240:	2b20      	cmp	r3, #32
 800c242:	d0f8      	beq.n	800c236 <follow_path+0xca>
 800c244:	2b2e      	cmp	r3, #46	@ 0x2e
 800c246:	d0f6      	beq.n	800c236 <follow_path+0xca>
	lfn[di] = 0;						/* LFN is created */
 800c248:	2300      	movs	r3, #0
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c250:	2c00      	cmp	r4, #0
 800c252:	f000 8104 	beq.w	800c45e <follow_path+0x2f2>
	mem_set(dp->fn, ' ', 11);
 800c256:	220b      	movs	r2, #11
 800c258:	2120      	movs	r1, #32
 800c25a:	f10a 0024 	add.w	r0, sl, #36	@ 0x24
 800c25e:	f7fe fe42 	bl	800aee6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c262:	2600      	movs	r6, #0
 800c264:	e000      	b.n	800c268 <follow_path+0xfc>
 800c266:	3601      	adds	r6, #1
 800c268:	f83b 3f02 	ldrh.w	r3, [fp, #2]!
 800c26c:	2b20      	cmp	r3, #32
 800c26e:	d0fa      	beq.n	800c266 <follow_path+0xfa>
 800c270:	2b2e      	cmp	r3, #46	@ 0x2e
 800c272:	d0f8      	beq.n	800c266 <follow_path+0xfa>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c274:	2d1f      	cmp	r5, #31
 800c276:	bf8c      	ite	hi
 800c278:	2500      	movhi	r5, #0
 800c27a:	2501      	movls	r5, #1
 800c27c:	00ad      	lsls	r5, r5, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 800c27e:	b10e      	cbz	r6, 800c284 <follow_path+0x118>
 800c280:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c284:	9a01      	ldr	r2, [sp, #4]
 800c286:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800c28a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 800c28e:	292e      	cmp	r1, #46	@ 0x2e
 800c290:	d001      	beq.n	800c296 <follow_path+0x12a>
 800c292:	3c01      	subs	r4, #1
 800c294:	d1f9      	bne.n	800c28a <follow_path+0x11e>
		w = lfn[si++];					/* Get an LFN character */
 800c296:	3601      	adds	r6, #1
		if (!w) break;					/* Break on end of the LFN */
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 80ce 	beq.w	800c43a <follow_path+0x2ce>
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	2708      	movs	r7, #8
 800c2a4:	46c3      	mov	fp, r8
 800c2a6:	e016      	b.n	800c2d6 <follow_path+0x16a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c2a8:	42b4      	cmp	r4, r6
 800c2aa:	d10c      	bne.n	800c2c6 <follow_path+0x15a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c2ac:	45bb      	cmp	fp, r7
 800c2ae:	d229      	bcs.n	800c304 <follow_path+0x198>
			if (ni == 11) {				/* Long extension */
 800c2b0:	2f0b      	cmp	r7, #11
 800c2b2:	d07c      	beq.n	800c3ae <follow_path+0x242>
			b <<= 2; continue;
 800c2b4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800c2b8:	fa5f f888 	uxtb.w	r8, r8
 800c2bc:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c2be:	270b      	movs	r7, #11
 800c2c0:	f04f 0b08 	mov.w	fp, #8
			b <<= 2; continue;
 800c2c4:	e002      	b.n	800c2cc <follow_path+0x160>
			cf |= NS_LOSS | NS_LFN; continue;
 800c2c6:	f045 0503 	orr.w	r5, r5, #3
 800c2ca:	4633      	mov	r3, r6
		w = lfn[si++];					/* Get an LFN character */
 800c2cc:	1c5e      	adds	r6, r3, #1
 800c2ce:	9a01      	ldr	r2, [sp, #4]
 800c2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800c2d4:	b1f3      	cbz	r3, 800c314 <follow_path+0x1a8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c2d6:	2b20      	cmp	r3, #32
 800c2d8:	d0f5      	beq.n	800c2c6 <follow_path+0x15a>
 800c2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2dc:	d0e4      	beq.n	800c2a8 <follow_path+0x13c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c2de:	45bb      	cmp	fp, r7
 800c2e0:	d210      	bcs.n	800c304 <follow_path+0x198>
 800c2e2:	42b4      	cmp	r4, r6
 800c2e4:	d0e4      	beq.n	800c2b0 <follow_path+0x144>
		if (w >= 0x80) {				/* Non ASCII character */
 800c2e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2e8:	d86c      	bhi.n	800c3c4 <follow_path+0x258>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d177      	bne.n	800c3de <follow_path+0x272>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c2ee:	f045 0503 	orr.w	r5, r5, #3
 800c2f2:	235f      	movs	r3, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 800c2f4:	eb0a 020b 	add.w	r2, sl, fp
 800c2f8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 800c2fc:	4633      	mov	r3, r6
 800c2fe:	f10b 0b01 	add.w	fp, fp, #1
 800c302:	e7e3      	b.n	800c2cc <follow_path+0x160>
			if (ni == 11) {				/* Long extension */
 800c304:	2f0b      	cmp	r7, #11
 800c306:	d052      	beq.n	800c3ae <follow_path+0x242>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c308:	42b4      	cmp	r4, r6
 800c30a:	bf18      	it	ne
 800c30c:	f045 0503 	orrne.w	r5, r5, #3
			if (si > di) break;			/* No extension */
 800c310:	42b4      	cmp	r4, r6
 800c312:	d2cf      	bcs.n	800c2b4 <follow_path+0x148>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c314:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c318:	2be5      	cmp	r3, #229	@ 0xe5
 800c31a:	d04f      	beq.n	800c3bc <follow_path+0x250>
	if (ni == 8) b <<= 2;
 800c31c:	2f08      	cmp	r7, #8
 800c31e:	f000 8092 	beq.w	800c446 <follow_path+0x2da>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c322:	f008 030c 	and.w	r3, r8, #12
 800c326:	2b0c      	cmp	r3, #12
 800c328:	d003      	beq.n	800c332 <follow_path+0x1c6>
 800c32a:	f008 0203 	and.w	r2, r8, #3
 800c32e:	2a03      	cmp	r2, #3
 800c330:	d101      	bne.n	800c336 <follow_path+0x1ca>
 800c332:	f045 0502 	orr.w	r5, r5, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c336:	f015 0f02 	tst.w	r5, #2
 800c33a:	d109      	bne.n	800c350 <follow_path+0x1e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c33c:	f008 0203 	and.w	r2, r8, #3
 800c340:	2a01      	cmp	r2, #1
 800c342:	bf08      	it	eq
 800c344:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c348:	2b04      	cmp	r3, #4
 800c34a:	bf08      	it	eq
 800c34c:	f045 0508 	orreq.w	r5, r5, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c350:	f88a 502f 	strb.w	r5, [sl, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c354:	4650      	mov	r0, sl
 800c356:	f7ff fac3 	bl	800b8e0 <dir_find>
			ns = dp->fn[NSFLAG];
 800c35a:	f89a 202f 	ldrb.w	r2, [sl, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c35e:	4601      	mov	r1, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	d15f      	bne.n	800c424 <follow_path+0x2b8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c364:	f012 0f04 	tst.w	r2, #4
 800c368:	f47f af21 	bne.w	800c1ae <follow_path+0x42>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c36c:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800c370:	f013 0f10 	tst.w	r3, #16
 800c374:	d05f      	beq.n	800c436 <follow_path+0x2ca>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c376:	9803      	ldr	r0, [sp, #12]
 800c378:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800c37c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800c380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c384:	4419      	add	r1, r3
 800c386:	f7ff fee1 	bl	800c14c <ld_clust>
 800c38a:	f8ca 0008 	str.w	r0, [sl, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c38e:	f8da 3000 	ldr.w	r3, [sl]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	9301      	str	r3, [sp, #4]
		w = p[si++];					/* Get a character */
 800c396:	9a02      	ldr	r2, [sp, #8]
 800c398:	7815      	ldrb	r5, [r2, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800c39a:	2d1f      	cmp	r5, #31
 800c39c:	d958      	bls.n	800c450 <follow_path+0x2e4>
 800c39e:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3a2:	4616      	mov	r6, r2
 800c3a4:	4690      	mov	r8, r2
 800c3a6:	465f      	mov	r7, fp
		w = p[si++];					/* Get a character */
 800c3a8:	2401      	movs	r4, #1
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	e727      	b.n	800c1fe <follow_path+0x92>
				cf |= NS_LOSS | NS_LFN; break;
 800c3ae:	f045 0503 	orr.w	r5, r5, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c3b2:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c3b6:	2be5      	cmp	r3, #229	@ 0xe5
 800c3b8:	d1b3      	bne.n	800c322 <follow_path+0x1b6>
 800c3ba:	270b      	movs	r7, #11
 800c3bc:	2305      	movs	r3, #5
 800c3be:	f88a 3024 	strb.w	r3, [sl, #36]	@ 0x24
 800c3c2:	e7ab      	b.n	800c31c <follow_path+0x1b0>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 fb4a 	bl	800ca60 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	b118      	cbz	r0, 800c3d8 <follow_path+0x26c>
 800c3d0:	4a25      	ldr	r2, [pc, #148]	@ (800c468 <follow_path+0x2fc>)
 800c3d2:	4402      	add	r2, r0
 800c3d4:	f812 3c80 	ldrb.w	r3, [r2, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 800c3d8:	f045 0502 	orr.w	r5, r5, #2
 800c3dc:	e785      	b.n	800c2ea <follow_path+0x17e>
	while (*str && *str != chr) str++;
 800c3de:	222b      	movs	r2, #43	@ 0x2b
 800c3e0:	4922      	ldr	r1, [pc, #136]	@ (800c46c <follow_path+0x300>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00b      	beq.n	800c3fe <follow_path+0x292>
 800c3e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	d1f9      	bne.n	800c3e2 <follow_path+0x276>
				if (IsUpper(w)) {		/* ASCII large capital */
 800c3ee:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	2a19      	cmp	r2, #25
 800c3f6:	d806      	bhi.n	800c406 <follow_path+0x29a>
					b |= 2;
 800c3f8:	f048 0802 	orr.w	r8, r8, #2
 800c3fc:	e77a      	b.n	800c2f4 <follow_path+0x188>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	f47f af75 	bne.w	800c2ee <follow_path+0x182>
 800c404:	e7f3      	b.n	800c3ee <follow_path+0x282>
					if (IsLower(w)) {	/* ASCII small capital */
 800c406:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c40a:	b292      	uxth	r2, r2
 800c40c:	2a19      	cmp	r2, #25
 800c40e:	f63f af71 	bhi.w	800c2f4 <follow_path+0x188>
						b |= 1; w -= 0x20;
 800c412:	f048 0801 	orr.w	r8, r8, #1
 800c416:	3b20      	subs	r3, #32
 800c418:	b29b      	uxth	r3, r3
 800c41a:	e76b      	b.n	800c2f4 <follow_path+0x188>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c41c:	f04f 0800 	mov.w	r8, #0
 800c420:	2708      	movs	r7, #8
 800c422:	e7cb      	b.n	800c3bc <follow_path+0x250>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c424:	2804      	cmp	r0, #4
 800c426:	f47f aec2 	bne.w	800c1ae <follow_path+0x42>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c42a:	f012 0f04 	tst.w	r2, #4
 800c42e:	bf14      	ite	ne
 800c430:	4601      	movne	r1, r0
 800c432:	2105      	moveq	r1, #5
 800c434:	e6bb      	b.n	800c1ae <follow_path+0x42>
				res = FR_NO_PATH; break;
 800c436:	2105      	movs	r1, #5
 800c438:	e6b9      	b.n	800c1ae <follow_path+0x42>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c43a:	f89a 3024 	ldrb.w	r3, [sl, #36]	@ 0x24
 800c43e:	2be5      	cmp	r3, #229	@ 0xe5
 800c440:	d0ec      	beq.n	800c41c <follow_path+0x2b0>
 800c442:	f04f 0800 	mov.w	r8, #0
	if (ni == 8) b <<= 2;
 800c446:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800c44a:	fa5f f883 	uxtb.w	r8, r3
 800c44e:	e768      	b.n	800c322 <follow_path+0x1b6>
	lfn[di] = 0;						/* LFN is created */
 800c450:	2300      	movs	r3, #0
 800c452:	9a01      	ldr	r2, [sp, #4]
 800c454:	8013      	strh	r3, [r2, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c456:	e002      	b.n	800c45e <follow_path+0x2f2>
	lfn[di] = 0;						/* LFN is created */
 800c458:	2300      	movs	r3, #0
 800c45a:	9a01      	ldr	r2, [sp, #4]
 800c45c:	8013      	strh	r3, [r2, #0]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c45e:	2106      	movs	r1, #6
	return res;
 800c460:	e6a5      	b.n	800c1ae <follow_path+0x42>
 800c462:	bf00      	nop
 800c464:	0800f02c 	.word	0x0800f02c
 800c468:	0800f050 	.word	0x0800f050
 800c46c:	0800f038 	.word	0x0800f038

0800c470 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	9001      	str	r0, [sp, #4]
 800c476:	9100      	str	r1, [sp, #0]
 800c478:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c47a:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c47c:	a803      	add	r0, sp, #12
 800c47e:	f7fe fe41 	bl	800b104 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c482:	1e04      	subs	r4, r0, #0
 800c484:	db1a      	blt.n	800c4bc <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c486:	4b11      	ldr	r3, [pc, #68]	@ (800c4cc <f_mount+0x5c>)
 800c488:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800c48c:	b125      	cbz	r5, 800c498 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c48e:	4628      	mov	r0, r5
 800c490:	f7fe fdf6 	bl	800b080 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c494:	2300      	movs	r3, #0
 800c496:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	b18b      	cbz	r3, 800c4c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c4cc <f_mount+0x5c>)
 800c4a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c4a6:	2e01      	cmp	r6, #1
 800c4a8:	d002      	beq.n	800c4b0 <f_mount+0x40>
 800c4aa:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800c4ac:	b004      	add	sp, #16
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	a901      	add	r1, sp, #4
 800c4b4:	4668      	mov	r0, sp
 800c4b6:	f7ff fca1 	bl	800bdfc <find_volume>
	LEAVE_FF(fs, res);
 800c4ba:	e7f7      	b.n	800c4ac <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4bc:	200b      	movs	r0, #11
 800c4be:	e7f5      	b.n	800c4ac <f_mount+0x3c>
	FatFs[vol] = fs;					/* Register new fs object */
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	4b02      	ldr	r3, [pc, #8]	@ (800c4cc <f_mount+0x5c>)
 800c4c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c4c8:	e7f0      	b.n	800c4ac <f_mount+0x3c>
 800c4ca:	bf00      	nop
 800c4cc:	20001484 	.word	0x20001484

0800c4d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800c4d8:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	f000 810a 	beq.w	800c6f4 <f_open+0x224>
 800c4e0:	4614      	mov	r4, r2
 800c4e2:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c4e4:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800c4e8:	463a      	mov	r2, r7
 800c4ea:	a982      	add	r1, sp, #520	@ 0x208
 800c4ec:	a801      	add	r0, sp, #4
 800c4ee:	f7ff fc85 	bl	800bdfc <find_volume>
	if (res == FR_OK) {
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	b130      	cbz	r0, 800c504 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800c500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800c504:	f8dd 8208 	ldr.w	r8, [sp, #520]	@ 0x208
 800c508:	f8cd 820c 	str.w	r8, [sp, #524]	@ 0x20c
		INIT_NAMBUF(fs);
 800c50c:	ab02      	add	r3, sp, #8
 800c50e:	f8c8 300c 	str.w	r3, [r8, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c512:	9901      	ldr	r1, [sp, #4]
 800c514:	a883      	add	r0, sp, #524	@ 0x20c
 800c516:	f7ff fe29 	bl	800c16c <follow_path>
		if (res == FR_OK) {
 800c51a:	4603      	mov	r3, r0
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f040 80f3 	bne.w	800c708 <f_open+0x238>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c522:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800c526:	2b00      	cmp	r3, #0
 800c528:	f2c0 80e9 	blt.w	800c6fe <f_open+0x22e>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c52c:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 800c530:	bf14      	ite	ne
 800c532:	2101      	movne	r1, #1
 800c534:	2100      	moveq	r1, #0
 800c536:	a883      	add	r0, sp, #524	@ 0x20c
 800c538:	f7fe fcdc 	bl	800aef4 <chk_lock>
 800c53c:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c53e:	f014 0f1c 	tst.w	r4, #28
 800c542:	d063      	beq.n	800c60c <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 800c544:	2800      	cmp	r0, #0
 800c546:	f040 80e6 	bne.w	800c716 <f_open+0x246>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c54a:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800c54e:	f013 0f11 	tst.w	r3, #17
 800c552:	f040 80c7 	bne.w	800c6e4 <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c556:	f014 0f04 	tst.w	r4, #4
 800c55a:	d009      	beq.n	800c570 <f_open+0xa0>
 800c55c:	2508      	movs	r5, #8
 800c55e:	e7ca      	b.n	800c4f6 <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c560:	a883      	add	r0, sp, #524	@ 0x20c
 800c562:	f7ff fa97 	bl	800ba94 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c566:	2800      	cmp	r0, #0
 800c568:	f040 80ba 	bne.w	800c6e0 <f_open+0x210>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c56c:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c570:	f017 0f08 	tst.w	r7, #8
 800c574:	d110      	bne.n	800c598 <f_open+0xc8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c576:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800c57a:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c57c:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800c57e:	62b4      	str	r4, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c580:	2f01      	cmp	r7, #1
 800c582:	bf94      	ite	ls
 800c584:	2100      	movls	r1, #0
 800c586:	2101      	movhi	r1, #1
 800c588:	a883      	add	r0, sp, #524	@ 0x20c
 800c58a:	f7fe fcfb 	bl	800af84 <inc_lock>
 800c58e:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c590:	2800      	cmp	r0, #0
 800c592:	d14e      	bne.n	800c632 <f_open+0x162>
 800c594:	2502      	movs	r5, #2
 800c596:	e7ae      	b.n	800c4f6 <f_open+0x26>
				dw = GET_FATTIME();
 800c598:	f7fc fcc6 	bl	8008f28 <get_fattime>
 800c59c:	4681      	mov	r9, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c59e:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	f104 000e 	add.w	r0, r4, #14
 800c5a6:	f7fe fc8c 	bl	800aec2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c5aa:	4649      	mov	r1, r9
 800c5ac:	f104 0016 	add.w	r0, r4, #22
 800c5b0:	f7fe fc87 	bl	800aec2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	f7ff fdc6 	bl	800c14c <ld_clust>
 800c5c0:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	f7fe ff8e 	bl	800b4e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	f104 001c 	add.w	r0, r4, #28
 800c5d2:	f7fe fc76 	bl	800aec2 <st_dword>
					fs->wflag = 1;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	d024      	beq.n	800c62c <f_open+0x15c>
						dw = fs->winsect;
 800c5e2:	f8d8 4030 	ldr.w	r4, [r8, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	a883      	add	r0, sp, #524	@ 0x20c
 800c5ec:	f7ff f8aa 	bl	800b744 <remove_chain>
						if (res == FR_OK) {
 800c5f0:	b108      	cbz	r0, 800c5f6 <f_open+0x126>
						res = remove_chain(&dj.obj, cl, 0);
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	e77f      	b.n	800c4f6 <f_open+0x26>
							res = move_window(fs, dw);
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	f7fe fdfc 	bl	800b1f6 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c5fe:	f109 33ff 	add.w	r3, r9, #4294967295
 800c602:	f8c8 3010 	str.w	r3, [r8, #16]
		if (res == FR_OK) {
 800c606:	b188      	cbz	r0, 800c62c <f_open+0x15c>
							res = move_window(fs, dw);
 800c608:	4605      	mov	r5, r0
 800c60a:	e774      	b.n	800c4f6 <f_open+0x26>
			if (res == FR_OK) {					/* Following succeeded */
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d16b      	bne.n	800c6e8 <f_open+0x218>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c610:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800c614:	f013 0f10 	tst.w	r3, #16
 800c618:	d168      	bne.n	800c6ec <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c61a:	f014 0f02 	tst.w	r4, #2
 800c61e:	d002      	beq.n	800c626 <f_open+0x156>
 800c620:	f013 0f01 	tst.w	r3, #1
 800c624:	d164      	bne.n	800c6f0 <f_open+0x220>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c626:	f014 0f08 	tst.w	r4, #8
 800c62a:	d0a4      	beq.n	800c576 <f_open+0xa6>
				mode |= FA_MODIFIED;
 800c62c:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
 800c630:	e7a1      	b.n	800c576 <f_open+0xa6>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c632:	4621      	mov	r1, r4
 800c634:	4640      	mov	r0, r8
 800c636:	f7ff fd89 	bl	800c14c <ld_clust>
 800c63a:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c63c:	f104 001c 	add.w	r0, r4, #28
 800c640:	f7fe fc34 	bl	800aeac <ld_dword>
 800c644:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c646:	2100      	movs	r1, #0
 800c648:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c64a:	f8c6 8000 	str.w	r8, [r6]
			fp->obj.id = fs->id;
 800c64e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800c652:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800c654:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800c656:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c658:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c65a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c65c:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 800c660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c664:	4648      	mov	r0, r9
 800c666:	f7fe fc3e 	bl	800aee6 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c66a:	f017 0f20 	tst.w	r7, #32
 800c66e:	f43f af44 	beq.w	800c4fa <f_open+0x2a>
 800c672:	68f4      	ldr	r4, [r6, #12]
 800c674:	2c00      	cmp	r4, #0
 800c676:	f43f af40 	beq.w	800c4fa <f_open+0x2a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c67a:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c67c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c680:	025f      	lsls	r7, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c682:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c684:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 800c688:	d804      	bhi.n	800c694 <f_open+0x1c4>
 800c68a:	460b      	mov	r3, r1
 800c68c:	e00e      	b.n	800c6ac <f_open+0x1dc>
 800c68e:	1be4      	subs	r4, r4, r7
 800c690:	42a7      	cmp	r7, r4
 800c692:	d20a      	bcs.n	800c6aa <f_open+0x1da>
					clst = get_fat(&fp->obj, clst);
 800c694:	4630      	mov	r0, r6
 800c696:	f7fe ff34 	bl	800b502 <get_fat>
 800c69a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c69c:	2801      	cmp	r0, #1
 800c69e:	d92b      	bls.n	800c6f8 <f_open+0x228>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c6a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c6a4:	d1f3      	bne.n	800c68e <f_open+0x1be>
 800c6a6:	2501      	movs	r5, #1
 800c6a8:	e027      	b.n	800c6fa <f_open+0x22a>
 800c6aa:	4603      	mov	r3, r0
				fp->clust = clst;
 800c6ac:	61f3      	str	r3, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6ae:	f3c4 0308 	ubfx	r3, r4, #0, #9
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f43f af21 	beq.w	800c4fa <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	f7fe fcf5 	bl	800b0a8 <clust2sect>
 800c6be:	b908      	cbnz	r0, 800c6c4 <f_open+0x1f4>
						res = FR_INT_ERR;
 800c6c0:	2502      	movs	r5, #2
 800c6c2:	e718      	b.n	800c4f6 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6c4:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 800c6c8:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c6d2:	f7fe fbc1 	bl	800ae58 <disk_read>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f43f af0f 	beq.w	800c4fa <f_open+0x2a>
 800c6dc:	2501      	movs	r5, #1
 800c6de:	e70a      	b.n	800c4f6 <f_open+0x26>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c6e0:	4605      	mov	r5, r0
 800c6e2:	e708      	b.n	800c4f6 <f_open+0x26>
					res = FR_DENIED;
 800c6e4:	2507      	movs	r5, #7
 800c6e6:	e706      	b.n	800c4f6 <f_open+0x26>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	e704      	b.n	800c4f6 <f_open+0x26>
					res = FR_NO_FILE;
 800c6ec:	2504      	movs	r5, #4
 800c6ee:	e702      	b.n	800c4f6 <f_open+0x26>
						res = FR_DENIED;
 800c6f0:	2507      	movs	r5, #7
 800c6f2:	e700      	b.n	800c4f6 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800c6f4:	2509      	movs	r5, #9
 800c6f6:	e700      	b.n	800c4fa <f_open+0x2a>
					if (clst <= 1) res = FR_INT_ERR;
 800c6f8:	2502      	movs	r5, #2
				fp->clust = clst;
 800c6fa:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6fc:	e6fb      	b.n	800c4f6 <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6fe:	f014 0f1c 	tst.w	r4, #28
 800c702:	d106      	bne.n	800c712 <f_open+0x242>
				res = FR_INVALID_NAME;
 800c704:	2306      	movs	r3, #6
 800c706:	e002      	b.n	800c70e <f_open+0x23e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c708:	f014 0f1c 	tst.w	r4, #28
 800c70c:	d103      	bne.n	800c716 <f_open+0x246>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c70e:	461d      	mov	r5, r3
 800c710:	e6f1      	b.n	800c4f6 <f_open+0x26>
				res = FR_INVALID_NAME;
 800c712:	2506      	movs	r5, #6
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c714:	e6ef      	b.n	800c4f6 <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c716:	2b04      	cmp	r3, #4
 800c718:	d10b      	bne.n	800c732 <f_open+0x262>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c71a:	4b07      	ldr	r3, [pc, #28]	@ (800c738 <f_open+0x268>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f43f af1e 	beq.w	800c560 <f_open+0x90>
 800c724:	4b04      	ldr	r3, [pc, #16]	@ (800c738 <f_open+0x268>)
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f43f af19 	beq.w	800c560 <f_open+0x90>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c72e:	2512      	movs	r5, #18
 800c730:	e6e1      	b.n	800c4f6 <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c732:	461d      	mov	r5, r3
 800c734:	e6df      	b.n	800c4f6 <f_open+0x26>
 800c736:	bf00      	nop
 800c738:	20001460 	.word	0x20001460

0800c73c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	b087      	sub	sp, #28
 800c742:	4604      	mov	r4, r0
 800c744:	460f      	mov	r7, r1
 800c746:	4693      	mov	fp, r2
 800c748:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c74a:	2300      	movs	r3, #0
 800c74c:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c750:	a905      	add	r1, sp, #20
 800c752:	f7fe fd00 	bl	800b156 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c756:	4606      	mov	r6, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	f040 80a9 	bne.w	800c8b0 <f_read+0x174>
 800c75e:	7d66      	ldrb	r6, [r4, #21]
 800c760:	2e00      	cmp	r6, #0
 800c762:	f040 80a5 	bne.w	800c8b0 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c766:	7d23      	ldrb	r3, [r4, #20]
 800c768:	f013 0901 	ands.w	r9, r3, #1
 800c76c:	f000 80bf 	beq.w	800c8ee <f_read+0x1b2>
	remain = fp->obj.objsize - fp->fptr;
 800c770:	68e3      	ldr	r3, [r4, #12]
 800c772:	69a2      	ldr	r2, [r4, #24]
 800c774:	1a9b      	subs	r3, r3, r2
 800c776:	459b      	cmp	fp, r3
 800c778:	bf28      	it	cs
 800c77a:	469b      	movcs	fp, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800c77c:	f1bb 0f00 	cmp.w	fp, #0
 800c780:	f000 8096 	beq.w	800c8b0 <f_read+0x174>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c784:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c78e:	9603      	str	r6, [sp, #12]
 800c790:	46ba      	mov	sl, r7
 800c792:	e055      	b.n	800c840 <f_read+0x104>
					if (fp->cltbl) {
 800c794:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c796:	b11b      	cbz	r3, 800c7a0 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c798:	4620      	mov	r0, r4
 800c79a:	f7fe fc90 	bl	800b0be <clmt_clust>
 800c79e:	e05f      	b.n	800c860 <f_read+0x124>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c7a0:	69e1      	ldr	r1, [r4, #28]
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f7fe fead 	bl	800b502 <get_fat>
 800c7a8:	e05a      	b.n	800c860 <f_read+0x124>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c7aa:	2602      	movs	r6, #2
 800c7ac:	7566      	strb	r6, [r4, #21]
 800c7ae:	e07f      	b.n	800c8b0 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	7563      	strb	r3, [r4, #21]
 800c7b8:	464e      	mov	r6, r9
 800c7ba:	e079      	b.n	800c8b0 <f_read+0x174>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7bc:	2602      	movs	r6, #2
 800c7be:	7566      	strb	r6, [r4, #21]
 800c7c0:	e076      	b.n	800c8b0 <f_read+0x174>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c7c2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db01      	blt.n	800c7ce <f_read+0x92>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c7ca:	026d      	lsls	r5, r5, #9
				continue;
 800c7cc:	e02c      	b.n	800c828 <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c7ce:	6a20      	ldr	r0, [r4, #32]
 800c7d0:	1bc0      	subs	r0, r0, r7
 800c7d2:	42a8      	cmp	r0, r5
 800c7d4:	d2f9      	bcs.n	800c7ca <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c7d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7da:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c7de:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 800c7e2:	f7fe fb76 	bl	800aed2 <mem_cpy>
 800c7e6:	e7f0      	b.n	800c7ca <f_read+0x8e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c7e8:	6a22      	ldr	r2, [r4, #32]
 800c7ea:	42ba      	cmp	r2, r7
 800c7ec:	d00d      	beq.n	800c80a <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c7ee:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	db60      	blt.n	800c8b8 <f_read+0x17c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	463a      	mov	r2, r7
 800c7fa:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c7fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c802:	f7fe fb29 	bl	800ae58 <disk_read>
 800c806:	2800      	cmp	r0, #0
 800c808:	d169      	bne.n	800c8de <f_read+0x1a2>
			fp->sect = sect;
 800c80a:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c80c:	69a1      	ldr	r1, [r4, #24]
 800c80e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800c812:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
 800c816:	455d      	cmp	r5, fp
 800c818:	bf28      	it	cs
 800c81a:	465d      	movcs	r5, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c81c:	462a      	mov	r2, r5
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	4419      	add	r1, r3
 800c822:	4650      	mov	r0, sl
 800c824:	f7fe fb55 	bl	800aed2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c828:	44aa      	add	sl, r5
 800c82a:	69a3      	ldr	r3, [r4, #24]
 800c82c:	442b      	add	r3, r5
 800c82e:	61a3      	str	r3, [r4, #24]
 800c830:	f8d8 3000 	ldr.w	r3, [r8]
 800c834:	442b      	add	r3, r5
 800c836:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800c83a:	ebbb 0b05 	subs.w	fp, fp, r5
 800c83e:	d054      	beq.n	800c8ea <f_read+0x1ae>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c840:	69a1      	ldr	r1, [r4, #24]
 800c842:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e0      	bne.n	800c80c <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c84a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c84e:	f8b9 600a 	ldrh.w	r6, [r9, #10]
 800c852:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c854:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 800c858:	d108      	bne.n	800c86c <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c85a:	2900      	cmp	r1, #0
 800c85c:	d19a      	bne.n	800c794 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c85e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c860:	2801      	cmp	r0, #1
 800c862:	d9a2      	bls.n	800c7aa <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c864:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c868:	d0a2      	beq.n	800c7b0 <f_read+0x74>
				fp->clust = clst;				/* Update current cluster */
 800c86a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c86c:	69e1      	ldr	r1, [r4, #28]
 800c86e:	4648      	mov	r0, r9
 800c870:	f7fe fc1a 	bl	800b0a8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c874:	4607      	mov	r7, r0
 800c876:	2800      	cmp	r0, #0
 800c878:	d0a0      	beq.n	800c7bc <f_read+0x80>
			sect += csect;
 800c87a:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c87c:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 800c880:	d3b2      	bcc.n	800c7e8 <f_read+0xac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c882:	ea4f 255b 	mov.w	r5, fp, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c886:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c88a:	eb06 225b 	add.w	r2, r6, fp, lsr #9
 800c88e:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800c890:	bf88      	it	hi
 800c892:	1b9d      	subhi	r5, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c894:	462b      	mov	r3, r5
 800c896:	463a      	mov	r2, r7
 800c898:	4651      	mov	r1, sl
 800c89a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c89e:	f7fe fadb 	bl	800ae58 <disk_read>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d08d      	beq.n	800c7c2 <f_read+0x86>
 800c8a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	7563      	strb	r3, [r4, #21]
 800c8ae:	464e      	mov	r6, r9
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	b007      	add	sp, #28
 800c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c8be:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8c2:	f7fe fad7 	bl	800ae74 <disk_write>
 800c8c6:	b920      	cbnz	r0, 800c8d2 <f_read+0x196>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8c8:	7d23      	ldrb	r3, [r4, #20]
 800c8ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ce:	7523      	strb	r3, [r4, #20]
 800c8d0:	e791      	b.n	800c7f6 <f_read+0xba>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	7563      	strb	r3, [r4, #21]
 800c8da:	464e      	mov	r6, r9
 800c8dc:	e7e8      	b.n	800c8b0 <f_read+0x174>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8de:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	7563      	strb	r3, [r4, #21]
 800c8e6:	464e      	mov	r6, r9
 800c8e8:	e7e2      	b.n	800c8b0 <f_read+0x174>
 800c8ea:	9e03      	ldr	r6, [sp, #12]
 800c8ec:	e7e0      	b.n	800c8b0 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c8ee:	2607      	movs	r6, #7
 800c8f0:	e7de      	b.n	800c8b0 <f_read+0x174>

0800c8f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c8f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8f4:	b083      	sub	sp, #12
 800c8f6:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c8f8:	a901      	add	r1, sp, #4
 800c8fa:	f7fe fc2c 	bl	800b156 <validate>
	if (res == FR_OK) {
 800c8fe:	b978      	cbnz	r0, 800c920 <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c900:	7d23      	ldrb	r3, [r4, #20]
 800c902:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 800c906:	d00b      	beq.n	800c920 <f_sync+0x2e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c90c:	d10a      	bne.n	800c924 <f_sync+0x32>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c90e:	f7fc fb0b 	bl	8008f28 <get_fattime>
 800c912:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c914:	9e01      	ldr	r6, [sp, #4]
 800c916:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c918:	4630      	mov	r0, r6
 800c91a:	f7fe fc6c 	bl	800b1f6 <move_window>
				if (res == FR_OK) {
 800c91e:	b178      	cbz	r0, 800c940 <f_sync+0x4e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800c920:	b003      	add	sp, #12
 800c922:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c924:	2301      	movs	r3, #1
 800c926:	6a22      	ldr	r2, [r4, #32]
 800c928:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c92c:	9801      	ldr	r0, [sp, #4]
 800c92e:	7840      	ldrb	r0, [r0, #1]
 800c930:	f7fe faa0 	bl	800ae74 <disk_write>
 800c934:	bb28      	cbnz	r0, 800c982 <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c936:	7d23      	ldrb	r3, [r4, #20]
 800c938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c93c:	7523      	strb	r3, [r4, #20]
 800c93e:	e7e6      	b.n	800c90e <f_sync+0x1c>
					dir = fp->dir_ptr;
 800c940:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c942:	7afb      	ldrb	r3, [r7, #11]
 800c944:	f043 0320 	orr.w	r3, r3, #32
 800c948:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c94a:	68a2      	ldr	r2, [r4, #8]
 800c94c:	4639      	mov	r1, r7
 800c94e:	6820      	ldr	r0, [r4, #0]
 800c950:	f7fe fdca 	bl	800b4e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c954:	68e1      	ldr	r1, [r4, #12]
 800c956:	f107 001c 	add.w	r0, r7, #28
 800c95a:	f7fe fab2 	bl	800aec2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c95e:	4629      	mov	r1, r5
 800c960:	f107 0016 	add.w	r0, r7, #22
 800c964:	f7fe faad 	bl	800aec2 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800c968:	2300      	movs	r3, #0
 800c96a:	74bb      	strb	r3, [r7, #18]
	*ptr++ = (BYTE)val;
 800c96c:	74fb      	strb	r3, [r7, #19]
					fs->wflag = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c972:	4630      	mov	r0, r6
 800c974:	f7fe fcde 	bl	800b334 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c978:	7d23      	ldrb	r3, [r4, #20]
 800c97a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c97e:	7523      	strb	r3, [r4, #20]
 800c980:	e7ce      	b.n	800c920 <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c982:	2001      	movs	r0, #1
 800c984:	e7cc      	b.n	800c920 <f_sync+0x2e>

0800c986 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c986:	b510      	push	{r4, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c98c:	f7ff ffb1 	bl	800c8f2 <f_sync>
	if (res == FR_OK)
 800c990:	b108      	cbz	r0, 800c996 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800c992:	b002      	add	sp, #8
 800c994:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c996:	a901      	add	r1, sp, #4
 800c998:	4620      	mov	r0, r4
 800c99a:	f7fe fbdc 	bl	800b156 <validate>
		if (res == FR_OK) {
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d1f7      	bne.n	800c992 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c9a2:	6920      	ldr	r0, [r4, #16]
 800c9a4:	f7fe fb4a 	bl	800b03c <dec_lock>
			if (res == FR_OK)
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1f2      	bne.n	800c992 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800c9ac:	6020      	str	r0, [r4, #0]
 800c9ae:	e7f0      	b.n	800c992 <f_close+0xc>

0800c9b0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c9b0:	b530      	push	{r4, r5, lr}
 800c9b2:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800c9b6:	9001      	str	r0, [sp, #4]
 800c9b8:	460c      	mov	r4, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	a983      	add	r1, sp, #524	@ 0x20c
 800c9be:	a801      	add	r0, sp, #4
 800c9c0:	f7ff fa1c 	bl	800bdfc <find_volume>
	if (res == FR_OK) {
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b118      	cbz	r0, 800c9d0 <f_stat+0x20>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800c9ce:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj.obj.fs);
 800c9d0:	9b83      	ldr	r3, [sp, #524]	@ 0x20c
 800c9d2:	aa03      	add	r2, sp, #12
 800c9d4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9d6:	9901      	ldr	r1, [sp, #4]
 800c9d8:	a883      	add	r0, sp, #524	@ 0x20c
 800c9da:	f7ff fbc7 	bl	800c16c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800c9de:	4605      	mov	r5, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d1f1      	bne.n	800c9c8 <f_stat+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c9e4:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	db06      	blt.n	800c9fa <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d0eb      	beq.n	800c9c8 <f_stat+0x18>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	a883      	add	r0, sp, #524	@ 0x20c
 800c9f4:	f7fe fc19 	bl	800b22a <get_fileinfo>
 800c9f8:	e7e6      	b.n	800c9c8 <f_stat+0x18>
				res = FR_INVALID_NAME;
 800c9fa:	2506      	movs	r5, #6
 800c9fc:	e7e4      	b.n	800c9c8 <f_stat+0x18>
	...

0800ca00 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800ca00:	4b13      	ldr	r3, [pc, #76]	@ (800ca50 <FATFS_LinkDriverEx+0x50>)
 800ca02:	7a5b      	ldrb	r3, [r3, #9]
 800ca04:	bb13      	cbnz	r3, 800ca4c <FATFS_LinkDriverEx+0x4c>
{
 800ca06:	b510      	push	{r4, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca0e:	4b10      	ldr	r3, [pc, #64]	@ (800ca50 <FATFS_LinkDriverEx+0x50>)
 800ca10:	f893 c009 	ldrb.w	ip, [r3, #9]
 800ca14:	fa5f fc8c 	uxtb.w	ip, ip
 800ca18:	f04f 0e00 	mov.w	lr, #0
 800ca1c:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800ca20:	f893 c009 	ldrb.w	ip, [r3, #9]
 800ca24:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800ca28:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800ca2c:	7a5c      	ldrb	r4, [r3, #9]
 800ca2e:	441c      	add	r4, r3
 800ca30:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800ca32:	7a5a      	ldrb	r2, [r3, #9]
 800ca34:	1c54      	adds	r4, r2, #1
 800ca36:	b2e4      	uxtb	r4, r4
 800ca38:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800ca3a:	3230      	adds	r2, #48	@ 0x30
 800ca3c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800ca3e:	233a      	movs	r3, #58	@ 0x3a
 800ca40:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800ca42:	232f      	movs	r3, #47	@ 0x2f
 800ca44:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800ca46:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800ca4a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800ca4c:	2001      	movs	r0, #1
}
 800ca4e:	4770      	bx	lr
 800ca50:	20001488 	.word	0x20001488

0800ca54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca54:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca56:	2200      	movs	r2, #0
 800ca58:	f7ff ffd2 	bl	800ca00 <FATFS_LinkDriverEx>
}
 800ca5c:	bd08      	pop	{r3, pc}
	...

0800ca60 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ca60:	287f      	cmp	r0, #127	@ 0x7f
 800ca62:	d916      	bls.n	800ca92 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ca64:	b131      	cbz	r1, 800ca74 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca66:	28ff      	cmp	r0, #255	@ 0xff
 800ca68:	d812      	bhi.n	800ca90 <ff_convert+0x30>
 800ca6a:	3880      	subs	r0, #128	@ 0x80
 800ca6c:	4b09      	ldr	r3, [pc, #36]	@ (800ca94 <ff_convert+0x34>)
 800ca6e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800ca72:	4770      	bx	lr
 800ca74:	4a07      	ldr	r2, [pc, #28]	@ (800ca94 <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ca76:	2300      	movs	r3, #0
				if (chr == Tbl[c]) break;
 800ca78:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ca7c:	4281      	cmp	r1, r0
 800ca7e:	d003      	beq.n	800ca88 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 800ca80:	3301      	adds	r3, #1
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b80      	cmp	r3, #128	@ 0x80
 800ca86:	d1f7      	bne.n	800ca78 <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 800ca88:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800ca8c:	b2c0      	uxtb	r0, r0
 800ca8e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca90:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800ca92:	4770      	bx	lr
 800ca94:	0800f380 	.word	0x0800f380

0800ca98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ca98:	b530      	push	{r4, r5, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ca9a:	4a22      	ldr	r2, [pc, #136]	@ (800cb24 <ff_wtoupper+0x8c>)
 800ca9c:	4b22      	ldr	r3, [pc, #136]	@ (800cb28 <ff_wtoupper+0x90>)
 800ca9e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800caa2:	bf38      	it	cc
 800caa4:	461a      	movcc	r2, r3
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
		if (chr < bc + nc) {	/* In the block? */
 800caa6:	4605      	mov	r5, r0
 800caa8:	3204      	adds	r2, #4
		bc = *p++;								/* Get block base */
 800caaa:	4694      	mov	ip, r2
 800caac:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 800cab0:	b1d9      	cbz	r1, 800caea <ff_wtoupper+0x52>
 800cab2:	4288      	cmp	r0, r1
 800cab4:	d319      	bcc.n	800caea <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cab6:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800caba:	0a1c      	lsrs	r4, r3, #8
 800cabc:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800cabe:	eb03 0e01 	add.w	lr, r3, r1
 800cac2:	4570      	cmp	r0, lr
 800cac4:	db05      	blt.n	800cad2 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800cac6:	3204      	adds	r2, #4
 800cac8:	2c00      	cmp	r4, #0
 800caca:	d1ee      	bne.n	800caaa <ff_wtoupper+0x12>
 800cacc:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
 800cad0:	e7ea      	b.n	800caa8 <ff_wtoupper+0x10>
			switch (cmd) {
 800cad2:	2c08      	cmp	r4, #8
 800cad4:	d809      	bhi.n	800caea <ff_wtoupper+0x52>
 800cad6:	e8df f004 	tbb	[pc, r4]
 800cada:	0905      	.short	0x0905
 800cadc:	1815120f 	.word	0x1815120f
 800cae0:	1e1b      	.short	0x1e1b
 800cae2:	21          	.byte	0x21
 800cae3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cae4:	1a6d      	subs	r5, r5, r1
 800cae6:	f832 0015 	ldrh.w	r0, [r2, r5, lsl #1]
	}

	return chr;
}
 800caea:	bd30      	pop	{r4, r5, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800caec:	1a43      	subs	r3, r0, r1
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	1ac3      	subs	r3, r0, r3
 800caf4:	b298      	uxth	r0, r3
 800caf6:	e7f8      	b.n	800caea <ff_wtoupper+0x52>
			case 2: chr -= 16; break;				/* Shift -16 */
 800caf8:	3810      	subs	r0, #16
 800cafa:	b280      	uxth	r0, r0
 800cafc:	e7f5      	b.n	800caea <ff_wtoupper+0x52>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cafe:	3820      	subs	r0, #32
 800cb00:	b280      	uxth	r0, r0
 800cb02:	e7f2      	b.n	800caea <ff_wtoupper+0x52>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cb04:	3830      	subs	r0, #48	@ 0x30
 800cb06:	b280      	uxth	r0, r0
 800cb08:	e7ef      	b.n	800caea <ff_wtoupper+0x52>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cb0a:	381a      	subs	r0, #26
 800cb0c:	b280      	uxth	r0, r0
 800cb0e:	e7ec      	b.n	800caea <ff_wtoupper+0x52>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cb10:	3008      	adds	r0, #8
 800cb12:	b280      	uxth	r0, r0
 800cb14:	e7e9      	b.n	800caea <ff_wtoupper+0x52>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cb16:	3850      	subs	r0, #80	@ 0x50
 800cb18:	b280      	uxth	r0, r0
 800cb1a:	e7e6      	b.n	800caea <ff_wtoupper+0x52>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cb1c:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800cb20:	b280      	uxth	r0, r0
 800cb22:	e7e2      	b.n	800caea <ff_wtoupper+0x52>
 800cb24:	0800f0d0 	.word	0x0800f0d0
 800cb28:	0800f18c 	.word	0x0800f18c

0800cb2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	490f      	ldr	r1, [pc, #60]	@ (800cb70 <MX_USB_DEVICE_Init+0x44>)
 800cb32:	4810      	ldr	r0, [pc, #64]	@ (800cb74 <MX_USB_DEVICE_Init+0x48>)
 800cb34:	f7fd fbe8 	bl	800a308 <USBD_Init>
 800cb38:	b970      	cbnz	r0, 800cb58 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800cb3a:	490f      	ldr	r1, [pc, #60]	@ (800cb78 <MX_USB_DEVICE_Init+0x4c>)
 800cb3c:	480d      	ldr	r0, [pc, #52]	@ (800cb74 <MX_USB_DEVICE_Init+0x48>)
 800cb3e:	f7fd fc07 	bl	800a350 <USBD_RegisterClass>
 800cb42:	b960      	cbnz	r0, 800cb5e <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800cb44:	490d      	ldr	r1, [pc, #52]	@ (800cb7c <MX_USB_DEVICE_Init+0x50>)
 800cb46:	480b      	ldr	r0, [pc, #44]	@ (800cb74 <MX_USB_DEVICE_Init+0x48>)
 800cb48:	f7fc fcee 	bl	8009528 <USBD_MSC_RegisterStorage>
 800cb4c:	b950      	cbnz	r0, 800cb64 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb4e:	4809      	ldr	r0, [pc, #36]	@ (800cb74 <MX_USB_DEVICE_Init+0x48>)
 800cb50:	f7fd fc26 	bl	800a3a0 <USBD_Start>
 800cb54:	b948      	cbnz	r0, 800cb6a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb56:	bd08      	pop	{r3, pc}
    Error_Handler();
 800cb58:	f7f6 fe86 	bl	8003868 <Error_Handler>
 800cb5c:	e7ed      	b.n	800cb3a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800cb5e:	f7f6 fe83 	bl	8003868 <Error_Handler>
 800cb62:	e7ef      	b.n	800cb44 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800cb64:	f7f6 fe80 	bl	8003868 <Error_Handler>
 800cb68:	e7f1      	b.n	800cb4e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800cb6a:	f7f6 fe7d 	bl	8003868 <Error_Handler>
}
 800cb6e:	e7f2      	b.n	800cb56 <MX_USB_DEVICE_Init+0x2a>
 800cb70:	200000cc 	.word	0x200000cc
 800cb74:	20001494 	.word	0x20001494
 800cb78:	20000044 	.word	0x20000044
 800cb7c:	200000e8 	.word	0x200000e8

0800cb80 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb80:	2312      	movs	r3, #18
 800cb82:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800cb84:	4800      	ldr	r0, [pc, #0]	@ (800cb88 <USBD_FS_DeviceDescriptor+0x8>)
 800cb86:	4770      	bx	lr
 800cb88:	200000b8 	.word	0x200000b8

0800cb8c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800cb90:	4800      	ldr	r0, [pc, #0]	@ (800cb94 <USBD_FS_LangIDStrDescriptor+0x8>)
 800cb92:	4770      	bx	lr
 800cb94:	200000b4 	.word	0x200000b4

0800cb98 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800cb98:	b18a      	cbz	r2, 800cbbe <IntToUnicode+0x26>
 800cb9a:	3101      	adds	r1, #1
 800cb9c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800cba0:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800cba4:	0f03      	lsrs	r3, r0, #28
 800cba6:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbaa:	bf34      	ite	cc
 800cbac:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbae:	3337      	addcs	r3, #55	@ 0x37
 800cbb0:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 800cbb4:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800cbb6:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 800cbba:	4291      	cmp	r1, r2
 800cbbc:	d1f2      	bne.n	800cba4 <IntToUnicode+0xc>
  }
}
 800cbbe:	4770      	bx	lr

0800cbc0 <USBD_FS_SerialStrDescriptor>:
{
 800cbc0:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800cbc2:	231a      	movs	r3, #26
 800cbc4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbc6:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf8 <USBD_FS_SerialStrDescriptor+0x38>)
 800cbc8:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 800cbcc:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800cbd0:	18c0      	adds	r0, r0, r3
 800cbd2:	d101      	bne.n	800cbd8 <USBD_FS_SerialStrDescriptor+0x18>
}
 800cbd4:	4809      	ldr	r0, [pc, #36]	@ (800cbfc <USBD_FS_SerialStrDescriptor+0x3c>)
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbd8:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <USBD_FS_SerialStrDescriptor+0x38>)
 800cbda:	f8d3 5a14 	ldr.w	r5, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbde:	4c08      	ldr	r4, [pc, #32]	@ (800cc00 <USBD_FS_SerialStrDescriptor+0x40>)
 800cbe0:	2208      	movs	r2, #8
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f7ff ffd8 	bl	800cb98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbe8:	2204      	movs	r2, #4
 800cbea:	f104 0110 	add.w	r1, r4, #16
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f7ff ffd2 	bl	800cb98 <IntToUnicode>
 800cbf4:	e7ee      	b.n	800cbd4 <USBD_FS_SerialStrDescriptor+0x14>
 800cbf6:	bf00      	nop
 800cbf8:	1fff7000 	.word	0x1fff7000
 800cbfc:	20000098 	.word	0x20000098
 800cc00:	2000009a 	.word	0x2000009a

0800cc04 <USBD_FS_ProductStrDescriptor>:
{
 800cc04:	b508      	push	{r3, lr}
 800cc06:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc08:	4902      	ldr	r1, [pc, #8]	@ (800cc14 <USBD_FS_ProductStrDescriptor+0x10>)
 800cc0a:	4803      	ldr	r0, [pc, #12]	@ (800cc18 <USBD_FS_ProductStrDescriptor+0x14>)
 800cc0c:	f7fe f8a6 	bl	800ad5c <USBD_GetString>
}
 800cc10:	4800      	ldr	r0, [pc, #0]	@ (800cc14 <USBD_FS_ProductStrDescriptor+0x10>)
 800cc12:	bd08      	pop	{r3, pc}
 800cc14:	20001770 	.word	0x20001770
 800cc18:	0800f480 	.word	0x0800f480

0800cc1c <USBD_FS_ManufacturerStrDescriptor>:
{
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc20:	4c03      	ldr	r4, [pc, #12]	@ (800cc30 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800cc22:	4621      	mov	r1, r4
 800cc24:	4803      	ldr	r0, [pc, #12]	@ (800cc34 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cc26:	f7fe f899 	bl	800ad5c <USBD_GetString>
}
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	bf00      	nop
 800cc30:	20001770 	.word	0x20001770
 800cc34:	0800f494 	.word	0x0800f494

0800cc38 <USBD_FS_ConfigStrDescriptor>:
{
 800cc38:	b508      	push	{r3, lr}
 800cc3a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc3c:	4902      	ldr	r1, [pc, #8]	@ (800cc48 <USBD_FS_ConfigStrDescriptor+0x10>)
 800cc3e:	4803      	ldr	r0, [pc, #12]	@ (800cc4c <USBD_FS_ConfigStrDescriptor+0x14>)
 800cc40:	f7fe f88c 	bl	800ad5c <USBD_GetString>
}
 800cc44:	4800      	ldr	r0, [pc, #0]	@ (800cc48 <USBD_FS_ConfigStrDescriptor+0x10>)
 800cc46:	bd08      	pop	{r3, pc}
 800cc48:	20001770 	.word	0x20001770
 800cc4c:	0800f4a8 	.word	0x0800f4a8

0800cc50 <USBD_FS_InterfaceStrDescriptor>:
{
 800cc50:	b508      	push	{r3, lr}
 800cc52:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc54:	4902      	ldr	r1, [pc, #8]	@ (800cc60 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800cc56:	4803      	ldr	r0, [pc, #12]	@ (800cc64 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800cc58:	f7fe f880 	bl	800ad5c <USBD_GetString>
}
 800cc5c:	4800      	ldr	r0, [pc, #0]	@ (800cc60 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800cc5e:	bd08      	pop	{r3, pc}
 800cc60:	20001770 	.word	0x20001770
 800cc64:	0800f4b4 	.word	0x0800f4b4

0800cc68 <STORAGE_IsWriteProtected_FS>:
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800cc68:	2000      	movs	r0, #0
 800cc6a:	4770      	bx	lr

0800cc6c <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	4770      	bx	lr

0800cc70 <STORAGE_Write_FS>:
{
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	4615      	mov	r5, r2
 800cc76:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cc78:	f7fc f993 	bl	8008fa2 <BSP_SD_IsDetected>
 800cc7c:	b1c0      	cbz	r0, 800ccb0 <STORAGE_Write_FS+0x40>
  	FileTransferCheck_UpdateOnWrite();
 800cc7e:	f7f6 fb09 	bl	8003294 <FileTransferCheck_UpdateOnWrite>
    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800cc82:	4632      	mov	r2, r6
 800cc84:	4629      	mov	r1, r5
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7fc f95e 	bl	8008f48 <BSP_SD_WriteBlocks_DMA>
    while (usbd_WriteStatus == 0)
 800cc8c:	4a0b      	ldr	r2, [pc, #44]	@ (800ccbc <STORAGE_Write_FS+0x4c>)
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d0fc      	beq.n	800cc8e <STORAGE_Write_FS+0x1e>
    usbd_WriteStatus = 0;
 800cc94:	4b09      	ldr	r3, [pc, #36]	@ (800ccbc <STORAGE_Write_FS+0x4c>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800cc9a:	4c09      	ldr	r4, [pc, #36]	@ (800ccc0 <STORAGE_Write_FS+0x50>)
 800cc9c:	f7fc f962 	bl	8008f64 <BSP_SD_GetCardState>
 800cca0:	b120      	cbz	r0, 800ccac <STORAGE_Write_FS+0x3c>
      if (timeout-- == 0)
 800cca2:	3c01      	subs	r4, #1
 800cca4:	d1fa      	bne.n	800cc9c <STORAGE_Write_FS+0x2c>
        return ret;
 800cca6:	f04f 34ff 	mov.w	r4, #4294967295
 800ccaa:	e005      	b.n	800ccb8 <STORAGE_Write_FS+0x48>
    ret = 0;
 800ccac:	2400      	movs	r4, #0
 800ccae:	e001      	b.n	800ccb4 <STORAGE_Write_FS+0x44>
  int8_t ret = -1;
 800ccb0:	f04f 34ff 	mov.w	r4, #4294967295
  FileTransferCheck_Init();
 800ccb4:	f7f6 faec 	bl	8003290 <FileTransferCheck_Init>
}
 800ccb8:	4620      	mov	r0, r4
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	20001978 	.word	0x20001978
 800ccc0:	000186a1 	.word	0x000186a1

0800ccc4 <STORAGE_Read_FS>:
{
 800ccc4:	b570      	push	{r4, r5, r6, lr}
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	4615      	mov	r5, r2
 800ccca:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cccc:	f7fc f969 	bl	8008fa2 <BSP_SD_IsDetected>
 800ccd0:	b1a0      	cbz	r0, 800ccfc <STORAGE_Read_FS+0x38>
    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800ccd2:	4632      	mov	r2, r6
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7fc f928 	bl	8008f2c <BSP_SD_ReadBlocks_DMA>
    while (usbd_ReadStatus == 0)
 800ccdc:	4a09      	ldr	r2, [pc, #36]	@ (800cd04 <STORAGE_Read_FS+0x40>)
 800ccde:	6813      	ldr	r3, [r2, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d0fc      	beq.n	800ccde <STORAGE_Read_FS+0x1a>
    usbd_ReadStatus = 0;
 800cce4:	4b07      	ldr	r3, [pc, #28]	@ (800cd04 <STORAGE_Read_FS+0x40>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800ccea:	4c07      	ldr	r4, [pc, #28]	@ (800cd08 <STORAGE_Read_FS+0x44>)
 800ccec:	f7fc f93a 	bl	8008f64 <BSP_SD_GetCardState>
 800ccf0:	b118      	cbz	r0, 800ccfa <STORAGE_Read_FS+0x36>
      if (timeout-- == 0)
 800ccf2:	3c01      	subs	r4, #1
 800ccf4:	d1fa      	bne.n	800ccec <STORAGE_Read_FS+0x28>
        return ret;
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	e7fb      	b.n	800ccfa <STORAGE_Read_FS+0x36>
 800cd02:	bf00      	nop
 800cd04:	20001974 	.word	0x20001974
 800cd08:	000186a1 	.word	0x000186a1

0800cd0c <STORAGE_IsReady_FS>:
{
 800cd0c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cd0e:	f7fc f948 	bl	8008fa2 <BSP_SD_IsDetected>
 800cd12:	b188      	cbz	r0, 800cd38 <STORAGE_IsReady_FS+0x2c>
    if (prev_status < 0)
 800cd14:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <STORAGE_IsReady_FS+0x48>)
 800cd16:	f993 3000 	ldrsb.w	r3, [r3]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	db06      	blt.n	800cd2c <STORAGE_IsReady_FS+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd1e:	f7fc f921 	bl	8008f64 <BSP_SD_GetCardState>
 800cd22:	3800      	subs	r0, #0
 800cd24:	bf18      	it	ne
 800cd26:	2001      	movne	r0, #1
 800cd28:	4240      	negs	r0, r0
}
 800cd2a:	bd08      	pop	{r3, pc}
      BSP_SD_Init();
 800cd2c:	f7fc f942 	bl	8008fb4 <BSP_SD_Init>
      prev_status = 0;
 800cd30:	4b08      	ldr	r3, [pc, #32]	@ (800cd54 <STORAGE_IsReady_FS+0x48>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	e7f2      	b.n	800cd1e <STORAGE_IsReady_FS+0x12>
  else if (prev_status == 0)
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <STORAGE_IsReady_FS+0x48>)
 800cd3a:	f993 3000 	ldrsb.w	r3, [r3]
 800cd3e:	b92b      	cbnz	r3, 800cd4c <STORAGE_IsReady_FS+0x40>
    prev_status = -1;
 800cd40:	4b04      	ldr	r3, [pc, #16]	@ (800cd54 <STORAGE_IsReady_FS+0x48>)
 800cd42:	22ff      	movs	r2, #255	@ 0xff
 800cd44:	701a      	strb	r2, [r3, #0]
  int8_t ret = -1;
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4a:	e7ee      	b.n	800cd2a <STORAGE_IsReady_FS+0x1e>
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	e7eb      	b.n	800cd2a <STORAGE_IsReady_FS+0x1e>
 800cd52:	bf00      	nop
 800cd54:	20001970 	.word	0x20001970

0800cd58 <STORAGE_Init_FS>:
{
 800cd58:	b508      	push	{r3, lr}
 BSP_SD_Init();
 800cd5a:	f7fc f92b 	bl	8008fb4 <BSP_SD_Init>
}
 800cd5e:	2000      	movs	r0, #0
 800cd60:	bd08      	pop	{r3, pc}

0800cd62 <STORAGE_GetCapacity_FS>:
{
 800cd62:	b530      	push	{r4, r5, lr}
 800cd64:	b089      	sub	sp, #36	@ 0x24
 800cd66:	460d      	mov	r5, r1
 800cd68:	4614      	mov	r4, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800cd6a:	f7fc f91a 	bl	8008fa2 <BSP_SD_IsDetected>
 800cd6e:	b150      	cbz	r0, 800cd86 <STORAGE_GetCapacity_FS+0x24>
    BSP_SD_GetCardInfo(&info);
 800cd70:	4668      	mov	r0, sp
 800cd72:	f7fc f901 	bl	8008f78 <BSP_SD_GetCardInfo>
    *block_num = info.LogBlockNbr - 1;
 800cd76:	9b06      	ldr	r3, [sp, #24]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	602b      	str	r3, [r5, #0]
    *block_size = info.LogBlockSize;
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800cd80:	2000      	movs	r0, #0
}
 800cd82:	b009      	add	sp, #36	@ 0x24
 800cd84:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;
 800cd86:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8a:	e7fa      	b.n	800cd82 <STORAGE_GetCapacity_FS+0x20>

0800cd8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd8c:	b530      	push	{r4, r5, lr}
 800cd8e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd90:	2300      	movs	r3, #0
 800cd92:	9303      	str	r3, [sp, #12]
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	9305      	str	r3, [sp, #20]
 800cd98:	9306      	str	r3, [sp, #24]
 800cd9a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd9c:	6803      	ldr	r3, [r0, #0]
 800cd9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cda2:	d001      	beq.n	800cda8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cda4:	b009      	add	sp, #36	@ 0x24
 800cda6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cda8:	2500      	movs	r5, #0
 800cdaa:	9501      	str	r5, [sp, #4]
 800cdac:	4c16      	ldr	r4, [pc, #88]	@ (800ce08 <HAL_PCD_MspInit+0x7c>)
 800cdae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cdb0:	f043 0301 	orr.w	r3, r3, #1
 800cdb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cdb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cdb8:	f003 0301 	and.w	r3, r3, #1
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdc0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cdc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdce:	230a      	movs	r3, #10
 800cdd0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdd2:	a903      	add	r1, sp, #12
 800cdd4:	480d      	ldr	r0, [pc, #52]	@ (800ce0c <HAL_PCD_MspInit+0x80>)
 800cdd6:	f7f7 fd21 	bl	800481c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cde2:	9502      	str	r5, [sp, #8]
 800cde4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cde6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cdea:	6463      	str	r3, [r4, #68]	@ 0x44
 800cdec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cdee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdf2:	9302      	str	r3, [sp, #8]
 800cdf4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800cdf6:	462a      	mov	r2, r5
 800cdf8:	2107      	movs	r1, #7
 800cdfa:	2043      	movs	r0, #67	@ 0x43
 800cdfc:	f7f7 fab2 	bl	8004364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce00:	2043      	movs	r0, #67	@ 0x43
 800ce02:	f7f7 fae5 	bl	80043d0 <HAL_NVIC_EnableIRQ>
}
 800ce06:	e7cd      	b.n	800cda4 <HAL_PCD_MspInit+0x18>
 800ce08:	40023800 	.word	0x40023800
 800ce0c:	40020000 	.word	0x40020000

0800ce10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce10:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce12:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800ce16:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ce1a:	f7fd fad7 	bl	800a3cc <USBD_LL_SetupStage>
}
 800ce1e:	bd08      	pop	{r3, pc}

0800ce20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce20:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce22:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800ce26:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ce2a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800ce2e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ce32:	f7fd faf7 	bl	800a424 <USBD_LL_DataOutStage>
}
 800ce36:	bd08      	pop	{r3, pc}

0800ce38 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce38:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce3a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800ce3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ce42:	6a1a      	ldr	r2, [r3, #32]
 800ce44:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ce48:	f7fd fb30 	bl	800a4ac <USBD_LL_DataInStage>
}
 800ce4c:	bd08      	pop	{r3, pc}

0800ce4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce50:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ce54:	f7fd fbdf 	bl	800a616 <USBD_LL_SOF>
}
 800ce58:	bd08      	pop	{r3, pc}

0800ce5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce5a:	b510      	push	{r4, lr}
 800ce5c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce5e:	79c1      	ldrb	r1, [r0, #7]
 800ce60:	b111      	cbz	r1, 800ce68 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce62:	2902      	cmp	r1, #2
 800ce64:	d109      	bne.n	800ce7a <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800ce66:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce68:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800ce6c:	f7fd fbb4 	bl	800a5d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce70:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800ce74:	f7fd fb7f 	bl	800a576 <USBD_LL_Reset>
}
 800ce78:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ce7a:	f7f6 fcf5 	bl	8003868 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce7e:	2101      	movs	r1, #1
 800ce80:	e7f2      	b.n	800ce68 <HAL_PCD_ResetCallback+0xe>
	...

0800ce84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce84:	b510      	push	{r4, lr}
 800ce86:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce88:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ce8c:	f7fd fba7 	bl	800a5de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce90:	6822      	ldr	r2, [r4, #0]
 800ce92:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800ce96:	f043 0301 	orr.w	r3, r3, #1
 800ce9a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce9e:	7ae3      	ldrb	r3, [r4, #11]
 800cea0:	b123      	cbz	r3, 800ceac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cea2:	4a03      	ldr	r2, [pc, #12]	@ (800ceb0 <HAL_PCD_SuspendCallback+0x2c>)
 800cea4:	6913      	ldr	r3, [r2, #16]
 800cea6:	f043 0306 	orr.w	r3, r3, #6
 800ceaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	bf00      	nop
 800ceb0:	e000ed00 	.word	0xe000ed00

0800ceb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ceb6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ceba:	f7fd fb9f 	bl	800a5fc <USBD_LL_Resume>
}
 800cebe:	bd08      	pop	{r3, pc}

0800cec0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cec2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cec6:	f7fd fbce 	bl	800a666 <USBD_LL_IsoOUTIncomplete>
}
 800ceca:	bd08      	pop	{r3, pc}

0800cecc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cecc:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cece:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ced2:	f7fd fbb1 	bl	800a638 <USBD_LL_IsoINIncomplete>
}
 800ced6:	bd08      	pop	{r3, pc}

0800ced8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced8:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ceda:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800cede:	f7fd fbd9 	bl	800a694 <USBD_LL_DevConnected>
}
 800cee2:	bd08      	pop	{r3, pc}

0800cee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee4:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cee6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800ceea:	f7fd fbd5 	bl	800a698 <USBD_LL_DevDisconnected>
}
 800ceee:	bd08      	pop	{r3, pc}

0800cef0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cef0:	7802      	ldrb	r2, [r0, #0]
 800cef2:	b10a      	cbz	r2, 800cef8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800cef4:	2000      	movs	r0, #0
 800cef6:	4770      	bx	lr
{
 800cef8:	b510      	push	{r4, lr}
 800cefa:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800cefc:	4815      	ldr	r0, [pc, #84]	@ (800cf54 <USBD_LL_Init+0x64>)
 800cefe:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf02:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800cf0a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf10:	2202      	movs	r2, #2
 800cf12:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf14:	2300      	movs	r3, #0
 800cf16:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf18:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf1a:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf1c:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf1e:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cf20:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf22:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf24:	f7f7 fd99 	bl	8004a5a <HAL_PCD_Init>
 800cf28:	b980      	cbnz	r0, 800cf4c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf2a:	4c0a      	ldr	r4, [pc, #40]	@ (800cf54 <USBD_LL_Init+0x64>)
 800cf2c:	2180      	movs	r1, #128	@ 0x80
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7f8 fb78 	bl	8005624 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf34:	2240      	movs	r2, #64	@ 0x40
 800cf36:	2100      	movs	r1, #0
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f7f8 fb4e 	bl	80055da <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf3e:	2280      	movs	r2, #128	@ 0x80
 800cf40:	2101      	movs	r1, #1
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7f8 fb49 	bl	80055da <HAL_PCDEx_SetTxFiFo>
}
 800cf48:	2000      	movs	r0, #0
 800cf4a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800cf4c:	f7f6 fc8c 	bl	8003868 <Error_Handler>
 800cf50:	e7eb      	b.n	800cf2a <USBD_LL_Init+0x3a>
 800cf52:	bf00      	nop
 800cf54:	20001bf4 	.word	0x20001bf4

0800cf58 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf58:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800cf5c:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf60:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800cf64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cf68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cf6c:	bf14      	ite	ne
 800cf6e:	7d98      	ldrbne	r0, [r3, #22]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf70:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 800cf74:	4770      	bx	lr

0800cf76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf76:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf78:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cf7c:	f7f7 feb4 	bl	8004ce8 <HAL_PCD_EP_GetRxCount>
}
 800cf80:	bd08      	pop	{r3, pc}
	...

0800cf84 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800cf84:	4800      	ldr	r0, [pc, #0]	@ (800cf88 <USBD_static_malloc+0x4>)
 800cf86:	4770      	bx	lr
 800cf88:	2000197c 	.word	0x2000197c

0800cf8c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800cf8c:	4770      	bx	lr

0800cf8e <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800cf8e:	b120      	cbz	r0, 800cf9a <USBD_Get_USB_Status+0xc>
 800cf90:	2802      	cmp	r0, #2
 800cf92:	bf0c      	ite	eq
 800cf94:	2001      	moveq	r0, #1
 800cf96:	2003      	movne	r0, #3
 800cf98:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800cf9a:	4770      	bx	lr

0800cf9c <USBD_LL_Start>:
{
 800cf9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800cf9e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cfa2:	f7f7 fdcf 	bl	8004b44 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa6:	f7ff fff2 	bl	800cf8e <USBD_Get_USB_Status>
}
 800cfaa:	bd08      	pop	{r3, pc}

0800cfac <USBD_LL_OpenEP>:
{
 800cfac:	b508      	push	{r3, lr}
 800cfae:	4694      	mov	ip, r2
 800cfb0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfb2:	4663      	mov	r3, ip
 800cfb4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cfb8:	f7f7 fdf9 	bl	8004bae <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfbc:	f7ff ffe7 	bl	800cf8e <USBD_Get_USB_Status>
}
 800cfc0:	bd08      	pop	{r3, pc}

0800cfc2 <USBD_LL_CloseEP>:
{
 800cfc2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cfc4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cfc8:	f7f7 fe34 	bl	8004c34 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfcc:	f7ff ffdf 	bl	800cf8e <USBD_Get_USB_Status>
}
 800cfd0:	bd08      	pop	{r3, pc}

0800cfd2 <USBD_LL_FlushEP>:
{
 800cfd2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cfd4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cfd8:	f7f8 fae4 	bl	80055a4 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfdc:	f7ff ffd7 	bl	800cf8e <USBD_Get_USB_Status>
}
 800cfe0:	bd08      	pop	{r3, pc}

0800cfe2 <USBD_LL_StallEP>:
{
 800cfe2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cfe4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cfe8:	f7f7 feab 	bl	8004d42 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfec:	f7ff ffcf 	bl	800cf8e <USBD_Get_USB_Status>
}
 800cff0:	bd08      	pop	{r3, pc}

0800cff2 <USBD_LL_ClearStallEP>:
{
 800cff2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cff4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800cff8:	f7f7 fee4 	bl	8004dc4 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cffc:	f7ff ffc7 	bl	800cf8e <USBD_Get_USB_Status>
}
 800d000:	bd08      	pop	{r3, pc}

0800d002 <USBD_LL_SetUSBAddress>:
{
 800d002:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d004:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d008:	f7f7 fdbe 	bl	8004b88 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d00c:	f7ff ffbf 	bl	800cf8e <USBD_Get_USB_Status>
}
 800d010:	bd08      	pop	{r3, pc}

0800d012 <USBD_LL_Transmit>:
{
 800d012:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d014:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d018:	f7f7 fe6f 	bl	8004cfa <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01c:	f7ff ffb7 	bl	800cf8e <USBD_Get_USB_Status>
}
 800d020:	bd08      	pop	{r3, pc}

0800d022 <USBD_LL_PrepareReceive>:
{
 800d022:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d024:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800d028:	f7f7 fe3a 	bl	8004ca0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d02c:	f7ff ffaf 	bl	800cf8e <USBD_Get_USB_Status>
}
 800d030:	bd08      	pop	{r3, pc}
	...

0800d034 <std>:
 800d034:	2300      	movs	r3, #0
 800d036:	b510      	push	{r4, lr}
 800d038:	4604      	mov	r4, r0
 800d03a:	e9c0 3300 	strd	r3, r3, [r0]
 800d03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d042:	6083      	str	r3, [r0, #8]
 800d044:	8181      	strh	r1, [r0, #12]
 800d046:	6643      	str	r3, [r0, #100]	@ 0x64
 800d048:	81c2      	strh	r2, [r0, #14]
 800d04a:	6183      	str	r3, [r0, #24]
 800d04c:	4619      	mov	r1, r3
 800d04e:	2208      	movs	r2, #8
 800d050:	305c      	adds	r0, #92	@ 0x5c
 800d052:	f000 fa87 	bl	800d564 <memset>
 800d056:	4b0d      	ldr	r3, [pc, #52]	@ (800d08c <std+0x58>)
 800d058:	6263      	str	r3, [r4, #36]	@ 0x24
 800d05a:	4b0d      	ldr	r3, [pc, #52]	@ (800d090 <std+0x5c>)
 800d05c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d05e:	4b0d      	ldr	r3, [pc, #52]	@ (800d094 <std+0x60>)
 800d060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d062:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <std+0x64>)
 800d064:	6323      	str	r3, [r4, #48]	@ 0x30
 800d066:	4b0d      	ldr	r3, [pc, #52]	@ (800d09c <std+0x68>)
 800d068:	6224      	str	r4, [r4, #32]
 800d06a:	429c      	cmp	r4, r3
 800d06c:	d006      	beq.n	800d07c <std+0x48>
 800d06e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d072:	4294      	cmp	r4, r2
 800d074:	d002      	beq.n	800d07c <std+0x48>
 800d076:	33d0      	adds	r3, #208	@ 0xd0
 800d078:	429c      	cmp	r4, r3
 800d07a:	d105      	bne.n	800d088 <std+0x54>
 800d07c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d084:	f000 bae6 	b.w	800d654 <__retarget_lock_init_recursive>
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	bf00      	nop
 800d08c:	0800d311 	.word	0x0800d311
 800d090:	0800d333 	.word	0x0800d333
 800d094:	0800d36b 	.word	0x0800d36b
 800d098:	0800d38f 	.word	0x0800d38f
 800d09c:	200020d8 	.word	0x200020d8

0800d0a0 <stdio_exit_handler>:
 800d0a0:	4a02      	ldr	r2, [pc, #8]	@ (800d0ac <stdio_exit_handler+0xc>)
 800d0a2:	4903      	ldr	r1, [pc, #12]	@ (800d0b0 <stdio_exit_handler+0x10>)
 800d0a4:	4803      	ldr	r0, [pc, #12]	@ (800d0b4 <stdio_exit_handler+0x14>)
 800d0a6:	f000 b869 	b.w	800d17c <_fwalk_sglue>
 800d0aa:	bf00      	nop
 800d0ac:	20000108 	.word	0x20000108
 800d0b0:	0800e1c1 	.word	0x0800e1c1
 800d0b4:	20000118 	.word	0x20000118

0800d0b8 <cleanup_stdio>:
 800d0b8:	6841      	ldr	r1, [r0, #4]
 800d0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ec <cleanup_stdio+0x34>)
 800d0bc:	4299      	cmp	r1, r3
 800d0be:	b510      	push	{r4, lr}
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	d001      	beq.n	800d0c8 <cleanup_stdio+0x10>
 800d0c4:	f001 f87c 	bl	800e1c0 <_fflush_r>
 800d0c8:	68a1      	ldr	r1, [r4, #8]
 800d0ca:	4b09      	ldr	r3, [pc, #36]	@ (800d0f0 <cleanup_stdio+0x38>)
 800d0cc:	4299      	cmp	r1, r3
 800d0ce:	d002      	beq.n	800d0d6 <cleanup_stdio+0x1e>
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f001 f875 	bl	800e1c0 <_fflush_r>
 800d0d6:	68e1      	ldr	r1, [r4, #12]
 800d0d8:	4b06      	ldr	r3, [pc, #24]	@ (800d0f4 <cleanup_stdio+0x3c>)
 800d0da:	4299      	cmp	r1, r3
 800d0dc:	d004      	beq.n	800d0e8 <cleanup_stdio+0x30>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e4:	f001 b86c 	b.w	800e1c0 <_fflush_r>
 800d0e8:	bd10      	pop	{r4, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200020d8 	.word	0x200020d8
 800d0f0:	20002140 	.word	0x20002140
 800d0f4:	200021a8 	.word	0x200021a8

0800d0f8 <global_stdio_init.part.0>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d128 <global_stdio_init.part.0+0x30>)
 800d0fc:	4c0b      	ldr	r4, [pc, #44]	@ (800d12c <global_stdio_init.part.0+0x34>)
 800d0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d130 <global_stdio_init.part.0+0x38>)
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	4620      	mov	r0, r4
 800d104:	2200      	movs	r2, #0
 800d106:	2104      	movs	r1, #4
 800d108:	f7ff ff94 	bl	800d034 <std>
 800d10c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d110:	2201      	movs	r2, #1
 800d112:	2109      	movs	r1, #9
 800d114:	f7ff ff8e 	bl	800d034 <std>
 800d118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d11c:	2202      	movs	r2, #2
 800d11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d122:	2112      	movs	r1, #18
 800d124:	f7ff bf86 	b.w	800d034 <std>
 800d128:	20002210 	.word	0x20002210
 800d12c:	200020d8 	.word	0x200020d8
 800d130:	0800d0a1 	.word	0x0800d0a1

0800d134 <__sfp_lock_acquire>:
 800d134:	4801      	ldr	r0, [pc, #4]	@ (800d13c <__sfp_lock_acquire+0x8>)
 800d136:	f000 ba8e 	b.w	800d656 <__retarget_lock_acquire_recursive>
 800d13a:	bf00      	nop
 800d13c:	20002219 	.word	0x20002219

0800d140 <__sfp_lock_release>:
 800d140:	4801      	ldr	r0, [pc, #4]	@ (800d148 <__sfp_lock_release+0x8>)
 800d142:	f000 ba89 	b.w	800d658 <__retarget_lock_release_recursive>
 800d146:	bf00      	nop
 800d148:	20002219 	.word	0x20002219

0800d14c <__sinit>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	f7ff fff0 	bl	800d134 <__sfp_lock_acquire>
 800d154:	6a23      	ldr	r3, [r4, #32]
 800d156:	b11b      	cbz	r3, 800d160 <__sinit+0x14>
 800d158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d15c:	f7ff bff0 	b.w	800d140 <__sfp_lock_release>
 800d160:	4b04      	ldr	r3, [pc, #16]	@ (800d174 <__sinit+0x28>)
 800d162:	6223      	str	r3, [r4, #32]
 800d164:	4b04      	ldr	r3, [pc, #16]	@ (800d178 <__sinit+0x2c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1f5      	bne.n	800d158 <__sinit+0xc>
 800d16c:	f7ff ffc4 	bl	800d0f8 <global_stdio_init.part.0>
 800d170:	e7f2      	b.n	800d158 <__sinit+0xc>
 800d172:	bf00      	nop
 800d174:	0800d0b9 	.word	0x0800d0b9
 800d178:	20002210 	.word	0x20002210

0800d17c <_fwalk_sglue>:
 800d17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d180:	4607      	mov	r7, r0
 800d182:	4688      	mov	r8, r1
 800d184:	4614      	mov	r4, r2
 800d186:	2600      	movs	r6, #0
 800d188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d18c:	f1b9 0901 	subs.w	r9, r9, #1
 800d190:	d505      	bpl.n	800d19e <_fwalk_sglue+0x22>
 800d192:	6824      	ldr	r4, [r4, #0]
 800d194:	2c00      	cmp	r4, #0
 800d196:	d1f7      	bne.n	800d188 <_fwalk_sglue+0xc>
 800d198:	4630      	mov	r0, r6
 800d19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d907      	bls.n	800d1b4 <_fwalk_sglue+0x38>
 800d1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	d003      	beq.n	800d1b4 <_fwalk_sglue+0x38>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	47c0      	blx	r8
 800d1b2:	4306      	orrs	r6, r0
 800d1b4:	3568      	adds	r5, #104	@ 0x68
 800d1b6:	e7e9      	b.n	800d18c <_fwalk_sglue+0x10>

0800d1b8 <iprintf>:
 800d1b8:	b40f      	push	{r0, r1, r2, r3}
 800d1ba:	b507      	push	{r0, r1, r2, lr}
 800d1bc:	4906      	ldr	r1, [pc, #24]	@ (800d1d8 <iprintf+0x20>)
 800d1be:	ab04      	add	r3, sp, #16
 800d1c0:	6808      	ldr	r0, [r1, #0]
 800d1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c6:	6881      	ldr	r1, [r0, #8]
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	f000 fccf 	bl	800db6c <_vfiprintf_r>
 800d1ce:	b003      	add	sp, #12
 800d1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1d4:	b004      	add	sp, #16
 800d1d6:	4770      	bx	lr
 800d1d8:	20000114 	.word	0x20000114

0800d1dc <putchar>:
 800d1dc:	4b02      	ldr	r3, [pc, #8]	@ (800d1e8 <putchar+0xc>)
 800d1de:	4601      	mov	r1, r0
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	6882      	ldr	r2, [r0, #8]
 800d1e4:	f001 b876 	b.w	800e2d4 <_putc_r>
 800d1e8:	20000114 	.word	0x20000114

0800d1ec <_puts_r>:
 800d1ec:	6a03      	ldr	r3, [r0, #32]
 800d1ee:	b570      	push	{r4, r5, r6, lr}
 800d1f0:	6884      	ldr	r4, [r0, #8]
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	460e      	mov	r6, r1
 800d1f6:	b90b      	cbnz	r3, 800d1fc <_puts_r+0x10>
 800d1f8:	f7ff ffa8 	bl	800d14c <__sinit>
 800d1fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1fe:	07db      	lsls	r3, r3, #31
 800d200:	d405      	bmi.n	800d20e <_puts_r+0x22>
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	0598      	lsls	r0, r3, #22
 800d206:	d402      	bmi.n	800d20e <_puts_r+0x22>
 800d208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d20a:	f000 fa24 	bl	800d656 <__retarget_lock_acquire_recursive>
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	0719      	lsls	r1, r3, #28
 800d212:	d502      	bpl.n	800d21a <_puts_r+0x2e>
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d135      	bne.n	800d286 <_puts_r+0x9a>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4628      	mov	r0, r5
 800d21e:	f000 f931 	bl	800d484 <__swsetup_r>
 800d222:	b380      	cbz	r0, 800d286 <_puts_r+0x9a>
 800d224:	f04f 35ff 	mov.w	r5, #4294967295
 800d228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d22a:	07da      	lsls	r2, r3, #31
 800d22c:	d405      	bmi.n	800d23a <_puts_r+0x4e>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	059b      	lsls	r3, r3, #22
 800d232:	d402      	bmi.n	800d23a <_puts_r+0x4e>
 800d234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d236:	f000 fa0f 	bl	800d658 <__retarget_lock_release_recursive>
 800d23a:	4628      	mov	r0, r5
 800d23c:	bd70      	pop	{r4, r5, r6, pc}
 800d23e:	2b00      	cmp	r3, #0
 800d240:	da04      	bge.n	800d24c <_puts_r+0x60>
 800d242:	69a2      	ldr	r2, [r4, #24]
 800d244:	429a      	cmp	r2, r3
 800d246:	dc17      	bgt.n	800d278 <_puts_r+0x8c>
 800d248:	290a      	cmp	r1, #10
 800d24a:	d015      	beq.n	800d278 <_puts_r+0x8c>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	6022      	str	r2, [r4, #0]
 800d252:	7019      	strb	r1, [r3, #0]
 800d254:	68a3      	ldr	r3, [r4, #8]
 800d256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d25a:	3b01      	subs	r3, #1
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	2900      	cmp	r1, #0
 800d260:	d1ed      	bne.n	800d23e <_puts_r+0x52>
 800d262:	2b00      	cmp	r3, #0
 800d264:	da11      	bge.n	800d28a <_puts_r+0x9e>
 800d266:	4622      	mov	r2, r4
 800d268:	210a      	movs	r1, #10
 800d26a:	4628      	mov	r0, r5
 800d26c:	f000 f8cc 	bl	800d408 <__swbuf_r>
 800d270:	3001      	adds	r0, #1
 800d272:	d0d7      	beq.n	800d224 <_puts_r+0x38>
 800d274:	250a      	movs	r5, #10
 800d276:	e7d7      	b.n	800d228 <_puts_r+0x3c>
 800d278:	4622      	mov	r2, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	f000 f8c4 	bl	800d408 <__swbuf_r>
 800d280:	3001      	adds	r0, #1
 800d282:	d1e7      	bne.n	800d254 <_puts_r+0x68>
 800d284:	e7ce      	b.n	800d224 <_puts_r+0x38>
 800d286:	3e01      	subs	r6, #1
 800d288:	e7e4      	b.n	800d254 <_puts_r+0x68>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	6022      	str	r2, [r4, #0]
 800d290:	220a      	movs	r2, #10
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e7ee      	b.n	800d274 <_puts_r+0x88>
	...

0800d298 <puts>:
 800d298:	4b02      	ldr	r3, [pc, #8]	@ (800d2a4 <puts+0xc>)
 800d29a:	4601      	mov	r1, r0
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	f7ff bfa5 	b.w	800d1ec <_puts_r>
 800d2a2:	bf00      	nop
 800d2a4:	20000114 	.word	0x20000114

0800d2a8 <sniprintf>:
 800d2a8:	b40c      	push	{r2, r3}
 800d2aa:	b530      	push	{r4, r5, lr}
 800d2ac:	4b17      	ldr	r3, [pc, #92]	@ (800d30c <sniprintf+0x64>)
 800d2ae:	1e0c      	subs	r4, r1, #0
 800d2b0:	681d      	ldr	r5, [r3, #0]
 800d2b2:	b09d      	sub	sp, #116	@ 0x74
 800d2b4:	da08      	bge.n	800d2c8 <sniprintf+0x20>
 800d2b6:	238b      	movs	r3, #139	@ 0x8b
 800d2b8:	602b      	str	r3, [r5, #0]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	b01d      	add	sp, #116	@ 0x74
 800d2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2c4:	b002      	add	sp, #8
 800d2c6:	4770      	bx	lr
 800d2c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d2cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d2d0:	bf14      	ite	ne
 800d2d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d2d6:	4623      	moveq	r3, r4
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	9307      	str	r3, [sp, #28]
 800d2dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2e0:	9002      	str	r0, [sp, #8]
 800d2e2:	9006      	str	r0, [sp, #24]
 800d2e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d2e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d2ea:	ab21      	add	r3, sp, #132	@ 0x84
 800d2ec:	a902      	add	r1, sp, #8
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	f000 fb15 	bl	800d920 <_svfiprintf_r>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	bfbc      	itt	lt
 800d2fa:	238b      	movlt	r3, #139	@ 0x8b
 800d2fc:	602b      	strlt	r3, [r5, #0]
 800d2fe:	2c00      	cmp	r4, #0
 800d300:	d0dd      	beq.n	800d2be <sniprintf+0x16>
 800d302:	9b02      	ldr	r3, [sp, #8]
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	e7d9      	b.n	800d2be <sniprintf+0x16>
 800d30a:	bf00      	nop
 800d30c:	20000114 	.word	0x20000114

0800d310 <__sread>:
 800d310:	b510      	push	{r4, lr}
 800d312:	460c      	mov	r4, r1
 800d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d318:	f000 f94e 	bl	800d5b8 <_read_r>
 800d31c:	2800      	cmp	r0, #0
 800d31e:	bfab      	itete	ge
 800d320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d322:	89a3      	ldrhlt	r3, [r4, #12]
 800d324:	181b      	addge	r3, r3, r0
 800d326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d32a:	bfac      	ite	ge
 800d32c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d32e:	81a3      	strhlt	r3, [r4, #12]
 800d330:	bd10      	pop	{r4, pc}

0800d332 <__swrite>:
 800d332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	461f      	mov	r7, r3
 800d338:	898b      	ldrh	r3, [r1, #12]
 800d33a:	05db      	lsls	r3, r3, #23
 800d33c:	4605      	mov	r5, r0
 800d33e:	460c      	mov	r4, r1
 800d340:	4616      	mov	r6, r2
 800d342:	d505      	bpl.n	800d350 <__swrite+0x1e>
 800d344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d348:	2302      	movs	r3, #2
 800d34a:	2200      	movs	r2, #0
 800d34c:	f000 f922 	bl	800d594 <_lseek_r>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	4632      	mov	r2, r6
 800d35e:	463b      	mov	r3, r7
 800d360:	4628      	mov	r0, r5
 800d362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d366:	f000 b939 	b.w	800d5dc <_write_r>

0800d36a <__sseek>:
 800d36a:	b510      	push	{r4, lr}
 800d36c:	460c      	mov	r4, r1
 800d36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d372:	f000 f90f 	bl	800d594 <_lseek_r>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	bf15      	itete	ne
 800d37c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d37e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d386:	81a3      	strheq	r3, [r4, #12]
 800d388:	bf18      	it	ne
 800d38a:	81a3      	strhne	r3, [r4, #12]
 800d38c:	bd10      	pop	{r4, pc}

0800d38e <__sclose>:
 800d38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d392:	f000 b8ef 	b.w	800d574 <_close_r>

0800d396 <_vsniprintf_r>:
 800d396:	b530      	push	{r4, r5, lr}
 800d398:	4614      	mov	r4, r2
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	b09b      	sub	sp, #108	@ 0x6c
 800d39e:	4605      	mov	r5, r0
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	da05      	bge.n	800d3b0 <_vsniprintf_r+0x1a>
 800d3a4:	238b      	movs	r3, #139	@ 0x8b
 800d3a6:	6003      	str	r3, [r0, #0]
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	b01b      	add	sp, #108	@ 0x6c
 800d3ae:	bd30      	pop	{r4, r5, pc}
 800d3b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d3b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d3b8:	bf14      	ite	ne
 800d3ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d3be:	4623      	moveq	r3, r4
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	9305      	str	r3, [sp, #20]
 800d3c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3c8:	9100      	str	r1, [sp, #0]
 800d3ca:	9104      	str	r1, [sp, #16]
 800d3cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d3d0:	4669      	mov	r1, sp
 800d3d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d3d4:	f000 faa4 	bl	800d920 <_svfiprintf_r>
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	bfbc      	itt	lt
 800d3dc:	238b      	movlt	r3, #139	@ 0x8b
 800d3de:	602b      	strlt	r3, [r5, #0]
 800d3e0:	2c00      	cmp	r4, #0
 800d3e2:	d0e3      	beq.n	800d3ac <_vsniprintf_r+0x16>
 800d3e4:	9b00      	ldr	r3, [sp, #0]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e7df      	b.n	800d3ac <_vsniprintf_r+0x16>

0800d3ec <vsniprintf>:
 800d3ec:	b507      	push	{r0, r1, r2, lr}
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	460a      	mov	r2, r1
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4803      	ldr	r0, [pc, #12]	@ (800d404 <vsniprintf+0x18>)
 800d3f8:	6800      	ldr	r0, [r0, #0]
 800d3fa:	f7ff ffcc 	bl	800d396 <_vsniprintf_r>
 800d3fe:	b003      	add	sp, #12
 800d400:	f85d fb04 	ldr.w	pc, [sp], #4
 800d404:	20000114 	.word	0x20000114

0800d408 <__swbuf_r>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	460e      	mov	r6, r1
 800d40c:	4614      	mov	r4, r2
 800d40e:	4605      	mov	r5, r0
 800d410:	b118      	cbz	r0, 800d41a <__swbuf_r+0x12>
 800d412:	6a03      	ldr	r3, [r0, #32]
 800d414:	b90b      	cbnz	r3, 800d41a <__swbuf_r+0x12>
 800d416:	f7ff fe99 	bl	800d14c <__sinit>
 800d41a:	69a3      	ldr	r3, [r4, #24]
 800d41c:	60a3      	str	r3, [r4, #8]
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	071a      	lsls	r2, r3, #28
 800d422:	d501      	bpl.n	800d428 <__swbuf_r+0x20>
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	b943      	cbnz	r3, 800d43a <__swbuf_r+0x32>
 800d428:	4621      	mov	r1, r4
 800d42a:	4628      	mov	r0, r5
 800d42c:	f000 f82a 	bl	800d484 <__swsetup_r>
 800d430:	b118      	cbz	r0, 800d43a <__swbuf_r+0x32>
 800d432:	f04f 37ff 	mov.w	r7, #4294967295
 800d436:	4638      	mov	r0, r7
 800d438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	6922      	ldr	r2, [r4, #16]
 800d43e:	1a98      	subs	r0, r3, r2
 800d440:	6963      	ldr	r3, [r4, #20]
 800d442:	b2f6      	uxtb	r6, r6
 800d444:	4283      	cmp	r3, r0
 800d446:	4637      	mov	r7, r6
 800d448:	dc05      	bgt.n	800d456 <__swbuf_r+0x4e>
 800d44a:	4621      	mov	r1, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	f000 feb7 	bl	800e1c0 <_fflush_r>
 800d452:	2800      	cmp	r0, #0
 800d454:	d1ed      	bne.n	800d432 <__swbuf_r+0x2a>
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	3b01      	subs	r3, #1
 800d45a:	60a3      	str	r3, [r4, #8]
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	6022      	str	r2, [r4, #0]
 800d462:	701e      	strb	r6, [r3, #0]
 800d464:	6962      	ldr	r2, [r4, #20]
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	429a      	cmp	r2, r3
 800d46a:	d004      	beq.n	800d476 <__swbuf_r+0x6e>
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	07db      	lsls	r3, r3, #31
 800d470:	d5e1      	bpl.n	800d436 <__swbuf_r+0x2e>
 800d472:	2e0a      	cmp	r6, #10
 800d474:	d1df      	bne.n	800d436 <__swbuf_r+0x2e>
 800d476:	4621      	mov	r1, r4
 800d478:	4628      	mov	r0, r5
 800d47a:	f000 fea1 	bl	800e1c0 <_fflush_r>
 800d47e:	2800      	cmp	r0, #0
 800d480:	d0d9      	beq.n	800d436 <__swbuf_r+0x2e>
 800d482:	e7d6      	b.n	800d432 <__swbuf_r+0x2a>

0800d484 <__swsetup_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4b29      	ldr	r3, [pc, #164]	@ (800d52c <__swsetup_r+0xa8>)
 800d488:	4605      	mov	r5, r0
 800d48a:	6818      	ldr	r0, [r3, #0]
 800d48c:	460c      	mov	r4, r1
 800d48e:	b118      	cbz	r0, 800d498 <__swsetup_r+0x14>
 800d490:	6a03      	ldr	r3, [r0, #32]
 800d492:	b90b      	cbnz	r3, 800d498 <__swsetup_r+0x14>
 800d494:	f7ff fe5a 	bl	800d14c <__sinit>
 800d498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d49c:	0719      	lsls	r1, r3, #28
 800d49e:	d422      	bmi.n	800d4e6 <__swsetup_r+0x62>
 800d4a0:	06da      	lsls	r2, r3, #27
 800d4a2:	d407      	bmi.n	800d4b4 <__swsetup_r+0x30>
 800d4a4:	2209      	movs	r2, #9
 800d4a6:	602a      	str	r2, [r5, #0]
 800d4a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b2:	e033      	b.n	800d51c <__swsetup_r+0x98>
 800d4b4:	0758      	lsls	r0, r3, #29
 800d4b6:	d512      	bpl.n	800d4de <__swsetup_r+0x5a>
 800d4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4ba:	b141      	cbz	r1, 800d4ce <__swsetup_r+0x4a>
 800d4bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4c0:	4299      	cmp	r1, r3
 800d4c2:	d002      	beq.n	800d4ca <__swsetup_r+0x46>
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f000 f8d7 	bl	800d678 <_free_r>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	6063      	str	r3, [r4, #4]
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	f043 0308 	orr.w	r3, r3, #8
 800d4e4:	81a3      	strh	r3, [r4, #12]
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	b94b      	cbnz	r3, 800d4fe <__swsetup_r+0x7a>
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4f4:	d003      	beq.n	800d4fe <__swsetup_r+0x7a>
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 feaf 	bl	800e25c <__smakebuf_r>
 800d4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d502:	f013 0201 	ands.w	r2, r3, #1
 800d506:	d00a      	beq.n	800d51e <__swsetup_r+0x9a>
 800d508:	2200      	movs	r2, #0
 800d50a:	60a2      	str	r2, [r4, #8]
 800d50c:	6962      	ldr	r2, [r4, #20]
 800d50e:	4252      	negs	r2, r2
 800d510:	61a2      	str	r2, [r4, #24]
 800d512:	6922      	ldr	r2, [r4, #16]
 800d514:	b942      	cbnz	r2, 800d528 <__swsetup_r+0xa4>
 800d516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d51a:	d1c5      	bne.n	800d4a8 <__swsetup_r+0x24>
 800d51c:	bd38      	pop	{r3, r4, r5, pc}
 800d51e:	0799      	lsls	r1, r3, #30
 800d520:	bf58      	it	pl
 800d522:	6962      	ldrpl	r2, [r4, #20]
 800d524:	60a2      	str	r2, [r4, #8]
 800d526:	e7f4      	b.n	800d512 <__swsetup_r+0x8e>
 800d528:	2000      	movs	r0, #0
 800d52a:	e7f7      	b.n	800d51c <__swsetup_r+0x98>
 800d52c:	20000114 	.word	0x20000114

0800d530 <memmove>:
 800d530:	4288      	cmp	r0, r1
 800d532:	b510      	push	{r4, lr}
 800d534:	eb01 0402 	add.w	r4, r1, r2
 800d538:	d902      	bls.n	800d540 <memmove+0x10>
 800d53a:	4284      	cmp	r4, r0
 800d53c:	4623      	mov	r3, r4
 800d53e:	d807      	bhi.n	800d550 <memmove+0x20>
 800d540:	1e43      	subs	r3, r0, #1
 800d542:	42a1      	cmp	r1, r4
 800d544:	d008      	beq.n	800d558 <memmove+0x28>
 800d546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d54a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d54e:	e7f8      	b.n	800d542 <memmove+0x12>
 800d550:	4402      	add	r2, r0
 800d552:	4601      	mov	r1, r0
 800d554:	428a      	cmp	r2, r1
 800d556:	d100      	bne.n	800d55a <memmove+0x2a>
 800d558:	bd10      	pop	{r4, pc}
 800d55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d55e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d562:	e7f7      	b.n	800d554 <memmove+0x24>

0800d564 <memset>:
 800d564:	4402      	add	r2, r0
 800d566:	4603      	mov	r3, r0
 800d568:	4293      	cmp	r3, r2
 800d56a:	d100      	bne.n	800d56e <memset+0xa>
 800d56c:	4770      	bx	lr
 800d56e:	f803 1b01 	strb.w	r1, [r3], #1
 800d572:	e7f9      	b.n	800d568 <memset+0x4>

0800d574 <_close_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_close_r+0x1c>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	f7f6 fe14 	bl	80041ac <_close>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_close_r+0x1a>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_close_r+0x1a>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	20002214 	.word	0x20002214

0800d594 <_lseek_r>:
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4d07      	ldr	r5, [pc, #28]	@ (800d5b4 <_lseek_r+0x20>)
 800d598:	4604      	mov	r4, r0
 800d59a:	4608      	mov	r0, r1
 800d59c:	4611      	mov	r1, r2
 800d59e:	2200      	movs	r2, #0
 800d5a0:	602a      	str	r2, [r5, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f7f6 fe0c 	bl	80041c0 <_lseek>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d102      	bne.n	800d5b2 <_lseek_r+0x1e>
 800d5ac:	682b      	ldr	r3, [r5, #0]
 800d5ae:	b103      	cbz	r3, 800d5b2 <_lseek_r+0x1e>
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	20002214 	.word	0x20002214

0800d5b8 <_read_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	4d07      	ldr	r5, [pc, #28]	@ (800d5d8 <_read_r+0x20>)
 800d5bc:	4604      	mov	r4, r0
 800d5be:	4608      	mov	r0, r1
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	602a      	str	r2, [r5, #0]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f7f6 fdd6 	bl	8004178 <_read>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_read_r+0x1e>
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_read_r+0x1e>
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	20002214 	.word	0x20002214

0800d5dc <_write_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4d07      	ldr	r5, [pc, #28]	@ (800d5fc <_write_r+0x20>)
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	4608      	mov	r0, r1
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	602a      	str	r2, [r5, #0]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	f7f6 fdd1 	bl	8004192 <_write>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_write_r+0x1e>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_write_r+0x1e>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	20002214 	.word	0x20002214

0800d600 <__errno>:
 800d600:	4b01      	ldr	r3, [pc, #4]	@ (800d608 <__errno+0x8>)
 800d602:	6818      	ldr	r0, [r3, #0]
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	20000114 	.word	0x20000114

0800d60c <__libc_init_array>:
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	4d0d      	ldr	r5, [pc, #52]	@ (800d644 <__libc_init_array+0x38>)
 800d610:	4c0d      	ldr	r4, [pc, #52]	@ (800d648 <__libc_init_array+0x3c>)
 800d612:	1b64      	subs	r4, r4, r5
 800d614:	10a4      	asrs	r4, r4, #2
 800d616:	2600      	movs	r6, #0
 800d618:	42a6      	cmp	r6, r4
 800d61a:	d109      	bne.n	800d630 <__libc_init_array+0x24>
 800d61c:	4d0b      	ldr	r5, [pc, #44]	@ (800d64c <__libc_init_array+0x40>)
 800d61e:	4c0c      	ldr	r4, [pc, #48]	@ (800d650 <__libc_init_array+0x44>)
 800d620:	f000 ff40 	bl	800e4a4 <_init>
 800d624:	1b64      	subs	r4, r4, r5
 800d626:	10a4      	asrs	r4, r4, #2
 800d628:	2600      	movs	r6, #0
 800d62a:	42a6      	cmp	r6, r4
 800d62c:	d105      	bne.n	800d63a <__libc_init_array+0x2e>
 800d62e:	bd70      	pop	{r4, r5, r6, pc}
 800d630:	f855 3b04 	ldr.w	r3, [r5], #4
 800d634:	4798      	blx	r3
 800d636:	3601      	adds	r6, #1
 800d638:	e7ee      	b.n	800d618 <__libc_init_array+0xc>
 800d63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d63e:	4798      	blx	r3
 800d640:	3601      	adds	r6, #1
 800d642:	e7f2      	b.n	800d62a <__libc_init_array+0x1e>
 800d644:	0800f5f4 	.word	0x0800f5f4
 800d648:	0800f5f4 	.word	0x0800f5f4
 800d64c:	0800f5f4 	.word	0x0800f5f4
 800d650:	0800f5f8 	.word	0x0800f5f8

0800d654 <__retarget_lock_init_recursive>:
 800d654:	4770      	bx	lr

0800d656 <__retarget_lock_acquire_recursive>:
 800d656:	4770      	bx	lr

0800d658 <__retarget_lock_release_recursive>:
 800d658:	4770      	bx	lr

0800d65a <memcpy>:
 800d65a:	440a      	add	r2, r1
 800d65c:	4291      	cmp	r1, r2
 800d65e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d662:	d100      	bne.n	800d666 <memcpy+0xc>
 800d664:	4770      	bx	lr
 800d666:	b510      	push	{r4, lr}
 800d668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d670:	4291      	cmp	r1, r2
 800d672:	d1f9      	bne.n	800d668 <memcpy+0xe>
 800d674:	bd10      	pop	{r4, pc}
	...

0800d678 <_free_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4605      	mov	r5, r0
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d041      	beq.n	800d704 <_free_r+0x8c>
 800d680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d684:	1f0c      	subs	r4, r1, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	bfb8      	it	lt
 800d68a:	18e4      	addlt	r4, r4, r3
 800d68c:	f000 f8e0 	bl	800d850 <__malloc_lock>
 800d690:	4a1d      	ldr	r2, [pc, #116]	@ (800d708 <_free_r+0x90>)
 800d692:	6813      	ldr	r3, [r2, #0]
 800d694:	b933      	cbnz	r3, 800d6a4 <_free_r+0x2c>
 800d696:	6063      	str	r3, [r4, #4]
 800d698:	6014      	str	r4, [r2, #0]
 800d69a:	4628      	mov	r0, r5
 800d69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a0:	f000 b8dc 	b.w	800d85c <__malloc_unlock>
 800d6a4:	42a3      	cmp	r3, r4
 800d6a6:	d908      	bls.n	800d6ba <_free_r+0x42>
 800d6a8:	6820      	ldr	r0, [r4, #0]
 800d6aa:	1821      	adds	r1, r4, r0
 800d6ac:	428b      	cmp	r3, r1
 800d6ae:	bf01      	itttt	eq
 800d6b0:	6819      	ldreq	r1, [r3, #0]
 800d6b2:	685b      	ldreq	r3, [r3, #4]
 800d6b4:	1809      	addeq	r1, r1, r0
 800d6b6:	6021      	streq	r1, [r4, #0]
 800d6b8:	e7ed      	b.n	800d696 <_free_r+0x1e>
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	b10b      	cbz	r3, 800d6c4 <_free_r+0x4c>
 800d6c0:	42a3      	cmp	r3, r4
 800d6c2:	d9fa      	bls.n	800d6ba <_free_r+0x42>
 800d6c4:	6811      	ldr	r1, [r2, #0]
 800d6c6:	1850      	adds	r0, r2, r1
 800d6c8:	42a0      	cmp	r0, r4
 800d6ca:	d10b      	bne.n	800d6e4 <_free_r+0x6c>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	4401      	add	r1, r0
 800d6d0:	1850      	adds	r0, r2, r1
 800d6d2:	4283      	cmp	r3, r0
 800d6d4:	6011      	str	r1, [r2, #0]
 800d6d6:	d1e0      	bne.n	800d69a <_free_r+0x22>
 800d6d8:	6818      	ldr	r0, [r3, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	6053      	str	r3, [r2, #4]
 800d6de:	4408      	add	r0, r1
 800d6e0:	6010      	str	r0, [r2, #0]
 800d6e2:	e7da      	b.n	800d69a <_free_r+0x22>
 800d6e4:	d902      	bls.n	800d6ec <_free_r+0x74>
 800d6e6:	230c      	movs	r3, #12
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	e7d6      	b.n	800d69a <_free_r+0x22>
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	1821      	adds	r1, r4, r0
 800d6f0:	428b      	cmp	r3, r1
 800d6f2:	bf04      	itt	eq
 800d6f4:	6819      	ldreq	r1, [r3, #0]
 800d6f6:	685b      	ldreq	r3, [r3, #4]
 800d6f8:	6063      	str	r3, [r4, #4]
 800d6fa:	bf04      	itt	eq
 800d6fc:	1809      	addeq	r1, r1, r0
 800d6fe:	6021      	streq	r1, [r4, #0]
 800d700:	6054      	str	r4, [r2, #4]
 800d702:	e7ca      	b.n	800d69a <_free_r+0x22>
 800d704:	bd38      	pop	{r3, r4, r5, pc}
 800d706:	bf00      	nop
 800d708:	20002220 	.word	0x20002220

0800d70c <sbrk_aligned>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	4e0f      	ldr	r6, [pc, #60]	@ (800d74c <sbrk_aligned+0x40>)
 800d710:	460c      	mov	r4, r1
 800d712:	6831      	ldr	r1, [r6, #0]
 800d714:	4605      	mov	r5, r0
 800d716:	b911      	cbnz	r1, 800d71e <sbrk_aligned+0x12>
 800d718:	f000 fe32 	bl	800e380 <_sbrk_r>
 800d71c:	6030      	str	r0, [r6, #0]
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f000 fe2d 	bl	800e380 <_sbrk_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d103      	bne.n	800d732 <sbrk_aligned+0x26>
 800d72a:	f04f 34ff 	mov.w	r4, #4294967295
 800d72e:	4620      	mov	r0, r4
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	1cc4      	adds	r4, r0, #3
 800d734:	f024 0403 	bic.w	r4, r4, #3
 800d738:	42a0      	cmp	r0, r4
 800d73a:	d0f8      	beq.n	800d72e <sbrk_aligned+0x22>
 800d73c:	1a21      	subs	r1, r4, r0
 800d73e:	4628      	mov	r0, r5
 800d740:	f000 fe1e 	bl	800e380 <_sbrk_r>
 800d744:	3001      	adds	r0, #1
 800d746:	d1f2      	bne.n	800d72e <sbrk_aligned+0x22>
 800d748:	e7ef      	b.n	800d72a <sbrk_aligned+0x1e>
 800d74a:	bf00      	nop
 800d74c:	2000221c 	.word	0x2000221c

0800d750 <_malloc_r>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	1ccd      	adds	r5, r1, #3
 800d756:	f025 0503 	bic.w	r5, r5, #3
 800d75a:	3508      	adds	r5, #8
 800d75c:	2d0c      	cmp	r5, #12
 800d75e:	bf38      	it	cc
 800d760:	250c      	movcc	r5, #12
 800d762:	2d00      	cmp	r5, #0
 800d764:	4606      	mov	r6, r0
 800d766:	db01      	blt.n	800d76c <_malloc_r+0x1c>
 800d768:	42a9      	cmp	r1, r5
 800d76a:	d904      	bls.n	800d776 <_malloc_r+0x26>
 800d76c:	230c      	movs	r3, #12
 800d76e:	6033      	str	r3, [r6, #0]
 800d770:	2000      	movs	r0, #0
 800d772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d84c <_malloc_r+0xfc>
 800d77a:	f000 f869 	bl	800d850 <__malloc_lock>
 800d77e:	f8d8 3000 	ldr.w	r3, [r8]
 800d782:	461c      	mov	r4, r3
 800d784:	bb44      	cbnz	r4, 800d7d8 <_malloc_r+0x88>
 800d786:	4629      	mov	r1, r5
 800d788:	4630      	mov	r0, r6
 800d78a:	f7ff ffbf 	bl	800d70c <sbrk_aligned>
 800d78e:	1c43      	adds	r3, r0, #1
 800d790:	4604      	mov	r4, r0
 800d792:	d158      	bne.n	800d846 <_malloc_r+0xf6>
 800d794:	f8d8 4000 	ldr.w	r4, [r8]
 800d798:	4627      	mov	r7, r4
 800d79a:	2f00      	cmp	r7, #0
 800d79c:	d143      	bne.n	800d826 <_malloc_r+0xd6>
 800d79e:	2c00      	cmp	r4, #0
 800d7a0:	d04b      	beq.n	800d83a <_malloc_r+0xea>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	eb04 0903 	add.w	r9, r4, r3
 800d7ac:	f000 fde8 	bl	800e380 <_sbrk_r>
 800d7b0:	4581      	cmp	r9, r0
 800d7b2:	d142      	bne.n	800d83a <_malloc_r+0xea>
 800d7b4:	6821      	ldr	r1, [r4, #0]
 800d7b6:	1a6d      	subs	r5, r5, r1
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ffa6 	bl	800d70c <sbrk_aligned>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d03a      	beq.n	800d83a <_malloc_r+0xea>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	442b      	add	r3, r5
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	bb62      	cbnz	r2, 800d82c <_malloc_r+0xdc>
 800d7d2:	f8c8 7000 	str.w	r7, [r8]
 800d7d6:	e00f      	b.n	800d7f8 <_malloc_r+0xa8>
 800d7d8:	6822      	ldr	r2, [r4, #0]
 800d7da:	1b52      	subs	r2, r2, r5
 800d7dc:	d420      	bmi.n	800d820 <_malloc_r+0xd0>
 800d7de:	2a0b      	cmp	r2, #11
 800d7e0:	d917      	bls.n	800d812 <_malloc_r+0xc2>
 800d7e2:	1961      	adds	r1, r4, r5
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	6025      	str	r5, [r4, #0]
 800d7e8:	bf18      	it	ne
 800d7ea:	6059      	strne	r1, [r3, #4]
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	bf08      	it	eq
 800d7f0:	f8c8 1000 	streq.w	r1, [r8]
 800d7f4:	5162      	str	r2, [r4, r5]
 800d7f6:	604b      	str	r3, [r1, #4]
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f000 f82f 	bl	800d85c <__malloc_unlock>
 800d7fe:	f104 000b 	add.w	r0, r4, #11
 800d802:	1d23      	adds	r3, r4, #4
 800d804:	f020 0007 	bic.w	r0, r0, #7
 800d808:	1ac2      	subs	r2, r0, r3
 800d80a:	bf1c      	itt	ne
 800d80c:	1a1b      	subne	r3, r3, r0
 800d80e:	50a3      	strne	r3, [r4, r2]
 800d810:	e7af      	b.n	800d772 <_malloc_r+0x22>
 800d812:	6862      	ldr	r2, [r4, #4]
 800d814:	42a3      	cmp	r3, r4
 800d816:	bf0c      	ite	eq
 800d818:	f8c8 2000 	streq.w	r2, [r8]
 800d81c:	605a      	strne	r2, [r3, #4]
 800d81e:	e7eb      	b.n	800d7f8 <_malloc_r+0xa8>
 800d820:	4623      	mov	r3, r4
 800d822:	6864      	ldr	r4, [r4, #4]
 800d824:	e7ae      	b.n	800d784 <_malloc_r+0x34>
 800d826:	463c      	mov	r4, r7
 800d828:	687f      	ldr	r7, [r7, #4]
 800d82a:	e7b6      	b.n	800d79a <_malloc_r+0x4a>
 800d82c:	461a      	mov	r2, r3
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	42a3      	cmp	r3, r4
 800d832:	d1fb      	bne.n	800d82c <_malloc_r+0xdc>
 800d834:	2300      	movs	r3, #0
 800d836:	6053      	str	r3, [r2, #4]
 800d838:	e7de      	b.n	800d7f8 <_malloc_r+0xa8>
 800d83a:	230c      	movs	r3, #12
 800d83c:	6033      	str	r3, [r6, #0]
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 f80c 	bl	800d85c <__malloc_unlock>
 800d844:	e794      	b.n	800d770 <_malloc_r+0x20>
 800d846:	6005      	str	r5, [r0, #0]
 800d848:	e7d6      	b.n	800d7f8 <_malloc_r+0xa8>
 800d84a:	bf00      	nop
 800d84c:	20002220 	.word	0x20002220

0800d850 <__malloc_lock>:
 800d850:	4801      	ldr	r0, [pc, #4]	@ (800d858 <__malloc_lock+0x8>)
 800d852:	f7ff bf00 	b.w	800d656 <__retarget_lock_acquire_recursive>
 800d856:	bf00      	nop
 800d858:	20002218 	.word	0x20002218

0800d85c <__malloc_unlock>:
 800d85c:	4801      	ldr	r0, [pc, #4]	@ (800d864 <__malloc_unlock+0x8>)
 800d85e:	f7ff befb 	b.w	800d658 <__retarget_lock_release_recursive>
 800d862:	bf00      	nop
 800d864:	20002218 	.word	0x20002218

0800d868 <__ssputs_r>:
 800d868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86c:	688e      	ldr	r6, [r1, #8]
 800d86e:	461f      	mov	r7, r3
 800d870:	42be      	cmp	r6, r7
 800d872:	680b      	ldr	r3, [r1, #0]
 800d874:	4682      	mov	sl, r0
 800d876:	460c      	mov	r4, r1
 800d878:	4690      	mov	r8, r2
 800d87a:	d82d      	bhi.n	800d8d8 <__ssputs_r+0x70>
 800d87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d884:	d026      	beq.n	800d8d4 <__ssputs_r+0x6c>
 800d886:	6965      	ldr	r5, [r4, #20]
 800d888:	6909      	ldr	r1, [r1, #16]
 800d88a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d88e:	eba3 0901 	sub.w	r9, r3, r1
 800d892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d896:	1c7b      	adds	r3, r7, #1
 800d898:	444b      	add	r3, r9
 800d89a:	106d      	asrs	r5, r5, #1
 800d89c:	429d      	cmp	r5, r3
 800d89e:	bf38      	it	cc
 800d8a0:	461d      	movcc	r5, r3
 800d8a2:	0553      	lsls	r3, r2, #21
 800d8a4:	d527      	bpl.n	800d8f6 <__ssputs_r+0x8e>
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7ff ff52 	bl	800d750 <_malloc_r>
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	b360      	cbz	r0, 800d90a <__ssputs_r+0xa2>
 800d8b0:	6921      	ldr	r1, [r4, #16]
 800d8b2:	464a      	mov	r2, r9
 800d8b4:	f7ff fed1 	bl	800d65a <memcpy>
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	6126      	str	r6, [r4, #16]
 800d8c6:	6165      	str	r5, [r4, #20]
 800d8c8:	444e      	add	r6, r9
 800d8ca:	eba5 0509 	sub.w	r5, r5, r9
 800d8ce:	6026      	str	r6, [r4, #0]
 800d8d0:	60a5      	str	r5, [r4, #8]
 800d8d2:	463e      	mov	r6, r7
 800d8d4:	42be      	cmp	r6, r7
 800d8d6:	d900      	bls.n	800d8da <__ssputs_r+0x72>
 800d8d8:	463e      	mov	r6, r7
 800d8da:	6820      	ldr	r0, [r4, #0]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4641      	mov	r1, r8
 800d8e0:	f7ff fe26 	bl	800d530 <memmove>
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	1b9b      	subs	r3, r3, r6
 800d8e8:	60a3      	str	r3, [r4, #8]
 800d8ea:	6823      	ldr	r3, [r4, #0]
 800d8ec:	4433      	add	r3, r6
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	f000 fd52 	bl	800e3a0 <_realloc_r>
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d1e0      	bne.n	800d8c4 <__ssputs_r+0x5c>
 800d902:	6921      	ldr	r1, [r4, #16]
 800d904:	4650      	mov	r0, sl
 800d906:	f7ff feb7 	bl	800d678 <_free_r>
 800d90a:	230c      	movs	r3, #12
 800d90c:	f8ca 3000 	str.w	r3, [sl]
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e7e9      	b.n	800d8f2 <__ssputs_r+0x8a>
	...

0800d920 <_svfiprintf_r>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	4698      	mov	r8, r3
 800d926:	898b      	ldrh	r3, [r1, #12]
 800d928:	061b      	lsls	r3, r3, #24
 800d92a:	b09d      	sub	sp, #116	@ 0x74
 800d92c:	4607      	mov	r7, r0
 800d92e:	460d      	mov	r5, r1
 800d930:	4614      	mov	r4, r2
 800d932:	d510      	bpl.n	800d956 <_svfiprintf_r+0x36>
 800d934:	690b      	ldr	r3, [r1, #16]
 800d936:	b973      	cbnz	r3, 800d956 <_svfiprintf_r+0x36>
 800d938:	2140      	movs	r1, #64	@ 0x40
 800d93a:	f7ff ff09 	bl	800d750 <_malloc_r>
 800d93e:	6028      	str	r0, [r5, #0]
 800d940:	6128      	str	r0, [r5, #16]
 800d942:	b930      	cbnz	r0, 800d952 <_svfiprintf_r+0x32>
 800d944:	230c      	movs	r3, #12
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	f04f 30ff 	mov.w	r0, #4294967295
 800d94c:	b01d      	add	sp, #116	@ 0x74
 800d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d952:	2340      	movs	r3, #64	@ 0x40
 800d954:	616b      	str	r3, [r5, #20]
 800d956:	2300      	movs	r3, #0
 800d958:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95a:	2320      	movs	r3, #32
 800d95c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d960:	f8cd 800c 	str.w	r8, [sp, #12]
 800d964:	2330      	movs	r3, #48	@ 0x30
 800d966:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db04 <_svfiprintf_r+0x1e4>
 800d96a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d96e:	f04f 0901 	mov.w	r9, #1
 800d972:	4623      	mov	r3, r4
 800d974:	469a      	mov	sl, r3
 800d976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97a:	b10a      	cbz	r2, 800d980 <_svfiprintf_r+0x60>
 800d97c:	2a25      	cmp	r2, #37	@ 0x25
 800d97e:	d1f9      	bne.n	800d974 <_svfiprintf_r+0x54>
 800d980:	ebba 0b04 	subs.w	fp, sl, r4
 800d984:	d00b      	beq.n	800d99e <_svfiprintf_r+0x7e>
 800d986:	465b      	mov	r3, fp
 800d988:	4622      	mov	r2, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ff6b 	bl	800d868 <__ssputs_r>
 800d992:	3001      	adds	r0, #1
 800d994:	f000 80a7 	beq.w	800dae6 <_svfiprintf_r+0x1c6>
 800d998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d99a:	445a      	add	r2, fp
 800d99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d99e:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 809f 	beq.w	800dae6 <_svfiprintf_r+0x1c6>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b2:	f10a 0a01 	add.w	sl, sl, #1
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	9307      	str	r3, [sp, #28]
 800d9ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9be:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9c0:	4654      	mov	r4, sl
 800d9c2:	2205      	movs	r2, #5
 800d9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c8:	484e      	ldr	r0, [pc, #312]	@ (800db04 <_svfiprintf_r+0x1e4>)
 800d9ca:	f7f2 fc29 	bl	8000220 <memchr>
 800d9ce:	9a04      	ldr	r2, [sp, #16]
 800d9d0:	b9d8      	cbnz	r0, 800da0a <_svfiprintf_r+0xea>
 800d9d2:	06d0      	lsls	r0, r2, #27
 800d9d4:	bf44      	itt	mi
 800d9d6:	2320      	movmi	r3, #32
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9dc:	0711      	lsls	r1, r2, #28
 800d9de:	bf44      	itt	mi
 800d9e0:	232b      	movmi	r3, #43	@ 0x2b
 800d9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9ec:	d015      	beq.n	800da1a <_svfiprintf_r+0xfa>
 800d9ee:	9a07      	ldr	r2, [sp, #28]
 800d9f0:	4654      	mov	r4, sl
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f04f 0c0a 	mov.w	ip, #10
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9fe:	3b30      	subs	r3, #48	@ 0x30
 800da00:	2b09      	cmp	r3, #9
 800da02:	d94b      	bls.n	800da9c <_svfiprintf_r+0x17c>
 800da04:	b1b0      	cbz	r0, 800da34 <_svfiprintf_r+0x114>
 800da06:	9207      	str	r2, [sp, #28]
 800da08:	e014      	b.n	800da34 <_svfiprintf_r+0x114>
 800da0a:	eba0 0308 	sub.w	r3, r0, r8
 800da0e:	fa09 f303 	lsl.w	r3, r9, r3
 800da12:	4313      	orrs	r3, r2
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	46a2      	mov	sl, r4
 800da18:	e7d2      	b.n	800d9c0 <_svfiprintf_r+0xa0>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d19      	adds	r1, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9103      	str	r1, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfbb      	ittet	lt
 800da26:	425b      	neglt	r3, r3
 800da28:	f042 0202 	orrlt.w	r2, r2, #2
 800da2c:	9307      	strge	r3, [sp, #28]
 800da2e:	9307      	strlt	r3, [sp, #28]
 800da30:	bfb8      	it	lt
 800da32:	9204      	strlt	r2, [sp, #16]
 800da34:	7823      	ldrb	r3, [r4, #0]
 800da36:	2b2e      	cmp	r3, #46	@ 0x2e
 800da38:	d10a      	bne.n	800da50 <_svfiprintf_r+0x130>
 800da3a:	7863      	ldrb	r3, [r4, #1]
 800da3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800da3e:	d132      	bne.n	800daa6 <_svfiprintf_r+0x186>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	9203      	str	r2, [sp, #12]
 800da48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da4c:	3402      	adds	r4, #2
 800da4e:	9305      	str	r3, [sp, #20]
 800da50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db14 <_svfiprintf_r+0x1f4>
 800da54:	7821      	ldrb	r1, [r4, #0]
 800da56:	2203      	movs	r2, #3
 800da58:	4650      	mov	r0, sl
 800da5a:	f7f2 fbe1 	bl	8000220 <memchr>
 800da5e:	b138      	cbz	r0, 800da70 <_svfiprintf_r+0x150>
 800da60:	9b04      	ldr	r3, [sp, #16]
 800da62:	eba0 000a 	sub.w	r0, r0, sl
 800da66:	2240      	movs	r2, #64	@ 0x40
 800da68:	4082      	lsls	r2, r0
 800da6a:	4313      	orrs	r3, r2
 800da6c:	3401      	adds	r4, #1
 800da6e:	9304      	str	r3, [sp, #16]
 800da70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da74:	4824      	ldr	r0, [pc, #144]	@ (800db08 <_svfiprintf_r+0x1e8>)
 800da76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da7a:	2206      	movs	r2, #6
 800da7c:	f7f2 fbd0 	bl	8000220 <memchr>
 800da80:	2800      	cmp	r0, #0
 800da82:	d036      	beq.n	800daf2 <_svfiprintf_r+0x1d2>
 800da84:	4b21      	ldr	r3, [pc, #132]	@ (800db0c <_svfiprintf_r+0x1ec>)
 800da86:	bb1b      	cbnz	r3, 800dad0 <_svfiprintf_r+0x1b0>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	3307      	adds	r3, #7
 800da8c:	f023 0307 	bic.w	r3, r3, #7
 800da90:	3308      	adds	r3, #8
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da96:	4433      	add	r3, r6
 800da98:	9309      	str	r3, [sp, #36]	@ 0x24
 800da9a:	e76a      	b.n	800d972 <_svfiprintf_r+0x52>
 800da9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800daa0:	460c      	mov	r4, r1
 800daa2:	2001      	movs	r0, #1
 800daa4:	e7a8      	b.n	800d9f8 <_svfiprintf_r+0xd8>
 800daa6:	2300      	movs	r3, #0
 800daa8:	3401      	adds	r4, #1
 800daaa:	9305      	str	r3, [sp, #20]
 800daac:	4619      	mov	r1, r3
 800daae:	f04f 0c0a 	mov.w	ip, #10
 800dab2:	4620      	mov	r0, r4
 800dab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab8:	3a30      	subs	r2, #48	@ 0x30
 800daba:	2a09      	cmp	r2, #9
 800dabc:	d903      	bls.n	800dac6 <_svfiprintf_r+0x1a6>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0c6      	beq.n	800da50 <_svfiprintf_r+0x130>
 800dac2:	9105      	str	r1, [sp, #20]
 800dac4:	e7c4      	b.n	800da50 <_svfiprintf_r+0x130>
 800dac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800daca:	4604      	mov	r4, r0
 800dacc:	2301      	movs	r3, #1
 800dace:	e7f0      	b.n	800dab2 <_svfiprintf_r+0x192>
 800dad0:	ab03      	add	r3, sp, #12
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	462a      	mov	r2, r5
 800dad6:	4b0e      	ldr	r3, [pc, #56]	@ (800db10 <_svfiprintf_r+0x1f0>)
 800dad8:	a904      	add	r1, sp, #16
 800dada:	4638      	mov	r0, r7
 800dadc:	f3af 8000 	nop.w
 800dae0:	1c42      	adds	r2, r0, #1
 800dae2:	4606      	mov	r6, r0
 800dae4:	d1d6      	bne.n	800da94 <_svfiprintf_r+0x174>
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	065b      	lsls	r3, r3, #25
 800daea:	f53f af2d 	bmi.w	800d948 <_svfiprintf_r+0x28>
 800daee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800daf0:	e72c      	b.n	800d94c <_svfiprintf_r+0x2c>
 800daf2:	ab03      	add	r3, sp, #12
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	462a      	mov	r2, r5
 800daf8:	4b05      	ldr	r3, [pc, #20]	@ (800db10 <_svfiprintf_r+0x1f0>)
 800dafa:	a904      	add	r1, sp, #16
 800dafc:	4638      	mov	r0, r7
 800dafe:	f000 f9bb 	bl	800de78 <_printf_i>
 800db02:	e7ed      	b.n	800dae0 <_svfiprintf_r+0x1c0>
 800db04:	0800f4e8 	.word	0x0800f4e8
 800db08:	0800f4f2 	.word	0x0800f4f2
 800db0c:	00000000 	.word	0x00000000
 800db10:	0800d869 	.word	0x0800d869
 800db14:	0800f4ee 	.word	0x0800f4ee

0800db18 <__sfputc_r>:
 800db18:	6893      	ldr	r3, [r2, #8]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	b410      	push	{r4}
 800db20:	6093      	str	r3, [r2, #8]
 800db22:	da08      	bge.n	800db36 <__sfputc_r+0x1e>
 800db24:	6994      	ldr	r4, [r2, #24]
 800db26:	42a3      	cmp	r3, r4
 800db28:	db01      	blt.n	800db2e <__sfputc_r+0x16>
 800db2a:	290a      	cmp	r1, #10
 800db2c:	d103      	bne.n	800db36 <__sfputc_r+0x1e>
 800db2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db32:	f7ff bc69 	b.w	800d408 <__swbuf_r>
 800db36:	6813      	ldr	r3, [r2, #0]
 800db38:	1c58      	adds	r0, r3, #1
 800db3a:	6010      	str	r0, [r2, #0]
 800db3c:	7019      	strb	r1, [r3, #0]
 800db3e:	4608      	mov	r0, r1
 800db40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <__sfputs_r>:
 800db46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db48:	4606      	mov	r6, r0
 800db4a:	460f      	mov	r7, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	18d5      	adds	r5, r2, r3
 800db50:	42ac      	cmp	r4, r5
 800db52:	d101      	bne.n	800db58 <__sfputs_r+0x12>
 800db54:	2000      	movs	r0, #0
 800db56:	e007      	b.n	800db68 <__sfputs_r+0x22>
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	463a      	mov	r2, r7
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ffda 	bl	800db18 <__sfputc_r>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d1f3      	bne.n	800db50 <__sfputs_r+0xa>
 800db68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db6c <_vfiprintf_r>:
 800db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	460d      	mov	r5, r1
 800db72:	b09d      	sub	sp, #116	@ 0x74
 800db74:	4614      	mov	r4, r2
 800db76:	4698      	mov	r8, r3
 800db78:	4606      	mov	r6, r0
 800db7a:	b118      	cbz	r0, 800db84 <_vfiprintf_r+0x18>
 800db7c:	6a03      	ldr	r3, [r0, #32]
 800db7e:	b90b      	cbnz	r3, 800db84 <_vfiprintf_r+0x18>
 800db80:	f7ff fae4 	bl	800d14c <__sinit>
 800db84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db86:	07d9      	lsls	r1, r3, #31
 800db88:	d405      	bmi.n	800db96 <_vfiprintf_r+0x2a>
 800db8a:	89ab      	ldrh	r3, [r5, #12]
 800db8c:	059a      	lsls	r2, r3, #22
 800db8e:	d402      	bmi.n	800db96 <_vfiprintf_r+0x2a>
 800db90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db92:	f7ff fd60 	bl	800d656 <__retarget_lock_acquire_recursive>
 800db96:	89ab      	ldrh	r3, [r5, #12]
 800db98:	071b      	lsls	r3, r3, #28
 800db9a:	d501      	bpl.n	800dba0 <_vfiprintf_r+0x34>
 800db9c:	692b      	ldr	r3, [r5, #16]
 800db9e:	b99b      	cbnz	r3, 800dbc8 <_vfiprintf_r+0x5c>
 800dba0:	4629      	mov	r1, r5
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff fc6e 	bl	800d484 <__swsetup_r>
 800dba8:	b170      	cbz	r0, 800dbc8 <_vfiprintf_r+0x5c>
 800dbaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbac:	07dc      	lsls	r4, r3, #31
 800dbae:	d504      	bpl.n	800dbba <_vfiprintf_r+0x4e>
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb4:	b01d      	add	sp, #116	@ 0x74
 800dbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbba:	89ab      	ldrh	r3, [r5, #12]
 800dbbc:	0598      	lsls	r0, r3, #22
 800dbbe:	d4f7      	bmi.n	800dbb0 <_vfiprintf_r+0x44>
 800dbc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbc2:	f7ff fd49 	bl	800d658 <__retarget_lock_release_recursive>
 800dbc6:	e7f3      	b.n	800dbb0 <_vfiprintf_r+0x44>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbcc:	2320      	movs	r3, #32
 800dbce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd6:	2330      	movs	r3, #48	@ 0x30
 800dbd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd88 <_vfiprintf_r+0x21c>
 800dbdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbe0:	f04f 0901 	mov.w	r9, #1
 800dbe4:	4623      	mov	r3, r4
 800dbe6:	469a      	mov	sl, r3
 800dbe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbec:	b10a      	cbz	r2, 800dbf2 <_vfiprintf_r+0x86>
 800dbee:	2a25      	cmp	r2, #37	@ 0x25
 800dbf0:	d1f9      	bne.n	800dbe6 <_vfiprintf_r+0x7a>
 800dbf2:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf6:	d00b      	beq.n	800dc10 <_vfiprintf_r+0xa4>
 800dbf8:	465b      	mov	r3, fp
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f7ff ffa1 	bl	800db46 <__sfputs_r>
 800dc04:	3001      	adds	r0, #1
 800dc06:	f000 80a7 	beq.w	800dd58 <_vfiprintf_r+0x1ec>
 800dc0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc0c:	445a      	add	r2, fp
 800dc0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc10:	f89a 3000 	ldrb.w	r3, [sl]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 809f 	beq.w	800dd58 <_vfiprintf_r+0x1ec>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc24:	f10a 0a01 	add.w	sl, sl, #1
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	9307      	str	r3, [sp, #28]
 800dc2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc30:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc32:	4654      	mov	r4, sl
 800dc34:	2205      	movs	r2, #5
 800dc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3a:	4853      	ldr	r0, [pc, #332]	@ (800dd88 <_vfiprintf_r+0x21c>)
 800dc3c:	f7f2 faf0 	bl	8000220 <memchr>
 800dc40:	9a04      	ldr	r2, [sp, #16]
 800dc42:	b9d8      	cbnz	r0, 800dc7c <_vfiprintf_r+0x110>
 800dc44:	06d1      	lsls	r1, r2, #27
 800dc46:	bf44      	itt	mi
 800dc48:	2320      	movmi	r3, #32
 800dc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc4e:	0713      	lsls	r3, r2, #28
 800dc50:	bf44      	itt	mi
 800dc52:	232b      	movmi	r3, #43	@ 0x2b
 800dc54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc58:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc5e:	d015      	beq.n	800dc8c <_vfiprintf_r+0x120>
 800dc60:	9a07      	ldr	r2, [sp, #28]
 800dc62:	4654      	mov	r4, sl
 800dc64:	2000      	movs	r0, #0
 800dc66:	f04f 0c0a 	mov.w	ip, #10
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc70:	3b30      	subs	r3, #48	@ 0x30
 800dc72:	2b09      	cmp	r3, #9
 800dc74:	d94b      	bls.n	800dd0e <_vfiprintf_r+0x1a2>
 800dc76:	b1b0      	cbz	r0, 800dca6 <_vfiprintf_r+0x13a>
 800dc78:	9207      	str	r2, [sp, #28]
 800dc7a:	e014      	b.n	800dca6 <_vfiprintf_r+0x13a>
 800dc7c:	eba0 0308 	sub.w	r3, r0, r8
 800dc80:	fa09 f303 	lsl.w	r3, r9, r3
 800dc84:	4313      	orrs	r3, r2
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	46a2      	mov	sl, r4
 800dc8a:	e7d2      	b.n	800dc32 <_vfiprintf_r+0xc6>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	1d19      	adds	r1, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	9103      	str	r1, [sp, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfbb      	ittet	lt
 800dc98:	425b      	neglt	r3, r3
 800dc9a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc9e:	9307      	strge	r3, [sp, #28]
 800dca0:	9307      	strlt	r3, [sp, #28]
 800dca2:	bfb8      	it	lt
 800dca4:	9204      	strlt	r2, [sp, #16]
 800dca6:	7823      	ldrb	r3, [r4, #0]
 800dca8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcaa:	d10a      	bne.n	800dcc2 <_vfiprintf_r+0x156>
 800dcac:	7863      	ldrb	r3, [r4, #1]
 800dcae:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcb0:	d132      	bne.n	800dd18 <_vfiprintf_r+0x1ac>
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	1d1a      	adds	r2, r3, #4
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	9203      	str	r2, [sp, #12]
 800dcba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcbe:	3402      	adds	r4, #2
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd98 <_vfiprintf_r+0x22c>
 800dcc6:	7821      	ldrb	r1, [r4, #0]
 800dcc8:	2203      	movs	r2, #3
 800dcca:	4650      	mov	r0, sl
 800dccc:	f7f2 faa8 	bl	8000220 <memchr>
 800dcd0:	b138      	cbz	r0, 800dce2 <_vfiprintf_r+0x176>
 800dcd2:	9b04      	ldr	r3, [sp, #16]
 800dcd4:	eba0 000a 	sub.w	r0, r0, sl
 800dcd8:	2240      	movs	r2, #64	@ 0x40
 800dcda:	4082      	lsls	r2, r0
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	3401      	adds	r4, #1
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce6:	4829      	ldr	r0, [pc, #164]	@ (800dd8c <_vfiprintf_r+0x220>)
 800dce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcec:	2206      	movs	r2, #6
 800dcee:	f7f2 fa97 	bl	8000220 <memchr>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d03f      	beq.n	800dd76 <_vfiprintf_r+0x20a>
 800dcf6:	4b26      	ldr	r3, [pc, #152]	@ (800dd90 <_vfiprintf_r+0x224>)
 800dcf8:	bb1b      	cbnz	r3, 800dd42 <_vfiprintf_r+0x1d6>
 800dcfa:	9b03      	ldr	r3, [sp, #12]
 800dcfc:	3307      	adds	r3, #7
 800dcfe:	f023 0307 	bic.w	r3, r3, #7
 800dd02:	3308      	adds	r3, #8
 800dd04:	9303      	str	r3, [sp, #12]
 800dd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd08:	443b      	add	r3, r7
 800dd0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0c:	e76a      	b.n	800dbe4 <_vfiprintf_r+0x78>
 800dd0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd12:	460c      	mov	r4, r1
 800dd14:	2001      	movs	r0, #1
 800dd16:	e7a8      	b.n	800dc6a <_vfiprintf_r+0xfe>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	3401      	adds	r4, #1
 800dd1c:	9305      	str	r3, [sp, #20]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	f04f 0c0a 	mov.w	ip, #10
 800dd24:	4620      	mov	r0, r4
 800dd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd2a:	3a30      	subs	r2, #48	@ 0x30
 800dd2c:	2a09      	cmp	r2, #9
 800dd2e:	d903      	bls.n	800dd38 <_vfiprintf_r+0x1cc>
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0c6      	beq.n	800dcc2 <_vfiprintf_r+0x156>
 800dd34:	9105      	str	r1, [sp, #20]
 800dd36:	e7c4      	b.n	800dcc2 <_vfiprintf_r+0x156>
 800dd38:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e7f0      	b.n	800dd24 <_vfiprintf_r+0x1b8>
 800dd42:	ab03      	add	r3, sp, #12
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	462a      	mov	r2, r5
 800dd48:	4b12      	ldr	r3, [pc, #72]	@ (800dd94 <_vfiprintf_r+0x228>)
 800dd4a:	a904      	add	r1, sp, #16
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f3af 8000 	nop.w
 800dd52:	4607      	mov	r7, r0
 800dd54:	1c78      	adds	r0, r7, #1
 800dd56:	d1d6      	bne.n	800dd06 <_vfiprintf_r+0x19a>
 800dd58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd5a:	07d9      	lsls	r1, r3, #31
 800dd5c:	d405      	bmi.n	800dd6a <_vfiprintf_r+0x1fe>
 800dd5e:	89ab      	ldrh	r3, [r5, #12]
 800dd60:	059a      	lsls	r2, r3, #22
 800dd62:	d402      	bmi.n	800dd6a <_vfiprintf_r+0x1fe>
 800dd64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd66:	f7ff fc77 	bl	800d658 <__retarget_lock_release_recursive>
 800dd6a:	89ab      	ldrh	r3, [r5, #12]
 800dd6c:	065b      	lsls	r3, r3, #25
 800dd6e:	f53f af1f 	bmi.w	800dbb0 <_vfiprintf_r+0x44>
 800dd72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd74:	e71e      	b.n	800dbb4 <_vfiprintf_r+0x48>
 800dd76:	ab03      	add	r3, sp, #12
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	4b05      	ldr	r3, [pc, #20]	@ (800dd94 <_vfiprintf_r+0x228>)
 800dd7e:	a904      	add	r1, sp, #16
 800dd80:	4630      	mov	r0, r6
 800dd82:	f000 f879 	bl	800de78 <_printf_i>
 800dd86:	e7e4      	b.n	800dd52 <_vfiprintf_r+0x1e6>
 800dd88:	0800f4e8 	.word	0x0800f4e8
 800dd8c:	0800f4f2 	.word	0x0800f4f2
 800dd90:	00000000 	.word	0x00000000
 800dd94:	0800db47 	.word	0x0800db47
 800dd98:	0800f4ee 	.word	0x0800f4ee

0800dd9c <_printf_common>:
 800dd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dda0:	4616      	mov	r6, r2
 800dda2:	4698      	mov	r8, r3
 800dda4:	688a      	ldr	r2, [r1, #8]
 800dda6:	690b      	ldr	r3, [r1, #16]
 800dda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddac:	4293      	cmp	r3, r2
 800ddae:	bfb8      	it	lt
 800ddb0:	4613      	movlt	r3, r2
 800ddb2:	6033      	str	r3, [r6, #0]
 800ddb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ddb8:	4607      	mov	r7, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	b10a      	cbz	r2, 800ddc2 <_printf_common+0x26>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	6033      	str	r3, [r6, #0]
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	0699      	lsls	r1, r3, #26
 800ddc6:	bf42      	ittt	mi
 800ddc8:	6833      	ldrmi	r3, [r6, #0]
 800ddca:	3302      	addmi	r3, #2
 800ddcc:	6033      	strmi	r3, [r6, #0]
 800ddce:	6825      	ldr	r5, [r4, #0]
 800ddd0:	f015 0506 	ands.w	r5, r5, #6
 800ddd4:	d106      	bne.n	800dde4 <_printf_common+0x48>
 800ddd6:	f104 0a19 	add.w	sl, r4, #25
 800ddda:	68e3      	ldr	r3, [r4, #12]
 800dddc:	6832      	ldr	r2, [r6, #0]
 800ddde:	1a9b      	subs	r3, r3, r2
 800dde0:	42ab      	cmp	r3, r5
 800dde2:	dc26      	bgt.n	800de32 <_printf_common+0x96>
 800dde4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dde8:	6822      	ldr	r2, [r4, #0]
 800ddea:	3b00      	subs	r3, #0
 800ddec:	bf18      	it	ne
 800ddee:	2301      	movne	r3, #1
 800ddf0:	0692      	lsls	r2, r2, #26
 800ddf2:	d42b      	bmi.n	800de4c <_printf_common+0xb0>
 800ddf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddf8:	4641      	mov	r1, r8
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c8      	blx	r9
 800ddfe:	3001      	adds	r0, #1
 800de00:	d01e      	beq.n	800de40 <_printf_common+0xa4>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	bf02      	ittt	eq
 800de0e:	68e5      	ldreq	r5, [r4, #12]
 800de10:	6833      	ldreq	r3, [r6, #0]
 800de12:	1aed      	subeq	r5, r5, r3
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	bf0c      	ite	eq
 800de18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de1c:	2500      	movne	r5, #0
 800de1e:	4293      	cmp	r3, r2
 800de20:	bfc4      	itt	gt
 800de22:	1a9b      	subgt	r3, r3, r2
 800de24:	18ed      	addgt	r5, r5, r3
 800de26:	2600      	movs	r6, #0
 800de28:	341a      	adds	r4, #26
 800de2a:	42b5      	cmp	r5, r6
 800de2c:	d11a      	bne.n	800de64 <_printf_common+0xc8>
 800de2e:	2000      	movs	r0, #0
 800de30:	e008      	b.n	800de44 <_printf_common+0xa8>
 800de32:	2301      	movs	r3, #1
 800de34:	4652      	mov	r2, sl
 800de36:	4641      	mov	r1, r8
 800de38:	4638      	mov	r0, r7
 800de3a:	47c8      	blx	r9
 800de3c:	3001      	adds	r0, #1
 800de3e:	d103      	bne.n	800de48 <_printf_common+0xac>
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de48:	3501      	adds	r5, #1
 800de4a:	e7c6      	b.n	800ddda <_printf_common+0x3e>
 800de4c:	18e1      	adds	r1, r4, r3
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	2030      	movs	r0, #48	@ 0x30
 800de52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de56:	4422      	add	r2, r4
 800de58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de60:	3302      	adds	r3, #2
 800de62:	e7c7      	b.n	800ddf4 <_printf_common+0x58>
 800de64:	2301      	movs	r3, #1
 800de66:	4622      	mov	r2, r4
 800de68:	4641      	mov	r1, r8
 800de6a:	4638      	mov	r0, r7
 800de6c:	47c8      	blx	r9
 800de6e:	3001      	adds	r0, #1
 800de70:	d0e6      	beq.n	800de40 <_printf_common+0xa4>
 800de72:	3601      	adds	r6, #1
 800de74:	e7d9      	b.n	800de2a <_printf_common+0x8e>
	...

0800de78 <_printf_i>:
 800de78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de7c:	7e0f      	ldrb	r7, [r1, #24]
 800de7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de80:	2f78      	cmp	r7, #120	@ 0x78
 800de82:	4691      	mov	r9, r2
 800de84:	4680      	mov	r8, r0
 800de86:	460c      	mov	r4, r1
 800de88:	469a      	mov	sl, r3
 800de8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de8e:	d807      	bhi.n	800dea0 <_printf_i+0x28>
 800de90:	2f62      	cmp	r7, #98	@ 0x62
 800de92:	d80a      	bhi.n	800deaa <_printf_i+0x32>
 800de94:	2f00      	cmp	r7, #0
 800de96:	f000 80d2 	beq.w	800e03e <_printf_i+0x1c6>
 800de9a:	2f58      	cmp	r7, #88	@ 0x58
 800de9c:	f000 80b9 	beq.w	800e012 <_printf_i+0x19a>
 800dea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dea8:	e03a      	b.n	800df20 <_printf_i+0xa8>
 800deaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800deae:	2b15      	cmp	r3, #21
 800deb0:	d8f6      	bhi.n	800dea0 <_printf_i+0x28>
 800deb2:	a101      	add	r1, pc, #4	@ (adr r1, 800deb8 <_printf_i+0x40>)
 800deb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800deb8:	0800df11 	.word	0x0800df11
 800debc:	0800df25 	.word	0x0800df25
 800dec0:	0800dea1 	.word	0x0800dea1
 800dec4:	0800dea1 	.word	0x0800dea1
 800dec8:	0800dea1 	.word	0x0800dea1
 800decc:	0800dea1 	.word	0x0800dea1
 800ded0:	0800df25 	.word	0x0800df25
 800ded4:	0800dea1 	.word	0x0800dea1
 800ded8:	0800dea1 	.word	0x0800dea1
 800dedc:	0800dea1 	.word	0x0800dea1
 800dee0:	0800dea1 	.word	0x0800dea1
 800dee4:	0800e025 	.word	0x0800e025
 800dee8:	0800df4f 	.word	0x0800df4f
 800deec:	0800dfdf 	.word	0x0800dfdf
 800def0:	0800dea1 	.word	0x0800dea1
 800def4:	0800dea1 	.word	0x0800dea1
 800def8:	0800e047 	.word	0x0800e047
 800defc:	0800dea1 	.word	0x0800dea1
 800df00:	0800df4f 	.word	0x0800df4f
 800df04:	0800dea1 	.word	0x0800dea1
 800df08:	0800dea1 	.word	0x0800dea1
 800df0c:	0800dfe7 	.word	0x0800dfe7
 800df10:	6833      	ldr	r3, [r6, #0]
 800df12:	1d1a      	adds	r2, r3, #4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6032      	str	r2, [r6, #0]
 800df18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df20:	2301      	movs	r3, #1
 800df22:	e09d      	b.n	800e060 <_printf_i+0x1e8>
 800df24:	6833      	ldr	r3, [r6, #0]
 800df26:	6820      	ldr	r0, [r4, #0]
 800df28:	1d19      	adds	r1, r3, #4
 800df2a:	6031      	str	r1, [r6, #0]
 800df2c:	0606      	lsls	r6, r0, #24
 800df2e:	d501      	bpl.n	800df34 <_printf_i+0xbc>
 800df30:	681d      	ldr	r5, [r3, #0]
 800df32:	e003      	b.n	800df3c <_printf_i+0xc4>
 800df34:	0645      	lsls	r5, r0, #25
 800df36:	d5fb      	bpl.n	800df30 <_printf_i+0xb8>
 800df38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	da03      	bge.n	800df48 <_printf_i+0xd0>
 800df40:	232d      	movs	r3, #45	@ 0x2d
 800df42:	426d      	negs	r5, r5
 800df44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df48:	4859      	ldr	r0, [pc, #356]	@ (800e0b0 <_printf_i+0x238>)
 800df4a:	230a      	movs	r3, #10
 800df4c:	e011      	b.n	800df72 <_printf_i+0xfa>
 800df4e:	6821      	ldr	r1, [r4, #0]
 800df50:	6833      	ldr	r3, [r6, #0]
 800df52:	0608      	lsls	r0, r1, #24
 800df54:	f853 5b04 	ldr.w	r5, [r3], #4
 800df58:	d402      	bmi.n	800df60 <_printf_i+0xe8>
 800df5a:	0649      	lsls	r1, r1, #25
 800df5c:	bf48      	it	mi
 800df5e:	b2ad      	uxthmi	r5, r5
 800df60:	2f6f      	cmp	r7, #111	@ 0x6f
 800df62:	4853      	ldr	r0, [pc, #332]	@ (800e0b0 <_printf_i+0x238>)
 800df64:	6033      	str	r3, [r6, #0]
 800df66:	bf14      	ite	ne
 800df68:	230a      	movne	r3, #10
 800df6a:	2308      	moveq	r3, #8
 800df6c:	2100      	movs	r1, #0
 800df6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df72:	6866      	ldr	r6, [r4, #4]
 800df74:	60a6      	str	r6, [r4, #8]
 800df76:	2e00      	cmp	r6, #0
 800df78:	bfa2      	ittt	ge
 800df7a:	6821      	ldrge	r1, [r4, #0]
 800df7c:	f021 0104 	bicge.w	r1, r1, #4
 800df80:	6021      	strge	r1, [r4, #0]
 800df82:	b90d      	cbnz	r5, 800df88 <_printf_i+0x110>
 800df84:	2e00      	cmp	r6, #0
 800df86:	d04b      	beq.n	800e020 <_printf_i+0x1a8>
 800df88:	4616      	mov	r6, r2
 800df8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df8e:	fb03 5711 	mls	r7, r3, r1, r5
 800df92:	5dc7      	ldrb	r7, [r0, r7]
 800df94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df98:	462f      	mov	r7, r5
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	460d      	mov	r5, r1
 800df9e:	d9f4      	bls.n	800df8a <_printf_i+0x112>
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d10b      	bne.n	800dfbc <_printf_i+0x144>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	07df      	lsls	r7, r3, #31
 800dfa8:	d508      	bpl.n	800dfbc <_printf_i+0x144>
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	6861      	ldr	r1, [r4, #4]
 800dfae:	4299      	cmp	r1, r3
 800dfb0:	bfde      	ittt	le
 800dfb2:	2330      	movle	r3, #48	@ 0x30
 800dfb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfbc:	1b92      	subs	r2, r2, r6
 800dfbe:	6122      	str	r2, [r4, #16]
 800dfc0:	f8cd a000 	str.w	sl, [sp]
 800dfc4:	464b      	mov	r3, r9
 800dfc6:	aa03      	add	r2, sp, #12
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7ff fee6 	bl	800dd9c <_printf_common>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d14a      	bne.n	800e06a <_printf_i+0x1f2>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	b004      	add	sp, #16
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	f043 0320 	orr.w	r3, r3, #32
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	4833      	ldr	r0, [pc, #204]	@ (800e0b4 <_printf_i+0x23c>)
 800dfe8:	2778      	movs	r7, #120	@ 0x78
 800dfea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	6831      	ldr	r1, [r6, #0]
 800dff2:	061f      	lsls	r7, r3, #24
 800dff4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dff8:	d402      	bmi.n	800e000 <_printf_i+0x188>
 800dffa:	065f      	lsls	r7, r3, #25
 800dffc:	bf48      	it	mi
 800dffe:	b2ad      	uxthmi	r5, r5
 800e000:	6031      	str	r1, [r6, #0]
 800e002:	07d9      	lsls	r1, r3, #31
 800e004:	bf44      	itt	mi
 800e006:	f043 0320 	orrmi.w	r3, r3, #32
 800e00a:	6023      	strmi	r3, [r4, #0]
 800e00c:	b11d      	cbz	r5, 800e016 <_printf_i+0x19e>
 800e00e:	2310      	movs	r3, #16
 800e010:	e7ac      	b.n	800df6c <_printf_i+0xf4>
 800e012:	4827      	ldr	r0, [pc, #156]	@ (800e0b0 <_printf_i+0x238>)
 800e014:	e7e9      	b.n	800dfea <_printf_i+0x172>
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	f023 0320 	bic.w	r3, r3, #32
 800e01c:	6023      	str	r3, [r4, #0]
 800e01e:	e7f6      	b.n	800e00e <_printf_i+0x196>
 800e020:	4616      	mov	r6, r2
 800e022:	e7bd      	b.n	800dfa0 <_printf_i+0x128>
 800e024:	6833      	ldr	r3, [r6, #0]
 800e026:	6825      	ldr	r5, [r4, #0]
 800e028:	6961      	ldr	r1, [r4, #20]
 800e02a:	1d18      	adds	r0, r3, #4
 800e02c:	6030      	str	r0, [r6, #0]
 800e02e:	062e      	lsls	r6, r5, #24
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	d501      	bpl.n	800e038 <_printf_i+0x1c0>
 800e034:	6019      	str	r1, [r3, #0]
 800e036:	e002      	b.n	800e03e <_printf_i+0x1c6>
 800e038:	0668      	lsls	r0, r5, #25
 800e03a:	d5fb      	bpl.n	800e034 <_printf_i+0x1bc>
 800e03c:	8019      	strh	r1, [r3, #0]
 800e03e:	2300      	movs	r3, #0
 800e040:	6123      	str	r3, [r4, #16]
 800e042:	4616      	mov	r6, r2
 800e044:	e7bc      	b.n	800dfc0 <_printf_i+0x148>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	1d1a      	adds	r2, r3, #4
 800e04a:	6032      	str	r2, [r6, #0]
 800e04c:	681e      	ldr	r6, [r3, #0]
 800e04e:	6862      	ldr	r2, [r4, #4]
 800e050:	2100      	movs	r1, #0
 800e052:	4630      	mov	r0, r6
 800e054:	f7f2 f8e4 	bl	8000220 <memchr>
 800e058:	b108      	cbz	r0, 800e05e <_printf_i+0x1e6>
 800e05a:	1b80      	subs	r0, r0, r6
 800e05c:	6060      	str	r0, [r4, #4]
 800e05e:	6863      	ldr	r3, [r4, #4]
 800e060:	6123      	str	r3, [r4, #16]
 800e062:	2300      	movs	r3, #0
 800e064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e068:	e7aa      	b.n	800dfc0 <_printf_i+0x148>
 800e06a:	6923      	ldr	r3, [r4, #16]
 800e06c:	4632      	mov	r2, r6
 800e06e:	4649      	mov	r1, r9
 800e070:	4640      	mov	r0, r8
 800e072:	47d0      	blx	sl
 800e074:	3001      	adds	r0, #1
 800e076:	d0ad      	beq.n	800dfd4 <_printf_i+0x15c>
 800e078:	6823      	ldr	r3, [r4, #0]
 800e07a:	079b      	lsls	r3, r3, #30
 800e07c:	d413      	bmi.n	800e0a6 <_printf_i+0x22e>
 800e07e:	68e0      	ldr	r0, [r4, #12]
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	4298      	cmp	r0, r3
 800e084:	bfb8      	it	lt
 800e086:	4618      	movlt	r0, r3
 800e088:	e7a6      	b.n	800dfd8 <_printf_i+0x160>
 800e08a:	2301      	movs	r3, #1
 800e08c:	4632      	mov	r2, r6
 800e08e:	4649      	mov	r1, r9
 800e090:	4640      	mov	r0, r8
 800e092:	47d0      	blx	sl
 800e094:	3001      	adds	r0, #1
 800e096:	d09d      	beq.n	800dfd4 <_printf_i+0x15c>
 800e098:	3501      	adds	r5, #1
 800e09a:	68e3      	ldr	r3, [r4, #12]
 800e09c:	9903      	ldr	r1, [sp, #12]
 800e09e:	1a5b      	subs	r3, r3, r1
 800e0a0:	42ab      	cmp	r3, r5
 800e0a2:	dcf2      	bgt.n	800e08a <_printf_i+0x212>
 800e0a4:	e7eb      	b.n	800e07e <_printf_i+0x206>
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	f104 0619 	add.w	r6, r4, #25
 800e0ac:	e7f5      	b.n	800e09a <_printf_i+0x222>
 800e0ae:	bf00      	nop
 800e0b0:	0800f4f9 	.word	0x0800f4f9
 800e0b4:	0800f50a 	.word	0x0800f50a

0800e0b8 <__sflush_r>:
 800e0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	0716      	lsls	r6, r2, #28
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	d454      	bmi.n	800e172 <__sflush_r+0xba>
 800e0c8:	684b      	ldr	r3, [r1, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	dc02      	bgt.n	800e0d4 <__sflush_r+0x1c>
 800e0ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dd48      	ble.n	800e166 <__sflush_r+0xae>
 800e0d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0d6:	2e00      	cmp	r6, #0
 800e0d8:	d045      	beq.n	800e166 <__sflush_r+0xae>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0e0:	682f      	ldr	r7, [r5, #0]
 800e0e2:	6a21      	ldr	r1, [r4, #32]
 800e0e4:	602b      	str	r3, [r5, #0]
 800e0e6:	d030      	beq.n	800e14a <__sflush_r+0x92>
 800e0e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	0759      	lsls	r1, r3, #29
 800e0ee:	d505      	bpl.n	800e0fc <__sflush_r+0x44>
 800e0f0:	6863      	ldr	r3, [r4, #4]
 800e0f2:	1ad2      	subs	r2, r2, r3
 800e0f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0f6:	b10b      	cbz	r3, 800e0fc <__sflush_r+0x44>
 800e0f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e100:	6a21      	ldr	r1, [r4, #32]
 800e102:	4628      	mov	r0, r5
 800e104:	47b0      	blx	r6
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	d106      	bne.n	800e11a <__sflush_r+0x62>
 800e10c:	6829      	ldr	r1, [r5, #0]
 800e10e:	291d      	cmp	r1, #29
 800e110:	d82b      	bhi.n	800e16a <__sflush_r+0xb2>
 800e112:	4a2a      	ldr	r2, [pc, #168]	@ (800e1bc <__sflush_r+0x104>)
 800e114:	410a      	asrs	r2, r1
 800e116:	07d6      	lsls	r6, r2, #31
 800e118:	d427      	bmi.n	800e16a <__sflush_r+0xb2>
 800e11a:	2200      	movs	r2, #0
 800e11c:	6062      	str	r2, [r4, #4]
 800e11e:	04d9      	lsls	r1, r3, #19
 800e120:	6922      	ldr	r2, [r4, #16]
 800e122:	6022      	str	r2, [r4, #0]
 800e124:	d504      	bpl.n	800e130 <__sflush_r+0x78>
 800e126:	1c42      	adds	r2, r0, #1
 800e128:	d101      	bne.n	800e12e <__sflush_r+0x76>
 800e12a:	682b      	ldr	r3, [r5, #0]
 800e12c:	b903      	cbnz	r3, 800e130 <__sflush_r+0x78>
 800e12e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e132:	602f      	str	r7, [r5, #0]
 800e134:	b1b9      	cbz	r1, 800e166 <__sflush_r+0xae>
 800e136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e13a:	4299      	cmp	r1, r3
 800e13c:	d002      	beq.n	800e144 <__sflush_r+0x8c>
 800e13e:	4628      	mov	r0, r5
 800e140:	f7ff fa9a 	bl	800d678 <_free_r>
 800e144:	2300      	movs	r3, #0
 800e146:	6363      	str	r3, [r4, #52]	@ 0x34
 800e148:	e00d      	b.n	800e166 <__sflush_r+0xae>
 800e14a:	2301      	movs	r3, #1
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	4602      	mov	r2, r0
 800e152:	1c50      	adds	r0, r2, #1
 800e154:	d1c9      	bne.n	800e0ea <__sflush_r+0x32>
 800e156:	682b      	ldr	r3, [r5, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0c6      	beq.n	800e0ea <__sflush_r+0x32>
 800e15c:	2b1d      	cmp	r3, #29
 800e15e:	d001      	beq.n	800e164 <__sflush_r+0xac>
 800e160:	2b16      	cmp	r3, #22
 800e162:	d11e      	bne.n	800e1a2 <__sflush_r+0xea>
 800e164:	602f      	str	r7, [r5, #0]
 800e166:	2000      	movs	r0, #0
 800e168:	e022      	b.n	800e1b0 <__sflush_r+0xf8>
 800e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16e:	b21b      	sxth	r3, r3
 800e170:	e01b      	b.n	800e1aa <__sflush_r+0xf2>
 800e172:	690f      	ldr	r7, [r1, #16]
 800e174:	2f00      	cmp	r7, #0
 800e176:	d0f6      	beq.n	800e166 <__sflush_r+0xae>
 800e178:	0793      	lsls	r3, r2, #30
 800e17a:	680e      	ldr	r6, [r1, #0]
 800e17c:	bf08      	it	eq
 800e17e:	694b      	ldreq	r3, [r1, #20]
 800e180:	600f      	str	r7, [r1, #0]
 800e182:	bf18      	it	ne
 800e184:	2300      	movne	r3, #0
 800e186:	eba6 0807 	sub.w	r8, r6, r7
 800e18a:	608b      	str	r3, [r1, #8]
 800e18c:	f1b8 0f00 	cmp.w	r8, #0
 800e190:	dde9      	ble.n	800e166 <__sflush_r+0xae>
 800e192:	6a21      	ldr	r1, [r4, #32]
 800e194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e196:	4643      	mov	r3, r8
 800e198:	463a      	mov	r2, r7
 800e19a:	4628      	mov	r0, r5
 800e19c:	47b0      	blx	r6
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	dc08      	bgt.n	800e1b4 <__sflush_r+0xfc>
 800e1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1aa:	81a3      	strh	r3, [r4, #12]
 800e1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b4:	4407      	add	r7, r0
 800e1b6:	eba8 0800 	sub.w	r8, r8, r0
 800e1ba:	e7e7      	b.n	800e18c <__sflush_r+0xd4>
 800e1bc:	dfbffffe 	.word	0xdfbffffe

0800e1c0 <_fflush_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	690b      	ldr	r3, [r1, #16]
 800e1c4:	4605      	mov	r5, r0
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	b913      	cbnz	r3, 800e1d0 <_fflush_r+0x10>
 800e1ca:	2500      	movs	r5, #0
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	bd38      	pop	{r3, r4, r5, pc}
 800e1d0:	b118      	cbz	r0, 800e1da <_fflush_r+0x1a>
 800e1d2:	6a03      	ldr	r3, [r0, #32]
 800e1d4:	b90b      	cbnz	r3, 800e1da <_fflush_r+0x1a>
 800e1d6:	f7fe ffb9 	bl	800d14c <__sinit>
 800e1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d0f3      	beq.n	800e1ca <_fflush_r+0xa>
 800e1e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1e4:	07d0      	lsls	r0, r2, #31
 800e1e6:	d404      	bmi.n	800e1f2 <_fflush_r+0x32>
 800e1e8:	0599      	lsls	r1, r3, #22
 800e1ea:	d402      	bmi.n	800e1f2 <_fflush_r+0x32>
 800e1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ee:	f7ff fa32 	bl	800d656 <__retarget_lock_acquire_recursive>
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	f7ff ff5f 	bl	800e0b8 <__sflush_r>
 800e1fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1fc:	07da      	lsls	r2, r3, #31
 800e1fe:	4605      	mov	r5, r0
 800e200:	d4e4      	bmi.n	800e1cc <_fflush_r+0xc>
 800e202:	89a3      	ldrh	r3, [r4, #12]
 800e204:	059b      	lsls	r3, r3, #22
 800e206:	d4e1      	bmi.n	800e1cc <_fflush_r+0xc>
 800e208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e20a:	f7ff fa25 	bl	800d658 <__retarget_lock_release_recursive>
 800e20e:	e7dd      	b.n	800e1cc <_fflush_r+0xc>

0800e210 <__swhatbuf_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	460c      	mov	r4, r1
 800e214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e218:	2900      	cmp	r1, #0
 800e21a:	b096      	sub	sp, #88	@ 0x58
 800e21c:	4615      	mov	r5, r2
 800e21e:	461e      	mov	r6, r3
 800e220:	da0d      	bge.n	800e23e <__swhatbuf_r+0x2e>
 800e222:	89a3      	ldrh	r3, [r4, #12]
 800e224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e228:	f04f 0100 	mov.w	r1, #0
 800e22c:	bf14      	ite	ne
 800e22e:	2340      	movne	r3, #64	@ 0x40
 800e230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e234:	2000      	movs	r0, #0
 800e236:	6031      	str	r1, [r6, #0]
 800e238:	602b      	str	r3, [r5, #0]
 800e23a:	b016      	add	sp, #88	@ 0x58
 800e23c:	bd70      	pop	{r4, r5, r6, pc}
 800e23e:	466a      	mov	r2, sp
 800e240:	f000 f87c 	bl	800e33c <_fstat_r>
 800e244:	2800      	cmp	r0, #0
 800e246:	dbec      	blt.n	800e222 <__swhatbuf_r+0x12>
 800e248:	9901      	ldr	r1, [sp, #4]
 800e24a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e24e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e252:	4259      	negs	r1, r3
 800e254:	4159      	adcs	r1, r3
 800e256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e25a:	e7eb      	b.n	800e234 <__swhatbuf_r+0x24>

0800e25c <__smakebuf_r>:
 800e25c:	898b      	ldrh	r3, [r1, #12]
 800e25e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e260:	079d      	lsls	r5, r3, #30
 800e262:	4606      	mov	r6, r0
 800e264:	460c      	mov	r4, r1
 800e266:	d507      	bpl.n	800e278 <__smakebuf_r+0x1c>
 800e268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	6123      	str	r3, [r4, #16]
 800e270:	2301      	movs	r3, #1
 800e272:	6163      	str	r3, [r4, #20]
 800e274:	b003      	add	sp, #12
 800e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e278:	ab01      	add	r3, sp, #4
 800e27a:	466a      	mov	r2, sp
 800e27c:	f7ff ffc8 	bl	800e210 <__swhatbuf_r>
 800e280:	9f00      	ldr	r7, [sp, #0]
 800e282:	4605      	mov	r5, r0
 800e284:	4639      	mov	r1, r7
 800e286:	4630      	mov	r0, r6
 800e288:	f7ff fa62 	bl	800d750 <_malloc_r>
 800e28c:	b948      	cbnz	r0, 800e2a2 <__smakebuf_r+0x46>
 800e28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e292:	059a      	lsls	r2, r3, #22
 800e294:	d4ee      	bmi.n	800e274 <__smakebuf_r+0x18>
 800e296:	f023 0303 	bic.w	r3, r3, #3
 800e29a:	f043 0302 	orr.w	r3, r3, #2
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	e7e2      	b.n	800e268 <__smakebuf_r+0xc>
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	6020      	str	r0, [r4, #0]
 800e2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	9b01      	ldr	r3, [sp, #4]
 800e2ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2b2:	b15b      	cbz	r3, 800e2cc <__smakebuf_r+0x70>
 800e2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f000 f851 	bl	800e360 <_isatty_r>
 800e2be:	b128      	cbz	r0, 800e2cc <__smakebuf_r+0x70>
 800e2c0:	89a3      	ldrh	r3, [r4, #12]
 800e2c2:	f023 0303 	bic.w	r3, r3, #3
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	81a3      	strh	r3, [r4, #12]
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	431d      	orrs	r5, r3
 800e2d0:	81a5      	strh	r5, [r4, #12]
 800e2d2:	e7cf      	b.n	800e274 <__smakebuf_r+0x18>

0800e2d4 <_putc_r>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	4614      	mov	r4, r2
 800e2da:	4606      	mov	r6, r0
 800e2dc:	b118      	cbz	r0, 800e2e6 <_putc_r+0x12>
 800e2de:	6a03      	ldr	r3, [r0, #32]
 800e2e0:	b90b      	cbnz	r3, 800e2e6 <_putc_r+0x12>
 800e2e2:	f7fe ff33 	bl	800d14c <__sinit>
 800e2e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e2e8:	07d8      	lsls	r0, r3, #31
 800e2ea:	d405      	bmi.n	800e2f8 <_putc_r+0x24>
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	0599      	lsls	r1, r3, #22
 800e2f0:	d402      	bmi.n	800e2f8 <_putc_r+0x24>
 800e2f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2f4:	f7ff f9af 	bl	800d656 <__retarget_lock_acquire_recursive>
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	60a3      	str	r3, [r4, #8]
 800e300:	da05      	bge.n	800e30e <_putc_r+0x3a>
 800e302:	69a2      	ldr	r2, [r4, #24]
 800e304:	4293      	cmp	r3, r2
 800e306:	db12      	blt.n	800e32e <_putc_r+0x5a>
 800e308:	b2eb      	uxtb	r3, r5
 800e30a:	2b0a      	cmp	r3, #10
 800e30c:	d00f      	beq.n	800e32e <_putc_r+0x5a>
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	6022      	str	r2, [r4, #0]
 800e314:	701d      	strb	r5, [r3, #0]
 800e316:	b2ed      	uxtb	r5, r5
 800e318:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e31a:	07da      	lsls	r2, r3, #31
 800e31c:	d405      	bmi.n	800e32a <_putc_r+0x56>
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	059b      	lsls	r3, r3, #22
 800e322:	d402      	bmi.n	800e32a <_putc_r+0x56>
 800e324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e326:	f7ff f997 	bl	800d658 <__retarget_lock_release_recursive>
 800e32a:	4628      	mov	r0, r5
 800e32c:	bd70      	pop	{r4, r5, r6, pc}
 800e32e:	4629      	mov	r1, r5
 800e330:	4622      	mov	r2, r4
 800e332:	4630      	mov	r0, r6
 800e334:	f7ff f868 	bl	800d408 <__swbuf_r>
 800e338:	4605      	mov	r5, r0
 800e33a:	e7ed      	b.n	800e318 <_putc_r+0x44>

0800e33c <_fstat_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d07      	ldr	r5, [pc, #28]	@ (800e35c <_fstat_r+0x20>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	4611      	mov	r1, r2
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	f7f5 ff32 	bl	80041b2 <_fstat>
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	d102      	bne.n	800e358 <_fstat_r+0x1c>
 800e352:	682b      	ldr	r3, [r5, #0]
 800e354:	b103      	cbz	r3, 800e358 <_fstat_r+0x1c>
 800e356:	6023      	str	r3, [r4, #0]
 800e358:	bd38      	pop	{r3, r4, r5, pc}
 800e35a:	bf00      	nop
 800e35c:	20002214 	.word	0x20002214

0800e360 <_isatty_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4d06      	ldr	r5, [pc, #24]	@ (800e37c <_isatty_r+0x1c>)
 800e364:	2300      	movs	r3, #0
 800e366:	4604      	mov	r4, r0
 800e368:	4608      	mov	r0, r1
 800e36a:	602b      	str	r3, [r5, #0]
 800e36c:	f7f5 ff26 	bl	80041bc <_isatty>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_isatty_r+0x1a>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_isatty_r+0x1a>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20002214 	.word	0x20002214

0800e380 <_sbrk_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4d06      	ldr	r5, [pc, #24]	@ (800e39c <_sbrk_r+0x1c>)
 800e384:	2300      	movs	r3, #0
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	f7f5 ff1a 	bl	80041c4 <_sbrk>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_sbrk_r+0x1a>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_sbrk_r+0x1a>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	20002214 	.word	0x20002214

0800e3a0 <_realloc_r>:
 800e3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a4:	4680      	mov	r8, r0
 800e3a6:	4615      	mov	r5, r2
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	b921      	cbnz	r1, 800e3b6 <_realloc_r+0x16>
 800e3ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	f7ff b9cd 	b.w	800d750 <_malloc_r>
 800e3b6:	b92a      	cbnz	r2, 800e3c4 <_realloc_r+0x24>
 800e3b8:	f7ff f95e 	bl	800d678 <_free_r>
 800e3bc:	2400      	movs	r4, #0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c4:	f000 f81a 	bl	800e3fc <_malloc_usable_size_r>
 800e3c8:	4285      	cmp	r5, r0
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	d802      	bhi.n	800e3d4 <_realloc_r+0x34>
 800e3ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e3d2:	d8f4      	bhi.n	800e3be <_realloc_r+0x1e>
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	f7ff f9ba 	bl	800d750 <_malloc_r>
 800e3dc:	4607      	mov	r7, r0
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d0ec      	beq.n	800e3bc <_realloc_r+0x1c>
 800e3e2:	42b5      	cmp	r5, r6
 800e3e4:	462a      	mov	r2, r5
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	bf28      	it	cs
 800e3ea:	4632      	movcs	r2, r6
 800e3ec:	f7ff f935 	bl	800d65a <memcpy>
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	f7ff f940 	bl	800d678 <_free_r>
 800e3f8:	463c      	mov	r4, r7
 800e3fa:	e7e0      	b.n	800e3be <_realloc_r+0x1e>

0800e3fc <_malloc_usable_size_r>:
 800e3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e400:	1f18      	subs	r0, r3, #4
 800e402:	2b00      	cmp	r3, #0
 800e404:	bfbc      	itt	lt
 800e406:	580b      	ldrlt	r3, [r1, r0]
 800e408:	18c0      	addlt	r0, r0, r3
 800e40a:	4770      	bx	lr

0800e40c <abort>:
 800e40c:	b508      	push	{r3, lr}
 800e40e:	2006      	movs	r0, #6
 800e410:	f000 f82c 	bl	800e46c <raise>
 800e414:	2001      	movs	r0, #1
 800e416:	f7f5 fea9 	bl	800416c <_exit>

0800e41a <_raise_r>:
 800e41a:	291f      	cmp	r1, #31
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4605      	mov	r5, r0
 800e420:	460c      	mov	r4, r1
 800e422:	d904      	bls.n	800e42e <_raise_r+0x14>
 800e424:	2316      	movs	r3, #22
 800e426:	6003      	str	r3, [r0, #0]
 800e428:	f04f 30ff 	mov.w	r0, #4294967295
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e430:	b112      	cbz	r2, 800e438 <_raise_r+0x1e>
 800e432:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e436:	b94b      	cbnz	r3, 800e44c <_raise_r+0x32>
 800e438:	4628      	mov	r0, r5
 800e43a:	f000 f831 	bl	800e4a0 <_getpid_r>
 800e43e:	4622      	mov	r2, r4
 800e440:	4601      	mov	r1, r0
 800e442:	4628      	mov	r0, r5
 800e444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e448:	f000 b818 	b.w	800e47c <_kill_r>
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d00a      	beq.n	800e466 <_raise_r+0x4c>
 800e450:	1c59      	adds	r1, r3, #1
 800e452:	d103      	bne.n	800e45c <_raise_r+0x42>
 800e454:	2316      	movs	r3, #22
 800e456:	6003      	str	r3, [r0, #0]
 800e458:	2001      	movs	r0, #1
 800e45a:	e7e7      	b.n	800e42c <_raise_r+0x12>
 800e45c:	2100      	movs	r1, #0
 800e45e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e462:	4620      	mov	r0, r4
 800e464:	4798      	blx	r3
 800e466:	2000      	movs	r0, #0
 800e468:	e7e0      	b.n	800e42c <_raise_r+0x12>
	...

0800e46c <raise>:
 800e46c:	4b02      	ldr	r3, [pc, #8]	@ (800e478 <raise+0xc>)
 800e46e:	4601      	mov	r1, r0
 800e470:	6818      	ldr	r0, [r3, #0]
 800e472:	f7ff bfd2 	b.w	800e41a <_raise_r>
 800e476:	bf00      	nop
 800e478:	20000114 	.word	0x20000114

0800e47c <_kill_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d07      	ldr	r5, [pc, #28]	@ (800e49c <_kill_r+0x20>)
 800e480:	2300      	movs	r3, #0
 800e482:	4604      	mov	r4, r0
 800e484:	4608      	mov	r0, r1
 800e486:	4611      	mov	r1, r2
 800e488:	602b      	str	r3, [r5, #0]
 800e48a:	f7f5 fe67 	bl	800415c <_kill>
 800e48e:	1c43      	adds	r3, r0, #1
 800e490:	d102      	bne.n	800e498 <_kill_r+0x1c>
 800e492:	682b      	ldr	r3, [r5, #0]
 800e494:	b103      	cbz	r3, 800e498 <_kill_r+0x1c>
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	bd38      	pop	{r3, r4, r5, pc}
 800e49a:	bf00      	nop
 800e49c:	20002214 	.word	0x20002214

0800e4a0 <_getpid_r>:
 800e4a0:	f7f5 be5a 	b.w	8004158 <_getpid>

0800e4a4 <_init>:
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a6:	bf00      	nop
 800e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4aa:	bc08      	pop	{r3}
 800e4ac:	469e      	mov	lr, r3
 800e4ae:	4770      	bx	lr

0800e4b0 <_fini>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	bf00      	nop
 800e4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b6:	bc08      	pop	{r3}
 800e4b8:	469e      	mov	lr, r3
 800e4ba:	4770      	bx	lr
