
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011134  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001914  080112e8  080112e8  000122e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08012bfc  08012bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  08012c14  08012c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cd4  08012cd4  000142d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cd4  08012cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012cd8  08012cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08012cdc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142d0  2**0
                  CONTENTS
 10 .bss          000052b4  200002d0  200002d0  000142d0  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  20005584  20005584  000142d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003bfe8  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000822d  00000000  00000000  000502e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001f5e9  00000000  00000000  00058515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002160  00000000  00000000  00077b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002015  00000000  00000000  00079c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000314f8  00000000  00000000  0007bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004007e  00000000  00000000  000ad16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc39a  00000000  00000000  000ed1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e9585  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007308  00000000  00000000  001e95c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  001f08d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080112cc 	.word	0x080112cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	080112cc 	.word	0x080112cc

080001f0 <setjmp>:
 80001f0:	46ec      	mov	ip, sp
 80001f2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001fa:	f04f 0000 	mov.w	r0, #0
 80001fe:	4770      	bx	lr

08000200 <longjmp>:
 8000200:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000204:	46e5      	mov	sp, ip
 8000206:	ec90 8b10 	vldmia	r0, {d8-d15}
 800020a:	0008      	movs	r0, r1
 800020c:	bf08      	it	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f001 b952 	b.w	8001eb4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <selfrel_offset31>:
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	005a      	lsls	r2, r3, #1
 8000f24:	bf4c      	ite	mi
 8000f26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f2a:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000f2e:	4418      	add	r0, r3
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <search_EIT_table>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	b359      	cbz	r1, 8000f92 <search_EIT_table+0x5e>
 8000f3a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f3e:	4605      	mov	r5, r0
 8000f40:	4616      	mov	r6, r2
 8000f42:	4647      	mov	r7, r8
 8000f44:	f04f 0a00 	mov.w	sl, #0
 8000f48:	eb0a 0107 	add.w	r1, sl, r7
 8000f4c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000f50:	1049      	asrs	r1, r1, #1
 8000f52:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8000f56:	4648      	mov	r0, r9
 8000f58:	f7ff ffe2 	bl	8000f20 <selfrel_offset31>
 8000f5c:	4588      	cmp	r8, r1
 8000f5e:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8000f62:	4603      	mov	r3, r0
 8000f64:	d010      	beq.n	8000f88 <search_EIT_table+0x54>
 8000f66:	f104 0008 	add.w	r0, r4, #8
 8000f6a:	42b3      	cmp	r3, r6
 8000f6c:	4428      	add	r0, r5
 8000f6e:	d807      	bhi.n	8000f80 <search_EIT_table+0x4c>
 8000f70:	f7ff ffd6 	bl	8000f20 <selfrel_offset31>
 8000f74:	3801      	subs	r0, #1
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	d208      	bcs.n	8000f8c <search_EIT_table+0x58>
 8000f7a:	f101 0a01 	add.w	sl, r1, #1
 8000f7e:	e7e3      	b.n	8000f48 <search_EIT_table+0x14>
 8000f80:	458a      	cmp	sl, r1
 8000f82:	d006      	beq.n	8000f92 <search_EIT_table+0x5e>
 8000f84:	1e4f      	subs	r7, r1, #1
 8000f86:	e7df      	b.n	8000f48 <search_EIT_table+0x14>
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	d8f9      	bhi.n	8000f80 <search_EIT_table+0x4c>
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	f04f 0900 	mov.w	r9, #0
 8000f96:	4648      	mov	r0, r9
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000f9c <__gnu_unwind_get_pr_addr>:
 8000f9c:	2801      	cmp	r0, #1
 8000f9e:	d009      	beq.n	8000fb4 <__gnu_unwind_get_pr_addr+0x18>
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d005      	beq.n	8000fb0 <__gnu_unwind_get_pr_addr+0x14>
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__gnu_unwind_get_pr_addr+0x1c>)
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf0c      	ite	eq
 8000faa:	4618      	moveq	r0, r3
 8000fac:	2000      	movne	r0, #0
 8000fae:	4770      	bx	lr
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <__gnu_unwind_get_pr_addr+0x20>)
 8000fb2:	4770      	bx	lr
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <__gnu_unwind_get_pr_addr+0x24>)
 8000fb6:	4770      	bx	lr
 8000fb8:	08001681 	.word	0x08001681
 8000fbc:	08001689 	.word	0x08001689
 8000fc0:	08001685 	.word	0x08001685

08000fc4 <get_eit_entry>:
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <get_eit_entry+0x8c>)
 8000fc8:	b083      	sub	sp, #12
 8000fca:	4604      	mov	r4, r0
 8000fcc:	1e8d      	subs	r5, r1, #2
 8000fce:	b343      	cbz	r3, 8001022 <get_eit_entry+0x5e>
 8000fd0:	a901      	add	r1, sp, #4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	b1f0      	cbz	r0, 8001018 <get_eit_entry+0x54>
 8000fda:	9901      	ldr	r1, [sp, #4]
 8000fdc:	462a      	mov	r2, r5
 8000fde:	f7ff ffa9 	bl	8000f34 <search_EIT_table>
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	b1c0      	cbz	r0, 8001018 <get_eit_entry+0x54>
 8000fe6:	f7ff ff9b 	bl	8000f20 <selfrel_offset31>
 8000fea:	684b      	ldr	r3, [r1, #4]
 8000fec:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d02b      	beq.n	800104a <get_eit_entry+0x86>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f101 0004 	add.w	r0, r1, #4
 8000ff8:	db25      	blt.n	8001046 <get_eit_entry+0x82>
 8000ffa:	f7ff ff91 	bl	8000f20 <selfrel_offset31>
 8000ffe:	2300      	movs	r3, #0
 8001000:	6523      	str	r3, [r4, #80]	@ 0x50
 8001002:	6803      	ldr	r3, [r0, #0]
 8001004:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001006:	2b00      	cmp	r3, #0
 8001008:	db12      	blt.n	8001030 <get_eit_entry+0x6c>
 800100a:	f7ff ff89 	bl	8000f20 <selfrel_offset31>
 800100e:	4603      	mov	r3, r0
 8001010:	2000      	movs	r0, #0
 8001012:	6123      	str	r3, [r4, #16]
 8001014:	b003      	add	sp, #12
 8001016:	bd30      	pop	{r4, r5, pc}
 8001018:	2300      	movs	r3, #0
 800101a:	2009      	movs	r0, #9
 800101c:	6123      	str	r3, [r4, #16]
 800101e:	b003      	add	sp, #12
 8001020:	bd30      	pop	{r4, r5, pc}
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <get_eit_entry+0x90>)
 8001024:	490c      	ldr	r1, [pc, #48]	@ (8001058 <get_eit_entry+0x94>)
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	10c9      	asrs	r1, r1, #3
 800102a:	4618      	mov	r0, r3
 800102c:	9101      	str	r1, [sp, #4]
 800102e:	e7d5      	b.n	8000fdc <get_eit_entry+0x18>
 8001030:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001034:	f7ff ffb2 	bl	8000f9c <__gnu_unwind_get_pr_addr>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	bf0c      	ite	eq
 800103c:	2009      	moveq	r0, #9
 800103e:	2000      	movne	r0, #0
 8001040:	6123      	str	r3, [r4, #16]
 8001042:	b003      	add	sp, #12
 8001044:	bd30      	pop	{r4, r5, pc}
 8001046:	2301      	movs	r3, #1
 8001048:	e7da      	b.n	8001000 <get_eit_entry+0x3c>
 800104a:	2300      	movs	r3, #0
 800104c:	2005      	movs	r0, #5
 800104e:	e7e0      	b.n	8001012 <get_eit_entry+0x4e>
 8001050:	00000000 	.word	0x00000000
 8001054:	08012c14 	.word	0x08012c14
 8001058:	08012cd4 	.word	0x08012cd4

0800105c <restore_non_core_regs>:
 800105c:	6803      	ldr	r3, [r0, #0]
 800105e:	07da      	lsls	r2, r3, #31
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	d406      	bmi.n	8001074 <restore_non_core_regs+0x18>
 8001066:	079b      	lsls	r3, r3, #30
 8001068:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 800106c:	d509      	bpl.n	8001082 <restore_non_core_regs+0x26>
 800106e:	f000 fc8f 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	0759      	lsls	r1, r3, #29
 8001076:	d509      	bpl.n	800108c <restore_non_core_regs+0x30>
 8001078:	071a      	lsls	r2, r3, #28
 800107a:	d50e      	bpl.n	800109a <restore_non_core_regs+0x3e>
 800107c:	06db      	lsls	r3, r3, #27
 800107e:	d513      	bpl.n	80010a8 <restore_non_core_regs+0x4c>
 8001080:	bd10      	pop	{r4, pc}
 8001082:	f000 fc7d 	bl	8001980 <__gnu_Unwind_Restore_VFP>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	0759      	lsls	r1, r3, #29
 800108a:	d4f5      	bmi.n	8001078 <restore_non_core_regs+0x1c>
 800108c:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8001090:	f000 fc86 	bl	80019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	071a      	lsls	r2, r3, #28
 8001098:	d4f0      	bmi.n	800107c <restore_non_core_regs+0x20>
 800109a:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 800109e:	f000 fc87 	bl	80019b0 <__gnu_Unwind_Restore_WMMXD>
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	06db      	lsls	r3, r3, #27
 80010a6:	d4eb      	bmi.n	8001080 <restore_non_core_regs+0x24>
 80010a8:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b0:	f000 bcc2 	b.w	8001a38 <__gnu_Unwind_Restore_WMMXC>

080010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80010b4:	4603      	mov	r3, r0
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	b100      	cbz	r0, 80010bc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80010ba:	4418      	add	r0, r3
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <__gnu_unwind_24bit.isra.0>:
 80010c0:	2009      	movs	r0, #9
 80010c2:	4770      	bx	lr

080010c4 <_Unwind_DebugHook>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <unwind_phase2>:
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	460e      	mov	r6, r1
 80010ce:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff77 	bl	8000fc4 <get_eit_entry>
 80010d6:	4605      	mov	r5, r0
 80010d8:	b988      	cbnz	r0, 80010fe <unwind_phase2+0x36>
 80010da:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80010dc:	6162      	str	r2, [r4, #20]
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	4632      	mov	r2, r6
 80010e2:	4621      	mov	r1, r4
 80010e4:	2001      	movs	r0, #1
 80010e6:	4798      	blx	r3
 80010e8:	2808      	cmp	r0, #8
 80010ea:	d0f0      	beq.n	80010ce <unwind_phase2+0x6>
 80010ec:	2807      	cmp	r0, #7
 80010ee:	d106      	bne.n	80010fe <unwind_phase2+0x36>
 80010f0:	4628      	mov	r0, r5
 80010f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010f4:	f7ff ffe6 	bl	80010c4 <_Unwind_DebugHook>
 80010f8:	1d30      	adds	r0, r6, #4
 80010fa:	f000 fc35 	bl	8001968 <__restore_core_regs>
 80010fe:	f010 f891 	bl	8011224 <abort>
 8001102:	bf00      	nop

08001104 <unwind_phase2_forced>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	f101 0c04 	add.w	ip, r1, #4
 800110c:	68c7      	ldr	r7, [r0, #12]
 800110e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8001112:	4606      	mov	r6, r0
 8001114:	4691      	mov	r9, r2
 8001116:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800111a:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 800111e:	ac03      	add	r4, sp, #12
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001128:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001132:	ad02      	add	r5, sp, #8
 8001134:	f04f 0e00 	mov.w	lr, #0
 8001138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800113c:	f8c5 e000 	str.w	lr, [r5]
 8001140:	e021      	b.n	8001186 <unwind_phase2_forced+0x82>
 8001142:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001144:	6173      	str	r3, [r6, #20]
 8001146:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800114a:	4629      	mov	r1, r5
 800114c:	a87c      	add	r0, sp, #496	@ 0x1f0
 800114e:	f00e f8e6 	bl	800f31e <memcpy>
 8001152:	6933      	ldr	r3, [r6, #16]
 8001154:	aa7c      	add	r2, sp, #496	@ 0x1f0
 8001156:	4631      	mov	r1, r6
 8001158:	4650      	mov	r0, sl
 800115a:	4798      	blx	r3
 800115c:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
 800115e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001160:	4649      	mov	r1, r9
 8001162:	e9cd 5800 	strd	r5, r8, [sp]
 8001166:	4682      	mov	sl, r0
 8001168:	4633      	mov	r3, r6
 800116a:	2001      	movs	r0, #1
 800116c:	4632      	mov	r2, r6
 800116e:	47b8      	blx	r7
 8001170:	4681      	mov	r9, r0
 8001172:	bb30      	cbnz	r0, 80011c2 <unwind_phase2_forced+0xbe>
 8001174:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001178:	a97c      	add	r1, sp, #496	@ 0x1f0
 800117a:	4628      	mov	r0, r5
 800117c:	f00e f8cf 	bl	800f31e <memcpy>
 8001180:	f1ba 0f08 	cmp.w	sl, #8
 8001184:	d11a      	bne.n	80011bc <unwind_phase2_forced+0xb8>
 8001186:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff ff1b 	bl	8000fc4 <get_eit_entry>
 800118e:	f109 0909 	add.w	r9, r9, #9
 8001192:	4604      	mov	r4, r0
 8001194:	fa5f fa89 	uxtb.w	sl, r9
 8001198:	2800      	cmp	r0, #0
 800119a:	d0d2      	beq.n	8001142 <unwind_phase2_forced+0x3e>
 800119c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800119e:	64ab      	str	r3, [r5, #72]	@ 0x48
 80011a0:	4632      	mov	r2, r6
 80011a2:	e9cd 5800 	strd	r5, r8, [sp]
 80011a6:	4633      	mov	r3, r6
 80011a8:	f04a 0110 	orr.w	r1, sl, #16
 80011ac:	2001      	movs	r0, #1
 80011ae:	47b8      	blx	r7
 80011b0:	b938      	cbnz	r0, 80011c2 <unwind_phase2_forced+0xbe>
 80011b2:	4620      	mov	r0, r4
 80011b4:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	f1ba 0f07 	cmp.w	sl, #7
 80011c0:	d005      	beq.n	80011ce <unwind_phase2_forced+0xca>
 80011c2:	2409      	movs	r4, #9
 80011c4:	4620      	mov	r0, r4
 80011c6:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	4648      	mov	r0, r9
 80011d0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80011d2:	f7ff ff77 	bl	80010c4 <_Unwind_DebugHook>
 80011d6:	a803      	add	r0, sp, #12
 80011d8:	f000 fbc6 	bl	8001968 <__restore_core_regs>

080011dc <_Unwind_GetCFA>:
 80011dc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80011de:	4770      	bx	lr

080011e0 <__gnu_Unwind_RaiseException>:
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80011e4:	b0fb      	sub	sp, #492	@ 0x1ec
 80011e6:	f101 0c04 	add.w	ip, r1, #4
 80011ea:	640b      	str	r3, [r1, #64]	@ 0x40
 80011ec:	460e      	mov	r6, r1
 80011ee:	4605      	mov	r5, r0
 80011f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011f4:	ac01      	add	r4, sp, #4
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001208:	f04f 37ff 	mov.w	r7, #4294967295
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001210:	9700      	str	r7, [sp, #0]
 8001212:	e006      	b.n	8001222 <__gnu_Unwind_RaiseException+0x42>
 8001214:	692b      	ldr	r3, [r5, #16]
 8001216:	466a      	mov	r2, sp
 8001218:	4629      	mov	r1, r5
 800121a:	4798      	blx	r3
 800121c:	2808      	cmp	r0, #8
 800121e:	4604      	mov	r4, r0
 8001220:	d108      	bne.n	8001234 <__gnu_Unwind_RaiseException+0x54>
 8001222:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8001224:	4628      	mov	r0, r5
 8001226:	f7ff fecd 	bl	8000fc4 <get_eit_entry>
 800122a:	2800      	cmp	r0, #0
 800122c:	d0f2      	beq.n	8001214 <__gnu_Unwind_RaiseException+0x34>
 800122e:	2009      	movs	r0, #9
 8001230:	b07b      	add	sp, #492	@ 0x1ec
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	4668      	mov	r0, sp
 8001236:	f7ff ff11 	bl	800105c <restore_non_core_regs>
 800123a:	2c06      	cmp	r4, #6
 800123c:	d1f7      	bne.n	800122e <__gnu_Unwind_RaiseException+0x4e>
 800123e:	4631      	mov	r1, r6
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff ff41 	bl	80010c8 <unwind_phase2>
 8001246:	bf00      	nop

08001248 <__gnu_Unwind_ForcedUnwind>:
 8001248:	60c1      	str	r1, [r0, #12]
 800124a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800124c:	6182      	str	r2, [r0, #24]
 800124e:	6419      	str	r1, [r3, #64]	@ 0x40
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	e756      	b.n	8001104 <unwind_phase2_forced>
 8001256:	bf00      	nop

08001258 <__gnu_Unwind_Resume>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	68c6      	ldr	r6, [r0, #12]
 800125c:	6943      	ldr	r3, [r0, #20]
 800125e:	640b      	str	r3, [r1, #64]	@ 0x40
 8001260:	b9ae      	cbnz	r6, 800128e <__gnu_Unwind_Resume+0x36>
 8001262:	6903      	ldr	r3, [r0, #16]
 8001264:	460a      	mov	r2, r1
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4601      	mov	r1, r0
 800126c:	2002      	movs	r0, #2
 800126e:	4798      	blx	r3
 8001270:	2807      	cmp	r0, #7
 8001272:	d005      	beq.n	8001280 <__gnu_Unwind_Resume+0x28>
 8001274:	2808      	cmp	r0, #8
 8001276:	d10f      	bne.n	8001298 <__gnu_Unwind_Resume+0x40>
 8001278:	4629      	mov	r1, r5
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff24 	bl	80010c8 <unwind_phase2>
 8001280:	4630      	mov	r0, r6
 8001282:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8001284:	f7ff ff1e 	bl	80010c4 <_Unwind_DebugHook>
 8001288:	1d28      	adds	r0, r5, #4
 800128a:	f000 fb6d 	bl	8001968 <__restore_core_regs>
 800128e:	2201      	movs	r2, #1
 8001290:	f7ff ff38 	bl	8001104 <unwind_phase2_forced>
 8001294:	f00f ffc6 	bl	8011224 <abort>
 8001298:	f00f ffc4 	bl	8011224 <abort>

0800129c <__gnu_Unwind_Resume_or_Rethrow>:
 800129c:	68c2      	ldr	r2, [r0, #12]
 800129e:	b11a      	cbz	r2, 80012a8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80012a0:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80012a2:	640a      	str	r2, [r1, #64]	@ 0x40
 80012a4:	2200      	movs	r2, #0
 80012a6:	e72d      	b.n	8001104 <unwind_phase2_forced>
 80012a8:	e79a      	b.n	80011e0 <__gnu_Unwind_RaiseException>
 80012aa:	bf00      	nop

080012ac <_Unwind_Complete>:
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <_Unwind_DeleteException>:
 80012b0:	6883      	ldr	r3, [r0, #8]
 80012b2:	4601      	mov	r1, r0
 80012b4:	b10b      	cbz	r3, 80012ba <_Unwind_DeleteException+0xa>
 80012b6:	2001      	movs	r0, #1
 80012b8:	4718      	bx	r3
 80012ba:	4770      	bx	lr

080012bc <_Unwind_VRS_Get>:
 80012bc:	2905      	cmp	r1, #5
 80012be:	d815      	bhi.n	80012ec <_Unwind_VRS_Get+0x30>
 80012c0:	e8df f001 	tbb	[pc, r1]
 80012c4:	0314030a 	.word	0x0314030a
 80012c8:	0503      	.short	0x0503
 80012ca:	2001      	movs	r0, #1
 80012cc:	4770      	bx	lr
 80012ce:	9a00      	ldr	r2, [sp, #0]
 80012d0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr
 80012d8:	b943      	cbnz	r3, 80012ec <_Unwind_VRS_Get+0x30>
 80012da:	2a0f      	cmp	r2, #15
 80012dc:	d806      	bhi.n	80012ec <_Unwind_VRS_Get+0x30>
 80012de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012e2:	2000      	movs	r0, #0
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	9a00      	ldr	r2, [sp, #0]
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4770      	bx	lr
 80012ec:	2002      	movs	r0, #2
 80012ee:	4770      	bx	lr

080012f0 <_Unwind_GetGR>:
 80012f0:	b500      	push	{lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	460a      	mov	r2, r1
 80012f6:	2300      	movs	r3, #0
 80012f8:	a903      	add	r1, sp, #12
 80012fa:	9100      	str	r1, [sp, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff ffdd 	bl	80012bc <_Unwind_VRS_Get>
 8001302:	9803      	ldr	r0, [sp, #12]
 8001304:	b005      	add	sp, #20
 8001306:	f85d fb04 	ldr.w	pc, [sp], #4
 800130a:	bf00      	nop

0800130c <_Unwind_VRS_Set>:
 800130c:	2905      	cmp	r1, #5
 800130e:	d815      	bhi.n	800133c <_Unwind_VRS_Set+0x30>
 8001310:	e8df f001 	tbb	[pc, r1]
 8001314:	0314030a 	.word	0x0314030a
 8001318:	0503      	.short	0x0503
 800131a:	2001      	movs	r0, #1
 800131c:	4770      	bx	lr
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6443      	str	r3, [r0, #68]	@ 0x44
 8001324:	2000      	movs	r0, #0
 8001326:	4770      	bx	lr
 8001328:	b943      	cbnz	r3, 800133c <_Unwind_VRS_Set+0x30>
 800132a:	2a0f      	cmp	r2, #15
 800132c:	d806      	bhi.n	800133c <_Unwind_VRS_Set+0x30>
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6053      	str	r3, [r2, #4]
 8001338:	2000      	movs	r0, #0
 800133a:	4770      	bx	lr
 800133c:	2002      	movs	r0, #2
 800133e:	4770      	bx	lr

08001340 <_Unwind_SetGR>:
 8001340:	b510      	push	{r4, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	2300      	movs	r3, #0
 8001346:	ac03      	add	r4, sp, #12
 8001348:	9203      	str	r2, [sp, #12]
 800134a:	9400      	str	r4, [sp, #0]
 800134c:	460a      	mov	r2, r1
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff ffdc 	bl	800130c <_Unwind_VRS_Set>
 8001354:	b004      	add	sp, #16
 8001356:	bd10      	pop	{r4, pc}

08001358 <__gnu_Unwind_Backtrace>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800135c:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001360:	f102 0c04 	add.w	ip, r2, #4
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4605      	mov	r5, r0
 8001368:	460c      	mov	r4, r1
 800136a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800136e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001372:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001376:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800137a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800137e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001382:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001386:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800138a:	f04f 36ff 	mov.w	r6, #4294967295
 800138e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001392:	9616      	str	r6, [sp, #88]	@ 0x58
 8001394:	e010      	b.n	80013b8 <__gnu_Unwind_Backtrace+0x60>
 8001396:	f7ff ffd3 	bl	8001340 <_Unwind_SetGR>
 800139a:	4621      	mov	r1, r4
 800139c:	a816      	add	r0, sp, #88	@ 0x58
 800139e:	47a8      	blx	r5
 80013a0:	4603      	mov	r3, r0
 80013a2:	aa16      	add	r2, sp, #88	@ 0x58
 80013a4:	2008      	movs	r0, #8
 80013a6:	4669      	mov	r1, sp
 80013a8:	b983      	cbnz	r3, 80013cc <__gnu_Unwind_Backtrace+0x74>
 80013aa:	9b04      	ldr	r3, [sp, #16]
 80013ac:	4798      	blx	r3
 80013ae:	2805      	cmp	r0, #5
 80013b0:	4606      	mov	r6, r0
 80013b2:	d00c      	beq.n	80013ce <__gnu_Unwind_Backtrace+0x76>
 80013b4:	2809      	cmp	r0, #9
 80013b6:	d009      	beq.n	80013cc <__gnu_Unwind_Backtrace+0x74>
 80013b8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80013ba:	4668      	mov	r0, sp
 80013bc:	f7ff fe02 	bl	8000fc4 <get_eit_entry>
 80013c0:	4603      	mov	r3, r0
 80013c2:	210c      	movs	r1, #12
 80013c4:	466a      	mov	r2, sp
 80013c6:	a816      	add	r0, sp, #88	@ 0x58
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0e4      	beq.n	8001396 <__gnu_Unwind_Backtrace+0x3e>
 80013cc:	2609      	movs	r6, #9
 80013ce:	a816      	add	r0, sp, #88	@ 0x58
 80013d0:	f7ff fe44 	bl	800105c <restore_non_core_regs>
 80013d4:	4630      	mov	r0, r6
 80013d6:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 80013da:	bd70      	pop	{r4, r5, r6, pc}

080013dc <__gnu_unwind_pr_common>:
 80013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e0:	4616      	mov	r6, r2
 80013e2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80013e4:	b089      	sub	sp, #36	@ 0x24
 80013e6:	460d      	mov	r5, r1
 80013e8:	f852 1b04 	ldr.w	r1, [r2], #4
 80013ec:	9206      	str	r2, [sp, #24]
 80013ee:	f000 0c03 	and.w	ip, r0, #3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d079      	beq.n	80014ea <__gnu_unwind_pr_common+0x10e>
 80013f6:	0c0c      	lsrs	r4, r1, #16
 80013f8:	f88d 401d 	strb.w	r4, [sp, #29]
 80013fc:	0409      	lsls	r1, r1, #16
 80013fe:	b2e4      	uxtb	r4, r4
 8001400:	9105      	str	r1, [sp, #20]
 8001402:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001406:	2102      	movs	r1, #2
 8001408:	f88d 101c 	strb.w	r1, [sp, #28]
 800140c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800140e:	f1bc 0f02 	cmp.w	ip, #2
 8001412:	bf08      	it	eq
 8001414:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001416:	f011 0801 	ands.w	r8, r1, #1
 800141a:	d009      	beq.n	8001430 <__gnu_unwind_pr_common+0x54>
 800141c:	a905      	add	r1, sp, #20
 800141e:	4630      	mov	r0, r6
 8001420:	f000 fba4 	bl	8001b6c <__gnu_unwind_execute>
 8001424:	2800      	cmp	r0, #0
 8001426:	d156      	bne.n	80014d6 <__gnu_unwind_pr_common+0xfa>
 8001428:	2008      	movs	r0, #8
 800142a:	b009      	add	sp, #36	@ 0x24
 800142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001430:	6817      	ldr	r7, [r2, #0]
 8001432:	2f00      	cmp	r7, #0
 8001434:	d0f2      	beq.n	800141c <__gnu_unwind_pr_common+0x40>
 8001436:	f000 0108 	and.w	r1, r0, #8
 800143a:	e9cd 1801 	strd	r1, r8, [sp, #4]
 800143e:	46e3      	mov	fp, ip
 8001440:	469a      	mov	sl, r3
 8001442:	f1ba 0f02 	cmp.w	sl, #2
 8001446:	d04c      	beq.n	80014e2 <__gnu_unwind_pr_common+0x106>
 8001448:	8817      	ldrh	r7, [r2, #0]
 800144a:	8854      	ldrh	r4, [r2, #2]
 800144c:	f102 0904 	add.w	r9, r2, #4
 8001450:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8001452:	f024 0301 	bic.w	r3, r4, #1
 8001456:	210f      	movs	r1, #15
 8001458:	4630      	mov	r0, r6
 800145a:	eb03 0802 	add.w	r8, r3, r2
 800145e:	f7ff ff47 	bl	80012f0 <_Unwind_GetGR>
 8001462:	4580      	cmp	r8, r0
 8001464:	d83b      	bhi.n	80014de <__gnu_unwind_pr_common+0x102>
 8001466:	f027 0201 	bic.w	r2, r7, #1
 800146a:	eb02 0308 	add.w	r3, r2, r8
 800146e:	4283      	cmp	r3, r0
 8001470:	bf94      	ite	ls
 8001472:	2300      	movls	r3, #0
 8001474:	2301      	movhi	r3, #1
 8001476:	0064      	lsls	r4, r4, #1
 8001478:	f004 0402 	and.w	r4, r4, #2
 800147c:	f007 0701 	and.w	r7, r7, #1
 8001480:	4327      	orrs	r7, r4
 8001482:	2f01      	cmp	r7, #1
 8001484:	d04e      	beq.n	8001524 <__gnu_unwind_pr_common+0x148>
 8001486:	2f02      	cmp	r7, #2
 8001488:	d035      	beq.n	80014f6 <__gnu_unwind_pr_common+0x11a>
 800148a:	bb27      	cbnz	r7, 80014d6 <__gnu_unwind_pr_common+0xfa>
 800148c:	f1bb 0f00 	cmp.w	fp, #0
 8001490:	d002      	beq.n	8001498 <__gnu_unwind_pr_common+0xbc>
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80d3 	bne.w	800163e <__gnu_unwind_pr_common+0x262>
 8001498:	f109 0204 	add.w	r2, r9, #4
 800149c:	6817      	ldr	r7, [r2, #0]
 800149e:	2f00      	cmp	r7, #0
 80014a0:	d1cf      	bne.n	8001442 <__gnu_unwind_pr_common+0x66>
 80014a2:	a905      	add	r1, sp, #20
 80014a4:	4630      	mov	r0, r6
 80014a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80014aa:	f000 fb5f 	bl	8001b6c <__gnu_unwind_execute>
 80014ae:	b990      	cbnz	r0, 80014d6 <__gnu_unwind_pr_common+0xfa>
 80014b0:	f1b8 0f00 	cmp.w	r8, #0
 80014b4:	d0b8      	beq.n	8001428 <__gnu_unwind_pr_common+0x4c>
 80014b6:	210f      	movs	r1, #15
 80014b8:	4630      	mov	r0, r6
 80014ba:	f7ff ff19 	bl	80012f0 <_Unwind_GetGR>
 80014be:	210e      	movs	r1, #14
 80014c0:	4602      	mov	r2, r0
 80014c2:	4630      	mov	r0, r6
 80014c4:	f7ff ff3c 	bl	8001340 <_Unwind_SetGR>
 80014c8:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <__gnu_unwind_pr_common+0x2a0>)
 80014ca:	210f      	movs	r1, #15
 80014cc:	4630      	mov	r0, r6
 80014ce:	f7ff ff37 	bl	8001340 <_Unwind_SetGR>
 80014d2:	2007      	movs	r0, #7
 80014d4:	e000      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 80014d6:	2009      	movs	r0, #9
 80014d8:	b009      	add	sp, #36	@ 0x24
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	2300      	movs	r3, #0
 80014e0:	e7c9      	b.n	8001476 <__gnu_unwind_pr_common+0x9a>
 80014e2:	6854      	ldr	r4, [r2, #4]
 80014e4:	f102 0908 	add.w	r9, r2, #8
 80014e8:	e7b2      	b.n	8001450 <__gnu_unwind_pr_common+0x74>
 80014ea:	0209      	lsls	r1, r1, #8
 80014ec:	9105      	str	r1, [sp, #20]
 80014ee:	f88d 301d 	strb.w	r3, [sp, #29]
 80014f2:	2103      	movs	r1, #3
 80014f4:	e788      	b.n	8001408 <__gnu_unwind_pr_common+0x2c>
 80014f6:	f8d9 4000 	ldr.w	r4, [r9]
 80014fa:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 80014fe:	f1bb 0f00 	cmp.w	fp, #0
 8001502:	d147      	bne.n	8001594 <__gnu_unwind_pr_common+0x1b8>
 8001504:	b12b      	cbz	r3, 8001512 <__gnu_unwind_pr_common+0x136>
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05c      	beq.n	80015c6 <__gnu_unwind_pr_common+0x1ea>
 800150c:	f1b8 0f00 	cmp.w	r8, #0
 8001510:	d059      	beq.n	80015c6 <__gnu_unwind_pr_common+0x1ea>
 8001512:	2c00      	cmp	r4, #0
 8001514:	da01      	bge.n	800151a <__gnu_unwind_pr_common+0x13e>
 8001516:	f109 0904 	add.w	r9, r9, #4
 800151a:	f108 0201 	add.w	r2, r8, #1
 800151e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8001522:	e7bb      	b.n	800149c <__gnu_unwind_pr_common+0xc0>
 8001524:	f1bb 0f00 	cmp.w	fp, #0
 8001528:	d11c      	bne.n	8001564 <__gnu_unwind_pr_common+0x188>
 800152a:	b1c3      	cbz	r3, 800155e <__gnu_unwind_pr_common+0x182>
 800152c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001530:	f8d9 2000 	ldr.w	r2, [r9]
 8001534:	1c99      	adds	r1, r3, #2
 8001536:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800153a:	d0cc      	beq.n	80014d6 <__gnu_unwind_pr_common+0xfa>
 800153c:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8001540:	3301      	adds	r3, #1
 8001542:	9404      	str	r4, [sp, #16]
 8001544:	f000 808e 	beq.w	8001664 <__gnu_unwind_pr_common+0x288>
 8001548:	f109 0004 	add.w	r0, r9, #4
 800154c:	f7ff fdb2 	bl	80010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001550:	ab04      	add	r3, sp, #16
 8001552:	4601      	mov	r1, r0
 8001554:	4628      	mov	r0, r5
 8001556:	f3af 8000 	nop.w
 800155a:	2800      	cmp	r0, #0
 800155c:	d159      	bne.n	8001612 <__gnu_unwind_pr_common+0x236>
 800155e:	f109 0208 	add.w	r2, r9, #8
 8001562:	e79b      	b.n	800149c <__gnu_unwind_pr_common+0xc0>
 8001564:	210d      	movs	r1, #13
 8001566:	4630      	mov	r0, r6
 8001568:	f7ff fec2 	bl	80012f0 <_Unwind_GetGR>
 800156c:	6a2c      	ldr	r4, [r5, #32]
 800156e:	4284      	cmp	r4, r0
 8001570:	d1f5      	bne.n	800155e <__gnu_unwind_pr_common+0x182>
 8001572:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001574:	4599      	cmp	r9, r3
 8001576:	d1f2      	bne.n	800155e <__gnu_unwind_pr_common+0x182>
 8001578:	4648      	mov	r0, r9
 800157a:	f7ff fcd1 	bl	8000f20 <selfrel_offset31>
 800157e:	210f      	movs	r1, #15
 8001580:	4602      	mov	r2, r0
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff fedc 	bl	8001340 <_Unwind_SetGR>
 8001588:	462a      	mov	r2, r5
 800158a:	2100      	movs	r1, #0
 800158c:	4630      	mov	r0, r6
 800158e:	f7ff fed7 	bl	8001340 <_Unwind_SetGR>
 8001592:	e79e      	b.n	80014d2 <__gnu_unwind_pr_common+0xf6>
 8001594:	210d      	movs	r1, #13
 8001596:	4630      	mov	r0, r6
 8001598:	f7ff feaa 	bl	80012f0 <_Unwind_GetGR>
 800159c:	6a2f      	ldr	r7, [r5, #32]
 800159e:	4287      	cmp	r7, r0
 80015a0:	d1b7      	bne.n	8001512 <__gnu_unwind_pr_common+0x136>
 80015a2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015a4:	4599      	cmp	r9, r3
 80015a6:	d1b4      	bne.n	8001512 <__gnu_unwind_pr_common+0x136>
 80015a8:	2400      	movs	r4, #0
 80015aa:	2304      	movs	r3, #4
 80015ac:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 80015b0:	444b      	add	r3, r9
 80015b2:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 80015b6:	636b      	str	r3, [r5, #52]	@ 0x34
 80015b8:	f8d9 3000 	ldr.w	r3, [r9]
 80015bc:	42a3      	cmp	r3, r4
 80015be:	db58      	blt.n	8001672 <__gnu_unwind_pr_common+0x296>
 80015c0:	2301      	movs	r3, #1
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	e7a9      	b.n	800151a <__gnu_unwind_pr_common+0x13e>
 80015c6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80015ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80015ce:	f109 0704 	add.w	r7, r9, #4
 80015d2:	46b3      	mov	fp, r6
 80015d4:	2400      	movs	r4, #0
 80015d6:	461e      	mov	r6, r3
 80015d8:	e00b      	b.n	80015f2 <__gnu_unwind_pr_common+0x216>
 80015da:	4638      	mov	r0, r7
 80015dc:	9604      	str	r6, [sp, #16]
 80015de:	f7ff fd69 	bl	80010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015e2:	2200      	movs	r2, #0
 80015e4:	4601      	mov	r1, r0
 80015e6:	ab04      	add	r3, sp, #16
 80015e8:	4628      	mov	r0, r5
 80015ea:	f3af 8000 	nop.w
 80015ee:	3704      	adds	r7, #4
 80015f0:	b9f8      	cbnz	r0, 8001632 <__gnu_unwind_pr_common+0x256>
 80015f2:	4544      	cmp	r4, r8
 80015f4:	f104 0401 	add.w	r4, r4, #1
 80015f8:	d1ef      	bne.n	80015da <__gnu_unwind_pr_common+0x1fe>
 80015fa:	210d      	movs	r1, #13
 80015fc:	4658      	mov	r0, fp
 80015fe:	f7ff fe77 	bl	80012f0 <_Unwind_GetGR>
 8001602:	9b04      	ldr	r3, [sp, #16]
 8001604:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 8001608:	4602      	mov	r2, r0
 800160a:	e9c5 2308 	strd	r2, r3, [r5, #32]
 800160e:	2006      	movs	r0, #6
 8001610:	e762      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 8001612:	4604      	mov	r4, r0
 8001614:	210d      	movs	r1, #13
 8001616:	4630      	mov	r0, r6
 8001618:	f7ff fe6a 	bl	80012f0 <_Unwind_GetGR>
 800161c:	9e04      	ldr	r6, [sp, #16]
 800161e:	6228      	str	r0, [r5, #32]
 8001620:	2c02      	cmp	r4, #2
 8001622:	bf04      	itt	eq
 8001624:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8001626:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800162a:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 800162e:	2006      	movs	r0, #6
 8001630:	e752      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 8001632:	465e      	mov	r6, fp
 8001634:	f8d9 4000 	ldr.w	r4, [r9]
 8001638:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800163c:	e769      	b.n	8001512 <__gnu_unwind_pr_common+0x136>
 800163e:	4648      	mov	r0, r9
 8001640:	f7ff fc6e 	bl	8000f20 <selfrel_offset31>
 8001644:	f109 0304 	add.w	r3, r9, #4
 8001648:	4604      	mov	r4, r0
 800164a:	63ab      	str	r3, [r5, #56]	@ 0x38
 800164c:	4628      	mov	r0, r5
 800164e:	f3af 8000 	nop.w
 8001652:	2800      	cmp	r0, #0
 8001654:	f43f af3f 	beq.w	80014d6 <__gnu_unwind_pr_common+0xfa>
 8001658:	4622      	mov	r2, r4
 800165a:	210f      	movs	r1, #15
 800165c:	4630      	mov	r0, r6
 800165e:	f7ff fe6f 	bl	8001340 <_Unwind_SetGR>
 8001662:	e736      	b.n	80014d2 <__gnu_unwind_pr_common+0xf6>
 8001664:	4630      	mov	r0, r6
 8001666:	210d      	movs	r1, #13
 8001668:	f7ff fe42 	bl	80012f0 <_Unwind_GetGR>
 800166c:	4626      	mov	r6, r4
 800166e:	6228      	str	r0, [r5, #32]
 8001670:	e7db      	b.n	800162a <__gnu_unwind_pr_common+0x24e>
 8001672:	f108 0201 	add.w	r2, r8, #1
 8001676:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 800167a:	e77e      	b.n	800157a <__gnu_unwind_pr_common+0x19e>
 800167c:	00000000 	.word	0x00000000

08001680 <__aeabi_unwind_cpp_pr0>:
 8001680:	2300      	movs	r3, #0
 8001682:	e6ab      	b.n	80013dc <__gnu_unwind_pr_common>

08001684 <__aeabi_unwind_cpp_pr1>:
 8001684:	2301      	movs	r3, #1
 8001686:	e6a9      	b.n	80013dc <__gnu_unwind_pr_common>

08001688 <__aeabi_unwind_cpp_pr2>:
 8001688:	2302      	movs	r3, #2
 800168a:	e6a7      	b.n	80013dc <__gnu_unwind_pr_common>

0800168c <_Unwind_VRS_Pop>:
 800168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001690:	4606      	mov	r6, r0
 8001692:	b0c4      	sub	sp, #272	@ 0x110
 8001694:	4614      	mov	r4, r2
 8001696:	2905      	cmp	r1, #5
 8001698:	f200 80e8 	bhi.w	800186c <_Unwind_VRS_Pop+0x1e0>
 800169c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016a0:	002d0012 	.word	0x002d0012
 80016a4:	006600e6 	.word	0x006600e6
 80016a8:	0006008b 	.word	0x0006008b
 80016ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	f040 80dc 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 80016b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80016b8:	6442      	str	r2, [r0, #68]	@ 0x44
 80016ba:	6383      	str	r3, [r0, #56]	@ 0x38
 80016bc:	2000      	movs	r0, #0
 80016be:	b044      	add	sp, #272	@ 0x110
 80016c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 80d1 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 80016ca:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80016cc:	fa1f fc84 	uxth.w	ip, r4
 80016d0:	2001      	movs	r0, #1
 80016d2:	f106 0e04 	add.w	lr, r6, #4
 80016d6:	fa00 f103 	lsl.w	r1, r0, r3
 80016da:	ea11 0f0c 	tst.w	r1, ip
 80016de:	462a      	mov	r2, r5
 80016e0:	d004      	beq.n	80016ec <_Unwind_VRS_Pop+0x60>
 80016e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80016e6:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 80016ea:	4615      	mov	r5, r2
 80016ec:	3301      	adds	r3, #1
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d1f1      	bne.n	80016d6 <_Unwind_VRS_Pop+0x4a>
 80016f2:	04a7      	lsls	r7, r4, #18
 80016f4:	d4e2      	bmi.n	80016bc <_Unwind_VRS_Pop+0x30>
 80016f6:	63b5      	str	r5, [r6, #56]	@ 0x38
 80016f8:	e7e0      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8001700:	b2a4      	uxth	r4, r4
 8001702:	d07c      	beq.n	80017fe <_Unwind_VRS_Pop+0x172>
 8001704:	2b05      	cmp	r3, #5
 8001706:	f040 80b1 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 800170a:	eb07 0804 	add.w	r8, r7, r4
 800170e:	f1b8 0f20 	cmp.w	r8, #32
 8001712:	f200 80ab 	bhi.w	800186c <_Unwind_VRS_Pop+0x1e0>
 8001716:	2f0f      	cmp	r7, #15
 8001718:	f240 80aa 	bls.w	8001870 <_Unwind_VRS_Pop+0x1e4>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d0cd      	beq.n	80016bc <_Unwind_VRS_Pop+0x30>
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	0755      	lsls	r5, r2, #29
 8001724:	f100 80ff 	bmi.w	8001926 <_Unwind_VRS_Pop+0x29a>
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	ad02      	add	r5, sp, #8
 800172c:	4628      	mov	r0, r5
 800172e:	f000 f93b 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001732:	0064      	lsls	r4, r4, #1
 8001734:	f1a7 0010 	sub.w	r0, r7, #16
 8001738:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	1e61      	subs	r1, r4, #1
 800173e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001742:	3101      	adds	r1, #1
 8001744:	3804      	subs	r0, #4
 8001746:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800174a:	f852 4b04 	ldr.w	r4, [r2], #4
 800174e:	f840 4f04 	str.w	r4, [r0, #4]!
 8001752:	428a      	cmp	r2, r1
 8001754:	d1f9      	bne.n	800174a <_Unwind_VRS_Pop+0xbe>
 8001756:	2b01      	cmp	r3, #1
 8001758:	f000 80cd 	beq.w	80018f6 <_Unwind_VRS_Pop+0x26a>
 800175c:	2f0f      	cmp	r7, #15
 800175e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001760:	f240 80e9 	bls.w	8001936 <_Unwind_VRS_Pop+0x2aa>
 8001764:	4628      	mov	r0, r5
 8001766:	f000 f91b 	bl	80019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800176a:	e7a7      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 800176c:	2b03      	cmp	r3, #3
 800176e:	d17d      	bne.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001770:	b2a7      	uxth	r7, r4
 8001772:	eb07 4314 	add.w	r3, r7, r4, lsr #16
 8001776:	2b10      	cmp	r3, #16
 8001778:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800177c:	d876      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	0719      	lsls	r1, r3, #28
 8001782:	f100 80a4 	bmi.w	80018ce <_Unwind_VRS_Pop+0x242>
 8001786:	ad22      	add	r5, sp, #136	@ 0x88
 8001788:	4628      	mov	r0, r5
 800178a:	f000 f933 	bl	80019f4 <__gnu_Unwind_Save_WMMXD>
 800178e:	007a      	lsls	r2, r7, #1
 8001790:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8001792:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8001796:	1e53      	subs	r3, r2, #1
 8001798:	b142      	cbz	r2, 80017ac <_Unwind_VRS_Pop+0x120>
 800179a:	1b01      	subs	r1, r0, r4
 800179c:	5862      	ldr	r2, [r4, r1]
 800179e:	f844 2b04 	str.w	r2, [r4], #4
 80017a2:	3b01      	subs	r3, #1
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	d1f9      	bne.n	800179c <_Unwind_VRS_Pop+0x110>
 80017a8:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80017ac:	63b0      	str	r0, [r6, #56]	@ 0x38
 80017ae:	4628      	mov	r0, r5
 80017b0:	f000 f8fe 	bl	80019b0 <__gnu_Unwind_Restore_WMMXD>
 80017b4:	e782      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d158      	bne.n	800186c <_Unwind_VRS_Pop+0x1e0>
 80017ba:	2c10      	cmp	r4, #16
 80017bc:	d856      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	06d8      	lsls	r0, r3, #27
 80017c2:	d47c      	bmi.n	80018be <_Unwind_VRS_Pop+0x232>
 80017c4:	ad22      	add	r5, sp, #136	@ 0x88
 80017c6:	4628      	mov	r0, r5
 80017c8:	f000 f940 	bl	8001a4c <__gnu_Unwind_Save_WMMXC>
 80017cc:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
 80017ce:	4629      	mov	r1, r5
 80017d0:	2300      	movs	r3, #0
 80017d2:	f04f 0c01 	mov.w	ip, #1
 80017d6:	fa0c f203 	lsl.w	r2, ip, r3
 80017da:	4222      	tst	r2, r4
 80017dc:	4638      	mov	r0, r7
 80017de:	f103 0301 	add.w	r3, r3, #1
 80017e2:	d003      	beq.n	80017ec <_Unwind_VRS_Pop+0x160>
 80017e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80017e8:	600a      	str	r2, [r1, #0]
 80017ea:	4607      	mov	r7, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	f101 0104 	add.w	r1, r1, #4
 80017f2:	d1f0      	bne.n	80017d6 <_Unwind_VRS_Pop+0x14a>
 80017f4:	63b7      	str	r7, [r6, #56]	@ 0x38
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 f91e 	bl	8001a38 <__gnu_Unwind_Restore_WMMXC>
 80017fc:	e75e      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80017fe:	193a      	adds	r2, r7, r4
 8001800:	2a10      	cmp	r2, #16
 8001802:	d833      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001804:	2f10      	cmp	r7, #16
 8001806:	d031      	beq.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001808:	6802      	ldr	r2, [r0, #0]
 800180a:	07d1      	lsls	r1, r2, #31
 800180c:	d508      	bpl.n	8001820 <_Unwind_VRS_Pop+0x194>
 800180e:	4630      	mov	r0, r6
 8001810:	f022 0203 	bic.w	r2, r2, #3
 8001814:	f840 2b50 	str.w	r2, [r0], #80
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f000 f8b5 	bl	8001988 <__gnu_Unwind_Save_VFP>
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	ad22      	add	r5, sp, #136	@ 0x88
 8001824:	4628      	mov	r0, r5
 8001826:	f000 f8af 	bl	8001988 <__gnu_Unwind_Save_VFP>
 800182a:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	2c00      	cmp	r4, #0
 8001830:	d062      	beq.n	80018f8 <_Unwind_VRS_Pop+0x26c>
 8001832:	0062      	lsls	r2, r4, #1
 8001834:	3a01      	subs	r2, #1
 8001836:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 800183a:	f04f 0800 	mov.w	r8, #0
 800183e:	3201      	adds	r2, #1
 8001840:	3804      	subs	r0, #4
 8001842:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001846:	f851 4b04 	ldr.w	r4, [r1], #4
 800184a:	f840 4f04 	str.w	r4, [r0, #4]!
 800184e:	4291      	cmp	r1, r2
 8001850:	d1f9      	bne.n	8001846 <_Unwind_VRS_Pop+0x1ba>
 8001852:	f1b8 0f00 	cmp.w	r8, #0
 8001856:	d142      	bne.n	80018de <_Unwind_VRS_Pop+0x252>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d04d      	beq.n	80018f8 <_Unwind_VRS_Pop+0x26c>
 800185c:	2f0f      	cmp	r7, #15
 800185e:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001860:	f63f af2c 	bhi.w	80016bc <_Unwind_VRS_Pop+0x30>
 8001864:	4628      	mov	r0, r5
 8001866:	f000 f893 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 800186a:	e727      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 800186c:	2002      	movs	r0, #2
 800186e:	e726      	b.n	80016be <_Unwind_VRS_Pop+0x32>
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	f1b8 0f10 	cmp.w	r8, #16
 8001876:	f002 0101 	and.w	r1, r2, #1
 800187a:	d943      	bls.n	8001904 <_Unwind_VRS_Pop+0x278>
 800187c:	b151      	cbz	r1, 8001894 <_Unwind_VRS_Pop+0x208>
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	f042 0202 	orr.w	r2, r2, #2
 8001886:	f840 2b50 	str.w	r2, [r0], #80
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f000 f884 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001890:	6832      	ldr	r2, [r6, #0]
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	0750      	lsls	r0, r2, #29
 8001898:	d451      	bmi.n	800193e <_Unwind_VRS_Pop+0x2b2>
 800189a:	ad22      	add	r5, sp, #136	@ 0x88
 800189c:	4628      	mov	r0, r5
 800189e:	f000 f87b 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 80018a2:	a802      	add	r0, sp, #8
 80018a4:	f000 f880 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018a8:	f1c7 0210 	rsb	r2, r7, #16
 80018ac:	0052      	lsls	r2, r2, #1
 80018ae:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80018b0:	9b01      	ldr	r3, [sp, #4]
 80018b2:	f1a8 0810 	sub.w	r8, r8, #16
 80018b6:	3a01      	subs	r2, #1
 80018b8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 80018bc:	e7bf      	b.n	800183e <_Unwind_VRS_Pop+0x1b2>
 80018be:	f023 0310 	bic.w	r3, r3, #16
 80018c2:	6033      	str	r3, [r6, #0]
 80018c4:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 80018c8:	f000 f8c0 	bl	8001a4c <__gnu_Unwind_Save_WMMXC>
 80018cc:	e77a      	b.n	80017c4 <_Unwind_VRS_Pop+0x138>
 80018ce:	f023 0308 	bic.w	r3, r3, #8
 80018d2:	6003      	str	r3, [r0, #0]
 80018d4:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 80018d8:	f000 f88c 	bl	80019f4 <__gnu_Unwind_Save_WMMXD>
 80018dc:	e753      	b.n	8001786 <_Unwind_VRS_Pop+0xfa>
 80018de:	2f10      	cmp	r7, #16
 80018e0:	4638      	mov	r0, r7
 80018e2:	bf38      	it	cc
 80018e4:	2010      	movcc	r0, #16
 80018e6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80018ea:	3810      	subs	r0, #16
 80018ec:	ad02      	add	r5, sp, #8
 80018ee:	3901      	subs	r1, #1
 80018f0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80018f4:	e725      	b.n	8001742 <_Unwind_VRS_Pop+0xb6>
 80018f6:	ad22      	add	r5, sp, #136	@ 0x88
 80018f8:	3104      	adds	r1, #4
 80018fa:	63b1      	str	r1, [r6, #56]	@ 0x38
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f83f 	bl	8001980 <__gnu_Unwind_Restore_VFP>
 8001902:	e6db      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 8001904:	bb19      	cbnz	r1, 800194e <_Unwind_VRS_Pop+0x2c2>
 8001906:	ad22      	add	r5, sp, #136	@ 0x88
 8001908:	4628      	mov	r0, r5
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f000 f844 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001910:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8001912:	2c00      	cmp	r4, #0
 8001914:	d0a6      	beq.n	8001864 <_Unwind_VRS_Pop+0x1d8>
 8001916:	0062      	lsls	r2, r4, #1
 8001918:	9b01      	ldr	r3, [sp, #4]
 800191a:	3a01      	subs	r2, #1
 800191c:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8001920:	f04f 0800 	mov.w	r8, #0
 8001924:	e78b      	b.n	800183e <_Unwind_VRS_Pop+0x1b2>
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	f840 2bd8 	str.w	r2, [r0], #216
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	f000 f83a 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	e6f9      	b.n	800172a <_Unwind_VRS_Pop+0x9e>
 8001936:	a822      	add	r0, sp, #136	@ 0x88
 8001938:	f000 f82a 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 800193c:	e712      	b.n	8001764 <_Unwind_VRS_Pop+0xd8>
 800193e:	4630      	mov	r0, r6
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	f840 2bd8 	str.w	r2, [r0], #216
 8001948:	f000 f82e 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800194c:	e7a5      	b.n	800189a <_Unwind_VRS_Pop+0x20e>
 800194e:	4630      	mov	r0, r6
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	f042 0202 	orr.w	r2, r2, #2
 8001958:	f840 2b50 	str.w	r2, [r0], #80
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	f000 f81b 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	e7cf      	b.n	8001906 <_Unwind_VRS_Pop+0x27a>
 8001966:	bf00      	nop

08001968 <__restore_core_regs>:
 8001968:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800196c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001970:	469c      	mov	ip, r3
 8001972:	46a6      	mov	lr, r4
 8001974:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001978:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800197c:	46e5      	mov	sp, ip
 800197e:	bd00      	pop	{pc}

08001980 <__gnu_Unwind_Restore_VFP>:
 8001980:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <__gnu_Unwind_Save_VFP>:
 8001988:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <__gnu_Unwind_Restore_VFP_D>:
 8001990:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Save_VFP_D>:
 8001998:	ec80 0b20 	vstmia	r0, {d0-d15}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019a0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019a8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_WMMXD>:
 80019b0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019b4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019b8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019bc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019c0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019c4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019c8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019cc:	ecf0 7102 	ldfe	f7, [r0], #8
 80019d0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019d4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019d8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019dc:	ecf0 b102 	ldfp	f3, [r0], #8
 80019e0:	ecf0 c102 	ldfp	f4, [r0], #8
 80019e4:	ecf0 d102 	ldfp	f5, [r0], #8
 80019e8:	ecf0 e102 	ldfp	f6, [r0], #8
 80019ec:	ecf0 f102 	ldfp	f7, [r0], #8
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <__gnu_Unwind_Save_WMMXD>:
 80019f4:	ece0 0102 	stfe	f0, [r0], #8
 80019f8:	ece0 1102 	stfe	f1, [r0], #8
 80019fc:	ece0 2102 	stfe	f2, [r0], #8
 8001a00:	ece0 3102 	stfe	f3, [r0], #8
 8001a04:	ece0 4102 	stfe	f4, [r0], #8
 8001a08:	ece0 5102 	stfe	f5, [r0], #8
 8001a0c:	ece0 6102 	stfe	f6, [r0], #8
 8001a10:	ece0 7102 	stfe	f7, [r0], #8
 8001a14:	ece0 8102 	stfp	f0, [r0], #8
 8001a18:	ece0 9102 	stfp	f1, [r0], #8
 8001a1c:	ece0 a102 	stfp	f2, [r0], #8
 8001a20:	ece0 b102 	stfp	f3, [r0], #8
 8001a24:	ece0 c102 	stfp	f4, [r0], #8
 8001a28:	ece0 d102 	stfp	f5, [r0], #8
 8001a2c:	ece0 e102 	stfp	f6, [r0], #8
 8001a30:	ece0 f102 	stfp	f7, [r0], #8
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <__gnu_Unwind_Restore_WMMXC>:
 8001a38:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a3c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a40:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a44:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <__gnu_Unwind_Save_WMMXC>:
 8001a4c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a50:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a54:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a58:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <_Unwind_RaiseException>:
 8001a60:	46ec      	mov	ip, sp
 8001a62:	b500      	push	{lr}
 8001a64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a74:	a901      	add	r1, sp, #4
 8001a76:	f7ff fbb3 	bl	80011e0 <__gnu_Unwind_RaiseException>
 8001a7a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a7e:	b012      	add	sp, #72	@ 0x48
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <_Unwind_Resume>:
 8001a84:	46ec      	mov	ip, sp
 8001a86:	b500      	push	{lr}
 8001a88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	f7ff fbdd 	bl	8001258 <__gnu_Unwind_Resume>
 8001a9e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001aa2:	b012      	add	sp, #72	@ 0x48
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <_Unwind_Resume_or_Rethrow>:
 8001aa8:	46ec      	mov	ip, sp
 8001aaa:	b500      	push	{lr}
 8001aac:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ab0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	f7ff fbed 	bl	800129c <__gnu_Unwind_Resume_or_Rethrow>
 8001ac2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac6:	b012      	add	sp, #72	@ 0x48
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <_Unwind_ForcedUnwind>:
 8001acc:	46ec      	mov	ip, sp
 8001ace:	b500      	push	{lr}
 8001ad0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ae0:	ab01      	add	r3, sp, #4
 8001ae2:	f7ff fbb1 	bl	8001248 <__gnu_Unwind_ForcedUnwind>
 8001ae6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001aea:	b012      	add	sp, #72	@ 0x48
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <_Unwind_Backtrace>:
 8001af0:	46ec      	mov	ip, sp
 8001af2:	b500      	push	{lr}
 8001af4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b04:	aa01      	add	r2, sp, #4
 8001b06:	f7ff fc27 	bl	8001358 <__gnu_Unwind_Backtrace>
 8001b0a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0e:	b012      	add	sp, #72	@ 0x48
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <next_unwind_byte>:
 8001b14:	7a02      	ldrb	r2, [r0, #8]
 8001b16:	4603      	mov	r3, r0
 8001b18:	b97a      	cbnz	r2, 8001b3a <next_unwind_byte+0x26>
 8001b1a:	7a42      	ldrb	r2, [r0, #9]
 8001b1c:	b1a2      	cbz	r2, 8001b48 <next_unwind_byte+0x34>
 8001b1e:	6841      	ldr	r1, [r0, #4]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	b410      	push	{r4}
 8001b24:	7242      	strb	r2, [r0, #9]
 8001b26:	6808      	ldr	r0, [r1, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	1d0c      	adds	r4, r1, #4
 8001b2c:	721a      	strb	r2, [r3, #8]
 8001b2e:	0202      	lsls	r2, r0, #8
 8001b30:	605c      	str	r4, [r3, #4]
 8001b32:	0e00      	lsrs	r0, r0, #24
 8001b34:	bc10      	pop	{r4}
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4770      	bx	lr
 8001b3a:	6800      	ldr	r0, [r0, #0]
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	721a      	strb	r2, [r3, #8]
 8001b40:	0202      	lsls	r2, r0, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	0e00      	lsrs	r0, r0, #24
 8001b46:	4770      	bx	lr
 8001b48:	20b0      	movs	r0, #176	@ 0xb0
 8001b4a:	4770      	bx	lr

08001b4c <_Unwind_GetGR.constprop.0>:
 8001b4c:	b500      	push	{lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	aa03      	add	r2, sp, #12
 8001b52:	2300      	movs	r3, #0
 8001b54:	9200      	str	r2, [sp, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	220c      	movs	r2, #12
 8001b5a:	f7ff fbaf 	bl	80012bc <_Unwind_VRS_Get>
 8001b5e:	9803      	ldr	r0, [sp, #12]
 8001b60:	b005      	add	sp, #20
 8001b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b66:	bf00      	nop

08001b68 <unwind_UCB_from_context>:
 8001b68:	e7f0      	b.n	8001b4c <_Unwind_GetGR.constprop.0>
 8001b6a:	bf00      	nop

08001b6c <__gnu_unwind_execute>:
 8001b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b70:	4606      	mov	r6, r0
 8001b72:	b085      	sub	sp, #20
 8001b74:	460d      	mov	r5, r1
 8001b76:	f04f 0800 	mov.w	r8, #0
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff ffca 	bl	8001b14 <next_unwind_byte>
 8001b80:	28b0      	cmp	r0, #176	@ 0xb0
 8001b82:	4604      	mov	r4, r0
 8001b84:	f000 811c 	beq.w	8001dc0 <__gnu_unwind_execute+0x254>
 8001b88:	0607      	lsls	r7, r0, #24
 8001b8a:	d55b      	bpl.n	8001c44 <__gnu_unwind_execute+0xd8>
 8001b8c:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001b90:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b92:	d01a      	beq.n	8001bca <__gnu_unwind_execute+0x5e>
 8001b94:	d830      	bhi.n	8001bf8 <__gnu_unwind_execute+0x8c>
 8001b96:	2b80      	cmp	r3, #128	@ 0x80
 8001b98:	f000 8082 	beq.w	8001ca0 <__gnu_unwind_execute+0x134>
 8001b9c:	2b90      	cmp	r3, #144	@ 0x90
 8001b9e:	d127      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ba0:	f000 030d 	and.w	r3, r0, #13
 8001ba4:	2b0d      	cmp	r3, #13
 8001ba6:	d023      	beq.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	2300      	movs	r3, #0
 8001bac:	f000 020f 	and.w	r2, r0, #15
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	9700      	str	r7, [sp, #0]
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff fb81 	bl	80012bc <_Unwind_VRS_Get>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9700      	str	r7, [sp, #0]
 8001bbe:	220d      	movs	r2, #13
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f7ff fba2 	bl	800130c <_Unwind_VRS_Set>
 8001bc8:	e7d7      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001bca:	43c3      	mvns	r3, r0
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bd4:	411a      	asrs	r2, r3
 8001bd6:	0701      	lsls	r1, r0, #28
 8001bd8:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bdc:	d501      	bpl.n	8001be2 <__gnu_unwind_execute+0x76>
 8001bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be2:	2300      	movs	r3, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4630      	mov	r0, r6
 8001be8:	f7ff fd50 	bl	800168c <_Unwind_VRS_Pop>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d0c4      	beq.n	8001b7a <__gnu_unwind_execute+0xe>
 8001bf0:	2009      	movs	r0, #9
 8001bf2:	b005      	add	sp, #20
 8001bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf8:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bfa:	d068      	beq.n	8001cce <__gnu_unwind_execute+0x162>
 8001bfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bfe:	d13d      	bne.n	8001c7c <__gnu_unwind_execute+0x110>
 8001c00:	28c6      	cmp	r0, #198	@ 0xc6
 8001c02:	f000 80ca 	beq.w	8001d9a <__gnu_unwind_execute+0x22e>
 8001c06:	28c7      	cmp	r0, #199	@ 0xc7
 8001c08:	f000 80df 	beq.w	8001dca <__gnu_unwind_execute+0x25e>
 8001c0c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c10:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c12:	f000 80ec 	beq.w	8001dee <__gnu_unwind_execute+0x282>
 8001c16:	28c8      	cmp	r0, #200	@ 0xc8
 8001c18:	f000 80f7 	beq.w	8001e0a <__gnu_unwind_execute+0x29e>
 8001c1c:	28c9      	cmp	r0, #201	@ 0xc9
 8001c1e:	d1e7      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c20:	4628      	mov	r0, r5
 8001c22:	f7ff ff77 	bl	8001b14 <next_unwind_byte>
 8001c26:	0302      	lsls	r2, r0, #12
 8001c28:	f000 000f 	and.w	r0, r0, #15
 8001c2c:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c30:	3001      	adds	r0, #1
 8001c32:	4302      	orrs	r2, r0
 8001c34:	2101      	movs	r1, #1
 8001c36:	2305      	movs	r3, #5
 8001c38:	4630      	mov	r0, r6
 8001c3a:	f7ff fd27 	bl	800168c <_Unwind_VRS_Pop>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d09b      	beq.n	8001b7a <__gnu_unwind_execute+0xe>
 8001c42:	e7d5      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c44:	0083      	lsls	r3, r0, #2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	1d1f      	adds	r7, r3, #4
 8001c4a:	f10d 0908 	add.w	r9, sp, #8
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f8cd 9000 	str.w	r9, [sp]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f7ff fb2f 	bl	80012bc <_Unwind_VRS_Get>
 8001c5e:	9b02      	ldr	r3, [sp, #8]
 8001c60:	f8cd 9000 	str.w	r9, [sp]
 8001c64:	0660      	lsls	r0, r4, #25
 8001c66:	bf4c      	ite	mi
 8001c68:	1bdf      	submi	r7, r3, r7
 8001c6a:	18ff      	addpl	r7, r7, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	220d      	movs	r2, #13
 8001c70:	4619      	mov	r1, r3
 8001c72:	4630      	mov	r0, r6
 8001c74:	9702      	str	r7, [sp, #8]
 8001c76:	f7ff fb49 	bl	800130c <_Unwind_VRS_Set>
 8001c7a:	e77e      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001c7c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c80:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c82:	d1b5      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c84:	f000 0207 	and.w	r2, r0, #7
 8001c88:	3201      	adds	r2, #1
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c90:	2101      	movs	r1, #1
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff fcfa 	bl	800168c <_Unwind_VRS_Pop>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f43f af6e 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001c9e:	e7a7      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff ff37 	bl	8001b14 <next_unwind_byte>
 8001ca6:	0224      	lsls	r4, r4, #8
 8001ca8:	4320      	orrs	r0, r4
 8001caa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001cae:	d09f      	beq.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001cb0:	0104      	lsls	r4, r0, #4
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	b2a2      	uxth	r2, r4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f7ff fce7 	bl	800168c <_Unwind_VRS_Pop>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d196      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001cc2:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001cc6:	bf18      	it	ne
 8001cc8:	f04f 0801 	movne.w	r8, #1
 8001ccc:	e755      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001cce:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	f200 80b5 	bhi.w	8001e42 <__gnu_unwind_execute+0x2d6>
 8001cd8:	e8df f003 	tbb	[pc, r3]
 8001cdc:	0c162955 	.word	0x0c162955
 8001ce0:	03          	.byte	0x03
 8001ce1:	00          	.byte	0x00
 8001ce2:	aa03      	add	r2, sp, #12
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9200      	str	r2, [sp, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	220d      	movs	r2, #13
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff fae5 	bl	80012bc <_Unwind_VRS_Get>
 8001cf2:	e742      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f7ff fcc6 	bl	800168c <_Unwind_VRS_Pop>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f43f af3a 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001d06:	e773      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7ff ff03 	bl	8001b14 <next_unwind_byte>
 8001d0e:	0302      	lsls	r2, r0, #12
 8001d10:	f000 000f 	and.w	r0, r0, #15
 8001d14:	3001      	adds	r0, #1
 8001d16:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7ff fcb3 	bl	800168c <_Unwind_VRS_Pop>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	f43f af27 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001d2c:	e760      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f10d 0908 	add.w	r9, sp, #8
 8001d34:	220d      	movs	r2, #13
 8001d36:	4619      	mov	r1, r3
 8001d38:	f8cd 9000 	str.w	r9, [sp]
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fabd 	bl	80012bc <_Unwind_VRS_Get>
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7ff fee6 	bl	8001b14 <next_unwind_byte>
 8001d48:	0602      	lsls	r2, r0, #24
 8001d4a:	9c02      	ldr	r4, [sp, #8]
 8001d4c:	f04f 0702 	mov.w	r7, #2
 8001d50:	d50b      	bpl.n	8001d6a <__gnu_unwind_execute+0x1fe>
 8001d52:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001d56:	40b8      	lsls	r0, r7
 8001d58:	4404      	add	r4, r0
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	9402      	str	r4, [sp, #8]
 8001d5e:	f7ff fed9 	bl	8001b14 <next_unwind_byte>
 8001d62:	0603      	lsls	r3, r0, #24
 8001d64:	f107 0707 	add.w	r7, r7, #7
 8001d68:	d4f3      	bmi.n	8001d52 <__gnu_unwind_execute+0x1e6>
 8001d6a:	40b8      	lsls	r0, r7
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001d72:	4404      	add	r4, r0
 8001d74:	f8cd 9000 	str.w	r9, [sp]
 8001d78:	220d      	movs	r2, #13
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	9402      	str	r4, [sp, #8]
 8001d80:	f7ff fac4 	bl	800130c <_Unwind_VRS_Set>
 8001d84:	e6f9      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7ff fec4 	bl	8001b14 <next_unwind_byte>
 8001d8c:	1e43      	subs	r3, r0, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b0e      	cmp	r3, #14
 8001d92:	4602      	mov	r2, r0
 8001d94:	f67f af25 	bls.w	8001be2 <__gnu_unwind_execute+0x76>
 8001d98:	e72a      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f7ff feba 	bl	8001b14 <next_unwind_byte>
 8001da0:	0302      	lsls	r2, r0, #12
 8001da2:	f000 000f 	and.w	r0, r0, #15
 8001da6:	3001      	adds	r0, #1
 8001da8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001dac:	2303      	movs	r3, #3
 8001dae:	4302      	orrs	r2, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4630      	mov	r0, r6
 8001db4:	f7ff fc6a 	bl	800168c <_Unwind_VRS_Pop>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f43f aede 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001dbe:	e717      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001dc0:	f1b8 0f00 	cmp.w	r8, #0
 8001dc4:	d02d      	beq.n	8001e22 <__gnu_unwind_execute+0x2b6>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e713      	b.n	8001bf2 <__gnu_unwind_execute+0x86>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fea2 	bl	8001b14 <next_unwind_byte>
 8001dd0:	1e43      	subs	r3, r0, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b0e      	cmp	r3, #14
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f63f af0a 	bhi.w	8001bf0 <__gnu_unwind_execute+0x84>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2104      	movs	r1, #4
 8001de0:	4630      	mov	r0, r6
 8001de2:	f7ff fc53 	bl	800168c <_Unwind_VRS_Pop>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	f43f aec7 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001dec:	e700      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001dee:	f000 020f 	and.w	r2, r0, #15
 8001df2:	3201      	adds	r2, #1
 8001df4:	2303      	movs	r3, #3
 8001df6:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fc45 	bl	800168c <_Unwind_VRS_Pop>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	f43f aeb9 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001e08:	e6f2      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff fe82 	bl	8001b14 <next_unwind_byte>
 8001e10:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001e14:	f000 030f 	and.w	r3, r0, #15
 8001e18:	3210      	adds	r2, #16
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e20:	e708      	b.n	8001c34 <__gnu_unwind_execute+0xc8>
 8001e22:	ac02      	add	r4, sp, #8
 8001e24:	4643      	mov	r3, r8
 8001e26:	4641      	mov	r1, r8
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	220e      	movs	r2, #14
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f7ff fa45 	bl	80012bc <_Unwind_VRS_Get>
 8001e32:	220f      	movs	r2, #15
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	4643      	mov	r3, r8
 8001e38:	4641      	mov	r1, r8
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f7ff fa66 	bl	800130c <_Unwind_VRS_Set>
 8001e40:	e7c1      	b.n	8001dc6 <__gnu_unwind_execute+0x25a>
 8001e42:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001e46:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e48:	f43f aed2 	beq.w	8001bf0 <__gnu_unwind_execute+0x84>
 8001e4c:	f000 0207 	and.w	r2, r0, #7
 8001e50:	3201      	adds	r2, #1
 8001e52:	2301      	movs	r3, #1
 8001e54:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f7ff fc16 	bl	800168c <_Unwind_VRS_Pop>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f43f ae8a 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001e66:	e6c3      	b.n	8001bf0 <__gnu_unwind_execute+0x84>

08001e68 <__gnu_unwind_frame>:
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e6c:	6853      	ldr	r3, [r2, #4]
 8001e6e:	b084      	sub	sp, #16
 8001e70:	f04f 0c03 	mov.w	ip, #3
 8001e74:	3208      	adds	r2, #8
 8001e76:	021c      	lsls	r4, r3, #8
 8001e78:	4608      	mov	r0, r1
 8001e7a:	0e1b      	lsrs	r3, r3, #24
 8001e7c:	a901      	add	r1, sp, #4
 8001e7e:	9401      	str	r4, [sp, #4]
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e86:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e8a:	f7ff fe6f 	bl	8001b6c <__gnu_unwind_execute>
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	bf00      	nop

08001e94 <_Unwind_GetRegionStart>:
 8001e94:	b508      	push	{r3, lr}
 8001e96:	f7ff fe67 	bl	8001b68 <unwind_UCB_from_context>
 8001e9a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e9c:	bd08      	pop	{r3, pc}
 8001e9e:	bf00      	nop

08001ea0 <_Unwind_GetLanguageSpecificData>:
 8001ea0:	b508      	push	{r3, lr}
 8001ea2:	f7ff fe61 	bl	8001b68 <unwind_UCB_from_context>
 8001ea6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea8:	79c3      	ldrb	r3, [r0, #7]
 8001eaa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001eae:	3008      	adds	r0, #8
 8001eb0:	bd08      	pop	{r3, pc}
 8001eb2:	bf00      	nop

08001eb4 <__aeabi_idiv0>:
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <readReg>:
 * 
 * @param data[out]
 *   The register value is written to this parameter
 **********************************************************/    
static uint32_t readReg(bool ap, int reg, uint32_t *data)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t b;
  uint32_t ack = 0;
  uint32_t ret = SWD_ERROR_OK;
   
  /* Initalize output variable */
  *data = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6013      	str	r3, [r2, #0]
  
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)1;
  
  int A2 = reg & 0x1;
 8001ebe:	f001 0501 	and.w	r5, r1, #1
  int A3 = (reg >> 1) & 0x1;
 8001ec2:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calulate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	442b      	add	r3, r5
 8001eca:	440b      	add	r3, r1
 8001ecc:	f003 0301 	and.w	r3, r3, #1
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ed0:	4c7f      	ldr	r4, [pc, #508]	@ (80020d0 <readReg+0x218>)
 8001ed2:	2610      	movs	r6, #16
 8001ed4:	61a6      	str	r6, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ed6:	6826      	ldr	r6, [r4, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001edc:	fa94 f4a4 	rbit	r4, r4
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ee0:	fab4 f484 	clz	r4, r4
 8001ee4:	0064      	lsls	r4, r4, #1
 8001ee6:	f04f 0c03 	mov.w	ip, #3
 8001eea:	fa0c f404 	lsl.w	r4, ip, r4
 8001eee:	ea26 0c04 	bic.w	ip, r6, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001ef6:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8001efa:	fab4 f484 	clz	r4, r4
 8001efe:	0064      	lsls	r4, r4, #1
 8001f00:	2601      	movs	r6, #1
 8001f02:	40a6      	lsls	r6, r4
 8001f04:	ea46 060c 	orr.w	r6, r6, ip
 8001f08:	4c71      	ldr	r4, [pc, #452]	@ (80020d0 <readReg+0x218>)
 8001f0a:	6026      	str	r6, [r4, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f0c:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
 8001f10:	61a6      	str	r6, [r4, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f12:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001f16:	61a7      	str	r7, [r4, #24]
 8001f18:	2740      	movs	r7, #64	@ 0x40
 8001f1a:	61a7      	str	r7, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f1c:	61a6      	str	r6, [r4, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Send request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	f000 8097 	beq.w	8002052 <readReg+0x19a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001f2a:	6184      	str	r4, [r0, #24]
 8001f2c:	4868      	ldr	r0, [pc, #416]	@ (80020d0 <readReg+0x218>)
 8001f2e:	2640      	movs	r6, #64	@ 0x40
 8001f30:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f32:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001f36:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f38:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001f3c:	6187      	str	r7, [r0, #24]
 8001f3e:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f40:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8001f42:	2d00      	cmp	r5, #0
 8001f44:	f000 808a 	beq.w	800205c <readReg+0x1a4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f48:	6187      	str	r7, [r0, #24]
 8001f4a:	4861      	ldr	r0, [pc, #388]	@ (80020d0 <readReg+0x218>)
 8001f4c:	2440      	movs	r4, #64	@ 0x40
 8001f4e:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f50:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001f54:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 8001f56:	2900      	cmp	r1, #0
 8001f58:	f000 8085 	beq.w	8002066 <readReg+0x1ae>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f62:	6188      	str	r0, [r1, #24]
 8001f64:	495a      	ldr	r1, [pc, #360]	@ (80020d0 <readReg+0x218>)
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f6a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001f6e:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d07d      	beq.n	8002070 <readReg+0x1b8>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f74:	460b      	mov	r3, r1
 8001f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7a:	6199      	str	r1, [r3, #24]
 8001f7c:	4b54      	ldr	r3, [pc, #336]	@ (80020d0 <readReg+0x218>)
 8001f7e:	2040      	movs	r0, #64	@ 0x40
 8001f80:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001f86:	6199      	str	r1, [r3, #24]
 8001f88:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001f8c:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f8e:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f90:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f96:	6199      	str	r1, [r3, #24]
 8001f98:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f9a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001f9e:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fa0:	681b      	ldr	r3, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001fa6:	fab1 f181 	clz	r1, r1
 8001faa:	0049      	lsls	r1, r1, #1
 8001fac:	2003      	movs	r0, #3
 8001fae:	fa00 f101 	lsl.w	r1, r0, r1
 8001fb2:	ea23 0101 	bic.w	r1, r3, r1
 8001fb6:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <readReg+0x218>)
 8001fb8:	6019      	str	r1, [r3, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001fbe:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fc0:	2140      	movs	r1, #64	@ 0x40
 8001fc2:	6199      	str	r1, [r3, #24]
  uint32_t ack = 0;
 8001fc4:	2000      	movs	r0, #0
  /* Turnaround */
  SWDIO_SET_INPUT();
  SWCLK_CYCLE();
  
  /* Read ACK */
  for ( i=0; i<3; i++ ) {
 8001fc6:	4601      	mov	r1, r0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fc8:	461c      	mov	r4, r3
 8001fca:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fce:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fd0:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001fd2:	6923      	ldr	r3, [r4, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fd4:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001fd6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 8001fda:	408b      	lsls	r3, r1
 8001fdc:	4318      	orrs	r0, r3
  for ( i=0; i<3; i++ ) {
 8001fde:	3101      	adds	r1, #1
 8001fe0:	2903      	cmp	r1, #3
 8001fe2:	d1f5      	bne.n	8001fd0 <readReg+0x118>
  }
  
  /* Verify that ACK is OK */
  if ( ack == ACK_OK ) {
 8001fe4:	2801      	cmp	r0, #1
 8001fe6:	d048      	beq.n	800207a <readReg+0x1c2>
    } else {
      ret = SWD_ERROR_PARITY;
    }
    
  } 
  else if ( ack == ACK_WAIT ) 
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d003      	beq.n	8001ff4 <readReg+0x13c>
  {
    ret = SWD_ERROR_WAIT;
  } 
  else if ( ack == ACK_FAULT ) 
  {
    ret = SWD_ERROR_FAULT;
 8001fec:	2804      	cmp	r0, #4
 8001fee:	bf14      	ite	ne
 8001ff0:	2004      	movne	r0, #4
 8001ff2:	2003      	moveq	r0, #3
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <readReg+0x218>)
 8001ff6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ffa:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ffc:	2240      	movs	r2, #64	@ 0x40
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	2210      	movs	r2, #16
 8002002:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002004:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800200a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002022:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	430b      	orrs	r3, r1
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <readReg+0x218>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <readReg+0x218>)
 800203c:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002040:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002044:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002046:	619d      	str	r5, [r3, #24]
 8002048:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800204a:	6199      	str	r1, [r3, #24]
  SWCLK_CYCLE();
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 800204c:	3a01      	subs	r2, #1
 800204e:	d1fa      	bne.n	8002046 <readReg+0x18e>
    SWD_WRITE_BIT(0);
  }
  
  return ret;
}
 8002050:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002052:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <readReg+0x218>)
 8002054:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002058:	6184      	str	r4, [r0, #24]
}
 800205a:	e767      	b.n	8001f2c <readReg+0x74>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <readReg+0x218>)
 800205e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002062:	6184      	str	r4, [r0, #24]
}
 8002064:	e771      	b.n	8001f4a <readReg+0x92>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002066:	491a      	ldr	r1, [pc, #104]	@ (80020d0 <readReg+0x218>)
 8002068:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800206c:	6188      	str	r0, [r1, #24]
}
 800206e:	e779      	b.n	8001f64 <readReg+0xac>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <readReg+0x218>)
 8002072:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002076:	6199      	str	r1, [r3, #24]
}
 8002078:	e780      	b.n	8001f7c <readReg+0xc4>
  uint32_t cb = 0;
 800207a:	f04f 0e00 	mov.w	lr, #0
    for ( i=0; i<32; i++ ) 
 800207e:	4673      	mov	r3, lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002080:	4c13      	ldr	r4, [pc, #76]	@ (80020d0 <readReg+0x218>)
 8002082:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002086:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002088:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800208a:	6921      	ldr	r1, [r4, #16]
 800208c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002090:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002092:	2900      	cmp	r1, #0
 8002094:	bf14      	ite	ne
 8002096:	f04f 0c01 	movne.w	ip, #1
 800209a:	f04f 0c00 	moveq.w	ip, #0
      *data |= b << i;
 800209e:	fa0c fc03 	lsl.w	ip, ip, r3
 80020a2:	6811      	ldr	r1, [r2, #0]
 80020a4:	ea41 010c 	orr.w	r1, r1, ip
 80020a8:	6011      	str	r1, [r2, #0]
      if ( b ) cb = !cb;
 80020aa:	bf18      	it	ne
 80020ac:	f08e 0e01 	eorne.w	lr, lr, #1
    for ( i=0; i<32; i++ ) 
 80020b0:	3301      	adds	r3, #1
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d1e8      	bne.n	8002088 <readReg+0x1d0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80020b6:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <readReg+0x218>)
 80020b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020bc:	6193      	str	r3, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80020be:	6913      	ldr	r3, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020c0:	2140      	movs	r1, #64	@ 0x40
 80020c2:	6191      	str	r1, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80020c4:	f3c3 2300 	ubfx	r3, r3, #8, #1
      ret = SWD_ERROR_PARITY;
 80020c8:	459e      	cmp	lr, r3
 80020ca:	bf18      	it	ne
 80020cc:	2005      	movne	r0, #5
 80020ce:	e791      	b.n	8001ff4 <readReg+0x13c>
 80020d0:	40020400 	.word	0x40020400

080020d4 <writeReg>:
 * 
 * @param data
 *   The value to write to the register
 **********************************************************/
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
{
 80020d4:	b4f0      	push	{r4, r5, r6, r7}
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)0;
  
  /* Calulate address bits */
  int A2 = reg & 0x1;
 80020d6:	f001 0601 	and.w	r6, r1, #1
  int A3 = (reg >> 1) & 0x1;
 80020da:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calculate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 80020de:	1985      	adds	r5, r0, r6
 80020e0:	440d      	add	r5, r1
 80020e2:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020e6:	4c93      	ldr	r4, [pc, #588]	@ (8002334 <writeReg+0x260>)
 80020e8:	2710      	movs	r7, #16
 80020ea:	61a7      	str	r7, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80020ec:	6827      	ldr	r7, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80020f2:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80020f6:	fab4 f484 	clz	r4, r4
 80020fa:	0064      	lsls	r4, r4, #1
 80020fc:	f04f 0c03 	mov.w	ip, #3
 8002100:	fa0c f404 	lsl.w	r4, ip, r4
 8002104:	ea27 0c04 	bic.w	ip, r7, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800210c:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8002110:	fab4 f484 	clz	r4, r4
 8002114:	0064      	lsls	r4, r4, #1
 8002116:	2701      	movs	r7, #1
 8002118:	40a7      	lsls	r7, r4
 800211a:	ea47 070c 	orr.w	r7, r7, ip
 800211e:	4c85      	ldr	r4, [pc, #532]	@ (8002334 <writeReg+0x260>)
 8002120:	6027      	str	r7, [r4, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002122:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
 8002126:	61a7      	str	r7, [r4, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002128:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 800212c:	f8c4 c018 	str.w	ip, [r4, #24]
 8002130:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8002134:	f8c4 c018 	str.w	ip, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002138:	61a7      	str	r7, [r4, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Write request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 800213a:	2800      	cmp	r0, #0
 800213c:	f000 8092 	beq.w	8002264 <writeReg+0x190>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002140:	4620      	mov	r0, r4
 8002142:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8002146:	6184      	str	r4, [r0, #24]
 8002148:	487a      	ldr	r0, [pc, #488]	@ (8002334 <writeReg+0x260>)
 800214a:	2740      	movs	r7, #64	@ 0x40
 800214c:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800214e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8002152:	6184      	str	r4, [r0, #24]
 8002154:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 8002158:	f8c0 c018 	str.w	ip, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800215c:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800215e:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8002160:	2e00      	cmp	r6, #0
 8002162:	f000 8084 	beq.w	800226e <writeReg+0x19a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002166:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800216a:	6184      	str	r4, [r0, #24]
 800216c:	4871      	ldr	r0, [pc, #452]	@ (8002334 <writeReg+0x260>)
 800216e:	2440      	movs	r4, #64	@ 0x40
 8002170:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002172:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8002176:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 8002178:	2900      	cmp	r1, #0
 800217a:	d07d      	beq.n	8002278 <writeReg+0x1a4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800217c:	4601      	mov	r1, r0
 800217e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002182:	6188      	str	r0, [r1, #24]
 8002184:	496b      	ldr	r1, [pc, #428]	@ (8002334 <writeReg+0x260>)
 8002186:	2040      	movs	r0, #64	@ 0x40
 8002188:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800218a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800218e:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 8002190:	2d00      	cmp	r5, #0
 8002192:	d076      	beq.n	8002282 <writeReg+0x1ae>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002194:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002198:	6188      	str	r0, [r1, #24]
 800219a:	4966      	ldr	r1, [pc, #408]	@ (8002334 <writeReg+0x260>)
 800219c:	2440      	movs	r4, #64	@ 0x40
 800219e:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021a0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80021a4:	6188      	str	r0, [r1, #24]
 80021a6:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80021aa:	618d      	str	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021ac:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021ae:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021b4:	6188      	str	r0, [r1, #24]
 80021b6:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021b8:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 80021bc:	618c      	str	r4, [r1, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80021be:	680c      	ldr	r4, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	fa90 f1a0 	rbit	r1, r0
  return __builtin_clz(value);
 80021c4:	fab1 f181 	clz	r1, r1
 80021c8:	0049      	lsls	r1, r1, #1
 80021ca:	2003      	movs	r0, #3
 80021cc:	fa00 f101 	lsl.w	r1, r0, r1
 80021d0:	ea24 0401 	bic.w	r4, r4, r1
 80021d4:	4957      	ldr	r1, [pc, #348]	@ (8002334 <writeReg+0x260>)
 80021d6:	600c      	str	r4, [r1, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021d8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80021dc:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021de:	2040      	movs	r0, #64	@ 0x40
 80021e0:	6188      	str	r0, [r1, #24]

  /* Turnaround */
  SWCLK_CYCLE();
  
  /* Read acknowledge */
  for ( i=0; i<3; i++ ) {
 80021e2:	2400      	movs	r4, #0
  uint32_t ack = 0;
 80021e4:	4620      	mov	r0, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021e6:	460d      	mov	r5, r1
 80021e8:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021ec:	2640      	movs	r6, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021ee:	61af      	str	r7, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021f0:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021f2:	61ae      	str	r6, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021f4:	f3c1 2100 	ubfx	r1, r1, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 80021f8:	40a1      	lsls	r1, r4
 80021fa:	4308      	orrs	r0, r1
  for ( i=0; i<3; i++ ) {
 80021fc:	3401      	adds	r4, #1
 80021fe:	2c03      	cmp	r4, #3
 8002200:	d1f5      	bne.n	80021ee <writeReg+0x11a>
  }
  
  if ( ack == ACK_OK || ignoreAck ) 
 8002202:	2801      	cmp	r0, #1
 8002204:	d002      	beq.n	800220c <writeReg+0x138>
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808d 	beq.w	8002326 <writeReg+0x252>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800220c:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <writeReg+0x260>)
 800220e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002212:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002214:	2140      	movs	r1, #64	@ 0x40
 8002216:	6199      	str	r1, [r3, #24]
 8002218:	2110      	movs	r1, #16
 800221a:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800221c:	6818      	ldr	r0, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002222:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2103      	movs	r1, #3
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	ea20 0003 	bic.w	r0, r0, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	4303      	orrs	r3, r0
 800224c:	4939      	ldr	r1, [pc, #228]	@ (8002334 <writeReg+0x260>)
 800224e:	600b      	str	r3, [r1, #0]
    SWCLK_CYCLE();
  
    SWDIO_SET_OUTPUT();
    
    /* Write data */
    parity = 0;
 8002250:	2400      	movs	r4, #0
    for ( i=0; i<32; i++ ) {
 8002252:	4623      	mov	r3, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002254:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002258:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800225c:	2640      	movs	r6, #64	@ 0x40
 800225e:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8002262:	e019      	b.n	8002298 <writeReg+0x1c4>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002264:	4833      	ldr	r0, [pc, #204]	@ (8002334 <writeReg+0x260>)
 8002266:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 800226a:	6184      	str	r4, [r0, #24]
}
 800226c:	e76c      	b.n	8002148 <writeReg+0x74>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800226e:	4831      	ldr	r0, [pc, #196]	@ (8002334 <writeReg+0x260>)
 8002270:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002274:	6184      	str	r4, [r0, #24]
}
 8002276:	e779      	b.n	800216c <writeReg+0x98>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002278:	492e      	ldr	r1, [pc, #184]	@ (8002334 <writeReg+0x260>)
 800227a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800227e:	6188      	str	r0, [r1, #24]
}
 8002280:	e780      	b.n	8002184 <writeReg+0xb0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002282:	492c      	ldr	r1, [pc, #176]	@ (8002334 <writeReg+0x260>)
 8002284:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8002288:	6188      	str	r0, [r1, #24]
}
 800228a:	e786      	b.n	800219a <writeReg+0xc6>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800228c:	f8c1 c018 	str.w	ip, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002290:	618e      	str	r6, [r1, #24]
 8002292:	3301      	adds	r3, #1
 8002294:	2b20      	cmp	r3, #32
 8002296:	d00a      	beq.n	80022ae <writeReg+0x1da>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002298:	618d      	str	r5, [r1, #24]
      b = (data >> i) & 0x1;
 800229a:	fa22 f003 	lsr.w	r0, r2, r3
      SWD_WRITE_BIT(b);
 800229e:	f010 0f01 	tst.w	r0, #1
 80022a2:	d0f3      	beq.n	800228c <writeReg+0x1b8>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022a4:	618f      	str	r7, [r1, #24]
 80022a6:	618e      	str	r6, [r1, #24]
      if (b) parity = !parity;
 80022a8:	f084 0401 	eor.w	r4, r4, #1
 80022ac:	e7f1      	b.n	8002292 <writeReg+0x1be>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <writeReg+0x260>)
 80022b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022b4:	619a      	str	r2, [r3, #24]
    }
    
    /* Write parity bit */
    SWD_WRITE_BIT(parity);
 80022b6:	b38c      	cbz	r4, 800231c <writeReg+0x248>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <writeReg+0x260>)
 80022c0:	2240      	movs	r2, #64	@ 0x40
 80022c2:	619a      	str	r2, [r3, #24]
  uint32_t ret = SWD_ERROR_OK;
 80022c4:	2001      	movs	r0, #1
 80022c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <writeReg+0x260>)
 80022c8:	2210      	movs	r2, #16
 80022ca:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022cc:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ea:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2201      	movs	r2, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	430b      	orrs	r3, r1
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <writeReg+0x260>)
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <writeReg+0x260>)
 8002304:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002308:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800230c:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800230e:	619d      	str	r5, [r3, #24]
 8002310:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002312:	6199      	str	r1, [r3, #24]
    
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 8002314:	3a01      	subs	r2, #1
 8002316:	d1fa      	bne.n	800230e <writeReg+0x23a>
	  SWD_WRITE_BIT(0);
  }

  return ret;
  
}
 8002318:	bcf0      	pop	{r4, r5, r6, r7}
 800231a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <writeReg+0x260>)
 800231e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	e7cb      	b.n	80022be <writeReg+0x1ea>
  else if ( ack == ACK_WAIT ) 
 8002326:	2802      	cmp	r0, #2
 8002328:	d0cd      	beq.n	80022c6 <writeReg+0x1f2>
    ret = SWD_ERROR_FAULT;
 800232a:	2804      	cmp	r0, #4
 800232c:	bf14      	ite	ne
 800232e:	2004      	movne	r0, #4
 8002330:	2003      	moveq	r0, #3
 8002332:	e7c8      	b.n	80022c6 <writeReg+0x1f2>
 8002334:	40020400 	.word	0x40020400

08002338 <JTAG_to_SWD_Sequence>:
 * Sends the JTAG-to-SWD sequence. This must be performed
 * at the very beginning of every debug session and
 * again in case of a protocol error. 
 **********************************************************/
void JTAG_to_SWD_Sequence(void)
{
 8002338:	b470      	push	{r4, r5, r6}
  WRITE_REG(GPIOx->BSRR, PinMask);
 800233a:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 800233c:	2210      	movs	r2, #16
 800233e:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002340:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002346:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	430b      	orrs	r3, r1
 8002370:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 8002372:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002378:	6193      	str	r3, [r2, #24]
 800237a:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800237c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002380:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002382:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002384:	6191      	str	r1, [r2, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* First reset line with > 50 cycles with SWDIO high */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 8002386:	3b01      	subs	r3, #1
 8002388:	d1fb      	bne.n	8002382 <JTAG_to_SWD_Sequence+0x4a>
    SWCLK_CYCLE();
  }
  
  /* Transmit 16-bit JTAG-to-SWD sequence */
  for ( i=0; i<16; i++ ) {
 800238a:	2300      	movs	r3, #0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800238c:	4a1a      	ldr	r2, [pc, #104]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 800238e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
    b = (JTAG2SWD >> i) & 0x1;
 8002392:	f24e 7c9e 	movw	ip, #59294	@ 0xe79e
 8002396:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800239a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800239e:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023a0:	6194      	str	r4, [r2, #24]
 80023a2:	fa4c f103 	asr.w	r1, ip, r3
    SWD_WRITE_BIT(b);
 80023a6:	f011 0f01 	tst.w	r1, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023aa:	bf14      	ite	ne
 80023ac:	6195      	strne	r5, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ae:	6196      	streq	r6, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023b0:	6190      	str	r0, [r2, #24]
  for ( i=0; i<16; i++ ) {
 80023b2:	3301      	adds	r3, #1
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d1f3      	bne.n	80023a0 <JTAG_to_SWD_Sequence+0x68>
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023c2:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023c8:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ca:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023cc:	6191      	str	r1, [r2, #24]
  }
  
  /* Do another reset to make sure SW-DP is in reset state */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 80023ce:	3b01      	subs	r3, #1
 80023d0:	d1fb      	bne.n	80023ca <JTAG_to_SWD_Sequence+0x92>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	2310      	movs	r3, #16
 80023dc:	f102 527c 	add.w	r2, r2, #1056964608	@ 0x3f000000
 80023e0:	f502 3201 	add.w	r2, r2, #132096	@ 0x20400
 80023e4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023e8:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ea:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023ec:	6191      	str	r1, [r2, #24]
    SWCLK_CYCLE();
  }
  
  /* Insert a 16 cycle idle period */
  SWDIO_OUT(0);
  for ( i=0; i<16; i++ ) {
 80023ee:	3b01      	subs	r3, #1
 80023f0:	d1fb      	bne.n	80023ea <JTAG_to_SWD_Sequence+0xb2>
    SWCLK_CYCLE();
  }
}
 80023f2:	bc70      	pop	{r4, r5, r6}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40020400 	.word	0x40020400

080023fc <writeAP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeAP(int reg, uint32_t data)
{
 80023fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002400:	4606      	mov	r6, r0
 8002402:	460d      	mov	r5, r1
 8002404:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;

  do {
    swdStatus = writeReg(true, reg, data, false);
 8002406:	f04f 0800 	mov.w	r8, #0
 800240a:	2701      	movs	r7, #1
 800240c:	4643      	mov	r3, r8
 800240e:	462a      	mov	r2, r5
 8002410:	4631      	mov	r1, r6
 8002412:	4638      	mov	r0, r7
 8002414:	f7ff fe5e 	bl	80020d4 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 8002418:	2802      	cmp	r0, #2
 800241a:	d10a      	bne.n	8002432 <writeAP+0x36>
 800241c:	3c01      	subs	r4, #1
 800241e:	d1f5      	bne.n	800240c <writeAP+0x10>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <writeAP+0x40>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4601      	mov	r1, r0
 8002426:	20a0      	movs	r0, #160	@ 0xa0
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <writeAP+0x44>)
 800242a:	fb00 3002 	mla	r0, r0, r2, r3
 800242e:	f7fd fee7 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002432:	2801      	cmp	r0, #1
 8002434:	d1f4      	bne.n	8002420 <writeAP+0x24>
  }
}
 8002436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000
 8002440:	200002f0 	.word	0x200002f0

08002444 <writeDP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeDP(int reg, uint32_t data)
{
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	4607      	mov	r7, r0
 8002448:	460e      	mov	r6, r1
 800244a:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = writeReg(false, reg, data, false);
 800244c:	2500      	movs	r5, #0
 800244e:	462b      	mov	r3, r5
 8002450:	4632      	mov	r2, r6
 8002452:	4639      	mov	r1, r7
 8002454:	4628      	mov	r0, r5
 8002456:	f7ff fe3d 	bl	80020d4 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800245a:	2802      	cmp	r0, #2
 800245c:	d10a      	bne.n	8002474 <writeDP+0x30>
 800245e:	3c01      	subs	r4, #1
 8002460:	d1f5      	bne.n	800244e <writeDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <writeDP+0x38>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4601      	mov	r1, r0
 8002468:	20a0      	movs	r0, #160	@ 0xa0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <writeDP+0x3c>)
 800246c:	fb00 3002 	mla	r0, r0, r2, r3
 8002470:	f7fd fec6 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002474:	2801      	cmp	r0, #1
 8002476:	d1f4      	bne.n	8002462 <writeDP+0x1e>
  }
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000
 8002480:	200002f0 	.word	0x200002f0

08002484 <readAP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readAP(int reg, uint32_t *data)
{
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	4606      	mov	r6, r0
 8002488:	460d      	mov	r5, r1
 800248a:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(true, reg, data);
 800248c:	2701      	movs	r7, #1
 800248e:	462a      	mov	r2, r5
 8002490:	4631      	mov	r1, r6
 8002492:	4638      	mov	r0, r7
 8002494:	f7ff fd10 	bl	8001eb8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002498:	2802      	cmp	r0, #2
 800249a:	d10a      	bne.n	80024b2 <readAP+0x2e>
 800249c:	3c01      	subs	r4, #1
 800249e:	d1f6      	bne.n	800248e <readAP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <readAP+0x34>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4601      	mov	r1, r0
 80024a6:	20a0      	movs	r0, #160	@ 0xa0
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <readAP+0x38>)
 80024aa:	fb00 3002 	mla	r0, r0, r2, r3
 80024ae:	f7fd fea7 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 80024b2:	2801      	cmp	r0, #1
 80024b4:	d1f4      	bne.n	80024a0 <readAP+0x1c>
  }
}
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	200002f0 	.word	0x200002f0

080024c0 <readDP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readDP(int reg, uint32_t *data)
{
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	4606      	mov	r6, r0
 80024c4:	460d      	mov	r5, r1
 80024c6:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(false, reg, data);
 80024c8:	2700      	movs	r7, #0
 80024ca:	462a      	mov	r2, r5
 80024cc:	4631      	mov	r1, r6
 80024ce:	4638      	mov	r0, r7
 80024d0:	f7ff fcf2 	bl	8001eb8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80024d4:	2802      	cmp	r0, #2
 80024d6:	d10a      	bne.n	80024ee <readDP+0x2e>
 80024d8:	3c01      	subs	r4, #1
 80024da:	d1f6      	bne.n	80024ca <readDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) {
    RAISE(swdStatus);
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <readDP+0x34>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4601      	mov	r1, r0
 80024e2:	20a0      	movs	r0, #160	@ 0xa0
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <readDP+0x38>)
 80024e6:	fb00 3002 	mla	r0, r0, r2, r3
 80024ea:	f7fd fe89 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) {
 80024ee:	2801      	cmp	r0, #1
 80024f0:	d1f4      	bne.n	80024dc <readDP+0x1c>
  }
}
 80024f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	200002f0 	.word	0x200002f0

080024fc <initDp>:
 * @returns
 *    The value of the IDCODE register
 **********************************************************/
uint32_t test = 0;
uint32_t initDp(void)
{
 80024fc:	b530      	push	{r4, r5, lr}
 80024fe:	b083      	sub	sp, #12
  uint32_t dpId = 0;
 8002500:	2400      	movs	r4, #0
 8002502:	9401      	str	r4, [sp, #4]
  /* If connecting to a Multidrop capable SW-DP (SWD version 2), this 
   * function must be run first. */
  //exitDormantState();
  
  /* Send the JTAG-to-SWD switching sequence */
  JTAG_to_SWD_Sequence();
 8002504:	f7ff ff18 	bl	8002338 <JTAG_to_SWD_Sequence>
  
  /* Read IDCODE to get the DAP out of reset state */
  readDP(DP_IDCODE, &dpId);
 8002508:	a901      	add	r1, sp, #4
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ffd8 	bl	80024c0 <readDP>

  /* Debug power up request */
  //khchoi: Sticky error clear & CTRL/STAT Register Clear.(Black Magic Probe)
  writeDP(DP_ABORT, (1 << 2));
 8002510:	2104      	movs	r1, #4
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff96 	bl	8002444 <writeDP>
  //writeDP(DP_ABORT, (1 << 3)); //wderrclr
  readDP(DP_CTRL, &test);
 8002518:	4d18      	ldr	r5, [pc, #96]	@ (800257c <initDp+0x80>)
 800251a:	4629      	mov	r1, r5
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff ffcf 	bl	80024c0 <readDP>
  writeDP(DP_CTRL, 0);
 8002522:	4621      	mov	r1, r4
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff ff8d 	bl	8002444 <writeDP>
  readDP(DP_CTRL, &test);
 800252a:	4629      	mov	r1, r5
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff ffc7 	bl	80024c0 <readDP>
  writeDP(DP_CTRL, DP_CTRL_CSYSPWRUPREQ | DP_CTRL_CDBGPWRUPREQ);
 8002532:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8002536:	2001      	movs	r0, #1
 8002538:	f7ff ff84 	bl	8002444 <writeDP>
 800253c:	f44f 7496 	mov.w	r4, #300	@ 0x12c
  /* Wait until we receive powerup ACK */
  int retry = PWRUP_TIMEOUT + 200;
  uint32_t status;
  while ( retry > 0 )
  {
    readDP(DP_CTRL, &status);
 8002540:	2501      	movs	r5, #1
 8002542:	4669      	mov	r1, sp
 8002544:	4628      	mov	r0, r5
 8002546:	f7ff ffbb 	bl	80024c0 <readDP>
    if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
 800254a:	9b00      	ldr	r3, [sp, #0]
 800254c:	f003 4320 	and.w	r3, r3, #2684354560	@ 0xa0000000
 8002550:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8002554:	d00a      	beq.n	800256c <initDp+0x70>
  while ( retry > 0 )
 8002556:	3c01      	subs	r4, #1
 8002558:	d1f3      	bne.n	8002542 <initDp+0x46>
  
  /* Throw error if we failed to power up the debug interface */
  if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
              != (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK) )
  {
    RAISE(SWD_ERROR_DEBUG_POWER);
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <initDp+0x84>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2115      	movs	r1, #21
 8002560:	20a0      	movs	r0, #160	@ 0xa0
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <initDp+0x88>)
 8002564:	fb00 3002 	mla	r0, r0, r2, r3
 8002568:	f7fd fe4a 	bl	8000200 <longjmp>
  }

  /* Select first AP bank */
  writeDP(DP_SELECT, 0x00);
 800256c:	2100      	movs	r1, #0
 800256e:	2002      	movs	r0, #2
 8002570:	f7ff ff68 	bl	8002444 <writeDP>

  return dpId;
 8002574:	9801      	ldr	r0, [sp, #4]
}
 8002576:	b003      	add	sp, #12
 8002578:	bd30      	pop	{r4, r5, pc}
 800257a:	bf00      	nop
 800257c:	200002ec 	.word	0x200002ec
 8002580:	20000000 	.word	0x20000000
 8002584:	200002f0 	.word	0x200002f0

08002588 <readApId>:
 * 
 * @returns
 *    The value of IDR register (address 0xFC) for AP #0
 **********************************************************/
uint32_t readApId(void)
{
 8002588:	b500      	push	{lr}
 800258a:	b083      	sub	sp, #12
  uint32_t apId;
  
  /* Select last AP bank */
  writeDP(DP_SELECT, 0xf0);
 800258c:	21f0      	movs	r1, #240	@ 0xf0
 800258e:	2002      	movs	r0, #2
 8002590:	f7ff ff58 	bl	8002444 <writeDP>
  
  /* Dummy read AP ID */
  readAP(AP_IDR, &apId);
 8002594:	a901      	add	r1, sp, #4
 8002596:	2003      	movs	r0, #3
 8002598:	f7ff ff74 	bl	8002484 <readAP>
  
  /* Read AP ID */
  readDP(DP_RDBUFF, &apId);
 800259c:	a901      	add	r1, sp, #4
 800259e:	2003      	movs	r0, #3
 80025a0:	f7ff ff8e 	bl	80024c0 <readDP>
  
  /* Select first AP bank again */
  writeDP(DP_SELECT, 0x00);
 80025a4:	2100      	movs	r1, #0
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7ff ff4c 	bl	8002444 <writeDP>
  
  return apId;
}
 80025ac:	9801      	ldr	r0, [sp, #4]
 80025ae:	b003      	add	sp, #12
 80025b0:	f85d fb04 	ldr.w	pc, [sp], #4

080025b4 <initAhbAp>:
 * Initalize the AHB-AP. The transfer size must be set
 * to 32-bit before trying to access any internal
 * memory. 
 **********************************************************/
void initAhbAp(void)
{    
 80025b4:	b508      	push	{r3, lr}
  /* Set transfer size to 32 bit */  
  writeAP(AP_CSW, AP_CSW_DEFAULT);  
 80025b6:	4902      	ldr	r1, [pc, #8]	@ (80025c0 <initAhbAp+0xc>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff ff1f 	bl	80023fc <writeAP>
}
 80025be:	bd08      	pop	{r3, pc}
 80025c0:	22000002 	.word	0x22000002

080025c4 <delayMs>:

/**********************************************************
 * Delay a number of milliseconds
 **********************************************************/
void delayMs(int ms)
{
 80025c4:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 80025c6:	f002 ff8d 	bl	80054e4 <HAL_Delay>
}
 80025ca:	bd08      	pop	{r3, pc}

080025cc <delayUs>:
/**********************************************************
 * Delay a number of microseconds
 **********************************************************/
void delayUs(int us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <delayUs+0x14>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2300      	movs	r3, #0
 80025d2:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < (us-1));  // wait for the counter to reach the us input in the parameter
 80025d4:	3801      	subs	r0, #1
 80025d6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80025d8:	4283      	cmp	r3, r0
 80025da:	d3fc      	bcc.n	80025d6 <delayUs+0xa>
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20004324 	.word	0x20004324

080025e4 <getErrorString>:
jmp_buf swdErrors[EXCEPTION_MAX_LEVEL];
int swdErrorIndex = -1;

char *getErrorString(int errorCode)
{
  switch (errorCode)
 80025e4:	3801      	subs	r0, #1
 80025e6:	2814      	cmp	r0, #20
 80025e8:	d834      	bhi.n	8002654 <getErrorString+0x70>
 80025ea:	e8df f000 	tbb	[pc, r0]
 80025ee:	350b      	.short	0x350b
 80025f0:	13110f0d 	.word	0x13110f0d
 80025f4:	19173115 	.word	0x19173115
 80025f8:	211f1d1b 	.word	0x211f1d1b
 80025fc:	29272523 	.word	0x29272523
 8002600:	2d2b      	.short	0x2d2b
 8002602:	2f          	.byte	0x2f
 8002603:	00          	.byte	0x00
  {
  case SWD_ERROR_OK:
    return "No error.";
 8002604:	4815      	ldr	r0, [pc, #84]	@ (800265c <getErrorString+0x78>)
 8002606:	4770      	bx	lr
  case SWD_ERROR_WAIT:
    return "Timed out while waiting for WAIT response.";
  case SWD_ERROR_FAULT:
    return "Target returned FAULT response.";
 8002608:	4815      	ldr	r0, [pc, #84]	@ (8002660 <getErrorString+0x7c>)
 800260a:	4770      	bx	lr
  case SWD_ERROR_PROTOCOL:
    return "Protocol error. Target does not respond.";
 800260c:	4815      	ldr	r0, [pc, #84]	@ (8002664 <getErrorString+0x80>)
 800260e:	4770      	bx	lr
  case SWD_ERROR_PARITY:
    return "Parity error.";
 8002610:	4815      	ldr	r0, [pc, #84]	@ (8002668 <getErrorString+0x84>)
 8002612:	4770      	bx	lr
  case SWD_ERROR_MCU_LOCKED:
    return "MCU locked.";
 8002614:	4815      	ldr	r0, [pc, #84]	@ (800266c <getErrorString+0x88>)
 8002616:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDR:
    return "Invalid IDR value.";
 8002618:	4815      	ldr	r0, [pc, #84]	@ (8002670 <getErrorString+0x8c>)
 800261a:	4770      	bx	lr
  case SWD_ERROR_FLASH_WRITE_FAILED:
    return "Write to flash failed.";
 800261c:	4815      	ldr	r0, [pc, #84]	@ (8002674 <getErrorString+0x90>)
 800261e:	4770      	bx	lr
  case SWD_ERROR_UNLOCK_FAILED:
    return "Failed to unlock target.";
 8002620:	4815      	ldr	r0, [pc, #84]	@ (8002678 <getErrorString+0x94>)
 8002622:	4770      	bx	lr
  case SWD_ERROR_AAP_EXTENSION_FAILED:
    return "Unable to access AAP registers. Is the reset pin connected?";
 8002624:	4815      	ldr	r0, [pc, #84]	@ (800267c <getErrorString+0x98>)
 8002626:	4770      	bx	lr
  case SWD_ERROR_LOCK_FAILED:
    return "Failed to lock target.";
 8002628:	4815      	ldr	r0, [pc, #84]	@ (8002680 <getErrorString+0x9c>)
 800262a:	4770      	bx	lr
  case SWD_ERROR_CLR_DLW_FAILED:
    return "Failed to clear Debug Lock Word.";
 800262c:	4815      	ldr	r0, [pc, #84]	@ (8002684 <getErrorString+0xa0>)
 800262e:	4770      	bx	lr
  case SWD_ERROR_MASS_ERASE_TIMEOUT:
    return "Timed out while waiting for Mass Erase to complete.";
 8002630:	4815      	ldr	r0, [pc, #84]	@ (8002688 <getErrorString+0xa4>)
 8002632:	4770      	bx	lr
  case SWD_ERROR_VERIFY_FW_FAILED:
    return "Application verification failed.";
 8002634:	4815      	ldr	r0, [pc, #84]	@ (800268c <getErrorString+0xa8>)
 8002636:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_WAITING_RESET:
    return "Timeout while waiting for target to reset.";
 8002638:	4815      	ldr	r0, [pc, #84]	@ (8002690 <getErrorString+0xac>)
 800263a:	4770      	bx	lr
  case SWD_ERROR_TARGET_NOT_HALTED:
    return "Target is halted.";
 800263c:	4815      	ldr	r0, [pc, #84]	@ (8002694 <getErrorString+0xb0>)
 800263e:	4770      	bx	lr
  case SWD_ERROR_FLASHLOADER_ERROR:
    return "Error in flashloader.";
 8002640:	4815      	ldr	r0, [pc, #84]	@ (8002698 <getErrorString+0xb4>)
 8002642:	4770      	bx	lr
  case SWD_ERROR_DEVICE_ERASE_FAILED:
    return "Device Erase failed."; 
 8002644:	4815      	ldr	r0, [pc, #84]	@ (800269c <getErrorString+0xb8>)
 8002646:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_HALT:
    return "Timeout while waiting to halt target.";
 8002648:	4815      	ldr	r0, [pc, #84]	@ (80026a0 <getErrorString+0xbc>)
 800264a:	4770      	bx	lr
  case SWD_ERROR_DEBUG_POWER:
    return "Failed to power up debug interface.";
 800264c:	4815      	ldr	r0, [pc, #84]	@ (80026a4 <getErrorString+0xc0>)
 800264e:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDCODE:
    return "Invalid IDCODE.";
 8002650:	4815      	ldr	r0, [pc, #84]	@ (80026a8 <getErrorString+0xc4>)
 8002652:	4770      	bx	lr
  default:
    return "Unknown error.";
 8002654:	4815      	ldr	r0, [pc, #84]	@ (80026ac <getErrorString+0xc8>)
 8002656:	4770      	bx	lr
  switch (errorCode)
 8002658:	4815      	ldr	r0, [pc, #84]	@ (80026b0 <getErrorString+0xcc>)
  }
 800265a:	4770      	bx	lr
 800265c:	080112e8 	.word	0x080112e8
 8002660:	08011320 	.word	0x08011320
 8002664:	08011340 	.word	0x08011340
 8002668:	0801136c 	.word	0x0801136c
 800266c:	0801137c 	.word	0x0801137c
 8002670:	08011388 	.word	0x08011388
 8002674:	0801139c 	.word	0x0801139c
 8002678:	080113b4 	.word	0x080113b4
 800267c:	080113d0 	.word	0x080113d0
 8002680:	0801140c 	.word	0x0801140c
 8002684:	08011424 	.word	0x08011424
 8002688:	08011448 	.word	0x08011448
 800268c:	0801147c 	.word	0x0801147c
 8002690:	080114a0 	.word	0x080114a0
 8002694:	080114cc 	.word	0x080114cc
 8002698:	080114e0 	.word	0x080114e0
 800269c:	080114f8 	.word	0x080114f8
 80026a0:	08011510 	.word	0x08011510
 80026a4:	08011538 	.word	0x08011538
 80026a8:	0801155c 	.word	0x0801155c
 80026ac:	0801156c 	.word	0x0801156c
 80026b0:	080112f4 	.word	0x080112f4

080026b4 <haltTarget>:
/**********************************************************
 * Halts the target CPU
 **********************************************************/

void haltTarget(void)
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b083      	sub	sp, #12
  int timeout = DEBUG_EVENT_TIMEOUT;
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026b8:	4914      	ldr	r1, [pc, #80]	@ (800270c <haltTarget+0x58>)
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff fe9e 	bl	80023fc <writeAP>
  writeAP(AP_DRW, STOP_CMD);
 80026c0:	4913      	ldr	r1, [pc, #76]	@ (8002710 <haltTarget+0x5c>)
 80026c2:	2003      	movs	r0, #3
 80026c4:	f7ff fe9a 	bl	80023fc <writeAP>
 80026c8:	24c8      	movs	r4, #200	@ 0xc8

  uint32_t dhcrState;
  do {
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026ca:	4f10      	ldr	r7, [pc, #64]	@ (800270c <haltTarget+0x58>)
 80026cc:	2601      	movs	r6, #1
    readAP(AP_DRW, &dhcrState);
 80026ce:	2503      	movs	r5, #3
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026d0:	4639      	mov	r1, r7
 80026d2:	4630      	mov	r0, r6
 80026d4:	f7ff fe92 	bl	80023fc <writeAP>
    readAP(AP_DRW, &dhcrState);
 80026d8:	a901      	add	r1, sp, #4
 80026da:	4628      	mov	r0, r5
 80026dc:	f7ff fed2 	bl	8002484 <readAP>
    readDP(DP_RDBUFF, &dhcrState);
 80026e0:	a901      	add	r1, sp, #4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7ff feec 	bl	80024c0 <readDP>
    timeout--;
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 );
 80026e8:	9b01      	ldr	r3, [sp, #4]
 80026ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026ee:	d10a      	bne.n	8002706 <haltTarget+0x52>
 80026f0:	3c01      	subs	r4, #1
 80026f2:	d1ed      	bne.n	80026d0 <haltTarget+0x1c>

  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
    RAISE(SWD_ERROR_TIMEOUT_HALT);
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <haltTarget+0x60>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2114      	movs	r1, #20
 80026fa:	20a0      	movs	r0, #160	@ 0xa0
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <haltTarget+0x64>)
 80026fe:	fb00 3002 	mla	r0, r0, r2, r3
 8002702:	f7fd fd7d 	bl	8000200 <longjmp>
  }
}
 8002706:	b003      	add	sp, #12
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270a:	bf00      	nop
 800270c:	e000edf0 	.word	0xe000edf0
 8002710:	a05f0003 	.word	0xa05f0003
 8002714:	20000000 	.word	0x20000000
 8002718:	200002f0 	.word	0x200002f0

0800271c <hardResetTarget>:

/**********************************************************
 * Performs a pin reset on the target
 **********************************************************/
void hardResetTarget(void)
{
 800271c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_RESET);
 800271e:	4c08      	ldr	r4, [pc, #32]	@ (8002740 <hardResetTarget+0x24>)
 8002720:	2200      	movs	r2, #0
 8002722:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002726:	4620      	mov	r0, r4
 8002728:	f003 fb34 	bl	8005d94 <HAL_GPIO_WritePin>
    delayMs(50);
 800272c:	2032      	movs	r0, #50	@ 0x32
 800272e:	f7ff ff49 	bl	80025c4 <delayMs>
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002738:	4620      	mov	r0, r4
 800273a:	f003 fb2b 	bl	8005d94 <HAL_GPIO_WritePin>
}
 800273e:	bd10      	pop	{r4, pc}
 8002740:	40020000 	.word	0x40020000

08002744 <readMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
uint32_t readMem(uint32_t addr)
{
 8002744:	b500      	push	{lr}
 8002746:	b083      	sub	sp, #12
 8002748:	4601      	mov	r1, r0
  uint32_t ret;
  writeAP(AP_TAR, addr);
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff fe56 	bl	80023fc <writeAP>
  readAP(AP_DRW, &ret);
 8002750:	a901      	add	r1, sp, #4
 8002752:	2003      	movs	r0, #3
 8002754:	f7ff fe96 	bl	8002484 <readAP>
  readDP(DP_RDBUFF, &ret);
 8002758:	a901      	add	r1, sp, #4
 800275a:	2003      	movs	r0, #3
 800275c:	f7ff feb0 	bl	80024c0 <readDP>
  return ret;
}
 8002760:	9801      	ldr	r0, [sp, #4]
 8002762:	b003      	add	sp, #12
 8002764:	f85d fb04 	ldr.w	pc, [sp], #4

08002768 <writeMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
void writeMem(uint32_t addr, uint32_t data)
{
 8002768:	b510      	push	{r4, lr}
 800276a:	460c      	mov	r4, r1
  writeAP(AP_TAR, addr);
 800276c:	4601      	mov	r1, r0
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fe44 	bl	80023fc <writeAP>
  writeAP(AP_DRW, data);
 8002774:	4621      	mov	r1, r4
 8002776:	2003      	movs	r0, #3
 8002778:	f7ff fe40 	bl	80023fc <writeAP>
}
 800277c:	bd10      	pop	{r4, pc}
	...

08002780 <resetTarget>:
{  
 8002780:	b570      	push	{r4, r5, r6, lr}
  writeMem((uint32_t)&(CoreDebug->DEMCR), 0);
 8002782:	2100      	movs	r1, #0
 8002784:	481f      	ldr	r0, [pc, #124]	@ (8002804 <resetTarget+0x84>)
 8002786:	f7ff ffef 	bl	8002768 <writeMem>
  readMem((uint32_t)&(CoreDebug->DHCSR));
 800278a:	4c1f      	ldr	r4, [pc, #124]	@ (8002808 <resetTarget+0x88>)
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ffd9 	bl	8002744 <readMem>
  dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ffd6 	bl	8002744 <readMem>
  writeMem((uint32_t)&(SCB->AIRCR), AIRCR_RESET_CMD);
 8002798:	491c      	ldr	r1, [pc, #112]	@ (800280c <resetTarget+0x8c>)
 800279a:	481d      	ldr	r0, [pc, #116]	@ (8002810 <resetTarget+0x90>)
 800279c:	f7ff ffe4 	bl	8002768 <writeMem>
  delayUs(100);
 80027a0:	2064      	movs	r0, #100	@ 0x64
 80027a2:	f7ff ff13 	bl	80025cc <delayUs>
 80027a6:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 80027a8:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027aa:	4d17      	ldr	r5, [pc, #92]	@ (8002808 <resetTarget+0x88>)
    delayUs(10);
 80027ac:	4630      	mov	r0, r6
 80027ae:	f7ff ff0d 	bl	80025cc <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7ff ffc6 	bl	8002744 <readMem>
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 80027b8:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80027bc:	d10a      	bne.n	80027d4 <resetTarget+0x54>
 80027be:	3c01      	subs	r4, #1
 80027c0:	d1f4      	bne.n	80027ac <resetTarget+0x2c>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <resetTarget+0x94>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2110      	movs	r1, #16
 80027c8:	20a0      	movs	r0, #160	@ 0xa0
 80027ca:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <resetTarget+0x98>)
 80027cc:	fb00 3002 	mla	r0, r0, r2, r3
 80027d0:	f7fd fd16 	bl	8000200 <longjmp>
 80027d4:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 80027d6:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027d8:	4d0b      	ldr	r5, [pc, #44]	@ (8002808 <resetTarget+0x88>)
    delayUs(10);
 80027da:	4630      	mov	r0, r6
 80027dc:	f7ff fef6 	bl	80025cc <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7ff ffaf 	bl	8002744 <readMem>
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 80027e6:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80027ea:	d00a      	beq.n	8002802 <resetTarget+0x82>
 80027ec:	3c01      	subs	r4, #1
 80027ee:	d1f4      	bne.n	80027da <resetTarget+0x5a>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <resetTarget+0x94>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2110      	movs	r1, #16
 80027f6:	20a0      	movs	r0, #160	@ 0xa0
 80027f8:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <resetTarget+0x98>)
 80027fa:	fb00 3002 	mla	r0, r0, r2, r3
 80027fe:	f7fd fcff 	bl	8000200 <longjmp>
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	e000edfc 	.word	0xe000edfc
 8002808:	e000edf0 	.word	0xe000edf0
 800280c:	05fa0004 	.word	0x05fa0004
 8002810:	e000ed0c 	.word	0xe000ed0c
 8002814:	20000000 	.word	0x20000000
 8002818:	200002f0 	.word	0x200002f0

0800281c <verifyDpId>:
 * Returns true if the @param dpId is a valid
 * IDCODE value. 
 **********************************************************/
bool verifyDpId(uint32_t dpId)
{
    if (dpId == STM32_SWDP_ID_1 ||
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <verifyDpId+0x30>)
 800281e:	4298      	cmp	r0, r3
 8002820:	d010      	beq.n	8002844 <verifyDpId+0x28>
 8002822:	f103 43bf 	add.w	r3, r3, #1602224128	@ 0x5f800000
 8002826:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	4298      	cmp	r0, r3
 8002830:	d00a      	beq.n	8002848 <verifyDpId+0x2c>
        dpId == STM32_SWDP_ID_2 ||
 8002832:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8002836:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800283a:	4298      	cmp	r0, r3
 800283c:	bf14      	ite	ne
 800283e:	2000      	movne	r0, #0
 8002840:	2001      	moveq	r0, #1
 8002842:	4770      	bx	lr
    	dpId == STM32_SWDP_ID_3)

    {
        return true;
 8002844:	2001      	movs	r0, #1
 8002846:	4770      	bx	lr
 8002848:	2001      	movs	r0, #1
    }
    return false;
}
 800284a:	4770      	bx	lr
 800284c:	0bc11477 	.word	0x0bc11477

08002850 <verifyAhbApId>:
 * Returns true if the @param apId is a valid
 * IDR value for the AHB-AP. 
 **********************************************************/
bool verifyAhbApId(uint32_t apId)
{
    if (apId == STM32C0_AHBAP_ID ||
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <verifyAhbApId+0x28>)
 8002852:	4298      	cmp	r0, r3
 8002854:	d00c      	beq.n	8002870 <verifyAhbApId+0x20>
        apId == STM32H7_AHBAP_ID ||
 8002856:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800285a:	3b30      	subs	r3, #48	@ 0x30
 800285c:	4298      	cmp	r0, r3
 800285e:	d009      	beq.n	8002874 <verifyAhbApId+0x24>
		apId == STM32U0_AHBAP_ID ||
        apId == STM32G0_AHBAP_ID ||
 8002860:	f103 4320 	add.w	r3, r3, #2684354560	@ 0xa0000000
 8002864:	3310      	adds	r3, #16
 8002866:	4298      	cmp	r0, r3
 8002868:	bf14      	ite	ne
 800286a:	2000      	movne	r0, #0
 800286c:	2001      	moveq	r0, #1
 800286e:	4770      	bx	lr
    	apId == STM32G4_AHBAP_ID)
    {
        return true;
 8002870:	2001      	movs	r0, #1
 8002872:	4770      	bx	lr
 8002874:	2001      	movs	r0, #1
    }
    return false;
}
 8002876:	4770      	bx	lr
 8002878:	04770031 	.word	0x04770031

0800287c <connectToTarget>:
 * Performs the initialization sequence on the SW-DP. 
 * After this completes the debug interface can be used. 
 * Raises an exception on any error during connection. 
 **********************************************************/
void connectToTarget(Target_InfoTypeDef *target)
{
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4605      	mov	r5, r0
  delayUs(500);
 8002880:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002884:	f7ff fea2 	bl	80025cc <delayUs>
  target->TargetDpId = initDp();
 8002888:	f7ff fe38 	bl	80024fc <initDp>
 800288c:	4604      	mov	r4, r0
 800288e:	6028      	str	r0, [r5, #0]
  /* Verify that the DP returns the correct ID */
  if ( !verifyDpId(target->TargetDpId) )
 8002890:	f7ff ffc4 	bl	800281c <verifyDpId>
 8002894:	b168      	cbz	r0, 80028b2 <connectToTarget+0x36>
 8002896:	2414      	movs	r4, #20
  
  /* Verify that the AP returns the correct ID */
  int retry = AHB_IDR_RETRY_COUNT;
  while ( retry > 0 )
  {
    target->TargetApId = readApId();
 8002898:	f7ff fe76 	bl	8002588 <readApId>
 800289c:	6068      	str	r0, [r5, #4]
    if ( verifyAhbApId(target->TargetApId) )
 800289e:	f7ff ffd7 	bl	8002850 <verifyAhbApId>
 80028a2:	b908      	cbnz	r0, 80028a8 <connectToTarget+0x2c>
  while ( retry > 0 )
 80028a4:	3c01      	subs	r4, #1
 80028a6:	d1f7      	bne.n	8002898 <connectToTarget+0x1c>
    retry--;
  }
    
  /* Set up parameters for AHB-AP. This must be done before accessing
   * internal memory. */
  initAhbAp();
 80028a8:	f7ff fe84 	bl	80025b4 <initAhbAp>
  haltTarget();
 80028ac:	f7ff ff02 	bl	80026b4 <haltTarget>
}
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
    printf("Read IDCODE = 0x%08"PRIX32"\n", target->TargetDpId);
 80028b2:	4621      	mov	r1, r4
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <connectToTarget+0x50>)
 80028b6:	f00c fad7 	bl	800ee68 <iprintf>
    RAISE(SWD_ERROR_INVALID_IDCODE);
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <connectToTarget+0x54>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2108      	movs	r1, #8
 80028c0:	20a0      	movs	r0, #160	@ 0xa0
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <connectToTarget+0x58>)
 80028c4:	fb00 3002 	mla	r0, r0, r2, r3
 80028c8:	f7fd fc9a 	bl	8000200 <longjmp>
 80028cc:	0801157c 	.word	0x0801157c
 80028d0:	20000000 	.word	0x20000000
 80028d4:	200002f0 	.word	0x200002f0

080028d8 <Target_ProgramCallback_STM32H7>:
	return true;
}

// Callback function to program the Stm32h7 flash memory
static bool Target_ProgramCallback_STM32H7(uint32_t address, const uint8_t *data, uint8_t data_size)
{
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4615      	mov	r5, r2
    if (data_size % 2 != 0 || data_size > 32) {
        //return false;
    }

    // combined_offset이 0일 때 현재 주소를 업데이트
    if (combined_offset == 0) {
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <Target_ProgramCallback_STM32H7+0xd4>)
 80028de:	781c      	ldrb	r4, [r3, #0]
 80028e0:	b90c      	cbnz	r4, 80028e6 <Target_ProgramCallback_STM32H7+0xe>
        current_address = address;
 80028e2:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <Target_ProgramCallback_STM32H7+0xd8>)
 80028e4:	6018      	str	r0, [r3, #0]
    }

    // 데이터를 combined_data에 복사
    memcpy(combined_data + combined_offset, data, data_size);
 80028e6:	462a      	mov	r2, r5
 80028e8:	4832      	ldr	r0, [pc, #200]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 80028ea:	4420      	add	r0, r4
 80028ec:	f00c fd17 	bl	800f31e <memcpy>
    combined_offset += data_size;
 80028f0:	442c      	add	r4, r5
 80028f2:	b2e4      	uxtb	r4, r4
 80028f4:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <Target_ProgramCallback_STM32H7+0xd4>)
 80028f6:	701c      	strb	r4, [r3, #0]

    // 프로그래밍할 워드 크기 결정 (TargetDevId에 따라)
    uint8_t words_to_program = (target.TargetDevId == 0x480) ? 4 : 8;
 80028f8:	4b2f      	ldr	r3, [pc, #188]	@ (80029b8 <Target_ProgramCallback_STM32H7+0xe0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8002900:	bf14      	ite	ne
 8002902:	2208      	movne	r2, #8
 8002904:	2204      	moveq	r2, #4
    uint8_t bytes_to_program = words_to_program * 4;
 8002906:	0096      	lsls	r6, r2, #2

    // 충분한 데이터가 쌓였을 때 플래시 프로그래밍 수행
    if (combined_offset >= bytes_to_program) {
 8002908:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 800290c:	d210      	bcs.n	8002930 <Target_ProgramCallback_STM32H7+0x58>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
        }
    }

    // 마지막 호출이며 combined_offset이 0이 아닐 때, 남은 데이터를 패딩하여 프로그래밍
    if (data_size == 0 && combined_offset > 0) {
 800290e:	bb65      	cbnz	r5, 800296a <Target_ProgramCallback_STM32H7+0x92>
 8002910:	b36c      	cbz	r4, 800296e <Target_ProgramCallback_STM32H7+0x96>
        // 0xFF로 패딩하여 워드 크기를 맞춤
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8002912:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <Target_ProgramCallback_STM32H7+0xe0>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800291a:	d02c      	beq.n	8002976 <Target_ProgramCallback_STM32H7+0x9e>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 800291c:	f1c4 0220 	rsb	r2, r4, #32
 8002920:	21ff      	movs	r1, #255	@ 0xff
 8002922:	4824      	ldr	r0, [pc, #144]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 8002924:	4420      	add	r0, r4
 8002926:	f00c fc7b 	bl	800f220 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 800292a:	2420      	movs	r4, #32
        combined_offset = padding_size;

        // 플래시 메모리 프로그래밍
        words_to_program = (combined_offset == 32) ? 8 : 4;
 800292c:	2208      	movs	r2, #8
 800292e:	e02b      	b.n	8002988 <Target_ProgramCallback_STM32H7+0xb0>
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 8002930:	4920      	ldr	r1, [pc, #128]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 8002932:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <Target_ProgramCallback_STM32H7+0xd8>)
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	f001 fb87 	bl	8004048 <Stm32h7_Flash_Program>
 800293a:	b9a0      	cbnz	r0, 8002966 <Target_ProgramCallback_STM32H7+0x8e>
        current_address += bytes_to_program;
 800293c:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <Target_ProgramCallback_STM32H7+0xd8>)
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	4433      	add	r3, r6
 8002942:	6013      	str	r3, [r2, #0]
        combined_offset -= bytes_to_program;
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <Target_ProgramCallback_STM32H7+0xd4>)
 8002946:	781c      	ldrb	r4, [r3, #0]
 8002948:	1ba4      	subs	r4, r4, r6
 800294a:	b2e4      	uxtb	r4, r4
 800294c:	701c      	strb	r4, [r3, #0]
        if (combined_offset > 0) {
 800294e:	b90c      	cbnz	r4, 8002954 <Target_ProgramCallback_STM32H7+0x7c>
        current_address += padding_size;

        // combined_offset 초기화
        combined_offset = 0;
    }
    return true;
 8002950:	2001      	movs	r0, #1
 8002952:	e00b      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
            memmove(combined_data, combined_data + bytes_to_program, combined_offset);
 8002954:	4817      	ldr	r0, [pc, #92]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 8002956:	4622      	mov	r2, r4
 8002958:	1981      	adds	r1, r0, r6
 800295a:	f00c fc47 	bl	800f1ec <memmove>
    if (data_size == 0 && combined_offset > 0) {
 800295e:	2d00      	cmp	r5, #0
 8002960:	d0d7      	beq.n	8002912 <Target_ProgramCallback_STM32H7+0x3a>
    return true;
 8002962:	2001      	movs	r0, #1
 8002964:	e002      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8002966:	2000      	movs	r0, #0
 8002968:	e000      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
    return true;
 800296a:	2001      	movs	r0, #1
}
 800296c:	bd70      	pop	{r4, r5, r6, pc}
    return true;
 800296e:	2001      	movs	r0, #1
 8002970:	e7fc      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
            return false;
 8002972:	2000      	movs	r0, #0
 8002974:	e7fa      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
        memset(combined_data + combined_offset, 0xFF, padding_size - combined_offset);
 8002976:	f1c4 0210 	rsb	r2, r4, #16
 800297a:	21ff      	movs	r1, #255	@ 0xff
 800297c:	480d      	ldr	r0, [pc, #52]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 800297e:	4420      	add	r0, r4
 8002980:	f00c fc4e 	bl	800f220 <memset>
        uint8_t padding_size = (target.TargetDevId == 0x480) ? 16 : 32;
 8002984:	2410      	movs	r4, #16
        words_to_program = (combined_offset == 32) ? 8 : 4;
 8002986:	2204      	movs	r2, #4
        combined_offset = padding_size;
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <Target_ProgramCallback_STM32H7+0xd4>)
 800298a:	701c      	strb	r4, [r3, #0]
        if (Stm32h7_Flash_Program(current_address, (uint32_t)combined_data, words_to_program) != TARGET_OK) {
 800298c:	4909      	ldr	r1, [pc, #36]	@ (80029b4 <Target_ProgramCallback_STM32H7+0xdc>)
 800298e:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <Target_ProgramCallback_STM32H7+0xd8>)
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f001 fb59 	bl	8004048 <Stm32h7_Flash_Program>
 8002996:	2800      	cmp	r0, #0
 8002998:	d1eb      	bne.n	8002972 <Target_ProgramCallback_STM32H7+0x9a>
        current_address += padding_size;
 800299a:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <Target_ProgramCallback_STM32H7+0xd8>)
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	4423      	add	r3, r4
 80029a0:	6013      	str	r3, [r2, #0]
        combined_offset = 0;
 80029a2:	4b02      	ldr	r3, [pc, #8]	@ (80029ac <Target_ProgramCallback_STM32H7+0xd4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    return true;
 80029a8:	2001      	movs	r0, #1
 80029aa:	e7df      	b.n	800296c <Target_ProgramCallback_STM32H7+0x94>
 80029ac:	20004194 	.word	0x20004194
 80029b0:	20004190 	.word	0x20004190
 80029b4:	20004170 	.word	0x20004170
 80029b8:	20004198 	.word	0x20004198

080029bc <Target_ProgramCallback_STM32C0>:
	for (uint32_t i = 0; i < bufsize; i += 8)
 80029bc:	b36a      	cbz	r2, 8002a1a <Target_ProgramCallback_STM32C0+0x5e>
{
 80029be:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	4607      	mov	r7, r0
 80029c6:	4690      	mov	r8, r2
 80029c8:	460d      	mov	r5, r1
	for (uint32_t i = 0; i < bufsize; i += 8)
 80029ca:	4616      	mov	r6, r2
 80029cc:	2400      	movs	r4, #0
		tmp = 0xFFFFFFFFFFFFFFFF;
 80029ce:	f04f 3aff 	mov.w	sl, #4294967295
 80029d2:	f04f 3bff 	mov.w	fp, #4294967295
 80029d6:	e00e      	b.n	80029f6 <Target_ProgramCallback_STM32C0+0x3a>
			tmp = ((uint64_t*)(&buf[i]))[0];
 80029d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80029dc:	e9cd 2300 	strd	r2, r3, [sp]
		status = Stm32c0_Flash_Program(addr + i, tmp);
 80029e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029e4:	1938      	adds	r0, r7, r4
 80029e6:	f001 f947 	bl	8003c78 <Stm32c0_Flash_Program>
		if (status != TARGET_OK)
 80029ea:	b970      	cbnz	r0, 8002a0a <Target_ProgramCallback_STM32C0+0x4e>
	for (uint32_t i = 0; i < bufsize; i += 8)
 80029ec:	3408      	adds	r4, #8
 80029ee:	3e08      	subs	r6, #8
 80029f0:	3508      	adds	r5, #8
 80029f2:	4544      	cmp	r4, r8
 80029f4:	d20f      	bcs.n	8002a16 <Target_ProgramCallback_STM32C0+0x5a>
		tmp = 0xFFFFFFFFFFFFFFFF;
 80029f6:	e9cd ab00 	strd	sl, fp, [sp]
		if (bufsize - i >= 8)
 80029fa:	2e07      	cmp	r6, #7
 80029fc:	d8ec      	bhi.n	80029d8 <Target_ProgramCallback_STM32C0+0x1c>
			memcpy(&tmp, &buf[i], bufsize - i);
 80029fe:	4632      	mov	r2, r6
 8002a00:	4629      	mov	r1, r5
 8002a02:	4668      	mov	r0, sp
 8002a04:	f00c fc8b 	bl	800f31e <memcpy>
 8002a08:	e7ea      	b.n	80029e0 <Target_ProgramCallback_STM32C0+0x24>
			Stm32c0_Flash_Lock();
 8002a0a:	f001 f8cb 	bl	8003ba4 <Stm32c0_Flash_Lock>
			return false;
 8002a0e:	2000      	movs	r0, #0
}
 8002a10:	b002      	add	sp, #8
 8002a12:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	return true;
 8002a16:	2001      	movs	r0, #1
 8002a18:	e7fa      	b.n	8002a10 <Target_ProgramCallback_STM32C0+0x54>
 8002a1a:	2001      	movs	r0, #1
}
 8002a1c:	4770      	bx	lr

08002a1e <Target_ProgramCallback_STM32U0>:
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002a1e:	b36a      	cbz	r2, 8002a7c <Target_ProgramCallback_STM32U0+0x5e>
{
 8002a20:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	4607      	mov	r7, r0
 8002a28:	4690      	mov	r8, r2
 8002a2a:	460d      	mov	r5, r1
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002a2c:	4616      	mov	r6, r2
 8002a2e:	2400      	movs	r4, #0
		tmp = 0xFFFFFFFFFFFFFFFF;
 8002a30:	f04f 3aff 	mov.w	sl, #4294967295
 8002a34:	f04f 3bff 	mov.w	fp, #4294967295
 8002a38:	e00e      	b.n	8002a58 <Target_ProgramCallback_STM32U0+0x3a>
			tmp = ((uint64_t*)(&buf[i]))[0];
 8002a3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a3e:	e9cd 2300 	strd	r2, r3, [sp]
		status = Stm32u0_Flash_Program(addr + i, tmp);
 8002a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a46:	1938      	adds	r0, r7, r4
 8002a48:	f001 fc68 	bl	800431c <Stm32u0_Flash_Program>
		if (status != TARGET_OK)
 8002a4c:	b970      	cbnz	r0, 8002a6c <Target_ProgramCallback_STM32U0+0x4e>
	for (uint32_t i = 0; i < bufsize; i += 8)
 8002a4e:	3408      	adds	r4, #8
 8002a50:	3e08      	subs	r6, #8
 8002a52:	3508      	adds	r5, #8
 8002a54:	4544      	cmp	r4, r8
 8002a56:	d20f      	bcs.n	8002a78 <Target_ProgramCallback_STM32U0+0x5a>
		tmp = 0xFFFFFFFFFFFFFFFF;
 8002a58:	e9cd ab00 	strd	sl, fp, [sp]
		if (bufsize - i >= 8)
 8002a5c:	2e07      	cmp	r6, #7
 8002a5e:	d8ec      	bhi.n	8002a3a <Target_ProgramCallback_STM32U0+0x1c>
			memcpy(&tmp, &buf[i], bufsize - i);
 8002a60:	4632      	mov	r2, r6
 8002a62:	4629      	mov	r1, r5
 8002a64:	4668      	mov	r0, sp
 8002a66:	f00c fc5a 	bl	800f31e <memcpy>
 8002a6a:	e7ea      	b.n	8002a42 <Target_ProgramCallback_STM32U0+0x24>
			Stm32u0_Flash_Lock();
 8002a6c:	f001 fbec 	bl	8004248 <Stm32u0_Flash_Lock>
			return false;
 8002a70:	2000      	movs	r0, #0
}
 8002a72:	b002      	add	sp, #8
 8002a74:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	return true;
 8002a78:	2001      	movs	r0, #1
 8002a7a:	e7fa      	b.n	8002a72 <Target_ProgramCallback_STM32U0+0x54>
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	4770      	bx	lr

08002a80 <__io_putchar>:
{
 8002a80:	b500      	push	{lr}
 8002a82:	b083      	sub	sp, #12
 8002a84:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	a901      	add	r1, sp, #4
 8002a8e:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <__io_putchar+0x1c>)
 8002a90:	f006 fa63 	bl	8008f5a <HAL_UART_Transmit>
}
 8002a94:	9801      	ldr	r0, [sp, #4]
 8002a96:	b003      	add	sp, #12
 8002a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a9c:	200042dc 	.word	0x200042dc

08002aa0 <log_message>:
{
 8002aa0:	b40f      	push	{r0, r1, r2, r3}
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	b0d6      	sub	sp, #344	@ 0x158
 8002aa6:	ab58      	add	r3, sp, #352	@ 0x160
 8002aa8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002aac:	9315      	str	r3, [sp, #84]	@ 0x54
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ab2:	a816      	add	r0, sp, #88	@ 0x58
 8002ab4:	f00c faf8 	bl	800f0a8 <vsniprintf>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ab8:	4c1b      	ldr	r4, [pc, #108]	@ (8002b28 <log_message+0x88>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	a910      	add	r1, sp, #64	@ 0x40
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f004 fccb 	bl	800745a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	a90f      	add	r1, sp, #60	@ 0x3c
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f004 fcec 	bl	80074a6 <HAL_RTC_GetDate>
    uint32_t SecondFraction = hrtc.Init.SynchPrediv;
 8002ace:	68e1      	ldr	r1, [r4, #12]
             2000 + sDate.Year, sDate.Month, sDate.Date,
 8002ad0:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002ad4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002ad6:	1a8a      	subs	r2, r1, r2
 8002ad8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002adc:	fb00 f202 	mul.w	r2, r0, r2
 8002ae0:	3101      	adds	r1, #1
 8002ae2:	fbb2 f2f1 	udiv	r2, r2, r1
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 8002ae6:	9205      	str	r2, [sp, #20]
 8002ae8:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 8002aec:	9204      	str	r2, [sp, #16]
 8002aee:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 8002af2:	9203      	str	r2, [sp, #12]
 8002af4:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 8002af8:	9202      	str	r2, [sp, #8]
 8002afa:	f89d 203e 	ldrb.w	r2, [sp, #62]	@ 0x3e
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 8002b04:	9200      	str	r2, [sp, #0]
 8002b06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002b0a:	4a08      	ldr	r2, [pc, #32]	@ (8002b2c <log_message+0x8c>)
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	a807      	add	r0, sp, #28
 8002b10:	f00c fa22 	bl	800ef58 <sniprintf>
    printf("[%s] %s", time_str, buffer);
 8002b14:	aa16      	add	r2, sp, #88	@ 0x58
 8002b16:	a907      	add	r1, sp, #28
 8002b18:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <log_message+0x90>)
 8002b1a:	f00c f9a5 	bl	800ee68 <iprintf>
}
 8002b1e:	b056      	add	sp, #344	@ 0x158
 8002b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b24:	b004      	add	sp, #16
 8002b26:	4770      	bx	lr
 8002b28:	20004550 	.word	0x20004550
 8002b2c:	08011594 	.word	0x08011594
 8002b30:	080115b8 	.word	0x080115b8

08002b34 <Target_Connect>:
{
 8002b34:	b510      	push	{r4, lr}
  log_message("Target Connect\n");
 8002b36:	4884      	ldr	r0, [pc, #528]	@ (8002d48 <Target_Connect+0x214>)
 8002b38:	f7ff ffb2 	bl	8002aa0 <log_message>
  hardResetTarget();
 8002b3c:	f7ff fdee 	bl	800271c <hardResetTarget>
  delayMs(50);
 8002b40:	2032      	movs	r0, #50	@ 0x32
 8002b42:	f7ff fd3f 	bl	80025c4 <delayMs>
		TRY
 8002b46:	4b81      	ldr	r3, [pc, #516]	@ (8002d4c <Target_Connect+0x218>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	6018      	str	r0, [r3, #0]
 8002b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b52:	4b7f      	ldr	r3, [pc, #508]	@ (8002d50 <Target_Connect+0x21c>)
 8002b54:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8002b58:	f7fd fb4a 	bl	80001f0 <setjmp>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f040 81c3 	bne.w	8002ee8 <Target_Connect+0x3b4>
			connectToTarget(&target);
 8002b62:	4c7c      	ldr	r4, [pc, #496]	@ (8002d54 <Target_Connect+0x220>)
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7ff fe89 	bl	800287c <connectToTarget>
    swdpId = target->TargetDpId;
 8002b6a:	6821      	ldr	r1, [r4, #0]
    if (swdpId == STM32_SWDP_ID_3) // STM32G4
 8002b6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d58 <Target_Connect+0x224>)
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	d062      	beq.n	8002c38 <Target_Connect+0x104>
    else if (swdpId == STM32_SWDP_ID_2) // STM32H7
 8002b72:	4b7a      	ldr	r3, [pc, #488]	@ (8002d5c <Target_Connect+0x228>)
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d065      	beq.n	8002c44 <Target_Connect+0x110>
    else if (swdpId == STM32_SWDP_ID_1) // STM32C0, STM32G0, STM32U0
 8002b78:	4b79      	ldr	r3, [pc, #484]	@ (8002d60 <Target_Connect+0x22c>)
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	d168      	bne.n	8002c50 <Target_Connect+0x11c>
        deviceId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002b7e:	4879      	ldr	r0, [pc, #484]	@ (8002d64 <Target_Connect+0x230>)
 8002b80:	f7ff fde0 	bl	8002744 <readMem>
 8002b84:	f3c0 000b 	ubfx	r0, r0, #0, #12
	switch (deviceId)
 8002b88:	f2a0 4043 	subw	r0, r0, #1091	@ 0x443
 8002b8c:	2850      	cmp	r0, #80	@ 0x50
 8002b8e:	f200 81a3 	bhi.w	8002ed8 <Target_Connect+0x3a4>
 8002b92:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002b96:	0068      	.short	0x0068
 8002b98:	01a101a1 	.word	0x01a101a1
 8002b9c:	01a101a1 	.word	0x01a101a1
 8002ba0:	01a101a1 	.word	0x01a101a1
 8002ba4:	01a101a1 	.word	0x01a101a1
 8002ba8:	00680068 	.word	0x00680068
 8002bac:	01a101a1 	.word	0x01a101a1
 8002bb0:	01a1012a 	.word	0x01a1012a
 8002bb4:	006801a1 	.word	0x006801a1
 8002bb8:	01a101a1 	.word	0x01a101a1
 8002bbc:	01a100a8 	.word	0x01a100a8
 8002bc0:	010901a1 	.word	0x010901a1
 8002bc4:	01a101a1 	.word	0x01a101a1
 8002bc8:	01a101a1 	.word	0x01a101a1
 8002bcc:	01a101a1 	.word	0x01a101a1
 8002bd0:	01a100a8 	.word	0x01a100a8
 8002bd4:	01a101a1 	.word	0x01a101a1
 8002bd8:	01a101a1 	.word	0x01a101a1
 8002bdc:	00a800a8 	.word	0x00a800a8
 8002be0:	01790179 	.word	0x01790179
 8002be4:	01a101a1 	.word	0x01a101a1
 8002be8:	01a101a1 	.word	0x01a101a1
 8002bec:	01a101a1 	.word	0x01a101a1
 8002bf0:	01a101a1 	.word	0x01a101a1
 8002bf4:	01a101a1 	.word	0x01a101a1
 8002bf8:	01a101a1 	.word	0x01a101a1
 8002bfc:	01a101a1 	.word	0x01a101a1
 8002c00:	017901a1 	.word	0x017901a1
 8002c04:	01a101a1 	.word	0x01a101a1
 8002c08:	01a101a1 	.word	0x01a101a1
 8002c0c:	01a101a1 	.word	0x01a101a1
 8002c10:	01a1012a 	.word	0x01a1012a
 8002c14:	012a01a1 	.word	0x012a01a1
 8002c18:	012a01a1 	.word	0x012a01a1
 8002c1c:	01a101a1 	.word	0x01a101a1
 8002c20:	010901a1 	.word	0x010901a1
 8002c24:	01a101a1 	.word	0x01a101a1
 8002c28:	01a101a1 	.word	0x01a101a1
 8002c2c:	01a101a1 	.word	0x01a101a1
 8002c30:	01a101a1 	.word	0x01a101a1
 8002c34:	006801a1 	.word	0x006801a1
        deviceId = readMem(STM32_REG_DEVICE_ID_3) & 0xFFF;
 8002c38:	484b      	ldr	r0, [pc, #300]	@ (8002d68 <Target_Connect+0x234>)
 8002c3a:	f7ff fd83 	bl	8002744 <readMem>
 8002c3e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002c42:	e7a1      	b.n	8002b88 <Target_Connect+0x54>
        deviceId = readMem(STM32_REG_DEVICE_ID_2) & 0xFFF;
 8002c44:	4849      	ldr	r0, [pc, #292]	@ (8002d6c <Target_Connect+0x238>)
 8002c46:	f7ff fd7d 	bl	8002744 <readMem>
 8002c4a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002c4e:	e79b      	b.n	8002b88 <Target_Connect+0x54>
        log_message("Unknown SW-DP ID: 0x%08X\n", swdpId);
 8002c50:	4847      	ldr	r0, [pc, #284]	@ (8002d70 <Target_Connect+0x23c>)
 8002c52:	f7ff ff25 	bl	8002aa0 <log_message>
        target->TargetFamily = 0; // Unknown family
 8002c56:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <Target_Connect+0x220>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	721a      	strb	r2, [r3, #8]
        target->TargetDevId = 0;
 8002c5c:	60da      	str	r2, [r3, #12]
			swdErrorIndex = 0;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <Target_Connect+0x218>)
 8002c62:	6018      	str	r0, [r3, #0]
    	return TARGET_OK; // Disable return function in TRY/CATCH.
 8002c64:	e14d      	b.n	8002f02 <Target_Connect+0x3ce>
    target->TargetFamily = TARGET_STM32C0;
 8002c66:	4c3b      	ldr	r4, [pc, #236]	@ (8002d54 <Target_Connect+0x220>)
 8002c68:	2305      	movs	r3, #5
 8002c6a:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002c6c:	483d      	ldr	r0, [pc, #244]	@ (8002d64 <Target_Connect+0x230>)
 8002c6e:	f7ff fd69 	bl	8002744 <readMem>
 8002c72:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002c76:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32C0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002c78:	483e      	ldr	r0, [pc, #248]	@ (8002d74 <Target_Connect+0x240>)
 8002c7a:	f7ff ff11 	bl	8002aa0 <log_message>
    switch(target->TargetDevId)
 8002c7e:	68e1      	ldr	r1, [r4, #12]
 8002c80:	f240 4353 	movw	r3, #1107	@ 0x453
 8002c84:	4299      	cmp	r1, r3
 8002c86:	d812      	bhi.n	8002cae <Target_Connect+0x17a>
 8002c88:	f240 4342 	movw	r3, #1090	@ 0x442
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	d926      	bls.n	8002cde <Target_Connect+0x1aa>
 8002c90:	f2a1 4343 	subw	r3, r1, #1091	@ 0x443
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d822      	bhi.n	8002cde <Target_Connect+0x1aa>
 8002c98:	e8df f003 	tbb	[pc, r3]
 8002c9c:	21212111 	.word	0x21212111
 8002ca0:	21212121 	.word	0x21212121
 8002ca4:	211d1921 	.word	0x211d1921
 8002ca8:	21212121 	.word	0x21212121
 8002cac:	15          	.byte	0x15
 8002cad:	00          	.byte	0x00
 8002cae:	f240 4393 	movw	r3, #1171	@ 0x493
 8002cb2:	4299      	cmp	r1, r3
 8002cb4:	d113      	bne.n	8002cde <Target_Connect+0x1aa>
            log_message("STM32C071xx\n");
 8002cb6:	4830      	ldr	r0, [pc, #192]	@ (8002d78 <Target_Connect+0x244>)
 8002cb8:	f7ff fef2 	bl	8002aa0 <log_message>
            break;
 8002cbc:	e7cf      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32C011xx\n");
 8002cbe:	482f      	ldr	r0, [pc, #188]	@ (8002d7c <Target_Connect+0x248>)
 8002cc0:	f7ff feee 	bl	8002aa0 <log_message>
            break;
 8002cc4:	e7cb      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32C031xx\n");
 8002cc6:	482e      	ldr	r0, [pc, #184]	@ (8002d80 <Target_Connect+0x24c>)
 8002cc8:	f7ff feea 	bl	8002aa0 <log_message>
            break;
 8002ccc:	e7c7      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32C051xx\n");
 8002cce:	482d      	ldr	r0, [pc, #180]	@ (8002d84 <Target_Connect+0x250>)
 8002cd0:	f7ff fee6 	bl	8002aa0 <log_message>
            break;
 8002cd4:	e7c3      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32C091xx/92xx\n");
 8002cd6:	482c      	ldr	r0, [pc, #176]	@ (8002d88 <Target_Connect+0x254>)
 8002cd8:	f7ff fee2 	bl	8002aa0 <log_message>
            break;
 8002cdc:	e7bf      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("Unknown STM32C0 Device ID: 0x%03X\n", target->TargetDevId);
 8002cde:	482b      	ldr	r0, [pc, #172]	@ (8002d8c <Target_Connect+0x258>)
 8002ce0:	f7ff fede 	bl	8002aa0 <log_message>
            break;
 8002ce4:	e7bb      	b.n	8002c5e <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32G0;
 8002ce6:	4c1b      	ldr	r4, [pc, #108]	@ (8002d54 <Target_Connect+0x220>)
 8002ce8:	2307      	movs	r3, #7
 8002cea:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002cec:	481d      	ldr	r0, [pc, #116]	@ (8002d64 <Target_Connect+0x230>)
 8002cee:	f7ff fd29 	bl	8002744 <readMem>
 8002cf2:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002cf6:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32G0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002cf8:	4825      	ldr	r0, [pc, #148]	@ (8002d90 <Target_Connect+0x25c>)
 8002cfa:	f7ff fed1 	bl	8002aa0 <log_message>
    switch(target->TargetDevId)
 8002cfe:	68e1      	ldr	r1, [r4, #12]
 8002d00:	f2a1 4356 	subw	r3, r1, #1110	@ 0x456
 8002d04:	2b11      	cmp	r3, #17
 8002d06:	d81a      	bhi.n	8002d3e <Target_Connect+0x20a>
 8002d08:	e8df f003 	tbb	[pc, r3]
 8002d0c:	19191911 	.word	0x19191911
 8002d10:	19191919 	.word	0x19191919
 8002d14:	190d1919 	.word	0x190d1919
 8002d18:	19191919 	.word	0x19191919
 8002d1c:	0915      	.short	0x0915
            log_message("STM32G0B0xx, STM32G0B1xx and STM32G0C1xx\n");
 8002d1e:	481d      	ldr	r0, [pc, #116]	@ (8002d94 <Target_Connect+0x260>)
 8002d20:	f7ff febe 	bl	8002aa0 <log_message>
            break;
 8002d24:	e79b      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32G070xx, STM32G071xx and STM32G081xx\n");
 8002d26:	481c      	ldr	r0, [pc, #112]	@ (8002d98 <Target_Connect+0x264>)
 8002d28:	f7ff feba 	bl	8002aa0 <log_message>
            break;
 8002d2c:	e797      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32G050xx, STM32G051xx and STM32G061xx\n");
 8002d2e:	481b      	ldr	r0, [pc, #108]	@ (8002d9c <Target_Connect+0x268>)
 8002d30:	f7ff feb6 	bl	8002aa0 <log_message>
            break;
 8002d34:	e793      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32G030xx, STM32G031xx and STM32G041xx\n");
 8002d36:	481a      	ldr	r0, [pc, #104]	@ (8002da0 <Target_Connect+0x26c>)
 8002d38:	f7ff feb2 	bl	8002aa0 <log_message>
            break;
 8002d3c:	e78f      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("Unknown STM32G0 Device ID: 0x%03X\n", target->TargetDevId);
 8002d3e:	4819      	ldr	r0, [pc, #100]	@ (8002da4 <Target_Connect+0x270>)
 8002d40:	f7ff feae 	bl	8002aa0 <log_message>
            break;
 8002d44:	e78b      	b.n	8002c5e <Target_Connect+0x12a>
 8002d46:	bf00      	nop
 8002d48:	080115d0 	.word	0x080115d0
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	200002f0 	.word	0x200002f0
 8002d54:	20004198 	.word	0x20004198
 8002d58:	2ba01477 	.word	0x2ba01477
 8002d5c:	6ba02477 	.word	0x6ba02477
 8002d60:	0bc11477 	.word	0x0bc11477
 8002d64:	40015800 	.word	0x40015800
 8002d68:	e0042000 	.word	0xe0042000
 8002d6c:	5c001000 	.word	0x5c001000
 8002d70:	080115e0 	.word	0x080115e0
 8002d74:	080115fc 	.word	0x080115fc
 8002d78:	0801165c 	.word	0x0801165c
 8002d7c:	0801162c 	.word	0x0801162c
 8002d80:	0801163c 	.word	0x0801163c
 8002d84:	0801164c 	.word	0x0801164c
 8002d88:	0801166c 	.word	0x0801166c
 8002d8c:	08011680 	.word	0x08011680
 8002d90:	080116a4 	.word	0x080116a4
 8002d94:	080116d4 	.word	0x080116d4
 8002d98:	08011700 	.word	0x08011700
 8002d9c:	0801172c 	.word	0x0801172c
 8002da0:	08011758 	.word	0x08011758
 8002da4:	08011784 	.word	0x08011784
    target->TargetFamily = TARGET_STM32U0;
 8002da8:	4c56      	ldr	r4, [pc, #344]	@ (8002f04 <Target_Connect+0x3d0>)
 8002daa:	2301      	movs	r3, #1
 8002dac:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002dae:	4856      	ldr	r0, [pc, #344]	@ (8002f08 <Target_Connect+0x3d4>)
 8002db0:	f7ff fcc8 	bl	8002744 <readMem>
 8002db4:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002db8:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32U0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002dba:	4854      	ldr	r0, [pc, #336]	@ (8002f0c <Target_Connect+0x3d8>)
 8002dbc:	f7ff fe70 	bl	8002aa0 <log_message>
    switch(target->TargetDevId)
 8002dc0:	68e1      	ldr	r1, [r4, #12]
 8002dc2:	f240 4359 	movw	r3, #1113	@ 0x459
 8002dc6:	4299      	cmp	r1, r3
 8002dc8:	d007      	beq.n	8002dda <Target_Connect+0x2a6>
 8002dca:	f240 4389 	movw	r3, #1161	@ 0x489
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	d007      	beq.n	8002de2 <Target_Connect+0x2ae>
            log_message("Unknown STM32U0 Device ID: 0x%03X\n", target->TargetDevId);
 8002dd2:	484f      	ldr	r0, [pc, #316]	@ (8002f10 <Target_Connect+0x3dc>)
 8002dd4:	f7ff fe64 	bl	8002aa0 <log_message>
            break;
 8002dd8:	e741      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32U031xx\n");
 8002dda:	484e      	ldr	r0, [pc, #312]	@ (8002f14 <Target_Connect+0x3e0>)
 8002ddc:	f7ff fe60 	bl	8002aa0 <log_message>
            break;
 8002de0:	e73d      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32U073xx/083xx\n");
 8002de2:	484d      	ldr	r0, [pc, #308]	@ (8002f18 <Target_Connect+0x3e4>)
 8002de4:	f7ff fe5c 	bl	8002aa0 <log_message>
            break;
 8002de8:	e739      	b.n	8002c5e <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32H7;
 8002dea:	4c46      	ldr	r4, [pc, #280]	@ (8002f04 <Target_Connect+0x3d0>)
 8002dec:	230f      	movs	r3, #15
 8002dee:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_2) & 0xFFF;
 8002df0:	484a      	ldr	r0, [pc, #296]	@ (8002f1c <Target_Connect+0x3e8>)
 8002df2:	f7ff fca7 	bl	8002744 <readMem>
 8002df6:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002dfa:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32H7, Device ID: 0x%03X\n", target->TargetDevId);
 8002dfc:	4848      	ldr	r0, [pc, #288]	@ (8002f20 <Target_Connect+0x3ec>)
 8002dfe:	f7ff fe4f 	bl	8002aa0 <log_message>
    switch(target->TargetDevId)
 8002e02:	68e1      	ldr	r1, [r4, #12]
 8002e04:	f5b1 6f90 	cmp.w	r1, #1152	@ 0x480
 8002e08:	d00a      	beq.n	8002e20 <Target_Connect+0x2ec>
 8002e0a:	f240 4383 	movw	r3, #1155	@ 0x483
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d01b      	beq.n	8002e4a <Target_Connect+0x316>
 8002e12:	f5b1 6f8a 	cmp.w	r1, #1104	@ 0x450
 8002e16:	d022      	beq.n	8002e5e <Target_Connect+0x32a>
            log_message("Unknown STM32H7 Device ID: 0x%03X\n", target->TargetDevId);
 8002e18:	4842      	ldr	r0, [pc, #264]	@ (8002f24 <Target_Connect+0x3f0>)
 8002e1a:	f7ff fe41 	bl	8002aa0 <log_message>
            break;
 8002e1e:	e71e      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32H7A3/7B3/7B0\n");
 8002e20:	4841      	ldr	r0, [pc, #260]	@ (8002f28 <Target_Connect+0x3f4>)
 8002e22:	f7ff fe3d 	bl	8002aa0 <log_message>
            uint32_t tmp = readMem(STM32H7_REG_FLASH_SIZE_2);
 8002e26:	4841      	ldr	r0, [pc, #260]	@ (8002f2c <Target_Connect+0x3f8>)
 8002e28:	f7ff fc8c 	bl	8002744 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002e2c:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 8002e30:	bf18      	it	ne
 8002e32:	2201      	movne	r2, #1
 8002e34:	4b33      	ldr	r3, [pc, #204]	@ (8002f04 <Target_Connect+0x3d0>)
 8002e36:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002e38:	493d      	ldr	r1, [pc, #244]	@ (8002f30 <Target_Connect+0x3fc>)
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f34 <Target_Connect+0x400>)
 8002e3c:	2880      	cmp	r0, #128	@ 0x80
 8002e3e:	bf18      	it	ne
 8002e40:	4619      	movne	r1, r3
 8002e42:	483d      	ldr	r0, [pc, #244]	@ (8002f38 <Target_Connect+0x404>)
 8002e44:	f7ff fe2c 	bl	8002aa0 <log_message>
            break;
 8002e48:	e709      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32H72x, STM32H73x\n");
 8002e4a:	483c      	ldr	r0, [pc, #240]	@ (8002f3c <Target_Connect+0x408>)
 8002e4c:	f7ff fe28 	bl	8002aa0 <log_message>
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_SINGLEBANK;
 8002e50:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <Target_Connect+0x3d0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: Single \n");
 8002e56:	483a      	ldr	r0, [pc, #232]	@ (8002f40 <Target_Connect+0x40c>)
 8002e58:	f7ff fe22 	bl	8002aa0 <log_message>
            break;
 8002e5c:	e6ff      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("STM32H742, STM32H743/753, STM32H750, STM32H745/755, STM32H747/757\n");
 8002e5e:	4839      	ldr	r0, [pc, #228]	@ (8002f44 <Target_Connect+0x410>)
 8002e60:	f7ff fe1e 	bl	8002aa0 <log_message>
            tmp = readMem(STM32H7_REG_FLASH_SIZE_1);
 8002e64:	4838      	ldr	r0, [pc, #224]	@ (8002f48 <Target_Connect+0x414>)
 8002e66:	f7ff fc6d 	bl	8002744 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002e6a:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 8002e6e:	bf18      	it	ne
 8002e70:	2201      	movne	r2, #1
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <Target_Connect+0x3d0>)
 8002e74:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002e76:	492e      	ldr	r1, [pc, #184]	@ (8002f30 <Target_Connect+0x3fc>)
 8002e78:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <Target_Connect+0x400>)
 8002e7a:	2880      	cmp	r0, #128	@ 0x80
 8002e7c:	bf18      	it	ne
 8002e7e:	4619      	movne	r1, r3
 8002e80:	482d      	ldr	r0, [pc, #180]	@ (8002f38 <Target_Connect+0x404>)
 8002e82:	f7ff fe0d 	bl	8002aa0 <log_message>
            break;
 8002e86:	e6ea      	b.n	8002c5e <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32G4;
 8002e88:	4c1e      	ldr	r4, [pc, #120]	@ (8002f04 <Target_Connect+0x3d0>)
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_3) & 0xFFF;
 8002e8e:	482f      	ldr	r0, [pc, #188]	@ (8002f4c <Target_Connect+0x418>)
 8002e90:	f7ff fc58 	bl	8002744 <readMem>
 8002e94:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002e98:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32G4, Device ID: 0x%03X\n",  target->TargetDevId);
 8002e9a:	482d      	ldr	r0, [pc, #180]	@ (8002f50 <Target_Connect+0x41c>)
 8002e9c:	f7ff fe00 	bl	8002aa0 <log_message>
    switch(target->TargetDevId)
 8002ea0:	68e1      	ldr	r1, [r4, #12]
 8002ea2:	f240 4369 	movw	r3, #1129	@ 0x469
 8002ea6:	4299      	cmp	r1, r3
 8002ea8:	d00a      	beq.n	8002ec0 <Target_Connect+0x38c>
 8002eaa:	f240 4379 	movw	r3, #1145	@ 0x479
 8002eae:	4299      	cmp	r1, r3
 8002eb0:	d00a      	beq.n	8002ec8 <Target_Connect+0x394>
 8002eb2:	f5b1 6f8d 	cmp.w	r1, #1128	@ 0x468
 8002eb6:	d10b      	bne.n	8002ed0 <Target_Connect+0x39c>
            log_message("Category 2 STM32G431, STM32G441(AES)\n");
 8002eb8:	4826      	ldr	r0, [pc, #152]	@ (8002f54 <Target_Connect+0x420>)
 8002eba:	f7ff fdf1 	bl	8002aa0 <log_message>
            break;
 8002ebe:	e6ce      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("Category 3 STM32G471, STM32G473, STM32G474, STM32G483(AES), STM32G484(AES)\n");
 8002ec0:	4825      	ldr	r0, [pc, #148]	@ (8002f58 <Target_Connect+0x424>)
 8002ec2:	f7ff fded 	bl	8002aa0 <log_message>
            break;
 8002ec6:	e6ca      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("Category 4 STM32G491, STM32G4A1(AES)\n");
 8002ec8:	4824      	ldr	r0, [pc, #144]	@ (8002f5c <Target_Connect+0x428>)
 8002eca:	f7ff fde9 	bl	8002aa0 <log_message>
            break;
 8002ece:	e6c6      	b.n	8002c5e <Target_Connect+0x12a>
            log_message("Unknown STM32G4 Device ID: 0x%03X\n", target->TargetDevId);
 8002ed0:	4823      	ldr	r0, [pc, #140]	@ (8002f60 <Target_Connect+0x42c>)
 8002ed2:	f7ff fde5 	bl	8002aa0 <log_message>
            break;
 8002ed6:	e6c2      	b.n	8002c5e <Target_Connect+0x12a>
		    log_message("Unknown Device: No matching Device ID found.\n");
 8002ed8:	4822      	ldr	r0, [pc, #136]	@ (8002f64 <Target_Connect+0x430>)
 8002eda:	f7ff fde1 	bl	8002aa0 <log_message>
		    target->TargetFamily = 0; // Unknown family
 8002ede:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <Target_Connect+0x3d0>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	721a      	strb	r2, [r3, #8]
		    target->TargetDevId = 0;
 8002ee4:	60da      	str	r2, [r3, #12]
			return;
 8002ee6:	e6ba      	b.n	8002c5e <Target_Connect+0x12a>
    	log_message("SWD Error: %s\n", getErrorString(errorCode));
 8002ee8:	f7ff fb7c 	bl	80025e4 <getErrorString>
 8002eec:	4601      	mov	r1, r0
 8002eee:	481e      	ldr	r0, [pc, #120]	@ (8002f68 <Target_Connect+0x434>)
 8002ef0:	f7ff fdd6 	bl	8002aa0 <log_message>
    	log_message("Failed to connect. Retrying...\n");
 8002ef4:	481d      	ldr	r0, [pc, #116]	@ (8002f6c <Target_Connect+0x438>)
 8002ef6:	f7ff fdd3 	bl	8002aa0 <log_message>
    	delayMs(200);
 8002efa:	20c8      	movs	r0, #200	@ 0xc8
 8002efc:	f7ff fb62 	bl	80025c4 <delayMs>
    	return TARGET_ERROR; // Disable return function in TRY/CATCH.
 8002f00:	2001      	movs	r0, #1
}
 8002f02:	bd10      	pop	{r4, pc}
 8002f04:	20004198 	.word	0x20004198
 8002f08:	40015800 	.word	0x40015800
 8002f0c:	080117a8 	.word	0x080117a8
 8002f10:	080117fc 	.word	0x080117fc
 8002f14:	080117d8 	.word	0x080117d8
 8002f18:	080117e8 	.word	0x080117e8
 8002f1c:	5c001000 	.word	0x5c001000
 8002f20:	08011820 	.word	0x08011820
 8002f24:	080118e8 	.word	0x080118e8
 8002f28:	08011850 	.word	0x08011850
 8002f2c:	08fff80c 	.word	0x08fff80c
 8002f30:	080115c8 	.word	0x080115c8
 8002f34:	080115c0 	.word	0x080115c0
 8002f38:	08011864 	.word	0x08011864
 8002f3c:	08011874 	.word	0x08011874
 8002f40:	0801188c 	.word	0x0801188c
 8002f44:	080118a4 	.word	0x080118a4
 8002f48:	1ff1e880 	.word	0x1ff1e880
 8002f4c:	e0042000 	.word	0xe0042000
 8002f50:	0801190c 	.word	0x0801190c
 8002f54:	0801193c 	.word	0x0801193c
 8002f58:	08011964 	.word	0x08011964
 8002f5c:	080119b0 	.word	0x080119b0
 8002f60:	080119d8 	.word	0x080119d8
 8002f64:	080119fc 	.word	0x080119fc
 8002f68:	08011a2c 	.word	0x08011a2c
 8002f6c:	08011a3c 	.word	0x08011a3c

08002f70 <Target_GetFlashStartAddress>:
{
 8002f70:	b508      	push	{r3, lr}
    switch(target.TargetFamily)
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <Target_GetFlashStartAddress+0x24>)
 8002f74:	7a1a      	ldrb	r2, [r3, #8]
 8002f76:	2a0f      	cmp	r2, #15
 8002f78:	d808      	bhi.n	8002f8c <Target_GetFlashStartAddress+0x1c>
 8002f7a:	f248 03a2 	movw	r3, #32930	@ 0x80a2
 8002f7e:	40d3      	lsrs	r3, r2
 8002f80:	f013 0f01 	tst.w	r3, #1
 8002f84:	d002      	beq.n	8002f8c <Target_GetFlashStartAddress+0x1c>
}
 8002f86:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002f8a:	bd08      	pop	{r3, pc}
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <Target_GetFlashStartAddress+0x28>)
 8002f8e:	f7ff fd87 	bl	8002aa0 <log_message>
            return 0x08000000;
 8002f92:	e7f8      	b.n	8002f86 <Target_GetFlashStartAddress+0x16>
 8002f94:	20004198 	.word	0x20004198
 8002f98:	08011a5c 	.word	0x08011a5c

08002f9c <Target_Program>:
{
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
    log_message("Target Program\n");
 8002fa4:	48a6      	ldr	r0, [pc, #664]	@ (8003240 <Target_Program+0x2a4>)
 8002fa6:	f7ff fd7b 	bl	8002aa0 <log_message>
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002faa:	f50d 618f 	add.w	r1, sp, #1144	@ 0x478
 8002fae:	48a5      	ldr	r0, [pc, #660]	@ (8003244 <Target_Program+0x2a8>)
 8002fb0:	f00a fee0 	bl	800dd74 <f_stat>
    if (res == FR_OK)
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d046      	beq.n	8003046 <Target_Program+0xaa>
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002fb8:	f50d 618f 	add.w	r1, sp, #1144	@ 0x478
 8002fbc:	48a2      	ldr	r0, [pc, #648]	@ (8003248 <Target_Program+0x2ac>)
 8002fbe:	f00a fed9 	bl	800dd74 <f_stat>
        if (res == FR_OK)
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f040 819f 	bne.w	8003306 <Target_Program+0x36a>
    size_t readcount = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9303      	str	r3, [sp, #12]
    uint32_t address = Target_GetFlashStartAddress();
 8002fcc:	f7ff ffd0 	bl	8002f70 <Target_GetFlashStartAddress>
 8002fd0:	9001      	str	r0, [sp, #4]
    log_message("Target ProgramBin\n");
 8002fd2:	489e      	ldr	r0, [pc, #632]	@ (800324c <Target_Program+0x2b0>)
 8002fd4:	f7ff fd64 	bl	8002aa0 <log_message>
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8002fd8:	a94c      	add	r1, sp, #304	@ 0x130
 8002fda:	489b      	ldr	r0, [pc, #620]	@ (8003248 <Target_Program+0x2ac>)
 8002fdc:	f00a feca 	bl	800dd74 <f_stat>
    if (res != FR_OK)
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	f040 80a5 	bne.w	8003130 <Target_Program+0x194>
    log_message("Firmware File Information\n");
 8002fe6:	489a      	ldr	r0, [pc, #616]	@ (8003250 <Target_Program+0x2b4>)
 8002fe8:	f7ff fd5a 	bl	8002aa0 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 8002fec:	f50d 71a3 	add.w	r1, sp, #326	@ 0x146
 8002ff0:	4898      	ldr	r0, [pc, #608]	@ (8003254 <Target_Program+0x2b8>)
 8002ff2:	f7ff fd55 	bl	8002aa0 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8002ff6:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8002ff8:	4897      	ldr	r0, [pc, #604]	@ (8003258 <Target_Program+0x2bc>)
 8002ffa:	f7ff fd51 	bl	8002aa0 <log_message>
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 8002ffe:	f8bd 2134 	ldrh.w	r2, [sp, #308]	@ 0x134
    uint8_t hour = (fileInfo.ftime >> 11) & 0x1F;          // 상위 5비트
 8003002:	f8bd 4136 	ldrh.w	r4, [sp, #310]	@ 0x136
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 8003006:	0a51      	lsrs	r1, r2, #9
    log_message("(3) Last Modified Date: %04d-%02d-%02d\n", year, month, day);
 8003008:	f002 031f 	and.w	r3, r2, #31
 800300c:	f3c2 1243 	ubfx	r2, r2, #5, #4
 8003010:	f201 71bc 	addw	r1, r1, #1980	@ 0x7bc
 8003014:	4891      	ldr	r0, [pc, #580]	@ (800325c <Target_Program+0x2c0>)
 8003016:	f7ff fd43 	bl	8002aa0 <log_message>
    uint8_t second = (fileInfo.ftime & 0x1F) * 2;          // 하위 5비트 * 2 (초 단위)
 800301a:	f004 031f 	and.w	r3, r4, #31
    log_message("(4) Last Modified Time: %02d:%02d:%02d\n", hour, minute, second);
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	f3c4 1245 	ubfx	r2, r4, #5, #6
 8003024:	0ae1      	lsrs	r1, r4, #11
 8003026:	488e      	ldr	r0, [pc, #568]	@ (8003260 <Target_Program+0x2c4>)
 8003028:	f7ff fd3a 	bl	8002aa0 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 800302c:	2201      	movs	r2, #1
 800302e:	4986      	ldr	r1, [pc, #536]	@ (8003248 <Target_Program+0x2ac>)
 8003030:	a892      	add	r0, sp, #584	@ 0x248
 8003032:	f00a fc35 	bl	800d8a0 <f_open>
    if (res != FR_OK)
 8003036:	2800      	cmp	r0, #0
 8003038:	f000 80ad 	beq.w	8003196 <Target_Program+0x1fa>
        log_message("Error: Could not open firmware file\n");
 800303c:	4889      	ldr	r0, [pc, #548]	@ (8003264 <Target_Program+0x2c8>)
 800303e:	f7ff fd2f 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 8003042:	2601      	movs	r6, #1
 8003044:	e163      	b.n	800330e <Target_Program+0x372>
    size_t readcount = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	9304      	str	r3, [sp, #16]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 800304a:	a94c      	add	r1, sp, #304	@ 0x130
 800304c:	487d      	ldr	r0, [pc, #500]	@ (8003244 <Target_Program+0x2a8>)
 800304e:	f00a fe91 	bl	800dd74 <f_stat>
    if (res != FR_OK)
 8003052:	bb90      	cbnz	r0, 80030ba <Target_Program+0x11e>
    log_message("Firmware File Information\n");
 8003054:	487e      	ldr	r0, [pc, #504]	@ (8003250 <Target_Program+0x2b4>)
 8003056:	f7ff fd23 	bl	8002aa0 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 800305a:	f50d 71a3 	add.w	r1, sp, #326	@ 0x146
 800305e:	487d      	ldr	r0, [pc, #500]	@ (8003254 <Target_Program+0x2b8>)
 8003060:	f7ff fd1e 	bl	8002aa0 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 8003064:	994c      	ldr	r1, [sp, #304]	@ 0x130
 8003066:	487c      	ldr	r0, [pc, #496]	@ (8003258 <Target_Program+0x2bc>)
 8003068:	f7ff fd1a 	bl	8002aa0 <log_message>
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 800306c:	f8bd 2134 	ldrh.w	r2, [sp, #308]	@ 0x134
    uint8_t hour = (fileInfo.ftime >> 11) & 0x1F;          // 상위 5비트
 8003070:	f8bd 4136 	ldrh.w	r4, [sp, #310]	@ 0x136
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 8003074:	0a51      	lsrs	r1, r2, #9
    log_message("(3) Last Modified Date: %04d-%02d-%02d\n", year, month, day);
 8003076:	f002 031f 	and.w	r3, r2, #31
 800307a:	f3c2 1243 	ubfx	r2, r2, #5, #4
 800307e:	f201 71bc 	addw	r1, r1, #1980	@ 0x7bc
 8003082:	4876      	ldr	r0, [pc, #472]	@ (800325c <Target_Program+0x2c0>)
 8003084:	f7ff fd0c 	bl	8002aa0 <log_message>
    uint8_t second = (fileInfo.ftime & 0x1F) * 2;          // 하위 5비트 * 2 (초 단위)
 8003088:	f004 031f 	and.w	r3, r4, #31
    log_message("(4) Last Modified Time: %02d:%02d:%02d\n", hour, minute, second);
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	f3c4 1245 	ubfx	r2, r4, #5, #6
 8003092:	0ae1      	lsrs	r1, r4, #11
 8003094:	4872      	ldr	r0, [pc, #456]	@ (8003260 <Target_Program+0x2c4>)
 8003096:	f7ff fd03 	bl	8002aa0 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 800309a:	2201      	movs	r2, #1
 800309c:	4969      	ldr	r1, [pc, #420]	@ (8003244 <Target_Program+0x2a8>)
 800309e:	a892      	add	r0, sp, #584	@ 0x248
 80030a0:	f00a fbfe 	bl	800d8a0 <f_open>
    if (res != FR_OK)
 80030a4:	b970      	cbnz	r0, 80030c4 <Target_Program+0x128>
    ihex_set_callback_func((ihex_callback_fp)*Target_ProgramCallback[target.TargetFamily]);
 80030a6:	4b70      	ldr	r3, [pc, #448]	@ (8003268 <Target_Program+0x2cc>)
 80030a8:	7a1a      	ldrb	r2, [r3, #8]
 80030aa:	4b70      	ldr	r3, [pc, #448]	@ (800326c <Target_Program+0x2d0>)
 80030ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80030b0:	f001 faa0 	bl	80045f4 <ihex_set_callback_func>
    ihex_reset_state();
 80030b4:	f001 fa8c 	bl	80045d0 <ihex_reset_state>
 80030b8:	e020      	b.n	80030fc <Target_Program+0x160>
        log_message("f_stat error\n");
 80030ba:	486d      	ldr	r0, [pc, #436]	@ (8003270 <Target_Program+0x2d4>)
 80030bc:	f7ff fcf0 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 80030c0:	2601      	movs	r6, #1
 80030c2:	e124      	b.n	800330e <Target_Program+0x372>
        log_message("f_open error\n");
 80030c4:	486b      	ldr	r0, [pc, #428]	@ (8003274 <Target_Program+0x2d8>)
 80030c6:	f7ff fceb 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 80030ca:	2601      	movs	r6, #1
 80030cc:	e11f      	b.n	800330e <Target_Program+0x372>
            log_message("f_read error\n");
 80030ce:	486a      	ldr	r0, [pc, #424]	@ (8003278 <Target_Program+0x2dc>)
 80030d0:	f7ff fce6 	bl	8002aa0 <log_message>
            f_close(&file);
 80030d4:	a892      	add	r0, sp, #584	@ 0x248
 80030d6:	f00a fe38 	bl	800dd4a <f_close>
            return TARGET_ERROR;
 80030da:	2601      	movs	r6, #1
 80030dc:	e117      	b.n	800330e <Target_Program+0x372>
            res = f_close(&file);
 80030de:	a892      	add	r0, sp, #584	@ 0x248
 80030e0:	f00a fe33 	bl	800dd4a <f_close>
            if (res != FR_OK)
 80030e4:	b908      	cbnz	r0, 80030ea <Target_Program+0x14e>
    return TARGET_OK;
 80030e6:	2600      	movs	r6, #0
        return Target_ProgramHex();
 80030e8:	e111      	b.n	800330e <Target_Program+0x372>
                log_message("f_close error\n");
 80030ea:	4864      	ldr	r0, [pc, #400]	@ (800327c <Target_Program+0x2e0>)
 80030ec:	f7ff fcd8 	bl	8002aa0 <log_message>
                return TARGET_ERROR;
 80030f0:	2601      	movs	r6, #1
 80030f2:	e10c      	b.n	800330e <Target_Program+0x372>
            if (!ihex_parser(fbuf, readcount))
 80030f4:	a80c      	add	r0, sp, #48	@ 0x30
 80030f6:	f001 fa83 	bl	8004600 <ihex_parser>
 80030fa:	b188      	cbz	r0, 8003120 <Target_Program+0x184>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 80030fc:	ab04      	add	r3, sp, #16
 80030fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003102:	a90c      	add	r1, sp, #48	@ 0x30
 8003104:	a892      	add	r0, sp, #584	@ 0x248
 8003106:	f00a fcfb 	bl	800db00 <f_read>
        if (res != FR_OK)
 800310a:	2800      	cmp	r0, #0
 800310c:	d1df      	bne.n	80030ce <Target_Program+0x132>
        if (readcount == 0)
 800310e:	9904      	ldr	r1, [sp, #16]
 8003110:	2900      	cmp	r1, #0
 8003112:	d0e4      	beq.n	80030de <Target_Program+0x142>
            if (readcount < sizeof(fbuf))
 8003114:	29ff      	cmp	r1, #255	@ 0xff
 8003116:	d8ed      	bhi.n	80030f4 <Target_Program+0x158>
                fbuf[readcount] = '\0';
 8003118:	2300      	movs	r3, #0
 800311a:	aa0c      	add	r2, sp, #48	@ 0x30
 800311c:	5453      	strb	r3, [r2, r1]
 800311e:	e7e9      	b.n	80030f4 <Target_Program+0x158>
                log_message("ihex_parser error\n");
 8003120:	4857      	ldr	r0, [pc, #348]	@ (8003280 <Target_Program+0x2e4>)
 8003122:	f7ff fcbd 	bl	8002aa0 <log_message>
                f_close(&file);
 8003126:	a892      	add	r0, sp, #584	@ 0x248
 8003128:	f00a fe0f 	bl	800dd4a <f_close>
                return TARGET_ERROR;
 800312c:	2601      	movs	r6, #1
 800312e:	e0ee      	b.n	800330e <Target_Program+0x372>
        log_message("f_stat error\n");
 8003130:	484f      	ldr	r0, [pc, #316]	@ (8003270 <Target_Program+0x2d4>)
 8003132:	f7ff fcb5 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 8003136:	2601      	movs	r6, #1
 8003138:	e0e9      	b.n	800330e <Target_Program+0x372>
            log_message("Error: Failed to read firmware file\n");
 800313a:	4852      	ldr	r0, [pc, #328]	@ (8003284 <Target_Program+0x2e8>)
 800313c:	f7ff fcb0 	bl	8002aa0 <log_message>
            f_close(&file);
 8003140:	a892      	add	r0, sp, #584	@ 0x248
 8003142:	f00a fe02 	bl	800dd4a <f_close>
            return TARGET_ERROR;
 8003146:	2601      	movs	r6, #1
 8003148:	e0e1      	b.n	800330e <Target_Program+0x372>
            f_close(&file);
 800314a:	a892      	add	r0, sp, #584	@ 0x248
 800314c:	f00a fdfd 	bl	800dd4a <f_close>
    return TARGET_OK;
 8003150:	2600      	movs	r6, #0
 8003152:	e0dc      	b.n	800330e <Target_Program+0x372>
        switch (target.TargetFamily)
 8003154:	9f01      	ldr	r7, [sp, #4]
 8003156:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
        uint64_t word = 0xFFFFFFFFFFFFFFFF;  // 기본 패딩 값 0xFF로 초기화
 800315a:	f04f 3aff 	mov.w	sl, #4294967295
 800315e:	f04f 3bff 	mov.w	fp, #4294967295
 8003162:	e9cd ab04 	strd	sl, fp, [sp, #16]
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 8003166:	4625      	mov	r5, r4
 8003168:	2c08      	cmp	r4, #8
 800316a:	bf28      	it	cs
 800316c:	2508      	movcs	r5, #8
        memcpy(&word, data, size_to_program);
 800316e:	462a      	mov	r2, r5
 8003170:	4641      	mov	r1, r8
 8003172:	a804      	add	r0, sp, #16
 8003174:	f00c f8d3 	bl	800f31e <memcpy>
        if (Stm32c0_Flash_Program(address, word) != TARGET_OK)
 8003178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800317c:	4638      	mov	r0, r7
 800317e:	f000 fd7b 	bl	8003c78 <Stm32c0_Flash_Program>
 8003182:	4606      	mov	r6, r0
 8003184:	bb18      	cbnz	r0, 80031ce <Target_Program+0x232>
        address += chunk_size;
 8003186:	3708      	adds	r7, #8
        data += size_to_program;
 8003188:	44a8      	add	r8, r5
    while (remaining_size > 0)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	d1e9      	bne.n	8003162 <Target_Program+0x1c6>
        address += readcount;
 800318e:	9b03      	ldr	r3, [sp, #12]
 8003190:	9a01      	ldr	r2, [sp, #4]
 8003192:	441a      	add	r2, r3
 8003194:	9201      	str	r2, [sp, #4]
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8003196:	ab03      	add	r3, sp, #12
 8003198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800319c:	a90c      	add	r1, sp, #48	@ 0x30
 800319e:	a892      	add	r0, sp, #584	@ 0x248
 80031a0:	f00a fcae 	bl	800db00 <f_read>
        if (res != FR_OK)
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d1c8      	bne.n	800313a <Target_Program+0x19e>
        if (readcount == 0)
 80031a8:	9c03      	ldr	r4, [sp, #12]
 80031aa:	2c00      	cmp	r4, #0
 80031ac:	d0cd      	beq.n	800314a <Target_Program+0x1ae>
        switch (target.TargetFamily)
 80031ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003268 <Target_Program+0x2cc>)
 80031b0:	7a1b      	ldrb	r3, [r3, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d0ce      	beq.n	8003154 <Target_Program+0x1b8>
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d070      	beq.n	800329c <Target_Program+0x300>
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d014      	beq.n	80031e8 <Target_Program+0x24c>
                log_message("Error: Unsupported target family\n");
 80031be:	4832      	ldr	r0, [pc, #200]	@ (8003288 <Target_Program+0x2ec>)
 80031c0:	f7ff fc6e 	bl	8002aa0 <log_message>
                f_close(&file);
 80031c4:	a892      	add	r0, sp, #584	@ 0x248
 80031c6:	f00a fdc0 	bl	800dd4a <f_close>
                return TARGET_ERROR;
 80031ca:	2601      	movs	r6, #1
 80031cc:	e09f      	b.n	800330e <Target_Program+0x372>
          log_message("Error: Failed to program STM32C0 flash at address 0x%08lX\n", address);
 80031ce:	4639      	mov	r1, r7
 80031d0:	482e      	ldr	r0, [pc, #184]	@ (800328c <Target_Program+0x2f0>)
 80031d2:	f7ff fc65 	bl	8002aa0 <log_message>
          Stm32c0_Flash_Lock();
 80031d6:	f000 fce5 	bl	8003ba4 <Stm32c0_Flash_Lock>
									 log_message("Error: STM32C0 programming failed\n");
 80031da:	482d      	ldr	r0, [pc, #180]	@ (8003290 <Target_Program+0x2f4>)
 80031dc:	f7ff fc60 	bl	8002aa0 <log_message>
									 f_close(&file);
 80031e0:	a892      	add	r0, sp, #584	@ 0x248
 80031e2:	f00a fdb2 	bl	800dd4a <f_close>
									 return TARGET_ERROR;
 80031e6:	e092      	b.n	800330e <Target_Program+0x372>
        switch (target.TargetFamily)
 80031e8:	9f01      	ldr	r7, [sp, #4]
 80031ea:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
        uint64_t word = 0xFFFFFFFFFFFFFFFF;  // 기본 패딩 값 0xFF로 초기화
 80031ee:	f04f 3aff 	mov.w	sl, #4294967295
 80031f2:	f04f 3bff 	mov.w	fp, #4294967295
 80031f6:	e9cd ab04 	strd	sl, fp, [sp, #16]
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 80031fa:	4625      	mov	r5, r4
 80031fc:	2c08      	cmp	r4, #8
 80031fe:	bf28      	it	cs
 8003200:	2508      	movcs	r5, #8
        memcpy(&word, data, size_to_program);
 8003202:	462a      	mov	r2, r5
 8003204:	4641      	mov	r1, r8
 8003206:	a804      	add	r0, sp, #16
 8003208:	f00c f889 	bl	800f31e <memcpy>
        if (Stm32u0_Flash_Program(address, word) != TARGET_OK)
 800320c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003210:	4638      	mov	r0, r7
 8003212:	f001 f883 	bl	800431c <Stm32u0_Flash_Program>
 8003216:	4606      	mov	r6, r0
 8003218:	b920      	cbnz	r0, 8003224 <Target_Program+0x288>
        address += chunk_size;
 800321a:	3708      	adds	r7, #8
        data += size_to_program;
 800321c:	44a8      	add	r8, r5
    while (remaining_size > 0)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	d1e9      	bne.n	80031f6 <Target_Program+0x25a>
 8003222:	e7b4      	b.n	800318e <Target_Program+0x1f2>
          log_message("Error: Failed to program STM32U0 flash at address 0x%08lX\n", address);
 8003224:	4639      	mov	r1, r7
 8003226:	481b      	ldr	r0, [pc, #108]	@ (8003294 <Target_Program+0x2f8>)
 8003228:	f7ff fc3a 	bl	8002aa0 <log_message>
          Stm32u0_Flash_Lock();
 800322c:	f001 f80c 	bl	8004248 <Stm32u0_Flash_Lock>
									 log_message("Error: STM32U0 programming failed\n");
 8003230:	4819      	ldr	r0, [pc, #100]	@ (8003298 <Target_Program+0x2fc>)
 8003232:	f7ff fc35 	bl	8002aa0 <log_message>
									 f_close(&file);
 8003236:	a892      	add	r0, sp, #584	@ 0x248
 8003238:	f00a fd87 	bl	800dd4a <f_close>
									 return TARGET_ERROR;
 800323c:	e067      	b.n	800330e <Target_Program+0x372>
 800323e:	bf00      	nop
 8003240:	08011a9c 	.word	0x08011a9c
 8003244:	08011aac 	.word	0x08011aac
 8003248:	08011bac 	.word	0x08011bac
 800324c:	08011bbc 	.word	0x08011bbc
 8003250:	08011acc 	.word	0x08011acc
 8003254:	08011ae8 	.word	0x08011ae8
 8003258:	08011afc 	.word	0x08011afc
 800325c:	08011b18 	.word	0x08011b18
 8003260:	08011b40 	.word	0x08011b40
 8003264:	08011bd0 	.word	0x08011bd0
 8003268:	20004198 	.word	0x20004198
 800326c:	080123b0 	.word	0x080123b0
 8003270:	08011abc 	.word	0x08011abc
 8003274:	08011b68 	.word	0x08011b68
 8003278:	08011b78 	.word	0x08011b78
 800327c:	08011b88 	.word	0x08011b88
 8003280:	08011b98 	.word	0x08011b98
 8003284:	08011bf8 	.word	0x08011bf8
 8003288:	08011d40 	.word	0x08011d40
 800328c:	08011c20 	.word	0x08011c20
 8003290:	08011c5c 	.word	0x08011c5c
 8003294:	08011c80 	.word	0x08011c80
 8003298:	08011cbc 	.word	0x08011cbc
    uint32_t chunk_size = (target.TargetDevId == 0x480) ? 16 : 32; // 0x480이면 16바이트, 아니면 32바이트
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <Target_Program+0x37c>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80032a4:	bf14      	ite	ne
 80032a6:	f04f 0820 	movne.w	r8, #32
 80032aa:	f04f 0810 	moveq.w	r8, #16
    uint32_t address = start_address;
 80032ae:	9f01      	ldr	r7, [sp, #4]
 80032b0:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
				memset(buffer, 0xFF, sizeof(buffer)); // 모든 요소를 0xFF로 설정
 80032b4:	f04f 0b20 	mov.w	fp, #32
 80032b8:	f04f 0aff 	mov.w	sl, #255	@ 0xff
 80032bc:	465a      	mov	r2, fp
 80032be:	4651      	mov	r1, sl
 80032c0:	a804      	add	r0, sp, #16
 80032c2:	f00b ffad 	bl	800f220 <memset>
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 80032c6:	4645      	mov	r5, r8
 80032c8:	45a0      	cmp	r8, r4
 80032ca:	bf28      	it	cs
 80032cc:	4625      	movcs	r5, r4
        memcpy(buffer, data, size_to_program);
 80032ce:	462a      	mov	r2, r5
 80032d0:	4649      	mov	r1, r9
 80032d2:	a804      	add	r0, sp, #16
 80032d4:	f00c f823 	bl	800f31e <memcpy>
        if (Stm32h7_Flash_Program(address, (uint32_t)buffer, chunk_size) != TARGET_OK)
 80032d8:	4642      	mov	r2, r8
 80032da:	a904      	add	r1, sp, #16
 80032dc:	4638      	mov	r0, r7
 80032de:	f000 feb3 	bl	8004048 <Stm32h7_Flash_Program>
 80032e2:	4606      	mov	r6, r0
 80032e4:	b920      	cbnz	r0, 80032f0 <Target_Program+0x354>
        address += chunk_size;
 80032e6:	4447      	add	r7, r8
        data += size_to_program;
 80032e8:	44a9      	add	r9, r5
    while (remaining_size > 0)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	d1e6      	bne.n	80032bc <Target_Program+0x320>
 80032ee:	e74e      	b.n	800318e <Target_Program+0x1f2>
            log_message("Error: Failed to program STM32H7 flash at address 0x%08lX\n", address);
 80032f0:	4639      	mov	r1, r7
 80032f2:	480a      	ldr	r0, [pc, #40]	@ (800331c <Target_Program+0x380>)
 80032f4:	f7ff fbd4 	bl	8002aa0 <log_message>
                    log_message("Error: STM32H7 programming failed\n");
 80032f8:	4809      	ldr	r0, [pc, #36]	@ (8003320 <Target_Program+0x384>)
 80032fa:	f7ff fbd1 	bl	8002aa0 <log_message>
                    f_close(&file);
 80032fe:	a892      	add	r0, sp, #584	@ 0x248
 8003300:	f00a fd23 	bl	800dd4a <f_close>
                    return TARGET_ERROR;
 8003304:	e003      	b.n	800330e <Target_Program+0x372>
            log_message("No firmware file found\n");
 8003306:	4807      	ldr	r0, [pc, #28]	@ (8003324 <Target_Program+0x388>)
 8003308:	f7ff fbca 	bl	8002aa0 <log_message>
            return TARGET_ERROR;
 800330c:	2601      	movs	r6, #1
}
 800330e:	4630      	mov	r0, r6
 8003310:	f20d 5d94 	addw	sp, sp, #1428	@ 0x594
 8003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003318:	20004198 	.word	0x20004198
 800331c:	08011ce0 	.word	0x08011ce0
 8003320:	08011d1c 	.word	0x08011d1c
 8003324:	08011d64 	.word	0x08011d64

08003328 <Target_VerifyCallback>:
  uint8_t tmp[32];
  uint32_t u32_ReadData[8];

  /* Read required words from target flash memory */
  int num_words = (bufsize + 3) / 4;  // Calculate the number of words needed to cover bufsize bytes
  for(int i = 0; i < num_words; i++)
 8003328:	2a00      	cmp	r2, #0
 800332a:	d04a      	beq.n	80033c2 <Target_VerifyCallback+0x9a>
{
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	b091      	sub	sp, #68	@ 0x44
 8003332:	4606      	mov	r6, r0
 8003334:	460c      	mov	r4, r1
 8003336:	4615      	mov	r5, r2
 8003338:	1cd7      	adds	r7, r2, #3
 800333a:	10bf      	asrs	r7, r7, #2
 800333c:	f1ad 0804 	sub.w	r8, sp, #4
  for(int i = 0; i < num_words; i++)
 8003340:	46c2      	mov	sl, r8
 8003342:	f04f 0900 	mov.w	r9, #0
  {
      u32_ReadData[i] = readMem(addr + (i * 4));
 8003346:	ab10      	add	r3, sp, #64	@ 0x40
 8003348:	f1c3 0b44 	rsb	fp, r3, #68	@ 0x44
 800334c:	4483      	add	fp, r0
 800334e:	eb0b 000a 	add.w	r0, fp, sl
 8003352:	f7ff f9f7 	bl	8002744 <readMem>
 8003356:	f84a 0f04 	str.w	r0, [sl, #4]!
  for(int i = 0; i < num_words; i++)
 800335a:	f109 0901 	add.w	r9, r9, #1
 800335e:	454f      	cmp	r7, r9
 8003360:	dcf5      	bgt.n	800334e <Target_VerifyCallback+0x26>
  }

  /* Convert uint32_t to uint8_t */
  for (int i = 0; i < num_words; i++) {
 8003362:	a808      	add	r0, sp, #32
  for(int i = 0; i < num_words; i++)
 8003364:	4684      	mov	ip, r0
  for (int i = 0; i < num_words; i++) {
 8003366:	2200      	movs	r2, #0
      tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8003368:	f858 3f04 	ldr.w	r3, [r8, #4]!
 800336c:	f88c 3000 	strb.w	r3, [ip]
      tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8003370:	0a19      	lsrs	r1, r3, #8
 8003372:	f88c 1001 	strb.w	r1, [ip, #1]
      tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 8003376:	0c19      	lsrs	r1, r3, #16
 8003378:	f88c 1002 	strb.w	r1, [ip, #2]
      tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	f88c 3003 	strb.w	r3, [ip, #3]
  for (int i = 0; i < num_words; i++) {
 8003382:	3201      	adds	r2, #1
 8003384:	f10c 0c04 	add.w	ip, ip, #4
 8003388:	4297      	cmp	r7, r2
 800338a:	dced      	bgt.n	8003368 <Target_VerifyCallback+0x40>
  }

  /* Compare Hex & Flash Data */
  for(int i = 0; i < bufsize; i++)
 800338c:	4621      	mov	r1, r4
 800338e:	2300      	movs	r3, #0
  {
#if DEBUG_USE_VERIFY_PRINT
      log_message("Address: 0x%08"PRIX32"\n", (addr + i));
      log_message("Flash: 0x%02"PRIX16", BIN File: 0x%02"PRIX16"\n", tmp[i], buf[i]);
#endif
      if(buf[i] != tmp[i])
 8003390:	460f      	mov	r7, r1
 8003392:	3101      	adds	r1, #1
 8003394:	f810 4b01 	ldrb.w	r4, [r0], #1
 8003398:	783a      	ldrb	r2, [r7, #0]
 800339a:	42a2      	cmp	r2, r4
 800339c:	d104      	bne.n	80033a8 <Target_VerifyCallback+0x80>
  for(int i = 0; i < bufsize; i++)
 800339e:	3301      	adds	r3, #1
 80033a0:	429d      	cmp	r5, r3
 80033a2:	d1f5      	bne.n	8003390 <Target_VerifyCallback+0x68>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
          return false;
      }
  }
  return true;
 80033a4:	2001      	movs	r0, #1
 80033a6:	e009      	b.n	80033bc <Target_VerifyCallback+0x94>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 80033a8:	1999      	adds	r1, r3, r6
 80033aa:	4807      	ldr	r0, [pc, #28]	@ (80033c8 <Target_VerifyCallback+0xa0>)
 80033ac:	f7ff fb78 	bl	8002aa0 <log_message>
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 80033b0:	783a      	ldrb	r2, [r7, #0]
 80033b2:	4621      	mov	r1, r4
 80033b4:	4805      	ldr	r0, [pc, #20]	@ (80033cc <Target_VerifyCallback+0xa4>)
 80033b6:	f7ff fb73 	bl	8002aa0 <log_message>
          return false;
 80033ba:	2000      	movs	r0, #0
}
 80033bc:	b011      	add	sp, #68	@ 0x44
 80033be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
 80033c2:	2001      	movs	r0, #1
}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	08011d7c 	.word	0x08011d7c
 80033cc:	08011da4 	.word	0x08011da4

080033d0 <Target_Verify>:
    return TARGET_OK;
}

/* Main function to verify the target */
static bool Target_Verify(void)
{
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target Verify\n");
 80033d8:	486e      	ldr	r0, [pc, #440]	@ (8003594 <Target_Verify+0x1c4>)
 80033da:	f7ff fb61 	bl	8002aa0 <log_message>

    /* Check if HEX file exists */
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 80033de:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80033e2:	486d      	ldr	r0, [pc, #436]	@ (8003598 <Target_Verify+0x1c8>)
 80033e4:	f00a fcc6 	bl	800dd74 <f_stat>
    if(res == FR_OK)
 80033e8:	b348      	cbz	r0, 800343e <Target_Verify+0x6e>
        return Target_VerifyHex();
    }
    else
    {
        /* HEX file does not exist, check for BIN file */
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80033ea:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 80033ee:	486b      	ldr	r0, [pc, #428]	@ (800359c <Target_Verify+0x1cc>)
 80033f0:	f00a fcc0 	bl	800dd74 <f_stat>
        if(res == FR_OK)
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f040 80c4 	bne.w	8003582 <Target_Verify+0x1b2>
    size_t readcount = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for verification
 80033fe:	f7ff fdb7 	bl	8002f70 <Target_GetFlashStartAddress>
 8003402:	4607      	mov	r7, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8003404:	a942      	add	r1, sp, #264	@ 0x108
 8003406:	4865      	ldr	r0, [pc, #404]	@ (800359c <Target_Verify+0x1cc>)
 8003408:	f00a fcb4 	bl	800dd74 <f_stat>
    if(res != FR_OK)
 800340c:	2800      	cmp	r0, #0
 800340e:	d164      	bne.n	80034da <Target_Verify+0x10a>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8003410:	2201      	movs	r2, #1
 8003412:	4962      	ldr	r1, [pc, #392]	@ (800359c <Target_Verify+0x1cc>)
 8003414:	a888      	add	r0, sp, #544	@ 0x220
 8003416:	f00a fa43 	bl	800d8a0 <f_open>
    if(res != FR_OK)
 800341a:	2800      	cmp	r0, #0
 800341c:	d162      	bne.n	80034e4 <Target_Verify+0x114>
                size_t adjusted_chunk_size = (chunk_size / 4) * 4;
 800341e:	f04f 0810 	mov.w	r8, #16
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8003422:	466b      	mov	r3, sp
 8003424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003428:	a902      	add	r1, sp, #8
 800342a:	a888      	add	r0, sp, #544	@ 0x220
 800342c:	f00a fb68 	bl	800db00 <f_read>
        if(res != FR_OK)
 8003430:	2800      	cmp	r0, #0
 8003432:	d15c      	bne.n	80034ee <Target_Verify+0x11e>
        if(readcount == 0)
 8003434:	9d00      	ldr	r5, [sp, #0]
 8003436:	2d00      	cmp	r5, #0
 8003438:	d061      	beq.n	80034fe <Target_Verify+0x12e>
            size_t i = 0;
 800343a:	2400      	movs	r4, #0
 800343c:	e07f      	b.n	800353e <Target_Verify+0x16e>
    size_t readcount = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8003442:	a942      	add	r1, sp, #264	@ 0x108
 8003444:	4854      	ldr	r0, [pc, #336]	@ (8003598 <Target_Verify+0x1c8>)
 8003446:	f00a fc95 	bl	800dd74 <f_stat>
    if(res != FR_OK)
 800344a:	b958      	cbnz	r0, 8003464 <Target_Verify+0x94>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 800344c:	2201      	movs	r2, #1
 800344e:	4952      	ldr	r1, [pc, #328]	@ (8003598 <Target_Verify+0x1c8>)
 8003450:	a888      	add	r0, sp, #544	@ 0x220
 8003452:	f00a fa25 	bl	800d8a0 <f_open>
    if(res != FR_OK)
 8003456:	b950      	cbnz	r0, 800346e <Target_Verify+0x9e>
    ihex_set_callback_func((ihex_callback_fp)*Target_VerifyCallback);
 8003458:	4851      	ldr	r0, [pc, #324]	@ (80035a0 <Target_Verify+0x1d0>)
 800345a:	f001 f8cb 	bl	80045f4 <ihex_set_callback_func>
    ihex_reset_state();
 800345e:	f001 f8b7 	bl	80045d0 <ihex_reset_state>
 8003462:	e020      	b.n	80034a6 <Target_Verify+0xd6>
        log_message("f_stat error\n");
 8003464:	484f      	ldr	r0, [pc, #316]	@ (80035a4 <Target_Verify+0x1d4>)
 8003466:	f7ff fb1b 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	e08d      	b.n	800358a <Target_Verify+0x1ba>
        log_message("f_open error\n");
 800346e:	484e      	ldr	r0, [pc, #312]	@ (80035a8 <Target_Verify+0x1d8>)
 8003470:	f7ff fb16 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 8003474:	2001      	movs	r0, #1
 8003476:	e088      	b.n	800358a <Target_Verify+0x1ba>
            log_message("f_read error\n");
 8003478:	484c      	ldr	r0, [pc, #304]	@ (80035ac <Target_Verify+0x1dc>)
 800347a:	f7ff fb11 	bl	8002aa0 <log_message>
            f_close(&file);
 800347e:	a888      	add	r0, sp, #544	@ 0x220
 8003480:	f00a fc63 	bl	800dd4a <f_close>
            return TARGET_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e080      	b.n	800358a <Target_Verify+0x1ba>
            res = f_close(&file);
 8003488:	a888      	add	r0, sp, #544	@ 0x220
 800348a:	f00a fc5e 	bl	800dd4a <f_close>
            if(res != FR_OK)
 800348e:	b908      	cbnz	r0, 8003494 <Target_Verify+0xc4>
    return TARGET_OK;
 8003490:	2000      	movs	r0, #0
        return Target_VerifyHex();
 8003492:	e07a      	b.n	800358a <Target_Verify+0x1ba>
                log_message("f_close error\n");
 8003494:	4846      	ldr	r0, [pc, #280]	@ (80035b0 <Target_Verify+0x1e0>)
 8003496:	f7ff fb03 	bl	8002aa0 <log_message>
                return TARGET_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e075      	b.n	800358a <Target_Verify+0x1ba>
            if (!ihex_parser(fbuf, readcount))
 800349e:	a802      	add	r0, sp, #8
 80034a0:	f001 f8ae 	bl	8004600 <ihex_parser>
 80034a4:	b188      	cbz	r0, 80034ca <Target_Verify+0xfa>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 80034a6:	ab01      	add	r3, sp, #4
 80034a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ac:	a902      	add	r1, sp, #8
 80034ae:	a888      	add	r0, sp, #544	@ 0x220
 80034b0:	f00a fb26 	bl	800db00 <f_read>
        if(res != FR_OK)
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d1df      	bne.n	8003478 <Target_Verify+0xa8>
        if(readcount == 0)
 80034b8:	9901      	ldr	r1, [sp, #4]
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d0e4      	beq.n	8003488 <Target_Verify+0xb8>
            if(readcount < sizeof(fbuf))
 80034be:	29ff      	cmp	r1, #255	@ 0xff
 80034c0:	d8ed      	bhi.n	800349e <Target_Verify+0xce>
                fbuf[readcount] = '\0';
 80034c2:	2300      	movs	r3, #0
 80034c4:	aa02      	add	r2, sp, #8
 80034c6:	5453      	strb	r3, [r2, r1]
 80034c8:	e7e9      	b.n	800349e <Target_Verify+0xce>
                log_message("ihex_parser error\n");
 80034ca:	483a      	ldr	r0, [pc, #232]	@ (80035b4 <Target_Verify+0x1e4>)
 80034cc:	f7ff fae8 	bl	8002aa0 <log_message>
                f_close(&file);
 80034d0:	a888      	add	r0, sp, #544	@ 0x220
 80034d2:	f00a fc3a 	bl	800dd4a <f_close>
                return TARGET_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e057      	b.n	800358a <Target_Verify+0x1ba>
        log_message("f_stat error\n");
 80034da:	4832      	ldr	r0, [pc, #200]	@ (80035a4 <Target_Verify+0x1d4>)
 80034dc:	f7ff fae0 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 80034e0:	2001      	movs	r0, #1
 80034e2:	e052      	b.n	800358a <Target_Verify+0x1ba>
        log_message("f_open error\n");
 80034e4:	4830      	ldr	r0, [pc, #192]	@ (80035a8 <Target_Verify+0x1d8>)
 80034e6:	f7ff fadb 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e04d      	b.n	800358a <Target_Verify+0x1ba>
            log_message("f_read error\n");
 80034ee:	482f      	ldr	r0, [pc, #188]	@ (80035ac <Target_Verify+0x1dc>)
 80034f0:	f7ff fad6 	bl	8002aa0 <log_message>
            f_close(&file);
 80034f4:	a888      	add	r0, sp, #544	@ 0x220
 80034f6:	f00a fc28 	bl	800dd4a <f_close>
            return TARGET_ERROR;
 80034fa:	2001      	movs	r0, #1
 80034fc:	e045      	b.n	800358a <Target_Verify+0x1ba>
            res = f_close(&file);
 80034fe:	a888      	add	r0, sp, #544	@ 0x220
 8003500:	f00a fc23 	bl	800dd4a <f_close>
            if(res != FR_OK)
 8003504:	b908      	cbnz	r0, 800350a <Target_Verify+0x13a>
    return TARGET_OK;
 8003506:	2000      	movs	r0, #0
        {
            /* BIN file exists */
            return Target_VerifyBin();
 8003508:	e03f      	b.n	800358a <Target_Verify+0x1ba>
                log_message("f_close error\n");
 800350a:	4829      	ldr	r0, [pc, #164]	@ (80035b0 <Target_Verify+0x1e0>)
 800350c:	f7ff fac8 	bl	8002aa0 <log_message>
                return TARGET_ERROR;
 8003510:	2001      	movs	r0, #1
 8003512:	e03a      	b.n	800358a <Target_Verify+0x1ba>
                        log_message("Verification failed\n");
 8003514:	4828      	ldr	r0, [pc, #160]	@ (80035b8 <Target_Verify+0x1e8>)
 8003516:	f7ff fac3 	bl	8002aa0 <log_message>
                        f_close(&file);
 800351a:	a888      	add	r0, sp, #544	@ 0x220
 800351c:	f00a fc15 	bl	800dd4a <f_close>
                        return TARGET_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e032      	b.n	800358a <Target_Verify+0x1ba>
                size_t adjusted_chunk_size = (chunk_size / 4) * 4;
 8003524:	4646      	mov	r6, r8
                    if(!Target_VerifyCallback(address + i, &fbuf[i], (uint8_t)adjusted_chunk_size))
 8003526:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 800352a:	ab02      	add	r3, sp, #8
 800352c:	1919      	adds	r1, r3, r4
 800352e:	19e0      	adds	r0, r4, r7
 8003530:	f7ff fefa 	bl	8003328 <Target_VerifyCallback>
 8003534:	b1d8      	cbz	r0, 800356e <Target_Verify+0x19e>
                    i += adjusted_chunk_size;
 8003536:	4434      	add	r4, r6
            while (i < readcount)
 8003538:	9d00      	ldr	r5, [sp, #0]
 800353a:	42a5      	cmp	r5, r4
 800353c:	d91f      	bls.n	800357e <Target_Verify+0x1ae>
                size_t chunk_size = readcount - i;
 800353e:	1b2a      	subs	r2, r5, r4
                if(chunk_size > 16)
 8003540:	2a10      	cmp	r2, #16
 8003542:	d8ef      	bhi.n	8003524 <Target_Verify+0x154>
                if(adjusted_chunk_size == 0)
 8003544:	f032 0603 	bics.w	r6, r2, #3
 8003548:	d1ed      	bne.n	8003526 <Target_Verify+0x156>
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	9301      	str	r3, [sp, #4]
                    memcpy(tmp, &fbuf[i], remaining);
 8003550:	ab02      	add	r3, sp, #8
 8003552:	1919      	adds	r1, r3, r4
 8003554:	a801      	add	r0, sp, #4
 8003556:	f00b fee2 	bl	800f31e <memcpy>
                    if(!Target_VerifyCallback(address + i, tmp, 4))
 800355a:	2204      	movs	r2, #4
 800355c:	eb0d 0102 	add.w	r1, sp, r2
 8003560:	19e0      	adds	r0, r4, r7
 8003562:	f7ff fee1 	bl	8003328 <Target_VerifyCallback>
 8003566:	2800      	cmp	r0, #0
 8003568:	d0d4      	beq.n	8003514 <Target_Verify+0x144>
                    i += remaining;
 800356a:	462c      	mov	r4, r5
 800356c:	e7e4      	b.n	8003538 <Target_Verify+0x168>
                        log_message("Verification failed\n");
 800356e:	4812      	ldr	r0, [pc, #72]	@ (80035b8 <Target_Verify+0x1e8>)
 8003570:	f7ff fa96 	bl	8002aa0 <log_message>
                        f_close(&file);
 8003574:	a888      	add	r0, sp, #544	@ 0x220
 8003576:	f00a fbe8 	bl	800dd4a <f_close>
                        return TARGET_ERROR;
 800357a:	2001      	movs	r0, #1
 800357c:	e005      	b.n	800358a <Target_Verify+0x1ba>
            address += readcount;
 800357e:	442f      	add	r7, r5
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8003580:	e74f      	b.n	8003422 <Target_Verify+0x52>
        }
        else
        {
            /* Neither HEX nor BIN file exists */
            log_message("No firmware file found\n");
 8003582:	480e      	ldr	r0, [pc, #56]	@ (80035bc <Target_Verify+0x1ec>)
 8003584:	f7ff fa8c 	bl	8002aa0 <log_message>
            return TARGET_ERROR;
 8003588:	2001      	movs	r0, #1
        }
    }
}
 800358a:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 800358e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003592:	bf00      	nop
 8003594:	08011dd0 	.word	0x08011dd0
 8003598:	08011aac 	.word	0x08011aac
 800359c:	08011bac 	.word	0x08011bac
 80035a0:	08003329 	.word	0x08003329
 80035a4:	08011abc 	.word	0x08011abc
 80035a8:	08011b68 	.word	0x08011b68
 80035ac:	08011b78 	.word	0x08011b78
 80035b0:	08011b88 	.word	0x08011b88
 80035b4:	08011b98 	.word	0x08011b98
 80035b8:	08011de0 	.word	0x08011de0
 80035bc:	08011d64 	.word	0x08011d64

080035c0 <Target_Protection_Lock>:
}


/* Main function to lock protection */
static bool Target_Protection_Lock(void)
{
 80035c0:	b500      	push	{lr}
 80035c2:	b0c7      	sub	sp, #284	@ 0x11c
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target protection configure.\n");
 80035c4:	4843      	ldr	r0, [pc, #268]	@ (80036d4 <Target_Protection_Lock+0x114>)
 80035c6:	f7ff fa6b 	bl	8002aa0 <log_message>

    /* Check if the protection option file exists */
    res = f_stat(FIRMWARE_PROTECT_OPTION_FILE, &fileInfo);
 80035ca:	4669      	mov	r1, sp
 80035cc:	4842      	ldr	r0, [pc, #264]	@ (80036d8 <Target_Protection_Lock+0x118>)
 80035ce:	f00a fbd1 	bl	800dd74 <f_stat>
    if (res == FR_OK)
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d176      	bne.n	80036c4 <Target_Protection_Lock+0x104>
    {
        log_message("Protection option available.\n");
 80035d6:	4841      	ldr	r0, [pc, #260]	@ (80036dc <Target_Protection_Lock+0x11c>)
 80035d8:	f7ff fa62 	bl	8002aa0 <log_message>

        /* Proceed with protection lock only if the file exists */
        switch(target.TargetFamily)
 80035dc:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <Target_Protection_Lock+0x120>)
 80035de:	7a1b      	ldrb	r3, [r3, #8]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	2b0e      	cmp	r3, #14
 80035e4:	d86a      	bhi.n	80036bc <Target_Protection_Lock+0xfc>
 80035e6:	e8df f003 	tbb	[pc, r3]
 80035ea:	6944      	.short	0x6944
 80035ec:	69086969 	.word	0x69086969
 80035f0:	6969695e 	.word	0x6969695e
 80035f4:	69696969 	.word	0x69696969
 80035f8:	22          	.byte	0x22
 80035f9:	00          	.byte	0x00
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 80035fa:	483a      	ldr	r0, [pc, #232]	@ (80036e4 <Target_Protection_Lock+0x124>)
 80035fc:	f7ff fa50 	bl	8002aa0 <log_message>
    Stm32c0_Flash_Unlock();
 8003600:	f000 fab2 	bl	8003b68 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_OB_Unlock();
 8003604:	f000 fb7a 	bl	8003cfc <Stm32c0_Flash_OB_Unlock>
    Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_1);
 8003608:	20bb      	movs	r0, #187	@ 0xbb
 800360a:	f000 fbc5 	bl	8003d98 <Stm32c0_Flash_OB_Program>
    Stm32c0_Flash_OB_Launch();
 800360e:	f000 fbb5 	bl	8003d7c <Stm32c0_Flash_OB_Launch>
    Target_Connect();
 8003612:	f7ff fa8f 	bl	8002b34 <Target_Connect>
    Stm32c0_Flash_OB_Lock();
 8003616:	f000 fb5d 	bl	8003cd4 <Stm32c0_Flash_OB_Lock>
    Stm32c0_Flash_Lock();
 800361a:	f000 fac3 	bl	8003ba4 <Stm32c0_Flash_Lock>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 800361e:	4832      	ldr	r0, [pc, #200]	@ (80036e8 <Target_Protection_Lock+0x128>)
 8003620:	f7ff f890 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8003624:	b2c1      	uxtb	r1, r0
 8003626:	4831      	ldr	r0, [pc, #196]	@ (80036ec <Target_Protection_Lock+0x12c>)
 8003628:	f7ff fa3a 	bl	8002aa0 <log_message>
        {
            /* STM32C0 */
            case TARGET_STM32C0: return Target_Protection_Lock_STM32C0();
 800362c:	e04d      	b.n	80036ca <Target_Protection_Lock+0x10a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 800362e:	482d      	ldr	r0, [pc, #180]	@ (80036e4 <Target_Protection_Lock+0x124>)
 8003630:	f7ff fa36 	bl	8002aa0 <log_message>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003634:	2001      	movs	r0, #1
 8003636:	f000 fca1 	bl	8003f7c <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 800363a:	2002      	movs	r0, #2
 800363c:	f000 fc9e 	bl	8003f7c <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_OB_Unlock();
 8003640:	f000 fd58 	bl	80040f4 <Stm32h7_Flash_OB_Unlock>
    Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_1);
 8003644:	f44f 403b 	mov.w	r0, #47872	@ 0xbb00
 8003648:	f000 fdc0 	bl	80041cc <Stm32h7_Flash_OB_Program>
    Stm32h7_Flash_OB_Launch();
 800364c:	f000 fd86 	bl	800415c <Stm32h7_Flash_OB_Launch>
    Stm32h7_Flash_OB_Lock();
 8003650:	f000 fd70 	bl	8004134 <Stm32h7_Flash_OB_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8003654:	2002      	movs	r0, #2
 8003656:	f000 fcd5 	bl	8004004 <Stm32h7_Flash_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 800365a:	2001      	movs	r0, #1
 800365c:	f000 fcd2 	bl	8004004 <Stm32h7_Flash_Lock>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 8003660:	4823      	ldr	r0, [pc, #140]	@ (80036f0 <Target_Protection_Lock+0x130>)
 8003662:	f7ff f86f 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8003666:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 800366a:	4820      	ldr	r0, [pc, #128]	@ (80036ec <Target_Protection_Lock+0x12c>)
 800366c:	f7ff fa18 	bl	8002aa0 <log_message>
            case TARGET_STM32H7: return Target_Protection_Lock_STM32H7();
 8003670:	e02b      	b.n	80036ca <Target_Protection_Lock+0x10a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 8003672:	481c      	ldr	r0, [pc, #112]	@ (80036e4 <Target_Protection_Lock+0x124>)
 8003674:	f7ff fa14 	bl	8002aa0 <log_message>
    Stm32u0_Flash_Unlock();
 8003678:	f000 fdc8 	bl	800420c <Stm32u0_Flash_Unlock>
    Stm32u0_Flash_OB_Unlock();
 800367c:	f000 fe90 	bl	80043a0 <Stm32u0_Flash_OB_Unlock>
    Stm32u0_Flash_OB_Program(STM32U0_OB_RDP_LEVEL_1);
 8003680:	20bb      	movs	r0, #187	@ 0xbb
 8003682:	f000 fedb 	bl	800443c <Stm32u0_Flash_OB_Program>
    Stm32u0_Flash_OB_Launch();
 8003686:	f000 fecb 	bl	8004420 <Stm32u0_Flash_OB_Launch>
    Target_Connect();
 800368a:	f7ff fa53 	bl	8002b34 <Target_Connect>
    Stm32u0_Flash_OB_Lock();
 800368e:	f000 fe73 	bl	8004378 <Stm32u0_Flash_OB_Lock>
    Stm32u0_Flash_Lock();
 8003692:	f000 fdd9 	bl	8004248 <Stm32u0_Flash_Lock>
    Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR);
 8003696:	4817      	ldr	r0, [pc, #92]	@ (80036f4 <Target_Protection_Lock+0x134>)
 8003698:	f7ff f854 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32U0_FLASH_OPTR_RDP_Msk);
 800369c:	b2c1      	uxtb	r1, r0
 800369e:	4813      	ldr	r0, [pc, #76]	@ (80036ec <Target_Protection_Lock+0x12c>)
 80036a0:	f7ff f9fe 	bl	8002aa0 <log_message>
            case TARGET_STM32U0: return Target_Protection_Lock_STM32U0();
 80036a4:	e011      	b.n	80036ca <Target_Protection_Lock+0x10a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 80036a6:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <Target_Protection_Lock+0x124>)
 80036a8:	f7ff f9fa 	bl	8002aa0 <log_message>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 80036ac:	480e      	ldr	r0, [pc, #56]	@ (80036e8 <Target_Protection_Lock+0x128>)
 80036ae:	f7ff f849 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 80036b2:	b2c1      	uxtb	r1, r0
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <Target_Protection_Lock+0x12c>)
 80036b6:	f7ff f9f3 	bl	8002aa0 <log_message>
            case TARGET_STM32G0: return Target_Protection_Lock_STM32G0();
 80036ba:	e006      	b.n	80036ca <Target_Protection_Lock+0x10a>
            default:
                log_message("Target family not supported for protection lock.\n");
 80036bc:	480e      	ldr	r0, [pc, #56]	@ (80036f8 <Target_Protection_Lock+0x138>)
 80036be:	f7ff f9ef 	bl	8002aa0 <log_message>
                break;
 80036c2:	e002      	b.n	80036ca <Target_Protection_Lock+0x10a>
        }
    }
    else
    {
        log_message("Protection option file not found. Skipping protection lock.\n");
 80036c4:	480d      	ldr	r0, [pc, #52]	@ (80036fc <Target_Protection_Lock+0x13c>)
 80036c6:	f7ff f9eb 	bl	8002aa0 <log_message>
    }

    return TARGET_OK;
}
 80036ca:	2000      	movs	r0, #0
 80036cc:	b047      	add	sp, #284	@ 0x11c
 80036ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80036d2:	bf00      	nop
 80036d4:	08011df8 	.word	0x08011df8
 80036d8:	08011e18 	.word	0x08011e18
 80036dc:	08011e24 	.word	0x08011e24
 80036e0:	20004198 	.word	0x20004198
 80036e4:	08011e44 	.word	0x08011e44
 80036e8:	1fff7800 	.word	0x1fff7800
 80036ec:	08011e94 	.word	0x08011e94
 80036f0:	5200201c 	.word	0x5200201c
 80036f4:	40022020 	.word	0x40022020
 80036f8:	08011eac 	.word	0x08011eac
 80036fc:	08011ee0 	.word	0x08011ee0

08003700 <Target_ErrorHandle>:

static void Target_ErrorHandle(bool status, const char *errorMessage)
{
    if (status != TARGET_OK)
 8003700:	b900      	cbnz	r0, 8003704 <Target_ErrorHandle+0x4>
 8003702:	4770      	bx	lr
{
 8003704:	b508      	push	{r3, lr}
    {
        log_message("%s\n", errorMessage);
 8003706:	4805      	ldr	r0, [pc, #20]	@ (800371c <Target_ErrorHandle+0x1c>)
 8003708:	f7ff f9ca 	bl	8002aa0 <log_message>
        LED_SetState(TARGET_LED_STAT_FAILED);
 800370c:	2003      	movs	r0, #3
 800370e:	f001 f981 	bl	8004a14 <LED_SetState>
        Buzzer_SetState(BUZZER_PROG_FAILED);
 8003712:	2003      	movs	r0, #3
 8003714:	f000 ff1a 	bl	800454c <Buzzer_SetState>
    }
}
 8003718:	bd08      	pop	{r3, pc}
 800371a:	bf00      	nop
 800371c:	080122d0 	.word	0x080122d0

08003720 <Target_MainLoop>:
          break;
  }
}

void Target_MainLoop(void)
{
 8003720:	b538      	push	{r3, r4, r5, lr}

	int u32_StartTime = 0;
	int u32_ElasedTime = 0;

	/* Check button pushed */
	Button_Update();
 8003722:	f000 feb7 	bl	8004494 <Button_Update>
	//FileTransferCheck();

	/* Button programming start */

#ifndef DEBUG_USE_AGING_TEST
	if(Button_WasPressed() == true)
 8003726:	f000 feeb 	bl	8004500 <Button_WasPressed>
 800372a:	2801      	cmp	r0, #1
 800372c:	d000      	beq.n	8003730 <Target_MainLoop+0x10>
		u32_ElasedTime = HAL_GetTick() - u32_StartTime;
		log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
		LED_SetState(TARGET_LED_STAT_COMPLETE);
		Buzzer_SetState(BUZZER_PROG_COMPLETE);
  }
}
 800372e:	bd38      	pop	{r3, r4, r5, pc}
		if(b_USBConnection == false)
 8003730:	4bb0      	ldr	r3, [pc, #704]	@ (80039f4 <Target_MainLoop+0x2d4>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b353      	cbz	r3, 800378c <Target_MainLoop+0x6c>
		LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 8003736:	2001      	movs	r0, #1
 8003738:	f001 f96c 	bl	8004a14 <LED_SetState>
		Buzzer_SetState(BUZZER_PROG_START);
 800373c:	2001      	movs	r0, #1
 800373e:	f000 ff05 	bl	800454c <Buzzer_SetState>
		u32_StartTime = HAL_GetTick();
 8003742:	f001 fec9 	bl	80054d8 <HAL_GetTick>
 8003746:	4605      	mov	r5, r0
		status = Target_Connect();
 8003748:	f7ff f9f4 	bl	8002b34 <Target_Connect>
 800374c:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Connect Error");
 800374e:	49aa      	ldr	r1, [pc, #680]	@ (80039f8 <Target_MainLoop+0x2d8>)
 8003750:	f7ff ffd6 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003754:	2c00      	cmp	r4, #0
 8003756:	d1ea      	bne.n	800372e <Target_MainLoop+0xe>
    log_message("Target protection check before flash programming.\n");
 8003758:	48a8      	ldr	r0, [pc, #672]	@ (80039fc <Target_MainLoop+0x2dc>)
 800375a:	f7ff f9a1 	bl	8002aa0 <log_message>
    switch(target.TargetFamily)
 800375e:	4ba8      	ldr	r3, [pc, #672]	@ (8003a00 <Target_MainLoop+0x2e0>)
 8003760:	7a1b      	ldrb	r3, [r3, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	2b0e      	cmp	r3, #14
 8003766:	f200 80e5 	bhi.w	8003934 <Target_MainLoop+0x214>
 800376a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800376e:	00b2      	.short	0x00b2
 8003770:	00e300e3 	.word	0x00e300e3
 8003774:	001600e3 	.word	0x001600e3
 8003778:	00eb00e3 	.word	0x00eb00e3
 800377c:	00e300e3 	.word	0x00e300e3
 8003780:	00e300e3 	.word	0x00e300e3
 8003784:	00e300e3 	.word	0x00e300e3
 8003788:	007600e3 	.word	0x007600e3
			USBD_DeInit(&hUsbDeviceFS);
 800378c:	489d      	ldr	r0, [pc, #628]	@ (8003a04 <Target_MainLoop+0x2e4>)
 800378e:	f007 ffc1 	bl	800b714 <USBD_DeInit>
			b_USBConnection = true;
 8003792:	4b98      	ldr	r3, [pc, #608]	@ (80039f4 <Target_MainLoop+0x2d4>)
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e7cd      	b.n	8003736 <Target_MainLoop+0x16>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR) & STM32C0_FLASH_OPTR_RDP_Msk;
 800379a:	489b      	ldr	r0, [pc, #620]	@ (8003a08 <Target_MainLoop+0x2e8>)
 800379c:	f7fe ffd2 	bl	8002744 <readMem>
 80037a0:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 80037a2:	4621      	mov	r1, r4
 80037a4:	4899      	ldr	r0, [pc, #612]	@ (8003a0c <Target_MainLoop+0x2ec>)
 80037a6:	f7ff f97b 	bl	8002aa0 <log_message>
    if(Option_Status == STM32C0_OB_RDP_LEVEL_1)
 80037aa:	2cbb      	cmp	r4, #187	@ 0xbb
 80037ac:	d034      	beq.n	8003818 <Target_MainLoop+0xf8>
    else if(Option_Status == STM32C0_OB_RDP_LEVEL_0)
 80037ae:	2caa      	cmp	r4, #170	@ 0xaa
 80037b0:	d14f      	bne.n	8003852 <Target_MainLoop+0x132>
        log_message("No need to configure RDP Level.\n");
 80037b2:	4897      	ldr	r0, [pc, #604]	@ (8003a10 <Target_MainLoop+0x2f0>)
 80037b4:	f7ff f974 	bl	8002aa0 <log_message>
		Target_ErrorHandle(status, "Target Protection Unlock Error");
 80037b8:	4996      	ldr	r1, [pc, #600]	@ (8003a14 <Target_MainLoop+0x2f4>)
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff ffa0 	bl	8003700 <Target_ErrorHandle>
    uint32_t startAddr = Target_GetFlashStartAddress();
 80037c0:	f7ff fbd6 	bl	8002f70 <Target_GetFlashStartAddress>
 80037c4:	4604      	mov	r4, r0
    if ((readMem(startAddr) == 0xFFFFFFFF) &&
 80037c6:	f7fe ffbd 	bl	8002744 <readMem>
 80037ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037ce:	d106      	bne.n	80037de <Target_MainLoop+0xbe>
        (readMem(startAddr + 4) == 0xFFFFFFFF))
 80037d0:	1d20      	adds	r0, r4, #4
 80037d2:	f7fe ffb7 	bl	8002744 <readMem>
    if ((readMem(startAddr) == 0xFFFFFFFF) &&
 80037d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037da:	f000 80b8 	beq.w	800394e <Target_MainLoop+0x22e>
    	log_message("Flash empty check: Not empty.\n");
 80037de:	488e      	ldr	r0, [pc, #568]	@ (8003a18 <Target_MainLoop+0x2f8>)
 80037e0:	f7ff f95e 	bl	8002aa0 <log_message>
    log_message("Target MassErase\n");
 80037e4:	488d      	ldr	r0, [pc, #564]	@ (8003a1c <Target_MainLoop+0x2fc>)
 80037e6:	f7ff f95b 	bl	8002aa0 <log_message>
    switch(target.TargetFamily)
 80037ea:	4b85      	ldr	r3, [pc, #532]	@ (8003a00 <Target_MainLoop+0x2e0>)
 80037ec:	7a1b      	ldrb	r3, [r3, #8]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	2b0e      	cmp	r3, #14
 80037f2:	f200 812d 	bhi.w	8003a50 <Target_MainLoop+0x330>
 80037f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80037fa:	00d1      	.short	0x00d1
 80037fc:	012b012b 	.word	0x012b012b
 8003800:	00c3012b 	.word	0x00c3012b
 8003804:	00c9012b 	.word	0x00c9012b
 8003808:	012b012b 	.word	0x012b012b
 800380c:	012b012b 	.word	0x012b012b
 8003810:	012b012b 	.word	0x012b012b
 8003814:	00d8012b 	.word	0x00d8012b
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8003818:	4881      	ldr	r0, [pc, #516]	@ (8003a20 <Target_MainLoop+0x300>)
 800381a:	f7ff f941 	bl	8002aa0 <log_message>
        Stm32c0_Flash_Unlock();
 800381e:	f000 f9a3 	bl	8003b68 <Stm32c0_Flash_Unlock>
        Stm32c0_Flash_OB_Unlock();
 8003822:	f000 fa6b 	bl	8003cfc <Stm32c0_Flash_OB_Unlock>
        Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_0);
 8003826:	20aa      	movs	r0, #170	@ 0xaa
 8003828:	f000 fab6 	bl	8003d98 <Stm32c0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 800382c:	487d      	ldr	r0, [pc, #500]	@ (8003a24 <Target_MainLoop+0x304>)
 800382e:	f7ff f937 	bl	8002aa0 <log_message>
        Stm32c0_Flash_OB_Launch();
 8003832:	f000 faa3 	bl	8003d7c <Stm32c0_Flash_OB_Launch>
        Target_Connect();
 8003836:	f7ff f97d 	bl	8002b34 <Target_Connect>
        Stm32c0_Flash_OB_Lock();
 800383a:	f000 fa4b 	bl	8003cd4 <Stm32c0_Flash_OB_Lock>
        Stm32c0_Flash_Lock();
 800383e:	f000 f9b1 	bl	8003ba4 <Stm32c0_Flash_Lock>
        Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 8003842:	4871      	ldr	r0, [pc, #452]	@ (8003a08 <Target_MainLoop+0x2e8>)
 8003844:	f7fe ff7e 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8003848:	b2c1      	uxtb	r1, r0
 800384a:	4877      	ldr	r0, [pc, #476]	@ (8003a28 <Target_MainLoop+0x308>)
 800384c:	f7ff f928 	bl	8002aa0 <log_message>
 8003850:	e7b2      	b.n	80037b8 <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 8003852:	4876      	ldr	r0, [pc, #472]	@ (8003a2c <Target_MainLoop+0x30c>)
 8003854:	f7ff f924 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 8003858:	e06f      	b.n	800393a <Target_MainLoop+0x21a>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_RDP_Msk;
 800385a:	4875      	ldr	r0, [pc, #468]	@ (8003a30 <Target_MainLoop+0x310>)
 800385c:	f7fe ff72 	bl	8002744 <readMem>
 8003860:	f400 447f 	and.w	r4, r0, #65280	@ 0xff00
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 8003864:	4621      	mov	r1, r4
 8003866:	4869      	ldr	r0, [pc, #420]	@ (8003a0c <Target_MainLoop+0x2ec>)
 8003868:	f7ff f91a 	bl	8002aa0 <log_message>
    if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_1)
 800386c:	f5b4 4f3b 	cmp.w	r4, #47872	@ 0xbb00
 8003870:	d006      	beq.n	8003880 <Target_MainLoop+0x160>
    else if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_0)
 8003872:	f5b4 4f2a 	cmp.w	r4, #43520	@ 0xaa00
 8003876:	d128      	bne.n	80038ca <Target_MainLoop+0x1aa>
        log_message("No need to configure RDP Level.\n");
 8003878:	4865      	ldr	r0, [pc, #404]	@ (8003a10 <Target_MainLoop+0x2f0>)
 800387a:	f7ff f911 	bl	8002aa0 <log_message>
 800387e:	e79b      	b.n	80037b8 <Target_MainLoop+0x98>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8003880:	4867      	ldr	r0, [pc, #412]	@ (8003a20 <Target_MainLoop+0x300>)
 8003882:	f7ff f90d 	bl	8002aa0 <log_message>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fb78 	bl	8003f7c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 800388c:	2002      	movs	r0, #2
 800388e:	f000 fb75 	bl	8003f7c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_OB_Unlock();
 8003892:	f000 fc2f 	bl	80040f4 <Stm32h7_Flash_OB_Unlock>
        Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_0);
 8003896:	f44f 402a 	mov.w	r0, #43520	@ 0xaa00
 800389a:	f000 fc97 	bl	80041cc <Stm32h7_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 800389e:	4861      	ldr	r0, [pc, #388]	@ (8003a24 <Target_MainLoop+0x304>)
 80038a0:	f7ff f8fe 	bl	8002aa0 <log_message>
        Stm32h7_Flash_OB_Launch();
 80038a4:	f000 fc5a 	bl	800415c <Stm32h7_Flash_OB_Launch>
        Stm32h7_Flash_OB_Lock();
 80038a8:	f000 fc44 	bl	8004134 <Stm32h7_Flash_OB_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80038ac:	2001      	movs	r0, #1
 80038ae:	f000 fba9 	bl	8004004 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 80038b2:	2002      	movs	r0, #2
 80038b4:	f000 fba6 	bl	8004004 <Stm32h7_Flash_Lock>
        Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 80038b8:	485d      	ldr	r0, [pc, #372]	@ (8003a30 <Target_MainLoop+0x310>)
 80038ba:	f7fe ff43 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 80038be:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 80038c2:	4859      	ldr	r0, [pc, #356]	@ (8003a28 <Target_MainLoop+0x308>)
 80038c4:	f7ff f8ec 	bl	8002aa0 <log_message>
 80038c8:	e776      	b.n	80037b8 <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 80038ca:	4858      	ldr	r0, [pc, #352]	@ (8003a2c <Target_MainLoop+0x30c>)
 80038cc:	f7ff f8e8 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 80038d0:	e033      	b.n	800393a <Target_MainLoop+0x21a>
    Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR) & STM32U0_FLASH_OPTR_RDP_Msk;
 80038d2:	4858      	ldr	r0, [pc, #352]	@ (8003a34 <Target_MainLoop+0x314>)
 80038d4:	f7fe ff36 	bl	8002744 <readMem>
 80038d8:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 80038da:	4621      	mov	r1, r4
 80038dc:	484b      	ldr	r0, [pc, #300]	@ (8003a0c <Target_MainLoop+0x2ec>)
 80038de:	f7ff f8df 	bl	8002aa0 <log_message>
    if(Option_Status == STM32U0_OB_RDP_LEVEL_1)
 80038e2:	2cbb      	cmp	r4, #187	@ 0xbb
 80038e4:	d005      	beq.n	80038f2 <Target_MainLoop+0x1d2>
    else if(Option_Status == STM32U0_OB_RDP_LEVEL_0)
 80038e6:	2caa      	cmp	r4, #170	@ 0xaa
 80038e8:	d120      	bne.n	800392c <Target_MainLoop+0x20c>
        log_message("No need to configure RDP Level.\n");
 80038ea:	4849      	ldr	r0, [pc, #292]	@ (8003a10 <Target_MainLoop+0x2f0>)
 80038ec:	f7ff f8d8 	bl	8002aa0 <log_message>
 80038f0:	e762      	b.n	80037b8 <Target_MainLoop+0x98>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80038f2:	484b      	ldr	r0, [pc, #300]	@ (8003a20 <Target_MainLoop+0x300>)
 80038f4:	f7ff f8d4 	bl	8002aa0 <log_message>
        Stm32u0_Flash_Unlock();
 80038f8:	f000 fc88 	bl	800420c <Stm32u0_Flash_Unlock>
        Stm32u0_Flash_OB_Unlock();
 80038fc:	f000 fd50 	bl	80043a0 <Stm32u0_Flash_OB_Unlock>
        Stm32u0_Flash_OB_Program(STM32U0_OB_RDP_LEVEL_0);
 8003900:	20aa      	movs	r0, #170	@ 0xaa
 8003902:	f000 fd9b 	bl	800443c <Stm32u0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 8003906:	4847      	ldr	r0, [pc, #284]	@ (8003a24 <Target_MainLoop+0x304>)
 8003908:	f7ff f8ca 	bl	8002aa0 <log_message>
        Stm32u0_Flash_OB_Launch();
 800390c:	f000 fd88 	bl	8004420 <Stm32u0_Flash_OB_Launch>
        Target_Connect();
 8003910:	f7ff f910 	bl	8002b34 <Target_Connect>
        Stm32u0_Flash_OB_Lock();
 8003914:	f000 fd30 	bl	8004378 <Stm32u0_Flash_OB_Lock>
        Stm32u0_Flash_Lock();
 8003918:	f000 fc96 	bl	8004248 <Stm32u0_Flash_Lock>
        Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR);
 800391c:	4845      	ldr	r0, [pc, #276]	@ (8003a34 <Target_MainLoop+0x314>)
 800391e:	f7fe ff11 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32U0_FLASH_OPTR_RDP_Msk);
 8003922:	b2c1      	uxtb	r1, r0
 8003924:	4840      	ldr	r0, [pc, #256]	@ (8003a28 <Target_MainLoop+0x308>)
 8003926:	f7ff f8bb 	bl	8002aa0 <log_message>
 800392a:	e745      	b.n	80037b8 <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 800392c:	483f      	ldr	r0, [pc, #252]	@ (8003a2c <Target_MainLoop+0x30c>)
 800392e:	f7ff f8b7 	bl	8002aa0 <log_message>
        return TARGET_ERROR;
 8003932:	e002      	b.n	800393a <Target_MainLoop+0x21a>
            log_message("Target family not supported for protection unlock.\n");
 8003934:	4840      	ldr	r0, [pc, #256]	@ (8003a38 <Target_MainLoop+0x318>)
 8003936:	f7ff f8b3 	bl	8002aa0 <log_message>
		Target_ErrorHandle(status, "Target Protection Unlock Error");
 800393a:	4936      	ldr	r1, [pc, #216]	@ (8003a14 <Target_MainLoop+0x2f4>)
 800393c:	2001      	movs	r0, #1
 800393e:	f7ff fedf 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003942:	e6f4      	b.n	800372e <Target_MainLoop+0xe>
		Target_ErrorHandle(status, "Target Protection Unlock Error");
 8003944:	4933      	ldr	r1, [pc, #204]	@ (8003a14 <Target_MainLoop+0x2f4>)
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff feda 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 800394c:	e738      	b.n	80037c0 <Target_MainLoop+0xa0>
    	log_message("Flash empty check: Empty.\n");
 800394e:	483b      	ldr	r0, [pc, #236]	@ (8003a3c <Target_MainLoop+0x31c>)
 8003950:	f7ff f8a6 	bl	8002aa0 <log_message>
			log_message("Flash is empty. Skipping mass erase.\n");
 8003954:	483a      	ldr	r0, [pc, #232]	@ (8003a40 <Target_MainLoop+0x320>)
 8003956:	f7ff f8a3 	bl	8002aa0 <log_message>
  log_message("Target flash memory global unlock before flash programming.\n");
 800395a:	483a      	ldr	r0, [pc, #232]	@ (8003a44 <Target_MainLoop+0x324>)
 800395c:	f7ff f8a0 	bl	8002aa0 <log_message>
  switch(target.TargetFamily)
 8003960:	4b27      	ldr	r3, [pc, #156]	@ (8003a00 <Target_MainLoop+0x2e0>)
 8003962:	7a1b      	ldrb	r3, [r3, #8]
 8003964:	3b01      	subs	r3, #1
 8003966:	2b0e      	cmp	r3, #14
 8003968:	f200 80a0 	bhi.w	8003aac <Target_MainLoop+0x38c>
 800396c:	e8df f003 	tbb	[pc, r3]
 8003970:	9e9e9e8c 	.word	0x9e9e9e8c
 8003974:	9e7a9e78 	.word	0x9e7a9e78
 8003978:	9e9e9e9e 	.word	0x9e9e9e9e
 800397c:	9e9e      	.short	0x9e9e
 800397e:	8f          	.byte	0x8f
 800397f:	00          	.byte	0x00
    Stm32c0_Flash_Unlock();
 8003980:	f000 f8f2 	bl	8003b68 <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_MassErase();
 8003984:	f000 f95e 	bl	8003c44 <Stm32c0_Flash_MassErase>
    Stm32c0_Flash_Lock();
 8003988:	f000 f90c 	bl	8003ba4 <Stm32c0_Flash_Lock>
    log_message("Target MassErase Done.\n");
 800398c:	482e      	ldr	r0, [pc, #184]	@ (8003a48 <Target_MainLoop+0x328>)
 800398e:	f7ff f887 	bl	8002aa0 <log_message>
			Target_ErrorHandle(status, "Target MassErase Error");
 8003992:	492e      	ldr	r1, [pc, #184]	@ (8003a4c <Target_MainLoop+0x32c>)
 8003994:	2000      	movs	r0, #0
 8003996:	f7ff feb3 	bl	8003700 <Target_ErrorHandle>
			if (status != TARGET_OK) return;
 800399a:	e7de      	b.n	800395a <Target_MainLoop+0x23a>
    Stm32u0_Flash_Unlock();
 800399c:	f000 fc36 	bl	800420c <Stm32u0_Flash_Unlock>
    Stm32u0_Flash_MassErase();
 80039a0:	f000 fca2 	bl	80042e8 <Stm32u0_Flash_MassErase>
    Stm32u0_Flash_Lock();
 80039a4:	f000 fc50 	bl	8004248 <Stm32u0_Flash_Lock>
}
 80039a8:	e7f0      	b.n	800398c <Target_MainLoop+0x26c>
        case TARGET_STM32H7: Target_MassErase_STM32H7(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK); break;
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <Target_MainLoop+0x2e0>)
    if (isDualBank)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d114      	bne.n	80039dc <Target_MainLoop+0x2bc>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f000 fae2 	bl	8003f7c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 80039b8:	2002      	movs	r0, #2
 80039ba:	f000 fadf 	bl	8003f7c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 80039be:	2101      	movs	r1, #1
 80039c0:	2030      	movs	r0, #48	@ 0x30
 80039c2:	f000 fa5f 	bl	8003e84 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_2);
 80039c6:	2102      	movs	r1, #2
 80039c8:	2030      	movs	r0, #48	@ 0x30
 80039ca:	f000 fa5b 	bl	8003e84 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f000 fb18 	bl	8004004 <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 80039d4:	2002      	movs	r0, #2
 80039d6:	f000 fb15 	bl	8004004 <Stm32h7_Flash_Lock>
 80039da:	e7d7      	b.n	800398c <Target_MainLoop+0x26c>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 80039dc:	2001      	movs	r0, #1
 80039de:	f000 facd 	bl	8003f7c <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 80039e2:	2101      	movs	r1, #1
 80039e4:	2030      	movs	r0, #48	@ 0x30
 80039e6:	f000 fa4d 	bl	8003e84 <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 80039ea:	2001      	movs	r0, #1
 80039ec:	f000 fb0a 	bl	8004004 <Stm32h7_Flash_Lock>
 80039f0:	e7cc      	b.n	800398c <Target_MainLoop+0x26c>
 80039f2:	bf00      	nop
 80039f4:	20004195 	.word	0x20004195
 80039f8:	08011f20 	.word	0x08011f20
 80039fc:	08011f38 	.word	0x08011f38
 8003a00:	20004198 	.word	0x20004198
 8003a04:	200047f4 	.word	0x200047f4
 8003a08:	1fff7800 	.word	0x1fff7800
 8003a0c:	08011f6c 	.word	0x08011f6c
 8003a10:	08011ff0 	.word	0x08011ff0
 8003a14:	08012074 	.word	0x08012074
 8003a18:	080120d8 	.word	0x080120d8
 8003a1c:	080120f8 	.word	0x080120f8
 8003a20:	08011f8c 	.word	0x08011f8c
 8003a24:	08011fd8 	.word	0x08011fd8
 8003a28:	08011e94 	.word	0x08011e94
 8003a2c:	08012014 	.word	0x08012014
 8003a30:	5200201c 	.word	0x5200201c
 8003a34:	40022020 	.word	0x40022020
 8003a38:	08012040 	.word	0x08012040
 8003a3c:	08012094 	.word	0x08012094
 8003a40:	080120b0 	.word	0x080120b0
 8003a44:	08012168 	.word	0x08012168
 8003a48:	08012150 	.word	0x08012150
 8003a4c:	08012138 	.word	0x08012138
            log_message("Unsupported Target Family for Mass Erase\n");
 8003a50:	483a      	ldr	r0, [pc, #232]	@ (8003b3c <Target_MainLoop+0x41c>)
 8003a52:	f7ff f825 	bl	8002aa0 <log_message>
			Target_ErrorHandle(status, "Target MassErase Error");
 8003a56:	493a      	ldr	r1, [pc, #232]	@ (8003b40 <Target_MainLoop+0x420>)
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7ff fe51 	bl	8003700 <Target_ErrorHandle>
			if (status != TARGET_OK) return;
 8003a5e:	e666      	b.n	800372e <Target_MainLoop+0xe>
    	  Stm32c0_Flash_Unlock();
 8003a60:	f000 f882 	bl	8003b68 <Stm32c0_Flash_Unlock>
		status = Target_Program();
 8003a64:	f7ff fa9a 	bl	8002f9c <Target_Program>
 8003a68:	4604      	mov	r4, r0
  log_message("Target flash memory global lock after flash programming.\n");
 8003a6a:	4836      	ldr	r0, [pc, #216]	@ (8003b44 <Target_MainLoop+0x424>)
 8003a6c:	f7ff f818 	bl	8002aa0 <log_message>
  switch(target.TargetFamily)
 8003a70:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <Target_MainLoop+0x428>)
 8003a72:	7a1b      	ldrb	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d01d      	beq.n	8003ab4 <Target_MainLoop+0x394>
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d050      	beq.n	8003b1e <Target_MainLoop+0x3fe>
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d04b      	beq.n	8003b18 <Target_MainLoop+0x3f8>
          log_message("Not implemented.\n");
 8003a80:	4832      	ldr	r0, [pc, #200]	@ (8003b4c <Target_MainLoop+0x42c>)
 8003a82:	f7ff f80d 	bl	8002aa0 <log_message>
          break;
 8003a86:	e017      	b.n	8003ab8 <Target_MainLoop+0x398>
    	  Stm32u0_Flash_Unlock();
 8003a88:	f000 fbc0 	bl	800420c <Stm32u0_Flash_Unlock>
    	  break;
 8003a8c:	e7ea      	b.n	8003a64 <Target_MainLoop+0x344>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <Target_MainLoop+0x428>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d003      	beq.n	8003a9e <Target_MainLoop+0x37e>
				Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003a96:	2001      	movs	r0, #1
 8003a98:	f000 fa70 	bl	8003f7c <Stm32h7_Flash_Unlock>
 8003a9c:	e7e2      	b.n	8003a64 <Target_MainLoop+0x344>
      			Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f000 fa6c 	bl	8003f7c <Stm32h7_Flash_Unlock>
				Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8003aa4:	2002      	movs	r0, #2
 8003aa6:	f000 fa69 	bl	8003f7c <Stm32h7_Flash_Unlock>
 8003aaa:	e7db      	b.n	8003a64 <Target_MainLoop+0x344>
          log_message("Not implemented.\n");
 8003aac:	4827      	ldr	r0, [pc, #156]	@ (8003b4c <Target_MainLoop+0x42c>)
 8003aae:	f7fe fff7 	bl	8002aa0 <log_message>
          break;
 8003ab2:	e7d7      	b.n	8003a64 <Target_MainLoop+0x344>
      case TARGET_STM32C0: Stm32c0_Flash_Lock(); break;
 8003ab4:	f000 f876 	bl	8003ba4 <Stm32c0_Flash_Lock>
		Target_ErrorHandle(status, "Target Program Error");
 8003ab8:	4925      	ldr	r1, [pc, #148]	@ (8003b50 <Target_MainLoop+0x430>)
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff fe20 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003ac0:	2c00      	cmp	r4, #0
 8003ac2:	f47f ae34 	bne.w	800372e <Target_MainLoop+0xe>
		status = Target_Verify();
 8003ac6:	f7ff fc83 	bl	80033d0 <Target_Verify>
 8003aca:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Verify Error");
 8003acc:	4921      	ldr	r1, [pc, #132]	@ (8003b54 <Target_MainLoop+0x434>)
 8003ace:	f7ff fe17 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003ad2:	2c00      	cmp	r4, #0
 8003ad4:	f47f ae2b 	bne.w	800372e <Target_MainLoop+0xe>
		status = Target_Protection_Lock();
 8003ad8:	f7ff fd72 	bl	80035c0 <Target_Protection_Lock>
 8003adc:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Protection Lock Error");
 8003ade:	491e      	ldr	r1, [pc, #120]	@ (8003b58 <Target_MainLoop+0x438>)
 8003ae0:	f7ff fe0e 	bl	8003700 <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	f47f ae22 	bne.w	800372e <Target_MainLoop+0xe>
		log_message("Target program completed\n");
 8003aea:	481c      	ldr	r0, [pc, #112]	@ (8003b5c <Target_MainLoop+0x43c>)
 8003aec:	f7fe ffd8 	bl	8002aa0 <log_message>
		log_message("Target Application Start!\n");
 8003af0:	481b      	ldr	r0, [pc, #108]	@ (8003b60 <Target_MainLoop+0x440>)
 8003af2:	f7fe ffd5 	bl	8002aa0 <log_message>
		resetTarget();
 8003af6:	f7fe fe43 	bl	8002780 <resetTarget>
		hardResetTarget();
 8003afa:	f7fe fe0f 	bl	800271c <hardResetTarget>
		u32_ElasedTime = HAL_GetTick() - u32_StartTime;
 8003afe:	f001 fceb 	bl	80054d8 <HAL_GetTick>
		log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
 8003b02:	1b41      	subs	r1, r0, r5
 8003b04:	4817      	ldr	r0, [pc, #92]	@ (8003b64 <Target_MainLoop+0x444>)
 8003b06:	f7fe ffcb 	bl	8002aa0 <log_message>
		LED_SetState(TARGET_LED_STAT_COMPLETE);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f000 ff82 	bl	8004a14 <LED_SetState>
		Buzzer_SetState(BUZZER_PROG_COMPLETE);
 8003b10:	2002      	movs	r0, #2
 8003b12:	f000 fd1b 	bl	800454c <Buzzer_SetState>
 8003b16:	e60a      	b.n	800372e <Target_MainLoop+0xe>
      case TARGET_STM32U0: Stm32u0_Flash_Lock(); break;
 8003b18:	f000 fb96 	bl	8004248 <Stm32u0_Flash_Lock>
 8003b1c:	e7cc      	b.n	8003ab8 <Target_MainLoop+0x398>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <Target_MainLoop+0x428>)
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d003      	beq.n	8003b2e <Target_MainLoop+0x40e>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f000 fa6c 	bl	8004004 <Stm32h7_Flash_Lock>
 8003b2c:	e7c4      	b.n	8003ab8 <Target_MainLoop+0x398>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f000 fa68 	bl	8004004 <Stm32h7_Flash_Lock>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8003b34:	2002      	movs	r0, #2
 8003b36:	f000 fa65 	bl	8004004 <Stm32h7_Flash_Lock>
 8003b3a:	e7bd      	b.n	8003ab8 <Target_MainLoop+0x398>
 8003b3c:	0801210c 	.word	0x0801210c
 8003b40:	08012138 	.word	0x08012138
 8003b44:	080121bc 	.word	0x080121bc
 8003b48:	20004198 	.word	0x20004198
 8003b4c:	080121a8 	.word	0x080121a8
 8003b50:	080121f8 	.word	0x080121f8
 8003b54:	08012210 	.word	0x08012210
 8003b58:	08012224 	.word	0x08012224
 8003b5c:	08012244 	.word	0x08012244
 8003b60:	08012260 	.word	0x08012260
 8003b64:	0801227c 	.word	0x0801227c

08003b68 <Stm32c0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Unlock(void)
{
 8003b68:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8003b6a:	480a      	ldr	r0, [pc, #40]	@ (8003b94 <Stm32c0_Flash_Unlock+0x2c>)
 8003b6c:	f7fe fdea 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003b70:	2800      	cmp	r0, #0
 8003b72:	db01      	blt.n	8003b78 <Stm32c0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8003b74:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8003b76:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY1);
 8003b78:	4c07      	ldr	r4, [pc, #28]	@ (8003b98 <Stm32c0_Flash_Unlock+0x30>)
 8003b7a:	4908      	ldr	r1, [pc, #32]	@ (8003b9c <Stm32c0_Flash_Unlock+0x34>)
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7fe fdf3 	bl	8002768 <writeMem>
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY2);
 8003b82:	4907      	ldr	r1, [pc, #28]	@ (8003ba0 <Stm32c0_Flash_Unlock+0x38>)
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7fe fdef 	bl	8002768 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8003b8a:	4802      	ldr	r0, [pc, #8]	@ (8003b94 <Stm32c0_Flash_Unlock+0x2c>)
 8003b8c:	f7fe fdda 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 8003b90:	0fc0      	lsrs	r0, r0, #31
 8003b92:	e7f0      	b.n	8003b76 <Stm32c0_Flash_Unlock+0xe>
 8003b94:	40022014 	.word	0x40022014
 8003b98:	40022008 	.word	0x40022008
 8003b9c:	45670123 	.word	0x45670123
 8003ba0:	cdef89ab 	.word	0xcdef89ab

08003ba4 <Stm32c0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Lock(void)
{
 8003ba4:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8003ba6:	4c07      	ldr	r4, [pc, #28]	@ (8003bc4 <Stm32c0_Flash_Lock+0x20>)
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7fe fdcb 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_LOCK|tmp);
 8003bae:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fe fdd8 	bl	8002768 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_LOCK;
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7fe fdc3 	bl	8002744 <readMem>
	if(tmp != 0x00U)
  {
    status = TARGET_OK;
  }
	return status;
}
 8003bbe:	43c0      	mvns	r0, r0
 8003bc0:	0fc0      	lsrs	r0, r0, #31
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	40022014 	.word	0x40022014

08003bc8 <Stm32c0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32c0_Flash_WaitOperation(uint32_t Timeout)
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4606      	mov	r6, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003bcc:	f001 fc84 	bl	80054d8 <HAL_GetTick>
 8003bd0:	1984      	adds	r4, r0, r6

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003bd2:	481b      	ldr	r0, [pc, #108]	@ (8003c40 <Stm32c0_Flash_WaitOperation+0x78>)
 8003bd4:	f7fe fdb6 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003bd8:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8003bdc:	d00a      	beq.n	8003bf4 <Stm32c0_Flash_WaitOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003bde:	4d18      	ldr	r5, [pc, #96]	@ (8003c40 <Stm32c0_Flash_WaitOperation+0x78>)
    if (HAL_GetTick() >= timeout)
 8003be0:	f001 fc7a 	bl	80054d8 <HAL_GetTick>
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	d224      	bcs.n	8003c32 <Stm32c0_Flash_WaitOperation+0x6a>
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003be8:	4628      	mov	r0, r5
 8003bea:	f7fe fdab 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003bee:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8003bf2:	d1f5      	bne.n	8003be0 <Stm32c0_Flash_WaitOperation+0x18>
  }

  /* check flash errors */
  error = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_SR_ERROR;
 8003bf4:	4d12      	ldr	r5, [pc, #72]	@ (8003c40 <Stm32c0_Flash_WaitOperation+0x78>)
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7fe fda4 	bl	8002744 <readMem>

  /* clear error flags */
  writeMem(STM32C0_FLASH_SR, error);
 8003bfc:	f24c 31fa 	movw	r1, #50170	@ 0xc3fa
 8003c00:	4001      	ands	r1, r0
 8003c02:	4628      	mov	r0, r5
 8003c04:	f7fe fdb0 	bl	8002768 <writeMem>

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8003c08:	f001 fc66 	bl	80054d8 <HAL_GetTick>
 8003c0c:	4406      	add	r6, r0
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7fe fd98 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003c14:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8003c18:	d00d      	beq.n	8003c36 <Stm32c0_Flash_WaitOperation+0x6e>
  {
    if (HAL_GetTick() >= timeout)
 8003c1a:	f001 fc5d 	bl	80054d8 <HAL_GetTick>
 8003c1e:	42b0      	cmp	r0, r6
 8003c20:	d20b      	bcs.n	8003c3a <Stm32c0_Flash_WaitOperation+0x72>
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8003c22:	4628      	mov	r0, r5
 8003c24:	f7fe fd8e 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003c28:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8003c2c:	d1f5      	bne.n	8003c1a <Stm32c0_Flash_WaitOperation+0x52>
  }

  return TARGET_OK;
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e000      	b.n	8003c34 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8003c32:	2001      	movs	r0, #1
}
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
  return TARGET_OK;
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7fc      	b.n	8003c34 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e7fa      	b.n	8003c34 <Stm32c0_Flash_WaitOperation+0x6c>
 8003c3e:	bf00      	nop
 8003c40:	40022010 	.word	0x40022010

08003c44 <Stm32c0_Flash_MassErase>:
{
 8003c44:	b510      	push	{r4, lr}
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c4a:	f7ff ffbd 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>
	if(status == TARGET_OK)
 8003c4e:	b100      	cbz	r0, 8003c52 <Stm32c0_Flash_MassErase+0xe>
}
 8003c50:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8003c52:	4c08      	ldr	r4, [pc, #32]	@ (8003c74 <Stm32c0_Flash_MassErase+0x30>)
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fe fd75 	bl	8002744 <readMem>
		writeMem(STM32C0_FLASH_CR, (STM32C0_FLASH_CR_STRT | STM32C0_FLASH_CR_MER1)|tmp);
 8003c5a:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8003c5e:	f041 0104 	orr.w	r1, r1, #4
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7fe fd80 	bl	8002768 <writeMem>
		status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c6c:	f7ff ffac 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>
 8003c70:	e7ee      	b.n	8003c50 <Stm32c0_Flash_MassErase+0xc>
 8003c72:	bf00      	nop
 8003c74:	40022014 	.word	0x40022014

08003c78 <Stm32c0_Flash_Program>:
{
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	461d      	mov	r5, r3
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c84:	f7ff ffa0 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>
	  if (status == TARGET_OK)
 8003c88:	b178      	cbz	r0, 8003caa <Stm32c0_Flash_Program+0x32>
  	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c8e:	f7ff ff9b 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>
 8003c92:	4604      	mov	r4, r0
  	tmp = readMem(STM32C0_FLASH_CR);
 8003c94:	4d0e      	ldr	r5, [pc, #56]	@ (8003cd0 <Stm32c0_Flash_Program+0x58>)
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7fe fd54 	bl	8002744 <readMem>
  	writeMem(STM32C0_FLASH_CR, tmp & (~STM32C0_FLASH_CR_PG));
 8003c9c:	f020 0101 	bic.w	r1, r0, #1
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f7fe fd61 	bl	8002768 <writeMem>
}
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  	tmp = readMem(STM32C0_FLASH_CR);
 8003caa:	4f09      	ldr	r7, [pc, #36]	@ (8003cd0 <Stm32c0_Flash_Program+0x58>)
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7fe fd49 	bl	8002744 <readMem>
	  	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_PG|tmp);
 8003cb2:	f040 0101 	orr.w	r1, r0, #1
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7fe fd56 	bl	8002768 <writeMem>
	  	writeMem(Address, 	(uint32_t)Data);
 8003cbc:	4631      	mov	r1, r6
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7fe fd52 	bl	8002768 <writeMem>
	  	writeMem(Address+4, (uint32_t)(Data>>32));
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	1d20      	adds	r0, r4, #4
 8003cc8:	f7fe fd4e 	bl	8002768 <writeMem>
 8003ccc:	e7dd      	b.n	8003c8a <Stm32c0_Flash_Program+0x12>
 8003cce:	bf00      	nop
 8003cd0:	40022014 	.word	0x40022014

08003cd4 <Stm32c0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Lock(void)
{
 8003cd4:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8003cd6:	4c08      	ldr	r4, [pc, #32]	@ (8003cf8 <Stm32c0_Flash_OB_Lock+0x24>)
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7fe fd33 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTLOCK|tmp);
 8003cde:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f7fe fd40 	bl	8002768 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_OPTLOCK;
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f7fe fd2b 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003cee:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 8003cf2:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	40022014 	.word	0x40022014

08003cfc <Stm32c0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Unlock(void)
{
 8003cfc:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8003cfe:	480b      	ldr	r0, [pc, #44]	@ (8003d2c <Stm32c0_Flash_OB_Unlock+0x30>)
 8003d00:	f7fe fd20 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003d04:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8003d08:	d101      	bne.n	8003d0e <Stm32c0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 8003d0a:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 8003d0c:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY1);
 8003d0e:	4c08      	ldr	r4, [pc, #32]	@ (8003d30 <Stm32c0_Flash_OB_Unlock+0x34>)
 8003d10:	4908      	ldr	r1, [pc, #32]	@ (8003d34 <Stm32c0_Flash_OB_Unlock+0x38>)
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7fe fd28 	bl	8002768 <writeMem>
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY2);
 8003d18:	4907      	ldr	r1, [pc, #28]	@ (8003d38 <Stm32c0_Flash_OB_Unlock+0x3c>)
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7fe fd24 	bl	8002768 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8003d20:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <Stm32c0_Flash_OB_Unlock+0x30>)
 8003d22:	f7fe fd0f 	bl	8002744 <readMem>
		if(tmp == 0x00U)
 8003d26:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003d2a:	e7ef      	b.n	8003d0c <Stm32c0_Flash_OB_Unlock+0x10>
 8003d2c:	40022014 	.word	0x40022014
 8003d30:	4002200c 	.word	0x4002200c
 8003d34:	08192a3b 	.word	0x08192a3b
 8003d38:	4c5d6e7f 	.word	0x4c5d6e7f

08003d3c <Stm32c0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32c0_Flash_OB_GetUser(void)
{
 8003d3c:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32C0_FLASH_OPTR);
 8003d3e:	4803      	ldr	r0, [pc, #12]	@ (8003d4c <Stm32c0_Flash_OB_GetUser+0x10>)
 8003d40:	f7fe fd00 	bl	8002744 <readMem>
 8003d44:	4603      	mov	r3, r0
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
  return user;
}
 8003d46:	4802      	ldr	r0, [pc, #8]	@ (8003d50 <Stm32c0_Flash_OB_GetUser+0x14>)
 8003d48:	4018      	ands	r0, r3
 8003d4a:	bd08      	pop	{r3, pc}
 8003d4c:	40022020 	.word	0x40022020
 8003d50:	3fefff00 	.word	0x3fefff00

08003d54 <Stm32c0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32c0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	4605      	mov	r5, r0
 8003d58:	460c      	mov	r4, r1
 8003d5a:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

  /* Configure the RDP level in the option bytes register */
  optr = readMem(STM32C0_FLASH_OPTR);
 8003d5c:	4f06      	ldr	r7, [pc, #24]	@ (8003d78 <Stm32c0_Flash_OB_OptrConfig+0x24>)
 8003d5e:	4638      	mov	r0, r7
 8003d60:	f7fe fcf0 	bl	8002744 <readMem>
  optr &= ~(UserType | STM32C0_FLASH_OPTR_RDP);
 8003d64:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 8003d68:	ea20 0105 	bic.w	r1, r0, r5
  tmp = optr | UserConfig | RDPLevel;
 8003d6c:	4334      	orrs	r4, r6
  writeMem(STM32C0_FLASH_OPTR, tmp);
 8003d6e:	4321      	orrs	r1, r4
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7fe fcf9 	bl	8002768 <writeMem>
}
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	40022020 	.word	0x40022020

08003d7c <Stm32c0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32c0_Flash_OB_Launch(void)
{
 8003d7c:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32C0_FLASH_CR);
 8003d7e:	4c05      	ldr	r4, [pc, #20]	@ (8003d94 <Stm32c0_Flash_OB_Launch+0x18>)
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7fe fcdf 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 8003d86:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fe fcec 	bl	8002768 <writeMem>
}
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	40022014 	.word	0x40022014

08003d98 <Stm32c0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Program(uint32_t RDPLevel)
{
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32c0_Flash_OB_GetUser();
 8003d9c:	f7ff ffce 	bl	8003d3c <Stm32c0_Flash_OB_GetUser>
 8003da0:	4601      	mov	r1, r0
	Stm32c0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 8003da2:	4622      	mov	r2, r4
 8003da4:	f7ff ffd6 	bl	8003d54 <Stm32c0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dac:	f7ff ff0c 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8003db0:	4604      	mov	r4, r0
 8003db2:	b108      	cbz	r0, 8003db8 <Stm32c0_Flash_OB_Program+0x20>
    tmp = readMem(STM32C0_FLASH_CR);
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8003db4:	4620      	mov	r0, r4
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8003db8:	4d0b      	ldr	r5, [pc, #44]	@ (8003de8 <Stm32c0_Flash_OB_Program+0x50>)
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f7fe fcc2 	bl	8002744 <readMem>
		writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTSTRT|tmp);
 8003dc0:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f7fe fccf 	bl	8002768 <writeMem>
    status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dce:	f7ff fefb 	bl	8003bc8 <Stm32c0_Flash_WaitOperation>
 8003dd2:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f7fe fcb5 	bl	8002744 <readMem>
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
 8003dda:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7fe fcc2 	bl	8002768 <writeMem>
 8003de4:	e7e6      	b.n	8003db4 <Stm32c0_Flash_OB_Program+0x1c>
 8003de6:	bf00      	nop
 8003de8:	40022014 	.word	0x40022014

08003dec <Stm32h7_Flash_WaitOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_WaitOperation(uint32_t Timeout, uint32_t Bank)
{
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	4605      	mov	r5, r0
    uint32_t sr_reg = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_SR1 : STM32H7_FLASH_SR2;
    uint32_t qw_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_QW_BANK1 : STM32H7_FLASH_FLAG_QW_BANK2;
    uint32_t all_errors_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_ALL_ERRORS_BANK1 : STM32H7_FLASH_FLAG_ALL_ERRORS_BANK2;
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <Stm32h7_Flash_WaitOperation+0x80>)
 8003df4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e70 <Stm32h7_Flash_WaitOperation+0x84>)
 8003df6:	2901      	cmp	r1, #1
 8003df8:	bf14      	ite	ne
 8003dfa:	4691      	movne	r9, r2
 8003dfc:	4699      	moveq	r9, r3
 8003dfe:	2901      	cmp	r1, #1
 8003e00:	4f1c      	ldr	r7, [pc, #112]	@ (8003e74 <Stm32h7_Flash_WaitOperation+0x88>)
 8003e02:	bf08      	it	eq
 8003e04:	2704      	moveq	r7, #4
 8003e06:	4e1c      	ldr	r6, [pc, #112]	@ (8003e78 <Stm32h7_Flash_WaitOperation+0x8c>)
 8003e08:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <Stm32h7_Flash_WaitOperation+0x90>)
 8003e0a:	2901      	cmp	r1, #1
 8003e0c:	bf08      	it	eq
 8003e0e:	461e      	moveq	r6, r3
 8003e10:	2901      	cmp	r1, #1
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <Stm32h7_Flash_WaitOperation+0x94>)
 8003e14:	bf14      	ite	ne
 8003e16:	469a      	movne	sl, r3
 8003e18:	f44f 3a80 	moveq.w	sl, #65536	@ 0x10000
    uint32_t eop_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_EOP_BANK1 : STM32H7_FLASH_FLAG_EOP_BANK2;

    uint32_t tickstart = HAL_GetTick();
 8003e1c:	f001 fb5c 	bl	80054d8 <HAL_GetTick>
 8003e20:	4680      	mov	r8, r0
 8003e22:	e001      	b.n	8003e28 <Stm32h7_Flash_WaitOperation+0x3c>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기

        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
            return TARGET_ERROR;
        }
    } while (status & qw_flag);  // QW 플래그가 0이 될 때까지 대기
 8003e24:	4227      	tst	r7, r4
 8003e26:	d00e      	beq.n	8003e46 <Stm32h7_Flash_WaitOperation+0x5a>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7fe fc8b 	bl	8002744 <readMem>
 8003e2e:	4604      	mov	r4, r0
        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
 8003e30:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e34:	d0f6      	beq.n	8003e24 <Stm32h7_Flash_WaitOperation+0x38>
 8003e36:	f001 fb4f 	bl	80054d8 <HAL_GetTick>
 8003e3a:	eba0 0008 	sub.w	r0, r0, r8
 8003e3e:	42a8      	cmp	r0, r5
 8003e40:	d9f0      	bls.n	8003e24 <Stm32h7_Flash_WaitOperation+0x38>
            return TARGET_ERROR;
 8003e42:	2001      	movs	r0, #1
 8003e44:	e006      	b.n	8003e54 <Stm32h7_Flash_WaitOperation+0x68>

    // 에러 플래그 확인 및 클리어
    uint32_t errorflag = status & all_errors_flag;
    if (errorflag != 0) {
 8003e46:	ea19 0104 	ands.w	r1, r9, r4
 8003e4a:	d105      	bne.n	8003e58 <Stm32h7_Flash_WaitOperation+0x6c>
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
    }

    // EOP 플래그 확인 및 클리어
    if (status & eop_flag) {
 8003e4c:	ea1a 0f04 	tst.w	sl, r4
 8003e50:	d106      	bne.n	8003e60 <Stm32h7_Flash_WaitOperation+0x74>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
    }

    return TARGET_OK;
 8003e52:	2000      	movs	r0, #0
}
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fe fc85 	bl	8002768 <writeMem>
 8003e5e:	e7f5      	b.n	8003e4c <Stm32h7_Flash_WaitOperation+0x60>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
 8003e60:	4651      	mov	r1, sl
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fe fc80 	bl	8002768 <writeMem>
    return TARGET_OK;
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e7f3      	b.n	8003e54 <Stm32h7_Flash_WaitOperation+0x68>
 8003e6c:	97ee0000 	.word	0x97ee0000
 8003e70:	17ee0000 	.word	0x17ee0000
 8003e74:	80000004 	.word	0x80000004
 8003e78:	52002110 	.word	0x52002110
 8003e7c:	52002010 	.word	0x52002010
 8003e80:	80010000 	.word	0x80010000

08003e84 <Stm32h7_Flash_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
void Stm32h7_Flash_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	4605      	mov	r5, r0
	uint32_t tmp = 0;

  /* Flash Mass Erase */
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 8003e88:	f001 0303 	and.w	r3, r1, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d011      	beq.n	8003eb4 <Stm32h7_Flash_MassErase+0x30>
 8003e90:	460c      	mov	r4, r1
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8003e92:	f011 0f01 	tst.w	r1, #1
 8003e96:	d139      	bne.n	8003f0c <Stm32h7_Flash_MassErase+0x88>
      /* Erase Bank1 */
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR1, tmp);
    }

    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8003e98:	f014 0f02 	tst.w	r4, #2
 8003e9c:	d150      	bne.n	8003f40 <Stm32h7_Flash_MassErase+0xbc>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR2, tmp);
    }
  }

  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1);
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ea4:	f7ff ffa2 	bl	8003dec <Stm32h7_Flash_WaitOperation>
  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2);
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003eae:	f7ff ff9d 	bl	8003dec <Stm32h7_Flash_WaitOperation>

}
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
  	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8003eb4:	4e2f      	ldr	r6, [pc, #188]	@ (8003f74 <Stm32h7_Flash_MassErase+0xf0>)
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f7fe fc44 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8003ebc:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fe fc51 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8003ec6:	4c2c      	ldr	r4, [pc, #176]	@ (8003f78 <Stm32h7_Flash_MassErase+0xf4>)
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7fe fc3b 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8003ece:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7fe fc48 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7fe fc33 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8003ede:	ea40 0105 	orr.w	r1, r0, r5
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7fe fc40 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7fe fc2b 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8003eee:	ea40 0105 	orr.w	r1, r0, r5
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7fe fc38 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_OPTCR) | STM32H7_FLASH_OPTCR_MER;
 8003ef8:	3cf4      	subs	r4, #244	@ 0xf4
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7fe fc22 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
 8003f00:	f040 0110 	orr.w	r1, r0, #16
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7fe fc2f 	bl	8002768 <writeMem>
 8003f0a:	e7c8      	b.n	8003e9e <Stm32h7_Flash_MassErase+0x1a>
    	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 8003f0c:	4e19      	ldr	r6, [pc, #100]	@ (8003f74 <Stm32h7_Flash_MassErase+0xf0>)
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f7fe fc18 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8003f14:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f7fe fc25 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7fe fc10 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8003f24:	ea40 0105 	orr.w	r1, r0, r5
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f7fe fc1d 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7fe fc08 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 8003f34:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f7fe fc15 	bl	8002768 <writeMem>
 8003f3e:	e7ab      	b.n	8003e98 <Stm32h7_Flash_MassErase+0x14>
    	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 8003f40:	4c0d      	ldr	r4, [pc, #52]	@ (8003f78 <Stm32h7_Flash_MassErase+0xf4>)
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7fe fbfe 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8003f48:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7fe fc0b 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7fe fbf6 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8003f58:	ea40 0105 	orr.w	r1, r0, r5
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7fe fc03 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 8003f62:	4620      	mov	r0, r4
 8003f64:	f7fe fbee 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8003f68:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7fe fbfb 	bl	8002768 <writeMem>
 8003f72:	e794      	b.n	8003e9e <Stm32h7_Flash_MassErase+0x1a>
 8003f74:	5200200c 	.word	0x5200200c
 8003f78:	5200210c 	.word	0x5200210c

08003f7c <Stm32h7_Flash_Unlock>:

bool Stm32h7_Flash_Unlock(uint32_t Banks)
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4604      	mov	r4, r0
    uint32_t tmp = 0;

    /* BANK1 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8003f80:	f010 0f01 	tst.w	r0, #1
 8003f84:	d104      	bne.n	8003f90 <Stm32h7_Flash_Unlock+0x14>
            }
        }
    }

    /* BANK2 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8003f86:	f014 0f02 	tst.w	r4, #2
 8003f8a:	d118      	bne.n	8003fbe <Stm32h7_Flash_Unlock+0x42>
                return TARGET_ERROR;
            }
        }
    }

    return TARGET_OK;
 8003f8c:	2000      	movs	r0, #0
}
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
        tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8003f90:	4816      	ldr	r0, [pc, #88]	@ (8003fec <Stm32h7_Flash_Unlock+0x70>)
 8003f92:	f7fe fbd7 	bl	8002744 <readMem>
        if (tmp != 0U)
 8003f96:	f010 0f01 	tst.w	r0, #1
 8003f9a:	d0f4      	beq.n	8003f86 <Stm32h7_Flash_Unlock+0xa>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY1);
 8003f9c:	4d14      	ldr	r5, [pc, #80]	@ (8003ff0 <Stm32h7_Flash_Unlock+0x74>)
 8003f9e:	4915      	ldr	r1, [pc, #84]	@ (8003ff4 <Stm32h7_Flash_Unlock+0x78>)
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f7fe fbe1 	bl	8002768 <writeMem>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY2);
 8003fa6:	4914      	ldr	r1, [pc, #80]	@ (8003ff8 <Stm32h7_Flash_Unlock+0x7c>)
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f7fe fbdd 	bl	8002768 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8003fae:	480f      	ldr	r0, [pc, #60]	@ (8003fec <Stm32h7_Flash_Unlock+0x70>)
 8003fb0:	f7fe fbc8 	bl	8002744 <readMem>
            if (tmp != 0U)
 8003fb4:	f010 0f01 	tst.w	r0, #1
 8003fb8:	d0e5      	beq.n	8003f86 <Stm32h7_Flash_Unlock+0xa>
                return TARGET_ERROR;
 8003fba:	2001      	movs	r0, #1
 8003fbc:	e7e7      	b.n	8003f8e <Stm32h7_Flash_Unlock+0x12>
        tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8003fbe:	480f      	ldr	r0, [pc, #60]	@ (8003ffc <Stm32h7_Flash_Unlock+0x80>)
 8003fc0:	f7fe fbc0 	bl	8002744 <readMem>
        if (tmp != 0U)
 8003fc4:	f010 0f01 	tst.w	r0, #1
 8003fc8:	d101      	bne.n	8003fce <Stm32h7_Flash_Unlock+0x52>
    return TARGET_OK;
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e7df      	b.n	8003f8e <Stm32h7_Flash_Unlock+0x12>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY1);
 8003fce:	4c0c      	ldr	r4, [pc, #48]	@ (8004000 <Stm32h7_Flash_Unlock+0x84>)
 8003fd0:	4908      	ldr	r1, [pc, #32]	@ (8003ff4 <Stm32h7_Flash_Unlock+0x78>)
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7fe fbc8 	bl	8002768 <writeMem>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY2);
 8003fd8:	4907      	ldr	r1, [pc, #28]	@ (8003ff8 <Stm32h7_Flash_Unlock+0x7c>)
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7fe fbc4 	bl	8002768 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8003fe0:	4806      	ldr	r0, [pc, #24]	@ (8003ffc <Stm32h7_Flash_Unlock+0x80>)
 8003fe2:	f7fe fbaf 	bl	8002744 <readMem>
            if (tmp != 0U)
 8003fe6:	f000 0001 	and.w	r0, r0, #1
 8003fea:	e7d0      	b.n	8003f8e <Stm32h7_Flash_Unlock+0x12>
 8003fec:	5200200c 	.word	0x5200200c
 8003ff0:	52002004 	.word	0x52002004
 8003ff4:	45670123 	.word	0x45670123
 8003ff8:	cdef89ab 	.word	0xcdef89ab
 8003ffc:	5200210c 	.word	0x5200210c
 8004000:	52002104 	.word	0x52002104

08004004 <Stm32h7_Flash_Lock>:

bool Stm32h7_Flash_Lock(uint32_t Banks)
{
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4604      	mov	r4, r0
  uint32_t tmp = 0;

	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8004008:	f010 0f01 	tst.w	r0, #1
 800400c:	d104      	bne.n	8004018 <Stm32h7_Flash_Lock+0x14>
	{
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR1, tmp);
	}

  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 800400e:	f014 0f02 	tst.w	r4, #2
 8004012:	d10b      	bne.n	800402c <Stm32h7_Flash_Lock+0x28>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR2, tmp);
  }

  return TARGET_OK;
}
 8004014:	2000      	movs	r0, #0
 8004016:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
 8004018:	4d09      	ldr	r5, [pc, #36]	@ (8004040 <Stm32h7_Flash_Lock+0x3c>)
 800401a:	4628      	mov	r0, r5
 800401c:	f7fe fb92 	bl	8002744 <readMem>
		writeMem(STM32H7_FLASH_CR1, tmp);
 8004020:	f040 0101 	orr.w	r1, r0, #1
 8004024:	4628      	mov	r0, r5
 8004026:	f7fe fb9f 	bl	8002768 <writeMem>
 800402a:	e7f0      	b.n	800400e <Stm32h7_Flash_Lock+0xa>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
 800402c:	4c05      	ldr	r4, [pc, #20]	@ (8004044 <Stm32h7_Flash_Lock+0x40>)
 800402e:	4620      	mov	r0, r4
 8004030:	f7fe fb88 	bl	8002744 <readMem>
		writeMem(STM32H7_FLASH_CR2, tmp);
 8004034:	f040 0101 	orr.w	r1, r0, #1
 8004038:	4620      	mov	r0, r4
 800403a:	f7fe fb95 	bl	8002768 <writeMem>
 800403e:	e7e9      	b.n	8004014 <Stm32h7_Flash_Lock+0x10>
 8004040:	5200200c 	.word	0x5200200c
 8004044:	5200210c 	.word	0x5200210c

08004048 <Stm32h7_Flash_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_Program(uint32_t FlashAddress, uint32_t DataAddress, uint32_t WordSize)
{
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	b083      	sub	sp, #12
 800404e:	4681      	mov	r9, r0
 8004050:	4688      	mov	r8, r1
 8004052:	4692      	mov	sl, r2
    bool status;
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 8004054:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405c:	d216      	bcs.n	800408c <Stm32h7_Flash_Program+0x44>
    uint32_t dest_addr = FlashAddress;
    uint32_t *src_addr = (uint32_t *)DataAddress;

    // Set PG bit once at the beginning
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 800405e:	4c23      	ldr	r4, [pc, #140]	@ (80040ec <Stm32h7_Flash_Program+0xa4>)
 8004060:	4620      	mov	r0, r4
 8004062:	f7fe fb6f 	bl	8002744 <readMem>
 8004066:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 800406a:	2301      	movs	r3, #1
 800406c:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 800406e:	9401      	str	r4, [sp, #4]
 8004070:	9801      	ldr	r0, [sp, #4]
 8004072:	f7fe fb79 	bl	8002768 <writeMem>

    // Program flash with burst writes (32-byte aligned)
    for (uint32_t i = 0; i < WordSize; i += 32) {
 8004076:	f1ba 0f00 	cmp.w	sl, #0
 800407a:	d029      	beq.n	80040d0 <Stm32h7_Flash_Program+0x88>
 800407c:	f108 0520 	add.w	r5, r8, #32
    uint32_t *src_addr = (uint32_t *)DataAddress;
 8004080:	4647      	mov	r7, r8
    for (uint32_t i = 0; i < WordSize; i += 32) {
 8004082:	f06f 0b1f 	mvn.w	fp, #31
 8004086:	ebab 0b08 	sub.w	fp, fp, r8
 800408a:	e016      	b.n	80040ba <Stm32h7_Flash_Program+0x72>
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 800408c:	4c18      	ldr	r4, [pc, #96]	@ (80040f0 <Stm32h7_Flash_Program+0xa8>)
 800408e:	4620      	mov	r0, r4
 8004090:	f7fe fb58 	bl	8002744 <readMem>
 8004094:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 8004098:	2302      	movs	r3, #2
 800409a:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 800409c:	9401      	str	r4, [sp, #4]
 800409e:	e7e7      	b.n	8004070 <Stm32h7_Flash_Program+0x28>
 80040a0:	3720      	adds	r7, #32
            writeMem(dest_addr + j, *src_addr++);
        }
        dest_addr += 32;

        // Wait for operation to complete after each burst
        status = Stm32h7_Flash_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE, bank);
 80040a2:	9900      	ldr	r1, [sp, #0]
 80040a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80040a8:	f7ff fea0 	bl	8003dec <Stm32h7_Flash_WaitOperation>
        if (status != TARGET_OK) {
 80040ac:	4603      	mov	r3, r0
 80040ae:	b9c8      	cbnz	r0, 80040e4 <Stm32h7_Flash_Program+0x9c>
    for (uint32_t i = 0; i < WordSize; i += 32) {
 80040b0:	3520      	adds	r5, #32
 80040b2:	eb0b 0305 	add.w	r3, fp, r5
 80040b6:	459a      	cmp	sl, r3
 80040b8:	d90a      	bls.n	80040d0 <Stm32h7_Flash_Program+0x88>
 80040ba:	eba9 0608 	sub.w	r6, r9, r8
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 80040be:	463c      	mov	r4, r7
            writeMem(dest_addr + j, *src_addr++);
 80040c0:	19a0      	adds	r0, r4, r6
 80040c2:	f854 1b04 	ldr.w	r1, [r4], #4
 80040c6:	f7fe fb4f 	bl	8002768 <writeMem>
        for (uint32_t j = 0; j < 32; j += 4) {
 80040ca:	42ac      	cmp	r4, r5
 80040cc:	d1f8      	bne.n	80040c0 <Stm32h7_Flash_Program+0x78>
 80040ce:	e7e7      	b.n	80040a0 <Stm32h7_Flash_Program+0x58>
            return TARGET_ERROR;
        }
    }

    // Clear PG bit at the end
    tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2);
 80040d0:	9c01      	ldr	r4, [sp, #4]
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7fe fb36 	bl	8002744 <readMem>
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp & (~STM32H7_FLASH_CR_PG));
 80040d8:	f020 0102 	bic.w	r1, r0, #2
 80040dc:	4620      	mov	r0, r4
 80040de:	f7fe fb43 	bl	8002768 <writeMem>

    return TARGET_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	b003      	add	sp, #12
 80040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ec:	5200200c 	.word	0x5200200c
 80040f0:	5200210c 	.word	0x5200210c

080040f4 <Stm32h7_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Unlock(void)
{
 80040f4:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

	tmp = readMem(STM32H7_FLASH_OPTCR) & STM32H7_FLASH_OPTCR_OPTLOCK;
 80040f6:	480b      	ldr	r0, [pc, #44]	@ (8004124 <Stm32h7_Flash_OB_Unlock+0x30>)
 80040f8:	f7fe fb24 	bl	8002744 <readMem>
  if(tmp != 0x00U)
 80040fc:	f010 0f01 	tst.w	r0, #1
 8004100:	d101      	bne.n	8004106 <Stm32h7_Flash_OB_Unlock+0x12>
		if(tmp != 0x00U)
		{
			return TARGET_ERROR;
		}
  }
  return TARGET_OK;
 8004102:	2000      	movs	r0, #0
}
 8004104:	bd10      	pop	{r4, pc}
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY1);
 8004106:	4c08      	ldr	r4, [pc, #32]	@ (8004128 <Stm32h7_Flash_OB_Unlock+0x34>)
 8004108:	4908      	ldr	r1, [pc, #32]	@ (800412c <Stm32h7_Flash_OB_Unlock+0x38>)
 800410a:	4620      	mov	r0, r4
 800410c:	f7fe fb2c 	bl	8002768 <writeMem>
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY2);
 8004110:	4907      	ldr	r1, [pc, #28]	@ (8004130 <Stm32h7_Flash_OB_Unlock+0x3c>)
 8004112:	4620      	mov	r0, r4
 8004114:	f7fe fb28 	bl	8002768 <writeMem>
		tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 8004118:	4802      	ldr	r0, [pc, #8]	@ (8004124 <Stm32h7_Flash_OB_Unlock+0x30>)
 800411a:	f7fe fb13 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 800411e:	f000 0001 	and.w	r0, r0, #1
 8004122:	e7ef      	b.n	8004104 <Stm32h7_Flash_OB_Unlock+0x10>
 8004124:	52002018 	.word	0x52002018
 8004128:	52002008 	.word	0x52002008
 800412c:	08192a3b 	.word	0x08192a3b
 8004130:	4c5d6e7f 	.word	0x4c5d6e7f

08004134 <Stm32h7_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Lock(void)
{
 8004134:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 8004136:	4c08      	ldr	r4, [pc, #32]	@ (8004158 <Stm32h7_Flash_OB_Lock+0x24>)
 8004138:	4620      	mov	r0, r4
 800413a:	f7fe fb03 	bl	8002744 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTLOCK | tmp);
 800413e:	f040 0101 	orr.w	r1, r0, #1
 8004142:	4620      	mov	r0, r4
 8004144:	f7fe fb10 	bl	8002768 <writeMem>

  /* Verify that the Option Bytes are locked */
	tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 8004148:	4620      	mov	r0, r4
 800414a:	f7fe fafb 	bl	8002744 <readMem>
	{
		return TARGET_ERROR;
	}

	return TARGET_OK;
}
 800414e:	43c0      	mvns	r0, r0
 8004150:	f000 0001 	and.w	r0, r0, #1
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	52002018 	.word	0x52002018

0800415c <Stm32h7_Flash_OB_Launch>:
	return TARGET_OK;
}


bool Stm32h7_Flash_OB_Launch(void)
{
 800415c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = 0;

	/* Set OPTSTRT Bit */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 800415e:	4c18      	ldr	r4, [pc, #96]	@ (80041c0 <Stm32h7_Flash_OB_Launch+0x64>)
 8004160:	4620      	mov	r0, r4
 8004162:	f7fe faef 	bl	8002744 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTSTART | tmp);
 8004166:	f040 0102 	orr.w	r1, r0, #2
 800416a:	4620      	mov	r0, r4
 800416c:	f7fe fafc 	bl	8002768 <writeMem>
	uint32_t tickstart = HAL_GetTick();
 8004170:	f001 f9b2 	bl	80054d8 <HAL_GetTick>
 8004174:	4604      	mov	r4, r0
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 8004176:	4813      	ldr	r0, [pc, #76]	@ (80041c4 <Stm32h7_Flash_OB_Launch+0x68>)
 8004178:	f7fe fae4 	bl	8002744 <readMem>
	while(tmp != 0U)
 800417c:	f010 0f01 	tst.w	r0, #1
 8004180:	d00d      	beq.n	800419e <Stm32h7_Flash_OB_Launch+0x42>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f24c 3550 	movw	r5, #50000	@ 0xc350
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 8004186:	4e0f      	ldr	r6, [pc, #60]	@ (80041c4 <Stm32h7_Flash_OB_Launch+0x68>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f001 f9a6 	bl	80054d8 <HAL_GetTick>
 800418c:	1b00      	subs	r0, r0, r4
 800418e:	42a8      	cmp	r0, r5
 8004190:	d814      	bhi.n	80041bc <Stm32h7_Flash_OB_Launch+0x60>
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 8004192:	4630      	mov	r0, r6
 8004194:	f7fe fad6 	bl	8002744 <readMem>
	while(tmp != 0U)
 8004198:	f010 0f01 	tst.w	r0, #1
 800419c:	d1f4      	bne.n	8004188 <Stm32h7_Flash_OB_Launch+0x2c>
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPTCHANGEERR;
 800419e:	4809      	ldr	r0, [pc, #36]	@ (80041c4 <Stm32h7_Flash_OB_Launch+0x68>)
 80041a0:	f7fe fad0 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 80041a4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80041a8:	d101      	bne.n	80041ae <Stm32h7_Flash_OB_Launch+0x52>
	return TARGET_OK;
 80041aa:	2000      	movs	r0, #0
 80041ac:	e007      	b.n	80041be <Stm32h7_Flash_OB_Launch+0x62>
		writeMem(STM32H7_FLASH_OPTCCR, STM32H7_FLASH_OPTCCR_CLR_OPTCHANGEERR);
 80041ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80041b2:	4805      	ldr	r0, [pc, #20]	@ (80041c8 <Stm32h7_Flash_OB_Launch+0x6c>)
 80041b4:	f7fe fad8 	bl	8002768 <writeMem>
		return TARGET_ERROR;
 80041b8:	2001      	movs	r0, #1
 80041ba:	e000      	b.n	80041be <Stm32h7_Flash_OB_Launch+0x62>
        return TARGET_ERROR;
 80041bc:	2001      	movs	r0, #1
	return Stm32h7_Flash_OB_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE);
}
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	52002018 	.word	0x52002018
 80041c4:	5200201c 	.word	0x5200201c
 80041c8:	52002024 	.word	0x52002024

080041cc <Stm32h7_Flash_OB_Program>:
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
}

bool Stm32h7_Flash_OB_Program(uint32_t RDPLevel)
{
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4604      	mov	r4, r0
	bool status = 0;

  /* Wait for last operation to be completed */
	if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1))
 80041d0:	2101      	movs	r1, #1
 80041d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80041d6:	f7ff fe09 	bl	8003dec <Stm32h7_Flash_WaitOperation>
 80041da:	4605      	mov	r5, r0
 80041dc:	b108      	cbz	r0, 80041e2 <Stm32h7_Flash_OB_Program+0x16>
		/* Read protection configuration */
		STM32H7_FLASH_OB_RDPConfig(RDPLevel);
	}

	return status;
}
 80041de:	4628      	mov	r0, r5
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
	else if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2))
 80041e2:	2102      	movs	r1, #2
 80041e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80041e8:	f7ff fe00 	bl	8003dec <Stm32h7_Flash_WaitOperation>
 80041ec:	4605      	mov	r5, r0
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d1f5      	bne.n	80041de <Stm32h7_Flash_OB_Program+0x12>
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
 80041f2:	4e05      	ldr	r6, [pc, #20]	@ (8004208 <Stm32h7_Flash_OB_Program+0x3c>)
 80041f4:	4630      	mov	r0, r6
 80041f6:	f7fe faa5 	bl	8002744 <readMem>
 80041fa:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
 80041fe:	4321      	orrs	r1, r4
 8004200:	4630      	mov	r0, r6
 8004202:	f7fe fab1 	bl	8002768 <writeMem>
}
 8004206:	e7ea      	b.n	80041de <Stm32h7_Flash_OB_Program+0x12>
 8004208:	52002020 	.word	0x52002020

0800420c <Stm32u0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32u0_Flash_Unlock(void)
{
 800420c:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_LOCK;
 800420e:	480a      	ldr	r0, [pc, #40]	@ (8004238 <Stm32u0_Flash_Unlock+0x2c>)
 8004210:	f7fe fa98 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8004214:	2800      	cmp	r0, #0
 8004216:	db01      	blt.n	800421c <Stm32u0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8004218:	2000      	movs	r0, #0
		{
			status = TARGET_ERROR;
		}
	}
	return status;
}
 800421a:	bd10      	pop	{r4, pc}
		writeMem(STM32U0_FLASH_KEYR, STM32U0_FLASH_KEY1);
 800421c:	4c07      	ldr	r4, [pc, #28]	@ (800423c <Stm32u0_Flash_Unlock+0x30>)
 800421e:	4908      	ldr	r1, [pc, #32]	@ (8004240 <Stm32u0_Flash_Unlock+0x34>)
 8004220:	4620      	mov	r0, r4
 8004222:	f7fe faa1 	bl	8002768 <writeMem>
		writeMem(STM32U0_FLASH_KEYR, STM32U0_FLASH_KEY2);
 8004226:	4907      	ldr	r1, [pc, #28]	@ (8004244 <Stm32u0_Flash_Unlock+0x38>)
 8004228:	4620      	mov	r0, r4
 800422a:	f7fe fa9d 	bl	8002768 <writeMem>
		tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_LOCK;
 800422e:	4802      	ldr	r0, [pc, #8]	@ (8004238 <Stm32u0_Flash_Unlock+0x2c>)
 8004230:	f7fe fa88 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 8004234:	0fc0      	lsrs	r0, r0, #31
 8004236:	e7f0      	b.n	800421a <Stm32u0_Flash_Unlock+0xe>
 8004238:	40022014 	.word	0x40022014
 800423c:	40022008 	.word	0x40022008
 8004240:	45670123 	.word	0x45670123
 8004244:	cdef89ab 	.word	0xcdef89ab

08004248 <Stm32u0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32u0_Flash_Lock(void)
{
 8004248:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32U0_FLASH_CR);
 800424a:	4c07      	ldr	r4, [pc, #28]	@ (8004268 <Stm32u0_Flash_Lock+0x20>)
 800424c:	4620      	mov	r0, r4
 800424e:	f7fe fa79 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_LOCK|tmp);
 8004252:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8004256:	4620      	mov	r0, r4
 8004258:	f7fe fa86 	bl	8002768 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32U0_FLASH_CR) & STM32U0_FLASH_CR_LOCK;
 800425c:	4620      	mov	r0, r4
 800425e:	f7fe fa71 	bl	8002744 <readMem>
	if(tmp != 0x00U)
	{
		status = TARGET_OK;
	}
	return status;
}
 8004262:	43c0      	mvns	r0, r0
 8004264:	0fc0      	lsrs	r0, r0, #31
 8004266:	bd10      	pop	{r4, pc}
 8004268:	40022014 	.word	0x40022014

0800426c <Stm32u0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32u0_Flash_WaitOperation(uint32_t Timeout)
{
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4606      	mov	r6, r0
	  uint32_t tmp = 0;

	  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
	     Even if the FLASH operation fails, the BUSY flag will be reset and an error
	     flag will be set */
	  uint32_t timeout = HAL_GetTick() + Timeout;
 8004270:	f001 f932 	bl	80054d8 <HAL_GetTick>
 8004274:	1984      	adds	r4, r0, r6

	  /* Wait if any operation is ongoing */
	  tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 8004276:	481b      	ldr	r0, [pc, #108]	@ (80042e4 <Stm32u0_Flash_WaitOperation+0x78>)
 8004278:	f7fe fa64 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 800427c:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8004280:	d00a      	beq.n	8004298 <Stm32u0_Flash_WaitOperation+0x2c>
	  {
	    if (HAL_GetTick() >= timeout)
	    {
	      return TARGET_ERROR;
	    }
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 8004282:	4d18      	ldr	r5, [pc, #96]	@ (80042e4 <Stm32u0_Flash_WaitOperation+0x78>)
	    if (HAL_GetTick() >= timeout)
 8004284:	f001 f928 	bl	80054d8 <HAL_GetTick>
 8004288:	42a0      	cmp	r0, r4
 800428a:	d224      	bcs.n	80042d6 <Stm32u0_Flash_WaitOperation+0x6a>
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 800428c:	4628      	mov	r0, r5
 800428e:	f7fe fa59 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 8004292:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8004296:	d1f5      	bne.n	8004284 <Stm32u0_Flash_WaitOperation+0x18>
	  }

	  /* check flash errors */
	  error = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_ERRORS;
 8004298:	4d12      	ldr	r5, [pc, #72]	@ (80042e4 <Stm32u0_Flash_WaitOperation+0x78>)
 800429a:	4628      	mov	r0, r5
 800429c:	f7fe fa52 	bl	8002744 <readMem>

	  /* clear error flags */
	  writeMem(STM32U0_FLASH_SR, error);
 80042a0:	f248 31fa 	movw	r1, #33786	@ 0x83fa
 80042a4:	4001      	ands	r1, r0
 80042a6:	4628      	mov	r0, r5
 80042a8:	f7fe fa5e 	bl	8002768 <writeMem>

	  /* Wait for control register to be written */
	  timeout = HAL_GetTick() + Timeout;
 80042ac:	f001 f914 	bl	80054d8 <HAL_GetTick>
 80042b0:	4406      	add	r6, r0
	  tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_CFGBSY;
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7fe fa46 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 80042b8:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80042bc:	d00d      	beq.n	80042da <Stm32u0_Flash_WaitOperation+0x6e>
	  {
	    if (HAL_GetTick() >= timeout)
 80042be:	f001 f90b 	bl	80054d8 <HAL_GetTick>
 80042c2:	42b0      	cmp	r0, r6
 80042c4:	d20b      	bcs.n	80042de <Stm32u0_Flash_WaitOperation+0x72>
	    {
	      return TARGET_ERROR;
	    }
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_CFGBSY;
 80042c6:	4628      	mov	r0, r5
 80042c8:	f7fe fa3c 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 80042cc:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80042d0:	d1f5      	bne.n	80042be <Stm32u0_Flash_WaitOperation+0x52>
	  }

	  return TARGET_OK;
 80042d2:	2000      	movs	r0, #0
 80042d4:	e000      	b.n	80042d8 <Stm32u0_Flash_WaitOperation+0x6c>
	      return TARGET_ERROR;
 80042d6:	2001      	movs	r0, #1
}
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
	  return TARGET_OK;
 80042da:	2000      	movs	r0, #0
 80042dc:	e7fc      	b.n	80042d8 <Stm32u0_Flash_WaitOperation+0x6c>
	      return TARGET_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e7fa      	b.n	80042d8 <Stm32u0_Flash_WaitOperation+0x6c>
 80042e2:	bf00      	nop
 80042e4:	40022010 	.word	0x40022010

080042e8 <Stm32u0_Flash_MassErase>:
{
 80042e8:	b510      	push	{r4, lr}
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 80042ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80042ee:	f7ff ffbd 	bl	800426c <Stm32u0_Flash_WaitOperation>
	if(status == TARGET_OK)
 80042f2:	b100      	cbz	r0, 80042f6 <Stm32u0_Flash_MassErase+0xe>
}
 80042f4:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 80042f6:	4c08      	ldr	r4, [pc, #32]	@ (8004318 <Stm32u0_Flash_MassErase+0x30>)
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fe fa23 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, (STM32U0_FLASH_CR_STRT | STM32U0_FLASH_CR_MER1)|tmp);
 80042fe:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8004302:	f041 0104 	orr.w	r1, r1, #4
 8004306:	4620      	mov	r0, r4
 8004308:	f7fe fa2e 	bl	8002768 <writeMem>
		status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 800430c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004310:	f7ff ffac 	bl	800426c <Stm32u0_Flash_WaitOperation>
 8004314:	e7ee      	b.n	80042f4 <Stm32u0_Flash_MassErase+0xc>
 8004316:	bf00      	nop
 8004318:	40022014 	.word	0x40022014

0800431c <Stm32u0_Flash_Program>:
{
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	4604      	mov	r4, r0
 8004320:	4616      	mov	r6, r2
 8004322:	461d      	mov	r5, r3
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 8004324:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004328:	f7ff ffa0 	bl	800426c <Stm32u0_Flash_WaitOperation>
	if (status == TARGET_OK)
 800432c:	b178      	cbz	r0, 800434e <Stm32u0_Flash_Program+0x32>
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 800432e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004332:	f7ff ff9b 	bl	800426c <Stm32u0_Flash_WaitOperation>
 8004336:	4604      	mov	r4, r0
	tmp = readMem(STM32U0_FLASH_CR);
 8004338:	4d0e      	ldr	r5, [pc, #56]	@ (8004374 <Stm32u0_Flash_Program+0x58>)
 800433a:	4628      	mov	r0, r5
 800433c:	f7fe fa02 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, tmp & (~STM32U0_FLASH_CR_PG));
 8004340:	f020 0101 	bic.w	r1, r0, #1
 8004344:	4628      	mov	r0, r5
 8004346:	f7fe fa0f 	bl	8002768 <writeMem>
}
 800434a:	4620      	mov	r0, r4
 800434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 800434e:	4f09      	ldr	r7, [pc, #36]	@ (8004374 <Stm32u0_Flash_Program+0x58>)
 8004350:	4638      	mov	r0, r7
 8004352:	f7fe f9f7 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_PG|tmp);
 8004356:	f040 0101 	orr.w	r1, r0, #1
 800435a:	4638      	mov	r0, r7
 800435c:	f7fe fa04 	bl	8002768 <writeMem>
		writeMem(Address, 	(uint32_t)Data);
 8004360:	4631      	mov	r1, r6
 8004362:	4620      	mov	r0, r4
 8004364:	f7fe fa00 	bl	8002768 <writeMem>
		writeMem(Address+4, (uint32_t)(Data>>32));
 8004368:	4629      	mov	r1, r5
 800436a:	1d20      	adds	r0, r4, #4
 800436c:	f7fe f9fc 	bl	8002768 <writeMem>
 8004370:	e7dd      	b.n	800432e <Stm32u0_Flash_Program+0x12>
 8004372:	bf00      	nop
 8004374:	40022014 	.word	0x40022014

08004378 <Stm32u0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Lock(void)
{
 8004378:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32U0_FLASH_CR);
 800437a:	4c08      	ldr	r4, [pc, #32]	@ (800439c <Stm32u0_Flash_OB_Lock+0x24>)
 800437c:	4620      	mov	r0, r4
 800437e:	f7fe f9e1 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OPTLOCK|tmp);
 8004382:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 8004386:	4620      	mov	r0, r4
 8004388:	f7fe f9ee 	bl	8002768 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32U0_FLASH_CR) & STM32U0_FLASH_CR_OPTLOCK;
 800438c:	4620      	mov	r0, r4
 800438e:	f7fe f9d9 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8004392:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 8004396:	f3c0 7080 	ubfx	r0, r0, #30, #1
 800439a:	bd10      	pop	{r4, pc}
 800439c:	40022014 	.word	0x40022014

080043a0 <Stm32u0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Unlock(void)
{
 80043a0:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_OPTLOCK;
 80043a2:	480b      	ldr	r0, [pc, #44]	@ (80043d0 <Stm32u0_Flash_OB_Unlock+0x30>)
 80043a4:	f7fe f9ce 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 80043a8:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80043ac:	d101      	bne.n	80043b2 <Stm32u0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 80043ae:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 80043b0:	bd10      	pop	{r4, pc}
		writeMem(STM32U0_FLASH_OPTKEYR, STM32U0_FLASH_OPTKEY1);
 80043b2:	4c08      	ldr	r4, [pc, #32]	@ (80043d4 <Stm32u0_Flash_OB_Unlock+0x34>)
 80043b4:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <Stm32u0_Flash_OB_Unlock+0x38>)
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7fe f9d6 	bl	8002768 <writeMem>
		writeMem(STM32U0_FLASH_OPTKEYR, STM32U0_FLASH_OPTKEY2);
 80043bc:	4907      	ldr	r1, [pc, #28]	@ (80043dc <Stm32u0_Flash_OB_Unlock+0x3c>)
 80043be:	4620      	mov	r0, r4
 80043c0:	f7fe f9d2 	bl	8002768 <writeMem>
		tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_OPTLOCK;
 80043c4:	4802      	ldr	r0, [pc, #8]	@ (80043d0 <Stm32u0_Flash_OB_Unlock+0x30>)
 80043c6:	f7fe f9bd 	bl	8002744 <readMem>
		if(tmp == 0x00U)
 80043ca:	f3c0 7080 	ubfx	r0, r0, #30, #1
 80043ce:	e7ef      	b.n	80043b0 <Stm32u0_Flash_OB_Unlock+0x10>
 80043d0:	40022014 	.word	0x40022014
 80043d4:	4002200c 	.word	0x4002200c
 80043d8:	08192a3b 	.word	0x08192a3b
 80043dc:	4c5d6e7f 	.word	0x4c5d6e7f

080043e0 <Stm32u0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32u0_Flash_OB_GetUser(void)
{
 80043e0:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32U0_FLASH_OPTR);
 80043e2:	4803      	ldr	r0, [pc, #12]	@ (80043f0 <Stm32u0_Flash_OB_GetUser+0x10>)
 80043e4:	f7fe f9ae 	bl	8002744 <readMem>
 80043e8:	4603      	mov	r3, r0
	uint32_t user = ((tmp & ~STM32U0_FLASH_OPTR_RDP) & STM32U0_OB_USER_ALL);
	return user;
}
 80043ea:	4802      	ldr	r0, [pc, #8]	@ (80043f4 <Stm32u0_Flash_OB_GetUser+0x14>)
 80043ec:	4018      	ands	r0, r3
 80043ee:	bd08      	pop	{r3, pc}
 80043f0:	40022020 	.word	0x40022020
 80043f4:	3f4fff00 	.word	0x3f4fff00

080043f8 <Stm32u0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32u0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4605      	mov	r5, r0
 80043fc:	460c      	mov	r4, r1
 80043fe:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

	/* Configure the RDP level in the option bytes register */
	optr = readMem(STM32U0_FLASH_OPTR);
 8004400:	4f06      	ldr	r7, [pc, #24]	@ (800441c <Stm32u0_Flash_OB_OptrConfig+0x24>)
 8004402:	4638      	mov	r0, r7
 8004404:	f7fe f99e 	bl	8002744 <readMem>
	optr &= ~(UserType | STM32U0_FLASH_OPTR_RDP);	// Clear old configurations.
 8004408:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 800440c:	ea20 0105 	bic.w	r1, r0, r5
	tmp = optr | UserConfig | RDPLevel;				// Set new configurations.
 8004410:	4334      	orrs	r4, r6
	writeMem(STM32U0_FLASH_OPTR, tmp);
 8004412:	4321      	orrs	r1, r4
 8004414:	4638      	mov	r0, r7
 8004416:	f7fe f9a7 	bl	8002768 <writeMem>
}
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441c:	40022020 	.word	0x40022020

08004420 <Stm32u0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32u0_Flash_OB_Launch(void)
{
 8004420:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32U0_FLASH_CR);
 8004422:	4c05      	ldr	r4, [pc, #20]	@ (8004438 <Stm32u0_Flash_OB_Launch+0x18>)
 8004424:	4620      	mov	r0, r4
 8004426:	f7fe f98d 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OBL_LAUNCH|tmp);
 800442a:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 800442e:	4620      	mov	r0, r4
 8004430:	f7fe f99a 	bl	8002768 <writeMem>
}
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop
 8004438:	40022014 	.word	0x40022014

0800443c <Stm32u0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Program(uint32_t RDPLevel)
{
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32u0_Flash_OB_GetUser();
 8004440:	f7ff ffce 	bl	80043e0 <Stm32u0_Flash_OB_GetUser>
 8004444:	4601      	mov	r1, r0
	Stm32u0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 8004446:	4622      	mov	r2, r4
 8004448:	f7ff ffd6 	bl	80043f8 <Stm32u0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 800444c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004450:	f7ff ff0c 	bl	800426c <Stm32u0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8004454:	4604      	mov	r4, r0
 8004456:	b108      	cbz	r0, 800445c <Stm32u0_Flash_OB_Program+0x20>
    tmp = readMem(STM32U0_FLASH_CR);
    writeMem(STM32U0_FLASH_CR, ~STM32U0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8004458:	4620      	mov	r0, r4
 800445a:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 800445c:	4d0b      	ldr	r5, [pc, #44]	@ (800448c <Stm32u0_Flash_OB_Program+0x50>)
 800445e:	4628      	mov	r0, r5
 8004460:	f7fe f970 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OPTSTRT|tmp);
 8004464:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8004468:	4628      	mov	r0, r5
 800446a:	f7fe f97d 	bl	8002768 <writeMem>
    status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 800446e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004472:	f7ff fefb 	bl	800426c <Stm32u0_Flash_WaitOperation>
 8004476:	4604      	mov	r4, r0
    tmp = readMem(STM32U0_FLASH_CR);
 8004478:	4628      	mov	r0, r5
 800447a:	f7fe f963 	bl	8002744 <readMem>
    writeMem(STM32U0_FLASH_CR, ~STM32U0_FLASH_CR_OPTSTRT&tmp);
 800447e:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8004482:	4628      	mov	r0, r5
 8004484:	f7fe f970 	bl	8002768 <writeMem>
 8004488:	e7e6      	b.n	8004458 <Stm32u0_Flash_OB_Program+0x1c>
 800448a:	bf00      	nop
 800448c:	40022014 	.word	0x40022014

08004490 <FileTransferCheck_CheckCompletion>:

      // 전송 활성화 플래그 리셋 (다음 전송을 대기)
      transfer_active_flag = 0;
  }
#endif
}
 8004490:	4770      	bx	lr
	...

08004494 <Button_Update>:
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
}

void Button_Update(void)
{
 8004494:	b508      	push	{r3, lr}
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 8004496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800449a:	4813      	ldr	r0, [pc, #76]	@ (80044e8 <Button_Update+0x54>)
 800449c:	f001 fc74 	bl	8005d88 <HAL_GPIO_ReadPin>
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <Button_Update+0x58>)
 80044a2:	7018      	strb	r0, [r3, #0]

    if (current_state != last_button_state)
 80044a4:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <Button_Update+0x5c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4283      	cmp	r3, r0
 80044aa:	d117      	bne.n	80044dc <Button_Update+0x48>
    {
        last_debounce_time = HAL_GetTick();
    }

    if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY_MS)
 80044ac:	f001 f814 	bl	80054d8 <HAL_GetTick>
 80044b0:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <Button_Update+0x60>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1ac0      	subs	r0, r0, r3
 80044b6:	2814      	cmp	r0, #20
 80044b8:	d90b      	bls.n	80044d2 <Button_Update+0x3e>
    {
        if (current_state != button_state)
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <Button_Update+0x58>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4a0e      	ldr	r2, [pc, #56]	@ (80044f8 <Button_Update+0x64>)
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d005      	beq.n	80044d2 <Button_Update+0x3e>
        {
            button_state = current_state;
 80044c6:	4a0c      	ldr	r2, [pc, #48]	@ (80044f8 <Button_Update+0x64>)
 80044c8:	7013      	strb	r3, [r2, #0]

            if (button_state == GPIO_PIN_RESET)
 80044ca:	b913      	cbnz	r3, 80044d2 <Button_Update+0x3e>
            {
                button_pressed_event = 1;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <Button_Update+0x68>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    last_button_state = current_state;
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <Button_Update+0x58>)
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <Button_Update+0x5c>)
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bd08      	pop	{r3, pc}
        last_debounce_time = HAL_GetTick();
 80044dc:	f000 fffc 	bl	80054d8 <HAL_GetTick>
 80044e0:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <Button_Update+0x60>)
 80044e2:	6018      	str	r0, [r3, #0]
 80044e4:	e7e2      	b.n	80044ac <Button_Update+0x18>
 80044e6:	bf00      	nop
 80044e8:	40020000 	.word	0x40020000
 80044ec:	200041b5 	.word	0x200041b5
 80044f0:	20000004 	.word	0x20000004
 80044f4:	200041b8 	.word	0x200041b8
 80044f8:	20000005 	.word	0x20000005
 80044fc:	200041b4 	.word	0x200041b4

08004500 <Button_WasPressed>:

uint8_t Button_WasPressed(void)
{
    if (button_pressed_event)
 8004500:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <Button_WasPressed+0x10>)
 8004502:	7818      	ldrb	r0, [r3, #0]
 8004504:	b900      	cbnz	r0, 8004508 <Button_WasPressed+0x8>
    {
        button_pressed_event = 0;
        return 1;
    }
    return 0;
}
 8004506:	4770      	bx	lr
        button_pressed_event = 0;
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
        return 1;
 800450c:	2001      	movs	r0, #1
 800450e:	e7fa      	b.n	8004506 <Button_WasPressed+0x6>
 8004510:	200041b4 	.word	0x200041b4

08004514 <SetBuzzerFrequency>:
			break;
	}
	state = BUZZER_IDLE;
}

void SetBuzzerFrequency(uint32_t frequency) {
 8004514:	b508      	push	{r3, lr}
    if (frequency > 0) {
 8004516:	b168      	cbz	r0, 8004534 <SetBuzzerFrequency+0x20>
        // 타이머 주기 계산: 타이머 클럭(1MHz)에서 원하는 주파수를 설정
        uint32_t period = (1000000 / frequency) - 1;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <SetBuzzerFrequency+0x30>)
 800451a:	fbb3 f3f0 	udiv	r3, r3, r0
 800451e:	3b01      	subs	r3, #1

        // 주기(ARR)를 설정하여 타이머의 PWM 주파수를 조정
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8004520:	4809      	ldr	r0, [pc, #36]	@ (8004548 <SetBuzzerFrequency+0x34>)
 8004522:	6802      	ldr	r2, [r0, #0]
 8004524:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004526:	60c3      	str	r3, [r0, #12]

        // 듀티 사이클을 50%로 설정 (부저가 50% 듀티에서 동작하도록)
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	63d3      	str	r3, [r2, #60]	@ 0x3c

        // 타이머 PWM 시작
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800452c:	2108      	movs	r1, #8
 800452e:	f004 fac3 	bl	8008ab8 <HAL_TIM_PWM_Start>
    } else {
        // 주파수가 0이면 부저를 끕니다
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
    }
}
 8004532:	bd08      	pop	{r3, pc}
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 8004534:	4804      	ldr	r0, [pc, #16]	@ (8004548 <SetBuzzerFrequency+0x34>)
 8004536:	6803      	ldr	r3, [r0, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800453c:	2108      	movs	r1, #8
 800453e:	f004 fb35 	bl	8008bac <HAL_TIM_PWM_Stop>
}
 8004542:	e7f6      	b.n	8004532 <SetBuzzerFrequency+0x1e>
 8004544:	000f4240 	.word	0x000f4240
 8004548:	2000436c 	.word	0x2000436c

0800454c <Buzzer_SetState>:
{
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 800454e:	2804      	cmp	r0, #4
 8004550:	d80e      	bhi.n	8004570 <Buzzer_SetState+0x24>
 8004552:	e8df f000 	tbb	[pc, r0]
 8004556:	0e03      	.short	0x0e03
 8004558:	2318      	.short	0x2318
 800455a:	38          	.byte	0x38
 800455b:	00          	.byte	0x00

void PlayBootSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 800455c:	200a      	movs	r0, #10
 800455e:	f7ff ffd9 	bl	8004514 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(500);
 8004562:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004566:	f000 ffbd 	bl	80054e4 <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 800456a:	2000      	movs	r0, #0
 800456c:	f7ff ffd2 	bl	8004514 <SetBuzzerFrequency>
}
 8004570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

void PlayDuringProgrammingSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 8004572:	200a      	movs	r0, #10
 8004574:	f7ff ffce 	bl	8004514 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(150);
 8004578:	2096      	movs	r0, #150	@ 0x96
 800457a:	f000 ffb3 	bl	80054e4 <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 800457e:	2000      	movs	r0, #0
 8004580:	f7ff ffc8 	bl	8004514 <SetBuzzerFrequency>
}
 8004584:	e7f4      	b.n	8004570 <Buzzer_SetState+0x24>

void PlayProgrammingCompleteSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 8004586:	200a      	movs	r0, #10
 8004588:	f7ff ffc4 	bl	8004514 <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(300);
 800458c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004590:	f000 ffa8 	bl	80054e4 <HAL_Delay>

    /* Set Frequency */
    SetBuzzerFrequency(0);
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff ffbd 	bl	8004514 <SetBuzzerFrequency>

    /* Set Duration */
    //HAL_Delay(300);
}
 800459a:	e7e9      	b.n	8004570 <Buzzer_SetState+0x24>
	switch(state)
 800459c:	2405      	movs	r4, #5
void PlayProgrammingFailedSound(void){

    for (uint8_t i = 0; i < 5; i++)
    {
    		/* Set Frequency */
        SetBuzzerFrequency(DEFAULT_FREQ);
 800459e:	270a      	movs	r7, #10

        /* Set Duration */
        HAL_Delay(150);
 80045a0:	2596      	movs	r5, #150	@ 0x96

        /* Buzzer Off */
        SetBuzzerFrequency(0);
 80045a2:	2600      	movs	r6, #0
        SetBuzzerFrequency(DEFAULT_FREQ);
 80045a4:	4638      	mov	r0, r7
 80045a6:	f7ff ffb5 	bl	8004514 <SetBuzzerFrequency>
        HAL_Delay(150);
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 ff9a 	bl	80054e4 <HAL_Delay>
        SetBuzzerFrequency(0);
 80045b0:	4630      	mov	r0, r6
 80045b2:	f7ff ffaf 	bl	8004514 <SetBuzzerFrequency>

        /* Set Duration */
        HAL_Delay(150);
 80045b6:	4628      	mov	r0, r5
 80045b8:	f000 ff94 	bl	80054e4 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 80045bc:	1e63      	subs	r3, r4, #1
 80045be:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80045c2:	d1ef      	bne.n	80045a4 <Buzzer_SetState+0x58>
 80045c4:	e7d4      	b.n	8004570 <Buzzer_SetState+0x24>
}

void PlayIdleSound(void)
{
    // No sound during idle
    SetBuzzerFrequency(0);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7ff ffa4 	bl	8004514 <SetBuzzerFrequency>
}
 80045cc:	e7d0      	b.n	8004570 <Buzzer_SetState+0x24>
	...

080045d0 <ihex_reset_state>:
}
#endif

void ihex_reset_state()
{
    state = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	4a04      	ldr	r2, [pc, #16]	@ (80045e4 <ihex_reset_state+0x14>)
 80045d4:	7013      	strb	r3, [r2, #0]
    address_lo = 0;
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <ihex_reset_state+0x18>)
 80045d8:	8013      	strh	r3, [r2, #0]
    address_hi = 0;
 80045da:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <ihex_reset_state+0x1c>)
 80045dc:	8013      	strh	r3, [r2, #0]
    ex_segment_addr_mode = false;
 80045de:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <ihex_reset_state+0x20>)
 80045e0:	7013      	strb	r3, [r2, #0]
}
 80045e2:	4770      	bx	lr
 80045e4:	200042cf 	.word	0x200042cf
 80045e8:	200042cc 	.word	0x200042cc
 80045ec:	200042ca 	.word	0x200042ca
 80045f0:	200042c8 	.word	0x200042c8

080045f4 <ihex_set_callback_func>:

void ihex_set_callback_func(ihex_callback_fp fp)
{
    callback_fp = fp;
 80045f4:	4b01      	ldr	r3, [pc, #4]	@ (80045fc <ihex_set_callback_func+0x8>)
 80045f6:	6018      	str	r0, [r3, #0]
}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	200041bc 	.word	0x200041bc

08004600 <ihex_parser>:
bool ihex_parser(const uint8_t *steambuf, uint32_t size)
{
    uint32_t i;
    uint8_t c, hc;
    
    for (i = 0; i<size; i++)
 8004600:	2900      	cmp	r1, #0
 8004602:	f000 8109 	beq.w	8004818 <ihex_parser+0x218>
{
 8004606:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800460a:	1e44      	subs	r4, r0, #1
 800460c:	4408      	add	r0, r1
 800460e:	1e45      	subs	r5, r0, #1
        if (c == '\0')
        {
            return true;
        }

        if (state == START_CODE_STATE)
 8004610:	4f8c      	ldr	r7, [pc, #560]	@ (8004844 <ihex_parser+0x244>)
            if ((hc = HexToDec(c)) == INVALID_HEX_CHAR)
            {
                return false;
            }

            if (!calc_cs_toogle)
 8004612:	4e8d      	ldr	r6, [pc, #564]	@ (8004848 <ihex_parser+0x248>)
            calc_cs = 0x00;
 8004614:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8004860 <ihex_parser+0x260>
 8004618:	e048      	b.n	80046ac <ihex_parser+0xac>
        else if (state >= BYTE_COUNT_0_STATE && state <= CHECKSUM_1_STATE)
 800461a:	1e59      	subs	r1, r3, #1
 800461c:	b2c9      	uxtb	r1, r1
 800461e:	290a      	cmp	r1, #10
 8004620:	f200 80fe 	bhi.w	8004820 <ihex_parser+0x220>
    if (h >= '0' && h <= '9')
 8004624:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 8004628:	b2c0      	uxtb	r0, r0
 800462a:	2809      	cmp	r0, #9
 800462c:	d90d      	bls.n	800464a <ihex_parser+0x4a>
    else if (h >= 'A' && h <= 'F')
 800462e:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 8004632:	b2c9      	uxtb	r1, r1
 8004634:	2905      	cmp	r1, #5
 8004636:	d91c      	bls.n	8004672 <ihex_parser+0x72>
    else if (h >= 'a' && h <= 'z')
 8004638:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 800463c:	b2c9      	uxtb	r1, r1
 800463e:	2919      	cmp	r1, #25
 8004640:	f200 80f1 	bhi.w	8004826 <ihex_parser+0x226>
        return h - 'a' + 0xA;
 8004644:	f1a2 0057 	sub.w	r0, r2, #87	@ 0x57
 8004648:	b2c0      	uxtb	r0, r0
            if (!calc_cs_toogle)
 800464a:	7831      	ldrb	r1, [r6, #0]
 800464c:	b9a9      	cbnz	r1, 800467a <ihex_parser+0x7a>
            {
                temp_cs = hc;
 800464e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8004874 <ihex_parser+0x274>
 8004652:	f88c 0000 	strb.w	r0, [ip]
            }
            else
            {
                calc_cs += (temp_cs << 4) | hc;
            }
            calc_cs_toogle = !calc_cs_toogle;
 8004656:	f081 0101 	eor.w	r1, r1, #1
 800465a:	7031      	strb	r1, [r6, #0]
        }

        switch (state)
 800465c:	2b0b      	cmp	r3, #11
 800465e:	f200 80e4 	bhi.w	800482a <ihex_parser+0x22a>
 8004662:	e8df f003 	tbb	[pc, r3]
 8004666:	182e      	.short	0x182e
 8004668:	4c4c4c18 	.word	0x4c4c4c18
 800466c:	6c5c554c 	.word	0x6c5c554c
 8004670:	8884      	.short	0x8884
        return h - 'A' + 0xA;
 8004672:	f1a2 0037 	sub.w	r0, r2, #55	@ 0x37
 8004676:	b2c0      	uxtb	r0, r0
 8004678:	e7e7      	b.n	800464a <ihex_parser+0x4a>
                calc_cs += (temp_cs << 4) | hc;
 800467a:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8004860 <ihex_parser+0x260>
 800467e:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 8004874 <ihex_parser+0x274>
 8004682:	f89c c000 	ldrb.w	ip, [ip]
 8004686:	ea40 1c0c 	orr.w	ip, r0, ip, lsl #4
 800468a:	f89e 9000 	ldrb.w	r9, [lr]
 800468e:	44cc      	add	ip, r9
 8004690:	f88e c000 	strb.w	ip, [lr]
 8004694:	e7df      	b.n	8004656 <ihex_parser+0x56>
            }
            break;

        case BYTE_COUNT_0_STATE:
        case BYTE_COUNT_1_STATE:
            byte_count = (byte_count << 4) | hc;
 8004696:	496d      	ldr	r1, [pc, #436]	@ (800484c <ihex_parser+0x24c>)
 8004698:	780a      	ldrb	r2, [r1, #0]
 800469a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800469e:	700a      	strb	r2, [r1, #0]
            ++state;
 80046a0:	3301      	adds	r3, #1
 80046a2:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <ihex_parser+0x244>)
 80046a4:	7013      	strb	r3, [r2, #0]
    for (i = 0; i<size; i++)
 80046a6:	42ac      	cmp	r4, r5
 80046a8:	f000 80b4 	beq.w	8004814 <ihex_parser+0x214>
        c = steambuf[i];
 80046ac:	f814 2f01 	ldrb.w	r2, [r4, #1]!
        if (c == '\0')
 80046b0:	2a00      	cmp	r2, #0
 80046b2:	f000 80b3 	beq.w	800481c <ihex_parser+0x21c>
        if (state == START_CODE_STATE)
 80046b6:	783b      	ldrb	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ae      	bne.n	800461a <ihex_parser+0x1a>
            calc_cs = 0x00;
 80046bc:	f888 3000 	strb.w	r3, [r8]
            calc_cs_toogle = false;
 80046c0:	7033      	strb	r3, [r6, #0]
            if (c == '\r' || c == '\n')
 80046c2:	2a0d      	cmp	r2, #13
 80046c4:	d0ef      	beq.n	80046a6 <ihex_parser+0xa6>
 80046c6:	2a0a      	cmp	r2, #10
 80046c8:	d0ed      	beq.n	80046a6 <ihex_parser+0xa6>
            else if (c == ':')
 80046ca:	2a3a      	cmp	r2, #58	@ 0x3a
 80046cc:	f040 80af 	bne.w	800482e <ihex_parser+0x22e>
                byte_count = 0;
 80046d0:	f04f 0900 	mov.w	r9, #0
 80046d4:	4b5d      	ldr	r3, [pc, #372]	@ (800484c <ihex_parser+0x24c>)
 80046d6:	f883 9000 	strb.w	r9, [r3]
                record_type = 0;
 80046da:	4b5d      	ldr	r3, [pc, #372]	@ (8004850 <ihex_parser+0x250>)
 80046dc:	f883 9000 	strb.w	r9, [r3]
                address_lo = 0x0000;
 80046e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004854 <ihex_parser+0x254>)
 80046e2:	f8a3 9000 	strh.w	r9, [r3]
                memset(data, 0xFF, sizeof(data));
 80046e6:	22ff      	movs	r2, #255	@ 0xff
 80046e8:	4611      	mov	r1, r2
 80046ea:	485b      	ldr	r0, [pc, #364]	@ (8004858 <ihex_parser+0x258>)
 80046ec:	f00a fd98 	bl	800f220 <memset>
                data_size_in_nibble = 0;
 80046f0:	4b5a      	ldr	r3, [pc, #360]	@ (800485c <ihex_parser+0x25c>)
 80046f2:	f8a3 9000 	strh.w	r9, [r3]
                ++state;
 80046f6:	4b53      	ldr	r3, [pc, #332]	@ (8004844 <ihex_parser+0x244>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
            break;
 80046fc:	e7d3      	b.n	80046a6 <ihex_parser+0xa6>
        case ADDR_0_STATE:
        case ADDR_1_STATE:
        case ADDR_2_STATE:
        case ADDR_3_STATE:
        {
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 80046fe:	4955      	ldr	r1, [pc, #340]	@ (8004854 <ihex_parser+0x254>)
 8004700:	880a      	ldrh	r2, [r1, #0]
 8004702:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004706:	800a      	strh	r2, [r1, #0]
            ++state;
 8004708:	3301      	adds	r3, #1
 800470a:	4a4e      	ldr	r2, [pc, #312]	@ (8004844 <ihex_parser+0x244>)
 800470c:	7013      	strb	r3, [r2, #0]
            break;
 800470e:	e7ca      	b.n	80046a6 <ihex_parser+0xa6>
        }
        
        case RECORD_TYPE_0_STATE:
            if (hc != 0)
 8004710:	2800      	cmp	r0, #0
 8004712:	f040 808e 	bne.w	8004832 <ihex_parser+0x232>
            {
                return false;
            }
            ++state;
 8004716:	4b4b      	ldr	r3, [pc, #300]	@ (8004844 <ihex_parser+0x244>)
 8004718:	2208      	movs	r2, #8
 800471a:	701a      	strb	r2, [r3, #0]
            break;
 800471c:	e7c3      	b.n	80046a6 <ihex_parser+0xa6>

        case RECORD_TYPE_1_STATE:
            if (hc > 5)
 800471e:	2805      	cmp	r0, #5
 8004720:	f200 8089 	bhi.w	8004836 <ihex_parser+0x236>
            {
                return false;
            }
            
            record_type = hc;
 8004724:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <ihex_parser+0x250>)
 8004726:	7018      	strb	r0, [r3, #0]

            if (byte_count == 0)
 8004728:	4b48      	ldr	r3, [pc, #288]	@ (800484c <ihex_parser+0x24c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b91b      	cbnz	r3, 8004736 <ihex_parser+0x136>
            {
                state = CHECKSUM_0_STATE;
 800472e:	4b45      	ldr	r3, [pc, #276]	@ (8004844 <ihex_parser+0x244>)
 8004730:	220a      	movs	r2, #10
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e7b7      	b.n	80046a6 <ihex_parser+0xa6>
            {
                return false;
            }
            else
            {
                ++state;
 8004736:	4b43      	ldr	r3, [pc, #268]	@ (8004844 <ihex_parser+0x244>)
 8004738:	2209      	movs	r2, #9
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e7b3      	b.n	80046a6 <ihex_parser+0xa6>

            break;

        case DATA_STATE:
        {
            uint8_t b_index = data_size_in_nibble >> 1;
 800473e:	4947      	ldr	r1, [pc, #284]	@ (800485c <ihex_parser+0x25c>)
 8004740:	880b      	ldrh	r3, [r1, #0]
            data[b_index] = (data[b_index] << 4) | hc;
 8004742:	f3c3 0c47 	ubfx	ip, r3, #1, #8
 8004746:	f8df e110 	ldr.w	lr, [pc, #272]	@ 8004858 <ihex_parser+0x258>
 800474a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 800474e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004752:	f80e 200c 	strb.w	r2, [lr, ip]

            ++data_size_in_nibble;
 8004756:	3301      	adds	r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	800b      	strh	r3, [r1, #0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 800475c:	4a3b      	ldr	r2, [pc, #236]	@ (800484c <ihex_parser+0x24c>)
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8004764:	d89f      	bhi.n	80046a6 <ihex_parser+0xa6>
            {
                ++state;
 8004766:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <ihex_parser+0x244>)
 8004768:	220a      	movs	r2, #10
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e79b      	b.n	80046a6 <ihex_parser+0xa6>
            }
            break;
        }
        
        case CHECKSUM_0_STATE:
            ++state;
 800476e:	4b35      	ldr	r3, [pc, #212]	@ (8004844 <ihex_parser+0x244>)
 8004770:	220b      	movs	r2, #11
 8004772:	701a      	strb	r2, [r3, #0]
            break;
 8004774:	e797      	b.n	80046a6 <ihex_parser+0xa6>

        case CHECKSUM_1_STATE:
            if((byte_count<<1) != data_size_in_nibble)  // Check whether byte count field match the data size 
 8004776:	4b39      	ldr	r3, [pc, #228]	@ (800485c <ihex_parser+0x25c>)
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	4b34      	ldr	r3, [pc, #208]	@ (800484c <ihex_parser+0x24c>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8004782:	d15a      	bne.n	800483a <ihex_parser+0x23a>
            {
                return false;
            }
            
            if (calc_cs != 0x00)
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <ihex_parser+0x260>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d158      	bne.n	800483e <ihex_parser+0x23e>
            {
                return false;
            }

            if (record_type == 2)           // Set extended segment addresss
 800478c:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <ihex_parser+0x250>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d019      	beq.n	80047c8 <ihex_parser+0x1c8>
            {
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
                ex_segment_addr_mode = true;
            }
            else if (record_type == 4)      // Set linear addresss
 8004794:	2b04      	cmp	r3, #4
 8004796:	d022      	beq.n	80047de <ihex_parser+0x1de>

#if (CONFIG_IHEX_DEBUG_OUTPUT > 0u)
            ihex_debug_output();
#endif

            if (record_type == 0 && callback_fp != 0)
 8004798:	2b00      	cmp	r3, #0
 800479a:	d12e      	bne.n	80047fa <ihex_parser+0x1fa>
 800479c:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <ihex_parser+0x264>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b173      	cbz	r3, 80047c0 <ihex_parser+0x1c0>
            {
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 80047a2:	4931      	ldr	r1, [pc, #196]	@ (8004868 <ihex_parser+0x268>)
 80047a4:	7809      	ldrb	r1, [r1, #0]
 80047a6:	b309      	cbz	r1, 80047ec <ihex_parser+0x1ec>
 80047a8:	4930      	ldr	r1, [pc, #192]	@ (800486c <ihex_parser+0x26c>)
 80047aa:	8809      	ldrh	r1, [r1, #0]
 80047ac:	4829      	ldr	r0, [pc, #164]	@ (8004854 <ihex_parser+0x254>)
 80047ae:	8800      	ldrh	r0, [r0, #0]
 80047b0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
                if(!callback_fp(address, data, data_size_in_nibble>>1))
 80047b4:	f3c2 0247 	ubfx	r2, r2, #1, #8
 80047b8:	4927      	ldr	r1, [pc, #156]	@ (8004858 <ihex_parser+0x258>)
 80047ba:	4798      	blx	r3
 80047bc:	2800      	cmp	r0, #0
 80047be:	d030      	beq.n	8004822 <ihex_parser+0x222>
            {
            	callback_fp(0,0,0);
            }


            state = START_CODE_STATE;
 80047c0:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <ihex_parser+0x244>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
            break;
 80047c6:	e76e      	b.n	80046a6 <ihex_parser+0xa6>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 80047c8:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <ihex_parser+0x258>)
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                ex_segment_addr_mode = true;
 80047d2:	2201      	movs	r2, #1
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 80047d4:	4925      	ldr	r1, [pc, #148]	@ (800486c <ihex_parser+0x26c>)
 80047d6:	800b      	strh	r3, [r1, #0]
                ex_segment_addr_mode = false;
 80047d8:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <ihex_parser+0x268>)
 80047da:	701a      	strb	r2, [r3, #0]
            if (record_type == 0 && callback_fp != 0)
 80047dc:	e7f0      	b.n	80047c0 <ihex_parser+0x1c0>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 80047de:	4b1e      	ldr	r3, [pc, #120]	@ (8004858 <ihex_parser+0x258>)
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047e8:	2200      	movs	r2, #0
 80047ea:	e7f3      	b.n	80047d4 <ihex_parser+0x1d4>
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 80047ec:	491f      	ldr	r1, [pc, #124]	@ (800486c <ihex_parser+0x26c>)
 80047ee:	8809      	ldrh	r1, [r1, #0]
 80047f0:	4818      	ldr	r0, [pc, #96]	@ (8004854 <ihex_parser+0x254>)
 80047f2:	8800      	ldrh	r0, [r0, #0]
 80047f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80047f8:	e7dc      	b.n	80047b4 <ihex_parser+0x1b4>
            else if((record_type == 1) && (target.TargetFamily == TARGET_STM32H7)) //Add for STM32H7, hex 'End Of File' 32byte(8word) programming unit
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d1e0      	bne.n	80047c0 <ihex_parser+0x1c0>
 80047fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <ihex_parser+0x270>)
 8004800:	7a1b      	ldrb	r3, [r3, #8]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d1dc      	bne.n	80047c0 <ihex_parser+0x1c0>
            	callback_fp(0,0,0);
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <ihex_parser+0x264>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	4611      	mov	r1, r2
 800480e:	4610      	mov	r0, r2
 8004810:	4798      	blx	r3
 8004812:	e7d5      	b.n	80047c0 <ihex_parser+0x1c0>

        default:
            return false;
        }
    }
    return true;
 8004814:	2001      	movs	r0, #1
 8004816:	e004      	b.n	8004822 <ihex_parser+0x222>
 8004818:	2001      	movs	r0, #1
}
 800481a:	4770      	bx	lr
            return true;
 800481c:	2001      	movs	r0, #1
 800481e:	e000      	b.n	8004822 <ihex_parser+0x222>
            return false;
 8004820:	2000      	movs	r0, #0
}
 8004822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return false;
 8004826:	2000      	movs	r0, #0
 8004828:	e7fb      	b.n	8004822 <ihex_parser+0x222>
        switch (state)
 800482a:	2000      	movs	r0, #0
 800482c:	e7f9      	b.n	8004822 <ihex_parser+0x222>
                return false;
 800482e:	2000      	movs	r0, #0
 8004830:	e7f7      	b.n	8004822 <ihex_parser+0x222>
                return false;
 8004832:	2000      	movs	r0, #0
 8004834:	e7f5      	b.n	8004822 <ihex_parser+0x222>
                return false;
 8004836:	2000      	movs	r0, #0
 8004838:	e7f3      	b.n	8004822 <ihex_parser+0x222>
                return false;
 800483a:	2000      	movs	r0, #0
 800483c:	e7f1      	b.n	8004822 <ihex_parser+0x222>
                return false;
 800483e:	2000      	movs	r0, #0
 8004840:	e7ef      	b.n	8004822 <ihex_parser+0x222>
 8004842:	bf00      	nop
 8004844:	200042cf 	.word	0x200042cf
 8004848:	200041c0 	.word	0x200041c0
 800484c:	200042ce 	.word	0x200042ce
 8004850:	200042c7 	.word	0x200042c7
 8004854:	200042cc 	.word	0x200042cc
 8004858:	200041c8 	.word	0x200041c8
 800485c:	200041c4 	.word	0x200041c4
 8004860:	200041c1 	.word	0x200041c1
 8004864:	200041bc 	.word	0x200041bc
 8004868:	200042c8 	.word	0x200042c8
 800486c:	200042ca 	.word	0x200042ca
 8004870:	20004198 	.word	0x20004198
 8004874:	200041c2 	.word	0x200041c2

08004878 <LED_On>:
// LED 제어 함수
void LED_Toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
}

void LED_On(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004878:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800487a:	2200      	movs	r2, #0
 800487c:	f001 fa8a 	bl	8005d94 <HAL_GPIO_WritePin>
}
 8004880:	bd08      	pop	{r3, pc}

08004882 <LED_Off>:

void LED_Off(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004882:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004884:	2201      	movs	r2, #1
 8004886:	f001 fa85 	bl	8005d94 <HAL_GPIO_WritePin>
}
 800488a:	bd08      	pop	{r3, pc}

0800488c <LED_HandleBootState>:

// Boot 상태 처리 함수
void LED_HandleBootState(uint32_t *counter, uint8_t *step)
{
 800488c:	b538      	push	{r3, r4, r5, lr}
    if (*counter >= LED_TOGGLE_INTERVAL * 2)
 800488e:	6803      	ldr	r3, [r0, #0]
 8004890:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004894:	d319      	bcc.n	80048ca <LED_HandleBootState+0x3e>
 8004896:	460c      	mov	r4, r1
    {
        *counter = 0; // 카운터 초기화
 8004898:	2300      	movs	r3, #0
 800489a:	6003      	str	r3, [r0, #0]

        switch (*step)
 800489c:	780b      	ldrb	r3, [r1, #0]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d83e      	bhi.n	8004920 <LED_HandleBootState+0x94>
 80048a2:	e8df f003 	tbb	[pc, r3]
 80048a6:	1302      	.short	0x1302
 80048a8:	2f21      	.short	0x2f21
        {
            case 0:
                LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80048aa:	4d1f      	ldr	r5, [pc, #124]	@ (8004928 <LED_HandleBootState+0x9c>)
 80048ac:	2104      	movs	r1, #4
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7ff ffe2 	bl	8004878 <LED_On>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80048b4:	2108      	movs	r1, #8
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff ffe3 	bl	8004882 <LED_Off>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 80048bc:	2110      	movs	r1, #16
 80048be:	4628      	mov	r0, r5
 80048c0:	f7ff ffdf 	bl	8004882 <LED_Off>
            default:
                *step = 0; // 마지막 단계 이후 초기화
                return;
        }

        (*step)++;
 80048c4:	7823      	ldrb	r3, [r4, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	7023      	strb	r3, [r4, #0]
    }
}
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
                LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80048cc:	4d16      	ldr	r5, [pc, #88]	@ (8004928 <LED_HandleBootState+0x9c>)
 80048ce:	2104      	movs	r1, #4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f7ff ffd6 	bl	8004882 <LED_Off>
                LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80048d6:	2108      	movs	r1, #8
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff ffcd 	bl	8004878 <LED_On>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 80048de:	2110      	movs	r1, #16
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7ff ffce 	bl	8004882 <LED_Off>
                break;
 80048e6:	e7ed      	b.n	80048c4 <LED_HandleBootState+0x38>
                LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80048e8:	4d0f      	ldr	r5, [pc, #60]	@ (8004928 <LED_HandleBootState+0x9c>)
 80048ea:	2104      	movs	r1, #4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f7ff ffc8 	bl	8004882 <LED_Off>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80048f2:	2108      	movs	r1, #8
 80048f4:	4628      	mov	r0, r5
 80048f6:	f7ff ffc4 	bl	8004882 <LED_Off>
                LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 80048fa:	2110      	movs	r1, #16
 80048fc:	4628      	mov	r0, r5
 80048fe:	f7ff ffbb 	bl	8004878 <LED_On>
                break;
 8004902:	e7df      	b.n	80048c4 <LED_HandleBootState+0x38>
                LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004904:	4d08      	ldr	r5, [pc, #32]	@ (8004928 <LED_HandleBootState+0x9c>)
 8004906:	2104      	movs	r1, #4
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff ffb5 	bl	8004878 <LED_On>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800490e:	2108      	movs	r1, #8
 8004910:	4628      	mov	r0, r5
 8004912:	f7ff ffb6 	bl	8004882 <LED_Off>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004916:	2110      	movs	r1, #16
 8004918:	4628      	mov	r0, r5
 800491a:	f7ff ffb2 	bl	8004882 <LED_Off>
                break;
 800491e:	e7d1      	b.n	80048c4 <LED_HandleBootState+0x38>
                *step = 0; // 마지막 단계 이후 초기화
 8004920:	2300      	movs	r3, #0
 8004922:	700b      	strb	r3, [r1, #0]
                return;
 8004924:	e7d1      	b.n	80048ca <LED_HandleBootState+0x3e>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <LED_HandleProgrammingState>:

// Programming 상태 처리 함수
void LED_HandleProgrammingState(uint32_t counter)
{
 800492c:	b510      	push	{r4, lr}
    if (counter % 100 == 0) // 빠른 토글 주기
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <LED_HandleProgrammingState+0x38>)
 8004930:	fba3 2300 	umull	r2, r3, r3, r0
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2264      	movs	r2, #100	@ 0x64
 8004938:	fb02 0013 	mls	r0, r2, r3, r0
 800493c:	b148      	cbz	r0, 8004952 <LED_HandleProgrammingState+0x26>
    {
        LED_Toggle(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
    }

    LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800493e:	4c0a      	ldr	r4, [pc, #40]	@ (8004968 <LED_HandleProgrammingState+0x3c>)
 8004940:	2104      	movs	r1, #4
 8004942:	4620      	mov	r0, r4
 8004944:	f7ff ff9d 	bl	8004882 <LED_Off>
    LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004948:	2110      	movs	r1, #16
 800494a:	4620      	mov	r0, r4
 800494c:	f7ff ff99 	bl	8004882 <LED_Off>
}
 8004950:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8004952:	2108      	movs	r1, #8
 8004954:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8004958:	f500 3004 	add.w	r0, r0, #135168	@ 0x21000
 800495c:	f001 fa20 	bl	8005da0 <HAL_GPIO_TogglePin>
}
 8004960:	e7ed      	b.n	800493e <LED_HandleProgrammingState+0x12>
 8004962:	bf00      	nop
 8004964:	51eb851f 	.word	0x51eb851f
 8004968:	40021000 	.word	0x40021000

0800496c <LED_HandleCompleteState>:

// Complete 상태 처리 함수
void LED_HandleCompleteState(void)
{
 800496c:	b510      	push	{r4, lr}
    LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800496e:	4c07      	ldr	r4, [pc, #28]	@ (800498c <LED_HandleCompleteState+0x20>)
 8004970:	2104      	movs	r1, #4
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff ff80 	bl	8004878 <LED_On>
    LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004978:	2108      	movs	r1, #8
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff ff81 	bl	8004882 <LED_Off>
    LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004980:	2110      	movs	r1, #16
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ff7d 	bl	8004882 <LED_Off>
}
 8004988:	bd10      	pop	{r4, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000

08004990 <LED_HandleFailedState>:

// Failed 상태 처리 함수
void LED_HandleFailedState(void)
{
 8004990:	b510      	push	{r4, lr}
    LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004992:	4c07      	ldr	r4, [pc, #28]	@ (80049b0 <LED_HandleFailedState+0x20>)
 8004994:	2104      	movs	r1, #4
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff ff73 	bl	8004882 <LED_Off>
    LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800499c:	2108      	movs	r1, #8
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff ff6f 	bl	8004882 <LED_Off>
    LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 80049a4:	2110      	movs	r1, #16
 80049a6:	4620      	mov	r0, r4
 80049a8:	f7ff ff66 	bl	8004878 <LED_On>
}
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000

080049b4 <LED_Handler>:

// SysTick 인터럽트 핸들러
void LED_Handler(void)
{
 80049b4:	b510      	push	{r4, lr}
    static uint32_t counter = 0;
    static uint8_t step = 0; // LED 순차적 제어를 위한 단계 변수
    static bool bootCompleted = false; // BOOT 상태 완료 여부

    counter += SYS_TICK_PERIOD_MS;
 80049b6:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <LED_Handler+0x50>)
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	3001      	adds	r0, #1
 80049bc:	6018      	str	r0, [r3, #0]

    switch (currentState)
 80049be:	4b12      	ldr	r3, [pc, #72]	@ (8004a08 <LED_Handler+0x54>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d817      	bhi.n	80049f6 <LED_Handler+0x42>
 80049c6:	e8df f003 	tbb	[pc, r3]
 80049ca:	1402      	.short	0x1402
 80049cc:	1a17      	.short	0x1a17
    {
        case TARGET_LED_STAT_BOOT:
            if (!bootCompleted)
 80049ce:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <LED_Handler+0x58>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b983      	cbnz	r3, 80049f6 <LED_Handler+0x42>
            {
                // BOOT 상태 처리
            	LED_HandleBootState(&counter, &step);
 80049d4:	4c0e      	ldr	r4, [pc, #56]	@ (8004a10 <LED_Handler+0x5c>)
 80049d6:	4621      	mov	r1, r4
 80049d8:	480a      	ldr	r0, [pc, #40]	@ (8004a04 <LED_Handler+0x50>)
 80049da:	f7ff ff57 	bl	800488c <LED_HandleBootState>

                // BOOT 상태 완료 시 COMPLETE로 전환
                if (step > 3) // 모든 단계 완료
 80049de:	7823      	ldrb	r3, [r4, #0]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d908      	bls.n	80049f6 <LED_Handler+0x42>
                {
                    currentState = TARGET_LED_STAT_COMPLETE; // 상태 변경
 80049e4:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <LED_Handler+0x54>)
 80049e6:	2202      	movs	r2, #2
 80049e8:	701a      	strb	r2, [r3, #0]
                    bootCompleted = true; // BOOT 완료 플래그 설정
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <LED_Handler+0x58>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e001      	b.n	80049f6 <LED_Handler+0x42>
                }
            }
            break;

        case TARGET_LED_STAT_PROGRAMMING:
        		LED_HandleProgrammingState(counter);
 80049f2:	f7ff ff9b 	bl	800492c <LED_HandleProgrammingState>
            break;

        default:
            break;
    }
}
 80049f6:	bd10      	pop	{r4, pc}
        		LED_HandleCompleteState();
 80049f8:	f7ff ffb8 	bl	800496c <LED_HandleCompleteState>
            break;
 80049fc:	e7fb      	b.n	80049f6 <LED_Handler+0x42>
        		LED_HandleFailedState();
 80049fe:	f7ff ffc7 	bl	8004990 <LED_HandleFailedState>
}
 8004a02:	e7f8      	b.n	80049f6 <LED_Handler+0x42>
 8004a04:	200042d4 	.word	0x200042d4
 8004a08:	200042d8 	.word	0x200042d8
 8004a0c:	200042d1 	.word	0x200042d1
 8004a10:	200042d0 	.word	0x200042d0

08004a14 <LED_SetState>:

void LED_SetState(LedStatus status)
{
	currentState = status;
 8004a14:	4b01      	ldr	r3, [pc, #4]	@ (8004a1c <LED_SetState+0x8>)
 8004a16:	7018      	strb	r0, [r3, #0]
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	200042d8 	.word	0x200042d8

08004a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error_Handle()\n");
 8004a22:	4802      	ldr	r0, [pc, #8]	@ (8004a2c <Error_Handler+0xc>)
 8004a24:	f00a fa90 	bl	800ef48 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a28:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a2a:	e7fe      	b.n	8004a2a <Error_Handler+0xa>
 8004a2c:	080122a4 	.word	0x080122a4

08004a30 <SystemClock_Config>:
{
 8004a30:	b500      	push	{lr}
 8004a32:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a34:	2230      	movs	r2, #48	@ 0x30
 8004a36:	2100      	movs	r1, #0
 8004a38:	a808      	add	r0, sp, #32
 8004a3a:	f00a fbf1 	bl	800f220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9303      	str	r3, [sp, #12]
 8004a42:	9304      	str	r3, [sp, #16]
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	9306      	str	r3, [sp, #24]
 8004a48:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <SystemClock_Config+0xa4>)
 8004a4e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8004a50:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004a54:	6411      	str	r1, [r2, #64]	@ 0x40
 8004a56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a58:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004a5c:	9201      	str	r2, [sp, #4]
 8004a5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004a60:	9302      	str	r3, [sp, #8]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad8 <SystemClock_Config+0xa8>)
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	6813      	ldr	r3, [r2, #0]
 8004a72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a76:	9302      	str	r3, [sp, #8]
 8004a78:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a82:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a84:	2302      	movs	r3, #2
 8004a86:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004a8c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a8e:	2204      	movs	r2, #4
 8004a90:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004a92:	2278      	movs	r2, #120	@ 0x78
 8004a94:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a96:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004a98:	2305      	movs	r3, #5
 8004a9a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a9c:	a808      	add	r0, sp, #32
 8004a9e:	f001 ffad 	bl	80069fc <HAL_RCC_OscConfig>
 8004aa2:	b998      	cbnz	r0, 8004acc <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aac:	2300      	movs	r3, #0
 8004aae:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ab0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004ab4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004aba:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004abc:	2103      	movs	r1, #3
 8004abe:	a803      	add	r0, sp, #12
 8004ac0:	f002 fa06 	bl	8006ed0 <HAL_RCC_ClockConfig>
 8004ac4:	b920      	cbnz	r0, 8004ad0 <SystemClock_Config+0xa0>
}
 8004ac6:	b015      	add	sp, #84	@ 0x54
 8004ac8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004acc:	f7ff ffa8 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004ad0:	f7ff ffa6 	bl	8004a20 <Error_Handler>
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40007000 	.word	0x40007000

08004adc <main>:
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b09c      	sub	sp, #112	@ 0x70
   HAL_Init();
 8004ae0:	f000 fcd4 	bl	800548c <HAL_Init>
  SystemClock_Config();
 8004ae4:	f7ff ffa4 	bl	8004a30 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	2400      	movs	r4, #0
 8004aea:	9414      	str	r4, [sp, #80]	@ 0x50
 8004aec:	9415      	str	r4, [sp, #84]	@ 0x54
 8004aee:	9416      	str	r4, [sp, #88]	@ 0x58
 8004af0:	9417      	str	r4, [sp, #92]	@ 0x5c
 8004af2:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004af4:	9401      	str	r4, [sp, #4]
 8004af6:	4daa      	ldr	r5, [pc, #680]	@ (8004da0 <main+0x2c4>)
 8004af8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004afa:	f043 0310 	orr.w	r3, r3, #16
 8004afe:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b0a:	9402      	str	r4, [sp, #8]
 8004b0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b12:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b14:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1e:	9403      	str	r4, [sp, #12]
 8004b20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	9303      	str	r3, [sp, #12]
 8004b30:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b32:	9404      	str	r4, [sp, #16]
 8004b34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b36:	f043 0304 	orr.w	r3, r3, #4
 8004b3a:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b46:	9405      	str	r4, [sp, #20]
 8004b48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b4a:	f043 0308 	orr.w	r3, r3, #8
 8004b4e:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5a:	9406      	str	r4, [sp, #24]
 8004b5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	632b      	str	r3, [r5, #48]	@ 0x30
 8004b64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	9306      	str	r3, [sp, #24]
 8004b6c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8004b6e:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 8004dc4 <main+0x2e8>
 8004b72:	2201      	movs	r2, #1
 8004b74:	211c      	movs	r1, #28
 8004b76:	4648      	mov	r0, r9
 8004b78:	f001 f90c 	bl	8005d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin, GPIO_PIN_RESET);
 8004b7c:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8004dc8 <main+0x2ec>
 8004b80:	4622      	mov	r2, r4
 8004b82:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004b86:	4640      	mov	r0, r8
 8004b88:	f001 f904 	bl	8005d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SWD_BUF_DIR_Pin|SWD_IO_Pin, GPIO_PIN_RESET);
 8004b8c:	4f85      	ldr	r7, [pc, #532]	@ (8004da4 <main+0x2c8>)
 8004b8e:	4622      	mov	r2, r4
 8004b90:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004b94:	4638      	mov	r0, r7
 8004b96:	f001 f8fd 	bl	8005d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWD_CLK_GPIO_Port, SWD_CLK_Pin, GPIO_PIN_SET);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2140      	movs	r1, #64	@ 0x40
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f001 f8f8 	bl	8005d94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8004ba4:	231c      	movs	r3, #28
 8004ba6:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ba8:	2601      	movs	r6, #1
 8004baa:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bae:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bb0:	a914      	add	r1, sp, #80	@ 0x50
 8004bb2:	4648      	mov	r0, r9
 8004bb4:	f000 ff28 	bl	8005a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 8004bb8:	f44f 7988 	mov.w	r9, #272	@ 0x110
 8004bbc:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc0:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc6:	a914      	add	r1, sp, #80	@ 0x50
 8004bc8:	4640      	mov	r0, r8
 8004bca:	f000 ff1d 	bl	8005a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 8004bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd2:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd4:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	a914      	add	r1, sp, #80	@ 0x50
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f000 ff14 	bl	8005a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_BUF_DIR_Pin|SWD_IO_Pin;
 8004be0:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be4:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004be6:	9616      	str	r6, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be8:	f04f 0803 	mov.w	r8, #3
 8004bec:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf0:	a914      	add	r1, sp, #80	@ 0x50
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f000 ff08 	bl	8005a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_CLK_Pin;
 8004bf8:	2340      	movs	r3, #64	@ 0x40
 8004bfa:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bfc:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c02:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_CLK_GPIO_Port, &GPIO_InitStruct);
 8004c06:	a914      	add	r1, sp, #80	@ 0x50
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f000 fefd 	bl	8005a08 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c0e:	9400      	str	r4, [sp, #0]
 8004c10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c16:	632b      	str	r3, [r5, #48]	@ 0x30
 8004c18:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8004c22:	4622      	mov	r2, r4
 8004c24:	2106      	movs	r1, #6
 8004c26:	203b      	movs	r0, #59	@ 0x3b
 8004c28:	f000 fc82 	bl	8005530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004c2c:	203b      	movs	r0, #59	@ 0x3b
 8004c2e:	f000 fcb5 	bl	800559c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8004c32:	4622      	mov	r2, r4
 8004c34:	2106      	movs	r1, #6
 8004c36:	2045      	movs	r0, #69	@ 0x45
 8004c38:	f000 fc7a 	bl	8005530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004c3c:	2045      	movs	r0, #69	@ 0x45
 8004c3e:	f000 fcad 	bl	800559c <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8004c42:	4b59      	ldr	r3, [pc, #356]	@ (8004da8 <main+0x2cc>)
 8004c44:	4a59      	ldr	r2, [pc, #356]	@ (8004dac <main+0x2d0>)
 8004c46:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004c48:	605c      	str	r4, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004c4a:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004c4c:	60dc      	str	r4, [r3, #12]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004c4e:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004c50:	619c      	str	r4, [r3, #24]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004c52:	611c      	str	r4, [r3, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c54:	9409      	str	r4, [sp, #36]	@ 0x24
 8004c56:	940a      	str	r4, [sp, #40]	@ 0x28
 8004c58:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004c5a:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c5c:	9407      	str	r4, [sp, #28]
 8004c5e:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c60:	940d      	str	r4, [sp, #52]	@ 0x34
 8004c62:	940e      	str	r4, [sp, #56]	@ 0x38
 8004c64:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004c66:	9410      	str	r4, [sp, #64]	@ 0x40
 8004c68:	9411      	str	r4, [sp, #68]	@ 0x44
 8004c6a:	9412      	str	r4, [sp, #72]	@ 0x48
 8004c6c:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c6e:	2220      	movs	r2, #32
 8004c70:	4621      	mov	r1, r4
 8004c72:	a814      	add	r0, sp, #80	@ 0x50
 8004c74:	f00a fad4 	bl	800f220 <memset>
  htim1.Instance = TIM1;
 8004c78:	484d      	ldr	r0, [pc, #308]	@ (8004db0 <main+0x2d4>)
 8004c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004db4 <main+0x2d8>)
 8004c7c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 120-1;
 8004c7e:	2377      	movs	r3, #119	@ 0x77
 8004c80:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c82:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1000;
 8004c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c88:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c8c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c8e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c90:	f003 fd48 	bl	8008724 <HAL_TIM_Base_Init>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 80d5 	bne.w	8004e44 <main+0x368>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c9e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ca0:	a909      	add	r1, sp, #36	@ 0x24
 8004ca2:	4843      	ldr	r0, [pc, #268]	@ (8004db0 <main+0x2d4>)
 8004ca4:	f003 fe43 	bl	800892e <HAL_TIM_ConfigClockSource>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	f040 80cd 	bne.w	8004e48 <main+0x36c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cae:	4840      	ldr	r0, [pc, #256]	@ (8004db0 <main+0x2d4>)
 8004cb0:	f003 fd64 	bl	800877c <HAL_TIM_PWM_Init>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	f040 80c9 	bne.w	8004e4c <main+0x370>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cbe:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cc0:	a907      	add	r1, sp, #28
 8004cc2:	483b      	ldr	r0, [pc, #236]	@ (8004db0 <main+0x2d4>)
 8004cc4:	f003 ffb6 	bl	8008c34 <HAL_TIMEx_MasterConfigSynchronization>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f040 80c1 	bne.w	8004e50 <main+0x374>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cce:	2360      	movs	r3, #96	@ 0x60
 8004cd0:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cd6:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cd8:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cda:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cdc:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cde:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	a90d      	add	r1, sp, #52	@ 0x34
 8004ce4:	4832      	ldr	r0, [pc, #200]	@ (8004db0 <main+0x2d4>)
 8004ce6:	f003 fda7 	bl	8008838 <HAL_TIM_PWM_ConfigChannel>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f040 80b2 	bne.w	8004e54 <main+0x378>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004cf4:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cf6:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cf8:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cfa:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d00:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d02:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d04:	a914      	add	r1, sp, #80	@ 0x50
 8004d06:	482a      	ldr	r0, [pc, #168]	@ (8004db0 <main+0x2d4>)
 8004d08:	f003 ffd8 	bl	8008cbc <HAL_TIMEx_ConfigBreakDeadTime>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	f040 80a3 	bne.w	8004e58 <main+0x37c>
  HAL_TIM_MspPostInit(&htim1);
 8004d12:	4827      	ldr	r0, [pc, #156]	@ (8004db0 <main+0x2d4>)
 8004d14:	f000 fa48 	bl	80051a8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004d1e:	9316      	str	r3, [sp, #88]	@ 0x58
 8004d20:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d22:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d24:	930e      	str	r3, [sp, #56]	@ 0x38
  htim2.Instance = TIM2;
 8004d26:	4824      	ldr	r0, [pc, #144]	@ (8004db8 <main+0x2dc>)
 8004d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d2c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 60-1;
 8004d2e:	223b      	movs	r2, #59	@ 0x3b
 8004d30:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d32:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8004d34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d38:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d3a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d3c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d3e:	f003 fcf1 	bl	8008724 <HAL_TIM_Base_Init>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f040 808a 	bne.w	8004e5c <main+0x380>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d4c:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d4e:	a914      	add	r1, sp, #80	@ 0x50
 8004d50:	4819      	ldr	r0, [pc, #100]	@ (8004db8 <main+0x2dc>)
 8004d52:	f003 fdec 	bl	800892e <HAL_TIM_ConfigClockSource>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	f040 8082 	bne.w	8004e60 <main+0x384>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d60:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d62:	a90d      	add	r1, sp, #52	@ 0x34
 8004d64:	4814      	ldr	r0, [pc, #80]	@ (8004db8 <main+0x2dc>)
 8004d66:	f003 ff65 	bl	8008c34 <HAL_TIMEx_MasterConfigSynchronization>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d17a      	bne.n	8004e64 <main+0x388>
  hspi1.Instance = SPI1;
 8004d6e:	4813      	ldr	r0, [pc, #76]	@ (8004dbc <main+0x2e0>)
 8004d70:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <main+0x2e4>)
 8004d72:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d74:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004d78:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d7e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d80:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d82:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d88:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d8e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d90:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d94:	230a      	movs	r3, #10
 8004d96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d98:	f003 fa42 	bl	8008220 <HAL_SPI_Init>
 8004d9c:	e016      	b.n	8004dcc <main+0x2f0>
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40020400 	.word	0x40020400
 8004da8:	200044cc 	.word	0x200044cc
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	2000436c 	.word	0x2000436c
 8004db4:	40010000 	.word	0x40010000
 8004db8:	20004324 	.word	0x20004324
 8004dbc:	200043b4 	.word	0x200043b4
 8004dc0:	40013000 	.word	0x40013000
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d14b      	bne.n	8004e68 <main+0x38c>
  huart1.Instance = USART1;
 8004dd0:	4828      	ldr	r0, [pc, #160]	@ (8004e74 <main+0x398>)
 8004dd2:	4b29      	ldr	r3, [pc, #164]	@ (8004e78 <main+0x39c>)
 8004dd4:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8004dd6:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8004dda:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004de0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004de2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004de4:	2208      	movs	r2, #8
 8004de6:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004de8:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dea:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dec:	f004 f885 	bl	8008efa <HAL_UART_Init>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d13b      	bne.n	8004e6c <main+0x390>
  MX_FATFS_Init();
 8004df4:	f005 fa5e 	bl	800a2b4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8004df8:	f009 f87a 	bl	800def0 <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 8004dfc:	481f      	ldr	r0, [pc, #124]	@ (8004e7c <main+0x3a0>)
 8004dfe:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <main+0x3a4>)
 8004e00:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e02:	2300      	movs	r3, #0
 8004e04:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004e06:	227f      	movs	r2, #127	@ 0x7f
 8004e08:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 7874;
 8004e0a:	f641 62c2 	movw	r2, #7874	@ 0x1ec2
 8004e0e:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e10:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e12:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e14:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e16:	f002 fac7 	bl	80073a8 <HAL_RTC_Init>
 8004e1a:	bb48      	cbnz	r0, 8004e70 <main+0x394>
	HAL_TIM_Base_Start(&htim2);
 8004e1c:	4819      	ldr	r0, [pc, #100]	@ (8004e84 <main+0x3a8>)
 8004e1e:	f003 fae5 	bl	80083ec <HAL_TIM_Base_Start>
	LED_SetState(TARGET_LED_STAT_BOOT);
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7ff fdf6 	bl	8004a14 <LED_SetState>
	Buzzer_SetState(BUZZER_BOOT);
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7ff fb8f 	bl	800454c <Buzzer_SetState>
	log_message("ST-FLASHER Boot OK! %s\n", PROJECT_VERSION);
 8004e2e:	4916      	ldr	r1, [pc, #88]	@ (8004e88 <main+0x3ac>)
 8004e30:	4816      	ldr	r0, [pc, #88]	@ (8004e8c <main+0x3b0>)
 8004e32:	f7fd fe35 	bl	8002aa0 <log_message>
	log_message("%s\n", BUILD_INFO);
 8004e36:	4916      	ldr	r1, [pc, #88]	@ (8004e90 <main+0x3b4>)
 8004e38:	4816      	ldr	r0, [pc, #88]	@ (8004e94 <main+0x3b8>)
 8004e3a:	f7fd fe31 	bl	8002aa0 <log_message>
  	Target_MainLoop();
 8004e3e:	f7fe fc6f 	bl	8003720 <Target_MainLoop>
  while (1)
 8004e42:	e7fc      	b.n	8004e3e <main+0x362>
    Error_Handler();
 8004e44:	f7ff fdec 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e48:	f7ff fdea 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e4c:	f7ff fde8 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e50:	f7ff fde6 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e54:	f7ff fde4 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e58:	f7ff fde2 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e5c:	f7ff fde0 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e60:	f7ff fdde 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e64:	f7ff fddc 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e68:	f7ff fdda 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e6c:	f7ff fdd8 	bl	8004a20 <Error_Handler>
    Error_Handler();
 8004e70:	f7ff fdd6 	bl	8004a20 <Error_Handler>
 8004e74:	200042dc 	.word	0x200042dc
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	20004550 	.word	0x20004550
 8004e80:	40002800 	.word	0x40002800
 8004e84:	20004324 	.word	0x20004324
 8004e88:	080122b4 	.word	0x080122b4
 8004e8c:	080122bc 	.word	0x080122bc
 8004e90:	080122d4 	.word	0x080122d4
 8004e94:	080122d0 	.word	0x080122d0

08004e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e98:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	9100      	str	r1, [sp, #0]
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_MspInit+0x34>)
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ea6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eaa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004eae:	9200      	str	r2, [sp, #0]
 8004eb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	9101      	str	r1, [sp, #4]
 8004eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eb6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ec6:	b002      	add	sp, #8
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800

08004ed0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	b08c      	sub	sp, #48	@ 0x30
 8004ed4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ed6:	2230      	movs	r2, #48	@ 0x30
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4668      	mov	r0, sp
 8004edc:	f00a f9a0 	bl	800f220 <memset>
  if(hrtc->Instance==RTC)
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RTC_MspInit+0x3c>)
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004ee8:	b00c      	add	sp, #48	@ 0x30
 8004eea:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004eec:	2320      	movs	r3, #32
 8004eee:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RTC_MspInit+0x40>)
 8004ef2:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ef4:	4668      	mov	r0, sp
 8004ef6:	f002 f8c3 	bl	8007080 <HAL_RCCEx_PeriphCLKConfig>
 8004efa:	b920      	cbnz	r0, 8004f06 <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_RTC_MspInit+0x44>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 8004f04:	e7f0      	b.n	8004ee8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8004f06:	f7ff fd8b 	bl	8004a20 <Error_Handler>
 8004f0a:	e7f7      	b.n	8004efc <HAL_RTC_MspInit+0x2c>
 8004f0c:	40002800 	.word	0x40002800
 8004f10:	00080300 	.word	0x00080300
 8004f14:	42470000 	.word	0x42470000

08004f18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	9305      	str	r3, [sp, #20]
 8004f26:	9306      	str	r3, [sp, #24]
 8004f28:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8004f2a:	6802      	ldr	r2, [r0, #0]
 8004f2c:	4b59      	ldr	r3, [pc, #356]	@ (8005094 <HAL_SD_MspInit+0x17c>)
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d002      	beq.n	8004f38 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8004f32:	b009      	add	sp, #36	@ 0x24
 8004f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f38:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	9500      	str	r5, [sp, #0]
 8004f3e:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004f42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004f50:	9200      	str	r2, [sp, #0]
 8004f52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f54:	9501      	str	r5, [sp, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f58:	f042 0204 	orr.w	r2, r2, #4
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f60:	f002 0204 	and.w	r2, r2, #4
 8004f64:	9201      	str	r2, [sp, #4]
 8004f66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f68:	9502      	str	r5, [sp, #8]
 8004f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004f7c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004f80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	f04f 0802 	mov.w	r8, #2
 8004f86:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f8a:	f04f 0b01 	mov.w	fp, #1
 8004f8e:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f92:	2603      	movs	r6, #3
 8004f94:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f96:	270c      	movs	r7, #12
 8004f98:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f9a:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 80050ac <HAL_SD_MspInit+0x194>
 8004f9e:	eb0d 0107 	add.w	r1, sp, r7
 8004fa2:	4648      	mov	r0, r9
 8004fa4:	f000 fd30 	bl	8005a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004fa8:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8004fac:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fb8:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fba:	eb0d 0107 	add.w	r1, sp, r7
 8004fbe:	4648      	mov	r0, r9
 8004fc0:	f000 fd22 	bl	8005a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fc4:	f04f 0904 	mov.w	r9, #4
 8004fc8:	f8cd 900c 	str.w	r9, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fcc:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fd0:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fd6:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fd8:	eb0d 0107 	add.w	r1, sp, r7
 8004fdc:	482e      	ldr	r0, [pc, #184]	@ (8005098 <HAL_SD_MspInit+0x180>)
 8004fde:	f000 fd13 	bl	8005a08 <HAL_GPIO_Init>
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004fe2:	482e      	ldr	r0, [pc, #184]	@ (800509c <HAL_SD_MspInit+0x184>)
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <HAL_SD_MspInit+0x188>)
 8004fe6:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004fe8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fec:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fee:	6085      	str	r5, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ff0:	60c5      	str	r5, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ff6:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ff8:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005000:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005002:	2320      	movs	r3, #32
 8005004:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005006:	6205      	str	r5, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005008:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800500c:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800500e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005012:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005014:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005018:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800501a:	f000 fb11 	bl	8005640 <HAL_DMA_Init>
 800501e:	2800      	cmp	r0, #0
 8005020:	d131      	bne.n	8005086 <HAL_SD_MspInit+0x16e>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_SD_MspInit+0x184>)
 8005024:	6423      	str	r3, [r4, #64]	@ 0x40
 8005026:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005028:	481e      	ldr	r0, [pc, #120]	@ (80050a4 <HAL_SD_MspInit+0x18c>)
 800502a:	4b1f      	ldr	r3, [pc, #124]	@ (80050a8 <HAL_SD_MspInit+0x190>)
 800502c:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800502e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005032:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005034:	2340      	movs	r3, #64	@ 0x40
 8005036:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005038:	2300      	movs	r3, #0
 800503a:	60c3      	str	r3, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800503c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005040:	6102      	str	r2, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005042:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005046:	6142      	str	r2, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005048:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800504c:	6182      	str	r2, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800504e:	2220      	movs	r2, #32
 8005050:	61c2      	str	r2, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005052:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005054:	2304      	movs	r3, #4
 8005056:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005058:	2303      	movs	r3, #3
 800505a:	6283      	str	r3, [r0, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800505c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005060:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005062:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005066:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005068:	f000 faea 	bl	8005640 <HAL_DMA_Init>
 800506c:	b970      	cbnz	r0, 800508c <HAL_SD_MspInit+0x174>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <HAL_SD_MspInit+0x18c>)
 8005070:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005072:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8005074:	2200      	movs	r2, #0
 8005076:	2105      	movs	r1, #5
 8005078:	2031      	movs	r0, #49	@ 0x31
 800507a:	f000 fa59 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800507e:	2031      	movs	r0, #49	@ 0x31
 8005080:	f000 fa8c 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 8005084:	e755      	b.n	8004f32 <HAL_SD_MspInit+0x1a>
      Error_Handler();
 8005086:	f7ff fccb 	bl	8004a20 <Error_Handler>
 800508a:	e7ca      	b.n	8005022 <HAL_SD_MspInit+0x10a>
      Error_Handler();
 800508c:	f7ff fcc8 	bl	8004a20 <Error_Handler>
 8005090:	e7ed      	b.n	800506e <HAL_SD_MspInit+0x156>
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40020c00 	.word	0x40020c00
 800509c:	2000446c 	.word	0x2000446c
 80050a0:	40026458 	.word	0x40026458
 80050a4:	2000440c 	.word	0x2000440c
 80050a8:	400264a0 	.word	0x400264a0
 80050ac:	40020800 	.word	0x40020800

080050b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b4:	2300      	movs	r3, #0
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	9305      	str	r3, [sp, #20]
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80050c0:	6802      	ldr	r2, [r0, #0]
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_SPI_MspInit+0x7c>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80050c8:	b009      	add	sp, #36	@ 0x24
 80050ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050cc:	2100      	movs	r1, #0
 80050ce:	9101      	str	r1, [sp, #4]
 80050d0:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80050d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050da:	645a      	str	r2, [r3, #68]	@ 0x44
 80050dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050de:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80050e2:	9201      	str	r2, [sp, #4]
 80050e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e6:	9102      	str	r1, [sp, #8]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80050fa:	23a0      	movs	r3, #160	@ 0xa0
 80050fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2702      	movs	r7, #2
 8005100:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005102:	2603      	movs	r6, #3
 8005104:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005106:	2505      	movs	r5, #5
 8005108:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510a:	4c09      	ldr	r4, [pc, #36]	@ (8005130 <HAL_SPI_MspInit+0x80>)
 800510c:	a903      	add	r1, sp, #12
 800510e:	4620      	mov	r0, r4
 8005110:	f000 fc7a 	bl	8005a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005114:	2340      	movs	r3, #64	@ 0x40
 8005116:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005118:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800511a:	2301      	movs	r3, #1
 800511c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005120:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005122:	a903      	add	r1, sp, #12
 8005124:	4620      	mov	r0, r4
 8005126:	f000 fc6f 	bl	8005a08 <HAL_GPIO_Init>
}
 800512a:	e7cd      	b.n	80050c8 <HAL_SPI_MspInit+0x18>
 800512c:	40013000 	.word	0x40013000
 8005130:	40020000 	.word	0x40020000

08005134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005134:	b500      	push	{lr}
 8005136:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8005138:	6803      	ldr	r3, [r0, #0]
 800513a:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <HAL_TIM_Base_MspInit+0x6c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d005      	beq.n	800514c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005144:	d016      	beq.n	8005174 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005146:	b003      	add	sp, #12
 8005148:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800514c:	2100      	movs	r1, #0
 800514e:	9100      	str	r1, [sp, #0]
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <HAL_TIM_Base_MspInit+0x70>)
 8005152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
 800515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005164:	460a      	mov	r2, r1
 8005166:	2019      	movs	r0, #25
 8005168:	f000 f9e2 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800516c:	2019      	movs	r0, #25
 800516e:	f000 fa15 	bl	800559c <HAL_NVIC_EnableIRQ>
 8005172:	e7e8      	b.n	8005146 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005174:	2100      	movs	r1, #0
 8005176:	9101      	str	r1, [sp, #4]
 8005178:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800517c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800518e:	460a      	mov	r2, r1
 8005190:	201c      	movs	r0, #28
 8005192:	f000 f9cd 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005196:	201c      	movs	r0, #28
 8005198:	f000 fa00 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 800519c:	e7d3      	b.n	8005146 <HAL_TIM_Base_MspInit+0x12>
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40023800 	.word	0x40023800

080051a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051a8:	b500      	push	{lr}
 80051aa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ac:	2300      	movs	r3, #0
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	9302      	str	r3, [sp, #8]
 80051b2:	9303      	str	r3, [sp, #12]
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80051b8:	6802      	ldr	r2, [r0, #0]
 80051ba:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <HAL_TIM_MspPostInit+0x54>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d002      	beq.n	80051c6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80051c0:	b007      	add	sp, #28
 80051c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_TIM_MspPostInit+0x58>)
 80051cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ce:	f042 0210 	orr.w	r2, r2, #16
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BEEP_Pin;
 80051de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e4:	2302      	movs	r3, #2
 80051e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80051f0:	a901      	add	r1, sp, #4
 80051f2:	4804      	ldr	r0, [pc, #16]	@ (8005204 <HAL_TIM_MspPostInit+0x5c>)
 80051f4:	f000 fc08 	bl	8005a08 <HAL_GPIO_Init>
}
 80051f8:	e7e2      	b.n	80051c0 <HAL_TIM_MspPostInit+0x18>
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40023800 	.word	0x40023800
 8005204:	40021000 	.word	0x40021000

08005208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	2300      	movs	r3, #0
 800520e:	9303      	str	r3, [sp, #12]
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	9305      	str	r3, [sp, #20]
 8005214:	9306      	str	r3, [sp, #24]
 8005216:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8005218:	6802      	ldr	r2, [r0, #0]
 800521a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800521e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005222:	429a      	cmp	r2, r3
 8005224:	d001      	beq.n	800522a <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005226:	b009      	add	sp, #36	@ 0x24
 8005228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800522a:	2400      	movs	r4, #0
 800522c:	9400      	str	r4, [sp, #0]
 800522e:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8005232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005234:	f042 0210 	orr.w	r2, r2, #16
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
 800523a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800523c:	f002 0210 	and.w	r2, r2, #16
 8005240:	9200      	str	r2, [sp, #0]
 8005242:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005244:	9401      	str	r4, [sp, #4]
 8005246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30
 800524e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005250:	f002 0201 	and.w	r2, r2, #1
 8005254:	9201      	str	r2, [sp, #4]
 8005256:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005258:	9402      	str	r4, [sp, #8]
 800525a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525c:	f042 0202 	orr.w	r2, r2, #2
 8005260:	631a      	str	r2, [r3, #48]	@ 0x30
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	9302      	str	r3, [sp, #8]
 800526a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800526c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005270:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005272:	2702      	movs	r7, #2
 8005274:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005276:	2603      	movs	r6, #3
 8005278:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800527a:	2507      	movs	r5, #7
 800527c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527e:	a903      	add	r1, sp, #12
 8005280:	4806      	ldr	r0, [pc, #24]	@ (800529c <HAL_UART_MspInit+0x94>)
 8005282:	f000 fbc1 	bl	8005a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005290:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005292:	a903      	add	r1, sp, #12
 8005294:	4802      	ldr	r0, [pc, #8]	@ (80052a0 <HAL_UART_MspInit+0x98>)
 8005296:	f000 fbb7 	bl	8005a08 <HAL_GPIO_Init>
}
 800529a:	e7c4      	b.n	8005226 <HAL_UART_MspInit+0x1e>
 800529c:	40020000 	.word	0x40020000
 80052a0:	40020400 	.word	0x40020400

080052a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052a4:	e7fe      	b.n	80052a4 <NMI_Handler>

080052a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052a6:	e7fe      	b.n	80052a6 <HardFault_Handler>

080052a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052a8:	e7fe      	b.n	80052a8 <MemManage_Handler>

080052aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052aa:	e7fe      	b.n	80052aa <BusFault_Handler>

080052ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052ac:	e7fe      	b.n	80052ac <UsageFault_Handler>

080052ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052ae:	4770      	bx	lr

080052b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052b0:	4770      	bx	lr

080052b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052b2:	4770      	bx	lr

080052b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b6:	f000 f903 	bl	80054c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LED_Handler();
 80052ba:	f7ff fb7b 	bl	80049b4 <LED_Handler>
  FileTransferCheck_CheckCompletion();
 80052be:	f7ff f8e7 	bl	8004490 <FileTransferCheck_CheckCompletion>
  /* USER CODE END SysTick_IRQn 1 */
}
 80052c2:	bd08      	pop	{r3, pc}

080052c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80052c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052c6:	4802      	ldr	r0, [pc, #8]	@ (80052d0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80052c8:	f003 f8d4 	bl	8008474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80052cc:	bd08      	pop	{r3, pc}
 80052ce:	bf00      	nop
 80052d0:	2000436c 	.word	0x2000436c

080052d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052d6:	4802      	ldr	r0, [pc, #8]	@ (80052e0 <TIM2_IRQHandler+0xc>)
 80052d8:	f003 f8cc 	bl	8008474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052dc:	bd08      	pop	{r3, pc}
 80052de:	bf00      	nop
 80052e0:	20004324 	.word	0x20004324

080052e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80052e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80052e6:	4802      	ldr	r0, [pc, #8]	@ (80052f0 <SDIO_IRQHandler+0xc>)
 80052e8:	f002 fe48 	bl	8007f7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80052ec:	bd08      	pop	{r3, pc}
 80052ee:	bf00      	nop
 80052f0:	200044cc 	.word	0x200044cc

080052f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80052f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80052f6:	4802      	ldr	r0, [pc, #8]	@ (8005300 <DMA2_Stream3_IRQHandler+0xc>)
 80052f8:	f000 fa96 	bl	8005828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80052fc:	bd08      	pop	{r3, pc}
 80052fe:	bf00      	nop
 8005300:	2000446c 	.word	0x2000446c

08005304 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005306:	4802      	ldr	r0, [pc, #8]	@ (8005310 <OTG_FS_IRQHandler+0xc>)
 8005308:	f000 ff8e 	bl	8006228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800530c:	bd08      	pop	{r3, pc}
 800530e:	bf00      	nop
 8005310:	20004f54 	.word	0x20004f54

08005314 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005316:	4802      	ldr	r0, [pc, #8]	@ (8005320 <DMA2_Stream6_IRQHandler+0xc>)
 8005318:	f000 fa86 	bl	8005828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800531c:	bd08      	pop	{r3, pc}
 800531e:	bf00      	nop
 8005320:	2000440c 	.word	0x2000440c

08005324 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005324:	2001      	movs	r0, #1
 8005326:	4770      	bx	lr

08005328 <_kill>:

int _kill(int pid, int sig)
{
 8005328:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800532a:	f009 ffcb 	bl	800f2c4 <__errno>
 800532e:	2316      	movs	r3, #22
 8005330:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	bd08      	pop	{r3, pc}

08005338 <_exit>:

void _exit (int status)
{
 8005338:	b508      	push	{r3, lr}
  errno = EINVAL;
 800533a:	f009 ffc3 	bl	800f2c4 <__errno>
 800533e:	2316      	movs	r3, #22
 8005340:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005342:	e7fe      	b.n	8005342 <_exit+0xa>

08005344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005344:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005346:	1e16      	subs	r6, r2, #0
 8005348:	dd07      	ble.n	800535a <_read+0x16>
 800534a:	460c      	mov	r4, r1
 800534c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800534e:	f3af 8000 	nop.w
 8005352:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005356:	42a5      	cmp	r5, r4
 8005358:	d1f9      	bne.n	800534e <_read+0xa>
  }

  return len;
}
 800535a:	4630      	mov	r0, r6
 800535c:	bd70      	pop	{r4, r5, r6, pc}

0800535e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800535e:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005360:	1e16      	subs	r6, r2, #0
 8005362:	dd07      	ble.n	8005374 <_write+0x16>
 8005364:	460c      	mov	r4, r1
 8005366:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8005368:	f814 0b01 	ldrb.w	r0, [r4], #1
 800536c:	f7fd fb88 	bl	8002a80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005370:	42a5      	cmp	r5, r4
 8005372:	d1f9      	bne.n	8005368 <_write+0xa>
  }
  return len;
}
 8005374:	4630      	mov	r0, r6
 8005376:	bd70      	pop	{r4, r5, r6, pc}

08005378 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005378:	f04f 30ff 	mov.w	r0, #4294967295
 800537c:	4770      	bx	lr

0800537e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800537e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005382:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005384:	2000      	movs	r0, #0
 8005386:	4770      	bx	lr

08005388 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005388:	2001      	movs	r0, #1
 800538a:	4770      	bx	lr

0800538c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800538c:	2000      	movs	r0, #0
 800538e:	4770      	bx	lr

08005390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005390:	b508      	push	{r3, lr}
 8005392:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005394:	4a0c      	ldr	r2, [pc, #48]	@ (80053c8 <_sbrk+0x38>)
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	b152      	cbz	r2, 80053b0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800539a:	4a0b      	ldr	r2, [pc, #44]	@ (80053c8 <_sbrk+0x38>)
 800539c:	6810      	ldr	r0, [r2, #0]
 800539e:	4403      	add	r3, r0
 80053a0:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <_sbrk+0x3c>)
 80053a2:	490b      	ldr	r1, [pc, #44]	@ (80053d0 <_sbrk+0x40>)
 80053a4:	1a52      	subs	r2, r2, r1
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d806      	bhi.n	80053b8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80053aa:	4a07      	ldr	r2, [pc, #28]	@ (80053c8 <_sbrk+0x38>)
 80053ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80053ae:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80053b0:	4a05      	ldr	r2, [pc, #20]	@ (80053c8 <_sbrk+0x38>)
 80053b2:	4908      	ldr	r1, [pc, #32]	@ (80053d4 <_sbrk+0x44>)
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	e7f0      	b.n	800539a <_sbrk+0xa>
    errno = ENOMEM;
 80053b8:	f009 ff84 	bl	800f2c4 <__errno>
 80053bc:	230c      	movs	r3, #12
 80053be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e7f3      	b.n	80053ae <_sbrk+0x1e>
 80053c6:	bf00      	nop
 80053c8:	20004570 	.word	0x20004570
 80053cc:	20030000 	.word	0x20030000
 80053d0:	00002000 	.word	0x00002000
 80053d4:	20005588 	.word	0x20005588

080053d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053d8:	4a03      	ldr	r2, [pc, #12]	@ (80053e8 <SystemInit+0x10>)
 80053da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80053de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053e6:	4770      	bx	lr
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80053ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005424 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053f0:	f7ff fff2 	bl	80053d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053f4:	480c      	ldr	r0, [pc, #48]	@ (8005428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053f6:	490d      	ldr	r1, [pc, #52]	@ (800542c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053fc:	e002      	b.n	8005404 <LoopCopyDataInit>

080053fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005402:	3304      	adds	r3, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005408:	d3f9      	bcc.n	80053fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540a:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800540c:	4c0a      	ldr	r4, [pc, #40]	@ (8005438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800540e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005410:	e001      	b.n	8005416 <LoopFillZerobss>

08005412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005414:	3204      	adds	r2, #4

08005416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005418:	d3fb      	bcc.n	8005412 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800541a:	f009 ff59 	bl	800f2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800541e:	f7ff fb5d 	bl	8004adc <main>
  bx  lr    
 8005422:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005424:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800542c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8005430:	08012cdc 	.word	0x08012cdc
  ldr r2, =_sbss
 8005434:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8005438:	20005584 	.word	0x20005584

0800543c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800543c:	e7fe      	b.n	800543c <ADC_IRQHandler>
	...

08005440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005444:	4b0e      	ldr	r3, [pc, #56]	@ (8005480 <HAL_InitTick+0x40>)
 8005446:	781a      	ldrb	r2, [r3, #0]
 8005448:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800544c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005450:	4a0c      	ldr	r2, [pc, #48]	@ (8005484 <HAL_InitTick+0x44>)
 8005452:	6810      	ldr	r0, [r2, #0]
 8005454:	fbb0 f0f3 	udiv	r0, r0, r3
 8005458:	f000 f8c0 	bl	80055dc <HAL_SYSTICK_Config>
 800545c:	b968      	cbnz	r0, 800547a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800545e:	2c0f      	cmp	r4, #15
 8005460:	d901      	bls.n	8005466 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8005462:	2001      	movs	r0, #1
 8005464:	e00a      	b.n	800547c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005466:	2200      	movs	r2, #0
 8005468:	4621      	mov	r1, r4
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	f000 f85f 	bl	8005530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005472:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <HAL_InitTick+0x48>)
 8005474:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005476:	2000      	movs	r0, #0
 8005478:	e000      	b.n	800547c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800547a:	2001      	movs	r0, #1
}
 800547c:	bd10      	pop	{r4, pc}
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c
 8005484:	20000008 	.word	0x20000008
 8005488:	20000010 	.word	0x20000010

0800548c <HAL_Init>:
{
 800548c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800548e:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <HAL_Init+0x30>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005496:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800549e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a8:	2003      	movs	r0, #3
 80054aa:	f000 f82f 	bl	800550c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7ff ffc6 	bl	8005440 <HAL_InitTick>
  HAL_MspInit();
 80054b4:	f7ff fcf0 	bl	8004e98 <HAL_MspInit>
}
 80054b8:	2000      	movs	r0, #0
 80054ba:	bd08      	pop	{r3, pc}
 80054bc:	40023c00 	.word	0x40023c00

080054c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80054c0:	4a03      	ldr	r2, [pc, #12]	@ (80054d0 <HAL_IncTick+0x10>)
 80054c2:	6811      	ldr	r1, [r2, #0]
 80054c4:	4b03      	ldr	r3, [pc, #12]	@ (80054d4 <HAL_IncTick+0x14>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	440b      	add	r3, r1
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20004574 	.word	0x20004574
 80054d4:	2000000c 	.word	0x2000000c

080054d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80054d8:	4b01      	ldr	r3, [pc, #4]	@ (80054e0 <HAL_GetTick+0x8>)
 80054da:	6818      	ldr	r0, [r3, #0]
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20004574 	.word	0x20004574

080054e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80054e8:	f7ff fff6 	bl	80054d8 <HAL_GetTick>
 80054ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80054f2:	d002      	beq.n	80054fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <HAL_Delay+0x24>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054fa:	f7ff ffed 	bl	80054d8 <HAL_GetTick>
 80054fe:	1b40      	subs	r0, r0, r5
 8005500:	42a0      	cmp	r0, r4
 8005502:	d3fa      	bcc.n	80054fa <HAL_Delay+0x16>
  {
  }
}
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	bf00      	nop
 8005508:	2000000c 	.word	0x2000000c

0800550c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800550c:	4907      	ldr	r1, [pc, #28]	@ (800552c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800550e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005510:	0203      	lsls	r3, r0, #8
 8005512:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005516:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800551a:	0412      	lsls	r2, r2, #16
 800551c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800551e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005528:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800552a:	4770      	bx	lr
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005530:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005532:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <HAL_NVIC_SetPriority+0x64>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553a:	f1c3 0c07 	rsb	ip, r3, #7
 800553e:	f1bc 0f04 	cmp.w	ip, #4
 8005542:	bf28      	it	cs
 8005544:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005548:	f103 0e04 	add.w	lr, r3, #4
 800554c:	f1be 0f06 	cmp.w	lr, #6
 8005550:	bf8c      	ite	hi
 8005552:	3b03      	subhi	r3, #3
 8005554:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005556:	f04f 3eff 	mov.w	lr, #4294967295
 800555a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800555e:	ea21 010c 	bic.w	r1, r1, ip
 8005562:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005564:	fa0e fe03 	lsl.w	lr, lr, r3
 8005568:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800556c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800556e:	2800      	cmp	r0, #0
 8005570:	db09      	blt.n	8005586 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005572:	0109      	lsls	r1, r1, #4
 8005574:	b2c9      	uxtb	r1, r1
 8005576:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800557a:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800557e:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005582:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005586:	f000 000f 	and.w	r0, r0, #15
 800558a:	0109      	lsls	r1, r1, #4
 800558c:	b2c9      	uxtb	r1, r1
 800558e:	4b02      	ldr	r3, [pc, #8]	@ (8005598 <HAL_NVIC_SetPriority+0x68>)
 8005590:	5419      	strb	r1, [r3, r0]
 8005592:	e7f6      	b.n	8005582 <HAL_NVIC_SetPriority+0x52>
 8005594:	e000ed00 	.word	0xe000ed00
 8005598:	e000ed14 	.word	0xe000ed14

0800559c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800559c:	2800      	cmp	r0, #0
 800559e:	db07      	blt.n	80055b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a0:	0941      	lsrs	r1, r0, #5
 80055a2:	f000 001f 	and.w	r0, r0, #31
 80055a6:	2301      	movs	r3, #1
 80055a8:	4083      	lsls	r3, r0
 80055aa:	4a02      	ldr	r2, [pc, #8]	@ (80055b4 <HAL_NVIC_EnableIRQ+0x18>)
 80055ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000e100 	.word	0xe000e100

080055b8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80055b8:	2800      	cmp	r0, #0
 80055ba:	db0c      	blt.n	80055d6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055bc:	0943      	lsrs	r3, r0, #5
 80055be:	f000 001f 	and.w	r0, r0, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	4082      	lsls	r2, r0
 80055c6:	3320      	adds	r3, #32
 80055c8:	4903      	ldr	r1, [pc, #12]	@ (80055d8 <HAL_NVIC_DisableIRQ+0x20>)
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80055ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80055d2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80055d6:	4770      	bx	lr
 80055d8:	e000e100 	.word	0xe000e100

080055dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055dc:	3801      	subs	r0, #1
 80055de:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80055e2:	d20b      	bcs.n	80055fc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80055e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ea:	4a05      	ldr	r2, [pc, #20]	@ (8005600 <HAL_SYSTICK_Config+0x24>)
 80055ec:	21f0      	movs	r1, #240	@ 0xf0
 80055ee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f2:	2000      	movs	r0, #0
 80055f4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f6:	2207      	movs	r2, #7
 80055f8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80055fc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80055fe:	4770      	bx	lr
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005604:	b410      	push	{r4}
 8005606:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005608:	6803      	ldr	r3, [r0, #0]
 800560a:	b2d8      	uxtb	r0, r3
 800560c:	3810      	subs	r0, #16
 800560e:	490a      	ldr	r1, [pc, #40]	@ (8005638 <DMA_CalcBaseAndBitshift+0x34>)
 8005610:	fba1 4100 	umull	r4, r1, r1, r0
 8005614:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005616:	4c09      	ldr	r4, [pc, #36]	@ (800563c <DMA_CalcBaseAndBitshift+0x38>)
 8005618:	5c61      	ldrb	r1, [r4, r1]
 800561a:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800561c:	285f      	cmp	r0, #95	@ 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800561e:	bf87      	ittee	hi
 8005620:	f36f 0309 	bfchi	r3, #0, #10
 8005624:	1d18      	addhi	r0, r3, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005626:	f423 707f 	bicls.w	r0, r3, #1020	@ 0x3fc
 800562a:	f020 0003 	bicls.w	r0, r0, #3
 800562e:	6590      	str	r0, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8005630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	aaaaaaab 	.word	0xaaaaaaab
 800563c:	08012408 	.word	0x08012408

08005640 <HAL_DMA_Init>:
{
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005644:	f7ff ff48 	bl	80054d8 <HAL_GetTick>
  if(hdma == NULL)
 8005648:	2c00      	cmp	r4, #0
 800564a:	f000 808c 	beq.w	8005766 <HAL_DMA_Init+0x126>
 800564e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8005650:	2302      	movs	r3, #2
 8005652:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8005656:	2300      	movs	r3, #0
 8005658:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f012 0f01 	tst.w	r2, #1
 800566e:	d00a      	beq.n	8005686 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005670:	f7ff ff32 	bl	80054d8 <HAL_GetTick>
 8005674:	1b43      	subs	r3, r0, r5
 8005676:	2b05      	cmp	r3, #5
 8005678:	d9f5      	bls.n	8005666 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800567a:	2320      	movs	r3, #32
 800567c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800567e:	2003      	movs	r0, #3
 8005680:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8005684:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8005686:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005688:	4938      	ldr	r1, [pc, #224]	@ (800576c <HAL_DMA_Init+0x12c>)
 800568a:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800568c:	6862      	ldr	r2, [r4, #4]
 800568e:	68a0      	ldr	r0, [r4, #8]
 8005690:	4302      	orrs	r2, r0
 8005692:	68e0      	ldr	r0, [r4, #12]
 8005694:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005696:	6920      	ldr	r0, [r4, #16]
 8005698:	4302      	orrs	r2, r0
 800569a:	6960      	ldr	r0, [r4, #20]
 800569c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569e:	69a0      	ldr	r0, [r4, #24]
 80056a0:	4302      	orrs	r2, r0
 80056a2:	69e0      	ldr	r0, [r4, #28]
 80056a4:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	6a20      	ldr	r0, [r4, #32]
 80056a8:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056aa:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056ae:	2904      	cmp	r1, #4
 80056b0:	d021      	beq.n	80056f6 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 80056b2:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80056b4:	6821      	ldr	r1, [r4, #0]
 80056b6:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056b8:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 80056bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056be:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d10a      	bne.n	80056da <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80056c4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80056c6:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056ca:	b133      	cbz	r3, 80056da <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056cc:	69a5      	ldr	r5, [r4, #24]
 80056ce:	bb3d      	cbnz	r5, 8005720 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80056d0:	2801      	cmp	r0, #1
 80056d2:	d01f      	beq.n	8005714 <HAL_DMA_Init+0xd4>
 80056d4:	f030 0002 	bics.w	r0, r0, #2
 80056d8:	d012      	beq.n	8005700 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80056da:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff ff91 	bl	8005604 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80056e4:	233f      	movs	r3, #63	@ 0x3f
 80056e6:	4093      	lsls	r3, r2
 80056e8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ea:	2000      	movs	r0, #0
 80056ec:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80056f4:	e7c6      	b.n	8005684 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80056f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80056fa:	4301      	orrs	r1, r0
 80056fc:	430a      	orrs	r2, r1
 80056fe:	e7d8      	b.n	80056b2 <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005700:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0e8      	beq.n	80056da <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005708:	2340      	movs	r3, #64	@ 0x40
 800570a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800570c:	2001      	movs	r0, #1
 800570e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8005712:	e7b7      	b.n	8005684 <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005714:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005718:	bf14      	ite	ne
 800571a:	2300      	movne	r3, #0
 800571c:	2301      	moveq	r3, #1
 800571e:	e7f1      	b.n	8005704 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005720:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8005724:	d008      	beq.n	8005738 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005726:	2802      	cmp	r0, #2
 8005728:	d9ee      	bls.n	8005708 <HAL_DMA_Init+0xc8>
 800572a:	2803      	cmp	r0, #3
 800572c:	d1d5      	bne.n	80056da <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800572e:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0d1      	beq.n	80056da <HAL_DMA_Init+0x9a>
 8005736:	e7e7      	b.n	8005708 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8005738:	2803      	cmp	r0, #3
 800573a:	d8ce      	bhi.n	80056da <HAL_DMA_Init+0x9a>
 800573c:	a501      	add	r5, pc, #4	@ (adr r5, 8005744 <HAL_DMA_Init+0x104>)
 800573e:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005709 	.word	0x08005709
 8005748:	08005755 	.word	0x08005755
 800574c:	08005709 	.word	0x08005709
 8005750:	0800575b 	.word	0x0800575b
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005754:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8005758:	e7eb      	b.n	8005732 <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800575a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800575e:	bf14      	ite	ne
 8005760:	2300      	movne	r3, #0
 8005762:	2301      	moveq	r3, #1
 8005764:	e7e5      	b.n	8005732 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8005766:	2001      	movs	r0, #1
 8005768:	e78c      	b.n	8005684 <HAL_DMA_Init+0x44>
 800576a:	bf00      	nop
 800576c:	f010803f 	.word	0xf010803f

08005770 <HAL_DMA_Start_IT>:
{
 8005770:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005772:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8005774:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8005778:	f1bc 0f01 	cmp.w	ip, #1
 800577c:	d03f      	beq.n	80057fe <HAL_DMA_Start_IT+0x8e>
 800577e:	f04f 0c01 	mov.w	ip, #1
 8005782:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005786:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 800578a:	fa5f fc8c 	uxtb.w	ip, ip
 800578e:	f1bc 0f01 	cmp.w	ip, #1
 8005792:	d005      	beq.n	80057a0 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8005794:	2300      	movs	r3, #0
 8005796:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 800579a:	2002      	movs	r0, #2
}
 800579c:	bc70      	pop	{r4, r5, r6}
 800579e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80057a0:	2502      	movs	r5, #2
 80057a2:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a6:	2500      	movs	r5, #0
 80057a8:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057aa:	6806      	ldr	r6, [r0, #0]
 80057ac:	6835      	ldr	r5, [r6, #0]
 80057ae:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 80057b2:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80057b4:	6805      	ldr	r5, [r0, #0]
 80057b6:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057b8:	6883      	ldr	r3, [r0, #8]
 80057ba:	2b40      	cmp	r3, #64	@ 0x40
 80057bc:	d01a      	beq.n	80057f4 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80057be:	6803      	ldr	r3, [r0, #0]
 80057c0:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80057c8:	233f      	movs	r3, #63	@ 0x3f
 80057ca:	4093      	lsls	r3, r2
 80057cc:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057ce:	6802      	ldr	r2, [r0, #0]
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f043 0316 	orr.w	r3, r3, #22
 80057d6:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80057d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80057da:	b123      	cbz	r3, 80057e6 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 80057dc:	6802      	ldr	r2, [r0, #0]
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80057e6:	6802      	ldr	r2, [r0, #0]
 80057e8:	6813      	ldr	r3, [r2, #0]
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7d3      	b.n	800579c <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	60d9      	str	r1, [r3, #12]
 80057fc:	e7e3      	b.n	80057c6 <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 80057fe:	2002      	movs	r0, #2
 8005800:	e7cc      	b.n	800579c <HAL_DMA_Start_IT+0x2c>

08005802 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005802:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d003      	beq.n	8005814 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005810:	2001      	movs	r0, #1
 8005812:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005814:	2305      	movs	r3, #5
 8005816:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800581a:	6802      	ldr	r2, [r0, #0]
 800581c:	6813      	ldr	r3, [r2, #0]
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005824:	2000      	movs	r0, #0
}
 8005826:	4770      	bx	lr

08005828 <HAL_DMA_IRQHandler>:
{
 8005828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005832:	4b72      	ldr	r3, [pc, #456]	@ (80059fc <HAL_DMA_IRQHandler+0x1d4>)
 8005834:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005836:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8005838:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800583a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800583c:	2308      	movs	r3, #8
 800583e:	4093      	lsls	r3, r2
 8005840:	422b      	tst	r3, r5
 8005842:	d010      	beq.n	8005866 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005844:	6803      	ldr	r3, [r0, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	f012 0f04 	tst.w	r2, #4
 800584c:	d00b      	beq.n	8005866 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	f022 0204 	bic.w	r2, r2, #4
 8005854:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005856:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005858:	2308      	movs	r3, #8
 800585a:	4093      	lsls	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800585e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005866:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005868:	2301      	movs	r3, #1
 800586a:	4093      	lsls	r3, r2
 800586c:	422b      	tst	r3, r5
 800586e:	d009      	beq.n	8005884 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	6952      	ldr	r2, [r2, #20]
 8005874:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005878:	d004      	beq.n	8005884 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800587a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800587c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005884:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005886:	2304      	movs	r3, #4
 8005888:	4093      	lsls	r3, r2
 800588a:	422b      	tst	r3, r5
 800588c:	d009      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	f012 0f02 	tst.w	r2, #2
 8005896:	d004      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005898:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800589a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058a2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80058a4:	2310      	movs	r3, #16
 80058a6:	4093      	lsls	r3, r2
 80058a8:	422b      	tst	r3, r5
 80058aa:	d024      	beq.n	80058f6 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	f012 0f08 	tst.w	r2, #8
 80058b4:	d01f      	beq.n	80058f6 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058b6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80058c0:	d00d      	beq.n	80058de <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80058c8:	d104      	bne.n	80058d4 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80058ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058cc:	b19b      	cbz	r3, 80058f6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80058ce:	4620      	mov	r0, r4
 80058d0:	4798      	blx	r3
 80058d2:	e010      	b.n	80058f6 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058d4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80058d6:	b173      	cbz	r3, 80058f6 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80058d8:	4620      	mov	r0, r4
 80058da:	4798      	blx	r3
 80058dc:	e00b      	b.n	80058f6 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80058e4:	d103      	bne.n	80058ee <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f022 0208 	bic.w	r2, r2, #8
 80058ec:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80058ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058f0:	b10b      	cbz	r3, 80058f6 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80058f2:	4620      	mov	r0, r4
 80058f4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80058f8:	2320      	movs	r3, #32
 80058fa:	4093      	lsls	r3, r2
 80058fc:	422b      	tst	r3, r5
 80058fe:	d055      	beq.n	80059ac <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f012 0f10 	tst.w	r2, #16
 8005908:	d050      	beq.n	80059ac <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800590a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800590c:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b05      	cmp	r3, #5
 8005914:	d00e      	beq.n	8005934 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800591e:	d033      	beq.n	8005988 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005926:	d12a      	bne.n	800597e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8005928:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800592a:	2b00      	cmp	r3, #0
 800592c:	d03e      	beq.n	80059ac <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 800592e:	4620      	mov	r0, r4
 8005930:	4798      	blx	r3
 8005932:	e03b      	b.n	80059ac <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	f023 0316 	bic.w	r3, r3, #22
 800593c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	6953      	ldr	r3, [r2, #20]
 8005942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005946:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005948:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800594a:	b1a3      	cbz	r3, 8005976 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	6813      	ldr	r3, [r2, #0]
 8005950:	f023 0308 	bic.w	r3, r3, #8
 8005954:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005956:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005958:	233f      	movs	r3, #63	@ 0x3f
 800595a:	4093      	lsls	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800595e:	2301      	movs	r3, #1
 8005960:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005964:	2300      	movs	r3, #0
 8005966:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800596a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d043      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005970:	4620      	mov	r0, r4
 8005972:	4798      	blx	r3
 8005974:	e040      	b.n	80059f8 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005976:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e7      	bne.n	800594c <HAL_DMA_IRQHandler+0x124>
 800597c:	e7eb      	b.n	8005956 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 800597e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005980:	b1a3      	cbz	r3, 80059ac <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8005982:	4620      	mov	r0, r4
 8005984:	4798      	blx	r3
 8005986:	e011      	b.n	80059ac <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800598e:	d109      	bne.n	80059a4 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	f022 0210 	bic.w	r2, r2, #16
 8005996:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005998:	2301      	movs	r3, #1
 800599a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800599e:	2300      	movs	r3, #0
 80059a0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80059a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80059a6:	b10b      	cbz	r3, 80059ac <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 80059a8:	4620      	mov	r0, r4
 80059aa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059ae:	b31b      	cbz	r3, 80059f8 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059b2:	f013 0f01 	tst.w	r3, #1
 80059b6:	d01b      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_DMA_IRQHandler+0x1d8>)
 80059ba:	fba3 3606 	umull	r3, r6, r3, r6
 80059be:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c0:	2305      	movs	r3, #5
 80059c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	42b3      	cmp	r3, r6
 80059d8:	d804      	bhi.n	80059e4 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f013 0f01 	tst.w	r3, #1
 80059e2:	d1f5      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80059f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80059f2:	b10b      	cbz	r3, 80059f8 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80059f4:	4620      	mov	r0, r4
 80059f6:	4798      	blx	r3
}
 80059f8:	b003      	add	sp, #12
 80059fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fc:	20000008 	.word	0x20000008
 8005a00:	1b4e81b5 	.word	0x1b4e81b5

08005a04 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005a04:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005a06:	4770      	bx	lr

08005a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a10:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a12:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a16:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a18:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a1c:	4c7c      	ldr	r4, [pc, #496]	@ (8005c10 <HAL_GPIO_Init+0x208>)
 8005a1e:	e04b      	b.n	8005ab8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8005a20:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a22:	fa05 fa02 	lsl.w	sl, r5, r2
 8005a26:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a2a:	68cf      	ldr	r7, [r1, #12]
 8005a2c:	4097      	lsls	r7, r2
 8005a2e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005a32:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005a34:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a36:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a3a:	684f      	ldr	r7, [r1, #4]
 8005a3c:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8005a40:	409f      	lsls	r7, r3
 8005a42:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8005a46:	6047      	str	r7, [r0, #4]
 8005a48:	e044      	b.n	8005ad4 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a4a:	f04f 0c00 	mov.w	ip, #0
 8005a4e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005a52:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a56:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8005a5a:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005a5c:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a60:	684e      	ldr	r6, [r1, #4]
 8005a62:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005a66:	bf0c      	ite	eq
 8005a68:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005a6c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8005a70:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8005a72:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a74:	684e      	ldr	r6, [r1, #4]
 8005a76:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005a7a:	bf0c      	ite	eq
 8005a7c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005a80:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8005a84:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8005a86:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a88:	684e      	ldr	r6, [r1, #4]
 8005a8a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005a8e:	bf0c      	ite	eq
 8005a90:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005a94:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8005a98:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a9a:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a9c:	684e      	ldr	r6, [r1, #4]
 8005a9e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005aa2:	bf0c      	ite	eq
 8005aa4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005aa8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8005aac:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aae:	3301      	adds	r3, #1
 8005ab0:	3202      	adds	r2, #2
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	f000 80a9 	beq.w	8005c0a <HAL_GPIO_Init+0x202>
    ioposition = 0x01U << position;
 8005ab8:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005abc:	680f      	ldr	r7, [r1, #0]
 8005abe:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8005ac2:	ea3c 0707 	bics.w	r7, ip, r7
 8005ac6:	d1f2      	bne.n	8005aae <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac8:	684f      	ldr	r7, [r1, #4]
 8005aca:	f007 0703 	and.w	r7, r7, #3
 8005ace:	3f01      	subs	r7, #1
 8005ad0:	2f01      	cmp	r7, #1
 8005ad2:	d9a5      	bls.n	8005a20 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ad4:	684f      	ldr	r7, [r1, #4]
 8005ad6:	f007 0703 	and.w	r7, r7, #3
 8005ada:	2f03      	cmp	r7, #3
 8005adc:	d023      	beq.n	8005b26 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8005ade:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ae0:	fa05 fc02 	lsl.w	ip, r5, r2
 8005ae4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ae8:	688f      	ldr	r7, [r1, #8]
 8005aea:	4097      	lsls	r7, r2
 8005aec:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8005af0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af2:	684f      	ldr	r7, [r1, #4]
 8005af4:	f007 0703 	and.w	r7, r7, #3
 8005af8:	2f02      	cmp	r7, #2
 8005afa:	d114      	bne.n	8005b26 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8005afc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8005b00:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005b04:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b08:	f003 0b07 	and.w	fp, r3, #7
 8005b0c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005b10:	fa08 fa0b 	lsl.w	sl, r8, fp
 8005b14:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b18:	690f      	ldr	r7, [r1, #16]
 8005b1a:	fa07 f70b 	lsl.w	r7, r7, fp
 8005b1e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005b22:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8005b26:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b28:	fa05 fc02 	lsl.w	ip, r5, r2
 8005b2c:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b30:	684f      	ldr	r7, [r1, #4]
 8005b32:	f007 0703 	and.w	r7, r7, #3
 8005b36:	4097      	lsls	r7, r2
 8005b38:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8005b3c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b3e:	684f      	ldr	r7, [r1, #4]
 8005b40:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8005b44:	d0b3      	beq.n	8005aae <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b46:	2700      	movs	r7, #0
 8005b48:	9701      	str	r7, [sp, #4]
 8005b4a:	4e32      	ldr	r6, [pc, #200]	@ (8005c14 <HAL_GPIO_Init+0x20c>)
 8005b4c:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8005b4e:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8005b52:	6477      	str	r7, [r6, #68]	@ 0x44
 8005b54:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8005b56:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8005b5a:	9701      	str	r7, [sp, #4]
 8005b5c:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5e:	f023 0703 	bic.w	r7, r3, #3
 8005b62:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005b66:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8005b6a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b6e:	f003 0b03 	and.w	fp, r3, #3
 8005b72:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005b76:	fa08 fc0b 	lsl.w	ip, r8, fp
 8005b7a:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b7e:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8005b82:	42b0      	cmp	r0, r6
 8005b84:	f43f af61 	beq.w	8005a4a <HAL_GPIO_Init+0x42>
 8005b88:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005b8c:	42b0      	cmp	r0, r6
 8005b8e:	d024      	beq.n	8005bda <HAL_GPIO_Init+0x1d2>
 8005b90:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005b94:	42b0      	cmp	r0, r6
 8005b96:	d023      	beq.n	8005be0 <HAL_GPIO_Init+0x1d8>
 8005b98:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8005c18 <HAL_GPIO_Init+0x210>
 8005b9c:	4560      	cmp	r0, ip
 8005b9e:	d022      	beq.n	8005be6 <HAL_GPIO_Init+0x1de>
 8005ba0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005ba4:	4560      	cmp	r0, ip
 8005ba6:	d021      	beq.n	8005bec <HAL_GPIO_Init+0x1e4>
 8005ba8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005bac:	4560      	cmp	r0, ip
 8005bae:	d020      	beq.n	8005bf2 <HAL_GPIO_Init+0x1ea>
 8005bb0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005bb4:	4560      	cmp	r0, ip
 8005bb6:	d01f      	beq.n	8005bf8 <HAL_GPIO_Init+0x1f0>
 8005bb8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005bbc:	4560      	cmp	r0, ip
 8005bbe:	d01e      	beq.n	8005bfe <HAL_GPIO_Init+0x1f6>
 8005bc0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005bc4:	4560      	cmp	r0, ip
 8005bc6:	d01d      	beq.n	8005c04 <HAL_GPIO_Init+0x1fc>
 8005bc8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005bcc:	4560      	cmp	r0, ip
 8005bce:	bf14      	ite	ne
 8005bd0:	f04f 0c0a 	movne.w	ip, #10
 8005bd4:	f04f 0c09 	moveq.w	ip, #9
 8005bd8:	e739      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005bda:	f04f 0c01 	mov.w	ip, #1
 8005bde:	e736      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005be0:	f04f 0c02 	mov.w	ip, #2
 8005be4:	e733      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005be6:	f04f 0c03 	mov.w	ip, #3
 8005bea:	e730      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005bec:	f04f 0c04 	mov.w	ip, #4
 8005bf0:	e72d      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005bf2:	f04f 0c05 	mov.w	ip, #5
 8005bf6:	e72a      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005bf8:	f04f 0c06 	mov.w	ip, #6
 8005bfc:	e727      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005bfe:	f04f 0c07 	mov.w	ip, #7
 8005c02:	e724      	b.n	8005a4e <HAL_GPIO_Init+0x46>
 8005c04:	f04f 0c08 	mov.w	ip, #8
 8005c08:	e721      	b.n	8005a4e <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8005c0a:	b003      	add	sp, #12
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	40013c00 	.word	0x40013c00
 8005c14:	40023800 	.word	0x40023800
 8005c18:	40020c00 	.word	0x40020c00

08005c1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c22:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c24:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005c26:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c2a:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c2e:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8005d80 <HAL_GPIO_DeInit+0x164>
 8005c32:	e029      	b.n	8005c88 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005c34:	f04f 0900 	mov.w	r9, #0
 8005c38:	9d01      	ldr	r5, [sp, #4]
 8005c3a:	fa09 f505 	lsl.w	r5, r9, r5
 8005c3e:	4565      	cmp	r5, ip
 8005c40:	d07c      	beq.n	8005d3c <HAL_GPIO_DeInit+0x120>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c42:	6805      	ldr	r5, [r0, #0]
 8005c44:	005c      	lsls	r4, r3, #1
 8005c46:	fa0b f404 	lsl.w	r4, fp, r4
 8005c4a:	ea25 0504 	bic.w	r5, r5, r4
 8005c4e:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c50:	08de      	lsrs	r6, r3, #3
 8005c52:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005c56:	f8d6 c020 	ldr.w	ip, [r6, #32]
 8005c5a:	f003 0507 	and.w	r5, r3, #7
 8005c5e:	00ad      	lsls	r5, r5, #2
 8005c60:	fa0a f505 	lsl.w	r5, sl, r5
 8005c64:	ea2c 0505 	bic.w	r5, ip, r5
 8005c68:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c6a:	68c5      	ldr	r5, [r0, #12]
 8005c6c:	ea25 0504 	bic.w	r5, r5, r4
 8005c70:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c72:	6845      	ldr	r5, [r0, #4]
 8005c74:	ea25 0202 	bic.w	r2, r5, r2
 8005c78:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c7a:	6882      	ldr	r2, [r0, #8]
 8005c7c:	ea22 0204 	bic.w	r2, r2, r4
 8005c80:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c82:	3301      	adds	r3, #1
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d076      	beq.n	8005d76 <HAL_GPIO_DeInit+0x15a>
    ioposition = 0x01U << position;
 8005c88:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8005c8c:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8005c90:	ea32 0401 	bics.w	r4, r2, r1
 8005c94:	d1f5      	bne.n	8005c82 <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005c96:	f023 0403 	bic.w	r4, r3, #3
 8005c9a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005c9e:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
 8005ca2:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005ca6:	f003 0503 	and.w	r5, r3, #3
 8005caa:	00ad      	lsls	r5, r5, #2
 8005cac:	9501      	str	r5, [sp, #4]
 8005cae:	fa0a fe05 	lsl.w	lr, sl, r5
 8005cb2:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005cb6:	4d31      	ldr	r5, [pc, #196]	@ (8005d7c <HAL_GPIO_DeInit+0x160>)
 8005cb8:	42a8      	cmp	r0, r5
 8005cba:	d0bb      	beq.n	8005c34 <HAL_GPIO_DeInit+0x18>
 8005cbc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cc0:	42a8      	cmp	r0, r5
 8005cc2:	d024      	beq.n	8005d0e <HAL_GPIO_DeInit+0xf2>
 8005cc4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cc8:	42a8      	cmp	r0, r5
 8005cca:	d022      	beq.n	8005d12 <HAL_GPIO_DeInit+0xf6>
 8005ccc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cd0:	42a8      	cmp	r0, r5
 8005cd2:	d021      	beq.n	8005d18 <HAL_GPIO_DeInit+0xfc>
 8005cd4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cd8:	42a8      	cmp	r0, r5
 8005cda:	d020      	beq.n	8005d1e <HAL_GPIO_DeInit+0x102>
 8005cdc:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8005d84 <HAL_GPIO_DeInit+0x168>
 8005ce0:	4548      	cmp	r0, r9
 8005ce2:	d01f      	beq.n	8005d24 <HAL_GPIO_DeInit+0x108>
 8005ce4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8005ce8:	4548      	cmp	r0, r9
 8005cea:	d01e      	beq.n	8005d2a <HAL_GPIO_DeInit+0x10e>
 8005cec:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8005cf0:	4548      	cmp	r0, r9
 8005cf2:	d01d      	beq.n	8005d30 <HAL_GPIO_DeInit+0x114>
 8005cf4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8005cf8:	4548      	cmp	r0, r9
 8005cfa:	d01c      	beq.n	8005d36 <HAL_GPIO_DeInit+0x11a>
 8005cfc:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8005d00:	4548      	cmp	r0, r9
 8005d02:	bf14      	ite	ne
 8005d04:	f04f 090a 	movne.w	r9, #10
 8005d08:	f04f 0909 	moveq.w	r9, #9
 8005d0c:	e794      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d0e:	46b9      	mov	r9, r7
 8005d10:	e792      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d12:	f04f 0902 	mov.w	r9, #2
 8005d16:	e78f      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d18:	f04f 0903 	mov.w	r9, #3
 8005d1c:	e78c      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d1e:	f04f 0904 	mov.w	r9, #4
 8005d22:	e789      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d24:	f04f 0905 	mov.w	r9, #5
 8005d28:	e786      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d2a:	f04f 0906 	mov.w	r9, #6
 8005d2e:	e783      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d30:	f04f 0907 	mov.w	r9, #7
 8005d34:	e780      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
 8005d36:	f04f 0908 	mov.w	r9, #8
 8005d3a:	e77d      	b.n	8005c38 <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d3c:	f8d8 5000 	ldr.w	r5, [r8]
 8005d40:	ea25 0506 	bic.w	r5, r5, r6
 8005d44:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d4c:	ea25 0506 	bic.w	r5, r5, r6
 8005d50:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d54:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8005d58:	ea25 0506 	bic.w	r5, r5, r6
 8005d5c:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d60:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8005d64:	ea25 0506 	bic.w	r5, r5, r6
 8005d68:	f8c8 5008 	str.w	r5, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005d6c:	68a5      	ldr	r5, [r4, #8]
 8005d6e:	ea25 050e 	bic.w	r5, r5, lr
 8005d72:	60a5      	str	r5, [r4, #8]
 8005d74:	e765      	b.n	8005c42 <HAL_GPIO_DeInit+0x26>
    }
  }
}
 8005d76:	b003      	add	sp, #12
 8005d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7c:	40020000 	.word	0x40020000
 8005d80:	40013c00 	.word	0x40013c00
 8005d84:	40021400 	.word	0x40021400

08005d88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d88:	6903      	ldr	r3, [r0, #16]
 8005d8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005d8c:	bf14      	ite	ne
 8005d8e:	2001      	movne	r0, #1
 8005d90:	2000      	moveq	r0, #0
 8005d92:	4770      	bx	lr

08005d94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d94:	b10a      	cbz	r2, 8005d9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d96:	6181      	str	r1, [r0, #24]
 8005d98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d9a:	0409      	lsls	r1, r1, #16
 8005d9c:	6181      	str	r1, [r0, #24]
  }
}
 8005d9e:	4770      	bx	lr

08005da0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005da0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005da2:	ea01 0203 	and.w	r2, r1, r3
 8005da6:	ea21 0103 	bic.w	r1, r1, r3
 8005daa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dae:	6181      	str	r1, [r0, #24]
}
 8005db0:	4770      	bx	lr

08005db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005db2:	b530      	push	{r4, r5, lr}
 8005db4:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d06e      	beq.n	8005e98 <HAL_PCD_Init+0xe6>
 8005dba:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005dbc:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dbe:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8005dc2:	b1d3      	cbz	r3, 8005dfa <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005dca:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  {
    hpcd->Init.dma_enable = 0U;
 8005dce:	bf04      	itt	eq
 8005dd0:	2300      	moveq	r3, #0
 8005dd2:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	f003 fda1 	bl	800991c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dda:	7c23      	ldrb	r3, [r4, #16]
 8005ddc:	f88d 3000 	strb.w	r3, [sp]
 8005de0:	1d23      	adds	r3, r4, #4
 8005de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	f003 fcd7 	bl	8009798 <USB_CoreInit>
 8005dea:	b158      	cbz	r0, 8005e04 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dec:	2302      	movs	r3, #2
 8005dee:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005df2:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005df4:	4628      	mov	r0, r5
 8005df6:	b003      	add	sp, #12
 8005df8:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005dfa:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8005dfe:	f008 f9a1 	bl	800e144 <HAL_PCD_MspInit>
 8005e02:	e7df      	b.n	8005dc4 <HAL_PCD_Init+0x12>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e04:	2100      	movs	r1, #0
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	f003 fd8e 	bl	8009928 <USB_SetCurrentMode>
 8005e0c:	bbb0      	cbnz	r0, 8005e7c <HAL_PCD_Init+0xca>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e0e:	7925      	ldrb	r5, [r4, #4]
 8005e10:	b32d      	cbz	r5, 8005e5e <HAL_PCD_Init+0xac>
 8005e12:	4623      	mov	r3, r4
 8005e14:	4622      	mov	r2, r4
 8005e16:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8005e18:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e1c:	4608      	mov	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 8005e1e:	f882 e015 	strb.w	lr, [r2, #21]
    hpcd->IN_ep[i].num = i;
 8005e22:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e26:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e28:	61d0      	str	r0, [r2, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e2a:	6210      	str	r0, [r2, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e2c:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e30:	468c      	mov	ip, r1
 8005e32:	3101      	adds	r1, #1
 8005e34:	42a9      	cmp	r1, r5
 8005e36:	d1f2      	bne.n	8005e1e <HAL_PCD_Init+0x6c>
 8005e38:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8005e3a:	460a      	mov	r2, r1
 8005e3c:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8005e40:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e44:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e48:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e4c:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e50:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e54:	3324      	adds	r3, #36	@ 0x24
 8005e56:	4561      	cmp	r1, ip
 8005e58:	f101 0101 	add.w	r1, r1, #1
 8005e5c:	d1ee      	bne.n	8005e3c <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e5e:	7c23      	ldrb	r3, [r4, #16]
 8005e60:	f88d 3000 	strb.w	r3, [sp]
 8005e64:	1d23      	adds	r3, r4, #4
 8005e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	f003 fddd 	bl	8009a28 <USB_DevInit>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	b148      	cbz	r0, 8005e86 <HAL_PCD_Init+0xd4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e72:	2302      	movs	r3, #2
 8005e74:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005e78:	2501      	movs	r5, #1
 8005e7a:	e7bb      	b.n	8005df4 <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8005e82:	2501      	movs	r5, #1
 8005e84:	e7b6      	b.n	8005df4 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	f004 f991 	bl	800a1b8 <USB_DevDisconnect>
  return HAL_OK;
 8005e96:	e7ad      	b.n	8005df4 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8005e98:	2501      	movs	r5, #1
 8005e9a:	e7ab      	b.n	8005df4 <HAL_PCD_Init+0x42>

08005e9c <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8005e9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e9e:	b190      	cbz	r0, 8005ec6 <HAL_PCD_DeInit+0x2a>
 8005ea0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	f880 3495 	strb.w	r3, [r0, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8005ea8:	6800      	ldr	r0, [r0, #0]
 8005eaa:	f004 f948 	bl	800a13e <USB_StopDevice>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b110      	cbz	r0, 8005eb8 <HAL_PCD_DeInit+0x1c>
  {
    return HAL_ERROR;
 8005eb2:	2501      	movs	r5, #1
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
  HAL_PCD_MspDeInit(hpcd);
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f008 f985 	bl	800e1c8 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  return HAL_OK;
 8005ec4:	e7f6      	b.n	8005eb4 <HAL_PCD_DeInit+0x18>
    return HAL_ERROR;
 8005ec6:	2501      	movs	r5, #1
 8005ec8:	e7f4      	b.n	8005eb4 <HAL_PCD_DeInit+0x18>

08005eca <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eca:	6803      	ldr	r3, [r0, #0]

  __HAL_LOCK(hpcd);
 8005ecc:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8005ed0:	2a01      	cmp	r2, #1
 8005ed2:	d01a      	beq.n	8005f0a <HAL_PCD_Start+0x40>
{
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005ee4:	d002      	beq.n	8005eec <HAL_PCD_Start+0x22>
 8005ee6:	7b42      	ldrb	r2, [r0, #13]
 8005ee8:	2a01      	cmp	r2, #1
 8005eea:	d009      	beq.n	8005f00 <HAL_PCD_Start+0x36>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	f003 fd0f 	bl	8009910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	f004 f952 	bl	800a19c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8005efe:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f08:	e7f0      	b.n	8005eec <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8005f0a:	2002      	movs	r0, #2
}
 8005f0c:	4770      	bx	lr

08005f0e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8005f0e:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8005f10:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d01e      	beq.n	8005f56 <HAL_PCD_Stop+0x48>
 8005f18:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f1a:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8005f22:	4628      	mov	r0, r5
 8005f24:	f003 fcfa 	bl	800991c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	f004 f945 	bl	800a1b8 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f2e:	2110      	movs	r1, #16
 8005f30:	6820      	ldr	r0, [r4, #0]
 8005f32:	f003 fd2a 	bl	800998a <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f36:	68eb      	ldr	r3, [r5, #12]
 8005f38:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005f3c:	d002      	beq.n	8005f44 <HAL_PCD_Stop+0x36>
 8005f3e:	7b63      	ldrb	r3, [r4, #13]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d003      	beq.n	8005f4c <HAL_PCD_Stop+0x3e>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }

  __HAL_UNLOCK(hpcd);
 8005f44:	2000      	movs	r0, #0
 8005f46:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f4c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f52:	63ab      	str	r3, [r5, #56]	@ 0x38
 8005f54:	e7f6      	b.n	8005f44 <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 8005f56:	2002      	movs	r0, #2
 8005f58:	e7f7      	b.n	8005f4a <HAL_PCD_Stop+0x3c>

08005f5a <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8005f5a:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d00c      	beq.n	8005f7c <HAL_PCD_SetAddress+0x22>
{
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005f66:	2301      	movs	r3, #1
 8005f68:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005f6c:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	f004 f904 	bl	800a17c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f74:	2000      	movs	r0, #0
 8005f76:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8005f7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005f7c:	2002      	movs	r0, #2
}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	468c      	mov	ip, r1
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f86:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005f8a:	d12a      	bne.n	8005fe2 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f8c:	f001 000f 	and.w	r0, r1, #15
 8005f90:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8005f94:	eb04 0e81 	add.w	lr, r4, r1, lsl #2
 8005f98:	f50e 7115 	add.w	r1, lr, #596	@ 0x254
    ep->is_in = 0U;
 8005f9c:	4670      	mov	r0, lr
 8005f9e:	f04f 0e00 	mov.w	lr, #0
 8005fa2:	f880 e255 	strb.w	lr, [r0, #597]	@ 0x255
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa6:	f00c 0c0f 	and.w	ip, ip, #15
 8005faa:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005fae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005fb2:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8005fb4:	710b      	strb	r3, [r1, #4]

  if (ep->is_in != 0U)
 8005fb6:	784a      	ldrb	r2, [r1, #1]
 8005fb8:	b10a      	cbz	r2, 8005fbe <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fba:	f8a1 c01a 	strh.w	ip, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fbe:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8005fc0:	bf04      	itt	eq
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 8005fc6:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d019      	beq.n	8006002 <HAL_PCD_EP_Open+0x82>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	f003 fe04 	bl	8009be2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return ret;
}
 8005fe0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe2:	f001 000f 	and.w	r0, r1, #15
 8005fe6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8005fea:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005fee:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8005ff0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005ff4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005ff8:	f04f 0e01 	mov.w	lr, #1
 8005ffc:	f880 e015 	strb.w	lr, [r0, #21]
 8006000:	e7d1      	b.n	8005fa6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8006002:	2002      	movs	r0, #2
 8006004:	e7ec      	b.n	8005fe0 <HAL_PCD_EP_Open+0x60>

08006006 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800600c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006010:	d11f      	bne.n	8006052 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006012:	f001 020f 	and.w	r2, r1, #15
 8006016:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 800601a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800601e:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8006022:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8006026:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800602a:	2000      	movs	r0, #0
 800602c:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8006036:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800603a:	2b01      	cmp	r3, #1
 800603c:	d017      	beq.n	800606e <HAL_PCD_EP_Close+0x68>
 800603e:	2301      	movs	r3, #1
 8006040:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	f003 fe17 	bl	8009c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800604a:	2000      	movs	r0, #0
 800604c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
  return HAL_OK;
}
 8006050:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006052:	f001 020f 	and.w	r2, r1, #15
 8006056:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 800605a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800605e:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006060:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8006064:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006068:	2001      	movs	r0, #1
 800606a:	7550      	strb	r0, [r2, #21]
 800606c:	e7e0      	b.n	8006030 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800606e:	2002      	movs	r0, #2
 8006070:	e7ee      	b.n	8006050 <HAL_PCD_EP_Close+0x4a>

08006072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006072:	b510      	push	{r4, lr}
 8006074:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006076:	f001 0c0f 	and.w	ip, r1, #15
 800607a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800607e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006082:	f501 7115 	add.w	r1, r1, #596	@ 0x254

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006086:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800608a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800608e:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8006092:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 800609c:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a0:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
 80060a4:	7982      	ldrb	r2, [r0, #6]
 80060a6:	2a01      	cmp	r2, #1
 80060a8:	d004      	beq.n	80060b4 <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	f003 feba 	bl	8009e24 <USB_EPStartXfer>

  return HAL_OK;
}
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80060b4:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 80060b8:	e7f7      	b.n	80060aa <HAL_PCD_EP_Receive+0x38>

080060ba <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060ba:	f001 010f 	and.w	r1, r1, #15
 80060be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80060c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80060c6:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 80060ca:	4770      	bx	lr

080060cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d0:	f001 0c0f 	and.w	ip, r1, #15
 80060d4:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 80060d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060dc:	3114      	adds	r1, #20

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060de:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 80060e2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80060e6:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80060ea:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fa:	f88e c014 	strb.w	ip, [lr, #20]

  if (hpcd->Init.dma_enable == 1U)
 80060fe:	7982      	ldrb	r2, [r0, #6]
 8006100:	429a      	cmp	r2, r3
 8006102:	d004      	beq.n	800610e <HAL_PCD_EP_Transmit+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	f003 fe8d 	bl	8009e24 <USB_EPStartXfer>

  return HAL_OK;
}
 800610a:	2000      	movs	r0, #0
 800610c:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800610e:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8006112:	e7f7      	b.n	8006104 <HAL_PCD_EP_Transmit+0x38>

08006114 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006114:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006116:	f001 050f 	and.w	r5, r1, #15
 800611a:	7902      	ldrb	r2, [r0, #4]
 800611c:	42aa      	cmp	r2, r5
 800611e:	d336      	bcc.n	800618e <HAL_PCD_EP_SetStall+0x7a>
 8006120:	4604      	mov	r4, r0
 8006122:	460b      	mov	r3, r1
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006124:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006128:	d11e      	bne.n	8006168 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800612a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800612e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006132:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8006136:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800613a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  }

  ep->is_stall = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006148:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 800614a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800614e:	2b01      	cmp	r3, #1
 8006150:	d01f      	beq.n	8006192 <HAL_PCD_EP_SetStall+0x7e>
 8006152:	2301      	movs	r3, #1
 8006154:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	f003 ff95 	bl	800a088 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800615e:	b17d      	cbz	r5, 8006180 <HAL_PCD_EP_SetStall+0x6c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }

  __HAL_UNLOCK(hpcd);
 8006160:	2000      	movs	r0, #0
 8006162:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8006166:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006168:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800616c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006170:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006172:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8006176:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800617a:	2201      	movs	r2, #1
 800617c:	755a      	strb	r2, [r3, #21]
 800617e:	e7e1      	b.n	8006144 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006180:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006184:	79a1      	ldrb	r1, [r4, #6]
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	f004 f864 	bl	800a254 <USB_EP0_OutStart>
 800618c:	e7e8      	b.n	8006160 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 800618e:	2001      	movs	r0, #1
 8006190:	e7e9      	b.n	8006166 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8006192:	2002      	movs	r0, #2
 8006194:	e7e7      	b.n	8006166 <HAL_PCD_EP_SetStall+0x52>

08006196 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006196:	f001 030f 	and.w	r3, r1, #15
 800619a:	7902      	ldrb	r2, [r0, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d32e      	bcc.n	80061fe <HAL_PCD_EP_ClrStall+0x68>
{
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061a4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80061a8:	d11d      	bne.n	80061e6 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061aa:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80061ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061b2:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80061b6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80061ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061be:	2000      	movs	r0, #0
 80061c0:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }

  ep->is_stall = 0U;
 80061c4:	2200      	movs	r2, #0
 80061c6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c8:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80061ca:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d017      	beq.n	8006202 <HAL_PCD_EP_ClrStall+0x6c>
 80061d2:	2301      	movs	r3, #1
 80061d4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	f003 ff82 	bl	800a0e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061de:	2000      	movs	r0, #0
 80061e0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 80061e4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e6:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80061ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061ee:	3114      	adds	r1, #20
    ep->is_in = 1U;
 80061f0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80061f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061f8:	2001      	movs	r0, #1
 80061fa:	7550      	strb	r0, [r2, #21]
 80061fc:	e7e2      	b.n	80061c4 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80061fe:	2001      	movs	r0, #1
}
 8006200:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8006202:	2002      	movs	r0, #2
 8006204:	e7ee      	b.n	80061e4 <HAL_PCD_EP_ClrStall+0x4e>

08006206 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006206:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006208:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800620c:	f001 010f 	and.w	r1, r1, #15
 8006210:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006214:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006218:	bf14      	ite	ne
 800621a:	3114      	addne	r1, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800621c:	f501 7115 	addeq.w	r1, r1, #596	@ 0x254
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006220:	6800      	ldr	r0, [r0, #0]
 8006222:	f003 fd97 	bl	8009d54 <USB_EPStopXfer>

  return ret;
}
 8006226:	bd08      	pop	{r3, pc}

08006228 <HAL_PCD_IRQHandler>:
{
 8006228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	b089      	sub	sp, #36	@ 0x24
 800622e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006230:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006232:	4630      	mov	r0, r6
 8006234:	f003 fffc 	bl	800a230 <USB_GetMode>
 8006238:	b110      	cbz	r0, 8006240 <HAL_PCD_IRQHandler+0x18>
}
 800623a:	b009      	add	sp, #36	@ 0x24
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006242:	6820      	ldr	r0, [r4, #0]
 8006244:	f003 ffc6 	bl	800a1d4 <USB_ReadInterrupts>
 8006248:	2800      	cmp	r0, #0
 800624a:	d0f6      	beq.n	800623a <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800624c:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8006256:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800625a:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	f003 ffb8 	bl	800a1d4 <USB_ReadInterrupts>
 8006264:	f010 0f02 	tst.w	r0, #2
 8006268:	d004      	beq.n	8006274 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	6953      	ldr	r3, [r2, #20]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	f003 ffad 	bl	800a1d4 <USB_ReadInterrupts>
 800627a:	f010 0f10 	tst.w	r0, #16
 800627e:	d014      	beq.n	80062aa <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	6993      	ldr	r3, [r2, #24]
 8006284:	f023 0310 	bic.w	r3, r3, #16
 8006288:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 800628a:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800628c:	f005 070f 	and.w	r7, r5, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006290:	f405 13f0 	and.w	r3, r5, #1966080	@ 0x1e0000
 8006294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006298:	d052      	beq.n	8006340 <HAL_PCD_IRQHandler+0x118>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800629a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800629e:	d06d      	beq.n	800637c <HAL_PCD_IRQHandler+0x154>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	6993      	ldr	r3, [r2, #24]
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	f003 ff92 	bl	800a1d4 <USB_ReadInterrupts>
 80062b0:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80062b4:	d174      	bne.n	80063a0 <HAL_PCD_IRQHandler+0x178>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	f003 ff8c 	bl	800a1d4 <USB_ReadInterrupts>
 80062bc:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80062c0:	f040 8151 	bne.w	8006566 <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	f003 ff85 	bl	800a1d4 <USB_ReadInterrupts>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f2c0 8221 	blt.w	8006712 <HAL_PCD_IRQHandler+0x4ea>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	f003 ff7f 	bl	800a1d4 <USB_ReadInterrupts>
 80062d6:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80062da:	d00a      	beq.n	80062f2 <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f013 0f01 	tst.w	r3, #1
 80062e4:	f040 822e 	bne.w	8006744 <HAL_PCD_IRQHandler+0x51c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	6953      	ldr	r3, [r2, #20]
 80062ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062f0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	f003 ff6e 	bl	800a1d4 <USB_ReadInterrupts>
 80062f8:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 80062fc:	f040 8226 	bne.w	800674c <HAL_PCD_IRQHandler+0x524>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	f003 ff67 	bl	800a1d4 <USB_ReadInterrupts>
 8006306:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 800630a:	f040 8276 	bne.w	80067fa <HAL_PCD_IRQHandler+0x5d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	f003 ff60 	bl	800a1d4 <USB_ReadInterrupts>
 8006314:	f010 0f08 	tst.w	r0, #8
 8006318:	f040 8287 	bne.w	800682a <HAL_PCD_IRQHandler+0x602>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	f003 ff59 	bl	800a1d4 <USB_ReadInterrupts>
 8006322:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8006326:	f000 8297 	beq.w	8006858 <HAL_PCD_IRQHandler+0x630>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800632a:	69b3      	ldr	r3, [r6, #24]
 800632c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006330:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006332:	7923      	ldrb	r3, [r4, #4]
 8006334:	2b01      	cmp	r3, #1
 8006336:	f240 828f 	bls.w	8006858 <HAL_PCD_IRQHandler+0x630>
 800633a:	4627      	mov	r7, r4
 800633c:	2501      	movs	r5, #1
 800633e:	e286      	b.n	800684e <HAL_PCD_IRQHandler+0x626>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006340:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006344:	421d      	tst	r5, r3
 8006346:	d0ab      	beq.n	80062a0 <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006348:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800634c:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
 8006350:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006354:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8006358:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 800635c:	4630      	mov	r0, r6
 800635e:	f003 fe6f 	bl	800a040 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006362:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8006366:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
 800636a:	4453      	add	r3, sl
 800636c:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006370:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8006374:	4453      	add	r3, sl
 8006376:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 800637a:	e791      	b.n	80062a0 <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800637c:	2208      	movs	r2, #8
 800637e:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8006382:	4630      	mov	r0, r6
 8006384:	f003 fe5c 	bl	800a040 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006388:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 800638c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006390:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8006394:	f8d1 2268 	ldr.w	r2, [r1, #616]	@ 0x268
 8006398:	4413      	add	r3, r2
 800639a:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
 800639e:	e77f      	b.n	80062a0 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	f003 ff1b 	bl	800a1dc <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80063a6:	4605      	mov	r5, r0
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d084      	beq.n	80062b6 <HAL_PCD_IRQHandler+0x8e>
 80063ac:	f506 6730 	add.w	r7, r6, #2816	@ 0xb00
 80063b0:	46a2      	mov	sl, r4
      epnum = 0U;
 80063b2:	46d9      	mov	r9, fp
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80063b4:	f8cd b010 	str.w	fp, [sp, #16]
 80063b8:	e0a7      	b.n	800650a <HAL_PCD_IRQHandler+0x2e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063ba:	2301      	movs	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063be:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063c0:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063c4:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 80063c8:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 80063cc:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80063ce:	79a2      	ldrb	r2, [r4, #6]
 80063d0:	2a01      	cmp	r2, #1
 80063d2:	d00e      	beq.n	80063f2 <HAL_PCD_IRQHandler+0x1ca>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063d4:	4a9e      	ldr	r2, [pc, #632]	@ (8006650 <HAL_PCD_IRQHandler+0x428>)
 80063d6:	4594      	cmp	ip, r2
 80063d8:	d048      	beq.n	800646c <HAL_PCD_IRQHandler+0x244>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063da:	f1b9 0f00 	cmp.w	r9, #0
 80063de:	d103      	bne.n	80063e8 <HAL_PCD_IRQHandler+0x1c0>
 80063e0:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d052      	beq.n	800648e <HAL_PCD_IRQHandler+0x266>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063e8:	4659      	mov	r1, fp
 80063ea:	4620      	mov	r0, r4
 80063ec:	f007 ff0c 	bl	800e208 <HAL_PCD_DataOutStageCallback>
 80063f0:	e099      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063f2:	f011 0f08 	tst.w	r1, #8
 80063f6:	d00b      	beq.n	8006410 <HAL_PCD_IRQHandler+0x1e8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f8:	4a96      	ldr	r2, [pc, #600]	@ (8006654 <HAL_PCD_IRQHandler+0x42c>)
 80063fa:	4594      	cmp	ip, r2
 80063fc:	f240 8093 	bls.w	8006526 <HAL_PCD_IRQHandler+0x2fe>
 8006400:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006404:	f000 808f 	beq.w	8006526 <HAL_PCD_IRQHandler+0x2fe>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006408:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	e08a      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006410:	f011 0f20 	tst.w	r1, #32
 8006414:	d002      	beq.n	800641c <HAL_PCD_IRQHandler+0x1f4>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006416:	2220      	movs	r2, #32
 8006418:	609a      	str	r2, [r3, #8]
 800641a:	e084      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800641c:	4a8d      	ldr	r2, [pc, #564]	@ (8006654 <HAL_PCD_IRQHandler+0x42c>)
 800641e:	4594      	cmp	ip, r2
 8006420:	d906      	bls.n	8006430 <HAL_PCD_IRQHandler+0x208>
 8006422:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006426:	d003      	beq.n	8006430 <HAL_PCD_IRQHandler+0x208>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006428:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	e07a      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006436:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
 8006440:	f1b9 0f00 	cmp.w	r9, #0
 8006444:	d107      	bne.n	8006456 <HAL_PCD_IRQHandler+0x22e>
          if (ep->xfer_len == 0U)
 8006446:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 800644a:	b14a      	cbz	r2, 8006460 <HAL_PCD_IRQHandler+0x238>
            ep->xfer_buff += ep->xfer_count;
 800644c:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 8006450:	441a      	add	r2, r3
 8006452:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006456:	4659      	mov	r1, fp
 8006458:	4620      	mov	r0, r4
 800645a:	f007 fed5 	bl	800e208 <HAL_PCD_DataOutStageCallback>
 800645e:	e062      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006460:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006464:	2101      	movs	r1, #1
 8006466:	f003 fef5 	bl	800a254 <USB_EP0_OutStart>
 800646a:	e7f4      	b.n	8006456 <HAL_PCD_IRQHandler+0x22e>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800646c:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006470:	d003      	beq.n	800647a <HAL_PCD_IRQHandler+0x252>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006472:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	e055      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800647a:	f011 0f20 	tst.w	r1, #32
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800647e:	bf1c      	itt	ne
 8006480:	2220      	movne	r2, #32
 8006482:	609a      	strne	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006484:	4659      	mov	r1, fp
 8006486:	4620      	mov	r0, r4
 8006488:	f007 febe 	bl	800e208 <HAL_PCD_DataOutStageCallback>
 800648c:	e04b      	b.n	8006526 <HAL_PCD_IRQHandler+0x2fe>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800648e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006492:	2100      	movs	r1, #0
 8006494:	f003 fede 	bl	800a254 <USB_EP0_OutStart>
 8006498:	e7a6      	b.n	80063e8 <HAL_PCD_IRQHandler+0x1c0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800649a:	2308      	movs	r3, #8
 800649c:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800649e:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a6:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 80064aa:	6898      	ldr	r0, [r3, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ac:	4a69      	ldr	r2, [pc, #420]	@ (8006654 <HAL_PCD_IRQHandler+0x42c>)
 80064ae:	4291      	cmp	r1, r2
 80064b0:	f240 8259 	bls.w	8006966 <HAL_PCD_IRQHandler+0x73e>
 80064b4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80064b8:	d002      	beq.n	80064c0 <HAL_PCD_IRQHandler+0x298>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80064be:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064c0:	4620      	mov	r0, r4
 80064c2:	f007 fe99 	bl	800e1f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064c6:	79a3      	ldrb	r3, [r4, #6]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d12f      	bne.n	800652c <HAL_PCD_IRQHandler+0x304>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064cc:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80064d0:	2101      	movs	r1, #1
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	f003 febe 	bl	800a254 <USB_EP0_OutStart>
 80064d8:	e028      	b.n	800652c <HAL_PCD_IRQHandler+0x304>
            if (ep->is_iso_incomplete == 1U)
 80064da:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d036      	beq.n	8006550 <HAL_PCD_IRQHandler+0x328>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80064e2:	2302      	movs	r3, #2
 80064e4:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064e6:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ea:	bf1c      	itt	ne
 80064ec:	2320      	movne	r3, #32
 80064ee:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80064f0:	f418 5f00 	tst.w	r8, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064f4:	bf1c      	itt	ne
 80064f6:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 80064fa:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80064fc:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 8006500:	3720      	adds	r7, #32
 8006502:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 8006506:	086d      	lsrs	r5, r5, #1
 8006508:	d02a      	beq.n	8006560 <HAL_PCD_IRQHandler+0x338>
        if ((ep_intr & 0x1U) != 0U)
 800650a:	f015 0f01 	tst.w	r5, #1
 800650e:	d0f5      	beq.n	80064fc <HAL_PCD_IRQHandler+0x2d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006510:	fa5f fb89 	uxtb.w	fp, r9
 8006514:	4659      	mov	r1, fp
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	f003 fe70 	bl	800a1fc <USB_ReadDevOutEPInterrupt>
 800651c:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800651e:	f010 0f01 	tst.w	r0, #1
 8006522:	f47f af4a 	bne.w	80063ba <HAL_PCD_IRQHandler+0x192>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006526:	f018 0f08 	tst.w	r8, #8
 800652a:	d1b6      	bne.n	800649a <HAL_PCD_IRQHandler+0x272>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800652c:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006530:	bf1c      	itt	ne
 8006532:	2310      	movne	r3, #16
 8006534:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006536:	f018 0f02 	tst.w	r8, #2
 800653a:	d0d4      	beq.n	80064e6 <HAL_PCD_IRQHandler+0x2be>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800653c:	6973      	ldr	r3, [r6, #20]
 800653e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006542:	d0ca      	beq.n	80064da <HAL_PCD_IRQHandler+0x2b2>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006544:	9a03      	ldr	r2, [sp, #12]
 8006546:	6853      	ldr	r3, [r2, #4]
 8006548:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800654c:	6053      	str	r3, [r2, #4]
 800654e:	e7c4      	b.n	80064da <HAL_PCD_IRQHandler+0x2b2>
              ep->is_iso_incomplete = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006556:	4659      	mov	r1, fp
 8006558:	4620      	mov	r0, r4
 800655a:	f007 fea5 	bl	800e2a8 <HAL_PCD_ISOOUTIncompleteCallback>
 800655e:	e7c0      	b.n	80064e2 <HAL_PCD_IRQHandler+0x2ba>
 8006560:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006564:	e6a7      	b.n	80062b6 <HAL_PCD_IRQHandler+0x8e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	f003 fe40 	bl	800a1ec <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800656c:	4680      	mov	r8, r0
 800656e:	2800      	cmp	r0, #0
 8006570:	f43f aea8 	beq.w	80062c4 <HAL_PCD_IRQHandler+0x9c>
 8006574:	46a2      	mov	sl, r4
 8006576:	f506 6910 	add.w	r9, r6, #2304	@ 0x900
      epnum = 0U;
 800657a:	465d      	mov	r5, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800657c:	f8cd b010 	str.w	fp, [sp, #16]
 8006580:	e024      	b.n	80065cc <HAL_PCD_IRQHandler+0x3a4>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006582:	4659      	mov	r1, fp
 8006584:	4620      	mov	r0, r4
 8006586:	f007 fe4b 	bl	800e220 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800658a:	f017 0f08 	tst.w	r7, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800658e:	bf1c      	itt	ne
 8006590:	2308      	movne	r3, #8
 8006592:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006596:	f017 0f10 	tst.w	r7, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800659a:	bf1c      	itt	ne
 800659c:	2310      	movne	r3, #16
 800659e:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80065a2:	f017 0f40 	tst.w	r7, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80065a6:	bf1c      	itt	ne
 80065a8:	2340      	movne	r3, #64	@ 0x40
 80065aa:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80065ae:	f017 0f02 	tst.w	r7, #2
 80065b2:	d139      	bne.n	8006628 <HAL_PCD_IRQHandler+0x400>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80065b4:	f017 0f80 	tst.w	r7, #128	@ 0x80
 80065b8:	d14e      	bne.n	8006658 <HAL_PCD_IRQHandler+0x430>
        epnum++;
 80065ba:	3501      	adds	r5, #1
      while (ep_intr != 0U)
 80065bc:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80065c0:	f109 0920 	add.w	r9, r9, #32
 80065c4:	ea5f 0858 	movs.w	r8, r8, lsr #1
 80065c8:	f000 80a0 	beq.w	800670c <HAL_PCD_IRQHandler+0x4e4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065cc:	f018 0f01 	tst.w	r8, #1
 80065d0:	d0f3      	beq.n	80065ba <HAL_PCD_IRQHandler+0x392>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065d2:	fa5f fb85 	uxtb.w	fp, r5
 80065d6:	4659      	mov	r1, fp
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	f003 fe18 	bl	800a20e <USB_ReadDevInEPInterrupt>
 80065de:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065e0:	f010 0f01 	tst.w	r0, #1
 80065e4:	d0d1      	beq.n	800658a <HAL_PCD_IRQHandler+0x362>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065e6:	9803      	ldr	r0, [sp, #12]
 80065e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065ea:	f005 020f 	and.w	r2, r5, #15
 80065ee:	2101      	movs	r1, #1
 80065f0:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065f4:	ea23 0302 	bic.w	r3, r3, r2
 80065f8:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80065fa:	f8c9 1008 	str.w	r1, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80065fe:	79a3      	ldrb	r3, [r4, #6]
 8006600:	428b      	cmp	r3, r1
 8006602:	d1be      	bne.n	8006582 <HAL_PCD_IRQHandler+0x35a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006604:	f8da 3020 	ldr.w	r3, [sl, #32]
 8006608:	f8da 201c 	ldr.w	r2, [sl, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f8ca 3020 	str.w	r3, [sl, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006612:	2d00      	cmp	r5, #0
 8006614:	d1b5      	bne.n	8006582 <HAL_PCD_IRQHandler+0x35a>
 8006616:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1b2      	bne.n	8006582 <HAL_PCD_IRQHandler+0x35a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800661c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	f003 fe17 	bl	800a254 <USB_EP0_OutStart>
 8006626:	e7ac      	b.n	8006582 <HAL_PCD_IRQHandler+0x35a>
            (void)USB_FlushTxFifo(USBx, epnum);
 8006628:	4629      	mov	r1, r5
 800662a:	4630      	mov	r0, r6
 800662c:	f003 f9ad 	bl	800998a <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8006630:	f89a 3017 	ldrb.w	r3, [sl, #23]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d003      	beq.n	8006640 <HAL_PCD_IRQHandler+0x418>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006638:	2302      	movs	r3, #2
 800663a:	f8c9 3008 	str.w	r3, [r9, #8]
 800663e:	e7b9      	b.n	80065b4 <HAL_PCD_IRQHandler+0x38c>
              ep->is_iso_incomplete = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	f88a 3017 	strb.w	r3, [sl, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006646:	4659      	mov	r1, fp
 8006648:	4620      	mov	r0, r4
 800664a:	f007 fe33 	bl	800e2b4 <HAL_PCD_ISOINIncompleteCallback>
 800664e:	e7f3      	b.n	8006638 <HAL_PCD_IRQHandler+0x410>
 8006650:	4f54310a 	.word	0x4f54310a
 8006654:	4f54300a 	.word	0x4f54300a
  if (ep->xfer_count > ep->xfer_len)
 8006658:	4657      	mov	r7, sl
 800665a:	f8da c028 	ldr.w	ip, [sl, #40]	@ 0x28
 800665e:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8006662:	459c      	cmp	ip, r3
 8006664:	d8a9      	bhi.n	80065ba <HAL_PCD_IRQHandler+0x392>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006666:	6821      	ldr	r1, [r4, #0]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006668:	f501 6010 	add.w	r0, r1, #2304	@ 0x900
 800666c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8006670:	f8d0 e018 	ldr.w	lr, [r0, #24]
  len = ep->xfer_len - ep->xfer_count;
 8006674:	eba3 030c 	sub.w	r3, r3, ip
  if (len > ep->maxpacket)
 8006678:	f8da 201c 	ldr.w	r2, [sl, #28]
 800667c:	4293      	cmp	r3, r2
 800667e:	bf28      	it	cs
 8006680:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
 8006682:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006684:	fa1f f28e 	uxth.w	r2, lr
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006688:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 800668c:	d328      	bcc.n	80066e0 <HAL_PCD_IRQHandler+0x4b8>
 800668e:	9605      	str	r6, [sp, #20]
 8006690:	9506      	str	r5, [sp, #24]
 8006692:	f8cd 801c 	str.w	r8, [sp, #28]
 8006696:	460e      	mov	r6, r1
 8006698:	4680      	mov	r8, r0
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800669e:	429d      	cmp	r5, r3
 80066a0:	d924      	bls.n	80066ec <HAL_PCD_IRQHandler+0x4c4>
    len = ep->xfer_len - ep->xfer_count;
 80066a2:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	429d      	cmp	r5, r3
 80066a8:	bf28      	it	cs
 80066aa:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066ac:	79a3      	ldrb	r3, [r4, #6]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	b2ab      	uxth	r3, r5
 80066b2:	465a      	mov	r2, fp
 80066b4:	6a39      	ldr	r1, [r7, #32]
 80066b6:	4630      	mov	r0, r6
 80066b8:	f003 fb9d 	bl	8009df6 <USB_WritePacket>
    ep->xfer_buff  += len;
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	442b      	add	r3, r5
 80066c0:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	442b      	add	r3, r5
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
    len32b = (len + 3U) / 4U;
 80066cc:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066d0:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 80066d4:	d2e1      	bcs.n	800669a <HAL_PCD_IRQHandler+0x472>
 80066d6:	9d06      	ldr	r5, [sp, #24]
 80066d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80066dc:	4631      	mov	r1, r6
 80066de:	9e05      	ldr	r6, [sp, #20]
  if (ep->xfer_len <= ep->xfer_count)
 80066e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f63f af68 	bhi.w	80065ba <HAL_PCD_IRQHandler+0x392>
 80066ea:	e004      	b.n	80066f6 <HAL_PCD_IRQHandler+0x4ce>
 80066ec:	9d06      	ldr	r5, [sp, #24]
 80066ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80066f2:	4631      	mov	r1, r6
 80066f4:	9e05      	ldr	r6, [sp, #20]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066f6:	f8d1 3834 	ldr.w	r3, [r1, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066fa:	f005 000f 	and.w	r0, r5, #15
 80066fe:	2201      	movs	r2, #1
 8006700:	4082      	lsls	r2, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006702:	ea23 0302 	bic.w	r3, r3, r2
 8006706:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834
 800670a:	e756      	b.n	80065ba <HAL_PCD_IRQHandler+0x392>
 800670c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006710:	e5d8      	b.n	80062c4 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006712:	9a03      	ldr	r2, [sp, #12]
 8006714:	6853      	ldr	r3, [r2, #4]
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 800671c:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8006720:	2b01      	cmp	r3, #1
 8006722:	d008      	beq.n	8006736 <HAL_PCD_IRQHandler+0x50e>
        HAL_PCD_ResumeCallback(hpcd);
 8006724:	4620      	mov	r0, r4
 8006726:	f007 fdb9 	bl	800e29c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6953      	ldr	r3, [r2, #20]
 800672e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006732:	6153      	str	r3, [r2, #20]
 8006734:	e5cc      	b.n	80062d0 <HAL_PCD_IRQHandler+0xa8>
        hpcd->LPM_State = LPM_L0;
 8006736:	2100      	movs	r1, #0
 8006738:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f95b 	bl	80069f8 <HAL_PCDEx_LPM_Callback>
 8006742:	e7f2      	b.n	800672a <HAL_PCD_IRQHandler+0x502>
        HAL_PCD_SuspendCallback(hpcd);
 8006744:	4620      	mov	r0, r4
 8006746:	f007 fd91 	bl	800e26c <HAL_PCD_SuspendCallback>
 800674a:	e5cd      	b.n	80062e8 <HAL_PCD_IRQHandler+0xc0>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800674c:	9a03      	ldr	r2, [sp, #12]
 800674e:	6853      	ldr	r3, [r2, #4]
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006756:	2110      	movs	r1, #16
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	f003 f916 	bl	800998a <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800675e:	7923      	ldrb	r3, [r4, #4]
 8006760:	b1e3      	cbz	r3, 800679c <HAL_PCD_IRQHandler+0x574>
 8006762:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006766:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800676a:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006772:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006774:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006778:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800677c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006780:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006784:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006788:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800678c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006790:	f10b 0b01 	add.w	fp, fp, #1
 8006794:	3320      	adds	r3, #32
 8006796:	7922      	ldrb	r2, [r4, #4]
 8006798:	455a      	cmp	r2, fp
 800679a:	d8e6      	bhi.n	800676a <HAL_PCD_IRQHandler+0x542>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800679c:	9a03      	ldr	r2, [sp, #12]
 800679e:	69d3      	ldr	r3, [r2, #28]
 80067a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80067a4:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067a6:	7be3      	ldrb	r3, [r4, #15]
 80067a8:	b1db      	cbz	r3, 80067e2 <HAL_PCD_IRQHandler+0x5ba>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067aa:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 80067ae:	f043 030b 	orr.w	r3, r3, #11
 80067b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067b6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80067b8:	f043 030b 	orr.w	r3, r3, #11
 80067bc:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067be:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
 80067c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067c6:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067ca:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80067ce:	79a1      	ldrb	r1, [r4, #6]
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	f003 fd3f 	bl	800a254 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	6953      	ldr	r3, [r2, #20]
 80067da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067de:	6153      	str	r3, [r2, #20]
 80067e0:	e58e      	b.n	8006300 <HAL_PCD_IRQHandler+0xd8>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067e2:	9a03      	ldr	r2, [sp, #12]
 80067e4:	6953      	ldr	r3, [r2, #20]
 80067e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80067ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80067ee:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067f0:	6913      	ldr	r3, [r2, #16]
 80067f2:	f043 030b 	orr.w	r3, r3, #11
 80067f6:	6113      	str	r3, [r2, #16]
 80067f8:	e7e1      	b.n	80067be <HAL_PCD_IRQHandler+0x596>
      (void)USB_ActivateSetup(hpcd->Instance);
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	f003 fd1c 	bl	800a238 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	f003 f9df 	bl	8009bc4 <USB_GetDevSpeed>
 8006806:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	f000 fc13 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 800680e:	4601      	mov	r1, r0
 8006810:	79e2      	ldrb	r2, [r4, #7]
 8006812:	4628      	mov	r0, r5
 8006814:	f003 f80a 	bl	800982c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8006818:	4620      	mov	r0, r4
 800681a:	f007 fd12 	bl	800e242 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	6953      	ldr	r3, [r2, #20]
 8006822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006826:	6153      	str	r3, [r2, #20]
 8006828:	e571      	b.n	800630e <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_SOFCallback(hpcd);
 800682a:	4620      	mov	r0, r4
 800682c:	f007 fd03 	bl	800e236 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	6953      	ldr	r3, [r2, #20]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	6153      	str	r3, [r2, #20]
 800683a:	e56f      	b.n	800631c <HAL_PCD_IRQHandler+0xf4>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800683c:	b2e9      	uxtb	r1, r5
 800683e:	4620      	mov	r0, r4
 8006840:	f7ff fce1 	bl	8006206 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006844:	3501      	adds	r5, #1
 8006846:	3724      	adds	r7, #36	@ 0x24
 8006848:	7923      	ldrb	r3, [r4, #4]
 800684a:	42ab      	cmp	r3, r5
 800684c:	d904      	bls.n	8006858 <HAL_PCD_IRQHandler+0x630>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800684e:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 8006852:	2b01      	cmp	r3, #1
 8006854:	d1f6      	bne.n	8006844 <HAL_PCD_IRQHandler+0x61c>
 8006856:	e7f1      	b.n	800683c <HAL_PCD_IRQHandler+0x614>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	f003 fcbb 	bl	800a1d4 <USB_ReadInterrupts>
 800685e:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8006862:	d024      	beq.n	80068ae <HAL_PCD_IRQHandler+0x686>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006864:	7923      	ldrb	r3, [r4, #4]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d91c      	bls.n	80068a4 <HAL_PCD_IRQHandler+0x67c>
 800686a:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 800686e:	4625      	mov	r5, r4
 8006870:	2701      	movs	r7, #1
 8006872:	e006      	b.n	8006882 <HAL_PCD_IRQHandler+0x65a>
 8006874:	3701      	adds	r7, #1
 8006876:	f108 0820 	add.w	r8, r8, #32
 800687a:	3524      	adds	r5, #36	@ 0x24
 800687c:	7923      	ldrb	r3, [r4, #4]
 800687e:	42bb      	cmp	r3, r7
 8006880:	d910      	bls.n	80068a4 <HAL_PCD_IRQHandler+0x67c>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006882:	f8d8 2000 	ldr.w	r2, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006886:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d1f2      	bne.n	8006874 <HAL_PCD_IRQHandler+0x64c>
 800688e:	2a00      	cmp	r2, #0
 8006890:	daf0      	bge.n	8006874 <HAL_PCD_IRQHandler+0x64c>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006892:	f885 303b 	strb.w	r3, [r5, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006896:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 800689a:	b2c9      	uxtb	r1, r1
 800689c:	4620      	mov	r0, r4
 800689e:	f7ff fcb2 	bl	8006206 <HAL_PCD_EP_Abort>
 80068a2:	e7e7      	b.n	8006874 <HAL_PCD_IRQHandler+0x64c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	6953      	ldr	r3, [r2, #20]
 80068a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ac:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	f003 fc90 	bl	800a1d4 <USB_ReadInterrupts>
 80068b4:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80068b8:	d031      	beq.n	800691e <HAL_PCD_IRQHandler+0x6f6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068ba:	7923      	ldrb	r3, [r4, #4]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d929      	bls.n	8006914 <HAL_PCD_IRQHandler+0x6ec>
 80068c0:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 80068c4:	4623      	mov	r3, r4
 80068c6:	2101      	movs	r1, #1
 80068c8:	e005      	b.n	80068d6 <HAL_PCD_IRQHandler+0x6ae>
 80068ca:	3101      	adds	r1, #1
 80068cc:	3220      	adds	r2, #32
 80068ce:	3324      	adds	r3, #36	@ 0x24
 80068d0:	7920      	ldrb	r0, [r4, #4]
 80068d2:	4288      	cmp	r0, r1
 80068d4:	d91e      	bls.n	8006914 <HAL_PCD_IRQHandler+0x6ec>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068d6:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068d8:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
 80068dc:	2801      	cmp	r0, #1
 80068de:	d1f4      	bne.n	80068ca <HAL_PCD_IRQHandler+0x6a2>
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	daf2      	bge.n	80068ca <HAL_PCD_IRQHandler+0x6a2>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80068e4:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 80068e8:	f8d4 04d4 	ldr.w	r0, [r4, #1236]	@ 0x4d4
 80068ec:	f000 0001 	and.w	r0, r0, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068f0:	4285      	cmp	r5, r0
 80068f2:	d1ea      	bne.n	80068ca <HAL_PCD_IRQHandler+0x6a2>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80068f4:	2001      	movs	r0, #1
 80068f6:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80068fa:	69b0      	ldr	r0, [r6, #24]
 80068fc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006900:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006902:	6970      	ldr	r0, [r6, #20]
 8006904:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8006908:	d1df      	bne.n	80068ca <HAL_PCD_IRQHandler+0x6a2>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800690a:	9a03      	ldr	r2, [sp, #12]
 800690c:	6853      	ldr	r3, [r2, #4]
 800690e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006912:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	6953      	ldr	r3, [r2, #20]
 8006918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800691c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	f003 fc58 	bl	800a1d4 <USB_ReadInterrupts>
 8006924:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8006928:	d110      	bne.n	800694c <HAL_PCD_IRQHandler+0x724>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	f003 fc52 	bl	800a1d4 <USB_ReadInterrupts>
 8006930:	f010 0f04 	tst.w	r0, #4
 8006934:	f43f ac81 	beq.w	800623a <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800693c:	f015 0f04 	tst.w	r5, #4
 8006940:	d10d      	bne.n	800695e <HAL_PCD_IRQHandler+0x736>
      hpcd->Instance->GOTGINT |= RegVal;
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	6853      	ldr	r3, [r2, #4]
 8006946:	432b      	orrs	r3, r5
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	e476      	b.n	800623a <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800694c:	4620      	mov	r0, r4
 800694e:	f007 fcb7 	bl	800e2c0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	6953      	ldr	r3, [r2, #20]
 8006956:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800695a:	6153      	str	r3, [r2, #20]
 800695c:	e7e5      	b.n	800692a <HAL_PCD_IRQHandler+0x702>
        HAL_PCD_DisconnectCallback(hpcd);
 800695e:	4620      	mov	r0, r4
 8006960:	f007 fcb4 	bl	800e2cc <HAL_PCD_DisconnectCallback>
 8006964:	e7ed      	b.n	8006942 <HAL_PCD_IRQHandler+0x71a>
  HAL_PCD_SetupStageCallback(hpcd);
 8006966:	4620      	mov	r0, r4
 8006968:	f007 fc46 	bl	800e1f8 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800696c:	e5de      	b.n	800652c <HAL_PCD_IRQHandler+0x304>
 800696e:	bf00      	nop

08006970 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8006970:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8006974:	2b01      	cmp	r3, #1
 8006976:	d014      	beq.n	80069a2 <HAL_PCD_EP_Flush+0x32>
{
 8006978:	b510      	push	{r4, lr}
 800697a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800697c:	2301      	movs	r3, #1
 800697e:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 8006982:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006986:	d106      	bne.n	8006996 <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006988:	6800      	ldr	r0, [r0, #0]
 800698a:	f003 f823 	bl	80099d4 <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 800698e:	2000      	movs	r0, #0
 8006990:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8006994:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006996:	f001 010f 	and.w	r1, r1, #15
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	f002 fff5 	bl	800998a <USB_FlushTxFifo>
 80069a0:	e7f5      	b.n	800698e <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 80069a2:	2002      	movs	r0, #2
}
 80069a4:	4770      	bx	lr

080069a6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069a6:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069a8:	6804      	ldr	r4, [r0, #0]
 80069aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 80069ac:	b931      	cbnz	r1, 80069bc <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80069b2:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80069b4:	2000      	movs	r0, #0
 80069b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ba:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80069be:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80069c2:	f1b1 0c01 	subs.w	ip, r1, #1
 80069c6:	d00b      	beq.n	80069e0 <HAL_PCDEx_SetTxFiFo+0x3a>
 80069c8:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069ca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80069ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80069d2:	6849      	ldr	r1, [r1, #4]
 80069d4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80069d8:	3301      	adds	r3, #1
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	4563      	cmp	r3, ip
 80069de:	d3f4      	bcc.n	80069ca <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80069e0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80069e4:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 80069e8:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80069ec:	6060      	str	r0, [r4, #4]
 80069ee:	e7e1      	b.n	80069b4 <HAL_PCDEx_SetTxFiFo+0xe>

080069f0 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80069f0:	6803      	ldr	r3, [r0, #0]
 80069f2:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80069f4:	2000      	movs	r0, #0
 80069f6:	4770      	bx	lr

080069f8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f000 81e1 	beq.w	8006dc4 <HAL_RCC_OscConfig+0x3c8>
{
 8006a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0a:	6803      	ldr	r3, [r0, #0]
 8006a0c:	f013 0f01 	tst.w	r3, #1
 8006a10:	d03b      	beq.n	8006a8a <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a12:	4b9f      	ldr	r3, [pc, #636]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d02c      	beq.n	8006a78 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d021      	beq.n	8006a6e <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a30:	d04f      	beq.n	8006ad2 <HAL_RCC_OscConfig+0xd6>
 8006a32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a36:	d052      	beq.n	8006ade <HAL_RCC_OscConfig+0xe2>
 8006a38:	4b95      	ldr	r3, [pc, #596]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d050      	beq.n	8006af2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fe fd42 	bl	80054d8 <HAL_GetTick>
 8006a54:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	4e8e      	ldr	r6, [pc, #568]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006a5e:	d114      	bne.n	8006a8a <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fe fd3a 	bl	80054d8 <HAL_GetTick>
 8006a64:	1b40      	subs	r0, r0, r5
 8006a66:	2864      	cmp	r0, #100	@ 0x64
 8006a68:	d9f6      	bls.n	8006a58 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8006a6a:	2003      	movs	r0, #3
 8006a6c:	e1b1      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a6e:	4b88      	ldr	r3, [pc, #544]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006a76:	d0d8      	beq.n	8006a2a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	4b85      	ldr	r3, [pc, #532]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006a80:	d003      	beq.n	8006a8a <HAL_RCC_OscConfig+0x8e>
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 819f 	beq.w	8006dc8 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f013 0f02 	tst.w	r3, #2
 8006a90:	d054      	beq.n	8006b3c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a92:	4b7f      	ldr	r3, [pc, #508]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f013 0f0c 	tst.w	r3, #12
 8006a9a:	d03e      	beq.n	8006b1a <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9c:	4b7c      	ldr	r3, [pc, #496]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d033      	beq.n	8006b10 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006aa8:	68e3      	ldr	r3, [r4, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d068      	beq.n	8006b80 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aae:	4b79      	ldr	r3, [pc, #484]	@ (8006c94 <HAL_RCC_OscConfig+0x298>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fe fd10 	bl	80054d8 <HAL_GetTick>
 8006ab8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aba:	4e75      	ldr	r6, [pc, #468]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	f013 0f02 	tst.w	r3, #2
 8006ac2:	d154      	bne.n	8006b6e <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac4:	f7fe fd08 	bl	80054d8 <HAL_GetTick>
 8006ac8:	1b40      	subs	r0, r0, r5
 8006aca:	2802      	cmp	r0, #2
 8006acc:	d9f6      	bls.n	8006abc <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8006ace:	2003      	movs	r0, #3
 8006ad0:	e17f      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006ad4:	6813      	ldr	r3, [r2, #0]
 8006ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e7b5      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e>
 8006ade:	4b6c      	ldr	r3, [pc, #432]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e7ab      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8006af2:	f7fe fcf1 	bl	80054d8 <HAL_GetTick>
 8006af6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af8:	4e65      	ldr	r6, [pc, #404]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006afa:	6833      	ldr	r3, [r6, #0]
 8006afc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006b00:	d0c3      	beq.n	8006a8a <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b02:	f7fe fce9 	bl	80054d8 <HAL_GetTick>
 8006b06:	1b40      	subs	r0, r0, r5
 8006b08:	2864      	cmp	r0, #100	@ 0x64
 8006b0a:	d9f6      	bls.n	8006afa <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8006b0c:	2003      	movs	r0, #3
 8006b0e:	e160      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b10:	4b5f      	ldr	r3, [pc, #380]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006b18:	d1c6      	bne.n	8006aa8 <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f013 0f02 	tst.w	r3, #2
 8006b22:	d003      	beq.n	8006b2c <HAL_RCC_OscConfig+0x130>
 8006b24:	68e3      	ldr	r3, [r4, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	f040 8150 	bne.w	8006dcc <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2c:	4a58      	ldr	r2, [pc, #352]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	6921      	ldr	r1, [r4, #16]
 8006b32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006b36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b3a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	f013 0f08 	tst.w	r3, #8
 8006b42:	d042      	beq.n	8006bca <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b44:	6963      	ldr	r3, [r4, #20]
 8006b46:	b36b      	cbz	r3, 8006ba4 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b48:	4b52      	ldr	r3, [pc, #328]	@ (8006c94 <HAL_RCC_OscConfig+0x298>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fe fcc2 	bl	80054d8 <HAL_GetTick>
 8006b54:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b56:	4e4e      	ldr	r6, [pc, #312]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b58:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006b5a:	f013 0f02 	tst.w	r3, #2
 8006b5e:	d134      	bne.n	8006bca <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b60:	f7fe fcba 	bl	80054d8 <HAL_GetTick>
 8006b64:	1b40      	subs	r0, r0, r5
 8006b66:	2802      	cmp	r0, #2
 8006b68:	d9f6      	bls.n	8006b58 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8006b6a:	2003      	movs	r0, #3
 8006b6c:	e131      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6e:	4a48      	ldr	r2, [pc, #288]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b70:	6813      	ldr	r3, [r2, #0]
 8006b72:	6921      	ldr	r1, [r4, #16]
 8006b74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006b78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	e7dd      	b.n	8006b3c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006b80:	4b44      	ldr	r3, [pc, #272]	@ (8006c94 <HAL_RCC_OscConfig+0x298>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b86:	f7fe fca7 	bl	80054d8 <HAL_GetTick>
 8006b8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8c:	4e40      	ldr	r6, [pc, #256]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006b8e:	6833      	ldr	r3, [r6, #0]
 8006b90:	f013 0f02 	tst.w	r3, #2
 8006b94:	d0d2      	beq.n	8006b3c <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b96:	f7fe fc9f 	bl	80054d8 <HAL_GetTick>
 8006b9a:	1b40      	subs	r0, r0, r5
 8006b9c:	2802      	cmp	r0, #2
 8006b9e:	d9f6      	bls.n	8006b8e <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8006ba0:	2003      	movs	r0, #3
 8006ba2:	e116      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8006c94 <HAL_RCC_OscConfig+0x298>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bac:	f7fe fc94 	bl	80054d8 <HAL_GetTick>
 8006bb0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb2:	4e37      	ldr	r6, [pc, #220]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006bb4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006bb6:	f013 0f02 	tst.w	r3, #2
 8006bba:	d006      	beq.n	8006bca <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fe fc8c 	bl	80054d8 <HAL_GetTick>
 8006bc0:	1b40      	subs	r0, r0, r5
 8006bc2:	2802      	cmp	r0, #2
 8006bc4:	d9f6      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	e103      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	f013 0f04 	tst.w	r3, #4
 8006bd0:	d076      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006bda:	d133      	bne.n	8006c44 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006be8:	641a      	str	r2, [r3, #64]	@ 0x40
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006bf4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf6:	4b28      	ldr	r3, [pc, #160]	@ (8006c98 <HAL_RCC_OscConfig+0x29c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006bfe:	d023      	beq.n	8006c48 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c00:	68a3      	ldr	r3, [r4, #8]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d034      	beq.n	8006c70 <HAL_RCC_OscConfig+0x274>
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d038      	beq.n	8006c7c <HAL_RCC_OscConfig+0x280>
 8006c0a:	4b21      	ldr	r3, [pc, #132]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006c0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c1c:	68a3      	ldr	r3, [r4, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d03c      	beq.n	8006c9c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c22:	f7fe fc59 	bl	80054d8 <HAL_GetTick>
 8006c26:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	4f19      	ldr	r7, [pc, #100]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c30:	f013 0f02 	tst.w	r3, #2
 8006c34:	d143      	bne.n	8006cbe <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fe fc4f 	bl	80054d8 <HAL_GetTick>
 8006c3a:	1b80      	subs	r0, r0, r6
 8006c3c:	4540      	cmp	r0, r8
 8006c3e:	d9f6      	bls.n	8006c2e <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8006c40:	2003      	movs	r0, #3
 8006c42:	e0c6      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8006c44:	2500      	movs	r5, #0
 8006c46:	e7d6      	b.n	8006bf6 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c48:	4a13      	ldr	r2, [pc, #76]	@ (8006c98 <HAL_RCC_OscConfig+0x29c>)
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006c52:	f7fe fc41 	bl	80054d8 <HAL_GetTick>
 8006c56:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c58:	4f0f      	ldr	r7, [pc, #60]	@ (8006c98 <HAL_RCC_OscConfig+0x29c>)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c60:	d1ce      	bne.n	8006c00 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c62:	f7fe fc39 	bl	80054d8 <HAL_GetTick>
 8006c66:	1b80      	subs	r0, r0, r6
 8006c68:	2802      	cmp	r0, #2
 8006c6a:	d9f6      	bls.n	8006c5a <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	e0b0      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c70:	4a07      	ldr	r2, [pc, #28]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006c72:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c7a:	e7cf      	b.n	8006c1c <HAL_RCC_OscConfig+0x220>
 8006c7c:	4b04      	ldr	r3, [pc, #16]	@ (8006c90 <HAL_RCC_OscConfig+0x294>)
 8006c7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c80:	f042 0204 	orr.w	r2, r2, #4
 8006c84:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c8e:	e7c5      	b.n	8006c1c <HAL_RCC_OscConfig+0x220>
 8006c90:	40023800 	.word	0x40023800
 8006c94:	42470000 	.word	0x42470000
 8006c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9c:	f7fe fc1c 	bl	80054d8 <HAL_GetTick>
 8006ca0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca2:	4f52      	ldr	r7, [pc, #328]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca4:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006caa:	f013 0f02 	tst.w	r3, #2
 8006cae:	d006      	beq.n	8006cbe <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fe fc12 	bl	80054d8 <HAL_GetTick>
 8006cb4:	1b80      	subs	r0, r0, r6
 8006cb6:	4540      	cmp	r0, r8
 8006cb8:	d9f6      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8006cba:	2003      	movs	r0, #3
 8006cbc:	e089      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cbe:	b9ed      	cbnz	r5, 8006cfc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cc0:	69a3      	ldr	r3, [r4, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8084 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cc8:	4a48      	ldr	r2, [pc, #288]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006cca:	6892      	ldr	r2, [r2, #8]
 8006ccc:	f002 020c 	and.w	r2, r2, #12
 8006cd0:	2a08      	cmp	r2, #8
 8006cd2:	d051      	beq.n	8006d78 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d017      	beq.n	8006d08 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd8:	4b45      	ldr	r3, [pc, #276]	@ (8006df0 <HAL_RCC_OscConfig+0x3f4>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cde:	f7fe fbfb 	bl	80054d8 <HAL_GetTick>
 8006ce2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce4:	4d41      	ldr	r5, [pc, #260]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006ce6:	682b      	ldr	r3, [r5, #0]
 8006ce8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006cec:	d042      	beq.n	8006d74 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cee:	f7fe fbf3 	bl	80054d8 <HAL_GetTick>
 8006cf2:	1b00      	subs	r0, r0, r4
 8006cf4:	2802      	cmp	r0, #2
 8006cf6:	d9f6      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006cf8:	2003      	movs	r0, #3
 8006cfa:	e06a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006cfe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d06:	e7db      	b.n	8006cc0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8006d08:	4b39      	ldr	r3, [pc, #228]	@ (8006df0 <HAL_RCC_OscConfig+0x3f4>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006d0e:	f7fe fbe3 	bl	80054d8 <HAL_GetTick>
 8006d12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d14:	4e35      	ldr	r6, [pc, #212]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006d16:	6833      	ldr	r3, [r6, #0]
 8006d18:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006d1c:	d006      	beq.n	8006d2c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1e:	f7fe fbdb 	bl	80054d8 <HAL_GetTick>
 8006d22:	1b40      	subs	r0, r0, r5
 8006d24:	2802      	cmp	r0, #2
 8006d26:	d9f6      	bls.n	8006d16 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8006d28:	2003      	movs	r0, #3
 8006d2a:	e052      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d2c:	69e3      	ldr	r3, [r4, #28]
 8006d2e:	6a22      	ldr	r2, [r4, #32]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d34:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006d38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006d3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006d40:	0852      	lsrs	r2, r2, #1
 8006d42:	3a01      	subs	r2, #1
 8006d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d48:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006d4a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006d4c:	4b28      	ldr	r3, [pc, #160]	@ (8006df0 <HAL_RCC_OscConfig+0x3f4>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006d52:	f7fe fbc1 	bl	80054d8 <HAL_GetTick>
 8006d56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d58:	4d24      	ldr	r5, [pc, #144]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006d60:	d106      	bne.n	8006d70 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d62:	f7fe fbb9 	bl	80054d8 <HAL_GetTick>
 8006d66:	1b00      	subs	r0, r0, r4
 8006d68:	2802      	cmp	r0, #2
 8006d6a:	d9f6      	bls.n	8006d5a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8006d6c:	2003      	movs	r0, #3
 8006d6e:	e030      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006d70:	2000      	movs	r0, #0
 8006d72:	e02e      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
 8006d74:	2000      	movs	r0, #0
 8006d76:	e02c      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d02d      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dec <HAL_RCC_OscConfig+0x3f0>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d80:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d84:	69e2      	ldr	r2, [r4, #28]
 8006d86:	4291      	cmp	r1, r2
 8006d88:	d128      	bne.n	8006ddc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d8e:	6a21      	ldr	r1, [r4, #32]
 8006d90:	428a      	cmp	r2, r1
 8006d92:	d125      	bne.n	8006de0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d96:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006da0:	d120      	bne.n	8006de4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006da2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8006da6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006da8:	0852      	lsrs	r2, r2, #1
 8006daa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006db0:	d11a      	bne.n	8006de8 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006db2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006db4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006dbc:	bf14      	ite	ne
 8006dbe:	2001      	movne	r0, #1
 8006dc0:	2000      	moveq	r0, #0
 8006dc2:	e006      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8006dc4:	2001      	movs	r0, #1
}
 8006dc6:	4770      	bx	lr
        return HAL_ERROR;
 8006dc8:	2001      	movs	r0, #1
 8006dca:	e002      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8006dd0:	2000      	movs	r0, #0
}
 8006dd2:	b002      	add	sp, #8
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8006dd8:	2001      	movs	r0, #1
 8006dda:	e7fa      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7f8      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
 8006de0:	2001      	movs	r0, #1
 8006de2:	e7f6      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
 8006de4:	2001      	movs	r0, #1
 8006de6:	e7f4      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
 8006de8:	2001      	movs	r0, #1
 8006dea:	e7f2      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d6>
 8006dec:	40023800 	.word	0x40023800
 8006df0:	42470000 	.word	0x42470000

08006df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df4:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df6:	4b33      	ldr	r3, [pc, #204]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d05b      	beq.n	8006eba <HAL_RCC_GetSysClockFreq+0xc6>
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d15b      	bne.n	8006ebe <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e06:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006e14:	d02c      	beq.n	8006e70 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e16:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e18:	6858      	ldr	r0, [r3, #4]
 8006e1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006e1e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8006e22:	ebbc 0c00 	subs.w	ip, ip, r0
 8006e26:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8006e2a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8006e2e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8006e32:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8006e36:	ebb1 010c 	subs.w	r1, r1, ip
 8006e3a:	eb63 030e 	sbc.w	r3, r3, lr
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e44:	00c9      	lsls	r1, r1, #3
 8006e46:	eb11 0c00 	adds.w	ip, r1, r0
 8006e4a:	f143 0300 	adc.w	r3, r3, #0
 8006e4e:	0259      	lsls	r1, r3, #9
 8006e50:	2300      	movs	r3, #0
 8006e52:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8006e56:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8006e5a:	f7f9 fecd 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e5e:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006e66:	3301      	adds	r3, #1
 8006e68:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006e6a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006e6e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e70:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e72:	6858      	ldr	r0, [r3, #4]
 8006e74:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006e78:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8006e7c:	ebbc 0c00 	subs.w	ip, ip, r0
 8006e80:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8006e84:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8006e88:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8006e8c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8006e90:	ebb1 010c 	subs.w	r1, r1, ip
 8006e94:	eb63 030e 	sbc.w	r3, r3, lr
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e9e:	00c9      	lsls	r1, r1, #3
 8006ea0:	eb11 0c00 	adds.w	ip, r1, r0
 8006ea4:	f143 0300 	adc.w	r3, r3, #0
 8006ea8:	0299      	lsls	r1, r3, #10
 8006eaa:	2300      	movs	r3, #0
 8006eac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8006eb0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8006eb4:	f7f9 fea0 	bl	8000bf8 <__aeabi_uldivmod>
 8006eb8:	e7d1      	b.n	8006e5e <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eba:	4803      	ldr	r0, [pc, #12]	@ (8006ec8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ebc:	e7d7      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x7a>
      sysclockfreq = HSI_VALUE;
 8006ebe:	4803      	ldr	r0, [pc, #12]	@ (8006ecc <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8006ec0:	e7d5      	b.n	8006e6e <HAL_RCC_GetSysClockFreq+0x7a>
 8006ec2:	bf00      	nop
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	007a1200 	.word	0x007a1200
 8006ecc:	00f42400 	.word	0x00f42400

08006ed0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f000 809d 	beq.w	8007010 <HAL_RCC_ClockConfig+0x140>
{
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	460d      	mov	r5, r1
 8006edc:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ede:	4b50      	ldr	r3, [pc, #320]	@ (8007020 <HAL_RCC_ClockConfig+0x150>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d208      	bcs.n	8006efc <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	b2cb      	uxtb	r3, r1
 8006eec:	4a4c      	ldr	r2, [pc, #304]	@ (8007020 <HAL_RCC_ClockConfig+0x150>)
 8006eee:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef0:	6813      	ldr	r3, [r2, #0]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	428b      	cmp	r3, r1
 8006ef8:	f040 808c 	bne.w	8007014 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	f013 0f02 	tst.w	r3, #2
 8006f02:	d017      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	f013 0f04 	tst.w	r3, #4
 8006f08:	d004      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f0a:	4a46      	ldr	r2, [pc, #280]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f0c:	6893      	ldr	r3, [r2, #8]
 8006f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f12:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	f013 0f08 	tst.w	r3, #8
 8006f1a:	d004      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f1c:	4a41      	ldr	r2, [pc, #260]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f1e:	6893      	ldr	r3, [r2, #8]
 8006f20:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f24:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f26:	4a3f      	ldr	r2, [pc, #252]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f28:	6893      	ldr	r3, [r2, #8]
 8006f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f2e:	68a1      	ldr	r1, [r4, #8]
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	f013 0f01 	tst.w	r3, #1
 8006f3a:	d032      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	2a01      	cmp	r2, #1
 8006f40:	d021      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f42:	1e93      	subs	r3, r2, #2
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d925      	bls.n	8006f94 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f48:	4b36      	ldr	r3, [pc, #216]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f013 0f02 	tst.w	r3, #2
 8006f50:	d062      	beq.n	8007018 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f52:	4934      	ldr	r1, [pc, #208]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f54:	688b      	ldr	r3, [r1, #8]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006f5e:	f7fe fabb 	bl	80054d8 <HAL_GetTick>
 8006f62:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f64:	4f2f      	ldr	r7, [pc, #188]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f66:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	6862      	ldr	r2, [r4, #4]
 8006f72:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006f76:	d014      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f78:	f7fe faae 	bl	80054d8 <HAL_GetTick>
 8006f7c:	1b80      	subs	r0, r0, r6
 8006f7e:	4540      	cmp	r0, r8
 8006f80:	d9f3      	bls.n	8006f6a <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8006f82:	2003      	movs	r0, #3
 8006f84:	e042      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f86:	4b27      	ldr	r3, [pc, #156]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006f8e:	d1e0      	bne.n	8006f52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f90:	2001      	movs	r0, #1
 8006f92:	e03b      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f94:	4b23      	ldr	r3, [pc, #140]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006f9c:	d1d9      	bne.n	8006f52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	e034      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8007020 <HAL_RCC_ClockConfig+0x150>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	42ab      	cmp	r3, r5
 8006fac:	d907      	bls.n	8006fbe <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fae:	b2ea      	uxtb	r2, r5
 8006fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <HAL_RCC_ClockConfig+0x150>)
 8006fb2:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	42ab      	cmp	r3, r5
 8006fbc:	d12e      	bne.n	800701c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	f013 0f04 	tst.w	r3, #4
 8006fc4:	d006      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fc6:	4a17      	ldr	r2, [pc, #92]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006fc8:	6893      	ldr	r3, [r2, #8]
 8006fca:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8006fce:	68e1      	ldr	r1, [r4, #12]
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f013 0f08 	tst.w	r3, #8
 8006fda:	d007      	beq.n	8006fec <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fdc:	4a11      	ldr	r2, [pc, #68]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006fde:	6893      	ldr	r3, [r2, #8]
 8006fe0:	6921      	ldr	r1, [r4, #16]
 8006fe2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006fe6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006fea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fec:	f7ff ff02 	bl	8006df4 <HAL_RCC_GetSysClockFreq>
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <HAL_RCC_ClockConfig+0x154>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8007028 <HAL_RCC_ClockConfig+0x158>)
 8006ffa:	5cd3      	ldrb	r3, [r2, r3]
 8006ffc:	40d8      	lsrs	r0, r3
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <HAL_RCC_ClockConfig+0x15c>)
 8007000:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8007002:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <HAL_RCC_ClockConfig+0x160>)
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f7fe fa1b 	bl	8005440 <HAL_InitTick>
  return HAL_OK;
 800700a:	2000      	movs	r0, #0
}
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8007010:	2001      	movs	r0, #1
}
 8007012:	4770      	bx	lr
      return HAL_ERROR;
 8007014:	2001      	movs	r0, #1
 8007016:	e7f9      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8007018:	2001      	movs	r0, #1
 800701a:	e7f7      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800701c:	2001      	movs	r0, #1
 800701e:	e7f5      	b.n	800700c <HAL_RCC_ClockConfig+0x13c>
 8007020:	40023c00 	.word	0x40023c00
 8007024:	40023800 	.word	0x40023800
 8007028:	080123f8 	.word	0x080123f8
 800702c:	20000008 	.word	0x20000008
 8007030:	20000010 	.word	0x20000010

08007034 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007034:	4b01      	ldr	r3, [pc, #4]	@ (800703c <HAL_RCC_GetHCLKFreq+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000008 	.word	0x20000008

08007040 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007040:	4b04      	ldr	r3, [pc, #16]	@ (8007054 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007048:	4a03      	ldr	r2, [pc, #12]	@ (8007058 <HAL_RCC_GetPCLK1Freq+0x18>)
 800704a:	5cd3      	ldrb	r3, [r2, r3]
 800704c:	4a03      	ldr	r2, [pc, #12]	@ (800705c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800704e:	6810      	ldr	r0, [r2, #0]
}
 8007050:	40d8      	lsrs	r0, r3
 8007052:	4770      	bx	lr
 8007054:	40023800 	.word	0x40023800
 8007058:	080123f0 	.word	0x080123f0
 800705c:	20000008 	.word	0x20000008

08007060 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007068:	4a03      	ldr	r2, [pc, #12]	@ (8007078 <HAL_RCC_GetPCLK2Freq+0x18>)
 800706a:	5cd3      	ldrb	r3, [r2, r3]
 800706c:	4a03      	ldr	r2, [pc, #12]	@ (800707c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800706e:	6810      	ldr	r0, [r2, #0]
}
 8007070:	40d8      	lsrs	r0, r3
 8007072:	4770      	bx	lr
 8007074:	40023800 	.word	0x40023800
 8007078:	080123f0 	.word	0x080123f0
 800707c:	20000008 	.word	0x20000008

08007080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007082:	b083      	sub	sp, #12
 8007084:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007086:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007088:	f013 0f43 	tst.w	r3, #67	@ 0x43
 800708c:	d115      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x3a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	f013 0f0c 	tst.w	r3, #12
 8007094:	d16a      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f013 0f20 	tst.w	r3, #32
 800709c:	f040 80bf 	bne.w	800721e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	f013 0f10 	tst.w	r3, #16
 80070a6:	f000 8123 	beq.w	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070aa:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80070ae:	4b91      	ldr	r3, [pc, #580]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80070b0:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 80070b4:	2000      	movs	r0, #0
}
 80070b6:	b003      	add	sp, #12
 80070b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80070ba:	4b8f      	ldr	r3, [pc, #572]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80070bc:	2200      	movs	r2, #0
 80070be:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80070c0:	f7fe fa0a 	bl	80054d8 <HAL_GetTick>
 80070c4:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070c6:	4e8d      	ldr	r6, [pc, #564]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80070ce:	d006      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070d0:	f7fe fa02 	bl	80054d8 <HAL_GetTick>
 80070d4:	1b43      	subs	r3, r0, r5
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d9f6      	bls.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
        return HAL_TIMEOUT;
 80070da:	2003      	movs	r0, #3
 80070dc:	e7eb      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f013 0f01 	tst.w	r3, #1
 80070e4:	d007      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80070e6:	6862      	ldr	r2, [r4, #4]
 80070e8:	68a3      	ldr	r3, [r4, #8]
 80070ea:	071b      	lsls	r3, r3, #28
 80070ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80070f0:	4a82      	ldr	r2, [pc, #520]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	f013 0f02 	tst.w	r3, #2
 80070fc:	d015      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070fe:	4a7f      	ldr	r2, [pc, #508]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007100:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007104:	6860      	ldr	r0, [r4, #4]
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800710e:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8007112:	430b      	orrs	r3, r1
 8007114:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007118:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800711c:	69e3      	ldr	r3, [r4, #28]
 800711e:	3b01      	subs	r3, #1
 8007120:	f021 011f 	bic.w	r1, r1, #31
 8007124:	430b      	orrs	r3, r1
 8007126:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	68e3      	ldr	r3, [r4, #12]
 8007136:	061b      	lsls	r3, r3, #24
 8007138:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800713c:	68a2      	ldr	r2, [r4, #8]
 800713e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8007142:	4a6e      	ldr	r2, [pc, #440]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007144:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007148:	4b6b      	ldr	r3, [pc, #428]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800714a:	2201      	movs	r2, #1
 800714c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800714e:	f7fe f9c3 	bl	80054d8 <HAL_GetTick>
 8007152:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007154:	4e69      	ldr	r6, [pc, #420]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007156:	6833      	ldr	r3, [r6, #0]
 8007158:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800715c:	d197      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800715e:	f7fe f9bb 	bl	80054d8 <HAL_GetTick>
 8007162:	1b40      	subs	r0, r0, r5
 8007164:	2802      	cmp	r0, #2
 8007166:	d9f6      	bls.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        return HAL_TIMEOUT;
 8007168:	2003      	movs	r0, #3
 800716a:	e7a4      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLSAI_DISABLE();
 800716c:	4b62      	ldr	r3, [pc, #392]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800716e:	2200      	movs	r2, #0
 8007170:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8007172:	f7fe f9b1 	bl	80054d8 <HAL_GetTick>
 8007176:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007178:	4e60      	ldr	r6, [pc, #384]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800717a:	6833      	ldr	r3, [r6, #0]
 800717c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007180:	d006      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007182:	f7fe f9a9 	bl	80054d8 <HAL_GetTick>
 8007186:	1b43      	subs	r3, r0, r5
 8007188:	2b02      	cmp	r3, #2
 800718a:	d9f6      	bls.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xfa>
        return HAL_TIMEOUT;
 800718c:	2003      	movs	r0, #3
 800718e:	e792      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	f013 0f04 	tst.w	r3, #4
 8007196:	d016      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007198:	4a58      	ldr	r2, [pc, #352]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800719a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800719e:	6920      	ldr	r0, [r4, #16]
 80071a0:	6963      	ldr	r3, [r4, #20]
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80071a8:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 80071ac:	430b      	orrs	r3, r1
 80071ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80071b6:	6a21      	ldr	r1, [r4, #32]
 80071b8:	3901      	subs	r1, #1
 80071ba:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80071be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80071c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f013 0f08 	tst.w	r3, #8
 80071cc:	d014      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ce:	4a4b      	ldr	r2, [pc, #300]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80071d0:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80071d4:	6920      	ldr	r0, [r4, #16]
 80071d6:	69a3      	ldr	r3, [r4, #24]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80071de:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80071e2:	430b      	orrs	r3, r1
 80071e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80071ec:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80071f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80071f2:	430b      	orrs	r3, r1
 80071f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80071f8:	4b3f      	ldr	r3, [pc, #252]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 80071fe:	f7fe f96b 	bl	80054d8 <HAL_GetTick>
 8007202:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007204:	4e3d      	ldr	r6, [pc, #244]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007206:	6833      	ldr	r3, [r6, #0]
 8007208:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800720c:	f47f af43 	bne.w	8007096 <HAL_RCCEx_PeriphCLKConfig+0x16>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007210:	f7fe f962 	bl	80054d8 <HAL_GetTick>
 8007214:	1b40      	subs	r0, r0, r5
 8007216:	2802      	cmp	r0, #2
 8007218:	d9f5      	bls.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x186>
        return HAL_TIMEOUT;
 800721a:	2003      	movs	r0, #3
 800721c:	e74b      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	4b36      	ldr	r3, [pc, #216]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007224:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007226:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800722a:	641a      	str	r2, [r3, #64]	@ 0x40
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8007236:	4a32      	ldr	r2, [pc, #200]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007238:	6813      	ldr	r3, [r2, #0]
 800723a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800723e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007240:	f7fe f94a 	bl	80054d8 <HAL_GetTick>
 8007244:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007246:	4e2e      	ldr	r6, [pc, #184]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800724e:	d106      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007250:	f7fe f942 	bl	80054d8 <HAL_GetTick>
 8007254:	1b40      	subs	r0, r0, r5
 8007256:	2802      	cmp	r0, #2
 8007258:	d9f6      	bls.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        return HAL_TIMEOUT;
 800725a:	2003      	movs	r0, #3
 800725c:	e72b      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800725e:	4b27      	ldr	r3, [pc, #156]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007262:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007266:	d014      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007268:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800726a:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800726e:	429a      	cmp	r2, r3
 8007270:	d00f      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x212>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007272:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007274:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007276:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800727a:	491f      	ldr	r1, [pc, #124]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800727c:	2001      	movs	r0, #1
 800727e:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007282:	2000      	movs	r0, #0
 8007284:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8007288:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800728a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728c:	f013 0f01 	tst.w	r3, #1
 8007290:	d112      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007292:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007294:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007298:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800729c:	d01d      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800729e:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80072a0:	6893      	ldr	r3, [r2, #8]
 80072a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072a6:	6093      	str	r3, [r2, #8]
 80072a8:	4a14      	ldr	r2, [pc, #80]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80072aa:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80072ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80072ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b2:	430b      	orrs	r3, r1
 80072b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b6:	e6f3      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80072b8:	f7fe f90e 	bl	80054d8 <HAL_GetTick>
 80072bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072be:	4e0f      	ldr	r6, [pc, #60]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c0:	f241 3788 	movw	r7, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80072c6:	f013 0f02 	tst.w	r3, #2
 80072ca:	d1e2      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x212>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072cc:	f7fe f904 	bl	80054d8 <HAL_GetTick>
 80072d0:	1b40      	subs	r0, r0, r5
 80072d2:	42b8      	cmp	r0, r7
 80072d4:	d9f6      	bls.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
            return HAL_TIMEOUT;
 80072d6:	2003      	movs	r0, #3
 80072d8:	e6ed      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072da:	4908      	ldr	r1, [pc, #32]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80072dc:	688a      	ldr	r2, [r1, #8]
 80072de:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80072e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ea:	4313      	orrs	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	e7db      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  return HAL_OK;
 80072f0:	2000      	movs	r0, #0
 80072f2:	e6e0      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80072f4:	42471000 	.word	0x42471000
 80072f8:	42470000 	.word	0x42470000
 80072fc:	40023800 	.word	0x40023800
 8007300:	40007000 	.word	0x40007000

08007304 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007308:	6803      	ldr	r3, [r0, #0]
 800730a:	4a0a      	ldr	r2, [pc, #40]	@ (8007334 <HAL_RTC_WaitForSynchro+0x30>)
 800730c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800730e:	f7fe f8e3 	bl	80054d8 <HAL_GetTick>
 8007312:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f013 0f20 	tst.w	r3, #32
 800731c:	d107      	bne.n	800732e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800731e:	f7fe f8db 	bl	80054d8 <HAL_GetTick>
 8007322:	1b40      	subs	r0, r0, r5
 8007324:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007328:	d9f4      	bls.n	8007314 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 800732a:	2003      	movs	r0, #3
 800732c:	e000      	b.n	8007330 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 800732e:	2000      	movs	r0, #0
}
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop
 8007334:	00017f5f 	.word	0x00017f5f

08007338 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007338:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800733a:	6803      	ldr	r3, [r0, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8007342:	d002      	beq.n	800734a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8007344:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8007346:	4628      	mov	r0, r5
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007352:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007354:	f7fe f8c0 	bl	80054d8 <HAL_GetTick>
 8007358:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007364:	d1ef      	bne.n	8007346 <RTC_EnterInitMode+0xe>
 8007366:	2d00      	cmp	r5, #0
 8007368:	d1ed      	bne.n	8007346 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800736a:	f7fe f8b5 	bl	80054d8 <HAL_GetTick>
 800736e:	1b83      	subs	r3, r0, r6
 8007370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007374:	d9f2      	bls.n	800735c <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007376:	2304      	movs	r3, #4
 8007378:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 800737a:	2501      	movs	r5, #1
 800737c:	e7ee      	b.n	800735c <RTC_EnterInitMode+0x24>

0800737e <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800737e:	6802      	ldr	r2, [r0, #0]
 8007380:	68d3      	ldr	r3, [r2, #12]
 8007382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007386:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007388:	6803      	ldr	r3, [r0, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f013 0f20 	tst.w	r3, #32
 8007390:	d001      	beq.n	8007396 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007392:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8007394:	4770      	bx	lr
{
 8007396:	b510      	push	{r4, lr}
 8007398:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800739a:	f7ff ffb3 	bl	8007304 <HAL_RTC_WaitForSynchro>
 800739e:	b110      	cbz	r0, 80073a6 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073a0:	2304      	movs	r3, #4
 80073a2:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80073a4:	2001      	movs	r0, #1
}
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <HAL_RTC_Init>:
  if (hrtc == NULL)
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d04b      	beq.n	8007444 <HAL_RTC_Init+0x9c>
{
 80073ac:	b510      	push	{r4, lr}
 80073ae:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073b0:	7f43      	ldrb	r3, [r0, #29]
 80073b2:	b153      	cbz	r3, 80073ca <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073b4:	2302      	movs	r3, #2
 80073b6:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	f012 0f10 	tst.w	r2, #16
 80073c0:	d007      	beq.n	80073d2 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80073c2:	2301      	movs	r3, #1
 80073c4:	7763      	strb	r3, [r4, #29]
 80073c6:	2000      	movs	r0, #0
}
 80073c8:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80073ca:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80073cc:	f7fd fd80 	bl	8004ed0 <HAL_RTC_MspInit>
 80073d0:	e7f0      	b.n	80073b4 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073d2:	22ca      	movs	r2, #202	@ 0xca
 80073d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	2253      	movs	r2, #83	@ 0x53
 80073da:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff ffab 	bl	8007338 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80073e2:	b118      	cbz	r0, 80073ec <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	22ff      	movs	r2, #255	@ 0xff
 80073e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80073ea:	e7ed      	b.n	80073c8 <HAL_RTC_Init+0x20>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	6893      	ldr	r3, [r2, #8]
 80073f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80073f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f8:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073fa:	6822      	ldr	r2, [r4, #0]
 80073fc:	6891      	ldr	r1, [r2, #8]
 80073fe:	6863      	ldr	r3, [r4, #4]
 8007400:	6920      	ldr	r0, [r4, #16]
 8007402:	4303      	orrs	r3, r0
 8007404:	6960      	ldr	r0, [r4, #20]
 8007406:	4303      	orrs	r3, r0
 8007408:	430b      	orrs	r3, r1
 800740a:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	68e2      	ldr	r2, [r4, #12]
 8007410:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	6913      	ldr	r3, [r2, #16]
 8007416:	68a1      	ldr	r1, [r4, #8]
 8007418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800741c:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff ffad 	bl	800737e <RTC_ExitInitMode>
    if (status == HAL_OK)
 8007424:	2800      	cmp	r0, #0
 8007426:	d1dd      	bne.n	80073e4 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800742c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007430:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007436:	69a1      	ldr	r1, [r4, #24]
 8007438:	430b      	orrs	r3, r1
 800743a:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	22ff      	movs	r2, #255	@ 0xff
 8007440:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8007442:	e7be      	b.n	80073c2 <HAL_RTC_Init+0x1a>
    return HAL_ERROR;
 8007444:	2001      	movs	r0, #1
}
 8007446:	4770      	bx	lr

08007448 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007448:	0903      	lsrs	r3, r0, #4
 800744a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800744e:	f000 000f 	and.w	r0, r0, #15
 8007452:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8007456:	b2c0      	uxtb	r0, r0
 8007458:	4770      	bx	lr

0800745a <HAL_RTC_GetTime>:
{
 800745a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800745c:	6803      	ldr	r3, [r0, #0]
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007462:	6803      	ldr	r3, [r0, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800746a:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800746c:	6803      	ldr	r3, [r0, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007470:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8007474:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007476:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800747a:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800747c:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8007480:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007482:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8007486:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8007488:	b95a      	cbnz	r2, 80074a2 <HAL_RTC_GetTime+0x48>
 800748a:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800748c:	f7ff ffdc 	bl	8007448 <RTC_Bcd2ToByte>
 8007490:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ffd8 	bl	8007448 <RTC_Bcd2ToByte>
 8007498:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800749a:	4628      	mov	r0, r5
 800749c:	f7ff ffd4 	bl	8007448 <RTC_Bcd2ToByte>
 80074a0:	70a0      	strb	r0, [r4, #2]
}
 80074a2:	2000      	movs	r0, #0
 80074a4:	bd70      	pop	{r4, r5, r6, pc}

080074a6 <HAL_RTC_GetDate>:
{
 80074a6:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80074a8:	6803      	ldr	r3, [r0, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80074ac:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80074b0:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80074b2:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80074b6:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80074b8:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80074bc:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80074be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80074c2:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80074c4:	b95a      	cbnz	r2, 80074de <HAL_RTC_GetDate+0x38>
 80074c6:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80074c8:	f7ff ffbe 	bl	8007448 <RTC_Bcd2ToByte>
 80074cc:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ffba 	bl	8007448 <RTC_Bcd2ToByte>
 80074d4:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff ffb6 	bl	8007448 <RTC_Bcd2ToByte>
 80074dc:	70a0      	strb	r0, [r4, #2]
}
 80074de:	2000      	movs	r0, #0
 80074e0:	bd70      	pop	{r4, r5, r6, pc}

080074e2 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80074e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80074e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80074ee:	4770      	bx	lr

080074f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	b089      	sub	sp, #36	@ 0x24
 80074f4:	4604      	mov	r4, r0
 80074f6:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074f8:	f7fd ffee 	bl	80054d8 <HAL_GetTick>
 80074fc:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80074fe:	2300      	movs	r3, #0
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007504:	2108      	movs	r1, #8
 8007506:	6820      	ldr	r0, [r4, #0]
 8007508:	f001 fec2 	bl	8009290 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800750c:	4605      	mov	r5, r0
 800750e:	b110      	cbz	r0, 8007516 <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8007510:	4628      	mov	r0, r5
 8007512:	b009      	add	sp, #36	@ 0x24
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007516:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007518:	0409      	lsls	r1, r1, #16
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	f001 ff62 	bl	80093e4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007520:	4605      	mov	r5, r0
 8007522:	2800      	cmp	r0, #0
 8007524:	d1f4      	bne.n	8007510 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800752c:	2308      	movs	r3, #8
 800752e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007530:	2330      	movs	r3, #48	@ 0x30
 8007532:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007534:	2302      	movs	r3, #2
 8007536:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007538:	2300      	movs	r3, #0
 800753a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800753c:	2301      	movs	r3, #1
 800753e:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007540:	a902      	add	r1, sp, #8
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	f001 fdb5 	bl	80090b2 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007548:	6820      	ldr	r0, [r4, #0]
 800754a:	f001 ff7b 	bl	8009444 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800754e:	4605      	mov	r5, r0
 8007550:	b170      	cbz	r0, 8007570 <SD_FindSCR+0x80>
 8007552:	e7dd      	b.n	8007510 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007554:	f001 fd87 	bl	8009066 <SDIO_ReadFIFO>
 8007558:	ab08      	add	r3, sp, #32
 800755a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800755e:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 8007562:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007564:	f7fd ffb8 	bl	80054d8 <HAL_GetTick>
 8007568:	1b83      	subs	r3, r0, r6
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d043      	beq.n	80075f8 <SD_FindSCR+0x108>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007574:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8007578:	d107      	bne.n	800758a <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800757a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800757c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8007580:	d1e8      	bne.n	8007554 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007582:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007584:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007588:	d1ec      	bne.n	8007564 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800758a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800758c:	f013 0f08 	tst.w	r3, #8
 8007590:	d129      	bne.n	80075e6 <SD_FindSCR+0xf6>
 8007592:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007594:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007598:	d125      	bne.n	80075e6 <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800759a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800759c:	f013 0f02 	tst.w	r3, #2
 80075a0:	d124      	bne.n	80075ec <SD_FindSCR+0xfc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80075a2:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80075a4:	f015 0520 	ands.w	r5, r5, #32
 80075a8:	d123      	bne.n	80075f2 <SD_FindSCR+0x102>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075aa:	f240 533a 	movw	r3, #1338	@ 0x53a
 80075ae:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075b0:	9b01      	ldr	r3, [sp, #4]
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075b2:	0e1a      	lsrs	r2, r3, #24
 80075b4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075b8:	0219      	lsls	r1, r3, #8
 80075ba:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075be:	430a      	orrs	r2, r1
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075c6:	4313      	orrs	r3, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80075c8:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075ca:	9b00      	ldr	r3, [sp, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075cc:	0e1a      	lsrs	r2, r3, #24
 80075ce:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075d2:	0219      	lsls	r1, r3, #8
 80075d4:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075d8:	430a      	orrs	r2, r1
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075e0:	4313      	orrs	r3, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075e2:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80075e4:	e794      	b.n	8007510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80075e6:	2508      	movs	r5, #8
 80075e8:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075ea:	e791      	b.n	8007510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80075ec:	2502      	movs	r5, #2
 80075ee:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80075f0:	e78e      	b.n	8007510 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80075f2:	2520      	movs	r5, #32
 80075f4:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80075f6:	e78b      	b.n	8007510 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80075f8:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 80075fc:	e788      	b.n	8007510 <SD_FindSCR+0x20>
	...

08007600 <HAL_SD_ReadBlocks_DMA>:
{
 8007600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007604:	b087      	sub	sp, #28
 8007606:	4604      	mov	r4, r0
  if(NULL == pData)
 8007608:	b191      	cbz	r1, 8007630 <HAL_SD_ReadBlocks_DMA+0x30>
 800760a:	4616      	mov	r6, r2
 800760c:	461f      	mov	r7, r3
 800760e:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8007610:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8007614:	b2ed      	uxtb	r5, r5
 8007616:	2d01      	cmp	r5, #1
 8007618:	d17f      	bne.n	800771a <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800761a:	2300      	movs	r3, #0
 800761c:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800761e:	19f0      	adds	r0, r6, r7
 8007620:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007622:	4298      	cmp	r0, r3
 8007624:	d90a      	bls.n	800763c <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007626:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800762c:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800762e:	e075      	b.n	800771c <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007630:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007636:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8007638:	2501      	movs	r5, #1
 800763a:	e06f      	b.n	800771c <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 800763c:	2303      	movs	r3, #3
 800763e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	2100      	movs	r1, #0
 8007646:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800764c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007656:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007658:	4833      	ldr	r0, [pc, #204]	@ (8007728 <HAL_SD_ReadBlocks_DMA+0x128>)
 800765a:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800765c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800765e:	4833      	ldr	r0, [pc, #204]	@ (800772c <HAL_SD_ReadBlocks_DMA+0x12c>)
 8007660:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8007662:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007664:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007666:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007668:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800766a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800766c:	6801      	ldr	r1, [r0, #0]
 800766e:	680b      	ldr	r3, [r1, #0]
 8007670:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007674:	6880      	ldr	r0, [r0, #8]
 8007676:	4303      	orrs	r3, r0
 8007678:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800767a:	ea4f 2947 	mov.w	r9, r7, lsl #9
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8007684:	3180      	adds	r1, #128	@ 0x80
 8007686:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007688:	f7fe f872 	bl	8005770 <HAL_DMA_Start_IT>
 800768c:	4680      	mov	r8, r0
 800768e:	bb68      	cbnz	r0, 80076ec <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 8007690:	4b27      	ldr	r3, [pc, #156]	@ (8007730 <HAL_SD_ReadBlocks_DMA+0x130>)
 8007692:	2201      	movs	r2, #1
 8007694:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007698:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800769a:	4293      	cmp	r3, r2
        add *= 512U;
 800769c:	bf18      	it	ne
 800769e:	0276      	lslne	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076a6:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076aa:	2390      	movs	r3, #144	@ 0x90
 80076ac:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076ae:	2302      	movs	r3, #2
 80076b0:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80076ba:	4669      	mov	r1, sp
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	f001 fcf8 	bl	80090b2 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80076c2:	2f01      	cmp	r7, #1
 80076c4:	d922      	bls.n	800770c <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80076c6:	2382      	movs	r3, #130	@ 0x82
 80076c8:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80076ca:	4631      	mov	r1, r6
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	f001 fe0f 	bl	80092f0 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80076d2:	b338      	cbz	r0, 8007724 <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	4a17      	ldr	r2, [pc, #92]	@ (8007734 <HAL_SD_ReadBlocks_DMA+0x134>)
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80076da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80076dc:	4303      	orrs	r3, r0
 80076de:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 80076ea:	e017      	b.n	800771c <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80076f0:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 80076f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007734 <HAL_SD_ReadBlocks_DMA+0x134>)
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80076fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80076fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007702:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007704:	2301      	movs	r3, #1
 8007706:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800770a:	e007      	b.n	800771c <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800770c:	2381      	movs	r3, #129	@ 0x81
 800770e:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007710:	4631      	mov	r1, r6
 8007712:	6820      	ldr	r0, [r4, #0]
 8007714:	f001 fdd4 	bl	80092c0 <SDMMC_CmdReadSingleBlock>
 8007718:	e7db      	b.n	80076d2 <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 800771a:	2502      	movs	r5, #2
}
 800771c:	4628      	mov	r0, r5
 800771e:	b007      	add	sp, #28
 8007720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8007724:	4645      	mov	r5, r8
 8007726:	e7f9      	b.n	800771c <HAL_SD_ReadBlocks_DMA+0x11c>
 8007728:	08007877 	.word	0x08007877
 800772c:	08007e8d 	.word	0x08007e8d
 8007730:	42258000 	.word	0x42258000
 8007734:	004005ff 	.word	0x004005ff

08007738 <HAL_SD_WriteBlocks_DMA>:
{
 8007738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773a:	b087      	sub	sp, #28
 800773c:	4604      	mov	r4, r0
  if(NULL == pData)
 800773e:	2900      	cmp	r1, #0
 8007740:	d03b      	beq.n	80077ba <HAL_SD_WriteBlocks_DMA+0x82>
 8007742:	461e      	mov	r6, r3
 8007744:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8007746:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 800774a:	b2ed      	uxtb	r5, r5
 800774c:	2d01      	cmp	r5, #1
 800774e:	f040 8084 	bne.w	800785a <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007756:	1993      	adds	r3, r2, r6
 8007758:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 800775a:	428b      	cmp	r3, r1
 800775c:	d833      	bhi.n	80077c6 <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 800775e:	2303      	movs	r3, #3
 8007760:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8007764:	6803      	ldr	r3, [r0, #0]
 8007766:	2100      	movs	r1, #0
 8007768:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800776e:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8007772:	f043 0302 	orr.w	r3, r3, #2
 8007776:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007778:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800777a:	483a      	ldr	r0, [pc, #232]	@ (8007864 <HAL_SD_WriteBlocks_DMA+0x12c>)
 800777c:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800777e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007780:	4839      	ldr	r0, [pc, #228]	@ (8007868 <HAL_SD_WriteBlocks_DMA+0x130>)
 8007782:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8007784:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007786:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007788:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800778a:	2b01      	cmp	r3, #1
      add *= 512U;
 800778c:	bf18      	it	ne
 800778e:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8007790:	2e01      	cmp	r6, #1
 8007792:	d91d      	bls.n	80077d0 <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007794:	23a0      	movs	r3, #160	@ 0xa0
 8007796:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007798:	4611      	mov	r1, r2
 800779a:	6820      	ldr	r0, [r4, #0]
 800779c:	f001 fdd8 	bl	8009350 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a0:	b1e8      	cbz	r0, 80077de <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	4a31      	ldr	r2, [pc, #196]	@ (800786c <HAL_SD_WriteBlocks_DMA+0x134>)
 80077a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80077a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80077aa:	4303      	orrs	r3, r0
 80077ac:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80077b8:	e050      	b.n	800785c <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80077bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077c0:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80077c2:	2501      	movs	r5, #1
 80077c4:	e04a      	b.n	800785c <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077c6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80077c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077cc:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 80077ce:	e045      	b.n	800785c <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80077d0:	2390      	movs	r3, #144	@ 0x90
 80077d2:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80077d4:	4611      	mov	r1, r2
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	f001 fda2 	bl	8009320 <SDMMC_CmdWriteSingleBlock>
 80077dc:	e7e0      	b.n	80077a0 <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 80077de:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <HAL_SD_WriteBlocks_DMA+0x138>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80077e8:	2240      	movs	r2, #64	@ 0x40
 80077ea:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80077ec:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80077ee:	680a      	ldr	r2, [r1, #0]
 80077f0:	6813      	ldr	r3, [r2, #0]
 80077f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077f6:	6889      	ldr	r1, [r1, #8]
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80077fc:	0276      	lsls	r6, r6, #9
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	08b3      	lsrs	r3, r6, #2
 8007802:	3280      	adds	r2, #128	@ 0x80
 8007804:	4639      	mov	r1, r7
 8007806:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007808:	f7fd ffb2 	bl	8005770 <HAL_DMA_Start_IT>
 800780c:	4607      	mov	r7, r0
 800780e:	b198      	cbz	r0, 8007838 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007814:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8007818:	f023 0302 	bic.w	r3, r3, #2
 800781c:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	4a12      	ldr	r2, [pc, #72]	@ (800786c <HAL_SD_WriteBlocks_DMA+0x134>)
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007824:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800782a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800782c:	2301      	movs	r3, #1
 800782e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007832:	2300      	movs	r3, #0
 8007834:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8007836:	e011      	b.n	800785c <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800783e:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007840:	2390      	movs	r3, #144	@ 0x90
 8007842:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007844:	2300      	movs	r3, #0
 8007846:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007848:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800784a:	2301      	movs	r3, #1
 800784c:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800784e:	4669      	mov	r1, sp
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	f001 fc2e 	bl	80090b2 <SDIO_ConfigData>
      return HAL_OK;
 8007856:	463d      	mov	r5, r7
 8007858:	e000      	b.n	800785c <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 800785a:	2502      	movs	r5, #2
}
 800785c:	4628      	mov	r0, r5
 800785e:	b007      	add	sp, #28
 8007860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007862:	bf00      	nop
 8007864:	080074e3 	.word	0x080074e3
 8007868:	08007e8d 	.word	0x08007e8d
 800786c:	004005ff 	.word	0x004005ff
 8007870:	42258000 	.word	0x42258000

08007874 <HAL_SD_ErrorCallback>:
}
 8007874:	4770      	bx	lr

08007876 <SD_DMAReceiveCplt>:
{
 8007876:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007878:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800787a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800787c:	2b82      	cmp	r3, #130	@ 0x82
 800787e:	d011      	beq.n	80078a4 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007884:	f023 0308 	bic.w	r3, r3, #8
 8007888:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007890:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007892:	2301      	movs	r3, #1
 8007894:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007898:	2300      	movs	r3, #0
 800789a:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 800789c:	4620      	mov	r0, r4
 800789e:	f002 fd66 	bl	800a36e <HAL_SD_RxCpltCallback>
}
 80078a2:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	f001 fd6b 	bl	8009380 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	4603      	mov	r3, r0
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d0e7      	beq.n	8007880 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 80078b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80078b2:	4313      	orrs	r3, r2
 80078b4:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 80078b6:	4620      	mov	r0, r4
 80078b8:	f7ff ffdc 	bl	8007874 <HAL_SD_ErrorCallback>
 80078bc:	e7e0      	b.n	8007880 <SD_DMAReceiveCplt+0xa>
	...

080078c0 <HAL_SD_GetCardCSD>:
{
 80078c0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80078c2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80078c4:	0f92      	lsrs	r2, r2, #30
 80078c6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80078c8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80078ca:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80078ce:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80078d0:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 80078d4:	f002 0203 	and.w	r2, r2, #3
 80078d8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80078da:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 80078de:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80078e0:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 80078e4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80078e6:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 80078ea:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80078ec:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 80078ee:	0d12      	lsrs	r2, r2, #20
 80078f0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80078f2:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 80078f6:	f002 020f 	and.w	r2, r2, #15
 80078fa:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80078fc:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 80078fe:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8007902:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007904:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007906:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800790a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800790c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800790e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8007912:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007914:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007916:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800791a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800791c:	2200      	movs	r2, #0
 800791e:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007920:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007922:	2a00      	cmp	r2, #0
 8007924:	f040 8086 	bne.w	8007a34 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007928:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800792a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800792e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8007932:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007934:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8007938:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800793a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800793c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8007940:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007942:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8007946:	f002 0207 	and.w	r2, r2, #7
 800794a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800794c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800794e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8007952:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007954:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007956:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800795a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800795c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800795e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8007962:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007964:	6908      	ldr	r0, [r1, #16]
 8007966:	3001      	adds	r0, #1
 8007968:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800796a:	7e0a      	ldrb	r2, [r1, #24]
 800796c:	f002 0207 	and.w	r2, r2, #7
 8007970:	3202      	adds	r2, #2
 8007972:	4090      	lsls	r0, r2
 8007974:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007976:	f891 c008 	ldrb.w	ip, [r1, #8]
 800797a:	f00c 0c0f 	and.w	ip, ip, #15
 800797e:	2201      	movs	r2, #1
 8007980:	fa02 f20c 	lsl.w	r2, r2, ip
 8007984:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007986:	0a52      	lsrs	r2, r2, #9
 8007988:	fb00 f202 	mul.w	r2, r0, r2
 800798c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800798e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007992:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007994:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007996:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800799a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800799c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800799e:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80079a2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80079a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80079a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079aa:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079ae:	0fd2      	lsrs	r2, r2, #31
 80079b0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079b4:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80079b8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80079ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079bc:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80079c0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80079c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079c4:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80079c8:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80079ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079cc:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80079d0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80079d4:	2000      	movs	r0, #0
 80079d6:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079da:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 80079de:	f002 0201 	and.w	r2, r2, #1
 80079e2:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079e8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80079ec:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079f2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80079f6:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079fc:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8007a00:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a06:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8007a0a:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a10:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8007a14:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a1a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8007a1e:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a24:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8007a28:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8007a32:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a34:	2a01      	cmp	r2, #1
 8007a36:	d110      	bne.n	8007a5a <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007a38:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007a3a:	0412      	lsls	r2, r2, #16
 8007a3c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8007a40:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8007a44:	4302      	orrs	r2, r0
 8007a46:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007a48:	690a      	ldr	r2, [r1, #16]
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	0292      	lsls	r2, r2, #10
 8007a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007a50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a56:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007a58:	e799      	b.n	800798e <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a5a:	6802      	ldr	r2, [r0, #0]
 8007a5c:	4904      	ldr	r1, [pc, #16]	@ (8007a70 <HAL_SD_GetCardCSD+0x1b0>)
 8007a5e:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a60:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8007a62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007a66:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a68:	2001      	movs	r0, #1
 8007a6a:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007a6e:	4770      	bx	lr
 8007a70:	004005ff 	.word	0x004005ff

08007a74 <HAL_SD_InitCard>:
{
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	b098      	sub	sp, #96	@ 0x60
 8007a7a:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9312      	str	r3, [sp, #72]	@ 0x48
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007a80:	9313      	str	r3, [sp, #76]	@ 0x4c
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007a82:	9314      	str	r3, [sp, #80]	@ 0x50
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007a84:	9315      	str	r3, [sp, #84]	@ 0x54
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a86:	9316      	str	r3, [sp, #88]	@ 0x58
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007a88:	2376      	movs	r3, #118	@ 0x76
 8007a8a:	9317      	str	r3, [sp, #92]	@ 0x5c
  status = SDIO_Init(hsd->Instance, Init);
 8007a8c:	ab18      	add	r3, sp, #96	@ 0x60
 8007a8e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007a92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007a96:	ab12      	add	r3, sp, #72	@ 0x48
 8007a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	f001 fac9 	bl	8009032 <SDIO_Init>
  if(status != HAL_OK)
 8007aa0:	b120      	cbz	r0, 8007aac <HAL_SD_InitCard+0x38>
    return HAL_ERROR;
 8007aa2:	2501      	movs	r5, #1
}
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	b018      	add	sp, #96	@ 0x60
 8007aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_SD_DISABLE(hsd);
 8007aac:	4e81      	ldr	r6, [pc, #516]	@ (8007cb4 <HAL_SD_InitCard+0x240>)
 8007aae:	2500      	movs	r5, #0
 8007ab0:	f8c6 50a0 	str.w	r5, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	f001 fade 	bl	8009076 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8007aba:	2301      	movs	r3, #1
 8007abc:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8007ac0:	2002      	movs	r0, #2
 8007ac2:	f7fd fd0f 	bl	80054e4 <HAL_Delay>
  __IO uint32_t count = 0U;
 8007ac6:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	f001 fb07 	bl	80090dc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b138      	cbz	r0, 8007ae2 <HAL_SD_InitCard+0x6e>
    hsd->State = HAL_SD_STATE_READY;
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007ad8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ada:	432b      	orrs	r3, r5
 8007adc:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8007ade:	4615      	mov	r5, r2
 8007ae0:	e7e0      	b.n	8007aa4 <HAL_SD_InitCard+0x30>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	f001 fe1c 	bl	8009720 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ae8:	b948      	cbnz	r0, 8007afe <HAL_SD_InitCard+0x8a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007aea:	2301      	movs	r3, #1
 8007aec:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007aee:	2100      	movs	r1, #0
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	f001 fc77 	bl	80093e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af6:	b168      	cbz	r0, 8007b14 <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8007afc:	e7e9      	b.n	8007ad2 <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007afe:	2300      	movs	r3, #0
 8007b00:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b02:	6820      	ldr	r0, [r4, #0]
 8007b04:	f001 faea 	bl	80090dc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f040 80c4 	bne.w	8007c96 <HAL_SD_InitCard+0x222>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007b0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d0ec      	beq.n	8007aee <HAL_SD_InitCard+0x7a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b14:	9a06      	ldr	r2, [sp, #24]
 8007b16:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	f200 80c0 	bhi.w	8007ca0 <HAL_SD_InitCard+0x22c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b20:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b22:	4f65      	ldr	r7, [pc, #404]	@ (8007cb8 <HAL_SD_InitCard+0x244>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b24:	4698      	mov	r8, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b26:	4631      	mov	r1, r6
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	f001 fc5b 	bl	80093e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2e:	4605      	mov	r5, r0
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d1ce      	bne.n	8007ad2 <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b34:	4639      	mov	r1, r7
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	f001 fd34 	bl	80095a4 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d155      	bne.n	8007bec <HAL_SD_InitCard+0x178>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b40:	4631      	mov	r1, r6
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	f001 fab2 	bl	80090ac <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b48:	0fc2      	lsrs	r2, r0, #31
    count++;
 8007b4a:	9b06      	ldr	r3, [sp, #24]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b50:	9b06      	ldr	r3, [sp, #24]
 8007b52:	4543      	cmp	r3, r8
 8007b54:	d801      	bhi.n	8007b5a <HAL_SD_InitCard+0xe6>
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	d0e5      	beq.n	8007b26 <HAL_SD_InitCard+0xb2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b5a:	9a06      	ldr	r2, [sp, #24]
 8007b5c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8007b60:	429a      	cmp	r2, r3
 8007b62:	f200 809a 	bhi.w	8007c9a <HAL_SD_InitCard+0x226>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b66:	f3c0 7580 	ubfx	r5, r0, #30, #1
    hsd->SdCard.CardType = CARD_SDSC;
 8007b6a:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	f001 fa83 	bl	800907e <SDIO_GetPowerState>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f000 8083 	beq.w	8007c84 <HAL_SD_InitCard+0x210>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d136      	bne.n	8007bf2 <HAL_SD_InitCard+0x17e>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007b84:	2104      	movs	r1, #4
 8007b86:	6820      	ldr	r0, [r4, #0]
 8007b88:	f001 fa90 	bl	80090ac <SDIO_GetResponse>
 8007b8c:	0d00      	lsrs	r0, r0, #20
 8007b8e:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b90:	a907      	add	r1, sp, #28
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff fe94 	bl	80078c0 <HAL_SD_GetCardCSD>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d16f      	bne.n	8007c7e <HAL_SD_InitCard+0x20a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b9e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007ba0:	0412      	lsls	r2, r2, #16
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	f001 fc05 	bl	80093b4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007baa:	4602      	mov	r2, r0
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d16b      	bne.n	8007c88 <HAL_SD_InitCard+0x214>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	f853 6b10 	ldr.w	r6, [r3], #16
 8007bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007bbe:	1d23      	adds	r3, r4, #4
 8007bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f001 fa35 	bl	8009032 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	f001 fb5f 	bl	8009290 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	f43f af66 	beq.w	8007aa4 <HAL_SD_InitCard+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	4938      	ldr	r1, [pc, #224]	@ (8007cbc <HAL_SD_InitCard+0x248>)
 8007bdc:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007be0:	4303      	orrs	r3, r0
 8007be2:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007be4:	2501      	movs	r5, #1
 8007be6:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8007bea:	e75b      	b.n	8007aa4 <HAL_SD_InitCard+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bf0:	e76f      	b.n	8007ad2 <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	f001 fc84 	bl	8009500 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d144      	bne.n	8007c88 <HAL_SD_InitCard+0x214>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	f001 fa53 	bl	80090ac <SDIO_GetResponse>
 8007c06:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c08:	2104      	movs	r1, #4
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	f001 fa4e 	bl	80090ac <SDIO_GetResponse>
 8007c10:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c12:	2108      	movs	r1, #8
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	f001 fa49 	bl	80090ac <SDIO_GetResponse>
 8007c1a:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c1c:	210c      	movs	r1, #12
 8007c1e:	6820      	ldr	r0, [r4, #0]
 8007c20:	f001 fa44 	bl	80090ac <SDIO_GetResponse>
 8007c24:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c28:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d0aa      	beq.n	8007b84 <HAL_SD_InitCard+0x110>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c2e:	f10d 0116 	add.w	r1, sp, #22
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	f001 fd26 	bl	8009684 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c38:	4602      	mov	r2, r0
 8007c3a:	bb28      	cbnz	r0, 8007c88 <HAL_SD_InitCard+0x214>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d0a0      	beq.n	8007b84 <HAL_SD_InitCard+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c42:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8007c46:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c48:	0409      	lsls	r1, r1, #16
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	f001 fc6d 	bl	800952a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c50:	4602      	mov	r2, r0
 8007c52:	b9c8      	cbnz	r0, 8007c88 <HAL_SD_InitCard+0x214>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c54:	2100      	movs	r1, #0
 8007c56:	6820      	ldr	r0, [r4, #0]
 8007c58:	f001 fa28 	bl	80090ac <SDIO_GetResponse>
 8007c5c:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c5e:	2104      	movs	r1, #4
 8007c60:	6820      	ldr	r0, [r4, #0]
 8007c62:	f001 fa23 	bl	80090ac <SDIO_GetResponse>
 8007c66:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c68:	2108      	movs	r1, #8
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	f001 fa1e 	bl	80090ac <SDIO_GetResponse>
 8007c70:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c72:	210c      	movs	r1, #12
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	f001 fa19 	bl	80090ac <SDIO_GetResponse>
 8007c7a:	6720      	str	r0, [r4, #112]	@ 0x70
 8007c7c:	e782      	b.n	8007b84 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c82:	e001      	b.n	8007c88 <HAL_SD_InitCard+0x214>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8007c88:	2501      	movs	r5, #1
 8007c8a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007c8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c90:	4313      	orrs	r3, r2
 8007c92:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8007c94:	e706      	b.n	8007aa4 <HAL_SD_InitCard+0x30>
      return errorstate;
 8007c96:	4605      	mov	r5, r0
 8007c98:	e71b      	b.n	8007ad2 <HAL_SD_InitCard+0x5e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c9a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8007c9e:	e718      	b.n	8007ad2 <HAL_SD_InitCard+0x5e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007ca0:	9a06      	ldr	r2, [sp, #24]
 8007ca2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	f67f af5f 	bls.w	8007b6a <HAL_SD_InitCard+0xf6>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cac:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cb0:	e70f      	b.n	8007ad2 <HAL_SD_InitCard+0x5e>
 8007cb2:	bf00      	nop
 8007cb4:	42258000 	.word	0x42258000
 8007cb8:	c1100000 	.word	0xc1100000
 8007cbc:	004005ff 	.word	0x004005ff

08007cc0 <HAL_SD_Init>:
  if(hsd == NULL)
 8007cc0:	b1a8      	cbz	r0, 8007cee <HAL_SD_Init+0x2e>
{
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8007cc6:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8007cca:	b163      	cbz	r3, 8007ce6 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fece 	bl	8007a74 <HAL_SD_InitCard>
 8007cd8:	b958      	cbnz	r0, 8007cf2 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cda:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8007cdc:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8007ce4:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8007ce6:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8007ce8:	f7fd f916 	bl	8004f18 <HAL_SD_MspInit>
 8007cec:	e7ee      	b.n	8007ccc <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8007cee:	2001      	movs	r0, #1
}
 8007cf0:	4770      	bx	lr
    return HAL_ERROR;
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e7f6      	b.n	8007ce4 <HAL_SD_Init+0x24>

08007cf6 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007cf6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007cf8:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007cfa:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007cfc:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007cfe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007d00:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d02:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007d04:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007d08:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d0a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007d0c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d0e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8007d10:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d12:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007d14:	61cb      	str	r3, [r1, #28]
}
 8007d16:	2000      	movs	r0, #0
 8007d18:	4770      	bx	lr
	...

08007d1c <HAL_SD_ConfigWideBusOperation>:
{
 8007d1c:	b530      	push	{r4, r5, lr}
 8007d1e:	b08d      	sub	sp, #52	@ 0x34
 8007d20:	4604      	mov	r4, r0
 8007d22:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8007d24:	2303      	movs	r3, #3
 8007d26:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d2a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d061      	beq.n	8007df4 <HAL_SD_ConfigWideBusOperation+0xd8>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007d30:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007d34:	d008      	beq.n	8007d48 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007d36:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007d3a:	d00a      	beq.n	8007d52 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007d3c:	b389      	cbz	r1, 8007da2 <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d3e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007d40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d44:	6383      	str	r3, [r0, #56]	@ 0x38
 8007d46:	e059      	b.n	8007dfc <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d48:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d4e:	6383      	str	r3, [r0, #56]	@ 0x38
 8007d50:	e054      	b.n	8007dfc <HAL_SD_ConfigWideBusOperation+0xe0>
  uint32_t scr[2U] = {0U, 0U};
 8007d52:	2100      	movs	r1, #0
 8007d54:	9104      	str	r1, [sp, #16]
 8007d56:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	f001 f9a7 	bl	80090ac <SDIO_GetResponse>
 8007d5e:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8007d62:	d116      	bne.n	8007d92 <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 8007d64:	a904      	add	r1, sp, #16
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7ff fbc2 	bl	80074f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	b988      	cbnz	r0, 8007d94 <HAL_SD_ConfigWideBusOperation+0x78>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8007d76:	d011      	beq.n	8007d9c <HAL_SD_ConfigWideBusOperation+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d78:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007d7a:	0409      	lsls	r1, r1, #16
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	f001 fb31 	bl	80093e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d82:	4602      	mov	r2, r0
 8007d84:	b930      	cbnz	r0, 8007d94 <HAL_SD_ConfigWideBusOperation+0x78>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d86:	2102      	movs	r1, #2
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	f001 fb43 	bl	8009414 <SDMMC_CmdBusWidth>
 8007d8e:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d90:	e000      	b.n	8007d94 <HAL_SD_ConfigWideBusOperation+0x78>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d92:	462a      	mov	r2, r5
      hsd->ErrorCode |= errorstate;
 8007d94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007d96:	4313      	orrs	r3, r2
 8007d98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007d9a:	e02f      	b.n	8007dfc <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007da0:	e7f8      	b.n	8007d94 <HAL_SD_ConfigWideBusOperation+0x78>
  uint32_t scr[2U] = {0U, 0U};
 8007da2:	2100      	movs	r1, #0
 8007da4:	9104      	str	r1, [sp, #16]
 8007da6:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007da8:	6800      	ldr	r0, [r0, #0]
 8007daa:	f001 f97f 	bl	80090ac <SDIO_GetResponse>
 8007dae:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8007db2:	d116      	bne.n	8007de2 <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 8007db4:	a904      	add	r1, sp, #16
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7ff fb9a 	bl	80074f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	b990      	cbnz	r0, 8007de6 <HAL_SD_ConfigWideBusOperation+0xca>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007dc0:	9b05      	ldr	r3, [sp, #20]
 8007dc2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8007dc6:	d012      	beq.n	8007dee <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dc8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007dca:	0409      	lsls	r1, r1, #16
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	f001 fb09 	bl	80093e4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	b938      	cbnz	r0, 8007de6 <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	f001 fb1b 	bl	8009414 <SDMMC_CmdBusWidth>
 8007dde:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de0:	e001      	b.n	8007de6 <HAL_SD_ConfigWideBusOperation+0xca>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007de2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 8007de6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007de8:	4313      	orrs	r3, r2
 8007dea:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007dec:	e006      	b.n	8007dfc <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007dee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007df2:	e7f8      	b.n	8007de6 <HAL_SD_ConfigWideBusOperation+0xca>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007df4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dfa:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dfc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007dfe:	b1c3      	cbz	r3, 8007e32 <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	4a17      	ldr	r2, [pc, #92]	@ (8007e60 <HAL_SD_ConfigWideBusOperation+0x144>)
 8007e04:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e06:	2501      	movs	r5, #1
 8007e08:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	f001 fa3d 	bl	8009290 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e16:	b130      	cbz	r0, 8007e26 <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	4911      	ldr	r1, [pc, #68]	@ (8007e60 <HAL_SD_ConfigWideBusOperation+0x144>)
 8007e1c:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007e1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007e20:	4303      	orrs	r3, r0
 8007e22:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8007e24:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	b00d      	add	sp, #52	@ 0x34
 8007e30:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	9306      	str	r3, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	9307      	str	r3, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	9308      	str	r3, [sp, #32]
    Init.BusWide             = WideMode;
 8007e3e:	9509      	str	r5, [sp, #36]	@ 0x24
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e40:	6963      	ldr	r3, [r4, #20]
 8007e42:	930a      	str	r3, [sp, #40]	@ 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e44:	69a3      	ldr	r3, [r4, #24]
 8007e46:	930b      	str	r3, [sp, #44]	@ 0x2c
    (void)SDIO_Init(hsd->Instance, Init);
 8007e48:	ab0c      	add	r3, sp, #48	@ 0x30
 8007e4a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007e4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007e52:	ab06      	add	r3, sp, #24
 8007e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e56:	6820      	ldr	r0, [r4, #0]
 8007e58:	f001 f8eb 	bl	8009032 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8007e5c:	2500      	movs	r5, #0
 8007e5e:	e7d5      	b.n	8007e0c <HAL_SD_ConfigWideBusOperation+0xf0>
 8007e60:	004005ff 	.word	0x004005ff

08007e64 <HAL_SD_GetCardState>:
{
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e68:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007e6a:	0409      	lsls	r1, r1, #16
 8007e6c:	6800      	ldr	r0, [r0, #0]
 8007e6e:	f001 fb01 	bl	8009474 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e72:	b130      	cbz	r0, 8007e82 <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 8007e74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007e76:	4303      	orrs	r3, r0
 8007e78:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t resp1 = 0;
 8007e7a:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007e7c:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8007e80:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e82:	2100      	movs	r1, #0
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	f001 f911 	bl	80090ac <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e8a:	e7f7      	b.n	8007e7c <HAL_SD_GetCardState+0x18>

08007e8c <SD_DMAError>:
{
 8007e8c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e8e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e90:	f7fd fdb8 	bl	8005a04 <HAL_DMA_GetError>
 8007e94:	2802      	cmp	r0, #2
 8007e96:	d00a      	beq.n	8007eae <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007e9c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007e9e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d005      	beq.n	8007eb0 <SD_DMAError+0x24>
 8007ea4:	2a01      	cmp	r2, #1
 8007ea6:	d003      	beq.n	8007eb0 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7ff fce3 	bl	8007874 <HAL_SD_ErrorCallback>
}
 8007eae:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8007ef0 <SD_DMAError+0x64>)
 8007eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007eba:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8007ebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ec0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ec2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec6:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7ff ffcb 	bl	8007e64 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007ece:	3805      	subs	r0, #5
 8007ed0:	2801      	cmp	r0, #1
 8007ed2:	d905      	bls.n	8007ee0 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ede:	e7e3      	b.n	8007ea8 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	f001 fa4d 	bl	8009380 <SDMMC_CmdStopTransfer>
 8007ee6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ee8:	4303      	orrs	r3, r0
 8007eea:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007eec:	e7f2      	b.n	8007ed4 <SD_DMAError+0x48>
 8007eee:	bf00      	nop
 8007ef0:	004005ff 	.word	0x004005ff

08007ef4 <SD_DMATxAbort>:
{
 8007ef4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ef6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007efe:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8007f00:	4620      	mov	r0, r4
 8007f02:	f7ff ffaf 	bl	8007e64 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007f10:	3805      	subs	r0, #5
 8007f12:	2801      	cmp	r0, #1
 8007f14:	d905      	bls.n	8007f22 <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007f16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f18:	b953      	cbnz	r3, 8007f30 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f002 fa1f 	bl	800a35e <HAL_SD_AbortCallback>
}
 8007f20:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	f001 fa2c 	bl	8009380 <SDMMC_CmdStopTransfer>
 8007f28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f2a:	4303      	orrs	r3, r0
 8007f2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f2e:	e7f2      	b.n	8007f16 <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7ff fc9f 	bl	8007874 <HAL_SD_ErrorCallback>
}
 8007f36:	e7f3      	b.n	8007f20 <SD_DMATxAbort+0x2c>

08007f38 <SD_DMARxAbort>:
{
 8007f38:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f3a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f42:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 8007f44:	4620      	mov	r0, r4
 8007f46:	f7ff ff8d 	bl	8007e64 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007f54:	3805      	subs	r0, #5
 8007f56:	2801      	cmp	r0, #1
 8007f58:	d905      	bls.n	8007f66 <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007f5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f5c:	b953      	cbnz	r3, 8007f74 <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f002 f9fd 	bl	800a35e <HAL_SD_AbortCallback>
}
 8007f64:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f66:	6820      	ldr	r0, [r4, #0]
 8007f68:	f001 fa0a 	bl	8009380 <SDMMC_CmdStopTransfer>
 8007f6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f6e:	4303      	orrs	r3, r0
 8007f70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007f72:	e7f2      	b.n	8007f5a <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7ff fc7d 	bl	8007874 <HAL_SD_ErrorCallback>
}
 8007f7a:	e7f3      	b.n	8007f64 <SD_DMARxAbort+0x2c>

08007f7c <HAL_SD_IRQHandler>:
{
 8007f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8007f84:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007f86:	6803      	ldr	r3, [r0, #0]
 8007f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f8a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8007f8e:	f000 8082 	beq.w	8008096 <HAL_SD_IRQHandler+0x11a>
 8007f92:	f015 0f08 	tst.w	r5, #8
 8007f96:	d15e      	bne.n	8008056 <HAL_SD_IRQHandler+0xda>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9a:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8007f9e:	f040 8114 	bne.w	80081ca <HAL_SD_IRQHandler+0x24e>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007fa4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007fa6:	f240 223a 	movw	r2, #570	@ 0x23a
 8007faa:	4211      	tst	r1, r2
 8007fac:	f000 809c 	beq.w	80080e8 <HAL_SD_IRQHandler+0x16c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fb2:	f012 0f02 	tst.w	r2, #2
 8007fb6:	d003      	beq.n	8007fc0 <HAL_SD_IRQHandler+0x44>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fb8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007fba:	f042 0202 	orr.w	r2, r2, #2
 8007fbe:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fc2:	f012 0f08 	tst.w	r2, #8
 8007fc6:	d003      	beq.n	8007fd0 <HAL_SD_IRQHandler+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007fc8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007fca:	f042 0208 	orr.w	r2, r2, #8
 8007fce:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd2:	f012 0f20 	tst.w	r2, #32
 8007fd6:	d003      	beq.n	8007fe0 <HAL_SD_IRQHandler+0x64>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fd8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007fda:	f042 0220 	orr.w	r2, r2, #32
 8007fde:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fe2:	f012 0f10 	tst.w	r2, #16
 8007fe6:	d003      	beq.n	8007ff0 <HAL_SD_IRQHandler+0x74>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007fe8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007fea:	f042 0210 	orr.w	r2, r2, #16
 8007fee:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ff2:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8007ff6:	d003      	beq.n	8008000 <HAL_SD_IRQHandler+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ff8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ffa:	f042 0208 	orr.w	r2, r2, #8
 8007ffe:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008000:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008004:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800800a:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800800e:	f023 0302 	bic.w	r3, r3, #2
 8008012:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	f001 f9b3 	bl	8009380 <SDMMC_CmdStopTransfer>
 800801a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800801c:	4303      	orrs	r3, r0
 800801e:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008020:	f015 0f08 	tst.w	r5, #8
 8008024:	f040 80b2 	bne.w	800818c <HAL_SD_IRQHandler+0x210>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008028:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800802c:	d05c      	beq.n	80080e8 <HAL_SD_IRQHandler+0x16c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800802e:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8008032:	f040 80b4 	bne.w	800819e <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008036:	f015 0f03 	tst.w	r5, #3
 800803a:	f000 80bc 	beq.w	80081b6 <HAL_SD_IRQHandler+0x23a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800803e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008040:	4a75      	ldr	r2, [pc, #468]	@ (8008218 <HAL_SD_IRQHandler+0x29c>)
 8008042:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008044:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008046:	f7fd fbdc 	bl	8005802 <HAL_DMA_Abort_IT>
 800804a:	2800      	cmp	r0, #0
 800804c:	d04c      	beq.n	80080e8 <HAL_SD_IRQHandler+0x16c>
          SD_DMARxAbort(hsd->hdmarx);
 800804e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008050:	f7ff ff72 	bl	8007f38 <SD_DMARxAbort>
 8008054:	e048      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8008056:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8008058:	2f00      	cmp	r7, #0
 800805a:	d045      	beq.n	80080e8 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pRxBuffPtr;
 800805c:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8008060:	f108 0504 	add.w	r5, r8, #4
 8008064:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	f000 fffc 	bl	8009066 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800806e:	f805 0c04 	strb.w	r0, [r5, #-4]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008072:	0a03      	lsrs	r3, r0, #8
 8008074:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008078:	0c03      	lsrs	r3, r0, #16
 800807a:	f805 3c02 	strb.w	r3, [r5, #-2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800807e:	0e00      	lsrs	r0, r0, #24
 8008080:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 8008084:	3504      	adds	r5, #4
 8008086:	42b5      	cmp	r5, r6
 8008088:	d1ee      	bne.n	8008068 <HAL_SD_IRQHandler+0xec>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 800808a:	f108 0320 	add.w	r3, r8, #32
 800808e:	62a3      	str	r3, [r4, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008090:	3f20      	subs	r7, #32
 8008092:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8008094:	e028      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008098:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800809c:	d045      	beq.n	800812a <HAL_SD_IRQHandler+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800809e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80080a4:	6802      	ldr	r2, [r0, #0]
 80080a6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80080a8:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80080ac:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80080b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80080b2:	6802      	ldr	r2, [r0, #0]
 80080b4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80080bc:	f015 0f08 	tst.w	r5, #8
 80080c0:	f000 8092 	beq.w	80081e8 <HAL_SD_IRQHandler+0x26c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080c4:	f015 0f22 	tst.w	r5, #34	@ 0x22
 80080c8:	d111      	bne.n	80080ee <HAL_SD_IRQHandler+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80080d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80080dc:	f015 0f03 	tst.w	r5, #3
 80080e0:	d012      	beq.n	8008108 <HAL_SD_IRQHandler+0x18c>
        HAL_SD_RxCpltCallback(hsd);
 80080e2:	4620      	mov	r0, r4
 80080e4:	f002 f943 	bl	800a36e <HAL_SD_RxCpltCallback>
}
 80080e8:	b002      	add	sp, #8
 80080ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	f001 f946 	bl	8009380 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80080f4:	4603      	mov	r3, r0
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0e7      	beq.n	80080ca <HAL_SD_IRQHandler+0x14e>
          hsd->ErrorCode |= errorstate;
 80080fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80080fc:	4313      	orrs	r3, r2
 80080fe:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff fbb7 	bl	8007874 <HAL_SD_ErrorCallback>
 8008106:	e7e0      	b.n	80080ca <HAL_SD_IRQHandler+0x14e>
        HAL_SD_TxCpltCallback(hsd);
 8008108:	4620      	mov	r0, r4
 800810a:	f002 f92c 	bl	800a366 <HAL_SD_TxCpltCallback>
 800810e:	e7eb      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	f001 f935 	bl	8009380 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8008116:	4603      	mov	r3, r0
 8008118:	2800      	cmp	r0, #0
 800811a:	d06c      	beq.n	80081f6 <HAL_SD_IRQHandler+0x27a>
          hsd->ErrorCode |= errorstate;
 800811c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800811e:	4313      	orrs	r3, r2
 8008120:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff fba6 	bl	8007874 <HAL_SD_ErrorCallback>
 8008128:	e065      	b.n	80081f6 <HAL_SD_IRQHandler+0x27a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800812a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800812c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8008130:	f43f af38 	beq.w	8007fa4 <HAL_SD_IRQHandler+0x28>
 8008134:	f015 0f08 	tst.w	r5, #8
 8008138:	f43f af34 	beq.w	8007fa4 <HAL_SD_IRQHandler+0x28>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800813c:	6a47      	ldr	r7, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 800813e:	2f00      	cmp	r7, #0
 8008140:	d0d2      	beq.n	80080e8 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pTxBuffPtr;
 8008142:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8008146:	f108 0504 	add.w	r5, r8, #4
 800814a:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 800814e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8008152:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 8008154:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8008158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800815c:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 800815e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8008162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008166:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8008168:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800816c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008170:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008172:	a901      	add	r1, sp, #4
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	f000 ff79 	bl	800906c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800817a:	3504      	adds	r5, #4
 800817c:	42b5      	cmp	r5, r6
 800817e:	d1e6      	bne.n	800814e <HAL_SD_IRQHandler+0x1d2>
    }

    hsd->pTxBuffPtr = tmp;
 8008180:	f108 0320 	add.w	r3, r8, #32
 8008184:	6223      	str	r3, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8008186:	3f20      	subs	r7, #32
 8008188:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 800818a:	e7ad      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
      hsd->State = HAL_SD_STATE_READY;
 800818c:	2301      	movs	r3, #1
 800818e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008192:	2300      	movs	r3, #0
 8008194:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008196:	4620      	mov	r0, r4
 8008198:	f7ff fb6c 	bl	8007874 <HAL_SD_ErrorCallback>
 800819c:	e7a4      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800819e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081a0:	4a1e      	ldr	r2, [pc, #120]	@ (800821c <HAL_SD_IRQHandler+0x2a0>)
 80081a2:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80081a4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80081a6:	f7fd fb2c 	bl	8005802 <HAL_DMA_Abort_IT>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d09c      	beq.n	80080e8 <HAL_SD_IRQHandler+0x16c>
          SD_DMATxAbort(hsd->hdmatx);
 80081ae:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80081b0:	f7ff fea0 	bl	8007ef4 <SD_DMATxAbort>
 80081b4:	e798      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80081ba:	2201      	movs	r2, #1
 80081bc:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80081c0:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80081c2:	4620      	mov	r0, r4
 80081c4:	f002 f8cb 	bl	800a35e <HAL_SD_AbortCallback>
}
 80081c8:	e78e      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80081ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80081d4:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80081d8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80081dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 80081e8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80081ec:	f43f af7c 	beq.w	80080e8 <HAL_SD_IRQHandler+0x16c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80081f0:	f015 0f20 	tst.w	r5, #32
 80081f4:	d18c      	bne.n	8008110 <HAL_SD_IRQHandler+0x194>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80081f6:	f015 0f03 	tst.w	r5, #3
 80081fa:	f47f af75 	bne.w	80080e8 <HAL_SD_IRQHandler+0x16c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80081fe:	6822      	ldr	r2, [r4, #0]
 8008200:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008202:	f023 0308 	bic.w	r3, r3, #8
 8008206:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008208:	2301      	movs	r3, #1
 800820a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800820e:	4620      	mov	r0, r4
 8008210:	f002 f8a9 	bl	800a366 <HAL_SD_TxCpltCallback>
 8008214:	e768      	b.n	80080e8 <HAL_SD_IRQHandler+0x16c>
 8008216:	bf00      	nop
 8008218:	08007f39 	.word	0x08007f39
 800821c:	08007ef5 	.word	0x08007ef5

08008220 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008220:	2800      	cmp	r0, #0
 8008222:	d05a      	beq.n	80082da <HAL_SPI_Init+0xba>
{
 8008224:	b510      	push	{r4, lr}
 8008226:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008228:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800822a:	b933      	cbnz	r3, 800823a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800822c:	6843      	ldr	r3, [r0, #4]
 800822e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008232:	d005      	beq.n	8008240 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008234:	2300      	movs	r3, #0
 8008236:	61c3      	str	r3, [r0, #28]
 8008238:	e002      	b.n	8008240 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800823a:	2300      	movs	r3, #0
 800823c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800823e:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008240:	2300      	movs	r3, #0
 8008242:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008244:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8008248:	2b00      	cmp	r3, #0
 800824a:	d040      	beq.n	80082ce <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800824c:	2302      	movs	r3, #2
 800824e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	6813      	ldr	r3, [r2, #0]
 8008256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800825a:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800825c:	6822      	ldr	r2, [r4, #0]
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8008264:	68a1      	ldr	r1, [r4, #8]
 8008266:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 800826a:	430b      	orrs	r3, r1
 800826c:	68e1      	ldr	r1, [r4, #12]
 800826e:	f401 6100 	and.w	r1, r1, #2048	@ 0x800
 8008272:	430b      	orrs	r3, r1
 8008274:	6921      	ldr	r1, [r4, #16]
 8008276:	f001 0102 	and.w	r1, r1, #2
 800827a:	430b      	orrs	r3, r1
 800827c:	6961      	ldr	r1, [r4, #20]
 800827e:	f001 0101 	and.w	r1, r1, #1
 8008282:	430b      	orrs	r3, r1
 8008284:	69a1      	ldr	r1, [r4, #24]
 8008286:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800828a:	430b      	orrs	r3, r1
 800828c:	69e1      	ldr	r1, [r4, #28]
 800828e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8008292:	430b      	orrs	r3, r1
 8008294:	6a21      	ldr	r1, [r4, #32]
 8008296:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800829a:	430b      	orrs	r3, r1
 800829c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800829e:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 80082a2:	430b      	orrs	r3, r1
 80082a4:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	8b63      	ldrh	r3, [r4, #26]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082b0:	f002 0210 	and.w	r2, r2, #16
 80082b4:	4313      	orrs	r3, r2
 80082b6:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	69d3      	ldr	r3, [r2, #28]
 80082bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082c0:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082c2:	2000      	movs	r0, #0
 80082c4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 80082cc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80082ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80082d2:	4620      	mov	r0, r4
 80082d4:	f7fc feec 	bl	80050b0 <HAL_SPI_MspInit>
 80082d8:	e7b8      	b.n	800824c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80082da:	2001      	movs	r0, #1
}
 80082dc:	4770      	bx	lr
	...

080082e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e4:	6a02      	ldr	r2, [r0, #32]
 80082e6:	f022 0201 	bic.w	r2, r2, #1
 80082ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082f0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f4:	680d      	ldr	r5, [r1, #0]
 80082f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082f8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082fc:	688d      	ldr	r5, [r1, #8]
 80082fe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008300:	4d0d      	ldr	r5, [pc, #52]	@ (8008338 <TIM_OC1_SetConfig+0x58>)
 8008302:	42a8      	cmp	r0, r5
 8008304:	d003      	beq.n	800830e <TIM_OC1_SetConfig+0x2e>
 8008306:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800830a:	42a8      	cmp	r0, r5
 800830c:	d10d      	bne.n	800832a <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800830e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008312:	68cd      	ldr	r5, [r1, #12]
 8008314:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008316:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800831e:	698d      	ldr	r5, [r1, #24]
 8008320:	694e      	ldr	r6, [r1, #20]
 8008322:	ea46 0c05 	orr.w	ip, r6, r5
 8008326:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800832e:	684a      	ldr	r2, [r1, #4]
 8008330:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	6203      	str	r3, [r0, #32]
}
 8008334:	bc70      	pop	{r4, r5, r6}
 8008336:	4770      	bx	lr
 8008338:	40010000 	.word	0x40010000

0800833c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008340:	6a02      	ldr	r2, [r0, #32]
 8008342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008346:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800834c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008350:	680d      	ldr	r5, [r1, #0]
 8008352:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008358:	688d      	ldr	r5, [r1, #8]
 800835a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800835e:	4d0e      	ldr	r5, [pc, #56]	@ (8008398 <TIM_OC3_SetConfig+0x5c>)
 8008360:	42a8      	cmp	r0, r5
 8008362:	d003      	beq.n	800836c <TIM_OC3_SetConfig+0x30>
 8008364:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008368:	42a8      	cmp	r0, r5
 800836a:	d10e      	bne.n	800838a <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800836c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008370:	68cd      	ldr	r5, [r1, #12]
 8008372:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800837a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800837e:	698d      	ldr	r5, [r1, #24]
 8008380:	694e      	ldr	r6, [r1, #20]
 8008382:	ea46 0c05 	orr.w	ip, r6, r5
 8008386:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800838c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800838e:	684a      	ldr	r2, [r1, #4]
 8008390:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	6203      	str	r3, [r0, #32]
}
 8008394:	bc70      	pop	{r4, r5, r6}
 8008396:	4770      	bx	lr
 8008398:	40010000 	.word	0x40010000

0800839c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800839c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083a0:	6a02      	ldr	r2, [r0, #32]
 80083a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b0:	680d      	ldr	r5, [r1, #0]
 80083b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083ba:	688d      	ldr	r5, [r1, #8]
 80083bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	4d09      	ldr	r5, [pc, #36]	@ (80083e8 <TIM_OC4_SetConfig+0x4c>)
 80083c2:	42a8      	cmp	r0, r5
 80083c4:	d003      	beq.n	80083ce <TIM_OC4_SetConfig+0x32>
 80083c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083ca:	42a8      	cmp	r0, r5
 80083cc:	d104      	bne.n	80083d8 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083ce:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083d2:	694d      	ldr	r5, [r1, #20]
 80083d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083dc:	684a      	ldr	r2, [r1, #4]
 80083de:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e0:	6203      	str	r3, [r0, #32]
}
 80083e2:	bc30      	pop	{r4, r5}
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000

080083ec <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80083ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d132      	bne.n	800845c <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 80083f6:	2302      	movs	r3, #2
 80083f8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fc:	6803      	ldr	r3, [r0, #0]
 80083fe:	4a19      	ldr	r2, [pc, #100]	@ (8008464 <HAL_TIM_Base_Start+0x78>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d020      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008408:	d01d      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 800840a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800840e:	4293      	cmp	r3, r2
 8008410:	d019      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 8008412:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008416:	4293      	cmp	r3, r2
 8008418:	d015      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 800841a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800841e:	4293      	cmp	r3, r2
 8008420:	d011      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 8008422:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8008426:	4293      	cmp	r3, r2
 8008428:	d00d      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 800842a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
 8008432:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008436:	4293      	cmp	r3, r2
 8008438:	d005      	beq.n	8008446 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008442:	2000      	movs	r0, #0
 8008444:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	2a06      	cmp	r2, #6
 800844e:	d007      	beq.n	8008460 <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008458:	2000      	movs	r0, #0
 800845a:	4770      	bx	lr
    return HAL_ERROR;
 800845c:	2001      	movs	r0, #1
 800845e:	4770      	bx	lr
  return HAL_OK;
 8008460:	2000      	movs	r0, #0
}
 8008462:	4770      	bx	lr
 8008464:	40010000 	.word	0x40010000

08008468 <HAL_TIM_PWM_MspInit>:
}
 8008468:	4770      	bx	lr

0800846a <HAL_TIM_PeriodElapsedCallback>:
}
 800846a:	4770      	bx	lr

0800846c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_IC_CaptureCallback>:
}
 800846e:	4770      	bx	lr

08008470 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008470:	4770      	bx	lr

08008472 <HAL_TIM_TriggerCallback>:
}
 8008472:	4770      	bx	lr

08008474 <HAL_TIM_IRQHandler>:
{
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8008478:	6803      	ldr	r3, [r0, #0]
 800847a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800847c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800847e:	f015 0f02 	tst.w	r5, #2
 8008482:	d010      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008484:	f016 0f02 	tst.w	r6, #2
 8008488:	d00d      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800848a:	f06f 0202 	mvn.w	r2, #2
 800848e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008490:	2301      	movs	r3, #1
 8008492:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008494:	6803      	ldr	r3, [r0, #0]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f013 0f03 	tst.w	r3, #3
 800849c:	d05e      	beq.n	800855c <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800849e:	f7ff ffe6 	bl	800846e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	2300      	movs	r3, #0
 80084a4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084a6:	f015 0f04 	tst.w	r5, #4
 80084aa:	d012      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084ac:	f016 0f04 	tst.w	r6, #4
 80084b0:	d00f      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	f06f 0204 	mvn.w	r2, #4
 80084b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ba:	2302      	movs	r3, #2
 80084bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80084c6:	d04f      	beq.n	8008568 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7ff ffd0 	bl	800846e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ce:	2300      	movs	r3, #0
 80084d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084d2:	f015 0f08 	tst.w	r5, #8
 80084d6:	d012      	beq.n	80084fe <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084d8:	f016 0f08 	tst.w	r6, #8
 80084dc:	d00f      	beq.n	80084fe <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	f06f 0208 	mvn.w	r2, #8
 80084e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084e6:	2304      	movs	r3, #4
 80084e8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f013 0f03 	tst.w	r3, #3
 80084f2:	d040      	beq.n	8008576 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff ffba 	bl	800846e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fa:	2300      	movs	r3, #0
 80084fc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084fe:	f015 0f10 	tst.w	r5, #16
 8008502:	d012      	beq.n	800852a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008504:	f016 0f10 	tst.w	r6, #16
 8008508:	d00f      	beq.n	800852a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f06f 0210 	mvn.w	r2, #16
 8008510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008512:	2308      	movs	r3, #8
 8008514:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800851e:	d031      	beq.n	8008584 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8008520:	4620      	mov	r0, r4
 8008522:	f7ff ffa4 	bl	800846e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008526:	2300      	movs	r3, #0
 8008528:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800852a:	f015 0f01 	tst.w	r5, #1
 800852e:	d002      	beq.n	8008536 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008530:	f016 0f01 	tst.w	r6, #1
 8008534:	d12d      	bne.n	8008592 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008536:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800853a:	d002      	beq.n	8008542 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800853c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8008540:	d12f      	bne.n	80085a2 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008542:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8008546:	d002      	beq.n	800854e <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008548:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800854c:	d131      	bne.n	80085b2 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800854e:	f015 0f20 	tst.w	r5, #32
 8008552:	d002      	beq.n	800855a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008554:	f016 0f20 	tst.w	r6, #32
 8008558:	d133      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x14e>
}
 800855a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800855c:	f7ff ff86 	bl	800846c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff ff85 	bl	8008470 <HAL_TIM_PWM_PulseFinishedCallback>
 8008566:	e79c      	b.n	80084a2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008568:	4620      	mov	r0, r4
 800856a:	f7ff ff7f 	bl	800846c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff ff7e 	bl	8008470 <HAL_TIM_PWM_PulseFinishedCallback>
 8008574:	e7ab      	b.n	80084ce <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	4620      	mov	r0, r4
 8008578:	f7ff ff78 	bl	800846c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857c:	4620      	mov	r0, r4
 800857e:	f7ff ff77 	bl	8008470 <HAL_TIM_PWM_PulseFinishedCallback>
 8008582:	e7ba      	b.n	80084fa <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008584:	4620      	mov	r0, r4
 8008586:	f7ff ff71 	bl	800846c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff ff70 	bl	8008470 <HAL_TIM_PWM_PulseFinishedCallback>
 8008590:	e7c9      	b.n	8008526 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	f06f 0201 	mvn.w	r2, #1
 8008598:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff ff65 	bl	800846a <HAL_TIM_PeriodElapsedCallback>
 80085a0:	e7c9      	b.n	8008536 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fbb0 	bl	8008d10 <HAL_TIMEx_BreakCallback>
 80085b0:	e7c7      	b.n	8008542 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7ff ff59 	bl	8008472 <HAL_TIM_TriggerCallback>
 80085c0:	e7c5      	b.n	800854e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f06f 0220 	mvn.w	r2, #32
 80085c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 fb9f 	bl	8008d0e <HAL_TIMEx_CommutCallback>
}
 80085d0:	e7c3      	b.n	800855a <HAL_TIM_IRQHandler+0xe6>
	...

080085d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80085d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d6:	4a51      	ldr	r2, [pc, #324]	@ (800871c <TIM_Base_SetConfig+0x148>)
 80085d8:	4290      	cmp	r0, r2
 80085da:	d07f      	beq.n	80086dc <TIM_Base_SetConfig+0x108>
 80085dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80085e0:	d05b      	beq.n	800869a <TIM_Base_SetConfig+0xc6>
 80085e2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80085e6:	4290      	cmp	r0, r2
 80085e8:	d06e      	beq.n	80086c8 <TIM_Base_SetConfig+0xf4>
 80085ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085ee:	4290      	cmp	r0, r2
 80085f0:	d065      	beq.n	80086be <TIM_Base_SetConfig+0xea>
 80085f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085f6:	4290      	cmp	r0, r2
 80085f8:	d06b      	beq.n	80086d2 <TIM_Base_SetConfig+0xfe>
 80085fa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80085fe:	4290      	cmp	r0, r2
 8008600:	d020      	beq.n	8008644 <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008602:	4a47      	ldr	r2, [pc, #284]	@ (8008720 <TIM_Base_SetConfig+0x14c>)
 8008604:	4290      	cmp	r0, r2
 8008606:	d04c      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800860c:	4290      	cmp	r0, r2
 800860e:	d048      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008610:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008614:	4290      	cmp	r0, r2
 8008616:	d044      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008618:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800861c:	4290      	cmp	r0, r2
 800861e:	d040      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008620:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008624:	4290      	cmp	r0, r2
 8008626:	d03c      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008628:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800862c:	4290      	cmp	r0, r2
 800862e:	d038      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008634:	694a      	ldr	r2, [r1, #20]
 8008636:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008638:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800863a:	688b      	ldr	r3, [r1, #8]
 800863c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800863e:	680b      	ldr	r3, [r1, #0]
 8008640:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008642:	e05e      	b.n	8008702 <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008648:	684a      	ldr	r2, [r1, #4]
 800864a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800864c:	4a33      	ldr	r2, [pc, #204]	@ (800871c <TIM_Base_SetConfig+0x148>)
 800864e:	4290      	cmp	r0, r2
 8008650:	d048      	beq.n	80086e4 <TIM_Base_SetConfig+0x110>
 8008652:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008656:	d024      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008658:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800865c:	4290      	cmp	r0, r2
 800865e:	d020      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008660:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008664:	4290      	cmp	r0, r2
 8008666:	d01c      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
 8008668:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800866c:	4290      	cmp	r0, r2
 800866e:	d018      	beq.n	80086a2 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008674:	68ca      	ldr	r2, [r1, #12]
 8008676:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800867c:	694a      	ldr	r2, [r1, #20]
 800867e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008680:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008682:	688b      	ldr	r3, [r1, #8]
 8008684:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008686:	680b      	ldr	r3, [r1, #0]
 8008688:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868a:	4b24      	ldr	r3, [pc, #144]	@ (800871c <TIM_Base_SetConfig+0x148>)
 800868c:	4298      	cmp	r0, r3
 800868e:	d036      	beq.n	80086fe <TIM_Base_SetConfig+0x12a>
 8008690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008694:	4298      	cmp	r0, r3
 8008696:	d032      	beq.n	80086fe <TIM_Base_SetConfig+0x12a>
 8008698:	e033      	b.n	8008702 <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800869e:	684a      	ldr	r2, [r1, #4]
 80086a0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80086a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086a6:	68ca      	ldr	r2, [r1, #12]
 80086a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ae:	694a      	ldr	r2, [r1, #20]
 80086b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80086b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b4:	688b      	ldr	r3, [r1, #8]
 80086b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086bc:	e021      	b.n	8008702 <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80086c2:	684a      	ldr	r2, [r1, #4]
 80086c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c6:	e7ec      	b.n	80086a2 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80086cc:	684a      	ldr	r2, [r1, #4]
 80086ce:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d0:	e7e7      	b.n	80086a2 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80086d6:	684a      	ldr	r2, [r1, #4]
 80086d8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086da:	e7e2      	b.n	80086a2 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80086e0:	684a      	ldr	r2, [r1, #4]
 80086e2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80086e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086e8:	68ca      	ldr	r2, [r1, #12]
 80086ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086f0:	694a      	ldr	r2, [r1, #20]
 80086f2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80086f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086f6:	688b      	ldr	r3, [r1, #8]
 80086f8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086fa:	680b      	ldr	r3, [r1, #0]
 80086fc:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80086fe:	690b      	ldr	r3, [r1, #16]
 8008700:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008702:	2301      	movs	r3, #1
 8008704:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008706:	6903      	ldr	r3, [r0, #16]
 8008708:	f013 0f01 	tst.w	r3, #1
 800870c:	d004      	beq.n	8008718 <TIM_Base_SetConfig+0x144>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800870e:	6903      	ldr	r3, [r0, #16]
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	6103      	str	r3, [r0, #16]
}
 8008716:	4770      	bx	lr
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	40014000 	.word	0x40014000

08008724 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008724:	b340      	cbz	r0, 8008778 <HAL_TIM_Base_Init+0x54>
{
 8008726:	b510      	push	{r4, lr}
 8008728:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800872e:	b1f3      	cbz	r3, 800876e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008736:	4621      	mov	r1, r4
 8008738:	f851 0b04 	ldr.w	r0, [r1], #4
 800873c:	f7ff ff4a 	bl	80085d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008740:	2301      	movs	r3, #1
 8008742:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008746:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800874a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800874e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008752:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800875a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800875e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008762:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008766:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800876a:	2000      	movs	r0, #0
}
 800876c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800876e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008772:	f7fc fcdf 	bl	8005134 <HAL_TIM_Base_MspInit>
 8008776:	e7db      	b.n	8008730 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008778:	2001      	movs	r0, #1
}
 800877a:	4770      	bx	lr

0800877c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800877c:	b340      	cbz	r0, 80087d0 <HAL_TIM_PWM_Init+0x54>
{
 800877e:	b510      	push	{r4, lr}
 8008780:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008782:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008786:	b1f3      	cbz	r3, 80087c6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	2302      	movs	r3, #2
 800878a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800878e:	4621      	mov	r1, r4
 8008790:	f851 0b04 	ldr.w	r0, [r1], #4
 8008794:	f7ff ff1e 	bl	80085d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008798:	2301      	movs	r3, #1
 800879a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80087a2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80087a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80087aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80087ba:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80087be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80087c2:	2000      	movs	r0, #0
}
 80087c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80087c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80087ca:	f7ff fe4d 	bl	8008468 <HAL_TIM_PWM_MspInit>
 80087ce:	e7db      	b.n	8008788 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80087d0:	2001      	movs	r0, #1
}
 80087d2:	4770      	bx	lr

080087d4 <TIM_OC2_SetConfig>:
{
 80087d4:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80087d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d8:	6a02      	ldr	r2, [r0, #32]
 80087da:	f022 0210 	bic.w	r2, r2, #16
 80087de:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80087e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80087e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e8:	680d      	ldr	r5, [r1, #0]
 80087ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80087ee:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087f2:	688d      	ldr	r5, [r1, #8]
 80087f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087f8:	4d0e      	ldr	r5, [pc, #56]	@ (8008834 <TIM_OC2_SetConfig+0x60>)
 80087fa:	42a8      	cmp	r0, r5
 80087fc:	d003      	beq.n	8008806 <TIM_OC2_SetConfig+0x32>
 80087fe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008802:	42a8      	cmp	r0, r5
 8008804:	d10e      	bne.n	8008824 <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8008806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800880a:	68cd      	ldr	r5, [r1, #12]
 800880c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008814:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008818:	698d      	ldr	r5, [r1, #24]
 800881a:	694e      	ldr	r6, [r1, #20]
 800881c:	ea46 0c05 	orr.w	ip, r6, r5
 8008820:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8008824:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008826:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008828:	684a      	ldr	r2, [r1, #4]
 800882a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800882c:	6203      	str	r3, [r0, #32]
}
 800882e:	bc70      	pop	{r4, r5, r6}
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000

08008838 <HAL_TIM_PWM_ConfigChannel>:
{
 8008838:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800883a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d066      	beq.n	8008910 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8008842:	4604      	mov	r4, r0
 8008844:	460d      	mov	r5, r1
 8008846:	2301      	movs	r3, #1
 8008848:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800884c:	2a0c      	cmp	r2, #12
 800884e:	d85a      	bhi.n	8008906 <HAL_TIM_PWM_ConfigChannel+0xce>
 8008850:	e8df f002 	tbb	[pc, r2]
 8008854:	59595907 	.word	0x59595907
 8008858:	5959591b 	.word	0x5959591b
 800885c:	59595930 	.word	0x59595930
 8008860:	44          	.byte	0x44
 8008861:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	f7ff fd3c 	bl	80082e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008868:	6822      	ldr	r2, [r4, #0]
 800886a:	6993      	ldr	r3, [r2, #24]
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	6993      	ldr	r3, [r2, #24]
 8008876:	f023 0304 	bic.w	r3, r3, #4
 800887a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	6993      	ldr	r3, [r2, #24]
 8008880:	6929      	ldr	r1, [r5, #16]
 8008882:	430b      	orrs	r3, r1
 8008884:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2000      	movs	r0, #0
      break;
 8008888:	e03e      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	f7ff ffa2 	bl	80087d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	6993      	ldr	r3, [r2, #24]
 8008894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008898:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	6993      	ldr	r3, [r2, #24]
 800889e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	6993      	ldr	r3, [r2, #24]
 80088a8:	6929      	ldr	r1, [r5, #16]
 80088aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80088ae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80088b0:	2000      	movs	r0, #0
      break;
 80088b2:	e029      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088b4:	6800      	ldr	r0, [r0, #0]
 80088b6:	f7ff fd41 	bl	800833c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	69d3      	ldr	r3, [r2, #28]
 80088be:	f043 0308 	orr.w	r3, r3, #8
 80088c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088c4:	6822      	ldr	r2, [r4, #0]
 80088c6:	69d3      	ldr	r3, [r2, #28]
 80088c8:	f023 0304 	bic.w	r3, r3, #4
 80088cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	69d3      	ldr	r3, [r2, #28]
 80088d2:	6929      	ldr	r1, [r5, #16]
 80088d4:	430b      	orrs	r3, r1
 80088d6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2000      	movs	r0, #0
      break;
 80088da:	e015      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088dc:	6800      	ldr	r0, [r0, #0]
 80088de:	f7ff fd5d 	bl	800839c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	69d3      	ldr	r3, [r2, #28]
 80088e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80088ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	69d3      	ldr	r3, [r2, #28]
 80088f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	69d3      	ldr	r3, [r2, #28]
 80088fa:	6929      	ldr	r1, [r5, #16]
 80088fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008900:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2000      	movs	r0, #0
      break;
 8008904:	e000      	b.n	8008908 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8008906:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008908:	2300      	movs	r3, #0
 800890a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800890e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8008910:	2002      	movs	r0, #2
 8008912:	e7fc      	b.n	800890e <HAL_TIM_PWM_ConfigChannel+0xd6>

08008914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008914:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008916:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008918:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800891c:	430a      	orrs	r2, r1
 800891e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008922:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	6082      	str	r2, [r0, #8]
}
 8008928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_TIM_ConfigClockSource>:
{
 800892e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008930:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008934:	2b01      	cmp	r3, #1
 8008936:	f000 80ad 	beq.w	8008a94 <HAL_TIM_ConfigClockSource+0x166>
 800893a:	4604      	mov	r4, r0
 800893c:	2301      	movs	r3, #1
 800893e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008942:	2302      	movs	r3, #2
 8008944:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008948:	6802      	ldr	r2, [r0, #0]
 800894a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008950:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008954:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008956:	680b      	ldr	r3, [r1, #0]
 8008958:	2b60      	cmp	r3, #96	@ 0x60
 800895a:	d060      	beq.n	8008a1e <HAL_TIM_ConfigClockSource+0xf0>
 800895c:	d837      	bhi.n	80089ce <HAL_TIM_ConfigClockSource+0xa0>
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d079      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x128>
 8008962:	d815      	bhi.n	8008990 <HAL_TIM_ConfigClockSource+0x62>
 8008964:	2b20      	cmp	r3, #32
 8008966:	d007      	beq.n	8008978 <HAL_TIM_ConfigClockSource+0x4a>
 8008968:	d804      	bhi.n	8008974 <HAL_TIM_ConfigClockSource+0x46>
 800896a:	f033 0210 	bics.w	r2, r3, #16
 800896e:	d003      	beq.n	8008978 <HAL_TIM_ConfigClockSource+0x4a>
 8008970:	2001      	movs	r0, #1
 8008972:	e040      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
 8008974:	2b30      	cmp	r3, #48	@ 0x30
 8008976:	d109      	bne.n	800898c <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008978:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800897a:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800897c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008980:	4313      	orrs	r3, r2
 8008982:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008986:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008988:	2000      	movs	r0, #0
}
 800898a:	e034      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800898c:	2001      	movs	r0, #1
 800898e:	e032      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
 8008990:	2b50      	cmp	r3, #80	@ 0x50
 8008992:	d11a      	bne.n	80089ca <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008994:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008996:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008998:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800899a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800899c:	6a1a      	ldr	r2, [r3, #32]
 800899e:	f022 0201 	bic.w	r2, r2, #1
 80089a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089aa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80089b2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80089b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089b8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80089ba:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80089bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089c0:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80089c4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089c6:	2000      	movs	r0, #0
}
 80089c8:	e015      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80089ca:	2001      	movs	r0, #1
 80089cc:	e013      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d2:	d05b      	beq.n	8008a8c <HAL_TIM_ConfigClockSource+0x15e>
 80089d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d8:	d014      	beq.n	8008a04 <HAL_TIM_ConfigClockSource+0xd6>
 80089da:	2b70      	cmp	r3, #112	@ 0x70
 80089dc:	d158      	bne.n	8008a90 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 80089de:	68cb      	ldr	r3, [r1, #12]
 80089e0:	684a      	ldr	r2, [r1, #4]
 80089e2:	6889      	ldr	r1, [r1, #8]
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	f7ff ff95 	bl	8008914 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80089f2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80089fc:	2300      	movs	r3, #0
 80089fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8008a04:	68cb      	ldr	r3, [r1, #12]
 8008a06:	684a      	ldr	r2, [r1, #4]
 8008a08:	6889      	ldr	r1, [r1, #8]
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	f7ff ff82 	bl	8008914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	6893      	ldr	r3, [r2, #8]
 8008a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a18:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1a:	2000      	movs	r0, #0
      break;
 8008a1c:	e7eb      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a1e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a20:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008a22:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008a24:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a26:	6a19      	ldr	r1, [r3, #32]
 8008a28:	f021 0110 	bic.w	r1, r1, #16
 8008a2c:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a30:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a34:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a3c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008a40:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a42:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a44:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008a46:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a4c:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008a50:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a52:	2000      	movs	r0, #0
}
 8008a54:	e7cf      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a56:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a58:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008a5a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008a5c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	f022 0201 	bic.w	r2, r2, #1
 8008a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a66:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a68:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a6c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a70:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008a74:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a78:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a7a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008a7c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a82:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8008a86:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a88:	2000      	movs	r0, #0
}
 8008a8a:	e7b4      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e7b2      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8008a90:	2001      	movs	r0, #1
 8008a92:	e7b0      	b.n	80089f6 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 8008a94:	2002      	movs	r0, #2
 8008a96:	e7b4      	b.n	8008a02 <HAL_TIM_ConfigClockSource+0xd4>

08008a98 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a98:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a9c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a9e:	f04f 0c01 	mov.w	ip, #1
 8008aa2:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8008aa6:	ea23 030c 	bic.w	r3, r3, ip
 8008aaa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aac:	6a03      	ldr	r3, [r0, #32]
 8008aae:	408a      	lsls	r2, r1
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	6202      	str	r2, [r0, #32]
}
 8008ab4:	4770      	bx	lr
	...

08008ab8 <HAL_TIM_PWM_Start>:
{
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008abc:	4608      	mov	r0, r1
 8008abe:	bba1      	cbnz	r1, 8008b2a <HAL_TIM_PWM_Start+0x72>
 8008ac0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d167      	bne.n	8008b9a <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aca:	2302      	movs	r3, #2
 8008acc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	f7ff ffdf 	bl	8008a98 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	4a31      	ldr	r2, [pc, #196]	@ (8008ba4 <HAL_TIM_PWM_Start+0xec>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d048      	beq.n	8008b74 <HAL_TIM_PWM_Start+0xbc>
 8008ae2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d044      	beq.n	8008b74 <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aee:	d049      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008af0:	4a2d      	ldr	r2, [pc, #180]	@ (8008ba8 <HAL_TIM_PWM_Start+0xf0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d046      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008af6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d042      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008afe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d03e      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008b06:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d03a      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008b0e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d036      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
 8008b16:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d032      	beq.n	8008b84 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	f042 0201 	orr.w	r2, r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008b26:	2000      	movs	r0, #0
 8008b28:	e036      	b.n	8008b98 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b2a:	2904      	cmp	r1, #4
 8008b2c:	d00c      	beq.n	8008b48 <HAL_TIM_PWM_Start+0x90>
 8008b2e:	2908      	cmp	r1, #8
 8008b30:	bf0c      	ite	eq
 8008b32:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8008b36:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	bf18      	it	ne
 8008b40:	2301      	movne	r3, #1
 8008b42:	b143      	cbz	r3, 8008b56 <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8008b44:	2001      	movs	r0, #1
 8008b46:	e027      	b.n	8008b98 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b48:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	bf18      	it	ne
 8008b52:	2301      	movne	r3, #1
 8008b54:	e7f5      	b.n	8008b42 <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b56:	2804      	cmp	r0, #4
 8008b58:	d008      	beq.n	8008b6c <HAL_TIM_PWM_Start+0xb4>
 8008b5a:	2808      	cmp	r0, #8
 8008b5c:	f04f 0302 	mov.w	r3, #2
 8008b60:	bf0c      	ite	eq
 8008b62:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8008b66:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8008b6a:	e7b1      	b.n	8008ad0 <HAL_TIM_PWM_Start+0x18>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008b72:	e7ad      	b.n	8008ad0 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8008b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	4a09      	ldr	r2, [pc, #36]	@ (8008ba4 <HAL_TIM_PWM_Start+0xec>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d1b2      	bne.n	8008aea <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8a:	2a06      	cmp	r2, #6
 8008b8c:	d007      	beq.n	8008b9e <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008b96:	2000      	movs	r0, #0
}
 8008b98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	e7fc      	b.n	8008b98 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	e7fa      	b.n	8008b98 <HAL_TIM_PWM_Start+0xe0>
 8008ba2:	bf00      	nop
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40000400 	.word	0x40000400

08008bac <HAL_TIM_PWM_Stop>:
{
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	6800      	ldr	r0, [r0, #0]
 8008bb6:	f7ff ff6f 	bl	8008a98 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c30 <HAL_TIM_PWM_Stop+0x84>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d018      	beq.n	8008bf4 <HAL_TIM_PWM_Stop+0x48>
 8008bc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d014      	beq.n	8008bf4 <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	6a19      	ldr	r1, [r3, #32]
 8008bce:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008bd2:	4211      	tst	r1, r2
 8008bd4:	d108      	bne.n	8008be8 <HAL_TIM_PWM_Stop+0x3c>
 8008bd6:	6a19      	ldr	r1, [r3, #32]
 8008bd8:	f240 4244 	movw	r2, #1092	@ 0x444
 8008bdc:	4211      	tst	r1, r2
 8008bde:	d103      	bne.n	8008be8 <HAL_TIM_PWM_Stop+0x3c>
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008be8:	b99d      	cbnz	r5, 8008c12 <HAL_TIM_PWM_Stop+0x66>
 8008bea:	2301      	movs	r3, #1
 8008bec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8008bf4:	6a19      	ldr	r1, [r3, #32]
 8008bf6:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008bfa:	4211      	tst	r1, r2
 8008bfc:	d1e5      	bne.n	8008bca <HAL_TIM_PWM_Stop+0x1e>
 8008bfe:	6a19      	ldr	r1, [r3, #32]
 8008c00:	f240 4244 	movw	r2, #1092	@ 0x444
 8008c04:	4211      	tst	r1, r2
 8008c06:	d1e0      	bne.n	8008bca <HAL_TIM_PWM_Stop+0x1e>
 8008c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8008c10:	e7db      	b.n	8008bca <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c12:	2d04      	cmp	r5, #4
 8008c14:	d008      	beq.n	8008c28 <HAL_TIM_PWM_Stop+0x7c>
 8008c16:	2d08      	cmp	r5, #8
 8008c18:	f04f 0301 	mov.w	r3, #1
 8008c1c:	bf0c      	ite	eq
 8008c1e:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8008c22:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8008c26:	e7e3      	b.n	8008bf0 <HAL_TIM_PWM_Stop+0x44>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008c2e:	e7df      	b.n	8008bf0 <HAL_TIM_PWM_Stop+0x44>
 8008c30:	40010000 	.word	0x40010000

08008c34 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c34:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008c38:	2a01      	cmp	r2, #1
 8008c3a:	d03b      	beq.n	8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8008c3c:	b430      	push	{r4, r5}
 8008c3e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8008c40:	2201      	movs	r2, #1
 8008c42:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c46:	2202      	movs	r2, #2
 8008c48:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c4c:	6804      	ldr	r4, [r0, #0]
 8008c4e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c56:	680d      	ldr	r5, [r1, #0]
 8008c58:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c5a:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4c16      	ldr	r4, [pc, #88]	@ (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8008c60:	42a2      	cmp	r2, r4
 8008c62:	d01a      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c64:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008c68:	d017      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c6a:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8008c6e:	42a2      	cmp	r2, r4
 8008c70:	d013      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c72:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8008c76:	42a2      	cmp	r2, r4
 8008c78:	d00f      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c7a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8008c7e:	42a2      	cmp	r2, r4
 8008c80:	d00b      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c82:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8008c86:	42a2      	cmp	r2, r4
 8008c88:	d007      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c8a:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8008c8e:	42a2      	cmp	r2, r4
 8008c90:	d003      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8008c92:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8008c96:	42a2      	cmp	r2, r4
 8008c98:	d104      	bne.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c9a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c9e:	6849      	ldr	r1, [r1, #4]
 8008ca0:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ca2:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008caa:	2000      	movs	r0, #0
 8008cac:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8008cb0:	bc30      	pop	{r4, r5}
 8008cb2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008cb4:	2002      	movs	r0, #2
}
 8008cb6:	4770      	bx	lr
 8008cb8:	40010000 	.word	0x40010000

08008cbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cbc:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cbe:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d021      	beq.n	8008d0a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ccc:	68cb      	ldr	r3, [r1, #12]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd2:	6888      	ldr	r0, [r1, #8]
 8008cd4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cda:	6848      	ldr	r0, [r1, #4]
 8008cdc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ce2:	6808      	ldr	r0, [r1, #0]
 8008ce4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cea:	6908      	ldr	r0, [r1, #16]
 8008cec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cf2:	6948      	ldr	r0, [r1, #20]
 8008cf4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cfa:	69c9      	ldr	r1, [r1, #28]
 8008cfc:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cfe:	6811      	ldr	r1, [r2, #0]
 8008d00:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d02:	2000      	movs	r0, #0
 8008d04:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008d08:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008d0a:	2002      	movs	r0, #2
}
 8008d0c:	4770      	bx	lr

08008d0e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d10:	4770      	bx	lr

08008d12 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	f102 030c 	add.w	r3, r2, #12
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	320c      	adds	r2, #12
 8008d22:	e842 3100 	strex	r1, r3, [r2]
 8008d26:	2900      	cmp	r1, #0
 8008d28:	d1f3      	bne.n	8008d12 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	f102 0314 	add.w	r3, r2, #20
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	3214      	adds	r2, #20
 8008d3a:	e842 3100 	strex	r1, r3, [r2]
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d1f3      	bne.n	8008d2a <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d005      	beq.n	8008d54 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8008d52:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d54:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	f102 030c 	add.w	r3, r2, #12
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	320c      	adds	r2, #12
 8008d64:	e842 3100 	strex	r1, r3, [r2]
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d1f3      	bne.n	8008d54 <UART_EndRxTransfer+0x42>
 8008d6c:	e7ec      	b.n	8008d48 <UART_EndRxTransfer+0x36>
	...

08008d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d74:	6802      	ldr	r2, [r0, #0]
 8008d76:	6913      	ldr	r3, [r2, #16]
 8008d78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008d7c:	68c1      	ldr	r1, [r0, #12]
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8008d82:	6801      	ldr	r1, [r0, #0]
 8008d84:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d86:	6883      	ldr	r3, [r0, #8]
 8008d88:	6900      	ldr	r0, [r0, #16]
 8008d8a:	4303      	orrs	r3, r0
 8008d8c:	6960      	ldr	r0, [r4, #20]
 8008d8e:	4303      	orrs	r3, r0
 8008d90:	69e0      	ldr	r0, [r4, #28]
 8008d92:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8008d94:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8008d98:	f022 020c 	bic.w	r2, r2, #12
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	6953      	ldr	r3, [r2, #20]
 8008da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008da8:	69a1      	ldr	r1, [r4, #24]
 8008daa:	430b      	orrs	r3, r1
 8008dac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	4a2e      	ldr	r2, [pc, #184]	@ (8008e6c <UART_SetConfig+0xfc>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d006      	beq.n	8008dc4 <UART_SetConfig+0x54>
 8008db6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d002      	beq.n	8008dc4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dbe:	f7fe f93f 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 8008dc2:	e001      	b.n	8008dc8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dc4:	f7fe f94c 	bl	8007060 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc8:	69e3      	ldr	r3, [r4, #28]
 8008dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dce:	d024      	beq.n	8008e1a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	1803      	adds	r3, r0, r0
 8008dd4:	4149      	adcs	r1, r1
 8008dd6:	181b      	adds	r3, r3, r0
 8008dd8:	f141 0100 	adc.w	r1, r1, #0
 8008ddc:	00c9      	lsls	r1, r1, #3
 8008dde:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	1818      	adds	r0, r3, r0
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008dec:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8008df0:	f141 0100 	adc.w	r1, r1, #0
 8008df4:	f7f7 ff00 	bl	8000bf8 <__aeabi_uldivmod>
 8008df8:	6821      	ldr	r1, [r4, #0]
 8008dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <UART_SetConfig+0x100>)
 8008dfc:	fba2 4300 	umull	r4, r3, r2, r0
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	2464      	movs	r4, #100	@ 0x64
 8008e04:	fb04 0013 	mls	r0, r4, r3, r0
 8008e08:	0100      	lsls	r0, r0, #4
 8008e0a:	3032      	adds	r0, #50	@ 0x32
 8008e0c:	fba2 2000 	umull	r2, r0, r2, r0
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8008e16:	608b      	str	r3, [r1, #8]
  }
}
 8008e18:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	1802      	adds	r2, r0, r0
 8008e1e:	eb43 0103 	adc.w	r1, r3, r3
 8008e22:	1812      	adds	r2, r2, r0
 8008e24:	f141 0100 	adc.w	r1, r1, #0
 8008e28:	00c9      	lsls	r1, r1, #3
 8008e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e2e:	00d2      	lsls	r2, r2, #3
 8008e30:	1810      	adds	r0, r2, r0
 8008e32:	f141 0100 	adc.w	r1, r1, #0
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	1892      	adds	r2, r2, r2
 8008e3a:	415b      	adcs	r3, r3
 8008e3c:	f7f7 fedc 	bl	8000bf8 <__aeabi_uldivmod>
 8008e40:	4a0b      	ldr	r2, [pc, #44]	@ (8008e70 <UART_SetConfig+0x100>)
 8008e42:	fba2 3100 	umull	r3, r1, r2, r0
 8008e46:	0949      	lsrs	r1, r1, #5
 8008e48:	2364      	movs	r3, #100	@ 0x64
 8008e4a:	fb03 0311 	mls	r3, r3, r1, r0
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	3332      	adds	r3, #50	@ 0x32
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8008e5c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e66:	4413      	add	r3, r2
 8008e68:	6083      	str	r3, [r0, #8]
 8008e6a:	e7d5      	b.n	8008e18 <UART_SetConfig+0xa8>
 8008e6c:	40011000 	.word	0x40011000
 8008e70:	51eb851f 	.word	0x51eb851f

08008e74 <UART_WaitOnFlagUntilTimeout>:
{
 8008e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	4616      	mov	r6, r2
 8008e80:	4699      	mov	r9, r3
 8008e82:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e84:	f8d8 3000 	ldr.w	r3, [r8]
 8008e88:	681c      	ldr	r4, [r3, #0]
 8008e8a:	ea35 0404 	bics.w	r4, r5, r4
 8008e8e:	bf0c      	ite	eq
 8008e90:	2401      	moveq	r4, #1
 8008e92:	2400      	movne	r4, #0
 8008e94:	42b4      	cmp	r4, r6
 8008e96:	d128      	bne.n	8008eea <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8008e98:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008e9c:	d0f4      	beq.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7fc fb1b 	bl	80054d8 <HAL_GetTick>
 8008ea2:	eba0 0009 	sub.w	r0, r0, r9
 8008ea6:	42b8      	cmp	r0, r7
 8008ea8:	d823      	bhi.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
 8008eaa:	b327      	cbz	r7, 8008ef6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eac:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	f012 0f04 	tst.w	r2, #4
 8008eb6:	d0e5      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x10>
 8008eb8:	2d80      	cmp	r5, #128	@ 0x80
 8008eba:	d0e3      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x10>
 8008ebc:	2d40      	cmp	r5, #64	@ 0x40
 8008ebe:	d0e1      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	f012 0f08 	tst.w	r2, #8
 8008ec6:	d0dd      	beq.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ec8:	2400      	movs	r4, #0
 8008eca:	9401      	str	r4, [sp, #4]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	9201      	str	r2, [sp, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7ff ff1b 	bl	8008d12 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008edc:	2308      	movs	r3, #8
 8008ede:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8008ee2:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	e000      	b.n	8008eec <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8008eea:	2000      	movs	r0, #0
}
 8008eec:	b003      	add	sp, #12
 8008eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8008ef2:	2003      	movs	r0, #3
 8008ef4:	e7fa      	b.n	8008eec <UART_WaitOnFlagUntilTimeout+0x78>
 8008ef6:	2003      	movs	r0, #3
 8008ef8:	e7f8      	b.n	8008eec <UART_WaitOnFlagUntilTimeout+0x78>

08008efa <HAL_UART_Init>:
  if (huart == NULL)
 8008efa:	b360      	cbz	r0, 8008f56 <HAL_UART_Init+0x5c>
{
 8008efc:	b510      	push	{r4, lr}
 8008efe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008f00:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008f04:	b313      	cbz	r3, 8008f4c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8008f06:	2324      	movs	r3, #36	@ 0x24
 8008f08:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	68d3      	ldr	r3, [r2, #12]
 8008f10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f14:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7ff ff2a 	bl	8008d70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f1c:	6822      	ldr	r2, [r4, #0]
 8008f1e:	6913      	ldr	r3, [r2, #16]
 8008f20:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8008f24:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	6953      	ldr	r3, [r2, #20]
 8008f2a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8008f2e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	68d3      	ldr	r3, [r2, #12]
 8008f34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008f38:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f3e:	2320      	movs	r3, #32
 8008f40:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f48:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8008f4a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008f4c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8008f50:	f7fc f95a 	bl	8005208 <HAL_UART_MspInit>
 8008f54:	e7d7      	b.n	8008f06 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8008f56:	2001      	movs	r0, #1
}
 8008f58:	4770      	bx	lr

08008f5a <HAL_UART_Transmit>:
{
 8008f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008f62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d15c      	bne.n	8009026 <HAL_UART_Transmit+0xcc>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008f72:	2900      	cmp	r1, #0
 8008f74:	d05b      	beq.n	800902e <HAL_UART_Transmit+0xd4>
 8008f76:	b90a      	cbnz	r2, 8008f7c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8008f78:	2001      	movs	r0, #1
 8008f7a:	e055      	b.n	8009028 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f80:	2321      	movs	r3, #33	@ 0x21
 8008f82:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8008f86:	f7fc faa7 	bl	80054d8 <HAL_GetTick>
 8008f8a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008f8c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008f90:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f94:	68a3      	ldr	r3, [r4, #8]
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f9a:	d009      	beq.n	8008fb0 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8008f9c:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8008fa0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	b373      	cbz	r3, 8009004 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fa6:	f04f 0900 	mov.w	r9, #0
 8008faa:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8008fae:	e019      	b.n	8008fe4 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	b113      	cbz	r3, 8008fba <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8008fb4:	f04f 0a00 	mov.w	sl, #0
 8008fb8:	e7f2      	b.n	8008fa0 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8008fba:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8008fbc:	2500      	movs	r5, #0
 8008fbe:	e7ef      	b.n	8008fa0 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8008fc6:	2003      	movs	r0, #3
 8008fc8:	e02e      	b.n	8009028 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8008fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8008fd6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8008fd8:	3a01      	subs	r2, #1
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008fde:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	b17b      	cbz	r3, 8009004 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fe4:	9600      	str	r6, [sp, #0]
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	464a      	mov	r2, r9
 8008fea:	4641      	mov	r1, r8
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff ff41 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1e4      	bne.n	8008fc0 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	d0e7      	beq.n	8008fca <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009000:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009002:	e7e8      	b.n	8008fd6 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009004:	9600      	str	r6, [sp, #0]
 8009006:	463b      	mov	r3, r7
 8009008:	2200      	movs	r2, #0
 800900a:	2140      	movs	r1, #64	@ 0x40
 800900c:	4620      	mov	r0, r4
 800900e:	f7ff ff31 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8009012:	b918      	cbnz	r0, 800901c <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8009014:	2320      	movs	r3, #32
 8009016:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800901a:	e005      	b.n	8009028 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 800901c:	2320      	movs	r3, #32
 800901e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8009022:	2003      	movs	r0, #3
 8009024:	e000      	b.n	8009028 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 8009026:	2002      	movs	r0, #2
}
 8009028:	b002      	add	sp, #8
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800902e:	2001      	movs	r0, #1
 8009030:	e7fa      	b.n	8009028 <HAL_UART_Transmit+0xce>

08009032 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009032:	b084      	sub	sp, #16
 8009034:	f10d 0c04 	add.w	ip, sp, #4
 8009038:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800903c:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800903e:	460b      	mov	r3, r1
 8009040:	9902      	ldr	r1, [sp, #8]
 8009042:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8009044:	9903      	ldr	r1, [sp, #12]
 8009046:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8009048:	9904      	ldr	r1, [sp, #16]
 800904a:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800904c:	9905      	ldr	r1, [sp, #20]
 800904e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8009050:	9906      	ldr	r1, [sp, #24]
 8009052:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009054:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8009058:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800905c:	4313      	orrs	r3, r2
 800905e:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8009060:	2000      	movs	r0, #0
 8009062:	b004      	add	sp, #16
 8009064:	4770      	bx	lr

08009066 <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009066:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800906a:	4770      	bx	lr

0800906c <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800906c:	680b      	ldr	r3, [r1, #0]
 800906e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8009072:	2000      	movs	r0, #0
 8009074:	4770      	bx	lr

08009076 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009076:	2303      	movs	r3, #3
 8009078:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 800907a:	2000      	movs	r0, #0
 800907c:	4770      	bx	lr

0800907e <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800907e:	6800      	ldr	r0, [r0, #0]
}
 8009080:	f000 0003 	and.w	r0, r0, #3
 8009084:	4770      	bx	lr

08009086 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009086:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009088:	680b      	ldr	r3, [r1, #0]
 800908a:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800908c:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800908e:	684b      	ldr	r3, [r1, #4]
 8009090:	688c      	ldr	r4, [r1, #8]
 8009092:	4323      	orrs	r3, r4
                       Command->Response         |\
 8009094:	68cc      	ldr	r4, [r1, #12]
 8009096:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8009098:	6909      	ldr	r1, [r1, #16]
 800909a:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800909c:	f36f 020b 	bfc	r2, #0, #12
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 80090a4:	2000      	movs	r0, #0
 80090a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80090ac:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80090ae:	5840      	ldr	r0, [r0, r1]
}  
 80090b0:	4770      	bx	lr

080090b2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80090b2:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80090b4:	680b      	ldr	r3, [r1, #0]
 80090b6:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80090b8:	684b      	ldr	r3, [r1, #4]
 80090ba:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80090bc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090be:	688b      	ldr	r3, [r1, #8]
 80090c0:	68cc      	ldr	r4, [r1, #12]
 80090c2:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80090c4:	690c      	ldr	r4, [r1, #16]
 80090c6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80090c8:	6949      	ldr	r1, [r1, #20]
 80090ca:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80090cc:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 80090d0:	4313      	orrs	r3, r2
 80090d2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 80090d4:	2000      	movs	r0, #0
 80090d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090da:	4770      	bx	lr

080090dc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80090dc:	b510      	push	{r4, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80090e6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80090e8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090f0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f2:	a901      	add	r1, sp, #4
 80090f4:	f7ff ffc7 	bl	8009086 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009128 <SDMMC_CmdGoIdleState+0x4c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a0b      	ldr	r2, [pc, #44]	@ (800912c <SDMMC_CmdGoIdleState+0x50>)
 80090fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009102:	0a5b      	lsrs	r3, r3, #9
 8009104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009108:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800910c:	b143      	cbz	r3, 8009120 <SDMMC_CmdGoIdleState+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800910e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009110:	3b01      	subs	r3, #1
 8009112:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009116:	d0f9      	beq.n	800910c <SDMMC_CmdGoIdleState+0x30>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009118:	23c5      	movs	r3, #197	@ 0xc5
 800911a:	63a3      	str	r3, [r4, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800911c:	2000      	movs	r0, #0
 800911e:	e001      	b.n	8009124 <SDMMC_CmdGoIdleState+0x48>
      return SDMMC_ERROR_TIMEOUT;
 8009120:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009124:	b006      	add	sp, #24
 8009126:	bd10      	pop	{r4, pc}
 8009128:	20000008 	.word	0x20000008
 800912c:	10624dd3 	.word	0x10624dd3

08009130 <SDMMC_GetCmdResp1>:
{
 8009130:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009132:	4b54      	ldr	r3, [pc, #336]	@ (8009284 <SDMMC_GetCmdResp1+0x154>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4854      	ldr	r0, [pc, #336]	@ (8009288 <SDMMC_GetCmdResp1+0x158>)
 8009138:	fba0 0303 	umull	r0, r3, r0, r3
 800913c:	0a5b      	lsrs	r3, r3, #9
 800913e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 8009142:	1e53      	subs	r3, r2, #1
 8009144:	b932      	cbnz	r2, 8009154 <SDMMC_GetCmdResp1+0x24>
      return SDMMC_ERROR_TIMEOUT;
 8009146:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800914a:	4770      	bx	lr
    if (count-- == 0U)
 800914c:	3b01      	subs	r3, #1
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d063      	beq.n	800921c <SDMMC_GetCmdResp1+0xec>
    sta_reg = SDIOx->STA;
 8009154:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009158:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800915c:	d0f6      	beq.n	800914c <SDMMC_GetCmdResp1+0x1c>
 800915e:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8009162:	d1f3      	bne.n	800914c <SDMMC_GetCmdResp1+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009164:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009168:	f013 0f04 	tst.w	r3, #4
 800916c:	d108      	bne.n	8009180 <SDMMC_GetCmdResp1+0x50>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800916e:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8009172:	f010 0001 	ands.w	r0, r0, #1
 8009176:	d007      	beq.n	8009188 <SDMMC_GetCmdResp1+0x58>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009178:	2301      	movs	r3, #1
 800917a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800917e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009180:	2004      	movs	r0, #4
 8009182:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009186:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009188:	23c5      	movs	r3, #197	@ 0xc5
 800918a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800918e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4299      	cmp	r1, r3
 8009196:	d001      	beq.n	800919c <SDMMC_GetCmdResp1+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009198:	2001      	movs	r0, #1
 800919a:	4770      	bx	lr
  return (*(__IO uint32_t *) tmp);
 800919c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091a0:	483a      	ldr	r0, [pc, #232]	@ (800928c <SDMMC_GetCmdResp1+0x15c>)
 80091a2:	4018      	ands	r0, r3
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d06c      	beq.n	8009282 <SDMMC_GetCmdResp1+0x152>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db3a      	blt.n	8009222 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091b0:	d13a      	bne.n	8009228 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091b2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80091b6:	d139      	bne.n	800922c <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091b8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80091bc:	d138      	bne.n	8009230 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091be:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80091c2:	d138      	bne.n	8009236 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80091c4:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80091c8:	d138      	bne.n	800923c <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091ca:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80091ce:	d138      	bne.n	8009242 <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091d0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80091d4:	d138      	bne.n	8009248 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091d6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80091da:	d138      	bne.n	800924e <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091dc:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80091e0:	d138      	bne.n	8009254 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091e2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80091e6:	d138      	bne.n	800925a <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091e8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80091ec:	d138      	bne.n	8009260 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091ee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80091f2:	d138      	bne.n	8009266 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80091f4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80091f8:	d138      	bne.n	800926c <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80091fa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80091fe:	d138      	bne.n	8009272 <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009200:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8009204:	d138      	bne.n	8009278 <SDMMC_GetCmdResp1+0x148>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009206:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800920a:	d138      	bne.n	800927e <SDMMC_GetCmdResp1+0x14e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800920c:	f013 0f08 	tst.w	r3, #8
 8009210:	bf0c      	ite	eq
 8009212:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009216:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800921a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800921c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009220:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009222:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009226:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009228:	2040      	movs	r0, #64	@ 0x40
 800922a:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800922c:	2080      	movs	r0, #128	@ 0x80
 800922e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009230:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009234:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009236:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800923a:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800923c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009240:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009242:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009246:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009248:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800924c:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800924e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009252:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009254:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009258:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800925a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800925e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009260:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009264:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009266:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800926a:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800926c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009270:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009272:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009276:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009278:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800927c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800927e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009282:	4770      	bx	lr
 8009284:	20000008 	.word	0x20000008
 8009288:	10624dd3 	.word	0x10624dd3
 800928c:	fdffe008 	.word	0xfdffe008

08009290 <SDMMC_CmdBlockLength>:
{
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	b087      	sub	sp, #28
 8009294:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009296:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009298:	2510      	movs	r5, #16
 800929a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800929c:	2340      	movs	r3, #64	@ 0x40
 800929e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092a0:	2300      	movs	r3, #0
 80092a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092aa:	a901      	add	r1, sp, #4
 80092ac:	f7ff feeb 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80092b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b4:	4629      	mov	r1, r5
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7ff ff3a 	bl	8009130 <SDMMC_GetCmdResp1>
}
 80092bc:	b007      	add	sp, #28
 80092be:	bd30      	pop	{r4, r5, pc}

080092c0 <SDMMC_CmdReadSingleBlock>:
{
 80092c0:	b530      	push	{r4, r5, lr}
 80092c2:	b087      	sub	sp, #28
 80092c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80092c8:	2511      	movs	r5, #17
 80092ca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092cc:	2340      	movs	r3, #64	@ 0x40
 80092ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092d0:	2300      	movs	r3, #0
 80092d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092da:	a901      	add	r1, sp, #4
 80092dc:	f7ff fed3 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80092e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092e4:	4629      	mov	r1, r5
 80092e6:	4620      	mov	r0, r4
 80092e8:	f7ff ff22 	bl	8009130 <SDMMC_GetCmdResp1>
}
 80092ec:	b007      	add	sp, #28
 80092ee:	bd30      	pop	{r4, r5, pc}

080092f0 <SDMMC_CmdReadMultiBlock>:
{
 80092f0:	b530      	push	{r4, r5, lr}
 80092f2:	b087      	sub	sp, #28
 80092f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80092f8:	2512      	movs	r5, #18
 80092fa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092fc:	2340      	movs	r3, #64	@ 0x40
 80092fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009300:	2300      	movs	r3, #0
 8009302:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009308:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800930a:	a901      	add	r1, sp, #4
 800930c:	f7ff febb 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ff0a 	bl	8009130 <SDMMC_GetCmdResp1>
}
 800931c:	b007      	add	sp, #28
 800931e:	bd30      	pop	{r4, r5, pc}

08009320 <SDMMC_CmdWriteSingleBlock>:
{
 8009320:	b530      	push	{r4, r5, lr}
 8009322:	b087      	sub	sp, #28
 8009324:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009326:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009328:	2518      	movs	r5, #24
 800932a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800932c:	2340      	movs	r3, #64	@ 0x40
 800932e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009330:	2300      	movs	r3, #0
 8009332:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009338:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800933a:	a901      	add	r1, sp, #4
 800933c:	f7ff fea3 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009344:	4629      	mov	r1, r5
 8009346:	4620      	mov	r0, r4
 8009348:	f7ff fef2 	bl	8009130 <SDMMC_GetCmdResp1>
}
 800934c:	b007      	add	sp, #28
 800934e:	bd30      	pop	{r4, r5, pc}

08009350 <SDMMC_CmdWriteMultiBlock>:
{
 8009350:	b530      	push	{r4, r5, lr}
 8009352:	b087      	sub	sp, #28
 8009354:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009356:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009358:	2519      	movs	r5, #25
 800935a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800935c:	2340      	movs	r3, #64	@ 0x40
 800935e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009360:	2300      	movs	r3, #0
 8009362:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009368:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800936a:	a901      	add	r1, sp, #4
 800936c:	f7ff fe8b 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009374:	4629      	mov	r1, r5
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff feda 	bl	8009130 <SDMMC_GetCmdResp1>
}
 800937c:	b007      	add	sp, #28
 800937e:	bd30      	pop	{r4, r5, pc}

08009380 <SDMMC_CmdStopTransfer>:
{
 8009380:	b530      	push	{r4, r5, lr}
 8009382:	b087      	sub	sp, #28
 8009384:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800938a:	250c      	movs	r5, #12
 800938c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800938e:	2240      	movs	r2, #64	@ 0x40
 8009390:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009392:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009398:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800939a:	a901      	add	r1, sp, #4
 800939c:	f7ff fe73 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80093a0:	4a03      	ldr	r2, [pc, #12]	@ (80093b0 <SDMMC_CmdStopTransfer+0x30>)
 80093a2:	4629      	mov	r1, r5
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff fec3 	bl	8009130 <SDMMC_GetCmdResp1>
}
 80093aa:	b007      	add	sp, #28
 80093ac:	bd30      	pop	{r4, r5, pc}
 80093ae:	bf00      	nop
 80093b0:	05f5e100 	.word	0x05f5e100

080093b4 <SDMMC_CmdSelDesel>:
{
 80093b4:	b530      	push	{r4, r5, lr}
 80093b6:	b087      	sub	sp, #28
 80093b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093ba:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093bc:	2507      	movs	r5, #7
 80093be:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093c0:	2340      	movs	r3, #64	@ 0x40
 80093c2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c4:	2300      	movs	r3, #0
 80093c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093cc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093ce:	a901      	add	r1, sp, #4
 80093d0:	f7ff fe59 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80093d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fea8 	bl	8009130 <SDMMC_GetCmdResp1>
}
 80093e0:	b007      	add	sp, #28
 80093e2:	bd30      	pop	{r4, r5, pc}

080093e4 <SDMMC_CmdAppCommand>:
{
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	b087      	sub	sp, #28
 80093e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80093ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80093ec:	2537      	movs	r5, #55	@ 0x37
 80093ee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093f0:	2340      	movs	r3, #64	@ 0x40
 80093f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093f4:	2300      	movs	r3, #0
 80093f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093fc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093fe:	a901      	add	r1, sp, #4
 8009400:	f7ff fe41 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009408:	4629      	mov	r1, r5
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff fe90 	bl	8009130 <SDMMC_GetCmdResp1>
}
 8009410:	b007      	add	sp, #28
 8009412:	bd30      	pop	{r4, r5, pc}

08009414 <SDMMC_CmdBusWidth>:
{
 8009414:	b530      	push	{r4, r5, lr}
 8009416:	b087      	sub	sp, #28
 8009418:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800941a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800941c:	2506      	movs	r5, #6
 800941e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009424:	2300      	movs	r3, #0
 8009426:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800942c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800942e:	a901      	add	r1, sp, #4
 8009430:	f7ff fe29 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009438:	4629      	mov	r1, r5
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff fe78 	bl	8009130 <SDMMC_GetCmdResp1>
}
 8009440:	b007      	add	sp, #28
 8009442:	bd30      	pop	{r4, r5, pc}

08009444 <SDMMC_CmdSendSCR>:
{
 8009444:	b530      	push	{r4, r5, lr}
 8009446:	b087      	sub	sp, #28
 8009448:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800944e:	2533      	movs	r5, #51	@ 0x33
 8009450:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009452:	2240      	movs	r2, #64	@ 0x40
 8009454:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009456:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800945c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800945e:	a901      	add	r1, sp, #4
 8009460:	f7ff fe11 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009468:	4629      	mov	r1, r5
 800946a:	4620      	mov	r0, r4
 800946c:	f7ff fe60 	bl	8009130 <SDMMC_GetCmdResp1>
}
 8009470:	b007      	add	sp, #28
 8009472:	bd30      	pop	{r4, r5, pc}

08009474 <SDMMC_CmdSendStatus>:
{
 8009474:	b530      	push	{r4, r5, lr}
 8009476:	b087      	sub	sp, #28
 8009478:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800947a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800947c:	250d      	movs	r5, #13
 800947e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009480:	2340      	movs	r3, #64	@ 0x40
 8009482:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009484:	2300      	movs	r3, #0
 8009486:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800948c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800948e:	a901      	add	r1, sp, #4
 8009490:	f7ff fdf9 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009498:	4629      	mov	r1, r5
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fe48 	bl	8009130 <SDMMC_GetCmdResp1>
}
 80094a0:	b007      	add	sp, #28
 80094a2:	bd30      	pop	{r4, r5, pc}

080094a4 <SDMMC_GetCmdResp2>:
{
 80094a4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094a6:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <SDMMC_GetCmdResp2+0x54>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a14      	ldr	r2, [pc, #80]	@ (80094fc <SDMMC_GetCmdResp2+0x58>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	0a5b      	lsrs	r3, r3, #9
 80094b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80094ba:	b923      	cbnz	r3, 80094c6 <SDMMC_GetCmdResp2+0x22>
      return SDMMC_ERROR_TIMEOUT;
 80094bc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80094c0:	4770      	bx	lr
    if (count-- == 0U)
 80094c2:	3b01      	subs	r3, #1
 80094c4:	d015      	beq.n	80094f2 <SDMMC_GetCmdResp2+0x4e>
    sta_reg = SDIOx->STA;
 80094c6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094c8:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80094cc:	d0f9      	beq.n	80094c2 <SDMMC_GetCmdResp2+0x1e>
 80094ce:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80094d2:	d1f6      	bne.n	80094c2 <SDMMC_GetCmdResp2+0x1e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094d4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80094d6:	f013 0f04 	tst.w	r3, #4
 80094da:	d107      	bne.n	80094ec <SDMMC_GetCmdResp2+0x48>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094dc:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80094de:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094e2:	bf14      	ite	ne
 80094e4:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094e6:	23c5      	moveq	r3, #197	@ 0xc5
 80094e8:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80094ea:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094ec:	2004      	movs	r0, #4
 80094ee:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094f0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80094f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80094f6:	4770      	bx	lr
 80094f8:	20000008 	.word	0x20000008
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <SDMMC_CmdSendCID>:
{
 8009500:	b510      	push	{r4, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800950a:	2202      	movs	r2, #2
 800950c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800950e:	22c0      	movs	r2, #192	@ 0xc0
 8009510:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009512:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009518:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800951a:	a901      	add	r1, sp, #4
 800951c:	f7ff fdb3 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009520:	4620      	mov	r0, r4
 8009522:	f7ff ffbf 	bl	80094a4 <SDMMC_GetCmdResp2>
}
 8009526:	b006      	add	sp, #24
 8009528:	bd10      	pop	{r4, pc}

0800952a <SDMMC_CmdSendCSD>:
{
 800952a:	b510      	push	{r4, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009530:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009532:	2309      	movs	r3, #9
 8009534:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009536:	23c0      	movs	r3, #192	@ 0xc0
 8009538:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800953a:	2300      	movs	r3, #0
 800953c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800953e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009542:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009544:	a901      	add	r1, sp, #4
 8009546:	f7ff fd9e 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800954a:	4620      	mov	r0, r4
 800954c:	f7ff ffaa 	bl	80094a4 <SDMMC_GetCmdResp2>
}
 8009550:	b006      	add	sp, #24
 8009552:	bd10      	pop	{r4, pc}

08009554 <SDMMC_GetCmdResp3>:
{
 8009554:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009556:	4b11      	ldr	r3, [pc, #68]	@ (800959c <SDMMC_GetCmdResp3+0x48>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a11      	ldr	r2, [pc, #68]	@ (80095a0 <SDMMC_GetCmdResp3+0x4c>)
 800955c:	fba2 2303 	umull	r2, r3, r2, r3
 8009560:	0a5b      	lsrs	r3, r3, #9
 8009562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009566:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800956a:	b923      	cbnz	r3, 8009576 <SDMMC_GetCmdResp3+0x22>
      return SDMMC_ERROR_TIMEOUT;
 800956c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009570:	4770      	bx	lr
    if (count-- == 0U)
 8009572:	3b01      	subs	r3, #1
 8009574:	d00f      	beq.n	8009596 <SDMMC_GetCmdResp3+0x42>
    sta_reg = SDIOx->STA;
 8009576:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009578:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800957c:	d0f9      	beq.n	8009572 <SDMMC_GetCmdResp3+0x1e>
 800957e:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8009582:	d1f6      	bne.n	8009572 <SDMMC_GetCmdResp3+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009584:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009586:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800958a:	bf19      	ittee	ne
 800958c:	2004      	movne	r0, #4
 800958e:	6388      	strne	r0, [r1, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009590:	23c5      	moveq	r3, #197	@ 0xc5
 8009592:	638b      	streq	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8009594:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009596:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800959a:	4770      	bx	lr
 800959c:	20000008 	.word	0x20000008
 80095a0:	10624dd3 	.word	0x10624dd3

080095a4 <SDMMC_CmdAppOperCommand>:
{
 80095a4:	b510      	push	{r4, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80095aa:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80095ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80095b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80095b4:	2329      	movs	r3, #41	@ 0x29
 80095b6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095b8:	2340      	movs	r3, #64	@ 0x40
 80095ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095bc:	2300      	movs	r3, #0
 80095be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095c4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095c6:	a901      	add	r1, sp, #4
 80095c8:	f7ff fd5d 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7ff ffc1 	bl	8009554 <SDMMC_GetCmdResp3>
}
 80095d2:	b006      	add	sp, #24
 80095d4:	bd10      	pop	{r4, pc}
	...

080095d8 <SDMMC_GetCmdResp6>:
{
 80095d8:	4684      	mov	ip, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095da:	4b28      	ldr	r3, [pc, #160]	@ (800967c <SDMMC_GetCmdResp6+0xa4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4828      	ldr	r0, [pc, #160]	@ (8009680 <SDMMC_GetCmdResp6+0xa8>)
 80095e0:	fba0 0303 	umull	r0, r3, r0, r3
 80095e4:	0a5b      	lsrs	r3, r3, #9
 80095e6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80095ea:	fb00 f303 	mul.w	r3, r0, r3
    if (count-- == 0U)
 80095ee:	b3d3      	cbz	r3, 8009666 <SDMMC_GetCmdResp6+0x8e>
{
 80095f0:	b410      	push	{r4}
 80095f2:	e001      	b.n	80095f8 <SDMMC_GetCmdResp6+0x20>
    if (count-- == 0U)
 80095f4:	3b01      	subs	r3, #1
 80095f6:	d039      	beq.n	800966c <SDMMC_GetCmdResp6+0x94>
    sta_reg = SDIOx->STA;
 80095f8:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095fc:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8009600:	d0f8      	beq.n	80095f4 <SDMMC_GetCmdResp6+0x1c>
 8009602:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8009606:	d1f5      	bne.n	80095f4 <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009608:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800960c:	f013 0f04 	tst.w	r3, #4
 8009610:	d108      	bne.n	8009624 <SDMMC_GetCmdResp6+0x4c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009612:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8009616:	f010 0001 	ands.w	r0, r0, #1
 800961a:	d007      	beq.n	800962c <SDMMC_GetCmdResp6+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800961c:	2301      	movs	r3, #1
 800961e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009622:	e025      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009624:	2004      	movs	r0, #4
 8009626:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800962a:	e021      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
  return (uint8_t)(SDIOx->RESPCMD);
 800962c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4299      	cmp	r1, r3
 8009634:	d001      	beq.n	800963a <SDMMC_GetCmdResp6+0x62>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009636:	2001      	movs	r0, #1
 8009638:	e01a      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800963a:	23c5      	movs	r3, #197	@ 0xc5
 800963c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8009640:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009644:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8009648:	d00a      	beq.n	8009660 <SDMMC_GetCmdResp6+0x88>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800964a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800964e:	d112      	bne.n	8009676 <SDMMC_GetCmdResp6+0x9e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009650:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009654:	bf0c      	ite	eq
 8009656:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800965a:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800965e:	e007      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8009664:	e004      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
      return SDMMC_ERROR_TIMEOUT;
 8009666:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800966a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800966c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009674:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009676:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800967a:	e7f9      	b.n	8009670 <SDMMC_GetCmdResp6+0x98>
 800967c:	20000008 	.word	0x20000008
 8009680:	10624dd3 	.word	0x10624dd3

08009684 <SDMMC_CmdSetRelAdd>:
{
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009690:	2603      	movs	r6, #3
 8009692:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009694:	2240      	movs	r2, #64	@ 0x40
 8009696:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009698:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800969a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800969e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096a0:	a901      	add	r1, sp, #4
 80096a2:	f7ff fcf0 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80096a6:	462a      	mov	r2, r5
 80096a8:	4631      	mov	r1, r6
 80096aa:	4620      	mov	r0, r4
 80096ac:	f7ff ff94 	bl	80095d8 <SDMMC_GetCmdResp6>
}
 80096b0:	b006      	add	sp, #24
 80096b2:	bd70      	pop	{r4, r5, r6, pc}

080096b4 <SDMMC_GetCmdResp7>:
{
 80096b4:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096b6:	4b18      	ldr	r3, [pc, #96]	@ (8009718 <SDMMC_GetCmdResp7+0x64>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a18      	ldr	r2, [pc, #96]	@ (800971c <SDMMC_GetCmdResp7+0x68>)
 80096bc:	fba2 2303 	umull	r2, r3, r2, r3
 80096c0:	0a5b      	lsrs	r3, r3, #9
 80096c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096c6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 80096ca:	b923      	cbnz	r3, 80096d6 <SDMMC_GetCmdResp7+0x22>
      return SDMMC_ERROR_TIMEOUT;
 80096cc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80096d0:	4770      	bx	lr
    if (count-- == 0U)
 80096d2:	3b01      	subs	r3, #1
 80096d4:	d01b      	beq.n	800970e <SDMMC_GetCmdResp7+0x5a>
    sta_reg = SDIOx->STA;
 80096d6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096d8:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80096dc:	d0f9      	beq.n	80096d2 <SDMMC_GetCmdResp7+0x1e>
 80096de:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80096e2:	d1f6      	bne.n	80096d2 <SDMMC_GetCmdResp7+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096e4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80096e6:	f013 0f04 	tst.w	r3, #4
 80096ea:	d10a      	bne.n	8009702 <SDMMC_GetCmdResp7+0x4e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096ec:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80096ee:	f010 0001 	ands.w	r0, r0, #1
 80096f2:	d109      	bne.n	8009708 <SDMMC_GetCmdResp7+0x54>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80096f4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80096f6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80096fa:	d00b      	beq.n	8009714 <SDMMC_GetCmdResp7+0x60>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096fc:	2340      	movs	r3, #64	@ 0x40
 80096fe:	638b      	str	r3, [r1, #56]	@ 0x38
 8009700:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009702:	2004      	movs	r0, #4
 8009704:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009706:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009708:	2301      	movs	r3, #1
 800970a:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800970c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800970e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009712:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8009714:	4618      	mov	r0, r3
}
 8009716:	4770      	bx	lr
 8009718:	20000008 	.word	0x20000008
 800971c:	10624dd3 	.word	0x10624dd3

08009720 <SDMMC_CmdOperCond>:
{
 8009720:	b510      	push	{r4, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009726:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800972a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800972c:	2308      	movs	r3, #8
 800972e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009730:	2340      	movs	r3, #64	@ 0x40
 8009732:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009734:	2300      	movs	r3, #0
 8009736:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800973c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800973e:	a901      	add	r1, sp, #4
 8009740:	f7ff fca1 	bl	8009086 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009744:	4620      	mov	r0, r4
 8009746:	f7ff ffb5 	bl	80096b4 <SDMMC_GetCmdResp7>
}
 800974a:	b006      	add	sp, #24
 800974c:	bd10      	pop	{r4, pc}

0800974e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800974e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	3301      	adds	r3, #1
 8009758:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800975a:	9b01      	ldr	r3, [sp, #4]
 800975c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009760:	d815      	bhi.n	800978e <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009762:	6903      	ldr	r3, [r0, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	daf5      	bge.n	8009754 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800976c:	6903      	ldr	r3, [r0, #16]
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8009774:	9b01      	ldr	r3, [sp, #4]
 8009776:	3301      	adds	r3, #1
 8009778:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800977a:	9b01      	ldr	r3, [sp, #4]
 800977c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009780:	d808      	bhi.n	8009794 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009782:	6903      	ldr	r3, [r0, #16]
 8009784:	f013 0f01 	tst.w	r3, #1
 8009788:	d1f4      	bne.n	8009774 <USB_CoreReset+0x26>

  return HAL_OK;
 800978a:	2000      	movs	r0, #0
 800978c:	e000      	b.n	8009790 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 800978e:	2003      	movs	r0, #3
}
 8009790:	b002      	add	sp, #8
 8009792:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009794:	2003      	movs	r0, #3
 8009796:	e7fb      	b.n	8009790 <USB_CoreReset+0x42>

08009798 <USB_CoreInit>:
{
 8009798:	b084      	sub	sp, #16
 800979a:	b510      	push	{r4, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	a803      	add	r0, sp, #12
 80097a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d121      	bne.n	80097f0 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80097ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097b4:	68e3      	ldr	r3, [r4, #12]
 80097b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80097ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097be:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80097c0:	68e3      	ldr	r3, [r4, #12]
 80097c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80097c6:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80097c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d00a      	beq.n	80097e6 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7ff ffbc 	bl	800974e <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80097d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d01c      	beq.n	8009818 <USB_CoreInit+0x80>
}
 80097de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e2:	b004      	add	sp, #16
 80097e4:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097e6:	68e3      	ldr	r3, [r4, #12]
 80097e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097ec:	60e3      	str	r3, [r4, #12]
 80097ee:	e7ef      	b.n	80097d0 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097f0:	68e3      	ldr	r3, [r4, #12]
 80097f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f6:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff ffa8 	bl	800974e <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80097fe:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009802:	b923      	cbnz	r3, 800980e <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009804:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800980a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800980c:	e7e3      	b.n	80097d6 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800980e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009814:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009816:	e7de      	b.n	80097d6 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	f043 0306 	orr.w	r3, r3, #6
 800981e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	f043 0320 	orr.w	r3, r3, #32
 8009826:	60a3      	str	r3, [r4, #8]
 8009828:	e7d9      	b.n	80097de <USB_CoreInit+0x46>
	...

0800982c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800982c:	2a02      	cmp	r2, #2
 800982e:	d00a      	beq.n	8009846 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009830:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009832:	68c3      	ldr	r3, [r0, #12]
 8009834:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009838:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800983a:	68c3      	ldr	r3, [r0, #12]
 800983c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009840:	60c3      	str	r3, [r0, #12]
}
 8009842:	2000      	movs	r0, #0
 8009844:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009846:	4b23      	ldr	r3, [pc, #140]	@ (80098d4 <USB_SetTurnaroundTime+0xa8>)
 8009848:	440b      	add	r3, r1
 800984a:	4a23      	ldr	r2, [pc, #140]	@ (80098d8 <USB_SetTurnaroundTime+0xac>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d930      	bls.n	80098b2 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009850:	4b22      	ldr	r3, [pc, #136]	@ (80098dc <USB_SetTurnaroundTime+0xb0>)
 8009852:	440b      	add	r3, r1
 8009854:	4a22      	ldr	r2, [pc, #136]	@ (80098e0 <USB_SetTurnaroundTime+0xb4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d92d      	bls.n	80098b6 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800985a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 800985e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8009862:	4a20      	ldr	r2, [pc, #128]	@ (80098e4 <USB_SetTurnaroundTime+0xb8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d928      	bls.n	80098ba <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009868:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 800986c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8009870:	4a1d      	ldr	r2, [pc, #116]	@ (80098e8 <USB_SetTurnaroundTime+0xbc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d323      	bcc.n	80098be <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009876:	4b1d      	ldr	r3, [pc, #116]	@ (80098ec <USB_SetTurnaroundTime+0xc0>)
 8009878:	440b      	add	r3, r1
 800987a:	4a1d      	ldr	r2, [pc, #116]	@ (80098f0 <USB_SetTurnaroundTime+0xc4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d920      	bls.n	80098c2 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009880:	4b1c      	ldr	r3, [pc, #112]	@ (80098f4 <USB_SetTurnaroundTime+0xc8>)
 8009882:	440b      	add	r3, r1
 8009884:	4a1c      	ldr	r2, [pc, #112]	@ (80098f8 <USB_SetTurnaroundTime+0xcc>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d31d      	bcc.n	80098c6 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800988a:	4b1c      	ldr	r3, [pc, #112]	@ (80098fc <USB_SetTurnaroundTime+0xd0>)
 800988c:	440b      	add	r3, r1
 800988e:	4a1c      	ldr	r2, [pc, #112]	@ (8009900 <USB_SetTurnaroundTime+0xd4>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d31a      	bcc.n	80098ca <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009894:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8009898:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 800989c:	4a19      	ldr	r2, [pc, #100]	@ (8009904 <USB_SetTurnaroundTime+0xd8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d315      	bcc.n	80098ce <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098a2:	4a19      	ldr	r2, [pc, #100]	@ (8009908 <USB_SetTurnaroundTime+0xdc>)
 80098a4:	440a      	add	r2, r1
      UsbTrd = 0x7U;
 80098a6:	4b19      	ldr	r3, [pc, #100]	@ (800990c <USB_SetTurnaroundTime+0xe0>)
 80098a8:	429a      	cmp	r2, r3
 80098aa:	bf2c      	ite	cs
 80098ac:	2206      	movcs	r2, #6
 80098ae:	2207      	movcc	r2, #7
 80098b0:	e7bf      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80098b2:	220f      	movs	r2, #15
 80098b4:	e7bd      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80098b6:	220e      	movs	r2, #14
 80098b8:	e7bb      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80098ba:	220d      	movs	r2, #13
 80098bc:	e7b9      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80098be:	220c      	movs	r2, #12
 80098c0:	e7b7      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80098c2:	220b      	movs	r2, #11
 80098c4:	e7b5      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80098c6:	220a      	movs	r2, #10
 80098c8:	e7b3      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80098ca:	2209      	movs	r2, #9
 80098cc:	e7b1      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80098ce:	2208      	movs	r2, #8
 80098d0:	e7af      	b.n	8009832 <USB_SetTurnaroundTime+0x6>
 80098d2:	bf00      	nop
 80098d4:	ff275340 	.word	0xff275340
 80098d8:	000c34ff 	.word	0x000c34ff
 80098dc:	ff1b1e40 	.word	0xff1b1e40
 80098e0:	000f423f 	.word	0x000f423f
 80098e4:	00124f7f 	.word	0x00124f7f
 80098e8:	0013d620 	.word	0x0013d620
 80098ec:	fee5b660 	.word	0xfee5b660
 80098f0:	0016e35f 	.word	0x0016e35f
 80098f4:	feced300 	.word	0xfeced300
 80098f8:	001b7740 	.word	0x001b7740
 80098fc:	feb35bc0 	.word	0xfeb35bc0
 8009900:	002191c0 	.word	0x002191c0
 8009904:	00387520 	.word	0x00387520
 8009908:	fe5954e0 	.word	0xfe5954e0
 800990c:	00419ce0 	.word	0x00419ce0

08009910 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009910:	6883      	ldr	r3, [r0, #8]
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	6083      	str	r3, [r0, #8]
}
 8009918:	2000      	movs	r0, #0
 800991a:	4770      	bx	lr

0800991c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800991c:	6883      	ldr	r3, [r0, #8]
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	6083      	str	r3, [r0, #8]
}
 8009924:	2000      	movs	r0, #0
 8009926:	4770      	bx	lr

08009928 <USB_SetCurrentMode>:
{
 8009928:	b570      	push	{r4, r5, r6, lr}
 800992a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800992c:	68c3      	ldr	r3, [r0, #12]
 800992e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009932:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009934:	2901      	cmp	r1, #1
 8009936:	d015      	beq.n	8009964 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8009938:	bb29      	cbnz	r1, 8009986 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800993a:	68c3      	ldr	r3, [r0, #12]
 800993c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009940:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8009942:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8009944:	260a      	movs	r6, #10
 8009946:	4630      	mov	r0, r6
 8009948:	f7fb fdcc 	bl	80054e4 <HAL_Delay>
      ms += 10U;
 800994c:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 800994e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009950:	f013 0f01 	tst.w	r3, #1
 8009954:	d001      	beq.n	800995a <USB_SetCurrentMode+0x32>
 8009956:	2cc8      	cmp	r4, #200	@ 0xc8
 8009958:	d1f5      	bne.n	8009946 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800995a:	2cc8      	cmp	r4, #200	@ 0xc8
 800995c:	bf14      	ite	ne
 800995e:	2000      	movne	r0, #0
 8009960:	2001      	moveq	r0, #1
}
 8009962:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009964:	68c3      	ldr	r3, [r0, #12]
 8009966:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800996a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800996c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800996e:	260a      	movs	r6, #10
 8009970:	4630      	mov	r0, r6
 8009972:	f7fb fdb7 	bl	80054e4 <HAL_Delay>
      ms += 10U;
 8009976:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 8009978:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800997a:	f013 0f01 	tst.w	r3, #1
 800997e:	d1ec      	bne.n	800995a <USB_SetCurrentMode+0x32>
 8009980:	2cc8      	cmp	r4, #200	@ 0xc8
 8009982:	d1f5      	bne.n	8009970 <USB_SetCurrentMode+0x48>
 8009984:	e7e9      	b.n	800995a <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8009986:	2001      	movs	r0, #1
 8009988:	e7eb      	b.n	8009962 <USB_SetCurrentMode+0x3a>

0800998a <USB_FlushTxFifo>:
{
 800998a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	9301      	str	r3, [sp, #4]
    count++;
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800999c:	d815      	bhi.n	80099ca <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800999e:	6903      	ldr	r3, [r0, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	daf5      	bge.n	8009990 <USB_FlushTxFifo+0x6>
  count = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099a8:	0189      	lsls	r1, r1, #6
 80099aa:	f041 0120 	orr.w	r1, r1, #32
 80099ae:	6101      	str	r1, [r0, #16]
    count++;
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	3301      	adds	r3, #1
 80099b4:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099bc:	d808      	bhi.n	80099d0 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099be:	6903      	ldr	r3, [r0, #16]
 80099c0:	f013 0f20 	tst.w	r3, #32
 80099c4:	d1f4      	bne.n	80099b0 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80099c6:	2000      	movs	r0, #0
 80099c8:	e000      	b.n	80099cc <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80099ca:	2003      	movs	r0, #3
}
 80099cc:	b002      	add	sp, #8
 80099ce:	4770      	bx	lr
      return HAL_TIMEOUT;
 80099d0:	2003      	movs	r0, #3
 80099d2:	e7fb      	b.n	80099cc <USB_FlushTxFifo+0x42>

080099d4 <USB_FlushRxFifo>:
{
 80099d4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	9301      	str	r3, [sp, #4]
    count++;
 80099da:	9b01      	ldr	r3, [sp, #4]
 80099dc:	3301      	adds	r3, #1
 80099de:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099e6:	d813      	bhi.n	8009a10 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099e8:	6903      	ldr	r3, [r0, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	daf5      	bge.n	80099da <USB_FlushRxFifo+0x6>
  count = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099f2:	2310      	movs	r3, #16
 80099f4:	6103      	str	r3, [r0, #16]
    count++;
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	3301      	adds	r3, #1
 80099fa:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a02:	d808      	bhi.n	8009a16 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a04:	6903      	ldr	r3, [r0, #16]
 8009a06:	f013 0f10 	tst.w	r3, #16
 8009a0a:	d1f4      	bne.n	80099f6 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	e000      	b.n	8009a12 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8009a10:	2003      	movs	r0, #3
}
 8009a12:	b002      	add	sp, #8
 8009a14:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009a16:	2003      	movs	r0, #3
 8009a18:	e7fb      	b.n	8009a12 <USB_FlushRxFifo+0x3e>

08009a1a <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009a1a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8009a1e:	4319      	orrs	r1, r3
 8009a20:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8009a24:	2000      	movs	r0, #0
 8009a26:	4770      	bx	lr

08009a28 <USB_DevInit>:
{
 8009a28:	b084      	sub	sp, #16
 8009a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	a809      	add	r0, sp, #36	@ 0x24
 8009a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8009a36:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 8009a3a:	f89d 602e 	ldrb.w	r6, [sp, #46]	@ 0x2e
  for (i = 0U; i < 15U; i++)
 8009a3e:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8009a40:	4619      	mov	r1, r3
 8009a42:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8009a46:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a4a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	2b0f      	cmp	r3, #15
 8009a50:	d1f7      	bne.n	8009a42 <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 8009a52:	bb06      	cbnz	r6, 8009a96 <USB_DevInit+0x6e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a54:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8009a58:	f043 0302 	orr.w	r3, r3, #2
 8009a5c:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a66:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a6a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009a6e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a76:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a7e:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d115      	bne.n	8009ab2 <USB_DevInit+0x8a>
    if (cfg.speed == USBD_HS_SPEED)
 8009a86:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009a8a:	b96b      	cbnz	r3, 8009aa8 <USB_DevInit+0x80>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff ffc3 	bl	8009a1a <USB_SetDevSpeed>
 8009a94:	e011      	b.n	8009aba <USB_DevInit+0x92>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009a96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a9c:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009a9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009aa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009aa4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009aa6:	e7e7      	b.n	8009a78 <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff ffb5 	bl	8009a1a <USB_SetDevSpeed>
 8009ab0:	e003      	b.n	8009aba <USB_DevInit+0x92>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ab2:	2103      	movs	r1, #3
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f7ff ffb0 	bl	8009a1a <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009aba:	2110      	movs	r1, #16
 8009abc:	4620      	mov	r0, r4
 8009abe:	f7ff ff64 	bl	800998a <USB_FlushTxFifo>
 8009ac2:	4607      	mov	r7, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f7ff ff85 	bl	80099d4 <USB_FlushRxFifo>
 8009aca:	4307      	orrs	r7, r0
 8009acc:	f017 0fff 	tst.w	r7, #255	@ 0xff
 8009ad0:	bf14      	ite	ne
 8009ad2:	f04f 0e01 	movne.w	lr, #1
 8009ad6:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8009ada:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ae4:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ae8:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	d03b      	beq.n	8009b68 <USB_DevInit+0x140>
 8009af0:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 8009af4:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8009af6:	4610      	mov	r0, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009af8:	f04f 4a90 	mov.w	sl, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009afc:	f04f 6900 	mov.w	r9, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b00:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8009b04:	e009      	b.n	8009b1a <USB_DevInit+0xf2>
      if (i == 0U)
 8009b06:	b972      	cbnz	r2, 8009b26 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b08:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b0c:	6108      	str	r0, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b0e:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b12:	3201      	adds	r2, #1
 8009b14:	3320      	adds	r3, #32
 8009b16:	42aa      	cmp	r2, r5
 8009b18:	d008      	beq.n	8009b2c <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	681f      	ldr	r7, [r3, #0]
 8009b1e:	2f00      	cmp	r7, #0
 8009b20:	dbf1      	blt.n	8009b06 <USB_DevInit+0xde>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b22:	6018      	str	r0, [r3, #0]
 8009b24:	e7f2      	b.n	8009b0c <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b26:	f8c3 a000 	str.w	sl, [r3]
 8009b2a:	e7ef      	b.n	8009b0c <USB_DevInit+0xe4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b2c:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 8009b30:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b32:	4610      	mov	r0, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b34:	f04f 4990 	mov.w	r9, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b38:	f04f 6a00 	mov.w	sl, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b3c:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8009b40:	e009      	b.n	8009b56 <USB_DevInit+0x12e>
      if (i == 0U)
 8009b42:	b172      	cbz	r2, 8009b62 <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b44:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b48:	6108      	str	r0, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b4a:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b4e:	3201      	adds	r2, #1
 8009b50:	3320      	adds	r3, #32
 8009b52:	42aa      	cmp	r2, r5
 8009b54:	d008      	beq.n	8009b68 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b56:	4619      	mov	r1, r3
 8009b58:	681f      	ldr	r7, [r3, #0]
 8009b5a:	2f00      	cmp	r7, #0
 8009b5c:	dbf1      	blt.n	8009b42 <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b5e:	6018      	str	r0, [r3, #0]
 8009b60:	e7f2      	b.n	8009b48 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b62:	f8c3 a000 	str.w	sl, [r3]
 8009b66:	e7ef      	b.n	8009b48 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b68:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8009b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b70:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b78:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8009b7c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8009b7e:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8009b82:	b91b      	cbnz	r3, 8009b8c <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b84:	69a3      	ldr	r3, [r4, #24]
 8009b86:	f043 0310 	orr.w	r3, r3, #16
 8009b8a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b8c:	69a2      	ldr	r2, [r4, #24]
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <USB_DevInit+0x198>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8009b94:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8009b98:	b11b      	cbz	r3, 8009ba2 <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b9a:	69a3      	ldr	r3, [r4, #24]
 8009b9c:	f043 0308 	orr.w	r3, r3, #8
 8009ba0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8009ba2:	2e01      	cmp	r6, #1
 8009ba4:	d004      	beq.n	8009bb0 <USB_DevInit+0x188>
}
 8009ba6:	4670      	mov	r0, lr
 8009ba8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	b004      	add	sp, #16
 8009bae:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bb0:	69a3      	ldr	r3, [r4, #24]
 8009bb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bb6:	f043 0304 	orr.w	r3, r3, #4
 8009bba:	61a3      	str	r3, [r4, #24]
 8009bbc:	e7f3      	b.n	8009ba6 <USB_DevInit+0x17e>
 8009bbe:	bf00      	nop
 8009bc0:	803c3800 	.word	0x803c3800

08009bc4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bc4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8009bc8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009bcc:	f013 0f02 	tst.w	r3, #2
 8009bd0:	d105      	bne.n	8009bde <USB_GetDevSpeed+0x1a>
    speed = 0xFU;
 8009bd2:	f013 0f06 	tst.w	r3, #6
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2000      	moveq	r0, #0
 8009bda:	200f      	movne	r0, #15
 8009bdc:	4770      	bx	lr
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bde:	2002      	movs	r0, #2
}
 8009be0:	4770      	bx	lr

08009be2 <USB_ActivateEndpoint>:
{
 8009be2:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8009be4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8009be6:	784b      	ldrb	r3, [r1, #1]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d022      	beq.n	8009c32 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bec:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
 8009bf0:	f002 0e0f 	and.w	lr, r2, #15
 8009bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009bf8:	fa03 f30e 	lsl.w	r3, r3, lr
 8009bfc:	4323      	orrs	r3, r4
 8009bfe:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c02:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009c06:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8009c0a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009c0e:	d10e      	bne.n	8009c2e <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c10:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8009c14:	688b      	ldr	r3, [r1, #8]
 8009c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c1a:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8009c1c:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c1e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c2a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8009c2e:	2000      	movs	r0, #0
 8009c30:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c32:	f8d0 581c 	ldr.w	r5, [r0, #2076]	@ 0x81c
 8009c36:	f002 0c0f 	and.w	ip, r2, #15
 8009c3a:	fa03 f30c 	lsl.w	r3, r3, ip
 8009c3e:	432b      	orrs	r3, r5
 8009c40:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c44:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009c48:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8009c4c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009c50:	d1ed      	bne.n	8009c2e <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c52:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
 8009c56:	688b      	ldr	r3, [r1, #8]
 8009c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c5c:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c5e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c60:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8009c64:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8009c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c70:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8009c74:	e7db      	b.n	8009c2e <USB_ActivateEndpoint+0x4c>
	...

08009c78 <USB_DeactivateEndpoint>:
{
 8009c78:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8009c7a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009c7c:	784a      	ldrb	r2, [r1, #1]
 8009c7e:	2a01      	cmp	r2, #1
 8009c80:	d026      	beq.n	8009cd0 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c82:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8009c86:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	db50      	blt.n	8009d30 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c8e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8009c92:	780a      	ldrb	r2, [r1, #0]
 8009c94:	f002 020f 	and.w	r2, r2, #15
 8009c98:	f04f 0c01 	mov.w	ip, #1
 8009c9c:	fa0c f202 	lsl.w	r2, ip, r2
 8009ca0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8009ca4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ca8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8009cac:	7809      	ldrb	r1, [r1, #0]
 8009cae:	f001 010f 	and.w	r1, r1, #15
 8009cb2:	fa0c fc01 	lsl.w	ip, ip, r1
 8009cb6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8009cba:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009cbe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8009cc2:	4a22      	ldr	r2, [pc, #136]	@ (8009d4c <USB_DeactivateEndpoint+0xd4>)
 8009cc4:	400a      	ands	r2, r1
 8009cc6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8009cca:	2000      	movs	r0, #0
 8009ccc:	bc30      	pop	{r4, r5}
 8009cce:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cd0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8009cd4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	db1c      	blt.n	8009d16 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cdc:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8009ce0:	780a      	ldrb	r2, [r1, #0]
 8009ce2:	f002 020f 	and.w	r2, r2, #15
 8009ce6:	2401      	movs	r4, #1
 8009ce8:	fa04 f202 	lsl.w	r2, r4, r2
 8009cec:	ea25 0202 	bic.w	r2, r5, r2
 8009cf0:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cf4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8009cf8:	7809      	ldrb	r1, [r1, #0]
 8009cfa:	f001 010f 	and.w	r1, r1, #15
 8009cfe:	408c      	lsls	r4, r1
 8009d00:	ea22 0204 	bic.w	r2, r2, r4
 8009d04:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d08:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8009d0c:	4a10      	ldr	r2, [pc, #64]	@ (8009d50 <USB_DeactivateEndpoint+0xd8>)
 8009d0e:	400a      	ands	r2, r1
 8009d10:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8009d14:	e7d9      	b.n	8009cca <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d16:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8009d1a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009d1e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d22:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8009d26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009d2a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8009d2e:	e7d5      	b.n	8009cdc <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d30:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8009d34:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009d38:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d3c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8009d40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009d44:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8009d48:	e7a1      	b.n	8009c8e <USB_DeactivateEndpoint+0x16>
 8009d4a:	bf00      	nop
 8009d4c:	eff37800 	.word	0xeff37800
 8009d50:	ec337800 	.word	0xec337800

08009d54 <USB_EPStopXfer>:
{
 8009d54:	b410      	push	{r4}
 8009d56:	b083      	sub	sp, #12
 8009d58:	4603      	mov	r3, r0
  __IO uint32_t count = 0U;
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	9201      	str	r2, [sp, #4]
  if (ep->is_in == 1U)
 8009d5e:	7848      	ldrb	r0, [r1, #1]
 8009d60:	2801      	cmp	r0, #1
 8009d62:	d00b      	beq.n	8009d7c <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d64:	f503 6030 	add.w	r0, r3, #2816	@ 0xb00
 8009d68:	780b      	ldrb	r3, [r1, #0]
 8009d6a:	015b      	lsls	r3, r3, #5
 8009d6c:	581a      	ldr	r2, [r3, r0]
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	db26      	blt.n	8009dc0 <USB_EPStopXfer+0x6c>
  HAL_StatusTypeDef ret = HAL_OK;
 8009d72:	2000      	movs	r0, #0
}
 8009d74:	b003      	add	sp, #12
 8009d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d7a:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d80:	780a      	ldrb	r2, [r1, #0]
 8009d82:	0152      	lsls	r2, r2, #5
 8009d84:	58d4      	ldr	r4, [r2, r3]
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	db01      	blt.n	8009d8e <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e7f2      	b.n	8009d74 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d8e:	58d4      	ldr	r4, [r2, r3]
 8009d90:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8009d94:	50d4      	str	r4, [r2, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d96:	780a      	ldrb	r2, [r1, #0]
 8009d98:	0152      	lsls	r2, r2, #5
 8009d9a:	58d4      	ldr	r4, [r2, r3]
 8009d9c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8009da0:	50d4      	str	r4, [r2, r3]
        if (count > 10000U)
 8009da2:	f242 7c10 	movw	ip, #10000	@ 0x2710
        count++;
 8009da6:	9a01      	ldr	r2, [sp, #4]
 8009da8:	3201      	adds	r2, #1
 8009daa:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 8009dac:	9a01      	ldr	r2, [sp, #4]
 8009dae:	4562      	cmp	r2, ip
 8009db0:	d8e0      	bhi.n	8009d74 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009db2:	780a      	ldrb	r2, [r1, #0]
 8009db4:	0152      	lsls	r2, r2, #5
 8009db6:	58d2      	ldr	r2, [r2, r3]
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	dbf4      	blt.n	8009da6 <USB_EPStopXfer+0x52>
  HAL_StatusTypeDef ret = HAL_OK;
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e7d9      	b.n	8009d74 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009dc0:	581a      	ldr	r2, [r3, r0]
 8009dc2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8009dc6:	501a      	str	r2, [r3, r0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009dc8:	780b      	ldrb	r3, [r1, #0]
 8009dca:	015b      	lsls	r3, r3, #5
 8009dcc:	581a      	ldr	r2, [r3, r0]
 8009dce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8009dd2:	501a      	str	r2, [r3, r0]
        if (count > 10000U)
 8009dd4:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d806      	bhi.n	8009df2 <USB_EPStopXfer+0x9e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009de4:	780b      	ldrb	r3, [r1, #0]
 8009de6:	015b      	lsls	r3, r3, #5
 8009de8:	581b      	ldr	r3, [r3, r0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dbf4      	blt.n	8009dd8 <USB_EPStopXfer+0x84>
  HAL_StatusTypeDef ret = HAL_OK;
 8009dee:	2000      	movs	r0, #0
 8009df0:	e7c0      	b.n	8009d74 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7be      	b.n	8009d74 <USB_EPStopXfer+0x20>

08009df6 <USB_WritePacket>:
{
 8009df6:	b410      	push	{r4}
 8009df8:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8009dfc:	b974      	cbnz	r4, 8009e1c <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 8009dfe:	3303      	adds	r3, #3
 8009e00:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d909      	bls.n	8009e1c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e08:	3201      	adds	r2, #1
 8009e0a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 8009e0e:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e10:	f851 2b04 	ldr.w	r2, [r1], #4
 8009e14:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8009e16:	3301      	adds	r3, #1
 8009e18:	459c      	cmp	ip, r3
 8009e1a:	d8f9      	bhi.n	8009e10 <USB_WritePacket+0x1a>
}
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_EPStartXfer>:
{
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e26:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8009e28:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8009e2a:	784b      	ldrb	r3, [r1, #1]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d02d      	beq.n	8009e8c <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e30:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8009e34:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8009e38:	691d      	ldr	r5, [r3, #16]
 8009e3a:	f36f 0512 	bfc	r5, #0, #19
 8009e3e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e40:	691d      	ldr	r5, [r3, #16]
 8009e42:	f36f 45dc 	bfc	r5, #19, #10
 8009e46:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8009e48:	2c00      	cmp	r4, #0
 8009e4a:	f040 80c0 	bne.w	8009fce <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len > 0U)
 8009e4e:	690c      	ldr	r4, [r1, #16]
 8009e50:	b10c      	cbz	r4, 8009e56 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8009e52:	688c      	ldr	r4, [r1, #8]
 8009e54:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8009e56:	688c      	ldr	r4, [r1, #8]
 8009e58:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e5a:	691d      	ldr	r5, [r3, #16]
 8009e5c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8009e60:	432c      	orrs	r4, r5
 8009e62:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e64:	691c      	ldr	r4, [r3, #16]
 8009e66:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8009e6a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8009e6c:	2a01      	cmp	r2, #1
 8009e6e:	f000 80d1 	beq.w	800a014 <USB_EPStartXfer+0x1f0>
    if (ep->type == EP_TYPE_ISOC)
 8009e72:	790b      	ldrb	r3, [r1, #4]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	f000 80d3 	beq.w	800a020 <USB_EPStartXfer+0x1fc>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e7a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8009e7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e82:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8009e86:	2000      	movs	r0, #0
 8009e88:	b003      	add	sp, #12
 8009e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8009e8c:	690b      	ldr	r3, [r1, #16]
 8009e8e:	bb73      	cbnz	r3, 8009eee <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e90:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8009e94:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8009e98:	f36f 45dc 	bfc	r5, #19, #10
 8009e9c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ea0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8009ea4:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8009ea8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eac:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8009eb0:	f36f 0512 	bfc	r5, #0, #19
 8009eb4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8009eb8:	2a01      	cmp	r2, #1
 8009eba:	d052      	beq.n	8009f62 <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ebc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8009ec0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8009ec4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ec8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8009ecc:	790b      	ldrb	r3, [r1, #4]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d069      	beq.n	8009fa6 <USB_EPStartXfer+0x182>
        if (ep->xfer_len > 0U)
 8009ed2:	690b      	ldr	r3, [r1, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0d6      	beq.n	8009e86 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ed8:	f8d0 4834 	ldr.w	r4, [r0, #2100]	@ 0x834
 8009edc:	780a      	ldrb	r2, [r1, #0]
 8009ede:	f002 020f 	and.w	r2, r2, #15
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4093      	lsls	r3, r2
 8009ee6:	4323      	orrs	r3, r4
 8009ee8:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8009eec:	e7cb      	b.n	8009e86 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eee:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef6:	691d      	ldr	r5, [r3, #16]
 8009ef8:	f36f 0512 	bfc	r5, #0, #19
 8009efc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009efe:	691d      	ldr	r5, [r3, #16]
 8009f00:	f36f 45dc 	bfc	r5, #19, #10
 8009f04:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8009f06:	b97c      	cbnz	r4, 8009f28 <USB_EPStartXfer+0x104>
        if (ep->xfer_len > ep->maxpacket)
 8009f08:	688d      	ldr	r5, [r1, #8]
 8009f0a:	690e      	ldr	r6, [r1, #16]
 8009f0c:	42ae      	cmp	r6, r5
          ep->xfer_len = ep->maxpacket;
 8009f0e:	bf88      	it	hi
 8009f10:	610d      	strhi	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f12:	691d      	ldr	r5, [r3, #16]
 8009f14:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8009f18:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f1a:	691e      	ldr	r6, [r3, #16]
 8009f1c:	690d      	ldr	r5, [r1, #16]
 8009f1e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8009f22:	4335      	orrs	r5, r6
 8009f24:	611d      	str	r5, [r3, #16]
 8009f26:	e7c7      	b.n	8009eb8 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f28:	688e      	ldr	r6, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009f2a:	691f      	ldr	r7, [r3, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f2c:	690d      	ldr	r5, [r1, #16]
 8009f2e:	4435      	add	r5, r6
 8009f30:	3d01      	subs	r5, #1
 8009f32:	fbb5 f5f6 	udiv	r5, r5, r6
 8009f36:	fa1f fc85 	uxth.w	ip, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009f3a:	4e40      	ldr	r6, [pc, #256]	@ (800a03c <USB_EPStartXfer+0x218>)
 8009f3c:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8009f40:	433d      	orrs	r5, r7
 8009f42:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8009f44:	790d      	ldrb	r5, [r1, #4]
 8009f46:	2d01      	cmp	r5, #1
 8009f48:	d1e7      	bne.n	8009f1a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f4a:	691d      	ldr	r5, [r3, #16]
 8009f4c:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8009f50:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009f52:	691e      	ldr	r6, [r3, #16]
 8009f54:	ea4f 754c 	mov.w	r5, ip, lsl #29
 8009f58:	f005 45c0 	and.w	r5, r5, #1610612736	@ 0x60000000
 8009f5c:	4335      	orrs	r5, r6
 8009f5e:	611d      	str	r5, [r3, #16]
 8009f60:	e7db      	b.n	8009f1a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8009f62:	69cb      	ldr	r3, [r1, #28]
 8009f64:	b11b      	cbz	r3, 8009f6e <USB_EPStartXfer+0x14a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f66:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8009f6a:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8009f6e:	790b      	ldrb	r3, [r1, #4]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d008      	beq.n	8009f86 <USB_EPStartXfer+0x162>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f74:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8009f78:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8009f7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f80:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8009f84:	e77f      	b.n	8009e86 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f86:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8009f8a:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f8e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8009f92:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8009f96:	bf0c      	ite	eq
 8009f98:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f9c:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8009fa0:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8009fa4:	e7e6      	b.n	8009f74 <USB_EPStartXfer+0x150>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fa6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8009faa:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fae:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8009fb2:	bf0c      	ite	eq
 8009fb4:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fb8:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8009fbc:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009fc0:	9200      	str	r2, [sp, #0]
 8009fc2:	8a0b      	ldrh	r3, [r1, #16]
 8009fc4:	780a      	ldrb	r2, [r1, #0]
 8009fc6:	68c9      	ldr	r1, [r1, #12]
 8009fc8:	f7ff ff15 	bl	8009df6 <USB_WritePacket>
 8009fcc:	e75b      	b.n	8009e86 <USB_EPStartXfer+0x62>
      if (ep->xfer_len == 0U)
 8009fce:	690c      	ldr	r4, [r1, #16]
 8009fd0:	b954      	cbnz	r4, 8009fe8 <USB_EPStartXfer+0x1c4>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009fd2:	691d      	ldr	r5, [r3, #16]
 8009fd4:	688c      	ldr	r4, [r1, #8]
 8009fd6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8009fda:	432c      	orrs	r4, r5
 8009fdc:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fde:	691c      	ldr	r4, [r3, #16]
 8009fe0:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8009fe4:	611c      	str	r4, [r3, #16]
 8009fe6:	e741      	b.n	8009e6c <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fe8:	688d      	ldr	r5, [r1, #8]
 8009fea:	442c      	add	r4, r5
 8009fec:	3c01      	subs	r4, #1
 8009fee:	fbb4 f4f5 	udiv	r4, r4, r5
 8009ff2:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009ff4:	fb04 f505 	mul.w	r5, r4, r5
 8009ff8:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ffa:	691e      	ldr	r6, [r3, #16]
 8009ffc:	4d0f      	ldr	r5, [pc, #60]	@ (800a03c <USB_EPStartXfer+0x218>)
 8009ffe:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 800a002:	4334      	orrs	r4, r6
 800a004:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a006:	691d      	ldr	r5, [r3, #16]
 800a008:	6a0c      	ldr	r4, [r1, #32]
 800a00a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a00e:	432c      	orrs	r4, r5
 800a010:	611c      	str	r4, [r3, #16]
 800a012:	e72b      	b.n	8009e6c <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a014:	68ca      	ldr	r2, [r1, #12]
 800a016:	2a00      	cmp	r2, #0
 800a018:	f43f af2b 	beq.w	8009e72 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a01c:	615a      	str	r2, [r3, #20]
 800a01e:	e728      	b.n	8009e72 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a020:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800a024:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a028:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800a02c:	bf0c      	ite	eq
 800a02e:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a032:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800a036:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800a03a:	e71e      	b.n	8009e7a <USB_EPStartXfer+0x56>
 800a03c:	1ff80000 	.word	0x1ff80000

0800a040 <USB_ReadPacket>:
{
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 800a044:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800a048:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800a04c:	d01a      	beq.n	800a084 <USB_ReadPacket+0x44>
  uint8_t *pDest = dest;
 800a04e:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800a050:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a052:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800a056:	6822      	ldr	r2, [r4, #0]
 800a058:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800a05c:	3301      	adds	r3, #1
 800a05e:	459e      	cmp	lr, r3
 800a060:	d1f9      	bne.n	800a056 <USB_ReadPacket+0x16>
 800a062:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 800a066:	b165      	cbz	r5, 800a082 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a068:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800a06c:	6834      	ldr	r4, [r6, #0]
 800a06e:	1941      	adds	r1, r0, r5
 800a070:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a072:	fa24 f203 	lsr.w	r2, r4, r3
 800a076:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 800a07a:	3308      	adds	r3, #8
 800a07c:	4288      	cmp	r0, r1
 800a07e:	d1f8      	bne.n	800a072 <USB_ReadPacket+0x32>
      pDest++;
 800a080:	4608      	mov	r0, r1
}
 800a082:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800a084:	4608      	mov	r0, r1
 800a086:	e7ee      	b.n	800a066 <USB_ReadPacket+0x26>

0800a088 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a088:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a08a:	784a      	ldrb	r2, [r1, #1]
 800a08c:	2a01      	cmp	r2, #1
 800a08e:	d014      	beq.n	800a0ba <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a090:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a094:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800a098:	2a00      	cmp	r2, #0
 800a09a:	db06      	blt.n	800a0aa <USB_EPSetStall+0x22>
 800a09c:	b12b      	cbz	r3, 800a0aa <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a09e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a0a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0a6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a0aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a0ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0b2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0ba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a0be:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	db06      	blt.n	800a0d4 <USB_EPSetStall+0x4c>
 800a0c6:	b12b      	cbz	r3, 800a0d4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a0c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a0cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0d0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a0d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a0d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0dc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800a0e0:	e7e9      	b.n	800a0b6 <USB_EPSetStall+0x2e>

0800a0e2 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a0e2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a0e4:	784a      	ldrb	r2, [r1, #1]
 800a0e6:	2a01      	cmp	r2, #1
 800a0e8:	d00e      	beq.n	800a108 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a0ee:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a0f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0f6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0fa:	790b      	ldrb	r3, [r1, #4]
 800a0fc:	3b02      	subs	r3, #2
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b01      	cmp	r3, #1
 800a102:	d915      	bls.n	800a130 <USB_EPClearStall+0x4e>
}
 800a104:	2000      	movs	r0, #0
 800a106:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a108:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a10c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a110:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a114:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a118:	790b      	ldrb	r3, [r1, #4]
 800a11a:	3b02      	subs	r3, #2
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d8f0      	bhi.n	800a104 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a122:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a12a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800a12e:	e7e9      	b.n	800a104 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a130:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a138:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800a13c:	e7e2      	b.n	800a104 <USB_EPClearStall+0x22>

0800a13e <USB_StopDevice>:
{
 800a13e:	b510      	push	{r4, lr}
 800a140:	4604      	mov	r4, r0
  for (i = 0U; i < 15U; i++)
 800a142:	f500 6310 	add.w	r3, r0, #2304	@ 0x900
 800a146:	f500 6c2e 	add.w	ip, r0, #2784	@ 0xae0
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a14a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800a14e:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a150:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  for (i = 0U; i < 15U; i++)
 800a154:	3320      	adds	r3, #32
 800a156:	4563      	cmp	r3, ip
 800a158:	d1f9      	bne.n	800a14e <USB_StopDevice+0x10>
  USBx_DEVICE->DIEPMSK  = 0U;
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c4 2810 	str.w	r2, [r4, #2064]	@ 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 800a160:	f8c4 2814 	str.w	r2, [r4, #2068]	@ 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 800a164:	f8c4 281c 	str.w	r2, [r4, #2076]	@ 0x81c
  ret = USB_FlushRxFifo(USBx);
 800a168:	4620      	mov	r0, r4
 800a16a:	f7ff fc33 	bl	80099d4 <USB_FlushRxFifo>
  if (ret != HAL_OK)
 800a16e:	b100      	cbz	r0, 800a172 <USB_StopDevice+0x34>
}
 800a170:	bd10      	pop	{r4, pc}
  ret = USB_FlushTxFifo(USBx,  0x10U);
 800a172:	2110      	movs	r1, #16
 800a174:	4620      	mov	r0, r4
 800a176:	f7ff fc08 	bl	800998a <USB_FlushTxFifo>
    return ret;
 800a17a:	e7f9      	b.n	800a170 <USB_StopDevice+0x32>

0800a17c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a17c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a180:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a184:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a188:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a18c:	0109      	lsls	r1, r1, #4
 800a18e:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800a192:	4319      	orrs	r1, r3
 800a194:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800a198:	2000      	movs	r0, #0
 800a19a:	4770      	bx	lr

0800a19c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a19c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a1a8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a1ac:	f023 0302 	bic.w	r3, r3, #2
 800a1b0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4770      	bx	lr

0800a1b8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1b8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800a1bc:	f023 0303 	bic.w	r3, r3, #3
 800a1c0:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1c4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a1c8:	f043 0302 	orr.w	r3, r3, #2
 800a1cc:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	4770      	bx	lr

0800a1d4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a1d4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a1d6:	6980      	ldr	r0, [r0, #24]
}
 800a1d8:	4010      	ands	r0, r2
 800a1da:	4770      	bx	lr

0800a1dc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a1dc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a1e0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1e4:	69c0      	ldr	r0, [r0, #28]
 800a1e6:	4018      	ands	r0, r3
}
 800a1e8:	0c00      	lsrs	r0, r0, #16
 800a1ea:	4770      	bx	lr

0800a1ec <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a1ec:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a1f0:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1f4:	69c0      	ldr	r0, [r0, #28]
 800a1f6:	4018      	ands	r0, r3
}
 800a1f8:	b280      	uxth	r0, r0
 800a1fa:	4770      	bx	lr

0800a1fc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a1fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a200:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a204:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800a208:	6940      	ldr	r0, [r0, #20]
}
 800a20a:	4010      	ands	r0, r2
 800a20c:	4770      	bx	lr

0800a20e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a20e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a212:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a216:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a21a:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800a21e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a220:	f001 010f 	and.w	r1, r1, #15
 800a224:	40cb      	lsrs	r3, r1
 800a226:	01db      	lsls	r3, r3, #7
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	4313      	orrs	r3, r2
}
 800a22c:	4018      	ands	r0, r3
 800a22e:	4770      	bx	lr

0800a230 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a230:	6940      	ldr	r0, [r0, #20]
}
 800a232:	f000 0001 	and.w	r0, r0, #1
 800a236:	4770      	bx	lr

0800a238 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a238:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a23c:	f36f 030a 	bfc	r3, #0, #11
 800a240:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a244:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a24c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr

0800a254 <USB_EP0_OutStart>:
{
 800a254:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a256:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a258:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <USB_EP0_OutStart+0x5c>)
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d903      	bls.n	800a266 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a25e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a262:	2b00      	cmp	r3, #0
 800a264:	db16      	blt.n	800a294 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a266:	2400      	movs	r4, #0
 800a268:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a26c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a270:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a274:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a278:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a27c:	f044 0418 	orr.w	r4, r4, #24
 800a280:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a284:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a288:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800a28c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800a290:	2901      	cmp	r1, #1
 800a292:	d003      	beq.n	800a29c <USB_EP0_OutStart+0x48>
}
 800a294:	2000      	movs	r0, #0
 800a296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a29a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a29c:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a2a4:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a2a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800a2ac:	e7f2      	b.n	800a294 <USB_EP0_OutStart+0x40>
 800a2ae:	bf00      	nop
 800a2b0:	4f54300a 	.word	0x4f54300a

0800a2b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2b4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a2b6:	490c      	ldr	r1, [pc, #48]	@ (800a2e8 <MX_FATFS_Init+0x34>)
 800a2b8:	480c      	ldr	r0, [pc, #48]	@ (800a2ec <MX_FATFS_Init+0x38>)
 800a2ba:	f003 fdad 	bl	800de18 <FATFS_LinkDriver>
 800a2be:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f0 <MX_FATFS_Init+0x3c>)
 800a2c0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  if(retSD != FR_OK)
 800a2c2:	b940      	cbnz	r0, 800a2d6 <MX_FATFS_Init+0x22>
  {
  	printf("FATFS_LinkDriver() failed.\n");
  	Error_Handler();
  }

  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4908      	ldr	r1, [pc, #32]	@ (800a2e8 <MX_FATFS_Init+0x34>)
 800a2c8:	480a      	ldr	r0, [pc, #40]	@ (800a2f4 <MX_FATFS_Init+0x40>)
 800a2ca:	f003 fab9 	bl	800d840 <f_mount>
 800a2ce:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <MX_FATFS_Init+0x3c>)
 800a2d0:	7018      	strb	r0, [r3, #0]
  if(retSD != FR_OK)
 800a2d2:	b930      	cbnz	r0, 800a2e2 <MX_FATFS_Init+0x2e>
  {
  	Error_Handler();
  }
  /* USER CODE END Init */
}
 800a2d4:	bd08      	pop	{r3, pc}
  	printf("FATFS_LinkDriver() failed.\n");
 800a2d6:	4808      	ldr	r0, [pc, #32]	@ (800a2f8 <MX_FATFS_Init+0x44>)
 800a2d8:	f004 fe36 	bl	800ef48 <puts>
  	Error_Handler();
 800a2dc:	f7fa fba0 	bl	8004a20 <Error_Handler>
 800a2e0:	e7f0      	b.n	800a2c4 <MX_FATFS_Init+0x10>
  	Error_Handler();
 800a2e2:	f7fa fb9d 	bl	8004a20 <Error_Handler>
}
 800a2e6:	e7f5      	b.n	800a2d4 <MX_FATFS_Init+0x20>
 800a2e8:	200047ac 	.word	0x200047ac
 800a2ec:	08012410 	.word	0x08012410
 800a2f0:	200047b0 	.word	0x200047b0
 800a2f4:	20004578 	.word	0x20004578
 800a2f8:	08012304 	.word	0x08012304

0800a2fc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	4770      	bx	lr

0800a300 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a300:	b508      	push	{r3, lr}
 800a302:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a304:	460a      	mov	r2, r1
 800a306:	4601      	mov	r1, r0
 800a308:	4803      	ldr	r0, [pc, #12]	@ (800a318 <BSP_SD_ReadBlocks_DMA+0x18>)
 800a30a:	f7fd f979 	bl	8007600 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a30e:	3800      	subs	r0, #0
 800a310:	bf18      	it	ne
 800a312:	2001      	movne	r0, #1
 800a314:	bd08      	pop	{r3, pc}
 800a316:	bf00      	nop
 800a318:	200044cc 	.word	0x200044cc

0800a31c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a31c:	b508      	push	{r3, lr}
 800a31e:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a320:	460a      	mov	r2, r1
 800a322:	4601      	mov	r1, r0
 800a324:	4803      	ldr	r0, [pc, #12]	@ (800a334 <BSP_SD_WriteBlocks_DMA+0x18>)
 800a326:	f7fd fa07 	bl	8007738 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a32a:	3800      	subs	r0, #0
 800a32c:	bf18      	it	ne
 800a32e:	2001      	movne	r0, #1
 800a330:	bd08      	pop	{r3, pc}
 800a332:	bf00      	nop
 800a334:	200044cc 	.word	0x200044cc

0800a338 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a338:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a33a:	4803      	ldr	r0, [pc, #12]	@ (800a348 <BSP_SD_GetCardState+0x10>)
 800a33c:	f7fd fd92 	bl	8007e64 <HAL_SD_GetCardState>
}
 800a340:	3804      	subs	r0, #4
 800a342:	bf18      	it	ne
 800a344:	2001      	movne	r0, #1
 800a346:	bd08      	pop	{r3, pc}
 800a348:	200044cc 	.word	0x200044cc

0800a34c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a34c:	b508      	push	{r3, lr}
 800a34e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a350:	4801      	ldr	r0, [pc, #4]	@ (800a358 <BSP_SD_GetCardInfo+0xc>)
 800a352:	f7fd fcd0 	bl	8007cf6 <HAL_SD_GetCardInfo>
}
 800a356:	bd08      	pop	{r3, pc}
 800a358:	200044cc 	.word	0x200044cc

0800a35c <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800a35c:	4770      	bx	lr

0800a35e <HAL_SD_AbortCallback>:
{
 800a35e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800a360:	f7ff fffc 	bl	800a35c <BSP_SD_AbortCallback>
}
 800a364:	bd08      	pop	{r3, pc}

0800a366 <HAL_SD_TxCpltCallback>:
{
 800a366:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800a368:	f000 f912 	bl	800a590 <BSP_SD_WriteCpltCallback>
}
 800a36c:	bd08      	pop	{r3, pc}

0800a36e <HAL_SD_RxCpltCallback>:
{
 800a36e:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800a370:	f000 f918 	bl	800a5a4 <BSP_SD_ReadCpltCallback>
}
 800a374:	bd08      	pop	{r3, pc}

0800a376 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a376:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800a378:	2301      	movs	r3, #1
 800a37a:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a37e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a382:	b002      	add	sp, #8
 800a384:	4770      	bx	lr
	...

0800a388 <BSP_SD_Init>:
{
 800a388:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a38a:	f7ff fff4 	bl	800a376 <BSP_SD_IsDetected>
 800a38e:	2801      	cmp	r0, #1
 800a390:	d001      	beq.n	800a396 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 800a392:	2001      	movs	r0, #1
}
 800a394:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800a396:	4807      	ldr	r0, [pc, #28]	@ (800a3b4 <BSP_SD_Init+0x2c>)
 800a398:	f7fd fc92 	bl	8007cc0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d1f9      	bne.n	800a394 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a3a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a3a4:	4803      	ldr	r0, [pc, #12]	@ (800a3b4 <BSP_SD_Init+0x2c>)
 800a3a6:	f7fd fcb9 	bl	8007d1c <HAL_SD_ConfigWideBusOperation>
 800a3aa:	3800      	subs	r0, #0
 800a3ac:	bf18      	it	ne
 800a3ae:	2001      	movne	r0, #1
 800a3b0:	e7f0      	b.n	800a394 <BSP_SD_Init+0xc>
 800a3b2:	bf00      	nop
 800a3b4:	200044cc 	.word	0x200044cc

0800a3b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3b8:	b508      	push	{r3, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a3ba:	f7ff ffe5 	bl	800a388 <BSP_SD_Init>
 800a3be:	b110      	cbz	r0, 800a3c6 <SD_initialize+0xe>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a3c0:	4b09      	ldr	r3, [pc, #36]	@ (800a3e8 <SD_initialize+0x30>)
 800a3c2:	7818      	ldrb	r0, [r3, #0]
}
 800a3c4:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 800a3c6:	4b08      	ldr	r3, [pc, #32]	@ (800a3e8 <SD_initialize+0x30>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a3cc:	f7ff ffb4 	bl	800a338 <BSP_SD_GetCardState>
 800a3d0:	b920      	cbnz	r0, 800a3dc <SD_initialize+0x24>
    Stat &= ~STA_NOINIT;
 800a3d2:	4a05      	ldr	r2, [pc, #20]	@ (800a3e8 <SD_initialize+0x30>)
 800a3d4:	7813      	ldrb	r3, [r2, #0]
 800a3d6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a3da:	7013      	strb	r3, [r2, #0]
  return Stat;
 800a3dc:	4a02      	ldr	r2, [pc, #8]	@ (800a3e8 <SD_initialize+0x30>)
 800a3de:	7813      	ldrb	r3, [r2, #0]
 800a3e0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800a3e2:	7013      	strb	r3, [r2, #0]
 800a3e4:	e7ec      	b.n	800a3c0 <SD_initialize+0x8>
 800a3e6:	bf00      	nop
 800a3e8:	20000014 	.word	0x20000014

0800a3ec <SD_CheckStatusWithTimeout>:
{
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 800a3f0:	f7fb f872 	bl	80054d8 <HAL_GetTick>
 800a3f4:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 800a3f6:	f7fb f86f 	bl	80054d8 <HAL_GetTick>
 800a3fa:	1b00      	subs	r0, r0, r4
 800a3fc:	42a8      	cmp	r0, r5
 800a3fe:	d205      	bcs.n	800a40c <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a400:	f7ff ff9a 	bl	800a338 <BSP_SD_GetCardState>
 800a404:	2800      	cmp	r0, #0
 800a406:	d1f6      	bne.n	800a3f6 <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800a408:	2000      	movs	r0, #0
 800a40a:	e001      	b.n	800a410 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a410:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a414 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	460c      	mov	r4, r1
 800a418:	4615      	mov	r5, r2
 800a41a:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a41c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a420:	f7ff ffe4 	bl	800a3ec <SD_CheckStatusWithTimeout>
 800a424:	2800      	cmp	r0, #0
 800a426:	db30      	blt.n	800a48a <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a428:	4632      	mov	r2, r6
 800a42a:	4629      	mov	r1, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7ff ff67 	bl	800a300 <BSP_SD_ReadBlocks_DMA>
 800a432:	b108      	cbz	r0, 800a438 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 800a434:	2001      	movs	r0, #1
 800a436:	e029      	b.n	800a48c <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a438:	4b15      	ldr	r3, [pc, #84]	@ (800a490 <SD_read+0x7c>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a43e:	f7fb f84b 	bl	80054d8 <HAL_GetTick>
 800a442:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a444:	4d12      	ldr	r5, [pc, #72]	@ (800a490 <SD_read+0x7c>)
 800a446:	f247 562f 	movw	r6, #29999	@ 0x752f
 800a44a:	682b      	ldr	r3, [r5, #0]
 800a44c:	b923      	cbnz	r3, 800a458 <SD_read+0x44>
 800a44e:	f7fb f843 	bl	80054d8 <HAL_GetTick>
 800a452:	1b00      	subs	r0, r0, r4
 800a454:	42b0      	cmp	r0, r6
 800a456:	d9f8      	bls.n	800a44a <SD_read+0x36>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a458:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <SD_read+0x7c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	b90b      	cbnz	r3, 800a462 <SD_read+0x4e>
      {
        res = RES_ERROR;
 800a45e:	2001      	movs	r0, #1
 800a460:	e014      	b.n	800a48c <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 800a462:	4b0b      	ldr	r3, [pc, #44]	@ (800a490 <SD_read+0x7c>)
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a468:	f7fb f836 	bl	80054d8 <HAL_GetTick>
 800a46c:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a46e:	f247 552f 	movw	r5, #29999	@ 0x752f
 800a472:	f7fb f831 	bl	80054d8 <HAL_GetTick>
 800a476:	1b00      	subs	r0, r0, r4
 800a478:	42a8      	cmp	r0, r5
 800a47a:	d804      	bhi.n	800a486 <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a47c:	f7ff ff5c 	bl	800a338 <BSP_SD_GetCardState>
 800a480:	2800      	cmp	r0, #0
 800a482:	d1f6      	bne.n	800a472 <SD_read+0x5e>
 800a484:	e002      	b.n	800a48c <SD_read+0x78>
  DRESULT res = RES_ERROR;
 800a486:	2001      	movs	r0, #1
 800a488:	e000      	b.n	800a48c <SD_read+0x78>
    return res;
 800a48a:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 800a48c:	bd70      	pop	{r4, r5, r6, pc}
 800a48e:	bf00      	nop
 800a490:	200047b4 	.word	0x200047b4

0800a494 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	460c      	mov	r4, r1
 800a498:	4615      	mov	r5, r2
 800a49a:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a49c:	4b1c      	ldr	r3, [pc, #112]	@ (800a510 <SD_write+0x7c>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a4a2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a4a6:	f7ff ffa1 	bl	800a3ec <SD_CheckStatusWithTimeout>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	db2d      	blt.n	800a50a <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff ff32 	bl	800a31c <BSP_SD_WriteBlocks_DMA>
 800a4b8:	b108      	cbz	r0, 800a4be <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	e026      	b.n	800a50c <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a4be:	f7fb f80b 	bl	80054d8 <HAL_GetTick>
 800a4c2:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a4c4:	4d12      	ldr	r5, [pc, #72]	@ (800a510 <SD_write+0x7c>)
 800a4c6:	f247 562f 	movw	r6, #29999	@ 0x752f
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b923      	cbnz	r3, 800a4d8 <SD_write+0x44>
 800a4ce:	f7fb f803 	bl	80054d8 <HAL_GetTick>
 800a4d2:	1b00      	subs	r0, r0, r4
 800a4d4:	42b0      	cmp	r0, r6
 800a4d6:	d9f8      	bls.n	800a4ca <SD_write+0x36>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a510 <SD_write+0x7c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	b90b      	cbnz	r3, 800a4e2 <SD_write+0x4e>
      {
        res = RES_ERROR;
 800a4de:	2001      	movs	r0, #1
 800a4e0:	e014      	b.n	800a50c <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <SD_write+0x7c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a4e8:	f7fa fff6 	bl	80054d8 <HAL_GetTick>
 800a4ec:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a4ee:	f247 552f 	movw	r5, #29999	@ 0x752f
 800a4f2:	f7fa fff1 	bl	80054d8 <HAL_GetTick>
 800a4f6:	1b00      	subs	r0, r0, r4
 800a4f8:	42a8      	cmp	r0, r5
 800a4fa:	d804      	bhi.n	800a506 <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4fc:	f7ff ff1c 	bl	800a338 <BSP_SD_GetCardState>
 800a500:	2800      	cmp	r0, #0
 800a502:	d1f6      	bne.n	800a4f2 <SD_write+0x5e>
 800a504:	e002      	b.n	800a50c <SD_write+0x78>
  DRESULT res = RES_ERROR;
 800a506:	2001      	movs	r0, #1
 800a508:	e000      	b.n	800a50c <SD_write+0x78>
    return res;
 800a50a:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	bf00      	nop
 800a510:	200047b8 	.word	0x200047b8

0800a514 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a514:	b530      	push	{r4, r5, lr}
 800a516:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a518:	4b13      	ldr	r3, [pc, #76]	@ (800a568 <SD_ioctl+0x54>)
 800a51a:	7818      	ldrb	r0, [r3, #0]
 800a51c:	f010 0401 	ands.w	r4, r0, #1
 800a520:	d11b      	bne.n	800a55a <SD_ioctl+0x46>
 800a522:	4615      	mov	r5, r2

  switch (cmd)
 800a524:	2903      	cmp	r1, #3
 800a526:	d81c      	bhi.n	800a562 <SD_ioctl+0x4e>
 800a528:	e8df f001 	tbb	[pc, r1]
 800a52c:	100a0402 	.word	0x100a0402
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a530:	460c      	mov	r4, r1
 800a532:	e013      	b.n	800a55c <SD_ioctl+0x48>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a534:	4668      	mov	r0, sp
 800a536:	f7ff ff09 	bl	800a34c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a53e:	e00d      	b.n	800a55c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a540:	4668      	mov	r0, sp
 800a542:	f7ff ff03 	bl	800a34c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a546:	9b07      	ldr	r3, [sp, #28]
 800a548:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800a54a:	e007      	b.n	800a55c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a54c:	4668      	mov	r0, sp
 800a54e:	f7ff fefd 	bl	800a34c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a552:	9b07      	ldr	r3, [sp, #28]
 800a554:	0a5b      	lsrs	r3, r3, #9
 800a556:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a558:	e000      	b.n	800a55c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a55a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800a55c:	4620      	mov	r0, r4
 800a55e:	b009      	add	sp, #36	@ 0x24
 800a560:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800a562:	2404      	movs	r4, #4
 800a564:	e7fa      	b.n	800a55c <SD_ioctl+0x48>
 800a566:	bf00      	nop
 800a568:	20000014 	.word	0x20000014

0800a56c <SD_status>:
{
 800a56c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800a56e:	4b07      	ldr	r3, [pc, #28]	@ (800a58c <SD_status+0x20>)
 800a570:	2201      	movs	r2, #1
 800a572:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a574:	f7ff fee0 	bl	800a338 <BSP_SD_GetCardState>
 800a578:	b920      	cbnz	r0, 800a584 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 800a57a:	4a04      	ldr	r2, [pc, #16]	@ (800a58c <SD_status+0x20>)
 800a57c:	7813      	ldrb	r3, [r2, #0]
 800a57e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a582:	7013      	strb	r3, [r2, #0]
  return Stat;
 800a584:	4b01      	ldr	r3, [pc, #4]	@ (800a58c <SD_status+0x20>)
 800a586:	7818      	ldrb	r0, [r3, #0]
}
 800a588:	bd08      	pop	{r3, pc}
 800a58a:	bf00      	nop
 800a58c:	20000014 	.word	0x20000014

0800a590 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 800a590:	2301      	movs	r3, #1
 800a592:	4a02      	ldr	r2, [pc, #8]	@ (800a59c <BSP_SD_WriteCpltCallback+0xc>)
 800a594:	6013      	str	r3, [r2, #0]
  usbd_WriteStatus = 1;
 800a596:	4a02      	ldr	r2, [pc, #8]	@ (800a5a0 <BSP_SD_WriteCpltCallback+0x10>)
 800a598:	6013      	str	r3, [r2, #0]
}
 800a59a:	4770      	bx	lr
 800a59c:	200047b8 	.word	0x200047b8
 800a5a0:	20004cd8 	.word	0x20004cd8

0800a5a4 <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4a02      	ldr	r2, [pc, #8]	@ (800a5b0 <BSP_SD_ReadCpltCallback+0xc>)
 800a5a8:	6013      	str	r3, [r2, #0]
  usbd_ReadStatus = 1;
 800a5aa:	4a02      	ldr	r2, [pc, #8]	@ (800a5b4 <BSP_SD_ReadCpltCallback+0x10>)
 800a5ac:	6013      	str	r3, [r2, #0]
}
 800a5ae:	4770      	bx	lr
 800a5b0:	200047b4 	.word	0x200047b4
 800a5b4:	20004cd4 	.word	0x20004cd4

0800a5b8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a5b8:	230a      	movs	r3, #10
 800a5ba:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 800a5bc:	4800      	ldr	r0, [pc, #0]	@ (800a5c0 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800a5be:	4770      	bx	lr
 800a5c0:	20000018 	.word	0x20000018

0800a5c4 <USBD_MSC_Init>:
{
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a5c8:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800a5cc:	f003 fece 	bl	800e36c <USBD_static_malloc>
  if (hmsc == NULL)
 800a5d0:	b378      	cbz	r0, 800a632 <USBD_MSC_Init+0x6e>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800a5d2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a5d6:	33b0      	adds	r3, #176	@ 0xb0
 800a5d8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a5dc:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5e0:	7c23      	ldrb	r3, [r4, #16]
 800a5e2:	bb73      	cbnz	r3, 800a642 <USBD_MSC_Init+0x7e>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a5e4:	4d27      	ldr	r5, [pc, #156]	@ (800a684 <USBD_MSC_Init+0xc0>)
 800a5e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	7829      	ldrb	r1, [r5, #0]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f003 fee0 	bl	800e3b4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a5f4:	782b      	ldrb	r3, [r5, #0]
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a602:	2501      	movs	r5, #1
 800a604:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a608:	4e1f      	ldr	r6, [pc, #124]	@ (800a688 <USBD_MSC_Init+0xc4>)
 800a60a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a60e:	2202      	movs	r2, #2
 800a610:	7831      	ldrb	r1, [r6, #0]
 800a612:	4620      	mov	r0, r4
 800a614:	f003 fece 	bl	800e3b4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a618:	7833      	ldrb	r3, [r6, #0]
 800a61a:	f003 030f 	and.w	r3, r3, #15
 800a61e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a626:	849d      	strh	r5, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 f9a1 	bl	800a970 <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 800a62e:	2000      	movs	r0, #0
}
 800a630:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a632:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a636:	33b0      	adds	r3, #176	@ 0xb0
 800a638:	2200      	movs	r2, #0
 800a63a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a63e:	2002      	movs	r0, #2
 800a640:	e7f6      	b.n	800a630 <USBD_MSC_Init+0x6c>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a642:	4d10      	ldr	r5, [pc, #64]	@ (800a684 <USBD_MSC_Init+0xc0>)
 800a644:	2340      	movs	r3, #64	@ 0x40
 800a646:	2202      	movs	r2, #2
 800a648:	7829      	ldrb	r1, [r5, #0]
 800a64a:	4620      	mov	r0, r4
 800a64c:	f003 feb2 	bl	800e3b4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a650:	782b      	ldrb	r3, [r5, #0]
 800a652:	f003 030f 	and.w	r3, r3, #15
 800a656:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a65a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a65e:	2501      	movs	r5, #1
 800a660:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a664:	4e08      	ldr	r6, [pc, #32]	@ (800a688 <USBD_MSC_Init+0xc4>)
 800a666:	2340      	movs	r3, #64	@ 0x40
 800a668:	2202      	movs	r2, #2
 800a66a:	7831      	ldrb	r1, [r6, #0]
 800a66c:	4620      	mov	r0, r4
 800a66e:	f003 fea1 	bl	800e3b4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a672:	7833      	ldrb	r3, [r6, #0]
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a67c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a680:	849d      	strh	r5, [r3, #36]	@ 0x24
 800a682:	e7d1      	b.n	800a628 <USBD_MSC_Init+0x64>
 800a684:	20000015 	.word	0x20000015
 800a688:	20000016 	.word	0x20000016

0800a68c <USBD_MSC_DeInit>:
{
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800a690:	4d19      	ldr	r5, [pc, #100]	@ (800a6f8 <USBD_MSC_DeInit+0x6c>)
 800a692:	7829      	ldrb	r1, [r5, #0]
 800a694:	f003 fe99 	bl	800e3ca <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800a698:	782b      	ldrb	r3, [r5, #0]
 800a69a:	f003 030f 	and.w	r3, r3, #15
 800a69e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a6a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6a6:	2500      	movs	r5, #0
 800a6a8:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800a6ac:	4e13      	ldr	r6, [pc, #76]	@ (800a6fc <USBD_MSC_DeInit+0x70>)
 800a6ae:	7831      	ldrb	r1, [r6, #0]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f003 fe8a 	bl	800e3ca <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800a6b6:	7833      	ldrb	r3, [r6, #0]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6c4:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6c6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a6ca:	33b0      	adds	r3, #176	@ 0xb0
 800a6cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a6d0:	b183      	cbz	r3, 800a6f4 <USBD_MSC_DeInit+0x68>
    MSC_BOT_DeInit(pdev);
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 f99e 	bl	800aa14 <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a6d8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a6dc:	33b0      	adds	r3, #176	@ 0xb0
 800a6de:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800a6e2:	f003 fe47 	bl	800e374 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800a6e6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a6ea:	33b0      	adds	r3, #176	@ 0xb0
 800a6ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800a6f0:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	20000015 	.word	0x20000015
 800a6fc:	20000016 	.word	0x20000016

0800a700 <USBD_MSC_Setup>:
{
 800a700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a706:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a70a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a70e:	f8d3 72c0 	ldr.w	r7, [r3, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 800a712:	2200      	movs	r2, #0
 800a714:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hmsc == NULL)
 800a718:	2f00      	cmp	r7, #0
 800a71a:	f000 808e 	beq.w	800a83a <USBD_MSC_Setup+0x13a>
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a722:	780a      	ldrb	r2, [r1, #0]
 800a724:	f012 0660 	ands.w	r6, r2, #96	@ 0x60
 800a728:	d036      	beq.n	800a798 <USBD_MSC_Setup+0x98>
 800a72a:	2e20      	cmp	r6, #32
 800a72c:	d17e      	bne.n	800a82c <USBD_MSC_Setup+0x12c>
      switch (req->bRequest)
 800a72e:	7849      	ldrb	r1, [r1, #1]
 800a730:	29fe      	cmp	r1, #254	@ 0xfe
 800a732:	d006      	beq.n	800a742 <USBD_MSC_Setup+0x42>
 800a734:	29ff      	cmp	r1, #255	@ 0xff
 800a736:	d01e      	beq.n	800a776 <USBD_MSC_Setup+0x76>
          USBD_CtlError(pdev, req);
 800a738:	4629      	mov	r1, r5
 800a73a:	f001 f9e7 	bl	800bb0c <USBD_CtlError>
          ret = USBD_FAIL;
 800a73e:	2603      	movs	r6, #3
          break;
 800a740:	e077      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a742:	8869      	ldrh	r1, [r5, #2]
 800a744:	b911      	cbnz	r1, 800a74c <USBD_MSC_Setup+0x4c>
 800a746:	88e9      	ldrh	r1, [r5, #6]
 800a748:	2901      	cmp	r1, #1
 800a74a:	d005      	beq.n	800a758 <USBD_MSC_Setup+0x58>
            USBD_CtlError(pdev, req);
 800a74c:	4629      	mov	r1, r5
 800a74e:	4620      	mov	r0, r4
 800a750:	f001 f9dc 	bl	800bb0c <USBD_CtlError>
            ret = USBD_FAIL;
 800a754:	2603      	movs	r6, #3
 800a756:	e06c      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a758:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a75c:	d0f6      	beq.n	800a74c <USBD_MSC_Setup+0x4c>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800a75e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	4798      	blx	r3
 800a766:	6038      	str	r0, [r7, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a768:	2201      	movs	r2, #1
 800a76a:	4639      	mov	r1, r7
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 fd1c 	bl	800c1aa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a772:	2600      	movs	r6, #0
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a774:	e05d      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a776:	886b      	ldrh	r3, [r5, #2]
 800a778:	b943      	cbnz	r3, 800a78c <USBD_MSC_Setup+0x8c>
 800a77a:	88eb      	ldrh	r3, [r5, #6]
 800a77c:	b933      	cbnz	r3, 800a78c <USBD_MSC_Setup+0x8c>
 800a77e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a782:	d103      	bne.n	800a78c <USBD_MSC_Setup+0x8c>
            MSC_BOT_Reset(pdev);
 800a784:	f000 f924 	bl	800a9d0 <MSC_BOT_Reset>
  USBD_StatusTypeDef ret = USBD_OK;
 800a788:	2600      	movs	r6, #0
            MSC_BOT_Reset(pdev);
 800a78a:	e052      	b.n	800a832 <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800a78c:	4629      	mov	r1, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	f001 f9bc 	bl	800bb0c <USBD_CtlError>
            ret = USBD_FAIL;
 800a794:	2603      	movs	r6, #3
 800a796:	e04c      	b.n	800a832 <USBD_MSC_Setup+0x132>
      switch (req->bRequest)
 800a798:	f891 8001 	ldrb.w	r8, [r1, #1]
 800a79c:	f1b8 0f0b 	cmp.w	r8, #11
 800a7a0:	d840      	bhi.n	800a824 <USBD_MSC_Setup+0x124>
 800a7a2:	e8df f008 	tbb	[pc, r8]
 800a7a6:	3006      	.short	0x3006
 800a7a8:	3f3f3f3f 	.word	0x3f3f3f3f
 800a7ac:	3f3f3f3f 	.word	0x3f3f3f3f
 800a7b0:	2416      	.short	0x2416
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d003      	beq.n	800a7c4 <USBD_MSC_Setup+0xc4>
            USBD_CtlError(pdev, req);
 800a7bc:	f001 f9a6 	bl	800bb0c <USBD_CtlError>
            ret = USBD_FAIL;
 800a7c0:	2603      	movs	r6, #3
 800a7c2:	e036      	b.n	800a832 <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f10d 0106 	add.w	r1, sp, #6
 800a7ca:	f001 fcee 	bl	800c1aa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	4646      	mov	r6, r8
 800a7d0:	e02f      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d003      	beq.n	800a7e4 <USBD_MSC_Setup+0xe4>
            USBD_CtlError(pdev, req);
 800a7dc:	f001 f996 	bl	800bb0c <USBD_CtlError>
            ret = USBD_FAIL;
 800a7e0:	2603      	movs	r6, #3
 800a7e2:	e026      	b.n	800a832 <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	1d39      	adds	r1, r7, #4
 800a7e8:	f001 fcdf 	bl	800c1aa <USBD_CtlSendData>
 800a7ec:	e021      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d102      	bne.n	800a7fe <USBD_MSC_Setup+0xfe>
            hmsc->interface = (uint8_t)(req->wValue);
 800a7f8:	788b      	ldrb	r3, [r1, #2]
 800a7fa:	607b      	str	r3, [r7, #4]
 800a7fc:	e019      	b.n	800a832 <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800a7fe:	f001 f985 	bl	800bb0c <USBD_CtlError>
            ret = USBD_FAIL;
 800a802:	2603      	movs	r6, #3
 800a804:	e015      	b.n	800a832 <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b03      	cmp	r3, #3
 800a80e:	d110      	bne.n	800a832 <USBD_MSC_Setup+0x132>
            if (req->wValue == USB_FEATURE_EP_HALT)
 800a810:	884b      	ldrh	r3, [r1, #2]
 800a812:	b973      	cbnz	r3, 800a832 <USBD_MSC_Setup+0x132>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a814:	7909      	ldrb	r1, [r1, #4]
 800a816:	f003 fde0 	bl	800e3da <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a81a:	7929      	ldrb	r1, [r5, #4]
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 f9d3 	bl	800abc8 <MSC_BOT_CplClrFeature>
 800a822:	e006      	b.n	800a832 <USBD_MSC_Setup+0x132>
          USBD_CtlError(pdev, req);
 800a824:	f001 f972 	bl	800bb0c <USBD_CtlError>
          ret = USBD_FAIL;
 800a828:	2603      	movs	r6, #3
          break;
 800a82a:	e002      	b.n	800a832 <USBD_MSC_Setup+0x132>
      USBD_CtlError(pdev, req);
 800a82c:	f001 f96e 	bl	800bb0c <USBD_CtlError>
      ret = USBD_FAIL;
 800a830:	2603      	movs	r6, #3
}
 800a832:	4630      	mov	r0, r6
 800a834:	b002      	add	sp, #8
 800a836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_FAIL;
 800a83a:	2603      	movs	r6, #3
 800a83c:	e7f9      	b.n	800a832 <USBD_MSC_Setup+0x132>

0800a83e <USBD_MSC_DataIn>:
{
 800a83e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 800a840:	f000 f918 	bl	800aa74 <MSC_BOT_DataIn>
}
 800a844:	2000      	movs	r0, #0
 800a846:	bd08      	pop	{r3, pc}

0800a848 <USBD_MSC_DataOut>:
{
 800a848:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 800a84a:	f000 f935 	bl	800aab8 <MSC_BOT_DataOut>
}
 800a84e:	2000      	movs	r0, #0
 800a850:	bd08      	pop	{r3, pc}
	...

0800a854 <USBD_MSC_GetHSCfgDesc>:
{
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a858:	4e0b      	ldr	r6, [pc, #44]	@ (800a888 <USBD_MSC_GetHSCfgDesc+0x34>)
 800a85a:	2181      	movs	r1, #129	@ 0x81
 800a85c:	4630      	mov	r0, r6
 800a85e:	f001 f92b 	bl	800bab8 <USBD_GetEpDesc>
 800a862:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a864:	2101      	movs	r1, #1
 800a866:	4630      	mov	r0, r6
 800a868:	f001 f926 	bl	800bab8 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800a86c:	b11c      	cbz	r4, 800a876 <USBD_MSC_GetHSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a86e:	2200      	movs	r2, #0
 800a870:	7122      	strb	r2, [r4, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800a876:	b118      	cbz	r0, 800a880 <USBD_MSC_GetHSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a878:	2200      	movs	r2, #0
 800a87a:	7102      	strb	r2, [r0, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a880:	2320      	movs	r3, #32
 800a882:	802b      	strh	r3, [r5, #0]
}
 800a884:	4800      	ldr	r0, [pc, #0]	@ (800a888 <USBD_MSC_GetHSCfgDesc+0x34>)
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	20000024 	.word	0x20000024

0800a88c <USBD_MSC_GetFSCfgDesc>:
{
 800a88c:	b570      	push	{r4, r5, r6, lr}
 800a88e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a890:	4e0b      	ldr	r6, [pc, #44]	@ (800a8c0 <USBD_MSC_GetFSCfgDesc+0x34>)
 800a892:	2181      	movs	r1, #129	@ 0x81
 800a894:	4630      	mov	r0, r6
 800a896:	f001 f90f 	bl	800bab8 <USBD_GetEpDesc>
 800a89a:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a89c:	2101      	movs	r1, #1
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f001 f90a 	bl	800bab8 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800a8a4:	b11c      	cbz	r4, 800a8ae <USBD_MSC_GetFSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a8a6:	2240      	movs	r2, #64	@ 0x40
 800a8a8:	7122      	strb	r2, [r4, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800a8ae:	b118      	cbz	r0, 800a8b8 <USBD_MSC_GetFSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a8b0:	2240      	movs	r2, #64	@ 0x40
 800a8b2:	7102      	strb	r2, [r0, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a8b8:	2320      	movs	r3, #32
 800a8ba:	802b      	strh	r3, [r5, #0]
}
 800a8bc:	4800      	ldr	r0, [pc, #0]	@ (800a8c0 <USBD_MSC_GetFSCfgDesc+0x34>)
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	20000024 	.word	0x20000024

0800a8c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
{
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a8c8:	4e0b      	ldr	r6, [pc, #44]	@ (800a8f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800a8ca:	2181      	movs	r1, #129	@ 0x81
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f001 f8f3 	bl	800bab8 <USBD_GetEpDesc>
 800a8d2:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f001 f8ee 	bl	800bab8 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800a8dc:	b11c      	cbz	r4, 800a8e6 <USBD_MSC_GetOtherSpeedCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a8de:	2240      	movs	r2, #64	@ 0x40
 800a8e0:	7122      	strb	r2, [r4, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800a8e6:	b118      	cbz	r0, 800a8f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a8e8:	2240      	movs	r2, #64	@ 0x40
 800a8ea:	7102      	strb	r2, [r0, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	802b      	strh	r3, [r5, #0]
}
 800a8f4:	4800      	ldr	r0, [pc, #0]	@ (800a8f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	20000024 	.word	0x20000024

0800a8fc <USBD_MSC_RegisterStorage>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
  if (fops == NULL)
 800a8fc:	b139      	cbz	r1, 800a90e <USBD_MSC_RegisterStorage+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800a8fe:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800a902:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a906:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4

  return (uint8_t)USBD_OK;
 800a90a:	2000      	movs	r0, #0
 800a90c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a90e:	2003      	movs	r0, #3
}
 800a910:	4770      	bx	lr
	...

0800a914 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800a914:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a916:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a91a:	33b0      	adds	r3, #176	@ 0xb0
 800a91c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a920:	b185      	cbz	r5, 800a944 <MSC_BOT_Abort+0x30>
 800a922:	4604      	mov	r4, r0
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800a924:	f895 321c 	ldrb.w	r3, [r5, #540]	@ 0x21c
 800a928:	b923      	cbnz	r3, 800a934 <MSC_BOT_Abort+0x20>
 800a92a:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800a92e:	b10b      	cbz	r3, 800a934 <MSC_BOT_Abort+0x20>
      (hmsc->cbw.dDataLength != 0U) &&
 800a930:	7a6b      	ldrb	r3, [r5, #9]
 800a932:	b143      	cbz	r3, 800a946 <MSC_BOT_Abort+0x32>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a934:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <MSC_BOT_Abort+0x54>)
 800a936:	7819      	ldrb	r1, [r3, #0]
 800a938:	4620      	mov	r0, r4
 800a93a:	f003 fd56 	bl	800e3ea <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800a93e:	7a6b      	ldrb	r3, [r5, #9]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d005      	beq.n	800a950 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
}
 800a944:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a946:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <MSC_BOT_Abort+0x58>)
 800a948:	7819      	ldrb	r1, [r3, #0]
 800a94a:	f003 fd4e 	bl	800e3ea <USBD_LL_StallEP>
 800a94e:	e7f1      	b.n	800a934 <MSC_BOT_Abort+0x20>
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a950:	4b05      	ldr	r3, [pc, #20]	@ (800a968 <MSC_BOT_Abort+0x54>)
 800a952:	7819      	ldrb	r1, [r3, #0]
 800a954:	4620      	mov	r0, r4
 800a956:	f003 fd48 	bl	800e3ea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a95a:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <MSC_BOT_Abort+0x58>)
 800a95c:	7819      	ldrb	r1, [r3, #0]
 800a95e:	4620      	mov	r0, r4
 800a960:	f003 fd43 	bl	800e3ea <USBD_LL_StallEP>
 800a964:	e7ee      	b.n	800a944 <MSC_BOT_Abort+0x30>
 800a966:	bf00      	nop
 800a968:	20000016 	.word	0x20000016
 800a96c:	20000015 	.word	0x20000015

0800a970 <MSC_BOT_Init>:
{
 800a970:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a972:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a976:	33b0      	adds	r3, #176	@ 0xb0
 800a978:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800a97c:	b315      	cbz	r5, 800a9c4 <MSC_BOT_Init+0x54>
 800a97e:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 800a980:	2000      	movs	r0, #0
 800a982:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a984:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 800a986:	f885 0261 	strb.w	r0, [r5, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800a98a:	f885 0260 	strb.w	r0, [r5, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a98e:	f885 0262 	strb.w	r0, [r5, #610]	@ 0x262
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800a992:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a996:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800a9a2:	4e09      	ldr	r6, [pc, #36]	@ (800a9c8 <MSC_BOT_Init+0x58>)
 800a9a4:	7831      	ldrb	r1, [r6, #0]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f003 fd17 	bl	800e3da <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <MSC_BOT_Init+0x5c>)
 800a9ae:	7819      	ldrb	r1, [r3, #0]
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f003 fd12 	bl	800e3da <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a9b6:	231f      	movs	r3, #31
 800a9b8:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800a9bc:	7831      	ldrb	r1, [r6, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f003 fd33 	bl	800e42a <USBD_LL_PrepareReceive>
}
 800a9c4:	bd70      	pop	{r4, r5, r6, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000015 	.word	0x20000015
 800a9cc:	20000016 	.word	0x20000016

0800a9d0 <MSC_BOT_Reset>:
{
 800a9d0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a9d6:	33b0      	adds	r3, #176	@ 0xb0
 800a9d8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800a9dc:	b1a5      	cbz	r5, 800aa08 <MSC_BOT_Reset+0x38>
 800a9de:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	722b      	strb	r3, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	726b      	strb	r3, [r5, #9]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800a9e8:	4b08      	ldr	r3, [pc, #32]	@ (800aa0c <MSC_BOT_Reset+0x3c>)
 800a9ea:	7819      	ldrb	r1, [r3, #0]
 800a9ec:	f003 fd05 	bl	800e3fa <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800a9f0:	4e07      	ldr	r6, [pc, #28]	@ (800aa10 <MSC_BOT_Reset+0x40>)
 800a9f2:	7831      	ldrb	r1, [r6, #0]
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f003 fd00 	bl	800e3fa <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a9fa:	231f      	movs	r3, #31
 800a9fc:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800aa00:	7831      	ldrb	r1, [r6, #0]
 800aa02:	4620      	mov	r0, r4
 800aa04:	f003 fd11 	bl	800e42a <USBD_LL_PrepareReceive>
}
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000016 	.word	0x20000016
 800aa10:	20000015 	.word	0x20000015

0800aa14 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa14:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aa18:	33b0      	adds	r3, #176	@ 0xb0
 800aa1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 800aa1e:	b10b      	cbz	r3, 800aa24 <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 800aa20:	2200      	movs	r2, #0
 800aa22:	721a      	strb	r2, [r3, #8]
}
 800aa24:	4770      	bx	lr
	...

0800aa28 <MSC_BOT_SendCSW>:
{
 800aa28:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa2a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aa2e:	33b0      	adds	r3, #176	@ 0xb0
 800aa30:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800aa34:	b1b5      	cbz	r5, 800aa64 <MSC_BOT_SendCSW+0x3c>
 800aa36:	4604      	mov	r4, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800aa38:	4b0b      	ldr	r3, [pc, #44]	@ (800aa68 <MSC_BOT_SendCSW+0x40>)
 800aa3a:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800aa3e:	f885 123c 	strb.w	r1, [r5, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800aa46:	230d      	movs	r3, #13
 800aa48:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 800aa4c:	4907      	ldr	r1, [pc, #28]	@ (800aa6c <MSC_BOT_SendCSW+0x44>)
 800aa4e:	7809      	ldrb	r1, [r1, #0]
 800aa50:	f003 fce3 	bl	800e41a <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800aa54:	231f      	movs	r3, #31
 800aa56:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800aa5a:	4905      	ldr	r1, [pc, #20]	@ (800aa70 <MSC_BOT_SendCSW+0x48>)
 800aa5c:	7809      	ldrb	r1, [r1, #0]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f003 fce3 	bl	800e42a <USBD_LL_PrepareReceive>
}
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	53425355 	.word	0x53425355
 800aa6c:	20000016 	.word	0x20000016
 800aa70:	20000015 	.word	0x20000015

0800aa74 <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa74:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aa78:	33b0      	adds	r3, #176	@ 0xb0
 800aa7a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800aa7e:	b1c9      	cbz	r1, 800aab4 <MSC_BOT_DataIn+0x40>
{
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 800aa84:	7a0b      	ldrb	r3, [r1, #8]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d007      	beq.n	800aa9a <MSC_BOT_DataIn+0x26>
 800aa8a:	3b03      	subs	r3, #3
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d802      	bhi.n	800aa98 <MSC_BOT_DataIn+0x24>
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aa92:	2100      	movs	r1, #0
 800aa94:	f7ff ffc8 	bl	800aa28 <MSC_BOT_SendCSW>
}
 800aa98:	bd10      	pop	{r4, pc}
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aa9a:	f201 221f 	addw	r2, r1, #543	@ 0x21f
 800aa9e:	f891 121d 	ldrb.w	r1, [r1, #541]	@ 0x21d
 800aaa2:	f000 f9b9 	bl	800ae18 <SCSI_ProcessCmd>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	daf6      	bge.n	800aa98 <MSC_BOT_DataIn+0x24>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aaaa:	2101      	movs	r1, #1
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7ff ffbb 	bl	800aa28 <MSC_BOT_SendCSW>
 800aab2:	e7f1      	b.n	800aa98 <MSC_BOT_DataIn+0x24>
 800aab4:	4770      	bx	lr
	...

0800aab8 <MSC_BOT_DataOut>:
{
 800aab8:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaba:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aabe:	33b0      	adds	r3, #176	@ 0xb0
 800aac0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800aac4:	b125      	cbz	r5, 800aad0 <MSC_BOT_DataOut+0x18>
 800aac6:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 800aac8:	7a2b      	ldrb	r3, [r5, #8]
 800aaca:	b113      	cbz	r3, 800aad2 <MSC_BOT_DataOut+0x1a>
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d067      	beq.n	800aba0 <MSC_BOT_DataOut+0xe8>
}
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800aad2:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 800aad6:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800aada:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800aade:	f8c5 3238 	str.w	r3, [r5, #568]	@ 0x238
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800aae2:	4b36      	ldr	r3, [pc, #216]	@ (800abbc <MSC_BOT_DataOut+0x104>)
 800aae4:	7819      	ldrb	r1, [r3, #0]
 800aae6:	f003 fc3a 	bl	800e35e <USBD_LL_GetRxDataSize>
 800aaea:	281f      	cmp	r0, #31
 800aaec:	d104      	bne.n	800aaf8 <MSC_BOT_DataOut+0x40>
 800aaee:	f8d5 2210 	ldr.w	r2, [r5, #528]	@ 0x210
 800aaf2:	4b33      	ldr	r3, [pc, #204]	@ (800abc0 <MSC_BOT_DataOut+0x108>)
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d00c      	beq.n	800ab12 <MSC_BOT_DataOut+0x5a>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aaf8:	2320      	movs	r3, #32
 800aafa:	2205      	movs	r2, #5
 800aafc:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 f89a 	bl	800ac3a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ab06:	2302      	movs	r3, #2
 800ab08:	726b      	strb	r3, [r5, #9]
    MSC_BOT_Abort(pdev);
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7ff ff02 	bl	800a914 <MSC_BOT_Abort>
 800ab10:	e7de      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ab12:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ab16:	2901      	cmp	r1, #1
 800ab18:	d8ee      	bhi.n	800aaf8 <MSC_BOT_DataOut+0x40>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ab1a:	f895 321e 	ldrb.w	r3, [r5, #542]	@ 0x21e
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d8e8      	bhi.n	800aaf8 <MSC_BOT_DataOut+0x40>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab26:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 f974 	bl	800ae18 <SCSI_ProcessCmd>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	db24      	blt.n	800ab7e <MSC_BOT_DataOut+0xc6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ab34:	7a2b      	ldrb	r3, [r5, #8]
 800ab36:	3b01      	subs	r3, #1
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d9c8      	bls.n	800aad0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 800ab3e:	68eb      	ldr	r3, [r5, #12]
 800ab40:	b34b      	cbz	r3, 800ab96 <MSC_BOT_DataOut+0xde>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab42:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 800ab46:	32b0      	adds	r2, #176	@ 0xb0
 800ab48:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  if (hmsc == NULL)
 800ab4c:	2a00      	cmp	r2, #0
 800ab4e:	d0bf      	beq.n	800aad0 <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 800ab50:	f8d2 0218 	ldr.w	r0, [r2, #536]	@ 0x218
  hmsc->csw.dDataResidue -= len;
 800ab54:	f8d2 1238 	ldr.w	r1, [r2, #568]	@ 0x238
 800ab58:	1ac9      	subs	r1, r1, r3
 800ab5a:	f8c2 1238 	str.w	r1, [r2, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ab5e:	2100      	movs	r1, #0
 800ab60:	f882 123c 	strb.w	r1, [r2, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ab64:	2104      	movs	r1, #4
 800ab66:	7211      	strb	r1, [r2, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	bf28      	it	cs
 800ab6c:	4603      	movcs	r3, r0
 800ab6e:	f105 0210 	add.w	r2, r5, #16
 800ab72:	4914      	ldr	r1, [pc, #80]	@ (800abc4 <MSC_BOT_DataOut+0x10c>)
 800ab74:	7809      	ldrb	r1, [r1, #0]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f003 fc4f 	bl	800e41a <USBD_LL_Transmit>
 800ab7c:	e7a8      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ab7e:	7a2b      	ldrb	r3, [r5, #8]
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d003      	beq.n	800ab8c <MSC_BOT_DataOut+0xd4>
        MSC_BOT_Abort(pdev);
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7ff fec5 	bl	800a914 <MSC_BOT_Abort>
 800ab8a:	e7a1      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f7ff ff4a 	bl	800aa28 <MSC_BOT_SendCSW>
 800ab94:	e79c      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ab96:	2100      	movs	r1, #0
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f7ff ff45 	bl	800aa28 <MSC_BOT_SendCSW>
 800ab9e:	e797      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aba0:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800aba4:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800aba8:	f000 f936 	bl	800ae18 <SCSI_ProcessCmd>
 800abac:	2800      	cmp	r0, #0
 800abae:	da8f      	bge.n	800aad0 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800abb0:	2101      	movs	r1, #1
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff ff38 	bl	800aa28 <MSC_BOT_SendCSW>
 800abb8:	e78a      	b.n	800aad0 <MSC_BOT_DataOut+0x18>
 800abba:	bf00      	nop
 800abbc:	20000015 	.word	0x20000015
 800abc0:	43425355 	.word	0x43425355
 800abc4:	20000016 	.word	0x20000016

0800abc8 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abc8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800abcc:	33b0      	adds	r3, #176	@ 0xb0
 800abce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800abd2:	b1bb      	cbz	r3, 800ac04 <MSC_BOT_CplClrFeature+0x3c>
{
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4604      	mov	r4, r0
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800abd8:	7a5b      	ldrb	r3, [r3, #9]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d008      	beq.n	800abf0 <MSC_BOT_CplClrFeature+0x28>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800abde:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800abe2:	d004      	beq.n	800abee <MSC_BOT_CplClrFeature+0x26>
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d002      	beq.n	800abee <MSC_BOT_CplClrFeature+0x26>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800abe8:	2101      	movs	r1, #1
 800abea:	f7ff ff1d 	bl	800aa28 <MSC_BOT_SendCSW>
  }
  else
  {
    return;
  }
}
 800abee:	bd10      	pop	{r4, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800abf0:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <MSC_BOT_CplClrFeature+0x40>)
 800abf2:	7819      	ldrb	r1, [r3, #0]
 800abf4:	f003 fbf9 	bl	800e3ea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800abf8:	4b04      	ldr	r3, [pc, #16]	@ (800ac0c <MSC_BOT_CplClrFeature+0x44>)
 800abfa:	7819      	ldrb	r1, [r3, #0]
 800abfc:	4620      	mov	r0, r4
 800abfe:	f003 fbf4 	bl	800e3ea <USBD_LL_StallEP>
 800ac02:	e7f4      	b.n	800abee <MSC_BOT_CplClrFeature+0x26>
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000016 	.word	0x20000016
 800ac0c:	20000015 	.word	0x20000015

0800ac10 <SCSI_UpdateBotData>:
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
  uint16_t len = length;

  if (hmsc == NULL)
 800ac10:	b170      	cbz	r0, 800ac30 <SCSI_UpdateBotData+0x20>
  {
    return -1;
  }

  hmsc->bot_data_length = len;
 800ac12:	60c2      	str	r2, [r0, #12]

  while (len != 0U)
 800ac14:	b17a      	cbz	r2, 800ac36 <SCSI_UpdateBotData+0x26>
 800ac16:	188b      	adds	r3, r1, r2
 800ac18:	3a01      	subs	r2, #1
 800ac1a:	b292      	uxth	r2, r2
 800ac1c:	3211      	adds	r2, #17
 800ac1e:	4402      	add	r2, r0
  {
    len--;
    hmsc->bot_data[len] = pBuff[len];
 800ac20:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 800ac24:	f802 0d01 	strb.w	r0, [r2, #-1]!
  while (len != 0U)
 800ac28:	428b      	cmp	r3, r1
 800ac2a:	d1f9      	bne.n	800ac20 <SCSI_UpdateBotData+0x10>
  }

  return 0;
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	4770      	bx	lr
    return -1;
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	4770      	bx	lr
  return 0;
 800ac36:	2000      	movs	r0, #0
}
 800ac38:	4770      	bx	lr

0800ac3a <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac3a:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 800ac3e:	31b0      	adds	r1, #176	@ 0xb0
 800ac40:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  if (hmsc == NULL)
 800ac44:	b1a0      	cbz	r0, 800ac70 <SCSI_SenseCode+0x36>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ac46:	f890 1261 	ldrb.w	r1, [r0, #609]	@ 0x261
 800ac4a:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 800ac4e:	f88c 2240 	strb.w	r2, [ip, #576]	@ 0x240
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ac52:	f88c 3244 	strb.w	r3, [ip, #580]	@ 0x244
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	f88c 3245 	strb.w	r3, [ip, #581]	@ 0x245
  hmsc->scsi_sense_tail++;
 800ac5c:	3101      	adds	r1, #1
 800ac5e:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ac60:	2904      	cmp	r1, #4
 800ac62:	d002      	beq.n	800ac6a <SCSI_SenseCode+0x30>
  hmsc->scsi_sense_tail++;
 800ac64:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 800ac68:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f880 3261 	strb.w	r3, [r0, #609]	@ 0x261
}
 800ac70:	4770      	bx	lr

0800ac72 <SCSI_CheckAddressRange>:
{
 800ac72:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac74:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 800ac78:	f104 0cb0 	add.w	ip, r4, #176	@ 0xb0
 800ac7c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
  if (hmsc == NULL)
 800ac80:	b174      	cbz	r4, 800aca0 <SCSI_CheckAddressRange+0x2e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ac82:	441a      	add	r2, r3
 800ac84:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 800ac88:	429a      	cmp	r2, r3
  return 0;
 800ac8a:	bf98      	it	ls
 800ac8c:	2000      	movls	r0, #0
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ac8e:	d800      	bhi.n	800ac92 <SCSI_CheckAddressRange+0x20>
}
 800ac90:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ac92:	2321      	movs	r3, #33	@ 0x21
 800ac94:	2205      	movs	r2, #5
 800ac96:	f7ff ffd0 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800ac9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9e:	e7f7      	b.n	800ac90 <SCSI_CheckAddressRange+0x1e>
    return -1;
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e7f4      	b.n	800ac90 <SCSI_CheckAddressRange+0x1e>
	...

0800aca8 <SCSI_ProcessRead>:
{
 800aca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acac:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800acb0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800acb4:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 800acb8:	2c00      	cmp	r4, #0
 800acba:	d044      	beq.n	800ad46 <SCSI_ProcessRead+0x9e>
 800acbc:	4606      	mov	r6, r0
 800acbe:	460f      	mov	r7, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800acc0:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800acc4:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 800acc8:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800accc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800acd0:	bf28      	it	cs
 800acd2:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800acd6:	f104 0810 	add.w	r8, r4, #16
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800acda:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800acde:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 800ace2:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800acec:	4641      	mov	r1, r8
 800acee:	4638      	mov	r0, r7
 800acf0:	47c8      	blx	r9
 800acf2:	2800      	cmp	r0, #0
 800acf4:	db1e      	blt.n	800ad34 <SCSI_ProcessRead+0x8c>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800acf6:	462b      	mov	r3, r5
 800acf8:	4642      	mov	r2, r8
 800acfa:	4916      	ldr	r1, [pc, #88]	@ (800ad54 <SCSI_ProcessRead+0xac>)
 800acfc:	7809      	ldrb	r1, [r1, #0]
 800acfe:	4630      	mov	r0, r6
 800ad00:	f003 fb8b 	bl	800e41a <USBD_LL_Transmit>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad04:	f8b4 2264 	ldrh.w	r2, [r4, #612]	@ 0x264
 800ad08:	fbb5 f2f2 	udiv	r2, r5, r2
 800ad0c:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 800ad10:	4413      	add	r3, r2
 800ad12:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ad16:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 800ad20:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 800ad24:	1b52      	subs	r2, r2, r5
 800ad26:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 800ad2a:	b97b      	cbnz	r3, 800ad4c <SCSI_ProcessRead+0xa4>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	7223      	strb	r3, [r4, #8]
  return 0;
 800ad30:	2000      	movs	r0, #0
 800ad32:	e00c      	b.n	800ad4e <SCSI_ProcessRead+0xa6>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ad34:	2311      	movs	r3, #17
 800ad36:	2204      	movs	r2, #4
 800ad38:	4639      	mov	r1, r7
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ff7d 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	e003      	b.n	800ad4e <SCSI_ProcessRead+0xa6>
    return -1;
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	e000      	b.n	800ad4e <SCSI_ProcessRead+0xa6>
  return 0;
 800ad4c:	2000      	movs	r0, #0
}
 800ad4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad52:	bf00      	nop
 800ad54:	20000016 	.word	0x20000016

0800ad58 <SCSI_ProcessWrite>:
{
 800ad58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad5c:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800ad60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ad64:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 800ad68:	2c00      	cmp	r4, #0
 800ad6a:	d04f      	beq.n	800ae0c <SCSI_ProcessWrite+0xb4>
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	4688      	mov	r8, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad70:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800ad74:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 800ad78:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800ad7c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800ad80:	bf28      	it	cs
 800ad82:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad86:	f104 0710 	add.w	r7, r4, #16
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ad8a:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ad8e:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 800ad92:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	4640      	mov	r0, r8
 800ada0:	47c8      	blx	r9
 800ada2:	2800      	cmp	r0, #0
 800ada4:	db1a      	blt.n	800addc <SCSI_ProcessWrite+0x84>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ada6:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800adaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800adae:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800adb2:	440a      	add	r2, r1
 800adb4:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800adb8:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800adbc:	1a52      	subs	r2, r2, r1
 800adbe:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 800adc2:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 800adc6:	1b49      	subs	r1, r1, r5
 800adc8:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 800adcc:	b97a      	cbnz	r2, 800adee <SCSI_ProcessWrite+0x96>
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800adce:	2100      	movs	r1, #0
 800add0:	4630      	mov	r0, r6
 800add2:	f7ff fe29 	bl	800aa28 <MSC_BOT_SendCSW>
  return 0;
 800add6:	2000      	movs	r0, #0
}
 800add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800addc:	2303      	movs	r3, #3
 800adde:	2204      	movs	r2, #4
 800ade0:	4641      	mov	r1, r8
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7ff ff29 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e7f4      	b.n	800add8 <SCSI_ProcessWrite+0x80>
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800adee:	fb02 f303 	mul.w	r3, r2, r3
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800adf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adf6:	bf28      	it	cs
 800adf8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800adfc:	463a      	mov	r2, r7
 800adfe:	4905      	ldr	r1, [pc, #20]	@ (800ae14 <SCSI_ProcessWrite+0xbc>)
 800ae00:	7809      	ldrb	r1, [r1, #0]
 800ae02:	4630      	mov	r0, r6
 800ae04:	f003 fb11 	bl	800e42a <USBD_LL_PrepareReceive>
  return 0;
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e7e5      	b.n	800add8 <SCSI_ProcessWrite+0x80>
    return -1;
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e7e2      	b.n	800add8 <SCSI_ProcessWrite+0x80>
 800ae12:	bf00      	nop
 800ae14:	20000015 	.word	0x20000015

0800ae18 <SCSI_ProcessCmd>:
{
 800ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1c:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae1e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ae22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ae26:	f8d3 42c0 	ldr.w	r4, [r3, #704]	@ 0x2c0
  if (hmsc == NULL)
 800ae2a:	2c00      	cmp	r4, #0
 800ae2c:	f000 8436 	beq.w	800b69c <SCSI_ProcessCmd+0x884>
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	4615      	mov	r5, r2
  switch (cmd[0])
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	2a5a      	cmp	r2, #90	@ 0x5a
 800ae3a:	d85f      	bhi.n	800aefc <SCSI_ProcessCmd+0xe4>
 800ae3c:	2a5a      	cmp	r2, #90	@ 0x5a
 800ae3e:	f200 8422 	bhi.w	800b686 <SCSI_ProcessCmd+0x86e>
 800ae42:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ae46:	00a9      	.short	0x00a9
 800ae48:	04200420 	.word	0x04200420
 800ae4c:	042000d7 	.word	0x042000d7
 800ae50:	04200420 	.word	0x04200420
 800ae54:	04200420 	.word	0x04200420
 800ae58:	04200420 	.word	0x04200420
 800ae5c:	04200420 	.word	0x04200420
 800ae60:	04200420 	.word	0x04200420
 800ae64:	04200420 	.word	0x04200420
 800ae68:	01120420 	.word	0x01120420
 800ae6c:	04200420 	.word	0x04200420
 800ae70:	04200420 	.word	0x04200420
 800ae74:	04200420 	.word	0x04200420
 800ae78:	01890420 	.word	0x01890420
 800ae7c:	04200152 	.word	0x04200152
 800ae80:	017c0420 	.word	0x017c0420
 800ae84:	04200420 	.word	0x04200420
 800ae88:	04200420 	.word	0x04200420
 800ae8c:	042001b5 	.word	0x042001b5
 800ae90:	042001ed 	.word	0x042001ed
 800ae94:	02240420 	.word	0x02240420
 800ae98:	02f70420 	.word	0x02f70420
 800ae9c:	04200420 	.word	0x04200420
 800aea0:	04200420 	.word	0x04200420
 800aea4:	04200407 	.word	0x04200407
 800aea8:	04200420 	.word	0x04200420
 800aeac:	04200420 	.word	0x04200420
 800aeb0:	04200420 	.word	0x04200420
 800aeb4:	04200420 	.word	0x04200420
 800aeb8:	04200420 	.word	0x04200420
 800aebc:	04200420 	.word	0x04200420
 800aec0:	04200420 	.word	0x04200420
 800aec4:	04200420 	.word	0x04200420
 800aec8:	04200420 	.word	0x04200420
 800aecc:	04200420 	.word	0x04200420
 800aed0:	04200420 	.word	0x04200420
 800aed4:	04200420 	.word	0x04200420
 800aed8:	04200420 	.word	0x04200420
 800aedc:	04200420 	.word	0x04200420
 800aee0:	04200420 	.word	0x04200420
 800aee4:	04200420 	.word	0x04200420
 800aee8:	04200420 	.word	0x04200420
 800aeec:	04200420 	.word	0x04200420
 800aef0:	04200420 	.word	0x04200420
 800aef4:	04200420 	.word	0x04200420
 800aef8:	019f0420 	.word	0x019f0420
 800aefc:	2aa8      	cmp	r2, #168	@ 0xa8
 800aefe:	f000 8231 	beq.w	800b364 <SCSI_ProcessCmd+0x54c>
 800af02:	2aaa      	cmp	r2, #170	@ 0xaa
 800af04:	f000 8319 	beq.w	800b53a <SCSI_ProcessCmd+0x722>
 800af08:	2a9e      	cmp	r2, #158	@ 0x9e
 800af0a:	f040 83bc 	bne.w	800b686 <SCSI_ProcessCmd+0x86e>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800af0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800af18:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800af1c:	4638      	mov	r0, r7
 800af1e:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800af20:	4680      	mov	r8, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	f040 81aa 	bne.w	800b27c <SCSI_ProcessCmd+0x464>
 800af28:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	f000 81a5 	beq.w	800b27c <SCSI_ProcessCmd+0x464>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af32:	7aab      	ldrb	r3, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 800af34:	7aea      	ldrb	r2, [r5, #11]
 800af36:	0412      	lsls	r2, r2, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af38:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[13];
 800af3c:	7b6b      	ldrb	r3, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 800af3e:	431a      	orrs	r2, r3
 800af40:	7b2b      	ldrb	r3, [r5, #12]
 800af42:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af46:	60e2      	str	r2, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800af48:	b13a      	cbz	r2, 800af5a <SCSI_ProcessCmd+0x142>
 800af4a:	f104 030f 	add.w	r3, r4, #15
 800af4e:	441a      	add	r2, r3
    hmsc->bot_data[idx] = 0U;
 800af50:	2100      	movs	r1, #0
 800af52:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800af56:	429a      	cmp	r2, r3
 800af58:	d1fb      	bne.n	800af52 <SCSI_ProcessCmd+0x13a>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800af5a:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 800af5e:	1e53      	subs	r3, r2, #1
 800af60:	0e19      	lsrs	r1, r3, #24
 800af62:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800af64:	0c19      	lsrs	r1, r3, #16
 800af66:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800af68:	0a1b      	lsrs	r3, r3, #8
 800af6a:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800af6c:	3a01      	subs	r2, #1
 800af6e:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800af70:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800af74:	2200      	movs	r2, #0
 800af76:	7622      	strb	r2, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800af78:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800af7a:	0a1a      	lsrs	r2, r3, #8
 800af7c:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800af7e:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af80:	7aaa      	ldrb	r2, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 800af82:	7aeb      	ldrb	r3, [r5, #11]
 800af84:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                          (uint32_t)params[13];
 800af8a:	7b6a      	ldrb	r2, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 800af8c:	4313      	orrs	r3, r2
 800af8e:	7b2a      	ldrb	r2, [r5, #12]
 800af90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800af94:	60e3      	str	r3, [r4, #12]
  return 0;
 800af96:	e0db      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength != 0U)
 800af98:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800af9c:	b96a      	cbnz	r2, 800afba <SCSI_ProcessCmd+0x1a2>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800af9e:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800afa2:	2a02      	cmp	r2, #2
 800afa4:	d012      	beq.n	800afcc <SCSI_ProcessCmd+0x1b4>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800afa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4638      	mov	r0, r7
 800afae:	4798      	blx	r3
 800afb0:	4680      	mov	r8, r0
 800afb2:	b9a0      	cbnz	r0, 800afde <SCSI_ProcessCmd+0x1c6>
  hmsc->bot_data_length = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60e3      	str	r3, [r4, #12]
  return 0;
 800afb8:	e0ca      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800afba:	2320      	movs	r3, #32
 800afbc:	2205      	movs	r2, #5
 800afbe:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800afc2:	f7ff fe3a 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800afc6:	f04f 38ff 	mov.w	r8, #4294967295
 800afca:	e0c1      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800afcc:	233a      	movs	r3, #58	@ 0x3a
 800afce:	4639      	mov	r1, r7
 800afd0:	f7ff fe33 	bl	800ac3a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800afd4:	2305      	movs	r3, #5
 800afd6:	7223      	strb	r3, [r4, #8]
    return -1;
 800afd8:	f04f 38ff 	mov.w	r8, #4294967295
 800afdc:	e0b8      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800afde:	233a      	movs	r3, #58	@ 0x3a
 800afe0:	2202      	movs	r2, #2
 800afe2:	4639      	mov	r1, r7
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7ff fe28 	bl	800ac3a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800afea:	2305      	movs	r3, #5
 800afec:	7223      	strb	r3, [r4, #8]
    return -1;
 800afee:	f04f 38ff 	mov.w	r8, #4294967295
 800aff2:	e0ad      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength == 0U)
 800aff4:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800aff8:	b373      	cbz	r3, 800b058 <SCSI_ProcessCmd+0x240>
 800affa:	f104 030f 	add.w	r3, r4, #15
 800affe:	f104 0121 	add.w	r1, r4, #33	@ 0x21
    hmsc->bot_data[i] = 0U;
 800b002:	2200      	movs	r2, #0
 800b004:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b008:	4299      	cmp	r1, r3
 800b00a:	d1fb      	bne.n	800b004 <SCSI_ProcessCmd+0x1ec>
  hmsc->bot_data[0] = 0x70U;
 800b00c:	2370      	movs	r3, #112	@ 0x70
 800b00e:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b010:	230c      	movs	r3, #12
 800b012:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b014:	f894 3260 	ldrb.w	r3, [r4, #608]	@ 0x260
 800b018:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d011      	beq.n	800b044 <SCSI_ProcessCmd+0x22c>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b020:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800b024:	f892 1240 	ldrb.w	r1, [r2, #576]	@ 0x240
 800b028:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b02a:	f892 1244 	ldrb.w	r1, [r2, #580]	@ 0x244
 800b02e:	7721      	strb	r1, [r4, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b030:	f892 2245 	ldrb.w	r2, [r2, #581]	@ 0x245
 800b034:	7762      	strb	r2, [r4, #29]
    hmsc->scsi_sense_head++;
 800b036:	3301      	adds	r3, #1
 800b038:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b03a:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0U;
 800b03c:	bf08      	it	eq
 800b03e:	2300      	moveq	r3, #0
 800b040:	f884 3260 	strb.w	r3, [r4, #608]	@ 0x260
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b044:	2312      	movs	r3, #18
 800b046:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b048:	792b      	ldrb	r3, [r5, #4]
 800b04a:	2b12      	cmp	r3, #18
 800b04c:	f200 8329 	bhi.w	800b6a2 <SCSI_ProcessCmd+0x88a>
    hmsc->bot_data_length = params[4];
 800b050:	60e3      	str	r3, [r4, #12]
  return 0;
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	e07b      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b058:	2320      	movs	r3, #32
 800b05a:	2205      	movs	r2, #5
 800b05c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b060:	f7ff fdeb 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b064:	f04f 38ff 	mov.w	r8, #4294967295
 800b068:	e072      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength == 0U)
 800b06a:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b06e:	b17a      	cbz	r2, 800b090 <SCSI_ProcessCmd+0x278>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b070:	786a      	ldrb	r2, [r5, #1]
 800b072:	f012 0f01 	tst.w	r2, #1
 800b076:	d025      	beq.n	800b0c4 <SCSI_ProcessCmd+0x2ac>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b078:	78ab      	ldrb	r3, [r5, #2]
 800b07a:	b193      	cbz	r3, 800b0a2 <SCSI_ProcessCmd+0x28a>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b07c:	2b80      	cmp	r3, #128	@ 0x80
 800b07e:	d118      	bne.n	800b0b2 <SCSI_ProcessCmd+0x29a>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b080:	2208      	movs	r2, #8
 800b082:	49b4      	ldr	r1, [pc, #720]	@ (800b354 <SCSI_ProcessCmd+0x53c>)
 800b084:	4620      	mov	r0, r4
 800b086:	f7ff fdc3 	bl	800ac10 <SCSI_UpdateBotData>
  return 0;
 800b08a:	f04f 0800 	mov.w	r8, #0
 800b08e:	e05f      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b090:	2320      	movs	r3, #32
 800b092:	2205      	movs	r2, #5
 800b094:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b098:	f7ff fdcf 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b09c:	f04f 38ff 	mov.w	r8, #4294967295
 800b0a0:	e056      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b0a2:	2206      	movs	r2, #6
 800b0a4:	49ac      	ldr	r1, [pc, #688]	@ (800b358 <SCSI_ProcessCmd+0x540>)
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7ff fdb2 	bl	800ac10 <SCSI_UpdateBotData>
  return 0;
 800b0ac:	f04f 0800 	mov.w	r8, #0
 800b0b0:	e04e      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b0b2:	2324      	movs	r3, #36	@ 0x24
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b0ba:	f7ff fdbe 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b0be:	f04f 38ff 	mov.w	r8, #4294967295
 800b0c2:	e045      	b.n	800b150 <SCSI_ProcessCmd+0x338>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b0c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0c8:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b0cc:	69d9      	ldr	r1, [r3, #28]
 800b0ce:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 800b0d2:	790b      	ldrb	r3, [r1, #4]
    if (params[4] <= len)
 800b0d4:	3305      	adds	r3, #5
 800b0d6:	792a      	ldrb	r2, [r5, #4]
    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bf28      	it	cs
 800b0dc:	461a      	movcs	r2, r3
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff fd96 	bl	800ac10 <SCSI_UpdateBotData>
  return 0;
 800b0e4:	f04f 0800 	mov.w	r8, #0
 800b0e8:	e032      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b0ea:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d009      	beq.n	800b106 <SCSI_ProcessCmd+0x2ee>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b0f2:	792b      	ldrb	r3, [r5, #4]
 800b0f4:	f003 0303 	and.w	r3, r3, #3
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d01c      	beq.n	800b136 <SCSI_ProcessCmd+0x31e>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d109      	bne.n	800b114 <SCSI_ProcessCmd+0x2fc>
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b100:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 800b104:	e00b      	b.n	800b11e <SCSI_ProcessCmd+0x306>
 800b106:	792b      	ldrb	r3, [r5, #4]
 800b108:	f003 0303 	and.w	r3, r3, #3
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d00a      	beq.n	800b126 <SCSI_ProcessCmd+0x30e>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b110:	2b01      	cmp	r3, #1
 800b112:	d010      	beq.n	800b136 <SCSI_ProcessCmd+0x31e>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b114:	2b03      	cmp	r3, #3
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b116:	bf04      	itt	eq
 800b118:	2300      	moveq	r3, #0
 800b11a:	f884 3262 	strbeq.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	60e3      	str	r3, [r4, #12]
  return 0;
 800b122:	4698      	mov	r8, r3
 800b124:	e014      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b126:	2324      	movs	r3, #36	@ 0x24
 800b128:	2205      	movs	r2, #5
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7ff fd85 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b130:	f04f 38ff 	mov.w	r8, #4294967295
 800b134:	e00c      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b136:	2300      	movs	r3, #0
 800b138:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 800b13c:	e7ef      	b.n	800b11e <SCSI_ProcessCmd+0x306>
  if (params[4] == 0U)
 800b13e:	792b      	ldrb	r3, [r5, #4]
 800b140:	3b00      	subs	r3, #0
 800b142:	bf18      	it	ne
 800b144:	2301      	movne	r3, #1
 800b146:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60e3      	str	r3, [r4, #12]
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800b14e:	4698      	mov	r8, r3
}
 800b150:	4640      	mov	r0, r8
 800b152:	b002      	add	sp, #8
 800b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b158:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	4638      	mov	r0, r7
 800b160:	4798      	blx	r3
 800b162:	b120      	cbz	r0, 800b16e <SCSI_ProcessCmd+0x356>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800b164:	4a7d      	ldr	r2, [pc, #500]	@ (800b35c <SCSI_ProcessCmd+0x544>)
 800b166:	7893      	ldrb	r3, [r2, #2]
 800b168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b16c:	7093      	strb	r3, [r2, #2]
  if (params[4] <= len)
 800b16e:	792a      	ldrb	r2, [r5, #4]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b170:	2a04      	cmp	r2, #4
 800b172:	bf28      	it	cs
 800b174:	2204      	movcs	r2, #4
 800b176:	4979      	ldr	r1, [pc, #484]	@ (800b35c <SCSI_ProcessCmd+0x544>)
 800b178:	4620      	mov	r0, r4
 800b17a:	f7ff fd49 	bl	800ac10 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800b17e:	f04f 0800 	mov.w	r8, #0
      break;
 800b182:	e7e5      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	4638      	mov	r0, r7
 800b18c:	4798      	blx	r3
 800b18e:	b120      	cbz	r0, 800b19a <SCSI_ProcessCmd+0x382>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800b190:	4a73      	ldr	r2, [pc, #460]	@ (800b360 <SCSI_ProcessCmd+0x548>)
 800b192:	78d3      	ldrb	r3, [r2, #3]
 800b194:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b198:	70d3      	strb	r3, [r2, #3]
  if (params[8] <= len)
 800b19a:	7a2a      	ldrb	r2, [r5, #8]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b19c:	2a08      	cmp	r2, #8
 800b19e:	bf28      	it	cs
 800b1a0:	2208      	movcs	r2, #8
 800b1a2:	496f      	ldr	r1, [pc, #444]	@ (800b360 <SCSI_ProcessCmd+0x548>)
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7ff fd33 	bl	800ac10 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800b1aa:	f04f 0800 	mov.w	r8, #0
      break;
 800b1ae:	e7cf      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b1b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	f10d 0202 	add.w	r2, sp, #2
 800b1ba:	a901      	add	r1, sp, #4
 800b1bc:	4638      	mov	r0, r7
 800b1be:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	bb20      	cbnz	r0, 800b20e <SCSI_ProcessCmd+0x3f6>
 800b1c4:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d020      	beq.n	800b20e <SCSI_ProcessCmd+0x3f6>
 800b1cc:	f104 030f 	add.w	r3, r4, #15
 800b1d0:	f104 011b 	add.w	r1, r4, #27
    hmsc->bot_data[i] = 0U;
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < 12U ; i++)
 800b1da:	428b      	cmp	r3, r1
 800b1dc:	d1fb      	bne.n	800b1d6 <SCSI_ProcessCmd+0x3be>
  hmsc->bot_data[3] = 0x08U;
 800b1de:	2308      	movs	r3, #8
 800b1e0:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b1e2:	9a01      	ldr	r2, [sp, #4]
 800b1e4:	1e53      	subs	r3, r2, #1
 800b1e6:	0e19      	lsrs	r1, r3, #24
 800b1e8:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b1ea:	0c19      	lsrs	r1, r3, #16
 800b1ec:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b1f2:	3a01      	subs	r2, #1
 800b1f4:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = 0x02U;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	7623      	strb	r3, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b1fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b1fe:	2200      	movs	r2, #0
 800b200:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b202:	0a1a      	lsrs	r2, r3, #8
 800b204:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b206:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = 12U;
 800b208:	230c      	movs	r3, #12
 800b20a:	60e3      	str	r3, [r4, #12]
      break;
 800b20c:	e7a0      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b20e:	233a      	movs	r3, #58	@ 0x3a
 800b210:	2202      	movs	r2, #2
 800b212:	4639      	mov	r1, r7
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff fd10 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b21a:	f04f 38ff 	mov.w	r8, #4294967295
 800b21e:	e797      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b220:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800b22a:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800b22e:	4638      	mov	r0, r7
 800b230:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b232:	4680      	mov	r8, r0
 800b234:	b9c8      	cbnz	r0, 800b26a <SCSI_ProcessCmd+0x452>
 800b236:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d015      	beq.n	800b26a <SCSI_ProcessCmd+0x452>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b23e:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 800b242:	1e53      	subs	r3, r2, #1
 800b244:	0e19      	lsrs	r1, r3, #24
 800b246:	7421      	strb	r1, [r4, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b248:	0c19      	lsrs	r1, r3, #16
 800b24a:	7461      	strb	r1, [r4, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b24c:	0a1b      	lsrs	r3, r3, #8
 800b24e:	74a3      	strb	r3, [r4, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b250:	3a01      	subs	r2, #1
 800b252:	74e2      	strb	r2, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b254:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b258:	2200      	movs	r2, #0
 800b25a:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b25c:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b25e:	0a1a      	lsrs	r2, r3, #8
 800b260:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b262:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data_length = 8U;
 800b264:	2308      	movs	r3, #8
 800b266:	60e3      	str	r3, [r4, #12]
  return 0;
 800b268:	e772      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b26a:	233a      	movs	r3, #58	@ 0x3a
 800b26c:	2202      	movs	r2, #2
 800b26e:	4639      	mov	r1, r7
 800b270:	4630      	mov	r0, r6
 800b272:	f7ff fce2 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b276:	f04f 38ff 	mov.w	r8, #4294967295
 800b27a:	e769      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b27c:	233a      	movs	r3, #58	@ 0x3a
 800b27e:	2202      	movs	r2, #2
 800b280:	4639      	mov	r1, r7
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff fcd9 	bl	800ac3a <SCSI_SenseCode>
    return -1;
 800b288:	f04f 38ff 	mov.w	r8, #4294967295
 800b28c:	e760      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b28e:	7a22      	ldrb	r2, [r4, #8]
 800b290:	bb9a      	cbnz	r2, 800b2fa <SCSI_ProcessCmd+0x4e2>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b292:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b296:	2a00      	cmp	r2, #0
 800b298:	da38      	bge.n	800b30c <SCSI_ProcessCmd+0x4f4>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b29a:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b29e:	2a02      	cmp	r2, #2
 800b2a0:	d03d      	beq.n	800b31e <SCSI_ProcessCmd+0x506>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b2a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	4798      	blx	r3
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d13d      	bne.n	800b32c <SCSI_ProcessCmd+0x514>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b2b0:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b2b2:	78ea      	ldrb	r2, [r5, #3]
 800b2b4:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b2b6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b2ba:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	792b      	ldrb	r3, [r5, #4]
 800b2c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b2c4:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b2c8:	79e9      	ldrb	r1, [r5, #7]
 800b2ca:	7a2b      	ldrb	r3, [r5, #8]
 800b2cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b2d0:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f7ff fccb 	bl	800ac72 <SCSI_CheckAddressRange>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f2c0 81e3 	blt.w	800b6a8 <SCSI_ProcessCmd+0x890>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b2e2:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b2e6:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d123      	bne.n	800b33e <SCSI_ProcessCmd+0x526>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b2fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2fe:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800b300:	4639      	mov	r1, r7
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff fcd0 	bl	800aca8 <SCSI_ProcessRead>
 800b308:	4680      	mov	r8, r0
 800b30a:	e721      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b30c:	2320      	movs	r3, #32
 800b30e:	2205      	movs	r2, #5
 800b310:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b314:	f7ff fc91 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b318:	f04f 38ff 	mov.w	r8, #4294967295
 800b31c:	e718      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b31e:	233a      	movs	r3, #58	@ 0x3a
 800b320:	4639      	mov	r1, r7
 800b322:	f7ff fc8a 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b326:	f04f 38ff 	mov.w	r8, #4294967295
 800b32a:	e711      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b32c:	233a      	movs	r3, #58	@ 0x3a
 800b32e:	2202      	movs	r2, #2
 800b330:	4639      	mov	r1, r7
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff fc81 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b338:	f04f 38ff 	mov.w	r8, #4294967295
 800b33c:	e708      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b33e:	2320      	movs	r3, #32
 800b340:	2205      	movs	r2, #5
 800b342:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff fc77 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b34c:	f04f 38ff 	mov.w	r8, #4294967295
 800b350:	e6fe      	b.n	800b150 <SCSI_ProcessCmd+0x338>
 800b352:	bf00      	nop
 800b354:	20000088 	.word	0x20000088
 800b358:	20000090 	.word	0x20000090
 800b35c:	20000084 	.word	0x20000084
 800b360:	2000007c 	.word	0x2000007c
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b364:	7a22      	ldrb	r2, [r4, #8]
 800b366:	2a00      	cmp	r2, #0
 800b368:	d139      	bne.n	800b3de <SCSI_ProcessCmd+0x5c6>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b36a:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b36e:	2a00      	cmp	r2, #0
 800b370:	da3e      	bge.n	800b3f0 <SCSI_ProcessCmd+0x5d8>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b372:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b376:	2a02      	cmp	r2, #2
 800b378:	d043      	beq.n	800b402 <SCSI_ProcessCmd+0x5ea>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b37a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	4608      	mov	r0, r1
 800b382:	4798      	blx	r3
 800b384:	2800      	cmp	r0, #0
 800b386:	d142      	bne.n	800b40e <SCSI_ProcessCmd+0x5f6>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b388:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b38a:	78ea      	ldrb	r2, [r5, #3]
 800b38c:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b38e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b392:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800b394:	431a      	orrs	r2, r3
 800b396:	792b      	ldrb	r3, [r5, #4]
 800b398:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b39c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3a0:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800b3a2:	79eb      	ldrb	r3, [r5, #7]
 800b3a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800b3aa:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	7a29      	ldrb	r1, [r5, #8]
 800b3b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3b4:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7ff fc59 	bl	800ac72 <SCSI_CheckAddressRange>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f2c0 8174 	blt.w	800b6ae <SCSI_ProcessCmd+0x896>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b3c6:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b3ca:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b3ce:	fb02 f303 	mul.w	r3, r2, r3
 800b3d2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d122      	bne.n	800b420 <SCSI_ProcessCmd+0x608>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b3de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3e2:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff fc5e 	bl	800aca8 <SCSI_ProcessRead>
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	e6af      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	2205      	movs	r2, #5
 800b3f4:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b3f8:	f7ff fc1f 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b3fc:	f04f 38ff 	mov.w	r8, #4294967295
 800b400:	e6a6      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b402:	233a      	movs	r3, #58	@ 0x3a
 800b404:	f7ff fc19 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b408:	f04f 38ff 	mov.w	r8, #4294967295
 800b40c:	e6a0      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b40e:	233a      	movs	r3, #58	@ 0x3a
 800b410:	2202      	movs	r2, #2
 800b412:	4639      	mov	r1, r7
 800b414:	4630      	mov	r0, r6
 800b416:	f7ff fc10 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b41a:	f04f 38ff 	mov.w	r8, #4294967295
 800b41e:	e697      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b420:	2320      	movs	r3, #32
 800b422:	2205      	movs	r2, #5
 800b424:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff fc06 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b42e:	f04f 38ff 	mov.w	r8, #4294967295
 800b432:	e68d      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b434:	7a22      	ldrb	r2, [r4, #8]
 800b436:	2a00      	cmp	r2, #0
 800b438:	d17a      	bne.n	800b530 <SCSI_ProcessCmd+0x718>
    if (hmsc->cbw.dDataLength == 0U)
 800b43a:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b43e:	2a00      	cmp	r2, #0
 800b440:	d048      	beq.n	800b4d4 <SCSI_ProcessCmd+0x6bc>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b442:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b446:	2a00      	cmp	r2, #0
 800b448:	db4d      	blt.n	800b4e6 <SCSI_ProcessCmd+0x6ce>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b44a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	4638      	mov	r0, r7
 800b452:	4798      	blx	r3
 800b454:	2800      	cmp	r0, #0
 800b456:	d14f      	bne.n	800b4f8 <SCSI_ProcessCmd+0x6e0>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b458:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b45c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	4638      	mov	r0, r7
 800b468:	4798      	blx	r3
 800b46a:	4680      	mov	r8, r0
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d14c      	bne.n	800b50a <SCSI_ProcessCmd+0x6f2>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b470:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b472:	78ea      	ldrb	r2, [r5, #3]
 800b474:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b476:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b47a:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800b47c:	431a      	orrs	r2, r3
 800b47e:	792b      	ldrb	r3, [r5, #4]
 800b480:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b484:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b488:	79e9      	ldrb	r1, [r5, #7]
                         (uint32_t)params[8];
 800b48a:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b48c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b490:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b494:	4639      	mov	r1, r7
 800b496:	4630      	mov	r0, r6
 800b498:	f7ff fbeb 	bl	800ac72 <SCSI_CheckAddressRange>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f2c0 8109 	blt.w	800b6b4 <SCSI_ProcessCmd+0x89c>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b4a2:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b4a6:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b4ae:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d132      	bne.n	800b51c <SCSI_ProcessCmd+0x704>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b4ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4be:	bf28      	it	cs
 800b4c0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b4c4:	f104 0210 	add.w	r2, r4, #16
 800b4c8:	497f      	ldr	r1, [pc, #508]	@ (800b6c8 <SCSI_ProcessCmd+0x8b0>)
 800b4ca:	7809      	ldrb	r1, [r1, #0]
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f002 ffac 	bl	800e42a <USBD_LL_PrepareReceive>
  return 0;
 800b4d2:	e63d      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4d4:	2320      	movs	r3, #32
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b4dc:	f7ff fbad 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b4e0:	f04f 38ff 	mov.w	r8, #4294967295
 800b4e4:	e634      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4e6:	2320      	movs	r3, #32
 800b4e8:	2205      	movs	r2, #5
 800b4ea:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b4ee:	f7ff fba4 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b4f2:	f04f 38ff 	mov.w	r8, #4294967295
 800b4f6:	e62b      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b4f8:	233a      	movs	r3, #58	@ 0x3a
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff fb9b 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b504:	f04f 38ff 	mov.w	r8, #4294967295
 800b508:	e622      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b50a:	2327      	movs	r3, #39	@ 0x27
 800b50c:	2202      	movs	r2, #2
 800b50e:	4639      	mov	r1, r7
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff fb92 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b516:	f04f 38ff 	mov.w	r8, #4294967295
 800b51a:	e619      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b51c:	2320      	movs	r3, #32
 800b51e:	2205      	movs	r2, #5
 800b520:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fb88 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b52a:	f04f 38ff 	mov.w	r8, #4294967295
 800b52e:	e60f      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    return SCSI_ProcessWrite(pdev, lun);
 800b530:	4639      	mov	r1, r7
 800b532:	f7ff fc11 	bl	800ad58 <SCSI_ProcessWrite>
 800b536:	4680      	mov	r8, r0
 800b538:	e60a      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b53a:	7a22      	ldrb	r2, [r4, #8]
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	f040 8085 	bne.w	800b64c <SCSI_ProcessCmd+0x834>
    if (hmsc->cbw.dDataLength == 0U)
 800b542:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b546:	2a00      	cmp	r2, #0
 800b548:	d04e      	beq.n	800b5e8 <SCSI_ProcessCmd+0x7d0>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b54a:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b54e:	2a00      	cmp	r2, #0
 800b550:	db53      	blt.n	800b5fa <SCSI_ProcessCmd+0x7e2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b552:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4608      	mov	r0, r1
 800b55a:	4798      	blx	r3
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d155      	bne.n	800b60c <SCSI_ProcessCmd+0x7f4>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b560:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b564:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b568:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	4638      	mov	r0, r7
 800b570:	4798      	blx	r3
 800b572:	4680      	mov	r8, r0
 800b574:	2800      	cmp	r0, #0
 800b576:	d154      	bne.n	800b622 <SCSI_ProcessCmd+0x80a>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b578:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b57a:	78ea      	ldrb	r2, [r5, #3]
 800b57c:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b57e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b582:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800b584:	431a      	orrs	r2, r3
 800b586:	792b      	ldrb	r3, [r5, #4]
 800b588:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b58c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b590:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800b592:	79eb      	ldrb	r3, [r5, #7]
 800b594:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b596:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800b59a:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800b59c:	430b      	orrs	r3, r1
 800b59e:	7a29      	ldrb	r1, [r5, #8]
 800b5a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b5a4:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff fb61 	bl	800ac72 <SCSI_CheckAddressRange>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f2c0 8082 	blt.w	800b6ba <SCSI_ProcessCmd+0x8a2>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b5b6:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b5ba:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b5be:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b5c2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d136      	bne.n	800b638 <SCSI_ProcessCmd+0x820>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b5ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d2:	bf28      	it	cs
 800b5d4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b5d8:	f104 0210 	add.w	r2, r4, #16
 800b5dc:	493a      	ldr	r1, [pc, #232]	@ (800b6c8 <SCSI_ProcessCmd+0x8b0>)
 800b5de:	7809      	ldrb	r1, [r1, #0]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f002 ff22 	bl	800e42a <USBD_LL_PrepareReceive>
  return 0;
 800b5e6:	e5b3      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b5e8:	2320      	movs	r3, #32
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b5f0:	f7ff fb23 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b5f4:	f04f 38ff 	mov.w	r8, #4294967295
 800b5f8:	e5aa      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b5fa:	2320      	movs	r3, #32
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b602:	f7ff fb1a 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b606:	f04f 38ff 	mov.w	r8, #4294967295
 800b60a:	e5a1      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b60c:	233a      	movs	r3, #58	@ 0x3a
 800b60e:	2202      	movs	r2, #2
 800b610:	4639      	mov	r1, r7
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff fb11 	bl	800ac3a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b618:	2305      	movs	r3, #5
 800b61a:	7223      	strb	r3, [r4, #8]
      return -1;
 800b61c:	f04f 38ff 	mov.w	r8, #4294967295
 800b620:	e596      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b622:	2327      	movs	r3, #39	@ 0x27
 800b624:	2202      	movs	r2, #2
 800b626:	4639      	mov	r1, r7
 800b628:	4630      	mov	r0, r6
 800b62a:	f7ff fb06 	bl	800ac3a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b62e:	2305      	movs	r3, #5
 800b630:	7223      	strb	r3, [r4, #8]
      return -1;
 800b632:	f04f 38ff 	mov.w	r8, #4294967295
 800b636:	e58b      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b638:	2320      	movs	r3, #32
 800b63a:	2205      	movs	r2, #5
 800b63c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b640:	4630      	mov	r0, r6
 800b642:	f7ff fafa 	bl	800ac3a <SCSI_SenseCode>
      return -1;
 800b646:	f04f 38ff 	mov.w	r8, #4294967295
 800b64a:	e581      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    return SCSI_ProcessWrite(pdev, lun);
 800b64c:	f7ff fb84 	bl	800ad58 <SCSI_ProcessWrite>
 800b650:	4680      	mov	r8, r0
 800b652:	e57d      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  if ((params[1] & 0x02U) == 0x02U)
 800b654:	786b      	ldrb	r3, [r5, #1]
 800b656:	f013 0f02 	tst.w	r3, #2
 800b65a:	d10c      	bne.n	800b676 <SCSI_ProcessCmd+0x85e>
  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800b65c:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800b660:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b664:	4639      	mov	r1, r7
 800b666:	f7ff fb04 	bl	800ac72 <SCSI_CheckAddressRange>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	db28      	blt.n	800b6c0 <SCSI_ProcessCmd+0x8a8>
  hmsc->bot_data_length = 0U;
 800b66e:	2300      	movs	r3, #0
 800b670:	60e3      	str	r3, [r4, #12]
  return 0;
 800b672:	4698      	mov	r8, r3
 800b674:	e56c      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b676:	2324      	movs	r3, #36	@ 0x24
 800b678:	2205      	movs	r2, #5
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7ff fadd 	bl	800ac3a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800b680:	f04f 38ff 	mov.w	r8, #4294967295
 800b684:	e564      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800b686:	2320      	movs	r3, #32
 800b688:	2205      	movs	r2, #5
 800b68a:	4639      	mov	r1, r7
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff fad4 	bl	800ac3a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b692:	2302      	movs	r3, #2
 800b694:	7263      	strb	r3, [r4, #9]
      ret = -1;
 800b696:	f04f 38ff 	mov.w	r8, #4294967295
      break;
 800b69a:	e559      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    return -1;
 800b69c:	f04f 38ff 	mov.w	r8, #4294967295
 800b6a0:	e556      	b.n	800b150 <SCSI_ProcessCmd+0x338>
  return 0;
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	e553      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800b6a8:	f04f 38ff 	mov.w	r8, #4294967295
 800b6ac:	e550      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800b6ae:	f04f 38ff 	mov.w	r8, #4294967295
 800b6b2:	e54d      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800b6b4:	f04f 38ff 	mov.w	r8, #4294967295
 800b6b8:	e54a      	b.n	800b150 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800b6ba:	f04f 38ff 	mov.w	r8, #4294967295
 800b6be:	e547      	b.n	800b150 <SCSI_ProcessCmd+0x338>
    return -1; /* error */
 800b6c0:	f04f 38ff 	mov.w	r8, #4294967295
 800b6c4:	e544      	b.n	800b150 <SCSI_ProcessCmd+0x338>
 800b6c6:	bf00      	nop
 800b6c8:	20000015 	.word	0x20000015

0800b6cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b6cc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6ce:	b190      	cbz	r0, 800b6f6 <USBD_Init+0x2a>
 800b6d0:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b6d8:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b6dc:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6e0:	b109      	cbz	r1, 800b6e6 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800b6e2:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b6ec:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f002 fdf2 	bl	800e2d8 <USBD_LL_Init>

  return ret;
}
 800b6f4:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 800b6f6:	4805      	ldr	r0, [pc, #20]	@ (800b70c <USBD_Init+0x40>)
 800b6f8:	f003 fbb6 	bl	800ee68 <iprintf>
 800b6fc:	4804      	ldr	r0, [pc, #16]	@ (800b710 <USBD_Init+0x44>)
 800b6fe:	f003 fbb3 	bl	800ee68 <iprintf>
 800b702:	200a      	movs	r0, #10
 800b704:	f003 fbc2 	bl	800ee8c <putchar>
    return USBD_FAIL;
 800b708:	2003      	movs	r0, #3
 800b70a:	e7f3      	b.n	800b6f4 <USBD_Init+0x28>
 800b70c:	08012320 	.word	0x08012320
 800b710:	08012328 	.word	0x08012328

0800b714 <USBD_DeInit>:
  *         De-Initialize the device library
  * @param  pdev: device instance
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800b714:	b510      	push	{r4, lr}
 800b716:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800b718:	f002 fe44 	bl	800e3a4 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b71c:	2301      	movs	r3, #1
 800b71e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 800b722:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800b726:	b11b      	cbz	r3, 800b730 <USBD_DeInit+0x1c>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	7921      	ldrb	r1, [r4, #4]
 800b72c:	4620      	mov	r0, r4
 800b72e:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 800b730:	2300      	movs	r3, #0
 800b732:	f8c4 32c4 	str.w	r3, [r4, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800b736:	f8c4 32b4 	str.w	r3, [r4, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 800b73a:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800b73e:	4620      	mov	r0, r4
 800b740:	f002 fe20 	bl	800e384 <USBD_LL_DeInit>

  return ret;
}
 800b744:	bd10      	pop	{r4, pc}
	...

0800b748 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b748:	b510      	push	{r4, lr}
 800b74a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800b752:	b189      	cbz	r1, 800b778 <USBD_RegisterClass+0x30>
 800b754:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b756:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b75a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b75c:	b123      	cbz	r3, 800b768 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b75e:	f10d 0006 	add.w	r0, sp, #6
 800b762:	4798      	blx	r3
 800b764:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b768:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800b76c:	3301      	adds	r3, #1
 800b76e:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800b772:	2000      	movs	r0, #0
}
 800b774:	b002      	add	sp, #8
 800b776:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800b778:	4805      	ldr	r0, [pc, #20]	@ (800b790 <USBD_RegisterClass+0x48>)
 800b77a:	f003 fb75 	bl	800ee68 <iprintf>
 800b77e:	4805      	ldr	r0, [pc, #20]	@ (800b794 <USBD_RegisterClass+0x4c>)
 800b780:	f003 fb72 	bl	800ee68 <iprintf>
 800b784:	200a      	movs	r0, #10
 800b786:	f003 fb81 	bl	800ee8c <putchar>
    return USBD_FAIL;
 800b78a:	2003      	movs	r0, #3
 800b78c:	e7f2      	b.n	800b774 <USBD_RegisterClass+0x2c>
 800b78e:	bf00      	nop
 800b790:	08012320 	.word	0x08012320
 800b794:	08012340 	.word	0x08012340

0800b798 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b798:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b79a:	f002 fdfb 	bl	800e394 <USBD_LL_Start>
}
 800b79e:	bd08      	pop	{r3, pc}

0800b7a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7a0:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b7a6:	b113      	cbz	r3, 800b7ae <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800b7ac:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	e7fc      	b.n	800b7ac <USBD_SetClassConfig+0xc>

0800b7b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7b2:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b7b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800b7bc:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800b7be:	bf18      	it	ne
 800b7c0:	2003      	movne	r0, #3
 800b7c2:	bd08      	pop	{r3, pc}

0800b7c4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7c8:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	f000 f989 	bl	800bae4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7d8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800b7dc:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7e0:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800b7e4:	f001 031f 	and.w	r3, r1, #31
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d007      	beq.n	800b7fc <USBD_LL_SetupStage+0x38>
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d00a      	beq.n	800b806 <USBD_LL_SetupStage+0x42>
 800b7f0:	b973      	cbnz	r3, 800b810 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 f993 	bl	800bb20 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fb6c 	bl	800bedc <USBD_StdItfReq>
      break;
 800b804:	e7f9      	b.n	800b7fa <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b806:	4629      	mov	r1, r5
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fba8 	bl	800bf5e <USBD_StdEPReq>
      break;
 800b80e:	e7f4      	b.n	800b7fa <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b810:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800b814:	4620      	mov	r0, r4
 800b816:	f002 fde8 	bl	800e3ea <USBD_LL_StallEP>
      break;
 800b81a:	e7ee      	b.n	800b7fa <USBD_LL_SetupStage+0x36>

0800b81c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800b820:	460d      	mov	r5, r1
 800b822:	bb61      	cbnz	r1, 800b87e <USBD_LL_DataOutStage+0x62>
 800b824:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b826:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800b82a:	2a03      	cmp	r2, #3
 800b82c:	d001      	beq.n	800b832 <USBD_LL_DataOutStage+0x16>
        return ret;
      }
    }
  }

  return USBD_OK;
 800b82e:	4608      	mov	r0, r1
}
 800b830:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800b832:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800b836:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800b83a:	4291      	cmp	r1, r2
 800b83c:	d809      	bhi.n	800b852 <USBD_LL_DataOutStage+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b03      	cmp	r3, #3
 800b846:	d00f      	beq.n	800b868 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 fccb 	bl	800c1e4 <USBD_CtlSendStatus>
  return USBD_OK;
 800b84e:	4628      	mov	r0, r5
 800b850:	e7ee      	b.n	800b830 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b852:	1a89      	subs	r1, r1, r2
 800b854:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b858:	428a      	cmp	r2, r1
 800b85a:	bf28      	it	cs
 800b85c:	460a      	movcs	r2, r1
 800b85e:	4619      	mov	r1, r3
 800b860:	f000 fcb8 	bl	800c1d4 <USBD_CtlContinueRx>
  return USBD_OK;
 800b864:	4628      	mov	r0, r5
 800b866:	e7e3      	b.n	800b830 <USBD_LL_DataOutStage+0x14>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b868:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	2a00      	cmp	r2, #0
 800b870:	d0ea      	beq.n	800b848 <USBD_LL_DataOutStage+0x2c>
              pdev->classId = idx;
 800b872:	2200      	movs	r2, #0
 800b874:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	4798      	blx	r3
 800b87c:	e7e4      	b.n	800b848 <USBD_LL_DataOutStage+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b03      	cmp	r3, #3
 800b886:	d001      	beq.n	800b88c <USBD_LL_DataOutStage+0x70>
  return USBD_OK;
 800b888:	2000      	movs	r0, #0
 800b88a:	e7d1      	b.n	800b830 <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 800b88c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b890:	699a      	ldr	r2, [r3, #24]
 800b892:	b12a      	cbz	r2, 800b8a0 <USBD_LL_DataOutStage+0x84>
          pdev->classId = idx;
 800b894:	2200      	movs	r2, #0
 800b896:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	4798      	blx	r3
      if (ret != USBD_OK)
 800b89e:	e7c7      	b.n	800b830 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7c5      	b.n	800b830 <USBD_LL_DataOutStage+0x14>

0800b8a4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	2900      	cmp	r1, #0
 800b8ac:	d14c      	bne.n	800b948 <USBD_LL_DataInStage+0xa4>
 800b8ae:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8b0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800b8b4:	2a02      	cmp	r2, #2
 800b8b6:	d008      	beq.n	800b8ca <USBD_LL_DataInStage+0x26>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b8b8:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d049      	beq.n	800b954 <USBD_LL_DataInStage+0xb0>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
        }
      }
    }
  }

  return USBD_OK;
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	e044      	b.n	800b954 <USBD_LL_DataInStage+0xb0>
      if (pep->rem_length > pep->maxpacket)
 800b8ca:	69c2      	ldr	r2, [r0, #28]
 800b8cc:	6a01      	ldr	r1, [r0, #32]
 800b8ce:	428a      	cmp	r2, r1
 800b8d0:	d80e      	bhi.n	800b8f0 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 800b8d2:	428a      	cmp	r2, r1
 800b8d4:	d018      	beq.n	800b908 <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d6:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d027      	beq.n	800b930 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8e0:	2180      	movs	r1, #128	@ 0x80
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f002 fd81 	bl	800e3ea <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fc86 	bl	800c1fa <USBD_CtlReceiveStatus>
 800b8ee:	e7e3      	b.n	800b8b8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800b8f0:	1a52      	subs	r2, r2, r1
 800b8f2:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f000 fc65 	bl	800c1c4 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4619      	mov	r1, r3
 800b900:	4620      	mov	r0, r4
 800b902:	f002 fd92 	bl	800e42a <USBD_LL_PrepareReceive>
 800b906:	e7d7      	b.n	800b8b8 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800b908:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800b90a:	4299      	cmp	r1, r3
 800b90c:	d8e3      	bhi.n	800b8d6 <USBD_LL_DataInStage+0x32>
            (pep->total_length >= pep->maxpacket) &&
 800b90e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800b912:	4293      	cmp	r3, r2
 800b914:	d2df      	bcs.n	800b8d6 <USBD_LL_DataInStage+0x32>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b916:	2200      	movs	r2, #0
 800b918:	4611      	mov	r1, r2
 800b91a:	f000 fc53 	bl	800c1c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b91e:	2100      	movs	r1, #0
 800b920:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b924:	460b      	mov	r3, r1
 800b926:	460a      	mov	r2, r1
 800b928:	4620      	mov	r0, r4
 800b92a:	f002 fd7e 	bl	800e42a <USBD_LL_PrepareReceive>
 800b92e:	e7c3      	b.n	800b8b8 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b930:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	2a00      	cmp	r2, #0
 800b938:	d0d2      	beq.n	800b8e0 <USBD_LL_DataInStage+0x3c>
              pdev->classId = 0U;
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	4620      	mov	r0, r4
 800b944:	4798      	blx	r3
 800b946:	e7cb      	b.n	800b8e0 <USBD_LL_DataInStage+0x3c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b948:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d001      	beq.n	800b956 <USBD_LL_DataInStage+0xb2>
  return USBD_OK;
 800b952:	2000      	movs	r0, #0
}
 800b954:	bd38      	pop	{r3, r4, r5, pc}
        if (pdev->pClass[idx]->DataIn != NULL)
 800b956:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b95a:	695a      	ldr	r2, [r3, #20]
 800b95c:	b12a      	cbz	r2, 800b96a <USBD_LL_DataInStage+0xc6>
          pdev->classId = idx;
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	4798      	blx	r3
          if (ret != USBD_OK)
 800b968:	e7f4      	b.n	800b954 <USBD_LL_DataInStage+0xb0>
  return USBD_OK;
 800b96a:	2000      	movs	r0, #0
 800b96c:	e7f2      	b.n	800b954 <USBD_LL_DataInStage+0xb0>

0800b96e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b970:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b972:	2301      	movs	r3, #1
 800b974:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b978:	2300      	movs	r3, #0
 800b97a:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b97e:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800b980:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b984:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b988:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800b98c:	b1e3      	cbz	r3, 800b9c8 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	b1e3      	cbz	r3, 800b9cc <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b992:	2100      	movs	r1, #0
 800b994:	4798      	blx	r3
      {
        ret = USBD_FAIL;
 800b996:	1e05      	subs	r5, r0, #0
 800b998:	bf18      	it	ne
 800b99a:	2503      	movne	r5, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b99c:	2340      	movs	r3, #64	@ 0x40
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f002 fd06 	bl	800e3b4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9a8:	2701      	movs	r7, #1
 800b9aa:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9ae:	2640      	movs	r6, #64	@ 0x40
 800b9b0:	f8c4 6160 	str.w	r6, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9b4:	4633      	mov	r3, r6
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2180      	movs	r1, #128	@ 0x80
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f002 fcfa 	bl	800e3b4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9c0:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9c2:	6226      	str	r6, [r4, #32]

  return ret;
}
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c8:	2500      	movs	r5, #0
 800b9ca:	e7e7      	b.n	800b99c <USBD_LL_Reset+0x2e>
 800b9cc:	2500      	movs	r5, #0
 800b9ce:	e7e5      	b.n	800b99c <USBD_LL_Reset+0x2e>

0800b9d0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b9d0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	4770      	bx	lr

0800b9d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b9d6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d004      	beq.n	800b9ea <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b9e0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	4770      	bx	lr

0800b9f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d001      	beq.n	800ba02 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800b9fe:	2000      	movs	r0, #0
 800ba00:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800ba02:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800ba0c:	e7f7      	b.n	800b9fe <USBD_LL_Resume+0xa>

0800ba0e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba0e:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d001      	beq.n	800ba1e <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800ba1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0f9      	beq.n	800ba1a <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d0f6      	beq.n	800ba1a <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800ba2c:	4798      	blx	r3
 800ba2e:	e7f4      	b.n	800ba1a <USBD_LL_SOF+0xc>

0800ba30 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba30:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800ba32:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ba36:	33ae      	adds	r3, #174	@ 0xae
 800ba38:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ba3c:	b15a      	cbz	r2, 800ba56 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba3e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d001      	beq.n	800ba4c <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ba48:	2000      	movs	r0, #0
}
 800ba4a:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba4c:	6a13      	ldr	r3, [r2, #32]
 800ba4e:	b123      	cbz	r3, 800ba5a <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba50:	4798      	blx	r3
  return USBD_OK;
 800ba52:	2000      	movs	r0, #0
 800ba54:	e7f9      	b.n	800ba4a <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800ba56:	2003      	movs	r0, #3
 800ba58:	e7f7      	b.n	800ba4a <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e7f5      	b.n	800ba4a <USBD_LL_IsoINIncomplete+0x1a>

0800ba5e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba5e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800ba60:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ba64:	33ae      	adds	r3, #174	@ 0xae
 800ba66:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800ba6a:	b15a      	cbz	r2, 800ba84 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba6c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d001      	beq.n	800ba7a <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ba76:	2000      	movs	r0, #0
}
 800ba78:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba7a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800ba7c:	b123      	cbz	r3, 800ba88 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba7e:	4798      	blx	r3
  return USBD_OK;
 800ba80:	2000      	movs	r0, #0
 800ba82:	e7f9      	b.n	800ba78 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800ba84:	2003      	movs	r0, #3
 800ba86:	e7f7      	b.n	800ba78 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e7f5      	b.n	800ba78 <USBD_LL_IsoOUTIncomplete+0x1a>

0800ba8c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4770      	bx	lr

0800ba90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba90:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800ba9c:	b133      	cbz	r3, 800baac <USBD_LL_DevDisconnected+0x1c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	7901      	ldrb	r1, [r0, #4]
 800baa2:	4798      	blx	r3
    {
      ret = USBD_FAIL;
 800baa4:	2800      	cmp	r0, #0
 800baa6:	bf18      	it	ne
 800baa8:	2003      	movne	r0, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800baaa:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800baac:	2000      	movs	r0, #0
 800baae:	e7fc      	b.n	800baaa <USBD_LL_DevDisconnected+0x1a>

0800bab0 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800bab0:	2000      	movs	r0, #0
 800bab2:	4770      	bx	lr

0800bab4 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800bab4:	2000      	movs	r0, #0
 800bab6:	4770      	bx	lr

0800bab8 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bab8:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800babc:	7803      	ldrb	r3, [r0, #0]
 800babe:	459c      	cmp	ip, r3
 800bac0:	d803      	bhi.n	800baca <USBD_GetEpDesc+0x12>
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bac2:	2000      	movs	r0, #0
      }
    }
  }

  return (void *)pEpDesc;
}
 800bac4:	4770      	bx	lr
    while (ptr < desc->wTotalLength)
 800bac6:	459c      	cmp	ip, r3
 800bac8:	d90a      	bls.n	800bae0 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800baca:	7802      	ldrb	r2, [r0, #0]
 800bacc:	4413      	add	r3, r2
 800bace:	b29b      	uxth	r3, r3
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bad0:	4410      	add	r0, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bad2:	7842      	ldrb	r2, [r0, #1]
 800bad4:	2a05      	cmp	r2, #5
 800bad6:	d1f6      	bne.n	800bac6 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800bad8:	7882      	ldrb	r2, [r0, #2]
 800bada:	428a      	cmp	r2, r1
 800badc:	d1f3      	bne.n	800bac6 <USBD_GetEpDesc+0xe>
 800bade:	e7f1      	b.n	800bac4 <USBD_GetEpDesc+0xc>
 800bae0:	2000      	movs	r0, #0
 800bae2:	4770      	bx	lr

0800bae4 <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800bae4:	780b      	ldrb	r3, [r1, #0]
 800bae6:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800bae8:	784b      	ldrb	r3, [r1, #1]
 800baea:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800baec:	78ca      	ldrb	r2, [r1, #3]
 800baee:	788b      	ldrb	r3, [r1, #2]
 800baf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800baf4:	8043      	strh	r3, [r0, #2]
 800baf6:	794a      	ldrb	r2, [r1, #5]
 800baf8:	790b      	ldrb	r3, [r1, #4]
 800bafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800bafe:	8083      	strh	r3, [r0, #4]
 800bb00:	79ca      	ldrb	r2, [r1, #7]
 800bb02:	798b      	ldrb	r3, [r1, #6]
 800bb04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800bb08:	80c3      	strh	r3, [r0, #6]
}
 800bb0a:	4770      	bx	lr

0800bb0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb10:	2180      	movs	r1, #128	@ 0x80
 800bb12:	f002 fc6a 	bl	800e3ea <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb16:	2100      	movs	r1, #0
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f002 fc66 	bl	800e3ea <USBD_LL_StallEP>
}
 800bb1e:	bd10      	pop	{r4, pc}

0800bb20 <USBD_StdDevReq>:
{
 800bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb22:	b083      	sub	sp, #12
 800bb24:	4607      	mov	r7, r0
 800bb26:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb28:	780c      	ldrb	r4, [r1, #0]
 800bb2a:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800bb2e:	2c20      	cmp	r4, #32
 800bb30:	d006      	beq.n	800bb40 <USBD_StdDevReq+0x20>
 800bb32:	2c40      	cmp	r4, #64	@ 0x40
 800bb34:	d004      	beq.n	800bb40 <USBD_StdDevReq+0x20>
 800bb36:	b184      	cbz	r4, 800bb5a <USBD_StdDevReq+0x3a>
      USBD_CtlError(pdev, req);
 800bb38:	f7ff ffe8 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3c:	2400      	movs	r4, #0
      break;
 800bb3e:	e009      	b.n	800bb54 <USBD_StdDevReq+0x34>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb40:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800bb44:	33ae      	adds	r3, #174	@ 0xae
 800bb46:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4638      	mov	r0, r7
 800bb50:	4798      	blx	r3
 800bb52:	4604      	mov	r4, r0
}
 800bb54:	4620      	mov	r0, r4
 800bb56:	b003      	add	sp, #12
 800bb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800bb5a:	784d      	ldrb	r5, [r1, #1]
 800bb5c:	2d09      	cmp	r5, #9
 800bb5e:	f200 81b8 	bhi.w	800bed2 <USBD_StdDevReq+0x3b2>
 800bb62:	e8df f015 	tbh	[pc, r5, lsl #1]
 800bb66:	0172      	.short	0x0172
 800bb68:	01b601a4 	.word	0x01b601a4
 800bb6c:	01b60190 	.word	0x01b60190
 800bb70:	000a00ca 	.word	0x000a00ca
 800bb74:	015201b6 	.word	0x015201b6
 800bb78:	00f1      	.short	0x00f1
  uint16_t len = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800bb80:	884a      	ldrh	r2, [r1, #2]
 800bb82:	0a13      	lsrs	r3, r2, #8
 800bb84:	3b01      	subs	r3, #1
 800bb86:	2b06      	cmp	r3, #6
 800bb88:	f200 80aa 	bhi.w	800bce0 <USBD_StdDevReq+0x1c0>
 800bb8c:	e8df f003 	tbb	[pc, r3]
 800bb90:	a8321e04 	.word	0xa8321e04
 800bb94:	8ca8      	.short	0x8ca8
 800bb96:	99          	.byte	0x99
 800bb97:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f10d 0106 	add.w	r1, sp, #6
 800bba2:	7c00      	ldrb	r0, [r0, #16]
 800bba4:	4798      	blx	r3
  if (req->wLength != 0U)
 800bba6:	88f3      	ldrh	r3, [r6, #6]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 80a2 	beq.w	800bcf2 <USBD_StdDevReq+0x1d2>
    if (len != 0U)
 800bbae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	f000 8098 	beq.w	800bce8 <USBD_StdDevReq+0x1c8>
      len = MIN(len, req->wLength);
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	bf28      	it	cs
 800bbbc:	461a      	movcs	r2, r3
 800bbbe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f000 faf0 	bl	800c1aa <USBD_CtlSendData>
 800bbca:	e7c3      	b.n	800bb54 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbcc:	7c03      	ldrb	r3, [r0, #16]
 800bbce:	b943      	cbnz	r3, 800bbe2 <USBD_StdDevReq+0xc2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bbd0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd6:	f10d 0006 	add.w	r0, sp, #6
 800bbda:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bbe0:	e7e1      	b.n	800bba6 <USBD_StdDevReq+0x86>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bbe2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe8:	f10d 0006 	add.w	r0, sp, #6
 800bbec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bbf2:	e7d8      	b.n	800bba6 <USBD_StdDevReq+0x86>
      switch ((uint8_t)(req->wValue))
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	2a05      	cmp	r2, #5
 800bbf8:	d852      	bhi.n	800bca0 <USBD_StdDevReq+0x180>
 800bbfa:	e8df f002 	tbb	[pc, r2]
 800bbfe:	1003      	.short	0x1003
 800bc00:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	b123      	cbz	r3, 800bc16 <USBD_StdDevReq+0xf6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc0c:	f10d 0106 	add.w	r1, sp, #6
 800bc10:	7c00      	ldrb	r0, [r0, #16]
 800bc12:	4798      	blx	r3
  if (err != 0U)
 800bc14:	e7c7      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc16:	4631      	mov	r1, r6
 800bc18:	f7ff ff78 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc1c:	e79a      	b.n	800bb54 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	b123      	cbz	r3, 800bc30 <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc26:	f10d 0106 	add.w	r1, sp, #6
 800bc2a:	7c00      	ldrb	r0, [r0, #16]
 800bc2c:	4798      	blx	r3
  if (err != 0U)
 800bc2e:	e7ba      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc30:	4631      	mov	r1, r6
 800bc32:	f7ff ff6b 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc36:	e78d      	b.n	800bb54 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	b123      	cbz	r3, 800bc4a <USBD_StdDevReq+0x12a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc40:	f10d 0106 	add.w	r1, sp, #6
 800bc44:	7c00      	ldrb	r0, [r0, #16]
 800bc46:	4798      	blx	r3
  if (err != 0U)
 800bc48:	e7ad      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	f7ff ff5e 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc50:	e780      	b.n	800bb54 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	b123      	cbz	r3, 800bc64 <USBD_StdDevReq+0x144>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc5a:	f10d 0106 	add.w	r1, sp, #6
 800bc5e:	7c00      	ldrb	r0, [r0, #16]
 800bc60:	4798      	blx	r3
  if (err != 0U)
 800bc62:	e7a0      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc64:	4631      	mov	r1, r6
 800bc66:	f7ff ff51 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc6a:	e773      	b.n	800bb54 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	b123      	cbz	r3, 800bc7e <USBD_StdDevReq+0x15e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc74:	f10d 0106 	add.w	r1, sp, #6
 800bc78:	7c00      	ldrb	r0, [r0, #16]
 800bc7a:	4798      	blx	r3
  if (err != 0U)
 800bc7c:	e793      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc7e:	4631      	mov	r1, r6
 800bc80:	f7ff ff44 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc84:	e766      	b.n	800bb54 <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	b123      	cbz	r3, 800bc98 <USBD_StdDevReq+0x178>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc8e:	f10d 0106 	add.w	r1, sp, #6
 800bc92:	7c00      	ldrb	r0, [r0, #16]
 800bc94:	4798      	blx	r3
  if (err != 0U)
 800bc96:	e786      	b.n	800bba6 <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bc98:	4631      	mov	r1, r6
 800bc9a:	f7ff ff37 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bc9e:	e759      	b.n	800bb54 <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800bca0:	4631      	mov	r1, r6
 800bca2:	f7ff ff33 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bca6:	e755      	b.n	800bb54 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bca8:	7c03      	ldrb	r3, [r0, #16]
 800bcaa:	b933      	cbnz	r3, 800bcba <USBD_StdDevReq+0x19a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bcac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bcb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb2:	f10d 0006 	add.w	r0, sp, #6
 800bcb6:	4798      	blx	r3
  if (err != 0U)
 800bcb8:	e775      	b.n	800bba6 <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800bcba:	4631      	mov	r1, r6
 800bcbc:	f7ff ff26 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bcc0:	e748      	b.n	800bb54 <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcc2:	7c03      	ldrb	r3, [r0, #16]
 800bcc4:	b943      	cbnz	r3, 800bcd8 <USBD_StdDevReq+0x1b8>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bcc6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bcca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bccc:	f10d 0006 	add.w	r0, sp, #6
 800bcd0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bcd2:	2307      	movs	r3, #7
 800bcd4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bcd6:	e766      	b.n	800bba6 <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800bcd8:	4631      	mov	r1, r6
 800bcda:	f7ff ff17 	bl	800bb0c <USBD_CtlError>
  if (err != 0U)
 800bcde:	e739      	b.n	800bb54 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800bce0:	4631      	mov	r1, r6
 800bce2:	f7ff ff13 	bl	800bb0c <USBD_CtlError>
    return;
 800bce6:	e735      	b.n	800bb54 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800bce8:	4631      	mov	r1, r6
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ff0e 	bl	800bb0c <USBD_CtlError>
 800bcf0:	e730      	b.n	800bb54 <USBD_StdDevReq+0x34>
    (void)USBD_CtlSendStatus(pdev);
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	f000 fa76 	bl	800c1e4 <USBD_CtlSendStatus>
 800bcf8:	e72c      	b.n	800bb54 <USBD_StdDevReq+0x34>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcfa:	888b      	ldrh	r3, [r1, #4]
 800bcfc:	b9fb      	cbnz	r3, 800bd3e <USBD_StdDevReq+0x21e>
 800bcfe:	88cb      	ldrh	r3, [r1, #6]
 800bd00:	b9eb      	cbnz	r3, 800bd3e <USBD_StdDevReq+0x21e>
 800bd02:	884b      	ldrh	r3, [r1, #2]
 800bd04:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd06:	d81a      	bhi.n	800bd3e <USBD_StdDevReq+0x21e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd08:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	2a03      	cmp	r2, #3
 800bd10:	d00d      	beq.n	800bd2e <USBD_StdDevReq+0x20e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd12:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 800bd14:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f002 fb76 	bl	800e40a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f000 fa60 	bl	800c1e4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800bd24:	b135      	cbz	r5, 800bd34 <USBD_StdDevReq+0x214>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd26:	2302      	movs	r3, #2
 800bd28:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800bd2c:	e712      	b.n	800bb54 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800bd2e:	f7ff feed 	bl	800bb0c <USBD_CtlError>
 800bd32:	e70f      	b.n	800bb54 <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd34:	2301      	movs	r3, #1
 800bd36:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800bd3a:	462c      	mov	r4, r5
 800bd3c:	e70a      	b.n	800bb54 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4638      	mov	r0, r7
 800bd42:	f7ff fee3 	bl	800bb0c <USBD_CtlError>
 800bd46:	e705      	b.n	800bb54 <USBD_StdDevReq+0x34>
  cfgidx = (uint8_t)(req->wValue);
 800bd48:	788d      	ldrb	r5, [r1, #2]
 800bd4a:	4b63      	ldr	r3, [pc, #396]	@ (800bed8 <USBD_StdDevReq+0x3b8>)
 800bd4c:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd4e:	2d01      	cmp	r5, #1
 800bd50:	d80f      	bhi.n	800bd72 <USBD_StdDevReq+0x252>
  switch (pdev->dev_state)
 800bd52:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d00e      	beq.n	800bd7a <USBD_StdDevReq+0x25a>
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d026      	beq.n	800bdae <USBD_StdDevReq+0x28e>
      USBD_CtlError(pdev, req);
 800bd60:	f7ff fed4 	bl	800bb0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd64:	4b5c      	ldr	r3, [pc, #368]	@ (800bed8 <USBD_StdDevReq+0x3b8>)
 800bd66:	7819      	ldrb	r1, [r3, #0]
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f7ff fd22 	bl	800b7b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd6e:	2403      	movs	r4, #3
      break;
 800bd70:	e6f0      	b.n	800bb54 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800bd72:	f7ff fecb 	bl	800bb0c <USBD_CtlError>
    return USBD_FAIL;
 800bd76:	2403      	movs	r4, #3
 800bd78:	e6ec      	b.n	800bb54 <USBD_StdDevReq+0x34>
      if (cfgidx != 0U)
 800bd7a:	b1a5      	cbz	r5, 800bda6 <USBD_StdDevReq+0x286>
        pdev->dev_config = cfgidx;
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd80:	f7ff fd0e 	bl	800b7a0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800bd84:	4604      	mov	r4, r0
 800bd86:	b138      	cbz	r0, 800bd98 <USBD_StdDevReq+0x278>
          USBD_CtlError(pdev, req);
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f7ff febe 	bl	800bb0c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd90:	2302      	movs	r3, #2
 800bd92:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800bd96:	e6dd      	b.n	800bb54 <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f000 fa23 	bl	800c1e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800bda4:	e6d6      	b.n	800bb54 <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800bda6:	f000 fa1d 	bl	800c1e4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800bdaa:	462c      	mov	r4, r5
 800bdac:	e6d2      	b.n	800bb54 <USBD_StdDevReq+0x34>
      if (cfgidx == 0U)
 800bdae:	b1cd      	cbz	r5, 800bde4 <USBD_StdDevReq+0x2c4>
      else if (cfgidx != pdev->dev_config)
 800bdb0:	6841      	ldr	r1, [r0, #4]
 800bdb2:	2901      	cmp	r1, #1
 800bdb4:	d026      	beq.n	800be04 <USBD_StdDevReq+0x2e4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdb6:	b2c9      	uxtb	r1, r1
 800bdb8:	f7ff fcfb 	bl	800b7b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdbc:	4b46      	ldr	r3, [pc, #280]	@ (800bed8 <USBD_StdDevReq+0x3b8>)
 800bdbe:	7819      	ldrb	r1, [r3, #0]
 800bdc0:	6079      	str	r1, [r7, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	f7ff fcec 	bl	800b7a0 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800bdc8:	4604      	mov	r4, r0
 800bdca:	b1b8      	cbz	r0, 800bdfc <USBD_StdDevReq+0x2dc>
          USBD_CtlError(pdev, req);
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f7ff fe9c 	bl	800bb0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdd4:	7939      	ldrb	r1, [r7, #4]
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f7ff fceb 	bl	800b7b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bddc:	2302      	movs	r3, #2
 800bdde:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800bde2:	e6b7      	b.n	800bb54 <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bde4:	2302      	movs	r3, #2
 800bde6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bdea:	2100      	movs	r1, #0
 800bdec:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdee:	f7ff fce0 	bl	800b7b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f000 f9f6 	bl	800c1e4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf8:	462c      	mov	r4, r5
 800bdfa:	e6ab      	b.n	800bb54 <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f000 f9f1 	bl	800c1e4 <USBD_CtlSendStatus>
 800be02:	e6a7      	b.n	800bb54 <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800be04:	f000 f9ee 	bl	800c1e4 <USBD_CtlSendStatus>
 800be08:	e6a4      	b.n	800bb54 <USBD_StdDevReq+0x34>
  if (req->wLength != 1U)
 800be0a:	88cb      	ldrh	r3, [r1, #6]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d10b      	bne.n	800be28 <USBD_StdDevReq+0x308>
    switch (pdev->dev_state)
 800be10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b02      	cmp	r3, #2
 800be18:	d909      	bls.n	800be2e <USBD_StdDevReq+0x30e>
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d110      	bne.n	800be40 <USBD_StdDevReq+0x320>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be1e:	2201      	movs	r2, #1
 800be20:	1d01      	adds	r1, r0, #4
 800be22:	f000 f9c2 	bl	800c1aa <USBD_CtlSendData>
        break;
 800be26:	e695      	b.n	800bb54 <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800be28:	f7ff fe70 	bl	800bb0c <USBD_CtlError>
 800be2c:	e692      	b.n	800bb54 <USBD_StdDevReq+0x34>
    switch (pdev->dev_state)
 800be2e:	b13b      	cbz	r3, 800be40 <USBD_StdDevReq+0x320>
        pdev->dev_default_config = 0U;
 800be30:	4601      	mov	r1, r0
 800be32:	2300      	movs	r3, #0
 800be34:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be38:	2201      	movs	r2, #1
 800be3a:	f000 f9b6 	bl	800c1aa <USBD_CtlSendData>
        break;
 800be3e:	e689      	b.n	800bb54 <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800be40:	4631      	mov	r1, r6
 800be42:	4638      	mov	r0, r7
 800be44:	f7ff fe62 	bl	800bb0c <USBD_CtlError>
        break;
 800be48:	e684      	b.n	800bb54 <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800be4a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800be4e:	3b01      	subs	r3, #1
 800be50:	2b02      	cmp	r3, #2
 800be52:	d814      	bhi.n	800be7e <USBD_StdDevReq+0x35e>
      if (req->wLength != 0x2U)
 800be54:	88cb      	ldrh	r3, [r1, #6]
 800be56:	2b02      	cmp	r3, #2
 800be58:	d10d      	bne.n	800be76 <USBD_StdDevReq+0x356>
      if (pdev->dev_remote_wakeup != 0U)
 800be5a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800be5e:	3b00      	subs	r3, #0
 800be60:	bf18      	it	ne
 800be62:	2301      	movne	r3, #1
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4601      	mov	r1, r0
 800be68:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be6c:	2202      	movs	r2, #2
 800be6e:	f000 f99c 	bl	800c1aa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800be72:	462c      	mov	r4, r5
      break;
 800be74:	e66e      	b.n	800bb54 <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800be76:	f7ff fe49 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800be7a:	462c      	mov	r4, r5
        break;
 800be7c:	e66a      	b.n	800bb54 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800be7e:	f7ff fe45 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800be82:	462c      	mov	r4, r5
      break;
 800be84:	e666      	b.n	800bb54 <USBD_StdDevReq+0x34>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be86:	884b      	ldrh	r3, [r1, #2]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d004      	beq.n	800be96 <USBD_StdDevReq+0x376>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d007      	beq.n	800bea0 <USBD_StdDevReq+0x380>
    USBD_CtlError(pdev, req);
 800be90:	f7ff fe3c 	bl	800bb0c <USBD_CtlError>
 800be94:	e65e      	b.n	800bb54 <USBD_StdDevReq+0x34>
    pdev->dev_remote_wakeup = 1U;
 800be96:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be9a:	f000 f9a3 	bl	800c1e4 <USBD_CtlSendStatus>
 800be9e:	e659      	b.n	800bb54 <USBD_StdDevReq+0x34>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bea0:	888b      	ldrh	r3, [r1, #4]
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bea8:	f000 f99c 	bl	800c1e4 <USBD_CtlSendStatus>
 800beac:	e652      	b.n	800bb54 <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800beae:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800beb2:	3b01      	subs	r3, #1
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d809      	bhi.n	800becc <USBD_StdDevReq+0x3ac>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800beb8:	884b      	ldrh	r3, [r1, #2]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	f47f ae4a 	bne.w	800bb54 <USBD_StdDevReq+0x34>
        pdev->dev_remote_wakeup = 0U;
 800bec0:	2300      	movs	r3, #0
 800bec2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bec6:	f000 f98d 	bl	800c1e4 <USBD_CtlSendStatus>
 800beca:	e643      	b.n	800bb54 <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800becc:	f7ff fe1e 	bl	800bb0c <USBD_CtlError>
      break;
 800bed0:	e640      	b.n	800bb54 <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800bed2:	f7ff fe1b 	bl	800bb0c <USBD_CtlError>
          break;
 800bed6:	e63d      	b.n	800bb54 <USBD_StdDevReq+0x34>
 800bed8:	200047bc 	.word	0x200047bc

0800bedc <USBD_StdItfReq>:
{
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4606      	mov	r6, r0
 800bee0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bee2:	780b      	ldrb	r3, [r1, #0]
 800bee4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bee8:	d008      	beq.n	800befc <USBD_StdItfReq+0x20>
 800beea:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800beee:	2a40      	cmp	r2, #64	@ 0x40
 800bef0:	d004      	beq.n	800befc <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800bef2:	f7ff fe0b 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bef6:	2500      	movs	r5, #0
}
 800bef8:	4628      	mov	r0, r5
 800befa:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800befc:	f896 329c 	ldrb.w	r3, [r6, #668]	@ 0x29c
 800bf00:	3b01      	subs	r3, #1
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d821      	bhi.n	800bf4a <USBD_StdItfReq+0x6e>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf06:	7921      	ldrb	r1, [r4, #4]
 800bf08:	2901      	cmp	r1, #1
 800bf0a:	d905      	bls.n	800bf18 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff fdfc 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bf14:	2500      	movs	r5, #0
 800bf16:	e7ef      	b.n	800bef8 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7ff fdc9 	bl	800bab0 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf1e:	b9d0      	cbnz	r0, 800bf56 <USBD_StdItfReq+0x7a>
              if (pdev->pClass[idx]->Setup != NULL)
 800bf20:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	b1c2      	cbz	r2, 800bf5a <USBD_StdItfReq+0x7e>
                pdev->classId = idx;
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f8c6 22d4 	str.w	r2, [r6, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	4621      	mov	r1, r4
 800bf32:	4630      	mov	r0, r6
 800bf34:	4798      	blx	r3
 800bf36:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf38:	88e3      	ldrh	r3, [r4, #6]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1dc      	bne.n	800bef8 <USBD_StdItfReq+0x1c>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d1da      	bne.n	800bef8 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800bf42:	4630      	mov	r0, r6
 800bf44:	f000 f94e 	bl	800c1e4 <USBD_CtlSendStatus>
 800bf48:	e7d6      	b.n	800bef8 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f7ff fddd 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bf52:	2500      	movs	r5, #0
          break;
 800bf54:	e7d0      	b.n	800bef8 <USBD_StdItfReq+0x1c>
 800bf56:	2503      	movs	r5, #3
 800bf58:	e7ce      	b.n	800bef8 <USBD_StdItfReq+0x1c>
 800bf5a:	2503      	movs	r5, #3
 800bf5c:	e7cc      	b.n	800bef8 <USBD_StdItfReq+0x1c>

0800bf5e <USBD_StdEPReq>:
{
 800bf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf62:	4606      	mov	r6, r0
 800bf64:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800bf66:	888b      	ldrh	r3, [r1, #4]
 800bf68:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf6a:	780c      	ldrb	r4, [r1, #0]
 800bf6c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800bf70:	2c20      	cmp	r4, #32
 800bf72:	d008      	beq.n	800bf86 <USBD_StdEPReq+0x28>
 800bf74:	2c40      	cmp	r4, #64	@ 0x40
 800bf76:	d006      	beq.n	800bf86 <USBD_StdEPReq+0x28>
 800bf78:	b1d4      	cbz	r4, 800bfb0 <USBD_StdEPReq+0x52>
      USBD_CtlError(pdev, req);
 800bf7a:	f7ff fdc7 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bf7e:	2400      	movs	r4, #0
}
 800bf80:	4620      	mov	r0, r4
 800bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf86:	4639      	mov	r1, r7
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff fd93 	bl	800bab4 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf8e:	4604      	mov	r4, r0
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f040 80dd 	bne.w	800c150 <USBD_StdEPReq+0x1f2>
        pdev->classId = idx;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800bf9c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0ec      	beq.n	800bf80 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4798      	blx	r3
 800bfac:	4604      	mov	r4, r0
 800bfae:	e7e7      	b.n	800bf80 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800bfb0:	f891 8001 	ldrb.w	r8, [r1, #1]
 800bfb4:	f1b8 0f01 	cmp.w	r8, #1
 800bfb8:	d030      	beq.n	800c01c <USBD_StdEPReq+0xbe>
 800bfba:	f1b8 0f03 	cmp.w	r8, #3
 800bfbe:	d005      	beq.n	800bfcc <USBD_StdEPReq+0x6e>
 800bfc0:	f1b8 0f00 	cmp.w	r8, #0
 800bfc4:	d063      	beq.n	800c08e <USBD_StdEPReq+0x130>
          USBD_CtlError(pdev, req);
 800bfc6:	f7ff fda1 	bl	800bb0c <USBD_CtlError>
          break;
 800bfca:	e7d9      	b.n	800bf80 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800bfcc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d004      	beq.n	800bfe0 <USBD_StdEPReq+0x82>
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d011      	beq.n	800bffe <USBD_StdEPReq+0xa0>
              USBD_CtlError(pdev, req);
 800bfda:	f7ff fd97 	bl	800bb0c <USBD_CtlError>
              break;
 800bfde:	e7cf      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfe0:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800bfe4:	d007      	beq.n	800bff6 <USBD_StdEPReq+0x98>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f002 f9ff 	bl	800e3ea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfec:	2180      	movs	r1, #128	@ 0x80
 800bfee:	4630      	mov	r0, r6
 800bff0:	f002 f9fb 	bl	800e3ea <USBD_LL_StallEP>
 800bff4:	e7c4      	b.n	800bf80 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800bff6:	f7ff fd89 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bffa:	4644      	mov	r4, r8
 800bffc:	e7c0      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bffe:	884b      	ldrh	r3, [r1, #2]
 800c000:	b923      	cbnz	r3, 800c00c <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c002:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800c006:	d001      	beq.n	800c00c <USBD_StdEPReq+0xae>
 800c008:	88cb      	ldrh	r3, [r1, #6]
 800c00a:	b11b      	cbz	r3, 800c014 <USBD_StdEPReq+0xb6>
              (void)USBD_CtlSendStatus(pdev);
 800c00c:	4630      	mov	r0, r6
 800c00e:	f000 f8e9 	bl	800c1e4 <USBD_CtlSendStatus>
              break;
 800c012:	e7b5      	b.n	800bf80 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c014:	4639      	mov	r1, r7
 800c016:	f002 f9e8 	bl	800e3ea <USBD_LL_StallEP>
 800c01a:	e7f7      	b.n	800c00c <USBD_StdEPReq+0xae>
          switch (pdev->dev_state)
 800c01c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d004      	beq.n	800c030 <USBD_StdEPReq+0xd2>
 800c026:	2b03      	cmp	r3, #3
 800c028:	d011      	beq.n	800c04e <USBD_StdEPReq+0xf0>
              USBD_CtlError(pdev, req);
 800c02a:	f7ff fd6f 	bl	800bb0c <USBD_CtlError>
              break;
 800c02e:	e7a7      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c030:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800c034:	d007      	beq.n	800c046 <USBD_StdEPReq+0xe8>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c036:	4639      	mov	r1, r7
 800c038:	f002 f9d7 	bl	800e3ea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c03c:	2180      	movs	r1, #128	@ 0x80
 800c03e:	4630      	mov	r0, r6
 800c040:	f002 f9d3 	bl	800e3ea <USBD_LL_StallEP>
 800c044:	e79c      	b.n	800bf80 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800c046:	f7ff fd61 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c04a:	4644      	mov	r4, r8
 800c04c:	e798      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c04e:	884b      	ldrh	r3, [r1, #2]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d195      	bne.n	800bf80 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c054:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800c058:	d115      	bne.n	800c086 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800c05a:	4630      	mov	r0, r6
 800c05c:	f000 f8c2 	bl	800c1e4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c060:	4639      	mov	r1, r7
 800c062:	4630      	mov	r0, r6
 800c064:	f7ff fd26 	bl	800bab4 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c068:	2800      	cmp	r0, #0
 800c06a:	d189      	bne.n	800bf80 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800c06c:	2300      	movs	r3, #0
 800c06e:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800c072:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d06b      	beq.n	800c154 <USBD_StdEPReq+0x1f6>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c07c:	4629      	mov	r1, r5
 800c07e:	4630      	mov	r0, r6
 800c080:	4798      	blx	r3
 800c082:	4604      	mov	r4, r0
 800c084:	e77c      	b.n	800bf80 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c086:	4639      	mov	r1, r7
 800c088:	f002 f9b7 	bl	800e3fa <USBD_LL_ClearStallEP>
 800c08c:	e7e5      	b.n	800c05a <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 800c08e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	2a02      	cmp	r2, #2
 800c096:	d005      	beq.n	800c0a4 <USBD_StdEPReq+0x146>
 800c098:	2a03      	cmp	r2, #3
 800c09a:	d017      	beq.n	800c0cc <USBD_StdEPReq+0x16e>
              USBD_CtlError(pdev, req);
 800c09c:	f7ff fd36 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a0:	4644      	mov	r4, r8
              break;
 800c0a2:	e76d      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a4:	f017 047f 	ands.w	r4, r7, #127	@ 0x7f
 800c0a8:	d003      	beq.n	800c0b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c0aa:	f7ff fd2f 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ae:	4644      	mov	r4, r8
                break;
 800c0b0:	e766      	b.n	800bf80 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0b6:	bf14      	ite	ne
 800c0b8:	f100 0114 	addne.w	r1, r0, #20
 800c0bc:	f500 71aa 	addeq.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	f000 f870 	bl	800c1aa <USBD_CtlSendData>
              break;
 800c0ca:	e759      	b.n	800bf80 <USBD_StdEPReq+0x22>
              if ((ep_addr & 0x80U) == 0x80U)
 800c0cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0d0:	d11a      	bne.n	800c108 <USBD_StdEPReq+0x1aa>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0d2:	f007 030f 	and.w	r3, r7, #15
 800c0d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c0da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c0de:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800c0e2:	b373      	cbz	r3, 800c142 <USBD_StdEPReq+0x1e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0e4:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c0ec:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c0f0:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0f4:	b9cf      	cbnz	r7, 800c12a <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4630      	mov	r0, r6
 800c100:	f000 f853 	bl	800c1aa <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c104:	4644      	mov	r4, r8
              break;
 800c106:	e73b      	b.n	800bf80 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c108:	f007 030f 	and.w	r3, r7, #15
 800c10c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c110:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c114:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c116:	b183      	cbz	r3, 800c13a <USBD_StdEPReq+0x1dc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c118:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
 800c11c:	3401      	adds	r4, #1
 800c11e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c122:	eb00 0484 	add.w	r4, r0, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c126:	2f80      	cmp	r7, #128	@ 0x80
 800c128:	d0e5      	beq.n	800c0f6 <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	f002 f907 	bl	800e340 <USBD_LL_IsStallEP>
 800c132:	b150      	cbz	r0, 800c14a <USBD_StdEPReq+0x1ec>
                pep->status = 0x0001U;
 800c134:	2301      	movs	r3, #1
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	e7df      	b.n	800c0fa <USBD_StdEPReq+0x19c>
                  USBD_CtlError(pdev, req);
 800c13a:	f7ff fce7 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c13e:	4644      	mov	r4, r8
                  break;
 800c140:	e71e      	b.n	800bf80 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800c142:	f7ff fce3 	bl	800bb0c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c146:	4644      	mov	r4, r8
                  break;
 800c148:	e71a      	b.n	800bf80 <USBD_StdEPReq+0x22>
                pep->status = 0x0000U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	e7d4      	b.n	800c0fa <USBD_StdEPReq+0x19c>
  USBD_StatusTypeDef ret = USBD_OK;
 800c150:	2400      	movs	r4, #0
 800c152:	e715      	b.n	800bf80 <USBD_StdEPReq+0x22>
 800c154:	4604      	mov	r4, r0
 800c156:	e713      	b.n	800bf80 <USBD_StdEPReq+0x22>

0800c158 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c158:	b330      	cbz	r0, 800c1a8 <USBD_GetString+0x50>
{
 800c15a:	b410      	push	{r4}
 800c15c:	4684      	mov	ip, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c15e:	7800      	ldrb	r0, [r0, #0]
 800c160:	b148      	cbz	r0, 800c176 <USBD_GetString+0x1e>
  uint8_t *pbuff = buf;
 800c162:	4663      	mov	r3, ip
  {
    len++;
    pbuff++;
 800c164:	4618      	mov	r0, r3
  while (*pbuff != (uint8_t)'\0')
 800c166:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d1fa      	bne.n	800c164 <USBD_GetString+0xc>
    len++;
 800c16e:	f1cc 0301 	rsb	r3, ip, #1
 800c172:	4418      	add	r0, r3
 800c174:	b2c0      	uxtb	r0, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c176:	0040      	lsls	r0, r0, #1
 800c178:	3002      	adds	r0, #2
 800c17a:	8010      	strh	r0, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800c17c:	7008      	strb	r0, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c17e:	2303      	movs	r3, #3
 800c180:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800c182:	f89c 2000 	ldrb.w	r2, [ip]
 800c186:	b162      	cbz	r2, 800c1a2 <USBD_GetString+0x4a>
 800c188:	4660      	mov	r0, ip
  idx++;
 800c18a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c18c:	2400      	movs	r4, #0
    unicode[idx] = *pdesc;
 800c18e:	54ca      	strb	r2, [r1, r3]
    idx++;
 800c190:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800c192:	b2d2      	uxtb	r2, r2
 800c194:	548c      	strb	r4, [r1, r2]
    idx++;
 800c196:	3302      	adds	r3, #2
 800c198:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c19a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	d1f5      	bne.n	800c18e <USBD_GetString+0x36>
}
 800c1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	4770      	bx	lr

0800c1aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1aa:	b508      	push	{r3, lr}
 800c1ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c1b4:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c1b6:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1b8:	460a      	mov	r2, r1
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	f002 f92d 	bl	800e41a <USBD_LL_Transmit>

  return USBD_OK;
}
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	bd08      	pop	{r3, pc}

0800c1c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1c4:	b508      	push	{r3, lr}
 800c1c6:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1c8:	460a      	mov	r2, r1
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	f002 f925 	bl	800e41a <USBD_LL_Transmit>

  return USBD_OK;
}
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	bd08      	pop	{r3, pc}

0800c1d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1d4:	b508      	push	{r3, lr}
 800c1d6:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1d8:	460a      	mov	r2, r1
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f002 f925 	bl	800e42a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	bd08      	pop	{r3, pc}

0800c1e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1e4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	f002 f912 	bl	800e41a <USBD_LL_Transmit>

  return USBD_OK;
}
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	bd08      	pop	{r3, pc}

0800c1fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1fa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1fc:	2205      	movs	r2, #5
 800c1fe:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c202:	2300      	movs	r3, #0
 800c204:	461a      	mov	r2, r3
 800c206:	4619      	mov	r1, r3
 800c208:	f002 f90f 	bl	800e42a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c20c:	2000      	movs	r0, #0
 800c20e:	bd08      	pop	{r3, pc}

0800c210 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c210:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c212:	4b04      	ldr	r3, [pc, #16]	@ (800c224 <disk_status+0x14>)
 800c214:	181a      	adds	r2, r3, r0
 800c216:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	7a10      	ldrb	r0, [r2, #8]
 800c220:	4798      	blx	r3
  return stat;
}
 800c222:	bd08      	pop	{r3, pc}
 800c224:	200047e8 	.word	0x200047e8

0800c228 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800c228:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <disk_initialize+0x28>)
 800c22a:	5c1b      	ldrb	r3, [r3, r0]
 800c22c:	b973      	cbnz	r3, 800c24c <disk_initialize+0x24>
{
 800c22e:	b510      	push	{r4, lr}
 800c230:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c232:	4b07      	ldr	r3, [pc, #28]	@ (800c250 <disk_initialize+0x28>)
 800c234:	181a      	adds	r2, r3, r0
 800c236:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	7a10      	ldrb	r0, [r2, #8]
 800c240:	4798      	blx	r3
    if(stat == RES_OK)
 800c242:	b910      	cbnz	r0, 800c24a <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 800c244:	4b02      	ldr	r3, [pc, #8]	@ (800c250 <disk_initialize+0x28>)
 800c246:	2201      	movs	r2, #1
 800c248:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800c24a:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800c24c:	2000      	movs	r0, #0
}
 800c24e:	4770      	bx	lr
 800c250:	200047e8 	.word	0x200047e8

0800c254 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c254:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c256:	4c05      	ldr	r4, [pc, #20]	@ (800c26c <disk_read+0x18>)
 800c258:	eb04 0c00 	add.w	ip, r4, r0
 800c25c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c260:	6860      	ldr	r0, [r4, #4]
 800c262:	6884      	ldr	r4, [r0, #8]
 800c264:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c268:	47a0      	blx	r4
  return res;
}
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	200047e8 	.word	0x200047e8

0800c270 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c270:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c272:	4c05      	ldr	r4, [pc, #20]	@ (800c288 <disk_write+0x18>)
 800c274:	eb04 0c00 	add.w	ip, r4, r0
 800c278:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c27c:	6860      	ldr	r0, [r4, #4]
 800c27e:	68c4      	ldr	r4, [r0, #12]
 800c280:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c284:	47a0      	blx	r4
  return res;
}
 800c286:	bd10      	pop	{r4, pc}
 800c288:	200047e8 	.word	0x200047e8

0800c28c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c28c:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c28e:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <disk_ioctl+0x18>)
 800c290:	eb03 0c00 	add.w	ip, r3, r0
 800c294:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c2a0:	4798      	blx	r3
  return res;
}
 800c2a2:	bd08      	pop	{r3, pc}
 800c2a4:	200047e8 	.word	0x200047e8

0800c2a8 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800c2a8:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800c2aa:	7882      	ldrb	r2, [r0, #2]
 800c2ac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800c2b0:	7843      	ldrb	r3, [r0, #1]
 800c2b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800c2b6:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c2b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c2bc:	4770      	bx	lr

0800c2be <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c2be:	7001      	strb	r1, [r0, #0]
 800c2c0:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c2c2:	7043      	strb	r3, [r0, #1]
 800c2c4:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c2c6:	7083      	strb	r3, [r0, #2]
 800c2c8:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 800c2ca:	70c1      	strb	r1, [r0, #3]
}
 800c2cc:	4770      	bx	lr

0800c2ce <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800c2ce:	b13a      	cbz	r2, 800c2e0 <mem_cpy+0x12>
 800c2d0:	3801      	subs	r0, #1
 800c2d2:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 800c2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2d8:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800c2dc:	4291      	cmp	r1, r2
 800c2de:	d1f9      	bne.n	800c2d4 <mem_cpy+0x6>
	}
}
 800c2e0:	4770      	bx	lr

0800c2e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800c2e2:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800c2e4:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800c2e8:	4290      	cmp	r0, r2
 800c2ea:	d1fb      	bne.n	800c2e4 <mem_set+0x2>
}
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2f0:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800c2f2:	4b22      	ldr	r3, [pc, #136]	@ (800c37c <chk_lock+0x8c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	b1f3      	cbz	r3, 800c336 <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2f8:	6802      	ldr	r2, [r0, #0]
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d00d      	beq.n	800c31a <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2fe:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 800c300:	4b1e      	ldr	r3, [pc, #120]	@ (800c37c <chk_lock+0x8c>)
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	b32b      	cbz	r3, 800c352 <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c306:	6804      	ldr	r4, [r0, #0]
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d016      	beq.n	800c33a <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c30c:	2a00      	cmp	r2, #0
 800c30e:	d131      	bne.n	800c374 <chk_lock+0x84>
 800c310:	2902      	cmp	r1, #2
 800c312:	bf14      	ite	ne
 800c314:	2012      	movne	r0, #18
 800c316:	2000      	moveq	r0, #0
 800c318:	e029      	b.n	800c36e <chk_lock+0x7e>
				Files[i].clu == dp->obj.sclust &&
 800c31a:	4b18      	ldr	r3, [pc, #96]	@ (800c37c <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	6883      	ldr	r3, [r0, #8]
 800c320:	429a      	cmp	r2, r3
 800c322:	d001      	beq.n	800c328 <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c324:	2200      	movs	r2, #0
 800c326:	e7eb      	b.n	800c300 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 800c328:	4b14      	ldr	r3, [pc, #80]	@ (800c37c <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	6943      	ldr	r3, [r0, #20]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d011      	beq.n	800c356 <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c332:	2200      	movs	r2, #0
 800c334:	e7e4      	b.n	800c300 <chk_lock+0x10>
			be = 1;
 800c336:	2201      	movs	r2, #1
 800c338:	e7e2      	b.n	800c300 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800c33a:	4b10      	ldr	r3, [pc, #64]	@ (800c37c <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c33c:	695c      	ldr	r4, [r3, #20]
 800c33e:	6883      	ldr	r3, [r0, #8]
 800c340:	429c      	cmp	r4, r3
 800c342:	d1e3      	bne.n	800c30c <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 800c344:	4b0d      	ldr	r3, [pc, #52]	@ (800c37c <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800c346:	699c      	ldr	r4, [r3, #24]
 800c348:	6943      	ldr	r3, [r0, #20]
 800c34a:	429c      	cmp	r4, r3
 800c34c:	d1de      	bne.n	800c30c <chk_lock+0x1c>
 800c34e:	2201      	movs	r2, #1
 800c350:	e002      	b.n	800c358 <chk_lock+0x68>
			be = 1;
 800c352:	2201      	movs	r2, #1
 800c354:	e7da      	b.n	800c30c <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c356:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c358:	b971      	cbnz	r1, 800c378 <chk_lock+0x88>
 800c35a:	4b08      	ldr	r3, [pc, #32]	@ (800c37c <chk_lock+0x8c>)
 800c35c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c360:	8998      	ldrh	r0, [r3, #12]
 800c362:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800c366:	bf14      	ite	ne
 800c368:	2000      	movne	r0, #0
 800c36a:	2001      	moveq	r0, #1
 800c36c:	0100      	lsls	r0, r0, #4
}
 800c36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c372:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c374:	2000      	movs	r0, #0
 800c376:	e7fa      	b.n	800c36e <chk_lock+0x7e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c378:	2010      	movs	r0, #16
 800c37a:	e7f8      	b.n	800c36e <chk_lock+0x7e>
 800c37c:	200047c0 	.word	0x200047c0

0800c380 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c380:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800c382:	6802      	ldr	r2, [r0, #0]
 800c384:	4b2b      	ldr	r3, [pc, #172]	@ (800c434 <inc_lock+0xb4>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d00c      	beq.n	800c3a6 <inc_lock+0x26>
 800c38c:	4c29      	ldr	r4, [pc, #164]	@ (800c434 <inc_lock+0xb4>)
 800c38e:	6924      	ldr	r4, [r4, #16]
 800c390:	4294      	cmp	r4, r2
 800c392:	d024      	beq.n	800c3de <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c394:	f04f 0c00 	mov.w	ip, #0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d02f      	beq.n	800c3fc <inc_lock+0x7c>
 800c39c:	4b25      	ldr	r3, [pc, #148]	@ (800c434 <inc_lock+0xb4>)
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	b353      	cbz	r3, 800c3f8 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e019      	b.n	800c3da <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 800c3a6:	4c23      	ldr	r4, [pc, #140]	@ (800c434 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800c3a8:	6865      	ldr	r5, [r4, #4]
 800c3aa:	6884      	ldr	r4, [r0, #8]
 800c3ac:	42a5      	cmp	r5, r4
 800c3ae:	d1ed      	bne.n	800c38c <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 800c3b0:	4c20      	ldr	r4, [pc, #128]	@ (800c434 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800c3b2:	68a5      	ldr	r5, [r4, #8]
 800c3b4:	6944      	ldr	r4, [r0, #20]
 800c3b6:	42a5      	cmp	r5, r4
 800c3b8:	d1e8      	bne.n	800c38c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c3ba:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d12d      	bne.n	800c41e <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800c434 <inc_lock+0xb4>)
 800c3c4:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	4a19      	ldr	r2, [pc, #100]	@ (800c434 <inc_lock+0xb4>)
 800c3d0:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800c3d4:	8193      	strh	r3, [r2, #12]

	return i + 1;
 800c3d6:	f10c 0001 	add.w	r0, ip, #1
}
 800c3da:	bc30      	pop	{r4, r5}
 800c3dc:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 800c3de:	4c15      	ldr	r4, [pc, #84]	@ (800c434 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800c3e0:	6965      	ldr	r5, [r4, #20]
 800c3e2:	6884      	ldr	r4, [r0, #8]
 800c3e4:	42a5      	cmp	r5, r4
 800c3e6:	d1d5      	bne.n	800c394 <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 800c3e8:	4c12      	ldr	r4, [pc, #72]	@ (800c434 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800c3ea:	69a5      	ldr	r5, [r4, #24]
 800c3ec:	6944      	ldr	r4, [r0, #20]
 800c3ee:	42a5      	cmp	r5, r4
 800c3f0:	d1d0      	bne.n	800c394 <inc_lock+0x14>
 800c3f2:	f04f 0c01 	mov.w	ip, #1
 800c3f6:	e7e2      	b.n	800c3be <inc_lock+0x3e>
 800c3f8:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 800c3fc:	4d0d      	ldr	r5, [pc, #52]	@ (800c434 <inc_lock+0xb4>)
 800c3fe:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800c402:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800c406:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800c408:	6882      	ldr	r2, [r0, #8]
 800c40a:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 800c40c:	6942      	ldr	r2, [r0, #20]
 800c40e:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 800c410:	2200      	movs	r2, #0
 800c412:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c414:	2900      	cmp	r1, #0
 800c416:	d0d4      	beq.n	800c3c2 <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c41c:	e7d7      	b.n	800c3ce <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c41e:	4b05      	ldr	r3, [pc, #20]	@ (800c434 <inc_lock+0xb4>)
 800c420:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800c424:	899b      	ldrh	r3, [r3, #12]
 800c426:	b913      	cbnz	r3, 800c42e <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c42c:	e7cf      	b.n	800c3ce <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c42e:	2000      	movs	r0, #0
 800c430:	e7d3      	b.n	800c3da <inc_lock+0x5a>
 800c432:	bf00      	nop
 800c434:	200047c0 	.word	0x200047c0

0800c438 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c438:	3801      	subs	r0, #1
 800c43a:	2801      	cmp	r0, #1
 800c43c:	d810      	bhi.n	800c460 <dec_lock+0x28>
		n = Files[i].ctr;
 800c43e:	4b0e      	ldr	r3, [pc, #56]	@ (800c478 <dec_lock+0x40>)
 800c440:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c444:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c44a:	d00b      	beq.n	800c464 <dec_lock+0x2c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800c44c:	b17b      	cbz	r3, 800c46e <dec_lock+0x36>
 800c44e:	3b01      	subs	r3, #1
 800c450:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800c452:	4a09      	ldr	r2, [pc, #36]	@ (800c478 <dec_lock+0x40>)
 800c454:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800c458:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c45a:	b143      	cbz	r3, 800c46e <dec_lock+0x36>
		res = FR_OK;
 800c45c:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 800c45e:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c460:	2002      	movs	r0, #2
 800c462:	4770      	bx	lr
		Files[i].ctr = n;
 800c464:	4b04      	ldr	r3, [pc, #16]	@ (800c478 <dec_lock+0x40>)
 800c466:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c46a:	2200      	movs	r2, #0
 800c46c:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c46e:	0103      	lsls	r3, r0, #4
 800c470:	2000      	movs	r0, #0
 800c472:	4a01      	ldr	r2, [pc, #4]	@ (800c478 <dec_lock+0x40>)
 800c474:	50d0      	str	r0, [r2, r3]
 800c476:	4770      	bx	lr
 800c478:	200047c0 	.word	0x200047c0

0800c47c <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c47c:	4b08      	ldr	r3, [pc, #32]	@ (800c4a0 <clear_lock+0x24>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4298      	cmp	r0, r3
 800c482:	d004      	beq.n	800c48e <clear_lock+0x12>
 800c484:	4b06      	ldr	r3, [pc, #24]	@ (800c4a0 <clear_lock+0x24>)
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	4283      	cmp	r3, r0
 800c48a:	d004      	beq.n	800c496 <clear_lock+0x1a>
	}
}
 800c48c:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c48e:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <clear_lock+0x24>)
 800c490:	2200      	movs	r2, #0
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	e7f6      	b.n	800c484 <clear_lock+0x8>
 800c496:	4b02      	ldr	r3, [pc, #8]	@ (800c4a0 <clear_lock+0x24>)
 800c498:	2200      	movs	r2, #0
 800c49a:	611a      	str	r2, [r3, #16]
}
 800c49c:	e7f6      	b.n	800c48c <clear_lock+0x10>
 800c49e:	bf00      	nop
 800c4a0:	200047c0 	.word	0x200047c0

0800c4a4 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800c4a4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4a6:	6983      	ldr	r3, [r0, #24]
 800c4a8:	3b02      	subs	r3, #2
 800c4aa:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800c4ac:	bf83      	ittte	hi
 800c4ae:	8943      	ldrhhi	r3, [r0, #10]
 800c4b0:	6ac0      	ldrhi	r0, [r0, #44]	@ 0x2c
 800c4b2:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4b6:	2000      	movls	r0, #0
}
 800c4b8:	4770      	bx	lr

0800c4ba <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c4ba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c4bc:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4be:	0a49      	lsrs	r1, r1, #9
 800c4c0:	6800      	ldr	r0, [r0, #0]
 800c4c2:	8940      	ldrh	r0, [r0, #10]
 800c4c4:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4c8:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c4ca:	b148      	cbz	r0, 800c4e0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c4cc:	4281      	cmp	r1, r0
 800c4ce:	d305      	bcc.n	800c4dc <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 800c4d0:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4d2:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1f8      	bne.n	800c4cc <clmt_clust+0x12>
 800c4da:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 800c4dc:	6858      	ldr	r0, [r3, #4]
 800c4de:	4408      	add	r0, r1
}
 800c4e0:	4770      	bx	lr

0800c4e2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c4e2:	4602      	mov	r2, r0
	BYTE sum = 0;
	UINT n = 11;
 800c4e4:	f100 0c0b 	add.w	ip, r0, #11
	BYTE sum = 0;
 800c4e8:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c4ea:	01c3      	lsls	r3, r0, #7
 800c4ec:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800c4f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c4f4:	fa51 f383 	uxtab	r3, r1, r3
 800c4f8:	b2d8      	uxtb	r0, r3
	} while (--n);
 800c4fa:	4562      	cmp	r2, ip
 800c4fc:	d1f5      	bne.n	800c4ea <sum_sfn+0x8>
	return sum;
}
 800c4fe:	4770      	bx	lr

0800c500 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c500:	6801      	ldr	r1, [r0, #0]
 800c502:	b1d1      	cbz	r1, 800c53a <get_ldnumber+0x3a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c504:	f891 c000 	ldrb.w	ip, [r1]
 800c508:	f1bc 0f1f 	cmp.w	ip, #31
 800c50c:	d909      	bls.n	800c522 <get_ldnumber+0x22>
 800c50e:	460a      	mov	r2, r1
 800c510:	4663      	mov	r3, ip
 800c512:	2b3a      	cmp	r3, #58	@ 0x3a
 800c514:	d014      	beq.n	800c540 <get_ldnumber+0x40>
 800c516:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c51a:	2b1f      	cmp	r3, #31
 800c51c:	d8f9      	bhi.n	800c512 <get_ldnumber+0x12>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c51e:	2000      	movs	r0, #0
 800c520:	4770      	bx	lr
 800c522:	2000      	movs	r0, #0
 800c524:	4770      	bx	lr
			i = *tp++ - '0';
 800c526:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c528:	428a      	cmp	r2, r1
 800c52a:	d002      	beq.n	800c532 <get_ldnumber+0x32>
	int vol = -1;
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	4770      	bx	lr
					*path = ++tt;
 800c532:	3201      	adds	r2, #1
 800c534:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 800c536:	2000      	movs	r0, #0
 800c538:	4770      	bx	lr
	int vol = -1;
 800c53a:	f04f 30ff 	mov.w	r0, #4294967295
 800c53e:	4770      	bx	lr
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c540:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c544:	d0ef      	beq.n	800c526 <get_ldnumber+0x26>
	int vol = -1;
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 800c54a:	4770      	bx	lr

0800c54c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c550:	4604      	mov	r4, r0
 800c552:	b198      	cbz	r0, 800c57c <validate+0x30>
 800c554:	6803      	ldr	r3, [r0, #0]
 800c556:	b19b      	cbz	r3, 800c580 <validate+0x34>
 800c558:	781a      	ldrb	r2, [r3, #0]
 800c55a:	b1a2      	cbz	r2, 800c586 <validate+0x3a>
 800c55c:	8881      	ldrh	r1, [r0, #4]
 800c55e:	88da      	ldrh	r2, [r3, #6]
 800c560:	4291      	cmp	r1, r2
 800c562:	d003      	beq.n	800c56c <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800c564:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c566:	2400      	movs	r4, #0
 800c568:	602c      	str	r4, [r5, #0]
	return res;
}
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c56c:	7858      	ldrb	r0, [r3, #1]
 800c56e:	f7ff fe4f 	bl	800c210 <disk_status>
 800c572:	f010 0001 	ands.w	r0, r0, #1
 800c576:	d109      	bne.n	800c58c <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c578:	6824      	ldr	r4, [r4, #0]
 800c57a:	e7f5      	b.n	800c568 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c57c:	2009      	movs	r0, #9
 800c57e:	e7f3      	b.n	800c568 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c580:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800c582:	2009      	movs	r0, #9
 800c584:	e7f0      	b.n	800c568 <validate+0x1c>
 800c586:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c588:	2400      	movs	r4, #0
 800c58a:	e7ed      	b.n	800c568 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c58c:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c58e:	2400      	movs	r4, #0
 800c590:	e7ea      	b.n	800c568 <validate+0x1c>

0800c592 <sync_window>:
{
 800c592:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c596:	78c5      	ldrb	r5, [r0, #3]
 800c598:	b915      	cbnz	r5, 800c5a0 <sync_window+0xe>
}
 800c59a:	4628      	mov	r0, r5
 800c59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a0:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800c5a2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c5a4:	f100 0834 	add.w	r8, r0, #52	@ 0x34
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	4641      	mov	r1, r8
 800c5ae:	7840      	ldrb	r0, [r0, #1]
 800c5b0:	f7ff fe5e 	bl	800c270 <disk_write>
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	b9b8      	cbnz	r0, 800c5e8 <sync_window+0x56>
			fs->wflag = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c5bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c5be:	1af3      	subs	r3, r6, r3
 800c5c0:	69e2      	ldr	r2, [r4, #28]
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d2e9      	bcs.n	800c59a <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c5c6:	78a7      	ldrb	r7, [r4, #2]
 800c5c8:	2f01      	cmp	r7, #1
 800c5ca:	d9e6      	bls.n	800c59a <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 800c5cc:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 800c5d0:	69e3      	ldr	r3, [r4, #28]
 800c5d2:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800c5d4:	464b      	mov	r3, r9
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	4641      	mov	r1, r8
 800c5da:	7860      	ldrb	r0, [r4, #1]
 800c5dc:	f7ff fe48 	bl	800c270 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c5e0:	3f01      	subs	r7, #1
 800c5e2:	2f01      	cmp	r7, #1
 800c5e4:	d1f4      	bne.n	800c5d0 <sync_window+0x3e>
 800c5e6:	e7d8      	b.n	800c59a <sync_window+0x8>
			res = FR_DISK_ERR;
 800c5e8:	2501      	movs	r5, #1
 800c5ea:	e7d6      	b.n	800c59a <sync_window+0x8>

0800c5ec <move_window>:
{
 800c5ec:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c5ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	d101      	bne.n	800c5f8 <move_window+0xc>
	FRESULT res = FR_OK;
 800c5f4:	2000      	movs	r0, #0
}
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800c5fc:	f7ff ffc9 	bl	800c592 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c600:	2800      	cmp	r0, #0
 800c602:	d1f8      	bne.n	800c5f6 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c604:	2301      	movs	r3, #1
 800c606:	462a      	mov	r2, r5
 800c608:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800c60c:	7860      	ldrb	r0, [r4, #1]
 800c60e:	f7ff fe21 	bl	800c254 <disk_read>
				res = FR_DISK_ERR;
 800c612:	2800      	cmp	r0, #0
 800c614:	bf1c      	itt	ne
 800c616:	2001      	movne	r0, #1
 800c618:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800c61c:	6325      	str	r5, [r4, #48]	@ 0x30
 800c61e:	e7ea      	b.n	800c5f6 <move_window+0xa>

0800c620 <get_fileinfo>:
{
 800c620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800c624:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800c628:	2300      	movs	r3, #0
 800c62a:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c62c:	69c3      	ldr	r3, [r0, #28]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d079      	beq.n	800c726 <get_fileinfo+0x106>
 800c632:	4605      	mov	r5, r0
 800c634:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c636:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63c:	d01d      	beq.n	800c67a <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c63e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c642:	8818      	ldrh	r0, [r3, #0]
 800c644:	b198      	cbz	r0, 800c66e <get_fileinfo+0x4e>
 800c646:	f101 0715 	add.w	r7, r1, #21
			i = j = 0;
 800c64a:	2600      	movs	r6, #0
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c64c:	46b1      	mov	r9, r6
 800c64e:	4649      	mov	r1, r9
 800c650:	f001 fbe8 	bl	800de24 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c654:	b168      	cbz	r0, 800c672 <get_fileinfo+0x52>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c656:	2eff      	cmp	r6, #255	@ 0xff
 800c658:	d015      	beq.n	800c686 <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 800c65a:	3601      	adds	r6, #1
 800c65c:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c660:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c664:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800c668:	2800      	cmp	r0, #0
 800c66a:	d1f0      	bne.n	800c64e <get_fileinfo+0x2e>
 800c66c:	e002      	b.n	800c674 <get_fileinfo+0x54>
			i = j = 0;
 800c66e:	2600      	movs	r6, #0
 800c670:	e000      	b.n	800c674 <get_fileinfo+0x54>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c672:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c674:	4426      	add	r6, r4
 800c676:	2300      	movs	r3, #0
 800c678:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c67a:	7da0      	ldrb	r0, [r4, #22]
	i = j = 0;
 800c67c:	f04f 0c00 	mov.w	ip, #0
 800c680:	4662      	mov	r2, ip
			fno->altname[j++] = '.';
 800c682:	262e      	movs	r6, #46	@ 0x2e
 800c684:	e013      	b.n	800c6ae <get_fileinfo+0x8e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c686:	2600      	movs	r6, #0
 800c688:	e7f4      	b.n	800c674 <get_fileinfo+0x54>
			if (!lfv) fno->fname[j] = '.';
 800c68a:	b918      	cbnz	r0, 800c694 <get_fileinfo+0x74>
 800c68c:	eb04 010c 	add.w	r1, r4, ip
 800c690:	272e      	movs	r7, #46	@ 0x2e
 800c692:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800c694:	eb04 010c 	add.w	r1, r4, ip
 800c698:	724e      	strb	r6, [r1, #9]
 800c69a:	f10c 0c01 	add.w	ip, ip, #1
 800c69e:	e010      	b.n	800c6c2 <get_fileinfo+0xa2>
			fno->fname[j] = c;
 800c6a0:	eb04 010c 	add.w	r1, r4, ip
 800c6a4:	758b      	strb	r3, [r1, #22]
		j++;
 800c6a6:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800c6aa:	2a0b      	cmp	r2, #11
 800c6ac:	d01e      	beq.n	800c6ec <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[i++];
 800c6ae:	6a29      	ldr	r1, [r5, #32]
 800c6b0:	5c8b      	ldrb	r3, [r1, r2]
 800c6b2:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800c6b4:	2b20      	cmp	r3, #32
 800c6b6:	d0f8      	beq.n	800c6aa <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c6b8:	2b05      	cmp	r3, #5
 800c6ba:	bf08      	it	eq
 800c6bc:	23e5      	moveq	r3, #229	@ 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800c6be:	2a09      	cmp	r2, #9
 800c6c0:	d0e3      	beq.n	800c68a <get_fileinfo+0x6a>
		fno->altname[j] = c;
 800c6c2:	eb04 010c 	add.w	r1, r4, ip
 800c6c6:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d1ec      	bne.n	800c6a6 <get_fileinfo+0x86>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c6cc:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 800c6d0:	b2c9      	uxtb	r1, r1
 800c6d2:	2919      	cmp	r1, #25
 800c6d4:	d8e4      	bhi.n	800c6a0 <get_fileinfo+0x80>
 800c6d6:	6a29      	ldr	r1, [r5, #32]
 800c6d8:	7b0f      	ldrb	r7, [r1, #12]
 800c6da:	2a09      	cmp	r2, #9
 800c6dc:	bf34      	ite	cc
 800c6de:	2108      	movcc	r1, #8
 800c6e0:	2110      	movcs	r1, #16
 800c6e2:	420f      	tst	r7, r1
				c += 0x20;			/* To lower */
 800c6e4:	bf1c      	itt	ne
 800c6e6:	3320      	addne	r3, #32
 800c6e8:	b2db      	uxtbne	r3, r3
 800c6ea:	e7d9      	b.n	800c6a0 <get_fileinfo+0x80>
	if (!lfv) {
 800c6ec:	b940      	cbnz	r0, 800c700 <get_fileinfo+0xe0>
		fno->fname[j] = 0;
 800c6ee:	eb04 030c 	add.w	r3, r4, ip
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	759a      	strb	r2, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c6f6:	6a2b      	ldr	r3, [r5, #32]
 800c6f8:	7b1b      	ldrb	r3, [r3, #12]
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	bf08      	it	eq
 800c6fe:	4694      	moveq	ip, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c700:	44a4      	add	ip, r4
 800c702:	2300      	movs	r3, #0
 800c704:	f88c 3009 	strb.w	r3, [ip, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c708:	6a2b      	ldr	r3, [r5, #32]
 800c70a:	7adb      	ldrb	r3, [r3, #11]
 800c70c:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c70e:	6a28      	ldr	r0, [r5, #32]
 800c710:	301c      	adds	r0, #28
 800c712:	f7ff fdc9 	bl	800c2a8 <ld_dword>
 800c716:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c718:	6a28      	ldr	r0, [r5, #32]
 800c71a:	3016      	adds	r0, #22
 800c71c:	f7ff fdc4 	bl	800c2a8 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c720:	80e0      	strh	r0, [r4, #6]
 800c722:	0c00      	lsrs	r0, r0, #16
 800c724:	80a0      	strh	r0, [r4, #4]
}
 800c726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c72c <sync_fs>:
{
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4604      	mov	r4, r0
	res = sync_window(fs);
 800c730:	f7ff ff2f 	bl	800c592 <sync_window>
	if (res == FR_OK) {
 800c734:	b950      	cbnz	r0, 800c74c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c736:	7823      	ldrb	r3, [r4, #0]
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d008      	beq.n	800c74e <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c73c:	2200      	movs	r2, #0
 800c73e:	4611      	mov	r1, r2
 800c740:	7860      	ldrb	r0, [r4, #1]
 800c742:	f7ff fda3 	bl	800c28c <disk_ioctl>
 800c746:	3800      	subs	r0, #0
 800c748:	bf18      	it	ne
 800c74a:	2001      	movne	r0, #1
}
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c74e:	7923      	ldrb	r3, [r4, #4]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d1f3      	bne.n	800c73c <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 800c754:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800c758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c75c:	2100      	movs	r1, #0
 800c75e:	4628      	mov	r0, r5
 800c760:	f7ff fdbf 	bl	800c2e2 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800c764:	2355      	movs	r3, #85	@ 0x55
 800c766:	f884 3232 	strb.w	r3, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val;
 800c76a:	23aa      	movs	r3, #170	@ 0xaa
 800c76c:	f884 3233 	strb.w	r3, [r4, #563]	@ 0x233
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c770:	490e      	ldr	r1, [pc, #56]	@ (800c7ac <sync_fs+0x80>)
 800c772:	4628      	mov	r0, r5
 800c774:	f7ff fda3 	bl	800c2be <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c778:	490d      	ldr	r1, [pc, #52]	@ (800c7b0 <sync_fs+0x84>)
 800c77a:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800c77e:	f7ff fd9e 	bl	800c2be <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c782:	6961      	ldr	r1, [r4, #20]
 800c784:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800c788:	f7ff fd99 	bl	800c2be <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c78c:	6921      	ldr	r1, [r4, #16]
 800c78e:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800c792:	f7ff fd94 	bl	800c2be <st_dword>
			fs->winsect = fs->volbase + 1;
 800c796:	6a22      	ldr	r2, [r4, #32]
 800c798:	3201      	adds	r2, #1
 800c79a:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c79c:	2301      	movs	r3, #1
 800c79e:	4629      	mov	r1, r5
 800c7a0:	7860      	ldrb	r0, [r4, #1]
 800c7a2:	f7ff fd65 	bl	800c270 <disk_write>
			fs->fsi_flag = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	7123      	strb	r3, [r4, #4]
 800c7aa:	e7c7      	b.n	800c73c <sync_fs+0x10>
 800c7ac:	41615252 	.word	0x41615252
 800c7b0:	61417272 	.word	0x61417272

0800c7b4 <put_fat>:
{
 800c7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7b8:	2901      	cmp	r1, #1
 800c7ba:	f240 8082 	bls.w	800c8c2 <put_fat+0x10e>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	4615      	mov	r5, r2
 800c7c4:	6983      	ldr	r3, [r0, #24]
 800c7c6:	428b      	cmp	r3, r1
 800c7c8:	d97f      	bls.n	800c8ca <put_fat+0x116>
		switch (fs->fs_type) {
 800c7ca:	7803      	ldrb	r3, [r0, #0]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d049      	beq.n	800c864 <put_fat+0xb0>
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d05b      	beq.n	800c88c <put_fat+0xd8>
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d17a      	bne.n	800c8ce <put_fat+0x11a>
			bc = (UINT)clst; bc += bc / 2;
 800c7d8:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7dc:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c7de:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800c7e2:	f7ff ff03 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d16b      	bne.n	800c8c4 <put_fat+0x110>
			p = fs->win + bc++ % SS(fs);
 800c7ec:	f106 0934 	add.w	r9, r6, #52	@ 0x34
 800c7f0:	f108 0a01 	add.w	sl, r8, #1
 800c7f4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c7f8:	f014 0f01 	tst.w	r4, #1
 800c7fc:	d01a      	beq.n	800c834 <put_fat+0x80>
 800c7fe:	f819 3008 	ldrb.w	r3, [r9, r8]
 800c802:	f003 030f 	and.w	r3, r3, #15
 800c806:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800c80a:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800c80e:	2301      	movs	r3, #1
 800c810:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c812:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800c814:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff fee7 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800c81e:	2800      	cmp	r0, #0
 800c820:	d157      	bne.n	800c8d2 <put_fat+0x11e>
			p = fs->win + bc % SS(fs);
 800c822:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800c826:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c828:	f3c5 1207 	ubfx	r2, r5, #4, #8
 800c82c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c82e:	2301      	movs	r3, #1
 800c830:	70f3      	strb	r3, [r6, #3]
			break;
 800c832:	e047      	b.n	800c8c4 <put_fat+0x110>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c834:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 800c838:	2301      	movs	r3, #1
 800c83a:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c83c:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800c83e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff fed2 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800c848:	2800      	cmp	r0, #0
 800c84a:	d144      	bne.n	800c8d6 <put_fat+0x122>
			p = fs->win + bc % SS(fs);
 800c84c:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800c850:	eb09 030a 	add.w	r3, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c854:	f3c5 2203 	ubfx	r2, r5, #8, #4
 800c858:	f819 100a 	ldrb.w	r1, [r9, sl]
 800c85c:	f021 010f 	bic.w	r1, r1, #15
 800c860:	430a      	orrs	r2, r1
 800c862:	e7e3      	b.n	800c82c <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c864:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c866:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c86a:	f7ff febf 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800c86e:	4607      	mov	r7, r0
 800c870:	bb40      	cbnz	r0, 800c8c4 <put_fat+0x110>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c872:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800c876:	0064      	lsls	r4, r4, #1
 800c878:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800c87c:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800c87e:	551d      	strb	r5, [r3, r4]
 800c880:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 800c884:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800c886:	2301      	movs	r3, #1
 800c888:	70f3      	strb	r3, [r6, #3]
			break;
 800c88a:	e01b      	b.n	800c8c4 <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c88c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800c88e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c892:	f7ff feab 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800c896:	4607      	mov	r7, r0
 800c898:	b9a0      	cbnz	r0, 800c8c4 <put_fat+0x110>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c89a:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 800c89e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800c8a2:	00a4      	lsls	r4, r4, #2
 800c8a4:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800c8a8:	441c      	add	r4, r3
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f7ff fcfc 	bl	800c2a8 <ld_dword>
 800c8b0:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c8b4:	4329      	orrs	r1, r5
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f7ff fd01 	bl	800c2be <st_dword>
			fs->wflag = 1;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	70f3      	strb	r3, [r6, #3]
			break;
 800c8c0:	e000      	b.n	800c8c4 <put_fat+0x110>
	FRESULT res = FR_INT_ERR;
 800c8c2:	2702      	movs	r7, #2
}
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 800c8ca:	2702      	movs	r7, #2
 800c8cc:	e7fa      	b.n	800c8c4 <put_fat+0x110>
		switch (fs->fs_type) {
 800c8ce:	2702      	movs	r7, #2
 800c8d0:	e7f8      	b.n	800c8c4 <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	e7f6      	b.n	800c8c4 <put_fat+0x110>
 800c8d6:	4607      	mov	r7, r0
	return res;
 800c8d8:	e7f4      	b.n	800c8c4 <put_fat+0x110>

0800c8da <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800c8da:	768a      	strb	r2, [r1, #26]
 800c8dc:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 800c8e0:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800c8e2:	7803      	ldrb	r3, [r0, #0]
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d000      	beq.n	800c8ea <st_clust+0x10>
}
 800c8e8:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c8ea:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c8ec:	750a      	strb	r2, [r1, #20]
 800c8ee:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800c8f0:	754a      	strb	r2, [r1, #21]
}
 800c8f2:	e7f9      	b.n	800c8e8 <st_clust+0xe>

0800c8f4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8f4:	2901      	cmp	r1, #1
 800c8f6:	d956      	bls.n	800c9a6 <get_fat+0xb2>
{
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800c8fc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8fe:	69ab      	ldr	r3, [r5, #24]
 800c900:	428b      	cmp	r3, r1
 800c902:	d952      	bls.n	800c9aa <get_fat+0xb6>
		switch (fs->fs_type) {
 800c904:	782b      	ldrb	r3, [r5, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d02a      	beq.n	800c960 <get_fat+0x6c>
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d039      	beq.n	800c982 <get_fat+0x8e>
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d14d      	bne.n	800c9ae <get_fat+0xba>
			bc = (UINT)clst; bc += bc / 2;
 800c912:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c916:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800c918:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c91c:	4628      	mov	r0, r5
 800c91e:	f7ff fe65 	bl	800c5ec <move_window>
 800c922:	b110      	cbz	r0, 800c92a <get_fat+0x36>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	e040      	b.n	800c9ac <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800c92a:	1c77      	adds	r7, r6, #1
 800c92c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c930:	442e      	add	r6, r5
 800c932:	f896 6034 	ldrb.w	r6, [r6, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c936:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800c938:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800c93c:	4628      	mov	r0, r5
 800c93e:	f7ff fe55 	bl	800c5ec <move_window>
 800c942:	bbb0      	cbnz	r0, 800c9b2 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c944:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800c948:	442f      	add	r7, r5
 800c94a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800c94e:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c952:	f014 0f01 	tst.w	r4, #1
 800c956:	bf14      	ite	ne
 800c958:	0900      	lsrne	r0, r0, #4
 800c95a:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 800c95e:	e025      	b.n	800c9ac <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c960:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800c962:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c966:	4628      	mov	r0, r5
 800c968:	f7ff fe40 	bl	800c5ec <move_window>
 800c96c:	bb20      	cbnz	r0, 800c9b8 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c96e:	3534      	adds	r5, #52	@ 0x34
 800c970:	0064      	lsls	r4, r4, #1
 800c972:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800c976:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800c978:	785b      	ldrb	r3, [r3, #1]
 800c97a:	5d28      	ldrb	r0, [r5, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c97c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 800c980:	e014      	b.n	800c9ac <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c982:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800c984:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c988:	4628      	mov	r0, r5
 800c98a:	f7ff fe2f 	bl	800c5ec <move_window>
 800c98e:	b9b0      	cbnz	r0, 800c9be <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c990:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 800c994:	00a4      	lsls	r4, r4, #2
 800c996:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800c99a:	4420      	add	r0, r4
 800c99c:	f7ff fc84 	bl	800c2a8 <ld_dword>
 800c9a0:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800c9a4:	e002      	b.n	800c9ac <get_fat+0xb8>
		val = 1;	/* Internal error */
 800c9a6:	2001      	movs	r0, #1
}
 800c9a8:	4770      	bx	lr
		val = 1;	/* Internal error */
 800c9aa:	2001      	movs	r0, #1
}
 800c9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	e7fc      	b.n	800c9ac <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b6:	e7f9      	b.n	800c9ac <get_fat+0xb8>
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	e7f6      	b.n	800c9ac <get_fat+0xb8>
 800c9be:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800c9c2:	e7f3      	b.n	800c9ac <get_fat+0xb8>

0800c9c4 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800c9c8:	d245      	bcs.n	800ca56 <dir_sdi+0x92>
{
 800c9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9d2:	f011 0f1f 	tst.w	r1, #31
 800c9d6:	d140      	bne.n	800ca5a <dir_sdi+0x96>
	FATFS *fs = dp->obj.fs;
 800c9d8:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800c9dc:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c9de:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c9e0:	b93c      	cbnz	r4, 800c9f2 <dir_sdi+0x2e>
 800c9e2:	f898 3000 	ldrb.w	r3, [r8]
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d91f      	bls.n	800ca2a <dir_sdi+0x66>
		clst = fs->dirbase;
 800c9ea:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c9ee:	b1e3      	cbz	r3, 800ca2a <dir_sdi+0x66>
 800c9f0:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c9f2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c9f6:	025f      	lsls	r7, r3, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9f8:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 800c9fc:	d310      	bcc.n	800ca20 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7ff ff77 	bl	800c8f4 <get_fat>
 800ca06:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca0c:	d029      	beq.n	800ca62 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca0e:	2801      	cmp	r0, #1
 800ca10:	d929      	bls.n	800ca66 <dir_sdi+0xa2>
 800ca12:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ca16:	4283      	cmp	r3, r0
 800ca18:	d927      	bls.n	800ca6a <dir_sdi+0xa6>
			ofs -= csz;
 800ca1a:	1bed      	subs	r5, r5, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca1c:	42af      	cmp	r7, r5
 800ca1e:	d9ee      	bls.n	800c9fe <dir_sdi+0x3a>
		dp->sect = clust2sect(fs, clst);
 800ca20:	4621      	mov	r1, r4
 800ca22:	4640      	mov	r0, r8
 800ca24:	f7ff fd3e 	bl	800c4a4 <clust2sect>
 800ca28:	e006      	b.n	800ca38 <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca2a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ca2e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800ca32:	d914      	bls.n	800ca5e <dir_sdi+0x9a>
		dp->sect = fs->dirbase;
 800ca34:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 800ca38:	61f0      	str	r0, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800ca3a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca3c:	b1b8      	cbz	r0, 800ca6e <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca3e:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 800ca42:	61f0      	str	r0, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca44:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 800ca48:	f3c5 0108 	ubfx	r1, r5, #0, #9
 800ca4c:	4441      	add	r1, r8
 800ca4e:	6231      	str	r1, [r6, #32]
	return FR_OK;
 800ca50:	2000      	movs	r0, #0
}
 800ca52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800ca56:	2002      	movs	r0, #2
}
 800ca58:	4770      	bx	lr
		return FR_INT_ERR;
 800ca5a:	2002      	movs	r0, #2
 800ca5c:	e7f9      	b.n	800ca52 <dir_sdi+0x8e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca5e:	2002      	movs	r0, #2
 800ca60:	e7f7      	b.n	800ca52 <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca62:	2001      	movs	r0, #1
 800ca64:	e7f5      	b.n	800ca52 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca66:	2002      	movs	r0, #2
 800ca68:	e7f3      	b.n	800ca52 <dir_sdi+0x8e>
 800ca6a:	2002      	movs	r0, #2
 800ca6c:	e7f1      	b.n	800ca52 <dir_sdi+0x8e>
	if (!dp->sect) return FR_INT_ERR;
 800ca6e:	2002      	movs	r0, #2
 800ca70:	e7ef      	b.n	800ca52 <dir_sdi+0x8e>

0800ca72 <create_chain>:
{
 800ca72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca76:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800ca78:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800ca7a:	4688      	mov	r8, r1
 800ca7c:	b939      	cbnz	r1, 800ca8e <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca7e:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca80:	b195      	cbz	r5, 800caa8 <create_chain+0x36>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	42ab      	cmp	r3, r5
 800ca86:	bf98      	it	ls
 800ca88:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 800ca8a:	462c      	mov	r4, r5
 800ca8c:	e01b      	b.n	800cac6 <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca8e:	f7ff ff31 	bl	800c8f4 <get_fat>
 800ca92:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca94:	2801      	cmp	r0, #1
 800ca96:	d946      	bls.n	800cb26 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca98:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca9c:	d048      	beq.n	800cb30 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca9e:	69ba      	ldr	r2, [r7, #24]
 800caa0:	4282      	cmp	r2, r0
 800caa2:	d845      	bhi.n	800cb30 <create_chain+0xbe>
		scl = clst;
 800caa4:	4645      	mov	r5, r8
 800caa6:	e7f0      	b.n	800ca8a <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800caa8:	2501      	movs	r5, #1
 800caaa:	e7ee      	b.n	800ca8a <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800caac:	4621      	mov	r1, r4
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ff20 	bl	800c8f4 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800cab4:	4603      	mov	r3, r0
 800cab6:	b170      	cbz	r0, 800cad6 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cab8:	2801      	cmp	r0, #1
 800caba:	d039      	beq.n	800cb30 <create_chain+0xbe>
 800cabc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cac0:	d036      	beq.n	800cb30 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800cac2:	42ac      	cmp	r4, r5
 800cac4:	d033      	beq.n	800cb2e <create_chain+0xbc>
			ncl++;							/* Next cluster */
 800cac6:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	42a3      	cmp	r3, r4
 800cacc:	d8ee      	bhi.n	800caac <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800cace:	2d01      	cmp	r5, #1
 800cad0:	d92b      	bls.n	800cb2a <create_chain+0xb8>
				ncl = 2;
 800cad2:	2402      	movs	r4, #2
 800cad4:	e7ea      	b.n	800caac <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cad6:	f04f 32ff 	mov.w	r2, #4294967295
 800cada:	4621      	mov	r1, r4
 800cadc:	4638      	mov	r0, r7
 800cade:	f7ff fe69 	bl	800c7b4 <put_fat>
		if (res == FR_OK && clst != 0) {
 800cae2:	4603      	mov	r3, r0
 800cae4:	b9c8      	cbnz	r0, 800cb1a <create_chain+0xa8>
 800cae6:	f1b8 0f00 	cmp.w	r8, #0
 800caea:	d10e      	bne.n	800cb0a <create_chain+0x98>
		fs->last_clst = ncl;
 800caec:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	3b02      	subs	r3, #2
 800caf4:	429a      	cmp	r2, r3
 800caf6:	bf9c      	itt	ls
 800caf8:	f102 32ff 	addls.w	r2, r2, #4294967295
 800cafc:	617a      	strls	r2, [r7, #20]
		fs->fsi_flag |= 1;
 800cafe:	793b      	ldrb	r3, [r7, #4]
 800cb00:	f043 0301 	orr.w	r3, r3, #1
 800cb04:	713b      	strb	r3, [r7, #4]
 800cb06:	4623      	mov	r3, r4
 800cb08:	e012      	b.n	800cb30 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	4641      	mov	r1, r8
 800cb0e:	4638      	mov	r0, r7
 800cb10:	f7ff fe50 	bl	800c7b4 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb14:	4603      	mov	r3, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d0e8      	beq.n	800caec <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	bf14      	ite	ne
 800cb1e:	2301      	movne	r3, #1
 800cb20:	f04f 33ff 	moveq.w	r3, #4294967295
 800cb24:	e004      	b.n	800cb30 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb26:	2301      	movs	r3, #1
 800cb28:	e002      	b.n	800cb30 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e000      	b.n	800cb30 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb36 <remove_chain>:
{
 800cb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800cb3c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb3e:	2901      	cmp	r1, #1
 800cb40:	d931      	bls.n	800cba6 <remove_chain+0x70>
 800cb42:	4606      	mov	r6, r0
 800cb44:	4611      	mov	r1, r2
 800cb46:	69ab      	ldr	r3, [r5, #24]
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d92f      	bls.n	800cbac <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb4c:	b90a      	cbnz	r2, 800cb52 <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb4e:	2700      	movs	r7, #0
 800cb50:	e00a      	b.n	800cb68 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb52:	f04f 32ff 	mov.w	r2, #4294967295
 800cb56:	4628      	mov	r0, r5
 800cb58:	f7ff fe2c 	bl	800c7b4 <put_fat>
		if (res != FR_OK) return res;
 800cb5c:	4684      	mov	ip, r0
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0f5      	beq.n	800cb4e <remove_chain+0x18>
 800cb62:	e025      	b.n	800cbb0 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb64:	42a2      	cmp	r2, r4
 800cb66:	d923      	bls.n	800cbb0 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb68:	46a0      	mov	r8, r4
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff fec1 	bl	800c8f4 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb72:	4604      	mov	r4, r0
 800cb74:	b1f8      	cbz	r0, 800cbb6 <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb76:	2801      	cmp	r0, #1
 800cb78:	d020      	beq.n	800cbbc <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb7e:	d020      	beq.n	800cbc2 <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb80:	463a      	mov	r2, r7
 800cb82:	4641      	mov	r1, r8
 800cb84:	4628      	mov	r0, r5
 800cb86:	f7ff fe15 	bl	800c7b4 <put_fat>
			if (res != FR_OK) return res;
 800cb8a:	4684      	mov	ip, r0
 800cb8c:	b980      	cbnz	r0, 800cbb0 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb8e:	696b      	ldr	r3, [r5, #20]
 800cb90:	69aa      	ldr	r2, [r5, #24]
 800cb92:	1e91      	subs	r1, r2, #2
 800cb94:	428b      	cmp	r3, r1
 800cb96:	d2e5      	bcs.n	800cb64 <remove_chain+0x2e>
			fs->free_clst++;
 800cb98:	3301      	adds	r3, #1
 800cb9a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800cb9c:	792b      	ldrb	r3, [r5, #4]
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	712b      	strb	r3, [r5, #4]
 800cba4:	e7de      	b.n	800cb64 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cba6:	f04f 0c02 	mov.w	ip, #2
 800cbaa:	e001      	b.n	800cbb0 <remove_chain+0x7a>
 800cbac:	f04f 0c02 	mov.w	ip, #2
}
 800cbb0:	4660      	mov	r0, ip
 800cbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 800cbb6:	f04f 0c00 	mov.w	ip, #0
 800cbba:	e7f9      	b.n	800cbb0 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cbbc:	f04f 0c02 	mov.w	ip, #2
 800cbc0:	e7f6      	b.n	800cbb0 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cbc2:	f04f 0c01 	mov.w	ip, #1
 800cbc6:	e7f3      	b.n	800cbb0 <remove_chain+0x7a>

0800cbc8 <dir_next>:
{
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbcc:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cbce:	69c3      	ldr	r3, [r0, #28]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d06d      	beq.n	800ccb0 <dir_next+0xe8>
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	460f      	mov	r7, r1
 800cbd8:	3520      	adds	r5, #32
 800cbda:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800cbde:	d269      	bcs.n	800ccb4 <dir_next+0xec>
	FATFS *fs = dp->obj.fs;
 800cbe0:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cbe2:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800cbe6:	f1b8 0f00 	cmp.w	r8, #0
 800cbea:	d107      	bne.n	800cbfc <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800cbec:	3301      	adds	r3, #1
 800cbee:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800cbf0:	6981      	ldr	r1, [r0, #24]
 800cbf2:	b971      	cbnz	r1, 800cc12 <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cbf4:	8933      	ldrh	r3, [r6, #8]
 800cbf6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800cbfa:	d906      	bls.n	800cc0a <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 800cbfc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbfe:	3634      	adds	r6, #52	@ 0x34
 800cc00:	4446      	add	r6, r8
 800cc02:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800cc04:	2000      	movs	r0, #0
}
 800cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61c3      	str	r3, [r0, #28]
 800cc0e:	2004      	movs	r0, #4
 800cc10:	e7f9      	b.n	800cc06 <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc12:	8973      	ldrh	r3, [r6, #10]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800cc1a:	d1ef      	bne.n	800cbfc <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc1c:	f7ff fe6a 	bl	800c8f4 <get_fat>
 800cc20:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc22:	2801      	cmp	r0, #1
 800cc24:	d948      	bls.n	800ccb8 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc26:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc2a:	d047      	beq.n	800ccbc <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc2c:	69b3      	ldr	r3, [r6, #24]
 800cc2e:	4283      	cmp	r3, r0
 800cc30:	d836      	bhi.n	800cca0 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800cc32:	b18f      	cbz	r7, 800cc58 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc34:	69a1      	ldr	r1, [r4, #24]
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7ff ff1b 	bl	800ca72 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc3c:	4682      	mov	sl, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d03e      	beq.n	800ccc0 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc42:	2801      	cmp	r0, #1
 800cc44:	d03e      	beq.n	800ccc4 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc46:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc4a:	d03d      	beq.n	800ccc8 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	f7ff fca0 	bl	800c592 <sync_window>
 800cc52:	b128      	cbz	r0, 800cc60 <dir_next+0x98>
 800cc54:	2001      	movs	r0, #1
 800cc56:	e7d6      	b.n	800cc06 <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	61e3      	str	r3, [r4, #28]
 800cc5c:	2004      	movs	r0, #4
 800cc5e:	e7d2      	b.n	800cc06 <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc64:	2100      	movs	r1, #0
 800cc66:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800cc6a:	f7ff fb3a 	bl	800c2e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc6e:	4651      	mov	r1, sl
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff fc17 	bl	800c4a4 <clust2sect>
 800cc76:	6330      	str	r0, [r6, #48]	@ 0x30
 800cc78:	8973      	ldrh	r3, [r6, #10]
 800cc7a:	b16b      	cbz	r3, 800cc98 <dir_next+0xd0>
						fs->wflag = 1;
 800cc7c:	2701      	movs	r7, #1
 800cc7e:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff fc86 	bl	800c592 <sync_window>
 800cc86:	bb08      	cbnz	r0, 800cccc <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc88:	f109 0901 	add.w	r9, r9, #1
 800cc8c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800cc8e:	3301      	adds	r3, #1
 800cc90:	6333      	str	r3, [r6, #48]	@ 0x30
 800cc92:	8973      	ldrh	r3, [r6, #10]
 800cc94:	454b      	cmp	r3, r9
 800cc96:	d8f2      	bhi.n	800cc7e <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 800cc98:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800cc9a:	eba3 0309 	sub.w	r3, r3, r9
 800cc9e:	6333      	str	r3, [r6, #48]	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800cca0:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800cca4:	4651      	mov	r1, sl
 800cca6:	4630      	mov	r0, r6
 800cca8:	f7ff fbfc 	bl	800c4a4 <clust2sect>
 800ccac:	61e0      	str	r0, [r4, #28]
 800ccae:	e7a5      	b.n	800cbfc <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ccb0:	2004      	movs	r0, #4
 800ccb2:	e7a8      	b.n	800cc06 <dir_next+0x3e>
 800ccb4:	2004      	movs	r0, #4
 800ccb6:	e7a6      	b.n	800cc06 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ccb8:	2002      	movs	r0, #2
 800ccba:	e7a4      	b.n	800cc06 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ccbc:	2001      	movs	r0, #1
 800ccbe:	e7a2      	b.n	800cc06 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccc0:	2007      	movs	r0, #7
 800ccc2:	e7a0      	b.n	800cc06 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccc4:	2002      	movs	r0, #2
 800ccc6:	e79e      	b.n	800cc06 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccc8:	2001      	movs	r0, #1
 800ccca:	e79c      	b.n	800cc06 <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cccc:	2001      	movs	r0, #1
 800ccce:	e79a      	b.n	800cc06 <dir_next+0x3e>

0800ccd0 <dir_find>:
{
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	b087      	sub	sp, #28
 800ccd6:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800ccd8:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ccda:	2100      	movs	r1, #0
 800ccdc:	f7ff fe72 	bl	800c9c4 <dir_sdi>
	if (res != FR_OK) return res;
 800cce0:	4602      	mov	r2, r0
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f040 80c4 	bne.w	800ce70 <dir_find+0x1a0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cce8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccec:	632b      	str	r3, [r5, #48]	@ 0x30
 800ccee:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800ccf2:	46c1      	mov	r9, r8
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccf4:	469a      	mov	sl, r3
 800ccf6:	46c3      	mov	fp, r8
		res = dir_next(dp, 0);	/* Next entry */
 800ccf8:	2700      	movs	r7, #0
 800ccfa:	e00a      	b.n	800cd12 <dir_find+0x42>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccfc:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800cd00:	46d9      	mov	r9, fp
		res = dir_next(dp, 0);	/* Next entry */
 800cd02:	4639      	mov	r1, r7
 800cd04:	4628      	mov	r0, r5
 800cd06:	f7ff ff5f 	bl	800cbc8 <dir_next>
	} while (res == FR_OK);
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	f040 80af 	bne.w	800ce70 <dir_find+0x1a0>
		res = move_window(fs, dp->sect);
 800cd12:	69e9      	ldr	r1, [r5, #28]
 800cd14:	4630      	mov	r0, r6
 800cd16:	f7ff fc69 	bl	800c5ec <move_window>
		if (res != FR_OK) break;
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	f040 80a7 	bne.w	800ce70 <dir_find+0x1a0>
		c = dp->dir[DIR_Name];
 800cd22:	6a2c      	ldr	r4, [r5, #32]
 800cd24:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 80a1 	beq.w	800ce6e <dir_find+0x19e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cd2c:	7ae2      	ldrb	r2, [r4, #11]
 800cd2e:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 800cd32:	71a9      	strb	r1, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cd34:	2be5      	cmp	r3, #229	@ 0xe5
 800cd36:	d0e1      	beq.n	800ccfc <dir_find+0x2c>
 800cd38:	f012 0f08 	tst.w	r2, #8
 800cd3c:	d015      	beq.n	800cd6a <dir_find+0x9a>
 800cd3e:	290f      	cmp	r1, #15
 800cd40:	d1dc      	bne.n	800ccfc <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cd42:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800cd46:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800cd4a:	d1da      	bne.n	800cd02 <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cd4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800cd50:	d028      	beq.n	800cda4 <dir_find+0xd4>
						sum = dp->dir[LDIR_Chksum];
 800cd52:	f894 800d 	ldrb.w	r8, [r4, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cd56:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cd5a:	696a      	ldr	r2, [r5, #20]
 800cd5c:	632a      	str	r2, [r5, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd5e:	7b62      	ldrb	r2, [r4, #13]
 800cd60:	4542      	cmp	r2, r8
 800cd62:	d024      	beq.n	800cdae <dir_find+0xde>
 800cd64:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800cd68:	e7cb      	b.n	800cd02 <dir_find+0x32>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cd6a:	290f      	cmp	r1, #15
 800cd6c:	d0e9      	beq.n	800cd42 <dir_find+0x72>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd6e:	f1b9 0f00 	cmp.w	r9, #0
 800cd72:	d104      	bne.n	800cd7e <dir_find+0xae>
 800cd74:	4620      	mov	r0, r4
 800cd76:	f7ff fbb4 	bl	800c4e2 <sum_sfn>
 800cd7a:	4540      	cmp	r0, r8
 800cd7c:	d07c      	beq.n	800ce78 <dir_find+0x1a8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd7e:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800cd82:	f012 0201 	ands.w	r2, r2, #1
 800cd86:	d16b      	bne.n	800ce60 <dir_find+0x190>
 800cd88:	f105 0124 	add.w	r1, r5, #36	@ 0x24
	int r = 0;
 800cd8c:	f104 0c0b 	add.w	ip, r4, #11
		r = *d++ - *s++;
 800cd90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd94:	f811 0b01 	ldrb.w	r0, [r1], #1
 800cd98:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800cd9a:	45a4      	cmp	ip, r4
 800cd9c:	d05f      	beq.n	800ce5e <dir_find+0x18e>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d0f6      	beq.n	800cd90 <dir_find+0xc0>
 800cda2:	e05d      	b.n	800ce60 <dir_find+0x190>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cda4:	4599      	cmp	r9, r3
 800cda6:	bf18      	it	ne
 800cda8:	46d9      	movne	r9, fp
 800cdaa:	d1aa      	bne.n	800cd02 <dir_find+0x32>
 800cdac:	e7d7      	b.n	800cd5e <dir_find+0x8e>
	rv = rv << 8 | ptr[0];
 800cdae:	7ee1      	ldrb	r1, [r4, #27]
 800cdb0:	7ea2      	ldrb	r2, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cdb2:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800cdb6:	d157      	bne.n	800ce68 <dir_find+0x198>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cdb8:	68f2      	ldr	r2, [r6, #12]
 800cdba:	9201      	str	r2, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cdbc:	7822      	ldrb	r2, [r4, #0]
 800cdbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800cdc2:	3a01      	subs	r2, #1
 800cdc4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800cdc8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cdcc:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800ce80 <dir_find+0x1b0>
 800cdd0:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cdd2:	f8cd 8008 	str.w	r8, [sp, #8]
 800cdd6:	9603      	str	r6, [sp, #12]
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	4616      	mov	r6, r2
 800cddc:	9504      	str	r5, [sp, #16]
 800cdde:	e006      	b.n	800cdee <dir_find+0x11e>
 800cde0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cde4:	429d      	cmp	r5, r3
 800cde6:	d133      	bne.n	800ce50 <dir_find+0x180>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cde8:	4b24      	ldr	r3, [pc, #144]	@ (800ce7c <dir_find+0x1ac>)
 800cdea:	4599      	cmp	r9, r3
 800cdec:	d01a      	beq.n	800ce24 <dir_find+0x154>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cdee:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cdf2:	18e2      	adds	r2, r4, r3
	rv = rv << 8 | ptr[0];
 800cdf4:	7852      	ldrb	r2, [r2, #1]
 800cdf6:	5ce5      	ldrb	r5, [r4, r3]
 800cdf8:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		if (wc) {
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d0ef      	beq.n	800cde0 <dir_find+0x110>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce00:	2efe      	cmp	r6, #254	@ 0xfe
 800ce02:	d825      	bhi.n	800ce50 <dir_find+0x180>
 800ce04:	4628      	mov	r0, r5
 800ce06:	f001 f829 	bl	800de5c <ff_wtoupper>
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	1c73      	adds	r3, r6, #1
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800ce16:	f001 f821 	bl	800de5c <ff_wtoupper>
 800ce1a:	4580      	cmp	r8, r0
 800ce1c:	d118      	bne.n	800ce50 <dir_find+0x180>
			wc = uc;
 800ce1e:	4628      	mov	r0, r5
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ce20:	9e00      	ldr	r6, [sp, #0]
 800ce22:	e7e1      	b.n	800cde8 <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ce24:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ce28:	9b05      	ldr	r3, [sp, #20]
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	9e03      	ldr	r6, [sp, #12]
 800ce2e:	9d04      	ldr	r5, [sp, #16]
 800ce30:	7822      	ldrb	r2, [r4, #0]
 800ce32:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800ce36:	d004      	beq.n	800ce42 <dir_find+0x172>
 800ce38:	b118      	cbz	r0, 800ce42 <dir_find+0x172>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ce3a:	9a01      	ldr	r2, [sp, #4]
 800ce3c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ce40:	b91a      	cbnz	r2, 800ce4a <dir_find+0x17a>
 800ce42:	3b01      	subs	r3, #1
 800ce44:	fa5f f983 	uxtb.w	r9, r3
 800ce48:	e75b      	b.n	800cd02 <dir_find+0x32>
 800ce4a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ce4e:	e758      	b.n	800cd02 <dir_find+0x32>
 800ce50:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ce54:	9e03      	ldr	r6, [sp, #12]
 800ce56:	9d04      	ldr	r5, [sp, #16]
 800ce58:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ce5c:	e751      	b.n	800cd02 <dir_find+0x32>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ce5e:	b13b      	cbz	r3, 800ce70 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce60:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800ce64:	46d9      	mov	r9, fp
 800ce66:	e74c      	b.n	800cd02 <dir_find+0x32>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ce68:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800ce6c:	e749      	b.n	800cd02 <dir_find+0x32>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce6e:	2204      	movs	r2, #4
}
 800ce70:	4610      	mov	r0, r2
 800ce72:	b007      	add	sp, #28
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = move_window(fs, dp->sect);
 800ce78:	464a      	mov	r2, r9
 800ce7a:	e7f9      	b.n	800ce70 <dir_find+0x1a0>
 800ce7c:	08012431 	.word	0x08012431
 800ce80:	08012424 	.word	0x08012424

0800ce84 <dir_register>:
{
 800ce84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	b08b      	sub	sp, #44	@ 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ce8a:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 800ce8e:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 800ce92:	f040 812e 	bne.w	800d0f2 <dir_register+0x26e>
 800ce96:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ce98:	6805      	ldr	r5, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ce9a:	68eb      	ldr	r3, [r5, #12]
 800ce9c:	881a      	ldrh	r2, [r3, #0]
 800ce9e:	b1e2      	cbz	r2, 800ceda <dir_register+0x56>
 800cea0:	f04f 0a00 	mov.w	sl, #0
 800cea4:	f10a 0a01 	add.w	sl, sl, #1
 800cea8:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800ceac:	2a00      	cmp	r2, #0
 800ceae:	d1f9      	bne.n	800cea4 <dir_register+0x20>
	mem_cpy(sn, dp->fn, 12);
 800ceb0:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 800ceb4:	220c      	movs	r2, #12
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	a807      	add	r0, sp, #28
 800ceba:	f7ff fa08 	bl	800c2ce <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cebe:	f89d b027 	ldrb.w	fp, [sp, #39]	@ 0x27
 800cec2:	f01b 0f01 	tst.w	fp, #1
 800cec6:	f000 813a 	beq.w	800d13e <dir_register+0x2ba>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ceca:	2340      	movs	r3, #64	@ 0x40
 800cecc:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ced0:	f04f 0801 	mov.w	r8, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ced4:	f04f 0920 	mov.w	r9, #32
 800ced8:	e04b      	b.n	800cf72 <dir_register+0xee>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ceda:	f04f 0a00 	mov.w	sl, #0
 800cede:	e7e7      	b.n	800ceb0 <dir_register+0x2c>
 800cee0:	4643      	mov	r3, r8
 800cee2:	af07      	add	r7, sp, #28
		seq = (UINT)sr;
 800cee4:	2207      	movs	r2, #7
 800cee6:	e002      	b.n	800ceee <dir_register+0x6a>
 800cee8:	4643      	mov	r3, r8
 800ceea:	e7fa      	b.n	800cee2 <dir_register+0x5e>
		seq /= 16;
 800ceec:	460b      	mov	r3, r1
		c = (BYTE)((seq % 16) + '0');
 800ceee:	f003 000f 	and.w	r0, r3, #15
 800cef2:	f100 0130 	add.w	r1, r0, #48	@ 0x30
		if (c > '9') c += 7;
 800cef6:	2939      	cmp	r1, #57	@ 0x39
 800cef8:	bf88      	it	hi
 800cefa:	f100 0137 	addhi.w	r1, r0, #55	@ 0x37
		ns[i--] = c;
 800cefe:	3a01      	subs	r2, #1
 800cf00:	f807 1d01 	strb.w	r1, [r7, #-1]!
		seq /= 16;
 800cf04:	0919      	lsrs	r1, r3, #4
	} while (seq);
 800cf06:	2b0f      	cmp	r3, #15
 800cf08:	d8f0      	bhi.n	800ceec <dir_register+0x68>
	ns[i] = '~';
 800cf0a:	217e      	movs	r1, #126	@ 0x7e
 800cf0c:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800cf10:	446b      	add	r3, sp
 800cf12:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cf16:	b16a      	cbz	r2, 800cf34 <dir_register+0xb0>
 800cf18:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf22:	2820      	cmp	r0, #32
 800cf24:	d003      	beq.n	800cf2e <dir_register+0xaa>
 800cf26:	3301      	adds	r3, #1
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d1f8      	bne.n	800cf1e <dir_register+0x9a>
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	3323      	adds	r3, #35	@ 0x23
 800cf30:	4423      	add	r3, r4
 800cf32:	e00e      	b.n	800cf52 <dir_register+0xce>
 800cf34:	4613      	mov	r3, r2
 800cf36:	e7fa      	b.n	800cf2e <dir_register+0xaa>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf38:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 800cf3c:	4469      	add	r1, sp
 800cf3e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800cf42:	3201      	adds	r2, #1
 800cf44:	1c58      	adds	r0, r3, #1
 800cf46:	7059      	strb	r1, [r3, #1]
	} while (j < 8);
 800cf48:	3b22      	subs	r3, #34	@ 0x22
 800cf4a:	1b1b      	subs	r3, r3, r4
 800cf4c:	2b07      	cmp	r3, #7
 800cf4e:	d804      	bhi.n	800cf5a <dir_register+0xd6>
 800cf50:	4603      	mov	r3, r0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf52:	2a07      	cmp	r2, #7
 800cf54:	d9f0      	bls.n	800cf38 <dir_register+0xb4>
 800cf56:	4649      	mov	r1, r9
 800cf58:	e7f4      	b.n	800cf44 <dir_register+0xc0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff feb8 	bl	800ccd0 <dir_find>
			if (res != FR_OK) break;
 800cf60:	4607      	mov	r7, r0
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f040 80e7 	bne.w	800d136 <dir_register+0x2b2>
		for (n = 1; n < 100; n++) {
 800cf68:	f108 0801 	add.w	r8, r8, #1
 800cf6c:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800cf70:	d020      	beq.n	800cfb4 <dir_register+0x130>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cf72:	68ef      	ldr	r7, [r5, #12]
	mem_cpy(dst, src, 11);
 800cf74:	220b      	movs	r2, #11
 800cf76:	a907      	add	r1, sp, #28
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff f9a8 	bl	800c2ce <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cf7e:	f1b8 0f05 	cmp.w	r8, #5
 800cf82:	d9ad      	bls.n	800cee0 <dir_register+0x5c>
		while (*lfn) {	/* Create a CRC */
 800cf84:	883a      	ldrh	r2, [r7, #0]
 800cf86:	2a00      	cmp	r2, #0
 800cf88:	d0ae      	beq.n	800cee8 <dir_register+0x64>
		sr = seq;
 800cf8a:	4643      	mov	r3, r8
 800cf8c:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800cf8e:	f002 0001 	and.w	r0, r2, #1
 800cf92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 800cf96:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800cf98:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800cf9c:	bf1c      	itt	ne
 800cf9e:	f483 3388 	eorne.w	r3, r3, #69632	@ 0x11000
 800cfa2:	f083 0321 	eorne.w	r3, r3, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 800cfa6:	3901      	subs	r1, #1
 800cfa8:	d1f1      	bne.n	800cf8e <dir_register+0x10a>
		while (*lfn) {	/* Create a CRC */
 800cfaa:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	d1ec      	bne.n	800cf8c <dir_register+0x108>
 800cfb2:	e796      	b.n	800cee2 <dir_register+0x5e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cfb4:	2707      	movs	r7, #7
 800cfb6:	e09d      	b.n	800d0f4 <dir_register+0x270>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cfb8:	f04f 0901 	mov.w	r9, #1
	FATFS *fs = dp->obj.fs;
 800cfbc:	f8d4 a000 	ldr.w	sl, [r4]
	res = dir_sdi(dp, 0);
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff fcfe 	bl	800c9c4 <dir_sdi>
	if (res == FR_OK) {
 800cfc8:	4607      	mov	r7, r0
 800cfca:	b9e8      	cbnz	r0, 800d008 <dir_register+0x184>
		n = 0;
 800cfcc:	f04f 0800 	mov.w	r8, #0
			res = dir_next(dp, 1);
 800cfd0:	f04f 0b01 	mov.w	fp, #1
 800cfd4:	e009      	b.n	800cfea <dir_register+0x166>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cfd6:	f108 0801 	add.w	r8, r8, #1
 800cfda:	45c1      	cmp	r9, r8
 800cfdc:	d018      	beq.n	800d010 <dir_register+0x18c>
			res = dir_next(dp, 1);
 800cfde:	4659      	mov	r1, fp
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7ff fdf1 	bl	800cbc8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	b970      	cbnz	r0, 800d008 <dir_register+0x184>
			res = move_window(fs, dp->sect);
 800cfea:	69e1      	ldr	r1, [r4, #28]
 800cfec:	4650      	mov	r0, sl
 800cfee:	f7ff fafd 	bl	800c5ec <move_window>
			if (res != FR_OK) break;
 800cff2:	4607      	mov	r7, r0
 800cff4:	b940      	cbnz	r0, 800d008 <dir_register+0x184>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cff6:	6a23      	ldr	r3, [r4, #32]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	2be5      	cmp	r3, #229	@ 0xe5
 800cffc:	d0eb      	beq.n	800cfd6 <dir_register+0x152>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0e9      	beq.n	800cfd6 <dir_register+0x152>
				n = 0;					/* Not a blank entry. Restart to search */
 800d002:	f04f 0800 	mov.w	r8, #0
 800d006:	e7ea      	b.n	800cfde <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d008:	2f04      	cmp	r7, #4
 800d00a:	d077      	beq.n	800d0fc <dir_register+0x278>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d00c:	2f00      	cmp	r7, #0
 800d00e:	d171      	bne.n	800d0f4 <dir_register+0x270>
 800d010:	f1b9 0a01 	subs.w	sl, r9, #1
 800d014:	d119      	bne.n	800d04a <dir_register+0x1c6>
		res = move_window(fs, dp->sect);
 800d016:	69e1      	ldr	r1, [r4, #28]
 800d018:	4628      	mov	r0, r5
 800d01a:	f7ff fae7 	bl	800c5ec <move_window>
		if (res == FR_OK) {
 800d01e:	4607      	mov	r7, r0
 800d020:	2800      	cmp	r0, #0
 800d022:	d167      	bne.n	800d0f4 <dir_register+0x270>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d024:	2220      	movs	r2, #32
 800d026:	2100      	movs	r1, #0
 800d028:	6a20      	ldr	r0, [r4, #32]
 800d02a:	f7ff f95a 	bl	800c2e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d02e:	220b      	movs	r2, #11
 800d030:	4631      	mov	r1, r6
 800d032:	6a20      	ldr	r0, [r4, #32]
 800d034:	f7ff f94b 	bl	800c2ce <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d038:	6a22      	ldr	r2, [r4, #32]
 800d03a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800d03e:	f003 0318 	and.w	r3, r3, #24
 800d042:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800d044:	2301      	movs	r3, #1
 800d046:	70eb      	strb	r3, [r5, #3]
 800d048:	e054      	b.n	800d0f4 <dir_register+0x270>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d04a:	6961      	ldr	r1, [r4, #20]
 800d04c:	eba1 114a 	sub.w	r1, r1, sl, lsl #5
 800d050:	4620      	mov	r0, r4
 800d052:	f7ff fcb7 	bl	800c9c4 <dir_sdi>
		if (res == FR_OK) {
 800d056:	4607      	mov	r7, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	d14b      	bne.n	800d0f4 <dir_register+0x270>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff fa40 	bl	800c4e2 <sum_sfn>
 800d062:	9001      	str	r0, [sp, #4]
	dir[LDIR_Type] = 0;
 800d064:	f04f 0b00 	mov.w	fp, #0
 800d068:	9602      	str	r6, [sp, #8]
 800d06a:	e019      	b.n	800d0a0 <dir_register+0x21c>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d06c:	4638      	mov	r0, r7
 800d06e:	e04e      	b.n	800d10e <dir_register+0x28a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d070:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d078:	4293      	cmp	r3, r2
 800d07a:	d002      	beq.n	800d082 <dir_register+0x1fe>
 800d07c:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 800d080:	b90b      	cbnz	r3, 800d086 <dir_register+0x202>
 800d082:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d086:	f881 9000 	strb.w	r9, [r1]
				fs->wflag = 1;
 800d08a:	2301      	movs	r3, #1
 800d08c:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d08e:	4659      	mov	r1, fp
 800d090:	4620      	mov	r0, r4
 800d092:	f7ff fd99 	bl	800cbc8 <dir_next>
			} while (res == FR_OK && --nent);
 800d096:	4607      	mov	r7, r0
 800d098:	bb60      	cbnz	r0, 800d0f4 <dir_register+0x270>
 800d09a:	f1ba 0a01 	subs.w	sl, sl, #1
 800d09e:	d026      	beq.n	800d0ee <dir_register+0x26a>
				res = move_window(fs, dp->sect);
 800d0a0:	69e1      	ldr	r1, [r4, #28]
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7ff faa2 	bl	800c5ec <move_window>
				if (res != FR_OK) break;
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	bb18      	cbnz	r0, 800d0f4 <dir_register+0x270>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d0ac:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800d0b0:	6a21      	ldr	r1, [r4, #32]
 800d0b2:	fa5f f98a 	uxtb.w	r9, sl
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d0ba:	f04f 030f 	mov.w	r3, #15
 800d0be:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800d0c0:	f881 b00c 	strb.w	fp, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0c4:	f881 b01a 	strb.w	fp, [r1, #26]
	*ptr++ = (BYTE)val;
 800d0c8:	f881 b01b 	strb.w	fp, [r1, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d0cc:	f109 30ff 	add.w	r0, r9, #4294967295
 800d0d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800d0d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	s = wc = 0;
 800d0d8:	4a20      	ldr	r2, [pc, #128]	@ (800d15c <dir_register+0x2d8>)
 800d0da:	f102 0c0d 	add.w	ip, r2, #13
 800d0de:	465b      	mov	r3, fp
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d0e0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800d0e4:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800d0e8:	f8cd a00c 	str.w	sl, [sp, #12]
 800d0ec:	e012      	b.n	800d114 <dir_register+0x290>
 800d0ee:	9e02      	ldr	r6, [sp, #8]
 800d0f0:	e791      	b.n	800d016 <dir_register+0x192>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d0f2:	2706      	movs	r7, #6
}
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	b00b      	add	sp, #44	@ 0x2c
 800d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d0fc:	2707      	movs	r7, #7
 800d0fe:	e7f9      	b.n	800d0f4 <dir_register+0x270>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d100:	7817      	ldrb	r7, [r2, #0]
 800d102:	eb01 0a07 	add.w	sl, r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d106:	f801 8007 	strb.w	r8, [r1, r7]
	*ptr++ = (BYTE)val;
 800d10a:	f88a 8001 	strb.w	r8, [sl, #1]
	} while (++s < 13);
 800d10e:	3201      	adds	r2, #1
 800d110:	4562      	cmp	r2, ip
 800d112:	d0ad      	beq.n	800d070 <dir_register+0x1ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d114:	42b3      	cmp	r3, r6
 800d116:	d0f3      	beq.n	800d100 <dir_register+0x27c>
 800d118:	1c47      	adds	r7, r0, #1
 800d11a:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d11e:	7810      	ldrb	r0, [r2, #0]
 800d120:	eb01 0a00 	add.w	sl, r1, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800d124:	540b      	strb	r3, [r1, r0]
 800d126:	0a18      	lsrs	r0, r3, #8
	*ptr++ = (BYTE)val;
 800d128:	f88a 0001 	strb.w	r0, [sl, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d19d      	bne.n	800d06c <dir_register+0x1e8>
 800d130:	4638      	mov	r0, r7
 800d132:	4633      	mov	r3, r6
 800d134:	e7eb      	b.n	800d10e <dir_register+0x28a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d136:	2804      	cmp	r0, #4
 800d138:	d1dc      	bne.n	800d0f4 <dir_register+0x270>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d13a:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d13e:	f01b 0f02 	tst.w	fp, #2
 800d142:	f43f af39 	beq.w	800cfb8 <dir_register+0x134>
 800d146:	f10a 090c 	add.w	r9, sl, #12
 800d14a:	4b05      	ldr	r3, [pc, #20]	@ (800d160 <dir_register+0x2dc>)
 800d14c:	fba3 3909 	umull	r3, r9, r3, r9
 800d150:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800d154:	f109 0901 	add.w	r9, r9, #1
 800d158:	e730      	b.n	800cfbc <dir_register+0x138>
 800d15a:	bf00      	nop
 800d15c:	08012424 	.word	0x08012424
 800d160:	4ec4ec4f 	.word	0x4ec4ec4f

0800d164 <check_fs>:
{
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d168:	2300      	movs	r3, #0
 800d16a:	70c3      	strb	r3, [r0, #3]
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d172:	f7ff fa3b 	bl	800c5ec <move_window>
 800d176:	bb48      	cbnz	r0, 800d1cc <check_fs+0x68>
 800d178:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 800d17a:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800d17e:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800d182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d186:	b21b      	sxth	r3, r3
 800d188:	4a13      	ldr	r2, [pc, #76]	@ (800d1d8 <check_fs+0x74>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d120      	bne.n	800d1d0 <check_fs+0x6c>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d18e:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800d192:	2be9      	cmp	r3, #233	@ 0xe9
 800d194:	d007      	beq.n	800d1a6 <check_fs+0x42>
 800d196:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d198:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800d19c:	4a0f      	ldr	r2, [pc, #60]	@ (800d1dc <check_fs+0x78>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d001      	beq.n	800d1a6 <check_fs+0x42>
	return 2;
 800d1a2:	2502      	movs	r5, #2
 800d1a4:	e015      	b.n	800d1d2 <check_fs+0x6e>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d1a6:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 800d1aa:	f7ff f87d 	bl	800c2a8 <ld_dword>
 800d1ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e0 <check_fs+0x7c>)
 800d1b4:	4298      	cmp	r0, r3
 800d1b6:	d00c      	beq.n	800d1d2 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d1b8:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 800d1bc:	f7ff f874 	bl	800c2a8 <ld_dword>
 800d1c0:	4d08      	ldr	r5, [pc, #32]	@ (800d1e4 <check_fs+0x80>)
 800d1c2:	1b45      	subs	r5, r0, r5
 800d1c4:	bf18      	it	ne
 800d1c6:	2501      	movne	r5, #1
 800d1c8:	006d      	lsls	r5, r5, #1
 800d1ca:	e002      	b.n	800d1d2 <check_fs+0x6e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d1cc:	2504      	movs	r5, #4
 800d1ce:	e000      	b.n	800d1d2 <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d1d0:	2503      	movs	r5, #3
}
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	bd38      	pop	{r3, r4, r5, pc}
 800d1d6:	bf00      	nop
 800d1d8:	ffffaa55 	.word	0xffffaa55
 800d1dc:	009000eb 	.word	0x009000eb
 800d1e0:	00544146 	.word	0x00544146
 800d1e4:	33544146 	.word	0x33544146

0800d1e8 <find_volume>:
{
 800d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	b085      	sub	sp, #20
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	4615      	mov	r5, r2
	*rfs = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800d1f6:	f7ff f983 	bl	800c500 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d1fa:	1e07      	subs	r7, r0, #0
 800d1fc:	f2c0 810a 	blt.w	800d414 <find_volume+0x22c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d200:	4bb0      	ldr	r3, [pc, #704]	@ (800d4c4 <find_volume+0x2dc>)
 800d202:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d206:	2c00      	cmp	r4, #0
 800d208:	f000 8109 	beq.w	800d41e <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 800d20c:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d20e:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d212:	7823      	ldrb	r3, [r4, #0]
 800d214:	b16b      	cbz	r3, 800d232 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800d216:	7860      	ldrb	r0, [r4, #1]
 800d218:	f7fe fffa 	bl	800c210 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d21c:	f010 0f01 	tst.w	r0, #1
 800d220:	d107      	bne.n	800d232 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d222:	2d00      	cmp	r5, #0
 800d224:	f000 80f7 	beq.w	800d416 <find_volume+0x22e>
				return FR_WRITE_PROTECTED;
 800d228:	f010 0504 	ands.w	r5, r0, #4
 800d22c:	bf18      	it	ne
 800d22e:	250a      	movne	r5, #10
 800d230:	e0f1      	b.n	800d416 <find_volume+0x22e>
	fs->fs_type = 0;					/* Clear the file system object */
 800d232:	2300      	movs	r3, #0
 800d234:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d236:	b2f8      	uxtb	r0, r7
 800d238:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d23a:	f7fe fff5 	bl	800c228 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d23e:	f010 0601 	ands.w	r6, r0, #1
 800d242:	f040 80ee 	bne.w	800d422 <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d246:	b11d      	cbz	r5, 800d250 <find_volume+0x68>
 800d248:	f010 0f04 	tst.w	r0, #4
 800d24c:	f040 80eb 	bne.w	800d426 <find_volume+0x23e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d250:	2100      	movs	r1, #0
 800d252:	4620      	mov	r0, r4
 800d254:	f7ff ff86 	bl	800d164 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d258:	2802      	cmp	r0, #2
 800d25a:	d07c      	beq.n	800d356 <find_volume+0x16e>
	bsect = 0;
 800d25c:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d25e:	2804      	cmp	r0, #4
 800d260:	f000 80e3 	beq.w	800d42a <find_volume+0x242>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d264:	2801      	cmp	r0, #1
 800d266:	f200 80e2 	bhi.w	800d42e <find_volume+0x246>
	rv = rv << 8 | ptr[0];
 800d26a:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800d26e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800d272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d276:	b21b      	sxth	r3, r3
 800d278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d27c:	f040 80d9 	bne.w	800d432 <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 800d280:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800d284:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d288:	ea53 2802 	orrs.w	r8, r3, r2, lsl #8
 800d28c:	d104      	bne.n	800d298 <find_volume+0xb0>
 800d28e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d292:	f7ff f809 	bl	800c2a8 <ld_dword>
 800d296:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800d298:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d29c:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d2a0:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d2a4:	f109 33ff 	add.w	r3, r9, #4294967295
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	f200 80c3 	bhi.w	800d436 <find_volume+0x24e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d2b0:	f894 7041 	ldrb.w	r7, [r4, #65]	@ 0x41
 800d2b4:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d2b6:	2f00      	cmp	r7, #0
 800d2b8:	f000 80bf 	beq.w	800d43a <find_volume+0x252>
 800d2bc:	1e7b      	subs	r3, r7, #1
 800d2be:	423b      	tst	r3, r7
 800d2c0:	f040 80bd 	bne.w	800d43e <find_volume+0x256>
	rv = rv << 8 | ptr[0];
 800d2c4:	f894 2046 	ldrb.w	r2, [r4, #70]	@ 0x46
 800d2c8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d2cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d2d0:	fa0f fb83 	sxth.w	fp, r3
 800d2d4:	469a      	mov	sl, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2d6:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d2d8:	f013 0f0f 	tst.w	r3, #15
 800d2dc:	f040 80b1 	bne.w	800d442 <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 800d2e0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d2e4:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d2e8:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800d2ec:	d103      	bne.n	800d2f6 <find_volume+0x10e>
 800d2ee:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800d2f2:	f7fe ffd9 	bl	800c2a8 <ld_dword>
	rv = rv << 8 | ptr[0];
 800d2f6:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800d2fa:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d2fe:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800d302:	f000 80a0 	beq.w	800d446 <find_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d306:	fb08 f909 	mul.w	r9, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d30a:	eb03 121a 	add.w	r2, r3, sl, lsr #4
 800d30e:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d310:	4290      	cmp	r0, r2
 800d312:	f0c0 809a 	bcc.w	800d44a <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d316:	1a80      	subs	r0, r0, r2
 800d318:	fbb0 f1f7 	udiv	r1, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d31c:	42b8      	cmp	r0, r7
 800d31e:	f0c0 8096 	bcc.w	800d44e <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d322:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800d326:	4281      	cmp	r1, r0
 800d328:	f200 809d 	bhi.w	800d466 <find_volume+0x27e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d32c:	f640 70f5 	movw	r0, #4085	@ 0xff5
 800d330:	4281      	cmp	r1, r0
 800d332:	f240 80cf 	bls.w	800d4d4 <find_volume+0x2ec>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d336:	3102      	adds	r1, #2
 800d338:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d33a:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d33c:	442b      	add	r3, r5
 800d33e:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d340:	442a      	add	r2, r5
 800d342:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d344:	f1ba 0f00 	cmp.w	sl, #0
 800d348:	f000 8089 	beq.w	800d45e <find_volume+0x276>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d34c:	eb03 0209 	add.w	r2, r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d350:	004b      	lsls	r3, r1, #1
 800d352:	2102      	movs	r1, #2
 800d354:	e0d1      	b.n	800d4fa <find_volume+0x312>
 800d356:	466f      	mov	r7, sp
 800d358:	f504 75fd 	add.w	r5, r4, #506	@ 0x1fa
 800d35c:	f204 293a 	addw	r9, r4, #570	@ 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d360:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d362:	f04f 0a00 	mov.w	sl, #0
 800d366:	e005      	b.n	800d374 <find_volume+0x18c>
 800d368:	4650      	mov	r0, sl
 800d36a:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d36e:	3510      	adds	r5, #16
 800d370:	454d      	cmp	r5, r9
 800d372:	d007      	beq.n	800d384 <find_volume+0x19c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d374:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0f5      	beq.n	800d368 <find_volume+0x180>
 800d37c:	4628      	mov	r0, r5
 800d37e:	f7fe ff93 	bl	800c2a8 <ld_dword>
 800d382:	e7f2      	b.n	800d36a <find_volume+0x182>
 800d384:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d388:	f04f 0903 	mov.w	r9, #3
 800d38c:	e009      	b.n	800d3a2 <find_volume+0x1ba>
 800d38e:	4629      	mov	r1, r5
 800d390:	4620      	mov	r0, r4
 800d392:	f7ff fee7 	bl	800d164 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d396:	2801      	cmp	r0, #1
 800d398:	f67f af67 	bls.w	800d26a <find_volume+0x82>
 800d39c:	45b8      	cmp	r8, r7
 800d39e:	f43f af5e 	beq.w	800d25e <find_volume+0x76>
			bsect = br[i];
 800d3a2:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	d1f1      	bne.n	800d38e <find_volume+0x1a6>
 800d3aa:	4648      	mov	r0, r9
 800d3ac:	e7f6      	b.n	800d39c <find_volume+0x1b4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d3ae:	1c69      	adds	r1, r5, #1
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f7ff f91b 	bl	800c5ec <move_window>
 800d3b6:	bb58      	cbnz	r0, 800d410 <find_volume+0x228>
			fs->fsi_flag = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800d3bc:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800d3c0:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800d3c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d3c8:	b21b      	sxth	r3, r3
 800d3ca:	4a3f      	ldr	r2, [pc, #252]	@ (800d4c8 <find_volume+0x2e0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d001      	beq.n	800d3d4 <find_volume+0x1ec>
		fmt = FS_FAT32;
 800d3d0:	2103      	movs	r1, #3
 800d3d2:	e09e      	b.n	800d512 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d3d4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800d3d8:	f7fe ff66 	bl	800c2a8 <ld_dword>
 800d3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d4cc <find_volume+0x2e4>)
 800d3de:	4298      	cmp	r0, r3
 800d3e0:	d001      	beq.n	800d3e6 <find_volume+0x1fe>
		fmt = FS_FAT32;
 800d3e2:	2103      	movs	r1, #3
 800d3e4:	e095      	b.n	800d512 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d3e6:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800d3ea:	f7fe ff5d 	bl	800c2a8 <ld_dword>
 800d3ee:	4b38      	ldr	r3, [pc, #224]	@ (800d4d0 <find_volume+0x2e8>)
 800d3f0:	4298      	cmp	r0, r3
 800d3f2:	d001      	beq.n	800d3f8 <find_volume+0x210>
		fmt = FS_FAT32;
 800d3f4:	2103      	movs	r1, #3
 800d3f6:	e08c      	b.n	800d512 <find_volume+0x32a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d3f8:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800d3fc:	f7fe ff54 	bl	800c2a8 <ld_dword>
 800d400:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d402:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800d406:	f7fe ff4f 	bl	800c2a8 <ld_dword>
 800d40a:	6120      	str	r0, [r4, #16]
		fmt = FS_FAT32;
 800d40c:	2103      	movs	r1, #3
 800d40e:	e080      	b.n	800d512 <find_volume+0x32a>
 800d410:	2103      	movs	r1, #3
 800d412:	e07e      	b.n	800d512 <find_volume+0x32a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d414:	250b      	movs	r5, #11
}
 800d416:	4628      	mov	r0, r5
 800d418:	b005      	add	sp, #20
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d41e:	250c      	movs	r5, #12
 800d420:	e7f9      	b.n	800d416 <find_volume+0x22e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d422:	2503      	movs	r5, #3
 800d424:	e7f7      	b.n	800d416 <find_volume+0x22e>
		return FR_WRITE_PROTECTED;
 800d426:	250a      	movs	r5, #10
 800d428:	e7f5      	b.n	800d416 <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d42a:	2501      	movs	r5, #1
 800d42c:	e7f3      	b.n	800d416 <find_volume+0x22e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d42e:	250d      	movs	r5, #13
 800d430:	e7f1      	b.n	800d416 <find_volume+0x22e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d432:	250d      	movs	r5, #13
 800d434:	e7ef      	b.n	800d416 <find_volume+0x22e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d436:	250d      	movs	r5, #13
 800d438:	e7ed      	b.n	800d416 <find_volume+0x22e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d43a:	250d      	movs	r5, #13
 800d43c:	e7eb      	b.n	800d416 <find_volume+0x22e>
 800d43e:	250d      	movs	r5, #13
 800d440:	e7e9      	b.n	800d416 <find_volume+0x22e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d442:	250d      	movs	r5, #13
 800d444:	e7e7      	b.n	800d416 <find_volume+0x22e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d446:	250d      	movs	r5, #13
 800d448:	e7e5      	b.n	800d416 <find_volume+0x22e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d44a:	250d      	movs	r5, #13
 800d44c:	e7e3      	b.n	800d416 <find_volume+0x22e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d44e:	250d      	movs	r5, #13
 800d450:	e7e1      	b.n	800d416 <find_volume+0x22e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d452:	250d      	movs	r5, #13
 800d454:	e7df      	b.n	800d416 <find_volume+0x22e>
 800d456:	250d      	movs	r5, #13
 800d458:	e7dd      	b.n	800d416 <find_volume+0x22e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d45a:	250d      	movs	r5, #13
 800d45c:	e7db      	b.n	800d416 <find_volume+0x22e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d45e:	250d      	movs	r5, #13
 800d460:	e7d9      	b.n	800d416 <find_volume+0x22e>
 800d462:	250d      	movs	r5, #13
 800d464:	e7d7      	b.n	800d416 <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d466:	1c8f      	adds	r7, r1, #2
 800d468:	61a7      	str	r7, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d46a:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d46c:	442b      	add	r3, r5
 800d46e:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d470:	442a      	add	r2, r5
 800d472:	62e2      	str	r2, [r4, #44]	@ 0x2c
	rv = rv << 8 | ptr[0];
 800d474:	f894 205f 	ldrb.w	r2, [r4, #95]	@ 0x5f
 800d478:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 800d47c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d480:	fa1f fb8b 	uxth.w	fp, fp
 800d484:	ea5b 0b03 	orrs.w	fp, fp, r3
 800d488:	d1e7      	bne.n	800d45a <find_volume+0x272>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d48a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800d48e:	f7fe ff0b 	bl	800c2a8 <ld_dword>
 800d492:	62a0      	str	r0, [r4, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d494:	00bb      	lsls	r3, r7, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d496:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d49a:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800d49e:	d3d8      	bcc.n	800d452 <find_volume+0x26a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a4:	6163      	str	r3, [r4, #20]
 800d4a6:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800d4a8:	2380      	movs	r3, #128	@ 0x80
 800d4aa:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800d4ac:	f894 2065 	ldrb.w	r2, [r4, #101]	@ 0x65
 800d4b0:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 800d4b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d4b8:	b21b      	sxth	r3, r3
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	f43f af77 	beq.w	800d3ae <find_volume+0x1c6>
		fmt = FS_FAT32;
 800d4c0:	2103      	movs	r1, #3
 800d4c2:	e026      	b.n	800d512 <find_volume+0x32a>
 800d4c4:	200047e4 	.word	0x200047e4
 800d4c8:	ffffaa55 	.word	0xffffaa55
 800d4cc:	41615252 	.word	0x41615252
 800d4d0:	61417272 	.word	0x61417272
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d4d4:	3102      	adds	r1, #2
 800d4d6:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d4d8:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d4da:	442b      	add	r3, r5
 800d4dc:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d4de:	442a      	add	r2, r5
 800d4e0:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d4e2:	f1ba 0f00 	cmp.w	sl, #0
 800d4e6:	d0bc      	beq.n	800d462 <find_volume+0x27a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d4e8:	eb03 0209 	add.w	r2, r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d4ec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d4f0:	f001 0101 	and.w	r1, r1, #1
 800d4f4:	eb01 0353 	add.w	r3, r1, r3, lsr #1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d4f8:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d4fa:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d4fc:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d500:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800d504:	d3a7      	bcc.n	800d456 <find_volume+0x26e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d506:	f04f 33ff 	mov.w	r3, #4294967295
 800d50a:	6163      	str	r3, [r4, #20]
 800d50c:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800d50e:	2380      	movs	r3, #128	@ 0x80
 800d510:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 800d512:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d514:	4a05      	ldr	r2, [pc, #20]	@ (800d52c <find_volume+0x344>)
 800d516:	8813      	ldrh	r3, [r2, #0]
 800d518:	3301      	adds	r3, #1
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	8013      	strh	r3, [r2, #0]
 800d51e:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800d520:	4620      	mov	r0, r4
 800d522:	f7fe ffab 	bl	800c47c <clear_lock>
	return FR_OK;
 800d526:	4635      	mov	r5, r6
 800d528:	e775      	b.n	800d416 <find_volume+0x22e>
 800d52a:	bf00      	nop
 800d52c:	200047e0 	.word	0x200047e0

0800d530 <ld_clust>:
{
 800d530:	4602      	mov	r2, r0
	rv = rv << 8 | ptr[0];
 800d532:	7ec8      	ldrb	r0, [r1, #27]
 800d534:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 800d536:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800d53a:	7813      	ldrb	r3, [r2, #0]
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	d000      	beq.n	800d542 <ld_clust+0x12>
}
 800d540:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800d542:	7d4a      	ldrb	r2, [r1, #21]
 800d544:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d54a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	return cl;
 800d54e:	e7f7      	b.n	800d540 <ld_clust+0x10>

0800d550 <follow_path>:
{
 800d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	b085      	sub	sp, #20
 800d556:	4683      	mov	fp, r0
	FATFS *fs = obj->fs;
 800d558:	f8d0 c000 	ldr.w	ip, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d55c:	460b      	mov	r3, r1
 800d55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d562:	2a2f      	cmp	r2, #47	@ 0x2f
 800d564:	d0fa      	beq.n	800d55c <follow_path+0xc>
 800d566:	2a5c      	cmp	r2, #92	@ 0x5c
 800d568:	d0f8      	beq.n	800d55c <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8cb 2008 	str.w	r2, [fp, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d570:	781a      	ldrb	r2, [r3, #0]
 800d572:	2a1f      	cmp	r2, #31
 800d574:	d903      	bls.n	800d57e <follow_path+0x2e>
 800d576:	f8cd c00c 	str.w	ip, [sp, #12]
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	e0ef      	b.n	800d75e <follow_path+0x20e>
		dp->fn[NSFLAG] = NS_NONAME;
 800d57e:	2380      	movs	r3, #128	@ 0x80
 800d580:	f88b 302f 	strb.w	r3, [fp, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d584:	2100      	movs	r1, #0
 800d586:	4658      	mov	r0, fp
 800d588:	f7ff fa1c 	bl	800c9c4 <dir_sdi>
 800d58c:	4601      	mov	r1, r0
}
 800d58e:	4608      	mov	r0, r1
 800d590:	b005      	add	sp, #20
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d596:	4605      	mov	r5, r0
 800d598:	3c01      	subs	r4, #1
 800d59a:	9b01      	ldr	r3, [sp, #4]
 800d59c:	191a      	adds	r2, r3, r4
 800d59e:	e000      	b.n	800d5a2 <follow_path+0x52>
		w = p[si++];					/* Get a character */
 800d5a0:	460a      	mov	r2, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d5a2:	1c51      	adds	r1, r2, #1
 800d5a4:	7853      	ldrb	r3, [r2, #1]
 800d5a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d5a8:	d0fa      	beq.n	800d5a0 <follow_path+0x50>
 800d5aa:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5ac:	d0f8      	beq.n	800d5a0 <follow_path+0x50>
 800d5ae:	9b02      	ldr	r3, [sp, #8]
 800d5b0:	f1c3 0301 	rsb	r3, r3, #1
 800d5b4:	4413      	add	r3, r2
	*path = &p[si];						/* Return pointer to the next segment */
 800d5b6:	9a01      	ldr	r2, [sp, #4]
 800d5b8:	441a      	add	r2, r3
 800d5ba:	9201      	str	r2, [sp, #4]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d5bc:	2c00      	cmp	r4, #0
 800d5be:	f000 8129 	beq.w	800d814 <follow_path+0x2c4>
 800d5c2:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
 800d5c6:	e022      	b.n	800d60e <follow_path+0xbe>
		lfn[di++] = w;					/* Store the Unicode character */
 800d5c8:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
 800d5cc:	1c63      	adds	r3, r4, #1
 800d5ce:	f817 0f01 	ldrb.w	r0, [r7, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800d5d2:	281f      	cmp	r0, #31
 800d5d4:	d917      	bls.n	800d606 <follow_path+0xb6>
 800d5d6:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d5d8:	282f      	cmp	r0, #47	@ 0x2f
 800d5da:	d0dc      	beq.n	800d596 <follow_path+0x46>
 800d5dc:	285c      	cmp	r0, #92	@ 0x5c
 800d5de:	d0da      	beq.n	800d596 <follow_path+0x46>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d5e0:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800d5e4:	d029      	beq.n	800d63a <follow_path+0xea>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	f000 fc1c 	bl	800de24 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	b320      	cbz	r0, 800d63a <follow_path+0xea>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d5f0:	287f      	cmp	r0, #127	@ 0x7f
 800d5f2:	d8e9      	bhi.n	800d5c8 <follow_path+0x78>
	while (*str && *str != chr) str++;
 800d5f4:	2322      	movs	r3, #34	@ 0x22
 800d5f6:	498f      	ldr	r1, [pc, #572]	@ (800d834 <follow_path+0x2e4>)
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d01e      	beq.n	800d63a <follow_path+0xea>
 800d5fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1f9      	bne.n	800d5f8 <follow_path+0xa8>
 800d604:	e7e0      	b.n	800d5c8 <follow_path+0x78>
 800d606:	4605      	mov	r5, r0
 800d608:	e7d5      	b.n	800d5b6 <follow_path+0x66>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d60a:	3c01      	subs	r4, #1
 800d60c:	d012      	beq.n	800d634 <follow_path+0xe4>
		w = lfn[di - 1];
 800d60e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800d612:	2b20      	cmp	r3, #32
 800d614:	d0f9      	beq.n	800d60a <follow_path+0xba>
 800d616:	2b2e      	cmp	r3, #46	@ 0x2e
 800d618:	d0f7      	beq.n	800d60a <follow_path+0xba>
	lfn[di] = 0;						/* LFN is created */
 800d61a:	eb0a 0744 	add.w	r7, sl, r4, lsl #1
 800d61e:	2600      	movs	r6, #0
 800d620:	f82a 6014 	strh.w	r6, [sl, r4, lsl #1]
	mem_set(dp->fn, ' ', 11);
 800d624:	220b      	movs	r2, #11
 800d626:	2120      	movs	r1, #32
 800d628:	f10b 0024 	add.w	r0, fp, #36	@ 0x24
 800d62c:	f7fe fe59 	bl	800c2e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d630:	4633      	mov	r3, r6
 800d632:	e005      	b.n	800d640 <follow_path+0xf0>
	lfn[di] = 0;						/* LFN is created */
 800d634:	2300      	movs	r3, #0
 800d636:	f8aa 3000 	strh.w	r3, [sl]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d63a:	2106      	movs	r1, #6
	return res;
 800d63c:	e7a7      	b.n	800d58e <follow_path+0x3e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d63e:	3301      	adds	r3, #1
 800d640:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800d644:	2820      	cmp	r0, #32
 800d646:	d0fa      	beq.n	800d63e <follow_path+0xee>
 800d648:	282e      	cmp	r0, #46	@ 0x2e
 800d64a:	d0f8      	beq.n	800d63e <follow_path+0xee>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d64c:	2d1f      	cmp	r5, #31
 800d64e:	bf8c      	ite	hi
 800d650:	2500      	movhi	r5, #0
 800d652:	2501      	movls	r5, #1
 800d654:	00ae      	lsls	r6, r5, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 800d656:	b10b      	cbz	r3, 800d65c <follow_path+0x10c>
 800d658:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d65c:	f837 2d02 	ldrh.w	r2, [r7, #-2]!
 800d660:	2a2e      	cmp	r2, #46	@ 0x2e
 800d662:	d001      	beq.n	800d668 <follow_path+0x118>
 800d664:	3c01      	subs	r4, #1
 800d666:	d1f9      	bne.n	800d65c <follow_path+0x10c>
		w = lfn[si++];					/* Get an LFN character */
 800d668:	1c5d      	adds	r5, r3, #1
		if (!w) break;					/* Break on end of the LFN */
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f000 80cc 	beq.w	800d808 <follow_path+0x2b8>
 800d670:	f04f 0900 	mov.w	r9, #0
 800d674:	2708      	movs	r7, #8
 800d676:	46c8      	mov	r8, r9
 800d678:	e008      	b.n	800d68c <follow_path+0x13c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d67a:	42ac      	cmp	r4, r5
 800d67c:	d00a      	beq.n	800d694 <follow_path+0x144>
			cf |= NS_LOSS | NS_LFN; continue;
 800d67e:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN character */
 800d682:	462b      	mov	r3, r5
 800d684:	1c5d      	adds	r5, r3, #1
 800d686:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800d68a:	b360      	cbz	r0, 800d6e6 <follow_path+0x196>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d68c:	2820      	cmp	r0, #32
 800d68e:	d0f6      	beq.n	800d67e <follow_path+0x12e>
 800d690:	282e      	cmp	r0, #46	@ 0x2e
 800d692:	d0f2      	beq.n	800d67a <follow_path+0x12a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d694:	45b8      	cmp	r8, r7
 800d696:	d21d      	bcs.n	800d6d4 <follow_path+0x184>
 800d698:	42ac      	cmp	r4, r5
 800d69a:	f000 80bf 	beq.w	800d81c <follow_path+0x2cc>
		if (w >= 0x80) {				/* Non ASCII character */
 800d69e:	287f      	cmp	r0, #127	@ 0x7f
 800d6a0:	d878      	bhi.n	800d794 <follow_path+0x244>
		if (!w) break;					/* Break on end of the LFN */
 800d6a2:	232b      	movs	r3, #43	@ 0x2b
 800d6a4:	4a64      	ldr	r2, [pc, #400]	@ (800d838 <follow_path+0x2e8>)
	while (*str && *str != chr) str++;
 800d6a6:	4298      	cmp	r0, r3
 800d6a8:	f000 8085 	beq.w	800d7b6 <follow_path+0x266>
 800d6ac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1f8      	bne.n	800d6a6 <follow_path+0x156>
				if (IsUpper(w)) {		/* ASCII large capital */
 800d6b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	2b19      	cmp	r3, #25
 800d6bc:	f240 8086 	bls.w	800d7cc <follow_path+0x27c>
					if (IsLower(w)) {	/* ASCII small capital */
 800d6c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	2b19      	cmp	r3, #25
 800d6c8:	d878      	bhi.n	800d7bc <follow_path+0x26c>
						b |= 1; w -= 0x20;
 800d6ca:	f049 0901 	orr.w	r9, r9, #1
 800d6ce:	3820      	subs	r0, #32
 800d6d0:	b280      	uxth	r0, r0
 800d6d2:	e073      	b.n	800d7bc <follow_path+0x26c>
			if (ni == 11) {				/* Long extension */
 800d6d4:	2f0b      	cmp	r7, #11
 800d6d6:	d052      	beq.n	800d77e <follow_path+0x22e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d6d8:	42ac      	cmp	r4, r5
 800d6da:	f000 80a1 	beq.w	800d820 <follow_path+0x2d0>
 800d6de:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
 800d6e2:	f080 809d 	bcs.w	800d820 <follow_path+0x2d0>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d6e6:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800d6ea:	2be5      	cmp	r3, #229	@ 0xe5
 800d6ec:	d04e      	beq.n	800d78c <follow_path+0x23c>
	if (ni == 8) b <<= 2;
 800d6ee:	2f08      	cmp	r7, #8
 800d6f0:	d073      	beq.n	800d7da <follow_path+0x28a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d6f2:	f009 030c 	and.w	r3, r9, #12
 800d6f6:	2b0c      	cmp	r3, #12
 800d6f8:	d003      	beq.n	800d702 <follow_path+0x1b2>
 800d6fa:	f009 0203 	and.w	r2, r9, #3
 800d6fe:	2a03      	cmp	r2, #3
 800d700:	d101      	bne.n	800d706 <follow_path+0x1b6>
 800d702:	f046 0602 	orr.w	r6, r6, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d706:	f016 0f02 	tst.w	r6, #2
 800d70a:	d109      	bne.n	800d720 <follow_path+0x1d0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d70c:	f009 0203 	and.w	r2, r9, #3
 800d710:	2a01      	cmp	r2, #1
 800d712:	bf08      	it	eq
 800d714:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d718:	2b04      	cmp	r3, #4
 800d71a:	bf08      	it	eq
 800d71c:	f046 0608 	orreq.w	r6, r6, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d720:	f88b 602f 	strb.w	r6, [fp, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800d724:	4658      	mov	r0, fp
 800d726:	f7ff fad3 	bl	800ccd0 <dir_find>
			ns = dp->fn[NSFLAG];
 800d72a:	f89b 202f 	ldrb.w	r2, [fp, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800d72e:	4601      	mov	r1, r0
 800d730:	2800      	cmp	r0, #0
 800d732:	d15e      	bne.n	800d7f2 <follow_path+0x2a2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d734:	f012 0f04 	tst.w	r2, #4
 800d738:	f47f af29 	bne.w	800d58e <follow_path+0x3e>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d73c:	f89b 3006 	ldrb.w	r3, [fp, #6]
 800d740:	f013 0f10 	tst.w	r3, #16
 800d744:	d05e      	beq.n	800d804 <follow_path+0x2b4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d746:	9803      	ldr	r0, [sp, #12]
 800d748:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800d74c:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d754:	4419      	add	r1, r3
 800d756:	f7ff feeb 	bl	800d530 <ld_clust>
 800d75a:	f8cb 0008 	str.w	r0, [fp, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d75e:	f8db 3000 	ldr.w	r3, [fp]
 800d762:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		w = p[si++];					/* Get a character */
 800d766:	9f01      	ldr	r7, [sp, #4]
 800d768:	783d      	ldrb	r5, [r7, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800d76a:	2d1f      	cmp	r5, #31
 800d76c:	d952      	bls.n	800d814 <follow_path+0x2c4>
 800d76e:	f1aa 0802 	sub.w	r8, sl, #2
 800d772:	9702      	str	r7, [sp, #8]
 800d774:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800d776:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d778:	46a1      	mov	r9, r4
 800d77a:	4628      	mov	r0, r5
 800d77c:	e72c      	b.n	800d5d8 <follow_path+0x88>
				cf |= NS_LOSS | NS_LFN; break;
 800d77e:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d782:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800d786:	2be5      	cmp	r3, #229	@ 0xe5
 800d788:	d1b3      	bne.n	800d6f2 <follow_path+0x1a2>
 800d78a:	270b      	movs	r7, #11
 800d78c:	2305      	movs	r3, #5
 800d78e:	f88b 3024 	strb.w	r3, [fp, #36]	@ 0x24
 800d792:	e7ac      	b.n	800d6ee <follow_path+0x19e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d794:	2100      	movs	r1, #0
 800d796:	f000 fb45 	bl	800de24 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d79a:	4603      	mov	r3, r0
 800d79c:	b910      	cbnz	r0, 800d7a4 <follow_path+0x254>
			cf |= NS_LFN;				/* Force create LFN entry */
 800d79e:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d7a2:	e008      	b.n	800d7b6 <follow_path+0x266>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d7a4:	4a25      	ldr	r2, [pc, #148]	@ (800d83c <follow_path+0x2ec>)
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 800d7ac:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f47f af76 	bne.w	800d6a2 <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d7b6:	f046 0603 	orr.w	r6, r6, #3
 800d7ba:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 800d7bc:	eb0b 0308 	add.w	r3, fp, r8
 800d7c0:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d7c4:	462b      	mov	r3, r5
		dp->fn[i++] = (BYTE)w;
 800d7c6:	f108 0801 	add.w	r8, r8, #1
 800d7ca:	e75b      	b.n	800d684 <follow_path+0x134>
					b |= 2;
 800d7cc:	f049 0902 	orr.w	r9, r9, #2
 800d7d0:	e7f4      	b.n	800d7bc <follow_path+0x26c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d7d2:	f04f 0900 	mov.w	r9, #0
 800d7d6:	2708      	movs	r7, #8
 800d7d8:	e7d8      	b.n	800d78c <follow_path+0x23c>
	if (ni == 8) b <<= 2;
 800d7da:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d7de:	fa5f f983 	uxtb.w	r9, r3
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d7e2:	f003 030c 	and.w	r3, r3, #12
 800d7e6:	2b0c      	cmp	r3, #12
 800d7e8:	d08b      	beq.n	800d702 <follow_path+0x1b2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d7ea:	f016 0f02 	tst.w	r6, #2
 800d7ee:	d093      	beq.n	800d718 <follow_path+0x1c8>
 800d7f0:	e796      	b.n	800d720 <follow_path+0x1d0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d7f2:	2804      	cmp	r0, #4
 800d7f4:	f47f aecb 	bne.w	800d58e <follow_path+0x3e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d7f8:	f012 0f04 	tst.w	r2, #4
 800d7fc:	bf14      	ite	ne
 800d7fe:	4601      	movne	r1, r0
 800d800:	2105      	moveq	r1, #5
 800d802:	e6c4      	b.n	800d58e <follow_path+0x3e>
				res = FR_NO_PATH; break;
 800d804:	2105      	movs	r1, #5
 800d806:	e6c2      	b.n	800d58e <follow_path+0x3e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d808:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800d80c:	2be5      	cmp	r3, #229	@ 0xe5
 800d80e:	d0e0      	beq.n	800d7d2 <follow_path+0x282>
 800d810:	2300      	movs	r3, #0
 800d812:	e7ea      	b.n	800d7ea <follow_path+0x29a>
	lfn[di] = 0;						/* LFN is created */
 800d814:	2300      	movs	r3, #0
 800d816:	f8aa 3000 	strh.w	r3, [sl]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d81a:	e70e      	b.n	800d63a <follow_path+0xea>
			if (ni == 11) {				/* Long extension */
 800d81c:	2f0b      	cmp	r7, #11
 800d81e:	d0ae      	beq.n	800d77e <follow_path+0x22e>
			b <<= 2; continue;
 800d820:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800d824:	fa5f f989 	uxtb.w	r9, r9
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d828:	4623      	mov	r3, r4
 800d82a:	270b      	movs	r7, #11
 800d82c:	f04f 0808 	mov.w	r8, #8
			b <<= 2; continue;
 800d830:	e728      	b.n	800d684 <follow_path+0x134>
 800d832:	bf00      	nop
 800d834:	08012358 	.word	0x08012358
 800d838:	08012364 	.word	0x08012364
 800d83c:	08012434 	.word	0x08012434

0800d840 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	9001      	str	r0, [sp, #4]
 800d846:	9100      	str	r1, [sp, #0]
 800d848:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d84a:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d84c:	a803      	add	r0, sp, #12
 800d84e:	f7fe fe57 	bl	800c500 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d852:	1e04      	subs	r4, r0, #0
 800d854:	db1a      	blt.n	800d88c <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d856:	4b11      	ldr	r3, [pc, #68]	@ (800d89c <f_mount+0x5c>)
 800d858:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800d85c:	b125      	cbz	r5, 800d868 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d85e:	4628      	mov	r0, r5
 800d860:	f7fe fe0c 	bl	800c47c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d864:	2300      	movs	r3, #0
 800d866:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800d868:	9b01      	ldr	r3, [sp, #4]
 800d86a:	b18b      	cbz	r3, 800d890 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d86c:	2200      	movs	r2, #0
 800d86e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d870:	4a0a      	ldr	r2, [pc, #40]	@ (800d89c <f_mount+0x5c>)
 800d872:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d876:	2e01      	cmp	r6, #1
 800d878:	d002      	beq.n	800d880 <f_mount+0x40>
 800d87a:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800d87c:	b004      	add	sp, #16
 800d87e:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d880:	2200      	movs	r2, #0
 800d882:	a901      	add	r1, sp, #4
 800d884:	4668      	mov	r0, sp
 800d886:	f7ff fcaf 	bl	800d1e8 <find_volume>
	LEAVE_FF(fs, res);
 800d88a:	e7f7      	b.n	800d87c <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d88c:	200b      	movs	r0, #11
 800d88e:	e7f5      	b.n	800d87c <f_mount+0x3c>
	FatFs[vol] = fs;					/* Register new fs object */
 800d890:	2000      	movs	r0, #0
 800d892:	4b02      	ldr	r3, [pc, #8]	@ (800d89c <f_mount+0x5c>)
 800d894:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d898:	e7f0      	b.n	800d87c <f_mount+0x3c>
 800d89a:	bf00      	nop
 800d89c:	200047e4 	.word	0x200047e4

0800d8a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800d8a8:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	f000 80f7 	beq.w	800da9e <f_open+0x1fe>
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d8b4:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800d8b8:	463a      	mov	r2, r7
 800d8ba:	a982      	add	r1, sp, #520	@ 0x208
 800d8bc:	a801      	add	r0, sp, #4
 800d8be:	f7ff fc93 	bl	800d1e8 <find_volume>
	if (res == FR_OK) {
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	b130      	cbz	r0, 800d8d4 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800d8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800d8d4:	f8dd 8208 	ldr.w	r8, [sp, #520]	@ 0x208
 800d8d8:	f8cd 820c 	str.w	r8, [sp, #524]	@ 0x20c
		INIT_NAMBUF(fs);
 800d8dc:	ab02      	add	r3, sp, #8
 800d8de:	f8c8 300c 	str.w	r3, [r8, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8e2:	9901      	ldr	r1, [sp, #4]
 800d8e4:	a883      	add	r0, sp, #524	@ 0x20c
 800d8e6:	f7ff fe33 	bl	800d550 <follow_path>
		if (res == FR_OK) {
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f040 80fc 	bne.w	800daea <f_open+0x24a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d8f2:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f2c0 80f2 	blt.w	800dae0 <f_open+0x240>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8fc:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 800d900:	bf14      	ite	ne
 800d902:	2101      	movne	r1, #1
 800d904:	2100      	moveq	r1, #0
 800d906:	a883      	add	r0, sp, #524	@ 0x20c
 800d908:	f7fe fcf2 	bl	800c2f0 <chk_lock>
 800d90c:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d90e:	f014 0f1c 	tst.w	r4, #28
 800d912:	d071      	beq.n	800d9f8 <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 800d914:	b950      	cbnz	r0, 800d92c <f_open+0x8c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d916:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800d91a:	f013 0f11 	tst.w	r3, #17
 800d91e:	f040 80b8 	bne.w	800da92 <f_open+0x1f2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d922:	f014 0f04 	tst.w	r4, #4
 800d926:	d015      	beq.n	800d954 <f_open+0xb4>
 800d928:	2508      	movs	r5, #8
 800d92a:	e7cc      	b.n	800d8c6 <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d001      	beq.n	800d934 <f_open+0x94>
					res = FR_DENIED;
 800d930:	461d      	mov	r5, r3
 800d932:	e7c8      	b.n	800d8c6 <f_open+0x26>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d934:	4b71      	ldr	r3, [pc, #452]	@ (800dafc <f_open+0x25c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	b123      	cbz	r3, 800d944 <f_open+0xa4>
 800d93a:	4b70      	ldr	r3, [pc, #448]	@ (800dafc <f_open+0x25c>)
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	b10b      	cbz	r3, 800d944 <f_open+0xa4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d940:	2512      	movs	r5, #18
 800d942:	e7c0      	b.n	800d8c6 <f_open+0x26>
 800d944:	a883      	add	r0, sp, #524	@ 0x20c
 800d946:	f7ff fa9d 	bl	800ce84 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d94a:	2800      	cmp	r0, #0
 800d94c:	f040 809f 	bne.w	800da8e <f_open+0x1ee>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d950:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d954:	f017 0f08 	tst.w	r7, #8
 800d958:	d110      	bne.n	800d97c <f_open+0xdc>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d95a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800d95e:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d960:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800d962:	62b4      	str	r4, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d964:	2f01      	cmp	r7, #1
 800d966:	bf94      	ite	ls
 800d968:	2100      	movls	r1, #0
 800d96a:	2101      	movhi	r1, #1
 800d96c:	a883      	add	r0, sp, #524	@ 0x20c
 800d96e:	f7fe fd07 	bl	800c380 <inc_lock>
 800d972:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d974:	2800      	cmp	r0, #0
 800d976:	d14e      	bne.n	800da16 <f_open+0x176>
 800d978:	2502      	movs	r5, #2
 800d97a:	e7a4      	b.n	800d8c6 <f_open+0x26>
				dw = GET_FATTIME();
 800d97c:	f7fc fcbe 	bl	800a2fc <get_fattime>
 800d980:	4681      	mov	r9, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d982:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800d984:	4601      	mov	r1, r0
 800d986:	f104 000e 	add.w	r0, r4, #14
 800d98a:	f7fe fc98 	bl	800c2be <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d98e:	4649      	mov	r1, r9
 800d990:	f104 0016 	add.w	r0, r4, #22
 800d994:	f7fe fc93 	bl	800c2be <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d998:	2320      	movs	r3, #32
 800d99a:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d99c:	4621      	mov	r1, r4
 800d99e:	4640      	mov	r0, r8
 800d9a0:	f7ff fdc6 	bl	800d530 <ld_clust>
 800d9a4:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	f7fe ff95 	bl	800c8da <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	f104 001c 	add.w	r0, r4, #28
 800d9b6:	f7fe fc82 	bl	800c2be <st_dword>
					fs->wflag = 1;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800d9c0:	f1b9 0f00 	cmp.w	r9, #0
 800d9c4:	d102      	bne.n	800d9cc <f_open+0x12c>
				mode |= FA_MODIFIED;
 800d9c6:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
 800d9ca:	e7c6      	b.n	800d95a <f_open+0xba>
						dw = fs->winsect;
 800d9cc:	f8d8 4030 	ldr.w	r4, [r8, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	a883      	add	r0, sp, #524	@ 0x20c
 800d9d6:	f7ff f8ae 	bl	800cb36 <remove_chain>
						if (res == FR_OK) {
 800d9da:	b108      	cbz	r0, 800d9e0 <f_open+0x140>
						res = remove_chain(&dj.obj, cl, 0);
 800d9dc:	4605      	mov	r5, r0
 800d9de:	e772      	b.n	800d8c6 <f_open+0x26>
							res = move_window(fs, dw);
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	f7fe fe02 	bl	800c5ec <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d9e8:	f109 33ff 	add.w	r3, r9, #4294967295
 800d9ec:	f8c8 3010 	str.w	r3, [r8, #16]
		if (res == FR_OK) {
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d0e8      	beq.n	800d9c6 <f_open+0x126>
							res = move_window(fs, dw);
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	e766      	b.n	800d8c6 <f_open+0x26>
			if (res == FR_OK) {					/* Following succeeded */
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d14c      	bne.n	800da96 <f_open+0x1f6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d9fc:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800da00:	f013 0f10 	tst.w	r3, #16
 800da04:	d149      	bne.n	800da9a <f_open+0x1fa>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da06:	f014 0f02 	tst.w	r4, #2
 800da0a:	d0a6      	beq.n	800d95a <f_open+0xba>
 800da0c:	f013 0f01 	tst.w	r3, #1
 800da10:	d0a3      	beq.n	800d95a <f_open+0xba>
						res = FR_DENIED;
 800da12:	2507      	movs	r5, #7
 800da14:	e757      	b.n	800d8c6 <f_open+0x26>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da16:	4621      	mov	r1, r4
 800da18:	4640      	mov	r0, r8
 800da1a:	f7ff fd89 	bl	800d530 <ld_clust>
 800da1e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da20:	f104 001c 	add.w	r0, r4, #28
 800da24:	f7fe fc40 	bl	800c2a8 <ld_dword>
 800da28:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800da2a:	2100      	movs	r1, #0
 800da2c:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da2e:	f8c6 8000 	str.w	r8, [r6]
			fp->obj.id = fs->id;
 800da32:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800da36:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800da38:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800da3a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800da3c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800da3e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800da40:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 800da44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da48:	4648      	mov	r0, r9
 800da4a:	f7fe fc4a 	bl	800c2e2 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800da4e:	f017 0f20 	tst.w	r7, #32
 800da52:	f43f af3a 	beq.w	800d8ca <f_open+0x2a>
 800da56:	68f4      	ldr	r4, [r6, #12]
 800da58:	2c00      	cmp	r4, #0
 800da5a:	f43f af36 	beq.w	800d8ca <f_open+0x2a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800da5e:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800da60:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800da64:	025f      	lsls	r7, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800da66:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800da68:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 800da6c:	d81c      	bhi.n	800daa8 <f_open+0x208>
 800da6e:	460b      	mov	r3, r1
 800da70:	e026      	b.n	800dac0 <f_open+0x220>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800da72:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 800da76:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800da78:	2301      	movs	r3, #1
 800da7a:	4649      	mov	r1, r9
 800da7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800da80:	f7fe fbe8 	bl	800c254 <disk_read>
 800da84:	2800      	cmp	r0, #0
 800da86:	f43f af20 	beq.w	800d8ca <f_open+0x2a>
 800da8a:	2501      	movs	r5, #1
 800da8c:	e71b      	b.n	800d8c6 <f_open+0x26>
 800da8e:	4605      	mov	r5, r0
 800da90:	e719      	b.n	800d8c6 <f_open+0x26>
					res = FR_DENIED;
 800da92:	2507      	movs	r5, #7
 800da94:	e717      	b.n	800d8c6 <f_open+0x26>
 800da96:	4605      	mov	r5, r0
 800da98:	e715      	b.n	800d8c6 <f_open+0x26>
					res = FR_NO_FILE;
 800da9a:	2504      	movs	r5, #4
 800da9c:	e713      	b.n	800d8c6 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800da9e:	2509      	movs	r5, #9
 800daa0:	e713      	b.n	800d8ca <f_open+0x2a>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800daa2:	1be4      	subs	r4, r4, r7
 800daa4:	42a7      	cmp	r7, r4
 800daa6:	d20a      	bcs.n	800dabe <f_open+0x21e>
					clst = get_fat(&fp->obj, clst);
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7fe ff23 	bl	800c8f4 <get_fat>
 800daae:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800dab0:	2801      	cmp	r0, #1
 800dab2:	d912      	bls.n	800dada <f_open+0x23a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dab4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dab8:	d1f3      	bne.n	800daa2 <f_open+0x202>
 800daba:	2501      	movs	r5, #1
 800dabc:	e00e      	b.n	800dadc <f_open+0x23c>
 800dabe:	4603      	mov	r3, r0
				fp->clust = clst;
 800dac0:	61f3      	str	r3, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dac2:	f3c4 0308 	ubfx	r3, r4, #0, #9
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f43f aeff 	beq.w	800d8ca <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dacc:	4640      	mov	r0, r8
 800dace:	f7fe fce9 	bl	800c4a4 <clust2sect>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d1cd      	bne.n	800da72 <f_open+0x1d2>
						res = FR_INT_ERR;
 800dad6:	2502      	movs	r5, #2
 800dad8:	e6f5      	b.n	800d8c6 <f_open+0x26>
					if (clst <= 1) res = FR_INT_ERR;
 800dada:	2502      	movs	r5, #2
				fp->clust = clst;
 800dadc:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dade:	e6f2      	b.n	800d8c6 <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dae0:	f014 0f1c 	tst.w	r4, #28
 800dae4:	d107      	bne.n	800daf6 <f_open+0x256>
				res = FR_INVALID_NAME;
 800dae6:	2306      	movs	r3, #6
 800dae8:	e003      	b.n	800daf2 <f_open+0x252>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800daea:	f014 0f1c 	tst.w	r4, #28
 800daee:	f47f af1d 	bne.w	800d92c <f_open+0x8c>
						res = FR_INT_ERR;
 800daf2:	461d      	mov	r5, r3
 800daf4:	e6e7      	b.n	800d8c6 <f_open+0x26>
				res = FR_INVALID_NAME;
 800daf6:	2306      	movs	r3, #6
 800daf8:	e71a      	b.n	800d930 <f_open+0x90>
 800dafa:	bf00      	nop
 800dafc:	200047c0 	.word	0x200047c0

0800db00 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	b087      	sub	sp, #28
 800db06:	4604      	mov	r4, r0
 800db08:	460f      	mov	r7, r1
 800db0a:	4693      	mov	fp, r2
 800db0c:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800db0e:	2300      	movs	r3, #0
 800db10:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800db14:	a905      	add	r1, sp, #20
 800db16:	f7fe fd19 	bl	800c54c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db1a:	4606      	mov	r6, r0
 800db1c:	2800      	cmp	r0, #0
 800db1e:	f040 80a9 	bne.w	800dc74 <f_read+0x174>
 800db22:	7d66      	ldrb	r6, [r4, #21]
 800db24:	2e00      	cmp	r6, #0
 800db26:	f040 80a5 	bne.w	800dc74 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800db2a:	7d23      	ldrb	r3, [r4, #20]
 800db2c:	f013 0901 	ands.w	r9, r3, #1
 800db30:	f000 80bf 	beq.w	800dcb2 <f_read+0x1b2>
	remain = fp->obj.objsize - fp->fptr;
 800db34:	68e3      	ldr	r3, [r4, #12]
 800db36:	69a2      	ldr	r2, [r4, #24]
 800db38:	1a9b      	subs	r3, r3, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800db3a:	459b      	cmp	fp, r3
 800db3c:	bf28      	it	cs
 800db3e:	469b      	movcs	fp, r3

	for ( ;  btr;								/* Repeat until all data read */
 800db40:	f1bb 0f00 	cmp.w	fp, #0
 800db44:	f000 8096 	beq.w	800dc74 <f_read+0x174>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db48:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db52:	9603      	str	r6, [sp, #12]
 800db54:	46ba      	mov	sl, r7
 800db56:	e055      	b.n	800dc04 <f_read+0x104>
					if (fp->cltbl) {
 800db58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800db5a:	b11b      	cbz	r3, 800db64 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800db5c:	4620      	mov	r0, r4
 800db5e:	f7fe fcac 	bl	800c4ba <clmt_clust>
 800db62:	e05f      	b.n	800dc24 <f_read+0x124>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800db64:	69e1      	ldr	r1, [r4, #28]
 800db66:	4620      	mov	r0, r4
 800db68:	f7fe fec4 	bl	800c8f4 <get_fat>
 800db6c:	e05a      	b.n	800dc24 <f_read+0x124>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800db6e:	2602      	movs	r6, #2
 800db70:	7566      	strb	r6, [r4, #21]
 800db72:	e07f      	b.n	800dc74 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db74:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800db78:	2301      	movs	r3, #1
 800db7a:	7563      	strb	r3, [r4, #21]
 800db7c:	464e      	mov	r6, r9
 800db7e:	e079      	b.n	800dc74 <f_read+0x174>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800db80:	2602      	movs	r6, #2
 800db82:	7566      	strb	r6, [r4, #21]
 800db84:	e076      	b.n	800dc74 <f_read+0x174>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800db86:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db01      	blt.n	800db92 <f_read+0x92>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db8e:	026d      	lsls	r5, r5, #9
				continue;
 800db90:	e02c      	b.n	800dbec <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800db92:	6a20      	ldr	r0, [r4, #32]
 800db94:	1bc0      	subs	r0, r0, r7
 800db96:	42a8      	cmp	r0, r5
 800db98:	d2f9      	bcs.n	800db8e <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db9e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800dba2:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 800dba6:	f7fe fb92 	bl	800c2ce <mem_cpy>
 800dbaa:	e7f0      	b.n	800db8e <f_read+0x8e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dbac:	6a22      	ldr	r2, [r4, #32]
 800dbae:	42ba      	cmp	r2, r7
 800dbb0:	d00d      	beq.n	800dbce <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dbb2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	db60      	blt.n	800dc7c <f_read+0x17c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dbba:	2301      	movs	r3, #1
 800dbbc:	463a      	mov	r2, r7
 800dbbe:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800dbc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dbc6:	f7fe fb45 	bl	800c254 <disk_read>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d169      	bne.n	800dca2 <f_read+0x1a2>
			fp->sect = sect;
 800dbce:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dbd0:	69a1      	ldr	r1, [r4, #24]
 800dbd2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800dbd6:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dbda:	455d      	cmp	r5, fp
 800dbdc:	bf28      	it	cs
 800dbde:	465d      	movcs	r5, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	9b01      	ldr	r3, [sp, #4]
 800dbe4:	4419      	add	r1, r3
 800dbe6:	4650      	mov	r0, sl
 800dbe8:	f7fe fb71 	bl	800c2ce <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dbec:	44aa      	add	sl, r5
 800dbee:	69a3      	ldr	r3, [r4, #24]
 800dbf0:	442b      	add	r3, r5
 800dbf2:	61a3      	str	r3, [r4, #24]
 800dbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800dbf8:	442b      	add	r3, r5
 800dbfa:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800dbfe:	ebbb 0b05 	subs.w	fp, fp, r5
 800dc02:	d054      	beq.n	800dcae <f_read+0x1ae>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc04:	69a1      	ldr	r1, [r4, #24]
 800dc06:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1e0      	bne.n	800dbd0 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800dc12:	f8b9 600a 	ldrh.w	r6, [r9, #10]
 800dc16:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800dc18:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 800dc1c:	d108      	bne.n	800dc30 <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc1e:	2900      	cmp	r1, #0
 800dc20:	d19a      	bne.n	800db58 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc22:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dc24:	2801      	cmp	r0, #1
 800dc26:	d9a2      	bls.n	800db6e <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc28:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc2c:	d0a2      	beq.n	800db74 <f_read+0x74>
				fp->clust = clst;				/* Update current cluster */
 800dc2e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dc30:	69e1      	ldr	r1, [r4, #28]
 800dc32:	4648      	mov	r0, r9
 800dc34:	f7fe fc36 	bl	800c4a4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dc38:	4607      	mov	r7, r0
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d0a0      	beq.n	800db80 <f_read+0x80>
			sect += csect;
 800dc3e:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dc40:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 800dc44:	d3b2      	bcc.n	800dbac <f_read+0xac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dc46:	ea4f 255b 	mov.w	r5, fp, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dc4a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800dc4e:	eb06 225b 	add.w	r2, r6, fp, lsr #9
 800dc52:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800dc54:	bf88      	it	hi
 800dc56:	1b9d      	subhi	r5, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc58:	462b      	mov	r3, r5
 800dc5a:	463a      	mov	r2, r7
 800dc5c:	4651      	mov	r1, sl
 800dc5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc62:	f7fe faf7 	bl	800c254 <disk_read>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d08d      	beq.n	800db86 <f_read+0x86>
 800dc6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dc6e:	2301      	movs	r3, #1
 800dc70:	7563      	strb	r3, [r4, #21]
 800dc72:	464e      	mov	r6, r9
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800dc74:	4630      	mov	r0, r6
 800dc76:	b007      	add	sp, #28
 800dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800dc82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dc86:	f7fe faf3 	bl	800c270 <disk_write>
 800dc8a:	b920      	cbnz	r0, 800dc96 <f_read+0x196>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dc8c:	7d23      	ldrb	r3, [r4, #20]
 800dc8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc92:	7523      	strb	r3, [r4, #20]
 800dc94:	e791      	b.n	800dbba <f_read+0xba>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc96:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	7563      	strb	r3, [r4, #21]
 800dc9e:	464e      	mov	r6, r9
 800dca0:	e7e8      	b.n	800dc74 <f_read+0x174>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dca2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dca6:	2301      	movs	r3, #1
 800dca8:	7563      	strb	r3, [r4, #21]
 800dcaa:	464e      	mov	r6, r9
 800dcac:	e7e2      	b.n	800dc74 <f_read+0x174>
 800dcae:	9e03      	ldr	r6, [sp, #12]
 800dcb0:	e7e0      	b.n	800dc74 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dcb2:	2607      	movs	r6, #7
 800dcb4:	e7de      	b.n	800dc74 <f_read+0x174>

0800dcb6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dcb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dcbc:	a901      	add	r1, sp, #4
 800dcbe:	f7fe fc45 	bl	800c54c <validate>
	if (res == FR_OK) {
 800dcc2:	b978      	cbnz	r0, 800dce4 <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dcc4:	7d23      	ldrb	r3, [r4, #20]
 800dcc6:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 800dcca:	d00b      	beq.n	800dce4 <f_sync+0x2e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dccc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcd0:	d10a      	bne.n	800dce8 <f_sync+0x32>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dcd2:	f7fc fb13 	bl	800a2fc <get_fattime>
 800dcd6:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dcd8:	9e01      	ldr	r6, [sp, #4]
 800dcda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7fe fc85 	bl	800c5ec <move_window>
				if (res == FR_OK) {
 800dce2:	b178      	cbz	r0, 800dd04 <f_sync+0x4e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800dce4:	b003      	add	sp, #12
 800dce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dce8:	2301      	movs	r3, #1
 800dcea:	6a22      	ldr	r2, [r4, #32]
 800dcec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800dcf0:	9801      	ldr	r0, [sp, #4]
 800dcf2:	7840      	ldrb	r0, [r0, #1]
 800dcf4:	f7fe fabc 	bl	800c270 <disk_write>
 800dcf8:	bb28      	cbnz	r0, 800dd46 <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcfa:	7d23      	ldrb	r3, [r4, #20]
 800dcfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd00:	7523      	strb	r3, [r4, #20]
 800dd02:	e7e6      	b.n	800dcd2 <f_sync+0x1c>
					dir = fp->dir_ptr;
 800dd04:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dd06:	7afb      	ldrb	r3, [r7, #11]
 800dd08:	f043 0320 	orr.w	r3, r3, #32
 800dd0c:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dd0e:	68a2      	ldr	r2, [r4, #8]
 800dd10:	4639      	mov	r1, r7
 800dd12:	6820      	ldr	r0, [r4, #0]
 800dd14:	f7fe fde1 	bl	800c8da <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dd18:	68e1      	ldr	r1, [r4, #12]
 800dd1a:	f107 001c 	add.w	r0, r7, #28
 800dd1e:	f7fe face 	bl	800c2be <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dd22:	4629      	mov	r1, r5
 800dd24:	f107 0016 	add.w	r0, r7, #22
 800dd28:	f7fe fac9 	bl	800c2be <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	74bb      	strb	r3, [r7, #18]
	*ptr++ = (BYTE)val;
 800dd30:	74fb      	strb	r3, [r7, #19]
					fs->wflag = 1;
 800dd32:	2301      	movs	r3, #1
 800dd34:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dd36:	4630      	mov	r0, r6
 800dd38:	f7fe fcf8 	bl	800c72c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dd3c:	7d23      	ldrb	r3, [r4, #20]
 800dd3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd42:	7523      	strb	r3, [r4, #20]
 800dd44:	e7ce      	b.n	800dce4 <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dd46:	2001      	movs	r0, #1
 800dd48:	e7cc      	b.n	800dce4 <f_sync+0x2e>

0800dd4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dd4a:	b510      	push	{r4, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dd50:	f7ff ffb1 	bl	800dcb6 <f_sync>
	if (res == FR_OK)
 800dd54:	b108      	cbz	r0, 800dd5a <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800dd56:	b002      	add	sp, #8
 800dd58:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd5a:	a901      	add	r1, sp, #4
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7fe fbf5 	bl	800c54c <validate>
		if (res == FR_OK) {
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d1f7      	bne.n	800dd56 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd66:	6920      	ldr	r0, [r4, #16]
 800dd68:	f7fe fb66 	bl	800c438 <dec_lock>
			if (res == FR_OK)
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d1f2      	bne.n	800dd56 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800dd70:	6020      	str	r0, [r4, #0]
 800dd72:	e7f0      	b.n	800dd56 <f_close+0xc>

0800dd74 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dd74:	b530      	push	{r4, r5, lr}
 800dd76:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800dd7a:	9001      	str	r0, [sp, #4]
 800dd7c:	460c      	mov	r4, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800dd7e:	2200      	movs	r2, #0
 800dd80:	a983      	add	r1, sp, #524	@ 0x20c
 800dd82:	a801      	add	r0, sp, #4
 800dd84:	f7ff fa30 	bl	800d1e8 <find_volume>
	if (res == FR_OK) {
 800dd88:	4605      	mov	r5, r0
 800dd8a:	b118      	cbz	r0, 800dd94 <f_stat+0x20>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800dd92:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj.obj.fs);
 800dd94:	9b83      	ldr	r3, [sp, #524]	@ 0x20c
 800dd96:	aa03      	add	r2, sp, #12
 800dd98:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dd9a:	9901      	ldr	r1, [sp, #4]
 800dd9c:	a883      	add	r0, sp, #524	@ 0x20c
 800dd9e:	f7ff fbd7 	bl	800d550 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800dda2:	4605      	mov	r5, r0
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d1f1      	bne.n	800dd8c <f_stat+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800dda8:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	db06      	blt.n	800ddbe <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 800ddb0:	2c00      	cmp	r4, #0
 800ddb2:	d0eb      	beq.n	800dd8c <f_stat+0x18>
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	a883      	add	r0, sp, #524	@ 0x20c
 800ddb8:	f7fe fc32 	bl	800c620 <get_fileinfo>
 800ddbc:	e7e6      	b.n	800dd8c <f_stat+0x18>
				res = FR_INVALID_NAME;
 800ddbe:	2506      	movs	r5, #6
 800ddc0:	e7e4      	b.n	800dd8c <f_stat+0x18>
	...

0800ddc4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800ddc4:	4b13      	ldr	r3, [pc, #76]	@ (800de14 <FATFS_LinkDriverEx+0x50>)
 800ddc6:	7a5b      	ldrb	r3, [r3, #9]
 800ddc8:	bb13      	cbnz	r3, 800de10 <FATFS_LinkDriverEx+0x4c>
{
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800ddd2:	4b10      	ldr	r3, [pc, #64]	@ (800de14 <FATFS_LinkDriverEx+0x50>)
 800ddd4:	f893 c009 	ldrb.w	ip, [r3, #9]
 800ddd8:	fa5f fc8c 	uxtb.w	ip, ip
 800dddc:	f04f 0e00 	mov.w	lr, #0
 800dde0:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800dde4:	f893 c009 	ldrb.w	ip, [r3, #9]
 800dde8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800ddec:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800ddf0:	7a5c      	ldrb	r4, [r3, #9]
 800ddf2:	441c      	add	r4, r3
 800ddf4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800ddf6:	7a5a      	ldrb	r2, [r3, #9]
 800ddf8:	1c54      	adds	r4, r2, #1
 800ddfa:	b2e4      	uxtb	r4, r4
 800ddfc:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800ddfe:	3230      	adds	r2, #48	@ 0x30
 800de00:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800de02:	233a      	movs	r3, #58	@ 0x3a
 800de04:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800de06:	232f      	movs	r3, #47	@ 0x2f
 800de08:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800de0a:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800de0e:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800de10:	2001      	movs	r0, #1
}
 800de12:	4770      	bx	lr
 800de14:	200047e8 	.word	0x200047e8

0800de18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800de18:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800de1a:	2200      	movs	r2, #0
 800de1c:	f7ff ffd2 	bl	800ddc4 <FATFS_LinkDriverEx>
}
 800de20:	bd08      	pop	{r3, pc}
	...

0800de24 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800de24:	287f      	cmp	r0, #127	@ 0x7f
 800de26:	d916      	bls.n	800de56 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800de28:	b131      	cbz	r1, 800de38 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de2a:	28ff      	cmp	r0, #255	@ 0xff
 800de2c:	d812      	bhi.n	800de54 <ff_convert+0x30>
 800de2e:	3880      	subs	r0, #128	@ 0x80
 800de30:	4b09      	ldr	r3, [pc, #36]	@ (800de58 <ff_convert+0x34>)
 800de32:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800de36:	4770      	bx	lr
 800de38:	4a07      	ldr	r2, [pc, #28]	@ (800de58 <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800de3a:	2300      	movs	r3, #0
				if (chr == Tbl[c]) break;
 800de3c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800de40:	4281      	cmp	r1, r0
 800de42:	d003      	beq.n	800de4c <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 800de44:	3301      	adds	r3, #1
 800de46:	b29b      	uxth	r3, r3
 800de48:	2b80      	cmp	r3, #128	@ 0x80
 800de4a:	d1f7      	bne.n	800de3c <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 800de4c:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800de50:	b2c0      	uxtb	r0, r0
 800de52:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de54:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800de56:	4770      	bx	lr
 800de58:	08012764 	.word	0x08012764

0800de5c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de5c:	b530      	push	{r4, r5, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de5e:	4a22      	ldr	r2, [pc, #136]	@ (800dee8 <ff_wtoupper+0x8c>)
 800de60:	4b22      	ldr	r3, [pc, #136]	@ (800deec <ff_wtoupper+0x90>)
 800de62:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800de66:	bf38      	it	cc
 800de68:	461a      	movcc	r2, r3
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
		if (chr < bc + nc) {	/* In the block? */
 800de6a:	4605      	mov	r5, r0
 800de6c:	3204      	adds	r2, #4
		bc = *p++;								/* Get block base */
 800de6e:	4694      	mov	ip, r2
 800de70:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 800de74:	b1d9      	cbz	r1, 800deae <ff_wtoupper+0x52>
 800de76:	4288      	cmp	r0, r1
 800de78:	d319      	bcc.n	800deae <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de7a:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800de7e:	0a1c      	lsrs	r4, r3, #8
 800de80:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800de82:	eb03 0e01 	add.w	lr, r3, r1
 800de86:	4570      	cmp	r0, lr
 800de88:	db05      	blt.n	800de96 <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800de8a:	3204      	adds	r2, #4
 800de8c:	2c00      	cmp	r4, #0
 800de8e:	d1ee      	bne.n	800de6e <ff_wtoupper+0x12>
 800de90:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
 800de94:	e7ea      	b.n	800de6c <ff_wtoupper+0x10>
			switch (cmd) {
 800de96:	2c08      	cmp	r4, #8
 800de98:	d809      	bhi.n	800deae <ff_wtoupper+0x52>
 800de9a:	e8df f004 	tbb	[pc, r4]
 800de9e:	0905      	.short	0x0905
 800dea0:	1815120f 	.word	0x1815120f
 800dea4:	1e1b      	.short	0x1e1b
 800dea6:	21          	.byte	0x21
 800dea7:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dea8:	1a6d      	subs	r5, r5, r1
 800deaa:	f832 0015 	ldrh.w	r0, [r2, r5, lsl #1]
	}

	return chr;
}
 800deae:	bd30      	pop	{r4, r5, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800deb0:	1a43      	subs	r3, r0, r1
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	1ac3      	subs	r3, r0, r3
 800deb8:	b298      	uxth	r0, r3
 800deba:	e7f8      	b.n	800deae <ff_wtoupper+0x52>
			case 2: chr -= 16; break;				/* Shift -16 */
 800debc:	3810      	subs	r0, #16
 800debe:	b280      	uxth	r0, r0
 800dec0:	e7f5      	b.n	800deae <ff_wtoupper+0x52>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dec2:	3820      	subs	r0, #32
 800dec4:	b280      	uxth	r0, r0
 800dec6:	e7f2      	b.n	800deae <ff_wtoupper+0x52>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dec8:	3830      	subs	r0, #48	@ 0x30
 800deca:	b280      	uxth	r0, r0
 800decc:	e7ef      	b.n	800deae <ff_wtoupper+0x52>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dece:	381a      	subs	r0, #26
 800ded0:	b280      	uxth	r0, r0
 800ded2:	e7ec      	b.n	800deae <ff_wtoupper+0x52>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ded4:	3008      	adds	r0, #8
 800ded6:	b280      	uxth	r0, r0
 800ded8:	e7e9      	b.n	800deae <ff_wtoupper+0x52>
			case 7: chr -= 80; break;				/* Shift -80 */
 800deda:	3850      	subs	r0, #80	@ 0x50
 800dedc:	b280      	uxth	r0, r0
 800dede:	e7e6      	b.n	800deae <ff_wtoupper+0x52>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dee0:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800dee4:	b280      	uxth	r0, r0
 800dee6:	e7e2      	b.n	800deae <ff_wtoupper+0x52>
 800dee8:	080124b4 	.word	0x080124b4
 800deec:	08012570 	.word	0x08012570

0800def0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800def0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800def2:	2200      	movs	r2, #0
 800def4:	490f      	ldr	r1, [pc, #60]	@ (800df34 <MX_USB_DEVICE_Init+0x44>)
 800def6:	4810      	ldr	r0, [pc, #64]	@ (800df38 <MX_USB_DEVICE_Init+0x48>)
 800def8:	f7fd fbe8 	bl	800b6cc <USBD_Init>
 800defc:	b970      	cbnz	r0, 800df1c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800defe:	490f      	ldr	r1, [pc, #60]	@ (800df3c <MX_USB_DEVICE_Init+0x4c>)
 800df00:	480d      	ldr	r0, [pc, #52]	@ (800df38 <MX_USB_DEVICE_Init+0x48>)
 800df02:	f7fd fc21 	bl	800b748 <USBD_RegisterClass>
 800df06:	b960      	cbnz	r0, 800df22 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800df08:	490d      	ldr	r1, [pc, #52]	@ (800df40 <MX_USB_DEVICE_Init+0x50>)
 800df0a:	480b      	ldr	r0, [pc, #44]	@ (800df38 <MX_USB_DEVICE_Init+0x48>)
 800df0c:	f7fc fcf6 	bl	800a8fc <USBD_MSC_RegisterStorage>
 800df10:	b950      	cbnz	r0, 800df28 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df12:	4809      	ldr	r0, [pc, #36]	@ (800df38 <MX_USB_DEVICE_Init+0x48>)
 800df14:	f7fd fc40 	bl	800b798 <USBD_Start>
 800df18:	b948      	cbnz	r0, 800df2e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df1a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800df1c:	f7f6 fd80 	bl	8004a20 <Error_Handler>
 800df20:	e7ed      	b.n	800defe <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800df22:	f7f6 fd7d 	bl	8004a20 <Error_Handler>
 800df26:	e7ef      	b.n	800df08 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800df28:	f7f6 fd7a 	bl	8004a20 <Error_Handler>
 800df2c:	e7f1      	b.n	800df12 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800df2e:	f7f6 fd77 	bl	8004a20 <Error_Handler>
}
 800df32:	e7f2      	b.n	800df1a <MX_USB_DEVICE_Init+0x2a>
 800df34:	200000cc 	.word	0x200000cc
 800df38:	200047f4 	.word	0x200047f4
 800df3c:	20000044 	.word	0x20000044
 800df40:	200000e8 	.word	0x200000e8

0800df44 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df44:	2312      	movs	r3, #18
 800df46:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800df48:	4800      	ldr	r0, [pc, #0]	@ (800df4c <USBD_FS_DeviceDescriptor+0x8>)
 800df4a:	4770      	bx	lr
 800df4c:	200000b8 	.word	0x200000b8

0800df50 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df50:	2304      	movs	r3, #4
 800df52:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800df54:	4800      	ldr	r0, [pc, #0]	@ (800df58 <USBD_FS_LangIDStrDescriptor+0x8>)
 800df56:	4770      	bx	lr
 800df58:	200000b4 	.word	0x200000b4

0800df5c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800df5c:	b18a      	cbz	r2, 800df82 <IntToUnicode+0x26>
 800df5e:	3101      	adds	r1, #1
 800df60:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800df64:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800df68:	0f03      	lsrs	r3, r0, #28
 800df6a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800df6e:	bf34      	ite	cc
 800df70:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df72:	3337      	addcs	r3, #55	@ 0x37
 800df74:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 800df78:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800df7a:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 800df7e:	4291      	cmp	r1, r2
 800df80:	d1f2      	bne.n	800df68 <IntToUnicode+0xc>
  }
}
 800df82:	4770      	bx	lr

0800df84 <USBD_FS_SerialStrDescriptor>:
{
 800df84:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800df86:	231a      	movs	r3, #26
 800df88:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df8a:	4b0c      	ldr	r3, [pc, #48]	@ (800dfbc <USBD_FS_SerialStrDescriptor+0x38>)
 800df8c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 800df90:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800df94:	18c0      	adds	r0, r0, r3
 800df96:	d101      	bne.n	800df9c <USBD_FS_SerialStrDescriptor+0x18>
}
 800df98:	4809      	ldr	r0, [pc, #36]	@ (800dfc0 <USBD_FS_SerialStrDescriptor+0x3c>)
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df9c:	4b07      	ldr	r3, [pc, #28]	@ (800dfbc <USBD_FS_SerialStrDescriptor+0x38>)
 800df9e:	f8d3 5a14 	ldr.w	r5, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dfa2:	4c08      	ldr	r4, [pc, #32]	@ (800dfc4 <USBD_FS_SerialStrDescriptor+0x40>)
 800dfa4:	2208      	movs	r2, #8
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	f7ff ffd8 	bl	800df5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dfac:	2204      	movs	r2, #4
 800dfae:	f104 0110 	add.w	r1, r4, #16
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f7ff ffd2 	bl	800df5c <IntToUnicode>
 800dfb8:	e7ee      	b.n	800df98 <USBD_FS_SerialStrDescriptor+0x14>
 800dfba:	bf00      	nop
 800dfbc:	1fff7000 	.word	0x1fff7000
 800dfc0:	20000098 	.word	0x20000098
 800dfc4:	2000009a 	.word	0x2000009a

0800dfc8 <USBD_FS_ProductStrDescriptor>:
{
 800dfc8:	b508      	push	{r3, lr}
 800dfca:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfcc:	4902      	ldr	r1, [pc, #8]	@ (800dfd8 <USBD_FS_ProductStrDescriptor+0x10>)
 800dfce:	4803      	ldr	r0, [pc, #12]	@ (800dfdc <USBD_FS_ProductStrDescriptor+0x14>)
 800dfd0:	f7fe f8c2 	bl	800c158 <USBD_GetString>
}
 800dfd4:	4800      	ldr	r0, [pc, #0]	@ (800dfd8 <USBD_FS_ProductStrDescriptor+0x10>)
 800dfd6:	bd08      	pop	{r3, pc}
 800dfd8:	20004ad0 	.word	0x20004ad0
 800dfdc:	0801236c 	.word	0x0801236c

0800dfe0 <USBD_FS_ManufacturerStrDescriptor>:
{
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfe4:	4c03      	ldr	r4, [pc, #12]	@ (800dff4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4803      	ldr	r0, [pc, #12]	@ (800dff8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800dfea:	f7fe f8b5 	bl	800c158 <USBD_GetString>
}
 800dfee:	4620      	mov	r0, r4
 800dff0:	bd10      	pop	{r4, pc}
 800dff2:	bf00      	nop
 800dff4:	20004ad0 	.word	0x20004ad0
 800dff8:	08012380 	.word	0x08012380

0800dffc <USBD_FS_ConfigStrDescriptor>:
{
 800dffc:	b508      	push	{r3, lr}
 800dffe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e000:	4902      	ldr	r1, [pc, #8]	@ (800e00c <USBD_FS_ConfigStrDescriptor+0x10>)
 800e002:	4803      	ldr	r0, [pc, #12]	@ (800e010 <USBD_FS_ConfigStrDescriptor+0x14>)
 800e004:	f7fe f8a8 	bl	800c158 <USBD_GetString>
}
 800e008:	4800      	ldr	r0, [pc, #0]	@ (800e00c <USBD_FS_ConfigStrDescriptor+0x10>)
 800e00a:	bd08      	pop	{r3, pc}
 800e00c:	20004ad0 	.word	0x20004ad0
 800e010:	08012394 	.word	0x08012394

0800e014 <USBD_FS_InterfaceStrDescriptor>:
{
 800e014:	b508      	push	{r3, lr}
 800e016:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e018:	4902      	ldr	r1, [pc, #8]	@ (800e024 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800e01a:	4803      	ldr	r0, [pc, #12]	@ (800e028 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800e01c:	f7fe f89c 	bl	800c158 <USBD_GetString>
}
 800e020:	4800      	ldr	r0, [pc, #0]	@ (800e024 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800e022:	bd08      	pop	{r3, pc}
 800e024:	20004ad0 	.word	0x20004ad0
 800e028:	080123a0 	.word	0x080123a0

0800e02c <STORAGE_IsWriteProtected_FS>:
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800e02c:	2000      	movs	r0, #0
 800e02e:	4770      	bx	lr

0800e030 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800e030:	2000      	movs	r0, #0
 800e032:	4770      	bx	lr

0800e034 <STORAGE_Write_FS>:
{
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	460c      	mov	r4, r1
 800e038:	4615      	mov	r5, r2
 800e03a:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e03c:	f7fc f99b 	bl	800a376 <BSP_SD_IsDetected>
 800e040:	b1a0      	cbz	r0, 800e06c <STORAGE_Write_FS+0x38>
    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800e042:	4632      	mov	r2, r6
 800e044:	4629      	mov	r1, r5
 800e046:	4620      	mov	r0, r4
 800e048:	f7fc f968 	bl	800a31c <BSP_SD_WriteBlocks_DMA>
    while (usbd_WriteStatus == 0)
 800e04c:	4a09      	ldr	r2, [pc, #36]	@ (800e074 <STORAGE_Write_FS+0x40>)
 800e04e:	6813      	ldr	r3, [r2, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d0fc      	beq.n	800e04e <STORAGE_Write_FS+0x1a>
    usbd_WriteStatus = 0;
 800e054:	4b07      	ldr	r3, [pc, #28]	@ (800e074 <STORAGE_Write_FS+0x40>)
 800e056:	2200      	movs	r2, #0
 800e058:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800e05a:	4c07      	ldr	r4, [pc, #28]	@ (800e078 <STORAGE_Write_FS+0x44>)
 800e05c:	f7fc f96c 	bl	800a338 <BSP_SD_GetCardState>
 800e060:	b118      	cbz	r0, 800e06a <STORAGE_Write_FS+0x36>
      if (timeout-- == 0)
 800e062:	3c01      	subs	r4, #1
 800e064:	d1fa      	bne.n	800e05c <STORAGE_Write_FS+0x28>
        return ret;
 800e066:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295
 800e070:	e7fb      	b.n	800e06a <STORAGE_Write_FS+0x36>
 800e072:	bf00      	nop
 800e074:	20004cd8 	.word	0x20004cd8
 800e078:	000186a1 	.word	0x000186a1

0800e07c <STORAGE_Read_FS>:
{
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	460c      	mov	r4, r1
 800e080:	4615      	mov	r5, r2
 800e082:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e084:	f7fc f977 	bl	800a376 <BSP_SD_IsDetected>
 800e088:	b1a0      	cbz	r0, 800e0b4 <STORAGE_Read_FS+0x38>
    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800e08a:	4632      	mov	r2, r6
 800e08c:	4629      	mov	r1, r5
 800e08e:	4620      	mov	r0, r4
 800e090:	f7fc f936 	bl	800a300 <BSP_SD_ReadBlocks_DMA>
    while (usbd_ReadStatus == 0)
 800e094:	4a09      	ldr	r2, [pc, #36]	@ (800e0bc <STORAGE_Read_FS+0x40>)
 800e096:	6813      	ldr	r3, [r2, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d0fc      	beq.n	800e096 <STORAGE_Read_FS+0x1a>
    usbd_ReadStatus = 0;
 800e09c:	4b07      	ldr	r3, [pc, #28]	@ (800e0bc <STORAGE_Read_FS+0x40>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800e0a2:	4c07      	ldr	r4, [pc, #28]	@ (800e0c0 <STORAGE_Read_FS+0x44>)
 800e0a4:	f7fc f948 	bl	800a338 <BSP_SD_GetCardState>
 800e0a8:	b118      	cbz	r0, 800e0b2 <STORAGE_Read_FS+0x36>
      if (timeout-- == 0)
 800e0aa:	3c01      	subs	r4, #1
 800e0ac:	d1fa      	bne.n	800e0a4 <STORAGE_Read_FS+0x28>
        return ret;
 800e0ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b8:	e7fb      	b.n	800e0b2 <STORAGE_Read_FS+0x36>
 800e0ba:	bf00      	nop
 800e0bc:	20004cd4 	.word	0x20004cd4
 800e0c0:	000186a1 	.word	0x000186a1

0800e0c4 <STORAGE_IsReady_FS>:
{
 800e0c4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e0c6:	f7fc f956 	bl	800a376 <BSP_SD_IsDetected>
 800e0ca:	b188      	cbz	r0, 800e0f0 <STORAGE_IsReady_FS+0x2c>
    if (prev_status < 0)
 800e0cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e10c <STORAGE_IsReady_FS+0x48>)
 800e0ce:	f993 3000 	ldrsb.w	r3, [r3]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	db06      	blt.n	800e0e4 <STORAGE_IsReady_FS+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0d6:	f7fc f92f 	bl	800a338 <BSP_SD_GetCardState>
 800e0da:	3800      	subs	r0, #0
 800e0dc:	bf18      	it	ne
 800e0de:	2001      	movne	r0, #1
 800e0e0:	4240      	negs	r0, r0
}
 800e0e2:	bd08      	pop	{r3, pc}
      BSP_SD_Init();
 800e0e4:	f7fc f950 	bl	800a388 <BSP_SD_Init>
      prev_status = 0;
 800e0e8:	4b08      	ldr	r3, [pc, #32]	@ (800e10c <STORAGE_IsReady_FS+0x48>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	e7f2      	b.n	800e0d6 <STORAGE_IsReady_FS+0x12>
  else if (prev_status == 0)
 800e0f0:	4b06      	ldr	r3, [pc, #24]	@ (800e10c <STORAGE_IsReady_FS+0x48>)
 800e0f2:	f993 3000 	ldrsb.w	r3, [r3]
 800e0f6:	b92b      	cbnz	r3, 800e104 <STORAGE_IsReady_FS+0x40>
    prev_status = -1;
 800e0f8:	4b04      	ldr	r3, [pc, #16]	@ (800e10c <STORAGE_IsReady_FS+0x48>)
 800e0fa:	22ff      	movs	r2, #255	@ 0xff
 800e0fc:	701a      	strb	r2, [r3, #0]
  int8_t ret = -1;
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	e7ee      	b.n	800e0e2 <STORAGE_IsReady_FS+0x1e>
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e7eb      	b.n	800e0e2 <STORAGE_IsReady_FS+0x1e>
 800e10a:	bf00      	nop
 800e10c:	20004cd0 	.word	0x20004cd0

0800e110 <STORAGE_Init_FS>:
{
 800e110:	b508      	push	{r3, lr}
 BSP_SD_Init();
 800e112:	f7fc f939 	bl	800a388 <BSP_SD_Init>
}
 800e116:	2000      	movs	r0, #0
 800e118:	bd08      	pop	{r3, pc}

0800e11a <STORAGE_GetCapacity_FS>:
{
 800e11a:	b530      	push	{r4, r5, lr}
 800e11c:	b089      	sub	sp, #36	@ 0x24
 800e11e:	460d      	mov	r5, r1
 800e120:	4614      	mov	r4, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e122:	f7fc f928 	bl	800a376 <BSP_SD_IsDetected>
 800e126:	b150      	cbz	r0, 800e13e <STORAGE_GetCapacity_FS+0x24>
    BSP_SD_GetCardInfo(&info);
 800e128:	4668      	mov	r0, sp
 800e12a:	f7fc f90f 	bl	800a34c <BSP_SD_GetCardInfo>
    *block_num = info.LogBlockNbr - 1;
 800e12e:	9b06      	ldr	r3, [sp, #24]
 800e130:	3b01      	subs	r3, #1
 800e132:	602b      	str	r3, [r5, #0]
    *block_size = info.LogBlockSize;
 800e134:	9b07      	ldr	r3, [sp, #28]
 800e136:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800e138:	2000      	movs	r0, #0
}
 800e13a:	b009      	add	sp, #36	@ 0x24
 800e13c:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;
 800e13e:	f04f 30ff 	mov.w	r0, #4294967295
 800e142:	e7fa      	b.n	800e13a <STORAGE_GetCapacity_FS+0x20>

0800e144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e144:	b530      	push	{r4, r5, lr}
 800e146:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e148:	2300      	movs	r3, #0
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	9305      	str	r3, [sp, #20]
 800e150:	9306      	str	r3, [sp, #24]
 800e152:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e154:	6803      	ldr	r3, [r0, #0]
 800e156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e15a:	d001      	beq.n	800e160 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e15c:	b009      	add	sp, #36	@ 0x24
 800e15e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e160:	2500      	movs	r5, #0
 800e162:	9501      	str	r5, [sp, #4]
 800e164:	4c16      	ldr	r4, [pc, #88]	@ (800e1c0 <HAL_PCD_MspInit+0x7c>)
 800e166:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e168:	f043 0301 	orr.w	r3, r3, #1
 800e16c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e16e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	9301      	str	r3, [sp, #4]
 800e176:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e178:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e17c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e17e:	2302      	movs	r3, #2
 800e180:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e182:	2303      	movs	r3, #3
 800e184:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e186:	230a      	movs	r3, #10
 800e188:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e18a:	a903      	add	r1, sp, #12
 800e18c:	480d      	ldr	r0, [pc, #52]	@ (800e1c4 <HAL_PCD_MspInit+0x80>)
 800e18e:	f7f7 fc3b 	bl	8005a08 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e192:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e198:	6363      	str	r3, [r4, #52]	@ 0x34
 800e19a:	9502      	str	r5, [sp, #8]
 800e19c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e19e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e1a2:	6463      	str	r3, [r4, #68]	@ 0x44
 800e1a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e1a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1aa:	9302      	str	r3, [sp, #8]
 800e1ac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	2107      	movs	r1, #7
 800e1b2:	2043      	movs	r0, #67	@ 0x43
 800e1b4:	f7f7 f9bc 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e1b8:	2043      	movs	r0, #67	@ 0x43
 800e1ba:	f7f7 f9ef 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 800e1be:	e7cd      	b.n	800e15c <HAL_PCD_MspInit+0x18>
 800e1c0:	40023800 	.word	0x40023800
 800e1c4:	40020000 	.word	0x40020000

0800e1c8 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800e1c8:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 800e1ca:	6803      	ldr	r3, [r0, #0]
 800e1cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1d0:	d000      	beq.n	800e1d4 <HAL_PCD_MspDeInit+0xc>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800e1d2:	bd08      	pop	{r3, pc}
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800e1d4:	4a06      	ldr	r2, [pc, #24]	@ (800e1f0 <HAL_PCD_MspDeInit+0x28>)
 800e1d6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800e1d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1dc:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800e1de:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e1e2:	4804      	ldr	r0, [pc, #16]	@ (800e1f4 <HAL_PCD_MspDeInit+0x2c>)
 800e1e4:	f7f7 fd1a 	bl	8005c1c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800e1e8:	2043      	movs	r0, #67	@ 0x43
 800e1ea:	f7f7 f9e5 	bl	80055b8 <HAL_NVIC_DisableIRQ>
}
 800e1ee:	e7f0      	b.n	800e1d2 <HAL_PCD_MspDeInit+0xa>
 800e1f0:	40023800 	.word	0x40023800
 800e1f4:	40020000 	.word	0x40020000

0800e1f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1fa:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800e1fe:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e202:	f7fd fadf 	bl	800b7c4 <USBD_LL_SetupStage>
}
 800e206:	bd08      	pop	{r3, pc}

0800e208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e208:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e20a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800e20e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e212:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800e216:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e21a:	f7fd faff 	bl	800b81c <USBD_LL_DataOutStage>
}
 800e21e:	bd08      	pop	{r3, pc}

0800e220 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e220:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e222:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800e226:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e22a:	6a1a      	ldr	r2, [r3, #32]
 800e22c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e230:	f7fd fb38 	bl	800b8a4 <USBD_LL_DataInStage>
}
 800e234:	bd08      	pop	{r3, pc}

0800e236 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e236:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e238:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e23c:	f7fd fbe7 	bl	800ba0e <USBD_LL_SOF>
}
 800e240:	bd08      	pop	{r3, pc}

0800e242 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e242:	b510      	push	{r4, lr}
 800e244:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e246:	79c1      	ldrb	r1, [r0, #7]
 800e248:	b111      	cbz	r1, 800e250 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e24a:	2902      	cmp	r1, #2
 800e24c:	d109      	bne.n	800e262 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800e24e:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e250:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800e254:	f7fd fbbc 	bl	800b9d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e258:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800e25c:	f7fd fb87 	bl	800b96e <USBD_LL_Reset>
}
 800e260:	bd10      	pop	{r4, pc}
    Error_Handler();
 800e262:	f7f6 fbdd 	bl	8004a20 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e266:	2101      	movs	r1, #1
 800e268:	e7f2      	b.n	800e250 <HAL_PCD_ResetCallback+0xe>
	...

0800e26c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e26c:	b510      	push	{r4, lr}
 800e26e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e270:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e274:	f7fd fbaf 	bl	800b9d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e278:	6822      	ldr	r2, [r4, #0]
 800e27a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800e27e:	f043 0301 	orr.w	r3, r3, #1
 800e282:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e286:	7ae3      	ldrb	r3, [r4, #11]
 800e288:	b123      	cbz	r3, 800e294 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e28a:	4a03      	ldr	r2, [pc, #12]	@ (800e298 <HAL_PCD_SuspendCallback+0x2c>)
 800e28c:	6913      	ldr	r3, [r2, #16]
 800e28e:	f043 0306 	orr.w	r3, r3, #6
 800e292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e294:	bd10      	pop	{r4, pc}
 800e296:	bf00      	nop
 800e298:	e000ed00 	.word	0xe000ed00

0800e29c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e29c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e29e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e2a2:	f7fd fba7 	bl	800b9f4 <USBD_LL_Resume>
}
 800e2a6:	bd08      	pop	{r3, pc}

0800e2a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2aa:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e2ae:	f7fd fbd6 	bl	800ba5e <USBD_LL_IsoOUTIncomplete>
}
 800e2b2:	bd08      	pop	{r3, pc}

0800e2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2b4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2b6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e2ba:	f7fd fbb9 	bl	800ba30 <USBD_LL_IsoINIncomplete>
}
 800e2be:	bd08      	pop	{r3, pc}

0800e2c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c0:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e2c2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e2c6:	f7fd fbe1 	bl	800ba8c <USBD_LL_DevConnected>
}
 800e2ca:	bd08      	pop	{r3, pc}

0800e2cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2cc:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e2ce:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e2d2:	f7fd fbdd 	bl	800ba90 <USBD_LL_DevDisconnected>
}
 800e2d6:	bd08      	pop	{r3, pc}

0800e2d8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e2d8:	7802      	ldrb	r2, [r0, #0]
 800e2da:	b10a      	cbz	r2, 800e2e0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800e2dc:	2000      	movs	r0, #0
 800e2de:	4770      	bx	lr
{
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800e2e4:	4815      	ldr	r0, [pc, #84]	@ (800e33c <USBD_LL_Init+0x64>)
 800e2e6:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e2ea:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e2ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800e2f2:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e2f4:	2304      	movs	r3, #4
 800e2f6:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e300:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e302:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e304:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e306:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e308:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e30a:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e30c:	f7f7 fd51 	bl	8005db2 <HAL_PCD_Init>
 800e310:	b980      	cbnz	r0, 800e334 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e312:	4c0a      	ldr	r4, [pc, #40]	@ (800e33c <USBD_LL_Init+0x64>)
 800e314:	2180      	movs	r1, #128	@ 0x80
 800e316:	4620      	mov	r0, r4
 800e318:	f7f8 fb6a 	bl	80069f0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e31c:	2240      	movs	r2, #64	@ 0x40
 800e31e:	2100      	movs	r1, #0
 800e320:	4620      	mov	r0, r4
 800e322:	f7f8 fb40 	bl	80069a6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e326:	2280      	movs	r2, #128	@ 0x80
 800e328:	2101      	movs	r1, #1
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7f8 fb3b 	bl	80069a6 <HAL_PCDEx_SetTxFiFo>
}
 800e330:	2000      	movs	r0, #0
 800e332:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800e334:	f7f6 fb74 	bl	8004a20 <Error_Handler>
 800e338:	e7eb      	b.n	800e312 <USBD_LL_Init+0x3a>
 800e33a:	bf00      	nop
 800e33c:	20004f54 	.word	0x20004f54

0800e340 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e340:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800e344:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e348:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800e34c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e350:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e354:	bf14      	ite	ne
 800e356:	7d98      	ldrbne	r0, [r3, #22]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e358:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 800e35c:	4770      	bx	lr

0800e35e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e35e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e360:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e364:	f7f7 fea9 	bl	80060ba <HAL_PCD_EP_GetRxCount>
}
 800e368:	bd08      	pop	{r3, pc}
	...

0800e36c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800e36c:	4800      	ldr	r0, [pc, #0]	@ (800e370 <USBD_static_malloc+0x4>)
 800e36e:	4770      	bx	lr
 800e370:	20004cdc 	.word	0x20004cdc

0800e374 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800e374:	4770      	bx	lr

0800e376 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e376:	b120      	cbz	r0, 800e382 <USBD_Get_USB_Status+0xc>
 800e378:	2802      	cmp	r0, #2
 800e37a:	bf0c      	ite	eq
 800e37c:	2001      	moveq	r0, #1
 800e37e:	2003      	movne	r0, #3
 800e380:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800e382:	4770      	bx	lr

0800e384 <USBD_LL_DeInit>:
{
 800e384:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 800e386:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e38a:	f7f7 fd87 	bl	8005e9c <HAL_PCD_DeInit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e38e:	f7ff fff2 	bl	800e376 <USBD_Get_USB_Status>
}
 800e392:	bd08      	pop	{r3, pc}

0800e394 <USBD_LL_Start>:
{
 800e394:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e396:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e39a:	f7f7 fd96 	bl	8005eca <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e39e:	f7ff ffea 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3a2:	bd08      	pop	{r3, pc}

0800e3a4 <USBD_LL_Stop>:
{
 800e3a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800e3a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e3aa:	f7f7 fdb0 	bl	8005f0e <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3ae:	f7ff ffe2 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3b2:	bd08      	pop	{r3, pc}

0800e3b4 <USBD_LL_OpenEP>:
{
 800e3b4:	b508      	push	{r3, lr}
 800e3b6:	4694      	mov	ip, r2
 800e3b8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e3ba:	4663      	mov	r3, ip
 800e3bc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e3c0:	f7f7 fdde 	bl	8005f80 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c4:	f7ff ffd7 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3c8:	bd08      	pop	{r3, pc}

0800e3ca <USBD_LL_CloseEP>:
{
 800e3ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3cc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e3d0:	f7f7 fe19 	bl	8006006 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3d4:	f7ff ffcf 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3d8:	bd08      	pop	{r3, pc}

0800e3da <USBD_LL_FlushEP>:
{
 800e3da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e3dc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e3e0:	f7f8 fac6 	bl	8006970 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e4:	f7ff ffc7 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3e8:	bd08      	pop	{r3, pc}

0800e3ea <USBD_LL_StallEP>:
{
 800e3ea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3ec:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e3f0:	f7f7 fe90 	bl	8006114 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3f4:	f7ff ffbf 	bl	800e376 <USBD_Get_USB_Status>
}
 800e3f8:	bd08      	pop	{r3, pc}

0800e3fa <USBD_LL_ClearStallEP>:
{
 800e3fa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3fc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e400:	f7f7 fec9 	bl	8006196 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e404:	f7ff ffb7 	bl	800e376 <USBD_Get_USB_Status>
}
 800e408:	bd08      	pop	{r3, pc}

0800e40a <USBD_LL_SetUSBAddress>:
{
 800e40a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e40c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e410:	f7f7 fda3 	bl	8005f5a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e414:	f7ff ffaf 	bl	800e376 <USBD_Get_USB_Status>
}
 800e418:	bd08      	pop	{r3, pc}

0800e41a <USBD_LL_Transmit>:
{
 800e41a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e41c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e420:	f7f7 fe54 	bl	80060cc <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e424:	f7ff ffa7 	bl	800e376 <USBD_Get_USB_Status>
}
 800e428:	bd08      	pop	{r3, pc}

0800e42a <USBD_LL_PrepareReceive>:
{
 800e42a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e42c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e430:	f7f7 fe1f 	bl	8006072 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e434:	f7ff ff9f 	bl	800e376 <USBD_Get_USB_Status>
}
 800e438:	bd08      	pop	{r3, pc}

0800e43a <__cvt>:
 800e43a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e43e:	ec57 6b10 	vmov	r6, r7, d0
 800e442:	2f00      	cmp	r7, #0
 800e444:	460c      	mov	r4, r1
 800e446:	4619      	mov	r1, r3
 800e448:	463b      	mov	r3, r7
 800e44a:	bfbb      	ittet	lt
 800e44c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e450:	461f      	movlt	r7, r3
 800e452:	2300      	movge	r3, #0
 800e454:	232d      	movlt	r3, #45	@ 0x2d
 800e456:	700b      	strb	r3, [r1, #0]
 800e458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e45a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e45e:	4691      	mov	r9, r2
 800e460:	f023 0820 	bic.w	r8, r3, #32
 800e464:	bfbc      	itt	lt
 800e466:	4632      	movlt	r2, r6
 800e468:	4616      	movlt	r6, r2
 800e46a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e46e:	d005      	beq.n	800e47c <__cvt+0x42>
 800e470:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e474:	d100      	bne.n	800e478 <__cvt+0x3e>
 800e476:	3401      	adds	r4, #1
 800e478:	2102      	movs	r1, #2
 800e47a:	e000      	b.n	800e47e <__cvt+0x44>
 800e47c:	2103      	movs	r1, #3
 800e47e:	ab03      	add	r3, sp, #12
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	ab02      	add	r3, sp, #8
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	ec47 6b10 	vmov	d0, r6, r7
 800e48a:	4653      	mov	r3, sl
 800e48c:	4622      	mov	r2, r4
 800e48e:	f000 ffdf 	bl	800f450 <_dtoa_r>
 800e492:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e496:	4605      	mov	r5, r0
 800e498:	d119      	bne.n	800e4ce <__cvt+0x94>
 800e49a:	f019 0f01 	tst.w	r9, #1
 800e49e:	d00e      	beq.n	800e4be <__cvt+0x84>
 800e4a0:	eb00 0904 	add.w	r9, r0, r4
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 fb34 	bl	8000b18 <__aeabi_dcmpeq>
 800e4b0:	b108      	cbz	r0, 800e4b6 <__cvt+0x7c>
 800e4b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e4b6:	2230      	movs	r2, #48	@ 0x30
 800e4b8:	9b03      	ldr	r3, [sp, #12]
 800e4ba:	454b      	cmp	r3, r9
 800e4bc:	d31e      	bcc.n	800e4fc <__cvt+0xc2>
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4c2:	1b5b      	subs	r3, r3, r5
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	b004      	add	sp, #16
 800e4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e4d2:	eb00 0904 	add.w	r9, r0, r4
 800e4d6:	d1e5      	bne.n	800e4a4 <__cvt+0x6a>
 800e4d8:	7803      	ldrb	r3, [r0, #0]
 800e4da:	2b30      	cmp	r3, #48	@ 0x30
 800e4dc:	d10a      	bne.n	800e4f4 <__cvt+0xba>
 800e4de:	2200      	movs	r2, #0
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	4639      	mov	r1, r7
 800e4e6:	f7f2 fb17 	bl	8000b18 <__aeabi_dcmpeq>
 800e4ea:	b918      	cbnz	r0, 800e4f4 <__cvt+0xba>
 800e4ec:	f1c4 0401 	rsb	r4, r4, #1
 800e4f0:	f8ca 4000 	str.w	r4, [sl]
 800e4f4:	f8da 3000 	ldr.w	r3, [sl]
 800e4f8:	4499      	add	r9, r3
 800e4fa:	e7d3      	b.n	800e4a4 <__cvt+0x6a>
 800e4fc:	1c59      	adds	r1, r3, #1
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	701a      	strb	r2, [r3, #0]
 800e502:	e7d9      	b.n	800e4b8 <__cvt+0x7e>

0800e504 <__exponent>:
 800e504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e506:	2900      	cmp	r1, #0
 800e508:	bfba      	itte	lt
 800e50a:	4249      	neglt	r1, r1
 800e50c:	232d      	movlt	r3, #45	@ 0x2d
 800e50e:	232b      	movge	r3, #43	@ 0x2b
 800e510:	2909      	cmp	r1, #9
 800e512:	7002      	strb	r2, [r0, #0]
 800e514:	7043      	strb	r3, [r0, #1]
 800e516:	dd29      	ble.n	800e56c <__exponent+0x68>
 800e518:	f10d 0307 	add.w	r3, sp, #7
 800e51c:	461d      	mov	r5, r3
 800e51e:	270a      	movs	r7, #10
 800e520:	461a      	mov	r2, r3
 800e522:	fbb1 f6f7 	udiv	r6, r1, r7
 800e526:	fb07 1416 	mls	r4, r7, r6, r1
 800e52a:	3430      	adds	r4, #48	@ 0x30
 800e52c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e530:	460c      	mov	r4, r1
 800e532:	2c63      	cmp	r4, #99	@ 0x63
 800e534:	f103 33ff 	add.w	r3, r3, #4294967295
 800e538:	4631      	mov	r1, r6
 800e53a:	dcf1      	bgt.n	800e520 <__exponent+0x1c>
 800e53c:	3130      	adds	r1, #48	@ 0x30
 800e53e:	1e94      	subs	r4, r2, #2
 800e540:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e544:	1c41      	adds	r1, r0, #1
 800e546:	4623      	mov	r3, r4
 800e548:	42ab      	cmp	r3, r5
 800e54a:	d30a      	bcc.n	800e562 <__exponent+0x5e>
 800e54c:	f10d 0309 	add.w	r3, sp, #9
 800e550:	1a9b      	subs	r3, r3, r2
 800e552:	42ac      	cmp	r4, r5
 800e554:	bf88      	it	hi
 800e556:	2300      	movhi	r3, #0
 800e558:	3302      	adds	r3, #2
 800e55a:	4403      	add	r3, r0
 800e55c:	1a18      	subs	r0, r3, r0
 800e55e:	b003      	add	sp, #12
 800e560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e562:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e566:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e56a:	e7ed      	b.n	800e548 <__exponent+0x44>
 800e56c:	2330      	movs	r3, #48	@ 0x30
 800e56e:	3130      	adds	r1, #48	@ 0x30
 800e570:	7083      	strb	r3, [r0, #2]
 800e572:	70c1      	strb	r1, [r0, #3]
 800e574:	1d03      	adds	r3, r0, #4
 800e576:	e7f1      	b.n	800e55c <__exponent+0x58>

0800e578 <_printf_float>:
 800e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57c:	b08d      	sub	sp, #52	@ 0x34
 800e57e:	460c      	mov	r4, r1
 800e580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e584:	4616      	mov	r6, r2
 800e586:	461f      	mov	r7, r3
 800e588:	4605      	mov	r5, r0
 800e58a:	f000 fe51 	bl	800f230 <_localeconv_r>
 800e58e:	6803      	ldr	r3, [r0, #0]
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f1 fe94 	bl	80002c0 <strlen>
 800e598:	2300      	movs	r3, #0
 800e59a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e59c:	f8d8 3000 	ldr.w	r3, [r8]
 800e5a0:	9005      	str	r0, [sp, #20]
 800e5a2:	3307      	adds	r3, #7
 800e5a4:	f023 0307 	bic.w	r3, r3, #7
 800e5a8:	f103 0208 	add.w	r2, r3, #8
 800e5ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e5b0:	f8d4 b000 	ldr.w	fp, [r4]
 800e5b4:	f8c8 2000 	str.w	r2, [r8]
 800e5b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e5c0:	9307      	str	r3, [sp, #28]
 800e5c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5ce:	4b9c      	ldr	r3, [pc, #624]	@ (800e840 <_printf_float+0x2c8>)
 800e5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d4:	f7f2 fad2 	bl	8000b7c <__aeabi_dcmpun>
 800e5d8:	bb70      	cbnz	r0, 800e638 <_printf_float+0xc0>
 800e5da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5de:	4b98      	ldr	r3, [pc, #608]	@ (800e840 <_printf_float+0x2c8>)
 800e5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e4:	f7f2 faac 	bl	8000b40 <__aeabi_dcmple>
 800e5e8:	bb30      	cbnz	r0, 800e638 <_printf_float+0xc0>
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	f7f2 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 800e5f6:	b110      	cbz	r0, 800e5fe <_printf_float+0x86>
 800e5f8:	232d      	movs	r3, #45	@ 0x2d
 800e5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5fe:	4a91      	ldr	r2, [pc, #580]	@ (800e844 <_printf_float+0x2cc>)
 800e600:	4b91      	ldr	r3, [pc, #580]	@ (800e848 <_printf_float+0x2d0>)
 800e602:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e606:	bf8c      	ite	hi
 800e608:	4690      	movhi	r8, r2
 800e60a:	4698      	movls	r8, r3
 800e60c:	2303      	movs	r3, #3
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	f02b 0304 	bic.w	r3, fp, #4
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	f04f 0900 	mov.w	r9, #0
 800e61a:	9700      	str	r7, [sp, #0]
 800e61c:	4633      	mov	r3, r6
 800e61e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e620:	4621      	mov	r1, r4
 800e622:	4628      	mov	r0, r5
 800e624:	f000 f9d2 	bl	800e9cc <_printf_common>
 800e628:	3001      	adds	r0, #1
 800e62a:	f040 808d 	bne.w	800e748 <_printf_float+0x1d0>
 800e62e:	f04f 30ff 	mov.w	r0, #4294967295
 800e632:	b00d      	add	sp, #52	@ 0x34
 800e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e638:	4642      	mov	r2, r8
 800e63a:	464b      	mov	r3, r9
 800e63c:	4640      	mov	r0, r8
 800e63e:	4649      	mov	r1, r9
 800e640:	f7f2 fa9c 	bl	8000b7c <__aeabi_dcmpun>
 800e644:	b140      	cbz	r0, 800e658 <_printf_float+0xe0>
 800e646:	464b      	mov	r3, r9
 800e648:	2b00      	cmp	r3, #0
 800e64a:	bfbc      	itt	lt
 800e64c:	232d      	movlt	r3, #45	@ 0x2d
 800e64e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e652:	4a7e      	ldr	r2, [pc, #504]	@ (800e84c <_printf_float+0x2d4>)
 800e654:	4b7e      	ldr	r3, [pc, #504]	@ (800e850 <_printf_float+0x2d8>)
 800e656:	e7d4      	b.n	800e602 <_printf_float+0x8a>
 800e658:	6863      	ldr	r3, [r4, #4]
 800e65a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e65e:	9206      	str	r2, [sp, #24]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	d13b      	bne.n	800e6dc <_printf_float+0x164>
 800e664:	2306      	movs	r3, #6
 800e666:	6063      	str	r3, [r4, #4]
 800e668:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e66c:	2300      	movs	r3, #0
 800e66e:	6022      	str	r2, [r4, #0]
 800e670:	9303      	str	r3, [sp, #12]
 800e672:	ab0a      	add	r3, sp, #40	@ 0x28
 800e674:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e678:	ab09      	add	r3, sp, #36	@ 0x24
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	6861      	ldr	r1, [r4, #4]
 800e67e:	ec49 8b10 	vmov	d0, r8, r9
 800e682:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e686:	4628      	mov	r0, r5
 800e688:	f7ff fed7 	bl	800e43a <__cvt>
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e690:	2b47      	cmp	r3, #71	@ 0x47
 800e692:	4680      	mov	r8, r0
 800e694:	d129      	bne.n	800e6ea <_printf_float+0x172>
 800e696:	1cc8      	adds	r0, r1, #3
 800e698:	db02      	blt.n	800e6a0 <_printf_float+0x128>
 800e69a:	6863      	ldr	r3, [r4, #4]
 800e69c:	4299      	cmp	r1, r3
 800e69e:	dd41      	ble.n	800e724 <_printf_float+0x1ac>
 800e6a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e6a4:	fa5f fa8a 	uxtb.w	sl, sl
 800e6a8:	3901      	subs	r1, #1
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e6b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e6b2:	f7ff ff27 	bl	800e504 <__exponent>
 800e6b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e6b8:	1813      	adds	r3, r2, r0
 800e6ba:	2a01      	cmp	r2, #1
 800e6bc:	4681      	mov	r9, r0
 800e6be:	6123      	str	r3, [r4, #16]
 800e6c0:	dc02      	bgt.n	800e6c8 <_printf_float+0x150>
 800e6c2:	6822      	ldr	r2, [r4, #0]
 800e6c4:	07d2      	lsls	r2, r2, #31
 800e6c6:	d501      	bpl.n	800e6cc <_printf_float+0x154>
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	6123      	str	r3, [r4, #16]
 800e6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d0a2      	beq.n	800e61a <_printf_float+0xa2>
 800e6d4:	232d      	movs	r3, #45	@ 0x2d
 800e6d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6da:	e79e      	b.n	800e61a <_printf_float+0xa2>
 800e6dc:	9a06      	ldr	r2, [sp, #24]
 800e6de:	2a47      	cmp	r2, #71	@ 0x47
 800e6e0:	d1c2      	bne.n	800e668 <_printf_float+0xf0>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1c0      	bne.n	800e668 <_printf_float+0xf0>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e7bd      	b.n	800e666 <_printf_float+0xee>
 800e6ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e6ee:	d9db      	bls.n	800e6a8 <_printf_float+0x130>
 800e6f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e6f4:	d118      	bne.n	800e728 <_printf_float+0x1b0>
 800e6f6:	2900      	cmp	r1, #0
 800e6f8:	6863      	ldr	r3, [r4, #4]
 800e6fa:	dd0b      	ble.n	800e714 <_printf_float+0x19c>
 800e6fc:	6121      	str	r1, [r4, #16]
 800e6fe:	b913      	cbnz	r3, 800e706 <_printf_float+0x18e>
 800e700:	6822      	ldr	r2, [r4, #0]
 800e702:	07d0      	lsls	r0, r2, #31
 800e704:	d502      	bpl.n	800e70c <_printf_float+0x194>
 800e706:	3301      	adds	r3, #1
 800e708:	440b      	add	r3, r1
 800e70a:	6123      	str	r3, [r4, #16]
 800e70c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e70e:	f04f 0900 	mov.w	r9, #0
 800e712:	e7db      	b.n	800e6cc <_printf_float+0x154>
 800e714:	b913      	cbnz	r3, 800e71c <_printf_float+0x1a4>
 800e716:	6822      	ldr	r2, [r4, #0]
 800e718:	07d2      	lsls	r2, r2, #31
 800e71a:	d501      	bpl.n	800e720 <_printf_float+0x1a8>
 800e71c:	3302      	adds	r3, #2
 800e71e:	e7f4      	b.n	800e70a <_printf_float+0x192>
 800e720:	2301      	movs	r3, #1
 800e722:	e7f2      	b.n	800e70a <_printf_float+0x192>
 800e724:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e72a:	4299      	cmp	r1, r3
 800e72c:	db05      	blt.n	800e73a <_printf_float+0x1c2>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	6121      	str	r1, [r4, #16]
 800e732:	07d8      	lsls	r0, r3, #31
 800e734:	d5ea      	bpl.n	800e70c <_printf_float+0x194>
 800e736:	1c4b      	adds	r3, r1, #1
 800e738:	e7e7      	b.n	800e70a <_printf_float+0x192>
 800e73a:	2900      	cmp	r1, #0
 800e73c:	bfd4      	ite	le
 800e73e:	f1c1 0202 	rsble	r2, r1, #2
 800e742:	2201      	movgt	r2, #1
 800e744:	4413      	add	r3, r2
 800e746:	e7e0      	b.n	800e70a <_printf_float+0x192>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	055a      	lsls	r2, r3, #21
 800e74c:	d407      	bmi.n	800e75e <_printf_float+0x1e6>
 800e74e:	6923      	ldr	r3, [r4, #16]
 800e750:	4642      	mov	r2, r8
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	d12b      	bne.n	800e7b4 <_printf_float+0x23c>
 800e75c:	e767      	b.n	800e62e <_printf_float+0xb6>
 800e75e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e762:	f240 80dd 	bls.w	800e920 <_printf_float+0x3a8>
 800e766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e76a:	2200      	movs	r2, #0
 800e76c:	2300      	movs	r3, #0
 800e76e:	f7f2 f9d3 	bl	8000b18 <__aeabi_dcmpeq>
 800e772:	2800      	cmp	r0, #0
 800e774:	d033      	beq.n	800e7de <_printf_float+0x266>
 800e776:	4a37      	ldr	r2, [pc, #220]	@ (800e854 <_printf_float+0x2dc>)
 800e778:	2301      	movs	r3, #1
 800e77a:	4631      	mov	r1, r6
 800e77c:	4628      	mov	r0, r5
 800e77e:	47b8      	blx	r7
 800e780:	3001      	adds	r0, #1
 800e782:	f43f af54 	beq.w	800e62e <_printf_float+0xb6>
 800e786:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e78a:	4543      	cmp	r3, r8
 800e78c:	db02      	blt.n	800e794 <_printf_float+0x21c>
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	07d8      	lsls	r0, r3, #31
 800e792:	d50f      	bpl.n	800e7b4 <_printf_float+0x23c>
 800e794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e798:	4631      	mov	r1, r6
 800e79a:	4628      	mov	r0, r5
 800e79c:	47b8      	blx	r7
 800e79e:	3001      	adds	r0, #1
 800e7a0:	f43f af45 	beq.w	800e62e <_printf_float+0xb6>
 800e7a4:	f04f 0900 	mov.w	r9, #0
 800e7a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7ac:	f104 0a1a 	add.w	sl, r4, #26
 800e7b0:	45c8      	cmp	r8, r9
 800e7b2:	dc09      	bgt.n	800e7c8 <_printf_float+0x250>
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	079b      	lsls	r3, r3, #30
 800e7b8:	f100 8103 	bmi.w	800e9c2 <_printf_float+0x44a>
 800e7bc:	68e0      	ldr	r0, [r4, #12]
 800e7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7c0:	4298      	cmp	r0, r3
 800e7c2:	bfb8      	it	lt
 800e7c4:	4618      	movlt	r0, r3
 800e7c6:	e734      	b.n	800e632 <_printf_float+0xba>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	4652      	mov	r2, sl
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	47b8      	blx	r7
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	f43f af2b 	beq.w	800e62e <_printf_float+0xb6>
 800e7d8:	f109 0901 	add.w	r9, r9, #1
 800e7dc:	e7e8      	b.n	800e7b0 <_printf_float+0x238>
 800e7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	dc39      	bgt.n	800e858 <_printf_float+0x2e0>
 800e7e4:	4a1b      	ldr	r2, [pc, #108]	@ (800e854 <_printf_float+0x2dc>)
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	47b8      	blx	r7
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	f43f af1d 	beq.w	800e62e <_printf_float+0xb6>
 800e7f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7f8:	ea59 0303 	orrs.w	r3, r9, r3
 800e7fc:	d102      	bne.n	800e804 <_printf_float+0x28c>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	07d9      	lsls	r1, r3, #31
 800e802:	d5d7      	bpl.n	800e7b4 <_printf_float+0x23c>
 800e804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e808:	4631      	mov	r1, r6
 800e80a:	4628      	mov	r0, r5
 800e80c:	47b8      	blx	r7
 800e80e:	3001      	adds	r0, #1
 800e810:	f43f af0d 	beq.w	800e62e <_printf_float+0xb6>
 800e814:	f04f 0a00 	mov.w	sl, #0
 800e818:	f104 0b1a 	add.w	fp, r4, #26
 800e81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e81e:	425b      	negs	r3, r3
 800e820:	4553      	cmp	r3, sl
 800e822:	dc01      	bgt.n	800e828 <_printf_float+0x2b0>
 800e824:	464b      	mov	r3, r9
 800e826:	e793      	b.n	800e750 <_printf_float+0x1d8>
 800e828:	2301      	movs	r3, #1
 800e82a:	465a      	mov	r2, fp
 800e82c:	4631      	mov	r1, r6
 800e82e:	4628      	mov	r0, r5
 800e830:	47b8      	blx	r7
 800e832:	3001      	adds	r0, #1
 800e834:	f43f aefb 	beq.w	800e62e <_printf_float+0xb6>
 800e838:	f10a 0a01 	add.w	sl, sl, #1
 800e83c:	e7ee      	b.n	800e81c <_printf_float+0x2a4>
 800e83e:	bf00      	nop
 800e840:	7fefffff 	.word	0x7fefffff
 800e844:	0801288c 	.word	0x0801288c
 800e848:	08012888 	.word	0x08012888
 800e84c:	08012894 	.word	0x08012894
 800e850:	08012890 	.word	0x08012890
 800e854:	08012898 	.word	0x08012898
 800e858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e85a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e85e:	4553      	cmp	r3, sl
 800e860:	bfa8      	it	ge
 800e862:	4653      	movge	r3, sl
 800e864:	2b00      	cmp	r3, #0
 800e866:	4699      	mov	r9, r3
 800e868:	dc36      	bgt.n	800e8d8 <_printf_float+0x360>
 800e86a:	f04f 0b00 	mov.w	fp, #0
 800e86e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e872:	f104 021a 	add.w	r2, r4, #26
 800e876:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e878:	9306      	str	r3, [sp, #24]
 800e87a:	eba3 0309 	sub.w	r3, r3, r9
 800e87e:	455b      	cmp	r3, fp
 800e880:	dc31      	bgt.n	800e8e6 <_printf_float+0x36e>
 800e882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e884:	459a      	cmp	sl, r3
 800e886:	dc3a      	bgt.n	800e8fe <_printf_float+0x386>
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	07da      	lsls	r2, r3, #31
 800e88c:	d437      	bmi.n	800e8fe <_printf_float+0x386>
 800e88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e890:	ebaa 0903 	sub.w	r9, sl, r3
 800e894:	9b06      	ldr	r3, [sp, #24]
 800e896:	ebaa 0303 	sub.w	r3, sl, r3
 800e89a:	4599      	cmp	r9, r3
 800e89c:	bfa8      	it	ge
 800e89e:	4699      	movge	r9, r3
 800e8a0:	f1b9 0f00 	cmp.w	r9, #0
 800e8a4:	dc33      	bgt.n	800e90e <_printf_float+0x396>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8ae:	f104 0b1a 	add.w	fp, r4, #26
 800e8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b4:	ebaa 0303 	sub.w	r3, sl, r3
 800e8b8:	eba3 0309 	sub.w	r3, r3, r9
 800e8bc:	4543      	cmp	r3, r8
 800e8be:	f77f af79 	ble.w	800e7b4 <_printf_float+0x23c>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	465a      	mov	r2, fp
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f43f aeae 	beq.w	800e62e <_printf_float+0xb6>
 800e8d2:	f108 0801 	add.w	r8, r8, #1
 800e8d6:	e7ec      	b.n	800e8b2 <_printf_float+0x33a>
 800e8d8:	4642      	mov	r2, r8
 800e8da:	4631      	mov	r1, r6
 800e8dc:	4628      	mov	r0, r5
 800e8de:	47b8      	blx	r7
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d1c2      	bne.n	800e86a <_printf_float+0x2f2>
 800e8e4:	e6a3      	b.n	800e62e <_printf_float+0xb6>
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	9206      	str	r2, [sp, #24]
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	f43f ae9c 	beq.w	800e62e <_printf_float+0xb6>
 800e8f6:	9a06      	ldr	r2, [sp, #24]
 800e8f8:	f10b 0b01 	add.w	fp, fp, #1
 800e8fc:	e7bb      	b.n	800e876 <_printf_float+0x2fe>
 800e8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e902:	4631      	mov	r1, r6
 800e904:	4628      	mov	r0, r5
 800e906:	47b8      	blx	r7
 800e908:	3001      	adds	r0, #1
 800e90a:	d1c0      	bne.n	800e88e <_printf_float+0x316>
 800e90c:	e68f      	b.n	800e62e <_printf_float+0xb6>
 800e90e:	9a06      	ldr	r2, [sp, #24]
 800e910:	464b      	mov	r3, r9
 800e912:	4442      	add	r2, r8
 800e914:	4631      	mov	r1, r6
 800e916:	4628      	mov	r0, r5
 800e918:	47b8      	blx	r7
 800e91a:	3001      	adds	r0, #1
 800e91c:	d1c3      	bne.n	800e8a6 <_printf_float+0x32e>
 800e91e:	e686      	b.n	800e62e <_printf_float+0xb6>
 800e920:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e924:	f1ba 0f01 	cmp.w	sl, #1
 800e928:	dc01      	bgt.n	800e92e <_printf_float+0x3b6>
 800e92a:	07db      	lsls	r3, r3, #31
 800e92c:	d536      	bpl.n	800e99c <_printf_float+0x424>
 800e92e:	2301      	movs	r3, #1
 800e930:	4642      	mov	r2, r8
 800e932:	4631      	mov	r1, r6
 800e934:	4628      	mov	r0, r5
 800e936:	47b8      	blx	r7
 800e938:	3001      	adds	r0, #1
 800e93a:	f43f ae78 	beq.w	800e62e <_printf_float+0xb6>
 800e93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e942:	4631      	mov	r1, r6
 800e944:	4628      	mov	r0, r5
 800e946:	47b8      	blx	r7
 800e948:	3001      	adds	r0, #1
 800e94a:	f43f ae70 	beq.w	800e62e <_printf_float+0xb6>
 800e94e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e952:	2200      	movs	r2, #0
 800e954:	2300      	movs	r3, #0
 800e956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e95a:	f7f2 f8dd 	bl	8000b18 <__aeabi_dcmpeq>
 800e95e:	b9c0      	cbnz	r0, 800e992 <_printf_float+0x41a>
 800e960:	4653      	mov	r3, sl
 800e962:	f108 0201 	add.w	r2, r8, #1
 800e966:	4631      	mov	r1, r6
 800e968:	4628      	mov	r0, r5
 800e96a:	47b8      	blx	r7
 800e96c:	3001      	adds	r0, #1
 800e96e:	d10c      	bne.n	800e98a <_printf_float+0x412>
 800e970:	e65d      	b.n	800e62e <_printf_float+0xb6>
 800e972:	2301      	movs	r3, #1
 800e974:	465a      	mov	r2, fp
 800e976:	4631      	mov	r1, r6
 800e978:	4628      	mov	r0, r5
 800e97a:	47b8      	blx	r7
 800e97c:	3001      	adds	r0, #1
 800e97e:	f43f ae56 	beq.w	800e62e <_printf_float+0xb6>
 800e982:	f108 0801 	add.w	r8, r8, #1
 800e986:	45d0      	cmp	r8, sl
 800e988:	dbf3      	blt.n	800e972 <_printf_float+0x3fa>
 800e98a:	464b      	mov	r3, r9
 800e98c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e990:	e6df      	b.n	800e752 <_printf_float+0x1da>
 800e992:	f04f 0800 	mov.w	r8, #0
 800e996:	f104 0b1a 	add.w	fp, r4, #26
 800e99a:	e7f4      	b.n	800e986 <_printf_float+0x40e>
 800e99c:	2301      	movs	r3, #1
 800e99e:	4642      	mov	r2, r8
 800e9a0:	e7e1      	b.n	800e966 <_printf_float+0x3ee>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	464a      	mov	r2, r9
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	47b8      	blx	r7
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	f43f ae3e 	beq.w	800e62e <_printf_float+0xb6>
 800e9b2:	f108 0801 	add.w	r8, r8, #1
 800e9b6:	68e3      	ldr	r3, [r4, #12]
 800e9b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9ba:	1a5b      	subs	r3, r3, r1
 800e9bc:	4543      	cmp	r3, r8
 800e9be:	dcf0      	bgt.n	800e9a2 <_printf_float+0x42a>
 800e9c0:	e6fc      	b.n	800e7bc <_printf_float+0x244>
 800e9c2:	f04f 0800 	mov.w	r8, #0
 800e9c6:	f104 0919 	add.w	r9, r4, #25
 800e9ca:	e7f4      	b.n	800e9b6 <_printf_float+0x43e>

0800e9cc <_printf_common>:
 800e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	4698      	mov	r8, r3
 800e9d4:	688a      	ldr	r2, [r1, #8]
 800e9d6:	690b      	ldr	r3, [r1, #16]
 800e9d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	bfb8      	it	lt
 800e9e0:	4613      	movlt	r3, r2
 800e9e2:	6033      	str	r3, [r6, #0]
 800e9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	b10a      	cbz	r2, 800e9f2 <_printf_common+0x26>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	6033      	str	r3, [r6, #0]
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	0699      	lsls	r1, r3, #26
 800e9f6:	bf42      	ittt	mi
 800e9f8:	6833      	ldrmi	r3, [r6, #0]
 800e9fa:	3302      	addmi	r3, #2
 800e9fc:	6033      	strmi	r3, [r6, #0]
 800e9fe:	6825      	ldr	r5, [r4, #0]
 800ea00:	f015 0506 	ands.w	r5, r5, #6
 800ea04:	d106      	bne.n	800ea14 <_printf_common+0x48>
 800ea06:	f104 0a19 	add.w	sl, r4, #25
 800ea0a:	68e3      	ldr	r3, [r4, #12]
 800ea0c:	6832      	ldr	r2, [r6, #0]
 800ea0e:	1a9b      	subs	r3, r3, r2
 800ea10:	42ab      	cmp	r3, r5
 800ea12:	dc26      	bgt.n	800ea62 <_printf_common+0x96>
 800ea14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea18:	6822      	ldr	r2, [r4, #0]
 800ea1a:	3b00      	subs	r3, #0
 800ea1c:	bf18      	it	ne
 800ea1e:	2301      	movne	r3, #1
 800ea20:	0692      	lsls	r2, r2, #26
 800ea22:	d42b      	bmi.n	800ea7c <_printf_common+0xb0>
 800ea24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea28:	4641      	mov	r1, r8
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c8      	blx	r9
 800ea2e:	3001      	adds	r0, #1
 800ea30:	d01e      	beq.n	800ea70 <_printf_common+0xa4>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	6922      	ldr	r2, [r4, #16]
 800ea36:	f003 0306 	and.w	r3, r3, #6
 800ea3a:	2b04      	cmp	r3, #4
 800ea3c:	bf02      	ittt	eq
 800ea3e:	68e5      	ldreq	r5, [r4, #12]
 800ea40:	6833      	ldreq	r3, [r6, #0]
 800ea42:	1aed      	subeq	r5, r5, r3
 800ea44:	68a3      	ldr	r3, [r4, #8]
 800ea46:	bf0c      	ite	eq
 800ea48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea4c:	2500      	movne	r5, #0
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	bfc4      	itt	gt
 800ea52:	1a9b      	subgt	r3, r3, r2
 800ea54:	18ed      	addgt	r5, r5, r3
 800ea56:	2600      	movs	r6, #0
 800ea58:	341a      	adds	r4, #26
 800ea5a:	42b5      	cmp	r5, r6
 800ea5c:	d11a      	bne.n	800ea94 <_printf_common+0xc8>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e008      	b.n	800ea74 <_printf_common+0xa8>
 800ea62:	2301      	movs	r3, #1
 800ea64:	4652      	mov	r2, sl
 800ea66:	4641      	mov	r1, r8
 800ea68:	4638      	mov	r0, r7
 800ea6a:	47c8      	blx	r9
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d103      	bne.n	800ea78 <_printf_common+0xac>
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	3501      	adds	r5, #1
 800ea7a:	e7c6      	b.n	800ea0a <_printf_common+0x3e>
 800ea7c:	18e1      	adds	r1, r4, r3
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	2030      	movs	r0, #48	@ 0x30
 800ea82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea86:	4422      	add	r2, r4
 800ea88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea90:	3302      	adds	r3, #2
 800ea92:	e7c7      	b.n	800ea24 <_printf_common+0x58>
 800ea94:	2301      	movs	r3, #1
 800ea96:	4622      	mov	r2, r4
 800ea98:	4641      	mov	r1, r8
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c8      	blx	r9
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d0e6      	beq.n	800ea70 <_printf_common+0xa4>
 800eaa2:	3601      	adds	r6, #1
 800eaa4:	e7d9      	b.n	800ea5a <_printf_common+0x8e>
	...

0800eaa8 <_printf_i>:
 800eaa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaac:	7e0f      	ldrb	r7, [r1, #24]
 800eaae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eab0:	2f78      	cmp	r7, #120	@ 0x78
 800eab2:	4691      	mov	r9, r2
 800eab4:	4680      	mov	r8, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	469a      	mov	sl, r3
 800eaba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eabe:	d807      	bhi.n	800ead0 <_printf_i+0x28>
 800eac0:	2f62      	cmp	r7, #98	@ 0x62
 800eac2:	d80a      	bhi.n	800eada <_printf_i+0x32>
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	f000 80d1 	beq.w	800ec6c <_printf_i+0x1c4>
 800eaca:	2f58      	cmp	r7, #88	@ 0x58
 800eacc:	f000 80b8 	beq.w	800ec40 <_printf_i+0x198>
 800ead0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ead4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ead8:	e03a      	b.n	800eb50 <_printf_i+0xa8>
 800eada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eade:	2b15      	cmp	r3, #21
 800eae0:	d8f6      	bhi.n	800ead0 <_printf_i+0x28>
 800eae2:	a101      	add	r1, pc, #4	@ (adr r1, 800eae8 <_printf_i+0x40>)
 800eae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eae8:	0800eb41 	.word	0x0800eb41
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800ead1 	.word	0x0800ead1
 800eaf4:	0800ead1 	.word	0x0800ead1
 800eaf8:	0800ead1 	.word	0x0800ead1
 800eafc:	0800ead1 	.word	0x0800ead1
 800eb00:	0800eb55 	.word	0x0800eb55
 800eb04:	0800ead1 	.word	0x0800ead1
 800eb08:	0800ead1 	.word	0x0800ead1
 800eb0c:	0800ead1 	.word	0x0800ead1
 800eb10:	0800ead1 	.word	0x0800ead1
 800eb14:	0800ec53 	.word	0x0800ec53
 800eb18:	0800eb7f 	.word	0x0800eb7f
 800eb1c:	0800ec0d 	.word	0x0800ec0d
 800eb20:	0800ead1 	.word	0x0800ead1
 800eb24:	0800ead1 	.word	0x0800ead1
 800eb28:	0800ec75 	.word	0x0800ec75
 800eb2c:	0800ead1 	.word	0x0800ead1
 800eb30:	0800eb7f 	.word	0x0800eb7f
 800eb34:	0800ead1 	.word	0x0800ead1
 800eb38:	0800ead1 	.word	0x0800ead1
 800eb3c:	0800ec15 	.word	0x0800ec15
 800eb40:	6833      	ldr	r3, [r6, #0]
 800eb42:	1d1a      	adds	r2, r3, #4
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6032      	str	r2, [r6, #0]
 800eb48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb50:	2301      	movs	r3, #1
 800eb52:	e09c      	b.n	800ec8e <_printf_i+0x1e6>
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	6820      	ldr	r0, [r4, #0]
 800eb58:	1d19      	adds	r1, r3, #4
 800eb5a:	6031      	str	r1, [r6, #0]
 800eb5c:	0606      	lsls	r6, r0, #24
 800eb5e:	d501      	bpl.n	800eb64 <_printf_i+0xbc>
 800eb60:	681d      	ldr	r5, [r3, #0]
 800eb62:	e003      	b.n	800eb6c <_printf_i+0xc4>
 800eb64:	0645      	lsls	r5, r0, #25
 800eb66:	d5fb      	bpl.n	800eb60 <_printf_i+0xb8>
 800eb68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	da03      	bge.n	800eb78 <_printf_i+0xd0>
 800eb70:	232d      	movs	r3, #45	@ 0x2d
 800eb72:	426d      	negs	r5, r5
 800eb74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb78:	4858      	ldr	r0, [pc, #352]	@ (800ecdc <_printf_i+0x234>)
 800eb7a:	230a      	movs	r3, #10
 800eb7c:	e011      	b.n	800eba2 <_printf_i+0xfa>
 800eb7e:	6821      	ldr	r1, [r4, #0]
 800eb80:	6833      	ldr	r3, [r6, #0]
 800eb82:	0608      	lsls	r0, r1, #24
 800eb84:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb88:	d402      	bmi.n	800eb90 <_printf_i+0xe8>
 800eb8a:	0649      	lsls	r1, r1, #25
 800eb8c:	bf48      	it	mi
 800eb8e:	b2ad      	uxthmi	r5, r5
 800eb90:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb92:	4852      	ldr	r0, [pc, #328]	@ (800ecdc <_printf_i+0x234>)
 800eb94:	6033      	str	r3, [r6, #0]
 800eb96:	bf14      	ite	ne
 800eb98:	230a      	movne	r3, #10
 800eb9a:	2308      	moveq	r3, #8
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eba2:	6866      	ldr	r6, [r4, #4]
 800eba4:	60a6      	str	r6, [r4, #8]
 800eba6:	2e00      	cmp	r6, #0
 800eba8:	db05      	blt.n	800ebb6 <_printf_i+0x10e>
 800ebaa:	6821      	ldr	r1, [r4, #0]
 800ebac:	432e      	orrs	r6, r5
 800ebae:	f021 0104 	bic.w	r1, r1, #4
 800ebb2:	6021      	str	r1, [r4, #0]
 800ebb4:	d04b      	beq.n	800ec4e <_printf_i+0x1a6>
 800ebb6:	4616      	mov	r6, r2
 800ebb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebbc:	fb03 5711 	mls	r7, r3, r1, r5
 800ebc0:	5dc7      	ldrb	r7, [r0, r7]
 800ebc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebc6:	462f      	mov	r7, r5
 800ebc8:	42bb      	cmp	r3, r7
 800ebca:	460d      	mov	r5, r1
 800ebcc:	d9f4      	bls.n	800ebb8 <_printf_i+0x110>
 800ebce:	2b08      	cmp	r3, #8
 800ebd0:	d10b      	bne.n	800ebea <_printf_i+0x142>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	07df      	lsls	r7, r3, #31
 800ebd6:	d508      	bpl.n	800ebea <_printf_i+0x142>
 800ebd8:	6923      	ldr	r3, [r4, #16]
 800ebda:	6861      	ldr	r1, [r4, #4]
 800ebdc:	4299      	cmp	r1, r3
 800ebde:	bfde      	ittt	le
 800ebe0:	2330      	movle	r3, #48	@ 0x30
 800ebe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebea:	1b92      	subs	r2, r2, r6
 800ebec:	6122      	str	r2, [r4, #16]
 800ebee:	f8cd a000 	str.w	sl, [sp]
 800ebf2:	464b      	mov	r3, r9
 800ebf4:	aa03      	add	r2, sp, #12
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	f7ff fee7 	bl	800e9cc <_printf_common>
 800ebfe:	3001      	adds	r0, #1
 800ec00:	d14a      	bne.n	800ec98 <_printf_i+0x1f0>
 800ec02:	f04f 30ff 	mov.w	r0, #4294967295
 800ec06:	b004      	add	sp, #16
 800ec08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	f043 0320 	orr.w	r3, r3, #32
 800ec12:	6023      	str	r3, [r4, #0]
 800ec14:	4832      	ldr	r0, [pc, #200]	@ (800ece0 <_printf_i+0x238>)
 800ec16:	2778      	movs	r7, #120	@ 0x78
 800ec18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	6831      	ldr	r1, [r6, #0]
 800ec20:	061f      	lsls	r7, r3, #24
 800ec22:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec26:	d402      	bmi.n	800ec2e <_printf_i+0x186>
 800ec28:	065f      	lsls	r7, r3, #25
 800ec2a:	bf48      	it	mi
 800ec2c:	b2ad      	uxthmi	r5, r5
 800ec2e:	6031      	str	r1, [r6, #0]
 800ec30:	07d9      	lsls	r1, r3, #31
 800ec32:	bf44      	itt	mi
 800ec34:	f043 0320 	orrmi.w	r3, r3, #32
 800ec38:	6023      	strmi	r3, [r4, #0]
 800ec3a:	b11d      	cbz	r5, 800ec44 <_printf_i+0x19c>
 800ec3c:	2310      	movs	r3, #16
 800ec3e:	e7ad      	b.n	800eb9c <_printf_i+0xf4>
 800ec40:	4826      	ldr	r0, [pc, #152]	@ (800ecdc <_printf_i+0x234>)
 800ec42:	e7e9      	b.n	800ec18 <_printf_i+0x170>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	f023 0320 	bic.w	r3, r3, #32
 800ec4a:	6023      	str	r3, [r4, #0]
 800ec4c:	e7f6      	b.n	800ec3c <_printf_i+0x194>
 800ec4e:	4616      	mov	r6, r2
 800ec50:	e7bd      	b.n	800ebce <_printf_i+0x126>
 800ec52:	6833      	ldr	r3, [r6, #0]
 800ec54:	6825      	ldr	r5, [r4, #0]
 800ec56:	6961      	ldr	r1, [r4, #20]
 800ec58:	1d18      	adds	r0, r3, #4
 800ec5a:	6030      	str	r0, [r6, #0]
 800ec5c:	062e      	lsls	r6, r5, #24
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	d501      	bpl.n	800ec66 <_printf_i+0x1be>
 800ec62:	6019      	str	r1, [r3, #0]
 800ec64:	e002      	b.n	800ec6c <_printf_i+0x1c4>
 800ec66:	0668      	lsls	r0, r5, #25
 800ec68:	d5fb      	bpl.n	800ec62 <_printf_i+0x1ba>
 800ec6a:	8019      	strh	r1, [r3, #0]
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	6123      	str	r3, [r4, #16]
 800ec70:	4616      	mov	r6, r2
 800ec72:	e7bc      	b.n	800ebee <_printf_i+0x146>
 800ec74:	6833      	ldr	r3, [r6, #0]
 800ec76:	1d1a      	adds	r2, r3, #4
 800ec78:	6032      	str	r2, [r6, #0]
 800ec7a:	681e      	ldr	r6, [r3, #0]
 800ec7c:	6862      	ldr	r2, [r4, #4]
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7f1 facd 	bl	8000220 <memchr>
 800ec86:	b108      	cbz	r0, 800ec8c <_printf_i+0x1e4>
 800ec88:	1b80      	subs	r0, r0, r6
 800ec8a:	6060      	str	r0, [r4, #4]
 800ec8c:	6863      	ldr	r3, [r4, #4]
 800ec8e:	6123      	str	r3, [r4, #16]
 800ec90:	2300      	movs	r3, #0
 800ec92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec96:	e7aa      	b.n	800ebee <_printf_i+0x146>
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	4640      	mov	r0, r8
 800eca0:	47d0      	blx	sl
 800eca2:	3001      	adds	r0, #1
 800eca4:	d0ad      	beq.n	800ec02 <_printf_i+0x15a>
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	079b      	lsls	r3, r3, #30
 800ecaa:	d413      	bmi.n	800ecd4 <_printf_i+0x22c>
 800ecac:	68e0      	ldr	r0, [r4, #12]
 800ecae:	9b03      	ldr	r3, [sp, #12]
 800ecb0:	4298      	cmp	r0, r3
 800ecb2:	bfb8      	it	lt
 800ecb4:	4618      	movlt	r0, r3
 800ecb6:	e7a6      	b.n	800ec06 <_printf_i+0x15e>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	4632      	mov	r2, r6
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	47d0      	blx	sl
 800ecc2:	3001      	adds	r0, #1
 800ecc4:	d09d      	beq.n	800ec02 <_printf_i+0x15a>
 800ecc6:	3501      	adds	r5, #1
 800ecc8:	68e3      	ldr	r3, [r4, #12]
 800ecca:	9903      	ldr	r1, [sp, #12]
 800eccc:	1a5b      	subs	r3, r3, r1
 800ecce:	42ab      	cmp	r3, r5
 800ecd0:	dcf2      	bgt.n	800ecb8 <_printf_i+0x210>
 800ecd2:	e7eb      	b.n	800ecac <_printf_i+0x204>
 800ecd4:	2500      	movs	r5, #0
 800ecd6:	f104 0619 	add.w	r6, r4, #25
 800ecda:	e7f5      	b.n	800ecc8 <_printf_i+0x220>
 800ecdc:	0801289a 	.word	0x0801289a
 800ece0:	080128ab 	.word	0x080128ab

0800ece4 <std>:
 800ece4:	2300      	movs	r3, #0
 800ece6:	b510      	push	{r4, lr}
 800ece8:	4604      	mov	r4, r0
 800ecea:	e9c0 3300 	strd	r3, r3, [r0]
 800ecee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecf2:	6083      	str	r3, [r0, #8]
 800ecf4:	8181      	strh	r1, [r0, #12]
 800ecf6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecf8:	81c2      	strh	r2, [r0, #14]
 800ecfa:	6183      	str	r3, [r0, #24]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	2208      	movs	r2, #8
 800ed00:	305c      	adds	r0, #92	@ 0x5c
 800ed02:	f000 fa8d 	bl	800f220 <memset>
 800ed06:	4b0d      	ldr	r3, [pc, #52]	@ (800ed3c <std+0x58>)
 800ed08:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed40 <std+0x5c>)
 800ed0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed44 <std+0x60>)
 800ed10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed12:	4b0d      	ldr	r3, [pc, #52]	@ (800ed48 <std+0x64>)
 800ed14:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed16:	4b0d      	ldr	r3, [pc, #52]	@ (800ed4c <std+0x68>)
 800ed18:	6224      	str	r4, [r4, #32]
 800ed1a:	429c      	cmp	r4, r3
 800ed1c:	d006      	beq.n	800ed2c <std+0x48>
 800ed1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed22:	4294      	cmp	r4, r2
 800ed24:	d002      	beq.n	800ed2c <std+0x48>
 800ed26:	33d0      	adds	r3, #208	@ 0xd0
 800ed28:	429c      	cmp	r4, r3
 800ed2a:	d105      	bne.n	800ed38 <std+0x54>
 800ed2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f000 baf0 	b.w	800f318 <__retarget_lock_init_recursive>
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0800efc5 	.word	0x0800efc5
 800ed40:	0800efe7 	.word	0x0800efe7
 800ed44:	0800f01f 	.word	0x0800f01f
 800ed48:	0800f043 	.word	0x0800f043
 800ed4c:	20005438 	.word	0x20005438

0800ed50 <stdio_exit_handler>:
 800ed50:	4a02      	ldr	r2, [pc, #8]	@ (800ed5c <stdio_exit_handler+0xc>)
 800ed52:	4903      	ldr	r1, [pc, #12]	@ (800ed60 <stdio_exit_handler+0x10>)
 800ed54:	4803      	ldr	r0, [pc, #12]	@ (800ed64 <stdio_exit_handler+0x14>)
 800ed56:	f000 b869 	b.w	800ee2c <_fwalk_sglue>
 800ed5a:	bf00      	nop
 800ed5c:	20000108 	.word	0x20000108
 800ed60:	08010f21 	.word	0x08010f21
 800ed64:	20000118 	.word	0x20000118

0800ed68 <cleanup_stdio>:
 800ed68:	6841      	ldr	r1, [r0, #4]
 800ed6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ed9c <cleanup_stdio+0x34>)
 800ed6c:	4299      	cmp	r1, r3
 800ed6e:	b510      	push	{r4, lr}
 800ed70:	4604      	mov	r4, r0
 800ed72:	d001      	beq.n	800ed78 <cleanup_stdio+0x10>
 800ed74:	f002 f8d4 	bl	8010f20 <_fflush_r>
 800ed78:	68a1      	ldr	r1, [r4, #8]
 800ed7a:	4b09      	ldr	r3, [pc, #36]	@ (800eda0 <cleanup_stdio+0x38>)
 800ed7c:	4299      	cmp	r1, r3
 800ed7e:	d002      	beq.n	800ed86 <cleanup_stdio+0x1e>
 800ed80:	4620      	mov	r0, r4
 800ed82:	f002 f8cd 	bl	8010f20 <_fflush_r>
 800ed86:	68e1      	ldr	r1, [r4, #12]
 800ed88:	4b06      	ldr	r3, [pc, #24]	@ (800eda4 <cleanup_stdio+0x3c>)
 800ed8a:	4299      	cmp	r1, r3
 800ed8c:	d004      	beq.n	800ed98 <cleanup_stdio+0x30>
 800ed8e:	4620      	mov	r0, r4
 800ed90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed94:	f002 b8c4 	b.w	8010f20 <_fflush_r>
 800ed98:	bd10      	pop	{r4, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20005438 	.word	0x20005438
 800eda0:	200054a0 	.word	0x200054a0
 800eda4:	20005508 	.word	0x20005508

0800eda8 <global_stdio_init.part.0>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4b0b      	ldr	r3, [pc, #44]	@ (800edd8 <global_stdio_init.part.0+0x30>)
 800edac:	4c0b      	ldr	r4, [pc, #44]	@ (800eddc <global_stdio_init.part.0+0x34>)
 800edae:	4a0c      	ldr	r2, [pc, #48]	@ (800ede0 <global_stdio_init.part.0+0x38>)
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	4620      	mov	r0, r4
 800edb4:	2200      	movs	r2, #0
 800edb6:	2104      	movs	r1, #4
 800edb8:	f7ff ff94 	bl	800ece4 <std>
 800edbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edc0:	2201      	movs	r2, #1
 800edc2:	2109      	movs	r1, #9
 800edc4:	f7ff ff8e 	bl	800ece4 <std>
 800edc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800edcc:	2202      	movs	r2, #2
 800edce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd2:	2112      	movs	r1, #18
 800edd4:	f7ff bf86 	b.w	800ece4 <std>
 800edd8:	20005570 	.word	0x20005570
 800eddc:	20005438 	.word	0x20005438
 800ede0:	0800ed51 	.word	0x0800ed51

0800ede4 <__sfp_lock_acquire>:
 800ede4:	4801      	ldr	r0, [pc, #4]	@ (800edec <__sfp_lock_acquire+0x8>)
 800ede6:	f000 ba98 	b.w	800f31a <__retarget_lock_acquire_recursive>
 800edea:	bf00      	nop
 800edec:	20005579 	.word	0x20005579

0800edf0 <__sfp_lock_release>:
 800edf0:	4801      	ldr	r0, [pc, #4]	@ (800edf8 <__sfp_lock_release+0x8>)
 800edf2:	f000 ba93 	b.w	800f31c <__retarget_lock_release_recursive>
 800edf6:	bf00      	nop
 800edf8:	20005579 	.word	0x20005579

0800edfc <__sinit>:
 800edfc:	b510      	push	{r4, lr}
 800edfe:	4604      	mov	r4, r0
 800ee00:	f7ff fff0 	bl	800ede4 <__sfp_lock_acquire>
 800ee04:	6a23      	ldr	r3, [r4, #32]
 800ee06:	b11b      	cbz	r3, 800ee10 <__sinit+0x14>
 800ee08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0c:	f7ff bff0 	b.w	800edf0 <__sfp_lock_release>
 800ee10:	4b04      	ldr	r3, [pc, #16]	@ (800ee24 <__sinit+0x28>)
 800ee12:	6223      	str	r3, [r4, #32]
 800ee14:	4b04      	ldr	r3, [pc, #16]	@ (800ee28 <__sinit+0x2c>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1f5      	bne.n	800ee08 <__sinit+0xc>
 800ee1c:	f7ff ffc4 	bl	800eda8 <global_stdio_init.part.0>
 800ee20:	e7f2      	b.n	800ee08 <__sinit+0xc>
 800ee22:	bf00      	nop
 800ee24:	0800ed69 	.word	0x0800ed69
 800ee28:	20005570 	.word	0x20005570

0800ee2c <_fwalk_sglue>:
 800ee2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee30:	4607      	mov	r7, r0
 800ee32:	4688      	mov	r8, r1
 800ee34:	4614      	mov	r4, r2
 800ee36:	2600      	movs	r6, #0
 800ee38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee40:	d505      	bpl.n	800ee4e <_fwalk_sglue+0x22>
 800ee42:	6824      	ldr	r4, [r4, #0]
 800ee44:	2c00      	cmp	r4, #0
 800ee46:	d1f7      	bne.n	800ee38 <_fwalk_sglue+0xc>
 800ee48:	4630      	mov	r0, r6
 800ee4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee4e:	89ab      	ldrh	r3, [r5, #12]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d907      	bls.n	800ee64 <_fwalk_sglue+0x38>
 800ee54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	d003      	beq.n	800ee64 <_fwalk_sglue+0x38>
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	4638      	mov	r0, r7
 800ee60:	47c0      	blx	r8
 800ee62:	4306      	orrs	r6, r0
 800ee64:	3568      	adds	r5, #104	@ 0x68
 800ee66:	e7e9      	b.n	800ee3c <_fwalk_sglue+0x10>

0800ee68 <iprintf>:
 800ee68:	b40f      	push	{r0, r1, r2, r3}
 800ee6a:	b507      	push	{r0, r1, r2, lr}
 800ee6c:	4906      	ldr	r1, [pc, #24]	@ (800ee88 <iprintf+0x20>)
 800ee6e:	ab04      	add	r3, sp, #16
 800ee70:	6808      	ldr	r0, [r1, #0]
 800ee72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee76:	6881      	ldr	r1, [r0, #8]
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	f001 feb5 	bl	8010be8 <_vfiprintf_r>
 800ee7e:	b003      	add	sp, #12
 800ee80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee84:	b004      	add	sp, #16
 800ee86:	4770      	bx	lr
 800ee88:	20000114 	.word	0x20000114

0800ee8c <putchar>:
 800ee8c:	4b02      	ldr	r3, [pc, #8]	@ (800ee98 <putchar+0xc>)
 800ee8e:	4601      	mov	r1, r0
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	6882      	ldr	r2, [r0, #8]
 800ee94:	f002 b8ce 	b.w	8011034 <_putc_r>
 800ee98:	20000114 	.word	0x20000114

0800ee9c <_puts_r>:
 800ee9c:	6a03      	ldr	r3, [r0, #32]
 800ee9e:	b570      	push	{r4, r5, r6, lr}
 800eea0:	6884      	ldr	r4, [r0, #8]
 800eea2:	4605      	mov	r5, r0
 800eea4:	460e      	mov	r6, r1
 800eea6:	b90b      	cbnz	r3, 800eeac <_puts_r+0x10>
 800eea8:	f7ff ffa8 	bl	800edfc <__sinit>
 800eeac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eeae:	07db      	lsls	r3, r3, #31
 800eeb0:	d405      	bmi.n	800eebe <_puts_r+0x22>
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	0598      	lsls	r0, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_puts_r+0x22>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeba:	f000 fa2e 	bl	800f31a <__retarget_lock_acquire_recursive>
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	0719      	lsls	r1, r3, #28
 800eec2:	d502      	bpl.n	800eeca <_puts_r+0x2e>
 800eec4:	6923      	ldr	r3, [r4, #16]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d135      	bne.n	800ef36 <_puts_r+0x9a>
 800eeca:	4621      	mov	r1, r4
 800eecc:	4628      	mov	r0, r5
 800eece:	f000 f937 	bl	800f140 <__swsetup_r>
 800eed2:	b380      	cbz	r0, 800ef36 <_puts_r+0x9a>
 800eed4:	f04f 35ff 	mov.w	r5, #4294967295
 800eed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eeda:	07da      	lsls	r2, r3, #31
 800eedc:	d405      	bmi.n	800eeea <_puts_r+0x4e>
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	059b      	lsls	r3, r3, #22
 800eee2:	d402      	bmi.n	800eeea <_puts_r+0x4e>
 800eee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eee6:	f000 fa19 	bl	800f31c <__retarget_lock_release_recursive>
 800eeea:	4628      	mov	r0, r5
 800eeec:	bd70      	pop	{r4, r5, r6, pc}
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da04      	bge.n	800eefc <_puts_r+0x60>
 800eef2:	69a2      	ldr	r2, [r4, #24]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	dc17      	bgt.n	800ef28 <_puts_r+0x8c>
 800eef8:	290a      	cmp	r1, #10
 800eefa:	d015      	beq.n	800ef28 <_puts_r+0x8c>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	6022      	str	r2, [r4, #0]
 800ef02:	7019      	strb	r1, [r3, #0]
 800ef04:	68a3      	ldr	r3, [r4, #8]
 800ef06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	60a3      	str	r3, [r4, #8]
 800ef0e:	2900      	cmp	r1, #0
 800ef10:	d1ed      	bne.n	800eeee <_puts_r+0x52>
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	da11      	bge.n	800ef3a <_puts_r+0x9e>
 800ef16:	4622      	mov	r2, r4
 800ef18:	210a      	movs	r1, #10
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f000 f8d2 	bl	800f0c4 <__swbuf_r>
 800ef20:	3001      	adds	r0, #1
 800ef22:	d0d7      	beq.n	800eed4 <_puts_r+0x38>
 800ef24:	250a      	movs	r5, #10
 800ef26:	e7d7      	b.n	800eed8 <_puts_r+0x3c>
 800ef28:	4622      	mov	r2, r4
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f000 f8ca 	bl	800f0c4 <__swbuf_r>
 800ef30:	3001      	adds	r0, #1
 800ef32:	d1e7      	bne.n	800ef04 <_puts_r+0x68>
 800ef34:	e7ce      	b.n	800eed4 <_puts_r+0x38>
 800ef36:	3e01      	subs	r6, #1
 800ef38:	e7e4      	b.n	800ef04 <_puts_r+0x68>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	6022      	str	r2, [r4, #0]
 800ef40:	220a      	movs	r2, #10
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e7ee      	b.n	800ef24 <_puts_r+0x88>
	...

0800ef48 <puts>:
 800ef48:	4b02      	ldr	r3, [pc, #8]	@ (800ef54 <puts+0xc>)
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	6818      	ldr	r0, [r3, #0]
 800ef4e:	f7ff bfa5 	b.w	800ee9c <_puts_r>
 800ef52:	bf00      	nop
 800ef54:	20000114 	.word	0x20000114

0800ef58 <sniprintf>:
 800ef58:	b40c      	push	{r2, r3}
 800ef5a:	b530      	push	{r4, r5, lr}
 800ef5c:	4b18      	ldr	r3, [pc, #96]	@ (800efc0 <sniprintf+0x68>)
 800ef5e:	1e0c      	subs	r4, r1, #0
 800ef60:	681d      	ldr	r5, [r3, #0]
 800ef62:	b09d      	sub	sp, #116	@ 0x74
 800ef64:	da08      	bge.n	800ef78 <sniprintf+0x20>
 800ef66:	238b      	movs	r3, #139	@ 0x8b
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6e:	b01d      	add	sp, #116	@ 0x74
 800ef70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef74:	b002      	add	sp, #8
 800ef76:	4770      	bx	lr
 800ef78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ef7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef80:	f04f 0300 	mov.w	r3, #0
 800ef84:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ef86:	bf14      	ite	ne
 800ef88:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef8c:	4623      	moveq	r3, r4
 800ef8e:	9304      	str	r3, [sp, #16]
 800ef90:	9307      	str	r3, [sp, #28]
 800ef92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef96:	9002      	str	r0, [sp, #8]
 800ef98:	9006      	str	r0, [sp, #24]
 800ef9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800efa0:	ab21      	add	r3, sp, #132	@ 0x84
 800efa2:	a902      	add	r1, sp, #8
 800efa4:	4628      	mov	r0, r5
 800efa6:	9301      	str	r3, [sp, #4]
 800efa8:	f001 fcf8 	bl	801099c <_svfiprintf_r>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	bfbc      	itt	lt
 800efb0:	238b      	movlt	r3, #139	@ 0x8b
 800efb2:	602b      	strlt	r3, [r5, #0]
 800efb4:	2c00      	cmp	r4, #0
 800efb6:	d0da      	beq.n	800ef6e <sniprintf+0x16>
 800efb8:	9b02      	ldr	r3, [sp, #8]
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]
 800efbe:	e7d6      	b.n	800ef6e <sniprintf+0x16>
 800efc0:	20000114 	.word	0x20000114

0800efc4 <__sread>:
 800efc4:	b510      	push	{r4, lr}
 800efc6:	460c      	mov	r4, r1
 800efc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efcc:	f000 f956 	bl	800f27c <_read_r>
 800efd0:	2800      	cmp	r0, #0
 800efd2:	bfab      	itete	ge
 800efd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800efd6:	89a3      	ldrhlt	r3, [r4, #12]
 800efd8:	181b      	addge	r3, r3, r0
 800efda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800efde:	bfac      	ite	ge
 800efe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800efe2:	81a3      	strhlt	r3, [r4, #12]
 800efe4:	bd10      	pop	{r4, pc}

0800efe6 <__swrite>:
 800efe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efea:	461f      	mov	r7, r3
 800efec:	898b      	ldrh	r3, [r1, #12]
 800efee:	05db      	lsls	r3, r3, #23
 800eff0:	4605      	mov	r5, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	4616      	mov	r6, r2
 800eff6:	d505      	bpl.n	800f004 <__swrite+0x1e>
 800eff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800effc:	2302      	movs	r3, #2
 800effe:	2200      	movs	r2, #0
 800f000:	f000 f92a 	bl	800f258 <_lseek_r>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f00a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f00e:	81a3      	strh	r3, [r4, #12]
 800f010:	4632      	mov	r2, r6
 800f012:	463b      	mov	r3, r7
 800f014:	4628      	mov	r0, r5
 800f016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01a:	f000 b941 	b.w	800f2a0 <_write_r>

0800f01e <__sseek>:
 800f01e:	b510      	push	{r4, lr}
 800f020:	460c      	mov	r4, r1
 800f022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f026:	f000 f917 	bl	800f258 <_lseek_r>
 800f02a:	1c43      	adds	r3, r0, #1
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	bf15      	itete	ne
 800f030:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f03a:	81a3      	strheq	r3, [r4, #12]
 800f03c:	bf18      	it	ne
 800f03e:	81a3      	strhne	r3, [r4, #12]
 800f040:	bd10      	pop	{r4, pc}

0800f042 <__sclose>:
 800f042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f046:	f000 b8f7 	b.w	800f238 <_close_r>

0800f04a <_vsniprintf_r>:
 800f04a:	b530      	push	{r4, r5, lr}
 800f04c:	4614      	mov	r4, r2
 800f04e:	2c00      	cmp	r4, #0
 800f050:	b09b      	sub	sp, #108	@ 0x6c
 800f052:	4605      	mov	r5, r0
 800f054:	461a      	mov	r2, r3
 800f056:	da05      	bge.n	800f064 <_vsniprintf_r+0x1a>
 800f058:	238b      	movs	r3, #139	@ 0x8b
 800f05a:	6003      	str	r3, [r0, #0]
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	b01b      	add	sp, #108	@ 0x6c
 800f062:	bd30      	pop	{r4, r5, pc}
 800f064:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f068:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f06c:	f04f 0300 	mov.w	r3, #0
 800f070:	9319      	str	r3, [sp, #100]	@ 0x64
 800f072:	bf14      	ite	ne
 800f074:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f078:	4623      	moveq	r3, r4
 800f07a:	9302      	str	r3, [sp, #8]
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f082:	9100      	str	r1, [sp, #0]
 800f084:	9104      	str	r1, [sp, #16]
 800f086:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f08a:	4669      	mov	r1, sp
 800f08c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f08e:	f001 fc85 	bl	801099c <_svfiprintf_r>
 800f092:	1c43      	adds	r3, r0, #1
 800f094:	bfbc      	itt	lt
 800f096:	238b      	movlt	r3, #139	@ 0x8b
 800f098:	602b      	strlt	r3, [r5, #0]
 800f09a:	2c00      	cmp	r4, #0
 800f09c:	d0e0      	beq.n	800f060 <_vsniprintf_r+0x16>
 800f09e:	9b00      	ldr	r3, [sp, #0]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	701a      	strb	r2, [r3, #0]
 800f0a4:	e7dc      	b.n	800f060 <_vsniprintf_r+0x16>
	...

0800f0a8 <vsniprintf>:
 800f0a8:	b507      	push	{r0, r1, r2, lr}
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	460a      	mov	r2, r1
 800f0b0:	4601      	mov	r1, r0
 800f0b2:	4803      	ldr	r0, [pc, #12]	@ (800f0c0 <vsniprintf+0x18>)
 800f0b4:	6800      	ldr	r0, [r0, #0]
 800f0b6:	f7ff ffc8 	bl	800f04a <_vsniprintf_r>
 800f0ba:	b003      	add	sp, #12
 800f0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0c0:	20000114 	.word	0x20000114

0800f0c4 <__swbuf_r>:
 800f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c6:	460e      	mov	r6, r1
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	b118      	cbz	r0, 800f0d6 <__swbuf_r+0x12>
 800f0ce:	6a03      	ldr	r3, [r0, #32]
 800f0d0:	b90b      	cbnz	r3, 800f0d6 <__swbuf_r+0x12>
 800f0d2:	f7ff fe93 	bl	800edfc <__sinit>
 800f0d6:	69a3      	ldr	r3, [r4, #24]
 800f0d8:	60a3      	str	r3, [r4, #8]
 800f0da:	89a3      	ldrh	r3, [r4, #12]
 800f0dc:	071a      	lsls	r2, r3, #28
 800f0de:	d501      	bpl.n	800f0e4 <__swbuf_r+0x20>
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	b943      	cbnz	r3, 800f0f6 <__swbuf_r+0x32>
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	f000 f82a 	bl	800f140 <__swsetup_r>
 800f0ec:	b118      	cbz	r0, 800f0f6 <__swbuf_r+0x32>
 800f0ee:	f04f 37ff 	mov.w	r7, #4294967295
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	6922      	ldr	r2, [r4, #16]
 800f0fa:	1a98      	subs	r0, r3, r2
 800f0fc:	6963      	ldr	r3, [r4, #20]
 800f0fe:	b2f6      	uxtb	r6, r6
 800f100:	4283      	cmp	r3, r0
 800f102:	4637      	mov	r7, r6
 800f104:	dc05      	bgt.n	800f112 <__swbuf_r+0x4e>
 800f106:	4621      	mov	r1, r4
 800f108:	4628      	mov	r0, r5
 800f10a:	f001 ff09 	bl	8010f20 <_fflush_r>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d1ed      	bne.n	800f0ee <__swbuf_r+0x2a>
 800f112:	68a3      	ldr	r3, [r4, #8]
 800f114:	3b01      	subs	r3, #1
 800f116:	60a3      	str	r3, [r4, #8]
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	6022      	str	r2, [r4, #0]
 800f11e:	701e      	strb	r6, [r3, #0]
 800f120:	6962      	ldr	r2, [r4, #20]
 800f122:	1c43      	adds	r3, r0, #1
 800f124:	429a      	cmp	r2, r3
 800f126:	d004      	beq.n	800f132 <__swbuf_r+0x6e>
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	07db      	lsls	r3, r3, #31
 800f12c:	d5e1      	bpl.n	800f0f2 <__swbuf_r+0x2e>
 800f12e:	2e0a      	cmp	r6, #10
 800f130:	d1df      	bne.n	800f0f2 <__swbuf_r+0x2e>
 800f132:	4621      	mov	r1, r4
 800f134:	4628      	mov	r0, r5
 800f136:	f001 fef3 	bl	8010f20 <_fflush_r>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d0d9      	beq.n	800f0f2 <__swbuf_r+0x2e>
 800f13e:	e7d6      	b.n	800f0ee <__swbuf_r+0x2a>

0800f140 <__swsetup_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4b29      	ldr	r3, [pc, #164]	@ (800f1e8 <__swsetup_r+0xa8>)
 800f144:	4605      	mov	r5, r0
 800f146:	6818      	ldr	r0, [r3, #0]
 800f148:	460c      	mov	r4, r1
 800f14a:	b118      	cbz	r0, 800f154 <__swsetup_r+0x14>
 800f14c:	6a03      	ldr	r3, [r0, #32]
 800f14e:	b90b      	cbnz	r3, 800f154 <__swsetup_r+0x14>
 800f150:	f7ff fe54 	bl	800edfc <__sinit>
 800f154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f158:	0719      	lsls	r1, r3, #28
 800f15a:	d422      	bmi.n	800f1a2 <__swsetup_r+0x62>
 800f15c:	06da      	lsls	r2, r3, #27
 800f15e:	d407      	bmi.n	800f170 <__swsetup_r+0x30>
 800f160:	2209      	movs	r2, #9
 800f162:	602a      	str	r2, [r5, #0]
 800f164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	f04f 30ff 	mov.w	r0, #4294967295
 800f16e:	e033      	b.n	800f1d8 <__swsetup_r+0x98>
 800f170:	0758      	lsls	r0, r3, #29
 800f172:	d512      	bpl.n	800f19a <__swsetup_r+0x5a>
 800f174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f176:	b141      	cbz	r1, 800f18a <__swsetup_r+0x4a>
 800f178:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f17c:	4299      	cmp	r1, r3
 800f17e:	d002      	beq.n	800f186 <__swsetup_r+0x46>
 800f180:	4628      	mov	r0, r5
 800f182:	f000 ff35 	bl	800fff0 <_free_r>
 800f186:	2300      	movs	r3, #0
 800f188:	6363      	str	r3, [r4, #52]	@ 0x34
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f190:	81a3      	strh	r3, [r4, #12]
 800f192:	2300      	movs	r3, #0
 800f194:	6063      	str	r3, [r4, #4]
 800f196:	6923      	ldr	r3, [r4, #16]
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	f043 0308 	orr.w	r3, r3, #8
 800f1a0:	81a3      	strh	r3, [r4, #12]
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	b94b      	cbnz	r3, 800f1ba <__swsetup_r+0x7a>
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1b0:	d003      	beq.n	800f1ba <__swsetup_r+0x7a>
 800f1b2:	4621      	mov	r1, r4
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f001 ff01 	bl	8010fbc <__smakebuf_r>
 800f1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1be:	f013 0201 	ands.w	r2, r3, #1
 800f1c2:	d00a      	beq.n	800f1da <__swsetup_r+0x9a>
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	60a2      	str	r2, [r4, #8]
 800f1c8:	6962      	ldr	r2, [r4, #20]
 800f1ca:	4252      	negs	r2, r2
 800f1cc:	61a2      	str	r2, [r4, #24]
 800f1ce:	6922      	ldr	r2, [r4, #16]
 800f1d0:	b942      	cbnz	r2, 800f1e4 <__swsetup_r+0xa4>
 800f1d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1d6:	d1c5      	bne.n	800f164 <__swsetup_r+0x24>
 800f1d8:	bd38      	pop	{r3, r4, r5, pc}
 800f1da:	0799      	lsls	r1, r3, #30
 800f1dc:	bf58      	it	pl
 800f1de:	6962      	ldrpl	r2, [r4, #20]
 800f1e0:	60a2      	str	r2, [r4, #8]
 800f1e2:	e7f4      	b.n	800f1ce <__swsetup_r+0x8e>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e7f7      	b.n	800f1d8 <__swsetup_r+0x98>
 800f1e8:	20000114 	.word	0x20000114

0800f1ec <memmove>:
 800f1ec:	4288      	cmp	r0, r1
 800f1ee:	b510      	push	{r4, lr}
 800f1f0:	eb01 0402 	add.w	r4, r1, r2
 800f1f4:	d902      	bls.n	800f1fc <memmove+0x10>
 800f1f6:	4284      	cmp	r4, r0
 800f1f8:	4623      	mov	r3, r4
 800f1fa:	d807      	bhi.n	800f20c <memmove+0x20>
 800f1fc:	1e43      	subs	r3, r0, #1
 800f1fe:	42a1      	cmp	r1, r4
 800f200:	d008      	beq.n	800f214 <memmove+0x28>
 800f202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f20a:	e7f8      	b.n	800f1fe <memmove+0x12>
 800f20c:	4402      	add	r2, r0
 800f20e:	4601      	mov	r1, r0
 800f210:	428a      	cmp	r2, r1
 800f212:	d100      	bne.n	800f216 <memmove+0x2a>
 800f214:	bd10      	pop	{r4, pc}
 800f216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f21e:	e7f7      	b.n	800f210 <memmove+0x24>

0800f220 <memset>:
 800f220:	4402      	add	r2, r0
 800f222:	4603      	mov	r3, r0
 800f224:	4293      	cmp	r3, r2
 800f226:	d100      	bne.n	800f22a <memset+0xa>
 800f228:	4770      	bx	lr
 800f22a:	f803 1b01 	strb.w	r1, [r3], #1
 800f22e:	e7f9      	b.n	800f224 <memset+0x4>

0800f230 <_localeconv_r>:
 800f230:	4800      	ldr	r0, [pc, #0]	@ (800f234 <_localeconv_r+0x4>)
 800f232:	4770      	bx	lr
 800f234:	20000254 	.word	0x20000254

0800f238 <_close_r>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	4d06      	ldr	r5, [pc, #24]	@ (800f254 <_close_r+0x1c>)
 800f23c:	2300      	movs	r3, #0
 800f23e:	4604      	mov	r4, r0
 800f240:	4608      	mov	r0, r1
 800f242:	602b      	str	r3, [r5, #0]
 800f244:	f7f6 f898 	bl	8005378 <_close>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	d102      	bne.n	800f252 <_close_r+0x1a>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	b103      	cbz	r3, 800f252 <_close_r+0x1a>
 800f250:	6023      	str	r3, [r4, #0]
 800f252:	bd38      	pop	{r3, r4, r5, pc}
 800f254:	20005574 	.word	0x20005574

0800f258 <_lseek_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d07      	ldr	r5, [pc, #28]	@ (800f278 <_lseek_r+0x20>)
 800f25c:	4604      	mov	r4, r0
 800f25e:	4608      	mov	r0, r1
 800f260:	4611      	mov	r1, r2
 800f262:	2200      	movs	r2, #0
 800f264:	602a      	str	r2, [r5, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	f7f6 f890 	bl	800538c <_lseek>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_lseek_r+0x1e>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_lseek_r+0x1e>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	20005574 	.word	0x20005574

0800f27c <_read_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_read_r+0x20>)
 800f280:	4604      	mov	r4, r0
 800f282:	4608      	mov	r0, r1
 800f284:	4611      	mov	r1, r2
 800f286:	2200      	movs	r2, #0
 800f288:	602a      	str	r2, [r5, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	f7f6 f85a 	bl	8005344 <_read>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_read_r+0x1e>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_read_r+0x1e>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20005574 	.word	0x20005574

0800f2a0 <_write_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	@ (800f2c0 <_write_r+0x20>)
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	602a      	str	r2, [r5, #0]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	f7f6 f855 	bl	800535e <_write>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_write_r+0x1e>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_write_r+0x1e>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	20005574 	.word	0x20005574

0800f2c4 <__errno>:
 800f2c4:	4b01      	ldr	r3, [pc, #4]	@ (800f2cc <__errno+0x8>)
 800f2c6:	6818      	ldr	r0, [r3, #0]
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	20000114 	.word	0x20000114

0800f2d0 <__libc_init_array>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	4d0d      	ldr	r5, [pc, #52]	@ (800f308 <__libc_init_array+0x38>)
 800f2d4:	4c0d      	ldr	r4, [pc, #52]	@ (800f30c <__libc_init_array+0x3c>)
 800f2d6:	1b64      	subs	r4, r4, r5
 800f2d8:	10a4      	asrs	r4, r4, #2
 800f2da:	2600      	movs	r6, #0
 800f2dc:	42a6      	cmp	r6, r4
 800f2de:	d109      	bne.n	800f2f4 <__libc_init_array+0x24>
 800f2e0:	4d0b      	ldr	r5, [pc, #44]	@ (800f310 <__libc_init_array+0x40>)
 800f2e2:	4c0c      	ldr	r4, [pc, #48]	@ (800f314 <__libc_init_array+0x44>)
 800f2e4:	f001 fff2 	bl	80112cc <_init>
 800f2e8:	1b64      	subs	r4, r4, r5
 800f2ea:	10a4      	asrs	r4, r4, #2
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	42a6      	cmp	r6, r4
 800f2f0:	d105      	bne.n	800f2fe <__libc_init_array+0x2e>
 800f2f2:	bd70      	pop	{r4, r5, r6, pc}
 800f2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2f8:	4798      	blx	r3
 800f2fa:	3601      	adds	r6, #1
 800f2fc:	e7ee      	b.n	800f2dc <__libc_init_array+0xc>
 800f2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f302:	4798      	blx	r3
 800f304:	3601      	adds	r6, #1
 800f306:	e7f2      	b.n	800f2ee <__libc_init_array+0x1e>
 800f308:	08012cd4 	.word	0x08012cd4
 800f30c:	08012cd4 	.word	0x08012cd4
 800f310:	08012cd4 	.word	0x08012cd4
 800f314:	08012cd8 	.word	0x08012cd8

0800f318 <__retarget_lock_init_recursive>:
 800f318:	4770      	bx	lr

0800f31a <__retarget_lock_acquire_recursive>:
 800f31a:	4770      	bx	lr

0800f31c <__retarget_lock_release_recursive>:
 800f31c:	4770      	bx	lr

0800f31e <memcpy>:
 800f31e:	440a      	add	r2, r1
 800f320:	4291      	cmp	r1, r2
 800f322:	f100 33ff 	add.w	r3, r0, #4294967295
 800f326:	d100      	bne.n	800f32a <memcpy+0xc>
 800f328:	4770      	bx	lr
 800f32a:	b510      	push	{r4, lr}
 800f32c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f330:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f334:	4291      	cmp	r1, r2
 800f336:	d1f9      	bne.n	800f32c <memcpy+0xe>
 800f338:	bd10      	pop	{r4, pc}

0800f33a <quorem>:
 800f33a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33e:	6903      	ldr	r3, [r0, #16]
 800f340:	690c      	ldr	r4, [r1, #16]
 800f342:	42a3      	cmp	r3, r4
 800f344:	4607      	mov	r7, r0
 800f346:	db7e      	blt.n	800f446 <quorem+0x10c>
 800f348:	3c01      	subs	r4, #1
 800f34a:	f101 0814 	add.w	r8, r1, #20
 800f34e:	00a3      	lsls	r3, r4, #2
 800f350:	f100 0514 	add.w	r5, r0, #20
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f35a:	9301      	str	r3, [sp, #4]
 800f35c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f364:	3301      	adds	r3, #1
 800f366:	429a      	cmp	r2, r3
 800f368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f36c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f370:	d32e      	bcc.n	800f3d0 <quorem+0x96>
 800f372:	f04f 0a00 	mov.w	sl, #0
 800f376:	46c4      	mov	ip, r8
 800f378:	46ae      	mov	lr, r5
 800f37a:	46d3      	mov	fp, sl
 800f37c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f380:	b298      	uxth	r0, r3
 800f382:	fb06 a000 	mla	r0, r6, r0, sl
 800f386:	0c02      	lsrs	r2, r0, #16
 800f388:	0c1b      	lsrs	r3, r3, #16
 800f38a:	fb06 2303 	mla	r3, r6, r3, r2
 800f38e:	f8de 2000 	ldr.w	r2, [lr]
 800f392:	b280      	uxth	r0, r0
 800f394:	b292      	uxth	r2, r2
 800f396:	1a12      	subs	r2, r2, r0
 800f398:	445a      	add	r2, fp
 800f39a:	f8de 0000 	ldr.w	r0, [lr]
 800f39e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f3a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f3ac:	b292      	uxth	r2, r2
 800f3ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f3b2:	45e1      	cmp	r9, ip
 800f3b4:	f84e 2b04 	str.w	r2, [lr], #4
 800f3b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3bc:	d2de      	bcs.n	800f37c <quorem+0x42>
 800f3be:	9b00      	ldr	r3, [sp, #0]
 800f3c0:	58eb      	ldr	r3, [r5, r3]
 800f3c2:	b92b      	cbnz	r3, 800f3d0 <quorem+0x96>
 800f3c4:	9b01      	ldr	r3, [sp, #4]
 800f3c6:	3b04      	subs	r3, #4
 800f3c8:	429d      	cmp	r5, r3
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	d32f      	bcc.n	800f42e <quorem+0xf4>
 800f3ce:	613c      	str	r4, [r7, #16]
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f001 f97f 	bl	80106d4 <__mcmp>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	db25      	blt.n	800f426 <quorem+0xec>
 800f3da:	4629      	mov	r1, r5
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3e2:	f8d1 c000 	ldr.w	ip, [r1]
 800f3e6:	fa1f fe82 	uxth.w	lr, r2
 800f3ea:	fa1f f38c 	uxth.w	r3, ip
 800f3ee:	eba3 030e 	sub.w	r3, r3, lr
 800f3f2:	4403      	add	r3, r0
 800f3f4:	0c12      	lsrs	r2, r2, #16
 800f3f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f3fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f404:	45c1      	cmp	r9, r8
 800f406:	f841 3b04 	str.w	r3, [r1], #4
 800f40a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f40e:	d2e6      	bcs.n	800f3de <quorem+0xa4>
 800f410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f414:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f418:	b922      	cbnz	r2, 800f424 <quorem+0xea>
 800f41a:	3b04      	subs	r3, #4
 800f41c:	429d      	cmp	r5, r3
 800f41e:	461a      	mov	r2, r3
 800f420:	d30b      	bcc.n	800f43a <quorem+0x100>
 800f422:	613c      	str	r4, [r7, #16]
 800f424:	3601      	adds	r6, #1
 800f426:	4630      	mov	r0, r6
 800f428:	b003      	add	sp, #12
 800f42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f42e:	6812      	ldr	r2, [r2, #0]
 800f430:	3b04      	subs	r3, #4
 800f432:	2a00      	cmp	r2, #0
 800f434:	d1cb      	bne.n	800f3ce <quorem+0x94>
 800f436:	3c01      	subs	r4, #1
 800f438:	e7c6      	b.n	800f3c8 <quorem+0x8e>
 800f43a:	6812      	ldr	r2, [r2, #0]
 800f43c:	3b04      	subs	r3, #4
 800f43e:	2a00      	cmp	r2, #0
 800f440:	d1ef      	bne.n	800f422 <quorem+0xe8>
 800f442:	3c01      	subs	r4, #1
 800f444:	e7ea      	b.n	800f41c <quorem+0xe2>
 800f446:	2000      	movs	r0, #0
 800f448:	e7ee      	b.n	800f428 <quorem+0xee>
 800f44a:	0000      	movs	r0, r0
 800f44c:	0000      	movs	r0, r0
	...

0800f450 <_dtoa_r>:
 800f450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f454:	69c7      	ldr	r7, [r0, #28]
 800f456:	b097      	sub	sp, #92	@ 0x5c
 800f458:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f45c:	ec55 4b10 	vmov	r4, r5, d0
 800f460:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f462:	9107      	str	r1, [sp, #28]
 800f464:	4681      	mov	r9, r0
 800f466:	920c      	str	r2, [sp, #48]	@ 0x30
 800f468:	9311      	str	r3, [sp, #68]	@ 0x44
 800f46a:	b97f      	cbnz	r7, 800f48c <_dtoa_r+0x3c>
 800f46c:	2010      	movs	r0, #16
 800f46e:	f000 fe09 	bl	8010084 <malloc>
 800f472:	4602      	mov	r2, r0
 800f474:	f8c9 001c 	str.w	r0, [r9, #28]
 800f478:	b920      	cbnz	r0, 800f484 <_dtoa_r+0x34>
 800f47a:	4ba9      	ldr	r3, [pc, #676]	@ (800f720 <_dtoa_r+0x2d0>)
 800f47c:	21ef      	movs	r1, #239	@ 0xef
 800f47e:	48a9      	ldr	r0, [pc, #676]	@ (800f724 <_dtoa_r+0x2d4>)
 800f480:	f001 fe3e 	bl	8011100 <__assert_func>
 800f484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f488:	6007      	str	r7, [r0, #0]
 800f48a:	60c7      	str	r7, [r0, #12]
 800f48c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f490:	6819      	ldr	r1, [r3, #0]
 800f492:	b159      	cbz	r1, 800f4ac <_dtoa_r+0x5c>
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	604a      	str	r2, [r1, #4]
 800f498:	2301      	movs	r3, #1
 800f49a:	4093      	lsls	r3, r2
 800f49c:	608b      	str	r3, [r1, #8]
 800f49e:	4648      	mov	r0, r9
 800f4a0:	f000 fee6 	bl	8010270 <_Bfree>
 800f4a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]
 800f4ac:	1e2b      	subs	r3, r5, #0
 800f4ae:	bfb9      	ittee	lt
 800f4b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f4b4:	9305      	strlt	r3, [sp, #20]
 800f4b6:	2300      	movge	r3, #0
 800f4b8:	6033      	strge	r3, [r6, #0]
 800f4ba:	9f05      	ldr	r7, [sp, #20]
 800f4bc:	4b9a      	ldr	r3, [pc, #616]	@ (800f728 <_dtoa_r+0x2d8>)
 800f4be:	bfbc      	itt	lt
 800f4c0:	2201      	movlt	r2, #1
 800f4c2:	6032      	strlt	r2, [r6, #0]
 800f4c4:	43bb      	bics	r3, r7
 800f4c6:	d112      	bne.n	800f4ee <_dtoa_r+0x9e>
 800f4c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f4ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4d4:	4323      	orrs	r3, r4
 800f4d6:	f000 855a 	beq.w	800ff8e <_dtoa_r+0xb3e>
 800f4da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f4dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f73c <_dtoa_r+0x2ec>
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 855c 	beq.w	800ff9e <_dtoa_r+0xb4e>
 800f4e6:	f10a 0303 	add.w	r3, sl, #3
 800f4ea:	f000 bd56 	b.w	800ff9a <_dtoa_r+0xb4a>
 800f4ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	ec51 0b17 	vmov	r0, r1, d7
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f4fe:	f7f1 fb0b 	bl	8000b18 <__aeabi_dcmpeq>
 800f502:	4680      	mov	r8, r0
 800f504:	b158      	cbz	r0, 800f51e <_dtoa_r+0xce>
 800f506:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f508:	2301      	movs	r3, #1
 800f50a:	6013      	str	r3, [r2, #0]
 800f50c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f50e:	b113      	cbz	r3, 800f516 <_dtoa_r+0xc6>
 800f510:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f512:	4b86      	ldr	r3, [pc, #536]	@ (800f72c <_dtoa_r+0x2dc>)
 800f514:	6013      	str	r3, [r2, #0]
 800f516:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f740 <_dtoa_r+0x2f0>
 800f51a:	f000 bd40 	b.w	800ff9e <_dtoa_r+0xb4e>
 800f51e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f522:	aa14      	add	r2, sp, #80	@ 0x50
 800f524:	a915      	add	r1, sp, #84	@ 0x54
 800f526:	4648      	mov	r0, r9
 800f528:	f001 f984 	bl	8010834 <__d2b>
 800f52c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f530:	9002      	str	r0, [sp, #8]
 800f532:	2e00      	cmp	r6, #0
 800f534:	d078      	beq.n	800f628 <_dtoa_r+0x1d8>
 800f536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f538:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f54c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f550:	4619      	mov	r1, r3
 800f552:	2200      	movs	r2, #0
 800f554:	4b76      	ldr	r3, [pc, #472]	@ (800f730 <_dtoa_r+0x2e0>)
 800f556:	f7f0 febf 	bl	80002d8 <__aeabi_dsub>
 800f55a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f708 <_dtoa_r+0x2b8>)
 800f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f560:	f7f1 f872 	bl	8000648 <__aeabi_dmul>
 800f564:	a36a      	add	r3, pc, #424	@ (adr r3, 800f710 <_dtoa_r+0x2c0>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f0 feb7 	bl	80002dc <__adddf3>
 800f56e:	4604      	mov	r4, r0
 800f570:	4630      	mov	r0, r6
 800f572:	460d      	mov	r5, r1
 800f574:	f7f0 fffe 	bl	8000574 <__aeabi_i2d>
 800f578:	a367      	add	r3, pc, #412	@ (adr r3, 800f718 <_dtoa_r+0x2c8>)
 800f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57e:	f7f1 f863 	bl	8000648 <__aeabi_dmul>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f0 fea7 	bl	80002dc <__adddf3>
 800f58e:	4604      	mov	r4, r0
 800f590:	460d      	mov	r5, r1
 800f592:	f7f1 fb09 	bl	8000ba8 <__aeabi_d2iz>
 800f596:	2200      	movs	r2, #0
 800f598:	4607      	mov	r7, r0
 800f59a:	2300      	movs	r3, #0
 800f59c:	4620      	mov	r0, r4
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f1 fac4 	bl	8000b2c <__aeabi_dcmplt>
 800f5a4:	b140      	cbz	r0, 800f5b8 <_dtoa_r+0x168>
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	f7f0 ffe4 	bl	8000574 <__aeabi_i2d>
 800f5ac:	4622      	mov	r2, r4
 800f5ae:	462b      	mov	r3, r5
 800f5b0:	f7f1 fab2 	bl	8000b18 <__aeabi_dcmpeq>
 800f5b4:	b900      	cbnz	r0, 800f5b8 <_dtoa_r+0x168>
 800f5b6:	3f01      	subs	r7, #1
 800f5b8:	2f16      	cmp	r7, #22
 800f5ba:	d852      	bhi.n	800f662 <_dtoa_r+0x212>
 800f5bc:	4b5d      	ldr	r3, [pc, #372]	@ (800f734 <_dtoa_r+0x2e4>)
 800f5be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f5ca:	f7f1 faaf 	bl	8000b2c <__aeabi_dcmplt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d049      	beq.n	800f666 <_dtoa_r+0x216>
 800f5d2:	3f01      	subs	r7, #1
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f5da:	1b9b      	subs	r3, r3, r6
 800f5dc:	1e5a      	subs	r2, r3, #1
 800f5de:	bf45      	ittet	mi
 800f5e0:	f1c3 0301 	rsbmi	r3, r3, #1
 800f5e4:	9300      	strmi	r3, [sp, #0]
 800f5e6:	2300      	movpl	r3, #0
 800f5e8:	2300      	movmi	r3, #0
 800f5ea:	9206      	str	r2, [sp, #24]
 800f5ec:	bf54      	ite	pl
 800f5ee:	9300      	strpl	r3, [sp, #0]
 800f5f0:	9306      	strmi	r3, [sp, #24]
 800f5f2:	2f00      	cmp	r7, #0
 800f5f4:	db39      	blt.n	800f66a <_dtoa_r+0x21a>
 800f5f6:	9b06      	ldr	r3, [sp, #24]
 800f5f8:	970d      	str	r7, [sp, #52]	@ 0x34
 800f5fa:	443b      	add	r3, r7
 800f5fc:	9306      	str	r3, [sp, #24]
 800f5fe:	2300      	movs	r3, #0
 800f600:	9308      	str	r3, [sp, #32]
 800f602:	9b07      	ldr	r3, [sp, #28]
 800f604:	2b09      	cmp	r3, #9
 800f606:	d863      	bhi.n	800f6d0 <_dtoa_r+0x280>
 800f608:	2b05      	cmp	r3, #5
 800f60a:	bfc4      	itt	gt
 800f60c:	3b04      	subgt	r3, #4
 800f60e:	9307      	strgt	r3, [sp, #28]
 800f610:	9b07      	ldr	r3, [sp, #28]
 800f612:	f1a3 0302 	sub.w	r3, r3, #2
 800f616:	bfcc      	ite	gt
 800f618:	2400      	movgt	r4, #0
 800f61a:	2401      	movle	r4, #1
 800f61c:	2b03      	cmp	r3, #3
 800f61e:	d863      	bhi.n	800f6e8 <_dtoa_r+0x298>
 800f620:	e8df f003 	tbb	[pc, r3]
 800f624:	2b375452 	.word	0x2b375452
 800f628:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f62c:	441e      	add	r6, r3
 800f62e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f632:	2b20      	cmp	r3, #32
 800f634:	bfc1      	itttt	gt
 800f636:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f63a:	409f      	lslgt	r7, r3
 800f63c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f640:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f644:	bfd6      	itet	le
 800f646:	f1c3 0320 	rsble	r3, r3, #32
 800f64a:	ea47 0003 	orrgt.w	r0, r7, r3
 800f64e:	fa04 f003 	lslle.w	r0, r4, r3
 800f652:	f7f0 ff7f 	bl	8000554 <__aeabi_ui2d>
 800f656:	2201      	movs	r2, #1
 800f658:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f65c:	3e01      	subs	r6, #1
 800f65e:	9212      	str	r2, [sp, #72]	@ 0x48
 800f660:	e776      	b.n	800f550 <_dtoa_r+0x100>
 800f662:	2301      	movs	r3, #1
 800f664:	e7b7      	b.n	800f5d6 <_dtoa_r+0x186>
 800f666:	9010      	str	r0, [sp, #64]	@ 0x40
 800f668:	e7b6      	b.n	800f5d8 <_dtoa_r+0x188>
 800f66a:	9b00      	ldr	r3, [sp, #0]
 800f66c:	1bdb      	subs	r3, r3, r7
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	427b      	negs	r3, r7
 800f672:	9308      	str	r3, [sp, #32]
 800f674:	2300      	movs	r3, #0
 800f676:	930d      	str	r3, [sp, #52]	@ 0x34
 800f678:	e7c3      	b.n	800f602 <_dtoa_r+0x1b2>
 800f67a:	2301      	movs	r3, #1
 800f67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f680:	eb07 0b03 	add.w	fp, r7, r3
 800f684:	f10b 0301 	add.w	r3, fp, #1
 800f688:	2b01      	cmp	r3, #1
 800f68a:	9303      	str	r3, [sp, #12]
 800f68c:	bfb8      	it	lt
 800f68e:	2301      	movlt	r3, #1
 800f690:	e006      	b.n	800f6a0 <_dtoa_r+0x250>
 800f692:	2301      	movs	r3, #1
 800f694:	9309      	str	r3, [sp, #36]	@ 0x24
 800f696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f698:	2b00      	cmp	r3, #0
 800f69a:	dd28      	ble.n	800f6ee <_dtoa_r+0x29e>
 800f69c:	469b      	mov	fp, r3
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	2204      	movs	r2, #4
 800f6a8:	f102 0514 	add.w	r5, r2, #20
 800f6ac:	429d      	cmp	r5, r3
 800f6ae:	d926      	bls.n	800f6fe <_dtoa_r+0x2ae>
 800f6b0:	6041      	str	r1, [r0, #4]
 800f6b2:	4648      	mov	r0, r9
 800f6b4:	f000 fd9c 	bl	80101f0 <_Balloc>
 800f6b8:	4682      	mov	sl, r0
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d142      	bne.n	800f744 <_dtoa_r+0x2f4>
 800f6be:	4b1e      	ldr	r3, [pc, #120]	@ (800f738 <_dtoa_r+0x2e8>)
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	f240 11af 	movw	r1, #431	@ 0x1af
 800f6c6:	e6da      	b.n	800f47e <_dtoa_r+0x2e>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e7e3      	b.n	800f694 <_dtoa_r+0x244>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	e7d5      	b.n	800f67c <_dtoa_r+0x22c>
 800f6d0:	2401      	movs	r4, #1
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9307      	str	r3, [sp, #28]
 800f6d6:	9409      	str	r4, [sp, #36]	@ 0x24
 800f6d8:	f04f 3bff 	mov.w	fp, #4294967295
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8cd b00c 	str.w	fp, [sp, #12]
 800f6e2:	2312      	movs	r3, #18
 800f6e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800f6e6:	e7db      	b.n	800f6a0 <_dtoa_r+0x250>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ec:	e7f4      	b.n	800f6d8 <_dtoa_r+0x288>
 800f6ee:	f04f 0b01 	mov.w	fp, #1
 800f6f2:	f8cd b00c 	str.w	fp, [sp, #12]
 800f6f6:	465b      	mov	r3, fp
 800f6f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f6fc:	e7d0      	b.n	800f6a0 <_dtoa_r+0x250>
 800f6fe:	3101      	adds	r1, #1
 800f700:	0052      	lsls	r2, r2, #1
 800f702:	e7d1      	b.n	800f6a8 <_dtoa_r+0x258>
 800f704:	f3af 8000 	nop.w
 800f708:	636f4361 	.word	0x636f4361
 800f70c:	3fd287a7 	.word	0x3fd287a7
 800f710:	8b60c8b3 	.word	0x8b60c8b3
 800f714:	3fc68a28 	.word	0x3fc68a28
 800f718:	509f79fb 	.word	0x509f79fb
 800f71c:	3fd34413 	.word	0x3fd34413
 800f720:	080128c9 	.word	0x080128c9
 800f724:	080128e0 	.word	0x080128e0
 800f728:	7ff00000 	.word	0x7ff00000
 800f72c:	08012899 	.word	0x08012899
 800f730:	3ff80000 	.word	0x3ff80000
 800f734:	08012a30 	.word	0x08012a30
 800f738:	08012938 	.word	0x08012938
 800f73c:	080128c5 	.word	0x080128c5
 800f740:	08012898 	.word	0x08012898
 800f744:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f748:	6018      	str	r0, [r3, #0]
 800f74a:	9b03      	ldr	r3, [sp, #12]
 800f74c:	2b0e      	cmp	r3, #14
 800f74e:	f200 80a1 	bhi.w	800f894 <_dtoa_r+0x444>
 800f752:	2c00      	cmp	r4, #0
 800f754:	f000 809e 	beq.w	800f894 <_dtoa_r+0x444>
 800f758:	2f00      	cmp	r7, #0
 800f75a:	dd33      	ble.n	800f7c4 <_dtoa_r+0x374>
 800f75c:	4b9c      	ldr	r3, [pc, #624]	@ (800f9d0 <_dtoa_r+0x580>)
 800f75e:	f007 020f 	and.w	r2, r7, #15
 800f762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f766:	ed93 7b00 	vldr	d7, [r3]
 800f76a:	05f8      	lsls	r0, r7, #23
 800f76c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f770:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f774:	d516      	bpl.n	800f7a4 <_dtoa_r+0x354>
 800f776:	4b97      	ldr	r3, [pc, #604]	@ (800f9d4 <_dtoa_r+0x584>)
 800f778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f77c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f780:	f7f1 f88c 	bl	800089c <__aeabi_ddiv>
 800f784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f788:	f004 040f 	and.w	r4, r4, #15
 800f78c:	2603      	movs	r6, #3
 800f78e:	4d91      	ldr	r5, [pc, #580]	@ (800f9d4 <_dtoa_r+0x584>)
 800f790:	b954      	cbnz	r4, 800f7a8 <_dtoa_r+0x358>
 800f792:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f79a:	f7f1 f87f 	bl	800089c <__aeabi_ddiv>
 800f79e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7a2:	e028      	b.n	800f7f6 <_dtoa_r+0x3a6>
 800f7a4:	2602      	movs	r6, #2
 800f7a6:	e7f2      	b.n	800f78e <_dtoa_r+0x33e>
 800f7a8:	07e1      	lsls	r1, r4, #31
 800f7aa:	d508      	bpl.n	800f7be <_dtoa_r+0x36e>
 800f7ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f7b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7b4:	f7f0 ff48 	bl	8000648 <__aeabi_dmul>
 800f7b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f7bc:	3601      	adds	r6, #1
 800f7be:	1064      	asrs	r4, r4, #1
 800f7c0:	3508      	adds	r5, #8
 800f7c2:	e7e5      	b.n	800f790 <_dtoa_r+0x340>
 800f7c4:	f000 80af 	beq.w	800f926 <_dtoa_r+0x4d6>
 800f7c8:	427c      	negs	r4, r7
 800f7ca:	4b81      	ldr	r3, [pc, #516]	@ (800f9d0 <_dtoa_r+0x580>)
 800f7cc:	4d81      	ldr	r5, [pc, #516]	@ (800f9d4 <_dtoa_r+0x584>)
 800f7ce:	f004 020f 	and.w	r2, r4, #15
 800f7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f7de:	f7f0 ff33 	bl	8000648 <__aeabi_dmul>
 800f7e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7e6:	1124      	asrs	r4, r4, #4
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2602      	movs	r6, #2
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	f040 808f 	bne.w	800f910 <_dtoa_r+0x4c0>
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1d3      	bne.n	800f79e <_dtoa_r+0x34e>
 800f7f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f7f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 8094 	beq.w	800f92a <_dtoa_r+0x4da>
 800f802:	4b75      	ldr	r3, [pc, #468]	@ (800f9d8 <_dtoa_r+0x588>)
 800f804:	2200      	movs	r2, #0
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	f7f1 f98f 	bl	8000b2c <__aeabi_dcmplt>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f000 808b 	beq.w	800f92a <_dtoa_r+0x4da>
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 8087 	beq.w	800f92a <_dtoa_r+0x4da>
 800f81c:	f1bb 0f00 	cmp.w	fp, #0
 800f820:	dd34      	ble.n	800f88c <_dtoa_r+0x43c>
 800f822:	4620      	mov	r0, r4
 800f824:	4b6d      	ldr	r3, [pc, #436]	@ (800f9dc <_dtoa_r+0x58c>)
 800f826:	2200      	movs	r2, #0
 800f828:	4629      	mov	r1, r5
 800f82a:	f7f0 ff0d 	bl	8000648 <__aeabi_dmul>
 800f82e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f832:	f107 38ff 	add.w	r8, r7, #4294967295
 800f836:	3601      	adds	r6, #1
 800f838:	465c      	mov	r4, fp
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7f0 fe9a 	bl	8000574 <__aeabi_i2d>
 800f840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f844:	f7f0 ff00 	bl	8000648 <__aeabi_dmul>
 800f848:	4b65      	ldr	r3, [pc, #404]	@ (800f9e0 <_dtoa_r+0x590>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f7f0 fd46 	bl	80002dc <__adddf3>
 800f850:	4605      	mov	r5, r0
 800f852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f856:	2c00      	cmp	r4, #0
 800f858:	d16a      	bne.n	800f930 <_dtoa_r+0x4e0>
 800f85a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f85e:	4b61      	ldr	r3, [pc, #388]	@ (800f9e4 <_dtoa_r+0x594>)
 800f860:	2200      	movs	r2, #0
 800f862:	f7f0 fd39 	bl	80002d8 <__aeabi_dsub>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f86e:	462a      	mov	r2, r5
 800f870:	4633      	mov	r3, r6
 800f872:	f7f1 f979 	bl	8000b68 <__aeabi_dcmpgt>
 800f876:	2800      	cmp	r0, #0
 800f878:	f040 8298 	bne.w	800fdac <_dtoa_r+0x95c>
 800f87c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f880:	462a      	mov	r2, r5
 800f882:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f886:	f7f1 f951 	bl	8000b2c <__aeabi_dcmplt>
 800f88a:	bb38      	cbnz	r0, 800f8dc <_dtoa_r+0x48c>
 800f88c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f890:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f894:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f896:	2b00      	cmp	r3, #0
 800f898:	f2c0 8157 	blt.w	800fb4a <_dtoa_r+0x6fa>
 800f89c:	2f0e      	cmp	r7, #14
 800f89e:	f300 8154 	bgt.w	800fb4a <_dtoa_r+0x6fa>
 800f8a2:	4b4b      	ldr	r3, [pc, #300]	@ (800f9d0 <_dtoa_r+0x580>)
 800f8a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8a8:	ed93 7b00 	vldr	d7, [r3]
 800f8ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	ed8d 7b00 	vstr	d7, [sp]
 800f8b4:	f280 80e5 	bge.w	800fa82 <_dtoa_r+0x632>
 800f8b8:	9b03      	ldr	r3, [sp, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f300 80e1 	bgt.w	800fa82 <_dtoa_r+0x632>
 800f8c0:	d10c      	bne.n	800f8dc <_dtoa_r+0x48c>
 800f8c2:	4b48      	ldr	r3, [pc, #288]	@ (800f9e4 <_dtoa_r+0x594>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	ec51 0b17 	vmov	r0, r1, d7
 800f8ca:	f7f0 febd 	bl	8000648 <__aeabi_dmul>
 800f8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8d2:	f7f1 f93f 	bl	8000b54 <__aeabi_dcmpge>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	f000 8266 	beq.w	800fda8 <_dtoa_r+0x958>
 800f8dc:	2400      	movs	r4, #0
 800f8de:	4625      	mov	r5, r4
 800f8e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8e2:	4656      	mov	r6, sl
 800f8e4:	ea6f 0803 	mvn.w	r8, r3
 800f8e8:	2700      	movs	r7, #0
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	f000 fcbf 	bl	8010270 <_Bfree>
 800f8f2:	2d00      	cmp	r5, #0
 800f8f4:	f000 80bd 	beq.w	800fa72 <_dtoa_r+0x622>
 800f8f8:	b12f      	cbz	r7, 800f906 <_dtoa_r+0x4b6>
 800f8fa:	42af      	cmp	r7, r5
 800f8fc:	d003      	beq.n	800f906 <_dtoa_r+0x4b6>
 800f8fe:	4639      	mov	r1, r7
 800f900:	4648      	mov	r0, r9
 800f902:	f000 fcb5 	bl	8010270 <_Bfree>
 800f906:	4629      	mov	r1, r5
 800f908:	4648      	mov	r0, r9
 800f90a:	f000 fcb1 	bl	8010270 <_Bfree>
 800f90e:	e0b0      	b.n	800fa72 <_dtoa_r+0x622>
 800f910:	07e2      	lsls	r2, r4, #31
 800f912:	d505      	bpl.n	800f920 <_dtoa_r+0x4d0>
 800f914:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f918:	f7f0 fe96 	bl	8000648 <__aeabi_dmul>
 800f91c:	3601      	adds	r6, #1
 800f91e:	2301      	movs	r3, #1
 800f920:	1064      	asrs	r4, r4, #1
 800f922:	3508      	adds	r5, #8
 800f924:	e762      	b.n	800f7ec <_dtoa_r+0x39c>
 800f926:	2602      	movs	r6, #2
 800f928:	e765      	b.n	800f7f6 <_dtoa_r+0x3a6>
 800f92a:	9c03      	ldr	r4, [sp, #12]
 800f92c:	46b8      	mov	r8, r7
 800f92e:	e784      	b.n	800f83a <_dtoa_r+0x3ea>
 800f930:	4b27      	ldr	r3, [pc, #156]	@ (800f9d0 <_dtoa_r+0x580>)
 800f932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f934:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f938:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f93c:	4454      	add	r4, sl
 800f93e:	2900      	cmp	r1, #0
 800f940:	d054      	beq.n	800f9ec <_dtoa_r+0x59c>
 800f942:	4929      	ldr	r1, [pc, #164]	@ (800f9e8 <_dtoa_r+0x598>)
 800f944:	2000      	movs	r0, #0
 800f946:	f7f0 ffa9 	bl	800089c <__aeabi_ddiv>
 800f94a:	4633      	mov	r3, r6
 800f94c:	462a      	mov	r2, r5
 800f94e:	f7f0 fcc3 	bl	80002d8 <__aeabi_dsub>
 800f952:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f956:	4656      	mov	r6, sl
 800f958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f95c:	f7f1 f924 	bl	8000ba8 <__aeabi_d2iz>
 800f960:	4605      	mov	r5, r0
 800f962:	f7f0 fe07 	bl	8000574 <__aeabi_i2d>
 800f966:	4602      	mov	r2, r0
 800f968:	460b      	mov	r3, r1
 800f96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f96e:	f7f0 fcb3 	bl	80002d8 <__aeabi_dsub>
 800f972:	3530      	adds	r5, #48	@ 0x30
 800f974:	4602      	mov	r2, r0
 800f976:	460b      	mov	r3, r1
 800f978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f97c:	f806 5b01 	strb.w	r5, [r6], #1
 800f980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f984:	f7f1 f8d2 	bl	8000b2c <__aeabi_dcmplt>
 800f988:	2800      	cmp	r0, #0
 800f98a:	d172      	bne.n	800fa72 <_dtoa_r+0x622>
 800f98c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f990:	4911      	ldr	r1, [pc, #68]	@ (800f9d8 <_dtoa_r+0x588>)
 800f992:	2000      	movs	r0, #0
 800f994:	f7f0 fca0 	bl	80002d8 <__aeabi_dsub>
 800f998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f99c:	f7f1 f8c6 	bl	8000b2c <__aeabi_dcmplt>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f040 80b4 	bne.w	800fb0e <_dtoa_r+0x6be>
 800f9a6:	42a6      	cmp	r6, r4
 800f9a8:	f43f af70 	beq.w	800f88c <_dtoa_r+0x43c>
 800f9ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f9dc <_dtoa_r+0x58c>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f7f0 fe48 	bl	8000648 <__aeabi_dmul>
 800f9b8:	4b08      	ldr	r3, [pc, #32]	@ (800f9dc <_dtoa_r+0x58c>)
 800f9ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f9be:	2200      	movs	r2, #0
 800f9c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9c4:	f7f0 fe40 	bl	8000648 <__aeabi_dmul>
 800f9c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9cc:	e7c4      	b.n	800f958 <_dtoa_r+0x508>
 800f9ce:	bf00      	nop
 800f9d0:	08012a30 	.word	0x08012a30
 800f9d4:	08012a08 	.word	0x08012a08
 800f9d8:	3ff00000 	.word	0x3ff00000
 800f9dc:	40240000 	.word	0x40240000
 800f9e0:	401c0000 	.word	0x401c0000
 800f9e4:	40140000 	.word	0x40140000
 800f9e8:	3fe00000 	.word	0x3fe00000
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f7f0 fe2a 	bl	8000648 <__aeabi_dmul>
 800f9f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f9f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f9fa:	4656      	mov	r6, sl
 800f9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa00:	f7f1 f8d2 	bl	8000ba8 <__aeabi_d2iz>
 800fa04:	4605      	mov	r5, r0
 800fa06:	f7f0 fdb5 	bl	8000574 <__aeabi_i2d>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa12:	f7f0 fc61 	bl	80002d8 <__aeabi_dsub>
 800fa16:	3530      	adds	r5, #48	@ 0x30
 800fa18:	f806 5b01 	strb.w	r5, [r6], #1
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	460b      	mov	r3, r1
 800fa20:	42a6      	cmp	r6, r4
 800fa22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa26:	f04f 0200 	mov.w	r2, #0
 800fa2a:	d124      	bne.n	800fa76 <_dtoa_r+0x626>
 800fa2c:	4baf      	ldr	r3, [pc, #700]	@ (800fcec <_dtoa_r+0x89c>)
 800fa2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa32:	f7f0 fc53 	bl	80002dc <__adddf3>
 800fa36:	4602      	mov	r2, r0
 800fa38:	460b      	mov	r3, r1
 800fa3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa3e:	f7f1 f893 	bl	8000b68 <__aeabi_dcmpgt>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d163      	bne.n	800fb0e <_dtoa_r+0x6be>
 800fa46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa4a:	49a8      	ldr	r1, [pc, #672]	@ (800fcec <_dtoa_r+0x89c>)
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	f7f0 fc43 	bl	80002d8 <__aeabi_dsub>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa5a:	f7f1 f867 	bl	8000b2c <__aeabi_dcmplt>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f43f af14 	beq.w	800f88c <_dtoa_r+0x43c>
 800fa64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fa66:	1e73      	subs	r3, r6, #1
 800fa68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fa6e:	2b30      	cmp	r3, #48	@ 0x30
 800fa70:	d0f8      	beq.n	800fa64 <_dtoa_r+0x614>
 800fa72:	4647      	mov	r7, r8
 800fa74:	e03b      	b.n	800faee <_dtoa_r+0x69e>
 800fa76:	4b9e      	ldr	r3, [pc, #632]	@ (800fcf0 <_dtoa_r+0x8a0>)
 800fa78:	f7f0 fde6 	bl	8000648 <__aeabi_dmul>
 800fa7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa80:	e7bc      	b.n	800f9fc <_dtoa_r+0x5ac>
 800fa82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fa86:	4656      	mov	r6, sl
 800fa88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f0 ff04 	bl	800089c <__aeabi_ddiv>
 800fa94:	f7f1 f888 	bl	8000ba8 <__aeabi_d2iz>
 800fa98:	4680      	mov	r8, r0
 800fa9a:	f7f0 fd6b 	bl	8000574 <__aeabi_i2d>
 800fa9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faa2:	f7f0 fdd1 	bl	8000648 <__aeabi_dmul>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4620      	mov	r0, r4
 800faac:	4629      	mov	r1, r5
 800faae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fab2:	f7f0 fc11 	bl	80002d8 <__aeabi_dsub>
 800fab6:	f806 4b01 	strb.w	r4, [r6], #1
 800faba:	9d03      	ldr	r5, [sp, #12]
 800fabc:	eba6 040a 	sub.w	r4, r6, sl
 800fac0:	42a5      	cmp	r5, r4
 800fac2:	4602      	mov	r2, r0
 800fac4:	460b      	mov	r3, r1
 800fac6:	d133      	bne.n	800fb30 <_dtoa_r+0x6e0>
 800fac8:	f7f0 fc08 	bl	80002dc <__adddf3>
 800facc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fad0:	4604      	mov	r4, r0
 800fad2:	460d      	mov	r5, r1
 800fad4:	f7f1 f848 	bl	8000b68 <__aeabi_dcmpgt>
 800fad8:	b9c0      	cbnz	r0, 800fb0c <_dtoa_r+0x6bc>
 800fada:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fade:	4620      	mov	r0, r4
 800fae0:	4629      	mov	r1, r5
 800fae2:	f7f1 f819 	bl	8000b18 <__aeabi_dcmpeq>
 800fae6:	b110      	cbz	r0, 800faee <_dtoa_r+0x69e>
 800fae8:	f018 0f01 	tst.w	r8, #1
 800faec:	d10e      	bne.n	800fb0c <_dtoa_r+0x6bc>
 800faee:	9902      	ldr	r1, [sp, #8]
 800faf0:	4648      	mov	r0, r9
 800faf2:	f000 fbbd 	bl	8010270 <_Bfree>
 800faf6:	2300      	movs	r3, #0
 800faf8:	7033      	strb	r3, [r6, #0]
 800fafa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fafc:	3701      	adds	r7, #1
 800fafe:	601f      	str	r7, [r3, #0]
 800fb00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 824b 	beq.w	800ff9e <_dtoa_r+0xb4e>
 800fb08:	601e      	str	r6, [r3, #0]
 800fb0a:	e248      	b.n	800ff9e <_dtoa_r+0xb4e>
 800fb0c:	46b8      	mov	r8, r7
 800fb0e:	4633      	mov	r3, r6
 800fb10:	461e      	mov	r6, r3
 800fb12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb16:	2a39      	cmp	r2, #57	@ 0x39
 800fb18:	d106      	bne.n	800fb28 <_dtoa_r+0x6d8>
 800fb1a:	459a      	cmp	sl, r3
 800fb1c:	d1f8      	bne.n	800fb10 <_dtoa_r+0x6c0>
 800fb1e:	2230      	movs	r2, #48	@ 0x30
 800fb20:	f108 0801 	add.w	r8, r8, #1
 800fb24:	f88a 2000 	strb.w	r2, [sl]
 800fb28:	781a      	ldrb	r2, [r3, #0]
 800fb2a:	3201      	adds	r2, #1
 800fb2c:	701a      	strb	r2, [r3, #0]
 800fb2e:	e7a0      	b.n	800fa72 <_dtoa_r+0x622>
 800fb30:	4b6f      	ldr	r3, [pc, #444]	@ (800fcf0 <_dtoa_r+0x8a0>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	f7f0 fd88 	bl	8000648 <__aeabi_dmul>
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	4604      	mov	r4, r0
 800fb3e:	460d      	mov	r5, r1
 800fb40:	f7f0 ffea 	bl	8000b18 <__aeabi_dcmpeq>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d09f      	beq.n	800fa88 <_dtoa_r+0x638>
 800fb48:	e7d1      	b.n	800faee <_dtoa_r+0x69e>
 800fb4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb4c:	2a00      	cmp	r2, #0
 800fb4e:	f000 80ea 	beq.w	800fd26 <_dtoa_r+0x8d6>
 800fb52:	9a07      	ldr	r2, [sp, #28]
 800fb54:	2a01      	cmp	r2, #1
 800fb56:	f300 80cd 	bgt.w	800fcf4 <_dtoa_r+0x8a4>
 800fb5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fb5c:	2a00      	cmp	r2, #0
 800fb5e:	f000 80c1 	beq.w	800fce4 <_dtoa_r+0x894>
 800fb62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fb66:	9c08      	ldr	r4, [sp, #32]
 800fb68:	9e00      	ldr	r6, [sp, #0]
 800fb6a:	9a00      	ldr	r2, [sp, #0]
 800fb6c:	441a      	add	r2, r3
 800fb6e:	9200      	str	r2, [sp, #0]
 800fb70:	9a06      	ldr	r2, [sp, #24]
 800fb72:	2101      	movs	r1, #1
 800fb74:	441a      	add	r2, r3
 800fb76:	4648      	mov	r0, r9
 800fb78:	9206      	str	r2, [sp, #24]
 800fb7a:	f000 fc2d 	bl	80103d8 <__i2b>
 800fb7e:	4605      	mov	r5, r0
 800fb80:	b166      	cbz	r6, 800fb9c <_dtoa_r+0x74c>
 800fb82:	9b06      	ldr	r3, [sp, #24]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd09      	ble.n	800fb9c <_dtoa_r+0x74c>
 800fb88:	42b3      	cmp	r3, r6
 800fb8a:	9a00      	ldr	r2, [sp, #0]
 800fb8c:	bfa8      	it	ge
 800fb8e:	4633      	movge	r3, r6
 800fb90:	1ad2      	subs	r2, r2, r3
 800fb92:	9200      	str	r2, [sp, #0]
 800fb94:	9a06      	ldr	r2, [sp, #24]
 800fb96:	1af6      	subs	r6, r6, r3
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	9306      	str	r3, [sp, #24]
 800fb9c:	9b08      	ldr	r3, [sp, #32]
 800fb9e:	b30b      	cbz	r3, 800fbe4 <_dtoa_r+0x794>
 800fba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f000 80c6 	beq.w	800fd34 <_dtoa_r+0x8e4>
 800fba8:	2c00      	cmp	r4, #0
 800fbaa:	f000 80c0 	beq.w	800fd2e <_dtoa_r+0x8de>
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	4648      	mov	r0, r9
 800fbb4:	f000 fcc8 	bl	8010548 <__pow5mult>
 800fbb8:	9a02      	ldr	r2, [sp, #8]
 800fbba:	4601      	mov	r1, r0
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	4648      	mov	r0, r9
 800fbc0:	f000 fc20 	bl	8010404 <__multiply>
 800fbc4:	9902      	ldr	r1, [sp, #8]
 800fbc6:	4680      	mov	r8, r0
 800fbc8:	4648      	mov	r0, r9
 800fbca:	f000 fb51 	bl	8010270 <_Bfree>
 800fbce:	9b08      	ldr	r3, [sp, #32]
 800fbd0:	1b1b      	subs	r3, r3, r4
 800fbd2:	9308      	str	r3, [sp, #32]
 800fbd4:	f000 80b1 	beq.w	800fd3a <_dtoa_r+0x8ea>
 800fbd8:	9a08      	ldr	r2, [sp, #32]
 800fbda:	4641      	mov	r1, r8
 800fbdc:	4648      	mov	r0, r9
 800fbde:	f000 fcb3 	bl	8010548 <__pow5mult>
 800fbe2:	9002      	str	r0, [sp, #8]
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	4648      	mov	r0, r9
 800fbe8:	f000 fbf6 	bl	80103d8 <__i2b>
 800fbec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbee:	4604      	mov	r4, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f000 81d8 	beq.w	800ffa6 <_dtoa_r+0xb56>
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	4601      	mov	r1, r0
 800fbfa:	4648      	mov	r0, r9
 800fbfc:	f000 fca4 	bl	8010548 <__pow5mult>
 800fc00:	9b07      	ldr	r3, [sp, #28]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	4604      	mov	r4, r0
 800fc06:	f300 809f 	bgt.w	800fd48 <_dtoa_r+0x8f8>
 800fc0a:	9b04      	ldr	r3, [sp, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f040 8097 	bne.w	800fd40 <_dtoa_r+0x8f0>
 800fc12:	9b05      	ldr	r3, [sp, #20]
 800fc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f040 8093 	bne.w	800fd44 <_dtoa_r+0x8f4>
 800fc1e:	9b05      	ldr	r3, [sp, #20]
 800fc20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc24:	0d1b      	lsrs	r3, r3, #20
 800fc26:	051b      	lsls	r3, r3, #20
 800fc28:	b133      	cbz	r3, 800fc38 <_dtoa_r+0x7e8>
 800fc2a:	9b00      	ldr	r3, [sp, #0]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	9300      	str	r3, [sp, #0]
 800fc30:	9b06      	ldr	r3, [sp, #24]
 800fc32:	3301      	adds	r3, #1
 800fc34:	9306      	str	r3, [sp, #24]
 800fc36:	2301      	movs	r3, #1
 800fc38:	9308      	str	r3, [sp, #32]
 800fc3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 81b8 	beq.w	800ffb2 <_dtoa_r+0xb62>
 800fc42:	6923      	ldr	r3, [r4, #16]
 800fc44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc48:	6918      	ldr	r0, [r3, #16]
 800fc4a:	f000 fb79 	bl	8010340 <__hi0bits>
 800fc4e:	f1c0 0020 	rsb	r0, r0, #32
 800fc52:	9b06      	ldr	r3, [sp, #24]
 800fc54:	4418      	add	r0, r3
 800fc56:	f010 001f 	ands.w	r0, r0, #31
 800fc5a:	f000 8082 	beq.w	800fd62 <_dtoa_r+0x912>
 800fc5e:	f1c0 0320 	rsb	r3, r0, #32
 800fc62:	2b04      	cmp	r3, #4
 800fc64:	dd73      	ble.n	800fd4e <_dtoa_r+0x8fe>
 800fc66:	9b00      	ldr	r3, [sp, #0]
 800fc68:	f1c0 001c 	rsb	r0, r0, #28
 800fc6c:	4403      	add	r3, r0
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	9b06      	ldr	r3, [sp, #24]
 800fc72:	4403      	add	r3, r0
 800fc74:	4406      	add	r6, r0
 800fc76:	9306      	str	r3, [sp, #24]
 800fc78:	9b00      	ldr	r3, [sp, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	dd05      	ble.n	800fc8a <_dtoa_r+0x83a>
 800fc7e:	9902      	ldr	r1, [sp, #8]
 800fc80:	461a      	mov	r2, r3
 800fc82:	4648      	mov	r0, r9
 800fc84:	f000 fcba 	bl	80105fc <__lshift>
 800fc88:	9002      	str	r0, [sp, #8]
 800fc8a:	9b06      	ldr	r3, [sp, #24]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	dd05      	ble.n	800fc9c <_dtoa_r+0x84c>
 800fc90:	4621      	mov	r1, r4
 800fc92:	461a      	mov	r2, r3
 800fc94:	4648      	mov	r0, r9
 800fc96:	f000 fcb1 	bl	80105fc <__lshift>
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d061      	beq.n	800fd66 <_dtoa_r+0x916>
 800fca2:	9802      	ldr	r0, [sp, #8]
 800fca4:	4621      	mov	r1, r4
 800fca6:	f000 fd15 	bl	80106d4 <__mcmp>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	da5b      	bge.n	800fd66 <_dtoa_r+0x916>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	9902      	ldr	r1, [sp, #8]
 800fcb2:	220a      	movs	r2, #10
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	f000 fafd 	bl	80102b4 <__multadd>
 800fcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcbc:	9002      	str	r0, [sp, #8]
 800fcbe:	f107 38ff 	add.w	r8, r7, #4294967295
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f000 8177 	beq.w	800ffb6 <_dtoa_r+0xb66>
 800fcc8:	4629      	mov	r1, r5
 800fcca:	2300      	movs	r3, #0
 800fccc:	220a      	movs	r2, #10
 800fcce:	4648      	mov	r0, r9
 800fcd0:	f000 faf0 	bl	80102b4 <__multadd>
 800fcd4:	f1bb 0f00 	cmp.w	fp, #0
 800fcd8:	4605      	mov	r5, r0
 800fcda:	dc6f      	bgt.n	800fdbc <_dtoa_r+0x96c>
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	2b02      	cmp	r3, #2
 800fce0:	dc49      	bgt.n	800fd76 <_dtoa_r+0x926>
 800fce2:	e06b      	b.n	800fdbc <_dtoa_r+0x96c>
 800fce4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fce6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fcea:	e73c      	b.n	800fb66 <_dtoa_r+0x716>
 800fcec:	3fe00000 	.word	0x3fe00000
 800fcf0:	40240000 	.word	0x40240000
 800fcf4:	9b03      	ldr	r3, [sp, #12]
 800fcf6:	1e5c      	subs	r4, r3, #1
 800fcf8:	9b08      	ldr	r3, [sp, #32]
 800fcfa:	42a3      	cmp	r3, r4
 800fcfc:	db09      	blt.n	800fd12 <_dtoa_r+0x8c2>
 800fcfe:	1b1c      	subs	r4, r3, r4
 800fd00:	9b03      	ldr	r3, [sp, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f6bf af30 	bge.w	800fb68 <_dtoa_r+0x718>
 800fd08:	9b00      	ldr	r3, [sp, #0]
 800fd0a:	9a03      	ldr	r2, [sp, #12]
 800fd0c:	1a9e      	subs	r6, r3, r2
 800fd0e:	2300      	movs	r3, #0
 800fd10:	e72b      	b.n	800fb6a <_dtoa_r+0x71a>
 800fd12:	9b08      	ldr	r3, [sp, #32]
 800fd14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd16:	9408      	str	r4, [sp, #32]
 800fd18:	1ae3      	subs	r3, r4, r3
 800fd1a:	441a      	add	r2, r3
 800fd1c:	9e00      	ldr	r6, [sp, #0]
 800fd1e:	9b03      	ldr	r3, [sp, #12]
 800fd20:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd22:	2400      	movs	r4, #0
 800fd24:	e721      	b.n	800fb6a <_dtoa_r+0x71a>
 800fd26:	9c08      	ldr	r4, [sp, #32]
 800fd28:	9e00      	ldr	r6, [sp, #0]
 800fd2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fd2c:	e728      	b.n	800fb80 <_dtoa_r+0x730>
 800fd2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fd32:	e751      	b.n	800fbd8 <_dtoa_r+0x788>
 800fd34:	9a08      	ldr	r2, [sp, #32]
 800fd36:	9902      	ldr	r1, [sp, #8]
 800fd38:	e750      	b.n	800fbdc <_dtoa_r+0x78c>
 800fd3a:	f8cd 8008 	str.w	r8, [sp, #8]
 800fd3e:	e751      	b.n	800fbe4 <_dtoa_r+0x794>
 800fd40:	2300      	movs	r3, #0
 800fd42:	e779      	b.n	800fc38 <_dtoa_r+0x7e8>
 800fd44:	9b04      	ldr	r3, [sp, #16]
 800fd46:	e777      	b.n	800fc38 <_dtoa_r+0x7e8>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9308      	str	r3, [sp, #32]
 800fd4c:	e779      	b.n	800fc42 <_dtoa_r+0x7f2>
 800fd4e:	d093      	beq.n	800fc78 <_dtoa_r+0x828>
 800fd50:	9a00      	ldr	r2, [sp, #0]
 800fd52:	331c      	adds	r3, #28
 800fd54:	441a      	add	r2, r3
 800fd56:	9200      	str	r2, [sp, #0]
 800fd58:	9a06      	ldr	r2, [sp, #24]
 800fd5a:	441a      	add	r2, r3
 800fd5c:	441e      	add	r6, r3
 800fd5e:	9206      	str	r2, [sp, #24]
 800fd60:	e78a      	b.n	800fc78 <_dtoa_r+0x828>
 800fd62:	4603      	mov	r3, r0
 800fd64:	e7f4      	b.n	800fd50 <_dtoa_r+0x900>
 800fd66:	9b03      	ldr	r3, [sp, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	46b8      	mov	r8, r7
 800fd6c:	dc20      	bgt.n	800fdb0 <_dtoa_r+0x960>
 800fd6e:	469b      	mov	fp, r3
 800fd70:	9b07      	ldr	r3, [sp, #28]
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	dd1e      	ble.n	800fdb4 <_dtoa_r+0x964>
 800fd76:	f1bb 0f00 	cmp.w	fp, #0
 800fd7a:	f47f adb1 	bne.w	800f8e0 <_dtoa_r+0x490>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	465b      	mov	r3, fp
 800fd82:	2205      	movs	r2, #5
 800fd84:	4648      	mov	r0, r9
 800fd86:	f000 fa95 	bl	80102b4 <__multadd>
 800fd8a:	4601      	mov	r1, r0
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	9802      	ldr	r0, [sp, #8]
 800fd90:	f000 fca0 	bl	80106d4 <__mcmp>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f77f ada3 	ble.w	800f8e0 <_dtoa_r+0x490>
 800fd9a:	4656      	mov	r6, sl
 800fd9c:	2331      	movs	r3, #49	@ 0x31
 800fd9e:	f806 3b01 	strb.w	r3, [r6], #1
 800fda2:	f108 0801 	add.w	r8, r8, #1
 800fda6:	e59f      	b.n	800f8e8 <_dtoa_r+0x498>
 800fda8:	9c03      	ldr	r4, [sp, #12]
 800fdaa:	46b8      	mov	r8, r7
 800fdac:	4625      	mov	r5, r4
 800fdae:	e7f4      	b.n	800fd9a <_dtoa_r+0x94a>
 800fdb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fdb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f000 8101 	beq.w	800ffbe <_dtoa_r+0xb6e>
 800fdbc:	2e00      	cmp	r6, #0
 800fdbe:	dd05      	ble.n	800fdcc <_dtoa_r+0x97c>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4632      	mov	r2, r6
 800fdc4:	4648      	mov	r0, r9
 800fdc6:	f000 fc19 	bl	80105fc <__lshift>
 800fdca:	4605      	mov	r5, r0
 800fdcc:	9b08      	ldr	r3, [sp, #32]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d05c      	beq.n	800fe8c <_dtoa_r+0xa3c>
 800fdd2:	6869      	ldr	r1, [r5, #4]
 800fdd4:	4648      	mov	r0, r9
 800fdd6:	f000 fa0b 	bl	80101f0 <_Balloc>
 800fdda:	4606      	mov	r6, r0
 800fddc:	b928      	cbnz	r0, 800fdea <_dtoa_r+0x99a>
 800fdde:	4b82      	ldr	r3, [pc, #520]	@ (800ffe8 <_dtoa_r+0xb98>)
 800fde0:	4602      	mov	r2, r0
 800fde2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fde6:	f7ff bb4a 	b.w	800f47e <_dtoa_r+0x2e>
 800fdea:	692a      	ldr	r2, [r5, #16]
 800fdec:	3202      	adds	r2, #2
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	f105 010c 	add.w	r1, r5, #12
 800fdf4:	300c      	adds	r0, #12
 800fdf6:	f7ff fa92 	bl	800f31e <memcpy>
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4648      	mov	r0, r9
 800fe00:	f000 fbfc 	bl	80105fc <__lshift>
 800fe04:	f10a 0301 	add.w	r3, sl, #1
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	eb0a 030b 	add.w	r3, sl, fp
 800fe0e:	9308      	str	r3, [sp, #32]
 800fe10:	9b04      	ldr	r3, [sp, #16]
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	462f      	mov	r7, r5
 800fe18:	9306      	str	r3, [sp, #24]
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	9b00      	ldr	r3, [sp, #0]
 800fe1e:	9802      	ldr	r0, [sp, #8]
 800fe20:	4621      	mov	r1, r4
 800fe22:	f103 3bff 	add.w	fp, r3, #4294967295
 800fe26:	f7ff fa88 	bl	800f33a <quorem>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	3330      	adds	r3, #48	@ 0x30
 800fe2e:	9003      	str	r0, [sp, #12]
 800fe30:	4639      	mov	r1, r7
 800fe32:	9802      	ldr	r0, [sp, #8]
 800fe34:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe36:	f000 fc4d 	bl	80106d4 <__mcmp>
 800fe3a:	462a      	mov	r2, r5
 800fe3c:	9004      	str	r0, [sp, #16]
 800fe3e:	4621      	mov	r1, r4
 800fe40:	4648      	mov	r0, r9
 800fe42:	f000 fc63 	bl	801070c <__mdiff>
 800fe46:	68c2      	ldr	r2, [r0, #12]
 800fe48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	bb02      	cbnz	r2, 800fe90 <_dtoa_r+0xa40>
 800fe4e:	4601      	mov	r1, r0
 800fe50:	9802      	ldr	r0, [sp, #8]
 800fe52:	f000 fc3f 	bl	80106d4 <__mcmp>
 800fe56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe58:	4602      	mov	r2, r0
 800fe5a:	4631      	mov	r1, r6
 800fe5c:	4648      	mov	r0, r9
 800fe5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fe60:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe62:	f000 fa05 	bl	8010270 <_Bfree>
 800fe66:	9b07      	ldr	r3, [sp, #28]
 800fe68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fe6a:	9e00      	ldr	r6, [sp, #0]
 800fe6c:	ea42 0103 	orr.w	r1, r2, r3
 800fe70:	9b06      	ldr	r3, [sp, #24]
 800fe72:	4319      	orrs	r1, r3
 800fe74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe76:	d10d      	bne.n	800fe94 <_dtoa_r+0xa44>
 800fe78:	2b39      	cmp	r3, #57	@ 0x39
 800fe7a:	d027      	beq.n	800fecc <_dtoa_r+0xa7c>
 800fe7c:	9a04      	ldr	r2, [sp, #16]
 800fe7e:	2a00      	cmp	r2, #0
 800fe80:	dd01      	ble.n	800fe86 <_dtoa_r+0xa36>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	3331      	adds	r3, #49	@ 0x31
 800fe86:	f88b 3000 	strb.w	r3, [fp]
 800fe8a:	e52e      	b.n	800f8ea <_dtoa_r+0x49a>
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	e7b9      	b.n	800fe04 <_dtoa_r+0x9b4>
 800fe90:	2201      	movs	r2, #1
 800fe92:	e7e2      	b.n	800fe5a <_dtoa_r+0xa0a>
 800fe94:	9904      	ldr	r1, [sp, #16]
 800fe96:	2900      	cmp	r1, #0
 800fe98:	db04      	blt.n	800fea4 <_dtoa_r+0xa54>
 800fe9a:	9807      	ldr	r0, [sp, #28]
 800fe9c:	4301      	orrs	r1, r0
 800fe9e:	9806      	ldr	r0, [sp, #24]
 800fea0:	4301      	orrs	r1, r0
 800fea2:	d120      	bne.n	800fee6 <_dtoa_r+0xa96>
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	ddee      	ble.n	800fe86 <_dtoa_r+0xa36>
 800fea8:	9902      	ldr	r1, [sp, #8]
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	2201      	movs	r2, #1
 800feae:	4648      	mov	r0, r9
 800feb0:	f000 fba4 	bl	80105fc <__lshift>
 800feb4:	4621      	mov	r1, r4
 800feb6:	9002      	str	r0, [sp, #8]
 800feb8:	f000 fc0c 	bl	80106d4 <__mcmp>
 800febc:	2800      	cmp	r0, #0
 800febe:	9b00      	ldr	r3, [sp, #0]
 800fec0:	dc02      	bgt.n	800fec8 <_dtoa_r+0xa78>
 800fec2:	d1e0      	bne.n	800fe86 <_dtoa_r+0xa36>
 800fec4:	07da      	lsls	r2, r3, #31
 800fec6:	d5de      	bpl.n	800fe86 <_dtoa_r+0xa36>
 800fec8:	2b39      	cmp	r3, #57	@ 0x39
 800feca:	d1da      	bne.n	800fe82 <_dtoa_r+0xa32>
 800fecc:	2339      	movs	r3, #57	@ 0x39
 800fece:	f88b 3000 	strb.w	r3, [fp]
 800fed2:	4633      	mov	r3, r6
 800fed4:	461e      	mov	r6, r3
 800fed6:	3b01      	subs	r3, #1
 800fed8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fedc:	2a39      	cmp	r2, #57	@ 0x39
 800fede:	d04e      	beq.n	800ff7e <_dtoa_r+0xb2e>
 800fee0:	3201      	adds	r2, #1
 800fee2:	701a      	strb	r2, [r3, #0]
 800fee4:	e501      	b.n	800f8ea <_dtoa_r+0x49a>
 800fee6:	2a00      	cmp	r2, #0
 800fee8:	dd03      	ble.n	800fef2 <_dtoa_r+0xaa2>
 800feea:	2b39      	cmp	r3, #57	@ 0x39
 800feec:	d0ee      	beq.n	800fecc <_dtoa_r+0xa7c>
 800feee:	3301      	adds	r3, #1
 800fef0:	e7c9      	b.n	800fe86 <_dtoa_r+0xa36>
 800fef2:	9a00      	ldr	r2, [sp, #0]
 800fef4:	9908      	ldr	r1, [sp, #32]
 800fef6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fefa:	428a      	cmp	r2, r1
 800fefc:	d028      	beq.n	800ff50 <_dtoa_r+0xb00>
 800fefe:	9902      	ldr	r1, [sp, #8]
 800ff00:	2300      	movs	r3, #0
 800ff02:	220a      	movs	r2, #10
 800ff04:	4648      	mov	r0, r9
 800ff06:	f000 f9d5 	bl	80102b4 <__multadd>
 800ff0a:	42af      	cmp	r7, r5
 800ff0c:	9002      	str	r0, [sp, #8]
 800ff0e:	f04f 0300 	mov.w	r3, #0
 800ff12:	f04f 020a 	mov.w	r2, #10
 800ff16:	4639      	mov	r1, r7
 800ff18:	4648      	mov	r0, r9
 800ff1a:	d107      	bne.n	800ff2c <_dtoa_r+0xadc>
 800ff1c:	f000 f9ca 	bl	80102b4 <__multadd>
 800ff20:	4607      	mov	r7, r0
 800ff22:	4605      	mov	r5, r0
 800ff24:	9b00      	ldr	r3, [sp, #0]
 800ff26:	3301      	adds	r3, #1
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	e777      	b.n	800fe1c <_dtoa_r+0x9cc>
 800ff2c:	f000 f9c2 	bl	80102b4 <__multadd>
 800ff30:	4629      	mov	r1, r5
 800ff32:	4607      	mov	r7, r0
 800ff34:	2300      	movs	r3, #0
 800ff36:	220a      	movs	r2, #10
 800ff38:	4648      	mov	r0, r9
 800ff3a:	f000 f9bb 	bl	80102b4 <__multadd>
 800ff3e:	4605      	mov	r5, r0
 800ff40:	e7f0      	b.n	800ff24 <_dtoa_r+0xad4>
 800ff42:	f1bb 0f00 	cmp.w	fp, #0
 800ff46:	bfcc      	ite	gt
 800ff48:	465e      	movgt	r6, fp
 800ff4a:	2601      	movle	r6, #1
 800ff4c:	4456      	add	r6, sl
 800ff4e:	2700      	movs	r7, #0
 800ff50:	9902      	ldr	r1, [sp, #8]
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	2201      	movs	r2, #1
 800ff56:	4648      	mov	r0, r9
 800ff58:	f000 fb50 	bl	80105fc <__lshift>
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	9002      	str	r0, [sp, #8]
 800ff60:	f000 fbb8 	bl	80106d4 <__mcmp>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	dcb4      	bgt.n	800fed2 <_dtoa_r+0xa82>
 800ff68:	d102      	bne.n	800ff70 <_dtoa_r+0xb20>
 800ff6a:	9b00      	ldr	r3, [sp, #0]
 800ff6c:	07db      	lsls	r3, r3, #31
 800ff6e:	d4b0      	bmi.n	800fed2 <_dtoa_r+0xa82>
 800ff70:	4633      	mov	r3, r6
 800ff72:	461e      	mov	r6, r3
 800ff74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff78:	2a30      	cmp	r2, #48	@ 0x30
 800ff7a:	d0fa      	beq.n	800ff72 <_dtoa_r+0xb22>
 800ff7c:	e4b5      	b.n	800f8ea <_dtoa_r+0x49a>
 800ff7e:	459a      	cmp	sl, r3
 800ff80:	d1a8      	bne.n	800fed4 <_dtoa_r+0xa84>
 800ff82:	2331      	movs	r3, #49	@ 0x31
 800ff84:	f108 0801 	add.w	r8, r8, #1
 800ff88:	f88a 3000 	strb.w	r3, [sl]
 800ff8c:	e4ad      	b.n	800f8ea <_dtoa_r+0x49a>
 800ff8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ffec <_dtoa_r+0xb9c>
 800ff94:	b11b      	cbz	r3, 800ff9e <_dtoa_r+0xb4e>
 800ff96:	f10a 0308 	add.w	r3, sl, #8
 800ff9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ff9c:	6013      	str	r3, [r2, #0]
 800ff9e:	4650      	mov	r0, sl
 800ffa0:	b017      	add	sp, #92	@ 0x5c
 800ffa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa6:	9b07      	ldr	r3, [sp, #28]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	f77f ae2e 	ble.w	800fc0a <_dtoa_r+0x7ba>
 800ffae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffb0:	9308      	str	r3, [sp, #32]
 800ffb2:	2001      	movs	r0, #1
 800ffb4:	e64d      	b.n	800fc52 <_dtoa_r+0x802>
 800ffb6:	f1bb 0f00 	cmp.w	fp, #0
 800ffba:	f77f aed9 	ble.w	800fd70 <_dtoa_r+0x920>
 800ffbe:	4656      	mov	r6, sl
 800ffc0:	9802      	ldr	r0, [sp, #8]
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	f7ff f9b9 	bl	800f33a <quorem>
 800ffc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ffcc:	f806 3b01 	strb.w	r3, [r6], #1
 800ffd0:	eba6 020a 	sub.w	r2, r6, sl
 800ffd4:	4593      	cmp	fp, r2
 800ffd6:	ddb4      	ble.n	800ff42 <_dtoa_r+0xaf2>
 800ffd8:	9902      	ldr	r1, [sp, #8]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	220a      	movs	r2, #10
 800ffde:	4648      	mov	r0, r9
 800ffe0:	f000 f968 	bl	80102b4 <__multadd>
 800ffe4:	9002      	str	r0, [sp, #8]
 800ffe6:	e7eb      	b.n	800ffc0 <_dtoa_r+0xb70>
 800ffe8:	08012938 	.word	0x08012938
 800ffec:	080128bc 	.word	0x080128bc

0800fff0 <_free_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4605      	mov	r5, r0
 800fff4:	2900      	cmp	r1, #0
 800fff6:	d041      	beq.n	801007c <_free_r+0x8c>
 800fff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fffc:	1f0c      	subs	r4, r1, #4
 800fffe:	2b00      	cmp	r3, #0
 8010000:	bfb8      	it	lt
 8010002:	18e4      	addlt	r4, r4, r3
 8010004:	f000 f8e8 	bl	80101d8 <__malloc_lock>
 8010008:	4a1d      	ldr	r2, [pc, #116]	@ (8010080 <_free_r+0x90>)
 801000a:	6813      	ldr	r3, [r2, #0]
 801000c:	b933      	cbnz	r3, 801001c <_free_r+0x2c>
 801000e:	6063      	str	r3, [r4, #4]
 8010010:	6014      	str	r4, [r2, #0]
 8010012:	4628      	mov	r0, r5
 8010014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010018:	f000 b8e4 	b.w	80101e4 <__malloc_unlock>
 801001c:	42a3      	cmp	r3, r4
 801001e:	d908      	bls.n	8010032 <_free_r+0x42>
 8010020:	6820      	ldr	r0, [r4, #0]
 8010022:	1821      	adds	r1, r4, r0
 8010024:	428b      	cmp	r3, r1
 8010026:	bf01      	itttt	eq
 8010028:	6819      	ldreq	r1, [r3, #0]
 801002a:	685b      	ldreq	r3, [r3, #4]
 801002c:	1809      	addeq	r1, r1, r0
 801002e:	6021      	streq	r1, [r4, #0]
 8010030:	e7ed      	b.n	801000e <_free_r+0x1e>
 8010032:	461a      	mov	r2, r3
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	b10b      	cbz	r3, 801003c <_free_r+0x4c>
 8010038:	42a3      	cmp	r3, r4
 801003a:	d9fa      	bls.n	8010032 <_free_r+0x42>
 801003c:	6811      	ldr	r1, [r2, #0]
 801003e:	1850      	adds	r0, r2, r1
 8010040:	42a0      	cmp	r0, r4
 8010042:	d10b      	bne.n	801005c <_free_r+0x6c>
 8010044:	6820      	ldr	r0, [r4, #0]
 8010046:	4401      	add	r1, r0
 8010048:	1850      	adds	r0, r2, r1
 801004a:	4283      	cmp	r3, r0
 801004c:	6011      	str	r1, [r2, #0]
 801004e:	d1e0      	bne.n	8010012 <_free_r+0x22>
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	6053      	str	r3, [r2, #4]
 8010056:	4408      	add	r0, r1
 8010058:	6010      	str	r0, [r2, #0]
 801005a:	e7da      	b.n	8010012 <_free_r+0x22>
 801005c:	d902      	bls.n	8010064 <_free_r+0x74>
 801005e:	230c      	movs	r3, #12
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	e7d6      	b.n	8010012 <_free_r+0x22>
 8010064:	6820      	ldr	r0, [r4, #0]
 8010066:	1821      	adds	r1, r4, r0
 8010068:	428b      	cmp	r3, r1
 801006a:	bf04      	itt	eq
 801006c:	6819      	ldreq	r1, [r3, #0]
 801006e:	685b      	ldreq	r3, [r3, #4]
 8010070:	6063      	str	r3, [r4, #4]
 8010072:	bf04      	itt	eq
 8010074:	1809      	addeq	r1, r1, r0
 8010076:	6021      	streq	r1, [r4, #0]
 8010078:	6054      	str	r4, [r2, #4]
 801007a:	e7ca      	b.n	8010012 <_free_r+0x22>
 801007c:	bd38      	pop	{r3, r4, r5, pc}
 801007e:	bf00      	nop
 8010080:	20005580 	.word	0x20005580

08010084 <malloc>:
 8010084:	4b02      	ldr	r3, [pc, #8]	@ (8010090 <malloc+0xc>)
 8010086:	4601      	mov	r1, r0
 8010088:	6818      	ldr	r0, [r3, #0]
 801008a:	f000 b825 	b.w	80100d8 <_malloc_r>
 801008e:	bf00      	nop
 8010090:	20000114 	.word	0x20000114

08010094 <sbrk_aligned>:
 8010094:	b570      	push	{r4, r5, r6, lr}
 8010096:	4e0f      	ldr	r6, [pc, #60]	@ (80100d4 <sbrk_aligned+0x40>)
 8010098:	460c      	mov	r4, r1
 801009a:	6831      	ldr	r1, [r6, #0]
 801009c:	4605      	mov	r5, r0
 801009e:	b911      	cbnz	r1, 80100a6 <sbrk_aligned+0x12>
 80100a0:	f001 f81e 	bl	80110e0 <_sbrk_r>
 80100a4:	6030      	str	r0, [r6, #0]
 80100a6:	4621      	mov	r1, r4
 80100a8:	4628      	mov	r0, r5
 80100aa:	f001 f819 	bl	80110e0 <_sbrk_r>
 80100ae:	1c43      	adds	r3, r0, #1
 80100b0:	d103      	bne.n	80100ba <sbrk_aligned+0x26>
 80100b2:	f04f 34ff 	mov.w	r4, #4294967295
 80100b6:	4620      	mov	r0, r4
 80100b8:	bd70      	pop	{r4, r5, r6, pc}
 80100ba:	1cc4      	adds	r4, r0, #3
 80100bc:	f024 0403 	bic.w	r4, r4, #3
 80100c0:	42a0      	cmp	r0, r4
 80100c2:	d0f8      	beq.n	80100b6 <sbrk_aligned+0x22>
 80100c4:	1a21      	subs	r1, r4, r0
 80100c6:	4628      	mov	r0, r5
 80100c8:	f001 f80a 	bl	80110e0 <_sbrk_r>
 80100cc:	3001      	adds	r0, #1
 80100ce:	d1f2      	bne.n	80100b6 <sbrk_aligned+0x22>
 80100d0:	e7ef      	b.n	80100b2 <sbrk_aligned+0x1e>
 80100d2:	bf00      	nop
 80100d4:	2000557c 	.word	0x2000557c

080100d8 <_malloc_r>:
 80100d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100dc:	1ccd      	adds	r5, r1, #3
 80100de:	f025 0503 	bic.w	r5, r5, #3
 80100e2:	3508      	adds	r5, #8
 80100e4:	2d0c      	cmp	r5, #12
 80100e6:	bf38      	it	cc
 80100e8:	250c      	movcc	r5, #12
 80100ea:	2d00      	cmp	r5, #0
 80100ec:	4606      	mov	r6, r0
 80100ee:	db01      	blt.n	80100f4 <_malloc_r+0x1c>
 80100f0:	42a9      	cmp	r1, r5
 80100f2:	d904      	bls.n	80100fe <_malloc_r+0x26>
 80100f4:	230c      	movs	r3, #12
 80100f6:	6033      	str	r3, [r6, #0]
 80100f8:	2000      	movs	r0, #0
 80100fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101d4 <_malloc_r+0xfc>
 8010102:	f000 f869 	bl	80101d8 <__malloc_lock>
 8010106:	f8d8 3000 	ldr.w	r3, [r8]
 801010a:	461c      	mov	r4, r3
 801010c:	bb44      	cbnz	r4, 8010160 <_malloc_r+0x88>
 801010e:	4629      	mov	r1, r5
 8010110:	4630      	mov	r0, r6
 8010112:	f7ff ffbf 	bl	8010094 <sbrk_aligned>
 8010116:	1c43      	adds	r3, r0, #1
 8010118:	4604      	mov	r4, r0
 801011a:	d158      	bne.n	80101ce <_malloc_r+0xf6>
 801011c:	f8d8 4000 	ldr.w	r4, [r8]
 8010120:	4627      	mov	r7, r4
 8010122:	2f00      	cmp	r7, #0
 8010124:	d143      	bne.n	80101ae <_malloc_r+0xd6>
 8010126:	2c00      	cmp	r4, #0
 8010128:	d04b      	beq.n	80101c2 <_malloc_r+0xea>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	4639      	mov	r1, r7
 801012e:	4630      	mov	r0, r6
 8010130:	eb04 0903 	add.w	r9, r4, r3
 8010134:	f000 ffd4 	bl	80110e0 <_sbrk_r>
 8010138:	4581      	cmp	r9, r0
 801013a:	d142      	bne.n	80101c2 <_malloc_r+0xea>
 801013c:	6821      	ldr	r1, [r4, #0]
 801013e:	1a6d      	subs	r5, r5, r1
 8010140:	4629      	mov	r1, r5
 8010142:	4630      	mov	r0, r6
 8010144:	f7ff ffa6 	bl	8010094 <sbrk_aligned>
 8010148:	3001      	adds	r0, #1
 801014a:	d03a      	beq.n	80101c2 <_malloc_r+0xea>
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	442b      	add	r3, r5
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	f8d8 3000 	ldr.w	r3, [r8]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	bb62      	cbnz	r2, 80101b4 <_malloc_r+0xdc>
 801015a:	f8c8 7000 	str.w	r7, [r8]
 801015e:	e00f      	b.n	8010180 <_malloc_r+0xa8>
 8010160:	6822      	ldr	r2, [r4, #0]
 8010162:	1b52      	subs	r2, r2, r5
 8010164:	d420      	bmi.n	80101a8 <_malloc_r+0xd0>
 8010166:	2a0b      	cmp	r2, #11
 8010168:	d917      	bls.n	801019a <_malloc_r+0xc2>
 801016a:	1961      	adds	r1, r4, r5
 801016c:	42a3      	cmp	r3, r4
 801016e:	6025      	str	r5, [r4, #0]
 8010170:	bf18      	it	ne
 8010172:	6059      	strne	r1, [r3, #4]
 8010174:	6863      	ldr	r3, [r4, #4]
 8010176:	bf08      	it	eq
 8010178:	f8c8 1000 	streq.w	r1, [r8]
 801017c:	5162      	str	r2, [r4, r5]
 801017e:	604b      	str	r3, [r1, #4]
 8010180:	4630      	mov	r0, r6
 8010182:	f000 f82f 	bl	80101e4 <__malloc_unlock>
 8010186:	f104 000b 	add.w	r0, r4, #11
 801018a:	1d23      	adds	r3, r4, #4
 801018c:	f020 0007 	bic.w	r0, r0, #7
 8010190:	1ac2      	subs	r2, r0, r3
 8010192:	bf1c      	itt	ne
 8010194:	1a1b      	subne	r3, r3, r0
 8010196:	50a3      	strne	r3, [r4, r2]
 8010198:	e7af      	b.n	80100fa <_malloc_r+0x22>
 801019a:	6862      	ldr	r2, [r4, #4]
 801019c:	42a3      	cmp	r3, r4
 801019e:	bf0c      	ite	eq
 80101a0:	f8c8 2000 	streq.w	r2, [r8]
 80101a4:	605a      	strne	r2, [r3, #4]
 80101a6:	e7eb      	b.n	8010180 <_malloc_r+0xa8>
 80101a8:	4623      	mov	r3, r4
 80101aa:	6864      	ldr	r4, [r4, #4]
 80101ac:	e7ae      	b.n	801010c <_malloc_r+0x34>
 80101ae:	463c      	mov	r4, r7
 80101b0:	687f      	ldr	r7, [r7, #4]
 80101b2:	e7b6      	b.n	8010122 <_malloc_r+0x4a>
 80101b4:	461a      	mov	r2, r3
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	42a3      	cmp	r3, r4
 80101ba:	d1fb      	bne.n	80101b4 <_malloc_r+0xdc>
 80101bc:	2300      	movs	r3, #0
 80101be:	6053      	str	r3, [r2, #4]
 80101c0:	e7de      	b.n	8010180 <_malloc_r+0xa8>
 80101c2:	230c      	movs	r3, #12
 80101c4:	6033      	str	r3, [r6, #0]
 80101c6:	4630      	mov	r0, r6
 80101c8:	f000 f80c 	bl	80101e4 <__malloc_unlock>
 80101cc:	e794      	b.n	80100f8 <_malloc_r+0x20>
 80101ce:	6005      	str	r5, [r0, #0]
 80101d0:	e7d6      	b.n	8010180 <_malloc_r+0xa8>
 80101d2:	bf00      	nop
 80101d4:	20005580 	.word	0x20005580

080101d8 <__malloc_lock>:
 80101d8:	4801      	ldr	r0, [pc, #4]	@ (80101e0 <__malloc_lock+0x8>)
 80101da:	f7ff b89e 	b.w	800f31a <__retarget_lock_acquire_recursive>
 80101de:	bf00      	nop
 80101e0:	20005578 	.word	0x20005578

080101e4 <__malloc_unlock>:
 80101e4:	4801      	ldr	r0, [pc, #4]	@ (80101ec <__malloc_unlock+0x8>)
 80101e6:	f7ff b899 	b.w	800f31c <__retarget_lock_release_recursive>
 80101ea:	bf00      	nop
 80101ec:	20005578 	.word	0x20005578

080101f0 <_Balloc>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	69c6      	ldr	r6, [r0, #28]
 80101f4:	4604      	mov	r4, r0
 80101f6:	460d      	mov	r5, r1
 80101f8:	b976      	cbnz	r6, 8010218 <_Balloc+0x28>
 80101fa:	2010      	movs	r0, #16
 80101fc:	f7ff ff42 	bl	8010084 <malloc>
 8010200:	4602      	mov	r2, r0
 8010202:	61e0      	str	r0, [r4, #28]
 8010204:	b920      	cbnz	r0, 8010210 <_Balloc+0x20>
 8010206:	4b18      	ldr	r3, [pc, #96]	@ (8010268 <_Balloc+0x78>)
 8010208:	4818      	ldr	r0, [pc, #96]	@ (801026c <_Balloc+0x7c>)
 801020a:	216b      	movs	r1, #107	@ 0x6b
 801020c:	f000 ff78 	bl	8011100 <__assert_func>
 8010210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010214:	6006      	str	r6, [r0, #0]
 8010216:	60c6      	str	r6, [r0, #12]
 8010218:	69e6      	ldr	r6, [r4, #28]
 801021a:	68f3      	ldr	r3, [r6, #12]
 801021c:	b183      	cbz	r3, 8010240 <_Balloc+0x50>
 801021e:	69e3      	ldr	r3, [r4, #28]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010226:	b9b8      	cbnz	r0, 8010258 <_Balloc+0x68>
 8010228:	2101      	movs	r1, #1
 801022a:	fa01 f605 	lsl.w	r6, r1, r5
 801022e:	1d72      	adds	r2, r6, #5
 8010230:	0092      	lsls	r2, r2, #2
 8010232:	4620      	mov	r0, r4
 8010234:	f000 ff82 	bl	801113c <_calloc_r>
 8010238:	b160      	cbz	r0, 8010254 <_Balloc+0x64>
 801023a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801023e:	e00e      	b.n	801025e <_Balloc+0x6e>
 8010240:	2221      	movs	r2, #33	@ 0x21
 8010242:	2104      	movs	r1, #4
 8010244:	4620      	mov	r0, r4
 8010246:	f000 ff79 	bl	801113c <_calloc_r>
 801024a:	69e3      	ldr	r3, [r4, #28]
 801024c:	60f0      	str	r0, [r6, #12]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e4      	bne.n	801021e <_Balloc+0x2e>
 8010254:	2000      	movs	r0, #0
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	6802      	ldr	r2, [r0, #0]
 801025a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801025e:	2300      	movs	r3, #0
 8010260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010264:	e7f7      	b.n	8010256 <_Balloc+0x66>
 8010266:	bf00      	nop
 8010268:	080128c9 	.word	0x080128c9
 801026c:	08012949 	.word	0x08012949

08010270 <_Bfree>:
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	69c6      	ldr	r6, [r0, #28]
 8010274:	4605      	mov	r5, r0
 8010276:	460c      	mov	r4, r1
 8010278:	b976      	cbnz	r6, 8010298 <_Bfree+0x28>
 801027a:	2010      	movs	r0, #16
 801027c:	f7ff ff02 	bl	8010084 <malloc>
 8010280:	4602      	mov	r2, r0
 8010282:	61e8      	str	r0, [r5, #28]
 8010284:	b920      	cbnz	r0, 8010290 <_Bfree+0x20>
 8010286:	4b09      	ldr	r3, [pc, #36]	@ (80102ac <_Bfree+0x3c>)
 8010288:	4809      	ldr	r0, [pc, #36]	@ (80102b0 <_Bfree+0x40>)
 801028a:	218f      	movs	r1, #143	@ 0x8f
 801028c:	f000 ff38 	bl	8011100 <__assert_func>
 8010290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010294:	6006      	str	r6, [r0, #0]
 8010296:	60c6      	str	r6, [r0, #12]
 8010298:	b13c      	cbz	r4, 80102aa <_Bfree+0x3a>
 801029a:	69eb      	ldr	r3, [r5, #28]
 801029c:	6862      	ldr	r2, [r4, #4]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102a4:	6021      	str	r1, [r4, #0]
 80102a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	080128c9 	.word	0x080128c9
 80102b0:	08012949 	.word	0x08012949

080102b4 <__multadd>:
 80102b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b8:	690d      	ldr	r5, [r1, #16]
 80102ba:	4607      	mov	r7, r0
 80102bc:	460c      	mov	r4, r1
 80102be:	461e      	mov	r6, r3
 80102c0:	f101 0c14 	add.w	ip, r1, #20
 80102c4:	2000      	movs	r0, #0
 80102c6:	f8dc 3000 	ldr.w	r3, [ip]
 80102ca:	b299      	uxth	r1, r3
 80102cc:	fb02 6101 	mla	r1, r2, r1, r6
 80102d0:	0c1e      	lsrs	r6, r3, #16
 80102d2:	0c0b      	lsrs	r3, r1, #16
 80102d4:	fb02 3306 	mla	r3, r2, r6, r3
 80102d8:	b289      	uxth	r1, r1
 80102da:	3001      	adds	r0, #1
 80102dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102e0:	4285      	cmp	r5, r0
 80102e2:	f84c 1b04 	str.w	r1, [ip], #4
 80102e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102ea:	dcec      	bgt.n	80102c6 <__multadd+0x12>
 80102ec:	b30e      	cbz	r6, 8010332 <__multadd+0x7e>
 80102ee:	68a3      	ldr	r3, [r4, #8]
 80102f0:	42ab      	cmp	r3, r5
 80102f2:	dc19      	bgt.n	8010328 <__multadd+0x74>
 80102f4:	6861      	ldr	r1, [r4, #4]
 80102f6:	4638      	mov	r0, r7
 80102f8:	3101      	adds	r1, #1
 80102fa:	f7ff ff79 	bl	80101f0 <_Balloc>
 80102fe:	4680      	mov	r8, r0
 8010300:	b928      	cbnz	r0, 801030e <__multadd+0x5a>
 8010302:	4602      	mov	r2, r0
 8010304:	4b0c      	ldr	r3, [pc, #48]	@ (8010338 <__multadd+0x84>)
 8010306:	480d      	ldr	r0, [pc, #52]	@ (801033c <__multadd+0x88>)
 8010308:	21ba      	movs	r1, #186	@ 0xba
 801030a:	f000 fef9 	bl	8011100 <__assert_func>
 801030e:	6922      	ldr	r2, [r4, #16]
 8010310:	3202      	adds	r2, #2
 8010312:	f104 010c 	add.w	r1, r4, #12
 8010316:	0092      	lsls	r2, r2, #2
 8010318:	300c      	adds	r0, #12
 801031a:	f7ff f800 	bl	800f31e <memcpy>
 801031e:	4621      	mov	r1, r4
 8010320:	4638      	mov	r0, r7
 8010322:	f7ff ffa5 	bl	8010270 <_Bfree>
 8010326:	4644      	mov	r4, r8
 8010328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801032c:	3501      	adds	r5, #1
 801032e:	615e      	str	r6, [r3, #20]
 8010330:	6125      	str	r5, [r4, #16]
 8010332:	4620      	mov	r0, r4
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	08012938 	.word	0x08012938
 801033c:	08012949 	.word	0x08012949

08010340 <__hi0bits>:
 8010340:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010344:	4603      	mov	r3, r0
 8010346:	bf36      	itet	cc
 8010348:	0403      	lslcc	r3, r0, #16
 801034a:	2000      	movcs	r0, #0
 801034c:	2010      	movcc	r0, #16
 801034e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010352:	bf3c      	itt	cc
 8010354:	021b      	lslcc	r3, r3, #8
 8010356:	3008      	addcc	r0, #8
 8010358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801035c:	bf3c      	itt	cc
 801035e:	011b      	lslcc	r3, r3, #4
 8010360:	3004      	addcc	r0, #4
 8010362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010366:	bf3c      	itt	cc
 8010368:	009b      	lslcc	r3, r3, #2
 801036a:	3002      	addcc	r0, #2
 801036c:	2b00      	cmp	r3, #0
 801036e:	db05      	blt.n	801037c <__hi0bits+0x3c>
 8010370:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010374:	f100 0001 	add.w	r0, r0, #1
 8010378:	bf08      	it	eq
 801037a:	2020      	moveq	r0, #32
 801037c:	4770      	bx	lr

0801037e <__lo0bits>:
 801037e:	6803      	ldr	r3, [r0, #0]
 8010380:	4602      	mov	r2, r0
 8010382:	f013 0007 	ands.w	r0, r3, #7
 8010386:	d00b      	beq.n	80103a0 <__lo0bits+0x22>
 8010388:	07d9      	lsls	r1, r3, #31
 801038a:	d421      	bmi.n	80103d0 <__lo0bits+0x52>
 801038c:	0798      	lsls	r0, r3, #30
 801038e:	bf49      	itett	mi
 8010390:	085b      	lsrmi	r3, r3, #1
 8010392:	089b      	lsrpl	r3, r3, #2
 8010394:	2001      	movmi	r0, #1
 8010396:	6013      	strmi	r3, [r2, #0]
 8010398:	bf5c      	itt	pl
 801039a:	6013      	strpl	r3, [r2, #0]
 801039c:	2002      	movpl	r0, #2
 801039e:	4770      	bx	lr
 80103a0:	b299      	uxth	r1, r3
 80103a2:	b909      	cbnz	r1, 80103a8 <__lo0bits+0x2a>
 80103a4:	0c1b      	lsrs	r3, r3, #16
 80103a6:	2010      	movs	r0, #16
 80103a8:	b2d9      	uxtb	r1, r3
 80103aa:	b909      	cbnz	r1, 80103b0 <__lo0bits+0x32>
 80103ac:	3008      	adds	r0, #8
 80103ae:	0a1b      	lsrs	r3, r3, #8
 80103b0:	0719      	lsls	r1, r3, #28
 80103b2:	bf04      	itt	eq
 80103b4:	091b      	lsreq	r3, r3, #4
 80103b6:	3004      	addeq	r0, #4
 80103b8:	0799      	lsls	r1, r3, #30
 80103ba:	bf04      	itt	eq
 80103bc:	089b      	lsreq	r3, r3, #2
 80103be:	3002      	addeq	r0, #2
 80103c0:	07d9      	lsls	r1, r3, #31
 80103c2:	d403      	bmi.n	80103cc <__lo0bits+0x4e>
 80103c4:	085b      	lsrs	r3, r3, #1
 80103c6:	f100 0001 	add.w	r0, r0, #1
 80103ca:	d003      	beq.n	80103d4 <__lo0bits+0x56>
 80103cc:	6013      	str	r3, [r2, #0]
 80103ce:	4770      	bx	lr
 80103d0:	2000      	movs	r0, #0
 80103d2:	4770      	bx	lr
 80103d4:	2020      	movs	r0, #32
 80103d6:	4770      	bx	lr

080103d8 <__i2b>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	460c      	mov	r4, r1
 80103dc:	2101      	movs	r1, #1
 80103de:	f7ff ff07 	bl	80101f0 <_Balloc>
 80103e2:	4602      	mov	r2, r0
 80103e4:	b928      	cbnz	r0, 80103f2 <__i2b+0x1a>
 80103e6:	4b05      	ldr	r3, [pc, #20]	@ (80103fc <__i2b+0x24>)
 80103e8:	4805      	ldr	r0, [pc, #20]	@ (8010400 <__i2b+0x28>)
 80103ea:	f240 1145 	movw	r1, #325	@ 0x145
 80103ee:	f000 fe87 	bl	8011100 <__assert_func>
 80103f2:	2301      	movs	r3, #1
 80103f4:	6144      	str	r4, [r0, #20]
 80103f6:	6103      	str	r3, [r0, #16]
 80103f8:	bd10      	pop	{r4, pc}
 80103fa:	bf00      	nop
 80103fc:	08012938 	.word	0x08012938
 8010400:	08012949 	.word	0x08012949

08010404 <__multiply>:
 8010404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010408:	4617      	mov	r7, r2
 801040a:	690a      	ldr	r2, [r1, #16]
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	429a      	cmp	r2, r3
 8010410:	bfa8      	it	ge
 8010412:	463b      	movge	r3, r7
 8010414:	4689      	mov	r9, r1
 8010416:	bfa4      	itt	ge
 8010418:	460f      	movge	r7, r1
 801041a:	4699      	movge	r9, r3
 801041c:	693d      	ldr	r5, [r7, #16]
 801041e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	6879      	ldr	r1, [r7, #4]
 8010426:	eb05 060a 	add.w	r6, r5, sl
 801042a:	42b3      	cmp	r3, r6
 801042c:	b085      	sub	sp, #20
 801042e:	bfb8      	it	lt
 8010430:	3101      	addlt	r1, #1
 8010432:	f7ff fedd 	bl	80101f0 <_Balloc>
 8010436:	b930      	cbnz	r0, 8010446 <__multiply+0x42>
 8010438:	4602      	mov	r2, r0
 801043a:	4b41      	ldr	r3, [pc, #260]	@ (8010540 <__multiply+0x13c>)
 801043c:	4841      	ldr	r0, [pc, #260]	@ (8010544 <__multiply+0x140>)
 801043e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010442:	f000 fe5d 	bl	8011100 <__assert_func>
 8010446:	f100 0414 	add.w	r4, r0, #20
 801044a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801044e:	4623      	mov	r3, r4
 8010450:	2200      	movs	r2, #0
 8010452:	4573      	cmp	r3, lr
 8010454:	d320      	bcc.n	8010498 <__multiply+0x94>
 8010456:	f107 0814 	add.w	r8, r7, #20
 801045a:	f109 0114 	add.w	r1, r9, #20
 801045e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010462:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010466:	9302      	str	r3, [sp, #8]
 8010468:	1beb      	subs	r3, r5, r7
 801046a:	3b15      	subs	r3, #21
 801046c:	f023 0303 	bic.w	r3, r3, #3
 8010470:	3304      	adds	r3, #4
 8010472:	3715      	adds	r7, #21
 8010474:	42bd      	cmp	r5, r7
 8010476:	bf38      	it	cc
 8010478:	2304      	movcc	r3, #4
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	9b02      	ldr	r3, [sp, #8]
 801047e:	9103      	str	r1, [sp, #12]
 8010480:	428b      	cmp	r3, r1
 8010482:	d80c      	bhi.n	801049e <__multiply+0x9a>
 8010484:	2e00      	cmp	r6, #0
 8010486:	dd03      	ble.n	8010490 <__multiply+0x8c>
 8010488:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801048c:	2b00      	cmp	r3, #0
 801048e:	d055      	beq.n	801053c <__multiply+0x138>
 8010490:	6106      	str	r6, [r0, #16]
 8010492:	b005      	add	sp, #20
 8010494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010498:	f843 2b04 	str.w	r2, [r3], #4
 801049c:	e7d9      	b.n	8010452 <__multiply+0x4e>
 801049e:	f8b1 a000 	ldrh.w	sl, [r1]
 80104a2:	f1ba 0f00 	cmp.w	sl, #0
 80104a6:	d01f      	beq.n	80104e8 <__multiply+0xe4>
 80104a8:	46c4      	mov	ip, r8
 80104aa:	46a1      	mov	r9, r4
 80104ac:	2700      	movs	r7, #0
 80104ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80104b2:	f8d9 3000 	ldr.w	r3, [r9]
 80104b6:	fa1f fb82 	uxth.w	fp, r2
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80104c0:	443b      	add	r3, r7
 80104c2:	f8d9 7000 	ldr.w	r7, [r9]
 80104c6:	0c12      	lsrs	r2, r2, #16
 80104c8:	0c3f      	lsrs	r7, r7, #16
 80104ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80104ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104d8:	4565      	cmp	r5, ip
 80104da:	f849 3b04 	str.w	r3, [r9], #4
 80104de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80104e2:	d8e4      	bhi.n	80104ae <__multiply+0xaa>
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	50e7      	str	r7, [r4, r3]
 80104e8:	9b03      	ldr	r3, [sp, #12]
 80104ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104ee:	3104      	adds	r1, #4
 80104f0:	f1b9 0f00 	cmp.w	r9, #0
 80104f4:	d020      	beq.n	8010538 <__multiply+0x134>
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	4647      	mov	r7, r8
 80104fa:	46a4      	mov	ip, r4
 80104fc:	f04f 0a00 	mov.w	sl, #0
 8010500:	f8b7 b000 	ldrh.w	fp, [r7]
 8010504:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010508:	fb09 220b 	mla	r2, r9, fp, r2
 801050c:	4452      	add	r2, sl
 801050e:	b29b      	uxth	r3, r3
 8010510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010514:	f84c 3b04 	str.w	r3, [ip], #4
 8010518:	f857 3b04 	ldr.w	r3, [r7], #4
 801051c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010520:	f8bc 3000 	ldrh.w	r3, [ip]
 8010524:	fb09 330a 	mla	r3, r9, sl, r3
 8010528:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801052c:	42bd      	cmp	r5, r7
 801052e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010532:	d8e5      	bhi.n	8010500 <__multiply+0xfc>
 8010534:	9a01      	ldr	r2, [sp, #4]
 8010536:	50a3      	str	r3, [r4, r2]
 8010538:	3404      	adds	r4, #4
 801053a:	e79f      	b.n	801047c <__multiply+0x78>
 801053c:	3e01      	subs	r6, #1
 801053e:	e7a1      	b.n	8010484 <__multiply+0x80>
 8010540:	08012938 	.word	0x08012938
 8010544:	08012949 	.word	0x08012949

08010548 <__pow5mult>:
 8010548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801054c:	4615      	mov	r5, r2
 801054e:	f012 0203 	ands.w	r2, r2, #3
 8010552:	4607      	mov	r7, r0
 8010554:	460e      	mov	r6, r1
 8010556:	d007      	beq.n	8010568 <__pow5mult+0x20>
 8010558:	4c25      	ldr	r4, [pc, #148]	@ (80105f0 <__pow5mult+0xa8>)
 801055a:	3a01      	subs	r2, #1
 801055c:	2300      	movs	r3, #0
 801055e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010562:	f7ff fea7 	bl	80102b4 <__multadd>
 8010566:	4606      	mov	r6, r0
 8010568:	10ad      	asrs	r5, r5, #2
 801056a:	d03d      	beq.n	80105e8 <__pow5mult+0xa0>
 801056c:	69fc      	ldr	r4, [r7, #28]
 801056e:	b97c      	cbnz	r4, 8010590 <__pow5mult+0x48>
 8010570:	2010      	movs	r0, #16
 8010572:	f7ff fd87 	bl	8010084 <malloc>
 8010576:	4602      	mov	r2, r0
 8010578:	61f8      	str	r0, [r7, #28]
 801057a:	b928      	cbnz	r0, 8010588 <__pow5mult+0x40>
 801057c:	4b1d      	ldr	r3, [pc, #116]	@ (80105f4 <__pow5mult+0xac>)
 801057e:	481e      	ldr	r0, [pc, #120]	@ (80105f8 <__pow5mult+0xb0>)
 8010580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010584:	f000 fdbc 	bl	8011100 <__assert_func>
 8010588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801058c:	6004      	str	r4, [r0, #0]
 801058e:	60c4      	str	r4, [r0, #12]
 8010590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010598:	b94c      	cbnz	r4, 80105ae <__pow5mult+0x66>
 801059a:	f240 2171 	movw	r1, #625	@ 0x271
 801059e:	4638      	mov	r0, r7
 80105a0:	f7ff ff1a 	bl	80103d8 <__i2b>
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80105aa:	4604      	mov	r4, r0
 80105ac:	6003      	str	r3, [r0, #0]
 80105ae:	f04f 0900 	mov.w	r9, #0
 80105b2:	07eb      	lsls	r3, r5, #31
 80105b4:	d50a      	bpl.n	80105cc <__pow5mult+0x84>
 80105b6:	4631      	mov	r1, r6
 80105b8:	4622      	mov	r2, r4
 80105ba:	4638      	mov	r0, r7
 80105bc:	f7ff ff22 	bl	8010404 <__multiply>
 80105c0:	4631      	mov	r1, r6
 80105c2:	4680      	mov	r8, r0
 80105c4:	4638      	mov	r0, r7
 80105c6:	f7ff fe53 	bl	8010270 <_Bfree>
 80105ca:	4646      	mov	r6, r8
 80105cc:	106d      	asrs	r5, r5, #1
 80105ce:	d00b      	beq.n	80105e8 <__pow5mult+0xa0>
 80105d0:	6820      	ldr	r0, [r4, #0]
 80105d2:	b938      	cbnz	r0, 80105e4 <__pow5mult+0x9c>
 80105d4:	4622      	mov	r2, r4
 80105d6:	4621      	mov	r1, r4
 80105d8:	4638      	mov	r0, r7
 80105da:	f7ff ff13 	bl	8010404 <__multiply>
 80105de:	6020      	str	r0, [r4, #0]
 80105e0:	f8c0 9000 	str.w	r9, [r0]
 80105e4:	4604      	mov	r4, r0
 80105e6:	e7e4      	b.n	80105b2 <__pow5mult+0x6a>
 80105e8:	4630      	mov	r0, r6
 80105ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ee:	bf00      	nop
 80105f0:	080129fc 	.word	0x080129fc
 80105f4:	080128c9 	.word	0x080128c9
 80105f8:	08012949 	.word	0x08012949

080105fc <__lshift>:
 80105fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	460c      	mov	r4, r1
 8010602:	6849      	ldr	r1, [r1, #4]
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801060a:	68a3      	ldr	r3, [r4, #8]
 801060c:	4607      	mov	r7, r0
 801060e:	4691      	mov	r9, r2
 8010610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010614:	f108 0601 	add.w	r6, r8, #1
 8010618:	42b3      	cmp	r3, r6
 801061a:	db0b      	blt.n	8010634 <__lshift+0x38>
 801061c:	4638      	mov	r0, r7
 801061e:	f7ff fde7 	bl	80101f0 <_Balloc>
 8010622:	4605      	mov	r5, r0
 8010624:	b948      	cbnz	r0, 801063a <__lshift+0x3e>
 8010626:	4602      	mov	r2, r0
 8010628:	4b28      	ldr	r3, [pc, #160]	@ (80106cc <__lshift+0xd0>)
 801062a:	4829      	ldr	r0, [pc, #164]	@ (80106d0 <__lshift+0xd4>)
 801062c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010630:	f000 fd66 	bl	8011100 <__assert_func>
 8010634:	3101      	adds	r1, #1
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	e7ee      	b.n	8010618 <__lshift+0x1c>
 801063a:	2300      	movs	r3, #0
 801063c:	f100 0114 	add.w	r1, r0, #20
 8010640:	f100 0210 	add.w	r2, r0, #16
 8010644:	4618      	mov	r0, r3
 8010646:	4553      	cmp	r3, sl
 8010648:	db33      	blt.n	80106b2 <__lshift+0xb6>
 801064a:	6920      	ldr	r0, [r4, #16]
 801064c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010650:	f104 0314 	add.w	r3, r4, #20
 8010654:	f019 091f 	ands.w	r9, r9, #31
 8010658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801065c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010660:	d02b      	beq.n	80106ba <__lshift+0xbe>
 8010662:	f1c9 0e20 	rsb	lr, r9, #32
 8010666:	468a      	mov	sl, r1
 8010668:	2200      	movs	r2, #0
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	fa00 f009 	lsl.w	r0, r0, r9
 8010670:	4310      	orrs	r0, r2
 8010672:	f84a 0b04 	str.w	r0, [sl], #4
 8010676:	f853 2b04 	ldr.w	r2, [r3], #4
 801067a:	459c      	cmp	ip, r3
 801067c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010680:	d8f3      	bhi.n	801066a <__lshift+0x6e>
 8010682:	ebac 0304 	sub.w	r3, ip, r4
 8010686:	3b15      	subs	r3, #21
 8010688:	f023 0303 	bic.w	r3, r3, #3
 801068c:	3304      	adds	r3, #4
 801068e:	f104 0015 	add.w	r0, r4, #21
 8010692:	4560      	cmp	r0, ip
 8010694:	bf88      	it	hi
 8010696:	2304      	movhi	r3, #4
 8010698:	50ca      	str	r2, [r1, r3]
 801069a:	b10a      	cbz	r2, 80106a0 <__lshift+0xa4>
 801069c:	f108 0602 	add.w	r6, r8, #2
 80106a0:	3e01      	subs	r6, #1
 80106a2:	4638      	mov	r0, r7
 80106a4:	612e      	str	r6, [r5, #16]
 80106a6:	4621      	mov	r1, r4
 80106a8:	f7ff fde2 	bl	8010270 <_Bfree>
 80106ac:	4628      	mov	r0, r5
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80106b6:	3301      	adds	r3, #1
 80106b8:	e7c5      	b.n	8010646 <__lshift+0x4a>
 80106ba:	3904      	subs	r1, #4
 80106bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80106c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80106c4:	459c      	cmp	ip, r3
 80106c6:	d8f9      	bhi.n	80106bc <__lshift+0xc0>
 80106c8:	e7ea      	b.n	80106a0 <__lshift+0xa4>
 80106ca:	bf00      	nop
 80106cc:	08012938 	.word	0x08012938
 80106d0:	08012949 	.word	0x08012949

080106d4 <__mcmp>:
 80106d4:	690a      	ldr	r2, [r1, #16]
 80106d6:	4603      	mov	r3, r0
 80106d8:	6900      	ldr	r0, [r0, #16]
 80106da:	1a80      	subs	r0, r0, r2
 80106dc:	b530      	push	{r4, r5, lr}
 80106de:	d10e      	bne.n	80106fe <__mcmp+0x2a>
 80106e0:	3314      	adds	r3, #20
 80106e2:	3114      	adds	r1, #20
 80106e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106f4:	4295      	cmp	r5, r2
 80106f6:	d003      	beq.n	8010700 <__mcmp+0x2c>
 80106f8:	d205      	bcs.n	8010706 <__mcmp+0x32>
 80106fa:	f04f 30ff 	mov.w	r0, #4294967295
 80106fe:	bd30      	pop	{r4, r5, pc}
 8010700:	42a3      	cmp	r3, r4
 8010702:	d3f3      	bcc.n	80106ec <__mcmp+0x18>
 8010704:	e7fb      	b.n	80106fe <__mcmp+0x2a>
 8010706:	2001      	movs	r0, #1
 8010708:	e7f9      	b.n	80106fe <__mcmp+0x2a>
	...

0801070c <__mdiff>:
 801070c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	4689      	mov	r9, r1
 8010712:	4606      	mov	r6, r0
 8010714:	4611      	mov	r1, r2
 8010716:	4648      	mov	r0, r9
 8010718:	4614      	mov	r4, r2
 801071a:	f7ff ffdb 	bl	80106d4 <__mcmp>
 801071e:	1e05      	subs	r5, r0, #0
 8010720:	d112      	bne.n	8010748 <__mdiff+0x3c>
 8010722:	4629      	mov	r1, r5
 8010724:	4630      	mov	r0, r6
 8010726:	f7ff fd63 	bl	80101f0 <_Balloc>
 801072a:	4602      	mov	r2, r0
 801072c:	b928      	cbnz	r0, 801073a <__mdiff+0x2e>
 801072e:	4b3f      	ldr	r3, [pc, #252]	@ (801082c <__mdiff+0x120>)
 8010730:	f240 2137 	movw	r1, #567	@ 0x237
 8010734:	483e      	ldr	r0, [pc, #248]	@ (8010830 <__mdiff+0x124>)
 8010736:	f000 fce3 	bl	8011100 <__assert_func>
 801073a:	2301      	movs	r3, #1
 801073c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010740:	4610      	mov	r0, r2
 8010742:	b003      	add	sp, #12
 8010744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010748:	bfbc      	itt	lt
 801074a:	464b      	movlt	r3, r9
 801074c:	46a1      	movlt	r9, r4
 801074e:	4630      	mov	r0, r6
 8010750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010754:	bfba      	itte	lt
 8010756:	461c      	movlt	r4, r3
 8010758:	2501      	movlt	r5, #1
 801075a:	2500      	movge	r5, #0
 801075c:	f7ff fd48 	bl	80101f0 <_Balloc>
 8010760:	4602      	mov	r2, r0
 8010762:	b918      	cbnz	r0, 801076c <__mdiff+0x60>
 8010764:	4b31      	ldr	r3, [pc, #196]	@ (801082c <__mdiff+0x120>)
 8010766:	f240 2145 	movw	r1, #581	@ 0x245
 801076a:	e7e3      	b.n	8010734 <__mdiff+0x28>
 801076c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010770:	6926      	ldr	r6, [r4, #16]
 8010772:	60c5      	str	r5, [r0, #12]
 8010774:	f109 0310 	add.w	r3, r9, #16
 8010778:	f109 0514 	add.w	r5, r9, #20
 801077c:	f104 0e14 	add.w	lr, r4, #20
 8010780:	f100 0b14 	add.w	fp, r0, #20
 8010784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	46d9      	mov	r9, fp
 8010790:	f04f 0c00 	mov.w	ip, #0
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	f85e 0b04 	ldr.w	r0, [lr], #4
 801079a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801079e:	9301      	str	r3, [sp, #4]
 80107a0:	fa1f f38a 	uxth.w	r3, sl
 80107a4:	4619      	mov	r1, r3
 80107a6:	b283      	uxth	r3, r0
 80107a8:	1acb      	subs	r3, r1, r3
 80107aa:	0c00      	lsrs	r0, r0, #16
 80107ac:	4463      	add	r3, ip
 80107ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80107b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107bc:	4576      	cmp	r6, lr
 80107be:	f849 3b04 	str.w	r3, [r9], #4
 80107c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107c6:	d8e5      	bhi.n	8010794 <__mdiff+0x88>
 80107c8:	1b33      	subs	r3, r6, r4
 80107ca:	3b15      	subs	r3, #21
 80107cc:	f023 0303 	bic.w	r3, r3, #3
 80107d0:	3415      	adds	r4, #21
 80107d2:	3304      	adds	r3, #4
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	bf38      	it	cc
 80107d8:	2304      	movcc	r3, #4
 80107da:	441d      	add	r5, r3
 80107dc:	445b      	add	r3, fp
 80107de:	461e      	mov	r6, r3
 80107e0:	462c      	mov	r4, r5
 80107e2:	4544      	cmp	r4, r8
 80107e4:	d30e      	bcc.n	8010804 <__mdiff+0xf8>
 80107e6:	f108 0103 	add.w	r1, r8, #3
 80107ea:	1b49      	subs	r1, r1, r5
 80107ec:	f021 0103 	bic.w	r1, r1, #3
 80107f0:	3d03      	subs	r5, #3
 80107f2:	45a8      	cmp	r8, r5
 80107f4:	bf38      	it	cc
 80107f6:	2100      	movcc	r1, #0
 80107f8:	440b      	add	r3, r1
 80107fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107fe:	b191      	cbz	r1, 8010826 <__mdiff+0x11a>
 8010800:	6117      	str	r7, [r2, #16]
 8010802:	e79d      	b.n	8010740 <__mdiff+0x34>
 8010804:	f854 1b04 	ldr.w	r1, [r4], #4
 8010808:	46e6      	mov	lr, ip
 801080a:	0c08      	lsrs	r0, r1, #16
 801080c:	fa1c fc81 	uxtah	ip, ip, r1
 8010810:	4471      	add	r1, lr
 8010812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010816:	b289      	uxth	r1, r1
 8010818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801081c:	f846 1b04 	str.w	r1, [r6], #4
 8010820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010824:	e7dd      	b.n	80107e2 <__mdiff+0xd6>
 8010826:	3f01      	subs	r7, #1
 8010828:	e7e7      	b.n	80107fa <__mdiff+0xee>
 801082a:	bf00      	nop
 801082c:	08012938 	.word	0x08012938
 8010830:	08012949 	.word	0x08012949

08010834 <__d2b>:
 8010834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010838:	460f      	mov	r7, r1
 801083a:	2101      	movs	r1, #1
 801083c:	ec59 8b10 	vmov	r8, r9, d0
 8010840:	4616      	mov	r6, r2
 8010842:	f7ff fcd5 	bl	80101f0 <_Balloc>
 8010846:	4604      	mov	r4, r0
 8010848:	b930      	cbnz	r0, 8010858 <__d2b+0x24>
 801084a:	4602      	mov	r2, r0
 801084c:	4b23      	ldr	r3, [pc, #140]	@ (80108dc <__d2b+0xa8>)
 801084e:	4824      	ldr	r0, [pc, #144]	@ (80108e0 <__d2b+0xac>)
 8010850:	f240 310f 	movw	r1, #783	@ 0x30f
 8010854:	f000 fc54 	bl	8011100 <__assert_func>
 8010858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801085c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010860:	b10d      	cbz	r5, 8010866 <__d2b+0x32>
 8010862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	f1b8 0300 	subs.w	r3, r8, #0
 801086c:	d023      	beq.n	80108b6 <__d2b+0x82>
 801086e:	4668      	mov	r0, sp
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	f7ff fd84 	bl	801037e <__lo0bits>
 8010876:	e9dd 1200 	ldrd	r1, r2, [sp]
 801087a:	b1d0      	cbz	r0, 80108b2 <__d2b+0x7e>
 801087c:	f1c0 0320 	rsb	r3, r0, #32
 8010880:	fa02 f303 	lsl.w	r3, r2, r3
 8010884:	430b      	orrs	r3, r1
 8010886:	40c2      	lsrs	r2, r0
 8010888:	6163      	str	r3, [r4, #20]
 801088a:	9201      	str	r2, [sp, #4]
 801088c:	9b01      	ldr	r3, [sp, #4]
 801088e:	61a3      	str	r3, [r4, #24]
 8010890:	2b00      	cmp	r3, #0
 8010892:	bf0c      	ite	eq
 8010894:	2201      	moveq	r2, #1
 8010896:	2202      	movne	r2, #2
 8010898:	6122      	str	r2, [r4, #16]
 801089a:	b1a5      	cbz	r5, 80108c6 <__d2b+0x92>
 801089c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108a0:	4405      	add	r5, r0
 80108a2:	603d      	str	r5, [r7, #0]
 80108a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80108a8:	6030      	str	r0, [r6, #0]
 80108aa:	4620      	mov	r0, r4
 80108ac:	b003      	add	sp, #12
 80108ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108b2:	6161      	str	r1, [r4, #20]
 80108b4:	e7ea      	b.n	801088c <__d2b+0x58>
 80108b6:	a801      	add	r0, sp, #4
 80108b8:	f7ff fd61 	bl	801037e <__lo0bits>
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	6163      	str	r3, [r4, #20]
 80108c0:	3020      	adds	r0, #32
 80108c2:	2201      	movs	r2, #1
 80108c4:	e7e8      	b.n	8010898 <__d2b+0x64>
 80108c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108ce:	6038      	str	r0, [r7, #0]
 80108d0:	6918      	ldr	r0, [r3, #16]
 80108d2:	f7ff fd35 	bl	8010340 <__hi0bits>
 80108d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108da:	e7e5      	b.n	80108a8 <__d2b+0x74>
 80108dc:	08012938 	.word	0x08012938
 80108e0:	08012949 	.word	0x08012949

080108e4 <__ssputs_r>:
 80108e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e8:	688e      	ldr	r6, [r1, #8]
 80108ea:	461f      	mov	r7, r3
 80108ec:	42be      	cmp	r6, r7
 80108ee:	680b      	ldr	r3, [r1, #0]
 80108f0:	4682      	mov	sl, r0
 80108f2:	460c      	mov	r4, r1
 80108f4:	4690      	mov	r8, r2
 80108f6:	d82d      	bhi.n	8010954 <__ssputs_r+0x70>
 80108f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010900:	d026      	beq.n	8010950 <__ssputs_r+0x6c>
 8010902:	6965      	ldr	r5, [r4, #20]
 8010904:	6909      	ldr	r1, [r1, #16]
 8010906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801090a:	eba3 0901 	sub.w	r9, r3, r1
 801090e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010912:	1c7b      	adds	r3, r7, #1
 8010914:	444b      	add	r3, r9
 8010916:	106d      	asrs	r5, r5, #1
 8010918:	429d      	cmp	r5, r3
 801091a:	bf38      	it	cc
 801091c:	461d      	movcc	r5, r3
 801091e:	0553      	lsls	r3, r2, #21
 8010920:	d527      	bpl.n	8010972 <__ssputs_r+0x8e>
 8010922:	4629      	mov	r1, r5
 8010924:	f7ff fbd8 	bl	80100d8 <_malloc_r>
 8010928:	4606      	mov	r6, r0
 801092a:	b360      	cbz	r0, 8010986 <__ssputs_r+0xa2>
 801092c:	6921      	ldr	r1, [r4, #16]
 801092e:	464a      	mov	r2, r9
 8010930:	f7fe fcf5 	bl	800f31e <memcpy>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801093a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	6126      	str	r6, [r4, #16]
 8010942:	6165      	str	r5, [r4, #20]
 8010944:	444e      	add	r6, r9
 8010946:	eba5 0509 	sub.w	r5, r5, r9
 801094a:	6026      	str	r6, [r4, #0]
 801094c:	60a5      	str	r5, [r4, #8]
 801094e:	463e      	mov	r6, r7
 8010950:	42be      	cmp	r6, r7
 8010952:	d900      	bls.n	8010956 <__ssputs_r+0x72>
 8010954:	463e      	mov	r6, r7
 8010956:	6820      	ldr	r0, [r4, #0]
 8010958:	4632      	mov	r2, r6
 801095a:	4641      	mov	r1, r8
 801095c:	f7fe fc46 	bl	800f1ec <memmove>
 8010960:	68a3      	ldr	r3, [r4, #8]
 8010962:	1b9b      	subs	r3, r3, r6
 8010964:	60a3      	str	r3, [r4, #8]
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	4433      	add	r3, r6
 801096a:	6023      	str	r3, [r4, #0]
 801096c:	2000      	movs	r0, #0
 801096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010972:	462a      	mov	r2, r5
 8010974:	f000 fc08 	bl	8011188 <_realloc_r>
 8010978:	4606      	mov	r6, r0
 801097a:	2800      	cmp	r0, #0
 801097c:	d1e0      	bne.n	8010940 <__ssputs_r+0x5c>
 801097e:	6921      	ldr	r1, [r4, #16]
 8010980:	4650      	mov	r0, sl
 8010982:	f7ff fb35 	bl	800fff0 <_free_r>
 8010986:	230c      	movs	r3, #12
 8010988:	f8ca 3000 	str.w	r3, [sl]
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010992:	81a3      	strh	r3, [r4, #12]
 8010994:	f04f 30ff 	mov.w	r0, #4294967295
 8010998:	e7e9      	b.n	801096e <__ssputs_r+0x8a>
	...

0801099c <_svfiprintf_r>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	4698      	mov	r8, r3
 80109a2:	898b      	ldrh	r3, [r1, #12]
 80109a4:	061b      	lsls	r3, r3, #24
 80109a6:	b09d      	sub	sp, #116	@ 0x74
 80109a8:	4607      	mov	r7, r0
 80109aa:	460d      	mov	r5, r1
 80109ac:	4614      	mov	r4, r2
 80109ae:	d510      	bpl.n	80109d2 <_svfiprintf_r+0x36>
 80109b0:	690b      	ldr	r3, [r1, #16]
 80109b2:	b973      	cbnz	r3, 80109d2 <_svfiprintf_r+0x36>
 80109b4:	2140      	movs	r1, #64	@ 0x40
 80109b6:	f7ff fb8f 	bl	80100d8 <_malloc_r>
 80109ba:	6028      	str	r0, [r5, #0]
 80109bc:	6128      	str	r0, [r5, #16]
 80109be:	b930      	cbnz	r0, 80109ce <_svfiprintf_r+0x32>
 80109c0:	230c      	movs	r3, #12
 80109c2:	603b      	str	r3, [r7, #0]
 80109c4:	f04f 30ff 	mov.w	r0, #4294967295
 80109c8:	b01d      	add	sp, #116	@ 0x74
 80109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ce:	2340      	movs	r3, #64	@ 0x40
 80109d0:	616b      	str	r3, [r5, #20]
 80109d2:	2300      	movs	r3, #0
 80109d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80109d6:	2320      	movs	r3, #32
 80109d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80109e0:	2330      	movs	r3, #48	@ 0x30
 80109e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010b80 <_svfiprintf_r+0x1e4>
 80109e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109ea:	f04f 0901 	mov.w	r9, #1
 80109ee:	4623      	mov	r3, r4
 80109f0:	469a      	mov	sl, r3
 80109f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f6:	b10a      	cbz	r2, 80109fc <_svfiprintf_r+0x60>
 80109f8:	2a25      	cmp	r2, #37	@ 0x25
 80109fa:	d1f9      	bne.n	80109f0 <_svfiprintf_r+0x54>
 80109fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010a00:	d00b      	beq.n	8010a1a <_svfiprintf_r+0x7e>
 8010a02:	465b      	mov	r3, fp
 8010a04:	4622      	mov	r2, r4
 8010a06:	4629      	mov	r1, r5
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff ff6b 	bl	80108e4 <__ssputs_r>
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f000 80a7 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a16:	445a      	add	r2, fp
 8010a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 809f 	beq.w	8010b62 <_svfiprintf_r+0x1c6>
 8010a24:	2300      	movs	r3, #0
 8010a26:	f04f 32ff 	mov.w	r2, #4294967295
 8010a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a2e:	f10a 0a01 	add.w	sl, sl, #1
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a3c:	4654      	mov	r4, sl
 8010a3e:	2205      	movs	r2, #5
 8010a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a44:	484e      	ldr	r0, [pc, #312]	@ (8010b80 <_svfiprintf_r+0x1e4>)
 8010a46:	f7ef fbeb 	bl	8000220 <memchr>
 8010a4a:	9a04      	ldr	r2, [sp, #16]
 8010a4c:	b9d8      	cbnz	r0, 8010a86 <_svfiprintf_r+0xea>
 8010a4e:	06d0      	lsls	r0, r2, #27
 8010a50:	bf44      	itt	mi
 8010a52:	2320      	movmi	r3, #32
 8010a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a58:	0711      	lsls	r1, r2, #28
 8010a5a:	bf44      	itt	mi
 8010a5c:	232b      	movmi	r3, #43	@ 0x2b
 8010a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a62:	f89a 3000 	ldrb.w	r3, [sl]
 8010a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a68:	d015      	beq.n	8010a96 <_svfiprintf_r+0xfa>
 8010a6a:	9a07      	ldr	r2, [sp, #28]
 8010a6c:	4654      	mov	r4, sl
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f04f 0c0a 	mov.w	ip, #10
 8010a74:	4621      	mov	r1, r4
 8010a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a7a:	3b30      	subs	r3, #48	@ 0x30
 8010a7c:	2b09      	cmp	r3, #9
 8010a7e:	d94b      	bls.n	8010b18 <_svfiprintf_r+0x17c>
 8010a80:	b1b0      	cbz	r0, 8010ab0 <_svfiprintf_r+0x114>
 8010a82:	9207      	str	r2, [sp, #28]
 8010a84:	e014      	b.n	8010ab0 <_svfiprintf_r+0x114>
 8010a86:	eba0 0308 	sub.w	r3, r0, r8
 8010a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	46a2      	mov	sl, r4
 8010a94:	e7d2      	b.n	8010a3c <_svfiprintf_r+0xa0>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d19      	adds	r1, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9103      	str	r1, [sp, #12]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	bfbb      	ittet	lt
 8010aa2:	425b      	neglt	r3, r3
 8010aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8010aa8:	9307      	strge	r3, [sp, #28]
 8010aaa:	9307      	strlt	r3, [sp, #28]
 8010aac:	bfb8      	it	lt
 8010aae:	9204      	strlt	r2, [sp, #16]
 8010ab0:	7823      	ldrb	r3, [r4, #0]
 8010ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ab4:	d10a      	bne.n	8010acc <_svfiprintf_r+0x130>
 8010ab6:	7863      	ldrb	r3, [r4, #1]
 8010ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010aba:	d132      	bne.n	8010b22 <_svfiprintf_r+0x186>
 8010abc:	9b03      	ldr	r3, [sp, #12]
 8010abe:	1d1a      	adds	r2, r3, #4
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	9203      	str	r2, [sp, #12]
 8010ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ac8:	3402      	adds	r4, #2
 8010aca:	9305      	str	r3, [sp, #20]
 8010acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b90 <_svfiprintf_r+0x1f4>
 8010ad0:	7821      	ldrb	r1, [r4, #0]
 8010ad2:	2203      	movs	r2, #3
 8010ad4:	4650      	mov	r0, sl
 8010ad6:	f7ef fba3 	bl	8000220 <memchr>
 8010ada:	b138      	cbz	r0, 8010aec <_svfiprintf_r+0x150>
 8010adc:	9b04      	ldr	r3, [sp, #16]
 8010ade:	eba0 000a 	sub.w	r0, r0, sl
 8010ae2:	2240      	movs	r2, #64	@ 0x40
 8010ae4:	4082      	lsls	r2, r0
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	3401      	adds	r4, #1
 8010aea:	9304      	str	r3, [sp, #16]
 8010aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af0:	4824      	ldr	r0, [pc, #144]	@ (8010b84 <_svfiprintf_r+0x1e8>)
 8010af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010af6:	2206      	movs	r2, #6
 8010af8:	f7ef fb92 	bl	8000220 <memchr>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d036      	beq.n	8010b6e <_svfiprintf_r+0x1d2>
 8010b00:	4b21      	ldr	r3, [pc, #132]	@ (8010b88 <_svfiprintf_r+0x1ec>)
 8010b02:	bb1b      	cbnz	r3, 8010b4c <_svfiprintf_r+0x1b0>
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	3307      	adds	r3, #7
 8010b08:	f023 0307 	bic.w	r3, r3, #7
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b12:	4433      	add	r3, r6
 8010b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b16:	e76a      	b.n	80109ee <_svfiprintf_r+0x52>
 8010b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	2001      	movs	r0, #1
 8010b20:	e7a8      	b.n	8010a74 <_svfiprintf_r+0xd8>
 8010b22:	2300      	movs	r3, #0
 8010b24:	3401      	adds	r4, #1
 8010b26:	9305      	str	r3, [sp, #20]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f04f 0c0a 	mov.w	ip, #10
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b34:	3a30      	subs	r2, #48	@ 0x30
 8010b36:	2a09      	cmp	r2, #9
 8010b38:	d903      	bls.n	8010b42 <_svfiprintf_r+0x1a6>
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0c6      	beq.n	8010acc <_svfiprintf_r+0x130>
 8010b3e:	9105      	str	r1, [sp, #20]
 8010b40:	e7c4      	b.n	8010acc <_svfiprintf_r+0x130>
 8010b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b46:	4604      	mov	r4, r0
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e7f0      	b.n	8010b2e <_svfiprintf_r+0x192>
 8010b4c:	ab03      	add	r3, sp, #12
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	462a      	mov	r2, r5
 8010b52:	4b0e      	ldr	r3, [pc, #56]	@ (8010b8c <_svfiprintf_r+0x1f0>)
 8010b54:	a904      	add	r1, sp, #16
 8010b56:	4638      	mov	r0, r7
 8010b58:	f7fd fd0e 	bl	800e578 <_printf_float>
 8010b5c:	1c42      	adds	r2, r0, #1
 8010b5e:	4606      	mov	r6, r0
 8010b60:	d1d6      	bne.n	8010b10 <_svfiprintf_r+0x174>
 8010b62:	89ab      	ldrh	r3, [r5, #12]
 8010b64:	065b      	lsls	r3, r3, #25
 8010b66:	f53f af2d 	bmi.w	80109c4 <_svfiprintf_r+0x28>
 8010b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b6c:	e72c      	b.n	80109c8 <_svfiprintf_r+0x2c>
 8010b6e:	ab03      	add	r3, sp, #12
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	462a      	mov	r2, r5
 8010b74:	4b05      	ldr	r3, [pc, #20]	@ (8010b8c <_svfiprintf_r+0x1f0>)
 8010b76:	a904      	add	r1, sp, #16
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7fd ff95 	bl	800eaa8 <_printf_i>
 8010b7e:	e7ed      	b.n	8010b5c <_svfiprintf_r+0x1c0>
 8010b80:	080129a2 	.word	0x080129a2
 8010b84:	080129ac 	.word	0x080129ac
 8010b88:	0800e579 	.word	0x0800e579
 8010b8c:	080108e5 	.word	0x080108e5
 8010b90:	080129a8 	.word	0x080129a8

08010b94 <__sfputc_r>:
 8010b94:	6893      	ldr	r3, [r2, #8]
 8010b96:	3b01      	subs	r3, #1
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	b410      	push	{r4}
 8010b9c:	6093      	str	r3, [r2, #8]
 8010b9e:	da08      	bge.n	8010bb2 <__sfputc_r+0x1e>
 8010ba0:	6994      	ldr	r4, [r2, #24]
 8010ba2:	42a3      	cmp	r3, r4
 8010ba4:	db01      	blt.n	8010baa <__sfputc_r+0x16>
 8010ba6:	290a      	cmp	r1, #10
 8010ba8:	d103      	bne.n	8010bb2 <__sfputc_r+0x1e>
 8010baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bae:	f7fe ba89 	b.w	800f0c4 <__swbuf_r>
 8010bb2:	6813      	ldr	r3, [r2, #0]
 8010bb4:	1c58      	adds	r0, r3, #1
 8010bb6:	6010      	str	r0, [r2, #0]
 8010bb8:	7019      	strb	r1, [r3, #0]
 8010bba:	4608      	mov	r0, r1
 8010bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <__sfputs_r>:
 8010bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc4:	4606      	mov	r6, r0
 8010bc6:	460f      	mov	r7, r1
 8010bc8:	4614      	mov	r4, r2
 8010bca:	18d5      	adds	r5, r2, r3
 8010bcc:	42ac      	cmp	r4, r5
 8010bce:	d101      	bne.n	8010bd4 <__sfputs_r+0x12>
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	e007      	b.n	8010be4 <__sfputs_r+0x22>
 8010bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bd8:	463a      	mov	r2, r7
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f7ff ffda 	bl	8010b94 <__sfputc_r>
 8010be0:	1c43      	adds	r3, r0, #1
 8010be2:	d1f3      	bne.n	8010bcc <__sfputs_r+0xa>
 8010be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010be8 <_vfiprintf_r>:
 8010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	460d      	mov	r5, r1
 8010bee:	b09d      	sub	sp, #116	@ 0x74
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	4698      	mov	r8, r3
 8010bf4:	4606      	mov	r6, r0
 8010bf6:	b118      	cbz	r0, 8010c00 <_vfiprintf_r+0x18>
 8010bf8:	6a03      	ldr	r3, [r0, #32]
 8010bfa:	b90b      	cbnz	r3, 8010c00 <_vfiprintf_r+0x18>
 8010bfc:	f7fe f8fe 	bl	800edfc <__sinit>
 8010c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c02:	07d9      	lsls	r1, r3, #31
 8010c04:	d405      	bmi.n	8010c12 <_vfiprintf_r+0x2a>
 8010c06:	89ab      	ldrh	r3, [r5, #12]
 8010c08:	059a      	lsls	r2, r3, #22
 8010c0a:	d402      	bmi.n	8010c12 <_vfiprintf_r+0x2a>
 8010c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c0e:	f7fe fb84 	bl	800f31a <__retarget_lock_acquire_recursive>
 8010c12:	89ab      	ldrh	r3, [r5, #12]
 8010c14:	071b      	lsls	r3, r3, #28
 8010c16:	d501      	bpl.n	8010c1c <_vfiprintf_r+0x34>
 8010c18:	692b      	ldr	r3, [r5, #16]
 8010c1a:	b99b      	cbnz	r3, 8010c44 <_vfiprintf_r+0x5c>
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4630      	mov	r0, r6
 8010c20:	f7fe fa8e 	bl	800f140 <__swsetup_r>
 8010c24:	b170      	cbz	r0, 8010c44 <_vfiprintf_r+0x5c>
 8010c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c28:	07dc      	lsls	r4, r3, #31
 8010c2a:	d504      	bpl.n	8010c36 <_vfiprintf_r+0x4e>
 8010c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c30:	b01d      	add	sp, #116	@ 0x74
 8010c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	89ab      	ldrh	r3, [r5, #12]
 8010c38:	0598      	lsls	r0, r3, #22
 8010c3a:	d4f7      	bmi.n	8010c2c <_vfiprintf_r+0x44>
 8010c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c3e:	f7fe fb6d 	bl	800f31c <__retarget_lock_release_recursive>
 8010c42:	e7f3      	b.n	8010c2c <_vfiprintf_r+0x44>
 8010c44:	2300      	movs	r3, #0
 8010c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c48:	2320      	movs	r3, #32
 8010c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c52:	2330      	movs	r3, #48	@ 0x30
 8010c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e04 <_vfiprintf_r+0x21c>
 8010c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c5c:	f04f 0901 	mov.w	r9, #1
 8010c60:	4623      	mov	r3, r4
 8010c62:	469a      	mov	sl, r3
 8010c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c68:	b10a      	cbz	r2, 8010c6e <_vfiprintf_r+0x86>
 8010c6a:	2a25      	cmp	r2, #37	@ 0x25
 8010c6c:	d1f9      	bne.n	8010c62 <_vfiprintf_r+0x7a>
 8010c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c72:	d00b      	beq.n	8010c8c <_vfiprintf_r+0xa4>
 8010c74:	465b      	mov	r3, fp
 8010c76:	4622      	mov	r2, r4
 8010c78:	4629      	mov	r1, r5
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f7ff ffa1 	bl	8010bc2 <__sfputs_r>
 8010c80:	3001      	adds	r0, #1
 8010c82:	f000 80a7 	beq.w	8010dd4 <_vfiprintf_r+0x1ec>
 8010c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c88:	445a      	add	r2, fp
 8010c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 809f 	beq.w	8010dd4 <_vfiprintf_r+0x1ec>
 8010c96:	2300      	movs	r3, #0
 8010c98:	f04f 32ff 	mov.w	r2, #4294967295
 8010c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ca0:	f10a 0a01 	add.w	sl, sl, #1
 8010ca4:	9304      	str	r3, [sp, #16]
 8010ca6:	9307      	str	r3, [sp, #28]
 8010ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cae:	4654      	mov	r4, sl
 8010cb0:	2205      	movs	r2, #5
 8010cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb6:	4853      	ldr	r0, [pc, #332]	@ (8010e04 <_vfiprintf_r+0x21c>)
 8010cb8:	f7ef fab2 	bl	8000220 <memchr>
 8010cbc:	9a04      	ldr	r2, [sp, #16]
 8010cbe:	b9d8      	cbnz	r0, 8010cf8 <_vfiprintf_r+0x110>
 8010cc0:	06d1      	lsls	r1, r2, #27
 8010cc2:	bf44      	itt	mi
 8010cc4:	2320      	movmi	r3, #32
 8010cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cca:	0713      	lsls	r3, r2, #28
 8010ccc:	bf44      	itt	mi
 8010cce:	232b      	movmi	r3, #43	@ 0x2b
 8010cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cda:	d015      	beq.n	8010d08 <_vfiprintf_r+0x120>
 8010cdc:	9a07      	ldr	r2, [sp, #28]
 8010cde:	4654      	mov	r4, sl
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	f04f 0c0a 	mov.w	ip, #10
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cec:	3b30      	subs	r3, #48	@ 0x30
 8010cee:	2b09      	cmp	r3, #9
 8010cf0:	d94b      	bls.n	8010d8a <_vfiprintf_r+0x1a2>
 8010cf2:	b1b0      	cbz	r0, 8010d22 <_vfiprintf_r+0x13a>
 8010cf4:	9207      	str	r2, [sp, #28]
 8010cf6:	e014      	b.n	8010d22 <_vfiprintf_r+0x13a>
 8010cf8:	eba0 0308 	sub.w	r3, r0, r8
 8010cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8010d00:	4313      	orrs	r3, r2
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	46a2      	mov	sl, r4
 8010d06:	e7d2      	b.n	8010cae <_vfiprintf_r+0xc6>
 8010d08:	9b03      	ldr	r3, [sp, #12]
 8010d0a:	1d19      	adds	r1, r3, #4
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	9103      	str	r1, [sp, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	bfbb      	ittet	lt
 8010d14:	425b      	neglt	r3, r3
 8010d16:	f042 0202 	orrlt.w	r2, r2, #2
 8010d1a:	9307      	strge	r3, [sp, #28]
 8010d1c:	9307      	strlt	r3, [sp, #28]
 8010d1e:	bfb8      	it	lt
 8010d20:	9204      	strlt	r2, [sp, #16]
 8010d22:	7823      	ldrb	r3, [r4, #0]
 8010d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d26:	d10a      	bne.n	8010d3e <_vfiprintf_r+0x156>
 8010d28:	7863      	ldrb	r3, [r4, #1]
 8010d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d2c:	d132      	bne.n	8010d94 <_vfiprintf_r+0x1ac>
 8010d2e:	9b03      	ldr	r3, [sp, #12]
 8010d30:	1d1a      	adds	r2, r3, #4
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	9203      	str	r2, [sp, #12]
 8010d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d3a:	3402      	adds	r4, #2
 8010d3c:	9305      	str	r3, [sp, #20]
 8010d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e14 <_vfiprintf_r+0x22c>
 8010d42:	7821      	ldrb	r1, [r4, #0]
 8010d44:	2203      	movs	r2, #3
 8010d46:	4650      	mov	r0, sl
 8010d48:	f7ef fa6a 	bl	8000220 <memchr>
 8010d4c:	b138      	cbz	r0, 8010d5e <_vfiprintf_r+0x176>
 8010d4e:	9b04      	ldr	r3, [sp, #16]
 8010d50:	eba0 000a 	sub.w	r0, r0, sl
 8010d54:	2240      	movs	r2, #64	@ 0x40
 8010d56:	4082      	lsls	r2, r0
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	3401      	adds	r4, #1
 8010d5c:	9304      	str	r3, [sp, #16]
 8010d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d62:	4829      	ldr	r0, [pc, #164]	@ (8010e08 <_vfiprintf_r+0x220>)
 8010d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d68:	2206      	movs	r2, #6
 8010d6a:	f7ef fa59 	bl	8000220 <memchr>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d03f      	beq.n	8010df2 <_vfiprintf_r+0x20a>
 8010d72:	4b26      	ldr	r3, [pc, #152]	@ (8010e0c <_vfiprintf_r+0x224>)
 8010d74:	bb1b      	cbnz	r3, 8010dbe <_vfiprintf_r+0x1d6>
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	3307      	adds	r3, #7
 8010d7a:	f023 0307 	bic.w	r3, r3, #7
 8010d7e:	3308      	adds	r3, #8
 8010d80:	9303      	str	r3, [sp, #12]
 8010d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d84:	443b      	add	r3, r7
 8010d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d88:	e76a      	b.n	8010c60 <_vfiprintf_r+0x78>
 8010d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d8e:	460c      	mov	r4, r1
 8010d90:	2001      	movs	r0, #1
 8010d92:	e7a8      	b.n	8010ce6 <_vfiprintf_r+0xfe>
 8010d94:	2300      	movs	r3, #0
 8010d96:	3401      	adds	r4, #1
 8010d98:	9305      	str	r3, [sp, #20]
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	f04f 0c0a 	mov.w	ip, #10
 8010da0:	4620      	mov	r0, r4
 8010da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010da6:	3a30      	subs	r2, #48	@ 0x30
 8010da8:	2a09      	cmp	r2, #9
 8010daa:	d903      	bls.n	8010db4 <_vfiprintf_r+0x1cc>
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d0c6      	beq.n	8010d3e <_vfiprintf_r+0x156>
 8010db0:	9105      	str	r1, [sp, #20]
 8010db2:	e7c4      	b.n	8010d3e <_vfiprintf_r+0x156>
 8010db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010db8:	4604      	mov	r4, r0
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e7f0      	b.n	8010da0 <_vfiprintf_r+0x1b8>
 8010dbe:	ab03      	add	r3, sp, #12
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	462a      	mov	r2, r5
 8010dc4:	4b12      	ldr	r3, [pc, #72]	@ (8010e10 <_vfiprintf_r+0x228>)
 8010dc6:	a904      	add	r1, sp, #16
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7fd fbd5 	bl	800e578 <_printf_float>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	1c78      	adds	r0, r7, #1
 8010dd2:	d1d6      	bne.n	8010d82 <_vfiprintf_r+0x19a>
 8010dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dd6:	07d9      	lsls	r1, r3, #31
 8010dd8:	d405      	bmi.n	8010de6 <_vfiprintf_r+0x1fe>
 8010dda:	89ab      	ldrh	r3, [r5, #12]
 8010ddc:	059a      	lsls	r2, r3, #22
 8010dde:	d402      	bmi.n	8010de6 <_vfiprintf_r+0x1fe>
 8010de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010de2:	f7fe fa9b 	bl	800f31c <__retarget_lock_release_recursive>
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	065b      	lsls	r3, r3, #25
 8010dea:	f53f af1f 	bmi.w	8010c2c <_vfiprintf_r+0x44>
 8010dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010df0:	e71e      	b.n	8010c30 <_vfiprintf_r+0x48>
 8010df2:	ab03      	add	r3, sp, #12
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	462a      	mov	r2, r5
 8010df8:	4b05      	ldr	r3, [pc, #20]	@ (8010e10 <_vfiprintf_r+0x228>)
 8010dfa:	a904      	add	r1, sp, #16
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7fd fe53 	bl	800eaa8 <_printf_i>
 8010e02:	e7e4      	b.n	8010dce <_vfiprintf_r+0x1e6>
 8010e04:	080129a2 	.word	0x080129a2
 8010e08:	080129ac 	.word	0x080129ac
 8010e0c:	0800e579 	.word	0x0800e579
 8010e10:	08010bc3 	.word	0x08010bc3
 8010e14:	080129a8 	.word	0x080129a8

08010e18 <__sflush_r>:
 8010e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	0716      	lsls	r6, r2, #28
 8010e22:	4605      	mov	r5, r0
 8010e24:	460c      	mov	r4, r1
 8010e26:	d454      	bmi.n	8010ed2 <__sflush_r+0xba>
 8010e28:	684b      	ldr	r3, [r1, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	dc02      	bgt.n	8010e34 <__sflush_r+0x1c>
 8010e2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dd48      	ble.n	8010ec6 <__sflush_r+0xae>
 8010e34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e36:	2e00      	cmp	r6, #0
 8010e38:	d045      	beq.n	8010ec6 <__sflush_r+0xae>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e40:	682f      	ldr	r7, [r5, #0]
 8010e42:	6a21      	ldr	r1, [r4, #32]
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	d030      	beq.n	8010eaa <__sflush_r+0x92>
 8010e48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	0759      	lsls	r1, r3, #29
 8010e4e:	d505      	bpl.n	8010e5c <__sflush_r+0x44>
 8010e50:	6863      	ldr	r3, [r4, #4]
 8010e52:	1ad2      	subs	r2, r2, r3
 8010e54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e56:	b10b      	cbz	r3, 8010e5c <__sflush_r+0x44>
 8010e58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e5a:	1ad2      	subs	r2, r2, r3
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e60:	6a21      	ldr	r1, [r4, #32]
 8010e62:	4628      	mov	r0, r5
 8010e64:	47b0      	blx	r6
 8010e66:	1c43      	adds	r3, r0, #1
 8010e68:	89a3      	ldrh	r3, [r4, #12]
 8010e6a:	d106      	bne.n	8010e7a <__sflush_r+0x62>
 8010e6c:	6829      	ldr	r1, [r5, #0]
 8010e6e:	291d      	cmp	r1, #29
 8010e70:	d82b      	bhi.n	8010eca <__sflush_r+0xb2>
 8010e72:	4a2a      	ldr	r2, [pc, #168]	@ (8010f1c <__sflush_r+0x104>)
 8010e74:	40ca      	lsrs	r2, r1
 8010e76:	07d6      	lsls	r6, r2, #31
 8010e78:	d527      	bpl.n	8010eca <__sflush_r+0xb2>
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	6062      	str	r2, [r4, #4]
 8010e7e:	04d9      	lsls	r1, r3, #19
 8010e80:	6922      	ldr	r2, [r4, #16]
 8010e82:	6022      	str	r2, [r4, #0]
 8010e84:	d504      	bpl.n	8010e90 <__sflush_r+0x78>
 8010e86:	1c42      	adds	r2, r0, #1
 8010e88:	d101      	bne.n	8010e8e <__sflush_r+0x76>
 8010e8a:	682b      	ldr	r3, [r5, #0]
 8010e8c:	b903      	cbnz	r3, 8010e90 <__sflush_r+0x78>
 8010e8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e92:	602f      	str	r7, [r5, #0]
 8010e94:	b1b9      	cbz	r1, 8010ec6 <__sflush_r+0xae>
 8010e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e9a:	4299      	cmp	r1, r3
 8010e9c:	d002      	beq.n	8010ea4 <__sflush_r+0x8c>
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f7ff f8a6 	bl	800fff0 <_free_r>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ea8:	e00d      	b.n	8010ec6 <__sflush_r+0xae>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	4628      	mov	r0, r5
 8010eae:	47b0      	blx	r6
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	1c50      	adds	r0, r2, #1
 8010eb4:	d1c9      	bne.n	8010e4a <__sflush_r+0x32>
 8010eb6:	682b      	ldr	r3, [r5, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d0c6      	beq.n	8010e4a <__sflush_r+0x32>
 8010ebc:	2b1d      	cmp	r3, #29
 8010ebe:	d001      	beq.n	8010ec4 <__sflush_r+0xac>
 8010ec0:	2b16      	cmp	r3, #22
 8010ec2:	d11e      	bne.n	8010f02 <__sflush_r+0xea>
 8010ec4:	602f      	str	r7, [r5, #0]
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	e022      	b.n	8010f10 <__sflush_r+0xf8>
 8010eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ece:	b21b      	sxth	r3, r3
 8010ed0:	e01b      	b.n	8010f0a <__sflush_r+0xf2>
 8010ed2:	690f      	ldr	r7, [r1, #16]
 8010ed4:	2f00      	cmp	r7, #0
 8010ed6:	d0f6      	beq.n	8010ec6 <__sflush_r+0xae>
 8010ed8:	0793      	lsls	r3, r2, #30
 8010eda:	680e      	ldr	r6, [r1, #0]
 8010edc:	bf08      	it	eq
 8010ede:	694b      	ldreq	r3, [r1, #20]
 8010ee0:	600f      	str	r7, [r1, #0]
 8010ee2:	bf18      	it	ne
 8010ee4:	2300      	movne	r3, #0
 8010ee6:	eba6 0807 	sub.w	r8, r6, r7
 8010eea:	608b      	str	r3, [r1, #8]
 8010eec:	f1b8 0f00 	cmp.w	r8, #0
 8010ef0:	dde9      	ble.n	8010ec6 <__sflush_r+0xae>
 8010ef2:	6a21      	ldr	r1, [r4, #32]
 8010ef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010ef6:	4643      	mov	r3, r8
 8010ef8:	463a      	mov	r2, r7
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b0      	blx	r6
 8010efe:	2800      	cmp	r0, #0
 8010f00:	dc08      	bgt.n	8010f14 <__sflush_r+0xfc>
 8010f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f0a:	81a3      	strh	r3, [r4, #12]
 8010f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f14:	4407      	add	r7, r0
 8010f16:	eba8 0800 	sub.w	r8, r8, r0
 8010f1a:	e7e7      	b.n	8010eec <__sflush_r+0xd4>
 8010f1c:	20400001 	.word	0x20400001

08010f20 <_fflush_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	690b      	ldr	r3, [r1, #16]
 8010f24:	4605      	mov	r5, r0
 8010f26:	460c      	mov	r4, r1
 8010f28:	b913      	cbnz	r3, 8010f30 <_fflush_r+0x10>
 8010f2a:	2500      	movs	r5, #0
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	b118      	cbz	r0, 8010f3a <_fflush_r+0x1a>
 8010f32:	6a03      	ldr	r3, [r0, #32]
 8010f34:	b90b      	cbnz	r3, 8010f3a <_fflush_r+0x1a>
 8010f36:	f7fd ff61 	bl	800edfc <__sinit>
 8010f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d0f3      	beq.n	8010f2a <_fflush_r+0xa>
 8010f42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f44:	07d0      	lsls	r0, r2, #31
 8010f46:	d404      	bmi.n	8010f52 <_fflush_r+0x32>
 8010f48:	0599      	lsls	r1, r3, #22
 8010f4a:	d402      	bmi.n	8010f52 <_fflush_r+0x32>
 8010f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f4e:	f7fe f9e4 	bl	800f31a <__retarget_lock_acquire_recursive>
 8010f52:	4628      	mov	r0, r5
 8010f54:	4621      	mov	r1, r4
 8010f56:	f7ff ff5f 	bl	8010e18 <__sflush_r>
 8010f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f5c:	07da      	lsls	r2, r3, #31
 8010f5e:	4605      	mov	r5, r0
 8010f60:	d4e4      	bmi.n	8010f2c <_fflush_r+0xc>
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	059b      	lsls	r3, r3, #22
 8010f66:	d4e1      	bmi.n	8010f2c <_fflush_r+0xc>
 8010f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f6a:	f7fe f9d7 	bl	800f31c <__retarget_lock_release_recursive>
 8010f6e:	e7dd      	b.n	8010f2c <_fflush_r+0xc>

08010f70 <__swhatbuf_r>:
 8010f70:	b570      	push	{r4, r5, r6, lr}
 8010f72:	460c      	mov	r4, r1
 8010f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f78:	2900      	cmp	r1, #0
 8010f7a:	b096      	sub	sp, #88	@ 0x58
 8010f7c:	4615      	mov	r5, r2
 8010f7e:	461e      	mov	r6, r3
 8010f80:	da0d      	bge.n	8010f9e <__swhatbuf_r+0x2e>
 8010f82:	89a3      	ldrh	r3, [r4, #12]
 8010f84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f88:	f04f 0100 	mov.w	r1, #0
 8010f8c:	bf14      	ite	ne
 8010f8e:	2340      	movne	r3, #64	@ 0x40
 8010f90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f94:	2000      	movs	r0, #0
 8010f96:	6031      	str	r1, [r6, #0]
 8010f98:	602b      	str	r3, [r5, #0]
 8010f9a:	b016      	add	sp, #88	@ 0x58
 8010f9c:	bd70      	pop	{r4, r5, r6, pc}
 8010f9e:	466a      	mov	r2, sp
 8010fa0:	f000 f87c 	bl	801109c <_fstat_r>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	dbec      	blt.n	8010f82 <__swhatbuf_r+0x12>
 8010fa8:	9901      	ldr	r1, [sp, #4]
 8010faa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010fae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010fb2:	4259      	negs	r1, r3
 8010fb4:	4159      	adcs	r1, r3
 8010fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fba:	e7eb      	b.n	8010f94 <__swhatbuf_r+0x24>

08010fbc <__smakebuf_r>:
 8010fbc:	898b      	ldrh	r3, [r1, #12]
 8010fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fc0:	079d      	lsls	r5, r3, #30
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	d507      	bpl.n	8010fd8 <__smakebuf_r+0x1c>
 8010fc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	6123      	str	r3, [r4, #16]
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	6163      	str	r3, [r4, #20]
 8010fd4:	b003      	add	sp, #12
 8010fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd8:	ab01      	add	r3, sp, #4
 8010fda:	466a      	mov	r2, sp
 8010fdc:	f7ff ffc8 	bl	8010f70 <__swhatbuf_r>
 8010fe0:	9f00      	ldr	r7, [sp, #0]
 8010fe2:	4605      	mov	r5, r0
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f7ff f876 	bl	80100d8 <_malloc_r>
 8010fec:	b948      	cbnz	r0, 8011002 <__smakebuf_r+0x46>
 8010fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff2:	059a      	lsls	r2, r3, #22
 8010ff4:	d4ee      	bmi.n	8010fd4 <__smakebuf_r+0x18>
 8010ff6:	f023 0303 	bic.w	r3, r3, #3
 8010ffa:	f043 0302 	orr.w	r3, r3, #2
 8010ffe:	81a3      	strh	r3, [r4, #12]
 8011000:	e7e2      	b.n	8010fc8 <__smakebuf_r+0xc>
 8011002:	89a3      	ldrh	r3, [r4, #12]
 8011004:	6020      	str	r0, [r4, #0]
 8011006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801100a:	81a3      	strh	r3, [r4, #12]
 801100c:	9b01      	ldr	r3, [sp, #4]
 801100e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011012:	b15b      	cbz	r3, 801102c <__smakebuf_r+0x70>
 8011014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011018:	4630      	mov	r0, r6
 801101a:	f000 f851 	bl	80110c0 <_isatty_r>
 801101e:	b128      	cbz	r0, 801102c <__smakebuf_r+0x70>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	f023 0303 	bic.w	r3, r3, #3
 8011026:	f043 0301 	orr.w	r3, r3, #1
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	89a3      	ldrh	r3, [r4, #12]
 801102e:	431d      	orrs	r5, r3
 8011030:	81a5      	strh	r5, [r4, #12]
 8011032:	e7cf      	b.n	8010fd4 <__smakebuf_r+0x18>

08011034 <_putc_r>:
 8011034:	b570      	push	{r4, r5, r6, lr}
 8011036:	460d      	mov	r5, r1
 8011038:	4614      	mov	r4, r2
 801103a:	4606      	mov	r6, r0
 801103c:	b118      	cbz	r0, 8011046 <_putc_r+0x12>
 801103e:	6a03      	ldr	r3, [r0, #32]
 8011040:	b90b      	cbnz	r3, 8011046 <_putc_r+0x12>
 8011042:	f7fd fedb 	bl	800edfc <__sinit>
 8011046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011048:	07d8      	lsls	r0, r3, #31
 801104a:	d405      	bmi.n	8011058 <_putc_r+0x24>
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	0599      	lsls	r1, r3, #22
 8011050:	d402      	bmi.n	8011058 <_putc_r+0x24>
 8011052:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011054:	f7fe f961 	bl	800f31a <__retarget_lock_acquire_recursive>
 8011058:	68a3      	ldr	r3, [r4, #8]
 801105a:	3b01      	subs	r3, #1
 801105c:	2b00      	cmp	r3, #0
 801105e:	60a3      	str	r3, [r4, #8]
 8011060:	da05      	bge.n	801106e <_putc_r+0x3a>
 8011062:	69a2      	ldr	r2, [r4, #24]
 8011064:	4293      	cmp	r3, r2
 8011066:	db12      	blt.n	801108e <_putc_r+0x5a>
 8011068:	b2eb      	uxtb	r3, r5
 801106a:	2b0a      	cmp	r3, #10
 801106c:	d00f      	beq.n	801108e <_putc_r+0x5a>
 801106e:	6823      	ldr	r3, [r4, #0]
 8011070:	1c5a      	adds	r2, r3, #1
 8011072:	6022      	str	r2, [r4, #0]
 8011074:	701d      	strb	r5, [r3, #0]
 8011076:	b2ed      	uxtb	r5, r5
 8011078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801107a:	07da      	lsls	r2, r3, #31
 801107c:	d405      	bmi.n	801108a <_putc_r+0x56>
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	059b      	lsls	r3, r3, #22
 8011082:	d402      	bmi.n	801108a <_putc_r+0x56>
 8011084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011086:	f7fe f949 	bl	800f31c <__retarget_lock_release_recursive>
 801108a:	4628      	mov	r0, r5
 801108c:	bd70      	pop	{r4, r5, r6, pc}
 801108e:	4629      	mov	r1, r5
 8011090:	4622      	mov	r2, r4
 8011092:	4630      	mov	r0, r6
 8011094:	f7fe f816 	bl	800f0c4 <__swbuf_r>
 8011098:	4605      	mov	r5, r0
 801109a:	e7ed      	b.n	8011078 <_putc_r+0x44>

0801109c <_fstat_r>:
 801109c:	b538      	push	{r3, r4, r5, lr}
 801109e:	4d07      	ldr	r5, [pc, #28]	@ (80110bc <_fstat_r+0x20>)
 80110a0:	2300      	movs	r3, #0
 80110a2:	4604      	mov	r4, r0
 80110a4:	4608      	mov	r0, r1
 80110a6:	4611      	mov	r1, r2
 80110a8:	602b      	str	r3, [r5, #0]
 80110aa:	f7f4 f968 	bl	800537e <_fstat>
 80110ae:	1c43      	adds	r3, r0, #1
 80110b0:	d102      	bne.n	80110b8 <_fstat_r+0x1c>
 80110b2:	682b      	ldr	r3, [r5, #0]
 80110b4:	b103      	cbz	r3, 80110b8 <_fstat_r+0x1c>
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	bd38      	pop	{r3, r4, r5, pc}
 80110ba:	bf00      	nop
 80110bc:	20005574 	.word	0x20005574

080110c0 <_isatty_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	4d06      	ldr	r5, [pc, #24]	@ (80110dc <_isatty_r+0x1c>)
 80110c4:	2300      	movs	r3, #0
 80110c6:	4604      	mov	r4, r0
 80110c8:	4608      	mov	r0, r1
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	f7f4 f95c 	bl	8005388 <_isatty>
 80110d0:	1c43      	adds	r3, r0, #1
 80110d2:	d102      	bne.n	80110da <_isatty_r+0x1a>
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	b103      	cbz	r3, 80110da <_isatty_r+0x1a>
 80110d8:	6023      	str	r3, [r4, #0]
 80110da:	bd38      	pop	{r3, r4, r5, pc}
 80110dc:	20005574 	.word	0x20005574

080110e0 <_sbrk_r>:
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4d06      	ldr	r5, [pc, #24]	@ (80110fc <_sbrk_r+0x1c>)
 80110e4:	2300      	movs	r3, #0
 80110e6:	4604      	mov	r4, r0
 80110e8:	4608      	mov	r0, r1
 80110ea:	602b      	str	r3, [r5, #0]
 80110ec:	f7f4 f950 	bl	8005390 <_sbrk>
 80110f0:	1c43      	adds	r3, r0, #1
 80110f2:	d102      	bne.n	80110fa <_sbrk_r+0x1a>
 80110f4:	682b      	ldr	r3, [r5, #0]
 80110f6:	b103      	cbz	r3, 80110fa <_sbrk_r+0x1a>
 80110f8:	6023      	str	r3, [r4, #0]
 80110fa:	bd38      	pop	{r3, r4, r5, pc}
 80110fc:	20005574 	.word	0x20005574

08011100 <__assert_func>:
 8011100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011102:	4614      	mov	r4, r2
 8011104:	461a      	mov	r2, r3
 8011106:	4b09      	ldr	r3, [pc, #36]	@ (801112c <__assert_func+0x2c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4605      	mov	r5, r0
 801110c:	68d8      	ldr	r0, [r3, #12]
 801110e:	b14c      	cbz	r4, 8011124 <__assert_func+0x24>
 8011110:	4b07      	ldr	r3, [pc, #28]	@ (8011130 <__assert_func+0x30>)
 8011112:	9100      	str	r1, [sp, #0]
 8011114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011118:	4906      	ldr	r1, [pc, #24]	@ (8011134 <__assert_func+0x34>)
 801111a:	462b      	mov	r3, r5
 801111c:	f000 f870 	bl	8011200 <fiprintf>
 8011120:	f000 f880 	bl	8011224 <abort>
 8011124:	4b04      	ldr	r3, [pc, #16]	@ (8011138 <__assert_func+0x38>)
 8011126:	461c      	mov	r4, r3
 8011128:	e7f3      	b.n	8011112 <__assert_func+0x12>
 801112a:	bf00      	nop
 801112c:	20000114 	.word	0x20000114
 8011130:	080129bd 	.word	0x080129bd
 8011134:	080129ca 	.word	0x080129ca
 8011138:	080129f8 	.word	0x080129f8

0801113c <_calloc_r>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	fba1 5402 	umull	r5, r4, r1, r2
 8011142:	b934      	cbnz	r4, 8011152 <_calloc_r+0x16>
 8011144:	4629      	mov	r1, r5
 8011146:	f7fe ffc7 	bl	80100d8 <_malloc_r>
 801114a:	4606      	mov	r6, r0
 801114c:	b928      	cbnz	r0, 801115a <_calloc_r+0x1e>
 801114e:	4630      	mov	r0, r6
 8011150:	bd70      	pop	{r4, r5, r6, pc}
 8011152:	220c      	movs	r2, #12
 8011154:	6002      	str	r2, [r0, #0]
 8011156:	2600      	movs	r6, #0
 8011158:	e7f9      	b.n	801114e <_calloc_r+0x12>
 801115a:	462a      	mov	r2, r5
 801115c:	4621      	mov	r1, r4
 801115e:	f7fe f85f 	bl	800f220 <memset>
 8011162:	e7f4      	b.n	801114e <_calloc_r+0x12>

08011164 <__ascii_mbtowc>:
 8011164:	b082      	sub	sp, #8
 8011166:	b901      	cbnz	r1, 801116a <__ascii_mbtowc+0x6>
 8011168:	a901      	add	r1, sp, #4
 801116a:	b142      	cbz	r2, 801117e <__ascii_mbtowc+0x1a>
 801116c:	b14b      	cbz	r3, 8011182 <__ascii_mbtowc+0x1e>
 801116e:	7813      	ldrb	r3, [r2, #0]
 8011170:	600b      	str	r3, [r1, #0]
 8011172:	7812      	ldrb	r2, [r2, #0]
 8011174:	1e10      	subs	r0, r2, #0
 8011176:	bf18      	it	ne
 8011178:	2001      	movne	r0, #1
 801117a:	b002      	add	sp, #8
 801117c:	4770      	bx	lr
 801117e:	4610      	mov	r0, r2
 8011180:	e7fb      	b.n	801117a <__ascii_mbtowc+0x16>
 8011182:	f06f 0001 	mvn.w	r0, #1
 8011186:	e7f8      	b.n	801117a <__ascii_mbtowc+0x16>

08011188 <_realloc_r>:
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	4607      	mov	r7, r0
 801118e:	4614      	mov	r4, r2
 8011190:	460d      	mov	r5, r1
 8011192:	b921      	cbnz	r1, 801119e <_realloc_r+0x16>
 8011194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	4611      	mov	r1, r2
 801119a:	f7fe bf9d 	b.w	80100d8 <_malloc_r>
 801119e:	b92a      	cbnz	r2, 80111ac <_realloc_r+0x24>
 80111a0:	f7fe ff26 	bl	800fff0 <_free_r>
 80111a4:	4625      	mov	r5, r4
 80111a6:	4628      	mov	r0, r5
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	f000 f841 	bl	8011232 <_malloc_usable_size_r>
 80111b0:	4284      	cmp	r4, r0
 80111b2:	4606      	mov	r6, r0
 80111b4:	d802      	bhi.n	80111bc <_realloc_r+0x34>
 80111b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111ba:	d8f4      	bhi.n	80111a6 <_realloc_r+0x1e>
 80111bc:	4621      	mov	r1, r4
 80111be:	4638      	mov	r0, r7
 80111c0:	f7fe ff8a 	bl	80100d8 <_malloc_r>
 80111c4:	4680      	mov	r8, r0
 80111c6:	b908      	cbnz	r0, 80111cc <_realloc_r+0x44>
 80111c8:	4645      	mov	r5, r8
 80111ca:	e7ec      	b.n	80111a6 <_realloc_r+0x1e>
 80111cc:	42b4      	cmp	r4, r6
 80111ce:	4622      	mov	r2, r4
 80111d0:	4629      	mov	r1, r5
 80111d2:	bf28      	it	cs
 80111d4:	4632      	movcs	r2, r6
 80111d6:	f7fe f8a2 	bl	800f31e <memcpy>
 80111da:	4629      	mov	r1, r5
 80111dc:	4638      	mov	r0, r7
 80111de:	f7fe ff07 	bl	800fff0 <_free_r>
 80111e2:	e7f1      	b.n	80111c8 <_realloc_r+0x40>

080111e4 <__ascii_wctomb>:
 80111e4:	4603      	mov	r3, r0
 80111e6:	4608      	mov	r0, r1
 80111e8:	b141      	cbz	r1, 80111fc <__ascii_wctomb+0x18>
 80111ea:	2aff      	cmp	r2, #255	@ 0xff
 80111ec:	d904      	bls.n	80111f8 <__ascii_wctomb+0x14>
 80111ee:	228a      	movs	r2, #138	@ 0x8a
 80111f0:	601a      	str	r2, [r3, #0]
 80111f2:	f04f 30ff 	mov.w	r0, #4294967295
 80111f6:	4770      	bx	lr
 80111f8:	700a      	strb	r2, [r1, #0]
 80111fa:	2001      	movs	r0, #1
 80111fc:	4770      	bx	lr
	...

08011200 <fiprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b503      	push	{r0, r1, lr}
 8011204:	4601      	mov	r1, r0
 8011206:	ab03      	add	r3, sp, #12
 8011208:	4805      	ldr	r0, [pc, #20]	@ (8011220 <fiprintf+0x20>)
 801120a:	f853 2b04 	ldr.w	r2, [r3], #4
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	f7ff fce9 	bl	8010be8 <_vfiprintf_r>
 8011216:	b002      	add	sp, #8
 8011218:	f85d eb04 	ldr.w	lr, [sp], #4
 801121c:	b003      	add	sp, #12
 801121e:	4770      	bx	lr
 8011220:	20000114 	.word	0x20000114

08011224 <abort>:
 8011224:	b508      	push	{r3, lr}
 8011226:	2006      	movs	r0, #6
 8011228:	f000 f834 	bl	8011294 <raise>
 801122c:	2001      	movs	r0, #1
 801122e:	f7f4 f883 	bl	8005338 <_exit>

08011232 <_malloc_usable_size_r>:
 8011232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011236:	1f18      	subs	r0, r3, #4
 8011238:	2b00      	cmp	r3, #0
 801123a:	bfbc      	itt	lt
 801123c:	580b      	ldrlt	r3, [r1, r0]
 801123e:	18c0      	addlt	r0, r0, r3
 8011240:	4770      	bx	lr

08011242 <_raise_r>:
 8011242:	291f      	cmp	r1, #31
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	4605      	mov	r5, r0
 8011248:	460c      	mov	r4, r1
 801124a:	d904      	bls.n	8011256 <_raise_r+0x14>
 801124c:	2316      	movs	r3, #22
 801124e:	6003      	str	r3, [r0, #0]
 8011250:	f04f 30ff 	mov.w	r0, #4294967295
 8011254:	bd38      	pop	{r3, r4, r5, pc}
 8011256:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011258:	b112      	cbz	r2, 8011260 <_raise_r+0x1e>
 801125a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801125e:	b94b      	cbnz	r3, 8011274 <_raise_r+0x32>
 8011260:	4628      	mov	r0, r5
 8011262:	f000 f831 	bl	80112c8 <_getpid_r>
 8011266:	4622      	mov	r2, r4
 8011268:	4601      	mov	r1, r0
 801126a:	4628      	mov	r0, r5
 801126c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011270:	f000 b818 	b.w	80112a4 <_kill_r>
 8011274:	2b01      	cmp	r3, #1
 8011276:	d00a      	beq.n	801128e <_raise_r+0x4c>
 8011278:	1c59      	adds	r1, r3, #1
 801127a:	d103      	bne.n	8011284 <_raise_r+0x42>
 801127c:	2316      	movs	r3, #22
 801127e:	6003      	str	r3, [r0, #0]
 8011280:	2001      	movs	r0, #1
 8011282:	e7e7      	b.n	8011254 <_raise_r+0x12>
 8011284:	2100      	movs	r1, #0
 8011286:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801128a:	4620      	mov	r0, r4
 801128c:	4798      	blx	r3
 801128e:	2000      	movs	r0, #0
 8011290:	e7e0      	b.n	8011254 <_raise_r+0x12>
	...

08011294 <raise>:
 8011294:	4b02      	ldr	r3, [pc, #8]	@ (80112a0 <raise+0xc>)
 8011296:	4601      	mov	r1, r0
 8011298:	6818      	ldr	r0, [r3, #0]
 801129a:	f7ff bfd2 	b.w	8011242 <_raise_r>
 801129e:	bf00      	nop
 80112a0:	20000114 	.word	0x20000114

080112a4 <_kill_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4d07      	ldr	r5, [pc, #28]	@ (80112c4 <_kill_r+0x20>)
 80112a8:	2300      	movs	r3, #0
 80112aa:	4604      	mov	r4, r0
 80112ac:	4608      	mov	r0, r1
 80112ae:	4611      	mov	r1, r2
 80112b0:	602b      	str	r3, [r5, #0]
 80112b2:	f7f4 f839 	bl	8005328 <_kill>
 80112b6:	1c43      	adds	r3, r0, #1
 80112b8:	d102      	bne.n	80112c0 <_kill_r+0x1c>
 80112ba:	682b      	ldr	r3, [r5, #0]
 80112bc:	b103      	cbz	r3, 80112c0 <_kill_r+0x1c>
 80112be:	6023      	str	r3, [r4, #0]
 80112c0:	bd38      	pop	{r3, r4, r5, pc}
 80112c2:	bf00      	nop
 80112c4:	20005574 	.word	0x20005574

080112c8 <_getpid_r>:
 80112c8:	f7f4 b82c 	b.w	8005324 <_getpid>

080112cc <_init>:
 80112cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ce:	bf00      	nop
 80112d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112d2:	bc08      	pop	{r3}
 80112d4:	469e      	mov	lr, r3
 80112d6:	4770      	bx	lr

080112d8 <_fini>:
 80112d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112da:	bf00      	nop
 80112dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112de:	bc08      	pop	{r3}
 80112e0:	469e      	mov	lr, r3
 80112e2:	4770      	bx	lr
