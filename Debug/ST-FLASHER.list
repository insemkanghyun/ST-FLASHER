
ST-FLASHER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114d8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001954  08011688  08011688  00012688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  08012fdc  08012fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c0  08012ff4  08012ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130b4  080130b4  00015300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130b4  080130b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080130b8  080130b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  20000000  080130bc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015300  2**0
                  CONTENTS
 10 .bss          0000d29c  20000300  20000300  00015300  2**3
                  ALLOC
 11 ._user_heap_stack 00004004  2000d59c  2000d59c  00015300  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003cd00  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000083e9  00000000  00000000  00052030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001fbac  00000000  00000000  0005a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021f0  00000000  00000000  00079fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000020a0  00000000  00000000  0007c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032043  00000000  00000000  0007e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040d43  00000000  00000000  000b029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fea36  00000000  00000000  000f0fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001efa14  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007498  00000000  00000000  001efa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  001f6ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000300 	.word	0x20000300
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011670 	.word	0x08011670

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000304 	.word	0x20000304
 80001ec:	08011670 	.word	0x08011670

080001f0 <setjmp>:
 80001f0:	46ec      	mov	ip, sp
 80001f2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001f6:	ec80 8b10 	vstmia	r0, {d8-d15}
 80001fa:	f04f 0000 	mov.w	r0, #0
 80001fe:	4770      	bx	lr

08000200 <longjmp>:
 8000200:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000204:	46e5      	mov	sp, ip
 8000206:	ec90 8b10 	vldmia	r0, {d8-d15}
 800020a:	0008      	movs	r0, r1
 800020c:	bf08      	it	eq
 800020e:	2001      	moveq	r0, #1
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f001 b952 	b.w	8001eb4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <selfrel_offset31>:
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	005a      	lsls	r2, r3, #1
 8000f24:	bf4c      	ite	mi
 8000f26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000f2a:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000f2e:	4418      	add	r0, r3
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <search_EIT_table>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	b359      	cbz	r1, 8000f92 <search_EIT_table+0x5e>
 8000f3a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f3e:	4605      	mov	r5, r0
 8000f40:	4616      	mov	r6, r2
 8000f42:	4647      	mov	r7, r8
 8000f44:	f04f 0a00 	mov.w	sl, #0
 8000f48:	eb0a 0107 	add.w	r1, sl, r7
 8000f4c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000f50:	1049      	asrs	r1, r1, #1
 8000f52:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
 8000f56:	4648      	mov	r0, r9
 8000f58:	f7ff ffe2 	bl	8000f20 <selfrel_offset31>
 8000f5c:	4588      	cmp	r8, r1
 8000f5e:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8000f62:	4603      	mov	r3, r0
 8000f64:	d010      	beq.n	8000f88 <search_EIT_table+0x54>
 8000f66:	f104 0008 	add.w	r0, r4, #8
 8000f6a:	42b3      	cmp	r3, r6
 8000f6c:	4428      	add	r0, r5
 8000f6e:	d807      	bhi.n	8000f80 <search_EIT_table+0x4c>
 8000f70:	f7ff ffd6 	bl	8000f20 <selfrel_offset31>
 8000f74:	3801      	subs	r0, #1
 8000f76:	42b0      	cmp	r0, r6
 8000f78:	d208      	bcs.n	8000f8c <search_EIT_table+0x58>
 8000f7a:	f101 0a01 	add.w	sl, r1, #1
 8000f7e:	e7e3      	b.n	8000f48 <search_EIT_table+0x14>
 8000f80:	458a      	cmp	sl, r1
 8000f82:	d006      	beq.n	8000f92 <search_EIT_table+0x5e>
 8000f84:	1e4f      	subs	r7, r1, #1
 8000f86:	e7df      	b.n	8000f48 <search_EIT_table+0x14>
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	d8f9      	bhi.n	8000f80 <search_EIT_table+0x4c>
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	f04f 0900 	mov.w	r9, #0
 8000f96:	4648      	mov	r0, r9
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000f9c <__gnu_unwind_get_pr_addr>:
 8000f9c:	2801      	cmp	r0, #1
 8000f9e:	d009      	beq.n	8000fb4 <__gnu_unwind_get_pr_addr+0x18>
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d005      	beq.n	8000fb0 <__gnu_unwind_get_pr_addr+0x14>
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__gnu_unwind_get_pr_addr+0x1c>)
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	bf0c      	ite	eq
 8000faa:	4618      	moveq	r0, r3
 8000fac:	2000      	movne	r0, #0
 8000fae:	4770      	bx	lr
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <__gnu_unwind_get_pr_addr+0x20>)
 8000fb2:	4770      	bx	lr
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <__gnu_unwind_get_pr_addr+0x24>)
 8000fb6:	4770      	bx	lr
 8000fb8:	08001681 	.word	0x08001681
 8000fbc:	08001689 	.word	0x08001689
 8000fc0:	08001685 	.word	0x08001685

08000fc4 <get_eit_entry>:
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <get_eit_entry+0x8c>)
 8000fc8:	b083      	sub	sp, #12
 8000fca:	4604      	mov	r4, r0
 8000fcc:	1e8d      	subs	r5, r1, #2
 8000fce:	b343      	cbz	r3, 8001022 <get_eit_entry+0x5e>
 8000fd0:	a901      	add	r1, sp, #4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	b1f0      	cbz	r0, 8001018 <get_eit_entry+0x54>
 8000fda:	9901      	ldr	r1, [sp, #4]
 8000fdc:	462a      	mov	r2, r5
 8000fde:	f7ff ffa9 	bl	8000f34 <search_EIT_table>
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	b1c0      	cbz	r0, 8001018 <get_eit_entry+0x54>
 8000fe6:	f7ff ff9b 	bl	8000f20 <selfrel_offset31>
 8000fea:	684b      	ldr	r3, [r1, #4]
 8000fec:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d02b      	beq.n	800104a <get_eit_entry+0x86>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f101 0004 	add.w	r0, r1, #4
 8000ff8:	db25      	blt.n	8001046 <get_eit_entry+0x82>
 8000ffa:	f7ff ff91 	bl	8000f20 <selfrel_offset31>
 8000ffe:	2300      	movs	r3, #0
 8001000:	6523      	str	r3, [r4, #80]	@ 0x50
 8001002:	6803      	ldr	r3, [r0, #0]
 8001004:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8001006:	2b00      	cmp	r3, #0
 8001008:	db12      	blt.n	8001030 <get_eit_entry+0x6c>
 800100a:	f7ff ff89 	bl	8000f20 <selfrel_offset31>
 800100e:	4603      	mov	r3, r0
 8001010:	2000      	movs	r0, #0
 8001012:	6123      	str	r3, [r4, #16]
 8001014:	b003      	add	sp, #12
 8001016:	bd30      	pop	{r4, r5, pc}
 8001018:	2300      	movs	r3, #0
 800101a:	2009      	movs	r0, #9
 800101c:	6123      	str	r3, [r4, #16]
 800101e:	b003      	add	sp, #12
 8001020:	bd30      	pop	{r4, r5, pc}
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <get_eit_entry+0x90>)
 8001024:	490c      	ldr	r1, [pc, #48]	@ (8001058 <get_eit_entry+0x94>)
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	10c9      	asrs	r1, r1, #3
 800102a:	4618      	mov	r0, r3
 800102c:	9101      	str	r1, [sp, #4]
 800102e:	e7d5      	b.n	8000fdc <get_eit_entry+0x18>
 8001030:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001034:	f7ff ffb2 	bl	8000f9c <__gnu_unwind_get_pr_addr>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	bf0c      	ite	eq
 800103c:	2009      	moveq	r0, #9
 800103e:	2000      	movne	r0, #0
 8001040:	6123      	str	r3, [r4, #16]
 8001042:	b003      	add	sp, #12
 8001044:	bd30      	pop	{r4, r5, pc}
 8001046:	2301      	movs	r3, #1
 8001048:	e7da      	b.n	8001000 <get_eit_entry+0x3c>
 800104a:	2300      	movs	r3, #0
 800104c:	2005      	movs	r0, #5
 800104e:	e7e0      	b.n	8001012 <get_eit_entry+0x4e>
 8001050:	00000000 	.word	0x00000000
 8001054:	08012ff4 	.word	0x08012ff4
 8001058:	080130b4 	.word	0x080130b4

0800105c <restore_non_core_regs>:
 800105c:	6803      	ldr	r3, [r0, #0]
 800105e:	07da      	lsls	r2, r3, #31
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	d406      	bmi.n	8001074 <restore_non_core_regs+0x18>
 8001066:	079b      	lsls	r3, r3, #30
 8001068:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 800106c:	d509      	bpl.n	8001082 <restore_non_core_regs+0x26>
 800106e:	f000 fc8f 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	0759      	lsls	r1, r3, #29
 8001076:	d509      	bpl.n	800108c <restore_non_core_regs+0x30>
 8001078:	071a      	lsls	r2, r3, #28
 800107a:	d50e      	bpl.n	800109a <restore_non_core_regs+0x3e>
 800107c:	06db      	lsls	r3, r3, #27
 800107e:	d513      	bpl.n	80010a8 <restore_non_core_regs+0x4c>
 8001080:	bd10      	pop	{r4, pc}
 8001082:	f000 fc7d 	bl	8001980 <__gnu_Unwind_Restore_VFP>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	0759      	lsls	r1, r3, #29
 800108a:	d4f5      	bmi.n	8001078 <restore_non_core_regs+0x1c>
 800108c:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 8001090:	f000 fc86 	bl	80019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	071a      	lsls	r2, r3, #28
 8001098:	d4f0      	bmi.n	800107c <restore_non_core_regs+0x20>
 800109a:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 800109e:	f000 fc87 	bl	80019b0 <__gnu_Unwind_Restore_WMMXD>
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	06db      	lsls	r3, r3, #27
 80010a6:	d4eb      	bmi.n	8001080 <restore_non_core_regs+0x24>
 80010a8:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b0:	f000 bcc2 	b.w	8001a38 <__gnu_Unwind_Restore_WMMXC>

080010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80010b4:	4603      	mov	r3, r0
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	b100      	cbz	r0, 80010bc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80010ba:	4418      	add	r0, r3
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <__gnu_unwind_24bit.isra.0>:
 80010c0:	2009      	movs	r0, #9
 80010c2:	4770      	bx	lr

080010c4 <_Unwind_DebugHook>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <unwind_phase2>:
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	460e      	mov	r6, r1
 80010ce:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff77 	bl	8000fc4 <get_eit_entry>
 80010d6:	4605      	mov	r5, r0
 80010d8:	b988      	cbnz	r0, 80010fe <unwind_phase2+0x36>
 80010da:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80010dc:	6162      	str	r2, [r4, #20]
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	4632      	mov	r2, r6
 80010e2:	4621      	mov	r1, r4
 80010e4:	2001      	movs	r0, #1
 80010e6:	4798      	blx	r3
 80010e8:	2808      	cmp	r0, #8
 80010ea:	d0f0      	beq.n	80010ce <unwind_phase2+0x6>
 80010ec:	2807      	cmp	r0, #7
 80010ee:	d106      	bne.n	80010fe <unwind_phase2+0x36>
 80010f0:	4628      	mov	r0, r5
 80010f2:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80010f4:	f7ff ffe6 	bl	80010c4 <_Unwind_DebugHook>
 80010f8:	1d30      	adds	r0, r6, #4
 80010fa:	f000 fc35 	bl	8001968 <__restore_core_regs>
 80010fe:	f010 fa63 	bl	80115c8 <abort>
 8001102:	bf00      	nop

08001104 <unwind_phase2_forced>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	f101 0c04 	add.w	ip, r1, #4
 800110c:	68c7      	ldr	r7, [r0, #12]
 800110e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8001112:	4606      	mov	r6, r0
 8001114:	4691      	mov	r9, r2
 8001116:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800111a:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 800111e:	ac03      	add	r4, sp, #12
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001128:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001132:	ad02      	add	r5, sp, #8
 8001134:	f04f 0e00 	mov.w	lr, #0
 8001138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800113c:	f8c5 e000 	str.w	lr, [r5]
 8001140:	e021      	b.n	8001186 <unwind_phase2_forced+0x82>
 8001142:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001144:	6173      	str	r3, [r6, #20]
 8001146:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800114a:	4629      	mov	r1, r5
 800114c:	a87c      	add	r0, sp, #496	@ 0x1f0
 800114e:	f00e faa0 	bl	800f692 <memcpy>
 8001152:	6933      	ldr	r3, [r6, #16]
 8001154:	aa7c      	add	r2, sp, #496	@ 0x1f0
 8001156:	4631      	mov	r1, r6
 8001158:	4650      	mov	r0, sl
 800115a:	4798      	blx	r3
 800115c:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
 800115e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001160:	4649      	mov	r1, r9
 8001162:	e9cd 5800 	strd	r5, r8, [sp]
 8001166:	4682      	mov	sl, r0
 8001168:	4633      	mov	r3, r6
 800116a:	2001      	movs	r0, #1
 800116c:	4632      	mov	r2, r6
 800116e:	47b8      	blx	r7
 8001170:	4681      	mov	r9, r0
 8001172:	bb30      	cbnz	r0, 80011c2 <unwind_phase2_forced+0xbe>
 8001174:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8001178:	a97c      	add	r1, sp, #496	@ 0x1f0
 800117a:	4628      	mov	r0, r5
 800117c:	f00e fa89 	bl	800f692 <memcpy>
 8001180:	f1ba 0f08 	cmp.w	sl, #8
 8001184:	d11a      	bne.n	80011bc <unwind_phase2_forced+0xb8>
 8001186:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff ff1b 	bl	8000fc4 <get_eit_entry>
 800118e:	f109 0909 	add.w	r9, r9, #9
 8001192:	4604      	mov	r4, r0
 8001194:	fa5f fa89 	uxtb.w	sl, r9
 8001198:	2800      	cmp	r0, #0
 800119a:	d0d2      	beq.n	8001142 <unwind_phase2_forced+0x3e>
 800119c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800119e:	64ab      	str	r3, [r5, #72]	@ 0x48
 80011a0:	4632      	mov	r2, r6
 80011a2:	e9cd 5800 	strd	r5, r8, [sp]
 80011a6:	4633      	mov	r3, r6
 80011a8:	f04a 0110 	orr.w	r1, sl, #16
 80011ac:	2001      	movs	r0, #1
 80011ae:	47b8      	blx	r7
 80011b0:	b938      	cbnz	r0, 80011c2 <unwind_phase2_forced+0xbe>
 80011b2:	4620      	mov	r0, r4
 80011b4:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	f1ba 0f07 	cmp.w	sl, #7
 80011c0:	d005      	beq.n	80011ce <unwind_phase2_forced+0xca>
 80011c2:	2409      	movs	r4, #9
 80011c4:	4620      	mov	r0, r4
 80011c6:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	4648      	mov	r0, r9
 80011d0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80011d2:	f7ff ff77 	bl	80010c4 <_Unwind_DebugHook>
 80011d6:	a803      	add	r0, sp, #12
 80011d8:	f000 fbc6 	bl	8001968 <__restore_core_regs>

080011dc <_Unwind_GetCFA>:
 80011dc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80011de:	4770      	bx	lr

080011e0 <__gnu_Unwind_RaiseException>:
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80011e4:	b0fb      	sub	sp, #492	@ 0x1ec
 80011e6:	f101 0c04 	add.w	ip, r1, #4
 80011ea:	640b      	str	r3, [r1, #64]	@ 0x40
 80011ec:	460e      	mov	r6, r1
 80011ee:	4605      	mov	r5, r0
 80011f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011f4:	ac01      	add	r4, sp, #4
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001208:	f04f 37ff 	mov.w	r7, #4294967295
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001210:	9700      	str	r7, [sp, #0]
 8001212:	e006      	b.n	8001222 <__gnu_Unwind_RaiseException+0x42>
 8001214:	692b      	ldr	r3, [r5, #16]
 8001216:	466a      	mov	r2, sp
 8001218:	4629      	mov	r1, r5
 800121a:	4798      	blx	r3
 800121c:	2808      	cmp	r0, #8
 800121e:	4604      	mov	r4, r0
 8001220:	d108      	bne.n	8001234 <__gnu_Unwind_RaiseException+0x54>
 8001222:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8001224:	4628      	mov	r0, r5
 8001226:	f7ff fecd 	bl	8000fc4 <get_eit_entry>
 800122a:	2800      	cmp	r0, #0
 800122c:	d0f2      	beq.n	8001214 <__gnu_Unwind_RaiseException+0x34>
 800122e:	2009      	movs	r0, #9
 8001230:	b07b      	add	sp, #492	@ 0x1ec
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	4668      	mov	r0, sp
 8001236:	f7ff ff11 	bl	800105c <restore_non_core_regs>
 800123a:	2c06      	cmp	r4, #6
 800123c:	d1f7      	bne.n	800122e <__gnu_Unwind_RaiseException+0x4e>
 800123e:	4631      	mov	r1, r6
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff ff41 	bl	80010c8 <unwind_phase2>
 8001246:	bf00      	nop

08001248 <__gnu_Unwind_ForcedUnwind>:
 8001248:	60c1      	str	r1, [r0, #12]
 800124a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800124c:	6182      	str	r2, [r0, #24]
 800124e:	6419      	str	r1, [r3, #64]	@ 0x40
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	e756      	b.n	8001104 <unwind_phase2_forced>
 8001256:	bf00      	nop

08001258 <__gnu_Unwind_Resume>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	68c6      	ldr	r6, [r0, #12]
 800125c:	6943      	ldr	r3, [r0, #20]
 800125e:	640b      	str	r3, [r1, #64]	@ 0x40
 8001260:	b9ae      	cbnz	r6, 800128e <__gnu_Unwind_Resume+0x36>
 8001262:	6903      	ldr	r3, [r0, #16]
 8001264:	460a      	mov	r2, r1
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4601      	mov	r1, r0
 800126c:	2002      	movs	r0, #2
 800126e:	4798      	blx	r3
 8001270:	2807      	cmp	r0, #7
 8001272:	d005      	beq.n	8001280 <__gnu_Unwind_Resume+0x28>
 8001274:	2808      	cmp	r0, #8
 8001276:	d10f      	bne.n	8001298 <__gnu_Unwind_Resume+0x40>
 8001278:	4629      	mov	r1, r5
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff24 	bl	80010c8 <unwind_phase2>
 8001280:	4630      	mov	r0, r6
 8001282:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8001284:	f7ff ff1e 	bl	80010c4 <_Unwind_DebugHook>
 8001288:	1d28      	adds	r0, r5, #4
 800128a:	f000 fb6d 	bl	8001968 <__restore_core_regs>
 800128e:	2201      	movs	r2, #1
 8001290:	f7ff ff38 	bl	8001104 <unwind_phase2_forced>
 8001294:	f010 f998 	bl	80115c8 <abort>
 8001298:	f010 f996 	bl	80115c8 <abort>

0800129c <__gnu_Unwind_Resume_or_Rethrow>:
 800129c:	68c2      	ldr	r2, [r0, #12]
 800129e:	b11a      	cbz	r2, 80012a8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80012a0:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80012a2:	640a      	str	r2, [r1, #64]	@ 0x40
 80012a4:	2200      	movs	r2, #0
 80012a6:	e72d      	b.n	8001104 <unwind_phase2_forced>
 80012a8:	e79a      	b.n	80011e0 <__gnu_Unwind_RaiseException>
 80012aa:	bf00      	nop

080012ac <_Unwind_Complete>:
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <_Unwind_DeleteException>:
 80012b0:	6883      	ldr	r3, [r0, #8]
 80012b2:	4601      	mov	r1, r0
 80012b4:	b10b      	cbz	r3, 80012ba <_Unwind_DeleteException+0xa>
 80012b6:	2001      	movs	r0, #1
 80012b8:	4718      	bx	r3
 80012ba:	4770      	bx	lr

080012bc <_Unwind_VRS_Get>:
 80012bc:	2905      	cmp	r1, #5
 80012be:	d815      	bhi.n	80012ec <_Unwind_VRS_Get+0x30>
 80012c0:	e8df f001 	tbb	[pc, r1]
 80012c4:	0314030a 	.word	0x0314030a
 80012c8:	0503      	.short	0x0503
 80012ca:	2001      	movs	r0, #1
 80012cc:	4770      	bx	lr
 80012ce:	9a00      	ldr	r2, [sp, #0]
 80012d0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr
 80012d8:	b943      	cbnz	r3, 80012ec <_Unwind_VRS_Get+0x30>
 80012da:	2a0f      	cmp	r2, #15
 80012dc:	d806      	bhi.n	80012ec <_Unwind_VRS_Get+0x30>
 80012de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012e2:	2000      	movs	r0, #0
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	9a00      	ldr	r2, [sp, #0]
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4770      	bx	lr
 80012ec:	2002      	movs	r0, #2
 80012ee:	4770      	bx	lr

080012f0 <_Unwind_GetGR>:
 80012f0:	b500      	push	{lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	460a      	mov	r2, r1
 80012f6:	2300      	movs	r3, #0
 80012f8:	a903      	add	r1, sp, #12
 80012fa:	9100      	str	r1, [sp, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff ffdd 	bl	80012bc <_Unwind_VRS_Get>
 8001302:	9803      	ldr	r0, [sp, #12]
 8001304:	b005      	add	sp, #20
 8001306:	f85d fb04 	ldr.w	pc, [sp], #4
 800130a:	bf00      	nop

0800130c <_Unwind_VRS_Set>:
 800130c:	2905      	cmp	r1, #5
 800130e:	d815      	bhi.n	800133c <_Unwind_VRS_Set+0x30>
 8001310:	e8df f001 	tbb	[pc, r1]
 8001314:	0314030a 	.word	0x0314030a
 8001318:	0503      	.short	0x0503
 800131a:	2001      	movs	r0, #1
 800131c:	4770      	bx	lr
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6443      	str	r3, [r0, #68]	@ 0x44
 8001324:	2000      	movs	r0, #0
 8001326:	4770      	bx	lr
 8001328:	b943      	cbnz	r3, 800133c <_Unwind_VRS_Set+0x30>
 800132a:	2a0f      	cmp	r2, #15
 800132c:	d806      	bhi.n	800133c <_Unwind_VRS_Set+0x30>
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6053      	str	r3, [r2, #4]
 8001338:	2000      	movs	r0, #0
 800133a:	4770      	bx	lr
 800133c:	2002      	movs	r0, #2
 800133e:	4770      	bx	lr

08001340 <_Unwind_SetGR>:
 8001340:	b510      	push	{r4, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	2300      	movs	r3, #0
 8001346:	ac03      	add	r4, sp, #12
 8001348:	9203      	str	r2, [sp, #12]
 800134a:	9400      	str	r4, [sp, #0]
 800134c:	460a      	mov	r2, r1
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff ffdc 	bl	800130c <_Unwind_VRS_Set>
 8001354:	b004      	add	sp, #16
 8001356:	bd10      	pop	{r4, pc}

08001358 <__gnu_Unwind_Backtrace>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800135c:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001360:	f102 0c04 	add.w	ip, r2, #4
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4605      	mov	r5, r0
 8001368:	460c      	mov	r4, r1
 800136a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800136e:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8001372:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001376:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800137a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800137e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001382:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001386:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800138a:	f04f 36ff 	mov.w	r6, #4294967295
 800138e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001392:	9616      	str	r6, [sp, #88]	@ 0x58
 8001394:	e010      	b.n	80013b8 <__gnu_Unwind_Backtrace+0x60>
 8001396:	f7ff ffd3 	bl	8001340 <_Unwind_SetGR>
 800139a:	4621      	mov	r1, r4
 800139c:	a816      	add	r0, sp, #88	@ 0x58
 800139e:	47a8      	blx	r5
 80013a0:	4603      	mov	r3, r0
 80013a2:	aa16      	add	r2, sp, #88	@ 0x58
 80013a4:	2008      	movs	r0, #8
 80013a6:	4669      	mov	r1, sp
 80013a8:	b983      	cbnz	r3, 80013cc <__gnu_Unwind_Backtrace+0x74>
 80013aa:	9b04      	ldr	r3, [sp, #16]
 80013ac:	4798      	blx	r3
 80013ae:	2805      	cmp	r0, #5
 80013b0:	4606      	mov	r6, r0
 80013b2:	d00c      	beq.n	80013ce <__gnu_Unwind_Backtrace+0x76>
 80013b4:	2809      	cmp	r0, #9
 80013b6:	d009      	beq.n	80013cc <__gnu_Unwind_Backtrace+0x74>
 80013b8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80013ba:	4668      	mov	r0, sp
 80013bc:	f7ff fe02 	bl	8000fc4 <get_eit_entry>
 80013c0:	4603      	mov	r3, r0
 80013c2:	210c      	movs	r1, #12
 80013c4:	466a      	mov	r2, sp
 80013c6:	a816      	add	r0, sp, #88	@ 0x58
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0e4      	beq.n	8001396 <__gnu_Unwind_Backtrace+0x3e>
 80013cc:	2609      	movs	r6, #9
 80013ce:	a816      	add	r0, sp, #88	@ 0x58
 80013d0:	f7ff fe44 	bl	800105c <restore_non_core_regs>
 80013d4:	4630      	mov	r0, r6
 80013d6:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 80013da:	bd70      	pop	{r4, r5, r6, pc}

080013dc <__gnu_unwind_pr_common>:
 80013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e0:	4616      	mov	r6, r2
 80013e2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80013e4:	b089      	sub	sp, #36	@ 0x24
 80013e6:	460d      	mov	r5, r1
 80013e8:	f852 1b04 	ldr.w	r1, [r2], #4
 80013ec:	9206      	str	r2, [sp, #24]
 80013ee:	f000 0c03 	and.w	ip, r0, #3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d079      	beq.n	80014ea <__gnu_unwind_pr_common+0x10e>
 80013f6:	0c0c      	lsrs	r4, r1, #16
 80013f8:	f88d 401d 	strb.w	r4, [sp, #29]
 80013fc:	0409      	lsls	r1, r1, #16
 80013fe:	b2e4      	uxtb	r4, r4
 8001400:	9105      	str	r1, [sp, #20]
 8001402:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001406:	2102      	movs	r1, #2
 8001408:	f88d 101c 	strb.w	r1, [sp, #28]
 800140c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800140e:	f1bc 0f02 	cmp.w	ip, #2
 8001412:	bf08      	it	eq
 8001414:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8001416:	f011 0801 	ands.w	r8, r1, #1
 800141a:	d009      	beq.n	8001430 <__gnu_unwind_pr_common+0x54>
 800141c:	a905      	add	r1, sp, #20
 800141e:	4630      	mov	r0, r6
 8001420:	f000 fba4 	bl	8001b6c <__gnu_unwind_execute>
 8001424:	2800      	cmp	r0, #0
 8001426:	d156      	bne.n	80014d6 <__gnu_unwind_pr_common+0xfa>
 8001428:	2008      	movs	r0, #8
 800142a:	b009      	add	sp, #36	@ 0x24
 800142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001430:	6817      	ldr	r7, [r2, #0]
 8001432:	2f00      	cmp	r7, #0
 8001434:	d0f2      	beq.n	800141c <__gnu_unwind_pr_common+0x40>
 8001436:	f000 0108 	and.w	r1, r0, #8
 800143a:	e9cd 1801 	strd	r1, r8, [sp, #4]
 800143e:	46e3      	mov	fp, ip
 8001440:	469a      	mov	sl, r3
 8001442:	f1ba 0f02 	cmp.w	sl, #2
 8001446:	d04c      	beq.n	80014e2 <__gnu_unwind_pr_common+0x106>
 8001448:	8817      	ldrh	r7, [r2, #0]
 800144a:	8854      	ldrh	r4, [r2, #2]
 800144c:	f102 0904 	add.w	r9, r2, #4
 8001450:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8001452:	f024 0301 	bic.w	r3, r4, #1
 8001456:	210f      	movs	r1, #15
 8001458:	4630      	mov	r0, r6
 800145a:	eb03 0802 	add.w	r8, r3, r2
 800145e:	f7ff ff47 	bl	80012f0 <_Unwind_GetGR>
 8001462:	4580      	cmp	r8, r0
 8001464:	d83b      	bhi.n	80014de <__gnu_unwind_pr_common+0x102>
 8001466:	f027 0201 	bic.w	r2, r7, #1
 800146a:	eb02 0308 	add.w	r3, r2, r8
 800146e:	4283      	cmp	r3, r0
 8001470:	bf94      	ite	ls
 8001472:	2300      	movls	r3, #0
 8001474:	2301      	movhi	r3, #1
 8001476:	0064      	lsls	r4, r4, #1
 8001478:	f004 0402 	and.w	r4, r4, #2
 800147c:	f007 0701 	and.w	r7, r7, #1
 8001480:	4327      	orrs	r7, r4
 8001482:	2f01      	cmp	r7, #1
 8001484:	d04e      	beq.n	8001524 <__gnu_unwind_pr_common+0x148>
 8001486:	2f02      	cmp	r7, #2
 8001488:	d035      	beq.n	80014f6 <__gnu_unwind_pr_common+0x11a>
 800148a:	bb27      	cbnz	r7, 80014d6 <__gnu_unwind_pr_common+0xfa>
 800148c:	f1bb 0f00 	cmp.w	fp, #0
 8001490:	d002      	beq.n	8001498 <__gnu_unwind_pr_common+0xbc>
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80d3 	bne.w	800163e <__gnu_unwind_pr_common+0x262>
 8001498:	f109 0204 	add.w	r2, r9, #4
 800149c:	6817      	ldr	r7, [r2, #0]
 800149e:	2f00      	cmp	r7, #0
 80014a0:	d1cf      	bne.n	8001442 <__gnu_unwind_pr_common+0x66>
 80014a2:	a905      	add	r1, sp, #20
 80014a4:	4630      	mov	r0, r6
 80014a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80014aa:	f000 fb5f 	bl	8001b6c <__gnu_unwind_execute>
 80014ae:	b990      	cbnz	r0, 80014d6 <__gnu_unwind_pr_common+0xfa>
 80014b0:	f1b8 0f00 	cmp.w	r8, #0
 80014b4:	d0b8      	beq.n	8001428 <__gnu_unwind_pr_common+0x4c>
 80014b6:	210f      	movs	r1, #15
 80014b8:	4630      	mov	r0, r6
 80014ba:	f7ff ff19 	bl	80012f0 <_Unwind_GetGR>
 80014be:	210e      	movs	r1, #14
 80014c0:	4602      	mov	r2, r0
 80014c2:	4630      	mov	r0, r6
 80014c4:	f7ff ff3c 	bl	8001340 <_Unwind_SetGR>
 80014c8:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <__gnu_unwind_pr_common+0x2a0>)
 80014ca:	210f      	movs	r1, #15
 80014cc:	4630      	mov	r0, r6
 80014ce:	f7ff ff37 	bl	8001340 <_Unwind_SetGR>
 80014d2:	2007      	movs	r0, #7
 80014d4:	e000      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 80014d6:	2009      	movs	r0, #9
 80014d8:	b009      	add	sp, #36	@ 0x24
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014de:	2300      	movs	r3, #0
 80014e0:	e7c9      	b.n	8001476 <__gnu_unwind_pr_common+0x9a>
 80014e2:	6854      	ldr	r4, [r2, #4]
 80014e4:	f102 0908 	add.w	r9, r2, #8
 80014e8:	e7b2      	b.n	8001450 <__gnu_unwind_pr_common+0x74>
 80014ea:	0209      	lsls	r1, r1, #8
 80014ec:	9105      	str	r1, [sp, #20]
 80014ee:	f88d 301d 	strb.w	r3, [sp, #29]
 80014f2:	2103      	movs	r1, #3
 80014f4:	e788      	b.n	8001408 <__gnu_unwind_pr_common+0x2c>
 80014f6:	f8d9 4000 	ldr.w	r4, [r9]
 80014fa:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 80014fe:	f1bb 0f00 	cmp.w	fp, #0
 8001502:	d147      	bne.n	8001594 <__gnu_unwind_pr_common+0x1b8>
 8001504:	b12b      	cbz	r3, 8001512 <__gnu_unwind_pr_common+0x136>
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05c      	beq.n	80015c6 <__gnu_unwind_pr_common+0x1ea>
 800150c:	f1b8 0f00 	cmp.w	r8, #0
 8001510:	d059      	beq.n	80015c6 <__gnu_unwind_pr_common+0x1ea>
 8001512:	2c00      	cmp	r4, #0
 8001514:	da01      	bge.n	800151a <__gnu_unwind_pr_common+0x13e>
 8001516:	f109 0904 	add.w	r9, r9, #4
 800151a:	f108 0201 	add.w	r2, r8, #1
 800151e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8001522:	e7bb      	b.n	800149c <__gnu_unwind_pr_common+0xc0>
 8001524:	f1bb 0f00 	cmp.w	fp, #0
 8001528:	d11c      	bne.n	8001564 <__gnu_unwind_pr_common+0x188>
 800152a:	b1c3      	cbz	r3, 800155e <__gnu_unwind_pr_common+0x182>
 800152c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001530:	f8d9 2000 	ldr.w	r2, [r9]
 8001534:	1c99      	adds	r1, r3, #2
 8001536:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800153a:	d0cc      	beq.n	80014d6 <__gnu_unwind_pr_common+0xfa>
 800153c:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8001540:	3301      	adds	r3, #1
 8001542:	9404      	str	r4, [sp, #16]
 8001544:	f000 808e 	beq.w	8001664 <__gnu_unwind_pr_common+0x288>
 8001548:	f109 0004 	add.w	r0, r9, #4
 800154c:	f7ff fdb2 	bl	80010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001550:	ab04      	add	r3, sp, #16
 8001552:	4601      	mov	r1, r0
 8001554:	4628      	mov	r0, r5
 8001556:	f3af 8000 	nop.w
 800155a:	2800      	cmp	r0, #0
 800155c:	d159      	bne.n	8001612 <__gnu_unwind_pr_common+0x236>
 800155e:	f109 0208 	add.w	r2, r9, #8
 8001562:	e79b      	b.n	800149c <__gnu_unwind_pr_common+0xc0>
 8001564:	210d      	movs	r1, #13
 8001566:	4630      	mov	r0, r6
 8001568:	f7ff fec2 	bl	80012f0 <_Unwind_GetGR>
 800156c:	6a2c      	ldr	r4, [r5, #32]
 800156e:	4284      	cmp	r4, r0
 8001570:	d1f5      	bne.n	800155e <__gnu_unwind_pr_common+0x182>
 8001572:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001574:	4599      	cmp	r9, r3
 8001576:	d1f2      	bne.n	800155e <__gnu_unwind_pr_common+0x182>
 8001578:	4648      	mov	r0, r9
 800157a:	f7ff fcd1 	bl	8000f20 <selfrel_offset31>
 800157e:	210f      	movs	r1, #15
 8001580:	4602      	mov	r2, r0
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff fedc 	bl	8001340 <_Unwind_SetGR>
 8001588:	462a      	mov	r2, r5
 800158a:	2100      	movs	r1, #0
 800158c:	4630      	mov	r0, r6
 800158e:	f7ff fed7 	bl	8001340 <_Unwind_SetGR>
 8001592:	e79e      	b.n	80014d2 <__gnu_unwind_pr_common+0xf6>
 8001594:	210d      	movs	r1, #13
 8001596:	4630      	mov	r0, r6
 8001598:	f7ff feaa 	bl	80012f0 <_Unwind_GetGR>
 800159c:	6a2f      	ldr	r7, [r5, #32]
 800159e:	4287      	cmp	r7, r0
 80015a0:	d1b7      	bne.n	8001512 <__gnu_unwind_pr_common+0x136>
 80015a2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015a4:	4599      	cmp	r9, r3
 80015a6:	d1b4      	bne.n	8001512 <__gnu_unwind_pr_common+0x136>
 80015a8:	2400      	movs	r4, #0
 80015aa:	2304      	movs	r3, #4
 80015ac:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 80015b0:	444b      	add	r3, r9
 80015b2:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 80015b6:	636b      	str	r3, [r5, #52]	@ 0x34
 80015b8:	f8d9 3000 	ldr.w	r3, [r9]
 80015bc:	42a3      	cmp	r3, r4
 80015be:	db58      	blt.n	8001672 <__gnu_unwind_pr_common+0x296>
 80015c0:	2301      	movs	r3, #1
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	e7a9      	b.n	800151a <__gnu_unwind_pr_common+0x13e>
 80015c6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80015ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80015ce:	f109 0704 	add.w	r7, r9, #4
 80015d2:	46b3      	mov	fp, r6
 80015d4:	2400      	movs	r4, #0
 80015d6:	461e      	mov	r6, r3
 80015d8:	e00b      	b.n	80015f2 <__gnu_unwind_pr_common+0x216>
 80015da:	4638      	mov	r0, r7
 80015dc:	9604      	str	r6, [sp, #16]
 80015de:	f7ff fd69 	bl	80010b4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015e2:	2200      	movs	r2, #0
 80015e4:	4601      	mov	r1, r0
 80015e6:	ab04      	add	r3, sp, #16
 80015e8:	4628      	mov	r0, r5
 80015ea:	f3af 8000 	nop.w
 80015ee:	3704      	adds	r7, #4
 80015f0:	b9f8      	cbnz	r0, 8001632 <__gnu_unwind_pr_common+0x256>
 80015f2:	4544      	cmp	r4, r8
 80015f4:	f104 0401 	add.w	r4, r4, #1
 80015f8:	d1ef      	bne.n	80015da <__gnu_unwind_pr_common+0x1fe>
 80015fa:	210d      	movs	r1, #13
 80015fc:	4658      	mov	r0, fp
 80015fe:	f7ff fe77 	bl	80012f0 <_Unwind_GetGR>
 8001602:	9b04      	ldr	r3, [sp, #16]
 8001604:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 8001608:	4602      	mov	r2, r0
 800160a:	e9c5 2308 	strd	r2, r3, [r5, #32]
 800160e:	2006      	movs	r0, #6
 8001610:	e762      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 8001612:	4604      	mov	r4, r0
 8001614:	210d      	movs	r1, #13
 8001616:	4630      	mov	r0, r6
 8001618:	f7ff fe6a 	bl	80012f0 <_Unwind_GetGR>
 800161c:	9e04      	ldr	r6, [sp, #16]
 800161e:	6228      	str	r0, [r5, #32]
 8001620:	2c02      	cmp	r4, #2
 8001622:	bf04      	itt	eq
 8001624:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8001626:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 800162a:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 800162e:	2006      	movs	r0, #6
 8001630:	e752      	b.n	80014d8 <__gnu_unwind_pr_common+0xfc>
 8001632:	465e      	mov	r6, fp
 8001634:	f8d9 4000 	ldr.w	r4, [r9]
 8001638:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800163c:	e769      	b.n	8001512 <__gnu_unwind_pr_common+0x136>
 800163e:	4648      	mov	r0, r9
 8001640:	f7ff fc6e 	bl	8000f20 <selfrel_offset31>
 8001644:	f109 0304 	add.w	r3, r9, #4
 8001648:	4604      	mov	r4, r0
 800164a:	63ab      	str	r3, [r5, #56]	@ 0x38
 800164c:	4628      	mov	r0, r5
 800164e:	f3af 8000 	nop.w
 8001652:	2800      	cmp	r0, #0
 8001654:	f43f af3f 	beq.w	80014d6 <__gnu_unwind_pr_common+0xfa>
 8001658:	4622      	mov	r2, r4
 800165a:	210f      	movs	r1, #15
 800165c:	4630      	mov	r0, r6
 800165e:	f7ff fe6f 	bl	8001340 <_Unwind_SetGR>
 8001662:	e736      	b.n	80014d2 <__gnu_unwind_pr_common+0xf6>
 8001664:	4630      	mov	r0, r6
 8001666:	210d      	movs	r1, #13
 8001668:	f7ff fe42 	bl	80012f0 <_Unwind_GetGR>
 800166c:	4626      	mov	r6, r4
 800166e:	6228      	str	r0, [r5, #32]
 8001670:	e7db      	b.n	800162a <__gnu_unwind_pr_common+0x24e>
 8001672:	f108 0201 	add.w	r2, r8, #1
 8001676:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 800167a:	e77e      	b.n	800157a <__gnu_unwind_pr_common+0x19e>
 800167c:	00000000 	.word	0x00000000

08001680 <__aeabi_unwind_cpp_pr0>:
 8001680:	2300      	movs	r3, #0
 8001682:	e6ab      	b.n	80013dc <__gnu_unwind_pr_common>

08001684 <__aeabi_unwind_cpp_pr1>:
 8001684:	2301      	movs	r3, #1
 8001686:	e6a9      	b.n	80013dc <__gnu_unwind_pr_common>

08001688 <__aeabi_unwind_cpp_pr2>:
 8001688:	2302      	movs	r3, #2
 800168a:	e6a7      	b.n	80013dc <__gnu_unwind_pr_common>

0800168c <_Unwind_VRS_Pop>:
 800168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001690:	4606      	mov	r6, r0
 8001692:	b0c4      	sub	sp, #272	@ 0x110
 8001694:	4614      	mov	r4, r2
 8001696:	2905      	cmp	r1, #5
 8001698:	f200 80e8 	bhi.w	800186c <_Unwind_VRS_Pop+0x1e0>
 800169c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016a0:	002d0012 	.word	0x002d0012
 80016a4:	006600e6 	.word	0x006600e6
 80016a8:	0006008b 	.word	0x0006008b
 80016ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	f040 80dc 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 80016b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80016b8:	6442      	str	r2, [r0, #68]	@ 0x44
 80016ba:	6383      	str	r3, [r0, #56]	@ 0x38
 80016bc:	2000      	movs	r0, #0
 80016be:	b044      	add	sp, #272	@ 0x110
 80016c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 80d1 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 80016ca:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80016cc:	fa1f fc84 	uxth.w	ip, r4
 80016d0:	2001      	movs	r0, #1
 80016d2:	f106 0e04 	add.w	lr, r6, #4
 80016d6:	fa00 f103 	lsl.w	r1, r0, r3
 80016da:	ea11 0f0c 	tst.w	r1, ip
 80016de:	462a      	mov	r2, r5
 80016e0:	d004      	beq.n	80016ec <_Unwind_VRS_Pop+0x60>
 80016e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80016e6:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
 80016ea:	4615      	mov	r5, r2
 80016ec:	3301      	adds	r3, #1
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d1f1      	bne.n	80016d6 <_Unwind_VRS_Pop+0x4a>
 80016f2:	04a7      	lsls	r7, r4, #18
 80016f4:	d4e2      	bmi.n	80016bc <_Unwind_VRS_Pop+0x30>
 80016f6:	63b5      	str	r5, [r6, #56]	@ 0x38
 80016f8:	e7e0      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8001700:	b2a4      	uxth	r4, r4
 8001702:	d07c      	beq.n	80017fe <_Unwind_VRS_Pop+0x172>
 8001704:	2b05      	cmp	r3, #5
 8001706:	f040 80b1 	bne.w	800186c <_Unwind_VRS_Pop+0x1e0>
 800170a:	eb07 0804 	add.w	r8, r7, r4
 800170e:	f1b8 0f20 	cmp.w	r8, #32
 8001712:	f200 80ab 	bhi.w	800186c <_Unwind_VRS_Pop+0x1e0>
 8001716:	2f0f      	cmp	r7, #15
 8001718:	f240 80aa 	bls.w	8001870 <_Unwind_VRS_Pop+0x1e4>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d0cd      	beq.n	80016bc <_Unwind_VRS_Pop+0x30>
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	0755      	lsls	r5, r2, #29
 8001724:	f100 80ff 	bmi.w	8001926 <_Unwind_VRS_Pop+0x29a>
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	ad02      	add	r5, sp, #8
 800172c:	4628      	mov	r0, r5
 800172e:	f000 f93b 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001732:	0064      	lsls	r4, r4, #1
 8001734:	f1a7 0010 	sub.w	r0, r7, #16
 8001738:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	1e61      	subs	r1, r4, #1
 800173e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001742:	3101      	adds	r1, #1
 8001744:	3804      	subs	r0, #4
 8001746:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800174a:	f852 4b04 	ldr.w	r4, [r2], #4
 800174e:	f840 4f04 	str.w	r4, [r0, #4]!
 8001752:	428a      	cmp	r2, r1
 8001754:	d1f9      	bne.n	800174a <_Unwind_VRS_Pop+0xbe>
 8001756:	2b01      	cmp	r3, #1
 8001758:	f000 80cd 	beq.w	80018f6 <_Unwind_VRS_Pop+0x26a>
 800175c:	2f0f      	cmp	r7, #15
 800175e:	63b2      	str	r2, [r6, #56]	@ 0x38
 8001760:	f240 80e9 	bls.w	8001936 <_Unwind_VRS_Pop+0x2aa>
 8001764:	4628      	mov	r0, r5
 8001766:	f000 f91b 	bl	80019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800176a:	e7a7      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 800176c:	2b03      	cmp	r3, #3
 800176e:	d17d      	bne.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001770:	b2a7      	uxth	r7, r4
 8001772:	eb07 4314 	add.w	r3, r7, r4, lsr #16
 8001776:	2b10      	cmp	r3, #16
 8001778:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800177c:	d876      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	0719      	lsls	r1, r3, #28
 8001782:	f100 80a4 	bmi.w	80018ce <_Unwind_VRS_Pop+0x242>
 8001786:	ad22      	add	r5, sp, #136	@ 0x88
 8001788:	4628      	mov	r0, r5
 800178a:	f000 f933 	bl	80019f4 <__gnu_Unwind_Save_WMMXD>
 800178e:	007a      	lsls	r2, r7, #1
 8001790:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8001792:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8001796:	1e53      	subs	r3, r2, #1
 8001798:	b142      	cbz	r2, 80017ac <_Unwind_VRS_Pop+0x120>
 800179a:	1b01      	subs	r1, r0, r4
 800179c:	5862      	ldr	r2, [r4, r1]
 800179e:	f844 2b04 	str.w	r2, [r4], #4
 80017a2:	3b01      	subs	r3, #1
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	d1f9      	bne.n	800179c <_Unwind_VRS_Pop+0x110>
 80017a8:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80017ac:	63b0      	str	r0, [r6, #56]	@ 0x38
 80017ae:	4628      	mov	r0, r5
 80017b0:	f000 f8fe 	bl	80019b0 <__gnu_Unwind_Restore_WMMXD>
 80017b4:	e782      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d158      	bne.n	800186c <_Unwind_VRS_Pop+0x1e0>
 80017ba:	2c10      	cmp	r4, #16
 80017bc:	d856      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	06d8      	lsls	r0, r3, #27
 80017c2:	d47c      	bmi.n	80018be <_Unwind_VRS_Pop+0x232>
 80017c4:	ad22      	add	r5, sp, #136	@ 0x88
 80017c6:	4628      	mov	r0, r5
 80017c8:	f000 f940 	bl	8001a4c <__gnu_Unwind_Save_WMMXC>
 80017cc:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
 80017ce:	4629      	mov	r1, r5
 80017d0:	2300      	movs	r3, #0
 80017d2:	f04f 0c01 	mov.w	ip, #1
 80017d6:	fa0c f203 	lsl.w	r2, ip, r3
 80017da:	4222      	tst	r2, r4
 80017dc:	4638      	mov	r0, r7
 80017de:	f103 0301 	add.w	r3, r3, #1
 80017e2:	d003      	beq.n	80017ec <_Unwind_VRS_Pop+0x160>
 80017e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80017e8:	600a      	str	r2, [r1, #0]
 80017ea:	4607      	mov	r7, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	f101 0104 	add.w	r1, r1, #4
 80017f2:	d1f0      	bne.n	80017d6 <_Unwind_VRS_Pop+0x14a>
 80017f4:	63b7      	str	r7, [r6, #56]	@ 0x38
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 f91e 	bl	8001a38 <__gnu_Unwind_Restore_WMMXC>
 80017fc:	e75e      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 80017fe:	193a      	adds	r2, r7, r4
 8001800:	2a10      	cmp	r2, #16
 8001802:	d833      	bhi.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001804:	2f10      	cmp	r7, #16
 8001806:	d031      	beq.n	800186c <_Unwind_VRS_Pop+0x1e0>
 8001808:	6802      	ldr	r2, [r0, #0]
 800180a:	07d1      	lsls	r1, r2, #31
 800180c:	d508      	bpl.n	8001820 <_Unwind_VRS_Pop+0x194>
 800180e:	4630      	mov	r0, r6
 8001810:	f022 0203 	bic.w	r2, r2, #3
 8001814:	f840 2b50 	str.w	r2, [r0], #80
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f000 f8b5 	bl	8001988 <__gnu_Unwind_Save_VFP>
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	ad22      	add	r5, sp, #136	@ 0x88
 8001824:	4628      	mov	r0, r5
 8001826:	f000 f8af 	bl	8001988 <__gnu_Unwind_Save_VFP>
 800182a:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 800182c:	9b01      	ldr	r3, [sp, #4]
 800182e:	2c00      	cmp	r4, #0
 8001830:	d062      	beq.n	80018f8 <_Unwind_VRS_Pop+0x26c>
 8001832:	0062      	lsls	r2, r4, #1
 8001834:	3a01      	subs	r2, #1
 8001836:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 800183a:	f04f 0800 	mov.w	r8, #0
 800183e:	3201      	adds	r2, #1
 8001840:	3804      	subs	r0, #4
 8001842:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001846:	f851 4b04 	ldr.w	r4, [r1], #4
 800184a:	f840 4f04 	str.w	r4, [r0, #4]!
 800184e:	4291      	cmp	r1, r2
 8001850:	d1f9      	bne.n	8001846 <_Unwind_VRS_Pop+0x1ba>
 8001852:	f1b8 0f00 	cmp.w	r8, #0
 8001856:	d142      	bne.n	80018de <_Unwind_VRS_Pop+0x252>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d04d      	beq.n	80018f8 <_Unwind_VRS_Pop+0x26c>
 800185c:	2f0f      	cmp	r7, #15
 800185e:	63b1      	str	r1, [r6, #56]	@ 0x38
 8001860:	f63f af2c 	bhi.w	80016bc <_Unwind_VRS_Pop+0x30>
 8001864:	4628      	mov	r0, r5
 8001866:	f000 f893 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 800186a:	e727      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 800186c:	2002      	movs	r0, #2
 800186e:	e726      	b.n	80016be <_Unwind_VRS_Pop+0x32>
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	f1b8 0f10 	cmp.w	r8, #16
 8001876:	f002 0101 	and.w	r1, r2, #1
 800187a:	d943      	bls.n	8001904 <_Unwind_VRS_Pop+0x278>
 800187c:	b151      	cbz	r1, 8001894 <_Unwind_VRS_Pop+0x208>
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	f042 0202 	orr.w	r2, r2, #2
 8001886:	f840 2b50 	str.w	r2, [r0], #80
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f000 f884 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001890:	6832      	ldr	r2, [r6, #0]
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	0750      	lsls	r0, r2, #29
 8001898:	d451      	bmi.n	800193e <_Unwind_VRS_Pop+0x2b2>
 800189a:	ad22      	add	r5, sp, #136	@ 0x88
 800189c:	4628      	mov	r0, r5
 800189e:	f000 f87b 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 80018a2:	a802      	add	r0, sp, #8
 80018a4:	f000 f880 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80018a8:	f1c7 0210 	rsb	r2, r7, #16
 80018ac:	0052      	lsls	r2, r2, #1
 80018ae:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80018b0:	9b01      	ldr	r3, [sp, #4]
 80018b2:	f1a8 0810 	sub.w	r8, r8, #16
 80018b6:	3a01      	subs	r2, #1
 80018b8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 80018bc:	e7bf      	b.n	800183e <_Unwind_VRS_Pop+0x1b2>
 80018be:	f023 0310 	bic.w	r3, r3, #16
 80018c2:	6033      	str	r3, [r6, #0]
 80018c4:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 80018c8:	f000 f8c0 	bl	8001a4c <__gnu_Unwind_Save_WMMXC>
 80018cc:	e77a      	b.n	80017c4 <_Unwind_VRS_Pop+0x138>
 80018ce:	f023 0308 	bic.w	r3, r3, #8
 80018d2:	6003      	str	r3, [r0, #0]
 80018d4:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 80018d8:	f000 f88c 	bl	80019f4 <__gnu_Unwind_Save_WMMXD>
 80018dc:	e753      	b.n	8001786 <_Unwind_VRS_Pop+0xfa>
 80018de:	2f10      	cmp	r7, #16
 80018e0:	4638      	mov	r0, r7
 80018e2:	bf38      	it	cc
 80018e4:	2010      	movcc	r0, #16
 80018e6:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80018ea:	3810      	subs	r0, #16
 80018ec:	ad02      	add	r5, sp, #8
 80018ee:	3901      	subs	r1, #1
 80018f0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80018f4:	e725      	b.n	8001742 <_Unwind_VRS_Pop+0xb6>
 80018f6:	ad22      	add	r5, sp, #136	@ 0x88
 80018f8:	3104      	adds	r1, #4
 80018fa:	63b1      	str	r1, [r6, #56]	@ 0x38
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f83f 	bl	8001980 <__gnu_Unwind_Restore_VFP>
 8001902:	e6db      	b.n	80016bc <_Unwind_VRS_Pop+0x30>
 8001904:	bb19      	cbnz	r1, 800194e <_Unwind_VRS_Pop+0x2c2>
 8001906:	ad22      	add	r5, sp, #136	@ 0x88
 8001908:	4628      	mov	r0, r5
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f000 f844 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001910:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8001912:	2c00      	cmp	r4, #0
 8001914:	d0a6      	beq.n	8001864 <_Unwind_VRS_Pop+0x1d8>
 8001916:	0062      	lsls	r2, r4, #1
 8001918:	9b01      	ldr	r3, [sp, #4]
 800191a:	3a01      	subs	r2, #1
 800191c:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
 8001920:	f04f 0800 	mov.w	r8, #0
 8001924:	e78b      	b.n	800183e <_Unwind_VRS_Pop+0x1b2>
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	f840 2bd8 	str.w	r2, [r0], #216
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	f000 f83a 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001934:	e6f9      	b.n	800172a <_Unwind_VRS_Pop+0x9e>
 8001936:	a822      	add	r0, sp, #136	@ 0x88
 8001938:	f000 f82a 	bl	8001990 <__gnu_Unwind_Restore_VFP_D>
 800193c:	e712      	b.n	8001764 <_Unwind_VRS_Pop+0xd8>
 800193e:	4630      	mov	r0, r6
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	f840 2bd8 	str.w	r2, [r0], #216
 8001948:	f000 f82e 	bl	80019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800194c:	e7a5      	b.n	800189a <_Unwind_VRS_Pop+0x20e>
 800194e:	4630      	mov	r0, r6
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	f042 0202 	orr.w	r2, r2, #2
 8001958:	f840 2b50 	str.w	r2, [r0], #80
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	f000 f81b 	bl	8001998 <__gnu_Unwind_Save_VFP_D>
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	e7cf      	b.n	8001906 <_Unwind_VRS_Pop+0x27a>
 8001966:	bf00      	nop

08001968 <__restore_core_regs>:
 8001968:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800196c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001970:	469c      	mov	ip, r3
 8001972:	46a6      	mov	lr, r4
 8001974:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001978:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800197c:	46e5      	mov	sp, ip
 800197e:	bd00      	pop	{pc}

08001980 <__gnu_Unwind_Restore_VFP>:
 8001980:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <__gnu_Unwind_Save_VFP>:
 8001988:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <__gnu_Unwind_Restore_VFP_D>:
 8001990:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Save_VFP_D>:
 8001998:	ec80 0b20 	vstmia	r0, {d0-d15}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019a0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019a8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Restore_WMMXD>:
 80019b0:	ecf0 0102 	ldfe	f0, [r0], #8
 80019b4:	ecf0 1102 	ldfe	f1, [r0], #8
 80019b8:	ecf0 2102 	ldfe	f2, [r0], #8
 80019bc:	ecf0 3102 	ldfe	f3, [r0], #8
 80019c0:	ecf0 4102 	ldfe	f4, [r0], #8
 80019c4:	ecf0 5102 	ldfe	f5, [r0], #8
 80019c8:	ecf0 6102 	ldfe	f6, [r0], #8
 80019cc:	ecf0 7102 	ldfe	f7, [r0], #8
 80019d0:	ecf0 8102 	ldfp	f0, [r0], #8
 80019d4:	ecf0 9102 	ldfp	f1, [r0], #8
 80019d8:	ecf0 a102 	ldfp	f2, [r0], #8
 80019dc:	ecf0 b102 	ldfp	f3, [r0], #8
 80019e0:	ecf0 c102 	ldfp	f4, [r0], #8
 80019e4:	ecf0 d102 	ldfp	f5, [r0], #8
 80019e8:	ecf0 e102 	ldfp	f6, [r0], #8
 80019ec:	ecf0 f102 	ldfp	f7, [r0], #8
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <__gnu_Unwind_Save_WMMXD>:
 80019f4:	ece0 0102 	stfe	f0, [r0], #8
 80019f8:	ece0 1102 	stfe	f1, [r0], #8
 80019fc:	ece0 2102 	stfe	f2, [r0], #8
 8001a00:	ece0 3102 	stfe	f3, [r0], #8
 8001a04:	ece0 4102 	stfe	f4, [r0], #8
 8001a08:	ece0 5102 	stfe	f5, [r0], #8
 8001a0c:	ece0 6102 	stfe	f6, [r0], #8
 8001a10:	ece0 7102 	stfe	f7, [r0], #8
 8001a14:	ece0 8102 	stfp	f0, [r0], #8
 8001a18:	ece0 9102 	stfp	f1, [r0], #8
 8001a1c:	ece0 a102 	stfp	f2, [r0], #8
 8001a20:	ece0 b102 	stfp	f3, [r0], #8
 8001a24:	ece0 c102 	stfp	f4, [r0], #8
 8001a28:	ece0 d102 	stfp	f5, [r0], #8
 8001a2c:	ece0 e102 	stfp	f6, [r0], #8
 8001a30:	ece0 f102 	stfp	f7, [r0], #8
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <__gnu_Unwind_Restore_WMMXC>:
 8001a38:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a3c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a40:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a44:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <__gnu_Unwind_Save_WMMXC>:
 8001a4c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a50:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a54:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a58:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <_Unwind_RaiseException>:
 8001a60:	46ec      	mov	ip, sp
 8001a62:	b500      	push	{lr}
 8001a64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a74:	a901      	add	r1, sp, #4
 8001a76:	f7ff fbb3 	bl	80011e0 <__gnu_Unwind_RaiseException>
 8001a7a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001a7e:	b012      	add	sp, #72	@ 0x48
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <_Unwind_Resume>:
 8001a84:	46ec      	mov	ip, sp
 8001a86:	b500      	push	{lr}
 8001a88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	f7ff fbdd 	bl	8001258 <__gnu_Unwind_Resume>
 8001a9e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001aa2:	b012      	add	sp, #72	@ 0x48
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <_Unwind_Resume_or_Rethrow>:
 8001aa8:	46ec      	mov	ip, sp
 8001aaa:	b500      	push	{lr}
 8001aac:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ab0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	f7ff fbed 	bl	800129c <__gnu_Unwind_Resume_or_Rethrow>
 8001ac2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001ac6:	b012      	add	sp, #72	@ 0x48
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <_Unwind_ForcedUnwind>:
 8001acc:	46ec      	mov	ip, sp
 8001ace:	b500      	push	{lr}
 8001ad0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ad4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ae0:	ab01      	add	r3, sp, #4
 8001ae2:	f7ff fbb1 	bl	8001248 <__gnu_Unwind_ForcedUnwind>
 8001ae6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001aea:	b012      	add	sp, #72	@ 0x48
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <_Unwind_Backtrace>:
 8001af0:	46ec      	mov	ip, sp
 8001af2:	b500      	push	{lr}
 8001af4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001af8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b04:	aa01      	add	r2, sp, #4
 8001b06:	f7ff fc27 	bl	8001358 <__gnu_Unwind_Backtrace>
 8001b0a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001b0e:	b012      	add	sp, #72	@ 0x48
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <next_unwind_byte>:
 8001b14:	7a02      	ldrb	r2, [r0, #8]
 8001b16:	4603      	mov	r3, r0
 8001b18:	b97a      	cbnz	r2, 8001b3a <next_unwind_byte+0x26>
 8001b1a:	7a42      	ldrb	r2, [r0, #9]
 8001b1c:	b1a2      	cbz	r2, 8001b48 <next_unwind_byte+0x34>
 8001b1e:	6841      	ldr	r1, [r0, #4]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	b410      	push	{r4}
 8001b24:	7242      	strb	r2, [r0, #9]
 8001b26:	6808      	ldr	r0, [r1, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	1d0c      	adds	r4, r1, #4
 8001b2c:	721a      	strb	r2, [r3, #8]
 8001b2e:	0202      	lsls	r2, r0, #8
 8001b30:	605c      	str	r4, [r3, #4]
 8001b32:	0e00      	lsrs	r0, r0, #24
 8001b34:	bc10      	pop	{r4}
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4770      	bx	lr
 8001b3a:	6800      	ldr	r0, [r0, #0]
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	721a      	strb	r2, [r3, #8]
 8001b40:	0202      	lsls	r2, r0, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	0e00      	lsrs	r0, r0, #24
 8001b46:	4770      	bx	lr
 8001b48:	20b0      	movs	r0, #176	@ 0xb0
 8001b4a:	4770      	bx	lr

08001b4c <_Unwind_GetGR.constprop.0>:
 8001b4c:	b500      	push	{lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	aa03      	add	r2, sp, #12
 8001b52:	2300      	movs	r3, #0
 8001b54:	9200      	str	r2, [sp, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	220c      	movs	r2, #12
 8001b5a:	f7ff fbaf 	bl	80012bc <_Unwind_VRS_Get>
 8001b5e:	9803      	ldr	r0, [sp, #12]
 8001b60:	b005      	add	sp, #20
 8001b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b66:	bf00      	nop

08001b68 <unwind_UCB_from_context>:
 8001b68:	e7f0      	b.n	8001b4c <_Unwind_GetGR.constprop.0>
 8001b6a:	bf00      	nop

08001b6c <__gnu_unwind_execute>:
 8001b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b70:	4606      	mov	r6, r0
 8001b72:	b085      	sub	sp, #20
 8001b74:	460d      	mov	r5, r1
 8001b76:	f04f 0800 	mov.w	r8, #0
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff ffca 	bl	8001b14 <next_unwind_byte>
 8001b80:	28b0      	cmp	r0, #176	@ 0xb0
 8001b82:	4604      	mov	r4, r0
 8001b84:	f000 811c 	beq.w	8001dc0 <__gnu_unwind_execute+0x254>
 8001b88:	0607      	lsls	r7, r0, #24
 8001b8a:	d55b      	bpl.n	8001c44 <__gnu_unwind_execute+0xd8>
 8001b8c:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8001b90:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b92:	d01a      	beq.n	8001bca <__gnu_unwind_execute+0x5e>
 8001b94:	d830      	bhi.n	8001bf8 <__gnu_unwind_execute+0x8c>
 8001b96:	2b80      	cmp	r3, #128	@ 0x80
 8001b98:	f000 8082 	beq.w	8001ca0 <__gnu_unwind_execute+0x134>
 8001b9c:	2b90      	cmp	r3, #144	@ 0x90
 8001b9e:	d127      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ba0:	f000 030d 	and.w	r3, r0, #13
 8001ba4:	2b0d      	cmp	r3, #13
 8001ba6:	d023      	beq.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	2300      	movs	r3, #0
 8001bac:	f000 020f 	and.w	r2, r0, #15
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	9700      	str	r7, [sp, #0]
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff fb81 	bl	80012bc <_Unwind_VRS_Get>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9700      	str	r7, [sp, #0]
 8001bbe:	220d      	movs	r2, #13
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f7ff fba2 	bl	800130c <_Unwind_VRS_Set>
 8001bc8:	e7d7      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001bca:	43c3      	mvns	r3, r0
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8001bd4:	411a      	asrs	r2, r3
 8001bd6:	0701      	lsls	r1, r0, #28
 8001bd8:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001bdc:	d501      	bpl.n	8001be2 <__gnu_unwind_execute+0x76>
 8001bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be2:	2300      	movs	r3, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4630      	mov	r0, r6
 8001be8:	f7ff fd50 	bl	800168c <_Unwind_VRS_Pop>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d0c4      	beq.n	8001b7a <__gnu_unwind_execute+0xe>
 8001bf0:	2009      	movs	r0, #9
 8001bf2:	b005      	add	sp, #20
 8001bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf8:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bfa:	d068      	beq.n	8001cce <__gnu_unwind_execute+0x162>
 8001bfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bfe:	d13d      	bne.n	8001c7c <__gnu_unwind_execute+0x110>
 8001c00:	28c6      	cmp	r0, #198	@ 0xc6
 8001c02:	f000 80ca 	beq.w	8001d9a <__gnu_unwind_execute+0x22e>
 8001c06:	28c7      	cmp	r0, #199	@ 0xc7
 8001c08:	f000 80df 	beq.w	8001dca <__gnu_unwind_execute+0x25e>
 8001c0c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c10:	2bc0      	cmp	r3, #192	@ 0xc0
 8001c12:	f000 80ec 	beq.w	8001dee <__gnu_unwind_execute+0x282>
 8001c16:	28c8      	cmp	r0, #200	@ 0xc8
 8001c18:	f000 80f7 	beq.w	8001e0a <__gnu_unwind_execute+0x29e>
 8001c1c:	28c9      	cmp	r0, #201	@ 0xc9
 8001c1e:	d1e7      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c20:	4628      	mov	r0, r5
 8001c22:	f7ff ff77 	bl	8001b14 <next_unwind_byte>
 8001c26:	0302      	lsls	r2, r0, #12
 8001c28:	f000 000f 	and.w	r0, r0, #15
 8001c2c:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001c30:	3001      	adds	r0, #1
 8001c32:	4302      	orrs	r2, r0
 8001c34:	2101      	movs	r1, #1
 8001c36:	2305      	movs	r3, #5
 8001c38:	4630      	mov	r0, r6
 8001c3a:	f7ff fd27 	bl	800168c <_Unwind_VRS_Pop>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d09b      	beq.n	8001b7a <__gnu_unwind_execute+0xe>
 8001c42:	e7d5      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c44:	0083      	lsls	r3, r0, #2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	1d1f      	adds	r7, r3, #4
 8001c4a:	f10d 0908 	add.w	r9, sp, #8
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f8cd 9000 	str.w	r9, [sp]
 8001c56:	220d      	movs	r2, #13
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f7ff fb2f 	bl	80012bc <_Unwind_VRS_Get>
 8001c5e:	9b02      	ldr	r3, [sp, #8]
 8001c60:	f8cd 9000 	str.w	r9, [sp]
 8001c64:	0660      	lsls	r0, r4, #25
 8001c66:	bf4c      	ite	mi
 8001c68:	1bdf      	submi	r7, r3, r7
 8001c6a:	18ff      	addpl	r7, r7, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	220d      	movs	r2, #13
 8001c70:	4619      	mov	r1, r3
 8001c72:	4630      	mov	r0, r6
 8001c74:	9702      	str	r7, [sp, #8]
 8001c76:	f7ff fb49 	bl	800130c <_Unwind_VRS_Set>
 8001c7a:	e77e      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001c7c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001c80:	2bd0      	cmp	r3, #208	@ 0xd0
 8001c82:	d1b5      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001c84:	f000 0207 	and.w	r2, r0, #7
 8001c88:	3201      	adds	r2, #1
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001c90:	2101      	movs	r1, #1
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff fcfa 	bl	800168c <_Unwind_VRS_Pop>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f43f af6e 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001c9e:	e7a7      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff ff37 	bl	8001b14 <next_unwind_byte>
 8001ca6:	0224      	lsls	r4, r4, #8
 8001ca8:	4320      	orrs	r0, r4
 8001caa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001cae:	d09f      	beq.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001cb0:	0104      	lsls	r4, r0, #4
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	b2a2      	uxth	r2, r4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f7ff fce7 	bl	800168c <_Unwind_VRS_Pop>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d196      	bne.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001cc2:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001cc6:	bf18      	it	ne
 8001cc8:	f04f 0801 	movne.w	r8, #1
 8001ccc:	e755      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001cce:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	f200 80b5 	bhi.w	8001e42 <__gnu_unwind_execute+0x2d6>
 8001cd8:	e8df f003 	tbb	[pc, r3]
 8001cdc:	0c162955 	.word	0x0c162955
 8001ce0:	03          	.byte	0x03
 8001ce1:	00          	.byte	0x00
 8001ce2:	aa03      	add	r2, sp, #12
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9200      	str	r2, [sp, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	220d      	movs	r2, #13
 8001cec:	4630      	mov	r0, r6
 8001cee:	f7ff fae5 	bl	80012bc <_Unwind_VRS_Get>
 8001cf2:	e742      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f7ff fcc6 	bl	800168c <_Unwind_VRS_Pop>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	f43f af3a 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001d06:	e773      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7ff ff03 	bl	8001b14 <next_unwind_byte>
 8001d0e:	0302      	lsls	r2, r0, #12
 8001d10:	f000 000f 	and.w	r0, r0, #15
 8001d14:	3001      	adds	r0, #1
 8001d16:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4302      	orrs	r2, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7ff fcb3 	bl	800168c <_Unwind_VRS_Pop>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	f43f af27 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001d2c:	e760      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f10d 0908 	add.w	r9, sp, #8
 8001d34:	220d      	movs	r2, #13
 8001d36:	4619      	mov	r1, r3
 8001d38:	f8cd 9000 	str.w	r9, [sp]
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fabd 	bl	80012bc <_Unwind_VRS_Get>
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7ff fee6 	bl	8001b14 <next_unwind_byte>
 8001d48:	0602      	lsls	r2, r0, #24
 8001d4a:	9c02      	ldr	r4, [sp, #8]
 8001d4c:	f04f 0702 	mov.w	r7, #2
 8001d50:	d50b      	bpl.n	8001d6a <__gnu_unwind_execute+0x1fe>
 8001d52:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001d56:	40b8      	lsls	r0, r7
 8001d58:	4404      	add	r4, r0
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	9402      	str	r4, [sp, #8]
 8001d5e:	f7ff fed9 	bl	8001b14 <next_unwind_byte>
 8001d62:	0603      	lsls	r3, r0, #24
 8001d64:	f107 0707 	add.w	r7, r7, #7
 8001d68:	d4f3      	bmi.n	8001d52 <__gnu_unwind_execute+0x1e6>
 8001d6a:	40b8      	lsls	r0, r7
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001d72:	4404      	add	r4, r0
 8001d74:	f8cd 9000 	str.w	r9, [sp]
 8001d78:	220d      	movs	r2, #13
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	9402      	str	r4, [sp, #8]
 8001d80:	f7ff fac4 	bl	800130c <_Unwind_VRS_Set>
 8001d84:	e6f9      	b.n	8001b7a <__gnu_unwind_execute+0xe>
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7ff fec4 	bl	8001b14 <next_unwind_byte>
 8001d8c:	1e43      	subs	r3, r0, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b0e      	cmp	r3, #14
 8001d92:	4602      	mov	r2, r0
 8001d94:	f67f af25 	bls.w	8001be2 <__gnu_unwind_execute+0x76>
 8001d98:	e72a      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f7ff feba 	bl	8001b14 <next_unwind_byte>
 8001da0:	0302      	lsls	r2, r0, #12
 8001da2:	f000 000f 	and.w	r0, r0, #15
 8001da6:	3001      	adds	r0, #1
 8001da8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 8001dac:	2303      	movs	r3, #3
 8001dae:	4302      	orrs	r2, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4630      	mov	r0, r6
 8001db4:	f7ff fc6a 	bl	800168c <_Unwind_VRS_Pop>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f43f aede 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001dbe:	e717      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001dc0:	f1b8 0f00 	cmp.w	r8, #0
 8001dc4:	d02d      	beq.n	8001e22 <__gnu_unwind_execute+0x2b6>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e713      	b.n	8001bf2 <__gnu_unwind_execute+0x86>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fea2 	bl	8001b14 <next_unwind_byte>
 8001dd0:	1e43      	subs	r3, r0, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b0e      	cmp	r3, #14
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f63f af0a 	bhi.w	8001bf0 <__gnu_unwind_execute+0x84>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2104      	movs	r1, #4
 8001de0:	4630      	mov	r0, r6
 8001de2:	f7ff fc53 	bl	800168c <_Unwind_VRS_Pop>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	f43f aec7 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001dec:	e700      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001dee:	f000 020f 	and.w	r2, r0, #15
 8001df2:	3201      	adds	r2, #1
 8001df4:	2303      	movs	r3, #3
 8001df6:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff fc45 	bl	800168c <_Unwind_VRS_Pop>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	f43f aeb9 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001e08:	e6f2      	b.n	8001bf0 <__gnu_unwind_execute+0x84>
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f7ff fe82 	bl	8001b14 <next_unwind_byte>
 8001e10:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
 8001e14:	f000 030f 	and.w	r3, r0, #15
 8001e18:	3210      	adds	r2, #16
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001e20:	e708      	b.n	8001c34 <__gnu_unwind_execute+0xc8>
 8001e22:	ac02      	add	r4, sp, #8
 8001e24:	4643      	mov	r3, r8
 8001e26:	4641      	mov	r1, r8
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	220e      	movs	r2, #14
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f7ff fa45 	bl	80012bc <_Unwind_VRS_Get>
 8001e32:	220f      	movs	r2, #15
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	4643      	mov	r3, r8
 8001e38:	4641      	mov	r1, r8
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f7ff fa66 	bl	800130c <_Unwind_VRS_Set>
 8001e40:	e7c1      	b.n	8001dc6 <__gnu_unwind_execute+0x25a>
 8001e42:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001e46:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e48:	f43f aed2 	beq.w	8001bf0 <__gnu_unwind_execute+0x84>
 8001e4c:	f000 0207 	and.w	r2, r0, #7
 8001e50:	3201      	adds	r2, #1
 8001e52:	2301      	movs	r3, #1
 8001e54:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f7ff fc16 	bl	800168c <_Unwind_VRS_Pop>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f43f ae8a 	beq.w	8001b7a <__gnu_unwind_execute+0xe>
 8001e66:	e6c3      	b.n	8001bf0 <__gnu_unwind_execute+0x84>

08001e68 <__gnu_unwind_frame>:
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001e6c:	6853      	ldr	r3, [r2, #4]
 8001e6e:	b084      	sub	sp, #16
 8001e70:	f04f 0c03 	mov.w	ip, #3
 8001e74:	3208      	adds	r2, #8
 8001e76:	021c      	lsls	r4, r3, #8
 8001e78:	4608      	mov	r0, r1
 8001e7a:	0e1b      	lsrs	r3, r3, #24
 8001e7c:	a901      	add	r1, sp, #4
 8001e7e:	9401      	str	r4, [sp, #4]
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e86:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e8a:	f7ff fe6f 	bl	8001b6c <__gnu_unwind_execute>
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	bf00      	nop

08001e94 <_Unwind_GetRegionStart>:
 8001e94:	b508      	push	{r3, lr}
 8001e96:	f7ff fe67 	bl	8001b68 <unwind_UCB_from_context>
 8001e9a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8001e9c:	bd08      	pop	{r3, pc}
 8001e9e:	bf00      	nop

08001ea0 <_Unwind_GetLanguageSpecificData>:
 8001ea0:	b508      	push	{r3, lr}
 8001ea2:	f7ff fe61 	bl	8001b68 <unwind_UCB_from_context>
 8001ea6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8001ea8:	79c3      	ldrb	r3, [r0, #7]
 8001eaa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001eae:	3008      	adds	r0, #8
 8001eb0:	bd08      	pop	{r3, pc}
 8001eb2:	bf00      	nop

08001eb4 <__aeabi_idiv0>:
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <readReg>:
 * 
 * @param data[out]
 *   The register value is written to this parameter
 **********************************************************/    
static uint32_t readReg(bool ap, int reg, uint32_t *data)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t b;
  uint32_t ack = 0;
  uint32_t ret = SWD_ERROR_OK;
   
  /* Initalize output variable */
  *data = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6013      	str	r3, [r2, #0]
  
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)1;
  
  int A2 = reg & 0x1;
 8001ebe:	f001 0501 	and.w	r5, r1, #1
  int A3 = (reg >> 1) & 0x1;
 8001ec2:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calulate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	442b      	add	r3, r5
 8001eca:	440b      	add	r3, r1
 8001ecc:	f003 0301 	and.w	r3, r3, #1
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ed0:	4c7f      	ldr	r4, [pc, #508]	@ (80020d0 <readReg+0x218>)
 8001ed2:	2610      	movs	r6, #16
 8001ed4:	61a6      	str	r6, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ed6:	6826      	ldr	r6, [r4, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001edc:	fa94 f4a4 	rbit	r4, r4
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ee0:	fab4 f484 	clz	r4, r4
 8001ee4:	0064      	lsls	r4, r4, #1
 8001ee6:	f04f 0c03 	mov.w	ip, #3
 8001eea:	fa0c f404 	lsl.w	r4, ip, r4
 8001eee:	ea26 0c04 	bic.w	ip, r6, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001ef6:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8001efa:	fab4 f484 	clz	r4, r4
 8001efe:	0064      	lsls	r4, r4, #1
 8001f00:	2601      	movs	r6, #1
 8001f02:	40a6      	lsls	r6, r4
 8001f04:	ea46 060c 	orr.w	r6, r6, ip
 8001f08:	4c71      	ldr	r4, [pc, #452]	@ (80020d0 <readReg+0x218>)
 8001f0a:	6026      	str	r6, [r4, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f0c:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
 8001f10:	61a6      	str	r6, [r4, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f12:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001f16:	61a7      	str	r7, [r4, #24]
 8001f18:	2740      	movs	r7, #64	@ 0x40
 8001f1a:	61a7      	str	r7, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f1c:	61a6      	str	r6, [r4, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Send request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	f000 8097 	beq.w	8002052 <readReg+0x19a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001f2a:	6184      	str	r4, [r0, #24]
 8001f2c:	4868      	ldr	r0, [pc, #416]	@ (80020d0 <readReg+0x218>)
 8001f2e:	2640      	movs	r6, #64	@ 0x40
 8001f30:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f32:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001f36:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f38:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001f3c:	6187      	str	r7, [r0, #24]
 8001f3e:	6186      	str	r6, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f40:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8001f42:	2d00      	cmp	r5, #0
 8001f44:	f000 808a 	beq.w	800205c <readReg+0x1a4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f48:	6187      	str	r7, [r0, #24]
 8001f4a:	4861      	ldr	r0, [pc, #388]	@ (80020d0 <readReg+0x218>)
 8001f4c:	2440      	movs	r4, #64	@ 0x40
 8001f4e:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f50:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8001f54:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 8001f56:	2900      	cmp	r1, #0
 8001f58:	f000 8085 	beq.w	8002066 <readReg+0x1ae>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f62:	6188      	str	r0, [r1, #24]
 8001f64:	495a      	ldr	r1, [pc, #360]	@ (80020d0 <readReg+0x218>)
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f6a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001f6e:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d07d      	beq.n	8002070 <readReg+0x1b8>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f74:	460b      	mov	r3, r1
 8001f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7a:	6199      	str	r1, [r3, #24]
 8001f7c:	4b54      	ldr	r3, [pc, #336]	@ (80020d0 <readReg+0x218>)
 8001f7e:	2040      	movs	r0, #64	@ 0x40
 8001f80:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001f86:	6199      	str	r1, [r3, #24]
 8001f88:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8001f8c:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f8e:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f90:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f96:	6199      	str	r1, [r3, #24]
 8001f98:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f9a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001f9e:	6198      	str	r0, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fa0:	681b      	ldr	r3, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8001fa6:	fab1 f181 	clz	r1, r1
 8001faa:	0049      	lsls	r1, r1, #1
 8001fac:	2003      	movs	r0, #3
 8001fae:	fa00 f101 	lsl.w	r1, r0, r1
 8001fb2:	ea23 0101 	bic.w	r1, r3, r1
 8001fb6:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <readReg+0x218>)
 8001fb8:	6019      	str	r1, [r3, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001fbe:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fc0:	2140      	movs	r1, #64	@ 0x40
 8001fc2:	6199      	str	r1, [r3, #24]
  uint32_t ack = 0;
 8001fc4:	2000      	movs	r0, #0
  /* Turnaround */
  SWDIO_SET_INPUT();
  SWCLK_CYCLE();
  
  /* Read ACK */
  for ( i=0; i<3; i++ ) {
 8001fc6:	4601      	mov	r1, r0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fc8:	461c      	mov	r4, r3
 8001fca:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fce:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001fd0:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001fd2:	6923      	ldr	r3, [r4, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fd4:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001fd6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 8001fda:	408b      	lsls	r3, r1
 8001fdc:	4318      	orrs	r0, r3
  for ( i=0; i<3; i++ ) {
 8001fde:	3101      	adds	r1, #1
 8001fe0:	2903      	cmp	r1, #3
 8001fe2:	d1f5      	bne.n	8001fd0 <readReg+0x118>
  }
  
  /* Verify that ACK is OK */
  if ( ack == ACK_OK ) {
 8001fe4:	2801      	cmp	r0, #1
 8001fe6:	d048      	beq.n	800207a <readReg+0x1c2>
    } else {
      ret = SWD_ERROR_PARITY;
    }
    
  } 
  else if ( ack == ACK_WAIT ) 
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d003      	beq.n	8001ff4 <readReg+0x13c>
  {
    ret = SWD_ERROR_WAIT;
  } 
  else if ( ack == ACK_FAULT ) 
  {
    ret = SWD_ERROR_FAULT;
 8001fec:	2804      	cmp	r0, #4
 8001fee:	bf14      	ite	ne
 8001ff0:	2004      	movne	r0, #4
 8001ff2:	2003      	moveq	r0, #3
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <readReg+0x218>)
 8001ff6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ffa:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ffc:	2240      	movs	r2, #64	@ 0x40
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	2210      	movs	r2, #16
 8002002:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002004:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800200a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002022:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	430b      	orrs	r3, r1
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <readReg+0x218>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <readReg+0x218>)
 800203c:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002040:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002044:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002046:	619d      	str	r5, [r3, #24]
 8002048:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800204a:	6199      	str	r1, [r3, #24]
  SWCLK_CYCLE();
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 800204c:	3a01      	subs	r2, #1
 800204e:	d1fa      	bne.n	8002046 <readReg+0x18e>
    SWD_WRITE_BIT(0);
  }
  
  return ret;
}
 8002050:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002052:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <readReg+0x218>)
 8002054:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002058:	6184      	str	r4, [r0, #24]
}
 800205a:	e767      	b.n	8001f2c <readReg+0x74>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <readReg+0x218>)
 800205e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002062:	6184      	str	r4, [r0, #24]
}
 8002064:	e771      	b.n	8001f4a <readReg+0x92>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002066:	491a      	ldr	r1, [pc, #104]	@ (80020d0 <readReg+0x218>)
 8002068:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800206c:	6188      	str	r0, [r1, #24]
}
 800206e:	e779      	b.n	8001f64 <readReg+0xac>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <readReg+0x218>)
 8002072:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002076:	6199      	str	r1, [r3, #24]
}
 8002078:	e780      	b.n	8001f7c <readReg+0xc4>
  uint32_t cb = 0;
 800207a:	f04f 0e00 	mov.w	lr, #0
    for ( i=0; i<32; i++ ) 
 800207e:	4673      	mov	r3, lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002080:	4c13      	ldr	r4, [pc, #76]	@ (80020d0 <readReg+0x218>)
 8002082:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002086:	2540      	movs	r5, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002088:	61a6      	str	r6, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800208a:	6921      	ldr	r1, [r4, #16]
 800208c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002090:	61a5      	str	r5, [r4, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002092:	2900      	cmp	r1, #0
 8002094:	bf14      	ite	ne
 8002096:	f04f 0c01 	movne.w	ip, #1
 800209a:	f04f 0c00 	moveq.w	ip, #0
      *data |= b << i;
 800209e:	fa0c fc03 	lsl.w	ip, ip, r3
 80020a2:	6811      	ldr	r1, [r2, #0]
 80020a4:	ea41 010c 	orr.w	r1, r1, ip
 80020a8:	6011      	str	r1, [r2, #0]
      if ( b ) cb = !cb;
 80020aa:	bf18      	it	ne
 80020ac:	f08e 0e01 	eorne.w	lr, lr, #1
    for ( i=0; i<32; i++ ) 
 80020b0:	3301      	adds	r3, #1
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d1e8      	bne.n	8002088 <readReg+0x1d0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80020b6:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <readReg+0x218>)
 80020b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020bc:	6193      	str	r3, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80020be:	6913      	ldr	r3, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020c0:	2140      	movs	r1, #64	@ 0x40
 80020c2:	6191      	str	r1, [r2, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80020c4:	f3c3 2300 	ubfx	r3, r3, #8, #1
      ret = SWD_ERROR_PARITY;
 80020c8:	459e      	cmp	lr, r3
 80020ca:	bf18      	it	ne
 80020cc:	2005      	movne	r0, #5
 80020ce:	e791      	b.n	8001ff4 <readReg+0x13c>
 80020d0:	40020400 	.word	0x40020400

080020d4 <writeReg>:
 * 
 * @param data
 *   The value to write to the register
 **********************************************************/
static uint32_t writeReg(bool ap, int reg, uint32_t data, bool ignoreAck)
{
 80020d4:	b4f0      	push	{r4, r5, r6, r7}
  /* Convert to int */
  int _ap = (int)ap;
  int _read = (int)0;
  
  /* Calulate address bits */
  int A2 = reg & 0x1;
 80020d6:	f001 0601 	and.w	r6, r1, #1
  int A3 = (reg >> 1) & 0x1;
 80020da:	f3c1 0140 	ubfx	r1, r1, #1, #1
  
  /* Calculate parity */
  parity = (_ap + _read + A2 + A3) & 0x1;
 80020de:	1985      	adds	r5, r0, r6
 80020e0:	440d      	add	r5, r1
 80020e2:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020e6:	4c93      	ldr	r4, [pc, #588]	@ (8002334 <writeReg+0x260>)
 80020e8:	2710      	movs	r7, #16
 80020ea:	61a7      	str	r7, [r4, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80020ec:	6827      	ldr	r7, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80020f2:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80020f6:	fab4 f484 	clz	r4, r4
 80020fa:	0064      	lsls	r4, r4, #1
 80020fc:	f04f 0c03 	mov.w	ip, #3
 8002100:	fa0c f404 	lsl.w	r4, ip, r4
 8002104:	ea27 0c04 	bic.w	ip, r7, r4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800210c:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8002110:	fab4 f484 	clz	r4, r4
 8002114:	0064      	lsls	r4, r4, #1
 8002116:	2701      	movs	r7, #1
 8002118:	40a7      	lsls	r7, r4
 800211a:	ea47 070c 	orr.w	r7, r7, ip
 800211e:	4c85      	ldr	r4, [pc, #532]	@ (8002334 <writeReg+0x260>)
 8002120:	6027      	str	r7, [r4, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002122:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
 8002126:	61a7      	str	r7, [r4, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002128:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 800212c:	f8c4 c018 	str.w	ip, [r4, #24]
 8002130:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8002134:	f8c4 c018 	str.w	ip, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002138:	61a7      	str	r7, [r4, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* Write request */
  SWD_WRITE_BIT(1);
  SWD_WRITE_BIT(_ap);
 800213a:	2800      	cmp	r0, #0
 800213c:	f000 8092 	beq.w	8002264 <writeReg+0x190>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002140:	4620      	mov	r0, r4
 8002142:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8002146:	6184      	str	r4, [r0, #24]
 8002148:	487a      	ldr	r0, [pc, #488]	@ (8002334 <writeReg+0x260>)
 800214a:	2740      	movs	r7, #64	@ 0x40
 800214c:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800214e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8002152:	6184      	str	r4, [r0, #24]
 8002154:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 8002158:	f8c0 c018 	str.w	ip, [r0, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800215c:	6187      	str	r7, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800215e:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(_read);
  SWD_WRITE_BIT(A2);
 8002160:	2e00      	cmp	r6, #0
 8002162:	f000 8084 	beq.w	800226e <writeReg+0x19a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002166:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800216a:	6184      	str	r4, [r0, #24]
 800216c:	4871      	ldr	r0, [pc, #452]	@ (8002334 <writeReg+0x260>)
 800216e:	2440      	movs	r4, #64	@ 0x40
 8002170:	6184      	str	r4, [r0, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002172:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
 8002176:	6184      	str	r4, [r0, #24]
  SWD_WRITE_BIT(A3);
 8002178:	2900      	cmp	r1, #0
 800217a:	d07d      	beq.n	8002278 <writeReg+0x1a4>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800217c:	4601      	mov	r1, r0
 800217e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002182:	6188      	str	r0, [r1, #24]
 8002184:	496b      	ldr	r1, [pc, #428]	@ (8002334 <writeReg+0x260>)
 8002186:	2040      	movs	r0, #64	@ 0x40
 8002188:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800218a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800218e:	6188      	str	r0, [r1, #24]
  SWD_WRITE_BIT(parity);
 8002190:	2d00      	cmp	r5, #0
 8002192:	d076      	beq.n	8002282 <writeReg+0x1ae>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002194:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002198:	6188      	str	r0, [r1, #24]
 800219a:	4966      	ldr	r1, [pc, #408]	@ (8002334 <writeReg+0x260>)
 800219c:	2440      	movs	r4, #64	@ 0x40
 800219e:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021a0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80021a4:	6188      	str	r0, [r1, #24]
 80021a6:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80021aa:	618d      	str	r5, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021ac:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021ae:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021b4:	6188      	str	r0, [r1, #24]
 80021b6:	618c      	str	r4, [r1, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021b8:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 80021bc:	618c      	str	r4, [r1, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80021be:	680c      	ldr	r4, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	fa90 f1a0 	rbit	r1, r0
  return __builtin_clz(value);
 80021c4:	fab1 f181 	clz	r1, r1
 80021c8:	0049      	lsls	r1, r1, #1
 80021ca:	2003      	movs	r0, #3
 80021cc:	fa00 f101 	lsl.w	r1, r0, r1
 80021d0:	ea24 0401 	bic.w	r4, r4, r1
 80021d4:	4957      	ldr	r1, [pc, #348]	@ (8002334 <writeReg+0x260>)
 80021d6:	600c      	str	r4, [r1, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021d8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80021dc:	6188      	str	r0, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021de:	2040      	movs	r0, #64	@ 0x40
 80021e0:	6188      	str	r0, [r1, #24]

  /* Turnaround */
  SWCLK_CYCLE();
  
  /* Read acknowledge */
  for ( i=0; i<3; i++ ) {
 80021e2:	2400      	movs	r4, #0
  uint32_t ack = 0;
 80021e4:	4620      	mov	r0, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021e6:	460d      	mov	r5, r1
 80021e8:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021ec:	2640      	movs	r6, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021ee:	61af      	str	r7, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021f0:	6929      	ldr	r1, [r5, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021f2:	61ae      	str	r6, [r5, #24]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021f4:	f3c1 2100 	ubfx	r1, r1, #8, #1
	  SWD_READ_BIT(b);
    ack |= b << i;
 80021f8:	40a1      	lsls	r1, r4
 80021fa:	4308      	orrs	r0, r1
  for ( i=0; i<3; i++ ) {
 80021fc:	3401      	adds	r4, #1
 80021fe:	2c03      	cmp	r4, #3
 8002200:	d1f5      	bne.n	80021ee <writeReg+0x11a>
  }
  
  if ( ack == ACK_OK || ignoreAck ) 
 8002202:	2801      	cmp	r0, #1
 8002204:	d002      	beq.n	800220c <writeReg+0x138>
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 808d 	beq.w	8002326 <writeReg+0x252>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800220c:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <writeReg+0x260>)
 800220e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002212:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002214:	2140      	movs	r1, #64	@ 0x40
 8002216:	6199      	str	r1, [r3, #24]
 8002218:	2110      	movs	r1, #16
 800221a:	6199      	str	r1, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800221c:	6818      	ldr	r0, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002222:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2103      	movs	r1, #3
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	ea20 0003 	bic.w	r0, r0, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	4303      	orrs	r3, r0
 800224c:	4939      	ldr	r1, [pc, #228]	@ (8002334 <writeReg+0x260>)
 800224e:	600b      	str	r3, [r1, #0]
    SWCLK_CYCLE();
  
    SWDIO_SET_OUTPUT();
    
    /* Write data */
    parity = 0;
 8002250:	2400      	movs	r4, #0
    for ( i=0; i<32; i++ ) {
 8002252:	4623      	mov	r3, r4
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002254:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002258:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800225c:	2640      	movs	r6, #64	@ 0x40
 800225e:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8002262:	e019      	b.n	8002298 <writeReg+0x1c4>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002264:	4833      	ldr	r0, [pc, #204]	@ (8002334 <writeReg+0x260>)
 8002266:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 800226a:	6184      	str	r4, [r0, #24]
}
 800226c:	e76c      	b.n	8002148 <writeReg+0x74>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800226e:	4831      	ldr	r0, [pc, #196]	@ (8002334 <writeReg+0x260>)
 8002270:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
 8002274:	6184      	str	r4, [r0, #24]
}
 8002276:	e779      	b.n	800216c <writeReg+0x98>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002278:	492e      	ldr	r1, [pc, #184]	@ (8002334 <writeReg+0x260>)
 800227a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800227e:	6188      	str	r0, [r1, #24]
}
 8002280:	e780      	b.n	8002184 <writeReg+0xb0>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002282:	492c      	ldr	r1, [pc, #176]	@ (8002334 <writeReg+0x260>)
 8002284:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8002288:	6188      	str	r0, [r1, #24]
}
 800228a:	e786      	b.n	800219a <writeReg+0xc6>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800228c:	f8c1 c018 	str.w	ip, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002290:	618e      	str	r6, [r1, #24]
 8002292:	3301      	adds	r3, #1
 8002294:	2b20      	cmp	r3, #32
 8002296:	d00a      	beq.n	80022ae <writeReg+0x1da>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002298:	618d      	str	r5, [r1, #24]
      b = (data >> i) & 0x1;
 800229a:	fa22 f003 	lsr.w	r0, r2, r3
      SWD_WRITE_BIT(b);
 800229e:	f010 0f01 	tst.w	r0, #1
 80022a2:	d0f3      	beq.n	800228c <writeReg+0x1b8>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022a4:	618f      	str	r7, [r1, #24]
 80022a6:	618e      	str	r6, [r1, #24]
      if (b) parity = !parity;
 80022a8:	f084 0401 	eor.w	r4, r4, #1
 80022ac:	e7f1      	b.n	8002292 <writeReg+0x1be>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <writeReg+0x260>)
 80022b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022b4:	619a      	str	r2, [r3, #24]
    }
    
    /* Write parity bit */
    SWD_WRITE_BIT(parity);
 80022b6:	b38c      	cbz	r4, 800231c <writeReg+0x248>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <writeReg+0x260>)
 80022c0:	2240      	movs	r2, #64	@ 0x40
 80022c2:	619a      	str	r2, [r3, #24]
  uint32_t ret = SWD_ERROR_OK;
 80022c4:	2001      	movs	r0, #1
 80022c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <writeReg+0x260>)
 80022c8:	2210      	movs	r2, #16
 80022ca:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022cc:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ea:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2201      	movs	r2, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	430b      	orrs	r3, r1
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <writeReg+0x260>)
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	2208      	movs	r2, #8
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <writeReg+0x260>)
 8002304:	f44f 0580 	mov.w	r5, #4194304	@ 0x400000
 8002308:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800230c:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800230e:	619d      	str	r5, [r3, #24]
 8002310:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002312:	6199      	str	r1, [r3, #24]
    
  
  /* 8-cycle idle period. Make sure transaction
   * is clocked through DAP. */
  SWDIO_SET_OUTPUT();
  for ( i=0; i<8; i++ ) {
 8002314:	3a01      	subs	r2, #1
 8002316:	d1fa      	bne.n	800230e <writeReg+0x23a>
	  SWD_WRITE_BIT(0);
  }

  return ret;
  
}
 8002318:	bcf0      	pop	{r4, r5, r6, r7}
 800231a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <writeReg+0x260>)
 800231e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	e7cb      	b.n	80022be <writeReg+0x1ea>
  else if ( ack == ACK_WAIT ) 
 8002326:	2802      	cmp	r0, #2
 8002328:	d0cd      	beq.n	80022c6 <writeReg+0x1f2>
    ret = SWD_ERROR_FAULT;
 800232a:	2804      	cmp	r0, #4
 800232c:	bf14      	ite	ne
 800232e:	2004      	movne	r0, #4
 8002330:	2003      	moveq	r0, #3
 8002332:	e7c8      	b.n	80022c6 <writeReg+0x1f2>
 8002334:	40020400 	.word	0x40020400

08002338 <JTAG_to_SWD_Sequence>:
 * Sends the JTAG-to-SWD sequence. This must be performed
 * at the very beginning of every debug session and
 * again in case of a protocol error. 
 **********************************************************/
void JTAG_to_SWD_Sequence(void)
{
 8002338:	b470      	push	{r4, r5, r6}
  WRITE_REG(GPIOx->BSRR, PinMask);
 800233a:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 800233c:	2210      	movs	r2, #16
 800233e:	619a      	str	r2, [r3, #24]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002340:	6819      	ldr	r1, [r3, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002346:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	ea21 0103 	bic.w	r1, r1, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	430b      	orrs	r3, r1
 8002370:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 8002372:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002378:	6193      	str	r3, [r2, #24]
 800237a:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800237c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002380:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002382:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002384:	6191      	str	r1, [r2, #24]
  
  SWDIO_SET_OUTPUT();
  
  /* First reset line with > 50 cycles with SWDIO high */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 8002386:	3b01      	subs	r3, #1
 8002388:	d1fb      	bne.n	8002382 <JTAG_to_SWD_Sequence+0x4a>
    SWCLK_CYCLE();
  }
  
  /* Transmit 16-bit JTAG-to-SWD sequence */
  for ( i=0; i<16; i++ ) {
 800238a:	2300      	movs	r3, #0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800238c:	4a1a      	ldr	r2, [pc, #104]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 800238e:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
    b = (JTAG2SWD >> i) & 0x1;
 8002392:	f24e 7c9e 	movw	ip, #59294	@ 0xe79e
 8002396:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 800239a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800239e:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023a0:	6194      	str	r4, [r2, #24]
 80023a2:	fa4c f103 	asr.w	r1, ip, r3
    SWD_WRITE_BIT(b);
 80023a6:	f011 0f01 	tst.w	r1, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023aa:	bf14      	ite	ne
 80023ac:	6195      	strne	r5, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ae:	6196      	streq	r6, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023b0:	6190      	str	r0, [r2, #24]
  for ( i=0; i<16; i++ ) {
 80023b2:	3301      	adds	r3, #1
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d1f3      	bne.n	80023a0 <JTAG_to_SWD_Sequence+0x68>
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	233c      	movs	r3, #60	@ 0x3c
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023c2:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023c8:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ca:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023cc:	6191      	str	r1, [r2, #24]
  }
  
  /* Do another reset to make sure SW-DP is in reset state */
  SWDIO_OUT(1);
  for ( i=0; i<60; i++ ) {
 80023ce:	3b01      	subs	r3, #1
 80023d0:	d1fb      	bne.n	80023ca <JTAG_to_SWD_Sequence+0x92>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <JTAG_to_SWD_Sequence+0xc0>)
 80023d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	2310      	movs	r3, #16
 80023dc:	f102 527c 	add.w	r2, r2, #1056964608	@ 0x3f000000
 80023e0:	f502 3201 	add.w	r2, r2, #132096	@ 0x20400
 80023e4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023e8:	2140      	movs	r1, #64	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80023ea:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023ec:	6191      	str	r1, [r2, #24]
    SWCLK_CYCLE();
  }
  
  /* Insert a 16 cycle idle period */
  SWDIO_OUT(0);
  for ( i=0; i<16; i++ ) {
 80023ee:	3b01      	subs	r3, #1
 80023f0:	d1fb      	bne.n	80023ea <JTAG_to_SWD_Sequence+0xb2>
    SWCLK_CYCLE();
  }
}
 80023f2:	bc70      	pop	{r4, r5, r6}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40020400 	.word	0x40020400

080023fc <writeAP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeAP(int reg, uint32_t data)
{
 80023fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002400:	4606      	mov	r6, r0
 8002402:	460d      	mov	r5, r1
 8002404:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;

  do {
    swdStatus = writeReg(true, reg, data, false);
 8002406:	f04f 0800 	mov.w	r8, #0
 800240a:	2701      	movs	r7, #1
 800240c:	4643      	mov	r3, r8
 800240e:	462a      	mov	r2, r5
 8002410:	4631      	mov	r1, r6
 8002412:	4638      	mov	r0, r7
 8002414:	f7ff fe5e 	bl	80020d4 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 );  
 8002418:	2802      	cmp	r0, #2
 800241a:	d10a      	bne.n	8002432 <writeAP+0x36>
 800241c:	3c01      	subs	r4, #1
 800241e:	d1f5      	bne.n	800240c <writeAP+0x10>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <writeAP+0x40>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4601      	mov	r1, r0
 8002426:	20a0      	movs	r0, #160	@ 0xa0
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <writeAP+0x44>)
 800242a:	fb00 3002 	mla	r0, r0, r2, r3
 800242e:	f7fd fee7 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002432:	2801      	cmp	r0, #1
 8002434:	d1f4      	bne.n	8002420 <writeAP+0x24>
  }
}
 8002436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000
 8002440:	20000320 	.word	0x20000320

08002444 <writeDP>:
 * @param data[in]
 *    Value to write to the register
 * 
 **********************************************************/
void writeDP(int reg, uint32_t data)
{
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	4607      	mov	r7, r0
 8002448:	460e      	mov	r6, r1
 800244a:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = writeReg(false, reg, data, false);
 800244c:	2500      	movs	r5, #0
 800244e:	462b      	mov	r3, r5
 8002450:	4632      	mov	r2, r6
 8002452:	4639      	mov	r1, r7
 8002454:	4628      	mov	r0, r5
 8002456:	f7ff fe3d 	bl	80020d4 <writeReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 800245a:	2802      	cmp	r0, #2
 800245c:	d10a      	bne.n	8002474 <writeDP+0x30>
 800245e:	3c01      	subs	r4, #1
 8002460:	d1f5      	bne.n	800244e <writeDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <writeDP+0x38>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4601      	mov	r1, r0
 8002468:	20a0      	movs	r0, #160	@ 0xa0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <writeDP+0x3c>)
 800246c:	fb00 3002 	mla	r0, r0, r2, r3
 8002470:	f7fd fec6 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 8002474:	2801      	cmp	r0, #1
 8002476:	d1f4      	bne.n	8002462 <writeDP+0x1e>
  }
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000
 8002480:	20000320 	.word	0x20000320

08002484 <readAP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readAP(int reg, uint32_t *data)
{
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	4606      	mov	r6, r0
 8002488:	460d      	mov	r5, r1
 800248a:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(true, reg, data);
 800248c:	2701      	movs	r7, #1
 800248e:	462a      	mov	r2, r5
 8002490:	4631      	mov	r1, r6
 8002492:	4638      	mov	r0, r7
 8002494:	f7ff fd10 	bl	8001eb8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 8002498:	2802      	cmp	r0, #2
 800249a:	d10a      	bne.n	80024b2 <readAP+0x2e>
 800249c:	3c01      	subs	r4, #1
 800249e:	d1f6      	bne.n	800248e <readAP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) 
  {
    RAISE(swdStatus);
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <readAP+0x34>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4601      	mov	r1, r0
 80024a6:	20a0      	movs	r0, #160	@ 0xa0
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <readAP+0x38>)
 80024aa:	fb00 3002 	mla	r0, r0, r2, r3
 80024ae:	f7fd fea7 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) 
 80024b2:	2801      	cmp	r0, #1
 80024b4:	d1f4      	bne.n	80024a0 <readAP+0x1c>
  }
}
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000320 	.word	0x20000320

080024c0 <readDP>:
 * @param data[out]
 *    Value of register is written to this parameter
 * 
 **********************************************************/
void readDP(int reg, uint32_t *data)
{
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	4606      	mov	r6, r0
 80024c4:	460d      	mov	r5, r1
 80024c6:	24c8      	movs	r4, #200	@ 0xc8
  uint32_t swdStatus;
  uint32_t retry = SWD_RETRY_COUNT;
  
  do {
    swdStatus = readReg(false, reg, data);
 80024c8:	2700      	movs	r7, #0
 80024ca:	462a      	mov	r2, r5
 80024cc:	4631      	mov	r1, r6
 80024ce:	4638      	mov	r0, r7
 80024d0:	f7ff fcf2 	bl	8001eb8 <readReg>
    retry--;
  } while ( swdStatus == SWD_ERROR_WAIT && retry > 0 ); 
 80024d4:	2802      	cmp	r0, #2
 80024d6:	d10a      	bne.n	80024ee <readDP+0x2e>
 80024d8:	3c01      	subs	r4, #1
 80024da:	d1f6      	bne.n	80024ca <readDP+0xa>
  
  if ( swdStatus != SWD_ERROR_OK ) {
    RAISE(swdStatus);
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <readDP+0x34>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4601      	mov	r1, r0
 80024e2:	20a0      	movs	r0, #160	@ 0xa0
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <readDP+0x38>)
 80024e6:	fb00 3002 	mla	r0, r0, r2, r3
 80024ea:	f7fd fe89 	bl	8000200 <longjmp>
  if ( swdStatus != SWD_ERROR_OK ) {
 80024ee:	2801      	cmp	r0, #1
 80024f0:	d1f4      	bne.n	80024dc <readDP+0x1c>
  }
}
 80024f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000320 	.word	0x20000320

080024fc <initDp>:
 * @returns
 *    The value of the IDCODE register
 **********************************************************/
uint32_t test = 0;
uint32_t initDp(void)
{
 80024fc:	b530      	push	{r4, r5, lr}
 80024fe:	b083      	sub	sp, #12
  uint32_t dpId = 0;
 8002500:	2400      	movs	r4, #0
 8002502:	9401      	str	r4, [sp, #4]
  /* If connecting to a Multidrop capable SW-DP (SWD version 2), this 
   * function must be run first. */
  //exitDormantState();
  
  /* Send the JTAG-to-SWD switching sequence */
  JTAG_to_SWD_Sequence();
 8002504:	f7ff ff18 	bl	8002338 <JTAG_to_SWD_Sequence>
  
  /* Read IDCODE to get the DAP out of reset state */
  readDP(DP_IDCODE, &dpId);
 8002508:	a901      	add	r1, sp, #4
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ffd8 	bl	80024c0 <readDP>

  /* Debug power up request */
  //khchoi: Sticky error clear & CTRL/STAT Register Clear.(Black Magic Probe)
  writeDP(DP_ABORT, (1 << 2));
 8002510:	2104      	movs	r1, #4
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff96 	bl	8002444 <writeDP>
  //writeDP(DP_ABORT, (1 << 3)); //wderrclr
  readDP(DP_CTRL, &test);
 8002518:	4d18      	ldr	r5, [pc, #96]	@ (800257c <initDp+0x80>)
 800251a:	4629      	mov	r1, r5
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff ffcf 	bl	80024c0 <readDP>
  writeDP(DP_CTRL, 0);
 8002522:	4621      	mov	r1, r4
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff ff8d 	bl	8002444 <writeDP>
  readDP(DP_CTRL, &test);
 800252a:	4629      	mov	r1, r5
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff ffc7 	bl	80024c0 <readDP>
  writeDP(DP_CTRL, DP_CTRL_CSYSPWRUPREQ | DP_CTRL_CDBGPWRUPREQ);
 8002532:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8002536:	2001      	movs	r0, #1
 8002538:	f7ff ff84 	bl	8002444 <writeDP>
 800253c:	f44f 7496 	mov.w	r4, #300	@ 0x12c
  /* Wait until we receive powerup ACK */
  int retry = PWRUP_TIMEOUT + 200;
  uint32_t status;
  while ( retry > 0 )
  {
    readDP(DP_CTRL, &status);
 8002540:	2501      	movs	r5, #1
 8002542:	4669      	mov	r1, sp
 8002544:	4628      	mov	r0, r5
 8002546:	f7ff ffbb 	bl	80024c0 <readDP>
    if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
 800254a:	9b00      	ldr	r3, [sp, #0]
 800254c:	f003 4320 	and.w	r3, r3, #2684354560	@ 0xa0000000
 8002550:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8002554:	d00a      	beq.n	800256c <initDp+0x70>
  while ( retry > 0 )
 8002556:	3c01      	subs	r4, #1
 8002558:	d1f3      	bne.n	8002542 <initDp+0x46>
  
  /* Throw error if we failed to power up the debug interface */
  if ( (status & (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK)) 
              != (DP_CTRL_CDBGPWRUPACK | DP_CTRL_CSYSPWRUPACK) )
  {
    RAISE(SWD_ERROR_DEBUG_POWER);
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <initDp+0x84>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2115      	movs	r1, #21
 8002560:	20a0      	movs	r0, #160	@ 0xa0
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <initDp+0x88>)
 8002564:	fb00 3002 	mla	r0, r0, r2, r3
 8002568:	f7fd fe4a 	bl	8000200 <longjmp>
  }

  /* Select first AP bank */
  writeDP(DP_SELECT, 0x00);
 800256c:	2100      	movs	r1, #0
 800256e:	2002      	movs	r0, #2
 8002570:	f7ff ff68 	bl	8002444 <writeDP>

  return dpId;
 8002574:	9801      	ldr	r0, [sp, #4]
}
 8002576:	b003      	add	sp, #12
 8002578:	bd30      	pop	{r4, r5, pc}
 800257a:	bf00      	nop
 800257c:	2000031c 	.word	0x2000031c
 8002580:	20000000 	.word	0x20000000
 8002584:	20000320 	.word	0x20000320

08002588 <readApId>:
 * 
 * @returns
 *    The value of IDR register (address 0xFC) for AP #0
 **********************************************************/
uint32_t readApId(void)
{
 8002588:	b500      	push	{lr}
 800258a:	b083      	sub	sp, #12
  uint32_t apId;
  
  /* Select last AP bank */
  writeDP(DP_SELECT, 0xf0);
 800258c:	21f0      	movs	r1, #240	@ 0xf0
 800258e:	2002      	movs	r0, #2
 8002590:	f7ff ff58 	bl	8002444 <writeDP>
  
  /* Dummy read AP ID */
  readAP(AP_IDR, &apId);
 8002594:	a901      	add	r1, sp, #4
 8002596:	2003      	movs	r0, #3
 8002598:	f7ff ff74 	bl	8002484 <readAP>
  
  /* Read AP ID */
  readDP(DP_RDBUFF, &apId);
 800259c:	a901      	add	r1, sp, #4
 800259e:	2003      	movs	r0, #3
 80025a0:	f7ff ff8e 	bl	80024c0 <readDP>
  
  /* Select first AP bank again */
  writeDP(DP_SELECT, 0x00);
 80025a4:	2100      	movs	r1, #0
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7ff ff4c 	bl	8002444 <writeDP>
  
  return apId;
}
 80025ac:	9801      	ldr	r0, [sp, #4]
 80025ae:	b003      	add	sp, #12
 80025b0:	f85d fb04 	ldr.w	pc, [sp], #4

080025b4 <initAhbAp>:
 * Initalize the AHB-AP. The transfer size must be set
 * to 32-bit before trying to access any internal
 * memory. 
 **********************************************************/
void initAhbAp(void)
{    
 80025b4:	b508      	push	{r3, lr}
  /* Set transfer size to 32 bit */  
  writeAP(AP_CSW, AP_CSW_DEFAULT);  
 80025b6:	4902      	ldr	r1, [pc, #8]	@ (80025c0 <initAhbAp+0xc>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff ff1f 	bl	80023fc <writeAP>
}
 80025be:	bd08      	pop	{r3, pc}
 80025c0:	22000002 	.word	0x22000002

080025c4 <delayMs>:

/**********************************************************
 * Delay a number of milliseconds
 **********************************************************/
void delayMs(int ms)
{
 80025c4:	b508      	push	{r3, lr}
	HAL_Delay(ms);
 80025c6:	f003 f961 	bl	800588c <HAL_Delay>
}
 80025ca:	bd08      	pop	{r3, pc}

080025cc <delayUs>:
/**********************************************************
 * Delay a number of microseconds
 **********************************************************/
void delayUs(int us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <delayUs+0x14>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2300      	movs	r3, #0
 80025d2:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < (us-1));  // wait for the counter to reach the us input in the parameter
 80025d4:	3801      	subs	r0, #1
 80025d6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80025d8:	4283      	cmp	r3, r0
 80025da:	d3fc      	bcc.n	80025d6 <delayUs+0xa>
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	2000c33c 	.word	0x2000c33c

080025e4 <getErrorString>:
jmp_buf swdErrors[EXCEPTION_MAX_LEVEL];
int swdErrorIndex = -1;

char *getErrorString(int errorCode)
{
  switch (errorCode)
 80025e4:	3801      	subs	r0, #1
 80025e6:	2814      	cmp	r0, #20
 80025e8:	d834      	bhi.n	8002654 <getErrorString+0x70>
 80025ea:	e8df f000 	tbb	[pc, r0]
 80025ee:	350b      	.short	0x350b
 80025f0:	13110f0d 	.word	0x13110f0d
 80025f4:	19173115 	.word	0x19173115
 80025f8:	211f1d1b 	.word	0x211f1d1b
 80025fc:	29272523 	.word	0x29272523
 8002600:	2d2b      	.short	0x2d2b
 8002602:	2f          	.byte	0x2f
 8002603:	00          	.byte	0x00
  {
  case SWD_ERROR_OK:
    return "No error.";
 8002604:	4815      	ldr	r0, [pc, #84]	@ (800265c <getErrorString+0x78>)
 8002606:	4770      	bx	lr
  case SWD_ERROR_WAIT:
    return "Timed out while waiting for WAIT response.";
  case SWD_ERROR_FAULT:
    return "Target returned FAULT response.";
 8002608:	4815      	ldr	r0, [pc, #84]	@ (8002660 <getErrorString+0x7c>)
 800260a:	4770      	bx	lr
  case SWD_ERROR_PROTOCOL:
    return "Protocol error. Target does not respond.";
 800260c:	4815      	ldr	r0, [pc, #84]	@ (8002664 <getErrorString+0x80>)
 800260e:	4770      	bx	lr
  case SWD_ERROR_PARITY:
    return "Parity error.";
 8002610:	4815      	ldr	r0, [pc, #84]	@ (8002668 <getErrorString+0x84>)
 8002612:	4770      	bx	lr
  case SWD_ERROR_MCU_LOCKED:
    return "MCU locked.";
 8002614:	4815      	ldr	r0, [pc, #84]	@ (800266c <getErrorString+0x88>)
 8002616:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDR:
    return "Invalid IDR value.";
 8002618:	4815      	ldr	r0, [pc, #84]	@ (8002670 <getErrorString+0x8c>)
 800261a:	4770      	bx	lr
  case SWD_ERROR_FLASH_WRITE_FAILED:
    return "Write to flash failed.";
 800261c:	4815      	ldr	r0, [pc, #84]	@ (8002674 <getErrorString+0x90>)
 800261e:	4770      	bx	lr
  case SWD_ERROR_UNLOCK_FAILED:
    return "Failed to unlock target.";
 8002620:	4815      	ldr	r0, [pc, #84]	@ (8002678 <getErrorString+0x94>)
 8002622:	4770      	bx	lr
  case SWD_ERROR_AAP_EXTENSION_FAILED:
    return "Unable to access AAP registers. Is the reset pin connected?";
 8002624:	4815      	ldr	r0, [pc, #84]	@ (800267c <getErrorString+0x98>)
 8002626:	4770      	bx	lr
  case SWD_ERROR_LOCK_FAILED:
    return "Failed to lock target.";
 8002628:	4815      	ldr	r0, [pc, #84]	@ (8002680 <getErrorString+0x9c>)
 800262a:	4770      	bx	lr
  case SWD_ERROR_CLR_DLW_FAILED:
    return "Failed to clear Debug Lock Word.";
 800262c:	4815      	ldr	r0, [pc, #84]	@ (8002684 <getErrorString+0xa0>)
 800262e:	4770      	bx	lr
  case SWD_ERROR_MASS_ERASE_TIMEOUT:
    return "Timed out while waiting for Mass Erase to complete.";
 8002630:	4815      	ldr	r0, [pc, #84]	@ (8002688 <getErrorString+0xa4>)
 8002632:	4770      	bx	lr
  case SWD_ERROR_VERIFY_FW_FAILED:
    return "Application verification failed.";
 8002634:	4815      	ldr	r0, [pc, #84]	@ (800268c <getErrorString+0xa8>)
 8002636:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_WAITING_RESET:
    return "Timeout while waiting for target to reset.";
 8002638:	4815      	ldr	r0, [pc, #84]	@ (8002690 <getErrorString+0xac>)
 800263a:	4770      	bx	lr
  case SWD_ERROR_TARGET_NOT_HALTED:
    return "Target is halted.";
 800263c:	4815      	ldr	r0, [pc, #84]	@ (8002694 <getErrorString+0xb0>)
 800263e:	4770      	bx	lr
  case SWD_ERROR_FLASHLOADER_ERROR:
    return "Error in flashloader.";
 8002640:	4815      	ldr	r0, [pc, #84]	@ (8002698 <getErrorString+0xb4>)
 8002642:	4770      	bx	lr
  case SWD_ERROR_DEVICE_ERASE_FAILED:
    return "Device Erase failed."; 
 8002644:	4815      	ldr	r0, [pc, #84]	@ (800269c <getErrorString+0xb8>)
 8002646:	4770      	bx	lr
  case SWD_ERROR_TIMEOUT_HALT:
    return "Timeout while waiting to halt target.";
 8002648:	4815      	ldr	r0, [pc, #84]	@ (80026a0 <getErrorString+0xbc>)
 800264a:	4770      	bx	lr
  case SWD_ERROR_DEBUG_POWER:
    return "Failed to power up debug interface.";
 800264c:	4815      	ldr	r0, [pc, #84]	@ (80026a4 <getErrorString+0xc0>)
 800264e:	4770      	bx	lr
  case SWD_ERROR_INVALID_IDCODE:
    return "Invalid IDCODE.";
 8002650:	4815      	ldr	r0, [pc, #84]	@ (80026a8 <getErrorString+0xc4>)
 8002652:	4770      	bx	lr
  default:
    return "Unknown error.";
 8002654:	4815      	ldr	r0, [pc, #84]	@ (80026ac <getErrorString+0xc8>)
 8002656:	4770      	bx	lr
  switch (errorCode)
 8002658:	4815      	ldr	r0, [pc, #84]	@ (80026b0 <getErrorString+0xcc>)
  }
 800265a:	4770      	bx	lr
 800265c:	08011688 	.word	0x08011688
 8002660:	080116c0 	.word	0x080116c0
 8002664:	080116e0 	.word	0x080116e0
 8002668:	0801170c 	.word	0x0801170c
 800266c:	0801171c 	.word	0x0801171c
 8002670:	08011728 	.word	0x08011728
 8002674:	0801173c 	.word	0x0801173c
 8002678:	08011754 	.word	0x08011754
 800267c:	08011770 	.word	0x08011770
 8002680:	080117ac 	.word	0x080117ac
 8002684:	080117c4 	.word	0x080117c4
 8002688:	080117e8 	.word	0x080117e8
 800268c:	0801181c 	.word	0x0801181c
 8002690:	08011840 	.word	0x08011840
 8002694:	0801186c 	.word	0x0801186c
 8002698:	08011880 	.word	0x08011880
 800269c:	08011898 	.word	0x08011898
 80026a0:	080118b0 	.word	0x080118b0
 80026a4:	080118d8 	.word	0x080118d8
 80026a8:	080118fc 	.word	0x080118fc
 80026ac:	0801190c 	.word	0x0801190c
 80026b0:	08011694 	.word	0x08011694

080026b4 <haltTarget>:
/**********************************************************
 * Halts the target CPU
 **********************************************************/

void haltTarget(void)
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b083      	sub	sp, #12
  int timeout = DEBUG_EVENT_TIMEOUT;
  writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026b8:	4914      	ldr	r1, [pc, #80]	@ (800270c <haltTarget+0x58>)
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff fe9e 	bl	80023fc <writeAP>
  writeAP(AP_DRW, STOP_CMD);
 80026c0:	4913      	ldr	r1, [pc, #76]	@ (8002710 <haltTarget+0x5c>)
 80026c2:	2003      	movs	r0, #3
 80026c4:	f7ff fe9a 	bl	80023fc <writeAP>
 80026c8:	24c8      	movs	r4, #200	@ 0xc8

  uint32_t dhcrState;
  do {
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026ca:	4f10      	ldr	r7, [pc, #64]	@ (800270c <haltTarget+0x58>)
 80026cc:	2601      	movs	r6, #1
    readAP(AP_DRW, &dhcrState);
 80026ce:	2503      	movs	r5, #3
    writeAP(AP_TAR, (uint32_t)&(CoreDebug->DHCSR));
 80026d0:	4639      	mov	r1, r7
 80026d2:	4630      	mov	r0, r6
 80026d4:	f7ff fe92 	bl	80023fc <writeAP>
    readAP(AP_DRW, &dhcrState);
 80026d8:	a901      	add	r1, sp, #4
 80026da:	4628      	mov	r0, r5
 80026dc:	f7ff fed2 	bl	8002484 <readAP>
    readDP(DP_RDBUFF, &dhcrState);
 80026e0:	a901      	add	r1, sp, #4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7ff feec 	bl	80024c0 <readDP>
    timeout--;
  } while ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) && timeout > 0 );
 80026e8:	9b01      	ldr	r3, [sp, #4]
 80026ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026ee:	d10a      	bne.n	8002706 <haltTarget+0x52>
 80026f0:	3c01      	subs	r4, #1
 80026f2:	d1ed      	bne.n	80026d0 <haltTarget+0x1c>

  if ( !(dhcrState & CoreDebug_DHCSR_S_HALT_Msk) ) {
    RAISE(SWD_ERROR_TIMEOUT_HALT);
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <haltTarget+0x60>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2114      	movs	r1, #20
 80026fa:	20a0      	movs	r0, #160	@ 0xa0
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <haltTarget+0x64>)
 80026fe:	fb00 3002 	mla	r0, r0, r2, r3
 8002702:	f7fd fd7d 	bl	8000200 <longjmp>
  }
}
 8002706:	b003      	add	sp, #12
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270a:	bf00      	nop
 800270c:	e000edf0 	.word	0xe000edf0
 8002710:	a05f0003 	.word	0xa05f0003
 8002714:	20000000 	.word	0x20000000
 8002718:	20000320 	.word	0x20000320

0800271c <hardResetTarget>:

/**********************************************************
 * Performs a pin reset on the target
 **********************************************************/
void hardResetTarget(void)
{
 800271c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_RESET);
 800271e:	4c08      	ldr	r4, [pc, #32]	@ (8002740 <hardResetTarget+0x24>)
 8002720:	2200      	movs	r2, #0
 8002722:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002726:	4620      	mov	r0, r4
 8002728:	f003 fd08 	bl	800613c <HAL_GPIO_WritePin>
    delayMs(50);
 800272c:	2032      	movs	r0, #50	@ 0x32
 800272e:	f7ff ff49 	bl	80025c4 <delayMs>
    HAL_GPIO_WritePin(TARGET_RST_GPIO_Port, TARGET_RST_Pin, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002738:	4620      	mov	r0, r4
 800273a:	f003 fcff 	bl	800613c <HAL_GPIO_WritePin>
}
 800273e:	bd10      	pop	{r4, pc}
 8002740:	40020000 	.word	0x40020000

08002744 <readMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
uint32_t readMem(uint32_t addr)
{
 8002744:	b500      	push	{lr}
 8002746:	b083      	sub	sp, #12
 8002748:	4601      	mov	r1, r0
  uint32_t ret;
  writeAP(AP_TAR, addr);
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff fe56 	bl	80023fc <writeAP>
  readAP(AP_DRW, &ret);
 8002750:	a901      	add	r1, sp, #4
 8002752:	2003      	movs	r0, #3
 8002754:	f7ff fe96 	bl	8002484 <readAP>
  readDP(DP_RDBUFF, &ret);
 8002758:	a901      	add	r1, sp, #4
 800275a:	2003      	movs	r0, #3
 800275c:	f7ff feb0 	bl	80024c0 <readDP>
  return ret;
}
 8002760:	9801      	ldr	r0, [sp, #4]
 8002762:	b003      	add	sp, #12
 8002764:	f85d fb04 	ldr.w	pc, [sp], #4

08002768 <writeMem>:
 * 
 * @returns 
 *    The value at @param addr
 **********************************************************/
void writeMem(uint32_t addr, uint32_t data)
{
 8002768:	b510      	push	{r4, lr}
 800276a:	460c      	mov	r4, r1
  writeAP(AP_TAR, addr);
 800276c:	4601      	mov	r1, r0
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff fe44 	bl	80023fc <writeAP>
  writeAP(AP_DRW, data);
 8002774:	4621      	mov	r1, r4
 8002776:	2003      	movs	r0, #3
 8002778:	f7ff fe40 	bl	80023fc <writeAP>
}
 800277c:	bd10      	pop	{r4, pc}
	...

08002780 <resetTarget>:
{  
 8002780:	b570      	push	{r4, r5, r6, lr}
  writeMem((uint32_t)&(CoreDebug->DEMCR), 0);
 8002782:	2100      	movs	r1, #0
 8002784:	481f      	ldr	r0, [pc, #124]	@ (8002804 <resetTarget+0x84>)
 8002786:	f7ff ffef 	bl	8002768 <writeMem>
  readMem((uint32_t)&(CoreDebug->DHCSR));
 800278a:	4c1f      	ldr	r4, [pc, #124]	@ (8002808 <resetTarget+0x88>)
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ffd9 	bl	8002744 <readMem>
  dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ffd6 	bl	8002744 <readMem>
  writeMem((uint32_t)&(SCB->AIRCR), AIRCR_RESET_CMD);
 8002798:	491c      	ldr	r1, [pc, #112]	@ (800280c <resetTarget+0x8c>)
 800279a:	481d      	ldr	r0, [pc, #116]	@ (8002810 <resetTarget+0x90>)
 800279c:	f7ff ffe4 	bl	8002768 <writeMem>
  delayUs(100);
 80027a0:	2064      	movs	r0, #100	@ 0x64
 80027a2:	f7ff ff13 	bl	80025cc <delayUs>
 80027a6:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 80027a8:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027aa:	4d17      	ldr	r5, [pc, #92]	@ (8002808 <resetTarget+0x88>)
    delayUs(10);
 80027ac:	4630      	mov	r0, r6
 80027ae:	f7ff ff0d 	bl	80025cc <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7ff ffc6 	bl	8002744 <readMem>
  } while ( !(dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk) && timeout > 0 );
 80027b8:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80027bc:	d10a      	bne.n	80027d4 <resetTarget+0x54>
 80027be:	3c01      	subs	r4, #1
 80027c0:	d1f4      	bne.n	80027ac <resetTarget+0x2c>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <resetTarget+0x94>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2110      	movs	r1, #16
 80027c8:	20a0      	movs	r0, #160	@ 0xa0
 80027ca:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <resetTarget+0x98>)
 80027cc:	fb00 3002 	mla	r0, r0, r2, r3
 80027d0:	f7fd fd16 	bl	8000200 <longjmp>
 80027d4:	24c8      	movs	r4, #200	@ 0xc8
    delayUs(10);
 80027d6:	260a      	movs	r6, #10
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027d8:	4d0b      	ldr	r5, [pc, #44]	@ (8002808 <resetTarget+0x88>)
    delayUs(10);
 80027da:	4630      	mov	r0, r6
 80027dc:	f7ff fef6 	bl	80025cc <delayUs>
    dhcsr = readMem((uint32_t)&(CoreDebug->DHCSR));
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7ff ffaf 	bl	8002744 <readMem>
  } while ( dhcsr & CoreDebug_DHCSR_S_RESET_ST_Msk && timeout > 0 );
 80027e6:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 80027ea:	d00a      	beq.n	8002802 <resetTarget+0x82>
 80027ec:	3c01      	subs	r4, #1
 80027ee:	d1f4      	bne.n	80027da <resetTarget+0x5a>
    RAISE(SWD_ERROR_TIMEOUT_WAITING_RESET);
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <resetTarget+0x94>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2110      	movs	r1, #16
 80027f6:	20a0      	movs	r0, #160	@ 0xa0
 80027f8:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <resetTarget+0x98>)
 80027fa:	fb00 3002 	mla	r0, r0, r2, r3
 80027fe:	f7fd fcff 	bl	8000200 <longjmp>
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	e000edfc 	.word	0xe000edfc
 8002808:	e000edf0 	.word	0xe000edf0
 800280c:	05fa0004 	.word	0x05fa0004
 8002810:	e000ed0c 	.word	0xe000ed0c
 8002814:	20000000 	.word	0x20000000
 8002818:	20000320 	.word	0x20000320

0800281c <verifyDpId>:
 * Returns true if the @param dpId is a valid
 * IDCODE value. 
 **********************************************************/
bool verifyDpId(uint32_t dpId)
{
    if (dpId == STM32_SWDP_ID_1 ||
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <verifyDpId+0x30>)
 800281e:	4298      	cmp	r0, r3
 8002820:	d010      	beq.n	8002844 <verifyDpId+0x28>
 8002822:	f103 43bf 	add.w	r3, r3, #1602224128	@ 0x5f800000
 8002826:	f503 03be 	add.w	r3, r3, #6225920	@ 0x5f0000
 800282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282e:	4298      	cmp	r0, r3
 8002830:	d00a      	beq.n	8002848 <verifyDpId+0x2c>
        dpId == STM32_SWDP_ID_2 ||
 8002832:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8002836:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800283a:	4298      	cmp	r0, r3
 800283c:	bf14      	ite	ne
 800283e:	2000      	movne	r0, #0
 8002840:	2001      	moveq	r0, #1
 8002842:	4770      	bx	lr
    	dpId == STM32_SWDP_ID_3)

    {
        return true;
 8002844:	2001      	movs	r0, #1
 8002846:	4770      	bx	lr
 8002848:	2001      	movs	r0, #1
    }
    return false;
}
 800284a:	4770      	bx	lr
 800284c:	0bc11477 	.word	0x0bc11477

08002850 <verifyAhbApId>:
 * Returns true if the @param apId is a valid
 * IDR value for the AHB-AP. 
 **********************************************************/
bool verifyAhbApId(uint32_t apId)
{
    if (apId == STM32C0_AHBAP_ID ||
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <verifyAhbApId+0x28>)
 8002852:	4298      	cmp	r0, r3
 8002854:	d00c      	beq.n	8002870 <verifyAhbApId+0x20>
        apId == STM32H7_AHBAP_ID ||
 8002856:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800285a:	3b30      	subs	r3, #48	@ 0x30
 800285c:	4298      	cmp	r0, r3
 800285e:	d009      	beq.n	8002874 <verifyAhbApId+0x24>
		apId == STM32U0_AHBAP_ID ||
        apId == STM32G0_AHBAP_ID ||
 8002860:	f103 4320 	add.w	r3, r3, #2684354560	@ 0xa0000000
 8002864:	3310      	adds	r3, #16
 8002866:	4298      	cmp	r0, r3
 8002868:	bf14      	ite	ne
 800286a:	2000      	movne	r0, #0
 800286c:	2001      	moveq	r0, #1
 800286e:	4770      	bx	lr
    	apId == STM32G4_AHBAP_ID)
    {
        return true;
 8002870:	2001      	movs	r0, #1
 8002872:	4770      	bx	lr
 8002874:	2001      	movs	r0, #1
    }
    return false;
}
 8002876:	4770      	bx	lr
 8002878:	04770031 	.word	0x04770031

0800287c <connectToTarget>:
 * Performs the initialization sequence on the SW-DP. 
 * After this completes the debug interface can be used. 
 * Raises an exception on any error during connection. 
 **********************************************************/
void connectToTarget(Target_InfoTypeDef *target)
{
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4605      	mov	r5, r0
  delayUs(500);
 8002880:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002884:	f7ff fea2 	bl	80025cc <delayUs>
  target->TargetDpId = initDp();
 8002888:	f7ff fe38 	bl	80024fc <initDp>
 800288c:	4604      	mov	r4, r0
 800288e:	6028      	str	r0, [r5, #0]
  /* Verify that the DP returns the correct ID */
  if ( !verifyDpId(target->TargetDpId) )
 8002890:	f7ff ffc4 	bl	800281c <verifyDpId>
 8002894:	b168      	cbz	r0, 80028b2 <connectToTarget+0x36>
 8002896:	2414      	movs	r4, #20
  
  /* Verify that the AP returns the correct ID */
  int retry = AHB_IDR_RETRY_COUNT;
  while ( retry > 0 )
  {
    target->TargetApId = readApId();
 8002898:	f7ff fe76 	bl	8002588 <readApId>
 800289c:	6068      	str	r0, [r5, #4]
    if ( verifyAhbApId(target->TargetApId) )
 800289e:	f7ff ffd7 	bl	8002850 <verifyAhbApId>
 80028a2:	b908      	cbnz	r0, 80028a8 <connectToTarget+0x2c>
  while ( retry > 0 )
 80028a4:	3c01      	subs	r4, #1
 80028a6:	d1f7      	bne.n	8002898 <connectToTarget+0x1c>
    retry--;
  }
    
  /* Set up parameters for AHB-AP. This must be done before accessing
   * internal memory. */
  initAhbAp();
 80028a8:	f7ff fe84 	bl	80025b4 <initAhbAp>
  haltTarget();
 80028ac:	f7ff ff02 	bl	80026b4 <haltTarget>
}
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
    printf("Read IDCODE = 0x%08"PRIX32"\n", target->TargetDpId);
 80028b2:	4621      	mov	r1, r4
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <connectToTarget+0x50>)
 80028b6:	f00c fcab 	bl	800f210 <iprintf>
    RAISE(SWD_ERROR_INVALID_IDCODE);
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <connectToTarget+0x54>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2108      	movs	r1, #8
 80028c0:	20a0      	movs	r0, #160	@ 0xa0
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <connectToTarget+0x58>)
 80028c4:	fb00 3002 	mla	r0, r0, r2, r3
 80028c8:	f7fd fc9a 	bl	8000200 <longjmp>
 80028cc:	0801191c 	.word	0x0801191c
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000320 	.word	0x20000320

080028d8 <Target_PageBuffer_Write>:
    .Program = Target_ProgramWrapper_STM32H7
};


static int Target_PageBuffer_Write(void)
{
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!page.dirty || !page.initialized)
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <Target_PageBuffer_Write+0x4c>)
 80028dc:	791b      	ldrb	r3, [r3, #4]
 80028de:	b1db      	cbz	r3, 8002918 <Target_PageBuffer_Write+0x40>
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <Target_PageBuffer_Write+0x4c>)
 80028e2:	795b      	ldrb	r3, [r3, #5]
 80028e4:	b1d3      	cbz	r3, 800291c <Target_PageBuffer_Write+0x44>
        return TARGET_OK;

    for (uint32_t i = 0; i < target_writer->page_size; i += target_writer->program_unit)
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <Target_PageBuffer_Write+0x50>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	b182      	cbz	r2, 8002910 <Target_PageBuffer_Write+0x38>
 80028ee:	2400      	movs	r4, #0
    {
        if ((target_writer->Program(page.base_addr + i, &page.data[i], target_writer->program_unit)) == TARGET_ERROR)
 80028f0:	4d0e      	ldr	r5, [pc, #56]	@ (800292c <Target_PageBuffer_Write+0x54>)
    for (uint32_t i = 0; i < target_writer->page_size; i += target_writer->program_unit)
 80028f2:	4e0d      	ldr	r6, [pc, #52]	@ (8002928 <Target_PageBuffer_Write+0x50>)
        if ((target_writer->Program(page.base_addr + i, &page.data[i], target_writer->program_unit)) == TARGET_ERROR)
 80028f4:	1d21      	adds	r1, r4, #4
 80028f6:	6828      	ldr	r0, [r5, #0]
 80028f8:	689f      	ldr	r7, [r3, #8]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4429      	add	r1, r5
 80028fe:	4420      	add	r0, r4
 8002900:	47b8      	blx	r7
 8002902:	b968      	cbnz	r0, 8002920 <Target_PageBuffer_Write+0x48>
    for (uint32_t i = 0; i < target_writer->page_size; i += target_writer->program_unit)
 8002904:	6833      	ldr	r3, [r6, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4414      	add	r4, r2
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	42a2      	cmp	r2, r4
 800290e:	d8f1      	bhi.n	80028f4 <Target_PageBuffer_Write+0x1c>
            return TARGET_ERROR;
    }

    page.dirty = false;
 8002910:	2000      	movs	r0, #0
 8002912:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <Target_PageBuffer_Write+0x4c>)
 8002914:	7118      	strb	r0, [r3, #4]
    return TARGET_OK;
 8002916:	e000      	b.n	800291a <Target_PageBuffer_Write+0x42>
        return TARGET_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return TARGET_OK;
 800291c:	2000      	movs	r0, #0
 800291e:	e7fc      	b.n	800291a <Target_PageBuffer_Write+0x42>
            return TARGET_ERROR;
 8002920:	2001      	movs	r0, #1
 8002922:	e7fa      	b.n	800291a <Target_PageBuffer_Write+0x42>
 8002924:	2000c1a4 	.word	0x2000c1a4
 8002928:	2000c1ac 	.word	0x2000c1ac
 800292c:	200041a4 	.word	0x200041a4

08002930 <Target_IHexParser_Callback>:

static int Target_PageBuffer_Prepare(uint32_t address, const uint8_t* data, uint8_t len)
{
    while (len > 0)
 8002930:	2a00      	cmp	r2, #0
 8002932:	d04c      	beq.n	80029ce <Target_IHexParser_Callback+0x9e>

    return TARGET_OK;
}

bool Target_IHexParser_Callback(uint32_t address, const uint8_t *data, uint8_t length)
{
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002938:	b083      	sub	sp, #12
 800293a:	4607      	mov	r7, r0
 800293c:	468a      	mov	sl, r1
 800293e:	4615      	mov	r5, r2
        uint32_t page_base = address & ~(target_writer->page_size - 1);
 8002940:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80029dc <Target_IHexParser_Callback+0xac>
        if (!page.initialized || page.base_addr != page_base)
 8002944:	f8df b098 	ldr.w	fp, [pc, #152]	@ 80029e0 <Target_IHexParser_Callback+0xb0>
 8002948:	f50b 4900 	add.w	r9, fp, #32768	@ 0x8000
            memset(page.data, 0xFF, sizeof(page.data));
 800294c:	f10b 0304 	add.w	r3, fp, #4
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	e021      	b.n	8002998 <Target_IHexParser_Callback+0x68>
            if (Target_PageBuffer_Write() != TARGET_OK)
 8002954:	f7ff ffc0 	bl	80028d8 <Target_PageBuffer_Write>
 8002958:	2800      	cmp	r0, #0
 800295a:	d13c      	bne.n	80029d6 <Target_IHexParser_Callback+0xa6>
            page.base_addr = page_base;
 800295c:	f8cb 6000 	str.w	r6, [fp]
            memset(page.data, 0xFF, sizeof(page.data));
 8002960:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002964:	21ff      	movs	r1, #255	@ 0xff
 8002966:	9801      	ldr	r0, [sp, #4]
 8002968:	f00c fe14 	bl	800f594 <memset>
            page.dirty = false;
 800296c:	2300      	movs	r3, #0
 800296e:	f889 3004 	strb.w	r3, [r9, #4]
            page.initialized = true;
 8002972:	2301      	movs	r3, #1
 8002974:	f889 3005 	strb.w	r3, [r9, #5]
        memcpy(&page.data[offset_in_page], data, write_len);
 8002978:	9b00      	ldr	r3, [sp, #0]
 800297a:	1b98      	subs	r0, r3, r6
 800297c:	4622      	mov	r2, r4
 800297e:	4651      	mov	r1, sl
 8002980:	4458      	add	r0, fp
 8002982:	f00c fe86 	bl	800f692 <memcpy>
        page.dirty = true;
 8002986:	2301      	movs	r3, #1
 8002988:	f889 3004 	strb.w	r3, [r9, #4]
        address += write_len;
 800298c:	4427      	add	r7, r4
        data += write_len;
 800298e:	44a2      	add	sl, r4
        len -= write_len;
 8002990:	1b2c      	subs	r4, r5, r4
    while (len > 0)
 8002992:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 8002996:	d014      	beq.n	80029c2 <Target_IHexParser_Callback+0x92>
        uint32_t page_base = address & ~(target_writer->page_size - 1);
 8002998:	f8d8 3000 	ldr.w	r3, [r8]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	425e      	negs	r6, r3
 80029a0:	403e      	ands	r6, r7
        uint32_t offset_in_page = address - page_base;
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	9200      	str	r2, [sp, #0]
        uint32_t remain_in_page = target_writer->page_size - offset_in_page;
 80029a6:	1bf4      	subs	r4, r6, r7
 80029a8:	441c      	add	r4, r3
        uint32_t write_len = (len < remain_in_page) ? len : remain_in_page;
 80029aa:	42ac      	cmp	r4, r5
 80029ac:	bf28      	it	cs
 80029ae:	462c      	movcs	r4, r5
        if (!page.initialized || page.base_addr != page_base)
 80029b0:	f899 3005 	ldrb.w	r3, [r9, #5]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0cd      	beq.n	8002954 <Target_IHexParser_Callback+0x24>
 80029b8:	f8db 3000 	ldr.w	r3, [fp]
 80029bc:	429e      	cmp	r6, r3
 80029be:	d1c9      	bne.n	8002954 <Target_IHexParser_Callback+0x24>
 80029c0:	e7da      	b.n	8002978 <Target_IHexParser_Callback+0x48>
    return TARGET_OK;
 80029c2:	2000      	movs	r0, #0
    if (Target_PageBuffer_Prepare(address, data, length) == TARGET_OK)
        return true;
    else
        return false;
}
 80029c4:	f080 0001 	eor.w	r0, r0, #1
 80029c8:	b003      	add	sp, #12
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return TARGET_OK;
 80029ce:	2000      	movs	r0, #0
}
 80029d0:	f080 0001 	eor.w	r0, r0, #1
 80029d4:	4770      	bx	lr
                return TARGET_ERROR;
 80029d6:	2001      	movs	r0, #1
 80029d8:	e7f4      	b.n	80029c4 <Target_IHexParser_Callback+0x94>
 80029da:	bf00      	nop
 80029dc:	2000c1ac 	.word	0x2000c1ac
 80029e0:	200041a4 	.word	0x200041a4

080029e4 <Target_ProgramWrapper_STM32H7>:
{
 80029e4:	b508      	push	{r3, lr}
    return Stm32h7_Flash_Program(addr, (uint32_t)(uintptr_t)data, len);
 80029e6:	f001 fd03 	bl	80043f0 <Stm32h7_Flash_Program>
}
 80029ea:	bd08      	pop	{r3, pc}

080029ec <Target_ProgramWrapper_STM32U0>:
    if (len != 8) return false;
 80029ec:	2a08      	cmp	r2, #8
 80029ee:	d001      	beq.n	80029f4 <Target_ProgramWrapper_STM32U0+0x8>
 80029f0:	2000      	movs	r0, #0
}
 80029f2:	4770      	bx	lr
{
 80029f4:	b508      	push	{r3, lr}
    return Stm32u0_Flash_Program(addr, val);
 80029f6:	680a      	ldr	r2, [r1, #0]
 80029f8:	684b      	ldr	r3, [r1, #4]
 80029fa:	f001 fe63 	bl	80046c4 <Stm32u0_Flash_Program>
}
 80029fe:	bd08      	pop	{r3, pc}

08002a00 <Target_ProgramWrapper_STM32G0>:
    if (len != 8) return false;
 8002a00:	2a08      	cmp	r2, #8
 8002a02:	d001      	beq.n	8002a08 <Target_ProgramWrapper_STM32G0+0x8>
 8002a04:	2000      	movs	r0, #0
}
 8002a06:	4770      	bx	lr
{
 8002a08:	b508      	push	{r3, lr}
    return Stm32g0_Flash_Program(addr, val);
 8002a0a:	680a      	ldr	r2, [r1, #0]
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	f001 fb09 	bl	8004024 <Stm32g0_Flash_Program>
}
 8002a12:	bd08      	pop	{r3, pc}

08002a14 <Target_ProgramWrapper_STM32C0>:
    if (len != 8) return false;
 8002a14:	2a08      	cmp	r2, #8
 8002a16:	d001      	beq.n	8002a1c <Target_ProgramWrapper_STM32C0+0x8>
 8002a18:	2000      	movs	r0, #0
}
 8002a1a:	4770      	bx	lr
{
 8002a1c:	b508      	push	{r3, lr}
    return Stm32c0_Flash_Program(addr, val);
 8002a1e:	680a      	ldr	r2, [r1, #0]
 8002a20:	684b      	ldr	r3, [r1, #4]
 8002a22:	f001 f9cb 	bl	8003dbc <Stm32c0_Flash_Program>
}
 8002a26:	bd08      	pop	{r3, pc}

08002a28 <__io_putchar>:
{
 8002a28:	b500      	push	{lr}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a32:	2201      	movs	r2, #1
 8002a34:	a901      	add	r1, sp, #4
 8002a36:	4803      	ldr	r0, [pc, #12]	@ (8002a44 <__io_putchar+0x1c>)
 8002a38:	f006 fc63 	bl	8009302 <HAL_UART_Transmit>
}
 8002a3c:	9801      	ldr	r0, [sp, #4]
 8002a3e:	b003      	add	sp, #12
 8002a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a44:	2000c2f4 	.word	0x2000c2f4

08002a48 <log_message>:
{
 8002a48:	b40f      	push	{r0, r1, r2, r3}
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	b0d6      	sub	sp, #344	@ 0x158
 8002a4e:	ab58      	add	r3, sp, #352	@ 0x160
 8002a50:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002a54:	9315      	str	r3, [sp, #84]	@ 0x54
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a5a:	a816      	add	r0, sp, #88	@ 0x58
 8002a5c:	f00c fcf8 	bl	800f450 <vsniprintf>
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002a60:	4c1b      	ldr	r4, [pc, #108]	@ (8002ad0 <log_message+0x88>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	a910      	add	r1, sp, #64	@ 0x40
 8002a66:	4620      	mov	r0, r4
 8002a68:	f004 fecb 	bl	8007802 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	a90f      	add	r1, sp, #60	@ 0x3c
 8002a70:	4620      	mov	r0, r4
 8002a72:	f004 feec 	bl	800784e <HAL_RTC_GetDate>
    uint32_t SecondFraction = hrtc.Init.SynchPrediv;
 8002a76:	68e1      	ldr	r1, [r4, #12]
             2000 + sDate.Year, sDate.Month, sDate.Date,
 8002a78:	f89d 303f 	ldrb.w	r3, [sp, #63]	@ 0x3f
    milliseconds = ((SecondFraction - subseconds) * 1000) / (SecondFraction + 1);
 8002a7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002a7e:	1a8a      	subs	r2, r1, r2
 8002a80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a84:	fb00 f202 	mul.w	r2, r0, r2
 8002a88:	3101      	adds	r1, #1
 8002a8a:	fbb2 f2f1 	udiv	r2, r2, r1
    snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d.%03lu",
 8002a8e:	9205      	str	r2, [sp, #20]
 8002a90:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 8002a94:	9204      	str	r2, [sp, #16]
 8002a96:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 8002a9a:	9203      	str	r2, [sp, #12]
 8002a9c:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 8002aa0:	9202      	str	r2, [sp, #8]
 8002aa2:	f89d 203e 	ldrb.w	r2, [sp, #62]	@ 0x3e
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 8002aac:	9200      	str	r2, [sp, #0]
 8002aae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002ab2:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <log_message+0x8c>)
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	a807      	add	r0, sp, #28
 8002ab8:	f00c fc22 	bl	800f300 <sniprintf>
    printf("[%s] %s", time_str, buffer);
 8002abc:	aa16      	add	r2, sp, #88	@ 0x58
 8002abe:	a907      	add	r1, sp, #28
 8002ac0:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <log_message+0x90>)
 8002ac2:	f00c fba5 	bl	800f210 <iprintf>
}
 8002ac6:	b056      	add	sp, #344	@ 0x158
 8002ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002acc:	b004      	add	sp, #16
 8002ace:	4770      	bx	lr
 8002ad0:	2000c568 	.word	0x2000c568
 8002ad4:	08011934 	.word	0x08011934
 8002ad8:	08011958 	.word	0x08011958

08002adc <Target_Connect>:
{
 8002adc:	b510      	push	{r4, lr}
  log_message("Target Connect\n");
 8002ade:	4884      	ldr	r0, [pc, #528]	@ (8002cf0 <Target_Connect+0x214>)
 8002ae0:	f7ff ffb2 	bl	8002a48 <log_message>
  hardResetTarget();
 8002ae4:	f7ff fe1a 	bl	800271c <hardResetTarget>
  delayMs(50);
 8002ae8:	2032      	movs	r0, #50	@ 0x32
 8002aea:	f7ff fd6b 	bl	80025c4 <delayMs>
		TRY
 8002aee:	4b81      	ldr	r3, [pc, #516]	@ (8002cf4 <Target_Connect+0x218>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	3001      	adds	r0, #1
 8002af4:	6018      	str	r0, [r3, #0]
 8002af6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002afa:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <Target_Connect+0x21c>)
 8002afc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8002b00:	f7fd fb76 	bl	80001f0 <setjmp>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	f040 81c3 	bne.w	8002e90 <Target_Connect+0x3b4>
			connectToTarget(&target);
 8002b0a:	4c7c      	ldr	r4, [pc, #496]	@ (8002cfc <Target_Connect+0x220>)
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff feb5 	bl	800287c <connectToTarget>
    swdpId = target->TargetDpId;
 8002b12:	6821      	ldr	r1, [r4, #0]
    if (swdpId == STM32_SWDP_ID_3) // STM32G4
 8002b14:	4b7a      	ldr	r3, [pc, #488]	@ (8002d00 <Target_Connect+0x224>)
 8002b16:	4299      	cmp	r1, r3
 8002b18:	d062      	beq.n	8002be0 <Target_Connect+0x104>
    else if (swdpId == STM32_SWDP_ID_2) // STM32H7
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d04 <Target_Connect+0x228>)
 8002b1c:	4299      	cmp	r1, r3
 8002b1e:	d065      	beq.n	8002bec <Target_Connect+0x110>
    else if (swdpId == STM32_SWDP_ID_1) // STM32C0, STM32G0, STM32U0
 8002b20:	4b79      	ldr	r3, [pc, #484]	@ (8002d08 <Target_Connect+0x22c>)
 8002b22:	4299      	cmp	r1, r3
 8002b24:	d168      	bne.n	8002bf8 <Target_Connect+0x11c>
        deviceId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002b26:	4879      	ldr	r0, [pc, #484]	@ (8002d0c <Target_Connect+0x230>)
 8002b28:	f7ff fe0c 	bl	8002744 <readMem>
 8002b2c:	f3c0 000b 	ubfx	r0, r0, #0, #12
	switch (deviceId)
 8002b30:	f2a0 4043 	subw	r0, r0, #1091	@ 0x443
 8002b34:	2850      	cmp	r0, #80	@ 0x50
 8002b36:	f200 81a3 	bhi.w	8002e80 <Target_Connect+0x3a4>
 8002b3a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002b3e:	0068      	.short	0x0068
 8002b40:	01a101a1 	.word	0x01a101a1
 8002b44:	01a101a1 	.word	0x01a101a1
 8002b48:	01a101a1 	.word	0x01a101a1
 8002b4c:	01a101a1 	.word	0x01a101a1
 8002b50:	00680068 	.word	0x00680068
 8002b54:	01a101a1 	.word	0x01a101a1
 8002b58:	01a1012a 	.word	0x01a1012a
 8002b5c:	006801a1 	.word	0x006801a1
 8002b60:	01a101a1 	.word	0x01a101a1
 8002b64:	01a100a8 	.word	0x01a100a8
 8002b68:	010901a1 	.word	0x010901a1
 8002b6c:	01a101a1 	.word	0x01a101a1
 8002b70:	01a101a1 	.word	0x01a101a1
 8002b74:	01a101a1 	.word	0x01a101a1
 8002b78:	01a100a8 	.word	0x01a100a8
 8002b7c:	01a101a1 	.word	0x01a101a1
 8002b80:	01a101a1 	.word	0x01a101a1
 8002b84:	00a800a8 	.word	0x00a800a8
 8002b88:	01790179 	.word	0x01790179
 8002b8c:	01a101a1 	.word	0x01a101a1
 8002b90:	01a101a1 	.word	0x01a101a1
 8002b94:	01a101a1 	.word	0x01a101a1
 8002b98:	01a101a1 	.word	0x01a101a1
 8002b9c:	01a101a1 	.word	0x01a101a1
 8002ba0:	01a101a1 	.word	0x01a101a1
 8002ba4:	01a101a1 	.word	0x01a101a1
 8002ba8:	017901a1 	.word	0x017901a1
 8002bac:	01a101a1 	.word	0x01a101a1
 8002bb0:	01a101a1 	.word	0x01a101a1
 8002bb4:	01a101a1 	.word	0x01a101a1
 8002bb8:	01a1012a 	.word	0x01a1012a
 8002bbc:	012a01a1 	.word	0x012a01a1
 8002bc0:	012a01a1 	.word	0x012a01a1
 8002bc4:	01a101a1 	.word	0x01a101a1
 8002bc8:	010901a1 	.word	0x010901a1
 8002bcc:	01a101a1 	.word	0x01a101a1
 8002bd0:	01a101a1 	.word	0x01a101a1
 8002bd4:	01a101a1 	.word	0x01a101a1
 8002bd8:	01a101a1 	.word	0x01a101a1
 8002bdc:	006801a1 	.word	0x006801a1
        deviceId = readMem(STM32_REG_DEVICE_ID_3) & 0xFFF;
 8002be0:	484b      	ldr	r0, [pc, #300]	@ (8002d10 <Target_Connect+0x234>)
 8002be2:	f7ff fdaf 	bl	8002744 <readMem>
 8002be6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002bea:	e7a1      	b.n	8002b30 <Target_Connect+0x54>
        deviceId = readMem(STM32_REG_DEVICE_ID_2) & 0xFFF;
 8002bec:	4849      	ldr	r0, [pc, #292]	@ (8002d14 <Target_Connect+0x238>)
 8002bee:	f7ff fda9 	bl	8002744 <readMem>
 8002bf2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002bf6:	e79b      	b.n	8002b30 <Target_Connect+0x54>
        log_message("Unknown SW-DP ID: 0x%08X\n", swdpId);
 8002bf8:	4847      	ldr	r0, [pc, #284]	@ (8002d18 <Target_Connect+0x23c>)
 8002bfa:	f7ff ff25 	bl	8002a48 <log_message>
        target->TargetFamily = 0; // Unknown family
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002cfc <Target_Connect+0x220>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	721a      	strb	r2, [r3, #8]
        target->TargetDevId = 0;
 8002c04:	60da      	str	r2, [r3, #12]
			swdErrorIndex = 0;
 8002c06:	2000      	movs	r0, #0
 8002c08:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf4 <Target_Connect+0x218>)
 8002c0a:	6018      	str	r0, [r3, #0]
    	return TARGET_OK; // Disable return function in TRY/CATCH.
 8002c0c:	e14d      	b.n	8002eaa <Target_Connect+0x3ce>
    target->TargetFamily = TARGET_STM32C0;
 8002c0e:	4c3b      	ldr	r4, [pc, #236]	@ (8002cfc <Target_Connect+0x220>)
 8002c10:	2305      	movs	r3, #5
 8002c12:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002c14:	483d      	ldr	r0, [pc, #244]	@ (8002d0c <Target_Connect+0x230>)
 8002c16:	f7ff fd95 	bl	8002744 <readMem>
 8002c1a:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002c1e:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32C0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002c20:	483e      	ldr	r0, [pc, #248]	@ (8002d1c <Target_Connect+0x240>)
 8002c22:	f7ff ff11 	bl	8002a48 <log_message>
    switch(target->TargetDevId)
 8002c26:	68e1      	ldr	r1, [r4, #12]
 8002c28:	f240 4353 	movw	r3, #1107	@ 0x453
 8002c2c:	4299      	cmp	r1, r3
 8002c2e:	d812      	bhi.n	8002c56 <Target_Connect+0x17a>
 8002c30:	f240 4342 	movw	r3, #1090	@ 0x442
 8002c34:	4299      	cmp	r1, r3
 8002c36:	d926      	bls.n	8002c86 <Target_Connect+0x1aa>
 8002c38:	f2a1 4343 	subw	r3, r1, #1091	@ 0x443
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d822      	bhi.n	8002c86 <Target_Connect+0x1aa>
 8002c40:	e8df f003 	tbb	[pc, r3]
 8002c44:	21212111 	.word	0x21212111
 8002c48:	21212121 	.word	0x21212121
 8002c4c:	211d1921 	.word	0x211d1921
 8002c50:	21212121 	.word	0x21212121
 8002c54:	15          	.byte	0x15
 8002c55:	00          	.byte	0x00
 8002c56:	f240 4393 	movw	r3, #1171	@ 0x493
 8002c5a:	4299      	cmp	r1, r3
 8002c5c:	d113      	bne.n	8002c86 <Target_Connect+0x1aa>
            log_message("STM32C071xx\n");
 8002c5e:	4830      	ldr	r0, [pc, #192]	@ (8002d20 <Target_Connect+0x244>)
 8002c60:	f7ff fef2 	bl	8002a48 <log_message>
            break;
 8002c64:	e7cf      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32C011xx\n");
 8002c66:	482f      	ldr	r0, [pc, #188]	@ (8002d24 <Target_Connect+0x248>)
 8002c68:	f7ff feee 	bl	8002a48 <log_message>
            break;
 8002c6c:	e7cb      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32C031xx\n");
 8002c6e:	482e      	ldr	r0, [pc, #184]	@ (8002d28 <Target_Connect+0x24c>)
 8002c70:	f7ff feea 	bl	8002a48 <log_message>
            break;
 8002c74:	e7c7      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32C051xx\n");
 8002c76:	482d      	ldr	r0, [pc, #180]	@ (8002d2c <Target_Connect+0x250>)
 8002c78:	f7ff fee6 	bl	8002a48 <log_message>
            break;
 8002c7c:	e7c3      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32C091xx/92xx\n");
 8002c7e:	482c      	ldr	r0, [pc, #176]	@ (8002d30 <Target_Connect+0x254>)
 8002c80:	f7ff fee2 	bl	8002a48 <log_message>
            break;
 8002c84:	e7bf      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("Unknown STM32C0 Device ID: 0x%03X\n", target->TargetDevId);
 8002c86:	482b      	ldr	r0, [pc, #172]	@ (8002d34 <Target_Connect+0x258>)
 8002c88:	f7ff fede 	bl	8002a48 <log_message>
            break;
 8002c8c:	e7bb      	b.n	8002c06 <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32G0;
 8002c8e:	4c1b      	ldr	r4, [pc, #108]	@ (8002cfc <Target_Connect+0x220>)
 8002c90:	2307      	movs	r3, #7
 8002c92:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002c94:	481d      	ldr	r0, [pc, #116]	@ (8002d0c <Target_Connect+0x230>)
 8002c96:	f7ff fd55 	bl	8002744 <readMem>
 8002c9a:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002c9e:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32G0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002ca0:	4825      	ldr	r0, [pc, #148]	@ (8002d38 <Target_Connect+0x25c>)
 8002ca2:	f7ff fed1 	bl	8002a48 <log_message>
    switch(target->TargetDevId)
 8002ca6:	68e1      	ldr	r1, [r4, #12]
 8002ca8:	f2a1 4356 	subw	r3, r1, #1110	@ 0x456
 8002cac:	2b11      	cmp	r3, #17
 8002cae:	d81a      	bhi.n	8002ce6 <Target_Connect+0x20a>
 8002cb0:	e8df f003 	tbb	[pc, r3]
 8002cb4:	19191911 	.word	0x19191911
 8002cb8:	19191919 	.word	0x19191919
 8002cbc:	190d1919 	.word	0x190d1919
 8002cc0:	19191919 	.word	0x19191919
 8002cc4:	0915      	.short	0x0915
            log_message("STM32G0B0xx, STM32G0B1xx and STM32G0C1xx\n");
 8002cc6:	481d      	ldr	r0, [pc, #116]	@ (8002d3c <Target_Connect+0x260>)
 8002cc8:	f7ff febe 	bl	8002a48 <log_message>
            break;
 8002ccc:	e79b      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32G070xx, STM32G071xx and STM32G081xx\n");
 8002cce:	481c      	ldr	r0, [pc, #112]	@ (8002d40 <Target_Connect+0x264>)
 8002cd0:	f7ff feba 	bl	8002a48 <log_message>
            break;
 8002cd4:	e797      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32G050xx, STM32G051xx and STM32G061xx\n");
 8002cd6:	481b      	ldr	r0, [pc, #108]	@ (8002d44 <Target_Connect+0x268>)
 8002cd8:	f7ff feb6 	bl	8002a48 <log_message>
            break;
 8002cdc:	e793      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32G030xx, STM32G031xx and STM32G041xx\n");
 8002cde:	481a      	ldr	r0, [pc, #104]	@ (8002d48 <Target_Connect+0x26c>)
 8002ce0:	f7ff feb2 	bl	8002a48 <log_message>
            break;
 8002ce4:	e78f      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("Unknown STM32G0 Device ID: 0x%03X\n", target->TargetDevId);
 8002ce6:	4819      	ldr	r0, [pc, #100]	@ (8002d4c <Target_Connect+0x270>)
 8002ce8:	f7ff feae 	bl	8002a48 <log_message>
            break;
 8002cec:	e78b      	b.n	8002c06 <Target_Connect+0x12a>
 8002cee:	bf00      	nop
 8002cf0:	08011970 	.word	0x08011970
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000320 	.word	0x20000320
 8002cfc:	2000c1b0 	.word	0x2000c1b0
 8002d00:	2ba01477 	.word	0x2ba01477
 8002d04:	6ba02477 	.word	0x6ba02477
 8002d08:	0bc11477 	.word	0x0bc11477
 8002d0c:	40015800 	.word	0x40015800
 8002d10:	e0042000 	.word	0xe0042000
 8002d14:	5c001000 	.word	0x5c001000
 8002d18:	08011980 	.word	0x08011980
 8002d1c:	0801199c 	.word	0x0801199c
 8002d20:	080119fc 	.word	0x080119fc
 8002d24:	080119cc 	.word	0x080119cc
 8002d28:	080119dc 	.word	0x080119dc
 8002d2c:	080119ec 	.word	0x080119ec
 8002d30:	08011a0c 	.word	0x08011a0c
 8002d34:	08011a20 	.word	0x08011a20
 8002d38:	08011a44 	.word	0x08011a44
 8002d3c:	08011a74 	.word	0x08011a74
 8002d40:	08011aa0 	.word	0x08011aa0
 8002d44:	08011acc 	.word	0x08011acc
 8002d48:	08011af8 	.word	0x08011af8
 8002d4c:	08011b24 	.word	0x08011b24
    target->TargetFamily = TARGET_STM32U0;
 8002d50:	4c56      	ldr	r4, [pc, #344]	@ (8002eac <Target_Connect+0x3d0>)
 8002d52:	2301      	movs	r3, #1
 8002d54:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_1) & 0xFFF;
 8002d56:	4856      	ldr	r0, [pc, #344]	@ (8002eb0 <Target_Connect+0x3d4>)
 8002d58:	f7ff fcf4 	bl	8002744 <readMem>
 8002d5c:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002d60:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32U0, Device ID: 0x%03X\n",  target->TargetDevId);
 8002d62:	4854      	ldr	r0, [pc, #336]	@ (8002eb4 <Target_Connect+0x3d8>)
 8002d64:	f7ff fe70 	bl	8002a48 <log_message>
    switch(target->TargetDevId)
 8002d68:	68e1      	ldr	r1, [r4, #12]
 8002d6a:	f240 4359 	movw	r3, #1113	@ 0x459
 8002d6e:	4299      	cmp	r1, r3
 8002d70:	d007      	beq.n	8002d82 <Target_Connect+0x2a6>
 8002d72:	f240 4389 	movw	r3, #1161	@ 0x489
 8002d76:	4299      	cmp	r1, r3
 8002d78:	d007      	beq.n	8002d8a <Target_Connect+0x2ae>
            log_message("Unknown STM32U0 Device ID: 0x%03X\n", target->TargetDevId);
 8002d7a:	484f      	ldr	r0, [pc, #316]	@ (8002eb8 <Target_Connect+0x3dc>)
 8002d7c:	f7ff fe64 	bl	8002a48 <log_message>
            break;
 8002d80:	e741      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32U031xx\n");
 8002d82:	484e      	ldr	r0, [pc, #312]	@ (8002ebc <Target_Connect+0x3e0>)
 8002d84:	f7ff fe60 	bl	8002a48 <log_message>
            break;
 8002d88:	e73d      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32U073xx/083xx\n");
 8002d8a:	484d      	ldr	r0, [pc, #308]	@ (8002ec0 <Target_Connect+0x3e4>)
 8002d8c:	f7ff fe5c 	bl	8002a48 <log_message>
            break;
 8002d90:	e739      	b.n	8002c06 <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32H7;
 8002d92:	4c46      	ldr	r4, [pc, #280]	@ (8002eac <Target_Connect+0x3d0>)
 8002d94:	230f      	movs	r3, #15
 8002d96:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_2) & 0xFFF;
 8002d98:	484a      	ldr	r0, [pc, #296]	@ (8002ec4 <Target_Connect+0x3e8>)
 8002d9a:	f7ff fcd3 	bl	8002744 <readMem>
 8002d9e:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002da2:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32H7, Device ID: 0x%03X\n", target->TargetDevId);
 8002da4:	4848      	ldr	r0, [pc, #288]	@ (8002ec8 <Target_Connect+0x3ec>)
 8002da6:	f7ff fe4f 	bl	8002a48 <log_message>
    switch(target->TargetDevId)
 8002daa:	68e1      	ldr	r1, [r4, #12]
 8002dac:	f5b1 6f90 	cmp.w	r1, #1152	@ 0x480
 8002db0:	d00a      	beq.n	8002dc8 <Target_Connect+0x2ec>
 8002db2:	f240 4383 	movw	r3, #1155	@ 0x483
 8002db6:	4299      	cmp	r1, r3
 8002db8:	d01b      	beq.n	8002df2 <Target_Connect+0x316>
 8002dba:	f5b1 6f8a 	cmp.w	r1, #1104	@ 0x450
 8002dbe:	d022      	beq.n	8002e06 <Target_Connect+0x32a>
            log_message("Unknown STM32H7 Device ID: 0x%03X\n", target->TargetDevId);
 8002dc0:	4842      	ldr	r0, [pc, #264]	@ (8002ecc <Target_Connect+0x3f0>)
 8002dc2:	f7ff fe41 	bl	8002a48 <log_message>
            break;
 8002dc6:	e71e      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32H7A3/7B3/7B0\n");
 8002dc8:	4841      	ldr	r0, [pc, #260]	@ (8002ed0 <Target_Connect+0x3f4>)
 8002dca:	f7ff fe3d 	bl	8002a48 <log_message>
            uint32_t tmp = readMem(STM32H7_REG_FLASH_SIZE_2);
 8002dce:	4841      	ldr	r0, [pc, #260]	@ (8002ed4 <Target_Connect+0x3f8>)
 8002dd0:	f7ff fcb8 	bl	8002744 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002dd4:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 8002dd8:	bf18      	it	ne
 8002dda:	2201      	movne	r2, #1
 8002ddc:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <Target_Connect+0x3d0>)
 8002dde:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002de0:	493d      	ldr	r1, [pc, #244]	@ (8002ed8 <Target_Connect+0x3fc>)
 8002de2:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <Target_Connect+0x400>)
 8002de4:	2880      	cmp	r0, #128	@ 0x80
 8002de6:	bf18      	it	ne
 8002de8:	4619      	movne	r1, r3
 8002dea:	483d      	ldr	r0, [pc, #244]	@ (8002ee0 <Target_Connect+0x404>)
 8002dec:	f7ff fe2c 	bl	8002a48 <log_message>
            break;
 8002df0:	e709      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32H72x, STM32H73x\n");
 8002df2:	483c      	ldr	r0, [pc, #240]	@ (8002ee4 <Target_Connect+0x408>)
 8002df4:	f7ff fe28 	bl	8002a48 <log_message>
            target->TargetIsDualBank = STM32H7_FLASH_SUPPORT_SINGLEBANK;
 8002df8:	4b2c      	ldr	r3, [pc, #176]	@ (8002eac <Target_Connect+0x3d0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: Single \n");
 8002dfe:	483a      	ldr	r0, [pc, #232]	@ (8002ee8 <Target_Connect+0x40c>)
 8002e00:	f7ff fe22 	bl	8002a48 <log_message>
            break;
 8002e04:	e6ff      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("STM32H742, STM32H743/753, STM32H750, STM32H745/755, STM32H747/757\n");
 8002e06:	4839      	ldr	r0, [pc, #228]	@ (8002eec <Target_Connect+0x410>)
 8002e08:	f7ff fe1e 	bl	8002a48 <log_message>
            tmp = readMem(STM32H7_REG_FLASH_SIZE_1);
 8002e0c:	4838      	ldr	r0, [pc, #224]	@ (8002ef0 <Target_Connect+0x414>)
 8002e0e:	f7ff fc99 	bl	8002744 <readMem>
            target->TargetIsDualBank = (tmp == STM32H7_FLASH_SIZE_128KB) ? STM32H7_FLASH_SUPPORT_SINGLEBANK : STM32H7_FLASH_SUPPORT_DUALBANK;
 8002e12:	f1b0 0280 	subs.w	r2, r0, #128	@ 0x80
 8002e16:	bf18      	it	ne
 8002e18:	2201      	movne	r2, #1
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <Target_Connect+0x3d0>)
 8002e1c:	615a      	str	r2, [r3, #20]
            log_message("Flash Bank: %s\n", (target->TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK) ? "Dual" : "Single");
 8002e1e:	492e      	ldr	r1, [pc, #184]	@ (8002ed8 <Target_Connect+0x3fc>)
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <Target_Connect+0x400>)
 8002e22:	2880      	cmp	r0, #128	@ 0x80
 8002e24:	bf18      	it	ne
 8002e26:	4619      	movne	r1, r3
 8002e28:	482d      	ldr	r0, [pc, #180]	@ (8002ee0 <Target_Connect+0x404>)
 8002e2a:	f7ff fe0d 	bl	8002a48 <log_message>
            break;
 8002e2e:	e6ea      	b.n	8002c06 <Target_Connect+0x12a>
    target->TargetFamily = TARGET_STM32G4;
 8002e30:	4c1e      	ldr	r4, [pc, #120]	@ (8002eac <Target_Connect+0x3d0>)
 8002e32:	230a      	movs	r3, #10
 8002e34:	7223      	strb	r3, [r4, #8]
    target->TargetDevId = readMem(STM32_REG_DEVICE_ID_3) & 0xFFF;
 8002e36:	482f      	ldr	r0, [pc, #188]	@ (8002ef4 <Target_Connect+0x418>)
 8002e38:	f7ff fc84 	bl	8002744 <readMem>
 8002e3c:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8002e40:	60e1      	str	r1, [r4, #12]
    log_message("Device Identified: STM32G4, Device ID: 0x%03X\n",  target->TargetDevId);
 8002e42:	482d      	ldr	r0, [pc, #180]	@ (8002ef8 <Target_Connect+0x41c>)
 8002e44:	f7ff fe00 	bl	8002a48 <log_message>
    switch(target->TargetDevId)
 8002e48:	68e1      	ldr	r1, [r4, #12]
 8002e4a:	f240 4369 	movw	r3, #1129	@ 0x469
 8002e4e:	4299      	cmp	r1, r3
 8002e50:	d00a      	beq.n	8002e68 <Target_Connect+0x38c>
 8002e52:	f240 4379 	movw	r3, #1145	@ 0x479
 8002e56:	4299      	cmp	r1, r3
 8002e58:	d00a      	beq.n	8002e70 <Target_Connect+0x394>
 8002e5a:	f5b1 6f8d 	cmp.w	r1, #1128	@ 0x468
 8002e5e:	d10b      	bne.n	8002e78 <Target_Connect+0x39c>
            log_message("Category 2 STM32G431, STM32G441(AES)\n");
 8002e60:	4826      	ldr	r0, [pc, #152]	@ (8002efc <Target_Connect+0x420>)
 8002e62:	f7ff fdf1 	bl	8002a48 <log_message>
            break;
 8002e66:	e6ce      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("Category 3 STM32G471, STM32G473, STM32G474, STM32G483(AES), STM32G484(AES)\n");
 8002e68:	4825      	ldr	r0, [pc, #148]	@ (8002f00 <Target_Connect+0x424>)
 8002e6a:	f7ff fded 	bl	8002a48 <log_message>
            break;
 8002e6e:	e6ca      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("Category 4 STM32G491, STM32G4A1(AES)\n");
 8002e70:	4824      	ldr	r0, [pc, #144]	@ (8002f04 <Target_Connect+0x428>)
 8002e72:	f7ff fde9 	bl	8002a48 <log_message>
            break;
 8002e76:	e6c6      	b.n	8002c06 <Target_Connect+0x12a>
            log_message("Unknown STM32G4 Device ID: 0x%03X\n", target->TargetDevId);
 8002e78:	4823      	ldr	r0, [pc, #140]	@ (8002f08 <Target_Connect+0x42c>)
 8002e7a:	f7ff fde5 	bl	8002a48 <log_message>
            break;
 8002e7e:	e6c2      	b.n	8002c06 <Target_Connect+0x12a>
		    log_message("Unknown Device: No matching Device ID found.\n");
 8002e80:	4822      	ldr	r0, [pc, #136]	@ (8002f0c <Target_Connect+0x430>)
 8002e82:	f7ff fde1 	bl	8002a48 <log_message>
		    target->TargetFamily = 0; // Unknown family
 8002e86:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <Target_Connect+0x3d0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	721a      	strb	r2, [r3, #8]
		    target->TargetDevId = 0;
 8002e8c:	60da      	str	r2, [r3, #12]
			return;
 8002e8e:	e6ba      	b.n	8002c06 <Target_Connect+0x12a>
    	log_message("SWD Error: %s\n", getErrorString(errorCode));
 8002e90:	f7ff fba8 	bl	80025e4 <getErrorString>
 8002e94:	4601      	mov	r1, r0
 8002e96:	481e      	ldr	r0, [pc, #120]	@ (8002f10 <Target_Connect+0x434>)
 8002e98:	f7ff fdd6 	bl	8002a48 <log_message>
    	log_message("Failed to connect. Retrying...\n");
 8002e9c:	481d      	ldr	r0, [pc, #116]	@ (8002f14 <Target_Connect+0x438>)
 8002e9e:	f7ff fdd3 	bl	8002a48 <log_message>
    	delayMs(200);
 8002ea2:	20c8      	movs	r0, #200	@ 0xc8
 8002ea4:	f7ff fb8e 	bl	80025c4 <delayMs>
    	return TARGET_ERROR; // Disable return function in TRY/CATCH.
 8002ea8:	2001      	movs	r0, #1
}
 8002eaa:	bd10      	pop	{r4, pc}
 8002eac:	2000c1b0 	.word	0x2000c1b0
 8002eb0:	40015800 	.word	0x40015800
 8002eb4:	08011b48 	.word	0x08011b48
 8002eb8:	08011b9c 	.word	0x08011b9c
 8002ebc:	08011b78 	.word	0x08011b78
 8002ec0:	08011b88 	.word	0x08011b88
 8002ec4:	5c001000 	.word	0x5c001000
 8002ec8:	08011bc0 	.word	0x08011bc0
 8002ecc:	08011c88 	.word	0x08011c88
 8002ed0:	08011bf0 	.word	0x08011bf0
 8002ed4:	08fff80c 	.word	0x08fff80c
 8002ed8:	08011968 	.word	0x08011968
 8002edc:	08011960 	.word	0x08011960
 8002ee0:	08011c04 	.word	0x08011c04
 8002ee4:	08011c14 	.word	0x08011c14
 8002ee8:	08011c2c 	.word	0x08011c2c
 8002eec:	08011c44 	.word	0x08011c44
 8002ef0:	1ff1e880 	.word	0x1ff1e880
 8002ef4:	e0042000 	.word	0xe0042000
 8002ef8:	08011cac 	.word	0x08011cac
 8002efc:	08011cdc 	.word	0x08011cdc
 8002f00:	08011d04 	.word	0x08011d04
 8002f04:	08011d50 	.word	0x08011d50
 8002f08:	08011d78 	.word	0x08011d78
 8002f0c:	08011d9c 	.word	0x08011d9c
 8002f10:	08011dcc 	.word	0x08011dcc
 8002f14:	08011ddc 	.word	0x08011ddc

08002f18 <Target_GetFlashStartAddress>:
{
 8002f18:	b508      	push	{r3, lr}
    switch(target.TargetFamily)
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <Target_GetFlashStartAddress+0x24>)
 8002f1c:	7a1a      	ldrb	r2, [r3, #8]
 8002f1e:	2a0f      	cmp	r2, #15
 8002f20:	d808      	bhi.n	8002f34 <Target_GetFlashStartAddress+0x1c>
 8002f22:	f248 03a2 	movw	r3, #32930	@ 0x80a2
 8002f26:	40d3      	lsrs	r3, r2
 8002f28:	f013 0f01 	tst.w	r3, #1
 8002f2c:	d002      	beq.n	8002f34 <Target_GetFlashStartAddress+0x1c>
}
 8002f2e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002f32:	bd08      	pop	{r3, pc}
            log_message("Unknown target family. Using default start address 0x08000000.\n");
 8002f34:	4802      	ldr	r0, [pc, #8]	@ (8002f40 <Target_GetFlashStartAddress+0x28>)
 8002f36:	f7ff fd87 	bl	8002a48 <log_message>
            return 0x08000000;
 8002f3a:	e7f8      	b.n	8002f2e <Target_GetFlashStartAddress+0x16>
 8002f3c:	2000c1b0 	.word	0x2000c1b0
 8002f40:	08011dfc 	.word	0x08011dfc

08002f44 <Target_VerifyCallback>:
  uint8_t tmp[32];
  uint32_t u32_ReadData[8];

  /* Read required words from target flash memory */
  int num_words = (bufsize + 3) / 4;  // Calculate the number of words needed to cover bufsize bytes
  for(int i = 0; i < num_words; i++)
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	d04a      	beq.n	8002fde <Target_VerifyCallback+0x9a>
{
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b091      	sub	sp, #68	@ 0x44
 8002f4e:	4606      	mov	r6, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	4615      	mov	r5, r2
 8002f54:	1cd7      	adds	r7, r2, #3
 8002f56:	10bf      	asrs	r7, r7, #2
 8002f58:	f1ad 0804 	sub.w	r8, sp, #4
  for(int i = 0; i < num_words; i++)
 8002f5c:	46c2      	mov	sl, r8
 8002f5e:	f04f 0900 	mov.w	r9, #0
  {
      u32_ReadData[i] = readMem(addr + (i * 4));
 8002f62:	ab10      	add	r3, sp, #64	@ 0x40
 8002f64:	f1c3 0b44 	rsb	fp, r3, #68	@ 0x44
 8002f68:	4483      	add	fp, r0
 8002f6a:	eb0b 000a 	add.w	r0, fp, sl
 8002f6e:	f7ff fbe9 	bl	8002744 <readMem>
 8002f72:	f84a 0f04 	str.w	r0, [sl, #4]!
  for(int i = 0; i < num_words; i++)
 8002f76:	f109 0901 	add.w	r9, r9, #1
 8002f7a:	454f      	cmp	r7, r9
 8002f7c:	dcf5      	bgt.n	8002f6a <Target_VerifyCallback+0x26>
  }

  /* Convert uint32_t to uint8_t */
  for (int i = 0; i < num_words; i++) {
 8002f7e:	a808      	add	r0, sp, #32
  for(int i = 0; i < num_words; i++)
 8002f80:	4684      	mov	ip, r0
  for (int i = 0; i < num_words; i++) {
 8002f82:	2200      	movs	r2, #0
      tmp[4 * i]     = u32_ReadData[i] & 0xFF;
 8002f84:	f858 3f04 	ldr.w	r3, [r8, #4]!
 8002f88:	f88c 3000 	strb.w	r3, [ip]
      tmp[4 * i + 1] = (u32_ReadData[i] >> 8) & 0xFF;
 8002f8c:	0a19      	lsrs	r1, r3, #8
 8002f8e:	f88c 1001 	strb.w	r1, [ip, #1]
      tmp[4 * i + 2] = (u32_ReadData[i] >> 16) & 0xFF;
 8002f92:	0c19      	lsrs	r1, r3, #16
 8002f94:	f88c 1002 	strb.w	r1, [ip, #2]
      tmp[4 * i + 3] = (u32_ReadData[i] >> 24) & 0xFF;
 8002f98:	0e1b      	lsrs	r3, r3, #24
 8002f9a:	f88c 3003 	strb.w	r3, [ip, #3]
  for (int i = 0; i < num_words; i++) {
 8002f9e:	3201      	adds	r2, #1
 8002fa0:	f10c 0c04 	add.w	ip, ip, #4
 8002fa4:	4297      	cmp	r7, r2
 8002fa6:	dced      	bgt.n	8002f84 <Target_VerifyCallback+0x40>
  }

  /* Compare Hex & Flash Data */
  for(int i = 0; i < bufsize; i++)
 8002fa8:	4621      	mov	r1, r4
 8002faa:	2300      	movs	r3, #0
  {
#if DEBUG_USE_VERIFY_PRINT
      log_message("Address: 0x%08"PRIX32"\n", (addr + i));
      log_message("Flash: 0x%02"PRIX16", BIN File: 0x%02"PRIX16"\n", tmp[i], buf[i]);
#endif
      if(buf[i] != tmp[i])
 8002fac:	460f      	mov	r7, r1
 8002fae:	3101      	adds	r1, #1
 8002fb0:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002fb4:	783a      	ldrb	r2, [r7, #0]
 8002fb6:	42a2      	cmp	r2, r4
 8002fb8:	d104      	bne.n	8002fc4 <Target_VerifyCallback+0x80>
  for(int i = 0; i < bufsize; i++)
 8002fba:	3301      	adds	r3, #1
 8002fbc:	429d      	cmp	r5, r3
 8002fbe:	d1f5      	bne.n	8002fac <Target_VerifyCallback+0x68>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
          return false;
      }
  }
  return true;
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	e009      	b.n	8002fd8 <Target_VerifyCallback+0x94>
          log_message("Verification failed at address 0x%08"PRIX32"\n", (addr + i));
 8002fc4:	1999      	adds	r1, r3, r6
 8002fc6:	4807      	ldr	r0, [pc, #28]	@ (8002fe4 <Target_VerifyCallback+0xa0>)
 8002fc8:	f7ff fd3e 	bl	8002a48 <log_message>
          log_message("Value is 0x%02"PRIX16", should have been 0x%02"PRIX16"\n", tmp[i], buf[i]);
 8002fcc:	783a      	ldrb	r2, [r7, #0]
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4805      	ldr	r0, [pc, #20]	@ (8002fe8 <Target_VerifyCallback+0xa4>)
 8002fd2:	f7ff fd39 	bl	8002a48 <log_message>
          return false;
 8002fd6:	2000      	movs	r0, #0
}
 8002fd8:	b011      	add	sp, #68	@ 0x44
 8002fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
 8002fde:	2001      	movs	r0, #1
}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	08011e3c 	.word	0x08011e3c
 8002fe8:	08011e64 	.word	0x08011e64

08002fec <Target_Verify>:
    return TARGET_OK;
}

/* Main function to verify the target */
static bool Target_Verify(void)
{
 8002fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff0:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target Verify\n");
 8002ff4:	486e      	ldr	r0, [pc, #440]	@ (80031b0 <Target_Verify+0x1c4>)
 8002ff6:	f7ff fd27 	bl	8002a48 <log_message>

    /* Check if HEX file exists */
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8002ffa:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 8002ffe:	486d      	ldr	r0, [pc, #436]	@ (80031b4 <Target_Verify+0x1c8>)
 8003000:	f00b f88c 	bl	800e11c <f_stat>
    if(res == FR_OK)
 8003004:	b348      	cbz	r0, 800305a <Target_Verify+0x6e>
        return Target_VerifyHex();
    }
    else
    {
        /* HEX file does not exist, check for BIN file */
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8003006:	f50d 618a 	add.w	r1, sp, #1104	@ 0x450
 800300a:	486b      	ldr	r0, [pc, #428]	@ (80031b8 <Target_Verify+0x1cc>)
 800300c:	f00b f886 	bl	800e11c <f_stat>
        if(res == FR_OK)
 8003010:	2800      	cmp	r0, #0
 8003012:	f040 80c4 	bne.w	800319e <Target_Verify+0x1b2>
    size_t readcount = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	9300      	str	r3, [sp, #0]
    uint32_t address = Target_GetFlashStartAddress(); // Starting address for verification
 800301a:	f7ff ff7d 	bl	8002f18 <Target_GetFlashStartAddress>
 800301e:	4607      	mov	r7, r0
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 8003020:	a942      	add	r1, sp, #264	@ 0x108
 8003022:	4865      	ldr	r0, [pc, #404]	@ (80031b8 <Target_Verify+0x1cc>)
 8003024:	f00b f87a 	bl	800e11c <f_stat>
    if(res != FR_OK)
 8003028:	2800      	cmp	r0, #0
 800302a:	d164      	bne.n	80030f6 <Target_Verify+0x10a>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 800302c:	2201      	movs	r2, #1
 800302e:	4962      	ldr	r1, [pc, #392]	@ (80031b8 <Target_Verify+0x1cc>)
 8003030:	a888      	add	r0, sp, #544	@ 0x220
 8003032:	f00a fe09 	bl	800dc48 <f_open>
    if(res != FR_OK)
 8003036:	2800      	cmp	r0, #0
 8003038:	d162      	bne.n	8003100 <Target_Verify+0x114>
                size_t adjusted_chunk_size = (chunk_size / 4) * 4;
 800303a:	f04f 0810 	mov.w	r8, #16
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 800303e:	466b      	mov	r3, sp
 8003040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003044:	a902      	add	r1, sp, #8
 8003046:	a888      	add	r0, sp, #544	@ 0x220
 8003048:	f00a ff2e 	bl	800dea8 <f_read>
        if(res != FR_OK)
 800304c:	2800      	cmp	r0, #0
 800304e:	d15c      	bne.n	800310a <Target_Verify+0x11e>
        if(readcount == 0)
 8003050:	9d00      	ldr	r5, [sp, #0]
 8003052:	2d00      	cmp	r5, #0
 8003054:	d061      	beq.n	800311a <Target_Verify+0x12e>
            size_t i = 0;
 8003056:	2400      	movs	r4, #0
 8003058:	e07f      	b.n	800315a <Target_Verify+0x16e>
    size_t readcount = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 800305e:	a942      	add	r1, sp, #264	@ 0x108
 8003060:	4854      	ldr	r0, [pc, #336]	@ (80031b4 <Target_Verify+0x1c8>)
 8003062:	f00b f85b 	bl	800e11c <f_stat>
    if(res != FR_OK)
 8003066:	b958      	cbnz	r0, 8003080 <Target_Verify+0x94>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 8003068:	2201      	movs	r2, #1
 800306a:	4952      	ldr	r1, [pc, #328]	@ (80031b4 <Target_Verify+0x1c8>)
 800306c:	a888      	add	r0, sp, #544	@ 0x220
 800306e:	f00a fdeb 	bl	800dc48 <f_open>
    if(res != FR_OK)
 8003072:	b950      	cbnz	r0, 800308a <Target_Verify+0x9e>
    ihex_set_callback_func((ihex_callback_fp)*Target_VerifyCallback);
 8003074:	4851      	ldr	r0, [pc, #324]	@ (80031bc <Target_Verify+0x1d0>)
 8003076:	f001 fc91 	bl	800499c <ihex_set_callback_func>
    ihex_reset_state();
 800307a:	f001 fc7d 	bl	8004978 <ihex_reset_state>
 800307e:	e020      	b.n	80030c2 <Target_Verify+0xd6>
        log_message("f_stat error\n");
 8003080:	484f      	ldr	r0, [pc, #316]	@ (80031c0 <Target_Verify+0x1d4>)
 8003082:	f7ff fce1 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	e08d      	b.n	80031a6 <Target_Verify+0x1ba>
        log_message("f_open error\n");
 800308a:	484e      	ldr	r0, [pc, #312]	@ (80031c4 <Target_Verify+0x1d8>)
 800308c:	f7ff fcdc 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003090:	2001      	movs	r0, #1
 8003092:	e088      	b.n	80031a6 <Target_Verify+0x1ba>
            log_message("f_read error\n");
 8003094:	484c      	ldr	r0, [pc, #304]	@ (80031c8 <Target_Verify+0x1dc>)
 8003096:	f7ff fcd7 	bl	8002a48 <log_message>
            f_close(&file);
 800309a:	a888      	add	r0, sp, #544	@ 0x220
 800309c:	f00b f829 	bl	800e0f2 <f_close>
            return TARGET_ERROR;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e080      	b.n	80031a6 <Target_Verify+0x1ba>
            res = f_close(&file);
 80030a4:	a888      	add	r0, sp, #544	@ 0x220
 80030a6:	f00b f824 	bl	800e0f2 <f_close>
            if(res != FR_OK)
 80030aa:	b908      	cbnz	r0, 80030b0 <Target_Verify+0xc4>
    return TARGET_OK;
 80030ac:	2000      	movs	r0, #0
        return Target_VerifyHex();
 80030ae:	e07a      	b.n	80031a6 <Target_Verify+0x1ba>
                log_message("f_close error\n");
 80030b0:	4846      	ldr	r0, [pc, #280]	@ (80031cc <Target_Verify+0x1e0>)
 80030b2:	f7ff fcc9 	bl	8002a48 <log_message>
                return TARGET_ERROR;
 80030b6:	2001      	movs	r0, #1
 80030b8:	e075      	b.n	80031a6 <Target_Verify+0x1ba>
            if (!ihex_parser(fbuf, readcount))
 80030ba:	a802      	add	r0, sp, #8
 80030bc:	f001 fc74 	bl	80049a8 <ihex_parser>
 80030c0:	b188      	cbz	r0, 80030e6 <Target_Verify+0xfa>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 80030c2:	ab01      	add	r3, sp, #4
 80030c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c8:	a902      	add	r1, sp, #8
 80030ca:	a888      	add	r0, sp, #544	@ 0x220
 80030cc:	f00a feec 	bl	800dea8 <f_read>
        if(res != FR_OK)
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d1df      	bne.n	8003094 <Target_Verify+0xa8>
        if(readcount == 0)
 80030d4:	9901      	ldr	r1, [sp, #4]
 80030d6:	2900      	cmp	r1, #0
 80030d8:	d0e4      	beq.n	80030a4 <Target_Verify+0xb8>
            if(readcount < sizeof(fbuf))
 80030da:	29ff      	cmp	r1, #255	@ 0xff
 80030dc:	d8ed      	bhi.n	80030ba <Target_Verify+0xce>
                fbuf[readcount] = '\0';
 80030de:	2300      	movs	r3, #0
 80030e0:	aa02      	add	r2, sp, #8
 80030e2:	5453      	strb	r3, [r2, r1]
 80030e4:	e7e9      	b.n	80030ba <Target_Verify+0xce>
                log_message("ihex_parser error\n");
 80030e6:	483a      	ldr	r0, [pc, #232]	@ (80031d0 <Target_Verify+0x1e4>)
 80030e8:	f7ff fcae 	bl	8002a48 <log_message>
                f_close(&file);
 80030ec:	a888      	add	r0, sp, #544	@ 0x220
 80030ee:	f00b f800 	bl	800e0f2 <f_close>
                return TARGET_ERROR;
 80030f2:	2001      	movs	r0, #1
 80030f4:	e057      	b.n	80031a6 <Target_Verify+0x1ba>
        log_message("f_stat error\n");
 80030f6:	4832      	ldr	r0, [pc, #200]	@ (80031c0 <Target_Verify+0x1d4>)
 80030f8:	f7ff fca6 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 80030fc:	2001      	movs	r0, #1
 80030fe:	e052      	b.n	80031a6 <Target_Verify+0x1ba>
        log_message("f_open error\n");
 8003100:	4830      	ldr	r0, [pc, #192]	@ (80031c4 <Target_Verify+0x1d8>)
 8003102:	f7ff fca1 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003106:	2001      	movs	r0, #1
 8003108:	e04d      	b.n	80031a6 <Target_Verify+0x1ba>
            log_message("f_read error\n");
 800310a:	482f      	ldr	r0, [pc, #188]	@ (80031c8 <Target_Verify+0x1dc>)
 800310c:	f7ff fc9c 	bl	8002a48 <log_message>
            f_close(&file);
 8003110:	a888      	add	r0, sp, #544	@ 0x220
 8003112:	f00a ffee 	bl	800e0f2 <f_close>
            return TARGET_ERROR;
 8003116:	2001      	movs	r0, #1
 8003118:	e045      	b.n	80031a6 <Target_Verify+0x1ba>
            res = f_close(&file);
 800311a:	a888      	add	r0, sp, #544	@ 0x220
 800311c:	f00a ffe9 	bl	800e0f2 <f_close>
            if(res != FR_OK)
 8003120:	b908      	cbnz	r0, 8003126 <Target_Verify+0x13a>
    return TARGET_OK;
 8003122:	2000      	movs	r0, #0
        {
            /* BIN file exists */
            return Target_VerifyBin();
 8003124:	e03f      	b.n	80031a6 <Target_Verify+0x1ba>
                log_message("f_close error\n");
 8003126:	4829      	ldr	r0, [pc, #164]	@ (80031cc <Target_Verify+0x1e0>)
 8003128:	f7ff fc8e 	bl	8002a48 <log_message>
                return TARGET_ERROR;
 800312c:	2001      	movs	r0, #1
 800312e:	e03a      	b.n	80031a6 <Target_Verify+0x1ba>
                        log_message("Verification failed\n");
 8003130:	4828      	ldr	r0, [pc, #160]	@ (80031d4 <Target_Verify+0x1e8>)
 8003132:	f7ff fc89 	bl	8002a48 <log_message>
                        f_close(&file);
 8003136:	a888      	add	r0, sp, #544	@ 0x220
 8003138:	f00a ffdb 	bl	800e0f2 <f_close>
                        return TARGET_ERROR;
 800313c:	2001      	movs	r0, #1
 800313e:	e032      	b.n	80031a6 <Target_Verify+0x1ba>
                size_t adjusted_chunk_size = (chunk_size / 4) * 4;
 8003140:	4646      	mov	r6, r8
                    if(!Target_VerifyCallback(address + i, &fbuf[i], (uint8_t)adjusted_chunk_size))
 8003142:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8003146:	ab02      	add	r3, sp, #8
 8003148:	1919      	adds	r1, r3, r4
 800314a:	19e0      	adds	r0, r4, r7
 800314c:	f7ff fefa 	bl	8002f44 <Target_VerifyCallback>
 8003150:	b1d8      	cbz	r0, 800318a <Target_Verify+0x19e>
                    i += adjusted_chunk_size;
 8003152:	4434      	add	r4, r6
            while (i < readcount)
 8003154:	9d00      	ldr	r5, [sp, #0]
 8003156:	42a5      	cmp	r5, r4
 8003158:	d91f      	bls.n	800319a <Target_Verify+0x1ae>
                size_t chunk_size = readcount - i;
 800315a:	1b2a      	subs	r2, r5, r4
                if(chunk_size > 16)
 800315c:	2a10      	cmp	r2, #16
 800315e:	d8ef      	bhi.n	8003140 <Target_Verify+0x154>
                if(adjusted_chunk_size == 0)
 8003160:	f032 0603 	bics.w	r6, r2, #3
 8003164:	d1ed      	bne.n	8003142 <Target_Verify+0x156>
                    uint8_t tmp[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	9301      	str	r3, [sp, #4]
                    memcpy(tmp, &fbuf[i], remaining);
 800316c:	ab02      	add	r3, sp, #8
 800316e:	1919      	adds	r1, r3, r4
 8003170:	a801      	add	r0, sp, #4
 8003172:	f00c fa8e 	bl	800f692 <memcpy>
                    if(!Target_VerifyCallback(address + i, tmp, 4))
 8003176:	2204      	movs	r2, #4
 8003178:	eb0d 0102 	add.w	r1, sp, r2
 800317c:	19e0      	adds	r0, r4, r7
 800317e:	f7ff fee1 	bl	8002f44 <Target_VerifyCallback>
 8003182:	2800      	cmp	r0, #0
 8003184:	d0d4      	beq.n	8003130 <Target_Verify+0x144>
                    i += remaining;
 8003186:	462c      	mov	r4, r5
 8003188:	e7e4      	b.n	8003154 <Target_Verify+0x168>
                        log_message("Verification failed\n");
 800318a:	4812      	ldr	r0, [pc, #72]	@ (80031d4 <Target_Verify+0x1e8>)
 800318c:	f7ff fc5c 	bl	8002a48 <log_message>
                        f_close(&file);
 8003190:	a888      	add	r0, sp, #544	@ 0x220
 8003192:	f00a ffae 	bl	800e0f2 <f_close>
                        return TARGET_ERROR;
 8003196:	2001      	movs	r0, #1
 8003198:	e005      	b.n	80031a6 <Target_Verify+0x1ba>
            address += readcount;
 800319a:	442f      	add	r7, r5
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 800319c:	e74f      	b.n	800303e <Target_Verify+0x52>
        }
        else
        {
            /* Neither HEX nor BIN file exists */
            log_message("No firmware file found\n");
 800319e:	480e      	ldr	r0, [pc, #56]	@ (80031d8 <Target_Verify+0x1ec>)
 80031a0:	f7ff fc52 	bl	8002a48 <log_message>
            return TARGET_ERROR;
 80031a4:	2001      	movs	r0, #1
        }
    }
}
 80031a6:	f50d 6dad 	add.w	sp, sp, #1384	@ 0x568
 80031aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ae:	bf00      	nop
 80031b0:	08011e90 	.word	0x08011e90
 80031b4:	08011ea0 	.word	0x08011ea0
 80031b8:	08011f04 	.word	0x08011f04
 80031bc:	08002f45 	.word	0x08002f45
 80031c0:	08011eb0 	.word	0x08011eb0
 80031c4:	08011ec0 	.word	0x08011ec0
 80031c8:	08011ed0 	.word	0x08011ed0
 80031cc:	08011ee0 	.word	0x08011ee0
 80031d0:	08011ef0 	.word	0x08011ef0
 80031d4:	08011f14 	.word	0x08011f14
 80031d8:	08011f2c 	.word	0x08011f2c

080031dc <Target_Protection_Lock>:
}


/* Main function to lock protection */
static bool Target_Protection_Lock(void)
{
 80031dc:	b500      	push	{lr}
 80031de:	b0c7      	sub	sp, #284	@ 0x11c
    FRESULT res;
    FILINFO fileInfo;

    log_message("Target protection configure.\n");
 80031e0:	484b      	ldr	r0, [pc, #300]	@ (8003310 <Target_Protection_Lock+0x134>)
 80031e2:	f7ff fc31 	bl	8002a48 <log_message>

    /* Check if the protection option file exists */
    res = f_stat(FIRMWARE_PROTECT_OPTION_FILE, &fileInfo);
 80031e6:	4669      	mov	r1, sp
 80031e8:	484a      	ldr	r0, [pc, #296]	@ (8003314 <Target_Protection_Lock+0x138>)
 80031ea:	f00a ff97 	bl	800e11c <f_stat>
    if (res == FR_OK)
 80031ee:	2800      	cmp	r0, #0
 80031f0:	f040 8086 	bne.w	8003300 <Target_Protection_Lock+0x124>
    {
        log_message("Protection option available.\n");
 80031f4:	4848      	ldr	r0, [pc, #288]	@ (8003318 <Target_Protection_Lock+0x13c>)
 80031f6:	f7ff fc27 	bl	8002a48 <log_message>

        /* Proceed with protection lock only if the file exists */
        switch(target.TargetFamily)
 80031fa:	4b48      	ldr	r3, [pc, #288]	@ (800331c <Target_Protection_Lock+0x140>)
 80031fc:	7a1b      	ldrb	r3, [r3, #8]
 80031fe:	3b01      	subs	r3, #1
 8003200:	2b0e      	cmp	r3, #14
 8003202:	d879      	bhi.n	80032f8 <Target_Protection_Lock+0x11c>
 8003204:	e8df f003 	tbb	[pc, r3]
 8003208:	78787844 	.word	0x78787844
 800320c:	785e7808 	.word	0x785e7808
 8003210:	78787878 	.word	0x78787878
 8003214:	7878      	.short	0x7878
 8003216:	22          	.byte	0x22
 8003217:	00          	.byte	0x00
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 8003218:	4841      	ldr	r0, [pc, #260]	@ (8003320 <Target_Protection_Lock+0x144>)
 800321a:	f7ff fc15 	bl	8002a48 <log_message>
    Stm32c0_Flash_Unlock();
 800321e:	f000 fd45 	bl	8003cac <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_OB_Unlock();
 8003222:	f000 fe0d 	bl	8003e40 <Stm32c0_Flash_OB_Unlock>
    Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_1);
 8003226:	20bb      	movs	r0, #187	@ 0xbb
 8003228:	f000 fe58 	bl	8003edc <Stm32c0_Flash_OB_Program>
    Stm32c0_Flash_OB_Launch();
 800322c:	f000 fe48 	bl	8003ec0 <Stm32c0_Flash_OB_Launch>
    Target_Connect();
 8003230:	f7ff fc54 	bl	8002adc <Target_Connect>
    Stm32c0_Flash_OB_Lock();
 8003234:	f000 fdf0 	bl	8003e18 <Stm32c0_Flash_OB_Lock>
    Stm32c0_Flash_Lock();
 8003238:	f000 fd56 	bl	8003ce8 <Stm32c0_Flash_Lock>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 800323c:	4839      	ldr	r0, [pc, #228]	@ (8003324 <Target_Protection_Lock+0x148>)
 800323e:	f7ff fa81 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8003242:	b2c1      	uxtb	r1, r0
 8003244:	4838      	ldr	r0, [pc, #224]	@ (8003328 <Target_Protection_Lock+0x14c>)
 8003246:	f7ff fbff 	bl	8002a48 <log_message>
        {
            /* STM32C0 */
            case TARGET_STM32C0: return Target_Protection_Lock_STM32C0();
 800324a:	e05c      	b.n	8003306 <Target_Protection_Lock+0x12a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 800324c:	4834      	ldr	r0, [pc, #208]	@ (8003320 <Target_Protection_Lock+0x144>)
 800324e:	f7ff fbfb 	bl	8002a48 <log_message>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003252:	2001      	movs	r0, #1
 8003254:	f001 f866 	bl	8004324 <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8003258:	2002      	movs	r0, #2
 800325a:	f001 f863 	bl	8004324 <Stm32h7_Flash_Unlock>
    Stm32h7_Flash_OB_Unlock();
 800325e:	f001 f91d 	bl	800449c <Stm32h7_Flash_OB_Unlock>
    Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_1);
 8003262:	f44f 403b 	mov.w	r0, #47872	@ 0xbb00
 8003266:	f001 f985 	bl	8004574 <Stm32h7_Flash_OB_Program>
    Stm32h7_Flash_OB_Launch();
 800326a:	f001 f94b 	bl	8004504 <Stm32h7_Flash_OB_Launch>
    Stm32h7_Flash_OB_Lock();
 800326e:	f001 f935 	bl	80044dc <Stm32h7_Flash_OB_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8003272:	2002      	movs	r0, #2
 8003274:	f001 f89a 	bl	80043ac <Stm32h7_Flash_Lock>
    Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003278:	2001      	movs	r0, #1
 800327a:	f001 f897 	bl	80043ac <Stm32h7_Flash_Lock>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 800327e:	482b      	ldr	r0, [pc, #172]	@ (800332c <Target_Protection_Lock+0x150>)
 8003280:	f7ff fa60 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8003284:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 8003288:	4827      	ldr	r0, [pc, #156]	@ (8003328 <Target_Protection_Lock+0x14c>)
 800328a:	f7ff fbdd 	bl	8002a48 <log_message>
            case TARGET_STM32H7: return Target_Protection_Lock_STM32H7();
 800328e:	e03a      	b.n	8003306 <Target_Protection_Lock+0x12a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 8003290:	4823      	ldr	r0, [pc, #140]	@ (8003320 <Target_Protection_Lock+0x144>)
 8003292:	f7ff fbd9 	bl	8002a48 <log_message>
    Stm32u0_Flash_Unlock();
 8003296:	f001 f98d 	bl	80045b4 <Stm32u0_Flash_Unlock>
    Stm32u0_Flash_OB_Unlock();
 800329a:	f001 fa55 	bl	8004748 <Stm32u0_Flash_OB_Unlock>
    Stm32u0_Flash_OB_Program(STM32U0_OB_RDP_LEVEL_1);
 800329e:	20bb      	movs	r0, #187	@ 0xbb
 80032a0:	f001 faa0 	bl	80047e4 <Stm32u0_Flash_OB_Program>
    Stm32u0_Flash_OB_Launch();
 80032a4:	f001 fa90 	bl	80047c8 <Stm32u0_Flash_OB_Launch>
    Target_Connect();
 80032a8:	f7ff fc18 	bl	8002adc <Target_Connect>
    Stm32u0_Flash_OB_Lock();
 80032ac:	f001 fa38 	bl	8004720 <Stm32u0_Flash_OB_Lock>
    Stm32u0_Flash_Lock();
 80032b0:	f001 f99e 	bl	80045f0 <Stm32u0_Flash_Lock>
    Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR);
 80032b4:	481e      	ldr	r0, [pc, #120]	@ (8003330 <Target_Protection_Lock+0x154>)
 80032b6:	f7ff fa45 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32U0_FLASH_OPTR_RDP_Msk);
 80032ba:	b2c1      	uxtb	r1, r0
 80032bc:	481a      	ldr	r0, [pc, #104]	@ (8003328 <Target_Protection_Lock+0x14c>)
 80032be:	f7ff fbc3 	bl	8002a48 <log_message>
            case TARGET_STM32U0: return Target_Protection_Lock_STM32U0();
 80032c2:	e020      	b.n	8003306 <Target_Protection_Lock+0x12a>
    log_message("Configuring target RDP Level-0 (0xAA) to Level-1 (0xBB) for flash protection.\n");
 80032c4:	4816      	ldr	r0, [pc, #88]	@ (8003320 <Target_Protection_Lock+0x144>)
 80032c6:	f7ff fbbf 	bl	8002a48 <log_message>
    Stm32g0_Flash_Unlock();
 80032ca:	f000 fe31 	bl	8003f30 <Stm32g0_Flash_Unlock>
    Stm32g0_Flash_OB_Unlock();
 80032ce:	f000 ff05 	bl	80040dc <Stm32g0_Flash_OB_Unlock>
    Stm32g0_Flash_OB_Program(STM32G0_OB_RDP_LEVEL_1);
 80032d2:	20bb      	movs	r0, #187	@ 0xbb
 80032d4:	f000 ff30 	bl	8004138 <Stm32g0_Flash_OB_Program>
    Stm32g0_Flash_OB_Launch();
 80032d8:	f000 ff20 	bl	800411c <Stm32g0_Flash_OB_Launch>
    Target_Connect();
 80032dc:	f7ff fbfe 	bl	8002adc <Target_Connect>
    Stm32g0_Flash_OB_Lock();
 80032e0:	f000 fee4 	bl	80040ac <Stm32g0_Flash_OB_Lock>
    Stm32g0_Flash_Lock();
 80032e4:	f000 fecc 	bl	8004080 <Stm32g0_Flash_Lock>
    Option_Status = readMem(STM32G0_FLASH_OPTION_OPTR);
 80032e8:	480e      	ldr	r0, [pc, #56]	@ (8003324 <Target_Protection_Lock+0x148>)
 80032ea:	f7ff fa2b 	bl	8002744 <readMem>
    log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32G0_FLASH_OPTR_RDP_Msk);
 80032ee:	b2c1      	uxtb	r1, r0
 80032f0:	480d      	ldr	r0, [pc, #52]	@ (8003328 <Target_Protection_Lock+0x14c>)
 80032f2:	f7ff fba9 	bl	8002a48 <log_message>
            case TARGET_STM32G0: return Target_Protection_Lock_STM32G0();
 80032f6:	e006      	b.n	8003306 <Target_Protection_Lock+0x12a>
            default:
                log_message("Target family not supported for protection lock.\n");
 80032f8:	480e      	ldr	r0, [pc, #56]	@ (8003334 <Target_Protection_Lock+0x158>)
 80032fa:	f7ff fba5 	bl	8002a48 <log_message>
                break;
 80032fe:	e002      	b.n	8003306 <Target_Protection_Lock+0x12a>
        }
    }
    else
    {
        log_message("Protection option file not found. Skipping protection lock.\n");
 8003300:	480d      	ldr	r0, [pc, #52]	@ (8003338 <Target_Protection_Lock+0x15c>)
 8003302:	f7ff fba1 	bl	8002a48 <log_message>
    }

    return TARGET_OK;
}
 8003306:	2000      	movs	r0, #0
 8003308:	b047      	add	sp, #284	@ 0x11c
 800330a:	f85d fb04 	ldr.w	pc, [sp], #4
 800330e:	bf00      	nop
 8003310:	08011f44 	.word	0x08011f44
 8003314:	08011f64 	.word	0x08011f64
 8003318:	08011f70 	.word	0x08011f70
 800331c:	2000c1b0 	.word	0x2000c1b0
 8003320:	08011f90 	.word	0x08011f90
 8003324:	1fff7800 	.word	0x1fff7800
 8003328:	08011fe0 	.word	0x08011fe0
 800332c:	5200201c 	.word	0x5200201c
 8003330:	40022020 	.word	0x40022020
 8003334:	08011ff8 	.word	0x08011ff8
 8003338:	0801202c 	.word	0x0801202c

0800333c <Target_ErrorHandle>:

static void Target_ErrorHandle(bool status, const char *errorMessage)
{
    if (status != TARGET_OK)
 800333c:	b900      	cbnz	r0, 8003340 <Target_ErrorHandle+0x4>
 800333e:	4770      	bx	lr
{
 8003340:	b508      	push	{r3, lr}
    {
        log_message("%s\n", errorMessage);
 8003342:	4805      	ldr	r0, [pc, #20]	@ (8003358 <Target_ErrorHandle+0x1c>)
 8003344:	f7ff fb80 	bl	8002a48 <log_message>
        LED_SetState(TARGET_LED_STAT_FAILED);
 8003348:	2003      	movs	r0, #3
 800334a:	f001 fd37 	bl	8004dbc <LED_SetState>
        Buzzer_SetState(BUZZER_PROG_FAILED);
 800334e:	2003      	movs	r0, #3
 8003350:	f001 fad0 	bl	80048f4 <Buzzer_SetState>
    }
}
 8003354:	bd08      	pop	{r3, pc}
 8003356:	bf00      	nop
 8003358:	080126ec 	.word	0x080126ec

0800335c <Target_IHexParser_Finish>:
{
 800335c:	b508      	push	{r3, lr}
    return (Target_PageBuffer_Write() == TARGET_OK) ? TARGET_OK : TARGET_ERROR;
 800335e:	f7ff fabb 	bl	80028d8 <Target_PageBuffer_Write>
}
 8003362:	3800      	subs	r0, #0
 8003364:	bf18      	it	ne
 8003366:	2001      	movne	r0, #1
 8003368:	bd08      	pop	{r3, pc}
	...

0800336c <Target_SelectFlashDriver>:
    switch (target_family)
 800336c:	2807      	cmp	r0, #7
 800336e:	d009      	beq.n	8003384 <Target_SelectFlashDriver+0x18>
 8003370:	280f      	cmp	r0, #15
 8003372:	d009      	beq.n	8003388 <Target_SelectFlashDriver+0x1c>
 8003374:	4b05      	ldr	r3, [pc, #20]	@ (800338c <Target_SelectFlashDriver+0x20>)
 8003376:	4a06      	ldr	r2, [pc, #24]	@ (8003390 <Target_SelectFlashDriver+0x24>)
 8003378:	2801      	cmp	r0, #1
 800337a:	bf18      	it	ne
 800337c:	4613      	movne	r3, r2
        case TARGET_STM32C0: target_writer = &writer_c0; break;
 800337e:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <Target_SelectFlashDriver+0x28>)
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	4770      	bx	lr
    switch (target_family)
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <Target_SelectFlashDriver+0x2c>)
 8003386:	e7fa      	b.n	800337e <Target_SelectFlashDriver+0x12>
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <Target_SelectFlashDriver+0x30>)
 800338a:	e7f8      	b.n	800337e <Target_SelectFlashDriver+0x12>
 800338c:	20000010 	.word	0x20000010
 8003390:	20000028 	.word	0x20000028
 8003394:	2000c1ac 	.word	0x2000c1ac
 8003398:	2000001c 	.word	0x2000001c
 800339c:	20000004 	.word	0x20000004

080033a0 <Target_Program>:
{
 80033a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a4:	ed2d 8b02 	vpush	{d8}
 80033a8:	f2ad 5d8c 	subw	sp, sp, #1420	@ 0x58c
    log_message("Target Program\n");
 80033ac:	48b6      	ldr	r0, [pc, #728]	@ (8003688 <Target_Program+0x2e8>)
 80033ae:	f7ff fb4b 	bl	8002a48 <log_message>
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 80033b2:	f50d 618e 	add.w	r1, sp, #1136	@ 0x470
 80033b6:	48b5      	ldr	r0, [pc, #724]	@ (800368c <Target_Program+0x2ec>)
 80033b8:	f00a feb0 	bl	800e11c <f_stat>
    if (res == FR_OK)
 80033bc:	2800      	cmp	r0, #0
 80033be:	d046      	beq.n	800344e <Target_Program+0xae>
        res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80033c0:	f50d 618e 	add.w	r1, sp, #1136	@ 0x470
 80033c4:	48b2      	ldr	r0, [pc, #712]	@ (8003690 <Target_Program+0x2f0>)
 80033c6:	f00a fea9 	bl	800e11c <f_stat>
        if (res == FR_OK)
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f040 81ec 	bne.w	80037a8 <Target_Program+0x408>
    size_t readcount = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
    uint32_t address = Target_GetFlashStartAddress();
 80033d4:	f7ff fda0 	bl	8002f18 <Target_GetFlashStartAddress>
 80033d8:	4682      	mov	sl, r0
    log_message("Target ProgramBin\n");
 80033da:	48ae      	ldr	r0, [pc, #696]	@ (8003694 <Target_Program+0x2f4>)
 80033dc:	f7ff fb34 	bl	8002a48 <log_message>
    res = f_stat(FIRMWARE_FILENAME_BIN, &fileInfo);
 80033e0:	a94a      	add	r1, sp, #296	@ 0x128
 80033e2:	48ab      	ldr	r0, [pc, #684]	@ (8003690 <Target_Program+0x2f0>)
 80033e4:	f00a fe9a 	bl	800e11c <f_stat>
    if (res != FR_OK)
 80033e8:	2800      	cmp	r0, #0
 80033ea:	f040 80ad 	bne.w	8003548 <Target_Program+0x1a8>
    log_message("Firmware File Information\n");
 80033ee:	48aa      	ldr	r0, [pc, #680]	@ (8003698 <Target_Program+0x2f8>)
 80033f0:	f7ff fb2a 	bl	8002a48 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 80033f4:	f50d 719f 	add.w	r1, sp, #318	@ 0x13e
 80033f8:	48a8      	ldr	r0, [pc, #672]	@ (800369c <Target_Program+0x2fc>)
 80033fa:	f7ff fb25 	bl	8002a48 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 80033fe:	994a      	ldr	r1, [sp, #296]	@ 0x128
 8003400:	48a7      	ldr	r0, [pc, #668]	@ (80036a0 <Target_Program+0x300>)
 8003402:	f7ff fb21 	bl	8002a48 <log_message>
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 8003406:	f8bd 212c 	ldrh.w	r2, [sp, #300]	@ 0x12c
    uint8_t hour = (fileInfo.ftime >> 11) & 0x1F;          // 상위 5비트
 800340a:	f8bd 412e 	ldrh.w	r4, [sp, #302]	@ 0x12e
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 800340e:	0a51      	lsrs	r1, r2, #9
    log_message("(3) Last Modified Date: %04d-%02d-%02d\n", year, month, day);
 8003410:	f002 031f 	and.w	r3, r2, #31
 8003414:	f3c2 1243 	ubfx	r2, r2, #5, #4
 8003418:	f201 71bc 	addw	r1, r1, #1980	@ 0x7bc
 800341c:	48a1      	ldr	r0, [pc, #644]	@ (80036a4 <Target_Program+0x304>)
 800341e:	f7ff fb13 	bl	8002a48 <log_message>
    uint8_t second = (fileInfo.ftime & 0x1F) * 2;          // 하위 5비트 * 2 (초 단위)
 8003422:	f004 031f 	and.w	r3, r4, #31
    log_message("(4) Last Modified Time: %02d:%02d:%02d\n", hour, minute, second);
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	f3c4 1245 	ubfx	r2, r4, #5, #6
 800342c:	0ae1      	lsrs	r1, r4, #11
 800342e:	489e      	ldr	r0, [pc, #632]	@ (80036a8 <Target_Program+0x308>)
 8003430:	f7ff fb0a 	bl	8002a48 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_BIN, FA_READ);
 8003434:	2201      	movs	r2, #1
 8003436:	4996      	ldr	r1, [pc, #600]	@ (8003690 <Target_Program+0x2f0>)
 8003438:	a890      	add	r0, sp, #576	@ 0x240
 800343a:	f00a fc05 	bl	800dc48 <f_open>
    if (res != FR_OK)
 800343e:	2800      	cmp	r0, #0
 8003440:	f000 80b2 	beq.w	80035a8 <Target_Program+0x208>
        log_message("Error: Could not open firmware file\n");
 8003444:	4899      	ldr	r0, [pc, #612]	@ (80036ac <Target_Program+0x30c>)
 8003446:	f7ff faff 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 800344a:	2501      	movs	r5, #1
 800344c:	e1b0      	b.n	80037b0 <Target_Program+0x410>
    size_t readcount = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	9302      	str	r3, [sp, #8]
    res = f_stat(FIRMWARE_FILENAME_HEX, &fileInfo);
 8003452:	a94a      	add	r1, sp, #296	@ 0x128
 8003454:	488d      	ldr	r0, [pc, #564]	@ (800368c <Target_Program+0x2ec>)
 8003456:	f00a fe61 	bl	800e11c <f_stat>
    if (res != FR_OK)
 800345a:	bb90      	cbnz	r0, 80034c2 <Target_Program+0x122>
    log_message("Firmware File Information\n");
 800345c:	488e      	ldr	r0, [pc, #568]	@ (8003698 <Target_Program+0x2f8>)
 800345e:	f7ff faf3 	bl	8002a48 <log_message>
    log_message("(1) File name: %s\n", fileInfo.fname);
 8003462:	f50d 719f 	add.w	r1, sp, #318	@ 0x13e
 8003466:	488d      	ldr	r0, [pc, #564]	@ (800369c <Target_Program+0x2fc>)
 8003468:	f7ff faee 	bl	8002a48 <log_message>
    log_message("(2) File size: %lu bytes\n", fileInfo.fsize);
 800346c:	994a      	ldr	r1, [sp, #296]	@ 0x128
 800346e:	488c      	ldr	r0, [pc, #560]	@ (80036a0 <Target_Program+0x300>)
 8003470:	f7ff faea 	bl	8002a48 <log_message>
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 8003474:	f8bd 212c 	ldrh.w	r2, [sp, #300]	@ 0x12c
    uint8_t hour = (fileInfo.ftime >> 11) & 0x1F;          // 상위 5비트
 8003478:	f8bd 412e 	ldrh.w	r4, [sp, #302]	@ 0x12e
    uint16_t year = 1980 + ((fileInfo.fdate >> 9) & 0x7F); // 상위 7비트
 800347c:	0a51      	lsrs	r1, r2, #9
    log_message("(3) Last Modified Date: %04d-%02d-%02d\n", year, month, day);
 800347e:	f002 031f 	and.w	r3, r2, #31
 8003482:	f3c2 1243 	ubfx	r2, r2, #5, #4
 8003486:	f201 71bc 	addw	r1, r1, #1980	@ 0x7bc
 800348a:	4886      	ldr	r0, [pc, #536]	@ (80036a4 <Target_Program+0x304>)
 800348c:	f7ff fadc 	bl	8002a48 <log_message>
    uint8_t second = (fileInfo.ftime & 0x1F) * 2;          // 하위 5비트 * 2 (초 단위)
 8003490:	f004 031f 	and.w	r3, r4, #31
    log_message("(4) Last Modified Time: %02d:%02d:%02d\n", hour, minute, second);
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	f3c4 1245 	ubfx	r2, r4, #5, #6
 800349a:	0ae1      	lsrs	r1, r4, #11
 800349c:	4882      	ldr	r0, [pc, #520]	@ (80036a8 <Target_Program+0x308>)
 800349e:	f7ff fad3 	bl	8002a48 <log_message>
    res = f_open(&file, FIRMWARE_FILENAME_HEX, FA_READ);
 80034a2:	2201      	movs	r2, #1
 80034a4:	4979      	ldr	r1, [pc, #484]	@ (800368c <Target_Program+0x2ec>)
 80034a6:	a890      	add	r0, sp, #576	@ 0x240
 80034a8:	f00a fbce 	bl	800dc48 <f_open>
    if (res != FR_OK)
 80034ac:	b970      	cbnz	r0, 80034cc <Target_Program+0x12c>
    Target_SelectFlashDriver(target.TargetFamily);
 80034ae:	4b80      	ldr	r3, [pc, #512]	@ (80036b0 <Target_Program+0x310>)
 80034b0:	7a18      	ldrb	r0, [r3, #8]
 80034b2:	f7ff ff5b 	bl	800336c <Target_SelectFlashDriver>
    ihex_set_callback_func(Target_IHexParser_Callback);
 80034b6:	487f      	ldr	r0, [pc, #508]	@ (80036b4 <Target_Program+0x314>)
 80034b8:	f001 fa70 	bl	800499c <ihex_set_callback_func>
    ihex_reset_state();
 80034bc:	f001 fa5c 	bl	8004978 <ihex_reset_state>
 80034c0:	e028      	b.n	8003514 <Target_Program+0x174>
        log_message("f_stat error\n");
 80034c2:	487d      	ldr	r0, [pc, #500]	@ (80036b8 <Target_Program+0x318>)
 80034c4:	f7ff fac0 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 80034c8:	2501      	movs	r5, #1
 80034ca:	e171      	b.n	80037b0 <Target_Program+0x410>
        log_message("f_open error\n");
 80034cc:	487b      	ldr	r0, [pc, #492]	@ (80036bc <Target_Program+0x31c>)
 80034ce:	f7ff fabb 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 80034d2:	2501      	movs	r5, #1
 80034d4:	e16c      	b.n	80037b0 <Target_Program+0x410>
            log_message("f_read error\n");
 80034d6:	487a      	ldr	r0, [pc, #488]	@ (80036c0 <Target_Program+0x320>)
 80034d8:	f7ff fab6 	bl	8002a48 <log_message>
            f_close(&file);
 80034dc:	a890      	add	r0, sp, #576	@ 0x240
 80034de:	f00a fe08 	bl	800e0f2 <f_close>
            return TARGET_ERROR;
 80034e2:	2501      	movs	r5, #1
 80034e4:	e164      	b.n	80037b0 <Target_Program+0x410>
            res = f_close(&file);
 80034e6:	a890      	add	r0, sp, #576	@ 0x240
 80034e8:	f00a fe03 	bl	800e0f2 <f_close>
            if (res != FR_OK)
 80034ec:	b920      	cbnz	r0, 80034f8 <Target_Program+0x158>
            if (Target_IHexParser_Finish())
 80034ee:	f7ff ff35 	bl	800335c <Target_IHexParser_Finish>
 80034f2:	b930      	cbnz	r0, 8003502 <Target_Program+0x162>
    return TARGET_OK;
 80034f4:	2500      	movs	r5, #0
        return Target_ProgramHex();
 80034f6:	e15b      	b.n	80037b0 <Target_Program+0x410>
                log_message("f_close error\n");
 80034f8:	4872      	ldr	r0, [pc, #456]	@ (80036c4 <Target_Program+0x324>)
 80034fa:	f7ff faa5 	bl	8002a48 <log_message>
                return TARGET_ERROR;
 80034fe:	2501      	movs	r5, #1
 8003500:	e156      	b.n	80037b0 <Target_Program+0x410>
                log_message("Final page write failed\n");
 8003502:	4871      	ldr	r0, [pc, #452]	@ (80036c8 <Target_Program+0x328>)
 8003504:	f7ff faa0 	bl	8002a48 <log_message>
                return TARGET_ERROR;
 8003508:	2501      	movs	r5, #1
 800350a:	e151      	b.n	80037b0 <Target_Program+0x410>
            if (!ihex_parser(fbuf, readcount))
 800350c:	a80a      	add	r0, sp, #40	@ 0x28
 800350e:	f001 fa4b 	bl	80049a8 <ihex_parser>
 8003512:	b188      	cbz	r0, 8003538 <Target_Program+0x198>
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 8003514:	ab02      	add	r3, sp, #8
 8003516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800351a:	a90a      	add	r1, sp, #40	@ 0x28
 800351c:	a890      	add	r0, sp, #576	@ 0x240
 800351e:	f00a fcc3 	bl	800dea8 <f_read>
        if (res != FR_OK)
 8003522:	2800      	cmp	r0, #0
 8003524:	d1d7      	bne.n	80034d6 <Target_Program+0x136>
        if (readcount == 0)
 8003526:	9902      	ldr	r1, [sp, #8]
 8003528:	2900      	cmp	r1, #0
 800352a:	d0dc      	beq.n	80034e6 <Target_Program+0x146>
            if (readcount < sizeof(fbuf))
 800352c:	29ff      	cmp	r1, #255	@ 0xff
 800352e:	d8ed      	bhi.n	800350c <Target_Program+0x16c>
                fbuf[readcount] = '\0';
 8003530:	2300      	movs	r3, #0
 8003532:	aa0a      	add	r2, sp, #40	@ 0x28
 8003534:	5453      	strb	r3, [r2, r1]
 8003536:	e7e9      	b.n	800350c <Target_Program+0x16c>
                log_message("ihex_parser error\n");
 8003538:	4864      	ldr	r0, [pc, #400]	@ (80036cc <Target_Program+0x32c>)
 800353a:	f7ff fa85 	bl	8002a48 <log_message>
                f_close(&file);
 800353e:	a890      	add	r0, sp, #576	@ 0x240
 8003540:	f00a fdd7 	bl	800e0f2 <f_close>
                return TARGET_ERROR;
 8003544:	2501      	movs	r5, #1
 8003546:	e133      	b.n	80037b0 <Target_Program+0x410>
        log_message("f_stat error\n");
 8003548:	485b      	ldr	r0, [pc, #364]	@ (80036b8 <Target_Program+0x318>)
 800354a:	f7ff fa7d 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 800354e:	2501      	movs	r5, #1
 8003550:	e12e      	b.n	80037b0 <Target_Program+0x410>
            log_message("Error: Failed to read firmware file\n");
 8003552:	485f      	ldr	r0, [pc, #380]	@ (80036d0 <Target_Program+0x330>)
 8003554:	f7ff fa78 	bl	8002a48 <log_message>
            f_close(&file);
 8003558:	a890      	add	r0, sp, #576	@ 0x240
 800355a:	f00a fdca 	bl	800e0f2 <f_close>
            return TARGET_ERROR;
 800355e:	2501      	movs	r5, #1
 8003560:	e126      	b.n	80037b0 <Target_Program+0x410>
            f_close(&file);
 8003562:	a890      	add	r0, sp, #576	@ 0x240
 8003564:	f00a fdc5 	bl	800e0f2 <f_close>
    return TARGET_OK;
 8003568:	2500      	movs	r5, #0
 800356a:	e121      	b.n	80037b0 <Target_Program+0x410>
        switch (target.TargetFamily)
 800356c:	4657      	mov	r7, sl
 800356e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
        uint64_t word = 0xFFFFFFFFFFFFFFFF;  // 기본 패딩 값 0xFF로 초기화
 8003572:	ed9f 8b43 	vldr	d8, [pc, #268]	@ 8003680 <Target_Program+0x2e0>
 8003576:	ed8d 8b02 	vstr	d8, [sp, #8]
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 800357a:	4626      	mov	r6, r4
 800357c:	2c08      	cmp	r4, #8
 800357e:	bf28      	it	cs
 8003580:	2608      	movcs	r6, #8
        memcpy(&word, data, size_to_program);
 8003582:	4632      	mov	r2, r6
 8003584:	4641      	mov	r1, r8
 8003586:	a802      	add	r0, sp, #8
 8003588:	f00c f883 	bl	800f692 <memcpy>
        if (Stm32c0_Flash_Program(address, word) != TARGET_OK)
 800358c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003590:	4638      	mov	r0, r7
 8003592:	f000 fc13 	bl	8003dbc <Stm32c0_Flash_Program>
 8003596:	4605      	mov	r5, r0
 8003598:	2800      	cmp	r0, #0
 800359a:	d139      	bne.n	8003610 <Target_Program+0x270>
        address += chunk_size;
 800359c:	3708      	adds	r7, #8
        data += size_to_program;
 800359e:	44b0      	add	r8, r6
    while (remaining_size > 0)
 80035a0:	1ba4      	subs	r4, r4, r6
 80035a2:	d1e8      	bne.n	8003576 <Target_Program+0x1d6>
        address += readcount;
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	449a      	add	sl, r3
        res = f_read(&file, fbuf, sizeof(fbuf), &readcount);
 80035a8:	ab01      	add	r3, sp, #4
 80035aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035ae:	a90a      	add	r1, sp, #40	@ 0x28
 80035b0:	a890      	add	r0, sp, #576	@ 0x240
 80035b2:	f00a fc79 	bl	800dea8 <f_read>
        if (res != FR_OK)
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1cb      	bne.n	8003552 <Target_Program+0x1b2>
        if (readcount == 0)
 80035ba:	9c01      	ldr	r4, [sp, #4]
 80035bc:	2c00      	cmp	r4, #0
 80035be:	d0d0      	beq.n	8003562 <Target_Program+0x1c2>
        switch (target.TargetFamily)
 80035c0:	4b3b      	ldr	r3, [pc, #236]	@ (80036b0 <Target_Program+0x310>)
 80035c2:	7a1b      	ldrb	r3, [r3, #8]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	2b0e      	cmp	r3, #14
 80035c8:	f200 80e6 	bhi.w	8003798 <Target_Program+0x3f8>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <Target_Program+0x234>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080036e5 	.word	0x080036e5
 80035d8:	08003799 	.word	0x08003799
 80035dc:	08003799 	.word	0x08003799
 80035e0:	08003799 	.word	0x08003799
 80035e4:	0800356d 	.word	0x0800356d
 80035e8:	08003799 	.word	0x08003799
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	08003799 	.word	0x08003799
 80035f4:	08003799 	.word	0x08003799
 80035f8:	08003799 	.word	0x08003799
 80035fc:	08003799 	.word	0x08003799
 8003600:	08003799 	.word	0x08003799
 8003604:	08003799 	.word	0x08003799
 8003608:	08003799 	.word	0x08003799
 800360c:	08003737 	.word	0x08003737
          log_message("Error: Failed to program STM32C0 flash at address 0x%08lX\n", address);
 8003610:	4639      	mov	r1, r7
 8003612:	4830      	ldr	r0, [pc, #192]	@ (80036d4 <Target_Program+0x334>)
 8003614:	f7ff fa18 	bl	8002a48 <log_message>
          Stm32c0_Flash_Lock();
 8003618:	f000 fb66 	bl	8003ce8 <Stm32c0_Flash_Lock>
									 log_message("Error: STM32C0 programming failed\n");
 800361c:	482e      	ldr	r0, [pc, #184]	@ (80036d8 <Target_Program+0x338>)
 800361e:	f7ff fa13 	bl	8002a48 <log_message>
									 f_close(&file);
 8003622:	a890      	add	r0, sp, #576	@ 0x240
 8003624:	f00a fd65 	bl	800e0f2 <f_close>
									 return TARGET_ERROR;
 8003628:	e0c2      	b.n	80037b0 <Target_Program+0x410>
        switch (target.TargetFamily)
 800362a:	4657      	mov	r7, sl
 800362c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
        uint64_t word = 0xFFFFFFFFFFFFFFFF;  // 기본 패딩 값 0xFF로 초기화
 8003630:	ed9f 8b13 	vldr	d8, [pc, #76]	@ 8003680 <Target_Program+0x2e0>
 8003634:	ed8d 8b02 	vstr	d8, [sp, #8]
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 8003638:	4626      	mov	r6, r4
 800363a:	2c08      	cmp	r4, #8
 800363c:	bf28      	it	cs
 800363e:	2608      	movcs	r6, #8
        memcpy(&word, data, size_to_program);
 8003640:	4632      	mov	r2, r6
 8003642:	4641      	mov	r1, r8
 8003644:	a802      	add	r0, sp, #8
 8003646:	f00c f824 	bl	800f692 <memcpy>
        if (Stm32g0_Flash_Program(address, word) != TARGET_OK)
 800364a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800364e:	4638      	mov	r0, r7
 8003650:	f000 fce8 	bl	8004024 <Stm32g0_Flash_Program>
 8003654:	4605      	mov	r5, r0
 8003656:	b920      	cbnz	r0, 8003662 <Target_Program+0x2c2>
        address += chunk_size;
 8003658:	3708      	adds	r7, #8
        data += size_to_program;
 800365a:	44b0      	add	r8, r6
    while (remaining_size > 0)
 800365c:	1ba4      	subs	r4, r4, r6
 800365e:	d1e9      	bne.n	8003634 <Target_Program+0x294>
 8003660:	e7a0      	b.n	80035a4 <Target_Program+0x204>
          log_message("Error: Failed to program STM32G0 flash at address 0x%08lX\n", address);
 8003662:	4639      	mov	r1, r7
 8003664:	481d      	ldr	r0, [pc, #116]	@ (80036dc <Target_Program+0x33c>)
 8003666:	f7ff f9ef 	bl	8002a48 <log_message>
          Stm32g0_Flash_Lock();
 800366a:	f000 fd09 	bl	8004080 <Stm32g0_Flash_Lock>
									 log_message("Error: STM32g0 programming failed\n");
 800366e:	481c      	ldr	r0, [pc, #112]	@ (80036e0 <Target_Program+0x340>)
 8003670:	f7ff f9ea 	bl	8002a48 <log_message>
									 f_close(&file);
 8003674:	a890      	add	r0, sp, #576	@ 0x240
 8003676:	f00a fd3c 	bl	800e0f2 <f_close>
									 return TARGET_ERROR;
 800367a:	e099      	b.n	80037b0 <Target_Program+0x410>
 800367c:	f3af 8000 	nop.w
 8003680:	ffffffff 	.word	0xffffffff
 8003684:	ffffffff 	.word	0xffffffff
 8003688:	0801206c 	.word	0x0801206c
 800368c:	08011ea0 	.word	0x08011ea0
 8003690:	08011f04 	.word	0x08011f04
 8003694:	08012134 	.word	0x08012134
 8003698:	0801207c 	.word	0x0801207c
 800369c:	08012098 	.word	0x08012098
 80036a0:	080120ac 	.word	0x080120ac
 80036a4:	080120c8 	.word	0x080120c8
 80036a8:	080120f0 	.word	0x080120f0
 80036ac:	08012148 	.word	0x08012148
 80036b0:	2000c1b0 	.word	0x2000c1b0
 80036b4:	08002931 	.word	0x08002931
 80036b8:	08011eb0 	.word	0x08011eb0
 80036bc:	08011ec0 	.word	0x08011ec0
 80036c0:	08011ed0 	.word	0x08011ed0
 80036c4:	08011ee0 	.word	0x08011ee0
 80036c8:	08012118 	.word	0x08012118
 80036cc:	08011ef0 	.word	0x08011ef0
 80036d0:	08012170 	.word	0x08012170
 80036d4:	08012198 	.word	0x08012198
 80036d8:	080121d4 	.word	0x080121d4
 80036dc:	080121f8 	.word	0x080121f8
 80036e0:	08012234 	.word	0x08012234
        switch (target.TargetFamily)
 80036e4:	4657      	mov	r7, sl
 80036e6:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
        uint64_t word = 0xFFFFFFFFFFFFFFFF;  // 기본 패딩 값 0xFF로 초기화
 80036ea:	ed9f 8b35 	vldr	d8, [pc, #212]	@ 80037c0 <Target_Program+0x420>
 80036ee:	ed8d 8b02 	vstr	d8, [sp, #8]
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 80036f2:	4626      	mov	r6, r4
 80036f4:	2c08      	cmp	r4, #8
 80036f6:	bf28      	it	cs
 80036f8:	2608      	movcs	r6, #8
        memcpy(&word, data, size_to_program);
 80036fa:	4632      	mov	r2, r6
 80036fc:	4641      	mov	r1, r8
 80036fe:	a802      	add	r0, sp, #8
 8003700:	f00b ffc7 	bl	800f692 <memcpy>
        if (Stm32u0_Flash_Program(address, word) != TARGET_OK)
 8003704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003708:	4638      	mov	r0, r7
 800370a:	f000 ffdb 	bl	80046c4 <Stm32u0_Flash_Program>
 800370e:	4605      	mov	r5, r0
 8003710:	b920      	cbnz	r0, 800371c <Target_Program+0x37c>
        address += chunk_size;
 8003712:	3708      	adds	r7, #8
        data += size_to_program;
 8003714:	44b0      	add	r8, r6
    while (remaining_size > 0)
 8003716:	1ba4      	subs	r4, r4, r6
 8003718:	d1e9      	bne.n	80036ee <Target_Program+0x34e>
 800371a:	e743      	b.n	80035a4 <Target_Program+0x204>
          log_message("Error: Failed to program STM32U0 flash at address 0x%08lX\n", address);
 800371c:	4639      	mov	r1, r7
 800371e:	482a      	ldr	r0, [pc, #168]	@ (80037c8 <Target_Program+0x428>)
 8003720:	f7ff f992 	bl	8002a48 <log_message>
          Stm32u0_Flash_Lock();
 8003724:	f000 ff64 	bl	80045f0 <Stm32u0_Flash_Lock>
									 log_message("Error: STM32U0 programming failed\n");
 8003728:	4828      	ldr	r0, [pc, #160]	@ (80037cc <Target_Program+0x42c>)
 800372a:	f7ff f98d 	bl	8002a48 <log_message>
									 f_close(&file);
 800372e:	a890      	add	r0, sp, #576	@ 0x240
 8003730:	f00a fcdf 	bl	800e0f2 <f_close>
									 return TARGET_ERROR;
 8003734:	e03c      	b.n	80037b0 <Target_Program+0x410>
    uint32_t chunk_size = (target.TargetDevId == 0x480) ? 16 : 32; // 0x480이면 16바이트, 아니면 32바이트
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <Target_Program+0x430>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800373e:	bf14      	ite	ne
 8003740:	2720      	movne	r7, #32
 8003742:	2710      	moveq	r7, #16
    uint32_t address = start_address;
 8003744:	46d0      	mov	r8, sl
 8003746:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
				memset(buffer, 0xFF, sizeof(buffer)); // 모든 요소를 0xFF로 설정
 800374a:	f04f 0b20 	mov.w	fp, #32
 800374e:	465a      	mov	r2, fp
 8003750:	21ff      	movs	r1, #255	@ 0xff
 8003752:	a802      	add	r0, sp, #8
 8003754:	f00b ff1e 	bl	800f594 <memset>
        uint32_t size_to_program = (remaining_size >= chunk_size) ? chunk_size : remaining_size;
 8003758:	463e      	mov	r6, r7
 800375a:	42a7      	cmp	r7, r4
 800375c:	bf28      	it	cs
 800375e:	4626      	movcs	r6, r4
        memcpy(buffer, data, size_to_program);
 8003760:	4632      	mov	r2, r6
 8003762:	4649      	mov	r1, r9
 8003764:	a802      	add	r0, sp, #8
 8003766:	f00b ff94 	bl	800f692 <memcpy>
        if (Stm32h7_Flash_Program(address, (uint32_t)buffer, chunk_size) != TARGET_OK)
 800376a:	463a      	mov	r2, r7
 800376c:	a902      	add	r1, sp, #8
 800376e:	4640      	mov	r0, r8
 8003770:	f000 fe3e 	bl	80043f0 <Stm32h7_Flash_Program>
 8003774:	4605      	mov	r5, r0
 8003776:	b920      	cbnz	r0, 8003782 <Target_Program+0x3e2>
        address += chunk_size;
 8003778:	44b8      	add	r8, r7
        data += size_to_program;
 800377a:	44b1      	add	r9, r6
    while (remaining_size > 0)
 800377c:	1ba4      	subs	r4, r4, r6
 800377e:	d1e6      	bne.n	800374e <Target_Program+0x3ae>
 8003780:	e710      	b.n	80035a4 <Target_Program+0x204>
            log_message("Error: Failed to program STM32H7 flash at address 0x%08lX\n", address);
 8003782:	4641      	mov	r1, r8
 8003784:	4813      	ldr	r0, [pc, #76]	@ (80037d4 <Target_Program+0x434>)
 8003786:	f7ff f95f 	bl	8002a48 <log_message>
                    log_message("Error: STM32H7 programming failed\n");
 800378a:	4813      	ldr	r0, [pc, #76]	@ (80037d8 <Target_Program+0x438>)
 800378c:	f7ff f95c 	bl	8002a48 <log_message>
                    f_close(&file);
 8003790:	a890      	add	r0, sp, #576	@ 0x240
 8003792:	f00a fcae 	bl	800e0f2 <f_close>
                    return TARGET_ERROR;
 8003796:	e00b      	b.n	80037b0 <Target_Program+0x410>
                log_message("Error: Unsupported target family\n");
 8003798:	4810      	ldr	r0, [pc, #64]	@ (80037dc <Target_Program+0x43c>)
 800379a:	f7ff f955 	bl	8002a48 <log_message>
                f_close(&file);
 800379e:	a890      	add	r0, sp, #576	@ 0x240
 80037a0:	f00a fca7 	bl	800e0f2 <f_close>
                return TARGET_ERROR;
 80037a4:	2501      	movs	r5, #1
 80037a6:	e003      	b.n	80037b0 <Target_Program+0x410>
            log_message("No firmware file found\n");
 80037a8:	480d      	ldr	r0, [pc, #52]	@ (80037e0 <Target_Program+0x440>)
 80037aa:	f7ff f94d 	bl	8002a48 <log_message>
            return TARGET_ERROR;
 80037ae:	2501      	movs	r5, #1
}
 80037b0:	4628      	mov	r0, r5
 80037b2:	f20d 5d8c 	addw	sp, sp, #1420	@ 0x58c
 80037b6:	ecbd 8b02 	vpop	{d8}
 80037ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037be:	bf00      	nop
 80037c0:	ffffffff 	.word	0xffffffff
 80037c4:	ffffffff 	.word	0xffffffff
 80037c8:	08012258 	.word	0x08012258
 80037cc:	08012294 	.word	0x08012294
 80037d0:	2000c1b0 	.word	0x2000c1b0
 80037d4:	080122b8 	.word	0x080122b8
 80037d8:	080122f4 	.word	0x080122f4
 80037dc:	08012318 	.word	0x08012318
 80037e0:	08011f2c 	.word	0x08011f2c

080037e4 <Target_MainLoop>:
          break;
  }
}

void Target_MainLoop(void)
{
 80037e4:	b538      	push	{r3, r4, r5, lr}

	int u32_StartTime = 0;
	int u32_ElasedTime = 0;

	/* Check button pushed */
	Button_Update();
 80037e6:	f001 f829 	bl	800483c <Button_Update>
	//FileTransferCheck();

	/* Button programming start */

#ifndef DEBUG_USE_AGING_TEST
	if(Button_WasPressed() == true)
 80037ea:	f001 f85d 	bl	80048a8 <Button_WasPressed>
 80037ee:	2801      	cmp	r0, #1
 80037f0:	d000      	beq.n	80037f4 <Target_MainLoop+0x10>
		u32_ElasedTime = HAL_GetTick() - u32_StartTime;
		log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
		LED_SetState(TARGET_LED_STAT_COMPLETE);
		Buzzer_SetState(BUZZER_PROG_COMPLETE);
  }
}
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
		if(b_USBConnection == false)
 80037f4:	4baa      	ldr	r3, [pc, #680]	@ (8003aa0 <Target_MainLoop+0x2bc>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b353      	cbz	r3, 8003850 <Target_MainLoop+0x6c>
		LED_SetState(TARGET_LED_STAT_PROGRAMMING);
 80037fa:	2001      	movs	r0, #1
 80037fc:	f001 fade 	bl	8004dbc <LED_SetState>
		Buzzer_SetState(BUZZER_PROG_START);
 8003800:	2001      	movs	r0, #1
 8003802:	f001 f877 	bl	80048f4 <Buzzer_SetState>
		u32_StartTime = HAL_GetTick();
 8003806:	f002 f83b 	bl	8005880 <HAL_GetTick>
 800380a:	4605      	mov	r5, r0
		status = Target_Connect();
 800380c:	f7ff f966 	bl	8002adc <Target_Connect>
 8003810:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Connect Error");
 8003812:	49a4      	ldr	r1, [pc, #656]	@ (8003aa4 <Target_MainLoop+0x2c0>)
 8003814:	f7ff fd92 	bl	800333c <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003818:	2c00      	cmp	r4, #0
 800381a:	d1ea      	bne.n	80037f2 <Target_MainLoop+0xe>
    log_message("Target protection check before flash programming.\n");
 800381c:	48a2      	ldr	r0, [pc, #648]	@ (8003aa8 <Target_MainLoop+0x2c4>)
 800381e:	f7ff f913 	bl	8002a48 <log_message>
    switch(target.TargetFamily)
 8003822:	4ba2      	ldr	r3, [pc, #648]	@ (8003aac <Target_MainLoop+0x2c8>)
 8003824:	7a1b      	ldrb	r3, [r3, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	2b0e      	cmp	r3, #14
 800382a:	f200 8110 	bhi.w	8003a4e <Target_MainLoop+0x26a>
 800382e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003832:	00ac      	.short	0x00ac
 8003834:	010e010e 	.word	0x010e010e
 8003838:	0016010e 	.word	0x0016010e
 800383c:	00dd010e 	.word	0x00dd010e
 8003840:	010e010e 	.word	0x010e010e
 8003844:	010e010e 	.word	0x010e010e
 8003848:	010e010e 	.word	0x010e010e
 800384c:	0070010e 	.word	0x0070010e
			USBD_DeInit(&hUsbDeviceFS);
 8003850:	4897      	ldr	r0, [pc, #604]	@ (8003ab0 <Target_MainLoop+0x2cc>)
 8003852:	f008 f933 	bl	800babc <USBD_DeInit>
			b_USBConnection = true;
 8003856:	4b92      	ldr	r3, [pc, #584]	@ (8003aa0 <Target_MainLoop+0x2bc>)
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e7cd      	b.n	80037fa <Target_MainLoop+0x16>
    Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR) & STM32C0_FLASH_OPTR_RDP_Msk;
 800385e:	4895      	ldr	r0, [pc, #596]	@ (8003ab4 <Target_MainLoop+0x2d0>)
 8003860:	f7fe ff70 	bl	8002744 <readMem>
 8003864:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 8003866:	4621      	mov	r1, r4
 8003868:	4893      	ldr	r0, [pc, #588]	@ (8003ab8 <Target_MainLoop+0x2d4>)
 800386a:	f7ff f8ed 	bl	8002a48 <log_message>
    if(Option_Status == STM32C0_OB_RDP_LEVEL_1)
 800386e:	2cbb      	cmp	r4, #187	@ 0xbb
 8003870:	d02e      	beq.n	80038d0 <Target_MainLoop+0xec>
    else if(Option_Status == STM32C0_OB_RDP_LEVEL_0)
 8003872:	2caa      	cmp	r4, #170	@ 0xaa
 8003874:	d149      	bne.n	800390a <Target_MainLoop+0x126>
        log_message("No need to configure RDP Level.\n");
 8003876:	4891      	ldr	r0, [pc, #580]	@ (8003abc <Target_MainLoop+0x2d8>)
 8003878:	f7ff f8e6 	bl	8002a48 <log_message>
		Target_ErrorHandle(status, "Target Protection Unlock Error");
 800387c:	4990      	ldr	r1, [pc, #576]	@ (8003ac0 <Target_MainLoop+0x2dc>)
 800387e:	2000      	movs	r0, #0
 8003880:	f7ff fd5c 	bl	800333c <Target_ErrorHandle>
    uint32_t startAddr = Target_GetFlashStartAddress();
 8003884:	f7ff fb48 	bl	8002f18 <Target_GetFlashStartAddress>
 8003888:	4604      	mov	r4, r0
    if ((readMem(startAddr) == 0xFFFFFFFF) &&
 800388a:	f7fe ff5b 	bl	8002744 <readMem>
 800388e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003892:	f000 80e4 	beq.w	8003a5e <Target_MainLoop+0x27a>
    	log_message("Flash empty check: Not empty.\n");
 8003896:	488b      	ldr	r0, [pc, #556]	@ (8003ac4 <Target_MainLoop+0x2e0>)
 8003898:	f7ff f8d6 	bl	8002a48 <log_message>
    log_message("Target MassErase\n");
 800389c:	488a      	ldr	r0, [pc, #552]	@ (8003ac8 <Target_MainLoop+0x2e4>)
 800389e:	f7ff f8d3 	bl	8002a48 <log_message>
    switch(target.TargetFamily)
 80038a2:	4b82      	ldr	r3, [pc, #520]	@ (8003aac <Target_MainLoop+0x2c8>)
 80038a4:	7a1b      	ldrb	r3, [r3, #8]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	2b0e      	cmp	r3, #14
 80038aa:	f200 8163 	bhi.w	8003b74 <Target_MainLoop+0x390>
 80038ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80038b2:	012f      	.short	0x012f
 80038b4:	01610161 	.word	0x01610161
 80038b8:	01210161 	.word	0x01210161
 80038bc:	01360161 	.word	0x01360161
 80038c0:	01610161 	.word	0x01610161
 80038c4:	01610161 	.word	0x01610161
 80038c8:	01610161 	.word	0x01610161
 80038cc:	013d0161 	.word	0x013d0161
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80038d0:	487e      	ldr	r0, [pc, #504]	@ (8003acc <Target_MainLoop+0x2e8>)
 80038d2:	f7ff f8b9 	bl	8002a48 <log_message>
        Stm32c0_Flash_Unlock();
 80038d6:	f000 f9e9 	bl	8003cac <Stm32c0_Flash_Unlock>
        Stm32c0_Flash_OB_Unlock();
 80038da:	f000 fab1 	bl	8003e40 <Stm32c0_Flash_OB_Unlock>
        Stm32c0_Flash_OB_Program(STM32C0_OB_RDP_LEVEL_0);
 80038de:	20aa      	movs	r0, #170	@ 0xaa
 80038e0:	f000 fafc 	bl	8003edc <Stm32c0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 80038e4:	487a      	ldr	r0, [pc, #488]	@ (8003ad0 <Target_MainLoop+0x2ec>)
 80038e6:	f7ff f8af 	bl	8002a48 <log_message>
        Stm32c0_Flash_OB_Launch();
 80038ea:	f000 fae9 	bl	8003ec0 <Stm32c0_Flash_OB_Launch>
        Target_Connect();
 80038ee:	f7ff f8f5 	bl	8002adc <Target_Connect>
        Stm32c0_Flash_OB_Lock();
 80038f2:	f000 fa91 	bl	8003e18 <Stm32c0_Flash_OB_Lock>
        Stm32c0_Flash_Lock();
 80038f6:	f000 f9f7 	bl	8003ce8 <Stm32c0_Flash_Lock>
        Option_Status = readMem(STM32C0_FLASH_OPTION_OPTR);
 80038fa:	486e      	ldr	r0, [pc, #440]	@ (8003ab4 <Target_MainLoop+0x2d0>)
 80038fc:	f7fe ff22 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32C0_FLASH_OPTR_RDP_Msk);
 8003900:	b2c1      	uxtb	r1, r0
 8003902:	4874      	ldr	r0, [pc, #464]	@ (8003ad4 <Target_MainLoop+0x2f0>)
 8003904:	f7ff f8a0 	bl	8002a48 <log_message>
 8003908:	e7b8      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 800390a:	4873      	ldr	r0, [pc, #460]	@ (8003ad8 <Target_MainLoop+0x2f4>)
 800390c:	f7ff f89c 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003910:	e0a0      	b.n	8003a54 <Target_MainLoop+0x270>
    Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_RDP_Msk;
 8003912:	4872      	ldr	r0, [pc, #456]	@ (8003adc <Target_MainLoop+0x2f8>)
 8003914:	f7fe ff16 	bl	8002744 <readMem>
 8003918:	f400 447f 	and.w	r4, r0, #65280	@ 0xff00
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 800391c:	4621      	mov	r1, r4
 800391e:	4866      	ldr	r0, [pc, #408]	@ (8003ab8 <Target_MainLoop+0x2d4>)
 8003920:	f7ff f892 	bl	8002a48 <log_message>
    if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_1)
 8003924:	f5b4 4f3b 	cmp.w	r4, #47872	@ 0xbb00
 8003928:	d006      	beq.n	8003938 <Target_MainLoop+0x154>
    else if(Option_Status == STM32H7_FLASH_OB_RDP_LEVEL_0)
 800392a:	f5b4 4f2a 	cmp.w	r4, #43520	@ 0xaa00
 800392e:	d128      	bne.n	8003982 <Target_MainLoop+0x19e>
        log_message("No need to configure RDP Level.\n");
 8003930:	4862      	ldr	r0, [pc, #392]	@ (8003abc <Target_MainLoop+0x2d8>)
 8003932:	f7ff f889 	bl	8002a48 <log_message>
 8003936:	e7a1      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8003938:	4864      	ldr	r0, [pc, #400]	@ (8003acc <Target_MainLoop+0x2e8>)
 800393a:	f7ff f885 	bl	8002a48 <log_message>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 800393e:	2001      	movs	r0, #1
 8003940:	f000 fcf0 	bl	8004324 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8003944:	2002      	movs	r0, #2
 8003946:	f000 fced 	bl	8004324 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_OB_Unlock();
 800394a:	f000 fda7 	bl	800449c <Stm32h7_Flash_OB_Unlock>
        Stm32h7_Flash_OB_Program(STM32H7_FLASH_OB_RDP_LEVEL_0);
 800394e:	f44f 402a 	mov.w	r0, #43520	@ 0xaa00
 8003952:	f000 fe0f 	bl	8004574 <Stm32h7_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 8003956:	485e      	ldr	r0, [pc, #376]	@ (8003ad0 <Target_MainLoop+0x2ec>)
 8003958:	f7ff f876 	bl	8002a48 <log_message>
        Stm32h7_Flash_OB_Launch();
 800395c:	f000 fdd2 	bl	8004504 <Stm32h7_Flash_OB_Launch>
        Stm32h7_Flash_OB_Lock();
 8003960:	f000 fdbc 	bl	80044dc <Stm32h7_Flash_OB_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003964:	2001      	movs	r0, #1
 8003966:	f000 fd21 	bl	80043ac <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 800396a:	2002      	movs	r0, #2
 800396c:	f000 fd1e 	bl	80043ac <Stm32h7_Flash_Lock>
        Option_Status = readMem(STM32H7_FLASH_OPTSR_CUR);
 8003970:	485a      	ldr	r0, [pc, #360]	@ (8003adc <Target_MainLoop+0x2f8>)
 8003972:	f7fe fee7 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32H7_FLASH_OPTSR_RDP_Msk);
 8003976:	f400 417f 	and.w	r1, r0, #65280	@ 0xff00
 800397a:	4856      	ldr	r0, [pc, #344]	@ (8003ad4 <Target_MainLoop+0x2f0>)
 800397c:	f7ff f864 	bl	8002a48 <log_message>
 8003980:	e77c      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 8003982:	4855      	ldr	r0, [pc, #340]	@ (8003ad8 <Target_MainLoop+0x2f4>)
 8003984:	f7ff f860 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003988:	e064      	b.n	8003a54 <Target_MainLoop+0x270>
    Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR) & STM32U0_FLASH_OPTR_RDP_Msk;
 800398a:	4855      	ldr	r0, [pc, #340]	@ (8003ae0 <Target_MainLoop+0x2fc>)
 800398c:	f7fe feda 	bl	8002744 <readMem>
 8003990:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 8003992:	4621      	mov	r1, r4
 8003994:	4848      	ldr	r0, [pc, #288]	@ (8003ab8 <Target_MainLoop+0x2d4>)
 8003996:	f7ff f857 	bl	8002a48 <log_message>
    if(Option_Status == STM32U0_OB_RDP_LEVEL_1)
 800399a:	2cbb      	cmp	r4, #187	@ 0xbb
 800399c:	d005      	beq.n	80039aa <Target_MainLoop+0x1c6>
    else if(Option_Status == STM32U0_OB_RDP_LEVEL_0)
 800399e:	2caa      	cmp	r4, #170	@ 0xaa
 80039a0:	d120      	bne.n	80039e4 <Target_MainLoop+0x200>
        log_message("No need to configure RDP Level.\n");
 80039a2:	4846      	ldr	r0, [pc, #280]	@ (8003abc <Target_MainLoop+0x2d8>)
 80039a4:	f7ff f850 	bl	8002a48 <log_message>
 80039a8:	e768      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 80039aa:	4848      	ldr	r0, [pc, #288]	@ (8003acc <Target_MainLoop+0x2e8>)
 80039ac:	f7ff f84c 	bl	8002a48 <log_message>
        Stm32u0_Flash_Unlock();
 80039b0:	f000 fe00 	bl	80045b4 <Stm32u0_Flash_Unlock>
        Stm32u0_Flash_OB_Unlock();
 80039b4:	f000 fec8 	bl	8004748 <Stm32u0_Flash_OB_Unlock>
        Stm32u0_Flash_OB_Program(STM32U0_OB_RDP_LEVEL_0);
 80039b8:	20aa      	movs	r0, #170	@ 0xaa
 80039ba:	f000 ff13 	bl	80047e4 <Stm32u0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 80039be:	4844      	ldr	r0, [pc, #272]	@ (8003ad0 <Target_MainLoop+0x2ec>)
 80039c0:	f7ff f842 	bl	8002a48 <log_message>
        Stm32u0_Flash_OB_Launch();
 80039c4:	f000 ff00 	bl	80047c8 <Stm32u0_Flash_OB_Launch>
        Target_Connect();
 80039c8:	f7ff f888 	bl	8002adc <Target_Connect>
        Stm32u0_Flash_OB_Lock();
 80039cc:	f000 fea8 	bl	8004720 <Stm32u0_Flash_OB_Lock>
        Stm32u0_Flash_Lock();
 80039d0:	f000 fe0e 	bl	80045f0 <Stm32u0_Flash_Lock>
        Option_Status = readMem(STM32U0_FLASH_OPTION_OPTR);
 80039d4:	4842      	ldr	r0, [pc, #264]	@ (8003ae0 <Target_MainLoop+0x2fc>)
 80039d6:	f7fe feb5 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32U0_FLASH_OPTR_RDP_Msk);
 80039da:	b2c1      	uxtb	r1, r0
 80039dc:	483d      	ldr	r0, [pc, #244]	@ (8003ad4 <Target_MainLoop+0x2f0>)
 80039de:	f7ff f833 	bl	8002a48 <log_message>
 80039e2:	e74b      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 80039e4:	483c      	ldr	r0, [pc, #240]	@ (8003ad8 <Target_MainLoop+0x2f4>)
 80039e6:	f7ff f82f 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 80039ea:	e033      	b.n	8003a54 <Target_MainLoop+0x270>
    Option_Status = readMem(STM32G0_FLASH_OPTION_OPTR) & STM32G0_FLASH_OPTR_RDP_Msk;
 80039ec:	4831      	ldr	r0, [pc, #196]	@ (8003ab4 <Target_MainLoop+0x2d0>)
 80039ee:	f7fe fea9 	bl	8002744 <readMem>
 80039f2:	b2c4      	uxtb	r4, r0
    log_message("Current target RDP = 0x%02" PRIX32 "\n", Option_Status);
 80039f4:	4621      	mov	r1, r4
 80039f6:	4830      	ldr	r0, [pc, #192]	@ (8003ab8 <Target_MainLoop+0x2d4>)
 80039f8:	f7ff f826 	bl	8002a48 <log_message>
    if(Option_Status == STM32G0_OB_RDP_LEVEL_1)
 80039fc:	2cbb      	cmp	r4, #187	@ 0xbb
 80039fe:	d005      	beq.n	8003a0c <Target_MainLoop+0x228>
    else if(Option_Status == STM32G0_OB_RDP_LEVEL_0)
 8003a00:	2caa      	cmp	r4, #170	@ 0xaa
 8003a02:	d120      	bne.n	8003a46 <Target_MainLoop+0x262>
        log_message("No need to configure RDP Level.\n");
 8003a04:	482d      	ldr	r0, [pc, #180]	@ (8003abc <Target_MainLoop+0x2d8>)
 8003a06:	f7ff f81f 	bl	8002a48 <log_message>
 8003a0a:	e737      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Configure target RDP Level-1(0xBB) to Level-0(0xAA) for flash programming.\n");
 8003a0c:	482f      	ldr	r0, [pc, #188]	@ (8003acc <Target_MainLoop+0x2e8>)
 8003a0e:	f7ff f81b 	bl	8002a48 <log_message>
        Stm32g0_Flash_Unlock();
 8003a12:	f000 fa8d 	bl	8003f30 <Stm32g0_Flash_Unlock>
        Stm32g0_Flash_OB_Unlock();
 8003a16:	f000 fb61 	bl	80040dc <Stm32g0_Flash_OB_Unlock>
        Stm32g0_Flash_OB_Program(STM32G0_OB_RDP_LEVEL_0);
 8003a1a:	20aa      	movs	r0, #170	@ 0xaa
 8003a1c:	f000 fb8c 	bl	8004138 <Stm32g0_Flash_OB_Program>
        log_message("RDP programming OK.\n");
 8003a20:	482b      	ldr	r0, [pc, #172]	@ (8003ad0 <Target_MainLoop+0x2ec>)
 8003a22:	f7ff f811 	bl	8002a48 <log_message>
        Stm32g0_Flash_OB_Launch();
 8003a26:	f000 fb79 	bl	800411c <Stm32g0_Flash_OB_Launch>
        Target_Connect();
 8003a2a:	f7ff f857 	bl	8002adc <Target_Connect>
        Stm32g0_Flash_OB_Lock();
 8003a2e:	f000 fb3d 	bl	80040ac <Stm32g0_Flash_OB_Lock>
        Stm32g0_Flash_Lock();
 8003a32:	f000 fb25 	bl	8004080 <Stm32g0_Flash_Lock>
        Option_Status = readMem(STM32G0_FLASH_OPTION_OPTR);
 8003a36:	481f      	ldr	r0, [pc, #124]	@ (8003ab4 <Target_MainLoop+0x2d0>)
 8003a38:	f7fe fe84 	bl	8002744 <readMem>
        log_message("Modified RDP = 0x%02" PRIX32 "\n", Option_Status & STM32G0_FLASH_OPTR_RDP_Msk);
 8003a3c:	b2c1      	uxtb	r1, r0
 8003a3e:	4825      	ldr	r0, [pc, #148]	@ (8003ad4 <Target_MainLoop+0x2f0>)
 8003a40:	f7ff f802 	bl	8002a48 <log_message>
 8003a44:	e71a      	b.n	800387c <Target_MainLoop+0x98>
        log_message("Locked chip or Error, it cannot program.\n");
 8003a46:	4824      	ldr	r0, [pc, #144]	@ (8003ad8 <Target_MainLoop+0x2f4>)
 8003a48:	f7fe fffe 	bl	8002a48 <log_message>
        return TARGET_ERROR;
 8003a4c:	e002      	b.n	8003a54 <Target_MainLoop+0x270>
            log_message("Target family not supported for protection unlock.\n");
 8003a4e:	4825      	ldr	r0, [pc, #148]	@ (8003ae4 <Target_MainLoop+0x300>)
 8003a50:	f7fe fffa 	bl	8002a48 <log_message>
		Target_ErrorHandle(status, "Target Protection Unlock Error");
 8003a54:	491a      	ldr	r1, [pc, #104]	@ (8003ac0 <Target_MainLoop+0x2dc>)
 8003a56:	2001      	movs	r0, #1
 8003a58:	f7ff fc70 	bl	800333c <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003a5c:	e6c9      	b.n	80037f2 <Target_MainLoop+0xe>
        (readMem(startAddr + 4) == 0xFFFFFFFF))
 8003a5e:	1d20      	adds	r0, r4, #4
 8003a60:	f7fe fe70 	bl	8002744 <readMem>
    if ((readMem(startAddr) == 0xFFFFFFFF) &&
 8003a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a68:	f47f af15 	bne.w	8003896 <Target_MainLoop+0xb2>
    	log_message("Flash empty check: Empty.\n");
 8003a6c:	481e      	ldr	r0, [pc, #120]	@ (8003ae8 <Target_MainLoop+0x304>)
 8003a6e:	f7fe ffeb 	bl	8002a48 <log_message>
			log_message("Flash is empty. Skipping mass erase.\n");
 8003a72:	481e      	ldr	r0, [pc, #120]	@ (8003aec <Target_MainLoop+0x308>)
 8003a74:	f7fe ffe8 	bl	8002a48 <log_message>
  log_message("Target flash memory global unlock before flash programming.\n");
 8003a78:	481d      	ldr	r0, [pc, #116]	@ (8003af0 <Target_MainLoop+0x30c>)
 8003a7a:	f7fe ffe5 	bl	8002a48 <log_message>
  switch(target.TargetFamily)
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <Target_MainLoop+0x2c8>)
 8003a80:	7a1b      	ldrb	r3, [r3, #8]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	2b0e      	cmp	r3, #14
 8003a86:	f200 80a9 	bhi.w	8003bdc <Target_MainLoop+0x3f8>
 8003a8a:	e8df f003 	tbb	[pc, r3]
 8003a8e:	a792      	.short	0xa792
 8003a90:	a77ba7a7 	.word	0xa77ba7a7
 8003a94:	a7a7a795 	.word	0xa7a7a795
 8003a98:	a7a7a7a7 	.word	0xa7a7a7a7
 8003a9c:	98          	.byte	0x98
 8003a9d:	00          	.byte	0x00
 8003a9e:	bf00      	nop
 8003aa0:	200041a0 	.word	0x200041a0
 8003aa4:	0801233c 	.word	0x0801233c
 8003aa8:	08012354 	.word	0x08012354
 8003aac:	2000c1b0 	.word	0x2000c1b0
 8003ab0:	2000c80c 	.word	0x2000c80c
 8003ab4:	1fff7800 	.word	0x1fff7800
 8003ab8:	08012388 	.word	0x08012388
 8003abc:	0801240c 	.word	0x0801240c
 8003ac0:	080126a0 	.word	0x080126a0
 8003ac4:	080124d4 	.word	0x080124d4
 8003ac8:	080124f4 	.word	0x080124f4
 8003acc:	080123a8 	.word	0x080123a8
 8003ad0:	080123f4 	.word	0x080123f4
 8003ad4:	08011fe0 	.word	0x08011fe0
 8003ad8:	08012430 	.word	0x08012430
 8003adc:	5200201c 	.word	0x5200201c
 8003ae0:	40022020 	.word	0x40022020
 8003ae4:	0801245c 	.word	0x0801245c
 8003ae8:	08012490 	.word	0x08012490
 8003aec:	080124ac 	.word	0x080124ac
 8003af0:	08012564 	.word	0x08012564
    Stm32c0_Flash_Unlock();
 8003af4:	f000 f8da 	bl	8003cac <Stm32c0_Flash_Unlock>
    Stm32c0_Flash_MassErase();
 8003af8:	f000 f946 	bl	8003d88 <Stm32c0_Flash_MassErase>
    Stm32c0_Flash_Lock();
 8003afc:	f000 f8f4 	bl	8003ce8 <Stm32c0_Flash_Lock>
    log_message("Target MassErase Done.\n");
 8003b00:	485e      	ldr	r0, [pc, #376]	@ (8003c7c <Target_MainLoop+0x498>)
 8003b02:	f7fe ffa1 	bl	8002a48 <log_message>
			Target_ErrorHandle(status, "Target MassErase Error");
 8003b06:	495e      	ldr	r1, [pc, #376]	@ (8003c80 <Target_MainLoop+0x49c>)
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7ff fc17 	bl	800333c <Target_ErrorHandle>
			if (status != TARGET_OK) return;
 8003b0e:	e7b3      	b.n	8003a78 <Target_MainLoop+0x294>
    Stm32u0_Flash_Unlock();
 8003b10:	f000 fd50 	bl	80045b4 <Stm32u0_Flash_Unlock>
    Stm32u0_Flash_MassErase();
 8003b14:	f000 fdbc 	bl	8004690 <Stm32u0_Flash_MassErase>
    Stm32u0_Flash_Lock();
 8003b18:	f000 fd6a 	bl	80045f0 <Stm32u0_Flash_Lock>
}
 8003b1c:	e7f0      	b.n	8003b00 <Target_MainLoop+0x31c>
    Stm32g0_Flash_Unlock();
 8003b1e:	f000 fa07 	bl	8003f30 <Stm32g0_Flash_Unlock>
    Stm32g0_Flash_MassErase();
 8003b22:	f000 fa65 	bl	8003ff0 <Stm32g0_Flash_MassErase>
    Stm32g0_Flash_Lock();
 8003b26:	f000 faab 	bl	8004080 <Stm32g0_Flash_Lock>
}
 8003b2a:	e7e9      	b.n	8003b00 <Target_MainLoop+0x31c>
        case TARGET_STM32H7: Target_MassErase_STM32H7(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK); break;
 8003b2c:	4b55      	ldr	r3, [pc, #340]	@ (8003c84 <Target_MainLoop+0x4a0>)
    if (isDualBank)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d114      	bne.n	8003b5e <Target_MainLoop+0x37a>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003b34:	2001      	movs	r0, #1
 8003b36:	f000 fbf5 	bl	8004324 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8003b3a:	2002      	movs	r0, #2
 8003b3c:	f000 fbf2 	bl	8004324 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8003b40:	2101      	movs	r1, #1
 8003b42:	2030      	movs	r0, #48	@ 0x30
 8003b44:	f000 fb72 	bl	800422c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_2);
 8003b48:	2102      	movs	r1, #2
 8003b4a:	2030      	movs	r0, #48	@ 0x30
 8003b4c:	f000 fb6e 	bl	800422c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003b50:	2001      	movs	r0, #1
 8003b52:	f000 fc2b 	bl	80043ac <Stm32h7_Flash_Lock>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8003b56:	2002      	movs	r0, #2
 8003b58:	f000 fc28 	bl	80043ac <Stm32h7_Flash_Lock>
 8003b5c:	e7d0      	b.n	8003b00 <Target_MainLoop+0x31c>
        Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 fbe0 	bl	8004324 <Stm32h7_Flash_Unlock>
        Stm32h7_Flash_MassErase(STM32H7_FLASH_VOLTAGE_RANGE_4, STM32H7_FLASH_BANK_1);
 8003b64:	2101      	movs	r1, #1
 8003b66:	2030      	movs	r0, #48	@ 0x30
 8003b68:	f000 fb60 	bl	800422c <Stm32h7_Flash_MassErase>
        Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 fc1d 	bl	80043ac <Stm32h7_Flash_Lock>
 8003b72:	e7c5      	b.n	8003b00 <Target_MainLoop+0x31c>
            log_message("Unsupported Target Family for Mass Erase\n");
 8003b74:	4844      	ldr	r0, [pc, #272]	@ (8003c88 <Target_MainLoop+0x4a4>)
 8003b76:	f7fe ff67 	bl	8002a48 <log_message>
			Target_ErrorHandle(status, "Target MassErase Error");
 8003b7a:	4941      	ldr	r1, [pc, #260]	@ (8003c80 <Target_MainLoop+0x49c>)
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff fbdd 	bl	800333c <Target_ErrorHandle>
			if (status != TARGET_OK) return;
 8003b82:	e636      	b.n	80037f2 <Target_MainLoop+0xe>
      case TARGET_STM32C0:	Stm32c0_Flash_Unlock();	break;
 8003b84:	f000 f892 	bl	8003cac <Stm32c0_Flash_Unlock>
		status = Target_Program();
 8003b88:	f7ff fc0a 	bl	80033a0 <Target_Program>
 8003b8c:	4604      	mov	r4, r0
  log_message("Target flash memory global lock after flash programming.\n");
 8003b8e:	483f      	ldr	r0, [pc, #252]	@ (8003c8c <Target_MainLoop+0x4a8>)
 8003b90:	f7fe ff5a 	bl	8002a48 <log_message>
  switch(target.TargetFamily)
 8003b94:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <Target_MainLoop+0x4a0>)
 8003b96:	7a1b      	ldrb	r3, [r3, #8]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b0e      	cmp	r3, #14
 8003b9c:	d869      	bhi.n	8003c72 <Target_MainLoop+0x48e>
 8003b9e:	e8df f003 	tbb	[pc, r3]
 8003ba2:	6856      	.short	0x6856
 8003ba4:	68216868 	.word	0x68216868
 8003ba8:	68686853 	.word	0x68686853
 8003bac:	68686868 	.word	0x68686868
 8003bb0:	59          	.byte	0x59
 8003bb1:	00          	.byte	0x00
      case TARGET_STM32U0:	Stm32u0_Flash_Unlock();	break;
 8003bb2:	f000 fcff 	bl	80045b4 <Stm32u0_Flash_Unlock>
 8003bb6:	e7e7      	b.n	8003b88 <Target_MainLoop+0x3a4>
      case TARGET_STM32G0:	Stm32g0_Flash_Unlock();	break;
 8003bb8:	f000 f9ba 	bl	8003f30 <Stm32g0_Flash_Unlock>
 8003bbc:	e7e4      	b.n	8003b88 <Target_MainLoop+0x3a4>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8003bbe:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <Target_MainLoop+0x4a0>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d003      	beq.n	8003bce <Target_MainLoop+0x3ea>
				Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f000 fbac 	bl	8004324 <Stm32h7_Flash_Unlock>
 8003bcc:	e7dc      	b.n	8003b88 <Target_MainLoop+0x3a4>
      			Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 fba8 	bl	8004324 <Stm32h7_Flash_Unlock>
				Stm32h7_Flash_Unlock(STM32H7_FLASH_BANK_2);
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f000 fba5 	bl	8004324 <Stm32h7_Flash_Unlock>
 8003bda:	e7d5      	b.n	8003b88 <Target_MainLoop+0x3a4>
          log_message("Not implemented.\n");
 8003bdc:	482c      	ldr	r0, [pc, #176]	@ (8003c90 <Target_MainLoop+0x4ac>)
 8003bde:	f7fe ff33 	bl	8002a48 <log_message>
          break;
 8003be2:	e7d1      	b.n	8003b88 <Target_MainLoop+0x3a4>
      case TARGET_STM32C0: Stm32c0_Flash_Lock(); break;
 8003be4:	f000 f880 	bl	8003ce8 <Stm32c0_Flash_Lock>
		Target_ErrorHandle(status, "Target Program Error");
 8003be8:	492a      	ldr	r1, [pc, #168]	@ (8003c94 <Target_MainLoop+0x4b0>)
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff fba6 	bl	800333c <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	f47f adfe 	bne.w	80037f2 <Target_MainLoop+0xe>
		status = Target_Verify();
 8003bf6:	f7ff f9f9 	bl	8002fec <Target_Verify>
 8003bfa:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Verify Error");
 8003bfc:	4926      	ldr	r1, [pc, #152]	@ (8003c98 <Target_MainLoop+0x4b4>)
 8003bfe:	f7ff fb9d 	bl	800333c <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	f47f adf5 	bne.w	80037f2 <Target_MainLoop+0xe>
		status = Target_Protection_Lock();
 8003c08:	f7ff fae8 	bl	80031dc <Target_Protection_Lock>
 8003c0c:	4604      	mov	r4, r0
		Target_ErrorHandle(status, "Target Protection Lock Error");
 8003c0e:	4923      	ldr	r1, [pc, #140]	@ (8003c9c <Target_MainLoop+0x4b8>)
 8003c10:	f7ff fb94 	bl	800333c <Target_ErrorHandle>
		if(status != TARGET_OK) return;
 8003c14:	2c00      	cmp	r4, #0
 8003c16:	f47f adec 	bne.w	80037f2 <Target_MainLoop+0xe>
		log_message("Target program completed\n");
 8003c1a:	4821      	ldr	r0, [pc, #132]	@ (8003ca0 <Target_MainLoop+0x4bc>)
 8003c1c:	f7fe ff14 	bl	8002a48 <log_message>
		log_message("Target Application Start!\n");
 8003c20:	4820      	ldr	r0, [pc, #128]	@ (8003ca4 <Target_MainLoop+0x4c0>)
 8003c22:	f7fe ff11 	bl	8002a48 <log_message>
		resetTarget();
 8003c26:	f7fe fdab 	bl	8002780 <resetTarget>
		hardResetTarget();
 8003c2a:	f7fe fd77 	bl	800271c <hardResetTarget>
		u32_ElasedTime = HAL_GetTick() - u32_StartTime;
 8003c2e:	f001 fe27 	bl	8005880 <HAL_GetTick>
		log_message("Total Elapsed Programming Time: %d ms\n\n", u32_ElasedTime);
 8003c32:	1b41      	subs	r1, r0, r5
 8003c34:	481c      	ldr	r0, [pc, #112]	@ (8003ca8 <Target_MainLoop+0x4c4>)
 8003c36:	f7fe ff07 	bl	8002a48 <log_message>
		LED_SetState(TARGET_LED_STAT_COMPLETE);
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f001 f8be 	bl	8004dbc <LED_SetState>
		Buzzer_SetState(BUZZER_PROG_COMPLETE);
 8003c40:	2002      	movs	r0, #2
 8003c42:	f000 fe57 	bl	80048f4 <Buzzer_SetState>
 8003c46:	e5d4      	b.n	80037f2 <Target_MainLoop+0xe>
      case TARGET_STM32G0: Stm32g0_Flash_Lock(); break;
 8003c48:	f000 fa1a 	bl	8004080 <Stm32g0_Flash_Lock>
 8003c4c:	e7cc      	b.n	8003be8 <Target_MainLoop+0x404>
      case TARGET_STM32U0: Stm32u0_Flash_Lock(); break;
 8003c4e:	f000 fccf 	bl	80045f0 <Stm32u0_Flash_Lock>
 8003c52:	e7c9      	b.n	8003be8 <Target_MainLoop+0x404>
      		if(target.TargetIsDualBank == STM32H7_FLASH_SUPPORT_DUALBANK)
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <Target_MainLoop+0x4a0>)
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d003      	beq.n	8003c64 <Target_MainLoop+0x480>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f000 fba5 	bl	80043ac <Stm32h7_Flash_Lock>
 8003c62:	e7c1      	b.n	8003be8 <Target_MainLoop+0x404>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_1);
 8003c64:	2001      	movs	r0, #1
 8003c66:	f000 fba1 	bl	80043ac <Stm32h7_Flash_Lock>
  					Stm32h7_Flash_Lock(STM32H7_FLASH_BANK_2);
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f000 fb9e 	bl	80043ac <Stm32h7_Flash_Lock>
 8003c70:	e7ba      	b.n	8003be8 <Target_MainLoop+0x404>
          log_message("Not implemented.\n");
 8003c72:	4807      	ldr	r0, [pc, #28]	@ (8003c90 <Target_MainLoop+0x4ac>)
 8003c74:	f7fe fee8 	bl	8002a48 <log_message>
          break;
 8003c78:	e7b6      	b.n	8003be8 <Target_MainLoop+0x404>
 8003c7a:	bf00      	nop
 8003c7c:	0801254c 	.word	0x0801254c
 8003c80:	08012534 	.word	0x08012534
 8003c84:	2000c1b0 	.word	0x2000c1b0
 8003c88:	08012508 	.word	0x08012508
 8003c8c:	080125b8 	.word	0x080125b8
 8003c90:	080125a4 	.word	0x080125a4
 8003c94:	080125f4 	.word	0x080125f4
 8003c98:	0801260c 	.word	0x0801260c
 8003c9c:	08012620 	.word	0x08012620
 8003ca0:	08012640 	.word	0x08012640
 8003ca4:	0801265c 	.word	0x0801265c
 8003ca8:	08012678 	.word	0x08012678

08003cac <Stm32c0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Unlock(void)
{
 8003cac:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8003cae:	480a      	ldr	r0, [pc, #40]	@ (8003cd8 <Stm32c0_Flash_Unlock+0x2c>)
 8003cb0:	f7fe fd48 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	db01      	blt.n	8003cbc <Stm32c0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8003cb8:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8003cba:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY1);
 8003cbc:	4c07      	ldr	r4, [pc, #28]	@ (8003cdc <Stm32c0_Flash_Unlock+0x30>)
 8003cbe:	4908      	ldr	r1, [pc, #32]	@ (8003ce0 <Stm32c0_Flash_Unlock+0x34>)
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7fe fd51 	bl	8002768 <writeMem>
		writeMem(STM32C0_FLASH_KEYR, STM32C0_FLASH_KEY2);
 8003cc6:	4907      	ldr	r1, [pc, #28]	@ (8003ce4 <Stm32c0_Flash_Unlock+0x38>)
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7fe fd4d 	bl	8002768 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_LOCK;
 8003cce:	4802      	ldr	r0, [pc, #8]	@ (8003cd8 <Stm32c0_Flash_Unlock+0x2c>)
 8003cd0:	f7fe fd38 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 8003cd4:	0fc0      	lsrs	r0, r0, #31
 8003cd6:	e7f0      	b.n	8003cba <Stm32c0_Flash_Unlock+0xe>
 8003cd8:	40022014 	.word	0x40022014
 8003cdc:	40022008 	.word	0x40022008
 8003ce0:	45670123 	.word	0x45670123
 8003ce4:	cdef89ab 	.word	0xcdef89ab

08003ce8 <Stm32c0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32c0_Flash_Lock(void)
{
 8003ce8:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8003cea:	4c07      	ldr	r4, [pc, #28]	@ (8003d08 <Stm32c0_Flash_Lock+0x20>)
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7fe fd29 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_LOCK|tmp);
 8003cf2:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f7fe fd36 	bl	8002768 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_LOCK;
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fe fd21 	bl	8002744 <readMem>
	if(tmp != 0x00U)
  {
    status = TARGET_OK;
  }
	return status;
}
 8003d02:	43c0      	mvns	r0, r0
 8003d04:	0fc0      	lsrs	r0, r0, #31
 8003d06:	bd10      	pop	{r4, pc}
 8003d08:	40022014 	.word	0x40022014

08003d0c <Stm32c0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32c0_Flash_WaitOperation(uint32_t Timeout)
{
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4606      	mov	r6, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003d10:	f001 fdb6 	bl	8005880 <HAL_GetTick>
 8003d14:	1984      	adds	r4, r0, r6

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003d16:	481b      	ldr	r0, [pc, #108]	@ (8003d84 <Stm32c0_Flash_WaitOperation+0x78>)
 8003d18:	f7fe fd14 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003d1c:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8003d20:	d00a      	beq.n	8003d38 <Stm32c0_Flash_WaitOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003d22:	4d18      	ldr	r5, [pc, #96]	@ (8003d84 <Stm32c0_Flash_WaitOperation+0x78>)
    if (HAL_GetTick() >= timeout)
 8003d24:	f001 fdac 	bl	8005880 <HAL_GetTick>
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d224      	bcs.n	8003d76 <Stm32c0_Flash_WaitOperation+0x6a>
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_BSY;
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	f7fe fd09 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003d32:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8003d36:	d1f5      	bne.n	8003d24 <Stm32c0_Flash_WaitOperation+0x18>
  }

  /* check flash errors */
  error = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_SR_ERROR;
 8003d38:	4d12      	ldr	r5, [pc, #72]	@ (8003d84 <Stm32c0_Flash_WaitOperation+0x78>)
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7fe fd02 	bl	8002744 <readMem>

  /* clear error flags */
  writeMem(STM32C0_FLASH_SR, error);
 8003d40:	f24c 31fa 	movw	r1, #50170	@ 0xc3fa
 8003d44:	4001      	ands	r1, r0
 8003d46:	4628      	mov	r0, r5
 8003d48:	f7fe fd0e 	bl	8002768 <writeMem>

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8003d4c:	f001 fd98 	bl	8005880 <HAL_GetTick>
 8003d50:	4406      	add	r6, r0
  tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fe fcf6 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003d58:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8003d5c:	d00d      	beq.n	8003d7a <Stm32c0_Flash_WaitOperation+0x6e>
  {
    if (HAL_GetTick() >= timeout)
 8003d5e:	f001 fd8f 	bl	8005880 <HAL_GetTick>
 8003d62:	42b0      	cmp	r0, r6
 8003d64:	d20b      	bcs.n	8003d7e <Stm32c0_Flash_WaitOperation+0x72>
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32C0_FLASH_SR) & STM32C0_FLASH_FLAG_CFGBSY;
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fe fcec 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003d6c:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8003d70:	d1f5      	bne.n	8003d5e <Stm32c0_Flash_WaitOperation+0x52>
  }

  return TARGET_OK;
 8003d72:	2000      	movs	r0, #0
 8003d74:	e000      	b.n	8003d78 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8003d76:	2001      	movs	r0, #1
}
 8003d78:	bd70      	pop	{r4, r5, r6, pc}
  return TARGET_OK;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e7fc      	b.n	8003d78 <Stm32c0_Flash_WaitOperation+0x6c>
      return TARGET_ERROR;
 8003d7e:	2001      	movs	r0, #1
 8003d80:	e7fa      	b.n	8003d78 <Stm32c0_Flash_WaitOperation+0x6c>
 8003d82:	bf00      	nop
 8003d84:	40022010 	.word	0x40022010

08003d88 <Stm32c0_Flash_MassErase>:
{
 8003d88:	b510      	push	{r4, lr}
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003d8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d8e:	f7ff ffbd 	bl	8003d0c <Stm32c0_Flash_WaitOperation>
	if(status == TARGET_OK)
 8003d92:	b100      	cbz	r0, 8003d96 <Stm32c0_Flash_MassErase+0xe>
}
 8003d94:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8003d96:	4c08      	ldr	r4, [pc, #32]	@ (8003db8 <Stm32c0_Flash_MassErase+0x30>)
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7fe fcd3 	bl	8002744 <readMem>
		writeMem(STM32C0_FLASH_CR, (STM32C0_FLASH_CR_STRT | STM32C0_FLASH_CR_MER1)|tmp);
 8003d9e:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 8003da2:	f041 0104 	orr.w	r1, r1, #4
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7fe fcde 	bl	8002768 <writeMem>
		status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003db0:	f7ff ffac 	bl	8003d0c <Stm32c0_Flash_WaitOperation>
 8003db4:	e7ee      	b.n	8003d94 <Stm32c0_Flash_MassErase+0xc>
 8003db6:	bf00      	nop
 8003db8:	40022014 	.word	0x40022014

08003dbc <Stm32c0_Flash_Program>:
{
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	461d      	mov	r5, r3
	  status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dc8:	f7ff ffa0 	bl	8003d0c <Stm32c0_Flash_WaitOperation>
	  if (status == TARGET_OK)
 8003dcc:	b178      	cbz	r0, 8003dee <Stm32c0_Flash_Program+0x32>
  	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003dce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dd2:	f7ff ff9b 	bl	8003d0c <Stm32c0_Flash_WaitOperation>
 8003dd6:	4604      	mov	r4, r0
  	tmp = readMem(STM32C0_FLASH_CR);
 8003dd8:	4d0e      	ldr	r5, [pc, #56]	@ (8003e14 <Stm32c0_Flash_Program+0x58>)
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f7fe fcb2 	bl	8002744 <readMem>
  	writeMem(STM32C0_FLASH_CR, tmp & (~STM32C0_FLASH_CR_PG));
 8003de0:	f020 0101 	bic.w	r1, r0, #1
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7fe fcbf 	bl	8002768 <writeMem>
}
 8003dea:	4620      	mov	r0, r4
 8003dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  	tmp = readMem(STM32C0_FLASH_CR);
 8003dee:	4f09      	ldr	r7, [pc, #36]	@ (8003e14 <Stm32c0_Flash_Program+0x58>)
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7fe fca7 	bl	8002744 <readMem>
	  	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_PG|tmp);
 8003df6:	f040 0101 	orr.w	r1, r0, #1
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	f7fe fcb4 	bl	8002768 <writeMem>
	  	writeMem(Address, 	(uint32_t)Data);
 8003e00:	4631      	mov	r1, r6
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7fe fcb0 	bl	8002768 <writeMem>
	  	writeMem(Address+4, (uint32_t)(Data>>32));
 8003e08:	4629      	mov	r1, r5
 8003e0a:	1d20      	adds	r0, r4, #4
 8003e0c:	f7fe fcac 	bl	8002768 <writeMem>
 8003e10:	e7dd      	b.n	8003dce <Stm32c0_Flash_Program+0x12>
 8003e12:	bf00      	nop
 8003e14:	40022014 	.word	0x40022014

08003e18 <Stm32c0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Lock(void)
{
 8003e18:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32C0_FLASH_CR);
 8003e1a:	4c08      	ldr	r4, [pc, #32]	@ (8003e3c <Stm32c0_Flash_OB_Lock+0x24>)
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7fe fc91 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTLOCK|tmp);
 8003e22:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7fe fc9e 	bl	8002768 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32C0_FLASH_CR) & STM32C0_FLASH_CR_OPTLOCK;
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7fe fc89 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003e32:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 8003e36:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	40022014 	.word	0x40022014

08003e40 <Stm32c0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Unlock(void)
{
 8003e40:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8003e42:	480b      	ldr	r0, [pc, #44]	@ (8003e70 <Stm32c0_Flash_OB_Unlock+0x30>)
 8003e44:	f7fe fc7e 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003e48:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8003e4c:	d101      	bne.n	8003e52 <Stm32c0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 8003e4e:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 8003e50:	bd10      	pop	{r4, pc}
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY1);
 8003e52:	4c08      	ldr	r4, [pc, #32]	@ (8003e74 <Stm32c0_Flash_OB_Unlock+0x34>)
 8003e54:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <Stm32c0_Flash_OB_Unlock+0x38>)
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7fe fc86 	bl	8002768 <writeMem>
		writeMem(STM32C0_FLASH_OPTKEYR, STM32C0_FLASH_OPTKEY2);
 8003e5c:	4907      	ldr	r1, [pc, #28]	@ (8003e7c <Stm32c0_Flash_OB_Unlock+0x3c>)
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7fe fc82 	bl	8002768 <writeMem>
		tmp = readMem(STM32C0_FLASH_CR)& STM32C0_FLASH_CR_OPTLOCK;
 8003e64:	4802      	ldr	r0, [pc, #8]	@ (8003e70 <Stm32c0_Flash_OB_Unlock+0x30>)
 8003e66:	f7fe fc6d 	bl	8002744 <readMem>
		if(tmp == 0x00U)
 8003e6a:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003e6e:	e7ef      	b.n	8003e50 <Stm32c0_Flash_OB_Unlock+0x10>
 8003e70:	40022014 	.word	0x40022014
 8003e74:	4002200c 	.word	0x4002200c
 8003e78:	08192a3b 	.word	0x08192a3b
 8003e7c:	4c5d6e7f 	.word	0x4c5d6e7f

08003e80 <Stm32c0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32c0_Flash_OB_GetUser(void)
{
 8003e80:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32C0_FLASH_OPTR);
 8003e82:	4803      	ldr	r0, [pc, #12]	@ (8003e90 <Stm32c0_Flash_OB_GetUser+0x10>)
 8003e84:	f7fe fc5e 	bl	8002744 <readMem>
 8003e88:	4603      	mov	r3, r0
  uint32_t user = ((tmp & ~STM32C0_FLASH_OPTR_RDP) & STM32C0_OB_USER_ALL);
  return user;
}
 8003e8a:	4802      	ldr	r0, [pc, #8]	@ (8003e94 <Stm32c0_Flash_OB_GetUser+0x14>)
 8003e8c:	4018      	ands	r0, r3
 8003e8e:	bd08      	pop	{r3, pc}
 8003e90:	40022020 	.word	0x40022020
 8003e94:	3fefff00 	.word	0x3fefff00

08003e98 <Stm32c0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32c0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	4605      	mov	r5, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

  /* Configure the RDP level in the option bytes register */
  optr = readMem(STM32C0_FLASH_OPTR);
 8003ea0:	4f06      	ldr	r7, [pc, #24]	@ (8003ebc <Stm32c0_Flash_OB_OptrConfig+0x24>)
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f7fe fc4e 	bl	8002744 <readMem>
  optr &= ~(UserType | STM32C0_FLASH_OPTR_RDP);
 8003ea8:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 8003eac:	ea20 0105 	bic.w	r1, r0, r5
  tmp = optr | UserConfig | RDPLevel;
 8003eb0:	4334      	orrs	r4, r6
  writeMem(STM32C0_FLASH_OPTR, tmp);
 8003eb2:	4321      	orrs	r1, r4
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7fe fc57 	bl	8002768 <writeMem>
}
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	40022020 	.word	0x40022020

08003ec0 <Stm32c0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32c0_Flash_OB_Launch(void)
{
 8003ec0:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32C0_FLASH_CR);
 8003ec2:	4c05      	ldr	r4, [pc, #20]	@ (8003ed8 <Stm32c0_Flash_OB_Launch+0x18>)
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7fe fc3d 	bl	8002744 <readMem>
	writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OBL_LAUNCH|tmp);
 8003eca:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7fe fc4a 	bl	8002768 <writeMem>
}
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40022014 	.word	0x40022014

08003edc <Stm32c0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32c0_Flash_OB_Program(uint32_t RDPLevel)
{
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32c0_Flash_OB_GetUser();
 8003ee0:	f7ff ffce 	bl	8003e80 <Stm32c0_Flash_OB_GetUser>
 8003ee4:	4601      	mov	r1, r0
	Stm32c0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	f7ff ffd6 	bl	8003e98 <Stm32c0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003eec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ef0:	f7ff ff0c 	bl	8003d0c <Stm32c0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	b108      	cbz	r0, 8003efc <Stm32c0_Flash_OB_Program+0x20>
    tmp = readMem(STM32C0_FLASH_CR);
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8003ef8:	4620      	mov	r0, r4
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32C0_FLASH_CR);
 8003efc:	4d0b      	ldr	r5, [pc, #44]	@ (8003f2c <Stm32c0_Flash_OB_Program+0x50>)
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fe fc20 	bl	8002744 <readMem>
		writeMem(STM32C0_FLASH_CR, STM32C0_FLASH_CR_OPTSTRT|tmp);
 8003f04:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7fe fc2d 	bl	8002768 <writeMem>
    status = Stm32c0_Flash_WaitOperation(STM32C0_FLASH_TIMEOUT_VALUE);
 8003f0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f12:	f7ff fefb 	bl	8003d0c <Stm32c0_Flash_WaitOperation>
 8003f16:	4604      	mov	r4, r0
    tmp = readMem(STM32C0_FLASH_CR);
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f7fe fc13 	bl	8002744 <readMem>
    writeMem(STM32C0_FLASH_CR, ~STM32C0_FLASH_CR_OPTSTRT&tmp);
 8003f1e:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8003f22:	4628      	mov	r0, r5
 8003f24:	f7fe fc20 	bl	8002768 <writeMem>
 8003f28:	e7e6      	b.n	8003ef8 <Stm32c0_Flash_OB_Program+0x1c>
 8003f2a:	bf00      	nop
 8003f2c:	40022014 	.word	0x40022014

08003f30 <Stm32g0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32g0_Flash_Unlock(void)
{
 8003f30:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32G0_FLASH_CR)& STM32G0_FLASH_CR_LOCK;
 8003f32:	480a      	ldr	r0, [pc, #40]	@ (8003f5c <Stm32g0_Flash_Unlock+0x2c>)
 8003f34:	f7fe fc06 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	db01      	blt.n	8003f40 <Stm32g0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 8003f3c:	2000      	movs	r0, #0
    {
      status = TARGET_ERROR;
    }
	}
	return status;
}
 8003f3e:	bd10      	pop	{r4, pc}
		writeMem(STM32G0_FLASH_KEYR, STM32G0_FLASH_KEY1);
 8003f40:	4c07      	ldr	r4, [pc, #28]	@ (8003f60 <Stm32g0_Flash_Unlock+0x30>)
 8003f42:	4908      	ldr	r1, [pc, #32]	@ (8003f64 <Stm32g0_Flash_Unlock+0x34>)
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7fe fc0f 	bl	8002768 <writeMem>
		writeMem(STM32G0_FLASH_KEYR, STM32G0_FLASH_KEY2);
 8003f4a:	4907      	ldr	r1, [pc, #28]	@ (8003f68 <Stm32g0_Flash_Unlock+0x38>)
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7fe fc0b 	bl	8002768 <writeMem>
		tmp = readMem(STM32G0_FLASH_CR)& STM32G0_FLASH_CR_LOCK;
 8003f52:	4802      	ldr	r0, [pc, #8]	@ (8003f5c <Stm32g0_Flash_Unlock+0x2c>)
 8003f54:	f7fe fbf6 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 8003f58:	0fc0      	lsrs	r0, r0, #31
 8003f5a:	e7f0      	b.n	8003f3e <Stm32g0_Flash_Unlock+0xe>
 8003f5c:	40022014 	.word	0x40022014
 8003f60:	40022008 	.word	0x40022008
 8003f64:	45670123 	.word	0x45670123
 8003f68:	cdef89ab 	.word	0xcdef89ab

08003f6c <Stm32g0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32g0_Flash_WaitOperation(uint32_t Timeout)
{
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	4607      	mov	r7, r0
  uint32_t tmp = 0;

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003f70:	f001 fc86 	bl	8005880 <HAL_GetTick>
 8003f74:	19c4      	adds	r4, r0, r7

  /* Wait if any operation is ongoing */
  tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_BSY;
 8003f76:	481b      	ldr	r0, [pc, #108]	@ (8003fe4 <Stm32g0_Flash_WaitOperation+0x78>)
 8003f78:	f7fe fbe4 	bl	8002744 <readMem>
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <Stm32g0_Flash_WaitOperation+0x7c>)
 8003f7e:	4003      	ands	r3, r0
  while(tmp != 0x00U)
 8003f80:	b153      	cbz	r3, 8003f98 <Stm32g0_Flash_WaitOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_BSY;
 8003f82:	4e18      	ldr	r6, [pc, #96]	@ (8003fe4 <Stm32g0_Flash_WaitOperation+0x78>)
 8003f84:	4d18      	ldr	r5, [pc, #96]	@ (8003fe8 <Stm32g0_Flash_WaitOperation+0x7c>)
    if (HAL_GetTick() >= timeout)
 8003f86:	f001 fc7b 	bl	8005880 <HAL_GetTick>
 8003f8a:	42a0      	cmp	r0, r4
 8003f8c:	d224      	bcs.n	8003fd8 <Stm32g0_Flash_WaitOperation+0x6c>
    tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_BSY;
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f7fe fbd8 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003f94:	4228      	tst	r0, r5
 8003f96:	d1f6      	bne.n	8003f86 <Stm32g0_Flash_WaitOperation+0x1a>
  }

  /* check flash errors */
  error = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_SR_ERRORS;
 8003f98:	4d12      	ldr	r5, [pc, #72]	@ (8003fe4 <Stm32g0_Flash_WaitOperation+0x78>)
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7fe fbd2 	bl	8002744 <readMem>

  /* clear error flags */
  writeMem(STM32G0_FLASH_SR, error);
 8003fa0:	f248 31fa 	movw	r1, #33786	@ 0x83fa
 8003fa4:	4001      	ands	r1, r0
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f7fe fbde 	bl	8002768 <writeMem>

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8003fac:	f001 fc68 	bl	8005880 <HAL_GetTick>
 8003fb0:	4407      	add	r7, r0
  tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_CFGBSY;
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f7fe fbc6 	bl	8002744 <readMem>
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <Stm32g0_Flash_WaitOperation+0x80>)
 8003fba:	4003      	ands	r3, r0
  while(tmp != 0x00U)
 8003fbc:	b173      	cbz	r3, 8003fdc <Stm32g0_Flash_WaitOperation+0x70>
  {
    if (HAL_GetTick() >= timeout)
    {
      return TARGET_ERROR;
    }
    tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_CFGBSY;
 8003fbe:	462e      	mov	r6, r5
 8003fc0:	4d0a      	ldr	r5, [pc, #40]	@ (8003fec <Stm32g0_Flash_WaitOperation+0x80>)
    if (HAL_GetTick() >= timeout)
 8003fc2:	f001 fc5d 	bl	8005880 <HAL_GetTick>
 8003fc6:	42b8      	cmp	r0, r7
 8003fc8:	d20a      	bcs.n	8003fe0 <Stm32g0_Flash_WaitOperation+0x74>
    tmp = readMem(STM32G0_FLASH_SR) & STM32G0_FLASH_FLAG_CFGBSY;
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7fe fbba 	bl	8002744 <readMem>
  while(tmp != 0x00U)
 8003fd0:	4228      	tst	r0, r5
 8003fd2:	d1f6      	bne.n	8003fc2 <Stm32g0_Flash_WaitOperation+0x56>
  }

  return TARGET_OK;
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e000      	b.n	8003fda <Stm32g0_Flash_WaitOperation+0x6e>
      return TARGET_ERROR;
 8003fd8:	2001      	movs	r0, #1
}
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return TARGET_OK;
 8003fdc:	2000      	movs	r0, #0
 8003fde:	e7fc      	b.n	8003fda <Stm32g0_Flash_WaitOperation+0x6e>
      return TARGET_ERROR;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	e7fa      	b.n	8003fda <Stm32g0_Flash_WaitOperation+0x6e>
 8003fe4:	40022010 	.word	0x40022010
 8003fe8:	00010010 	.word	0x00010010
 8003fec:	00010012 	.word	0x00010012

08003ff0 <Stm32g0_Flash_MassErase>:
{
 8003ff0:	b510      	push	{r4, lr}
	status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8003ff2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ff6:	f7ff ffb9 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
	if(status == TARGET_OK)
 8003ffa:	b100      	cbz	r0, 8003ffe <Stm32g0_Flash_MassErase+0xe>
}
 8003ffc:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32G0_FLASH_CR);
 8003ffe:	4c08      	ldr	r4, [pc, #32]	@ (8004020 <Stm32g0_Flash_MassErase+0x30>)
 8004000:	4620      	mov	r0, r4
 8004002:	f7fe fb9f 	bl	8002744 <readMem>
		writeMem(STM32G0_FLASH_CR, (STM32G0_FLASH_CR_STRT | STM32G0_FLASH_CR_MER1)|tmp);
 8004006:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 800400a:	f041 0104 	orr.w	r1, r1, #4
 800400e:	4620      	mov	r0, r4
 8004010:	f7fe fbaa 	bl	8002768 <writeMem>
		status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8004014:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004018:	f7ff ffa8 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
 800401c:	e7ee      	b.n	8003ffc <Stm32g0_Flash_MassErase+0xc>
 800401e:	bf00      	nop
 8004020:	40022014 	.word	0x40022014

08004024 <Stm32g0_Flash_Program>:
{
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	4616      	mov	r6, r2
 800402a:	461d      	mov	r5, r3
	status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 800402c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004030:	f7ff ff9c 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
	if (status == TARGET_OK)
 8004034:	b178      	cbz	r0, 8004056 <Stm32g0_Flash_Program+0x32>
  	status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8004036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800403a:	f7ff ff97 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
 800403e:	4604      	mov	r4, r0
  	tmp = readMem(STM32G0_FLASH_CR);
 8004040:	4d0e      	ldr	r5, [pc, #56]	@ (800407c <Stm32g0_Flash_Program+0x58>)
 8004042:	4628      	mov	r0, r5
 8004044:	f7fe fb7e 	bl	8002744 <readMem>
  	writeMem(STM32G0_FLASH_CR, tmp & (~STM32G0_FLASH_CR_PG));
 8004048:	f020 0101 	bic.w	r1, r0, #1
 800404c:	4628      	mov	r0, r5
 800404e:	f7fe fb8b 	bl	8002768 <writeMem>
}
 8004052:	4620      	mov	r0, r4
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tmp = readMem(STM32G0_FLASH_CR);
 8004056:	4f09      	ldr	r7, [pc, #36]	@ (800407c <Stm32g0_Flash_Program+0x58>)
 8004058:	4638      	mov	r0, r7
 800405a:	f7fe fb73 	bl	8002744 <readMem>
		writeMem(STM32G0_FLASH_CR, STM32G0_FLASH_CR_PG|tmp);
 800405e:	f040 0101 	orr.w	r1, r0, #1
 8004062:	4638      	mov	r0, r7
 8004064:	f7fe fb80 	bl	8002768 <writeMem>
		writeMem(Address, 	(uint32_t)Data);
 8004068:	4631      	mov	r1, r6
 800406a:	4620      	mov	r0, r4
 800406c:	f7fe fb7c 	bl	8002768 <writeMem>
		writeMem(Address+4, (uint32_t)(Data>>32));
 8004070:	4629      	mov	r1, r5
 8004072:	1d20      	adds	r0, r4, #4
 8004074:	f7fe fb78 	bl	8002768 <writeMem>
 8004078:	e7dd      	b.n	8004036 <Stm32g0_Flash_Program+0x12>
 800407a:	bf00      	nop
 800407c:	40022014 	.word	0x40022014

08004080 <Stm32g0_Flash_Lock>:
{
 8004080:	b510      	push	{r4, lr}
	Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8004082:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004086:	f7ff ff71 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
	tmp = readMem(STM32G0_FLASH_CR);
 800408a:	4c07      	ldr	r4, [pc, #28]	@ (80040a8 <Stm32g0_Flash_Lock+0x28>)
 800408c:	4620      	mov	r0, r4
 800408e:	f7fe fb59 	bl	8002744 <readMem>
	writeMem(STM32G0_FLASH_CR, STM32G0_FLASH_CR_LOCK|tmp);
 8004092:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 8004096:	4620      	mov	r0, r4
 8004098:	f7fe fb66 	bl	8002768 <writeMem>
	tmp = readMem(STM32G0_FLASH_CR) & STM32G0_FLASH_CR_LOCK;
 800409c:	4620      	mov	r0, r4
 800409e:	f7fe fb51 	bl	8002744 <readMem>
}
 80040a2:	43c0      	mvns	r0, r0
 80040a4:	0fc0      	lsrs	r0, r0, #31
 80040a6:	bd10      	pop	{r4, pc}
 80040a8:	40022014 	.word	0x40022014

080040ac <Stm32g0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32g0_Flash_OB_Lock(void)
{
 80040ac:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Wait for last operation to be completed */
	Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 80040ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040b2:	f7ff ff5b 	bl	8003f6c <Stm32g0_Flash_WaitOperation>

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32G0_FLASH_CR);
 80040b6:	4c08      	ldr	r4, [pc, #32]	@ (80040d8 <Stm32g0_Flash_OB_Lock+0x2c>)
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7fe fb43 	bl	8002744 <readMem>
	writeMem(STM32G0_FLASH_CR, STM32G0_FLASH_CR_OPTLOCK|tmp);
 80040be:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7fe fb50 	bl	8002768 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32G0_FLASH_CR) & STM32G0_FLASH_CR_OPTLOCK;
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7fe fb3b 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 80040ce:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
	{
		status = TARGET_OK;
	}
	return status;
}
 80040d2:	f3c0 7080 	ubfx	r0, r0, #30, #1
 80040d6:	bd10      	pop	{r4, pc}
 80040d8:	40022014 	.word	0x40022014

080040dc <Stm32g0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32g0_Flash_OB_Unlock(void)
{
 80040dc:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32G0_FLASH_CR)& STM32G0_FLASH_CR_OPTLOCK;
 80040de:	480b      	ldr	r0, [pc, #44]	@ (800410c <Stm32g0_Flash_OB_Unlock+0x30>)
 80040e0:	f7fe fb30 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 80040e4:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80040e8:	d101      	bne.n	80040ee <Stm32g0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 80040ea:	2001      	movs	r0, #1
		{
		  status = TARGET_OK;
		}
	}
	return status;
}
 80040ec:	bd10      	pop	{r4, pc}
		writeMem(STM32G0_FLASH_OPTKEYR, STM32G0_FLASH_OPTKEY1);
 80040ee:	4c08      	ldr	r4, [pc, #32]	@ (8004110 <Stm32g0_Flash_OB_Unlock+0x34>)
 80040f0:	4908      	ldr	r1, [pc, #32]	@ (8004114 <Stm32g0_Flash_OB_Unlock+0x38>)
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7fe fb38 	bl	8002768 <writeMem>
		writeMem(STM32G0_FLASH_OPTKEYR, STM32G0_FLASH_OPTKEY2);
 80040f8:	4907      	ldr	r1, [pc, #28]	@ (8004118 <Stm32g0_Flash_OB_Unlock+0x3c>)
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7fe fb34 	bl	8002768 <writeMem>
		tmp = readMem(STM32G0_FLASH_CR)& STM32G0_FLASH_CR_OPTLOCK;
 8004100:	4802      	ldr	r0, [pc, #8]	@ (800410c <Stm32g0_Flash_OB_Unlock+0x30>)
 8004102:	f7fe fb1f 	bl	8002744 <readMem>
		if(tmp == 0x00U)
 8004106:	f3c0 7080 	ubfx	r0, r0, #30, #1
 800410a:	e7ef      	b.n	80040ec <Stm32g0_Flash_OB_Unlock+0x10>
 800410c:	40022014 	.word	0x40022014
 8004110:	4002200c 	.word	0x4002200c
 8004114:	08192a3b 	.word	0x08192a3b
 8004118:	4c5d6e7f 	.word	0x4c5d6e7f

0800411c <Stm32g0_Flash_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
void Stm32g0_Flash_OB_Launch(void)
{
 800411c:	b510      	push	{r4, lr}
    // Trigger an option byte reload which causes an immediate system reset.
    // After this write, target will reset and SWD must reconnect.
    uint32_t cr = readMem(STM32G0_FLASH_CR);
 800411e:	4c05      	ldr	r4, [pc, #20]	@ (8004134 <Stm32g0_Flash_OB_Launch+0x18>)
 8004120:	4620      	mov	r0, r4
 8004122:	f7fe fb0f 	bl	8002744 <readMem>
    writeMem(STM32G0_FLASH_CR, cr | STM32G0_FLASH_CR_OBL_LAUNCH);
 8004126:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 800412a:	4620      	mov	r0, r4
 800412c:	f7fe fb1c 	bl	8002768 <writeMem>
}
 8004130:	bd10      	pop	{r4, pc}
 8004132:	bf00      	nop
 8004134:	40022014 	.word	0x40022014

08004138 <Stm32g0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32g0_Flash_OB_Program(uint32_t RDPLevel)
{
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4604      	mov	r4, r0
	bool status;
	uint32_t tmp = 0;

    uint32_t optr = readMem(STM32G0_FLASH_OPTR);
 800413c:	4d14      	ldr	r5, [pc, #80]	@ (8004190 <Stm32g0_Flash_OB_Program+0x58>)
 800413e:	4628      	mov	r0, r5
 8004140:	f7fe fb00 	bl	8002744 <readMem>
    optr = (optr & ~STM32G0_FLASH_OPTR_RDP_Msk) | (RDPLevel & STM32G0_FLASH_OPTR_RDP_Msk);
    writeMem(STM32G0_FLASH_OPTR, optr);
 8004144:	4601      	mov	r1, r0
 8004146:	f364 0107 	bfi	r1, r4, #0, #8
 800414a:	4628      	mov	r0, r5
 800414c:	f7fe fb0c 	bl	8002768 <writeMem>

	/* Wait for last operation to be completed */
	status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8004150:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004154:	f7ff ff0a 	bl	8003f6c <Stm32g0_Flash_WaitOperation>

	if(status == TARGET_OK)
 8004158:	4604      	mov	r4, r0
 800415a:	b108      	cbz	r0, 8004160 <Stm32g0_Flash_OB_Program+0x28>
		/* If the option byte program operation is completed, disable the OPTSTRT Bit */
		tmp = readMem(STM32G0_FLASH_CR);
		writeMem(STM32G0_FLASH_CR, ~STM32G0_FLASH_CR_OPTSTRT&tmp);
	}
    return status;
}
 800415c:	4620      	mov	r0, r4
 800415e:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32G0_FLASH_CR);
 8004160:	3d0c      	subs	r5, #12
 8004162:	4628      	mov	r0, r5
 8004164:	f7fe faee 	bl	8002744 <readMem>
		writeMem(STM32G0_FLASH_CR, STM32G0_FLASH_CR_OPTSTRT|tmp);
 8004168:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 800416c:	4628      	mov	r0, r5
 800416e:	f7fe fafb 	bl	8002768 <writeMem>
		status = Stm32g0_Flash_WaitOperation(STM32G0_FLASH_TIMEOUT_VALUE);
 8004172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004176:	f7ff fef9 	bl	8003f6c <Stm32g0_Flash_WaitOperation>
 800417a:	4604      	mov	r4, r0
		tmp = readMem(STM32G0_FLASH_CR);
 800417c:	4628      	mov	r0, r5
 800417e:	f7fe fae1 	bl	8002744 <readMem>
		writeMem(STM32G0_FLASH_CR, ~STM32G0_FLASH_CR_OPTSTRT&tmp);
 8004182:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 8004186:	4628      	mov	r0, r5
 8004188:	f7fe faee 	bl	8002768 <writeMem>
 800418c:	e7e6      	b.n	800415c <Stm32g0_Flash_OB_Program+0x24>
 800418e:	bf00      	nop
 8004190:	40022020 	.word	0x40022020

08004194 <Stm32h7_Flash_WaitOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_WaitOperation(uint32_t Timeout, uint32_t Bank)
{
 8004194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	4605      	mov	r5, r0
    uint32_t sr_reg = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_SR1 : STM32H7_FLASH_SR2;
    uint32_t qw_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_QW_BANK1 : STM32H7_FLASH_FLAG_QW_BANK2;
    uint32_t all_errors_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_ALL_ERRORS_BANK1 : STM32H7_FLASH_FLAG_ALL_ERRORS_BANK2;
 800419a:	4a1e      	ldr	r2, [pc, #120]	@ (8004214 <Stm32h7_Flash_WaitOperation+0x80>)
 800419c:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <Stm32h7_Flash_WaitOperation+0x84>)
 800419e:	2901      	cmp	r1, #1
 80041a0:	bf14      	ite	ne
 80041a2:	4691      	movne	r9, r2
 80041a4:	4699      	moveq	r9, r3
 80041a6:	2901      	cmp	r1, #1
 80041a8:	4f1c      	ldr	r7, [pc, #112]	@ (800421c <Stm32h7_Flash_WaitOperation+0x88>)
 80041aa:	bf08      	it	eq
 80041ac:	2704      	moveq	r7, #4
 80041ae:	4e1c      	ldr	r6, [pc, #112]	@ (8004220 <Stm32h7_Flash_WaitOperation+0x8c>)
 80041b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004224 <Stm32h7_Flash_WaitOperation+0x90>)
 80041b2:	2901      	cmp	r1, #1
 80041b4:	bf08      	it	eq
 80041b6:	461e      	moveq	r6, r3
 80041b8:	2901      	cmp	r1, #1
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <Stm32h7_Flash_WaitOperation+0x94>)
 80041bc:	bf14      	ite	ne
 80041be:	469a      	movne	sl, r3
 80041c0:	f44f 3a80 	moveq.w	sl, #65536	@ 0x10000
    uint32_t eop_flag = (Bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_FLAG_EOP_BANK1 : STM32H7_FLASH_FLAG_EOP_BANK2;

    uint32_t tickstart = HAL_GetTick();
 80041c4:	f001 fb5c 	bl	8005880 <HAL_GetTick>
 80041c8:	4680      	mov	r8, r0
 80041ca:	e001      	b.n	80041d0 <Stm32h7_Flash_WaitOperation+0x3c>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기

        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
            return TARGET_ERROR;
        }
    } while (status & qw_flag);  // QW 플래그가 0이 될 때까지 대기
 80041cc:	4227      	tst	r7, r4
 80041ce:	d00e      	beq.n	80041ee <Stm32h7_Flash_WaitOperation+0x5a>
        status = readMem(sr_reg);  // 한번에 상태 레지스터 읽기
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7fe fab7 	bl	8002744 <readMem>
 80041d6:	4604      	mov	r4, r0
        if (Timeout != STM32H7_MAX_DELAY && (HAL_GetTick() - tickstart) > Timeout) {
 80041d8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041dc:	d0f6      	beq.n	80041cc <Stm32h7_Flash_WaitOperation+0x38>
 80041de:	f001 fb4f 	bl	8005880 <HAL_GetTick>
 80041e2:	eba0 0008 	sub.w	r0, r0, r8
 80041e6:	42a8      	cmp	r0, r5
 80041e8:	d9f0      	bls.n	80041cc <Stm32h7_Flash_WaitOperation+0x38>
            return TARGET_ERROR;
 80041ea:	2001      	movs	r0, #1
 80041ec:	e006      	b.n	80041fc <Stm32h7_Flash_WaitOperation+0x68>

    // 에러 플래그 확인 및 클리어
    uint32_t errorflag = status & all_errors_flag;
    if (errorflag != 0) {
 80041ee:	ea19 0104 	ands.w	r1, r9, r4
 80041f2:	d105      	bne.n	8004200 <Stm32h7_Flash_WaitOperation+0x6c>
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
    }

    // EOP 플래그 확인 및 클리어
    if (status & eop_flag) {
 80041f4:	ea1a 0f04 	tst.w	sl, r4
 80041f8:	d106      	bne.n	8004208 <Stm32h7_Flash_WaitOperation+0x74>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
    }

    return TARGET_OK;
 80041fa:	2000      	movs	r0, #0
}
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        writeMem(sr_reg, errorflag);  // 에러 플래그 클리어
 8004200:	4630      	mov	r0, r6
 8004202:	f7fe fab1 	bl	8002768 <writeMem>
 8004206:	e7f5      	b.n	80041f4 <Stm32h7_Flash_WaitOperation+0x60>
        writeMem(sr_reg, eop_flag);  // EOP 플래그 클리어
 8004208:	4651      	mov	r1, sl
 800420a:	4630      	mov	r0, r6
 800420c:	f7fe faac 	bl	8002768 <writeMem>
    return TARGET_OK;
 8004210:	2000      	movs	r0, #0
 8004212:	e7f3      	b.n	80041fc <Stm32h7_Flash_WaitOperation+0x68>
 8004214:	97ee0000 	.word	0x97ee0000
 8004218:	17ee0000 	.word	0x17ee0000
 800421c:	80000004 	.word	0x80000004
 8004220:	52002110 	.word	0x52002110
 8004224:	52002010 	.word	0x52002010
 8004228:	80010000 	.word	0x80010000

0800422c <Stm32h7_Flash_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
void Stm32h7_Flash_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4605      	mov	r5, r0
	uint32_t tmp = 0;

  /* Flash Mass Erase */
  if((Banks & STM32H7_FLASH_BANK_BOTH) == STM32H7_FLASH_BANK_BOTH)
 8004230:	f001 0303 	and.w	r3, r1, #3
 8004234:	2b03      	cmp	r3, #3
 8004236:	d011      	beq.n	800425c <Stm32h7_Flash_MassErase+0x30>
 8004238:	460c      	mov	r4, r1
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 800423a:	f011 0f01 	tst.w	r1, #1
 800423e:	d139      	bne.n	80042b4 <Stm32h7_Flash_MassErase+0x88>
      /* Erase Bank1 */
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR1, tmp);
    }

    if((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 8004240:	f014 0f02 	tst.w	r4, #2
 8004244:	d150      	bne.n	80042e8 <Stm32h7_Flash_MassErase+0xbc>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
    	writeMem(STM32H7_FLASH_CR2, tmp);
    }
  }

  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1);
 8004246:	2101      	movs	r1, #1
 8004248:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800424c:	f7ff ffa2 	bl	8004194 <Stm32h7_Flash_WaitOperation>
  Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2);
 8004250:	2102      	movs	r1, #2
 8004252:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004256:	f7ff ff9d 	bl	8004194 <Stm32h7_Flash_WaitOperation>

}
 800425a:	bd70      	pop	{r4, r5, r6, pc}
  	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 800425c:	4e2f      	ldr	r6, [pc, #188]	@ (800431c <Stm32h7_Flash_MassErase+0xf0>)
 800425e:	4630      	mov	r0, r6
 8004260:	f7fe fa70 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8004264:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 8004268:	4630      	mov	r0, r6
 800426a:	f7fe fa7d 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 800426e:	4c2c      	ldr	r4, [pc, #176]	@ (8004320 <Stm32h7_Flash_MassErase+0xf4>)
 8004270:	4620      	mov	r0, r4
 8004272:	f7fe fa67 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8004276:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 800427a:	4620      	mov	r0, r4
 800427c:	f7fe fa74 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 8004280:	4630      	mov	r0, r6
 8004282:	f7fe fa5f 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR1, tmp);
 8004286:	ea40 0105 	orr.w	r1, r0, r5
 800428a:	4630      	mov	r0, r6
 800428c:	f7fe fa6c 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 8004290:	4620      	mov	r0, r4
 8004292:	f7fe fa57 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_CR2, tmp);
 8004296:	ea40 0105 	orr.w	r1, r0, r5
 800429a:	4620      	mov	r0, r4
 800429c:	f7fe fa64 	bl	8002768 <writeMem>
  	tmp = readMem(STM32H7_FLASH_OPTCR) | STM32H7_FLASH_OPTCR_MER;
 80042a0:	3cf4      	subs	r4, #244	@ 0xf4
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7fe fa4e 	bl	8002744 <readMem>
  	writeMem(STM32H7_FLASH_OPTCR, tmp);
 80042a8:	f040 0110 	orr.w	r1, r0, #16
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fe fa5b 	bl	8002768 <writeMem>
 80042b2:	e7c8      	b.n	8004246 <Stm32h7_Flash_MassErase+0x1a>
    	tmp = readMem(STM32H7_FLASH_CR1) & (~STM32H7_FLASH_CR_PSIZE);
 80042b4:	4e19      	ldr	r6, [pc, #100]	@ (800431c <Stm32h7_Flash_MassErase+0xf0>)
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7fe fa44 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80042bc:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7fe fa51 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | VoltageRange;
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7fe fa3c 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80042cc:	ea40 0105 	orr.w	r1, r0, r5
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7fe fa49 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR1) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7fe fa34 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR1, tmp);
 80042dc:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7fe fa41 	bl	8002768 <writeMem>
 80042e6:	e7ab      	b.n	8004240 <Stm32h7_Flash_MassErase+0x14>
    	tmp = readMem(STM32H7_FLASH_CR2) & (~STM32H7_FLASH_CR_PSIZE);
 80042e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004320 <Stm32h7_Flash_MassErase+0xf4>)
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7fe fa2a 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 80042f0:	f020 0130 	bic.w	r1, r0, #48	@ 0x30
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7fe fa37 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | VoltageRange;
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7fe fa22 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8004300:	ea40 0105 	orr.w	r1, r0, r5
 8004304:	4620      	mov	r0, r4
 8004306:	f7fe fa2f 	bl	8002768 <writeMem>
    	tmp = readMem(STM32H7_FLASH_CR2) | (STM32H7_FLASH_CR_BER | STM32H7_FLASH_CR_START);
 800430a:	4620      	mov	r0, r4
 800430c:	f7fe fa1a 	bl	8002744 <readMem>
    	writeMem(STM32H7_FLASH_CR2, tmp);
 8004310:	f040 0188 	orr.w	r1, r0, #136	@ 0x88
 8004314:	4620      	mov	r0, r4
 8004316:	f7fe fa27 	bl	8002768 <writeMem>
 800431a:	e794      	b.n	8004246 <Stm32h7_Flash_MassErase+0x1a>
 800431c:	5200200c 	.word	0x5200200c
 8004320:	5200210c 	.word	0x5200210c

08004324 <Stm32h7_Flash_Unlock>:

bool Stm32h7_Flash_Unlock(uint32_t Banks)
{
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4604      	mov	r4, r0
    uint32_t tmp = 0;

    /* BANK1 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 8004328:	f010 0f01 	tst.w	r0, #1
 800432c:	d104      	bne.n	8004338 <Stm32h7_Flash_Unlock+0x14>
            }
        }
    }

    /* BANK2 언락 처리 */
    if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 800432e:	f014 0f02 	tst.w	r4, #2
 8004332:	d118      	bne.n	8004366 <Stm32h7_Flash_Unlock+0x42>
                return TARGET_ERROR;
            }
        }
    }

    return TARGET_OK;
 8004334:	2000      	movs	r0, #0
}
 8004336:	bd38      	pop	{r3, r4, r5, pc}
        tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8004338:	4816      	ldr	r0, [pc, #88]	@ (8004394 <Stm32h7_Flash_Unlock+0x70>)
 800433a:	f7fe fa03 	bl	8002744 <readMem>
        if (tmp != 0U)
 800433e:	f010 0f01 	tst.w	r0, #1
 8004342:	d0f4      	beq.n	800432e <Stm32h7_Flash_Unlock+0xa>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY1);
 8004344:	4d14      	ldr	r5, [pc, #80]	@ (8004398 <Stm32h7_Flash_Unlock+0x74>)
 8004346:	4915      	ldr	r1, [pc, #84]	@ (800439c <Stm32h7_Flash_Unlock+0x78>)
 8004348:	4628      	mov	r0, r5
 800434a:	f7fe fa0d 	bl	8002768 <writeMem>
            writeMem(STM32H7_FLASH_KEYR1, STM32H7_FLASH_KEY2);
 800434e:	4914      	ldr	r1, [pc, #80]	@ (80043a0 <Stm32h7_Flash_Unlock+0x7c>)
 8004350:	4628      	mov	r0, r5
 8004352:	f7fe fa09 	bl	8002768 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR1) & STM32H7_FLASH_CR_LOCK;
 8004356:	480f      	ldr	r0, [pc, #60]	@ (8004394 <Stm32h7_Flash_Unlock+0x70>)
 8004358:	f7fe f9f4 	bl	8002744 <readMem>
            if (tmp != 0U)
 800435c:	f010 0f01 	tst.w	r0, #1
 8004360:	d0e5      	beq.n	800432e <Stm32h7_Flash_Unlock+0xa>
                return TARGET_ERROR;
 8004362:	2001      	movs	r0, #1
 8004364:	e7e7      	b.n	8004336 <Stm32h7_Flash_Unlock+0x12>
        tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8004366:	480f      	ldr	r0, [pc, #60]	@ (80043a4 <Stm32h7_Flash_Unlock+0x80>)
 8004368:	f7fe f9ec 	bl	8002744 <readMem>
        if (tmp != 0U)
 800436c:	f010 0f01 	tst.w	r0, #1
 8004370:	d101      	bne.n	8004376 <Stm32h7_Flash_Unlock+0x52>
    return TARGET_OK;
 8004372:	2000      	movs	r0, #0
 8004374:	e7df      	b.n	8004336 <Stm32h7_Flash_Unlock+0x12>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY1);
 8004376:	4c0c      	ldr	r4, [pc, #48]	@ (80043a8 <Stm32h7_Flash_Unlock+0x84>)
 8004378:	4908      	ldr	r1, [pc, #32]	@ (800439c <Stm32h7_Flash_Unlock+0x78>)
 800437a:	4620      	mov	r0, r4
 800437c:	f7fe f9f4 	bl	8002768 <writeMem>
            writeMem(STM32H7_FLASH_KEYR2, STM32H7_FLASH_KEY2);
 8004380:	4907      	ldr	r1, [pc, #28]	@ (80043a0 <Stm32h7_Flash_Unlock+0x7c>)
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe f9f0 	bl	8002768 <writeMem>
            tmp = readMem(STM32H7_FLASH_CR2) & STM32H7_FLASH_CR_LOCK;
 8004388:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <Stm32h7_Flash_Unlock+0x80>)
 800438a:	f7fe f9db 	bl	8002744 <readMem>
            if (tmp != 0U)
 800438e:	f000 0001 	and.w	r0, r0, #1
 8004392:	e7d0      	b.n	8004336 <Stm32h7_Flash_Unlock+0x12>
 8004394:	5200200c 	.word	0x5200200c
 8004398:	52002004 	.word	0x52002004
 800439c:	45670123 	.word	0x45670123
 80043a0:	cdef89ab 	.word	0xcdef89ab
 80043a4:	5200210c 	.word	0x5200210c
 80043a8:	52002104 	.word	0x52002104

080043ac <Stm32h7_Flash_Lock>:

bool Stm32h7_Flash_Lock(uint32_t Banks)
{
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4604      	mov	r4, r0
  uint32_t tmp = 0;

	if ((Banks & STM32H7_FLASH_BANK_1) == STM32H7_FLASH_BANK_1)
 80043b0:	f010 0f01 	tst.w	r0, #1
 80043b4:	d104      	bne.n	80043c0 <Stm32h7_Flash_Lock+0x14>
	{
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR1, tmp);
	}

  if ((Banks & STM32H7_FLASH_BANK_2) == STM32H7_FLASH_BANK_2)
 80043b6:	f014 0f02 	tst.w	r4, #2
 80043ba:	d10b      	bne.n	80043d4 <Stm32h7_Flash_Lock+0x28>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
		writeMem(STM32H7_FLASH_CR2, tmp);
  }

  return TARGET_OK;
}
 80043bc:	2000      	movs	r0, #0
 80043be:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32H7_FLASH_CR1) | STM32H7_FLASH_CR_LOCK;
 80043c0:	4d09      	ldr	r5, [pc, #36]	@ (80043e8 <Stm32h7_Flash_Lock+0x3c>)
 80043c2:	4628      	mov	r0, r5
 80043c4:	f7fe f9be 	bl	8002744 <readMem>
		writeMem(STM32H7_FLASH_CR1, tmp);
 80043c8:	f040 0101 	orr.w	r1, r0, #1
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7fe f9cb 	bl	8002768 <writeMem>
 80043d2:	e7f0      	b.n	80043b6 <Stm32h7_Flash_Lock+0xa>
		tmp = readMem(STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_LOCK;
 80043d4:	4c05      	ldr	r4, [pc, #20]	@ (80043ec <Stm32h7_Flash_Lock+0x40>)
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7fe f9b4 	bl	8002744 <readMem>
		writeMem(STM32H7_FLASH_CR2, tmp);
 80043dc:	f040 0101 	orr.w	r1, r0, #1
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7fe f9c1 	bl	8002768 <writeMem>
 80043e6:	e7e9      	b.n	80043bc <Stm32h7_Flash_Lock+0x10>
 80043e8:	5200200c 	.word	0x5200200c
 80043ec:	5200210c 	.word	0x5200210c

080043f0 <Stm32h7_Flash_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
bool Stm32h7_Flash_Program(uint32_t FlashAddress, uint32_t DataAddress, uint32_t WordSize)
{
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	b083      	sub	sp, #12
 80043f6:	4681      	mov	r9, r0
 80043f8:	4688      	mov	r8, r1
 80043fa:	4692      	mov	sl, r2
    bool status;
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 80043fc:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004404:	d216      	bcs.n	8004434 <Stm32h7_Flash_Program+0x44>
    uint32_t dest_addr = FlashAddress;
    uint32_t *src_addr = (uint32_t *)DataAddress;

    // Set PG bit once at the beginning
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 8004406:	4c23      	ldr	r4, [pc, #140]	@ (8004494 <Stm32h7_Flash_Program+0xa4>)
 8004408:	4620      	mov	r0, r4
 800440a:	f7fe f99b 	bl	8002744 <readMem>
 800440e:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 8004412:	2301      	movs	r3, #1
 8004414:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 8004416:	9401      	str	r4, [sp, #4]
 8004418:	9801      	ldr	r0, [sp, #4]
 800441a:	f7fe f9a5 	bl	8002768 <writeMem>

    // Program flash with burst writes (32-byte aligned)
    for (uint32_t i = 0; i < WordSize; i += 32) {
 800441e:	f1ba 0f00 	cmp.w	sl, #0
 8004422:	d029      	beq.n	8004478 <Stm32h7_Flash_Program+0x88>
 8004424:	f108 0520 	add.w	r5, r8, #32
    uint32_t *src_addr = (uint32_t *)DataAddress;
 8004428:	4647      	mov	r7, r8
    for (uint32_t i = 0; i < WordSize; i += 32) {
 800442a:	f06f 0b1f 	mvn.w	fp, #31
 800442e:	ebab 0b08 	sub.w	fp, fp, r8
 8004432:	e016      	b.n	8004462 <Stm32h7_Flash_Program+0x72>
    uint32_t tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2) | STM32H7_FLASH_CR_PG;
 8004434:	4c18      	ldr	r4, [pc, #96]	@ (8004498 <Stm32h7_Flash_Program+0xa8>)
 8004436:	4620      	mov	r0, r4
 8004438:	f7fe f984 	bl	8002744 <readMem>
 800443c:	f040 0102 	orr.w	r1, r0, #2
    uint32_t bank = (IS_STM32H7_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) ? STM32H7_FLASH_BANK_1 : STM32H7_FLASH_BANK_2;
 8004440:	2302      	movs	r3, #2
 8004442:	9300      	str	r3, [sp, #0]
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 8004444:	9401      	str	r4, [sp, #4]
 8004446:	e7e7      	b.n	8004418 <Stm32h7_Flash_Program+0x28>
 8004448:	3720      	adds	r7, #32
            writeMem(dest_addr + j, *src_addr++);
        }
        dest_addr += 32;

        // Wait for operation to complete after each burst
        status = Stm32h7_Flash_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE, bank);
 800444a:	9900      	ldr	r1, [sp, #0]
 800444c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004450:	f7ff fea0 	bl	8004194 <Stm32h7_Flash_WaitOperation>
        if (status != TARGET_OK) {
 8004454:	4603      	mov	r3, r0
 8004456:	b9c8      	cbnz	r0, 800448c <Stm32h7_Flash_Program+0x9c>
    for (uint32_t i = 0; i < WordSize; i += 32) {
 8004458:	3520      	adds	r5, #32
 800445a:	eb0b 0305 	add.w	r3, fp, r5
 800445e:	459a      	cmp	sl, r3
 8004460:	d90a      	bls.n	8004478 <Stm32h7_Flash_Program+0x88>
 8004462:	eba9 0608 	sub.w	r6, r9, r8
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp);
 8004466:	463c      	mov	r4, r7
            writeMem(dest_addr + j, *src_addr++);
 8004468:	19a0      	adds	r0, r4, r6
 800446a:	f854 1b04 	ldr.w	r1, [r4], #4
 800446e:	f7fe f97b 	bl	8002768 <writeMem>
        for (uint32_t j = 0; j < 32; j += 4) {
 8004472:	42ac      	cmp	r4, r5
 8004474:	d1f8      	bne.n	8004468 <Stm32h7_Flash_Program+0x78>
 8004476:	e7e7      	b.n	8004448 <Stm32h7_Flash_Program+0x58>
            return TARGET_ERROR;
        }
    }

    // Clear PG bit at the end
    tmp = readMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2);
 8004478:	9c01      	ldr	r4, [sp, #4]
 800447a:	4620      	mov	r0, r4
 800447c:	f7fe f962 	bl	8002744 <readMem>
    writeMem((bank == STM32H7_FLASH_BANK_1) ? STM32H7_FLASH_CR1 : STM32H7_FLASH_CR2, tmp & (~STM32H7_FLASH_CR_PG));
 8004480:	f020 0102 	bic.w	r1, r0, #2
 8004484:	4620      	mov	r0, r4
 8004486:	f7fe f96f 	bl	8002768 <writeMem>

    return TARGET_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	b003      	add	sp, #12
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	5200200c 	.word	0x5200200c
 8004498:	5200210c 	.word	0x5200210c

0800449c <Stm32h7_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Unlock(void)
{
 800449c:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

	tmp = readMem(STM32H7_FLASH_OPTCR) & STM32H7_FLASH_OPTCR_OPTLOCK;
 800449e:	480b      	ldr	r0, [pc, #44]	@ (80044cc <Stm32h7_Flash_OB_Unlock+0x30>)
 80044a0:	f7fe f950 	bl	8002744 <readMem>
  if(tmp != 0x00U)
 80044a4:	f010 0f01 	tst.w	r0, #1
 80044a8:	d101      	bne.n	80044ae <Stm32h7_Flash_OB_Unlock+0x12>
		if(tmp != 0x00U)
		{
			return TARGET_ERROR;
		}
  }
  return TARGET_OK;
 80044aa:	2000      	movs	r0, #0
}
 80044ac:	bd10      	pop	{r4, pc}
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY1);
 80044ae:	4c08      	ldr	r4, [pc, #32]	@ (80044d0 <Stm32h7_Flash_OB_Unlock+0x34>)
 80044b0:	4908      	ldr	r1, [pc, #32]	@ (80044d4 <Stm32h7_Flash_OB_Unlock+0x38>)
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fe f958 	bl	8002768 <writeMem>
		writeMem(STM32H7_FLASH_OPTKEYR, STM32H7_FLASH_OPTKEY2);
 80044b8:	4907      	ldr	r1, [pc, #28]	@ (80044d8 <Stm32h7_Flash_OB_Unlock+0x3c>)
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7fe f954 	bl	8002768 <writeMem>
		tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 80044c0:	4802      	ldr	r0, [pc, #8]	@ (80044cc <Stm32h7_Flash_OB_Unlock+0x30>)
 80044c2:	f7fe f93f 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 80044c6:	f000 0001 	and.w	r0, r0, #1
 80044ca:	e7ef      	b.n	80044ac <Stm32h7_Flash_OB_Unlock+0x10>
 80044cc:	52002018 	.word	0x52002018
 80044d0:	52002008 	.word	0x52002008
 80044d4:	08192a3b 	.word	0x08192a3b
 80044d8:	4c5d6e7f 	.word	0x4c5d6e7f

080044dc <Stm32h7_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
bool Stm32h7_Flash_OB_Lock(void)
{
 80044dc:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 80044de:	4c08      	ldr	r4, [pc, #32]	@ (8004500 <Stm32h7_Flash_OB_Lock+0x24>)
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7fe f92f 	bl	8002744 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTLOCK | tmp);
 80044e6:	f040 0101 	orr.w	r1, r0, #1
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7fe f93c 	bl	8002768 <writeMem>

  /* Verify that the Option Bytes are locked */
	tmp = readMem(STM32H7_FLASH_OPTCR)& STM32H7_FLASH_OPTCR_OPTLOCK;
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7fe f927 	bl	8002744 <readMem>
	{
		return TARGET_ERROR;
	}

	return TARGET_OK;
}
 80044f6:	43c0      	mvns	r0, r0
 80044f8:	f000 0001 	and.w	r0, r0, #1
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	bf00      	nop
 8004500:	52002018 	.word	0x52002018

08004504 <Stm32h7_Flash_OB_Launch>:
	return TARGET_OK;
}


bool Stm32h7_Flash_OB_Launch(void)
{
 8004504:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp = 0;

	/* Set OPTSTRT Bit */
	tmp = readMem(STM32H7_FLASH_OPTCR);
 8004506:	4c18      	ldr	r4, [pc, #96]	@ (8004568 <Stm32h7_Flash_OB_Launch+0x64>)
 8004508:	4620      	mov	r0, r4
 800450a:	f7fe f91b 	bl	8002744 <readMem>
	writeMem(STM32H7_FLASH_OPTCR, STM32H7_FLASH_OPTCR_OPTSTART | tmp);
 800450e:	f040 0102 	orr.w	r1, r0, #2
 8004512:	4620      	mov	r0, r4
 8004514:	f7fe f928 	bl	8002768 <writeMem>
	uint32_t tickstart = HAL_GetTick();
 8004518:	f001 f9b2 	bl	8005880 <HAL_GetTick>
 800451c:	4604      	mov	r4, r0
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 800451e:	4813      	ldr	r0, [pc, #76]	@ (800456c <Stm32h7_Flash_OB_Launch+0x68>)
 8004520:	f7fe f910 	bl	8002744 <readMem>
	while(tmp != 0U)
 8004524:	f010 0f01 	tst.w	r0, #1
 8004528:	d00d      	beq.n	8004546 <Stm32h7_Flash_OB_Launch+0x42>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f24c 3550 	movw	r5, #50000	@ 0xc350
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 800452e:	4e0f      	ldr	r6, [pc, #60]	@ (800456c <Stm32h7_Flash_OB_Launch+0x68>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004530:	f001 f9a6 	bl	8005880 <HAL_GetTick>
 8004534:	1b00      	subs	r0, r0, r4
 8004536:	42a8      	cmp	r0, r5
 8004538:	d814      	bhi.n	8004564 <Stm32h7_Flash_OB_Launch+0x60>
    tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPT_BUSY;
 800453a:	4630      	mov	r0, r6
 800453c:	f7fe f902 	bl	8002744 <readMem>
	while(tmp != 0U)
 8004540:	f010 0f01 	tst.w	r0, #1
 8004544:	d1f4      	bne.n	8004530 <Stm32h7_Flash_OB_Launch+0x2c>
	tmp = readMem(STM32H7_FLASH_OPTSR_CUR) & STM32H7_FLASH_OPTSR_OPTCHANGEERR;
 8004546:	4809      	ldr	r0, [pc, #36]	@ (800456c <Stm32h7_Flash_OB_Launch+0x68>)
 8004548:	f7fe f8fc 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 800454c:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8004550:	d101      	bne.n	8004556 <Stm32h7_Flash_OB_Launch+0x52>
	return TARGET_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	e007      	b.n	8004566 <Stm32h7_Flash_OB_Launch+0x62>
		writeMem(STM32H7_FLASH_OPTCCR, STM32H7_FLASH_OPTCCR_CLR_OPTCHANGEERR);
 8004556:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800455a:	4805      	ldr	r0, [pc, #20]	@ (8004570 <Stm32h7_Flash_OB_Launch+0x6c>)
 800455c:	f7fe f904 	bl	8002768 <writeMem>
		return TARGET_ERROR;
 8004560:	2001      	movs	r0, #1
 8004562:	e000      	b.n	8004566 <Stm32h7_Flash_OB_Launch+0x62>
        return TARGET_ERROR;
 8004564:	2001      	movs	r0, #1
	return Stm32h7_Flash_OB_WaitOperation(STM32H7_FLASH_TIMEOUT_VALUE);
}
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	52002018 	.word	0x52002018
 800456c:	5200201c 	.word	0x5200201c
 8004570:	52002024 	.word	0x52002024

08004574 <Stm32h7_Flash_OB_Program>:
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
}

bool Stm32h7_Flash_OB_Program(uint32_t RDPLevel)
{
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4604      	mov	r4, r0
	bool status = 0;

  /* Wait for last operation to be completed */
	if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_1))
 8004578:	2101      	movs	r1, #1
 800457a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800457e:	f7ff fe09 	bl	8004194 <Stm32h7_Flash_WaitOperation>
 8004582:	4605      	mov	r5, r0
 8004584:	b108      	cbz	r0, 800458a <Stm32h7_Flash_OB_Program+0x16>
		/* Read protection configuration */
		STM32H7_FLASH_OB_RDPConfig(RDPLevel);
	}

	return status;
}
 8004586:	4628      	mov	r0, r5
 8004588:	bd70      	pop	{r4, r5, r6, pc}
	else if(Stm32h7_Flash_WaitOperation((uint32_t)STM32H7_FLASH_TIMEOUT_VALUE, STM32H7_FLASH_BANK_2))
 800458a:	2102      	movs	r1, #2
 800458c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004590:	f7ff fe00 	bl	8004194 <Stm32h7_Flash_WaitOperation>
 8004594:	4605      	mov	r5, r0
 8004596:	2800      	cmp	r0, #0
 8004598:	d1f5      	bne.n	8004586 <Stm32h7_Flash_OB_Program+0x12>
	tmp = readMem(STM32H7_FLASH_OPTSR_PRG) & (~STM32H7_FLASH_OPTSR_RDP_Msk);
 800459a:	4e05      	ldr	r6, [pc, #20]	@ (80045b0 <Stm32h7_Flash_OB_Program+0x3c>)
 800459c:	4630      	mov	r0, r6
 800459e:	f7fe f8d1 	bl	8002744 <readMem>
 80045a2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
	writeMem(STM32H7_FLASH_OPTSR_PRG, tmp | RDPLevel);
 80045a6:	4321      	orrs	r1, r4
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7fe f8dd 	bl	8002768 <writeMem>
}
 80045ae:	e7ea      	b.n	8004586 <Stm32h7_Flash_OB_Program+0x12>
 80045b0:	52002020 	.word	0x52002020

080045b4 <Stm32u0_Flash_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32u0_Flash_Unlock(void)
{
 80045b4:	b510      	push	{r4, lr}
	bool status = TARGET_OK;
	uint32_t tmp = 0;

	tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_LOCK;
 80045b6:	480a      	ldr	r0, [pc, #40]	@ (80045e0 <Stm32u0_Flash_Unlock+0x2c>)
 80045b8:	f7fe f8c4 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 80045bc:	2800      	cmp	r0, #0
 80045be:	db01      	blt.n	80045c4 <Stm32u0_Flash_Unlock+0x10>
	bool status = TARGET_OK;
 80045c0:	2000      	movs	r0, #0
		{
			status = TARGET_ERROR;
		}
	}
	return status;
}
 80045c2:	bd10      	pop	{r4, pc}
		writeMem(STM32U0_FLASH_KEYR, STM32U0_FLASH_KEY1);
 80045c4:	4c07      	ldr	r4, [pc, #28]	@ (80045e4 <Stm32u0_Flash_Unlock+0x30>)
 80045c6:	4908      	ldr	r1, [pc, #32]	@ (80045e8 <Stm32u0_Flash_Unlock+0x34>)
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7fe f8cd 	bl	8002768 <writeMem>
		writeMem(STM32U0_FLASH_KEYR, STM32U0_FLASH_KEY2);
 80045ce:	4907      	ldr	r1, [pc, #28]	@ (80045ec <Stm32u0_Flash_Unlock+0x38>)
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7fe f8c9 	bl	8002768 <writeMem>
		tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_LOCK;
 80045d6:	4802      	ldr	r0, [pc, #8]	@ (80045e0 <Stm32u0_Flash_Unlock+0x2c>)
 80045d8:	f7fe f8b4 	bl	8002744 <readMem>
		if(tmp != 0x00U)
 80045dc:	0fc0      	lsrs	r0, r0, #31
 80045de:	e7f0      	b.n	80045c2 <Stm32u0_Flash_Unlock+0xe>
 80045e0:	40022014 	.word	0x40022014
 80045e4:	40022008 	.word	0x40022008
 80045e8:	45670123 	.word	0x45670123
 80045ec:	cdef89ab 	.word	0xcdef89ab

080045f0 <Stm32u0_Flash_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval Target Status
  */
bool Stm32u0_Flash_Lock(void)
{
 80045f0:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the LOCK Bit to lock the FLASH Registers access */
	tmp = readMem(STM32U0_FLASH_CR);
 80045f2:	4c07      	ldr	r4, [pc, #28]	@ (8004610 <Stm32u0_Flash_Lock+0x20>)
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7fe f8a5 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_LOCK|tmp);
 80045fa:	f040 4100 	orr.w	r1, r0, #2147483648	@ 0x80000000
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fe f8b2 	bl	8002768 <writeMem>

	/* verify Flash is locked */
	tmp = readMem(STM32U0_FLASH_CR) & STM32U0_FLASH_CR_LOCK;
 8004604:	4620      	mov	r0, r4
 8004606:	f7fe f89d 	bl	8002744 <readMem>
	if(tmp != 0x00U)
	{
		status = TARGET_OK;
	}
	return status;
}
 800460a:	43c0      	mvns	r0, r0
 800460c:	0fc0      	lsrs	r0, r0, #31
 800460e:	bd10      	pop	{r4, pc}
 8004610:	40022014 	.word	0x40022014

08004614 <Stm32u0_Flash_WaitOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval bool Status
  */
bool Stm32u0_Flash_WaitOperation(uint32_t Timeout)
{
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4606      	mov	r6, r0
	  uint32_t tmp = 0;

	  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
	     Even if the FLASH operation fails, the BUSY flag will be reset and an error
	     flag will be set */
	  uint32_t timeout = HAL_GetTick() + Timeout;
 8004618:	f001 f932 	bl	8005880 <HAL_GetTick>
 800461c:	1984      	adds	r4, r0, r6

	  /* Wait if any operation is ongoing */
	  tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 800461e:	481b      	ldr	r0, [pc, #108]	@ (800468c <Stm32u0_Flash_WaitOperation+0x78>)
 8004620:	f7fe f890 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 8004624:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 8004628:	d00a      	beq.n	8004640 <Stm32u0_Flash_WaitOperation+0x2c>
	  {
	    if (HAL_GetTick() >= timeout)
	    {
	      return TARGET_ERROR;
	    }
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 800462a:	4d18      	ldr	r5, [pc, #96]	@ (800468c <Stm32u0_Flash_WaitOperation+0x78>)
	    if (HAL_GetTick() >= timeout)
 800462c:	f001 f928 	bl	8005880 <HAL_GetTick>
 8004630:	42a0      	cmp	r0, r4
 8004632:	d224      	bcs.n	800467e <Stm32u0_Flash_WaitOperation+0x6a>
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_BSY1;
 8004634:	4628      	mov	r0, r5
 8004636:	f7fe f885 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 800463a:	f410 3f80 	tst.w	r0, #65536	@ 0x10000
 800463e:	d1f5      	bne.n	800462c <Stm32u0_Flash_WaitOperation+0x18>
	  }

	  /* check flash errors */
	  error = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_ERRORS;
 8004640:	4d12      	ldr	r5, [pc, #72]	@ (800468c <Stm32u0_Flash_WaitOperation+0x78>)
 8004642:	4628      	mov	r0, r5
 8004644:	f7fe f87e 	bl	8002744 <readMem>

	  /* clear error flags */
	  writeMem(STM32U0_FLASH_SR, error);
 8004648:	f248 31fa 	movw	r1, #33786	@ 0x83fa
 800464c:	4001      	ands	r1, r0
 800464e:	4628      	mov	r0, r5
 8004650:	f7fe f88a 	bl	8002768 <writeMem>

	  /* Wait for control register to be written */
	  timeout = HAL_GetTick() + Timeout;
 8004654:	f001 f914 	bl	8005880 <HAL_GetTick>
 8004658:	4406      	add	r6, r0
	  tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_CFGBSY;
 800465a:	4628      	mov	r0, r5
 800465c:	f7fe f872 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 8004660:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8004664:	d00d      	beq.n	8004682 <Stm32u0_Flash_WaitOperation+0x6e>
	  {
	    if (HAL_GetTick() >= timeout)
 8004666:	f001 f90b 	bl	8005880 <HAL_GetTick>
 800466a:	42b0      	cmp	r0, r6
 800466c:	d20b      	bcs.n	8004686 <Stm32u0_Flash_WaitOperation+0x72>
	    {
	      return TARGET_ERROR;
	    }
	    tmp = readMem(STM32U0_FLASH_SR) & STM32U0_FLASH_SR_CFGBSY;
 800466e:	4628      	mov	r0, r5
 8004670:	f7fe f868 	bl	8002744 <readMem>
	  while(tmp != 0x00U)
 8004674:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8004678:	d1f5      	bne.n	8004666 <Stm32u0_Flash_WaitOperation+0x52>
	  }

	  return TARGET_OK;
 800467a:	2000      	movs	r0, #0
 800467c:	e000      	b.n	8004680 <Stm32u0_Flash_WaitOperation+0x6c>
	      return TARGET_ERROR;
 800467e:	2001      	movs	r0, #1
}
 8004680:	bd70      	pop	{r4, r5, r6, pc}
	  return TARGET_OK;
 8004682:	2000      	movs	r0, #0
 8004684:	e7fc      	b.n	8004680 <Stm32u0_Flash_WaitOperation+0x6c>
	      return TARGET_ERROR;
 8004686:	2001      	movs	r0, #1
 8004688:	e7fa      	b.n	8004680 <Stm32u0_Flash_WaitOperation+0x6c>
 800468a:	bf00      	nop
 800468c:	40022010 	.word	0x40022010

08004690 <Stm32u0_Flash_MassErase>:
{
 8004690:	b510      	push	{r4, lr}
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 8004692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004696:	f7ff ffbd 	bl	8004614 <Stm32u0_Flash_WaitOperation>
	if(status == TARGET_OK)
 800469a:	b100      	cbz	r0, 800469e <Stm32u0_Flash_MassErase+0xe>
}
 800469c:	bd10      	pop	{r4, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 800469e:	4c08      	ldr	r4, [pc, #32]	@ (80046c0 <Stm32u0_Flash_MassErase+0x30>)
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7fe f84f 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, (STM32U0_FLASH_CR_STRT | STM32U0_FLASH_CR_MER1)|tmp);
 80046a6:	f440 3180 	orr.w	r1, r0, #65536	@ 0x10000
 80046aa:	f041 0104 	orr.w	r1, r1, #4
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7fe f85a 	bl	8002768 <writeMem>
		status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 80046b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046b8:	f7ff ffac 	bl	8004614 <Stm32u0_Flash_WaitOperation>
 80046bc:	e7ee      	b.n	800469c <Stm32u0_Flash_MassErase+0xc>
 80046be:	bf00      	nop
 80046c0:	40022014 	.word	0x40022014

080046c4 <Stm32u0_Flash_Program>:
{
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	4604      	mov	r4, r0
 80046c8:	4616      	mov	r6, r2
 80046ca:	461d      	mov	r5, r3
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 80046cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046d0:	f7ff ffa0 	bl	8004614 <Stm32u0_Flash_WaitOperation>
	if (status == TARGET_OK)
 80046d4:	b178      	cbz	r0, 80046f6 <Stm32u0_Flash_Program+0x32>
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 80046d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046da:	f7ff ff9b 	bl	8004614 <Stm32u0_Flash_WaitOperation>
 80046de:	4604      	mov	r4, r0
	tmp = readMem(STM32U0_FLASH_CR);
 80046e0:	4d0e      	ldr	r5, [pc, #56]	@ (800471c <Stm32u0_Flash_Program+0x58>)
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7fe f82e 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, tmp & (~STM32U0_FLASH_CR_PG));
 80046e8:	f020 0101 	bic.w	r1, r0, #1
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7fe f83b 	bl	8002768 <writeMem>
}
 80046f2:	4620      	mov	r0, r4
 80046f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 80046f6:	4f09      	ldr	r7, [pc, #36]	@ (800471c <Stm32u0_Flash_Program+0x58>)
 80046f8:	4638      	mov	r0, r7
 80046fa:	f7fe f823 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_PG|tmp);
 80046fe:	f040 0101 	orr.w	r1, r0, #1
 8004702:	4638      	mov	r0, r7
 8004704:	f7fe f830 	bl	8002768 <writeMem>
		writeMem(Address, 	(uint32_t)Data);
 8004708:	4631      	mov	r1, r6
 800470a:	4620      	mov	r0, r4
 800470c:	f7fe f82c 	bl	8002768 <writeMem>
		writeMem(Address+4, (uint32_t)(Data>>32));
 8004710:	4629      	mov	r1, r5
 8004712:	1d20      	adds	r0, r4, #4
 8004714:	f7fe f828 	bl	8002768 <writeMem>
 8004718:	e7dd      	b.n	80046d6 <Stm32u0_Flash_Program+0x12>
 800471a:	bf00      	nop
 800471c:	40022014 	.word	0x40022014

08004720 <Stm32u0_Flash_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Lock(void)
{
 8004720:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	/* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
	tmp = readMem(STM32U0_FLASH_CR);
 8004722:	4c08      	ldr	r4, [pc, #32]	@ (8004744 <Stm32u0_Flash_OB_Lock+0x24>)
 8004724:	4620      	mov	r0, r4
 8004726:	f7fe f80d 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OPTLOCK|tmp);
 800472a:	f040 4180 	orr.w	r1, r0, #1073741824	@ 0x40000000
 800472e:	4620      	mov	r0, r4
 8004730:	f7fe f81a 	bl	8002768 <writeMem>

	/* verify option bytes are locked */
	tmp = readMem(STM32U0_FLASH_CR) & STM32U0_FLASH_CR_OPTLOCK;
 8004734:	4620      	mov	r0, r4
 8004736:	f7fe f805 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 800473a:	f080 4080 	eor.w	r0, r0, #1073741824	@ 0x40000000
  {
    status = TARGET_OK;
  }
	return status;
}
 800473e:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8004742:	bd10      	pop	{r4, pc}
 8004744:	40022014 	.word	0x40022014

08004748 <Stm32u0_Flash_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Unlock(void)
{
 8004748:	b510      	push	{r4, lr}
	bool status = TARGET_ERROR;
	uint32_t tmp = 0;

	tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_OPTLOCK;
 800474a:	480b      	ldr	r0, [pc, #44]	@ (8004778 <Stm32u0_Flash_OB_Unlock+0x30>)
 800474c:	f7fd fffa 	bl	8002744 <readMem>
	if(tmp != 0x00U)
 8004750:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8004754:	d101      	bne.n	800475a <Stm32u0_Flash_OB_Unlock+0x12>
	bool status = TARGET_ERROR;
 8004756:	2001      	movs	r0, #1
    {
      status = TARGET_OK;
    }
	}
	return status;
}
 8004758:	bd10      	pop	{r4, pc}
		writeMem(STM32U0_FLASH_OPTKEYR, STM32U0_FLASH_OPTKEY1);
 800475a:	4c08      	ldr	r4, [pc, #32]	@ (800477c <Stm32u0_Flash_OB_Unlock+0x34>)
 800475c:	4908      	ldr	r1, [pc, #32]	@ (8004780 <Stm32u0_Flash_OB_Unlock+0x38>)
 800475e:	4620      	mov	r0, r4
 8004760:	f7fe f802 	bl	8002768 <writeMem>
		writeMem(STM32U0_FLASH_OPTKEYR, STM32U0_FLASH_OPTKEY2);
 8004764:	4907      	ldr	r1, [pc, #28]	@ (8004784 <Stm32u0_Flash_OB_Unlock+0x3c>)
 8004766:	4620      	mov	r0, r4
 8004768:	f7fd fffe 	bl	8002768 <writeMem>
		tmp = readMem(STM32U0_FLASH_CR)& STM32U0_FLASH_CR_OPTLOCK;
 800476c:	4802      	ldr	r0, [pc, #8]	@ (8004778 <Stm32u0_Flash_OB_Unlock+0x30>)
 800476e:	f7fd ffe9 	bl	8002744 <readMem>
		if(tmp == 0x00U)
 8004772:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8004776:	e7ef      	b.n	8004758 <Stm32u0_Flash_OB_Unlock+0x10>
 8004778:	40022014 	.word	0x40022014
 800477c:	4002200c 	.word	0x4002200c
 8004780:	08192a3b 	.word	0x08192a3b
 8004784:	4c5d6e7f 	.word	0x4c5d6e7f

08004788 <Stm32u0_Flash_OB_GetUser>:
  *         @ref OB_USER_HSE_NOT_REMAPPED (*)
  *
  * @note   (*) available only on STM32C071xx devices.
  */
uint32_t Stm32u0_Flash_OB_GetUser(void)
{
 8004788:	b508      	push	{r3, lr}
	uint32_t tmp = 0;
	tmp = readMem(STM32U0_FLASH_OPTR);
 800478a:	4803      	ldr	r0, [pc, #12]	@ (8004798 <Stm32u0_Flash_OB_GetUser+0x10>)
 800478c:	f7fd ffda 	bl	8002744 <readMem>
 8004790:	4603      	mov	r3, r0
	uint32_t user = ((tmp & ~STM32U0_FLASH_OPTR_RDP) & STM32U0_OB_USER_ALL);
	return user;
}
 8004792:	4802      	ldr	r0, [pc, #8]	@ (800479c <Stm32u0_Flash_OB_GetUser+0x14>)
 8004794:	4018      	ands	r0, r3
 8004796:	bd08      	pop	{r3, pc}
 8004798:	40022020 	.word	0x40022020
 800479c:	3f4fff00 	.word	0x3f4fff00

080047a0 <Stm32u0_Flash_OB_OptrConfig>:
  * @retval None
  *
  * @note   (*) available only on STM32C071xx devices.
  */
void Stm32u0_Flash_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	4605      	mov	r5, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	4616      	mov	r6, r2
	uint32_t optr;
	uint32_t tmp = 0;;

	/* Configure the RDP level in the option bytes register */
	optr = readMem(STM32U0_FLASH_OPTR);
 80047a8:	4f06      	ldr	r7, [pc, #24]	@ (80047c4 <Stm32u0_Flash_OB_OptrConfig+0x24>)
 80047aa:	4638      	mov	r0, r7
 80047ac:	f7fd ffca 	bl	8002744 <readMem>
	optr &= ~(UserType | STM32U0_FLASH_OPTR_RDP);	// Clear old configurations.
 80047b0:	f045 05ff 	orr.w	r5, r5, #255	@ 0xff
 80047b4:	ea20 0105 	bic.w	r1, r0, r5
	tmp = optr | UserConfig | RDPLevel;				// Set new configurations.
 80047b8:	4334      	orrs	r4, r6
	writeMem(STM32U0_FLASH_OPTR, tmp);
 80047ba:	4321      	orrs	r1, r4
 80047bc:	4638      	mov	r0, r7
 80047be:	f7fd ffd3 	bl	8002768 <writeMem>
}
 80047c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c4:	40022020 	.word	0x40022020

080047c8 <Stm32u0_Flash_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */

void Stm32u0_Flash_OB_Launch(void)
{
 80047c8:	b510      	push	{r4, lr}
	uint32_t tmp = 0;

  /* Set the bit to force the option byte reloading */
	/* Option byte launch generates Option byte reset */
	tmp = readMem(STM32U0_FLASH_CR);
 80047ca:	4c05      	ldr	r4, [pc, #20]	@ (80047e0 <Stm32u0_Flash_OB_Launch+0x18>)
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7fd ffb9 	bl	8002744 <readMem>
	writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OBL_LAUNCH|tmp);
 80047d2:	f040 6100 	orr.w	r1, r0, #134217728	@ 0x8000000
 80047d6:	4620      	mov	r0, r4
 80047d8:	f7fd ffc6 	bl	8002768 <writeMem>
}
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	40022014 	.word	0x40022014

080047e4 <Stm32u0_Flash_OB_Program>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
bool Stm32u0_Flash_OB_Program(uint32_t RDPLevel)
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
	uint32_t optr;
	bool status;
	uint32_t tmp = 0;

	/* Only modify RDP so get current user data */
	optr = Stm32u0_Flash_OB_GetUser();
 80047e8:	f7ff ffce 	bl	8004788 <Stm32u0_Flash_OB_GetUser>
 80047ec:	4601      	mov	r1, r0
	Stm32u0_Flash_OB_OptrConfig(optr, optr, RDPLevel);
 80047ee:	4622      	mov	r2, r4
 80047f0:	f7ff ffd6 	bl	80047a0 <Stm32u0_Flash_OB_OptrConfig>

	/* Wait for last operation to be completed */
	status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 80047f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047f8:	f7ff ff0c 	bl	8004614 <Stm32u0_Flash_WaitOperation>

	if(status == TARGET_OK)
 80047fc:	4604      	mov	r4, r0
 80047fe:	b108      	cbz	r0, 8004804 <Stm32u0_Flash_OB_Program+0x20>
    tmp = readMem(STM32U0_FLASH_CR);
    writeMem(STM32U0_FLASH_CR, ~STM32U0_FLASH_CR_OPTSTRT&tmp);
	}

	return status;
}
 8004800:	4620      	mov	r0, r4
 8004802:	bd38      	pop	{r3, r4, r5, pc}
		tmp = readMem(STM32U0_FLASH_CR);
 8004804:	4d0b      	ldr	r5, [pc, #44]	@ (8004834 <Stm32u0_Flash_OB_Program+0x50>)
 8004806:	4628      	mov	r0, r5
 8004808:	f7fd ff9c 	bl	8002744 <readMem>
		writeMem(STM32U0_FLASH_CR, STM32U0_FLASH_CR_OPTSTRT|tmp);
 800480c:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8004810:	4628      	mov	r0, r5
 8004812:	f7fd ffa9 	bl	8002768 <writeMem>
    status = Stm32u0_Flash_WaitOperation(STM32U0_FLASH_TIMEOUT_VALUE);
 8004816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800481a:	f7ff fefb 	bl	8004614 <Stm32u0_Flash_WaitOperation>
 800481e:	4604      	mov	r4, r0
    tmp = readMem(STM32U0_FLASH_CR);
 8004820:	4628      	mov	r0, r5
 8004822:	f7fd ff8f 	bl	8002744 <readMem>
    writeMem(STM32U0_FLASH_CR, ~STM32U0_FLASH_CR_OPTSTRT&tmp);
 8004826:	f420 3100 	bic.w	r1, r0, #131072	@ 0x20000
 800482a:	4628      	mov	r0, r5
 800482c:	f7fd ff9c 	bl	8002768 <writeMem>
 8004830:	e7e6      	b.n	8004800 <Stm32u0_Flash_OB_Program+0x1c>
 8004832:	bf00      	nop
 8004834:	40022014 	.word	0x40022014

08004838 <FileTransferCheck_CheckCompletion>:

      // 전송 활성화 플래그 리셋 (다음 전송을 대기)
      transfer_active_flag = 0;
  }
#endif
}
 8004838:	4770      	bx	lr
	...

0800483c <Button_Update>:
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
#endif
}

void Button_Update(void)
{
 800483c:	b508      	push	{r3, lr}
    current_state = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN);
 800483e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004842:	4813      	ldr	r0, [pc, #76]	@ (8004890 <Button_Update+0x54>)
 8004844:	f001 fc74 	bl	8006130 <HAL_GPIO_ReadPin>
 8004848:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <Button_Update+0x58>)
 800484a:	7018      	strb	r0, [r3, #0]

    if (current_state != last_button_state)
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <Button_Update+0x5c>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4283      	cmp	r3, r0
 8004852:	d117      	bne.n	8004884 <Button_Update+0x48>
    {
        last_debounce_time = HAL_GetTick();
    }

    if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY_MS)
 8004854:	f001 f814 	bl	8005880 <HAL_GetTick>
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <Button_Update+0x60>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1ac0      	subs	r0, r0, r3
 800485e:	2814      	cmp	r0, #20
 8004860:	d90b      	bls.n	800487a <Button_Update+0x3e>
    {
        if (current_state != button_state)
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <Button_Update+0x58>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	4a0e      	ldr	r2, [pc, #56]	@ (80048a0 <Button_Update+0x64>)
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d005      	beq.n	800487a <Button_Update+0x3e>
        {
            button_state = current_state;
 800486e:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <Button_Update+0x64>)
 8004870:	7013      	strb	r3, [r2, #0]

            if (button_state == GPIO_PIN_RESET)
 8004872:	b913      	cbnz	r3, 800487a <Button_Update+0x3e>
            {
                button_pressed_event = 1;
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <Button_Update+0x68>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    last_button_state = current_state;
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <Button_Update+0x58>)
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <Button_Update+0x5c>)
 8004880:	701a      	strb	r2, [r3, #0]
}
 8004882:	bd08      	pop	{r3, pc}
        last_debounce_time = HAL_GetTick();
 8004884:	f000 fffc 	bl	8005880 <HAL_GetTick>
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <Button_Update+0x60>)
 800488a:	6018      	str	r0, [r3, #0]
 800488c:	e7e2      	b.n	8004854 <Button_Update+0x18>
 800488e:	bf00      	nop
 8004890:	40020000 	.word	0x40020000
 8004894:	2000c1cd 	.word	0x2000c1cd
 8004898:	20000034 	.word	0x20000034
 800489c:	2000c1d0 	.word	0x2000c1d0
 80048a0:	20000035 	.word	0x20000035
 80048a4:	2000c1cc 	.word	0x2000c1cc

080048a8 <Button_WasPressed>:

uint8_t Button_WasPressed(void)
{
    if (button_pressed_event)
 80048a8:	4b03      	ldr	r3, [pc, #12]	@ (80048b8 <Button_WasPressed+0x10>)
 80048aa:	7818      	ldrb	r0, [r3, #0]
 80048ac:	b900      	cbnz	r0, 80048b0 <Button_WasPressed+0x8>
    {
        button_pressed_event = 0;
        return 1;
    }
    return 0;
}
 80048ae:	4770      	bx	lr
        button_pressed_event = 0;
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
        return 1;
 80048b4:	2001      	movs	r0, #1
 80048b6:	e7fa      	b.n	80048ae <Button_WasPressed+0x6>
 80048b8:	2000c1cc 	.word	0x2000c1cc

080048bc <SetBuzzerFrequency>:
			break;
	}
	state = BUZZER_IDLE;
}

void SetBuzzerFrequency(uint32_t frequency) {
 80048bc:	b508      	push	{r3, lr}
    if (frequency > 0) {
 80048be:	b168      	cbz	r0, 80048dc <SetBuzzerFrequency+0x20>
        // 타이머 주기 계산: 타이머 클럭(1MHz)에서 원하는 주파수를 설정
        uint32_t period = (1000000 / frequency) - 1;
 80048c0:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <SetBuzzerFrequency+0x30>)
 80048c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80048c6:	3b01      	subs	r3, #1

        // 주기(ARR)를 설정하여 타이머의 PWM 주파수를 조정
        __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 80048c8:	4809      	ldr	r0, [pc, #36]	@ (80048f0 <SetBuzzerFrequency+0x34>)
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048ce:	60c3      	str	r3, [r0, #12]

        // 듀티 사이클을 50%로 설정 (부저가 50% 듀티에서 동작하도록)
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2);
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	63d3      	str	r3, [r2, #60]	@ 0x3c

        // 타이머 PWM 시작
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80048d4:	2108      	movs	r1, #8
 80048d6:	f004 fac3 	bl	8008e60 <HAL_TIM_PWM_Start>
    } else {
        // 주파수가 0이면 부저를 끕니다
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
    }
}
 80048da:	bd08      	pop	{r3, pc}
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0); // Turn off buzzer
 80048dc:	4804      	ldr	r0, [pc, #16]	@ (80048f0 <SetBuzzerFrequency+0x34>)
 80048de:	6803      	ldr	r3, [r0, #0]
 80048e0:	2200      	movs	r2, #0
 80048e2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80048e4:	2108      	movs	r1, #8
 80048e6:	f004 fb35 	bl	8008f54 <HAL_TIM_PWM_Stop>
}
 80048ea:	e7f6      	b.n	80048da <SetBuzzerFrequency+0x1e>
 80048ec:	000f4240 	.word	0x000f4240
 80048f0:	2000c384 	.word	0x2000c384

080048f4 <Buzzer_SetState>:
{
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(state)
 80048f6:	2804      	cmp	r0, #4
 80048f8:	d80e      	bhi.n	8004918 <Buzzer_SetState+0x24>
 80048fa:	e8df f000 	tbb	[pc, r0]
 80048fe:	0e03      	.short	0x0e03
 8004900:	2318      	.short	0x2318
 8004902:	38          	.byte	0x38
 8004903:	00          	.byte	0x00

void PlayBootSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 8004904:	200a      	movs	r0, #10
 8004906:	f7ff ffd9 	bl	80048bc <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(500);
 800490a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800490e:	f000 ffbd 	bl	800588c <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 8004912:	2000      	movs	r0, #0
 8004914:	f7ff ffd2 	bl	80048bc <SetBuzzerFrequency>
}
 8004918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

void PlayDuringProgrammingSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 800491a:	200a      	movs	r0, #10
 800491c:	f7ff ffce 	bl	80048bc <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(150);
 8004920:	2096      	movs	r0, #150	@ 0x96
 8004922:	f000 ffb3 	bl	800588c <HAL_Delay>

    /* Buzzer Off */
    SetBuzzerFrequency(0);
 8004926:	2000      	movs	r0, #0
 8004928:	f7ff ffc8 	bl	80048bc <SetBuzzerFrequency>
}
 800492c:	e7f4      	b.n	8004918 <Buzzer_SetState+0x24>

void PlayProgrammingCompleteSound(void)
{
		/* Set Frequency */
    SetBuzzerFrequency(DEFAULT_FREQ);
 800492e:	200a      	movs	r0, #10
 8004930:	f7ff ffc4 	bl	80048bc <SetBuzzerFrequency>

    /* Set Duration */
    HAL_Delay(300);
 8004934:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004938:	f000 ffa8 	bl	800588c <HAL_Delay>

    /* Set Frequency */
    SetBuzzerFrequency(0);
 800493c:	2000      	movs	r0, #0
 800493e:	f7ff ffbd 	bl	80048bc <SetBuzzerFrequency>

    /* Set Duration */
    //HAL_Delay(300);
}
 8004942:	e7e9      	b.n	8004918 <Buzzer_SetState+0x24>
	switch(state)
 8004944:	2405      	movs	r4, #5
void PlayProgrammingFailedSound(void){

    for (uint8_t i = 0; i < 5; i++)
    {
    		/* Set Frequency */
        SetBuzzerFrequency(DEFAULT_FREQ);
 8004946:	270a      	movs	r7, #10

        /* Set Duration */
        HAL_Delay(150);
 8004948:	2596      	movs	r5, #150	@ 0x96

        /* Buzzer Off */
        SetBuzzerFrequency(0);
 800494a:	2600      	movs	r6, #0
        SetBuzzerFrequency(DEFAULT_FREQ);
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff ffb5 	bl	80048bc <SetBuzzerFrequency>
        HAL_Delay(150);
 8004952:	4628      	mov	r0, r5
 8004954:	f000 ff9a 	bl	800588c <HAL_Delay>
        SetBuzzerFrequency(0);
 8004958:	4630      	mov	r0, r6
 800495a:	f7ff ffaf 	bl	80048bc <SetBuzzerFrequency>

        /* Set Duration */
        HAL_Delay(150);
 800495e:	4628      	mov	r0, r5
 8004960:	f000 ff94 	bl	800588c <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 8004964:	1e63      	subs	r3, r4, #1
 8004966:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 800496a:	d1ef      	bne.n	800494c <Buzzer_SetState+0x58>
 800496c:	e7d4      	b.n	8004918 <Buzzer_SetState+0x24>
}

void PlayIdleSound(void)
{
    // No sound during idle
    SetBuzzerFrequency(0);
 800496e:	2000      	movs	r0, #0
 8004970:	f7ff ffa4 	bl	80048bc <SetBuzzerFrequency>
}
 8004974:	e7d0      	b.n	8004918 <Buzzer_SetState+0x24>
	...

08004978 <ihex_reset_state>:
}
#endif

void ihex_reset_state()
{
    state = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	4a04      	ldr	r2, [pc, #16]	@ (800498c <ihex_reset_state+0x14>)
 800497c:	7013      	strb	r3, [r2, #0]
    address_lo = 0;
 800497e:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <ihex_reset_state+0x18>)
 8004980:	8013      	strh	r3, [r2, #0]
    address_hi = 0;
 8004982:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <ihex_reset_state+0x1c>)
 8004984:	8013      	strh	r3, [r2, #0]
    ex_segment_addr_mode = false;
 8004986:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <ihex_reset_state+0x20>)
 8004988:	7013      	strb	r3, [r2, #0]
}
 800498a:	4770      	bx	lr
 800498c:	2000c2e7 	.word	0x2000c2e7
 8004990:	2000c2e4 	.word	0x2000c2e4
 8004994:	2000c2e2 	.word	0x2000c2e2
 8004998:	2000c2e0 	.word	0x2000c2e0

0800499c <ihex_set_callback_func>:

void ihex_set_callback_func(ihex_callback_fp fp)
{
    callback_fp = fp;
 800499c:	4b01      	ldr	r3, [pc, #4]	@ (80049a4 <ihex_set_callback_func+0x8>)
 800499e:	6018      	str	r0, [r3, #0]
}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	2000c1d4 	.word	0x2000c1d4

080049a8 <ihex_parser>:
bool ihex_parser(const uint8_t *steambuf, uint32_t size)
{
    uint32_t i;
    uint8_t c, hc;
    
    for (i = 0; i<size; i++)
 80049a8:	2900      	cmp	r1, #0
 80049aa:	f000 8109 	beq.w	8004bc0 <ihex_parser+0x218>
{
 80049ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b2:	1e44      	subs	r4, r0, #1
 80049b4:	4408      	add	r0, r1
 80049b6:	1e45      	subs	r5, r0, #1
        if (c == '\0')
        {
            return true;
        }

        if (state == START_CODE_STATE)
 80049b8:	4f8c      	ldr	r7, [pc, #560]	@ (8004bec <ihex_parser+0x244>)
            if ((hc = HexToDec(c)) == INVALID_HEX_CHAR)
            {
                return false;
            }

            if (!calc_cs_toogle)
 80049ba:	4e8d      	ldr	r6, [pc, #564]	@ (8004bf0 <ihex_parser+0x248>)
            calc_cs = 0x00;
 80049bc:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8004c08 <ihex_parser+0x260>
 80049c0:	e048      	b.n	8004a54 <ihex_parser+0xac>
        else if (state >= BYTE_COUNT_0_STATE && state <= CHECKSUM_1_STATE)
 80049c2:	1e59      	subs	r1, r3, #1
 80049c4:	b2c9      	uxtb	r1, r1
 80049c6:	290a      	cmp	r1, #10
 80049c8:	f200 80fe 	bhi.w	8004bc8 <ihex_parser+0x220>
    if (h >= '0' && h <= '9')
 80049cc:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
 80049d0:	b2c0      	uxtb	r0, r0
 80049d2:	2809      	cmp	r0, #9
 80049d4:	d90d      	bls.n	80049f2 <ihex_parser+0x4a>
    else if (h >= 'A' && h <= 'F')
 80049d6:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 80049da:	b2c9      	uxtb	r1, r1
 80049dc:	2905      	cmp	r1, #5
 80049de:	d91c      	bls.n	8004a1a <ihex_parser+0x72>
    else if (h >= 'a' && h <= 'z')
 80049e0:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 80049e4:	b2c9      	uxtb	r1, r1
 80049e6:	2919      	cmp	r1, #25
 80049e8:	f200 80f1 	bhi.w	8004bce <ihex_parser+0x226>
        return h - 'a' + 0xA;
 80049ec:	f1a2 0057 	sub.w	r0, r2, #87	@ 0x57
 80049f0:	b2c0      	uxtb	r0, r0
            if (!calc_cs_toogle)
 80049f2:	7831      	ldrb	r1, [r6, #0]
 80049f4:	b9a9      	cbnz	r1, 8004a22 <ihex_parser+0x7a>
            {
                temp_cs = hc;
 80049f6:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8004c1c <ihex_parser+0x274>
 80049fa:	f88c 0000 	strb.w	r0, [ip]
            }
            else
            {
                calc_cs += (temp_cs << 4) | hc;
            }
            calc_cs_toogle = !calc_cs_toogle;
 80049fe:	f081 0101 	eor.w	r1, r1, #1
 8004a02:	7031      	strb	r1, [r6, #0]
        }

        switch (state)
 8004a04:	2b0b      	cmp	r3, #11
 8004a06:	f200 80e4 	bhi.w	8004bd2 <ihex_parser+0x22a>
 8004a0a:	e8df f003 	tbb	[pc, r3]
 8004a0e:	182e      	.short	0x182e
 8004a10:	4c4c4c18 	.word	0x4c4c4c18
 8004a14:	6c5c554c 	.word	0x6c5c554c
 8004a18:	8884      	.short	0x8884
        return h - 'A' + 0xA;
 8004a1a:	f1a2 0037 	sub.w	r0, r2, #55	@ 0x37
 8004a1e:	b2c0      	uxtb	r0, r0
 8004a20:	e7e7      	b.n	80049f2 <ihex_parser+0x4a>
                calc_cs += (temp_cs << 4) | hc;
 8004a22:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8004c08 <ihex_parser+0x260>
 8004a26:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 8004c1c <ihex_parser+0x274>
 8004a2a:	f89c c000 	ldrb.w	ip, [ip]
 8004a2e:	ea40 1c0c 	orr.w	ip, r0, ip, lsl #4
 8004a32:	f89e 9000 	ldrb.w	r9, [lr]
 8004a36:	44cc      	add	ip, r9
 8004a38:	f88e c000 	strb.w	ip, [lr]
 8004a3c:	e7df      	b.n	80049fe <ihex_parser+0x56>
            }
            break;

        case BYTE_COUNT_0_STATE:
        case BYTE_COUNT_1_STATE:
            byte_count = (byte_count << 4) | hc;
 8004a3e:	496d      	ldr	r1, [pc, #436]	@ (8004bf4 <ihex_parser+0x24c>)
 8004a40:	780a      	ldrb	r2, [r1, #0]
 8004a42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004a46:	700a      	strb	r2, [r1, #0]
            ++state;
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a68      	ldr	r2, [pc, #416]	@ (8004bec <ihex_parser+0x244>)
 8004a4c:	7013      	strb	r3, [r2, #0]
    for (i = 0; i<size; i++)
 8004a4e:	42ac      	cmp	r4, r5
 8004a50:	f000 80b4 	beq.w	8004bbc <ihex_parser+0x214>
        c = steambuf[i];
 8004a54:	f814 2f01 	ldrb.w	r2, [r4, #1]!
        if (c == '\0')
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	f000 80b3 	beq.w	8004bc4 <ihex_parser+0x21c>
        if (state == START_CODE_STATE)
 8004a5e:	783b      	ldrb	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ae      	bne.n	80049c2 <ihex_parser+0x1a>
            calc_cs = 0x00;
 8004a64:	f888 3000 	strb.w	r3, [r8]
            calc_cs_toogle = false;
 8004a68:	7033      	strb	r3, [r6, #0]
            if (c == '\r' || c == '\n')
 8004a6a:	2a0d      	cmp	r2, #13
 8004a6c:	d0ef      	beq.n	8004a4e <ihex_parser+0xa6>
 8004a6e:	2a0a      	cmp	r2, #10
 8004a70:	d0ed      	beq.n	8004a4e <ihex_parser+0xa6>
            else if (c == ':')
 8004a72:	2a3a      	cmp	r2, #58	@ 0x3a
 8004a74:	f040 80af 	bne.w	8004bd6 <ihex_parser+0x22e>
                byte_count = 0;
 8004a78:	f04f 0900 	mov.w	r9, #0
 8004a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf4 <ihex_parser+0x24c>)
 8004a7e:	f883 9000 	strb.w	r9, [r3]
                record_type = 0;
 8004a82:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf8 <ihex_parser+0x250>)
 8004a84:	f883 9000 	strb.w	r9, [r3]
                address_lo = 0x0000;
 8004a88:	4b5c      	ldr	r3, [pc, #368]	@ (8004bfc <ihex_parser+0x254>)
 8004a8a:	f8a3 9000 	strh.w	r9, [r3]
                memset(data, 0xFF, sizeof(data));
 8004a8e:	22ff      	movs	r2, #255	@ 0xff
 8004a90:	4611      	mov	r1, r2
 8004a92:	485b      	ldr	r0, [pc, #364]	@ (8004c00 <ihex_parser+0x258>)
 8004a94:	f00a fd7e 	bl	800f594 <memset>
                data_size_in_nibble = 0;
 8004a98:	4b5a      	ldr	r3, [pc, #360]	@ (8004c04 <ihex_parser+0x25c>)
 8004a9a:	f8a3 9000 	strh.w	r9, [r3]
                ++state;
 8004a9e:	4b53      	ldr	r3, [pc, #332]	@ (8004bec <ihex_parser+0x244>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
            break;
 8004aa4:	e7d3      	b.n	8004a4e <ihex_parser+0xa6>
        case ADDR_0_STATE:
        case ADDR_1_STATE:
        case ADDR_2_STATE:
        case ADDR_3_STATE:
        {
            address_lo = ((address_lo << 4) | hc);   // only alter lower 16-bit address
 8004aa6:	4955      	ldr	r1, [pc, #340]	@ (8004bfc <ihex_parser+0x254>)
 8004aa8:	880a      	ldrh	r2, [r1, #0]
 8004aaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004aae:	800a      	strh	r2, [r1, #0]
            ++state;
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	4a4e      	ldr	r2, [pc, #312]	@ (8004bec <ihex_parser+0x244>)
 8004ab4:	7013      	strb	r3, [r2, #0]
            break;
 8004ab6:	e7ca      	b.n	8004a4e <ihex_parser+0xa6>
        }
        
        case RECORD_TYPE_0_STATE:
            if (hc != 0)
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f040 808e 	bne.w	8004bda <ihex_parser+0x232>
            {
                return false;
            }
            ++state;
 8004abe:	4b4b      	ldr	r3, [pc, #300]	@ (8004bec <ihex_parser+0x244>)
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	701a      	strb	r2, [r3, #0]
            break;
 8004ac4:	e7c3      	b.n	8004a4e <ihex_parser+0xa6>

        case RECORD_TYPE_1_STATE:
            if (hc > 5)
 8004ac6:	2805      	cmp	r0, #5
 8004ac8:	f200 8089 	bhi.w	8004bde <ihex_parser+0x236>
            {
                return false;
            }
            
            record_type = hc;
 8004acc:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf8 <ihex_parser+0x250>)
 8004ace:	7018      	strb	r0, [r3, #0]

            if (byte_count == 0)
 8004ad0:	4b48      	ldr	r3, [pc, #288]	@ (8004bf4 <ihex_parser+0x24c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b91b      	cbnz	r3, 8004ade <ihex_parser+0x136>
            {
                state = CHECKSUM_0_STATE;
 8004ad6:	4b45      	ldr	r3, [pc, #276]	@ (8004bec <ihex_parser+0x244>)
 8004ad8:	220a      	movs	r2, #10
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e7b7      	b.n	8004a4e <ihex_parser+0xa6>
            {
                return false;
            }
            else
            {
                ++state;
 8004ade:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <ihex_parser+0x244>)
 8004ae0:	2209      	movs	r2, #9
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e7b3      	b.n	8004a4e <ihex_parser+0xa6>

            break;

        case DATA_STATE:
        {
            uint8_t b_index = data_size_in_nibble >> 1;
 8004ae6:	4947      	ldr	r1, [pc, #284]	@ (8004c04 <ihex_parser+0x25c>)
 8004ae8:	880b      	ldrh	r3, [r1, #0]
            data[b_index] = (data[b_index] << 4) | hc;
 8004aea:	f3c3 0c47 	ubfx	ip, r3, #1, #8
 8004aee:	f8df e110 	ldr.w	lr, [pc, #272]	@ 8004c00 <ihex_parser+0x258>
 8004af2:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8004af6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004afa:	f80e 200c 	strb.w	r2, [lr, ip]

            ++data_size_in_nibble;
 8004afe:	3301      	adds	r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	800b      	strh	r3, [r1, #0]
            if ((data_size_in_nibble >> 1) >= byte_count)
 8004b04:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf4 <ihex_parser+0x24c>)
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8004b0c:	d89f      	bhi.n	8004a4e <ihex_parser+0xa6>
            {
                ++state;
 8004b0e:	4b37      	ldr	r3, [pc, #220]	@ (8004bec <ihex_parser+0x244>)
 8004b10:	220a      	movs	r2, #10
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e79b      	b.n	8004a4e <ihex_parser+0xa6>
            }
            break;
        }
        
        case CHECKSUM_0_STATE:
            ++state;
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <ihex_parser+0x244>)
 8004b18:	220b      	movs	r2, #11
 8004b1a:	701a      	strb	r2, [r3, #0]
            break;
 8004b1c:	e797      	b.n	8004a4e <ihex_parser+0xa6>

        case CHECKSUM_1_STATE:
            if((byte_count<<1) != data_size_in_nibble)  // Check whether byte count field match the data size 
 8004b1e:	4b39      	ldr	r3, [pc, #228]	@ (8004c04 <ihex_parser+0x25c>)
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	4b34      	ldr	r3, [pc, #208]	@ (8004bf4 <ihex_parser+0x24c>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8004b2a:	d15a      	bne.n	8004be2 <ihex_parser+0x23a>
            {
                return false;
            }
            
            if (calc_cs != 0x00)
 8004b2c:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <ihex_parser+0x260>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d158      	bne.n	8004be6 <ihex_parser+0x23e>
            {
                return false;
            }

            if (record_type == 2)           // Set extended segment addresss
 8004b34:	4b30      	ldr	r3, [pc, #192]	@ (8004bf8 <ihex_parser+0x250>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d019      	beq.n	8004b70 <ihex_parser+0x1c8>
            {
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
                ex_segment_addr_mode = true;
            }
            else if (record_type == 4)      // Set linear addresss
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d022      	beq.n	8004b86 <ihex_parser+0x1de>

#if (CONFIG_IHEX_DEBUG_OUTPUT > 0u)
            ihex_debug_output();
#endif

            if (record_type == 0 && callback_fp != 0)
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d12e      	bne.n	8004ba2 <ihex_parser+0x1fa>
 8004b44:	4b31      	ldr	r3, [pc, #196]	@ (8004c0c <ihex_parser+0x264>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	b173      	cbz	r3, 8004b68 <ihex_parser+0x1c0>
            {
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8004b4a:	4931      	ldr	r1, [pc, #196]	@ (8004c10 <ihex_parser+0x268>)
 8004b4c:	7809      	ldrb	r1, [r1, #0]
 8004b4e:	b309      	cbz	r1, 8004b94 <ihex_parser+0x1ec>
 8004b50:	4930      	ldr	r1, [pc, #192]	@ (8004c14 <ihex_parser+0x26c>)
 8004b52:	8809      	ldrh	r1, [r1, #0]
 8004b54:	4829      	ldr	r0, [pc, #164]	@ (8004bfc <ihex_parser+0x254>)
 8004b56:	8800      	ldrh	r0, [r0, #0]
 8004b58:	eb00 1001 	add.w	r0, r0, r1, lsl #4
                if(!callback_fp(address, data, data_size_in_nibble>>1))
 8004b5c:	f3c2 0247 	ubfx	r2, r2, #1, #8
 8004b60:	4927      	ldr	r1, [pc, #156]	@ (8004c00 <ihex_parser+0x258>)
 8004b62:	4798      	blx	r3
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d030      	beq.n	8004bca <ihex_parser+0x222>
            {
            	callback_fp(0,0,0);
            }


            state = START_CODE_STATE;
 8004b68:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <ihex_parser+0x244>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
            break;
 8004b6e:	e76e      	b.n	8004a4e <ihex_parser+0xa6>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8004b70:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <ihex_parser+0x258>)
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                ex_segment_addr_mode = true;
 8004b7a:	2201      	movs	r2, #1
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8004b7c:	4925      	ldr	r1, [pc, #148]	@ (8004c14 <ihex_parser+0x26c>)
 8004b7e:	800b      	strh	r3, [r1, #0]
                ex_segment_addr_mode = false;
 8004b80:	4b23      	ldr	r3, [pc, #140]	@ (8004c10 <ihex_parser+0x268>)
 8004b82:	701a      	strb	r2, [r3, #0]
            if (record_type == 0 && callback_fp != 0)
 8004b84:	e7f0      	b.n	8004b68 <ihex_parser+0x1c0>
                address_hi = ((uint16_t)data[0] << 8) | (data[1]);
 8004b86:	4b1e      	ldr	r3, [pc, #120]	@ (8004c00 <ihex_parser+0x258>)
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b90:	2200      	movs	r2, #0
 8004b92:	e7f3      	b.n	8004b7c <ihex_parser+0x1d4>
                uint32_t address = TRANSFORM_ADDR(address_hi, address_lo);
 8004b94:	491f      	ldr	r1, [pc, #124]	@ (8004c14 <ihex_parser+0x26c>)
 8004b96:	8809      	ldrh	r1, [r1, #0]
 8004b98:	4818      	ldr	r0, [pc, #96]	@ (8004bfc <ihex_parser+0x254>)
 8004b9a:	8800      	ldrh	r0, [r0, #0]
 8004b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004ba0:	e7dc      	b.n	8004b5c <ihex_parser+0x1b4>
            else if((record_type == 1) && (target.TargetFamily == TARGET_STM32H7)) //Add for STM32H7, hex 'End Of File' 32byte(8word) programming unit
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d1e0      	bne.n	8004b68 <ihex_parser+0x1c0>
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c18 <ihex_parser+0x270>)
 8004ba8:	7a1b      	ldrb	r3, [r3, #8]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d1dc      	bne.n	8004b68 <ihex_parser+0x1c0>
            	callback_fp(0,0,0);
 8004bae:	4b17      	ldr	r3, [pc, #92]	@ (8004c0c <ihex_parser+0x264>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4798      	blx	r3
 8004bba:	e7d5      	b.n	8004b68 <ihex_parser+0x1c0>

        default:
            return false;
        }
    }
    return true;
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e004      	b.n	8004bca <ihex_parser+0x222>
 8004bc0:	2001      	movs	r0, #1
}
 8004bc2:	4770      	bx	lr
            return true;
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	e000      	b.n	8004bca <ihex_parser+0x222>
            return false;
 8004bc8:	2000      	movs	r0, #0
}
 8004bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return false;
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e7fb      	b.n	8004bca <ihex_parser+0x222>
        switch (state)
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e7f9      	b.n	8004bca <ihex_parser+0x222>
                return false;
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e7f7      	b.n	8004bca <ihex_parser+0x222>
                return false;
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e7f5      	b.n	8004bca <ihex_parser+0x222>
                return false;
 8004bde:	2000      	movs	r0, #0
 8004be0:	e7f3      	b.n	8004bca <ihex_parser+0x222>
                return false;
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7f1      	b.n	8004bca <ihex_parser+0x222>
                return false;
 8004be6:	2000      	movs	r0, #0
 8004be8:	e7ef      	b.n	8004bca <ihex_parser+0x222>
 8004bea:	bf00      	nop
 8004bec:	2000c2e7 	.word	0x2000c2e7
 8004bf0:	2000c1d8 	.word	0x2000c1d8
 8004bf4:	2000c2e6 	.word	0x2000c2e6
 8004bf8:	2000c2df 	.word	0x2000c2df
 8004bfc:	2000c2e4 	.word	0x2000c2e4
 8004c00:	2000c1e0 	.word	0x2000c1e0
 8004c04:	2000c1dc 	.word	0x2000c1dc
 8004c08:	2000c1d9 	.word	0x2000c1d9
 8004c0c:	2000c1d4 	.word	0x2000c1d4
 8004c10:	2000c2e0 	.word	0x2000c2e0
 8004c14:	2000c2e2 	.word	0x2000c2e2
 8004c18:	2000c1b0 	.word	0x2000c1b0
 8004c1c:	2000c1da 	.word	0x2000c1da

08004c20 <LED_On>:
// LED 제어 함수
void LED_Toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
}

void LED_On(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004c20:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8004c22:	2200      	movs	r2, #0
 8004c24:	f001 fa8a 	bl	800613c <HAL_GPIO_WritePin>
}
 8004c28:	bd08      	pop	{r3, pc}

08004c2a <LED_Off>:

void LED_Off(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8004c2a:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f001 fa85 	bl	800613c <HAL_GPIO_WritePin>
}
 8004c32:	bd08      	pop	{r3, pc}

08004c34 <LED_HandleBootState>:

// Boot 상태 처리 함수
void LED_HandleBootState(uint32_t *counter, uint8_t *step)
{
 8004c34:	b538      	push	{r3, r4, r5, lr}
    if (*counter >= LED_TOGGLE_INTERVAL * 2)
 8004c36:	6803      	ldr	r3, [r0, #0]
 8004c38:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004c3c:	d319      	bcc.n	8004c72 <LED_HandleBootState+0x3e>
 8004c3e:	460c      	mov	r4, r1
    {
        *counter = 0; // 카운터 초기화
 8004c40:	2300      	movs	r3, #0
 8004c42:	6003      	str	r3, [r0, #0]

        switch (*step)
 8004c44:	780b      	ldrb	r3, [r1, #0]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d83e      	bhi.n	8004cc8 <LED_HandleBootState+0x94>
 8004c4a:	e8df f003 	tbb	[pc, r3]
 8004c4e:	1302      	.short	0x1302
 8004c50:	2f21      	.short	0x2f21
        {
            case 0:
                LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004c52:	4d1f      	ldr	r5, [pc, #124]	@ (8004cd0 <LED_HandleBootState+0x9c>)
 8004c54:	2104      	movs	r1, #4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f7ff ffe2 	bl	8004c20 <LED_On>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004c5c:	2108      	movs	r1, #8
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f7ff ffe3 	bl	8004c2a <LED_Off>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004c64:	2110      	movs	r1, #16
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff ffdf 	bl	8004c2a <LED_Off>
            default:
                *step = 0; // 마지막 단계 이후 초기화
                return;
        }

        (*step)++;
 8004c6c:	7823      	ldrb	r3, [r4, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	7023      	strb	r3, [r4, #0]
    }
}
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
                LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004c74:	4d16      	ldr	r5, [pc, #88]	@ (8004cd0 <LED_HandleBootState+0x9c>)
 8004c76:	2104      	movs	r1, #4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7ff ffd6 	bl	8004c2a <LED_Off>
                LED_On(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004c7e:	2108      	movs	r1, #8
 8004c80:	4628      	mov	r0, r5
 8004c82:	f7ff ffcd 	bl	8004c20 <LED_On>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004c86:	2110      	movs	r1, #16
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f7ff ffce 	bl	8004c2a <LED_Off>
                break;
 8004c8e:	e7ed      	b.n	8004c6c <LED_HandleBootState+0x38>
                LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004c90:	4d0f      	ldr	r5, [pc, #60]	@ (8004cd0 <LED_HandleBootState+0x9c>)
 8004c92:	2104      	movs	r1, #4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f7ff ffc8 	bl	8004c2a <LED_Off>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004c9a:	2108      	movs	r1, #8
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f7ff ffc4 	bl	8004c2a <LED_Off>
                LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7ff ffbb 	bl	8004c20 <LED_On>
                break;
 8004caa:	e7df      	b.n	8004c6c <LED_HandleBootState+0x38>
                LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004cac:	4d08      	ldr	r5, [pc, #32]	@ (8004cd0 <LED_HandleBootState+0x9c>)
 8004cae:	2104      	movs	r1, #4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff ffb5 	bl	8004c20 <LED_On>
                LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004cb6:	2108      	movs	r1, #8
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7ff ffb6 	bl	8004c2a <LED_Off>
                LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff ffb2 	bl	8004c2a <LED_Off>
                break;
 8004cc6:	e7d1      	b.n	8004c6c <LED_HandleBootState+0x38>
                *step = 0; // 마지막 단계 이후 초기화
 8004cc8:	2300      	movs	r3, #0
 8004cca:	700b      	strb	r3, [r1, #0]
                return;
 8004ccc:	e7d1      	b.n	8004c72 <LED_HandleBootState+0x3e>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <LED_HandleProgrammingState>:

// Programming 상태 처리 함수
void LED_HandleProgrammingState(uint32_t counter)
{
 8004cd4:	b510      	push	{r4, lr}
    if (counter % 100 == 0) // 빠른 토글 주기
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <LED_HandleProgrammingState+0x38>)
 8004cd8:	fba3 2300 	umull	r2, r3, r3, r0
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	2264      	movs	r2, #100	@ 0x64
 8004ce0:	fb02 0013 	mls	r0, r2, r3, r0
 8004ce4:	b148      	cbz	r0, 8004cfa <LED_HandleProgrammingState+0x26>
    {
        LED_Toggle(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
    }

    LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004ce6:	4c0a      	ldr	r4, [pc, #40]	@ (8004d10 <LED_HandleProgrammingState+0x3c>)
 8004ce8:	2104      	movs	r1, #4
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7ff ff9d 	bl	8004c2a <LED_Off>
    LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7ff ff99 	bl	8004c2a <LED_Off>
}
 8004cf8:	bd10      	pop	{r4, pc}
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8004cfa:	2108      	movs	r1, #8
 8004cfc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8004d00:	f500 3004 	add.w	r0, r0, #135168	@ 0x21000
 8004d04:	f001 fa20 	bl	8006148 <HAL_GPIO_TogglePin>
}
 8004d08:	e7ed      	b.n	8004ce6 <LED_HandleProgrammingState+0x12>
 8004d0a:	bf00      	nop
 8004d0c:	51eb851f 	.word	0x51eb851f
 8004d10:	40021000 	.word	0x40021000

08004d14 <LED_HandleCompleteState>:

// Complete 상태 처리 함수
void LED_HandleCompleteState(void)
{
 8004d14:	b510      	push	{r4, lr}
    LED_On(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004d16:	4c07      	ldr	r4, [pc, #28]	@ (8004d34 <LED_HandleCompleteState+0x20>)
 8004d18:	2104      	movs	r1, #4
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7ff ff80 	bl	8004c20 <LED_On>
    LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004d20:	2108      	movs	r1, #8
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff ff81 	bl	8004c2a <LED_Off>
    LED_Off(LED_RED_GPIO_Port, LED_RED_Pin);
 8004d28:	2110      	movs	r1, #16
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff ff7d 	bl	8004c2a <LED_Off>
}
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <LED_HandleFailedState>:

// Failed 상태 처리 함수
void LED_HandleFailedState(void)
{
 8004d38:	b510      	push	{r4, lr}
    LED_Off(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004d3a:	4c07      	ldr	r4, [pc, #28]	@ (8004d58 <LED_HandleFailedState+0x20>)
 8004d3c:	2104      	movs	r1, #4
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff ff73 	bl	8004c2a <LED_Off>
    LED_Off(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8004d44:	2108      	movs	r1, #8
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff ff6f 	bl	8004c2a <LED_Off>
    LED_On(LED_RED_GPIO_Port, LED_RED_Pin);
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7ff ff66 	bl	8004c20 <LED_On>
}
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000

08004d5c <LED_Handler>:

// SysTick 인터럽트 핸들러
void LED_Handler(void)
{
 8004d5c:	b510      	push	{r4, lr}
    static uint32_t counter = 0;
    static uint8_t step = 0; // LED 순차적 제어를 위한 단계 변수
    static bool bootCompleted = false; // BOOT 상태 완료 여부

    counter += SYS_TICK_PERIOD_MS;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <LED_Handler+0x50>)
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	3001      	adds	r0, #1
 8004d64:	6018      	str	r0, [r3, #0]

    switch (currentState)
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <LED_Handler+0x54>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d817      	bhi.n	8004d9e <LED_Handler+0x42>
 8004d6e:	e8df f003 	tbb	[pc, r3]
 8004d72:	1402      	.short	0x1402
 8004d74:	1a17      	.short	0x1a17
    {
        case TARGET_LED_STAT_BOOT:
            if (!bootCompleted)
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <LED_Handler+0x58>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b983      	cbnz	r3, 8004d9e <LED_Handler+0x42>
            {
                // BOOT 상태 처리
            	LED_HandleBootState(&counter, &step);
 8004d7c:	4c0e      	ldr	r4, [pc, #56]	@ (8004db8 <LED_Handler+0x5c>)
 8004d7e:	4621      	mov	r1, r4
 8004d80:	480a      	ldr	r0, [pc, #40]	@ (8004dac <LED_Handler+0x50>)
 8004d82:	f7ff ff57 	bl	8004c34 <LED_HandleBootState>

                // BOOT 상태 완료 시 COMPLETE로 전환
                if (step > 3) // 모든 단계 완료
 8004d86:	7823      	ldrb	r3, [r4, #0]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d908      	bls.n	8004d9e <LED_Handler+0x42>
                {
                    currentState = TARGET_LED_STAT_COMPLETE; // 상태 변경
 8004d8c:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <LED_Handler+0x54>)
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
                    bootCompleted = true; // BOOT 완료 플래그 설정
 8004d92:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <LED_Handler+0x58>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e001      	b.n	8004d9e <LED_Handler+0x42>
                }
            }
            break;

        case TARGET_LED_STAT_PROGRAMMING:
        		LED_HandleProgrammingState(counter);
 8004d9a:	f7ff ff9b 	bl	8004cd4 <LED_HandleProgrammingState>
            break;

        default:
            break;
    }
}
 8004d9e:	bd10      	pop	{r4, pc}
        		LED_HandleCompleteState();
 8004da0:	f7ff ffb8 	bl	8004d14 <LED_HandleCompleteState>
            break;
 8004da4:	e7fb      	b.n	8004d9e <LED_Handler+0x42>
        		LED_HandleFailedState();
 8004da6:	f7ff ffc7 	bl	8004d38 <LED_HandleFailedState>
}
 8004daa:	e7f8      	b.n	8004d9e <LED_Handler+0x42>
 8004dac:	2000c2ec 	.word	0x2000c2ec
 8004db0:	2000c2f0 	.word	0x2000c2f0
 8004db4:	2000c2e9 	.word	0x2000c2e9
 8004db8:	2000c2e8 	.word	0x2000c2e8

08004dbc <LED_SetState>:

void LED_SetState(LedStatus status)
{
	currentState = status;
 8004dbc:	4b01      	ldr	r3, [pc, #4]	@ (8004dc4 <LED_SetState+0x8>)
 8004dbe:	7018      	strb	r0, [r3, #0]
}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	2000c2f0 	.word	0x2000c2f0

08004dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error_Handle()\n");
 8004dca:	4802      	ldr	r0, [pc, #8]	@ (8004dd4 <Error_Handler+0xc>)
 8004dcc:	f00a fa90 	bl	800f2f0 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd0:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dd2:	e7fe      	b.n	8004dd2 <Error_Handler+0xa>
 8004dd4:	080126c0 	.word	0x080126c0

08004dd8 <SystemClock_Config>:
{
 8004dd8:	b500      	push	{lr}
 8004dda:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ddc:	2230      	movs	r2, #48	@ 0x30
 8004dde:	2100      	movs	r1, #0
 8004de0:	a808      	add	r0, sp, #32
 8004de2:	f00a fbd7 	bl	800f594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004de6:	2300      	movs	r3, #0
 8004de8:	9303      	str	r3, [sp, #12]
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	9306      	str	r3, [sp, #24]
 8004df0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <SystemClock_Config+0xa4>)
 8004df6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8004df8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004dfc:	6411      	str	r1, [r2, #64]	@ 0x40
 8004dfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e00:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004e04:	9201      	str	r2, [sp, #4]
 8004e06:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <SystemClock_Config+0xa8>)
 8004e0c:	6813      	ldr	r3, [r2, #0]
 8004e0e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e1e:	9302      	str	r3, [sp, #8]
 8004e20:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e2a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004e34:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e36:	2204      	movs	r2, #4
 8004e38:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004e3a:	2278      	movs	r2, #120	@ 0x78
 8004e3c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e3e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004e40:	2305      	movs	r3, #5
 8004e42:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e44:	a808      	add	r0, sp, #32
 8004e46:	f001 ffad 	bl	8006da4 <HAL_RCC_OscConfig>
 8004e4a:	b998      	cbnz	r0, 8004e74 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e50:	2302      	movs	r3, #2
 8004e52:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e54:	2300      	movs	r3, #0
 8004e56:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004e5c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e62:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004e64:	2103      	movs	r1, #3
 8004e66:	a803      	add	r0, sp, #12
 8004e68:	f002 fa06 	bl	8007278 <HAL_RCC_ClockConfig>
 8004e6c:	b920      	cbnz	r0, 8004e78 <SystemClock_Config+0xa0>
}
 8004e6e:	b015      	add	sp, #84	@ 0x54
 8004e70:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e74:	f7ff ffa8 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8004e78:	f7ff ffa6 	bl	8004dc8 <Error_Handler>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000

08004e84 <main>:
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b09c      	sub	sp, #112	@ 0x70
   HAL_Init();
 8004e88:	f000 fcd4 	bl	8005834 <HAL_Init>
  SystemClock_Config();
 8004e8c:	f7ff ffa4 	bl	8004dd8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e90:	2400      	movs	r4, #0
 8004e92:	9414      	str	r4, [sp, #80]	@ 0x50
 8004e94:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e96:	9416      	str	r4, [sp, #88]	@ 0x58
 8004e98:	9417      	str	r4, [sp, #92]	@ 0x5c
 8004e9a:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e9c:	9401      	str	r4, [sp, #4]
 8004e9e:	4daa      	ldr	r5, [pc, #680]	@ (8005148 <main+0x2c4>)
 8004ea0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ea2:	f043 0310 	orr.w	r3, r3, #16
 8004ea6:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ea8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004eb2:	9402      	str	r4, [sp, #8]
 8004eb4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eba:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ebc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	9403      	str	r4, [sp, #12]
 8004ec8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ed0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eda:	9404      	str	r4, [sp, #16]
 8004edc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ee4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eee:	9405      	str	r4, [sp, #20]
 8004ef0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004ef2:	f043 0308 	orr.w	r3, r3, #8
 8004ef6:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ef8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	9305      	str	r3, [sp, #20]
 8004f00:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f02:	9406      	str	r4, [sp, #24]
 8004f04:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004f06:	f043 0302 	orr.w	r3, r3, #2
 8004f0a:	632b      	str	r3, [r5, #48]	@ 0x30
 8004f0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	9306      	str	r3, [sp, #24]
 8004f14:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8004f16:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 800516c <main+0x2e8>
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	211c      	movs	r1, #28
 8004f1e:	4648      	mov	r0, r9
 8004f20:	f001 f90c 	bl	800613c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|TARGET_RST_Pin, GPIO_PIN_RESET);
 8004f24:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 8005170 <main+0x2ec>
 8004f28:	4622      	mov	r2, r4
 8004f2a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f001 f904 	bl	800613c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SWD_BUF_DIR_Pin|SWD_IO_Pin, GPIO_PIN_RESET);
 8004f34:	4f85      	ldr	r7, [pc, #532]	@ (800514c <main+0x2c8>)
 8004f36:	4622      	mov	r2, r4
 8004f38:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f001 f8fd 	bl	800613c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWD_CLK_GPIO_Port, SWD_CLK_Pin, GPIO_PIN_SET);
 8004f42:	2201      	movs	r2, #1
 8004f44:	2140      	movs	r1, #64	@ 0x40
 8004f46:	4638      	mov	r0, r7
 8004f48:	f001 f8f8 	bl	800613c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8004f4c:	231c      	movs	r3, #28
 8004f4e:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f50:	2601      	movs	r6, #1
 8004f52:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f54:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f56:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f58:	a914      	add	r1, sp, #80	@ 0x50
 8004f5a:	4648      	mov	r0, r9
 8004f5c:	f000 ff28 	bl	8005db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI_CS_Pin|TARGET_RST_Pin;
 8004f60:	f44f 7988 	mov.w	r9, #272	@ 0x110
 8004f64:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f68:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	9416      	str	r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6c:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f6e:	a914      	add	r1, sp, #80	@ 0x50
 8004f70:	4640      	mov	r0, r8
 8004f72:	f000 ff1d 	bl	8005db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROGRAM_BTN_Pin;
 8004f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f7a:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f7c:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(PROGRAM_BTN_GPIO_Port, &GPIO_InitStruct);
 8004f80:	a914      	add	r1, sp, #80	@ 0x50
 8004f82:	4640      	mov	r0, r8
 8004f84:	f000 ff14 	bl	8005db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_BUF_DIR_Pin|SWD_IO_Pin;
 8004f88:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f8c:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f8e:	9616      	str	r6, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f90:	f04f 0803 	mov.w	r8, #3
 8004f94:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f98:	a914      	add	r1, sp, #80	@ 0x50
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f000 ff08 	bl	8005db0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWD_CLK_Pin;
 8004fa0:	2340      	movs	r3, #64	@ 0x40
 8004fa2:	9314      	str	r3, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fa4:	9615      	str	r6, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004faa:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(SWD_CLK_GPIO_Port, &GPIO_InitStruct);
 8004fae:	a914      	add	r1, sp, #80	@ 0x50
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f000 fefd 	bl	8005db0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004fb6:	9400      	str	r4, [sp, #0]
 8004fb8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	632b      	str	r3, [r5, #48]	@ 0x30
 8004fc0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8004fca:	4622      	mov	r2, r4
 8004fcc:	2106      	movs	r1, #6
 8004fce:	203b      	movs	r0, #59	@ 0x3b
 8004fd0:	f000 fc82 	bl	80058d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004fd4:	203b      	movs	r0, #59	@ 0x3b
 8004fd6:	f000 fcb5 	bl	8005944 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8004fda:	4622      	mov	r2, r4
 8004fdc:	2106      	movs	r1, #6
 8004fde:	2045      	movs	r0, #69	@ 0x45
 8004fe0:	f000 fc7a 	bl	80058d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004fe4:	2045      	movs	r0, #69	@ 0x45
 8004fe6:	f000 fcad 	bl	8005944 <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 8004fea:	4b59      	ldr	r3, [pc, #356]	@ (8005150 <main+0x2cc>)
 8004fec:	4a59      	ldr	r2, [pc, #356]	@ (8005154 <main+0x2d0>)
 8004fee:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004ff0:	605c      	str	r4, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004ff2:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ff4:	60dc      	str	r4, [r3, #12]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ff6:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004ff8:	619c      	str	r4, [r3, #24]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004ffa:	611c      	str	r4, [r3, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ffc:	9409      	str	r4, [sp, #36]	@ 0x24
 8004ffe:	940a      	str	r4, [sp, #40]	@ 0x28
 8005000:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005002:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005004:	9407      	str	r4, [sp, #28]
 8005006:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005008:	940d      	str	r4, [sp, #52]	@ 0x34
 800500a:	940e      	str	r4, [sp, #56]	@ 0x38
 800500c:	940f      	str	r4, [sp, #60]	@ 0x3c
 800500e:	9410      	str	r4, [sp, #64]	@ 0x40
 8005010:	9411      	str	r4, [sp, #68]	@ 0x44
 8005012:	9412      	str	r4, [sp, #72]	@ 0x48
 8005014:	9413      	str	r4, [sp, #76]	@ 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005016:	2220      	movs	r2, #32
 8005018:	4621      	mov	r1, r4
 800501a:	a814      	add	r0, sp, #80	@ 0x50
 800501c:	f00a faba 	bl	800f594 <memset>
  htim1.Instance = TIM1;
 8005020:	484d      	ldr	r0, [pc, #308]	@ (8005158 <main+0x2d4>)
 8005022:	4b4e      	ldr	r3, [pc, #312]	@ (800515c <main+0x2d8>)
 8005024:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 120-1;
 8005026:	2377      	movs	r3, #119	@ 0x77
 8005028:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800502a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1000;
 800502c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005030:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005032:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005034:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005036:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005038:	f003 fd48 	bl	8008acc <HAL_TIM_Base_Init>
 800503c:	2800      	cmp	r0, #0
 800503e:	f040 80d5 	bne.w	80051ec <main+0x368>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005046:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005048:	a909      	add	r1, sp, #36	@ 0x24
 800504a:	4843      	ldr	r0, [pc, #268]	@ (8005158 <main+0x2d4>)
 800504c:	f003 fe43 	bl	8008cd6 <HAL_TIM_ConfigClockSource>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 80cd 	bne.w	80051f0 <main+0x36c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005056:	4840      	ldr	r0, [pc, #256]	@ (8005158 <main+0x2d4>)
 8005058:	f003 fd64 	bl	8008b24 <HAL_TIM_PWM_Init>
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 80c9 	bne.w	80051f4 <main+0x370>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005066:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005068:	a907      	add	r1, sp, #28
 800506a:	483b      	ldr	r0, [pc, #236]	@ (8005158 <main+0x2d4>)
 800506c:	f003 ffb6 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8005070:	2800      	cmp	r0, #0
 8005072:	f040 80c1 	bne.w	80051f8 <main+0x374>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005076:	2360      	movs	r3, #96	@ 0x60
 8005078:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800507e:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005080:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005082:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005084:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005086:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005088:	2208      	movs	r2, #8
 800508a:	a90d      	add	r1, sp, #52	@ 0x34
 800508c:	4832      	ldr	r0, [pc, #200]	@ (8005158 <main+0x2d4>)
 800508e:	f003 fda7 	bl	8008be0 <HAL_TIM_PWM_ConfigChannel>
 8005092:	2800      	cmp	r0, #0
 8005094:	f040 80b2 	bne.w	80051fc <main+0x378>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005098:	2300      	movs	r3, #0
 800509a:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800509c:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800509e:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.DeadTime = 0;
 80050a0:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80050a2:	9318      	str	r3, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80050a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80050a8:	9219      	str	r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80050aa:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80050ac:	a914      	add	r1, sp, #80	@ 0x50
 80050ae:	482a      	ldr	r0, [pc, #168]	@ (8005158 <main+0x2d4>)
 80050b0:	f003 ffd8 	bl	8009064 <HAL_TIMEx_ConfigBreakDeadTime>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f040 80a3 	bne.w	8005200 <main+0x37c>
  HAL_TIM_MspPostInit(&htim1);
 80050ba:	4827      	ldr	r0, [pc, #156]	@ (8005158 <main+0x2d4>)
 80050bc:	f000 fa48 	bl	8005550 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050c0:	2300      	movs	r3, #0
 80050c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80050c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80050c6:	9316      	str	r3, [sp, #88]	@ 0x58
 80050c8:	9317      	str	r3, [sp, #92]	@ 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80050cc:	930e      	str	r3, [sp, #56]	@ 0x38
  htim2.Instance = TIM2;
 80050ce:	4824      	ldr	r0, [pc, #144]	@ (8005160 <main+0x2dc>)
 80050d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80050d4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 60-1;
 80050d6:	223b      	movs	r2, #59	@ 0x3b
 80050d8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050da:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80050dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050e0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050e2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050e6:	f003 fcf1 	bl	8008acc <HAL_TIM_Base_Init>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f040 808a 	bne.w	8005204 <main+0x380>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050f4:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050f6:	a914      	add	r1, sp, #80	@ 0x50
 80050f8:	4819      	ldr	r0, [pc, #100]	@ (8005160 <main+0x2dc>)
 80050fa:	f003 fdec 	bl	8008cd6 <HAL_TIM_ConfigClockSource>
 80050fe:	2800      	cmp	r0, #0
 8005100:	f040 8082 	bne.w	8005208 <main+0x384>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	930d      	str	r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005108:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800510a:	a90d      	add	r1, sp, #52	@ 0x34
 800510c:	4814      	ldr	r0, [pc, #80]	@ (8005160 <main+0x2dc>)
 800510e:	f003 ff65 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 8005112:	2800      	cmp	r0, #0
 8005114:	d17a      	bne.n	800520c <main+0x388>
  hspi1.Instance = SPI1;
 8005116:	4813      	ldr	r0, [pc, #76]	@ (8005164 <main+0x2e0>)
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <main+0x2e4>)
 800511a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800511c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005120:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005122:	2300      	movs	r3, #0
 8005124:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005126:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005128:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800512a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800512c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005130:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005132:	2210      	movs	r2, #16
 8005134:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005136:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005138:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800513a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800513c:	230a      	movs	r3, #10
 800513e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005140:	f003 fa42 	bl	80085c8 <HAL_SPI_Init>
 8005144:	e016      	b.n	8005174 <main+0x2f0>
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	40020400 	.word	0x40020400
 8005150:	2000c4e4 	.word	0x2000c4e4
 8005154:	40012c00 	.word	0x40012c00
 8005158:	2000c384 	.word	0x2000c384
 800515c:	40010000 	.word	0x40010000
 8005160:	2000c33c 	.word	0x2000c33c
 8005164:	2000c3cc 	.word	0x2000c3cc
 8005168:	40013000 	.word	0x40013000
 800516c:	40021000 	.word	0x40021000
 8005170:	40020000 	.word	0x40020000
 8005174:	2800      	cmp	r0, #0
 8005176:	d14b      	bne.n	8005210 <main+0x38c>
  huart1.Instance = USART1;
 8005178:	4828      	ldr	r0, [pc, #160]	@ (800521c <main+0x398>)
 800517a:	4b29      	ldr	r3, [pc, #164]	@ (8005220 <main+0x39c>)
 800517c:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800517e:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8005182:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005184:	2300      	movs	r3, #0
 8005186:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005188:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800518a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800518c:	2208      	movs	r2, #8
 800518e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005190:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005192:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005194:	f004 f885 	bl	80092a2 <HAL_UART_Init>
 8005198:	2800      	cmp	r0, #0
 800519a:	d13b      	bne.n	8005214 <main+0x390>
  MX_FATFS_Init();
 800519c:	f005 fa5e 	bl	800a65c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80051a0:	f009 f87a 	bl	800e298 <MX_USB_DEVICE_Init>
  hrtc.Instance = RTC;
 80051a4:	481f      	ldr	r0, [pc, #124]	@ (8005224 <main+0x3a0>)
 80051a6:	4b20      	ldr	r3, [pc, #128]	@ (8005228 <main+0x3a4>)
 80051a8:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051aa:	2300      	movs	r3, #0
 80051ac:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80051ae:	227f      	movs	r2, #127	@ 0x7f
 80051b0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 7874;
 80051b2:	f641 62c2 	movw	r2, #7874	@ 0x1ec2
 80051b6:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051b8:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051ba:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051bc:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051be:	f002 fac7 	bl	8007750 <HAL_RTC_Init>
 80051c2:	bb48      	cbnz	r0, 8005218 <main+0x394>
	HAL_TIM_Base_Start(&htim2);
 80051c4:	4819      	ldr	r0, [pc, #100]	@ (800522c <main+0x3a8>)
 80051c6:	f003 fae5 	bl	8008794 <HAL_TIM_Base_Start>
	LED_SetState(TARGET_LED_STAT_BOOT);
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7ff fdf6 	bl	8004dbc <LED_SetState>
	Buzzer_SetState(BUZZER_BOOT);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7ff fb8f 	bl	80048f4 <Buzzer_SetState>
	log_message("ST-FLASHER Boot OK! %s\n", PROJECT_VERSION);
 80051d6:	4916      	ldr	r1, [pc, #88]	@ (8005230 <main+0x3ac>)
 80051d8:	4816      	ldr	r0, [pc, #88]	@ (8005234 <main+0x3b0>)
 80051da:	f7fd fc35 	bl	8002a48 <log_message>
	log_message("%s\n", BUILD_INFO);
 80051de:	4916      	ldr	r1, [pc, #88]	@ (8005238 <main+0x3b4>)
 80051e0:	4816      	ldr	r0, [pc, #88]	@ (800523c <main+0x3b8>)
 80051e2:	f7fd fc31 	bl	8002a48 <log_message>
  	Target_MainLoop();
 80051e6:	f7fe fafd 	bl	80037e4 <Target_MainLoop>
  while (1)
 80051ea:	e7fc      	b.n	80051e6 <main+0x362>
    Error_Handler();
 80051ec:	f7ff fdec 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 80051f0:	f7ff fdea 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 80051f4:	f7ff fde8 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 80051f8:	f7ff fde6 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 80051fc:	f7ff fde4 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005200:	f7ff fde2 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005204:	f7ff fde0 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005208:	f7ff fdde 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 800520c:	f7ff fddc 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005210:	f7ff fdda 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005214:	f7ff fdd8 	bl	8004dc8 <Error_Handler>
    Error_Handler();
 8005218:	f7ff fdd6 	bl	8004dc8 <Error_Handler>
 800521c:	2000c2f4 	.word	0x2000c2f4
 8005220:	40011000 	.word	0x40011000
 8005224:	2000c568 	.word	0x2000c568
 8005228:	40002800 	.word	0x40002800
 800522c:	2000c33c 	.word	0x2000c33c
 8005230:	080126d0 	.word	0x080126d0
 8005234:	080126d8 	.word	0x080126d8
 8005238:	080126f0 	.word	0x080126f0
 800523c:	080126ec 	.word	0x080126ec

08005240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005240:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005242:	2100      	movs	r1, #0
 8005244:	9100      	str	r1, [sp, #0]
 8005246:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_MspInit+0x34>)
 8005248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800524a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800524e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005252:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005256:	9200      	str	r2, [sp, #0]
 8005258:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	9101      	str	r1, [sp, #4]
 800525c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800525e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800526e:	b002      	add	sp, #8
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800

08005278 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005278:	b510      	push	{r4, lr}
 800527a:	b08c      	sub	sp, #48	@ 0x30
 800527c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800527e:	2230      	movs	r2, #48	@ 0x30
 8005280:	2100      	movs	r1, #0
 8005282:	4668      	mov	r0, sp
 8005284:	f00a f986 	bl	800f594 <memset>
  if(hrtc->Instance==RTC)
 8005288:	6822      	ldr	r2, [r4, #0]
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <HAL_RTC_MspInit+0x3c>)
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8005290:	b00c      	add	sp, #48	@ 0x30
 8005292:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005294:	2320      	movs	r3, #32
 8005296:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV8;
 8005298:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <HAL_RTC_MspInit+0x40>)
 800529a:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800529c:	4668      	mov	r0, sp
 800529e:	f002 f8c3 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 80052a2:	b920      	cbnz	r0, 80052ae <HAL_RTC_MspInit+0x36>
    __HAL_RCC_RTC_ENABLE();
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <HAL_RTC_MspInit+0x44>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 80052ac:	e7f0      	b.n	8005290 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80052ae:	f7ff fd8b 	bl	8004dc8 <Error_Handler>
 80052b2:	e7f7      	b.n	80052a4 <HAL_RTC_MspInit+0x2c>
 80052b4:	40002800 	.word	0x40002800
 80052b8:	00080300 	.word	0x00080300
 80052bc:	42470000 	.word	0x42470000

080052c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c6:	2300      	movs	r3, #0
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	9304      	str	r3, [sp, #16]
 80052cc:	9305      	str	r3, [sp, #20]
 80052ce:	9306      	str	r3, [sp, #24]
 80052d0:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 80052d2:	6802      	ldr	r2, [r0, #0]
 80052d4:	4b59      	ldr	r3, [pc, #356]	@ (800543c <HAL_SD_MspInit+0x17c>)
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d002      	beq.n	80052e0 <HAL_SD_MspInit+0x20>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80052da:	b009      	add	sp, #36	@ 0x24
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	4604      	mov	r4, r0
    __HAL_RCC_SDIO_CLK_ENABLE();
 80052e2:	2500      	movs	r5, #0
 80052e4:	9500      	str	r5, [sp, #0]
 80052e6:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80052ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80052f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80052f8:	9200      	str	r2, [sp, #0]
 80052fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fc:	9501      	str	r5, [sp, #4]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005300:	f042 0204 	orr.w	r2, r2, #4
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	f002 0204 	and.w	r2, r2, #4
 800530c:	9201      	str	r2, [sp, #4]
 800530e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005310:	9502      	str	r5, [sp, #8]
 8005312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005314:	f042 0208 	orr.w	r2, r2, #8
 8005318:	631a      	str	r2, [r3, #48]	@ 0x30
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005324:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005328:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532a:	f04f 0802 	mov.w	r8, #2
 800532e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005332:	f04f 0b01 	mov.w	fp, #1
 8005336:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533a:	2603      	movs	r6, #3
 800533c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800533e:	270c      	movs	r7, #12
 8005340:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005342:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8005454 <HAL_SD_MspInit+0x194>
 8005346:	eb0d 0107 	add.w	r1, sp, r7
 800534a:	4648      	mov	r0, r9
 800534c:	f000 fd30 	bl	8005db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005350:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8005354:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005358:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005360:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005362:	eb0d 0107 	add.w	r1, sp, r7
 8005366:	4648      	mov	r0, r9
 8005368:	f000 fd22 	bl	8005db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800536c:	f04f 0904 	mov.w	r9, #4
 8005370:	f8cd 900c 	str.w	r9, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005374:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005378:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800537e:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005380:	eb0d 0107 	add.w	r1, sp, r7
 8005384:	482e      	ldr	r0, [pc, #184]	@ (8005440 <HAL_SD_MspInit+0x180>)
 8005386:	f000 fd13 	bl	8005db0 <HAL_GPIO_Init>
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800538a:	482e      	ldr	r0, [pc, #184]	@ (8005444 <HAL_SD_MspInit+0x184>)
 800538c:	4b2e      	ldr	r3, [pc, #184]	@ (8005448 <HAL_SD_MspInit+0x188>)
 800538e:	6003      	str	r3, [r0, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005394:	6043      	str	r3, [r0, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005396:	6085      	str	r5, [r0, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005398:	60c5      	str	r5, [r0, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800539a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800539e:	6103      	str	r3, [r0, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053a0:	f8c0 a014 	str.w	sl, [r0, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80053a8:	6183      	str	r3, [r0, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80053aa:	2320      	movs	r3, #32
 80053ac:	61c3      	str	r3, [r0, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053ae:	6205      	str	r5, [r0, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053b0:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053b4:	6286      	str	r6, [r0, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80053b6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80053ba:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80053bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80053c0:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80053c2:	f000 fb11 	bl	80059e8 <HAL_DMA_Init>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d131      	bne.n	800542e <HAL_SD_MspInit+0x16e>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80053ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005444 <HAL_SD_MspInit+0x184>)
 80053cc:	6423      	str	r3, [r4, #64]	@ 0x40
 80053ce:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80053d0:	481e      	ldr	r0, [pc, #120]	@ (800544c <HAL_SD_MspInit+0x18c>)
 80053d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <HAL_SD_MspInit+0x190>)
 80053d4:	6003      	str	r3, [r0, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80053d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053da:	6043      	str	r3, [r0, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053dc:	2340      	movs	r3, #64	@ 0x40
 80053de:	6083      	str	r3, [r0, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60c3      	str	r3, [r0, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053e8:	6102      	str	r2, [r0, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80053ee:	6142      	str	r2, [r0, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053f4:	6182      	str	r2, [r0, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80053f6:	2220      	movs	r2, #32
 80053f8:	61c2      	str	r2, [r0, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053fa:	6203      	str	r3, [r0, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053fc:	2304      	movs	r3, #4
 80053fe:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005400:	2303      	movs	r3, #3
 8005402:	6283      	str	r3, [r0, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005404:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005408:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800540a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800540e:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005410:	f000 faea 	bl	80059e8 <HAL_DMA_Init>
 8005414:	b970      	cbnz	r0, 8005434 <HAL_SD_MspInit+0x174>
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <HAL_SD_MspInit+0x18c>)
 8005418:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800541a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800541c:	2200      	movs	r2, #0
 800541e:	2105      	movs	r1, #5
 8005420:	2031      	movs	r0, #49	@ 0x31
 8005422:	f000 fa59 	bl	80058d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005426:	2031      	movs	r0, #49	@ 0x31
 8005428:	f000 fa8c 	bl	8005944 <HAL_NVIC_EnableIRQ>
}
 800542c:	e755      	b.n	80052da <HAL_SD_MspInit+0x1a>
      Error_Handler();
 800542e:	f7ff fccb 	bl	8004dc8 <Error_Handler>
 8005432:	e7ca      	b.n	80053ca <HAL_SD_MspInit+0x10a>
      Error_Handler();
 8005434:	f7ff fcc8 	bl	8004dc8 <Error_Handler>
 8005438:	e7ed      	b.n	8005416 <HAL_SD_MspInit+0x156>
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40020c00 	.word	0x40020c00
 8005444:	2000c484 	.word	0x2000c484
 8005448:	40026458 	.word	0x40026458
 800544c:	2000c424 	.word	0x2000c424
 8005450:	400264a0 	.word	0x400264a0
 8005454:	40020800 	.word	0x40020800

08005458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	2300      	movs	r3, #0
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	9306      	str	r3, [sp, #24]
 8005466:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8005468:	6802      	ldr	r2, [r0, #0]
 800546a:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <HAL_SPI_MspInit+0x7c>)
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005470:	b009      	add	sp, #36	@ 0x24
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005474:	2100      	movs	r1, #0
 8005476:	9101      	str	r1, [sp, #4]
 8005478:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800547c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005482:	645a      	str	r2, [r3, #68]	@ 0x44
 8005484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005486:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800548a:	9201      	str	r2, [sp, #4]
 800548c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800548e:	9102      	str	r1, [sp, #8]
 8005490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
 8005498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80054a2:	23a0      	movs	r3, #160	@ 0xa0
 80054a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a6:	2702      	movs	r7, #2
 80054a8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054aa:	2603      	movs	r6, #3
 80054ac:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054ae:	2505      	movs	r5, #5
 80054b0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b2:	4c09      	ldr	r4, [pc, #36]	@ (80054d8 <HAL_SPI_MspInit+0x80>)
 80054b4:	a903      	add	r1, sp, #12
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 fc7a 	bl	8005db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054bc:	2340      	movs	r3, #64	@ 0x40
 80054be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054c2:	2301      	movs	r3, #1
 80054c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054c8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ca:	a903      	add	r1, sp, #12
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 fc6f 	bl	8005db0 <HAL_GPIO_Init>
}
 80054d2:	e7cd      	b.n	8005470 <HAL_SPI_MspInit+0x18>
 80054d4:	40013000 	.word	0x40013000
 80054d8:	40020000 	.word	0x40020000

080054dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054dc:	b500      	push	{lr}
 80054de:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80054e0:	6803      	ldr	r3, [r0, #0]
 80054e2:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <HAL_TIM_Base_MspInit+0x6c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d005      	beq.n	80054f4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ec:	d016      	beq.n	800551c <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80054ee:	b003      	add	sp, #12
 80054f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054f4:	2100      	movs	r1, #0
 80054f6:	9100      	str	r1, [sp, #0]
 80054f8:	4b14      	ldr	r3, [pc, #80]	@ (800554c <HAL_TIM_Base_MspInit+0x70>)
 80054fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
 8005502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800550c:	460a      	mov	r2, r1
 800550e:	2019      	movs	r0, #25
 8005510:	f000 f9e2 	bl	80058d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005514:	2019      	movs	r0, #25
 8005516:	f000 fa15 	bl	8005944 <HAL_NVIC_EnableIRQ>
 800551a:	e7e8      	b.n	80054ee <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800551c:	2100      	movs	r1, #0
 800551e:	9101      	str	r1, [sp, #4]
 8005520:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8005524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005536:	460a      	mov	r2, r1
 8005538:	201c      	movs	r0, #28
 800553a:	f000 f9cd 	bl	80058d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800553e:	201c      	movs	r0, #28
 8005540:	f000 fa00 	bl	8005944 <HAL_NVIC_EnableIRQ>
}
 8005544:	e7d3      	b.n	80054ee <HAL_TIM_Base_MspInit+0x12>
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40023800 	.word	0x40023800

08005550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005550:	b500      	push	{lr}
 8005552:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005554:	2300      	movs	r3, #0
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	9302      	str	r3, [sp, #8]
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8005560:	6802      	ldr	r2, [r0, #0]
 8005562:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <HAL_TIM_MspPostInit+0x54>)
 8005564:	429a      	cmp	r2, r3
 8005566:	d002      	beq.n	800556e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005568:	b007      	add	sp, #28
 800556a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <HAL_TIM_MspPostInit+0x58>)
 8005574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005576:	f042 0210 	orr.w	r2, r2, #16
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = BEEP_Pin;
 8005586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800558a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005590:	2303      	movs	r3, #3
 8005592:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005594:	2301      	movs	r3, #1
 8005596:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8005598:	a901      	add	r1, sp, #4
 800559a:	4804      	ldr	r0, [pc, #16]	@ (80055ac <HAL_TIM_MspPostInit+0x5c>)
 800559c:	f000 fc08 	bl	8005db0 <HAL_GPIO_Init>
}
 80055a0:	e7e2      	b.n	8005568 <HAL_TIM_MspPostInit+0x18>
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40021000 	.word	0x40021000

080055b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b4:	2300      	movs	r3, #0
 80055b6:	9303      	str	r3, [sp, #12]
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	9305      	str	r3, [sp, #20]
 80055bc:	9306      	str	r3, [sp, #24]
 80055be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80055c0:	6802      	ldr	r2, [r0, #0]
 80055c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055c6:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80055ce:	b009      	add	sp, #36	@ 0x24
 80055d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80055d2:	2400      	movs	r4, #0
 80055d4:	9400      	str	r4, [sp, #0]
 80055d6:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80055da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055dc:	f042 0210 	orr.w	r2, r2, #16
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80055e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e4:	f002 0210 	and.w	r2, r2, #16
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ec:	9401      	str	r4, [sp, #4]
 80055ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055f8:	f002 0201 	and.w	r2, r2, #1
 80055fc:	9201      	str	r2, [sp, #4]
 80055fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005600:	9402      	str	r4, [sp, #8]
 8005602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005604:	f042 0202 	orr.w	r2, r2, #2
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005614:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005618:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561a:	2702      	movs	r7, #2
 800561c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561e:	2603      	movs	r6, #3
 8005620:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005622:	2507      	movs	r5, #7
 8005624:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005626:	a903      	add	r1, sp, #12
 8005628:	4806      	ldr	r0, [pc, #24]	@ (8005644 <HAL_UART_MspInit+0x94>)
 800562a:	f000 fbc1 	bl	8005db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005632:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005634:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005636:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005638:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563a:	a903      	add	r1, sp, #12
 800563c:	4802      	ldr	r0, [pc, #8]	@ (8005648 <HAL_UART_MspInit+0x98>)
 800563e:	f000 fbb7 	bl	8005db0 <HAL_GPIO_Init>
}
 8005642:	e7c4      	b.n	80055ce <HAL_UART_MspInit+0x1e>
 8005644:	40020000 	.word	0x40020000
 8005648:	40020400 	.word	0x40020400

0800564c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800564c:	e7fe      	b.n	800564c <NMI_Handler>

0800564e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564e:	e7fe      	b.n	800564e <HardFault_Handler>

08005650 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <MemManage_Handler>

08005652 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005652:	e7fe      	b.n	8005652 <BusFault_Handler>

08005654 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005654:	e7fe      	b.n	8005654 <UsageFault_Handler>

08005656 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005656:	4770      	bx	lr

08005658 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005658:	4770      	bx	lr

0800565a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800565a:	4770      	bx	lr

0800565c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800565c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800565e:	f000 f903 	bl	8005868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LED_Handler();
 8005662:	f7ff fb7b 	bl	8004d5c <LED_Handler>
  FileTransferCheck_CheckCompletion();
 8005666:	f7ff f8e7 	bl	8004838 <FileTransferCheck_CheckCompletion>
  /* USER CODE END SysTick_IRQn 1 */
}
 800566a:	bd08      	pop	{r3, pc}

0800566c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800566c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800566e:	4802      	ldr	r0, [pc, #8]	@ (8005678 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8005670:	f003 f8d4 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005674:	bd08      	pop	{r3, pc}
 8005676:	bf00      	nop
 8005678:	2000c384 	.word	0x2000c384

0800567c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800567c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800567e:	4802      	ldr	r0, [pc, #8]	@ (8005688 <TIM2_IRQHandler+0xc>)
 8005680:	f003 f8cc 	bl	800881c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005684:	bd08      	pop	{r3, pc}
 8005686:	bf00      	nop
 8005688:	2000c33c 	.word	0x2000c33c

0800568c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800568c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800568e:	4802      	ldr	r0, [pc, #8]	@ (8005698 <SDIO_IRQHandler+0xc>)
 8005690:	f002 fe48 	bl	8008324 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005694:	bd08      	pop	{r3, pc}
 8005696:	bf00      	nop
 8005698:	2000c4e4 	.word	0x2000c4e4

0800569c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800569c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800569e:	4802      	ldr	r0, [pc, #8]	@ (80056a8 <DMA2_Stream3_IRQHandler+0xc>)
 80056a0:	f000 fa96 	bl	8005bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80056a4:	bd08      	pop	{r3, pc}
 80056a6:	bf00      	nop
 80056a8:	2000c484 	.word	0x2000c484

080056ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80056ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80056ae:	4802      	ldr	r0, [pc, #8]	@ (80056b8 <OTG_FS_IRQHandler+0xc>)
 80056b0:	f000 ff8e 	bl	80065d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80056b4:	bd08      	pop	{r3, pc}
 80056b6:	bf00      	nop
 80056b8:	2000cf6c 	.word	0x2000cf6c

080056bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80056bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80056be:	4802      	ldr	r0, [pc, #8]	@ (80056c8 <DMA2_Stream6_IRQHandler+0xc>)
 80056c0:	f000 fa86 	bl	8005bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80056c4:	bd08      	pop	{r3, pc}
 80056c6:	bf00      	nop
 80056c8:	2000c424 	.word	0x2000c424

080056cc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80056cc:	2001      	movs	r0, #1
 80056ce:	4770      	bx	lr

080056d0 <_kill>:

int _kill(int pid, int sig)
{
 80056d0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80056d2:	f009 ffb1 	bl	800f638 <__errno>
 80056d6:	2316      	movs	r3, #22
 80056d8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80056da:	f04f 30ff 	mov.w	r0, #4294967295
 80056de:	bd08      	pop	{r3, pc}

080056e0 <_exit>:

void _exit (int status)
{
 80056e0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80056e2:	f009 ffa9 	bl	800f638 <__errno>
 80056e6:	2316      	movs	r3, #22
 80056e8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80056ea:	e7fe      	b.n	80056ea <_exit+0xa>

080056ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056ec:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ee:	1e16      	subs	r6, r2, #0
 80056f0:	dd07      	ble.n	8005702 <_read+0x16>
 80056f2:	460c      	mov	r4, r1
 80056f4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80056f6:	f3af 8000 	nop.w
 80056fa:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056fe:	42a5      	cmp	r5, r4
 8005700:	d1f9      	bne.n	80056f6 <_read+0xa>
  }

  return len;
}
 8005702:	4630      	mov	r0, r6
 8005704:	bd70      	pop	{r4, r5, r6, pc}

08005706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005706:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005708:	1e16      	subs	r6, r2, #0
 800570a:	dd07      	ble.n	800571c <_write+0x16>
 800570c:	460c      	mov	r4, r1
 800570e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8005710:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005714:	f7fd f988 	bl	8002a28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005718:	42a5      	cmp	r5, r4
 800571a:	d1f9      	bne.n	8005710 <_write+0xa>
  }
  return len;
}
 800571c:	4630      	mov	r0, r6
 800571e:	bd70      	pop	{r4, r5, r6, pc}

08005720 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	4770      	bx	lr

08005726 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800572a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800572c:	2000      	movs	r0, #0
 800572e:	4770      	bx	lr

08005730 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005730:	2001      	movs	r0, #1
 8005732:	4770      	bx	lr

08005734 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005734:	2000      	movs	r0, #0
 8005736:	4770      	bx	lr

08005738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005738:	b508      	push	{r3, lr}
 800573a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800573c:	4a0c      	ldr	r2, [pc, #48]	@ (8005770 <_sbrk+0x38>)
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	b152      	cbz	r2, 8005758 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005742:	4a0b      	ldr	r2, [pc, #44]	@ (8005770 <_sbrk+0x38>)
 8005744:	6810      	ldr	r0, [r2, #0]
 8005746:	4403      	add	r3, r0
 8005748:	4a0a      	ldr	r2, [pc, #40]	@ (8005774 <_sbrk+0x3c>)
 800574a:	490b      	ldr	r1, [pc, #44]	@ (8005778 <_sbrk+0x40>)
 800574c:	1a52      	subs	r2, r2, r1
 800574e:	4293      	cmp	r3, r2
 8005750:	d806      	bhi.n	8005760 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005752:	4a07      	ldr	r2, [pc, #28]	@ (8005770 <_sbrk+0x38>)
 8005754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005756:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8005758:	4a05      	ldr	r2, [pc, #20]	@ (8005770 <_sbrk+0x38>)
 800575a:	4908      	ldr	r1, [pc, #32]	@ (800577c <_sbrk+0x44>)
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	e7f0      	b.n	8005742 <_sbrk+0xa>
    errno = ENOMEM;
 8005760:	f009 ff6a 	bl	800f638 <__errno>
 8005764:	230c      	movs	r3, #12
 8005766:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e7f3      	b.n	8005756 <_sbrk+0x1e>
 800576e:	bf00      	nop
 8005770:	2000c588 	.word	0x2000c588
 8005774:	20030000 	.word	0x20030000
 8005778:	00002000 	.word	0x00002000
 800577c:	2000d5a0 	.word	0x2000d5a0

08005780 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005780:	4a03      	ldr	r2, [pc, #12]	@ (8005790 <SystemInit+0x10>)
 8005782:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005786:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800578a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800578e:	4770      	bx	lr
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005798:	f7ff fff2 	bl	8005780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800579c:	480c      	ldr	r0, [pc, #48]	@ (80057d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800579e:	490d      	ldr	r1, [pc, #52]	@ (80057d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80057a0:	4a0d      	ldr	r2, [pc, #52]	@ (80057d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80057a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057a4:	e002      	b.n	80057ac <LoopCopyDataInit>

080057a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057aa:	3304      	adds	r3, #4

080057ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057b0:	d3f9      	bcc.n	80057a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057b2:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80057b4:	4c0a      	ldr	r4, [pc, #40]	@ (80057e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80057b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057b8:	e001      	b.n	80057be <LoopFillZerobss>

080057ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057bc:	3204      	adds	r2, #4

080057be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057c0:	d3fb      	bcc.n	80057ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80057c2:	f009 ff3f 	bl	800f644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057c6:	f7ff fb5d 	bl	8004e84 <main>
  bx  lr    
 80057ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80057d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057d4:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 80057d8:	080130bc 	.word	0x080130bc
  ldr r2, =_sbss
 80057dc:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80057e0:	2000d59c 	.word	0x2000d59c

080057e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057e4:	e7fe      	b.n	80057e4 <ADC_IRQHandler>
	...

080057e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <HAL_InitTick+0x40>)
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f8:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <HAL_InitTick+0x44>)
 80057fa:	6810      	ldr	r0, [r2, #0]
 80057fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005800:	f000 f8c0 	bl	8005984 <HAL_SYSTICK_Config>
 8005804:	b968      	cbnz	r0, 8005822 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005806:	2c0f      	cmp	r4, #15
 8005808:	d901      	bls.n	800580e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800580a:	2001      	movs	r0, #1
 800580c:	e00a      	b.n	8005824 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800580e:	2200      	movs	r2, #0
 8005810:	4621      	mov	r1, r4
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	f000 f85f 	bl	80058d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800581a:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_InitTick+0x48>)
 800581c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800581e:	2000      	movs	r0, #0
 8005820:	e000      	b.n	8005824 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8005822:	2001      	movs	r0, #1
}
 8005824:	bd10      	pop	{r4, pc}
 8005826:	bf00      	nop
 8005828:	2000003c 	.word	0x2000003c
 800582c:	20000038 	.word	0x20000038
 8005830:	20000040 	.word	0x20000040

08005834 <HAL_Init>:
{
 8005834:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005836:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <HAL_Init+0x30>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800583e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005846:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800584e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005850:	2003      	movs	r0, #3
 8005852:	f000 f82f 	bl	80058b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005856:	2000      	movs	r0, #0
 8005858:	f7ff ffc6 	bl	80057e8 <HAL_InitTick>
  HAL_MspInit();
 800585c:	f7ff fcf0 	bl	8005240 <HAL_MspInit>
}
 8005860:	2000      	movs	r0, #0
 8005862:	bd08      	pop	{r3, pc}
 8005864:	40023c00 	.word	0x40023c00

08005868 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005868:	4a03      	ldr	r2, [pc, #12]	@ (8005878 <HAL_IncTick+0x10>)
 800586a:	6811      	ldr	r1, [r2, #0]
 800586c:	4b03      	ldr	r3, [pc, #12]	@ (800587c <HAL_IncTick+0x14>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	440b      	add	r3, r1
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2000c58c 	.word	0x2000c58c
 800587c:	2000003c 	.word	0x2000003c

08005880 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005880:	4b01      	ldr	r3, [pc, #4]	@ (8005888 <HAL_GetTick+0x8>)
 8005882:	6818      	ldr	r0, [r3, #0]
}
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	2000c58c 	.word	0x2000c58c

0800588c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005890:	f7ff fff6 	bl	8005880 <HAL_GetTick>
 8005894:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005896:	f1b4 3fff 	cmp.w	r4, #4294967295
 800589a:	d002      	beq.n	80058a2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800589c:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <HAL_Delay+0x24>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058a2:	f7ff ffed 	bl	8005880 <HAL_GetTick>
 80058a6:	1b40      	subs	r0, r0, r5
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d3fa      	bcc.n	80058a2 <HAL_Delay+0x16>
  {
  }
}
 80058ac:	bd38      	pop	{r3, r4, r5, pc}
 80058ae:	bf00      	nop
 80058b0:	2000003c 	.word	0x2000003c

080058b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b4:	4907      	ldr	r1, [pc, #28]	@ (80058d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80058b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b8:	0203      	lsls	r3, r0, #8
 80058ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058c2:	0412      	lsls	r2, r2, #16
 80058c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80058d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80058d2:	4770      	bx	lr
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058d8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058da:	4b18      	ldr	r3, [pc, #96]	@ (800593c <HAL_NVIC_SetPriority+0x64>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e2:	f1c3 0c07 	rsb	ip, r3, #7
 80058e6:	f1bc 0f04 	cmp.w	ip, #4
 80058ea:	bf28      	it	cs
 80058ec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f0:	f103 0e04 	add.w	lr, r3, #4
 80058f4:	f1be 0f06 	cmp.w	lr, #6
 80058f8:	bf8c      	ite	hi
 80058fa:	3b03      	subhi	r3, #3
 80058fc:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058fe:	f04f 3eff 	mov.w	lr, #4294967295
 8005902:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005906:	ea21 010c 	bic.w	r1, r1, ip
 800590a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800590c:	fa0e fe03 	lsl.w	lr, lr, r3
 8005910:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005914:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005916:	2800      	cmp	r0, #0
 8005918:	db09      	blt.n	800592e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800591a:	0109      	lsls	r1, r1, #4
 800591c:	b2c9      	uxtb	r1, r1
 800591e:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005922:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005926:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800592a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800592e:	f000 000f 	and.w	r0, r0, #15
 8005932:	0109      	lsls	r1, r1, #4
 8005934:	b2c9      	uxtb	r1, r1
 8005936:	4b02      	ldr	r3, [pc, #8]	@ (8005940 <HAL_NVIC_SetPriority+0x68>)
 8005938:	5419      	strb	r1, [r3, r0]
 800593a:	e7f6      	b.n	800592a <HAL_NVIC_SetPriority+0x52>
 800593c:	e000ed00 	.word	0xe000ed00
 8005940:	e000ed14 	.word	0xe000ed14

08005944 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005944:	2800      	cmp	r0, #0
 8005946:	db07      	blt.n	8005958 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005948:	0941      	lsrs	r1, r0, #5
 800594a:	f000 001f 	and.w	r0, r0, #31
 800594e:	2301      	movs	r3, #1
 8005950:	4083      	lsls	r3, r0
 8005952:	4a02      	ldr	r2, [pc, #8]	@ (800595c <HAL_NVIC_EnableIRQ+0x18>)
 8005954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e000e100 	.word	0xe000e100

08005960 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005960:	2800      	cmp	r0, #0
 8005962:	db0c      	blt.n	800597e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005964:	0943      	lsrs	r3, r0, #5
 8005966:	f000 001f 	and.w	r0, r0, #31
 800596a:	2201      	movs	r2, #1
 800596c:	4082      	lsls	r2, r0
 800596e:	3320      	adds	r3, #32
 8005970:	4903      	ldr	r1, [pc, #12]	@ (8005980 <HAL_NVIC_DisableIRQ+0x20>)
 8005972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800597a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800597e:	4770      	bx	lr
 8005980:	e000e100 	.word	0xe000e100

08005984 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005984:	3801      	subs	r0, #1
 8005986:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800598a:	d20b      	bcs.n	80059a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005990:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005992:	4a05      	ldr	r2, [pc, #20]	@ (80059a8 <HAL_SYSTICK_Config+0x24>)
 8005994:	21f0      	movs	r1, #240	@ 0xf0
 8005996:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599a:	2000      	movs	r0, #0
 800599c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800599e:	2207      	movs	r2, #7
 80059a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80059a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059ac:	b410      	push	{r4}
 80059ae:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059b0:	6803      	ldr	r3, [r0, #0]
 80059b2:	b2d8      	uxtb	r0, r3
 80059b4:	3810      	subs	r0, #16
 80059b6:	490a      	ldr	r1, [pc, #40]	@ (80059e0 <DMA_CalcBaseAndBitshift+0x34>)
 80059b8:	fba1 4100 	umull	r4, r1, r1, r0
 80059bc:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059be:	4c09      	ldr	r4, [pc, #36]	@ (80059e4 <DMA_CalcBaseAndBitshift+0x38>)
 80059c0:	5c61      	ldrb	r1, [r4, r1]
 80059c2:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059c4:	285f      	cmp	r0, #95	@ 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059c6:	bf87      	ittee	hi
 80059c8:	f36f 0309 	bfchi	r3, #0, #10
 80059cc:	1d18      	addhi	r0, r3, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059ce:	f423 707f 	bicls.w	r0, r3, #1020	@ 0x3fc
 80059d2:	f020 0003 	bicls.w	r0, r0, #3
 80059d6:	6590      	str	r0, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80059d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	aaaaaaab 	.word	0xaaaaaaab
 80059e4:	080127e4 	.word	0x080127e4

080059e8 <HAL_DMA_Init>:
{
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7ff ff48 	bl	8005880 <HAL_GetTick>
  if(hdma == NULL)
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	f000 808c 	beq.w	8005b0e <HAL_DMA_Init+0x126>
 80059f6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80059f8:	2302      	movs	r3, #2
 80059fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80059fe:	2300      	movs	r3, #0
 8005a00:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	f012 0f01 	tst.w	r2, #1
 8005a16:	d00a      	beq.n	8005a2e <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a18:	f7ff ff32 	bl	8005880 <HAL_GetTick>
 8005a1c:	1b43      	subs	r3, r0, r5
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d9f5      	bls.n	8005a0e <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a22:	2320      	movs	r3, #32
 8005a24:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a26:	2003      	movs	r0, #3
 8005a28:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8005a2c:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8005a2e:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a30:	4938      	ldr	r1, [pc, #224]	@ (8005b14 <HAL_DMA_Init+0x12c>)
 8005a32:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	68a0      	ldr	r0, [r4, #8]
 8005a38:	4302      	orrs	r2, r0
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3e:	6920      	ldr	r0, [r4, #16]
 8005a40:	4302      	orrs	r2, r0
 8005a42:	6960      	ldr	r0, [r4, #20]
 8005a44:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	69a0      	ldr	r0, [r4, #24]
 8005a48:	4302      	orrs	r2, r0
 8005a4a:	69e0      	ldr	r0, [r4, #28]
 8005a4c:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a4e:	6a20      	ldr	r0, [r4, #32]
 8005a50:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a52:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005a56:	2904      	cmp	r1, #4
 8005a58:	d021      	beq.n	8005a9e <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8005a5a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005a5c:	6821      	ldr	r1, [r4, #0]
 8005a5e:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a60:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8005a64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a66:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d10a      	bne.n	8005a82 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8005a6c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005a6e:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005a72:	b133      	cbz	r3, 8005a82 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a74:	69a5      	ldr	r5, [r4, #24]
 8005a76:	bb3d      	cbnz	r5, 8005ac8 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8005a78:	2801      	cmp	r0, #1
 8005a7a:	d01f      	beq.n	8005abc <HAL_DMA_Init+0xd4>
 8005a7c:	f030 0002 	bics.w	r0, r0, #2
 8005a80:	d012      	beq.n	8005aa8 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8005a82:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7ff ff91 	bl	80059ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a8a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005a8c:	233f      	movs	r3, #63	@ 0x3f
 8005a8e:	4093      	lsls	r3, r2
 8005a90:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a92:	2000      	movs	r0, #0
 8005a94:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8005a9c:	e7c6      	b.n	8005a2c <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005aa0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005aa2:	4301      	orrs	r1, r0
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	e7d8      	b.n	8005a5a <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa8:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0e8      	beq.n	8005a82 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ab0:	2340      	movs	r3, #64	@ 0x40
 8005ab2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8005aba:	e7b7      	b.n	8005a2c <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ac0:	bf14      	ite	ne
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	e7f1      	b.n	8005aac <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ac8:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 8005acc:	d008      	beq.n	8005ae0 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ace:	2802      	cmp	r0, #2
 8005ad0:	d9ee      	bls.n	8005ab0 <HAL_DMA_Init+0xc8>
 8005ad2:	2803      	cmp	r0, #3
 8005ad4:	d1d5      	bne.n	8005a82 <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad6:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0d1      	beq.n	8005a82 <HAL_DMA_Init+0x9a>
 8005ade:	e7e7      	b.n	8005ab0 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8005ae0:	2803      	cmp	r0, #3
 8005ae2:	d8ce      	bhi.n	8005a82 <HAL_DMA_Init+0x9a>
 8005ae4:	a501      	add	r5, pc, #4	@ (adr r5, 8005aec <HAL_DMA_Init+0x104>)
 8005ae6:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005ab1 	.word	0x08005ab1
 8005af0:	08005afd 	.word	0x08005afd
 8005af4:	08005ab1 	.word	0x08005ab1
 8005af8:	08005b03 	.word	0x08005b03
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afc:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8005b00:	e7eb      	b.n	8005ada <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b06:	bf14      	ite	ne
 8005b08:	2300      	movne	r3, #0
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	e7e5      	b.n	8005ada <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e78c      	b.n	8005a2c <HAL_DMA_Init+0x44>
 8005b12:	bf00      	nop
 8005b14:	f010803f 	.word	0xf010803f

08005b18 <HAL_DMA_Start_IT>:
{
 8005b18:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1a:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8005b1c:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 8005b20:	f1bc 0f01 	cmp.w	ip, #1
 8005b24:	d03f      	beq.n	8005ba6 <HAL_DMA_Start_IT+0x8e>
 8005b26:	f04f 0c01 	mov.w	ip, #1
 8005b2a:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b2e:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 8005b32:	fa5f fc8c 	uxtb.w	ip, ip
 8005b36:	f1bc 0f01 	cmp.w	ip, #1
 8005b3a:	d005      	beq.n	8005b48 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 8005b42:	2002      	movs	r0, #2
}
 8005b44:	bc70      	pop	{r4, r5, r6}
 8005b46:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b48:	2502      	movs	r5, #2
 8005b4a:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b4e:	2500      	movs	r5, #0
 8005b50:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b52:	6806      	ldr	r6, [r0, #0]
 8005b54:	6835      	ldr	r5, [r6, #0]
 8005b56:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8005b5a:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8005b5c:	6805      	ldr	r5, [r0, #0]
 8005b5e:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b60:	6883      	ldr	r3, [r0, #8]
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	d01a      	beq.n	8005b9c <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b6a:	6803      	ldr	r3, [r0, #0]
 8005b6c:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b6e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005b70:	233f      	movs	r3, #63	@ 0x3f
 8005b72:	4093      	lsls	r3, r2
 8005b74:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b76:	6802      	ldr	r2, [r0, #0]
 8005b78:	6813      	ldr	r3, [r2, #0]
 8005b7a:	f043 0316 	orr.w	r3, r3, #22
 8005b7e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005b80:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005b82:	b123      	cbz	r3, 8005b8e <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b84:	6802      	ldr	r2, [r0, #0]
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005b8e:	6802      	ldr	r2, [r0, #0]
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e7d3      	b.n	8005b44 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005ba0:	6803      	ldr	r3, [r0, #0]
 8005ba2:	60d9      	str	r1, [r3, #12]
 8005ba4:	e7e3      	b.n	8005b6e <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8005ba6:	2002      	movs	r0, #2
 8005ba8:	e7cc      	b.n	8005b44 <HAL_DMA_Start_IT+0x2c>

08005baa <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005baa:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d003      	beq.n	8005bbc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bb4:	2380      	movs	r3, #128	@ 0x80
 8005bb6:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005bb8:	2001      	movs	r0, #1
 8005bba:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bbc:	2305      	movs	r3, #5
 8005bbe:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8005bc2:	6802      	ldr	r2, [r0, #0]
 8005bc4:	6813      	ldr	r3, [r2, #0]
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005bcc:	2000      	movs	r0, #0
}
 8005bce:	4770      	bx	lr

08005bd0 <HAL_DMA_IRQHandler>:
{
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bda:	4b72      	ldr	r3, [pc, #456]	@ (8005da4 <HAL_DMA_IRQHandler+0x1d4>)
 8005bdc:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bde:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8005be0:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005be2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005be4:	2308      	movs	r3, #8
 8005be6:	4093      	lsls	r3, r2
 8005be8:	422b      	tst	r3, r5
 8005bea:	d010      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bec:	6803      	ldr	r3, [r0, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f012 0f04 	tst.w	r2, #4
 8005bf4:	d00b      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	f022 0204 	bic.w	r2, r2, #4
 8005bfc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bfe:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005c00:	2308      	movs	r3, #8
 8005c02:	4093      	lsls	r3, r2
 8005c04:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c0e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005c10:	2301      	movs	r3, #1
 8005c12:	4093      	lsls	r3, r2
 8005c14:	422b      	tst	r3, r5
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	6952      	ldr	r2, [r2, #20]
 8005c1c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c22:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c2c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005c2e:	2304      	movs	r3, #4
 8005c30:	4093      	lsls	r3, r2
 8005c32:	422b      	tst	r3, r5
 8005c34:	d009      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	f012 0f02 	tst.w	r2, #2
 8005c3e:	d004      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c40:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005c44:	f043 0304 	orr.w	r3, r3, #4
 8005c48:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	4093      	lsls	r3, r2
 8005c50:	422b      	tst	r3, r5
 8005c52:	d024      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	f012 0f08 	tst.w	r2, #8
 8005c5c:	d01f      	beq.n	8005c9e <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c5e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005c68:	d00d      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005c70:	d104      	bne.n	8005c7c <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8005c72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c74:	b19b      	cbz	r3, 8005c9e <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8005c76:	4620      	mov	r0, r4
 8005c78:	4798      	blx	r3
 8005c7a:	e010      	b.n	8005c9e <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c7c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005c7e:	b173      	cbz	r3, 8005c9e <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8005c80:	4620      	mov	r0, r4
 8005c82:	4798      	blx	r3
 8005c84:	e00b      	b.n	8005c9e <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005c8c:	d103      	bne.n	8005c96 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	f022 0208 	bic.w	r2, r2, #8
 8005c94:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005c96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c98:	b10b      	cbz	r3, 8005c9e <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	4093      	lsls	r3, r2
 8005ca4:	422b      	tst	r3, r5
 8005ca6:	d055      	beq.n	8005d54 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	f012 0f10 	tst.w	r2, #16
 8005cb0:	d050      	beq.n	8005d54 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cb2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cb4:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005cc6:	d033      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005cce:	d12a      	bne.n	8005d26 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8005cd0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03e      	beq.n	8005d54 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4798      	blx	r3
 8005cda:	e03b      	b.n	8005d54 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	f023 0316 	bic.w	r3, r3, #22
 8005ce4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	6953      	ldr	r3, [r2, #20]
 8005cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cee:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cf2:	b1a3      	cbz	r3, 8005d1e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	6813      	ldr	r3, [r2, #0]
 8005cf8:	f023 0308 	bic.w	r3, r3, #8
 8005cfc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cfe:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005d00:	233f      	movs	r3, #63	@ 0x3f
 8005d02:	4093      	lsls	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8005d12:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d043      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4798      	blx	r3
 8005d1c:	e040      	b.n	8005da0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d1e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e7      	bne.n	8005cf4 <HAL_DMA_IRQHandler+0x124>
 8005d24:	e7eb      	b.n	8005cfe <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8005d26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005d28:	b1a3      	cbz	r3, 8005d54 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4798      	blx	r3
 8005d2e:	e011      	b.n	8005d54 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005d36:	d109      	bne.n	8005d4c <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	f022 0210 	bic.w	r2, r2, #16
 8005d3e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005d46:	2300      	movs	r3, #0
 8005d48:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005d4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005d4e:	b10b      	cbz	r3, 8005d54 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8005d50:	4620      	mov	r0, r4
 8005d52:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005d56:	b31b      	cbz	r3, 8005da0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005d5a:	f013 0f01 	tst.w	r3, #1
 8005d5e:	d01b      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d60:	4b11      	ldr	r3, [pc, #68]	@ (8005da8 <HAL_DMA_IRQHandler+0x1d8>)
 8005d62:	fba3 3606 	umull	r3, r6, r3, r6
 8005d66:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d68:	2305      	movs	r3, #5
 8005d6a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	6813      	ldr	r3, [r2, #0]
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005d78:	9b01      	ldr	r3, [sp, #4]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	42b3      	cmp	r3, r6
 8005d80:	d804      	bhi.n	8005d8c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f013 0f01 	tst.w	r3, #1
 8005d8a:	d1f5      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005d92:	2300      	movs	r3, #0
 8005d94:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8005d98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005d9a:	b10b      	cbz	r3, 8005da0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4798      	blx	r3
}
 8005da0:	b003      	add	sp, #12
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da4:	20000038 	.word	0x20000038
 8005da8:	1b4e81b5 	.word	0x1b4e81b5

08005dac <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005dac:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005dae:	4770      	bx	lr

08005db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	b083      	sub	sp, #12
 8005db6:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005db8:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dba:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dbe:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc0:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dc4:	4c7c      	ldr	r4, [pc, #496]	@ (8005fb8 <HAL_GPIO_Init+0x208>)
 8005dc6:	e04b      	b.n	8005e60 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8005dc8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dca:	fa05 fa02 	lsl.w	sl, r5, r2
 8005dce:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dd2:	68cf      	ldr	r7, [r1, #12]
 8005dd4:	4097      	lsls	r7, r2
 8005dd6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005dda:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005ddc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dde:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de2:	684f      	ldr	r7, [r1, #4]
 8005de4:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8005de8:	409f      	lsls	r7, r3
 8005dea:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8005dee:	6047      	str	r7, [r0, #4]
 8005df0:	e044      	b.n	8005e7c <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005df2:	f04f 0c00 	mov.w	ip, #0
 8005df6:	fa0c fc0b 	lsl.w	ip, ip, fp
 8005dfa:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dfe:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8005e02:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005e04:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e08:	684e      	ldr	r6, [r1, #4]
 8005e0a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005e14:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8005e18:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8005e1a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	684e      	ldr	r6, [r1, #4]
 8005e1e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005e22:	bf0c      	ite	eq
 8005e24:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005e28:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8005e2c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8005e2e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e30:	684e      	ldr	r6, [r1, #4]
 8005e32:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005e36:	bf0c      	ite	eq
 8005e38:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005e3c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8005e40:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e42:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e44:	684e      	ldr	r6, [r1, #4]
 8005e46:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8005e4a:	bf0c      	ite	eq
 8005e4c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8005e50:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8005e54:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e56:	3301      	adds	r3, #1
 8005e58:	3202      	adds	r2, #2
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	f000 80a9 	beq.w	8005fb2 <HAL_GPIO_Init+0x202>
    ioposition = 0x01U << position;
 8005e60:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e64:	680f      	ldr	r7, [r1, #0]
 8005e66:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8005e6a:	ea3c 0707 	bics.w	r7, ip, r7
 8005e6e:	d1f2      	bne.n	8005e56 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e70:	684f      	ldr	r7, [r1, #4]
 8005e72:	f007 0703 	and.w	r7, r7, #3
 8005e76:	3f01      	subs	r7, #1
 8005e78:	2f01      	cmp	r7, #1
 8005e7a:	d9a5      	bls.n	8005dc8 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e7c:	684f      	ldr	r7, [r1, #4]
 8005e7e:	f007 0703 	and.w	r7, r7, #3
 8005e82:	2f03      	cmp	r7, #3
 8005e84:	d023      	beq.n	8005ece <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8005e86:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e88:	fa05 fc02 	lsl.w	ip, r5, r2
 8005e8c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e90:	688f      	ldr	r7, [r1, #8]
 8005e92:	4097      	lsls	r7, r2
 8005e94:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8005e98:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	684f      	ldr	r7, [r1, #4]
 8005e9c:	f007 0703 	and.w	r7, r7, #3
 8005ea0:	2f02      	cmp	r7, #2
 8005ea2:	d114      	bne.n	8005ece <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8005ea4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8005ea8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005eac:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eb0:	f003 0b07 	and.w	fp, r3, #7
 8005eb4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005eb8:	fa08 fa0b 	lsl.w	sl, r8, fp
 8005ebc:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ec0:	690f      	ldr	r7, [r1, #16]
 8005ec2:	fa07 f70b 	lsl.w	r7, r7, fp
 8005ec6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005eca:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8005ece:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ed0:	fa05 fc02 	lsl.w	ip, r5, r2
 8005ed4:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ed8:	684f      	ldr	r7, [r1, #4]
 8005eda:	f007 0703 	and.w	r7, r7, #3
 8005ede:	4097      	lsls	r7, r2
 8005ee0:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8005ee4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ee6:	684f      	ldr	r7, [r1, #4]
 8005ee8:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8005eec:	d0b3      	beq.n	8005e56 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eee:	2700      	movs	r7, #0
 8005ef0:	9701      	str	r7, [sp, #4]
 8005ef2:	4e32      	ldr	r6, [pc, #200]	@ (8005fbc <HAL_GPIO_Init+0x20c>)
 8005ef4:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8005ef6:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8005efa:	6477      	str	r7, [r6, #68]	@ 0x44
 8005efc:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8005efe:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8005f02:	9701      	str	r7, [sp, #4]
 8005f04:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005f06:	f023 0703 	bic.w	r7, r3, #3
 8005f0a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005f0e:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8005f12:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f16:	f003 0b03 	and.w	fp, r3, #3
 8005f1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005f1e:	fa08 fc0b 	lsl.w	ip, r8, fp
 8005f22:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f26:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8005f2a:	42b0      	cmp	r0, r6
 8005f2c:	f43f af61 	beq.w	8005df2 <HAL_GPIO_Init+0x42>
 8005f30:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f34:	42b0      	cmp	r0, r6
 8005f36:	d024      	beq.n	8005f82 <HAL_GPIO_Init+0x1d2>
 8005f38:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f3c:	42b0      	cmp	r0, r6
 8005f3e:	d023      	beq.n	8005f88 <HAL_GPIO_Init+0x1d8>
 8005f40:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8005fc0 <HAL_GPIO_Init+0x210>
 8005f44:	4560      	cmp	r0, ip
 8005f46:	d022      	beq.n	8005f8e <HAL_GPIO_Init+0x1de>
 8005f48:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f4c:	4560      	cmp	r0, ip
 8005f4e:	d021      	beq.n	8005f94 <HAL_GPIO_Init+0x1e4>
 8005f50:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f54:	4560      	cmp	r0, ip
 8005f56:	d020      	beq.n	8005f9a <HAL_GPIO_Init+0x1ea>
 8005f58:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f5c:	4560      	cmp	r0, ip
 8005f5e:	d01f      	beq.n	8005fa0 <HAL_GPIO_Init+0x1f0>
 8005f60:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f64:	4560      	cmp	r0, ip
 8005f66:	d01e      	beq.n	8005fa6 <HAL_GPIO_Init+0x1f6>
 8005f68:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f6c:	4560      	cmp	r0, ip
 8005f6e:	d01d      	beq.n	8005fac <HAL_GPIO_Init+0x1fc>
 8005f70:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005f74:	4560      	cmp	r0, ip
 8005f76:	bf14      	ite	ne
 8005f78:	f04f 0c0a 	movne.w	ip, #10
 8005f7c:	f04f 0c09 	moveq.w	ip, #9
 8005f80:	e739      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005f82:	f04f 0c01 	mov.w	ip, #1
 8005f86:	e736      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005f88:	f04f 0c02 	mov.w	ip, #2
 8005f8c:	e733      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005f8e:	f04f 0c03 	mov.w	ip, #3
 8005f92:	e730      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005f94:	f04f 0c04 	mov.w	ip, #4
 8005f98:	e72d      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005f9a:	f04f 0c05 	mov.w	ip, #5
 8005f9e:	e72a      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005fa0:	f04f 0c06 	mov.w	ip, #6
 8005fa4:	e727      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005fa6:	f04f 0c07 	mov.w	ip, #7
 8005faa:	e724      	b.n	8005df6 <HAL_GPIO_Init+0x46>
 8005fac:	f04f 0c08 	mov.w	ip, #8
 8005fb0:	e721      	b.n	8005df6 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8005fb2:	b003      	add	sp, #12
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	40013c00 	.word	0x40013c00
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	40020c00 	.word	0x40020c00

08005fc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fca:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fcc:	2701      	movs	r7, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005fce:	f04f 0a0f 	mov.w	sl, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fd2:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fd6:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8006128 <HAL_GPIO_DeInit+0x164>
 8005fda:	e029      	b.n	8006030 <HAL_GPIO_DeInit+0x6c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005fdc:	f04f 0900 	mov.w	r9, #0
 8005fe0:	9d01      	ldr	r5, [sp, #4]
 8005fe2:	fa09 f505 	lsl.w	r5, r9, r5
 8005fe6:	4565      	cmp	r5, ip
 8005fe8:	d07c      	beq.n	80060e4 <HAL_GPIO_DeInit+0x120>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fea:	6805      	ldr	r5, [r0, #0]
 8005fec:	005c      	lsls	r4, r3, #1
 8005fee:	fa0b f404 	lsl.w	r4, fp, r4
 8005ff2:	ea25 0504 	bic.w	r5, r5, r4
 8005ff6:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ff8:	08de      	lsrs	r6, r3, #3
 8005ffa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005ffe:	f8d6 c020 	ldr.w	ip, [r6, #32]
 8006002:	f003 0507 	and.w	r5, r3, #7
 8006006:	00ad      	lsls	r5, r5, #2
 8006008:	fa0a f505 	lsl.w	r5, sl, r5
 800600c:	ea2c 0505 	bic.w	r5, ip, r5
 8006010:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006012:	68c5      	ldr	r5, [r0, #12]
 8006014:	ea25 0504 	bic.w	r5, r5, r4
 8006018:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800601a:	6845      	ldr	r5, [r0, #4]
 800601c:	ea25 0202 	bic.w	r2, r5, r2
 8006020:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006022:	6882      	ldr	r2, [r0, #8]
 8006024:	ea22 0204 	bic.w	r2, r2, r4
 8006028:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800602a:	3301      	adds	r3, #1
 800602c:	2b10      	cmp	r3, #16
 800602e:	d076      	beq.n	800611e <HAL_GPIO_DeInit+0x15a>
    ioposition = 0x01U << position;
 8006030:	fa07 f203 	lsl.w	r2, r7, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8006034:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8006038:	ea32 0401 	bics.w	r4, r2, r1
 800603c:	d1f5      	bne.n	800602a <HAL_GPIO_DeInit+0x66>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800603e:	f023 0403 	bic.w	r4, r3, #3
 8006042:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8006046:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
 800604a:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800604e:	f003 0503 	and.w	r5, r3, #3
 8006052:	00ad      	lsls	r5, r5, #2
 8006054:	9501      	str	r5, [sp, #4]
 8006056:	fa0a fe05 	lsl.w	lr, sl, r5
 800605a:	ea0e 0c0c 	and.w	ip, lr, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800605e:	4d31      	ldr	r5, [pc, #196]	@ (8006124 <HAL_GPIO_DeInit+0x160>)
 8006060:	42a8      	cmp	r0, r5
 8006062:	d0bb      	beq.n	8005fdc <HAL_GPIO_DeInit+0x18>
 8006064:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006068:	42a8      	cmp	r0, r5
 800606a:	d024      	beq.n	80060b6 <HAL_GPIO_DeInit+0xf2>
 800606c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006070:	42a8      	cmp	r0, r5
 8006072:	d022      	beq.n	80060ba <HAL_GPIO_DeInit+0xf6>
 8006074:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006078:	42a8      	cmp	r0, r5
 800607a:	d021      	beq.n	80060c0 <HAL_GPIO_DeInit+0xfc>
 800607c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006080:	42a8      	cmp	r0, r5
 8006082:	d020      	beq.n	80060c6 <HAL_GPIO_DeInit+0x102>
 8006084:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 800612c <HAL_GPIO_DeInit+0x168>
 8006088:	4548      	cmp	r0, r9
 800608a:	d01f      	beq.n	80060cc <HAL_GPIO_DeInit+0x108>
 800608c:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8006090:	4548      	cmp	r0, r9
 8006092:	d01e      	beq.n	80060d2 <HAL_GPIO_DeInit+0x10e>
 8006094:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8006098:	4548      	cmp	r0, r9
 800609a:	d01d      	beq.n	80060d8 <HAL_GPIO_DeInit+0x114>
 800609c:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80060a0:	4548      	cmp	r0, r9
 80060a2:	d01c      	beq.n	80060de <HAL_GPIO_DeInit+0x11a>
 80060a4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80060a8:	4548      	cmp	r0, r9
 80060aa:	bf14      	ite	ne
 80060ac:	f04f 090a 	movne.w	r9, #10
 80060b0:	f04f 0909 	moveq.w	r9, #9
 80060b4:	e794      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060b6:	46b9      	mov	r9, r7
 80060b8:	e792      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060ba:	f04f 0902 	mov.w	r9, #2
 80060be:	e78f      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060c0:	f04f 0903 	mov.w	r9, #3
 80060c4:	e78c      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060c6:	f04f 0904 	mov.w	r9, #4
 80060ca:	e789      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060cc:	f04f 0905 	mov.w	r9, #5
 80060d0:	e786      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060d2:	f04f 0906 	mov.w	r9, #6
 80060d6:	e783      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060d8:	f04f 0907 	mov.w	r9, #7
 80060dc:	e780      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
 80060de:	f04f 0908 	mov.w	r9, #8
 80060e2:	e77d      	b.n	8005fe0 <HAL_GPIO_DeInit+0x1c>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80060e4:	f8d8 5000 	ldr.w	r5, [r8]
 80060e8:	ea25 0506 	bic.w	r5, r5, r6
 80060ec:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80060f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80060f4:	ea25 0506 	bic.w	r5, r5, r6
 80060f8:	f8c8 5004 	str.w	r5, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80060fc:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8006100:	ea25 0506 	bic.w	r5, r5, r6
 8006104:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006108:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800610c:	ea25 0506 	bic.w	r5, r5, r6
 8006110:	f8c8 5008 	str.w	r5, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006114:	68a5      	ldr	r5, [r4, #8]
 8006116:	ea25 050e 	bic.w	r5, r5, lr
 800611a:	60a5      	str	r5, [r4, #8]
 800611c:	e765      	b.n	8005fea <HAL_GPIO_DeInit+0x26>
    }
  }
}
 800611e:	b003      	add	sp, #12
 8006120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006124:	40020000 	.word	0x40020000
 8006128:	40013c00 	.word	0x40013c00
 800612c:	40021400 	.word	0x40021400

08006130 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006130:	6903      	ldr	r3, [r0, #16]
 8006132:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006134:	bf14      	ite	ne
 8006136:	2001      	movne	r0, #1
 8006138:	2000      	moveq	r0, #0
 800613a:	4770      	bx	lr

0800613c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800613c:	b10a      	cbz	r2, 8006142 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800613e:	6181      	str	r1, [r0, #24]
 8006140:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006142:	0409      	lsls	r1, r1, #16
 8006144:	6181      	str	r1, [r0, #24]
  }
}
 8006146:	4770      	bx	lr

08006148 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006148:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800614a:	ea01 0203 	and.w	r2, r1, r3
 800614e:	ea21 0103 	bic.w	r1, r1, r3
 8006152:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006156:	6181      	str	r1, [r0, #24]
}
 8006158:	4770      	bx	lr

0800615a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800615a:	b530      	push	{r4, r5, lr}
 800615c:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800615e:	2800      	cmp	r0, #0
 8006160:	d06e      	beq.n	8006240 <HAL_PCD_Init+0xe6>
 8006162:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006164:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006166:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 800616a:	b1d3      	cbz	r3, 80061a2 <HAL_PCD_Init+0x48>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800616c:	2303      	movs	r3, #3
 800616e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006172:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  {
    hpcd->Init.dma_enable = 0U;
 8006176:	bf04      	itt	eq
 8006178:	2300      	moveq	r3, #0
 800617a:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	f003 fda1 	bl	8009cc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006182:	7c23      	ldrb	r3, [r4, #16]
 8006184:	f88d 3000 	strb.w	r3, [sp]
 8006188:	1d23      	adds	r3, r4, #4
 800618a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	f003 fcd7 	bl	8009b40 <USB_CoreInit>
 8006192:	b158      	cbz	r0, 80061ac <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006194:	2302      	movs	r3, #2
 8006196:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800619a:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800619c:	4628      	mov	r0, r5
 800619e:	b003      	add	sp, #12
 80061a0:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80061a2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 80061a6:	f008 f9a1 	bl	800e4ec <HAL_PCD_MspInit>
 80061aa:	e7df      	b.n	800616c <HAL_PCD_Init+0x12>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061ac:	2100      	movs	r1, #0
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	f003 fd8e 	bl	8009cd0 <USB_SetCurrentMode>
 80061b4:	bbb0      	cbnz	r0, 8006224 <HAL_PCD_Init+0xca>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b6:	7925      	ldrb	r5, [r4, #4]
 80061b8:	b32d      	cbz	r5, 8006206 <HAL_PCD_Init+0xac>
 80061ba:	4623      	mov	r3, r4
 80061bc:	4622      	mov	r2, r4
 80061be:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 80061c0:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061c4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 80061c6:	f882 e015 	strb.w	lr, [r2, #21]
    hpcd->IN_ep[i].num = i;
 80061ca:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80061cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061ce:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061d0:	61d0      	str	r0, [r2, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061d2:	6210      	str	r0, [r2, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061d4:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061d8:	468c      	mov	ip, r1
 80061da:	3101      	adds	r1, #1
 80061dc:	42a9      	cmp	r1, r5
 80061de:	d1f2      	bne.n	80061c6 <HAL_PCD_Init+0x6c>
 80061e0:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80061e2:	460a      	mov	r2, r1
 80061e4:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 80061e8:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061ec:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061f0:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061f4:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061f8:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061fc:	3324      	adds	r3, #36	@ 0x24
 80061fe:	4561      	cmp	r1, ip
 8006200:	f101 0101 	add.w	r1, r1, #1
 8006204:	d1ee      	bne.n	80061e4 <HAL_PCD_Init+0x8a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006206:	7c23      	ldrb	r3, [r4, #16]
 8006208:	f88d 3000 	strb.w	r3, [sp]
 800620c:	1d23      	adds	r3, r4, #4
 800620e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	f003 fddd 	bl	8009dd0 <USB_DevInit>
 8006216:	4605      	mov	r5, r0
 8006218:	b148      	cbz	r0, 800622e <HAL_PCD_Init+0xd4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800621a:	2302      	movs	r3, #2
 800621c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8006220:	2501      	movs	r5, #1
 8006222:	e7bb      	b.n	800619c <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006224:	2302      	movs	r3, #2
 8006226:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800622a:	2501      	movs	r5, #1
 800622c:	e7b6      	b.n	800619c <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006232:	2301      	movs	r3, #1
 8006234:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8006238:	6820      	ldr	r0, [r4, #0]
 800623a:	f004 f991 	bl	800a560 <USB_DevDisconnect>
  return HAL_OK;
 800623e:	e7ad      	b.n	800619c <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8006240:	2501      	movs	r5, #1
 8006242:	e7ab      	b.n	800619c <HAL_PCD_Init+0x42>

08006244 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006244:	b538      	push	{r3, r4, r5, lr}
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006246:	b190      	cbz	r0, 800626e <HAL_PCD_DeInit+0x2a>
 8006248:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800624a:	2303      	movs	r3, #3
 800624c:	f880 3495 	strb.w	r3, [r0, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006250:	6800      	ldr	r0, [r0, #0]
 8006252:	f004 f948 	bl	800a4e6 <USB_StopDevice>
 8006256:	4605      	mov	r5, r0
 8006258:	b110      	cbz	r0, 8006260 <HAL_PCD_DeInit+0x1c>
  {
    return HAL_ERROR;
 800625a:	2501      	movs	r5, #1
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}
 800625c:	4628      	mov	r0, r5
 800625e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_PCD_MspDeInit(hpcd);
 8006260:	4620      	mov	r0, r4
 8006262:	f008 f985 	bl	800e570 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  return HAL_OK;
 800626c:	e7f6      	b.n	800625c <HAL_PCD_DeInit+0x18>
    return HAL_ERROR;
 800626e:	2501      	movs	r5, #1
 8006270:	e7f4      	b.n	800625c <HAL_PCD_DeInit+0x18>

08006272 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006272:	6803      	ldr	r3, [r0, #0]

  __HAL_LOCK(hpcd);
 8006274:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8006278:	2a01      	cmp	r2, #1
 800627a:	d01a      	beq.n	80062b2 <HAL_PCD_Start+0x40>
{
 800627c:	b510      	push	{r4, lr}
 800627e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006280:	2201      	movs	r2, #1
 8006282:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800628c:	d002      	beq.n	8006294 <HAL_PCD_Start+0x22>
 800628e:	7b42      	ldrb	r2, [r0, #13]
 8006290:	2a01      	cmp	r2, #1
 8006292:	d009      	beq.n	80062a8 <HAL_PCD_Start+0x36>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	f003 fd0f 	bl	8009cb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	f004 f952 	bl	800a544 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062a0:	2000      	movs	r0, #0
 80062a2:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 80062a6:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80062b0:	e7f0      	b.n	8006294 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 80062b2:	2002      	movs	r0, #2
}
 80062b4:	4770      	bx	lr

080062b6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80062b6:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 80062b8:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d01e      	beq.n	80062fe <HAL_PCD_Stop+0x48>
 80062c0:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062c2:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 80062c4:	2301      	movs	r3, #1
 80062c6:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 80062ca:	4628      	mov	r0, r5
 80062cc:	f003 fcfa 	bl	8009cc4 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	f004 f945 	bl	800a560 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062d6:	2110      	movs	r1, #16
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	f003 fd2a 	bl	8009d32 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062de:	68eb      	ldr	r3, [r5, #12]
 80062e0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80062e4:	d002      	beq.n	80062ec <HAL_PCD_Stop+0x36>
 80062e6:	7b63      	ldrb	r3, [r4, #13]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d003      	beq.n	80062f4 <HAL_PCD_Stop+0x3e>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }

  __HAL_UNLOCK(hpcd);
 80062ec:	2000      	movs	r0, #0
 80062ee:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062f4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fa:	63ab      	str	r3, [r5, #56]	@ 0x38
 80062fc:	e7f6      	b.n	80062ec <HAL_PCD_Stop+0x36>
  __HAL_LOCK(hpcd);
 80062fe:	2002      	movs	r0, #2
 8006300:	e7f7      	b.n	80062f2 <HAL_PCD_Stop+0x3c>

08006302 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8006302:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8006306:	2b01      	cmp	r3, #1
 8006308:	d00c      	beq.n	8006324 <HAL_PCD_SetAddress+0x22>
{
 800630a:	b510      	push	{r4, lr}
 800630c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800630e:	2301      	movs	r3, #1
 8006310:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006314:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006316:	6800      	ldr	r0, [r0, #0]
 8006318:	f004 f904 	bl	800a524 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800631c:	2000      	movs	r0, #0
 800631e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 8006322:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006324:	2002      	movs	r0, #2
}
 8006326:	4770      	bx	lr

08006328 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006328:	b510      	push	{r4, lr}
 800632a:	4604      	mov	r4, r0
 800632c:	468c      	mov	ip, r1
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800632e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006332:	d12a      	bne.n	800638a <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006334:	f001 000f 	and.w	r0, r1, #15
 8006338:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800633c:	eb04 0e81 	add.w	lr, r4, r1, lsl #2
 8006340:	f50e 7115 	add.w	r1, lr, #596	@ 0x254
    ep->is_in = 0U;
 8006344:	4670      	mov	r0, lr
 8006346:	f04f 0e00 	mov.w	lr, #0
 800634a:	f880 e255 	strb.w	lr, [r0, #597]	@ 0x255
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800634e:	f00c 0c0f 	and.w	ip, ip, #15
 8006352:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006356:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800635a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800635c:	710b      	strb	r3, [r1, #4]

  if (ep->is_in != 0U)
 800635e:	784a      	ldrb	r2, [r1, #1]
 8006360:	b10a      	cbz	r2, 8006366 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006362:	f8a1 c01a 	strh.w	ip, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006366:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8006368:	bf04      	itt	eq
 800636a:	2300      	moveq	r3, #0
 800636c:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 800636e:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8006372:	2b01      	cmp	r3, #1
 8006374:	d019      	beq.n	80063aa <HAL_PCD_EP_Open+0x82>
 8006376:	2301      	movs	r3, #1
 8006378:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	f003 fe04 	bl	8009f8a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006382:	2000      	movs	r0, #0
 8006384:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return ret;
}
 8006388:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800638a:	f001 000f 	and.w	r0, r1, #15
 800638e:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8006392:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006396:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006398:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800639c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80063a0:	f04f 0e01 	mov.w	lr, #1
 80063a4:	f880 e015 	strb.w	lr, [r0, #21]
 80063a8:	e7d1      	b.n	800634e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 80063aa:	2002      	movs	r0, #2
 80063ac:	e7ec      	b.n	8006388 <HAL_PCD_EP_Open+0x60>

080063ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063ae:	b510      	push	{r4, lr}
 80063b0:	4604      	mov	r4, r0
 80063b2:	460b      	mov	r3, r1
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063b4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80063b8:	d11f      	bne.n	80063fa <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ba:	f001 020f 	and.w	r2, r1, #15
 80063be:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80063c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80063c6:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80063ca:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80063ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80063d2:	2000      	movs	r0, #0
 80063d4:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80063de:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d017      	beq.n	8006416 <HAL_PCD_EP_Close+0x68>
 80063e6:	2301      	movs	r3, #1
 80063e8:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	f003 fe17 	bl	800a020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063f2:	2000      	movs	r0, #0
 80063f4:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
  return HAL_OK;
}
 80063f8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fa:	f001 020f 	and.w	r2, r1, #15
 80063fe:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8006402:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006406:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006408:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800640c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006410:	2001      	movs	r0, #1
 8006412:	7550      	strb	r0, [r2, #21]
 8006414:	e7e0      	b.n	80063d8 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8006416:	2002      	movs	r0, #2
 8006418:	e7ee      	b.n	80063f8 <HAL_PCD_EP_Close+0x4a>

0800641a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800641a:	b510      	push	{r4, lr}
 800641c:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641e:	f001 0c0f 	and.w	ip, r1, #15
 8006422:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8006426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800642a:	f501 7115 	add.w	r1, r1, #596	@ 0x254

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800642e:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8006432:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006436:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 800643a:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8006444:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8006448:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
 800644c:	7982      	ldrb	r2, [r0, #6]
 800644e:	2a01      	cmp	r2, #1
 8006450:	d004      	beq.n	800645c <HAL_PCD_EP_Receive+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006452:	6800      	ldr	r0, [r0, #0]
 8006454:	f003 feba 	bl	800a1cc <USB_EPStartXfer>

  return HAL_OK;
}
 8006458:	2000      	movs	r0, #0
 800645a:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800645c:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8006460:	e7f7      	b.n	8006452 <HAL_PCD_EP_Receive+0x38>

08006462 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006462:	f001 010f 	and.w	r1, r1, #15
 8006466:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800646a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800646e:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8006472:	4770      	bx	lr

08006474 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006474:	b510      	push	{r4, lr}
 8006476:	4614      	mov	r4, r2
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006478:	f001 0c0f 	and.w	ip, r1, #15
 800647c:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8006480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006484:	3114      	adds	r1, #20

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006486:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800648a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800648e:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8006492:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 800649c:	2301      	movs	r3, #1
 800649e:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064a2:	f88e c014 	strb.w	ip, [lr, #20]

  if (hpcd->Init.dma_enable == 1U)
 80064a6:	7982      	ldrb	r2, [r0, #6]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d004      	beq.n	80064b6 <HAL_PCD_EP_Transmit+0x42>
  {
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ac:	6800      	ldr	r0, [r0, #0]
 80064ae:	f003 fe8d 	bl	800a1cc <USB_EPStartXfer>

  return HAL_OK;
}
 80064b2:	2000      	movs	r0, #0
 80064b4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80064b6:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80064ba:	e7f7      	b.n	80064ac <HAL_PCD_EP_Transmit+0x38>

080064bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064bc:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064be:	f001 050f 	and.w	r5, r1, #15
 80064c2:	7902      	ldrb	r2, [r0, #4]
 80064c4:	42aa      	cmp	r2, r5
 80064c6:	d336      	bcc.n	8006536 <HAL_PCD_EP_SetStall+0x7a>
 80064c8:	4604      	mov	r4, r0
 80064ca:	460b      	mov	r3, r1
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064cc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80064d0:	d11e      	bne.n	8006510 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80064d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064da:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80064de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80064e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  }

  ep->is_stall = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f0:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 80064f2:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d01f      	beq.n	800653a <HAL_PCD_EP_SetStall+0x7e>
 80064fa:	2301      	movs	r3, #1
 80064fc:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	f003 ff95 	bl	800a430 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006506:	b17d      	cbz	r5, 8006528 <HAL_PCD_EP_SetStall+0x6c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }

  __HAL_UNLOCK(hpcd);
 8006508:	2000      	movs	r0, #0
 800650a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 800650e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006510:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8006514:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006518:	3114      	adds	r1, #20
    ep->is_in = 1U;
 800651a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800651e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006522:	2201      	movs	r2, #1
 8006524:	755a      	strb	r2, [r3, #21]
 8006526:	e7e1      	b.n	80064ec <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006528:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800652c:	79a1      	ldrb	r1, [r4, #6]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	f004 f864 	bl	800a5fc <USB_EP0_OutStart>
 8006534:	e7e8      	b.n	8006508 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8006536:	2001      	movs	r0, #1
 8006538:	e7e9      	b.n	800650e <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800653a:	2002      	movs	r0, #2
 800653c:	e7e7      	b.n	800650e <HAL_PCD_EP_SetStall+0x52>

0800653e <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800653e:	f001 030f 	and.w	r3, r1, #15
 8006542:	7902      	ldrb	r2, [r0, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d32e      	bcc.n	80065a6 <HAL_PCD_EP_ClrStall+0x68>
{
 8006548:	b510      	push	{r4, lr}
 800654a:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 800654c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006550:	d11d      	bne.n	800658e <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006552:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8006556:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800655a:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 800655e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8006562:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006566:	2000      	movs	r0, #0
 8006568:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  }

  ep->is_stall = 0U;
 800656c:	2200      	movs	r2, #0
 800656e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006570:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8006572:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8006576:	2b01      	cmp	r3, #1
 8006578:	d017      	beq.n	80065aa <HAL_PCD_EP_ClrStall+0x6c>
 800657a:	2301      	movs	r3, #1
 800657c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	f003 ff82 	bl	800a48a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006586:	2000      	movs	r0, #0
 8006588:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 800658c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800658e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8006592:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006596:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006598:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800659c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80065a0:	2001      	movs	r0, #1
 80065a2:	7550      	strb	r0, [r2, #21]
 80065a4:	e7e2      	b.n	800656c <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 80065a6:	2001      	movs	r0, #1
}
 80065a8:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80065aa:	2002      	movs	r0, #2
 80065ac:	e7ee      	b.n	800658c <HAL_PCD_EP_ClrStall+0x4e>

080065ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ae:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065b0:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b4:	f001 010f 	and.w	r1, r1, #15
 80065b8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80065bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065c0:	bf14      	ite	ne
 80065c2:	3114      	addne	r1, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065c4:	f501 7115 	addeq.w	r1, r1, #596	@ 0x254
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80065c8:	6800      	ldr	r0, [r0, #0]
 80065ca:	f003 fd97 	bl	800a0fc <USB_EPStopXfer>

  return ret;
}
 80065ce:	bd08      	pop	{r3, pc}

080065d0 <HAL_PCD_IRQHandler>:
{
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b089      	sub	sp, #36	@ 0x24
 80065d6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065d8:	6806      	ldr	r6, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065da:	4630      	mov	r0, r6
 80065dc:	f003 fffc 	bl	800a5d8 <USB_GetMode>
 80065e0:	b110      	cbz	r0, 80065e8 <HAL_PCD_IRQHandler+0x18>
}
 80065e2:	b009      	add	sp, #36	@ 0x24
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e8:	4683      	mov	fp, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	f003 ffc6 	bl	800a57c <USB_ReadInterrupts>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d0f6      	beq.n	80065e2 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80065f4:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 80065fe:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8006602:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	f003 ffb8 	bl	800a57c <USB_ReadInterrupts>
 800660c:	f010 0f02 	tst.w	r0, #2
 8006610:	d004      	beq.n	800661c <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	6953      	ldr	r3, [r2, #20]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	f003 ffad 	bl	800a57c <USB_ReadInterrupts>
 8006622:	f010 0f10 	tst.w	r0, #16
 8006626:	d014      	beq.n	8006652 <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	6993      	ldr	r3, [r2, #24]
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8006632:	6a35      	ldr	r5, [r6, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006634:	f005 070f 	and.w	r7, r5, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006638:	f405 13f0 	and.w	r3, r5, #1966080	@ 0x1e0000
 800663c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006640:	d052      	beq.n	80066e8 <HAL_PCD_IRQHandler+0x118>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006642:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006646:	d06d      	beq.n	8006724 <HAL_PCD_IRQHandler+0x154>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	6993      	ldr	r3, [r2, #24]
 800664c:	f043 0310 	orr.w	r3, r3, #16
 8006650:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	f003 ff92 	bl	800a57c <USB_ReadInterrupts>
 8006658:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 800665c:	d174      	bne.n	8006748 <HAL_PCD_IRQHandler+0x178>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	f003 ff8c 	bl	800a57c <USB_ReadInterrupts>
 8006664:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8006668:	f040 8151 	bne.w	800690e <HAL_PCD_IRQHandler+0x33e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	f003 ff85 	bl	800a57c <USB_ReadInterrupts>
 8006672:	2800      	cmp	r0, #0
 8006674:	f2c0 8221 	blt.w	8006aba <HAL_PCD_IRQHandler+0x4ea>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006678:	6820      	ldr	r0, [r4, #0]
 800667a:	f003 ff7f 	bl	800a57c <USB_ReadInterrupts>
 800667e:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8006682:	d00a      	beq.n	800669a <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f013 0f01 	tst.w	r3, #1
 800668c:	f040 822e 	bne.w	8006aec <HAL_PCD_IRQHandler+0x51c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	6953      	ldr	r3, [r2, #20]
 8006694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006698:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	f003 ff6e 	bl	800a57c <USB_ReadInterrupts>
 80066a0:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 80066a4:	f040 8226 	bne.w	8006af4 <HAL_PCD_IRQHandler+0x524>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	f003 ff67 	bl	800a57c <USB_ReadInterrupts>
 80066ae:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 80066b2:	f040 8276 	bne.w	8006ba2 <HAL_PCD_IRQHandler+0x5d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	f003 ff60 	bl	800a57c <USB_ReadInterrupts>
 80066bc:	f010 0f08 	tst.w	r0, #8
 80066c0:	f040 8287 	bne.w	8006bd2 <HAL_PCD_IRQHandler+0x602>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	f003 ff59 	bl	800a57c <USB_ReadInterrupts>
 80066ca:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80066ce:	f000 8297 	beq.w	8006c00 <HAL_PCD_IRQHandler+0x630>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80066d2:	69b3      	ldr	r3, [r6, #24]
 80066d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d8:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066da:	7923      	ldrb	r3, [r4, #4]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f240 828f 	bls.w	8006c00 <HAL_PCD_IRQHandler+0x630>
 80066e2:	4627      	mov	r7, r4
 80066e4:	2501      	movs	r5, #1
 80066e6:	e286      	b.n	8006bf6 <HAL_PCD_IRQHandler+0x626>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80066e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80066ec:	421d      	tst	r5, r3
 80066ee:	d0ab      	beq.n	8006648 <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80066f0:	ea4f 1a15 	mov.w	sl, r5, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066f4:	eb07 08c7 	add.w	r8, r7, r7, lsl #3
 80066f8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80066fc:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8006700:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8006704:	4630      	mov	r0, r6
 8006706:	f003 fe6f 	bl	800a3e8 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800670a:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 800670e:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
 8006712:	4453      	add	r3, sl
 8006714:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006718:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 800671c:	4453      	add	r3, sl
 800671e:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8006722:	e791      	b.n	8006648 <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006724:	2208      	movs	r2, #8
 8006726:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 800672a:	4630      	mov	r0, r6
 800672c:	f003 fe5c 	bl	800a3e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006730:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
 8006734:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006738:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800673c:	f8d1 2268 	ldr.w	r2, [r1, #616]	@ 0x268
 8006740:	4413      	add	r3, r2
 8006742:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
 8006746:	e77f      	b.n	8006648 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	f003 ff1b 	bl	800a584 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800674e:	4605      	mov	r5, r0
 8006750:	2800      	cmp	r0, #0
 8006752:	d084      	beq.n	800665e <HAL_PCD_IRQHandler+0x8e>
 8006754:	f506 6730 	add.w	r7, r6, #2816	@ 0xb00
 8006758:	46a2      	mov	sl, r4
      epnum = 0U;
 800675a:	46d9      	mov	r9, fp
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800675c:	f8cd b010 	str.w	fp, [sp, #16]
 8006760:	e0a7      	b.n	80068b2 <HAL_PCD_IRQHandler+0x2e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006762:	2301      	movs	r3, #1
 8006764:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006766:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006768:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800676c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
 8006770:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 8006774:	6899      	ldr	r1, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006776:	79a2      	ldrb	r2, [r4, #6]
 8006778:	2a01      	cmp	r2, #1
 800677a:	d00e      	beq.n	800679a <HAL_PCD_IRQHandler+0x1ca>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800677c:	4a9e      	ldr	r2, [pc, #632]	@ (80069f8 <HAL_PCD_IRQHandler+0x428>)
 800677e:	4594      	cmp	ip, r2
 8006780:	d048      	beq.n	8006814 <HAL_PCD_IRQHandler+0x244>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	d103      	bne.n	8006790 <HAL_PCD_IRQHandler+0x1c0>
 8006788:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
 800678c:	2b00      	cmp	r3, #0
 800678e:	d052      	beq.n	8006836 <HAL_PCD_IRQHandler+0x266>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006790:	4659      	mov	r1, fp
 8006792:	4620      	mov	r0, r4
 8006794:	f007 ff0c 	bl	800e5b0 <HAL_PCD_DataOutStageCallback>
 8006798:	e099      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800679a:	f011 0f08 	tst.w	r1, #8
 800679e:	d00b      	beq.n	80067b8 <HAL_PCD_IRQHandler+0x1e8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067a0:	4a96      	ldr	r2, [pc, #600]	@ (80069fc <HAL_PCD_IRQHandler+0x42c>)
 80067a2:	4594      	cmp	ip, r2
 80067a4:	f240 8093 	bls.w	80068ce <HAL_PCD_IRQHandler+0x2fe>
 80067a8:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80067ac:	f000 808f 	beq.w	80068ce <HAL_PCD_IRQHandler+0x2fe>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e08a      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067b8:	f011 0f20 	tst.w	r1, #32
 80067bc:	d002      	beq.n	80067c4 <HAL_PCD_IRQHandler+0x1f4>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067be:	2220      	movs	r2, #32
 80067c0:	609a      	str	r2, [r3, #8]
 80067c2:	e084      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067c4:	4a8d      	ldr	r2, [pc, #564]	@ (80069fc <HAL_PCD_IRQHandler+0x42c>)
 80067c6:	4594      	cmp	ip, r2
 80067c8:	d906      	bls.n	80067d8 <HAL_PCD_IRQHandler+0x208>
 80067ca:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80067ce:	d003      	beq.n	80067d8 <HAL_PCD_IRQHandler+0x208>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80067d4:	609a      	str	r2, [r3, #8]
 80067d6:	e07a      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80067de:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
 80067e8:	f1b9 0f00 	cmp.w	r9, #0
 80067ec:	d107      	bne.n	80067fe <HAL_PCD_IRQHandler+0x22e>
          if (ep->xfer_len == 0U)
 80067ee:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
 80067f2:	b14a      	cbz	r2, 8006808 <HAL_PCD_IRQHandler+0x238>
            ep->xfer_buff += ep->xfer_count;
 80067f4:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
 80067f8:	441a      	add	r2, r3
 80067fa:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067fe:	4659      	mov	r1, fp
 8006800:	4620      	mov	r0, r4
 8006802:	f007 fed5 	bl	800e5b0 <HAL_PCD_DataOutStageCallback>
 8006806:	e062      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006808:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800680c:	2101      	movs	r1, #1
 800680e:	f003 fef5 	bl	800a5fc <USB_EP0_OutStart>
 8006812:	e7f4      	b.n	80067fe <HAL_PCD_IRQHandler+0x22e>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006814:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006818:	d003      	beq.n	8006822 <HAL_PCD_IRQHandler+0x252>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800681a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	e055      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006822:	f011 0f20 	tst.w	r1, #32
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006826:	bf1c      	itt	ne
 8006828:	2220      	movne	r2, #32
 800682a:	609a      	strne	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800682c:	4659      	mov	r1, fp
 800682e:	4620      	mov	r0, r4
 8006830:	f007 febe 	bl	800e5b0 <HAL_PCD_DataOutStageCallback>
 8006834:	e04b      	b.n	80068ce <HAL_PCD_IRQHandler+0x2fe>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006836:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 800683a:	2100      	movs	r1, #0
 800683c:	f003 fede 	bl	800a5fc <USB_EP0_OutStart>
 8006840:	e7a6      	b.n	8006790 <HAL_PCD_IRQHandler+0x1c0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006842:	2308      	movs	r3, #8
 8006844:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006846:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006848:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800684a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684e:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 8006852:	6898      	ldr	r0, [r3, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006854:	4a69      	ldr	r2, [pc, #420]	@ (80069fc <HAL_PCD_IRQHandler+0x42c>)
 8006856:	4291      	cmp	r1, r2
 8006858:	f240 8259 	bls.w	8006d0e <HAL_PCD_IRQHandler+0x73e>
 800685c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006860:	d002      	beq.n	8006868 <HAL_PCD_IRQHandler+0x298>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006862:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006866:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006868:	4620      	mov	r0, r4
 800686a:	f007 fe99 	bl	800e5a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800686e:	79a3      	ldrb	r3, [r4, #6]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d12f      	bne.n	80068d4 <HAL_PCD_IRQHandler+0x304>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006874:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006878:	2101      	movs	r1, #1
 800687a:	6820      	ldr	r0, [r4, #0]
 800687c:	f003 febe 	bl	800a5fc <USB_EP0_OutStart>
 8006880:	e028      	b.n	80068d4 <HAL_PCD_IRQHandler+0x304>
            if (ep->is_iso_incomplete == 1U)
 8006882:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
 8006886:	2b01      	cmp	r3, #1
 8006888:	d036      	beq.n	80068f8 <HAL_PCD_IRQHandler+0x328>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800688a:	2302      	movs	r3, #2
 800688c:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800688e:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006892:	bf1c      	itt	ne
 8006894:	2320      	movne	r3, #32
 8006896:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006898:	f418 5f00 	tst.w	r8, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800689c:	bf1c      	itt	ne
 800689e:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 80068a2:	60bb      	strne	r3, [r7, #8]
        epnum++;
 80068a4:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 80068a8:	3720      	adds	r7, #32
 80068aa:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80068ae:	086d      	lsrs	r5, r5, #1
 80068b0:	d02a      	beq.n	8006908 <HAL_PCD_IRQHandler+0x338>
        if ((ep_intr & 0x1U) != 0U)
 80068b2:	f015 0f01 	tst.w	r5, #1
 80068b6:	d0f5      	beq.n	80068a4 <HAL_PCD_IRQHandler+0x2d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068b8:	fa5f fb89 	uxtb.w	fp, r9
 80068bc:	4659      	mov	r1, fp
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	f003 fe70 	bl	800a5a4 <USB_ReadDevOutEPInterrupt>
 80068c4:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068c6:	f010 0f01 	tst.w	r0, #1
 80068ca:	f47f af4a 	bne.w	8006762 <HAL_PCD_IRQHandler+0x192>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068ce:	f018 0f08 	tst.w	r8, #8
 80068d2:	d1b6      	bne.n	8006842 <HAL_PCD_IRQHandler+0x272>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068d4:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068d8:	bf1c      	itt	ne
 80068da:	2310      	movne	r3, #16
 80068dc:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80068de:	f018 0f02 	tst.w	r8, #2
 80068e2:	d0d4      	beq.n	800688e <HAL_PCD_IRQHandler+0x2be>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80068e4:	6973      	ldr	r3, [r6, #20]
 80068e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068ea:	d0ca      	beq.n	8006882 <HAL_PCD_IRQHandler+0x2b2>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068ec:	9a03      	ldr	r2, [sp, #12]
 80068ee:	6853      	ldr	r3, [r2, #4]
 80068f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	e7c4      	b.n	8006882 <HAL_PCD_IRQHandler+0x2b2>
              ep->is_iso_incomplete = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068fe:	4659      	mov	r1, fp
 8006900:	4620      	mov	r0, r4
 8006902:	f007 fea5 	bl	800e650 <HAL_PCD_ISOOUTIncompleteCallback>
 8006906:	e7c0      	b.n	800688a <HAL_PCD_IRQHandler+0x2ba>
 8006908:	f8dd b010 	ldr.w	fp, [sp, #16]
 800690c:	e6a7      	b.n	800665e <HAL_PCD_IRQHandler+0x8e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800690e:	6820      	ldr	r0, [r4, #0]
 8006910:	f003 fe40 	bl	800a594 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8006914:	4680      	mov	r8, r0
 8006916:	2800      	cmp	r0, #0
 8006918:	f43f aea8 	beq.w	800666c <HAL_PCD_IRQHandler+0x9c>
 800691c:	46a2      	mov	sl, r4
 800691e:	f506 6910 	add.w	r9, r6, #2304	@ 0x900
      epnum = 0U;
 8006922:	465d      	mov	r5, fp
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006924:	f8cd b010 	str.w	fp, [sp, #16]
 8006928:	e024      	b.n	8006974 <HAL_PCD_IRQHandler+0x3a4>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800692a:	4659      	mov	r1, fp
 800692c:	4620      	mov	r0, r4
 800692e:	f007 fe4b 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006932:	f017 0f08 	tst.w	r7, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006936:	bf1c      	itt	ne
 8006938:	2308      	movne	r3, #8
 800693a:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800693e:	f017 0f10 	tst.w	r7, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006942:	bf1c      	itt	ne
 8006944:	2310      	movne	r3, #16
 8006946:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800694a:	f017 0f40 	tst.w	r7, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800694e:	bf1c      	itt	ne
 8006950:	2340      	movne	r3, #64	@ 0x40
 8006952:	f8c9 3008 	strne.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006956:	f017 0f02 	tst.w	r7, #2
 800695a:	d139      	bne.n	80069d0 <HAL_PCD_IRQHandler+0x400>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800695c:	f017 0f80 	tst.w	r7, #128	@ 0x80
 8006960:	d14e      	bne.n	8006a00 <HAL_PCD_IRQHandler+0x430>
        epnum++;
 8006962:	3501      	adds	r5, #1
      while (ep_intr != 0U)
 8006964:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 8006968:	f109 0920 	add.w	r9, r9, #32
 800696c:	ea5f 0858 	movs.w	r8, r8, lsr #1
 8006970:	f000 80a0 	beq.w	8006ab4 <HAL_PCD_IRQHandler+0x4e4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006974:	f018 0f01 	tst.w	r8, #1
 8006978:	d0f3      	beq.n	8006962 <HAL_PCD_IRQHandler+0x392>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800697a:	fa5f fb85 	uxtb.w	fp, r5
 800697e:	4659      	mov	r1, fp
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	f003 fe18 	bl	800a5b6 <USB_ReadDevInEPInterrupt>
 8006986:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006988:	f010 0f01 	tst.w	r0, #1
 800698c:	d0d1      	beq.n	8006932 <HAL_PCD_IRQHandler+0x362>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800698e:	9803      	ldr	r0, [sp, #12]
 8006990:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006992:	f005 020f 	and.w	r2, r5, #15
 8006996:	2101      	movs	r1, #1
 8006998:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800699c:	ea23 0302 	bic.w	r3, r3, r2
 80069a0:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069a2:	f8c9 1008 	str.w	r1, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80069a6:	79a3      	ldrb	r3, [r4, #6]
 80069a8:	428b      	cmp	r3, r1
 80069aa:	d1be      	bne.n	800692a <HAL_PCD_IRQHandler+0x35a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80069ac:	f8da 3020 	ldr.w	r3, [sl, #32]
 80069b0:	f8da 201c 	ldr.w	r2, [sl, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f8ca 3020 	str.w	r3, [sl, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	d1b5      	bne.n	800692a <HAL_PCD_IRQHandler+0x35a>
 80069be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1b2      	bne.n	800692a <HAL_PCD_IRQHandler+0x35a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069c4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	f003 fe17 	bl	800a5fc <USB_EP0_OutStart>
 80069ce:	e7ac      	b.n	800692a <HAL_PCD_IRQHandler+0x35a>
            (void)USB_FlushTxFifo(USBx, epnum);
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f003 f9ad 	bl	8009d32 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80069d8:	f89a 3017 	ldrb.w	r3, [sl, #23]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d003      	beq.n	80069e8 <HAL_PCD_IRQHandler+0x418>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80069e0:	2302      	movs	r3, #2
 80069e2:	f8c9 3008 	str.w	r3, [r9, #8]
 80069e6:	e7b9      	b.n	800695c <HAL_PCD_IRQHandler+0x38c>
              ep->is_iso_incomplete = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f88a 3017 	strb.w	r3, [sl, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80069ee:	4659      	mov	r1, fp
 80069f0:	4620      	mov	r0, r4
 80069f2:	f007 fe33 	bl	800e65c <HAL_PCD_ISOINIncompleteCallback>
 80069f6:	e7f3      	b.n	80069e0 <HAL_PCD_IRQHandler+0x410>
 80069f8:	4f54310a 	.word	0x4f54310a
 80069fc:	4f54300a 	.word	0x4f54300a
  if (ep->xfer_count > ep->xfer_len)
 8006a00:	4657      	mov	r7, sl
 8006a02:	f8da c028 	ldr.w	ip, [sl, #40]	@ 0x28
 8006a06:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8006a0a:	459c      	cmp	ip, r3
 8006a0c:	d8a9      	bhi.n	8006962 <HAL_PCD_IRQHandler+0x392>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a0e:	6821      	ldr	r1, [r4, #0]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a10:	f501 6010 	add.w	r0, r1, #2304	@ 0x900
 8006a14:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8006a18:	f8d0 e018 	ldr.w	lr, [r0, #24]
  len = ep->xfer_len - ep->xfer_count;
 8006a1c:	eba3 030c 	sub.w	r3, r3, ip
  if (len > ep->maxpacket)
 8006a20:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf28      	it	cs
 8006a28:	4613      	movcs	r3, r2
  len32b = (len + 3U) / 4U;
 8006a2a:	3303      	adds	r3, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a2c:	fa1f f28e 	uxth.w	r2, lr
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a30:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 8006a34:	d328      	bcc.n	8006a88 <HAL_PCD_IRQHandler+0x4b8>
 8006a36:	9605      	str	r6, [sp, #20]
 8006a38:	9506      	str	r5, [sp, #24]
 8006a3a:	f8cd 801c 	str.w	r8, [sp, #28]
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4680      	mov	r8, r0
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8006a46:	429d      	cmp	r5, r3
 8006a48:	d924      	bls.n	8006a94 <HAL_PCD_IRQHandler+0x4c4>
    len = ep->xfer_len - ep->xfer_count;
 8006a4a:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf28      	it	cs
 8006a52:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a54:	79a3      	ldrb	r3, [r4, #6]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	b2ab      	uxth	r3, r5
 8006a5a:	465a      	mov	r2, fp
 8006a5c:	6a39      	ldr	r1, [r7, #32]
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f003 fb9d 	bl	800a19e <USB_WritePacket>
    ep->xfer_buff  += len;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	442b      	add	r3, r5
 8006a68:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	442b      	add	r3, r5
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a70:	f8d8 3018 	ldr.w	r3, [r8, #24]
    len32b = (len + 3U) / 4U;
 8006a74:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a78:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8006a7c:	d2e1      	bcs.n	8006a42 <HAL_PCD_IRQHandler+0x472>
 8006a7e:	9d06      	ldr	r5, [sp, #24]
 8006a80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006a84:	4631      	mov	r1, r6
 8006a86:	9e05      	ldr	r6, [sp, #20]
  if (ep->xfer_len <= ep->xfer_count)
 8006a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	f63f af68 	bhi.w	8006962 <HAL_PCD_IRQHandler+0x392>
 8006a92:	e004      	b.n	8006a9e <HAL_PCD_IRQHandler+0x4ce>
 8006a94:	9d06      	ldr	r5, [sp, #24]
 8006a96:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	9e05      	ldr	r6, [sp, #20]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a9e:	f8d1 3834 	ldr.w	r3, [r1, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006aa2:	f005 000f 	and.w	r0, r5, #15
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4082      	lsls	r2, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006aaa:	ea23 0302 	bic.w	r3, r3, r2
 8006aae:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834
 8006ab2:	e756      	b.n	8006962 <HAL_PCD_IRQHandler+0x392>
 8006ab4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006ab8:	e5d8      	b.n	800666c <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006aba:	9a03      	ldr	r2, [sp, #12]
 8006abc:	6853      	ldr	r3, [r2, #4]
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8006ac4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d008      	beq.n	8006ade <HAL_PCD_IRQHandler+0x50e>
        HAL_PCD_ResumeCallback(hpcd);
 8006acc:	4620      	mov	r0, r4
 8006ace:	f007 fdb9 	bl	800e644 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	6953      	ldr	r3, [r2, #20]
 8006ad6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ada:	6153      	str	r3, [r2, #20]
 8006adc:	e5cc      	b.n	8006678 <HAL_PCD_IRQHandler+0xa8>
        hpcd->LPM_State = LPM_L0;
 8006ade:	2100      	movs	r1, #0
 8006ae0:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 f95b 	bl	8006da0 <HAL_PCDEx_LPM_Callback>
 8006aea:	e7f2      	b.n	8006ad2 <HAL_PCD_IRQHandler+0x502>
        HAL_PCD_SuspendCallback(hpcd);
 8006aec:	4620      	mov	r0, r4
 8006aee:	f007 fd91 	bl	800e614 <HAL_PCD_SuspendCallback>
 8006af2:	e5cd      	b.n	8006690 <HAL_PCD_IRQHandler+0xc0>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006af4:	9a03      	ldr	r2, [sp, #12]
 8006af6:	6853      	ldr	r3, [r2, #4]
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006afe:	2110      	movs	r1, #16
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	f003 f916 	bl	8009d32 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b06:	7923      	ldrb	r3, [r4, #4]
 8006b08:	b1e3      	cbz	r3, 8006b44 <HAL_PCD_IRQHandler+0x574>
 8006b0a:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006b0e:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8006b12:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006b1a:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006b1c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b20:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006b24:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006b28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006b30:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8006b34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b38:	f10b 0b01 	add.w	fp, fp, #1
 8006b3c:	3320      	adds	r3, #32
 8006b3e:	7922      	ldrb	r2, [r4, #4]
 8006b40:	455a      	cmp	r2, fp
 8006b42:	d8e6      	bhi.n	8006b12 <HAL_PCD_IRQHandler+0x542>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006b44:	9a03      	ldr	r2, [sp, #12]
 8006b46:	69d3      	ldr	r3, [r2, #28]
 8006b48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006b4c:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006b4e:	7be3      	ldrb	r3, [r4, #15]
 8006b50:	b1db      	cbz	r3, 8006b8a <HAL_PCD_IRQHandler+0x5ba>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006b52:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8006b56:	f043 030b 	orr.w	r3, r3, #11
 8006b5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006b5e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8006b60:	f043 030b 	orr.w	r3, r3, #11
 8006b64:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b66:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
 8006b6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b6e:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b72:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8006b76:	79a1      	ldrb	r1, [r4, #6]
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	f003 fd3f 	bl	800a5fc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	6953      	ldr	r3, [r2, #20]
 8006b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b86:	6153      	str	r3, [r2, #20]
 8006b88:	e58e      	b.n	80066a8 <HAL_PCD_IRQHandler+0xd8>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b8a:	9a03      	ldr	r2, [sp, #12]
 8006b8c:	6953      	ldr	r3, [r2, #20]
 8006b8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006b92:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006b96:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b98:	6913      	ldr	r3, [r2, #16]
 8006b9a:	f043 030b 	orr.w	r3, r3, #11
 8006b9e:	6113      	str	r3, [r2, #16]
 8006ba0:	e7e1      	b.n	8006b66 <HAL_PCD_IRQHandler+0x596>
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ba2:	6820      	ldr	r0, [r4, #0]
 8006ba4:	f003 fd1c 	bl	800a5e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	f003 f9df 	bl	8009f6c <USB_GetDevSpeed>
 8006bae:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	f000 fc13 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	79e2      	ldrb	r2, [r4, #7]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f003 f80a 	bl	8009bd4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f007 fd12 	bl	800e5ea <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	6953      	ldr	r3, [r2, #20]
 8006bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bce:	6153      	str	r3, [r2, #20]
 8006bd0:	e571      	b.n	80066b6 <HAL_PCD_IRQHandler+0xe6>
      HAL_PCD_SOFCallback(hpcd);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f007 fd03 	bl	800e5de <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	6953      	ldr	r3, [r2, #20]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	6153      	str	r3, [r2, #20]
 8006be2:	e56f      	b.n	80066c4 <HAL_PCD_IRQHandler+0xf4>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006be4:	b2e9      	uxtb	r1, r5
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff fce1 	bl	80065ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bec:	3501      	adds	r5, #1
 8006bee:	3724      	adds	r7, #36	@ 0x24
 8006bf0:	7923      	ldrb	r3, [r4, #4]
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	d904      	bls.n	8006c00 <HAL_PCD_IRQHandler+0x630>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006bf6:	f897 327b 	ldrb.w	r3, [r7, #635]	@ 0x27b
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d1f6      	bne.n	8006bec <HAL_PCD_IRQHandler+0x61c>
 8006bfe:	e7f1      	b.n	8006be4 <HAL_PCD_IRQHandler+0x614>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	f003 fcbb 	bl	800a57c <USB_ReadInterrupts>
 8006c06:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8006c0a:	d024      	beq.n	8006c56 <HAL_PCD_IRQHandler+0x686>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c0c:	7923      	ldrb	r3, [r4, #4]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d91c      	bls.n	8006c4c <HAL_PCD_IRQHandler+0x67c>
 8006c12:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 8006c16:	4625      	mov	r5, r4
 8006c18:	2701      	movs	r7, #1
 8006c1a:	e006      	b.n	8006c2a <HAL_PCD_IRQHandler+0x65a>
 8006c1c:	3701      	adds	r7, #1
 8006c1e:	f108 0820 	add.w	r8, r8, #32
 8006c22:	3524      	adds	r5, #36	@ 0x24
 8006c24:	7923      	ldrb	r3, [r4, #4]
 8006c26:	42bb      	cmp	r3, r7
 8006c28:	d910      	bls.n	8006c4c <HAL_PCD_IRQHandler+0x67c>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c2a:	f8d8 2000 	ldr.w	r2, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c2e:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d1f2      	bne.n	8006c1c <HAL_PCD_IRQHandler+0x64c>
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	daf0      	bge.n	8006c1c <HAL_PCD_IRQHandler+0x64c>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c3a:	f885 303b 	strb.w	r3, [r5, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c3e:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 8006c42:	b2c9      	uxtb	r1, r1
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7ff fcb2 	bl	80065ae <HAL_PCD_EP_Abort>
 8006c4a:	e7e7      	b.n	8006c1c <HAL_PCD_IRQHandler+0x64c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	6953      	ldr	r3, [r2, #20]
 8006c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c54:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	f003 fc90 	bl	800a57c <USB_ReadInterrupts>
 8006c5c:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8006c60:	d031      	beq.n	8006cc6 <HAL_PCD_IRQHandler+0x6f6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c62:	7923      	ldrb	r3, [r4, #4]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d929      	bls.n	8006cbc <HAL_PCD_IRQHandler+0x6ec>
 8006c68:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	2101      	movs	r1, #1
 8006c70:	e005      	b.n	8006c7e <HAL_PCD_IRQHandler+0x6ae>
 8006c72:	3101      	adds	r1, #1
 8006c74:	3220      	adds	r2, #32
 8006c76:	3324      	adds	r3, #36	@ 0x24
 8006c78:	7920      	ldrb	r0, [r4, #4]
 8006c7a:	4288      	cmp	r0, r1
 8006c7c:	d91e      	bls.n	8006cbc <HAL_PCD_IRQHandler+0x6ec>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c7e:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c80:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
 8006c84:	2801      	cmp	r0, #1
 8006c86:	d1f4      	bne.n	8006c72 <HAL_PCD_IRQHandler+0x6a2>
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	daf2      	bge.n	8006c72 <HAL_PCD_IRQHandler+0x6a2>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c8c:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8006c90:	f8d4 04d4 	ldr.w	r0, [r4, #1236]	@ 0x4d4
 8006c94:	f000 0001 	and.w	r0, r0, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c98:	4285      	cmp	r5, r0
 8006c9a:	d1ea      	bne.n	8006c72 <HAL_PCD_IRQHandler+0x6a2>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ca2:	69b0      	ldr	r0, [r6, #24]
 8006ca4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006ca8:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006caa:	6970      	ldr	r0, [r6, #20]
 8006cac:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8006cb0:	d1df      	bne.n	8006c72 <HAL_PCD_IRQHandler+0x6a2>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cb2:	9a03      	ldr	r2, [sp, #12]
 8006cb4:	6853      	ldr	r3, [r2, #4]
 8006cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cba:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	6953      	ldr	r3, [r2, #20]
 8006cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cc4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	f003 fc58 	bl	800a57c <USB_ReadInterrupts>
 8006ccc:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8006cd0:	d110      	bne.n	8006cf4 <HAL_PCD_IRQHandler+0x724>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cd2:	6820      	ldr	r0, [r4, #0]
 8006cd4:	f003 fc52 	bl	800a57c <USB_ReadInterrupts>
 8006cd8:	f010 0f04 	tst.w	r0, #4
 8006cdc:	f43f ac81 	beq.w	80065e2 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006ce4:	f015 0f04 	tst.w	r5, #4
 8006ce8:	d10d      	bne.n	8006d06 <HAL_PCD_IRQHandler+0x736>
      hpcd->Instance->GOTGINT |= RegVal;
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	6853      	ldr	r3, [r2, #4]
 8006cee:	432b      	orrs	r3, r5
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	e476      	b.n	80065e2 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f007 fcb7 	bl	800e668 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	6953      	ldr	r3, [r2, #20]
 8006cfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d02:	6153      	str	r3, [r2, #20]
 8006d04:	e7e5      	b.n	8006cd2 <HAL_PCD_IRQHandler+0x702>
        HAL_PCD_DisconnectCallback(hpcd);
 8006d06:	4620      	mov	r0, r4
 8006d08:	f007 fcb4 	bl	800e674 <HAL_PCD_DisconnectCallback>
 8006d0c:	e7ed      	b.n	8006cea <HAL_PCD_IRQHandler+0x71a>
  HAL_PCD_SetupStageCallback(hpcd);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f007 fc46 	bl	800e5a0 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d14:	e5de      	b.n	80068d4 <HAL_PCD_IRQHandler+0x304>
 8006d16:	bf00      	nop

08006d18 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8006d18:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d014      	beq.n	8006d4a <HAL_PCD_EP_Flush+0x32>
{
 8006d20:	b510      	push	{r4, lr}
 8006d22:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006d24:	2301      	movs	r3, #1
 8006d26:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 8006d2a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006d2e:	d106      	bne.n	8006d3e <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006d30:	6800      	ldr	r0, [r0, #0]
 8006d32:	f003 f823 	bl	8009d7c <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 8006d36:	2000      	movs	r0, #0
 8006d38:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8006d3c:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006d3e:	f001 010f 	and.w	r1, r1, #15
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	f002 fff5 	bl	8009d32 <USB_FlushTxFifo>
 8006d48:	e7f5      	b.n	8006d36 <HAL_PCD_EP_Flush+0x1e>
  __HAL_LOCK(hpcd);
 8006d4a:	2002      	movs	r0, #2
}
 8006d4c:	4770      	bx	lr

08006d4e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d4e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d50:	6804      	ldr	r4, [r0, #0]
 8006d52:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8006d54:	b931      	cbnz	r1, 8006d64 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006d5a:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d62:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d66:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006d6a:	f1b1 0c01 	subs.w	ip, r1, #1
 8006d6e:	d00b      	beq.n	8006d88 <HAL_PCDEx_SetTxFiFo+0x3a>
 8006d70:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d72:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006d76:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d7a:	6849      	ldr	r1, [r1, #4]
 8006d7c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	4563      	cmp	r3, ip
 8006d86:	d3f4      	bcc.n	8006d72 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d88:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006d8c:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 8006d90:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8006d94:	6060      	str	r0, [r4, #4]
 8006d96:	e7e1      	b.n	8006d5c <HAL_PCDEx_SetTxFiFo+0xe>

08006d98 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006d98:	6803      	ldr	r3, [r0, #0]
 8006d9a:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	4770      	bx	lr

08006da0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f000 81e1 	beq.w	800716c <HAL_RCC_OscConfig+0x3c8>
{
 8006daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006db2:	6803      	ldr	r3, [r0, #0]
 8006db4:	f013 0f01 	tst.w	r3, #1
 8006db8:	d03b      	beq.n	8006e32 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dba:	4b9f      	ldr	r3, [pc, #636]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d02c      	beq.n	8006e20 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dce:	2b08      	cmp	r3, #8
 8006dd0:	d021      	beq.n	8006e16 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd8:	d04f      	beq.n	8006e7a <HAL_RCC_OscConfig+0xd6>
 8006dda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dde:	d052      	beq.n	8006e86 <HAL_RCC_OscConfig+0xe2>
 8006de0:	4b95      	ldr	r3, [pc, #596]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006df0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d050      	beq.n	8006e9a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df8:	f7fe fd42 	bl	8005880 <HAL_GetTick>
 8006dfc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfe:	4e8e      	ldr	r6, [pc, #568]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006e06:	d114      	bne.n	8006e32 <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e08:	f7fe fd3a 	bl	8005880 <HAL_GetTick>
 8006e0c:	1b40      	subs	r0, r0, r5
 8006e0e:	2864      	cmp	r0, #100	@ 0x64
 8006e10:	d9f6      	bls.n	8006e00 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8006e12:	2003      	movs	r0, #3
 8006e14:	e1b1      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e16:	4b88      	ldr	r3, [pc, #544]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006e1e:	d0d8      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e20:	4b85      	ldr	r3, [pc, #532]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006e28:	d003      	beq.n	8006e32 <HAL_RCC_OscConfig+0x8e>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 819f 	beq.w	8007170 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f013 0f02 	tst.w	r3, #2
 8006e38:	d054      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f013 0f0c 	tst.w	r3, #12
 8006e42:	d03e      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e44:	4b7c      	ldr	r3, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d033      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e50:	68e3      	ldr	r3, [r4, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d068      	beq.n	8006f28 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e56:	4b79      	ldr	r3, [pc, #484]	@ (800703c <HAL_RCC_OscConfig+0x298>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fe fd10 	bl	8005880 <HAL_GetTick>
 8006e60:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e62:	4e75      	ldr	r6, [pc, #468]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	f013 0f02 	tst.w	r3, #2
 8006e6a:	d154      	bne.n	8006f16 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e6c:	f7fe fd08 	bl	8005880 <HAL_GetTick>
 8006e70:	1b40      	subs	r0, r0, r5
 8006e72:	2802      	cmp	r0, #2
 8006e74:	d9f6      	bls.n	8006e64 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8006e76:	2003      	movs	r0, #3
 8006e78:	e17f      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e7b5      	b.n	8006df2 <HAL_RCC_OscConfig+0x4e>
 8006e86:	4b6c      	ldr	r3, [pc, #432]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e7ab      	b.n	8006df2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8006e9a:	f7fe fcf1 	bl	8005880 <HAL_GetTick>
 8006e9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea0:	4e65      	ldr	r6, [pc, #404]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006ea2:	6833      	ldr	r3, [r6, #0]
 8006ea4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006ea8:	d0c3      	beq.n	8006e32 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eaa:	f7fe fce9 	bl	8005880 <HAL_GetTick>
 8006eae:	1b40      	subs	r0, r0, r5
 8006eb0:	2864      	cmp	r0, #100	@ 0x64
 8006eb2:	d9f6      	bls.n	8006ea2 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8006eb4:	2003      	movs	r0, #3
 8006eb6:	e160      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006ec0:	d1c6      	bne.n	8006e50 <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f013 0f02 	tst.w	r3, #2
 8006eca:	d003      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x130>
 8006ecc:	68e3      	ldr	r3, [r4, #12]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	f040 8150 	bne.w	8007174 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed4:	4a58      	ldr	r2, [pc, #352]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	6921      	ldr	r1, [r4, #16]
 8006eda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006ede:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006ee2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	f013 0f08 	tst.w	r3, #8
 8006eea:	d042      	beq.n	8006f72 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eec:	6963      	ldr	r3, [r4, #20]
 8006eee:	b36b      	cbz	r3, 8006f4c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef0:	4b52      	ldr	r3, [pc, #328]	@ (800703c <HAL_RCC_OscConfig+0x298>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fe fcc2 	bl	8005880 <HAL_GetTick>
 8006efc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efe:	4e4e      	ldr	r6, [pc, #312]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f00:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006f02:	f013 0f02 	tst.w	r3, #2
 8006f06:	d134      	bne.n	8006f72 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f08:	f7fe fcba 	bl	8005880 <HAL_GetTick>
 8006f0c:	1b40      	subs	r0, r0, r5
 8006f0e:	2802      	cmp	r0, #2
 8006f10:	d9f6      	bls.n	8006f00 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8006f12:	2003      	movs	r0, #3
 8006f14:	e131      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f16:	4a48      	ldr	r2, [pc, #288]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	6921      	ldr	r1, [r4, #16]
 8006f1c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e7dd      	b.n	8006ee4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006f28:	4b44      	ldr	r3, [pc, #272]	@ (800703c <HAL_RCC_OscConfig+0x298>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006f2e:	f7fe fca7 	bl	8005880 <HAL_GetTick>
 8006f32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f34:	4e40      	ldr	r6, [pc, #256]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f36:	6833      	ldr	r3, [r6, #0]
 8006f38:	f013 0f02 	tst.w	r3, #2
 8006f3c:	d0d2      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f3e:	f7fe fc9f 	bl	8005880 <HAL_GetTick>
 8006f42:	1b40      	subs	r0, r0, r5
 8006f44:	2802      	cmp	r0, #2
 8006f46:	d9f6      	bls.n	8006f36 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8006f48:	2003      	movs	r0, #3
 8006f4a:	e116      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800703c <HAL_RCC_OscConfig+0x298>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f54:	f7fe fc94 	bl	8005880 <HAL_GetTick>
 8006f58:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f5a:	4e37      	ldr	r6, [pc, #220]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f5c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006f5e:	f013 0f02 	tst.w	r3, #2
 8006f62:	d006      	beq.n	8006f72 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f64:	f7fe fc8c 	bl	8005880 <HAL_GetTick>
 8006f68:	1b40      	subs	r0, r0, r5
 8006f6a:	2802      	cmp	r0, #2
 8006f6c:	d9f6      	bls.n	8006f5c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8006f6e:	2003      	movs	r0, #3
 8006f70:	e103      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f013 0f04 	tst.w	r3, #4
 8006f78:	d076      	beq.n	8007068 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006f82:	d133      	bne.n	8006fec <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f84:	2300      	movs	r3, #0
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f8c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006f90:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006f9c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9e:	4b28      	ldr	r3, [pc, #160]	@ (8007040 <HAL_RCC_OscConfig+0x29c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006fa6:	d023      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fa8:	68a3      	ldr	r3, [r4, #8]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d034      	beq.n	8007018 <HAL_RCC_OscConfig+0x274>
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d038      	beq.n	8007024 <HAL_RCC_OscConfig+0x280>
 8006fb2:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8006fb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	671a      	str	r2, [r3, #112]	@ 0x70
 8006fbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fbe:	f022 0204 	bic.w	r2, r2, #4
 8006fc2:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d03c      	beq.n	8007044 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fca:	f7fe fc59 	bl	8005880 <HAL_GetTick>
 8006fce:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd0:	4f19      	ldr	r7, [pc, #100]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fd8:	f013 0f02 	tst.w	r3, #2
 8006fdc:	d143      	bne.n	8007066 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fde:	f7fe fc4f 	bl	8005880 <HAL_GetTick>
 8006fe2:	1b80      	subs	r0, r0, r6
 8006fe4:	4540      	cmp	r0, r8
 8006fe6:	d9f6      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8006fe8:	2003      	movs	r0, #3
 8006fea:	e0c6      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8006fec:	2500      	movs	r5, #0
 8006fee:	e7d6      	b.n	8006f9e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ff0:	4a13      	ldr	r2, [pc, #76]	@ (8007040 <HAL_RCC_OscConfig+0x29c>)
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006ffa:	f7fe fc41 	bl	8005880 <HAL_GetTick>
 8006ffe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4f0f      	ldr	r7, [pc, #60]	@ (8007040 <HAL_RCC_OscConfig+0x29c>)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007008:	d1ce      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700a:	f7fe fc39 	bl	8005880 <HAL_GetTick>
 800700e:	1b80      	subs	r0, r0, r6
 8007010:	2802      	cmp	r0, #2
 8007012:	d9f6      	bls.n	8007002 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8007014:	2003      	movs	r0, #3
 8007016:	e0b0      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007018:	4a07      	ldr	r2, [pc, #28]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 800701a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	6713      	str	r3, [r2, #112]	@ 0x70
 8007022:	e7cf      	b.n	8006fc4 <HAL_RCC_OscConfig+0x220>
 8007024:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <HAL_RCC_OscConfig+0x294>)
 8007026:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007028:	f042 0204 	orr.w	r2, r2, #4
 800702c:	671a      	str	r2, [r3, #112]	@ 0x70
 800702e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	671a      	str	r2, [r3, #112]	@ 0x70
 8007036:	e7c5      	b.n	8006fc4 <HAL_RCC_OscConfig+0x220>
 8007038:	40023800 	.word	0x40023800
 800703c:	42470000 	.word	0x42470000
 8007040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007044:	f7fe fc1c 	bl	8005880 <HAL_GetTick>
 8007048:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704a:	4f52      	ldr	r7, [pc, #328]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007052:	f013 0f02 	tst.w	r3, #2
 8007056:	d006      	beq.n	8007066 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007058:	f7fe fc12 	bl	8005880 <HAL_GetTick>
 800705c:	1b80      	subs	r0, r0, r6
 800705e:	4540      	cmp	r0, r8
 8007060:	d9f6      	bls.n	8007050 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8007062:	2003      	movs	r0, #3
 8007064:	e089      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007066:	b9ed      	cbnz	r5, 80070a4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007068:	69a3      	ldr	r3, [r4, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8084 	beq.w	8007178 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007070:	4a48      	ldr	r2, [pc, #288]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 8007072:	6892      	ldr	r2, [r2, #8]
 8007074:	f002 020c 	and.w	r2, r2, #12
 8007078:	2a08      	cmp	r2, #8
 800707a:	d051      	beq.n	8007120 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800707c:	2b02      	cmp	r3, #2
 800707e:	d017      	beq.n	80070b0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007080:	4b45      	ldr	r3, [pc, #276]	@ (8007198 <HAL_RCC_OscConfig+0x3f4>)
 8007082:	2200      	movs	r2, #0
 8007084:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007086:	f7fe fbfb 	bl	8005880 <HAL_GetTick>
 800708a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708c:	4d41      	ldr	r5, [pc, #260]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 800708e:	682b      	ldr	r3, [r5, #0]
 8007090:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007094:	d042      	beq.n	800711c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007096:	f7fe fbf3 	bl	8005880 <HAL_GetTick>
 800709a:	1b00      	subs	r0, r0, r4
 800709c:	2802      	cmp	r0, #2
 800709e:	d9f6      	bls.n	800708e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80070a0:	2003      	movs	r0, #3
 80070a2:	e06a      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 80070a6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80070a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ae:	e7db      	b.n	8007068 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80070b0:	4b39      	ldr	r3, [pc, #228]	@ (8007198 <HAL_RCC_OscConfig+0x3f4>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80070b6:	f7fe fbe3 	bl	8005880 <HAL_GetTick>
 80070ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070bc:	4e35      	ldr	r6, [pc, #212]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80070c4:	d006      	beq.n	80070d4 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c6:	f7fe fbdb 	bl	8005880 <HAL_GetTick>
 80070ca:	1b40      	subs	r0, r0, r5
 80070cc:	2802      	cmp	r0, #2
 80070ce:	d9f6      	bls.n	80070be <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80070d0:	2003      	movs	r0, #3
 80070d2:	e052      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070d4:	69e3      	ldr	r3, [r4, #28]
 80070d6:	6a22      	ldr	r2, [r4, #32]
 80070d8:	4313      	orrs	r3, r2
 80070da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80070dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80070e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80070e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80070e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80070e8:	0852      	lsrs	r2, r2, #1
 80070ea:	3a01      	subs	r2, #1
 80070ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f0:	4a28      	ldr	r2, [pc, #160]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 80070f2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80070f4:	4b28      	ldr	r3, [pc, #160]	@ (8007198 <HAL_RCC_OscConfig+0x3f4>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80070fa:	f7fe fbc1 	bl	8005880 <HAL_GetTick>
 80070fe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007100:	4d24      	ldr	r5, [pc, #144]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007108:	d106      	bne.n	8007118 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710a:	f7fe fbb9 	bl	8005880 <HAL_GetTick>
 800710e:	1b00      	subs	r0, r0, r4
 8007110:	2802      	cmp	r0, #2
 8007112:	d9f6      	bls.n	8007102 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8007114:	2003      	movs	r0, #3
 8007116:	e030      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8007118:	2000      	movs	r0, #0
 800711a:	e02e      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
 800711c:	2000      	movs	r0, #0
 800711e:	e02c      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007120:	2b01      	cmp	r3, #1
 8007122:	d02d      	beq.n	8007180 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8007124:	4b1b      	ldr	r3, [pc, #108]	@ (8007194 <HAL_RCC_OscConfig+0x3f0>)
 8007126:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007128:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712c:	69e2      	ldr	r2, [r4, #28]
 800712e:	4291      	cmp	r1, r2
 8007130:	d128      	bne.n	8007184 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	428a      	cmp	r2, r1
 800713a:	d125      	bne.n	8007188 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800713c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800713e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8007142:	401a      	ands	r2, r3
 8007144:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007148:	d120      	bne.n	800718c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800714a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800714e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007150:	0852      	lsrs	r2, r2, #1
 8007152:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007154:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8007158:	d11a      	bne.n	8007190 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800715a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800715c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007160:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8007164:	bf14      	ite	ne
 8007166:	2001      	movne	r0, #1
 8007168:	2000      	moveq	r0, #0
 800716a:	e006      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800716c:	2001      	movs	r0, #1
}
 800716e:	4770      	bx	lr
        return HAL_ERROR;
 8007170:	2001      	movs	r0, #1
 8007172:	e002      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8007174:	2001      	movs	r0, #1
 8007176:	e000      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8007178:	2000      	movs	r0, #0
}
 800717a:	b002      	add	sp, #8
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007180:	2001      	movs	r0, #1
 8007182:	e7fa      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8007184:	2001      	movs	r0, #1
 8007186:	e7f8      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
 8007188:	2001      	movs	r0, #1
 800718a:	e7f6      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
 800718c:	2001      	movs	r0, #1
 800718e:	e7f4      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
 8007190:	2001      	movs	r0, #1
 8007192:	e7f2      	b.n	800717a <HAL_RCC_OscConfig+0x3d6>
 8007194:	40023800 	.word	0x40023800
 8007198:	42470000 	.word	0x42470000

0800719c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800719c:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800719e:	4b33      	ldr	r3, [pc, #204]	@ (800726c <HAL_RCC_GetSysClockFreq+0xd0>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d05b      	beq.n	8007262 <HAL_RCC_GetSysClockFreq+0xc6>
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d15b      	bne.n	8007266 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071ae:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <HAL_RCC_GetSysClockFreq+0xd0>)
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80071bc:	d02c      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071be:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <HAL_RCC_GetSysClockFreq+0xd0>)
 80071c0:	6858      	ldr	r0, [r3, #4]
 80071c2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80071c6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80071ca:	ebbc 0c00 	subs.w	ip, ip, r0
 80071ce:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80071d2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80071d6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80071da:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80071de:	ebb1 010c 	subs.w	r1, r1, ip
 80071e2:	eb63 030e 	sbc.w	r3, r3, lr
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ec:	00c9      	lsls	r1, r1, #3
 80071ee:	eb11 0c00 	adds.w	ip, r1, r0
 80071f2:	f143 0300 	adc.w	r3, r3, #0
 80071f6:	0259      	lsls	r1, r3, #9
 80071f8:	2300      	movs	r3, #0
 80071fa:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80071fe:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8007202:	f7f9 fcf9 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007206:	4b19      	ldr	r3, [pc, #100]	@ (800726c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800720e:	3301      	adds	r3, #1
 8007210:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007212:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007216:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007218:	4b14      	ldr	r3, [pc, #80]	@ (800726c <HAL_RCC_GetSysClockFreq+0xd0>)
 800721a:	6858      	ldr	r0, [r3, #4]
 800721c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8007220:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8007224:	ebbc 0c00 	subs.w	ip, ip, r0
 8007228:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800722c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8007230:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8007234:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8007238:	ebb1 010c 	subs.w	r1, r1, ip
 800723c:	eb63 030e 	sbc.w	r3, r3, lr
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007246:	00c9      	lsls	r1, r1, #3
 8007248:	eb11 0c00 	adds.w	ip, r1, r0
 800724c:	f143 0300 	adc.w	r3, r3, #0
 8007250:	0299      	lsls	r1, r3, #10
 8007252:	2300      	movs	r3, #0
 8007254:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8007258:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800725c:	f7f9 fccc 	bl	8000bf8 <__aeabi_uldivmod>
 8007260:	e7d1      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x6a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007262:	4803      	ldr	r0, [pc, #12]	@ (8007270 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007264:	e7d7      	b.n	8007216 <HAL_RCC_GetSysClockFreq+0x7a>
      sysclockfreq = HSI_VALUE;
 8007266:	4803      	ldr	r0, [pc, #12]	@ (8007274 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8007268:	e7d5      	b.n	8007216 <HAL_RCC_GetSysClockFreq+0x7a>
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	007a1200 	.word	0x007a1200
 8007274:	00f42400 	.word	0x00f42400

08007278 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 809d 	beq.w	80073b8 <HAL_RCC_ClockConfig+0x140>
{
 800727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	460d      	mov	r5, r1
 8007284:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007286:	4b50      	ldr	r3, [pc, #320]	@ (80073c8 <HAL_RCC_ClockConfig+0x150>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	428b      	cmp	r3, r1
 8007290:	d208      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	b2cb      	uxtb	r3, r1
 8007294:	4a4c      	ldr	r2, [pc, #304]	@ (80073c8 <HAL_RCC_ClockConfig+0x150>)
 8007296:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	428b      	cmp	r3, r1
 80072a0:	f040 808c 	bne.w	80073bc <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	f013 0f02 	tst.w	r3, #2
 80072aa:	d017      	beq.n	80072dc <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ac:	f013 0f04 	tst.w	r3, #4
 80072b0:	d004      	beq.n	80072bc <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b2:	4a46      	ldr	r2, [pc, #280]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 80072b4:	6893      	ldr	r3, [r2, #8]
 80072b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072ba:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	f013 0f08 	tst.w	r3, #8
 80072c2:	d004      	beq.n	80072ce <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072c4:	4a41      	ldr	r2, [pc, #260]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 80072c6:	6893      	ldr	r3, [r2, #8]
 80072c8:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072cc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ce:	4a3f      	ldr	r2, [pc, #252]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 80072d0:	6893      	ldr	r3, [r2, #8]
 80072d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072d6:	68a1      	ldr	r1, [r4, #8]
 80072d8:	430b      	orrs	r3, r1
 80072da:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	f013 0f01 	tst.w	r3, #1
 80072e2:	d032      	beq.n	800734a <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e4:	6862      	ldr	r2, [r4, #4]
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	d021      	beq.n	800732e <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ea:	1e93      	subs	r3, r2, #2
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d925      	bls.n	800733c <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f0:	4b36      	ldr	r3, [pc, #216]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f013 0f02 	tst.w	r3, #2
 80072f8:	d062      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fa:	4934      	ldr	r1, [pc, #208]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 80072fc:	688b      	ldr	r3, [r1, #8]
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	4313      	orrs	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007306:	f7fe fabb 	bl	8005880 <HAL_GetTick>
 800730a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730c:	4f2f      	ldr	r7, [pc, #188]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800730e:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f003 030c 	and.w	r3, r3, #12
 8007318:	6862      	ldr	r2, [r4, #4]
 800731a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800731e:	d014      	beq.n	800734a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007320:	f7fe faae 	bl	8005880 <HAL_GetTick>
 8007324:	1b80      	subs	r0, r0, r6
 8007326:	4540      	cmp	r0, r8
 8007328:	d9f3      	bls.n	8007312 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800732a:	2003      	movs	r0, #3
 800732c:	e042      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800732e:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007336:	d1e0      	bne.n	80072fa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007338:	2001      	movs	r0, #1
 800733a:	e03b      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733c:	4b23      	ldr	r3, [pc, #140]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007344:	d1d9      	bne.n	80072fa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8007346:	2001      	movs	r0, #1
 8007348:	e034      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800734a:	4b1f      	ldr	r3, [pc, #124]	@ (80073c8 <HAL_RCC_ClockConfig+0x150>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	42ab      	cmp	r3, r5
 8007354:	d907      	bls.n	8007366 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007356:	b2ea      	uxtb	r2, r5
 8007358:	4b1b      	ldr	r3, [pc, #108]	@ (80073c8 <HAL_RCC_ClockConfig+0x150>)
 800735a:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	42ab      	cmp	r3, r5
 8007364:	d12e      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f013 0f04 	tst.w	r3, #4
 800736c:	d006      	beq.n	800737c <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 8007370:	6893      	ldr	r3, [r2, #8]
 8007372:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8007376:	68e1      	ldr	r1, [r4, #12]
 8007378:	430b      	orrs	r3, r1
 800737a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	f013 0f08 	tst.w	r3, #8
 8007382:	d007      	beq.n	8007394 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007384:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 8007386:	6893      	ldr	r3, [r2, #8]
 8007388:	6921      	ldr	r1, [r4, #16]
 800738a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800738e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007392:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007394:	f7ff ff02 	bl	800719c <HAL_RCC_GetSysClockFreq>
 8007398:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <HAL_RCC_ClockConfig+0x154>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80073a0:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <HAL_RCC_ClockConfig+0x158>)
 80073a2:	5cd3      	ldrb	r3, [r2, r3]
 80073a4:	40d8      	lsrs	r0, r3
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <HAL_RCC_ClockConfig+0x15c>)
 80073a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80073aa:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <HAL_RCC_ClockConfig+0x160>)
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f7fe fa1b 	bl	80057e8 <HAL_InitTick>
  return HAL_OK;
 80073b2:	2000      	movs	r0, #0
}
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
}
 80073ba:	4770      	bx	lr
      return HAL_ERROR;
 80073bc:	2001      	movs	r0, #1
 80073be:	e7f9      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7f7      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80073c4:	2001      	movs	r0, #1
 80073c6:	e7f5      	b.n	80073b4 <HAL_RCC_ClockConfig+0x13c>
 80073c8:	40023c00 	.word	0x40023c00
 80073cc:	40023800 	.word	0x40023800
 80073d0:	080127d4 	.word	0x080127d4
 80073d4:	20000038 	.word	0x20000038
 80073d8:	20000040 	.word	0x20000040

080073dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80073dc:	4b01      	ldr	r3, [pc, #4]	@ (80073e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000038 	.word	0x20000038

080073e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073e8:	4b04      	ldr	r3, [pc, #16]	@ (80073fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80073f0:	4a03      	ldr	r2, [pc, #12]	@ (8007400 <HAL_RCC_GetPCLK1Freq+0x18>)
 80073f2:	5cd3      	ldrb	r3, [r2, r3]
 80073f4:	4a03      	ldr	r2, [pc, #12]	@ (8007404 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80073f6:	6810      	ldr	r0, [r2, #0]
}
 80073f8:	40d8      	lsrs	r0, r3
 80073fa:	4770      	bx	lr
 80073fc:	40023800 	.word	0x40023800
 8007400:	080127cc 	.word	0x080127cc
 8007404:	20000038 	.word	0x20000038

08007408 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007408:	4b04      	ldr	r3, [pc, #16]	@ (800741c <HAL_RCC_GetPCLK2Freq+0x14>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007410:	4a03      	ldr	r2, [pc, #12]	@ (8007420 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007412:	5cd3      	ldrb	r3, [r2, r3]
 8007414:	4a03      	ldr	r2, [pc, #12]	@ (8007424 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007416:	6810      	ldr	r0, [r2, #0]
}
 8007418:	40d8      	lsrs	r0, r3
 800741a:	4770      	bx	lr
 800741c:	40023800 	.word	0x40023800
 8007420:	080127cc 	.word	0x080127cc
 8007424:	20000038 	.word	0x20000038

08007428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742a:	b083      	sub	sp, #12
 800742c:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800742e:	6803      	ldr	r3, [r0, #0]
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007430:	f013 0f43 	tst.w	r3, #67	@ 0x43
 8007434:	d115      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x3a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f013 0f0c 	tst.w	r3, #12
 800743c:	d16a      	bne.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	f013 0f20 	tst.w	r3, #32
 8007444:	f040 80bf 	bne.w	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	f013 0f10 	tst.w	r3, #16
 800744e:	f000 8123 	beq.w	8007698 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007452:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8007456:	4b91      	ldr	r3, [pc, #580]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8007458:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 800745c:	2000      	movs	r0, #0
}
 800745e:	b003      	add	sp, #12
 8007460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8007462:	4b8f      	ldr	r3, [pc, #572]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8007464:	2200      	movs	r2, #0
 8007466:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8007468:	f7fe fa0a 	bl	8005880 <HAL_GetTick>
 800746c:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800746e:	4e8d      	ldr	r6, [pc, #564]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007476:	d006      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007478:	f7fe fa02 	bl	8005880 <HAL_GetTick>
 800747c:	1b43      	subs	r3, r0, r5
 800747e:	2b02      	cmp	r3, #2
 8007480:	d9f6      	bls.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x48>
        return HAL_TIMEOUT;
 8007482:	2003      	movs	r0, #3
 8007484:	e7eb      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f013 0f01 	tst.w	r3, #1
 800748c:	d007      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	68a3      	ldr	r3, [r4, #8]
 8007492:	071b      	lsls	r3, r3, #28
 8007494:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007498:	4a82      	ldr	r2, [pc, #520]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800749a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	f013 0f02 	tst.w	r3, #2
 80074a4:	d015      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074a6:	4a7f      	ldr	r2, [pc, #508]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80074a8:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074ac:	6860      	ldr	r0, [r4, #4]
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80074b6:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 80074ba:	430b      	orrs	r3, r1
 80074bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074c0:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80074c4:	69e3      	ldr	r3, [r4, #28]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	f021 011f 	bic.w	r1, r1, #31
 80074cc:	430b      	orrs	r3, r1
 80074ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	68e3      	ldr	r3, [r4, #12]
 80074de:	061b      	lsls	r3, r3, #24
 80074e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80074e4:	68a2      	ldr	r2, [r4, #8]
 80074e6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80074ea:	4a6e      	ldr	r2, [pc, #440]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80074ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80074f0:	4b6b      	ldr	r3, [pc, #428]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80074f6:	f7fe f9c3 	bl	8005880 <HAL_GetTick>
 80074fa:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074fc:	4e69      	ldr	r6, [pc, #420]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80074fe:	6833      	ldr	r3, [r6, #0]
 8007500:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007504:	d197      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007506:	f7fe f9bb 	bl	8005880 <HAL_GetTick>
 800750a:	1b40      	subs	r0, r0, r5
 800750c:	2802      	cmp	r0, #2
 800750e:	d9f6      	bls.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
        return HAL_TIMEOUT;
 8007510:	2003      	movs	r0, #3
 8007512:	e7a4      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLSAI_DISABLE();
 8007514:	4b62      	ldr	r3, [pc, #392]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8007516:	2200      	movs	r2, #0
 8007518:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800751a:	f7fe f9b1 	bl	8005880 <HAL_GetTick>
 800751e:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007520:	4e60      	ldr	r6, [pc, #384]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007522:	6833      	ldr	r3, [r6, #0]
 8007524:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007528:	d006      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800752a:	f7fe f9a9 	bl	8005880 <HAL_GetTick>
 800752e:	1b43      	subs	r3, r0, r5
 8007530:	2b02      	cmp	r3, #2
 8007532:	d9f6      	bls.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        return HAL_TIMEOUT;
 8007534:	2003      	movs	r0, #3
 8007536:	e792      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	f013 0f04 	tst.w	r3, #4
 800753e:	d016      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x146>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007540:	4a58      	ldr	r2, [pc, #352]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007542:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007546:	6920      	ldr	r0, [r4, #16]
 8007548:	6963      	ldr	r3, [r4, #20]
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007550:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8007554:	430b      	orrs	r3, r1
 8007556:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800755a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800755e:	6a21      	ldr	r1, [r4, #32]
 8007560:	3901      	subs	r1, #1
 8007562:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8007566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800756a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	f013 0f08 	tst.w	r3, #8
 8007574:	d014      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007576:	4a4b      	ldr	r2, [pc, #300]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007578:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800757c:	6920      	ldr	r0, [r4, #16]
 800757e:	69a3      	ldr	r3, [r4, #24]
 8007580:	071b      	lsls	r3, r3, #28
 8007582:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007586:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800758a:	430b      	orrs	r3, r1
 800758c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007590:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8007594:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007598:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800759a:	430b      	orrs	r3, r1
 800759c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80075a0:	4b3f      	ldr	r3, [pc, #252]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 80075a6:	f7fe f96b 	bl	8005880 <HAL_GetTick>
 80075aa:	4605      	mov	r5, r0
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ac:	4e3d      	ldr	r6, [pc, #244]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80075ae:	6833      	ldr	r3, [r6, #0]
 80075b0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80075b4:	f47f af43 	bne.w	800743e <HAL_RCCEx_PeriphCLKConfig+0x16>
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075b8:	f7fe f962 	bl	8005880 <HAL_GetTick>
 80075bc:	1b40      	subs	r0, r0, r5
 80075be:	2802      	cmp	r0, #2
 80075c0:	d9f5      	bls.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        return HAL_TIMEOUT;
 80075c2:	2003      	movs	r0, #3
 80075c4:	e74b      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	4b36      	ldr	r3, [pc, #216]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80075cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80075d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80075de:	4a32      	ldr	r2, [pc, #200]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075e0:	6813      	ldr	r3, [r2, #0]
 80075e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80075e8:	f7fe f94a 	bl	8005880 <HAL_GetTick>
 80075ec:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075ee:	4e2e      	ldr	r6, [pc, #184]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075f0:	6833      	ldr	r3, [r6, #0]
 80075f2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80075f6:	d106      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f8:	f7fe f942 	bl	8005880 <HAL_GetTick>
 80075fc:	1b40      	subs	r0, r0, r5
 80075fe:	2802      	cmp	r0, #2
 8007600:	d9f6      	bls.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        return HAL_TIMEOUT;
 8007602:	2003      	movs	r0, #3
 8007604:	e72b      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007606:	4b27      	ldr	r3, [pc, #156]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800760a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800760e:	d014      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007610:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007612:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8007616:	429a      	cmp	r2, r3
 8007618:	d00f      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x212>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800761a:	4b22      	ldr	r3, [pc, #136]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800761c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800761e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007622:	491f      	ldr	r1, [pc, #124]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8007624:	2001      	movs	r0, #1
 8007626:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 800762a:	2000      	movs	r0, #0
 800762c:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8007630:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007634:	f013 0f01 	tst.w	r3, #1
 8007638:	d112      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800763a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800763c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007640:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007644:	d01d      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007646:	4a17      	ldr	r2, [pc, #92]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007648:	6893      	ldr	r3, [r2, #8]
 800764a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800764e:	6093      	str	r3, [r2, #8]
 8007650:	4a14      	ldr	r2, [pc, #80]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007652:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007654:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800765a:	430b      	orrs	r3, r1
 800765c:	6713      	str	r3, [r2, #112]	@ 0x70
 800765e:	e6f3      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8007660:	f7fe f90e 	bl	8005880 <HAL_GetTick>
 8007664:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007666:	4e0f      	ldr	r6, [pc, #60]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007668:	f241 3788 	movw	r7, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800766e:	f013 0f02 	tst.w	r3, #2
 8007672:	d1e2      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x212>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007674:	f7fe f904 	bl	8005880 <HAL_GetTick>
 8007678:	1b40      	subs	r0, r0, r5
 800767a:	42b8      	cmp	r0, r7
 800767c:	d9f6      	bls.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x244>
            return HAL_TIMEOUT;
 800767e:	2003      	movs	r0, #3
 8007680:	e6ed      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007682:	4908      	ldr	r1, [pc, #32]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007684:	688a      	ldr	r2, [r1, #8]
 8007686:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800768a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800768e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007692:	4313      	orrs	r3, r2
 8007694:	608b      	str	r3, [r1, #8]
 8007696:	e7db      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x228>
  return HAL_OK;
 8007698:	2000      	movs	r0, #0
 800769a:	e6e0      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800769c:	42471000 	.word	0x42471000
 80076a0:	42470000 	.word	0x42470000
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40007000 	.word	0x40007000

080076ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80076b0:	6803      	ldr	r3, [r0, #0]
 80076b2:	4a0a      	ldr	r2, [pc, #40]	@ (80076dc <HAL_RTC_WaitForSynchro+0x30>)
 80076b4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076b6:	f7fe f8e3 	bl	8005880 <HAL_GetTick>
 80076ba:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f013 0f20 	tst.w	r3, #32
 80076c4:	d107      	bne.n	80076d6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076c6:	f7fe f8db 	bl	8005880 <HAL_GetTick>
 80076ca:	1b40      	subs	r0, r0, r5
 80076cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80076d0:	d9f4      	bls.n	80076bc <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 80076d2:	2003      	movs	r0, #3
 80076d4:	e000      	b.n	80076d8 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 80076d6:	2000      	movs	r0, #0
}
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
 80076da:	bf00      	nop
 80076dc:	00017f5f 	.word	0x00017f5f

080076e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80076e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80076e2:	6803      	ldr	r3, [r0, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80076ea:	d002      	beq.n	80076f2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80076ec:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80076ee:	4628      	mov	r0, r5
 80076f0:	bd70      	pop	{r4, r5, r6, pc}
 80076f2:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076fa:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80076fc:	f7fe f8c0 	bl	8005880 <HAL_GetTick>
 8007700:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800770c:	d1ef      	bne.n	80076ee <RTC_EnterInitMode+0xe>
 800770e:	2d00      	cmp	r5, #0
 8007710:	d1ed      	bne.n	80076ee <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007712:	f7fe f8b5 	bl	8005880 <HAL_GetTick>
 8007716:	1b83      	subs	r3, r0, r6
 8007718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800771c:	d9f2      	bls.n	8007704 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800771e:	2304      	movs	r3, #4
 8007720:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 8007722:	2501      	movs	r5, #1
 8007724:	e7ee      	b.n	8007704 <RTC_EnterInitMode+0x24>

08007726 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007726:	6802      	ldr	r2, [r0, #0]
 8007728:	68d3      	ldr	r3, [r2, #12]
 800772a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800772e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f013 0f20 	tst.w	r3, #32
 8007738:	d001      	beq.n	800773e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800773c:	4770      	bx	lr
{
 800773e:	b510      	push	{r4, lr}
 8007740:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007742:	f7ff ffb3 	bl	80076ac <HAL_RTC_WaitForSynchro>
 8007746:	b110      	cbz	r0, 800774e <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007748:	2304      	movs	r3, #4
 800774a:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800774c:	2001      	movs	r0, #1
}
 800774e:	bd10      	pop	{r4, pc}

08007750 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8007750:	2800      	cmp	r0, #0
 8007752:	d04b      	beq.n	80077ec <HAL_RTC_Init+0x9c>
{
 8007754:	b510      	push	{r4, lr}
 8007756:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007758:	7f43      	ldrb	r3, [r0, #29]
 800775a:	b153      	cbz	r3, 8007772 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800775c:	2302      	movs	r3, #2
 800775e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	f012 0f10 	tst.w	r2, #16
 8007768:	d007      	beq.n	800777a <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 800776a:	2301      	movs	r3, #1
 800776c:	7763      	strb	r3, [r4, #29]
 800776e:	2000      	movs	r0, #0
}
 8007770:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8007772:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8007774:	f7fd fd80 	bl	8005278 <HAL_RTC_MspInit>
 8007778:	e7f0      	b.n	800775c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800777a:	22ca      	movs	r2, #202	@ 0xca
 800777c:	625a      	str	r2, [r3, #36]	@ 0x24
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	2253      	movs	r2, #83	@ 0x53
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8007784:	4620      	mov	r0, r4
 8007786:	f7ff ffab 	bl	80076e0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800778a:	b118      	cbz	r0, 8007794 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	22ff      	movs	r2, #255	@ 0xff
 8007790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8007792:	e7ed      	b.n	8007770 <HAL_RTC_Init+0x20>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	6893      	ldr	r3, [r2, #8]
 8007798:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800779c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077a0:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	6891      	ldr	r1, [r2, #8]
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	6920      	ldr	r0, [r4, #16]
 80077aa:	4303      	orrs	r3, r0
 80077ac:	6960      	ldr	r0, [r4, #20]
 80077ae:	4303      	orrs	r3, r0
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6093      	str	r3, [r2, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	68e2      	ldr	r2, [r4, #12]
 80077b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	6913      	ldr	r3, [r2, #16]
 80077be:	68a1      	ldr	r1, [r4, #8]
 80077c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077c4:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 80077c6:	4620      	mov	r0, r4
 80077c8:	f7ff ffad 	bl	8007726 <RTC_ExitInitMode>
    if (status == HAL_OK)
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d1dd      	bne.n	800778c <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80077d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077d8:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80077de:	69a1      	ldr	r1, [r4, #24]
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	22ff      	movs	r2, #255	@ 0xff
 80077e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80077ea:	e7be      	b.n	800776a <HAL_RTC_Init+0x1a>
    return HAL_ERROR;
 80077ec:	2001      	movs	r0, #1
}
 80077ee:	4770      	bx	lr

080077f0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80077f0:	0903      	lsrs	r3, r0, #4
 80077f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80077f6:	f000 000f 	and.w	r0, r0, #15
 80077fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80077fe:	b2c0      	uxtb	r0, r0
 8007800:	4770      	bx	lr

08007802 <HAL_RTC_GetTime>:
{
 8007802:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007804:	6803      	ldr	r3, [r0, #0]
 8007806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007808:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800780a:	6803      	ldr	r3, [r0, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007812:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007814:	6803      	ldr	r3, [r0, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007818:	f3c3 4005 	ubfx	r0, r3, #16, #6
 800781c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800781e:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8007822:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007824:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8007828:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800782a:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800782e:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8007830:	b95a      	cbnz	r2, 800784a <HAL_RTC_GetTime+0x48>
 8007832:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007834:	f7ff ffdc 	bl	80077f0 <RTC_Bcd2ToByte>
 8007838:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ffd8 	bl	80077f0 <RTC_Bcd2ToByte>
 8007840:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007842:	4628      	mov	r0, r5
 8007844:	f7ff ffd4 	bl	80077f0 <RTC_Bcd2ToByte>
 8007848:	70a0      	strb	r0, [r4, #2]
}
 800784a:	2000      	movs	r0, #0
 800784c:	bd70      	pop	{r4, r5, r6, pc}

0800784e <HAL_RTC_GetDate>:
{
 800784e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007850:	6803      	ldr	r3, [r0, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007854:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8007858:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800785a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800785e:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007860:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8007864:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007866:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800786a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800786c:	b95a      	cbnz	r2, 8007886 <HAL_RTC_GetDate+0x38>
 800786e:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007870:	f7ff ffbe 	bl	80077f0 <RTC_Bcd2ToByte>
 8007874:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ffba 	bl	80077f0 <RTC_Bcd2ToByte>
 800787c:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800787e:	4628      	mov	r0, r5
 8007880:	f7ff ffb6 	bl	80077f0 <RTC_Bcd2ToByte>
 8007884:	70a0      	strb	r0, [r4, #2]
}
 8007886:	2000      	movs	r0, #0
 8007888:	bd70      	pop	{r4, r5, r6, pc}

0800788a <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800788a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007894:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8007896:	4770      	bx	lr

08007898 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789a:	b089      	sub	sp, #36	@ 0x24
 800789c:	4604      	mov	r4, r0
 800789e:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078a0:	f7fd ffee 	bl	8005880 <HAL_GetTick>
 80078a4:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80078ac:	2108      	movs	r1, #8
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	f001 fec2 	bl	8009638 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b4:	4605      	mov	r5, r0
 80078b6:	b110      	cbz	r0, 80078be <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80078b8:	4628      	mov	r0, r5
 80078ba:	b009      	add	sp, #36	@ 0x24
 80078bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80078be:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80078c0:	0409      	lsls	r1, r1, #16
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	f001 ff62 	bl	800978c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c8:	4605      	mov	r5, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d1f4      	bne.n	80078b8 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078ce:	f04f 33ff 	mov.w	r3, #4294967295
 80078d2:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80078d4:	2308      	movs	r3, #8
 80078d6:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80078d8:	2330      	movs	r3, #48	@ 0x30
 80078da:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80078dc:	2302      	movs	r3, #2
 80078de:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80078e8:	a902      	add	r1, sp, #8
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	f001 fdb5 	bl	800945a <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	f001 ff7b 	bl	80097ec <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f6:	4605      	mov	r5, r0
 80078f8:	b170      	cbz	r0, 8007918 <SD_FindSCR+0x80>
 80078fa:	e7dd      	b.n	80078b8 <SD_FindSCR+0x20>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80078fc:	f001 fd87 	bl	800940e <SDIO_ReadFIFO>
 8007900:	ab08      	add	r3, sp, #32
 8007902:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007906:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 800790a:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800790c:	f7fd ffb8 	bl	8005880 <HAL_GetTick>
 8007910:	1b83      	subs	r3, r0, r6
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d043      	beq.n	80079a0 <SD_FindSCR+0x108>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800791c:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8007920:	d107      	bne.n	8007932 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007922:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007924:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8007928:	d1e8      	bne.n	80078fc <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800792a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800792c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8007930:	d1ec      	bne.n	800790c <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007932:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007934:	f013 0f08 	tst.w	r3, #8
 8007938:	d129      	bne.n	800798e <SD_FindSCR+0xf6>
 800793a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800793c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007940:	d125      	bne.n	800798e <SD_FindSCR+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007942:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007944:	f013 0f02 	tst.w	r3, #2
 8007948:	d124      	bne.n	8007994 <SD_FindSCR+0xfc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800794a:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800794c:	f015 0520 	ands.w	r5, r5, #32
 8007950:	d123      	bne.n	800799a <SD_FindSCR+0x102>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007952:	f240 533a 	movw	r3, #1338	@ 0x53a
 8007956:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007958:	9b01      	ldr	r3, [sp, #4]
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800795a:	0e1a      	lsrs	r2, r3, #24
 800795c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007960:	0219      	lsls	r1, r3, #8
 8007962:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007966:	430a      	orrs	r2, r1
 8007968:	0a1b      	lsrs	r3, r3, #8
 800796a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800796e:	4313      	orrs	r3, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007970:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007972:	9b00      	ldr	r3, [sp, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007974:	0e1a      	lsrs	r2, r3, #24
 8007976:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800797a:	0219      	lsls	r1, r3, #8
 800797c:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007980:	430a      	orrs	r2, r1
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007988:	4313      	orrs	r3, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800798a:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800798c:	e794      	b.n	80078b8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800798e:	2508      	movs	r5, #8
 8007990:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007992:	e791      	b.n	80078b8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007994:	2502      	movs	r5, #2
 8007996:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007998:	e78e      	b.n	80078b8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800799a:	2520      	movs	r5, #32
 800799c:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800799e:	e78b      	b.n	80078b8 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80079a0:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 80079a4:	e788      	b.n	80078b8 <SD_FindSCR+0x20>
	...

080079a8 <HAL_SD_ReadBlocks_DMA>:
{
 80079a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ac:	b087      	sub	sp, #28
 80079ae:	4604      	mov	r4, r0
  if(NULL == pData)
 80079b0:	b191      	cbz	r1, 80079d8 <HAL_SD_ReadBlocks_DMA+0x30>
 80079b2:	4616      	mov	r6, r2
 80079b4:	461f      	mov	r7, r3
 80079b6:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80079b8:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 80079bc:	b2ed      	uxtb	r5, r5
 80079be:	2d01      	cmp	r5, #1
 80079c0:	d17f      	bne.n	8007ac2 <HAL_SD_ReadBlocks_DMA+0x11a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079c6:	19f0      	adds	r0, r6, r7
 80079c8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80079ca:	4298      	cmp	r0, r3
 80079cc:	d90a      	bls.n	80079e4 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80079d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079d4:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 80079d6:	e075      	b.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079d8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80079da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079de:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80079e0:	2501      	movs	r5, #1
 80079e2:	e06f      	b.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
    hsd->State = HAL_SD_STATE_BUSY;
 80079e4:	2303      	movs	r3, #3
 80079e6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	2100      	movs	r1, #0
 80079ee:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80079f4:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80079f8:	f043 0302 	orr.w	r3, r3, #2
 80079fc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80079fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a00:	4833      	ldr	r0, [pc, #204]	@ (8007ad0 <HAL_SD_ReadBlocks_DMA+0x128>)
 8007a02:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a06:	4833      	ldr	r0, [pc, #204]	@ (8007ad4 <HAL_SD_ReadBlocks_DMA+0x12c>)
 8007a08:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8007a0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a0c:	6519      	str	r1, [r3, #80]	@ 0x50
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a10:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007a12:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007a14:	6801      	ldr	r1, [r0, #0]
 8007a16:	680b      	ldr	r3, [r1, #0]
 8007a18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a1c:	6880      	ldr	r0, [r0, #8]
 8007a1e:	4303      	orrs	r3, r0
 8007a20:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007a22:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8007a2c:	3180      	adds	r1, #128	@ 0x80
 8007a2e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007a30:	f7fe f872 	bl	8005b18 <HAL_DMA_Start_IT>
 8007a34:	4680      	mov	r8, r0
 8007a36:	bb68      	cbnz	r0, 8007a94 <HAL_SD_ReadBlocks_DMA+0xec>
      __HAL_SD_DMA_ENABLE(hsd);
 8007a38:	4b27      	ldr	r3, [pc, #156]	@ (8007ad8 <HAL_SD_ReadBlocks_DMA+0x130>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007a42:	4293      	cmp	r3, r2
        add *= 512U;
 8007a44:	bf18      	it	ne
 8007a46:	0276      	lslne	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a4e:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a52:	2390      	movs	r3, #144	@ 0x90
 8007a54:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007a56:	2302      	movs	r3, #2
 8007a58:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a62:	4669      	mov	r1, sp
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	f001 fcf8 	bl	800945a <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8007a6a:	2f01      	cmp	r7, #1
 8007a6c:	d922      	bls.n	8007ab4 <HAL_SD_ReadBlocks_DMA+0x10c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a6e:	2382      	movs	r3, #130	@ 0x82
 8007a70:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a72:	4631      	mov	r1, r6
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	f001 fe0f 	bl	8009698 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a7a:	b338      	cbz	r0, 8007acc <HAL_SD_ReadBlocks_DMA+0x124>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	@ (8007adc <HAL_SD_ReadBlocks_DMA+0x134>)
 8007a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007a82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a84:	4303      	orrs	r3, r0
 8007a86:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8007a92:	e017      	b.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007a98:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8007a9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8007adc <HAL_SD_ReadBlocks_DMA+0x134>)
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007aa4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aaa:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8007ab2:	e007      	b.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ab4:	2381      	movs	r3, #129	@ 0x81
 8007ab6:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ab8:	4631      	mov	r1, r6
 8007aba:	6820      	ldr	r0, [r4, #0]
 8007abc:	f001 fdd4 	bl	8009668 <SDMMC_CmdReadSingleBlock>
 8007ac0:	e7db      	b.n	8007a7a <HAL_SD_ReadBlocks_DMA+0xd2>
    return HAL_BUSY;
 8007ac2:	2502      	movs	r5, #2
}
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	b007      	add	sp, #28
 8007ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_OK;
 8007acc:	4645      	mov	r5, r8
 8007ace:	e7f9      	b.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
 8007ad0:	08007c1f 	.word	0x08007c1f
 8007ad4:	08008235 	.word	0x08008235
 8007ad8:	42258000 	.word	0x42258000
 8007adc:	004005ff 	.word	0x004005ff

08007ae0 <HAL_SD_WriteBlocks_DMA>:
{
 8007ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	4604      	mov	r4, r0
  if(NULL == pData)
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d03b      	beq.n	8007b62 <HAL_SD_WriteBlocks_DMA+0x82>
 8007aea:	461e      	mov	r6, r3
 8007aec:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8007aee:	f890 5034 	ldrb.w	r5, [r0, #52]	@ 0x34
 8007af2:	b2ed      	uxtb	r5, r5
 8007af4:	2d01      	cmp	r5, #1
 8007af6:	f040 8084 	bne.w	8007c02 <HAL_SD_WriteBlocks_DMA+0x122>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007afe:	1993      	adds	r3, r2, r6
 8007b00:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8007b02:	428b      	cmp	r3, r1
 8007b04:	d833      	bhi.n	8007b6e <HAL_SD_WriteBlocks_DMA+0x8e>
    hsd->State = HAL_SD_STATE_BUSY;
 8007b06:	2303      	movs	r3, #3
 8007b08:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8007b0c:	6803      	ldr	r3, [r0, #0]
 8007b0e:	2100      	movs	r1, #0
 8007b10:	62d9      	str	r1, [r3, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007b12:	6800      	ldr	r0, [r0, #0]
 8007b14:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007b16:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8007b1a:	f043 0302 	orr.w	r3, r3, #2
 8007b1e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007b20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b22:	483a      	ldr	r0, [pc, #232]	@ (8007c0c <HAL_SD_WriteBlocks_DMA+0x12c>)
 8007b24:	63d8      	str	r0, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007b26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b28:	4839      	ldr	r0, [pc, #228]	@ (8007c10 <HAL_SD_WriteBlocks_DMA+0x130>)
 8007b2a:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8007b2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b2e:	6519      	str	r1, [r3, #80]	@ 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007b32:	2b01      	cmp	r3, #1
      add *= 512U;
 8007b34:	bf18      	it	ne
 8007b36:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 8007b38:	2e01      	cmp	r6, #1
 8007b3a:	d91d      	bls.n	8007b78 <HAL_SD_WriteBlocks_DMA+0x98>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b3c:	23a0      	movs	r3, #160	@ 0xa0
 8007b3e:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b40:	4611      	mov	r1, r2
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	f001 fdd8 	bl	80096f8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b48:	b1e8      	cbz	r0, 8007b86 <HAL_SD_WriteBlocks_DMA+0xa6>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	4a31      	ldr	r2, [pc, #196]	@ (8007c14 <HAL_SD_WriteBlocks_DMA+0x134>)
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b52:	4303      	orrs	r3, r0
 8007b54:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8007b60:	e050      	b.n	8007c04 <HAL_SD_WriteBlocks_DMA+0x124>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b62:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007b64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b68:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8007b6a:	2501      	movs	r5, #1
 8007b6c:	e04a      	b.n	8007c04 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b6e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007b74:	6383      	str	r3, [r0, #56]	@ 0x38
      return HAL_ERROR;
 8007b76:	e045      	b.n	8007c04 <HAL_SD_WriteBlocks_DMA+0x124>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b78:	2390      	movs	r3, #144	@ 0x90
 8007b7a:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	f001 fda2 	bl	80096c8 <SDMMC_CmdWriteSingleBlock>
 8007b84:	e7e0      	b.n	8007b48 <HAL_SD_WriteBlocks_DMA+0x68>
    __HAL_SD_DMA_ENABLE(hsd);
 8007b86:	4b24      	ldr	r3, [pc, #144]	@ (8007c18 <HAL_SD_WriteBlocks_DMA+0x138>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f8c3 258c 	str.w	r2, [r3, #1420]	@ 0x58c
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b8e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b90:	2240      	movs	r2, #64	@ 0x40
 8007b92:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007b94:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007b96:	680a      	ldr	r2, [r1, #0]
 8007b98:	6813      	ldr	r3, [r2, #0]
 8007b9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b9e:	6889      	ldr	r1, [r1, #8]
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007ba4:	0276      	lsls	r6, r6, #9
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	08b3      	lsrs	r3, r6, #2
 8007baa:	3280      	adds	r2, #128	@ 0x80
 8007bac:	4639      	mov	r1, r7
 8007bae:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007bb0:	f7fd ffb2 	bl	8005b18 <HAL_DMA_Start_IT>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	b198      	cbz	r0, 8007be0 <HAL_SD_WriteBlocks_DMA+0x100>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8007bbc:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8007bc0:	f023 0302 	bic.w	r3, r3, #2
 8007bc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	4a12      	ldr	r2, [pc, #72]	@ (8007c14 <HAL_SD_WriteBlocks_DMA+0x134>)
 8007bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bcc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007bce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bd2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8007bde:	e011      	b.n	8007c04 <HAL_SD_WriteBlocks_DMA+0x124>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007be0:	f04f 33ff 	mov.w	r3, #4294967295
 8007be4:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007be6:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007be8:	2390      	movs	r3, #144	@ 0x90
 8007bea:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007bec:	2300      	movs	r3, #0
 8007bee:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007bf0:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bf6:	4669      	mov	r1, sp
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	f001 fc2e 	bl	800945a <SDIO_ConfigData>
      return HAL_OK;
 8007bfe:	463d      	mov	r5, r7
 8007c00:	e000      	b.n	8007c04 <HAL_SD_WriteBlocks_DMA+0x124>
    return HAL_BUSY;
 8007c02:	2502      	movs	r5, #2
}
 8007c04:	4628      	mov	r0, r5
 8007c06:	b007      	add	sp, #28
 8007c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	0800788b 	.word	0x0800788b
 8007c10:	08008235 	.word	0x08008235
 8007c14:	004005ff 	.word	0x004005ff
 8007c18:	42258000 	.word	0x42258000

08007c1c <HAL_SD_ErrorCallback>:
}
 8007c1c:	4770      	bx	lr

08007c1e <SD_DMAReceiveCplt>:
{
 8007c1e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c20:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007c22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c24:	2b82      	cmp	r3, #130	@ 0x82
 8007c26:	d011      	beq.n	8007c4c <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007c2c:	f023 0308 	bic.w	r3, r3, #8
 8007c30:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 8007c44:	4620      	mov	r0, r4
 8007c46:	f002 fd66 	bl	800a716 <HAL_SD_RxCpltCallback>
}
 8007c4a:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	f001 fd6b 	bl	8009728 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c52:	4603      	mov	r3, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d0e7      	beq.n	8007c28 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 8007c58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7ff ffdc 	bl	8007c1c <HAL_SD_ErrorCallback>
 8007c64:	e7e0      	b.n	8007c28 <SD_DMAReceiveCplt+0xa>
	...

08007c68 <HAL_SD_GetCardCSD>:
{
 8007c68:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c6a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007c6c:	0f92      	lsrs	r2, r2, #30
 8007c6e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c70:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007c72:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8007c76:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c78:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8007c7c:	f002 0203 	and.w	r2, r2, #3
 8007c80:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c82:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 8007c86:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007c88:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8007c8c:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007c8e:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 8007c92:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007c94:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007c96:	0d12      	lsrs	r2, r2, #20
 8007c98:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007c9a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8007c9e:	f002 020f 	and.w	r2, r2, #15
 8007ca2:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ca4:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007ca6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8007caa:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007cac:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007cae:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8007cb2:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007cb4:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007cb6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8007cba:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007cbc:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007cbe:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8007cc2:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cc8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	f040 8086 	bne.w	8007ddc <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007cd0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8007cd2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8007cd6:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8007cda:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007cdc:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8007ce0:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007ce2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007ce4:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8007ce8:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007cea:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8007cee:	f002 0207 	and.w	r2, r2, #7
 8007cf2:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007cf4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007cf6:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8007cfa:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007cfc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007cfe:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8007d02:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d06:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8007d0a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d0c:	6908      	ldr	r0, [r1, #16]
 8007d0e:	3001      	adds	r0, #1
 8007d10:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007d12:	7e0a      	ldrb	r2, [r1, #24]
 8007d14:	f002 0207 	and.w	r2, r2, #7
 8007d18:	3202      	adds	r2, #2
 8007d1a:	4090      	lsls	r0, r2
 8007d1c:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007d1e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8007d22:	f00c 0c0f 	and.w	ip, ip, #15
 8007d26:	2201      	movs	r2, #1
 8007d28:	fa02 f20c 	lsl.w	r2, r2, ip
 8007d2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007d2e:	0a52      	lsrs	r2, r2, #9
 8007d30:	fb00 f202 	mul.w	r2, r0, r2
 8007d34:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d3e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8007d42:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d44:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d46:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8007d4a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d4c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d52:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d56:	0fd2      	lsrs	r2, r2, #31
 8007d58:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d5c:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8007d60:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d64:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8007d68:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d6c:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8007d70:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d74:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8007d78:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d82:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8007d86:	f002 0201 	and.w	r2, r2, #1
 8007d8a:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007d8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d90:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8007d94:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007d98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d9a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8007d9e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007da2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007da4:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8007da8:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007dac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007dae:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8007db2:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007db6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007db8:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8007dbc:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007dc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007dc2:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8007dc6:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8007dd0:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8007dda:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ddc:	2a01      	cmp	r2, #1
 8007dde:	d110      	bne.n	8007e02 <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007de0:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8007de2:	0412      	lsls	r2, r2, #16
 8007de4:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8007de8:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8007dec:	4302      	orrs	r2, r0
 8007dee:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007df0:	690a      	ldr	r2, [r1, #16]
 8007df2:	3201      	adds	r2, #1
 8007df4:	0292      	lsls	r2, r2, #10
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007df8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dfe:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007e00:	e799      	b.n	8007d36 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e02:	6802      	ldr	r2, [r0, #0]
 8007e04:	4904      	ldr	r1, [pc, #16]	@ (8007e18 <HAL_SD_GetCardCSD+0x1b0>)
 8007e06:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e08:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8007e0a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007e0e:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e10:	2001      	movs	r0, #1
 8007e12:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e16:	4770      	bx	lr
 8007e18:	004005ff 	.word	0x004005ff

08007e1c <HAL_SD_InitCard>:
{
 8007e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e20:	b098      	sub	sp, #96	@ 0x60
 8007e22:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007e24:	2300      	movs	r3, #0
 8007e26:	9312      	str	r3, [sp, #72]	@ 0x48
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007e28:	9313      	str	r3, [sp, #76]	@ 0x4c
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e2a:	9314      	str	r3, [sp, #80]	@ 0x50
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007e2c:	9315      	str	r3, [sp, #84]	@ 0x54
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e2e:	9316      	str	r3, [sp, #88]	@ 0x58
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007e30:	2376      	movs	r3, #118	@ 0x76
 8007e32:	9317      	str	r3, [sp, #92]	@ 0x5c
  status = SDIO_Init(hsd->Instance, Init);
 8007e34:	ab18      	add	r3, sp, #96	@ 0x60
 8007e36:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007e3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007e3e:	ab12      	add	r3, sp, #72	@ 0x48
 8007e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	f001 fac9 	bl	80093da <SDIO_Init>
  if(status != HAL_OK)
 8007e48:	b120      	cbz	r0, 8007e54 <HAL_SD_InitCard+0x38>
    return HAL_ERROR;
 8007e4a:	2501      	movs	r5, #1
}
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	b018      	add	sp, #96	@ 0x60
 8007e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_SD_DISABLE(hsd);
 8007e54:	4e81      	ldr	r6, [pc, #516]	@ (800805c <HAL_SD_InitCard+0x240>)
 8007e56:	2500      	movs	r5, #0
 8007e58:	f8c6 50a0 	str.w	r5, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	f001 fade 	bl	800941e <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8007e62:	2301      	movs	r3, #1
 8007e64:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8007e68:	2002      	movs	r0, #2
 8007e6a:	f7fd fd0f 	bl	800588c <HAL_Delay>
  __IO uint32_t count = 0U;
 8007e6e:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	f001 fb07 	bl	8009484 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e76:	4605      	mov	r5, r0
 8007e78:	b138      	cbz	r0, 8007e8a <HAL_SD_InitCard+0x6e>
    hsd->State = HAL_SD_STATE_READY;
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007e80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007e82:	432b      	orrs	r3, r5
 8007e84:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8007e86:	4615      	mov	r5, r2
 8007e88:	e7e0      	b.n	8007e4c <HAL_SD_InitCard+0x30>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007e8a:	6820      	ldr	r0, [r4, #0]
 8007e8c:	f001 fe1c 	bl	8009ac8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e90:	b948      	cbnz	r0, 8007ea6 <HAL_SD_InitCard+0x8a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e92:	2301      	movs	r3, #1
 8007e94:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e96:	2100      	movs	r1, #0
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	f001 fc77 	bl	800978c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e9e:	b168      	cbz	r0, 8007ebc <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ea0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8007ea4:	e7e9      	b.n	8007e7a <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007eaa:	6820      	ldr	r0, [r4, #0]
 8007eac:	f001 faea 	bl	8009484 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f040 80c4 	bne.w	800803e <HAL_SD_InitCard+0x222>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007eb6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d0ec      	beq.n	8007e96 <HAL_SD_InitCard+0x7a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ebc:	9a06      	ldr	r2, [sp, #24]
 8007ebe:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	f200 80c0 	bhi.w	8008048 <HAL_SD_InitCard+0x22c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ec8:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007eca:	4f65      	ldr	r7, [pc, #404]	@ (8008060 <HAL_SD_InitCard+0x244>)
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ecc:	4698      	mov	r8, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ece:	4631      	mov	r1, r6
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	f001 fc5b 	bl	800978c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d1ce      	bne.n	8007e7a <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007edc:	4639      	mov	r1, r7
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	f001 fd34 	bl	800994c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d155      	bne.n	8007f94 <HAL_SD_InitCard+0x178>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ee8:	4631      	mov	r1, r6
 8007eea:	6820      	ldr	r0, [r4, #0]
 8007eec:	f001 fab2 	bl	8009454 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007ef0:	0fc2      	lsrs	r2, r0, #31
    count++;
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	4543      	cmp	r3, r8
 8007efc:	d801      	bhi.n	8007f02 <HAL_SD_InitCard+0xe6>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d0e5      	beq.n	8007ece <HAL_SD_InitCard+0xb2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f02:	9a06      	ldr	r2, [sp, #24]
 8007f04:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	f200 809a 	bhi.w	8008042 <HAL_SD_InitCard+0x226>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f0e:	f3c0 7580 	ubfx	r5, r0, #30, #1
    hsd->SdCard.CardType = CARD_SDSC;
 8007f12:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007f1a:	6820      	ldr	r0, [r4, #0]
 8007f1c:	f001 fa83 	bl	8009426 <SDIO_GetPowerState>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f000 8083 	beq.w	800802c <HAL_SD_InitCard+0x210>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d136      	bne.n	8007f9a <HAL_SD_InitCard+0x17e>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f2c:	2104      	movs	r1, #4
 8007f2e:	6820      	ldr	r0, [r4, #0]
 8007f30:	f001 fa90 	bl	8009454 <SDIO_GetResponse>
 8007f34:	0d00      	lsrs	r0, r0, #20
 8007f36:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f38:	a907      	add	r1, sp, #28
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7ff fe94 	bl	8007c68 <HAL_SD_GetCardCSD>
 8007f40:	4605      	mov	r5, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d16f      	bne.n	8008026 <HAL_SD_InitCard+0x20a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f46:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007f48:	0412      	lsls	r2, r2, #16
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	f001 fc05 	bl	800975c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f52:	4602      	mov	r2, r0
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d16b      	bne.n	8008030 <HAL_SD_InitCard+0x214>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007f58:	4623      	mov	r3, r4
 8007f5a:	f853 6b10 	ldr.w	r6, [r3], #16
 8007f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007f66:	1d23      	adds	r3, r4, #4
 8007f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f001 fa35 	bl	80093da <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	f001 fb5f 	bl	8009638 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f43f af66 	beq.w	8007e4c <HAL_SD_InitCard+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	4938      	ldr	r1, [pc, #224]	@ (8008064 <HAL_SD_InitCard+0x248>)
 8007f84:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007f86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007f88:	4303      	orrs	r3, r0
 8007f8a:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f8c:	2501      	movs	r5, #1
 8007f8e:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8007f92:	e75b      	b.n	8007e4c <HAL_SD_InitCard+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f94:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	e76f      	b.n	8007e7a <HAL_SD_InitCard+0x5e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	f001 fc84 	bl	80098a8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d144      	bne.n	8008030 <HAL_SD_InitCard+0x214>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	f001 fa53 	bl	8009454 <SDIO_GetResponse>
 8007fae:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007fb0:	2104      	movs	r1, #4
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	f001 fa4e 	bl	8009454 <SDIO_GetResponse>
 8007fb8:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007fba:	2108      	movs	r1, #8
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	f001 fa49 	bl	8009454 <SDIO_GetResponse>
 8007fc2:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007fc4:	210c      	movs	r1, #12
 8007fc6:	6820      	ldr	r0, [r4, #0]
 8007fc8:	f001 fa44 	bl	8009454 <SDIO_GetResponse>
 8007fcc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fd0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d0aa      	beq.n	8007f2c <HAL_SD_InitCard+0x110>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fd6:	f10d 0116 	add.w	r1, sp, #22
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	f001 fd26 	bl	8009a2c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	bb28      	cbnz	r0, 8008030 <HAL_SD_InitCard+0x214>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fe4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d0a0      	beq.n	8007f2c <HAL_SD_InitCard+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 8007fea:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8007fee:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ff0:	0409      	lsls	r1, r1, #16
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	f001 fc6d 	bl	80098d2 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	b9c8      	cbnz	r0, 8008030 <HAL_SD_InitCard+0x214>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	f001 fa28 	bl	8009454 <SDIO_GetResponse>
 8008004:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008006:	2104      	movs	r1, #4
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	f001 fa23 	bl	8009454 <SDIO_GetResponse>
 800800e:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008010:	2108      	movs	r1, #8
 8008012:	6820      	ldr	r0, [r4, #0]
 8008014:	f001 fa1e 	bl	8009454 <SDIO_GetResponse>
 8008018:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800801a:	210c      	movs	r1, #12
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	f001 fa19 	bl	8009454 <SDIO_GetResponse>
 8008022:	6720      	str	r0, [r4, #112]	@ 0x70
 8008024:	e782      	b.n	8007f2c <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800802a:	e001      	b.n	8008030 <HAL_SD_InitCard+0x214>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800802c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8008030:	2501      	movs	r5, #1
 8008032:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008036:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008038:	4313      	orrs	r3, r2
 800803a:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800803c:	e706      	b.n	8007e4c <HAL_SD_InitCard+0x30>
      return errorstate;
 800803e:	4605      	mov	r5, r0
 8008040:	e71b      	b.n	8007e7a <HAL_SD_InitCard+0x5e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008042:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008046:	e718      	b.n	8007e7a <HAL_SD_InitCard+0x5e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008048:	9a06      	ldr	r2, [sp, #24]
 800804a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800804e:	429a      	cmp	r2, r3
 8008050:	f67f af5f 	bls.w	8007f12 <HAL_SD_InitCard+0xf6>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008054:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  if(errorstate != HAL_SD_ERROR_NONE)
 8008058:	e70f      	b.n	8007e7a <HAL_SD_InitCard+0x5e>
 800805a:	bf00      	nop
 800805c:	42258000 	.word	0x42258000
 8008060:	c1100000 	.word	0xc1100000
 8008064:	004005ff 	.word	0x004005ff

08008068 <HAL_SD_Init>:
  if(hsd == NULL)
 8008068:	b1a8      	cbz	r0, 8008096 <HAL_SD_Init+0x2e>
{
 800806a:	b510      	push	{r4, lr}
 800806c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800806e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8008072:	b163      	cbz	r3, 800808e <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8008074:	2303      	movs	r3, #3
 8008076:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff fece 	bl	8007e1c <HAL_SD_InitCard>
 8008080:	b958      	cbnz	r0, 800809a <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008082:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8008084:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8008086:	2301      	movs	r3, #1
 8008088:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800808c:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800808e:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8008090:	f7fd f916 	bl	80052c0 <HAL_SD_MspInit>
 8008094:	e7ee      	b.n	8008074 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8008096:	2001      	movs	r0, #1
}
 8008098:	4770      	bx	lr
    return HAL_ERROR;
 800809a:	2001      	movs	r0, #1
 800809c:	e7f6      	b.n	800808c <HAL_SD_Init+0x24>

0800809e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800809e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80080a0:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080a2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80080a4:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080a6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80080a8:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080aa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80080ac:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80080b0:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080b2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80080b4:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080b6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80080b8:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080ba:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80080bc:	61cb      	str	r3, [r1, #28]
}
 80080be:	2000      	movs	r0, #0
 80080c0:	4770      	bx	lr
	...

080080c4 <HAL_SD_ConfigWideBusOperation>:
{
 80080c4:	b530      	push	{r4, r5, lr}
 80080c6:	b08d      	sub	sp, #52	@ 0x34
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80080cc:	2303      	movs	r3, #3
 80080ce:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80080d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d061      	beq.n	800819c <HAL_SD_ConfigWideBusOperation+0xd8>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80080d8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80080dc:	d008      	beq.n	80080f0 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080de:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80080e2:	d00a      	beq.n	80080fa <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80080e4:	b389      	cbz	r1, 800814a <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80080e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080ec:	6383      	str	r3, [r0, #56]	@ 0x38
 80080ee:	e059      	b.n	80081a4 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080f0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80080f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080f6:	6383      	str	r3, [r0, #56]	@ 0x38
 80080f8:	e054      	b.n	80081a4 <HAL_SD_ConfigWideBusOperation+0xe0>
  uint32_t scr[2U] = {0U, 0U};
 80080fa:	2100      	movs	r1, #0
 80080fc:	9104      	str	r1, [sp, #16]
 80080fe:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008100:	6800      	ldr	r0, [r0, #0]
 8008102:	f001 f9a7 	bl	8009454 <SDIO_GetResponse>
 8008106:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800810a:	d116      	bne.n	800813a <HAL_SD_ConfigWideBusOperation+0x76>
  errorstate = SD_FindSCR(hsd, scr);
 800810c:	a904      	add	r1, sp, #16
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff fbc2 	bl	8007898 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008114:	4602      	mov	r2, r0
 8008116:	b988      	cbnz	r0, 800813c <HAL_SD_ConfigWideBusOperation+0x78>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008118:	9b05      	ldr	r3, [sp, #20]
 800811a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800811e:	d011      	beq.n	8008144 <HAL_SD_ConfigWideBusOperation+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008120:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008122:	0409      	lsls	r1, r1, #16
 8008124:	6820      	ldr	r0, [r4, #0]
 8008126:	f001 fb31 	bl	800978c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800812a:	4602      	mov	r2, r0
 800812c:	b930      	cbnz	r0, 800813c <HAL_SD_ConfigWideBusOperation+0x78>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800812e:	2102      	movs	r1, #2
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	f001 fb43 	bl	80097bc <SDMMC_CmdBusWidth>
 8008136:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8008138:	e000      	b.n	800813c <HAL_SD_ConfigWideBusOperation+0x78>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800813a:	462a      	mov	r2, r5
      hsd->ErrorCode |= errorstate;
 800813c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800813e:	4313      	orrs	r3, r2
 8008140:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008142:	e02f      	b.n	80081a4 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008144:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008148:	e7f8      	b.n	800813c <HAL_SD_ConfigWideBusOperation+0x78>
  uint32_t scr[2U] = {0U, 0U};
 800814a:	2100      	movs	r1, #0
 800814c:	9104      	str	r1, [sp, #16]
 800814e:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	f001 f97f 	bl	8009454 <SDIO_GetResponse>
 8008156:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800815a:	d116      	bne.n	800818a <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800815c:	a904      	add	r1, sp, #16
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff fb9a 	bl	8007898 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008164:	4602      	mov	r2, r0
 8008166:	b990      	cbnz	r0, 800818e <HAL_SD_ConfigWideBusOperation+0xca>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800816e:	d012      	beq.n	8008196 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008170:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008172:	0409      	lsls	r1, r1, #16
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	f001 fb09 	bl	800978c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800817a:	4602      	mov	r2, r0
 800817c:	b938      	cbnz	r0, 800818e <HAL_SD_ConfigWideBusOperation+0xca>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800817e:	2100      	movs	r1, #0
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	f001 fb1b 	bl	80097bc <SDMMC_CmdBusWidth>
 8008186:	4602      	mov	r2, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8008188:	e001      	b.n	800818e <HAL_SD_ConfigWideBusOperation+0xca>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800818a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 800818e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008190:	4313      	orrs	r3, r2
 8008192:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008194:	e006      	b.n	80081a4 <HAL_SD_ConfigWideBusOperation+0xe0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008196:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800819a:	e7f8      	b.n	800818e <HAL_SD_ConfigWideBusOperation+0xca>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800819c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800819e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081a2:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80081a6:	b1c3      	cbz	r3, 80081da <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	4a17      	ldr	r2, [pc, #92]	@ (8008208 <HAL_SD_ConfigWideBusOperation+0x144>)
 80081ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081ae:	2501      	movs	r5, #1
 80081b0:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081b8:	6820      	ldr	r0, [r4, #0]
 80081ba:	f001 fa3d 	bl	8009638 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80081be:	b130      	cbz	r0, 80081ce <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	4911      	ldr	r1, [pc, #68]	@ (8008208 <HAL_SD_ConfigWideBusOperation+0x144>)
 80081c4:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80081c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80081c8:	4303      	orrs	r3, r0
 80081ca:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 80081cc:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80081d4:	4628      	mov	r0, r5
 80081d6:	b00d      	add	sp, #52	@ 0x34
 80081d8:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	9306      	str	r3, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80081de:	68a3      	ldr	r3, [r4, #8]
 80081e0:	9307      	str	r3, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	9308      	str	r3, [sp, #32]
    Init.BusWide             = WideMode;
 80081e6:	9509      	str	r5, [sp, #36]	@ 0x24
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80081e8:	6963      	ldr	r3, [r4, #20]
 80081ea:	930a      	str	r3, [sp, #40]	@ 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80081ec:	69a3      	ldr	r3, [r4, #24]
 80081ee:	930b      	str	r3, [sp, #44]	@ 0x2c
    (void)SDIO_Init(hsd->Instance, Init);
 80081f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80081f2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80081f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80081fa:	ab06      	add	r3, sp, #24
 80081fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	f001 f8eb 	bl	80093da <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8008204:	2500      	movs	r5, #0
 8008206:	e7d5      	b.n	80081b4 <HAL_SD_ConfigWideBusOperation+0xf0>
 8008208:	004005ff 	.word	0x004005ff

0800820c <HAL_SD_GetCardState>:
{
 800820c:	b510      	push	{r4, lr}
 800820e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008210:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008212:	0409      	lsls	r1, r1, #16
 8008214:	6800      	ldr	r0, [r0, #0]
 8008216:	f001 fb01 	bl	800981c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800821a:	b130      	cbz	r0, 800822a <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 800821c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800821e:	4303      	orrs	r3, r0
 8008220:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t resp1 = 0;
 8008222:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008224:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8008228:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800822a:	2100      	movs	r1, #0
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	f001 f911 	bl	8009454 <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008232:	e7f7      	b.n	8008224 <HAL_SD_GetCardState+0x18>

08008234 <SD_DMAError>:
{
 8008234:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008236:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008238:	f7fd fdb8 	bl	8005dac <HAL_DMA_GetError>
 800823c:	2802      	cmp	r0, #2
 800823e:	d00a      	beq.n	8008256 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008240:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008244:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008246:	6d52      	ldr	r2, [r2, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008248:	2b01      	cmp	r3, #1
 800824a:	d005      	beq.n	8008258 <SD_DMAError+0x24>
 800824c:	2a01      	cmp	r2, #1
 800824e:	d003      	beq.n	8008258 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff fce3 	bl	8007c1c <HAL_SD_ErrorCallback>
}
 8008256:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	4a0f      	ldr	r2, [pc, #60]	@ (8008298 <SD_DMAError+0x64>)
 800825c:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8008262:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8008266:	63d3      	str	r3, [r2, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008268:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800826a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800826e:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008270:	4620      	mov	r0, r4
 8008272:	f7ff ffcb 	bl	800820c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008276:	3805      	subs	r0, #5
 8008278:	2801      	cmp	r0, #1
 800827a:	d905      	bls.n	8008288 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 800827c:	2301      	movs	r3, #1
 800827e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008282:	2300      	movs	r3, #0
 8008284:	6323      	str	r3, [r4, #48]	@ 0x30
 8008286:	e7e3      	b.n	8008250 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	f001 fa4d 	bl	8009728 <SDMMC_CmdStopTransfer>
 800828e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008290:	4303      	orrs	r3, r0
 8008292:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008294:	e7f2      	b.n	800827c <SD_DMAError+0x48>
 8008296:	bf00      	nop
 8008298:	004005ff 	.word	0x004005ff

0800829c <SD_DMATxAbort>:
{
 800829c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800829e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80082a6:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff ffaf 	bl	800820c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80082b8:	3805      	subs	r0, #5
 80082ba:	2801      	cmp	r0, #1
 80082bc:	d905      	bls.n	80082ca <SD_DMATxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80082be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082c0:	b953      	cbnz	r3, 80082d8 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 80082c2:	4620      	mov	r0, r4
 80082c4:	f002 fa1f 	bl	800a706 <HAL_SD_AbortCallback>
}
 80082c8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	f001 fa2c 	bl	8009728 <SDMMC_CmdStopTransfer>
 80082d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082d2:	4303      	orrs	r3, r0
 80082d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80082d6:	e7f2      	b.n	80082be <SD_DMATxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 80082d8:	4620      	mov	r0, r4
 80082da:	f7ff fc9f 	bl	8007c1c <HAL_SD_ErrorCallback>
}
 80082de:	e7f3      	b.n	80082c8 <SD_DMATxAbort+0x2c>

080082e0 <SD_DMARxAbort>:
{
 80082e0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80082ea:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7ff ff8d 	bl	800820c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80082fc:	3805      	subs	r0, #5
 80082fe:	2801      	cmp	r0, #1
 8008300:	d905      	bls.n	800830e <SD_DMARxAbort+0x2e>
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008302:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008304:	b953      	cbnz	r3, 800831c <SD_DMARxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 8008306:	4620      	mov	r0, r4
 8008308:	f002 f9fd 	bl	800a706 <HAL_SD_AbortCallback>
}
 800830c:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	f001 fa0a 	bl	8009728 <SDMMC_CmdStopTransfer>
 8008314:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008316:	4303      	orrs	r3, r0
 8008318:	63a3      	str	r3, [r4, #56]	@ 0x38
 800831a:	e7f2      	b.n	8008302 <SD_DMARxAbort+0x22>
    HAL_SD_ErrorCallback(hsd);
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff fc7d 	bl	8007c1c <HAL_SD_ErrorCallback>
}
 8008322:	e7f3      	b.n	800830c <SD_DMARxAbort+0x2c>

08008324 <HAL_SD_IRQHandler>:
{
 8008324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800832c:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800832e:	6803      	ldr	r3, [r0, #0]
 8008330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008332:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8008336:	f000 8082 	beq.w	800843e <HAL_SD_IRQHandler+0x11a>
 800833a:	f015 0f08 	tst.w	r5, #8
 800833e:	d15e      	bne.n	80083fe <HAL_SD_IRQHandler+0xda>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008342:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008346:	f040 8114 	bne.w	8008572 <HAL_SD_IRQHandler+0x24e>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800834a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800834c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800834e:	f240 223a 	movw	r2, #570	@ 0x23a
 8008352:	4211      	tst	r1, r2
 8008354:	f000 809c 	beq.w	8008490 <HAL_SD_IRQHandler+0x16c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800835a:	f012 0f02 	tst.w	r2, #2
 800835e:	d003      	beq.n	8008368 <HAL_SD_IRQHandler+0x44>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008360:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008362:	f042 0202 	orr.w	r2, r2, #2
 8008366:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800836a:	f012 0f08 	tst.w	r2, #8
 800836e:	d003      	beq.n	8008378 <HAL_SD_IRQHandler+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008370:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800837a:	f012 0f20 	tst.w	r2, #32
 800837e:	d003      	beq.n	8008388 <HAL_SD_IRQHandler+0x64>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008380:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008382:	f042 0220 	orr.w	r2, r2, #32
 8008386:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838a:	f012 0f10 	tst.w	r2, #16
 800838e:	d003      	beq.n	8008398 <HAL_SD_IRQHandler+0x74>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008390:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008392:	f042 0210 	orr.w	r2, r2, #16
 8008396:	63a2      	str	r2, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800839a:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800839e:	d003      	beq.n	80083a8 <HAL_SD_IRQHandler+0x84>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	63a2      	str	r2, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80083a8:	f240 723a 	movw	r2, #1850	@ 0x73a
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80083b2:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80083b6:	f023 0302 	bic.w	r3, r3, #2
 80083ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	f001 f9b3 	bl	8009728 <SDMMC_CmdStopTransfer>
 80083c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80083c4:	4303      	orrs	r3, r0
 80083c6:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80083c8:	f015 0f08 	tst.w	r5, #8
 80083cc:	f040 80b2 	bne.w	8008534 <HAL_SD_IRQHandler+0x210>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083d0:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80083d4:	d05c      	beq.n	8008490 <HAL_SD_IRQHandler+0x16c>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083d6:	f015 0f30 	tst.w	r5, #48	@ 0x30
 80083da:	f040 80b4 	bne.w	8008546 <HAL_SD_IRQHandler+0x222>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083de:	f015 0f03 	tst.w	r5, #3
 80083e2:	f000 80bc 	beq.w	800855e <HAL_SD_IRQHandler+0x23a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80083e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083e8:	4a75      	ldr	r2, [pc, #468]	@ (80085c0 <HAL_SD_IRQHandler+0x29c>)
 80083ea:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083ec:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80083ee:	f7fd fbdc 	bl	8005baa <HAL_DMA_Abort_IT>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d04c      	beq.n	8008490 <HAL_SD_IRQHandler+0x16c>
          SD_DMARxAbort(hsd->hdmarx);
 80083f6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80083f8:	f7ff ff72 	bl	80082e0 <SD_DMARxAbort>
 80083fc:	e048      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80083fe:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c

  if (dataremaining > 0U)
 8008400:	2f00      	cmp	r7, #0
 8008402:	d045      	beq.n	8008490 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pRxBuffPtr;
 8008404:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8008408:	f108 0504 	add.w	r5, r8, #4
 800840c:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	f000 fffc 	bl	800940e <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008416:	f805 0c04 	strb.w	r0, [r5, #-4]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800841a:	0a03      	lsrs	r3, r0, #8
 800841c:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008420:	0c03      	lsrs	r3, r0, #16
 8008422:	f805 3c02 	strb.w	r3, [r5, #-2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008426:	0e00      	lsrs	r0, r0, #24
 8008428:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 800842c:	3504      	adds	r5, #4
 800842e:	42b5      	cmp	r5, r6
 8008430:	d1ee      	bne.n	8008410 <HAL_SD_IRQHandler+0xec>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 8008432:	f108 0320 	add.w	r3, r8, #32
 8008436:	62a3      	str	r3, [r4, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008438:	3f20      	subs	r7, #32
 800843a:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800843c:	e028      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800843e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008440:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008444:	d045      	beq.n	80084d2 <HAL_SD_IRQHandler+0x1ae>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800844a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800844c:	6802      	ldr	r2, [r0, #0]
 800844e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8008450:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008454:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008458:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800845a:	6802      	ldr	r2, [r0, #0]
 800845c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8008464:	f015 0f08 	tst.w	r5, #8
 8008468:	f000 8092 	beq.w	8008590 <HAL_SD_IRQHandler+0x26c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800846c:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8008470:	d111      	bne.n	8008496 <HAL_SD_IRQHandler+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008478:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800847a:	2301      	movs	r3, #1
 800847c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008480:	2300      	movs	r3, #0
 8008482:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008484:	f015 0f03 	tst.w	r5, #3
 8008488:	d012      	beq.n	80084b0 <HAL_SD_IRQHandler+0x18c>
        HAL_SD_RxCpltCallback(hsd);
 800848a:	4620      	mov	r0, r4
 800848c:	f002 f943 	bl	800a716 <HAL_SD_RxCpltCallback>
}
 8008490:	b002      	add	sp, #8
 8008492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008496:	6800      	ldr	r0, [r0, #0]
 8008498:	f001 f946 	bl	8009728 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800849c:	4603      	mov	r3, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0e7      	beq.n	8008472 <HAL_SD_IRQHandler+0x14e>
          hsd->ErrorCode |= errorstate;
 80084a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80084a4:	4313      	orrs	r3, r2
 80084a6:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7ff fbb7 	bl	8007c1c <HAL_SD_ErrorCallback>
 80084ae:	e7e0      	b.n	8008472 <HAL_SD_IRQHandler+0x14e>
        HAL_SD_TxCpltCallback(hsd);
 80084b0:	4620      	mov	r0, r4
 80084b2:	f002 f92c 	bl	800a70e <HAL_SD_TxCpltCallback>
 80084b6:	e7eb      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	f001 f935 	bl	8009728 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80084be:	4603      	mov	r3, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d06c      	beq.n	800859e <HAL_SD_IRQHandler+0x27a>
          hsd->ErrorCode |= errorstate;
 80084c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80084c6:	4313      	orrs	r3, r2
 80084c8:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80084ca:	4620      	mov	r0, r4
 80084cc:	f7ff fba6 	bl	8007c1c <HAL_SD_ErrorCallback>
 80084d0:	e065      	b.n	800859e <HAL_SD_IRQHandler+0x27a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80084d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084d4:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80084d8:	f43f af38 	beq.w	800834c <HAL_SD_IRQHandler+0x28>
 80084dc:	f015 0f08 	tst.w	r5, #8
 80084e0:	f43f af34 	beq.w	800834c <HAL_SD_IRQHandler+0x28>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80084e4:	6a47      	ldr	r7, [r0, #36]	@ 0x24

  if (dataremaining > 0U)
 80084e6:	2f00      	cmp	r7, #0
 80084e8:	d0d2      	beq.n	8008490 <HAL_SD_IRQHandler+0x16c>
  tmp = hsd->pTxBuffPtr;
 80084ea:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80084ee:	f108 0504 	add.w	r5, r8, #4
 80084f2:	f108 0624 	add.w	r6, r8, #36	@ 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 80084f6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80084fa:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 80084fc:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8008500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008504:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 8008506:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 800850a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850e:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 8008510:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008514:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008518:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800851a:	a901      	add	r1, sp, #4
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	f000 ff79 	bl	8009414 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008522:	3504      	adds	r5, #4
 8008524:	42b5      	cmp	r5, r6
 8008526:	d1e6      	bne.n	80084f6 <HAL_SD_IRQHandler+0x1d2>
    }

    hsd->pTxBuffPtr = tmp;
 8008528:	f108 0320 	add.w	r3, r8, #32
 800852c:	6223      	str	r3, [r4, #32]
    hsd->TxXferSize = dataremaining;
 800852e:	3f20      	subs	r7, #32
 8008530:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 8008532:	e7ad      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
      hsd->State = HAL_SD_STATE_READY;
 8008534:	2301      	movs	r3, #1
 8008536:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800853a:	2300      	movs	r3, #0
 800853c:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff fb6c 	bl	8007c1c <HAL_SD_ErrorCallback>
 8008544:	e7a4      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008546:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008548:	4a1e      	ldr	r2, [pc, #120]	@ (80085c4 <HAL_SD_IRQHandler+0x2a0>)
 800854a:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800854c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800854e:	f7fd fb2c 	bl	8005baa <HAL_DMA_Abort_IT>
 8008552:	2800      	cmp	r0, #0
 8008554:	d09c      	beq.n	8008490 <HAL_SD_IRQHandler+0x16c>
          SD_DMATxAbort(hsd->hdmatx);
 8008556:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008558:	f7ff fea0 	bl	800829c <SD_DMATxAbort>
 800855c:	e798      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008562:	2201      	movs	r2, #1
 8008564:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008568:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800856a:	4620      	mov	r0, r4
 800856c:	f002 f8cb 	bl	800a706 <HAL_SD_AbortCallback>
}
 8008570:	e78e      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008572:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008578:	6822      	ldr	r2, [r4, #0]
 800857a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800857c:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008580:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008584:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008590:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8008594:	f43f af7c 	beq.w	8008490 <HAL_SD_IRQHandler+0x16c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008598:	f015 0f20 	tst.w	r5, #32
 800859c:	d18c      	bne.n	80084b8 <HAL_SD_IRQHandler+0x194>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800859e:	f015 0f03 	tst.w	r5, #3
 80085a2:	f47f af75 	bne.w	8008490 <HAL_SD_IRQHandler+0x16c>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80085aa:	f023 0308 	bic.w	r3, r3, #8
 80085ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80085b6:	4620      	mov	r0, r4
 80085b8:	f002 f8a9 	bl	800a70e <HAL_SD_TxCpltCallback>
 80085bc:	e768      	b.n	8008490 <HAL_SD_IRQHandler+0x16c>
 80085be:	bf00      	nop
 80085c0:	080082e1 	.word	0x080082e1
 80085c4:	0800829d 	.word	0x0800829d

080085c8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d05a      	beq.n	8008682 <HAL_SPI_Init+0xba>
{
 80085cc:	b510      	push	{r4, lr}
 80085ce:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80085d2:	b933      	cbnz	r3, 80085e2 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085d4:	6843      	ldr	r3, [r0, #4]
 80085d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085da:	d005      	beq.n	80085e8 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085dc:	2300      	movs	r3, #0
 80085de:	61c3      	str	r3, [r0, #28]
 80085e0:	e002      	b.n	80085e8 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085e2:	2300      	movs	r3, #0
 80085e4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085e6:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ec:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d040      	beq.n	8008676 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085f4:	2302      	movs	r3, #2
 80085f6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	6813      	ldr	r3, [r2, #0]
 80085fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008602:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800860c:	68a1      	ldr	r1, [r4, #8]
 800860e:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8008612:	430b      	orrs	r3, r1
 8008614:	68e1      	ldr	r1, [r4, #12]
 8008616:	f401 6100 	and.w	r1, r1, #2048	@ 0x800
 800861a:	430b      	orrs	r3, r1
 800861c:	6921      	ldr	r1, [r4, #16]
 800861e:	f001 0102 	and.w	r1, r1, #2
 8008622:	430b      	orrs	r3, r1
 8008624:	6961      	ldr	r1, [r4, #20]
 8008626:	f001 0101 	and.w	r1, r1, #1
 800862a:	430b      	orrs	r3, r1
 800862c:	69a1      	ldr	r1, [r4, #24]
 800862e:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8008632:	430b      	orrs	r3, r1
 8008634:	69e1      	ldr	r1, [r4, #28]
 8008636:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 800863a:	430b      	orrs	r3, r1
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8008642:	430b      	orrs	r3, r1
 8008644:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008646:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 800864a:	430b      	orrs	r3, r1
 800864c:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800864e:	6821      	ldr	r1, [r4, #0]
 8008650:	8b63      	ldrh	r3, [r4, #26]
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008658:	f002 0210 	and.w	r2, r2, #16
 800865c:	4313      	orrs	r3, r2
 800865e:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008660:	6822      	ldr	r2, [r4, #0]
 8008662:	69d3      	ldr	r3, [r2, #28]
 8008664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008668:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800866a:	2000      	movs	r0, #0
 800866c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800866e:	2301      	movs	r3, #1
 8008670:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8008674:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008676:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 800867a:	4620      	mov	r0, r4
 800867c:	f7fc feec 	bl	8005458 <HAL_SPI_MspInit>
 8008680:	e7b8      	b.n	80085f4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8008682:	2001      	movs	r0, #1
}
 8008684:	4770      	bx	lr
	...

08008688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008688:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800868c:	6a02      	ldr	r2, [r0, #32]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008694:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008696:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008698:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800869c:	680d      	ldr	r5, [r1, #0]
 800869e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086a0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086a4:	688d      	ldr	r5, [r1, #8]
 80086a6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086a8:	4d0d      	ldr	r5, [pc, #52]	@ (80086e0 <TIM_OC1_SetConfig+0x58>)
 80086aa:	42a8      	cmp	r0, r5
 80086ac:	d003      	beq.n	80086b6 <TIM_OC1_SetConfig+0x2e>
 80086ae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086b2:	42a8      	cmp	r0, r5
 80086b4:	d10d      	bne.n	80086d2 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086b6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086ba:	68cd      	ldr	r5, [r1, #12]
 80086bc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086be:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086c2:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086c6:	698d      	ldr	r5, [r1, #24]
 80086c8:	694e      	ldr	r6, [r1, #20]
 80086ca:	ea46 0c05 	orr.w	ip, r6, r5
 80086ce:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086d6:	684a      	ldr	r2, [r1, #4]
 80086d8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086da:	6203      	str	r3, [r0, #32]
}
 80086dc:	bc70      	pop	{r4, r5, r6}
 80086de:	4770      	bx	lr
 80086e0:	40010000 	.word	0x40010000

080086e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086e8:	6a02      	ldr	r2, [r0, #32]
 80086ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086ee:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086f4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	680d      	ldr	r5, [r1, #0]
 80086fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008700:	688d      	ldr	r5, [r1, #8]
 8008702:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008706:	4d0e      	ldr	r5, [pc, #56]	@ (8008740 <TIM_OC3_SetConfig+0x5c>)
 8008708:	42a8      	cmp	r0, r5
 800870a:	d003      	beq.n	8008714 <TIM_OC3_SetConfig+0x30>
 800870c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008710:	42a8      	cmp	r0, r5
 8008712:	d10e      	bne.n	8008732 <TIM_OC3_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008718:	68cd      	ldr	r5, [r1, #12]
 800871a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800871e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008722:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008726:	698d      	ldr	r5, [r1, #24]
 8008728:	694e      	ldr	r6, [r1, #20]
 800872a:	ea46 0c05 	orr.w	ip, r6, r5
 800872e:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008734:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008736:	684a      	ldr	r2, [r1, #4]
 8008738:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800873a:	6203      	str	r3, [r0, #32]
}
 800873c:	bc70      	pop	{r4, r5, r6}
 800873e:	4770      	bx	lr
 8008740:	40010000 	.word	0x40010000

08008744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008746:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008748:	6a02      	ldr	r2, [r0, #32]
 800874a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800874e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008752:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008754:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008758:	680d      	ldr	r5, [r1, #0]
 800875a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800875e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008762:	688d      	ldr	r5, [r1, #8]
 8008764:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008768:	4d09      	ldr	r5, [pc, #36]	@ (8008790 <TIM_OC4_SetConfig+0x4c>)
 800876a:	42a8      	cmp	r0, r5
 800876c:	d003      	beq.n	8008776 <TIM_OC4_SetConfig+0x32>
 800876e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008772:	42a8      	cmp	r0, r5
 8008774:	d104      	bne.n	8008780 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008776:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800877a:	694d      	ldr	r5, [r1, #20]
 800877c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008782:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008784:	684a      	ldr	r2, [r1, #4]
 8008786:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008788:	6203      	str	r3, [r0, #32]
}
 800878a:	bc30      	pop	{r4, r5}
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000

08008794 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008794:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b01      	cmp	r3, #1
 800879c:	d132      	bne.n	8008804 <HAL_TIM_Base_Start+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800879e:	2302      	movs	r3, #2
 80087a0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	4a19      	ldr	r2, [pc, #100]	@ (800880c <HAL_TIM_Base_Start+0x78>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d020      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b0:	d01d      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087b2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d019      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087be:	4293      	cmp	r3, r2
 80087c0:	d015      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d011      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087ca:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00d      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087d2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
 80087da:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80087de:	4293      	cmp	r3, r2
 80087e0:	d005      	beq.n	80087ee <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80087ea:	2000      	movs	r0, #0
 80087ec:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f4:	2a06      	cmp	r2, #6
 80087f6:	d007      	beq.n	8008808 <HAL_TIM_Base_Start+0x74>
      __HAL_TIM_ENABLE(htim);
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008800:	2000      	movs	r0, #0
 8008802:	4770      	bx	lr
    return HAL_ERROR;
 8008804:	2001      	movs	r0, #1
 8008806:	4770      	bx	lr
  return HAL_OK;
 8008808:	2000      	movs	r0, #0
}
 800880a:	4770      	bx	lr
 800880c:	40010000 	.word	0x40010000

08008810 <HAL_TIM_PWM_MspInit>:
}
 8008810:	4770      	bx	lr

08008812 <HAL_TIM_PeriodElapsedCallback>:
}
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008814:	4770      	bx	lr

08008816 <HAL_TIM_IC_CaptureCallback>:
}
 8008816:	4770      	bx	lr

08008818 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008818:	4770      	bx	lr

0800881a <HAL_TIM_TriggerCallback>:
}
 800881a:	4770      	bx	lr

0800881c <HAL_TIM_IRQHandler>:
{
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8008820:	6803      	ldr	r3, [r0, #0]
 8008822:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008824:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008826:	f015 0f02 	tst.w	r5, #2
 800882a:	d010      	beq.n	800884e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800882c:	f016 0f02 	tst.w	r6, #2
 8008830:	d00d      	beq.n	800884e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008832:	f06f 0202 	mvn.w	r2, #2
 8008836:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008838:	2301      	movs	r3, #1
 800883a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800883c:	6803      	ldr	r3, [r0, #0]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f013 0f03 	tst.w	r3, #3
 8008844:	d05e      	beq.n	8008904 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008846:	f7ff ffe6 	bl	8008816 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884a:	2300      	movs	r3, #0
 800884c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800884e:	f015 0f04 	tst.w	r5, #4
 8008852:	d012      	beq.n	800887a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008854:	f016 0f04 	tst.w	r6, #4
 8008858:	d00f      	beq.n	800887a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	f06f 0204 	mvn.w	r2, #4
 8008860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008862:	2302      	movs	r3, #2
 8008864:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800886e:	d04f      	beq.n	8008910 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff ffd0 	bl	8008816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	2300      	movs	r3, #0
 8008878:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800887a:	f015 0f08 	tst.w	r5, #8
 800887e:	d012      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008880:	f016 0f08 	tst.w	r6, #8
 8008884:	d00f      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	f06f 0208 	mvn.w	r2, #8
 800888c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800888e:	2304      	movs	r3, #4
 8008890:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f013 0f03 	tst.w	r3, #3
 800889a:	d040      	beq.n	800891e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800889c:	4620      	mov	r0, r4
 800889e:	f7ff ffba 	bl	8008816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	2300      	movs	r3, #0
 80088a4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80088a6:	f015 0f10 	tst.w	r5, #16
 80088aa:	d012      	beq.n	80088d2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088ac:	f016 0f10 	tst.w	r6, #16
 80088b0:	d00f      	beq.n	80088d2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f06f 0210 	mvn.w	r2, #16
 80088b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ba:	2308      	movs	r3, #8
 80088bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80088c6:	d031      	beq.n	800892c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff ffa4 	bl	8008816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ce:	2300      	movs	r3, #0
 80088d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088d2:	f015 0f01 	tst.w	r5, #1
 80088d6:	d002      	beq.n	80088de <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088d8:	f016 0f01 	tst.w	r6, #1
 80088dc:	d12d      	bne.n	800893a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088de:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80088e2:	d002      	beq.n	80088ea <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088e4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80088e8:	d12f      	bne.n	800894a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088ea:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80088ee:	d002      	beq.n	80088f6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088f0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80088f4:	d131      	bne.n	800895a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088f6:	f015 0f20 	tst.w	r5, #32
 80088fa:	d002      	beq.n	8008902 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088fc:	f016 0f20 	tst.w	r6, #32
 8008900:	d133      	bne.n	800896a <HAL_TIM_IRQHandler+0x14e>
}
 8008902:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008904:	f7ff ff86 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008908:	4620      	mov	r0, r4
 800890a:	f7ff ff85 	bl	8008818 <HAL_TIM_PWM_PulseFinishedCallback>
 800890e:	e79c      	b.n	800884a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008910:	4620      	mov	r0, r4
 8008912:	f7ff ff7f 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff ff7e 	bl	8008818 <HAL_TIM_PWM_PulseFinishedCallback>
 800891c:	e7ab      	b.n	8008876 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff ff78 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff ff77 	bl	8008818 <HAL_TIM_PWM_PulseFinishedCallback>
 800892a:	e7ba      	b.n	80088a2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff ff71 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff ff70 	bl	8008818 <HAL_TIM_PWM_PulseFinishedCallback>
 8008938:	e7c9      	b.n	80088ce <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	f06f 0201 	mvn.w	r2, #1
 8008940:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff ff65 	bl	8008812 <HAL_TIM_PeriodElapsedCallback>
 8008948:	e7c9      	b.n	80088de <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008950:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fbb0 	bl	80090b8 <HAL_TIMEx_BreakCallback>
 8008958:	e7c7      	b.n	80088ea <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008960:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008962:	4620      	mov	r0, r4
 8008964:	f7ff ff59 	bl	800881a <HAL_TIM_TriggerCallback>
 8008968:	e7c5      	b.n	80088f6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	f06f 0220 	mvn.w	r2, #32
 8008970:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008972:	4620      	mov	r0, r4
 8008974:	f000 fb9f 	bl	80090b6 <HAL_TIMEx_CommutCallback>
}
 8008978:	e7c3      	b.n	8008902 <HAL_TIM_IRQHandler+0xe6>
	...

0800897c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800897c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800897e:	4a51      	ldr	r2, [pc, #324]	@ (8008ac4 <TIM_Base_SetConfig+0x148>)
 8008980:	4290      	cmp	r0, r2
 8008982:	d07f      	beq.n	8008a84 <TIM_Base_SetConfig+0x108>
 8008984:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008988:	d05b      	beq.n	8008a42 <TIM_Base_SetConfig+0xc6>
 800898a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800898e:	4290      	cmp	r0, r2
 8008990:	d06e      	beq.n	8008a70 <TIM_Base_SetConfig+0xf4>
 8008992:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008996:	4290      	cmp	r0, r2
 8008998:	d065      	beq.n	8008a66 <TIM_Base_SetConfig+0xea>
 800899a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800899e:	4290      	cmp	r0, r2
 80089a0:	d06b      	beq.n	8008a7a <TIM_Base_SetConfig+0xfe>
 80089a2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80089a6:	4290      	cmp	r0, r2
 80089a8:	d020      	beq.n	80089ec <TIM_Base_SetConfig+0x70>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089aa:	4a47      	ldr	r2, [pc, #284]	@ (8008ac8 <TIM_Base_SetConfig+0x14c>)
 80089ac:	4290      	cmp	r0, r2
 80089ae:	d04c      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 80089b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089b4:	4290      	cmp	r0, r2
 80089b6:	d048      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 80089b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089bc:	4290      	cmp	r0, r2
 80089be:	d044      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 80089c0:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80089c4:	4290      	cmp	r0, r2
 80089c6:	d040      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 80089c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089cc:	4290      	cmp	r0, r2
 80089ce:	d03c      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 80089d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089d4:	4290      	cmp	r0, r2
 80089d6:	d038      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089dc:	694a      	ldr	r2, [r1, #20]
 80089de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80089e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e2:	688b      	ldr	r3, [r1, #8]
 80089e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80089e6:	680b      	ldr	r3, [r1, #0]
 80089e8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089ea:	e05e      	b.n	8008aaa <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80089f0:	684a      	ldr	r2, [r1, #4]
 80089f2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089f4:	4a33      	ldr	r2, [pc, #204]	@ (8008ac4 <TIM_Base_SetConfig+0x148>)
 80089f6:	4290      	cmp	r0, r2
 80089f8:	d048      	beq.n	8008a8c <TIM_Base_SetConfig+0x110>
 80089fa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80089fe:	d024      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 8008a00:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8008a04:	4290      	cmp	r0, r2
 8008a06:	d020      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 8008a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a0c:	4290      	cmp	r0, r2
 8008a0e:	d01c      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
 8008a10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008a14:	4290      	cmp	r0, r2
 8008a16:	d018      	beq.n	8008a4a <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a1c:	68ca      	ldr	r2, [r1, #12]
 8008a1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a24:	694a      	ldr	r2, [r1, #20]
 8008a26:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008a28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a2a:	688b      	ldr	r3, [r1, #8]
 8008a2c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a2e:	680b      	ldr	r3, [r1, #0]
 8008a30:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a32:	4b24      	ldr	r3, [pc, #144]	@ (8008ac4 <TIM_Base_SetConfig+0x148>)
 8008a34:	4298      	cmp	r0, r3
 8008a36:	d036      	beq.n	8008aa6 <TIM_Base_SetConfig+0x12a>
 8008a38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a3c:	4298      	cmp	r0, r3
 8008a3e:	d032      	beq.n	8008aa6 <TIM_Base_SetConfig+0x12a>
 8008a40:	e033      	b.n	8008aaa <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a46:	684a      	ldr	r2, [r1, #4]
 8008a48:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a4e:	68ca      	ldr	r2, [r1, #12]
 8008a50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a56:	694a      	ldr	r2, [r1, #20]
 8008a58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008a5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a5c:	688b      	ldr	r3, [r1, #8]
 8008a5e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a60:	680b      	ldr	r3, [r1, #0]
 8008a62:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a64:	e021      	b.n	8008aaa <TIM_Base_SetConfig+0x12e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a6a:	684a      	ldr	r2, [r1, #4]
 8008a6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a6e:	e7ec      	b.n	8008a4a <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a74:	684a      	ldr	r2, [r1, #4]
 8008a76:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a78:	e7e7      	b.n	8008a4a <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a7e:	684a      	ldr	r2, [r1, #4]
 8008a80:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a82:	e7e2      	b.n	8008a4a <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a88:	684a      	ldr	r2, [r1, #4]
 8008a8a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a90:	68ca      	ldr	r2, [r1, #12]
 8008a92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a98:	694a      	ldr	r2, [r1, #20]
 8008a9a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008a9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a9e:	688b      	ldr	r3, [r1, #8]
 8008aa0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008aa2:	680b      	ldr	r3, [r1, #0]
 8008aa4:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008aa6:	690b      	ldr	r3, [r1, #16]
 8008aa8:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008aae:	6903      	ldr	r3, [r0, #16]
 8008ab0:	f013 0f01 	tst.w	r3, #1
 8008ab4:	d004      	beq.n	8008ac0 <TIM_Base_SetConfig+0x144>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ab6:	6903      	ldr	r3, [r0, #16]
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	6103      	str	r3, [r0, #16]
}
 8008abe:	4770      	bx	lr
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40014000 	.word	0x40014000

08008acc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008acc:	b340      	cbz	r0, 8008b20 <HAL_TIM_Base_Init+0x54>
{
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ad2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008ad6:	b1f3      	cbz	r3, 8008b16 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ade:	4621      	mov	r1, r4
 8008ae0:	f851 0b04 	ldr.w	r0, [r1], #4
 8008ae4:	f7ff ff4a 	bl	800897c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008af2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008af6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008afa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008b0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008b0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008b12:	2000      	movs	r0, #0
}
 8008b14:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008b16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008b1a:	f7fc fcdf 	bl	80054dc <HAL_TIM_Base_MspInit>
 8008b1e:	e7db      	b.n	8008ad8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008b20:	2001      	movs	r0, #1
}
 8008b22:	4770      	bx	lr

08008b24 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008b24:	b340      	cbz	r0, 8008b78 <HAL_TIM_PWM_Init+0x54>
{
 8008b26:	b510      	push	{r4, lr}
 8008b28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b2e:	b1f3      	cbz	r3, 8008b6e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008b30:	2302      	movs	r3, #2
 8008b32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b36:	4621      	mov	r1, r4
 8008b38:	f851 0b04 	ldr.w	r0, [r1], #4
 8008b3c:	f7ff ff1e 	bl	800897c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008b4a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008b4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008b52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008b62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008b66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008b6a:	2000      	movs	r0, #0
}
 8008b6c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008b6e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008b72:	f7ff fe4d 	bl	8008810 <HAL_TIM_PWM_MspInit>
 8008b76:	e7db      	b.n	8008b30 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8008b78:	2001      	movs	r0, #1
}
 8008b7a:	4770      	bx	lr

08008b7c <TIM_OC2_SetConfig>:
{
 8008b7c:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8008b7e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b80:	6a02      	ldr	r2, [r0, #32]
 8008b82:	f022 0210 	bic.w	r2, r2, #16
 8008b86:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008b88:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008b8a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b8c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	680d      	ldr	r5, [r1, #0]
 8008b92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8008b96:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b9a:	688d      	ldr	r5, [r1, #8]
 8008b9c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ba0:	4d0e      	ldr	r5, [pc, #56]	@ (8008bdc <TIM_OC2_SetConfig+0x60>)
 8008ba2:	42a8      	cmp	r0, r5
 8008ba4:	d003      	beq.n	8008bae <TIM_OC2_SetConfig+0x32>
 8008ba6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008baa:	42a8      	cmp	r0, r5
 8008bac:	d10e      	bne.n	8008bcc <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bb2:	68cd      	ldr	r5, [r1, #12]
 8008bb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbc:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bc0:	698d      	ldr	r5, [r1, #24]
 8008bc2:	694e      	ldr	r6, [r1, #20]
 8008bc4:	ea46 0c05 	orr.w	ip, r6, r5
 8008bc8:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8008bcc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008bce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008bd0:	684a      	ldr	r2, [r1, #4]
 8008bd2:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008bd4:	6203      	str	r3, [r0, #32]
}
 8008bd6:	bc70      	pop	{r4, r5, r6}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40010000 	.word	0x40010000

08008be0 <HAL_TIM_PWM_ConfigChannel>:
{
 8008be0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008be2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d066      	beq.n	8008cb8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8008bea:	4604      	mov	r4, r0
 8008bec:	460d      	mov	r5, r1
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008bf4:	2a0c      	cmp	r2, #12
 8008bf6:	d85a      	bhi.n	8008cae <HAL_TIM_PWM_ConfigChannel+0xce>
 8008bf8:	e8df f002 	tbb	[pc, r2]
 8008bfc:	59595907 	.word	0x59595907
 8008c00:	5959591b 	.word	0x5959591b
 8008c04:	59595930 	.word	0x59595930
 8008c08:	44          	.byte	0x44
 8008c09:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	f7ff fd3c 	bl	8008688 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c10:	6822      	ldr	r2, [r4, #0]
 8008c12:	6993      	ldr	r3, [r2, #24]
 8008c14:	f043 0308 	orr.w	r3, r3, #8
 8008c18:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	6993      	ldr	r3, [r2, #24]
 8008c1e:	f023 0304 	bic.w	r3, r3, #4
 8008c22:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	6993      	ldr	r3, [r2, #24]
 8008c28:	6929      	ldr	r1, [r5, #16]
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2000      	movs	r0, #0
      break;
 8008c30:	e03e      	b.n	8008cb0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c32:	6800      	ldr	r0, [r0, #0]
 8008c34:	f7ff ffa2 	bl	8008b7c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	6993      	ldr	r3, [r2, #24]
 8008c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	6993      	ldr	r3, [r2, #24]
 8008c46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	6993      	ldr	r3, [r2, #24]
 8008c50:	6929      	ldr	r1, [r5, #16]
 8008c52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008c56:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008c58:	2000      	movs	r0, #0
      break;
 8008c5a:	e029      	b.n	8008cb0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f7ff fd41 	bl	80086e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	69d3      	ldr	r3, [r2, #28]
 8008c66:	f043 0308 	orr.w	r3, r3, #8
 8008c6a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c6c:	6822      	ldr	r2, [r4, #0]
 8008c6e:	69d3      	ldr	r3, [r2, #28]
 8008c70:	f023 0304 	bic.w	r3, r3, #4
 8008c74:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c76:	6822      	ldr	r2, [r4, #0]
 8008c78:	69d3      	ldr	r3, [r2, #28]
 8008c7a:	6929      	ldr	r1, [r5, #16]
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008c80:	2000      	movs	r0, #0
      break;
 8008c82:	e015      	b.n	8008cb0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c84:	6800      	ldr	r0, [r0, #0]
 8008c86:	f7ff fd5d 	bl	8008744 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	69d3      	ldr	r3, [r2, #28]
 8008c8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c94:	6822      	ldr	r2, [r4, #0]
 8008c96:	69d3      	ldr	r3, [r2, #28]
 8008c98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c9c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	69d3      	ldr	r3, [r2, #28]
 8008ca2:	6929      	ldr	r1, [r5, #16]
 8008ca4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008ca8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008caa:	2000      	movs	r0, #0
      break;
 8008cac:	e000      	b.n	8008cb0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8008cae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8008cb8:	2002      	movs	r0, #2
 8008cba:	e7fc      	b.n	8008cb6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08008cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cbc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cbe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008cca:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cce:	6082      	str	r2, [r0, #8]
}
 8008cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <HAL_TIM_ConfigClockSource>:
{
 8008cd6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008cd8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	f000 80ad 	beq.w	8008e3c <HAL_TIM_ConfigClockSource+0x166>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008cea:	2302      	movs	r3, #2
 8008cec:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008cf0:	6802      	ldr	r2, [r0, #0]
 8008cf2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cf4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cf8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8008cfc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008cfe:	680b      	ldr	r3, [r1, #0]
 8008d00:	2b60      	cmp	r3, #96	@ 0x60
 8008d02:	d060      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0xf0>
 8008d04:	d837      	bhi.n	8008d76 <HAL_TIM_ConfigClockSource+0xa0>
 8008d06:	2b40      	cmp	r3, #64	@ 0x40
 8008d08:	d079      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x128>
 8008d0a:	d815      	bhi.n	8008d38 <HAL_TIM_ConfigClockSource+0x62>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d007      	beq.n	8008d20 <HAL_TIM_ConfigClockSource+0x4a>
 8008d10:	d804      	bhi.n	8008d1c <HAL_TIM_ConfigClockSource+0x46>
 8008d12:	f033 0210 	bics.w	r2, r3, #16
 8008d16:	d003      	beq.n	8008d20 <HAL_TIM_ConfigClockSource+0x4a>
 8008d18:	2001      	movs	r0, #1
 8008d1a:	e040      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
 8008d1c:	2b30      	cmp	r3, #48	@ 0x30
 8008d1e:	d109      	bne.n	8008d34 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d20:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008d22:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d24:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008d2e:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008d30:	2000      	movs	r0, #0
}
 8008d32:	e034      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8008d34:	2001      	movs	r0, #1
 8008d36:	e032      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
 8008d38:	2b50      	cmp	r3, #80	@ 0x50
 8008d3a:	d11a      	bne.n	8008d72 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d3e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008d40:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008d42:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	f022 0201 	bic.w	r2, r2, #1
 8008d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d4e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d56:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008d5a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d60:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008d62:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d68:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008d6c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008d6e:	2000      	movs	r0, #0
}
 8008d70:	e015      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8008d72:	2001      	movs	r0, #1
 8008d74:	e013      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d7a:	d05b      	beq.n	8008e34 <HAL_TIM_ConfigClockSource+0x15e>
 8008d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d80:	d014      	beq.n	8008dac <HAL_TIM_ConfigClockSource+0xd6>
 8008d82:	2b70      	cmp	r3, #112	@ 0x70
 8008d84:	d158      	bne.n	8008e38 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8008d86:	68cb      	ldr	r3, [r1, #12]
 8008d88:	684a      	ldr	r2, [r1, #4]
 8008d8a:	6889      	ldr	r1, [r1, #8]
 8008d8c:	6800      	ldr	r0, [r0, #0]
 8008d8e:	f7ff ff95 	bl	8008cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d96:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008d9a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008da4:	2300      	movs	r3, #0
 8008da6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8008dac:	68cb      	ldr	r3, [r1, #12]
 8008dae:	684a      	ldr	r2, [r1, #4]
 8008db0:	6889      	ldr	r1, [r1, #8]
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	f7ff ff82 	bl	8008cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	6893      	ldr	r3, [r2, #8]
 8008dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dc0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2000      	movs	r0, #0
      break;
 8008dc4:	e7eb      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dc6:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dc8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008dca:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dce:	6a19      	ldr	r1, [r3, #32]
 8008dd0:	f021 0110 	bic.w	r1, r1, #16
 8008dd4:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dd8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ddc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008de0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008de4:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8008de8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dea:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dec:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008dee:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008df4:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008df8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008dfa:	2000      	movs	r0, #0
}
 8008dfc:	e7cf      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dfe:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e00:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008e02:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008e04:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e06:	6a1a      	ldr	r2, [r3, #32]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e0e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e10:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e14:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e18:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008e1c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e22:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8008e24:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e2a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8008e2e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008e30:	2000      	movs	r0, #0
}
 8008e32:	e7b4      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7b2      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8008e38:	2001      	movs	r0, #1
 8008e3a:	e7b0      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 8008e3c:	2002      	movs	r0, #2
 8008e3e:	e7b4      	b.n	8008daa <HAL_TIM_ConfigClockSource+0xd4>

08008e40 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e40:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e44:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e46:	f04f 0c01 	mov.w	ip, #1
 8008e4a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8008e4e:	ea23 030c 	bic.w	r3, r3, ip
 8008e52:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e54:	6a03      	ldr	r3, [r0, #32]
 8008e56:	408a      	lsls	r2, r1
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	6202      	str	r2, [r0, #32]
}
 8008e5c:	4770      	bx	lr
	...

08008e60 <HAL_TIM_PWM_Start>:
{
 8008e60:	b510      	push	{r4, lr}
 8008e62:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e64:	4608      	mov	r0, r1
 8008e66:	bba1      	cbnz	r1, 8008ed2 <HAL_TIM_PWM_Start+0x72>
 8008e68:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d167      	bne.n	8008f42 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e72:	2302      	movs	r3, #2
 8008e74:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e78:	2201      	movs	r2, #1
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	f7ff ffdf 	bl	8008e40 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	4a31      	ldr	r2, [pc, #196]	@ (8008f4c <HAL_TIM_PWM_Start+0xec>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d048      	beq.n	8008f1c <HAL_TIM_PWM_Start+0xbc>
 8008e8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d044      	beq.n	8008f1c <HAL_TIM_PWM_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e96:	d049      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008e98:	4a2d      	ldr	r2, [pc, #180]	@ (8008f50 <HAL_TIM_PWM_Start+0xf0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d046      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008e9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d042      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008ea6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d03e      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008eae:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d03a      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008eb6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d036      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
 8008ebe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d032      	beq.n	8008f2c <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	f042 0201 	orr.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e036      	b.n	8008f40 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ed2:	2904      	cmp	r1, #4
 8008ed4:	d00c      	beq.n	8008ef0 <HAL_TIM_PWM_Start+0x90>
 8008ed6:	2908      	cmp	r1, #8
 8008ed8:	bf0c      	ite	eq
 8008eda:	f894 3040 	ldrbeq.w	r3, [r4, #64]	@ 0x40
 8008ede:	f894 3041 	ldrbne.w	r3, [r4, #65]	@ 0x41
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	bf18      	it	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	b143      	cbz	r3, 8008efe <HAL_TIM_PWM_Start+0x9e>
    return HAL_ERROR;
 8008eec:	2001      	movs	r0, #1
 8008eee:	e027      	b.n	8008f40 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ef0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	bf18      	it	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	e7f5      	b.n	8008eea <HAL_TIM_PWM_Start+0x8a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efe:	2804      	cmp	r0, #4
 8008f00:	d008      	beq.n	8008f14 <HAL_TIM_PWM_Start+0xb4>
 8008f02:	2808      	cmp	r0, #8
 8008f04:	f04f 0302 	mov.w	r3, #2
 8008f08:	bf0c      	ite	eq
 8008f0a:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8008f0e:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8008f12:	e7b1      	b.n	8008e78 <HAL_TIM_PWM_Start+0x18>
 8008f14:	2302      	movs	r3, #2
 8008f16:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008f1a:	e7ad      	b.n	8008e78 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8008f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f22:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	4a09      	ldr	r2, [pc, #36]	@ (8008f4c <HAL_TIM_PWM_Start+0xec>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d1b2      	bne.n	8008e92 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f32:	2a06      	cmp	r2, #6
 8008f34:	d007      	beq.n	8008f46 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008f3e:	2000      	movs	r0, #0
}
 8008f40:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008f42:	2001      	movs	r0, #1
 8008f44:	e7fc      	b.n	8008f40 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8008f46:	2000      	movs	r0, #0
 8008f48:	e7fa      	b.n	8008f40 <HAL_TIM_PWM_Start+0xe0>
 8008f4a:	bf00      	nop
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	40000400 	.word	0x40000400

08008f54 <HAL_TIM_PWM_Stop>:
{
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6800      	ldr	r0, [r0, #0]
 8008f5e:	f7ff ff6f 	bl	8008e40 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd8 <HAL_TIM_PWM_Stop+0x84>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d018      	beq.n	8008f9c <HAL_TIM_PWM_Stop+0x48>
 8008f6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d014      	beq.n	8008f9c <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	6a19      	ldr	r1, [r3, #32]
 8008f76:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008f7a:	4211      	tst	r1, r2
 8008f7c:	d108      	bne.n	8008f90 <HAL_TIM_PWM_Stop+0x3c>
 8008f7e:	6a19      	ldr	r1, [r3, #32]
 8008f80:	f240 4244 	movw	r2, #1092	@ 0x444
 8008f84:	4211      	tst	r1, r2
 8008f86:	d103      	bne.n	8008f90 <HAL_TIM_PWM_Stop+0x3c>
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f90:	b99d      	cbnz	r5, 8008fba <HAL_TIM_PWM_Stop+0x66>
 8008f92:	2301      	movs	r3, #1
 8008f94:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8008f98:	2000      	movs	r0, #0
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8008f9c:	6a19      	ldr	r1, [r3, #32]
 8008f9e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008fa2:	4211      	tst	r1, r2
 8008fa4:	d1e5      	bne.n	8008f72 <HAL_TIM_PWM_Stop+0x1e>
 8008fa6:	6a19      	ldr	r1, [r3, #32]
 8008fa8:	f240 4244 	movw	r2, #1092	@ 0x444
 8008fac:	4211      	tst	r1, r2
 8008fae:	d1e0      	bne.n	8008f72 <HAL_TIM_PWM_Stop+0x1e>
 8008fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8008fb8:	e7db      	b.n	8008f72 <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fba:	2d04      	cmp	r5, #4
 8008fbc:	d008      	beq.n	8008fd0 <HAL_TIM_PWM_Stop+0x7c>
 8008fbe:	2d08      	cmp	r5, #8
 8008fc0:	f04f 0301 	mov.w	r3, #1
 8008fc4:	bf0c      	ite	eq
 8008fc6:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8008fca:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 8008fce:	e7e3      	b.n	8008f98 <HAL_TIM_PWM_Stop+0x44>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008fd6:	e7df      	b.n	8008f98 <HAL_TIM_PWM_Stop+0x44>
 8008fd8:	40010000 	.word	0x40010000

08008fdc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fdc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008fe0:	2a01      	cmp	r2, #1
 8008fe2:	d03b      	beq.n	800905c <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8008fe4:	b430      	push	{r4, r5}
 8008fe6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ff4:	6804      	ldr	r4, [r0, #0]
 8008ff6:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ff8:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ffa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ffe:	680d      	ldr	r5, [r1, #0]
 8009000:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009002:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4c16      	ldr	r4, [pc, #88]	@ (8009060 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8009008:	42a2      	cmp	r2, r4
 800900a:	d01a      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800900c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8009010:	d017      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8009012:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8009016:	42a2      	cmp	r2, r4
 8009018:	d013      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800901a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800901e:	42a2      	cmp	r2, r4
 8009020:	d00f      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8009022:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009026:	42a2      	cmp	r2, r4
 8009028:	d00b      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800902a:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 800902e:	42a2      	cmp	r2, r4
 8009030:	d007      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8009032:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8009036:	42a2      	cmp	r2, r4
 8009038:	d003      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800903a:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 800903e:	42a2      	cmp	r2, r4
 8009040:	d104      	bne.n	800904c <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009042:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009046:	6849      	ldr	r1, [r1, #4]
 8009048:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800904a:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800904c:	2201      	movs	r2, #1
 800904e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009052:	2000      	movs	r0, #0
 8009054:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8009058:	bc30      	pop	{r4, r5}
 800905a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800905c:	2002      	movs	r0, #2
}
 800905e:	4770      	bx	lr
 8009060:	40010000 	.word	0x40010000

08009064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009064:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009066:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d021      	beq.n	80090b2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800906e:	2301      	movs	r3, #1
 8009070:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009074:	68cb      	ldr	r3, [r1, #12]
 8009076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800907a:	6888      	ldr	r0, [r1, #8]
 800907c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800907e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009082:	6848      	ldr	r0, [r1, #4]
 8009084:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800908a:	6808      	ldr	r0, [r1, #0]
 800908c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800908e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009092:	6908      	ldr	r0, [r1, #16]
 8009094:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009096:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800909a:	6948      	ldr	r0, [r1, #20]
 800909c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800909e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090a2:	69c9      	ldr	r1, [r1, #28]
 80090a4:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090a6:	6811      	ldr	r1, [r2, #0]
 80090a8:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80090aa:	2000      	movs	r0, #0
 80090ac:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80090b0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80090b2:	2002      	movs	r0, #2
}
 80090b4:	4770      	bx	lr

080090b6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090b6:	4770      	bx	lr

080090b8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b8:	4770      	bx	lr

080090ba <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	f102 030c 	add.w	r3, r2, #12
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	320c      	adds	r2, #12
 80090ca:	e842 3100 	strex	r1, r3, [r2]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d1f3      	bne.n	80090ba <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	f102 0314 	add.w	r3, r2, #20
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	3214      	adds	r2, #20
 80090e2:	e842 3100 	strex	r1, r3, [r2]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d1f3      	bne.n	80090d2 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d005      	beq.n	80090fc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090f0:	2320      	movs	r3, #32
 80090f2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f6:	2300      	movs	r3, #0
 80090f8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80090fa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	f102 030c 	add.w	r3, r2, #12
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	320c      	adds	r2, #12
 800910c:	e842 3100 	strex	r1, r3, [r2]
 8009110:	2900      	cmp	r1, #0
 8009112:	d1f3      	bne.n	80090fc <UART_EndRxTransfer+0x42>
 8009114:	e7ec      	b.n	80090f0 <UART_EndRxTransfer+0x36>
	...

08009118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009118:	b510      	push	{r4, lr}
 800911a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800911c:	6802      	ldr	r2, [r0, #0]
 800911e:	6913      	ldr	r3, [r2, #16]
 8009120:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009124:	68c1      	ldr	r1, [r0, #12]
 8009126:	430b      	orrs	r3, r1
 8009128:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800912a:	6801      	ldr	r1, [r0, #0]
 800912c:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800912e:	6883      	ldr	r3, [r0, #8]
 8009130:	6900      	ldr	r0, [r0, #16]
 8009132:	4303      	orrs	r3, r0
 8009134:	6960      	ldr	r0, [r4, #20]
 8009136:	4303      	orrs	r3, r0
 8009138:	69e0      	ldr	r0, [r4, #28]
 800913a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800913c:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8009140:	f022 020c 	bic.w	r2, r2, #12
 8009144:	4313      	orrs	r3, r2
 8009146:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009148:	6822      	ldr	r2, [r4, #0]
 800914a:	6953      	ldr	r3, [r2, #20]
 800914c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009150:	69a1      	ldr	r1, [r4, #24]
 8009152:	430b      	orrs	r3, r1
 8009154:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	4a2e      	ldr	r2, [pc, #184]	@ (8009214 <UART_SetConfig+0xfc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d006      	beq.n	800916c <UART_SetConfig+0x54>
 800915e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009162:	4293      	cmp	r3, r2
 8009164:	d002      	beq.n	800916c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009166:	f7fe f93f 	bl	80073e8 <HAL_RCC_GetPCLK1Freq>
 800916a:	e001      	b.n	8009170 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800916c:	f7fe f94c 	bl	8007408 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009170:	69e3      	ldr	r3, [r4, #28]
 8009172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009176:	d024      	beq.n	80091c2 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009178:	2100      	movs	r1, #0
 800917a:	1803      	adds	r3, r0, r0
 800917c:	4149      	adcs	r1, r1
 800917e:	181b      	adds	r3, r3, r0
 8009180:	f141 0100 	adc.w	r1, r1, #0
 8009184:	00c9      	lsls	r1, r1, #3
 8009186:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	1818      	adds	r0, r3, r0
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009194:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8009198:	f141 0100 	adc.w	r1, r1, #0
 800919c:	f7f7 fd2c 	bl	8000bf8 <__aeabi_uldivmod>
 80091a0:	6821      	ldr	r1, [r4, #0]
 80091a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009218 <UART_SetConfig+0x100>)
 80091a4:	fba2 4300 	umull	r4, r3, r2, r0
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	2464      	movs	r4, #100	@ 0x64
 80091ac:	fb04 0013 	mls	r0, r4, r3, r0
 80091b0:	0100      	lsls	r0, r0, #4
 80091b2:	3032      	adds	r0, #50	@ 0x32
 80091b4:	fba2 2000 	umull	r2, r0, r2, r0
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80091be:	608b      	str	r3, [r1, #8]
  }
}
 80091c0:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c2:	2300      	movs	r3, #0
 80091c4:	1802      	adds	r2, r0, r0
 80091c6:	eb43 0103 	adc.w	r1, r3, r3
 80091ca:	1812      	adds	r2, r2, r0
 80091cc:	f141 0100 	adc.w	r1, r1, #0
 80091d0:	00c9      	lsls	r1, r1, #3
 80091d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091d6:	00d2      	lsls	r2, r2, #3
 80091d8:	1810      	adds	r0, r2, r0
 80091da:	f141 0100 	adc.w	r1, r1, #0
 80091de:	6862      	ldr	r2, [r4, #4]
 80091e0:	1892      	adds	r2, r2, r2
 80091e2:	415b      	adcs	r3, r3
 80091e4:	f7f7 fd08 	bl	8000bf8 <__aeabi_uldivmod>
 80091e8:	4a0b      	ldr	r2, [pc, #44]	@ (8009218 <UART_SetConfig+0x100>)
 80091ea:	fba2 3100 	umull	r3, r1, r2, r0
 80091ee:	0949      	lsrs	r1, r1, #5
 80091f0:	2364      	movs	r3, #100	@ 0x64
 80091f2:	fb03 0311 	mls	r3, r3, r1, r0
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	3332      	adds	r3, #50	@ 0x32
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8009204:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009208:	091b      	lsrs	r3, r3, #4
 800920a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800920e:	4413      	add	r3, r2
 8009210:	6083      	str	r3, [r0, #8]
 8009212:	e7d5      	b.n	80091c0 <UART_SetConfig+0xa8>
 8009214:	40011000 	.word	0x40011000
 8009218:	51eb851f 	.word	0x51eb851f

0800921c <UART_WaitOnFlagUntilTimeout>:
{
 800921c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009220:	b083      	sub	sp, #12
 8009222:	4680      	mov	r8, r0
 8009224:	460d      	mov	r5, r1
 8009226:	4616      	mov	r6, r2
 8009228:	4699      	mov	r9, r3
 800922a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922c:	f8d8 3000 	ldr.w	r3, [r8]
 8009230:	681c      	ldr	r4, [r3, #0]
 8009232:	ea35 0404 	bics.w	r4, r5, r4
 8009236:	bf0c      	ite	eq
 8009238:	2401      	moveq	r4, #1
 800923a:	2400      	movne	r4, #0
 800923c:	42b4      	cmp	r4, r6
 800923e:	d128      	bne.n	8009292 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8009240:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009244:	d0f4      	beq.n	8009230 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009246:	f7fc fb1b 	bl	8005880 <HAL_GetTick>
 800924a:	eba0 0009 	sub.w	r0, r0, r9
 800924e:	42b8      	cmp	r0, r7
 8009250:	d823      	bhi.n	800929a <UART_WaitOnFlagUntilTimeout+0x7e>
 8009252:	b327      	cbz	r7, 800929e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009254:	f8d8 3000 	ldr.w	r3, [r8]
 8009258:	68da      	ldr	r2, [r3, #12]
 800925a:	f012 0f04 	tst.w	r2, #4
 800925e:	d0e5      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0x10>
 8009260:	2d80      	cmp	r5, #128	@ 0x80
 8009262:	d0e3      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0x10>
 8009264:	2d40      	cmp	r5, #64	@ 0x40
 8009266:	d0e1      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	f012 0f08 	tst.w	r2, #8
 800926e:	d0dd      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009270:	2400      	movs	r4, #0
 8009272:	9401      	str	r4, [sp, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	9201      	str	r2, [sp, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800927e:	4640      	mov	r0, r8
 8009280:	f7ff ff1b 	bl	80090ba <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009284:	2308      	movs	r3, #8
 8009286:	f8c8 3044 	str.w	r3, [r8, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800928a:	f888 4040 	strb.w	r4, [r8, #64]	@ 0x40
          return HAL_ERROR;
 800928e:	2001      	movs	r0, #1
 8009290:	e000      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8009292:	2000      	movs	r0, #0
}
 8009294:	b003      	add	sp, #12
 8009296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800929a:	2003      	movs	r0, #3
 800929c:	e7fa      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0x78>
 800929e:	2003      	movs	r0, #3
 80092a0:	e7f8      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0x78>

080092a2 <HAL_UART_Init>:
  if (huart == NULL)
 80092a2:	b360      	cbz	r0, 80092fe <HAL_UART_Init+0x5c>
{
 80092a4:	b510      	push	{r4, lr}
 80092a6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80092a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80092ac:	b313      	cbz	r3, 80092f4 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80092ae:	2324      	movs	r3, #36	@ 0x24
 80092b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	68d3      	ldr	r3, [r2, #12]
 80092b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092bc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff ff2a 	bl	8009118 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	6913      	ldr	r3, [r2, #16]
 80092c8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80092cc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	6953      	ldr	r3, [r2, #20]
 80092d2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80092d6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80092d8:	6822      	ldr	r2, [r4, #0]
 80092da:	68d3      	ldr	r3, [r2, #12]
 80092dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80092e0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	2000      	movs	r0, #0
 80092e4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092e6:	2320      	movs	r3, #32
 80092e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f0:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80092f2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80092f4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80092f8:	f7fc f95a 	bl	80055b0 <HAL_UART_MspInit>
 80092fc:	e7d7      	b.n	80092ae <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80092fe:	2001      	movs	r0, #1
}
 8009300:	4770      	bx	lr

08009302 <HAL_UART_Transmit>:
{
 8009302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800930a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b20      	cmp	r3, #32
 8009312:	d15c      	bne.n	80093ce <HAL_UART_Transmit+0xcc>
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800931a:	2900      	cmp	r1, #0
 800931c:	d05b      	beq.n	80093d6 <HAL_UART_Transmit+0xd4>
 800931e:	b90a      	cbnz	r2, 8009324 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8009320:	2001      	movs	r0, #1
 8009322:	e055      	b.n	80093d0 <HAL_UART_Transmit+0xce>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009324:	2300      	movs	r3, #0
 8009326:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009328:	2321      	movs	r3, #33	@ 0x21
 800932a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800932e:	f7fc faa7 	bl	8005880 <HAL_GetTick>
 8009332:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009334:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009338:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009342:	d009      	beq.n	8009358 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8009344:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8009348:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800934a:	b29b      	uxth	r3, r3
 800934c:	b373      	cbz	r3, 80093ac <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800934e:	f04f 0900 	mov.w	r9, #0
 8009352:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8009356:	e019      	b.n	800938c <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	b113      	cbz	r3, 8009362 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 800935c:	f04f 0a00 	mov.w	sl, #0
 8009360:	e7f2      	b.n	8009348 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8009362:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8009364:	2500      	movs	r5, #0
 8009366:	e7ef      	b.n	8009348 <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8009368:	2320      	movs	r3, #32
 800936a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800936e:	2003      	movs	r0, #3
 8009370:	e02e      	b.n	80093d0 <HAL_UART_Transmit+0xce>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8009378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800937e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8009380:	3a01      	subs	r2, #1
 8009382:	b292      	uxth	r2, r2
 8009384:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009386:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009388:	b29b      	uxth	r3, r3
 800938a:	b17b      	cbz	r3, 80093ac <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800938c:	9600      	str	r6, [sp, #0]
 800938e:	463b      	mov	r3, r7
 8009390:	464a      	mov	r2, r9
 8009392:	4641      	mov	r1, r8
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff ff41 	bl	800921c <UART_WaitOnFlagUntilTimeout>
 800939a:	2800      	cmp	r0, #0
 800939c:	d1e4      	bne.n	8009368 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 800939e:	2d00      	cmp	r5, #0
 80093a0:	d0e7      	beq.n	8009372 <HAL_UART_Transmit+0x70>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80093a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093aa:	e7e8      	b.n	800937e <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093ac:	9600      	str	r6, [sp, #0]
 80093ae:	463b      	mov	r3, r7
 80093b0:	2200      	movs	r2, #0
 80093b2:	2140      	movs	r1, #64	@ 0x40
 80093b4:	4620      	mov	r0, r4
 80093b6:	f7ff ff31 	bl	800921c <UART_WaitOnFlagUntilTimeout>
 80093ba:	b918      	cbnz	r0, 80093c4 <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 80093bc:	2320      	movs	r3, #32
 80093be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80093c2:	e005      	b.n	80093d0 <HAL_UART_Transmit+0xce>
      huart->gState = HAL_UART_STATE_READY;
 80093c4:	2320      	movs	r3, #32
 80093c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80093ca:	2003      	movs	r0, #3
 80093cc:	e000      	b.n	80093d0 <HAL_UART_Transmit+0xce>
    return HAL_BUSY;
 80093ce:	2002      	movs	r0, #2
}
 80093d0:	b002      	add	sp, #8
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7fa      	b.n	80093d0 <HAL_UART_Transmit+0xce>

080093da <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80093da:	b084      	sub	sp, #16
 80093dc:	f10d 0c04 	add.w	ip, sp, #4
 80093e0:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80093e4:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80093e6:	460b      	mov	r3, r1
 80093e8:	9902      	ldr	r1, [sp, #8]
 80093ea:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80093ec:	9903      	ldr	r1, [sp, #12]
 80093ee:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80093f0:	9904      	ldr	r1, [sp, #16]
 80093f2:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80093f4:	9905      	ldr	r1, [sp, #20]
 80093f6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80093f8:	9906      	ldr	r1, [sp, #24]
 80093fa:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80093fc:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8009400:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8009404:	4313      	orrs	r3, r2
 8009406:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8009408:	2000      	movs	r0, #0
 800940a:	b004      	add	sp, #16
 800940c:	4770      	bx	lr

0800940e <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800940e:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8009412:	4770      	bx	lr

08009414 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009414:	680b      	ldr	r3, [r1, #0]
 8009416:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800941a:	2000      	movs	r0, #0
 800941c:	4770      	bx	lr

0800941e <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800941e:	2303      	movs	r3, #3
 8009420:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8009422:	2000      	movs	r0, #0
 8009424:	4770      	bx	lr

08009426 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009426:	6800      	ldr	r0, [r0, #0]
}
 8009428:	f000 0003 	and.w	r0, r0, #3
 800942c:	4770      	bx	lr

0800942e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800942e:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009430:	680b      	ldr	r3, [r1, #0]
 8009432:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009434:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009436:	684b      	ldr	r3, [r1, #4]
 8009438:	688c      	ldr	r4, [r1, #8]
 800943a:	4323      	orrs	r3, r4
                       Command->Response         |\
 800943c:	68cc      	ldr	r4, [r1, #12]
 800943e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8009440:	6909      	ldr	r1, [r1, #16]
 8009442:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009444:	f36f 020b 	bfc	r2, #0, #12
 8009448:	4313      	orrs	r3, r2
 800944a:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 800944c:	2000      	movs	r0, #0
 800944e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009452:	4770      	bx	lr

08009454 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009454:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8009456:	5840      	ldr	r0, [r0, r1]
}  
 8009458:	4770      	bx	lr

0800945a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800945a:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009460:	684b      	ldr	r3, [r1, #4]
 8009462:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009464:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009466:	688b      	ldr	r3, [r1, #8]
 8009468:	68cc      	ldr	r4, [r1, #12]
 800946a:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800946c:	690c      	ldr	r4, [r1, #16]
 800946e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8009470:	6949      	ldr	r1, [r1, #20]
 8009472:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009474:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 8009478:	4313      	orrs	r3, r2
 800947a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 800947c:	2000      	movs	r0, #0
 800947e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009482:	4770      	bx	lr

08009484 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009484:	b510      	push	{r4, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800948e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009490:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009492:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009498:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800949a:	a901      	add	r1, sp, #4
 800949c:	f7ff ffc7 	bl	800942e <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094a0:	4b0b      	ldr	r3, [pc, #44]	@ (80094d0 <SDMMC_CmdGoIdleState+0x4c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a0b      	ldr	r2, [pc, #44]	@ (80094d4 <SDMMC_CmdGoIdleState+0x50>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	0a5b      	lsrs	r3, r3, #9
 80094ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094b0:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094b4:	b143      	cbz	r3, 80094c8 <SDMMC_CmdGoIdleState+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80094b6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80094b8:	3b01      	subs	r3, #1
 80094ba:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80094be:	d0f9      	beq.n	80094b4 <SDMMC_CmdGoIdleState+0x30>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094c0:	23c5      	movs	r3, #197	@ 0xc5
 80094c2:	63a3      	str	r3, [r4, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80094c4:	2000      	movs	r0, #0
 80094c6:	e001      	b.n	80094cc <SDMMC_CmdGoIdleState+0x48>
      return SDMMC_ERROR_TIMEOUT;
 80094c8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80094cc:	b006      	add	sp, #24
 80094ce:	bd10      	pop	{r4, pc}
 80094d0:	20000038 	.word	0x20000038
 80094d4:	10624dd3 	.word	0x10624dd3

080094d8 <SDMMC_GetCmdResp1>:
{
 80094d8:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094da:	4b54      	ldr	r3, [pc, #336]	@ (800962c <SDMMC_GetCmdResp1+0x154>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4854      	ldr	r0, [pc, #336]	@ (8009630 <SDMMC_GetCmdResp1+0x158>)
 80094e0:	fba0 0303 	umull	r0, r3, r0, r3
 80094e4:	0a5b      	lsrs	r3, r3, #9
 80094e6:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80094ea:	1e53      	subs	r3, r2, #1
 80094ec:	b932      	cbnz	r2, 80094fc <SDMMC_GetCmdResp1+0x24>
      return SDMMC_ERROR_TIMEOUT;
 80094ee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80094f2:	4770      	bx	lr
    if (count-- == 0U)
 80094f4:	3b01      	subs	r3, #1
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d063      	beq.n	80095c4 <SDMMC_GetCmdResp1+0xec>
    sta_reg = SDIOx->STA;
 80094fc:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009500:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009504:	d0f6      	beq.n	80094f4 <SDMMC_GetCmdResp1+0x1c>
 8009506:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800950a:	d1f3      	bne.n	80094f4 <SDMMC_GetCmdResp1+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800950c:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009510:	f013 0f04 	tst.w	r3, #4
 8009514:	d108      	bne.n	8009528 <SDMMC_GetCmdResp1+0x50>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009516:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800951a:	f010 0001 	ands.w	r0, r0, #1
 800951e:	d007      	beq.n	8009530 <SDMMC_GetCmdResp1+0x58>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009520:	2301      	movs	r3, #1
 8009522:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009526:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009528:	2004      	movs	r0, #4
 800952a:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800952e:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009530:	23c5      	movs	r3, #197	@ 0xc5
 8009532:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8009536:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800953a:	b2db      	uxtb	r3, r3
 800953c:	4299      	cmp	r1, r3
 800953e:	d001      	beq.n	8009544 <SDMMC_GetCmdResp1+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009540:	2001      	movs	r0, #1
 8009542:	4770      	bx	lr
  return (*(__IO uint32_t *) tmp);
 8009544:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009548:	483a      	ldr	r0, [pc, #232]	@ (8009634 <SDMMC_GetCmdResp1+0x15c>)
 800954a:	4018      	ands	r0, r3
 800954c:	2800      	cmp	r0, #0
 800954e:	d06c      	beq.n	800962a <SDMMC_GetCmdResp1+0x152>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009550:	2b00      	cmp	r3, #0
 8009552:	db3a      	blt.n	80095ca <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009558:	d13a      	bne.n	80095d0 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800955a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800955e:	d139      	bne.n	80095d4 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009560:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009564:	d138      	bne.n	80095d8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009566:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800956a:	d138      	bne.n	80095de <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800956c:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8009570:	d138      	bne.n	80095e4 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009572:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8009576:	d138      	bne.n	80095ea <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009578:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800957c:	d138      	bne.n	80095f0 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800957e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009582:	d138      	bne.n	80095f6 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009584:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8009588:	d138      	bne.n	80095fc <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800958a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800958e:	d138      	bne.n	8009602 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009590:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009594:	d138      	bne.n	8009608 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009596:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800959a:	d138      	bne.n	800960e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800959c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80095a0:	d138      	bne.n	8009614 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80095a2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80095a6:	d138      	bne.n	800961a <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80095a8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80095ac:	d138      	bne.n	8009620 <SDMMC_GetCmdResp1+0x148>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80095ae:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80095b2:	d138      	bne.n	8009626 <SDMMC_GetCmdResp1+0x14e>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80095b4:	f013 0f08 	tst.w	r3, #8
 80095b8:	bf0c      	ite	eq
 80095ba:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80095be:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80095c2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80095c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80095c8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095ca:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80095ce:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095d0:	2040      	movs	r0, #64	@ 0x40
 80095d2:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095d4:	2080      	movs	r0, #128	@ 0x80
 80095d6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80095dc:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80095e2:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80095e8:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80095ee:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095f0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80095f4:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80095fa:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009600:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009602:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009606:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009608:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800960c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800960e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009612:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009614:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009618:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800961a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800961e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009620:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009624:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009626:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800962a:	4770      	bx	lr
 800962c:	20000038 	.word	0x20000038
 8009630:	10624dd3 	.word	0x10624dd3
 8009634:	fdffe008 	.word	0xfdffe008

08009638 <SDMMC_CmdBlockLength>:
{
 8009638:	b530      	push	{r4, r5, lr}
 800963a:	b087      	sub	sp, #28
 800963c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800963e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009640:	2510      	movs	r5, #16
 8009642:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009644:	2340      	movs	r3, #64	@ 0x40
 8009646:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009648:	2300      	movs	r3, #0
 800964a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800964c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009650:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009652:	a901      	add	r1, sp, #4
 8009654:	f7ff feeb 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800965c:	4629      	mov	r1, r5
 800965e:	4620      	mov	r0, r4
 8009660:	f7ff ff3a 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009664:	b007      	add	sp, #28
 8009666:	bd30      	pop	{r4, r5, pc}

08009668 <SDMMC_CmdReadSingleBlock>:
{
 8009668:	b530      	push	{r4, r5, lr}
 800966a:	b087      	sub	sp, #28
 800966c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800966e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009670:	2511      	movs	r5, #17
 8009672:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009674:	2340      	movs	r3, #64	@ 0x40
 8009676:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009678:	2300      	movs	r3, #0
 800967a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800967c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009680:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009682:	a901      	add	r1, sp, #4
 8009684:	f7ff fed3 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800968c:	4629      	mov	r1, r5
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff ff22 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009694:	b007      	add	sp, #28
 8009696:	bd30      	pop	{r4, r5, pc}

08009698 <SDMMC_CmdReadMultiBlock>:
{
 8009698:	b530      	push	{r4, r5, lr}
 800969a:	b087      	sub	sp, #28
 800969c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800969e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80096a0:	2512      	movs	r5, #18
 80096a2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096a4:	2340      	movs	r3, #64	@ 0x40
 80096a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096a8:	2300      	movs	r3, #0
 80096aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096b2:	a901      	add	r1, sp, #4
 80096b4:	f7ff febb 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80096b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096bc:	4629      	mov	r1, r5
 80096be:	4620      	mov	r0, r4
 80096c0:	f7ff ff0a 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 80096c4:	b007      	add	sp, #28
 80096c6:	bd30      	pop	{r4, r5, pc}

080096c8 <SDMMC_CmdWriteSingleBlock>:
{
 80096c8:	b530      	push	{r4, r5, lr}
 80096ca:	b087      	sub	sp, #28
 80096cc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80096ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80096d0:	2518      	movs	r5, #24
 80096d2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096d4:	2340      	movs	r3, #64	@ 0x40
 80096d6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096d8:	2300      	movs	r3, #0
 80096da:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096e0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096e2:	a901      	add	r1, sp, #4
 80096e4:	f7ff fea3 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80096e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff fef2 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 80096f4:	b007      	add	sp, #28
 80096f6:	bd30      	pop	{r4, r5, pc}

080096f8 <SDMMC_CmdWriteMultiBlock>:
{
 80096f8:	b530      	push	{r4, r5, lr}
 80096fa:	b087      	sub	sp, #28
 80096fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80096fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009700:	2519      	movs	r5, #25
 8009702:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009704:	2340      	movs	r3, #64	@ 0x40
 8009706:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009708:	2300      	movs	r3, #0
 800970a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800970c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009710:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009712:	a901      	add	r1, sp, #4
 8009714:	f7ff fe8b 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800971c:	4629      	mov	r1, r5
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff feda 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009724:	b007      	add	sp, #28
 8009726:	bd30      	pop	{r4, r5, pc}

08009728 <SDMMC_CmdStopTransfer>:
{
 8009728:	b530      	push	{r4, r5, lr}
 800972a:	b087      	sub	sp, #28
 800972c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009732:	250c      	movs	r5, #12
 8009734:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009736:	2240      	movs	r2, #64	@ 0x40
 8009738:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800973a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800973c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009740:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009742:	a901      	add	r1, sp, #4
 8009744:	f7ff fe73 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009748:	4a03      	ldr	r2, [pc, #12]	@ (8009758 <SDMMC_CmdStopTransfer+0x30>)
 800974a:	4629      	mov	r1, r5
 800974c:	4620      	mov	r0, r4
 800974e:	f7ff fec3 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009752:	b007      	add	sp, #28
 8009754:	bd30      	pop	{r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	05f5e100 	.word	0x05f5e100

0800975c <SDMMC_CmdSelDesel>:
{
 800975c:	b530      	push	{r4, r5, lr}
 800975e:	b087      	sub	sp, #28
 8009760:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009762:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009764:	2507      	movs	r5, #7
 8009766:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009768:	2340      	movs	r3, #64	@ 0x40
 800976a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800976c:	2300      	movs	r3, #0
 800976e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009774:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009776:	a901      	add	r1, sp, #4
 8009778:	f7ff fe59 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800977c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009780:	4629      	mov	r1, r5
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff fea8 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009788:	b007      	add	sp, #28
 800978a:	bd30      	pop	{r4, r5, pc}

0800978c <SDMMC_CmdAppCommand>:
{
 800978c:	b530      	push	{r4, r5, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009792:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009794:	2537      	movs	r5, #55	@ 0x37
 8009796:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800979c:	2300      	movs	r3, #0
 800979e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097a4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a6:	a901      	add	r1, sp, #4
 80097a8:	f7ff fe41 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80097ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097b0:	4629      	mov	r1, r5
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff fe90 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 80097b8:	b007      	add	sp, #28
 80097ba:	bd30      	pop	{r4, r5, pc}

080097bc <SDMMC_CmdBusWidth>:
{
 80097bc:	b530      	push	{r4, r5, lr}
 80097be:	b087      	sub	sp, #28
 80097c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80097c2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80097c4:	2506      	movs	r5, #6
 80097c6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097c8:	2340      	movs	r3, #64	@ 0x40
 80097ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097cc:	2300      	movs	r3, #0
 80097ce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097d4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097d6:	a901      	add	r1, sp, #4
 80097d8:	f7ff fe29 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80097dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097e0:	4629      	mov	r1, r5
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff fe78 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 80097e8:	b007      	add	sp, #28
 80097ea:	bd30      	pop	{r4, r5, pc}

080097ec <SDMMC_CmdSendSCR>:
{
 80097ec:	b530      	push	{r4, r5, lr}
 80097ee:	b087      	sub	sp, #28
 80097f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80097f6:	2533      	movs	r5, #51	@ 0x33
 80097f8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097fa:	2240      	movs	r2, #64	@ 0x40
 80097fc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009804:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009806:	a901      	add	r1, sp, #4
 8009808:	f7ff fe11 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800980c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009810:	4629      	mov	r1, r5
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff fe60 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009818:	b007      	add	sp, #28
 800981a:	bd30      	pop	{r4, r5, pc}

0800981c <SDMMC_CmdSendStatus>:
{
 800981c:	b530      	push	{r4, r5, lr}
 800981e:	b087      	sub	sp, #28
 8009820:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009822:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009824:	250d      	movs	r5, #13
 8009826:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009828:	2340      	movs	r3, #64	@ 0x40
 800982a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800982c:	2300      	movs	r3, #0
 800982e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009834:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009836:	a901      	add	r1, sp, #4
 8009838:	f7ff fdf9 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800983c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009840:	4629      	mov	r1, r5
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fe48 	bl	80094d8 <SDMMC_GetCmdResp1>
}
 8009848:	b007      	add	sp, #28
 800984a:	bd30      	pop	{r4, r5, pc}

0800984c <SDMMC_GetCmdResp2>:
{
 800984c:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800984e:	4b14      	ldr	r3, [pc, #80]	@ (80098a0 <SDMMC_GetCmdResp2+0x54>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a14      	ldr	r2, [pc, #80]	@ (80098a4 <SDMMC_GetCmdResp2+0x58>)
 8009854:	fba2 2303 	umull	r2, r3, r2, r3
 8009858:	0a5b      	lsrs	r3, r3, #9
 800985a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800985e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8009862:	b923      	cbnz	r3, 800986e <SDMMC_GetCmdResp2+0x22>
      return SDMMC_ERROR_TIMEOUT;
 8009864:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009868:	4770      	bx	lr
    if (count-- == 0U)
 800986a:	3b01      	subs	r3, #1
 800986c:	d015      	beq.n	800989a <SDMMC_GetCmdResp2+0x4e>
    sta_reg = SDIOx->STA;
 800986e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009870:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009874:	d0f9      	beq.n	800986a <SDMMC_GetCmdResp2+0x1e>
 8009876:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800987a:	d1f6      	bne.n	800986a <SDMMC_GetCmdResp2+0x1e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800987c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800987e:	f013 0f04 	tst.w	r3, #4
 8009882:	d107      	bne.n	8009894 <SDMMC_GetCmdResp2+0x48>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009884:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009886:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800988a:	bf14      	ite	ne
 800988c:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800988e:	23c5      	moveq	r3, #197	@ 0xc5
 8009890:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8009892:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009894:	2004      	movs	r0, #4
 8009896:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009898:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800989a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800989e:	4770      	bx	lr
 80098a0:	20000038 	.word	0x20000038
 80098a4:	10624dd3 	.word	0x10624dd3

080098a8 <SDMMC_CmdSendCID>:
{
 80098a8:	b510      	push	{r4, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80098b2:	2202      	movs	r2, #2
 80098b4:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80098b6:	22c0      	movs	r2, #192	@ 0xc0
 80098b8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098c0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098c2:	a901      	add	r1, sp, #4
 80098c4:	f7ff fdb3 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80098c8:	4620      	mov	r0, r4
 80098ca:	f7ff ffbf 	bl	800984c <SDMMC_GetCmdResp2>
}
 80098ce:	b006      	add	sp, #24
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <SDMMC_CmdSendCSD>:
{
 80098d2:	b510      	push	{r4, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80098d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80098da:	2309      	movs	r3, #9
 80098dc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80098de:	23c0      	movs	r3, #192	@ 0xc0
 80098e0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098e2:	2300      	movs	r3, #0
 80098e4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ea:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098ec:	a901      	add	r1, sp, #4
 80098ee:	f7ff fd9e 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff ffaa 	bl	800984c <SDMMC_GetCmdResp2>
}
 80098f8:	b006      	add	sp, #24
 80098fa:	bd10      	pop	{r4, pc}

080098fc <SDMMC_GetCmdResp3>:
{
 80098fc:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098fe:	4b11      	ldr	r3, [pc, #68]	@ (8009944 <SDMMC_GetCmdResp3+0x48>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a11      	ldr	r2, [pc, #68]	@ (8009948 <SDMMC_GetCmdResp3+0x4c>)
 8009904:	fba2 2303 	umull	r2, r3, r2, r3
 8009908:	0a5b      	lsrs	r3, r3, #9
 800990a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800990e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8009912:	b923      	cbnz	r3, 800991e <SDMMC_GetCmdResp3+0x22>
      return SDMMC_ERROR_TIMEOUT;
 8009914:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009918:	4770      	bx	lr
    if (count-- == 0U)
 800991a:	3b01      	subs	r3, #1
 800991c:	d00f      	beq.n	800993e <SDMMC_GetCmdResp3+0x42>
    sta_reg = SDIOx->STA;
 800991e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009920:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009924:	d0f9      	beq.n	800991a <SDMMC_GetCmdResp3+0x1e>
 8009926:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800992a:	d1f6      	bne.n	800991a <SDMMC_GetCmdResp3+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800992c:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800992e:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009932:	bf19      	ittee	ne
 8009934:	2004      	movne	r0, #4
 8009936:	6388      	strne	r0, [r1, #56]	@ 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009938:	23c5      	moveq	r3, #197	@ 0xc5
 800993a:	638b      	streq	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800993c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800993e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009942:	4770      	bx	lr
 8009944:	20000038 	.word	0x20000038
 8009948:	10624dd3 	.word	0x10624dd3

0800994c <SDMMC_CmdAppOperCommand>:
{
 800994c:	b510      	push	{r4, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009952:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8009956:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800995a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800995c:	2329      	movs	r3, #41	@ 0x29
 800995e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009960:	2340      	movs	r3, #64	@ 0x40
 8009962:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009964:	2300      	movs	r3, #0
 8009966:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800996c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800996e:	a901      	add	r1, sp, #4
 8009970:	f7ff fd5d 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff ffc1 	bl	80098fc <SDMMC_GetCmdResp3>
}
 800997a:	b006      	add	sp, #24
 800997c:	bd10      	pop	{r4, pc}
	...

08009980 <SDMMC_GetCmdResp6>:
{
 8009980:	4684      	mov	ip, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009982:	4b28      	ldr	r3, [pc, #160]	@ (8009a24 <SDMMC_GetCmdResp6+0xa4>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4828      	ldr	r0, [pc, #160]	@ (8009a28 <SDMMC_GetCmdResp6+0xa8>)
 8009988:	fba0 0303 	umull	r0, r3, r0, r3
 800998c:	0a5b      	lsrs	r3, r3, #9
 800998e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8009992:	fb00 f303 	mul.w	r3, r0, r3
    if (count-- == 0U)
 8009996:	b3d3      	cbz	r3, 8009a0e <SDMMC_GetCmdResp6+0x8e>
{
 8009998:	b410      	push	{r4}
 800999a:	e001      	b.n	80099a0 <SDMMC_GetCmdResp6+0x20>
    if (count-- == 0U)
 800999c:	3b01      	subs	r3, #1
 800999e:	d039      	beq.n	8009a14 <SDMMC_GetCmdResp6+0x94>
    sta_reg = SDIOx->STA;
 80099a0:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099a4:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80099a8:	d0f8      	beq.n	800999c <SDMMC_GetCmdResp6+0x1c>
 80099aa:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80099ae:	d1f5      	bne.n	800999c <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099b0:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80099b4:	f013 0f04 	tst.w	r3, #4
 80099b8:	d108      	bne.n	80099cc <SDMMC_GetCmdResp6+0x4c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099ba:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 80099be:	f010 0001 	ands.w	r0, r0, #1
 80099c2:	d007      	beq.n	80099d4 <SDMMC_GetCmdResp6+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099c4:	2301      	movs	r3, #1
 80099c6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099ca:	e025      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099cc:	2004      	movs	r0, #4
 80099ce:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099d2:	e021      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
  return (uint8_t)(SDIOx->RESPCMD);
 80099d4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4299      	cmp	r1, r3
 80099dc:	d001      	beq.n	80099e2 <SDMMC_GetCmdResp6+0x62>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099de:	2001      	movs	r0, #1
 80099e0:	e01a      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80099e2:	23c5      	movs	r3, #197	@ 0xc5
 80099e4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 80099e8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80099ec:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 80099f0:	d00a      	beq.n	8009a08 <SDMMC_GetCmdResp6+0x88>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80099f2:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80099f6:	d112      	bne.n	8009a1e <SDMMC_GetCmdResp6+0x9e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099f8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80099fc:	bf0c      	ite	eq
 80099fe:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009a02:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8009a06:	e007      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a08:	0c1b      	lsrs	r3, r3, #16
 8009a0a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8009a0c:	e004      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
      return SDMMC_ERROR_TIMEOUT;
 8009a0e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009a12:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009a14:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8009a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1c:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009a22:	e7f9      	b.n	8009a18 <SDMMC_GetCmdResp6+0x98>
 8009a24:	20000038 	.word	0x20000038
 8009a28:	10624dd3 	.word	0x10624dd3

08009a2c <SDMMC_CmdSetRelAdd>:
{
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a38:	2603      	movs	r6, #3
 8009a3a:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a3c:	2240      	movs	r2, #64	@ 0x40
 8009a3e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a40:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a46:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	f7ff fcf0 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a4e:	462a      	mov	r2, r5
 8009a50:	4631      	mov	r1, r6
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff ff94 	bl	8009980 <SDMMC_GetCmdResp6>
}
 8009a58:	b006      	add	sp, #24
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}

08009a5c <SDMMC_GetCmdResp7>:
{
 8009a5c:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ac0 <SDMMC_GetCmdResp7+0x64>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a18      	ldr	r2, [pc, #96]	@ (8009ac4 <SDMMC_GetCmdResp7+0x68>)
 8009a64:	fba2 2303 	umull	r2, r3, r2, r3
 8009a68:	0a5b      	lsrs	r3, r3, #9
 8009a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8009a72:	b923      	cbnz	r3, 8009a7e <SDMMC_GetCmdResp7+0x22>
      return SDMMC_ERROR_TIMEOUT;
 8009a74:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009a78:	4770      	bx	lr
    if (count-- == 0U)
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	d01b      	beq.n	8009ab6 <SDMMC_GetCmdResp7+0x5a>
    sta_reg = SDIOx->STA;
 8009a7e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a80:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8009a84:	d0f9      	beq.n	8009a7a <SDMMC_GetCmdResp7+0x1e>
 8009a86:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8009a8a:	d1f6      	bne.n	8009a7a <SDMMC_GetCmdResp7+0x1e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a8c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009a8e:	f013 0f04 	tst.w	r3, #4
 8009a92:	d10a      	bne.n	8009aaa <SDMMC_GetCmdResp7+0x4e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a94:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009a96:	f010 0001 	ands.w	r0, r0, #1
 8009a9a:	d109      	bne.n	8009ab0 <SDMMC_GetCmdResp7+0x54>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009a9c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009a9e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8009aa2:	d00b      	beq.n	8009abc <SDMMC_GetCmdResp7+0x60>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009aa4:	2340      	movs	r3, #64	@ 0x40
 8009aa6:	638b      	str	r3, [r1, #56]	@ 0x38
 8009aa8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009aaa:	2004      	movs	r0, #4
 8009aac:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aae:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ab4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8009ab6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009aba:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8009abc:	4618      	mov	r0, r3
}
 8009abe:	4770      	bx	lr
 8009ac0:	20000038 	.word	0x20000038
 8009ac4:	10624dd3 	.word	0x10624dd3

08009ac8 <SDMMC_CmdOperCond>:
{
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ace:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009ad2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ad8:	2340      	movs	r3, #64	@ 0x40
 8009ada:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009adc:	2300      	movs	r3, #0
 8009ade:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ae4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ae6:	a901      	add	r1, sp, #4
 8009ae8:	f7ff fca1 	bl	800942e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009aec:	4620      	mov	r0, r4
 8009aee:	f7ff ffb5 	bl	8009a5c <SDMMC_GetCmdResp7>
}
 8009af2:	b006      	add	sp, #24
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009af6:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	3301      	adds	r3, #1
 8009b00:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b08:	d815      	bhi.n	8009b36 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b0a:	6903      	ldr	r3, [r0, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	daf5      	bge.n	8009afc <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b14:	6903      	ldr	r3, [r0, #16]
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8009b22:	9b01      	ldr	r3, [sp, #4]
 8009b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b28:	d808      	bhi.n	8009b3c <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b2a:	6903      	ldr	r3, [r0, #16]
 8009b2c:	f013 0f01 	tst.w	r3, #1
 8009b30:	d1f4      	bne.n	8009b1c <USB_CoreReset+0x26>

  return HAL_OK;
 8009b32:	2000      	movs	r0, #0
 8009b34:	e000      	b.n	8009b38 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8009b36:	2003      	movs	r0, #3
}
 8009b38:	b002      	add	sp, #8
 8009b3a:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009b3c:	2003      	movs	r0, #3
 8009b3e:	e7fb      	b.n	8009b38 <USB_CoreReset+0x42>

08009b40 <USB_CoreInit>:
{
 8009b40:	b084      	sub	sp, #16
 8009b42:	b510      	push	{r4, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	a803      	add	r0, sp, #12
 8009b48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b4c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d121      	bne.n	8009b98 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b5a:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b5c:	68e3      	ldr	r3, [r4, #12]
 8009b5e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b66:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b68:	68e3      	ldr	r3, [r4, #12]
 8009b6a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b6e:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8009b70:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d00a      	beq.n	8009b8e <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff ffbc 	bl	8009af6 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8009b7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d01c      	beq.n	8009bc0 <USB_CoreInit+0x80>
}
 8009b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b8a:	b004      	add	sp, #16
 8009b8c:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b94:	60e3      	str	r3, [r4, #12]
 8009b96:	e7ef      	b.n	8009b78 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b98:	68e3      	ldr	r3, [r4, #12]
 8009b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b9e:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff ffa8 	bl	8009af6 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8009ba6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009baa:	b923      	cbnz	r3, 8009bb6 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bb2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009bb4:	e7e3      	b.n	8009b7e <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bb6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bbc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009bbe:	e7de      	b.n	8009b7e <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	f043 0306 	orr.w	r3, r3, #6
 8009bc6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009bc8:	68a3      	ldr	r3, [r4, #8]
 8009bca:	f043 0320 	orr.w	r3, r3, #32
 8009bce:	60a3      	str	r3, [r4, #8]
 8009bd0:	e7d9      	b.n	8009b86 <USB_CoreInit+0x46>
	...

08009bd4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009bd4:	2a02      	cmp	r2, #2
 8009bd6:	d00a      	beq.n	8009bee <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009bd8:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009bda:	68c3      	ldr	r3, [r0, #12]
 8009bdc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009be0:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009be2:	68c3      	ldr	r3, [r0, #12]
 8009be4:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009be8:	60c3      	str	r3, [r0, #12]
}
 8009bea:	2000      	movs	r0, #0
 8009bec:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009bee:	4b23      	ldr	r3, [pc, #140]	@ (8009c7c <USB_SetTurnaroundTime+0xa8>)
 8009bf0:	440b      	add	r3, r1
 8009bf2:	4a23      	ldr	r2, [pc, #140]	@ (8009c80 <USB_SetTurnaroundTime+0xac>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d930      	bls.n	8009c5a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009bf8:	4b22      	ldr	r3, [pc, #136]	@ (8009c84 <USB_SetTurnaroundTime+0xb0>)
 8009bfa:	440b      	add	r3, r1
 8009bfc:	4a22      	ldr	r2, [pc, #136]	@ (8009c88 <USB_SetTurnaroundTime+0xb4>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d92d      	bls.n	8009c5e <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c02:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8009c06:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8009c0a:	4a20      	ldr	r2, [pc, #128]	@ (8009c8c <USB_SetTurnaroundTime+0xb8>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d928      	bls.n	8009c62 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009c10:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8009c14:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8009c18:	4a1d      	ldr	r2, [pc, #116]	@ (8009c90 <USB_SetTurnaroundTime+0xbc>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d323      	bcc.n	8009c66 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <USB_SetTurnaroundTime+0xc0>)
 8009c20:	440b      	add	r3, r1
 8009c22:	4a1d      	ldr	r2, [pc, #116]	@ (8009c98 <USB_SetTurnaroundTime+0xc4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d920      	bls.n	8009c6a <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c28:	4b1c      	ldr	r3, [pc, #112]	@ (8009c9c <USB_SetTurnaroundTime+0xc8>)
 8009c2a:	440b      	add	r3, r1
 8009c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca0 <USB_SetTurnaroundTime+0xcc>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d31d      	bcc.n	8009c6e <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca4 <USB_SetTurnaroundTime+0xd0>)
 8009c34:	440b      	add	r3, r1
 8009c36:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca8 <USB_SetTurnaroundTime+0xd4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d31a      	bcc.n	8009c72 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c3c:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8009c40:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8009c44:	4a19      	ldr	r2, [pc, #100]	@ (8009cac <USB_SetTurnaroundTime+0xd8>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d315      	bcc.n	8009c76 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c4a:	4a19      	ldr	r2, [pc, #100]	@ (8009cb0 <USB_SetTurnaroundTime+0xdc>)
 8009c4c:	440a      	add	r2, r1
      UsbTrd = 0x7U;
 8009c4e:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <USB_SetTurnaroundTime+0xe0>)
 8009c50:	429a      	cmp	r2, r3
 8009c52:	bf2c      	ite	cs
 8009c54:	2206      	movcs	r2, #6
 8009c56:	2207      	movcc	r2, #7
 8009c58:	e7bf      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8009c5a:	220f      	movs	r2, #15
 8009c5c:	e7bd      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8009c5e:	220e      	movs	r2, #14
 8009c60:	e7bb      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8009c62:	220d      	movs	r2, #13
 8009c64:	e7b9      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8009c66:	220c      	movs	r2, #12
 8009c68:	e7b7      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8009c6a:	220b      	movs	r2, #11
 8009c6c:	e7b5      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8009c6e:	220a      	movs	r2, #10
 8009c70:	e7b3      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8009c72:	2209      	movs	r2, #9
 8009c74:	e7b1      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8009c76:	2208      	movs	r2, #8
 8009c78:	e7af      	b.n	8009bda <USB_SetTurnaroundTime+0x6>
 8009c7a:	bf00      	nop
 8009c7c:	ff275340 	.word	0xff275340
 8009c80:	000c34ff 	.word	0x000c34ff
 8009c84:	ff1b1e40 	.word	0xff1b1e40
 8009c88:	000f423f 	.word	0x000f423f
 8009c8c:	00124f7f 	.word	0x00124f7f
 8009c90:	0013d620 	.word	0x0013d620
 8009c94:	fee5b660 	.word	0xfee5b660
 8009c98:	0016e35f 	.word	0x0016e35f
 8009c9c:	feced300 	.word	0xfeced300
 8009ca0:	001b7740 	.word	0x001b7740
 8009ca4:	feb35bc0 	.word	0xfeb35bc0
 8009ca8:	002191c0 	.word	0x002191c0
 8009cac:	00387520 	.word	0x00387520
 8009cb0:	fe5954e0 	.word	0xfe5954e0
 8009cb4:	00419ce0 	.word	0x00419ce0

08009cb8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cb8:	6883      	ldr	r3, [r0, #8]
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	6083      	str	r3, [r0, #8]
}
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	4770      	bx	lr

08009cc4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cc4:	6883      	ldr	r3, [r0, #8]
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	6083      	str	r3, [r0, #8]
}
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4770      	bx	lr

08009cd0 <USB_SetCurrentMode>:
{
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009cd4:	68c3      	ldr	r3, [r0, #12]
 8009cd6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009cda:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009cdc:	2901      	cmp	r1, #1
 8009cde:	d015      	beq.n	8009d0c <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8009ce0:	bb29      	cbnz	r1, 8009d2e <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ce2:	68c3      	ldr	r3, [r0, #12]
 8009ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ce8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8009cea:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8009cec:	260a      	movs	r6, #10
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7fb fdcc 	bl	800588c <HAL_Delay>
      ms += 10U;
 8009cf4:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 8009cf6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009cf8:	f013 0f01 	tst.w	r3, #1
 8009cfc:	d001      	beq.n	8009d02 <USB_SetCurrentMode+0x32>
 8009cfe:	2cc8      	cmp	r4, #200	@ 0xc8
 8009d00:	d1f5      	bne.n	8009cee <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009d02:	2cc8      	cmp	r4, #200	@ 0xc8
 8009d04:	bf14      	ite	ne
 8009d06:	2000      	movne	r0, #0
 8009d08:	2001      	moveq	r0, #1
}
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d0c:	68c3      	ldr	r3, [r0, #12]
 8009d0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d12:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8009d14:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8009d16:	260a      	movs	r6, #10
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7fb fdb7 	bl	800588c <HAL_Delay>
      ms += 10U;
 8009d1e:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 8009d20:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d22:	f013 0f01 	tst.w	r3, #1
 8009d26:	d1ec      	bne.n	8009d02 <USB_SetCurrentMode+0x32>
 8009d28:	2cc8      	cmp	r4, #200	@ 0xc8
 8009d2a:	d1f5      	bne.n	8009d18 <USB_SetCurrentMode+0x48>
 8009d2c:	e7e9      	b.n	8009d02 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8009d2e:	2001      	movs	r0, #1
 8009d30:	e7eb      	b.n	8009d0a <USB_SetCurrentMode+0x3a>

08009d32 <USB_FlushTxFifo>:
{
 8009d32:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	9301      	str	r3, [sp, #4]
    count++;
 8009d38:	9b01      	ldr	r3, [sp, #4]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009d3e:	9b01      	ldr	r3, [sp, #4]
 8009d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d44:	d815      	bhi.n	8009d72 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d46:	6903      	ldr	r3, [r0, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	daf5      	bge.n	8009d38 <USB_FlushTxFifo+0x6>
  count = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d50:	0189      	lsls	r1, r1, #6
 8009d52:	f041 0120 	orr.w	r1, r1, #32
 8009d56:	6101      	str	r1, [r0, #16]
    count++;
 8009d58:	9b01      	ldr	r3, [sp, #4]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d64:	d808      	bhi.n	8009d78 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d66:	6903      	ldr	r3, [r0, #16]
 8009d68:	f013 0f20 	tst.w	r3, #32
 8009d6c:	d1f4      	bne.n	8009d58 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e000      	b.n	8009d74 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8009d72:	2003      	movs	r0, #3
}
 8009d74:	b002      	add	sp, #8
 8009d76:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009d78:	2003      	movs	r0, #3
 8009d7a:	e7fb      	b.n	8009d74 <USB_FlushTxFifo+0x42>

08009d7c <USB_FlushRxFifo>:
{
 8009d7c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9301      	str	r3, [sp, #4]
    count++;
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	3301      	adds	r3, #1
 8009d86:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d8e:	d813      	bhi.n	8009db8 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d90:	6903      	ldr	r3, [r0, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	daf5      	bge.n	8009d82 <USB_FlushRxFifo+0x6>
  count = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d9a:	2310      	movs	r3, #16
 8009d9c:	6103      	str	r3, [r0, #16]
    count++;
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	3301      	adds	r3, #1
 8009da2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009daa:	d808      	bhi.n	8009dbe <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dac:	6903      	ldr	r3, [r0, #16]
 8009dae:	f013 0f10 	tst.w	r3, #16
 8009db2:	d1f4      	bne.n	8009d9e <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8009db4:	2000      	movs	r0, #0
 8009db6:	e000      	b.n	8009dba <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8009db8:	2003      	movs	r0, #3
}
 8009dba:	b002      	add	sp, #8
 8009dbc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009dbe:	2003      	movs	r0, #3
 8009dc0:	e7fb      	b.n	8009dba <USB_FlushRxFifo+0x3e>

08009dc2 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009dc2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8009dc6:	4319      	orrs	r1, r3
 8009dc8:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8009dcc:	2000      	movs	r0, #0
 8009dce:	4770      	bx	lr

08009dd0 <USB_DevInit>:
{
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	a809      	add	r0, sp, #36	@ 0x24
 8009dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8009dde:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 8009de2:	f89d 602e 	ldrb.w	r6, [sp, #46]	@ 0x2e
  for (i = 0U; i < 15U; i++)
 8009de6:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8009de8:	4619      	mov	r1, r3
 8009dea:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8009dee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009df2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8009df4:	3301      	adds	r3, #1
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d1f7      	bne.n	8009dea <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 8009dfa:	bb06      	cbnz	r6, 8009e3e <USB_DevInit+0x6e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dfc:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8009e00:	f043 0302 	orr.w	r3, r3, #2
 8009e04:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009e08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e0e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009e10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e12:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009e16:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009e18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e1e:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e26:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d115      	bne.n	8009e5a <USB_DevInit+0x8a>
    if (cfg.speed == USBD_HS_SPEED)
 8009e2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009e32:	b96b      	cbnz	r3, 8009e50 <USB_DevInit+0x80>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e34:	2100      	movs	r1, #0
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff ffc3 	bl	8009dc2 <USB_SetDevSpeed>
 8009e3c:	e011      	b.n	8009e62 <USB_DevInit+0x92>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009e3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e44:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009e46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009e48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009e4e:	e7e7      	b.n	8009e20 <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e50:	2101      	movs	r1, #1
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff ffb5 	bl	8009dc2 <USB_SetDevSpeed>
 8009e58:	e003      	b.n	8009e62 <USB_DevInit+0x92>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e5a:	2103      	movs	r1, #3
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff ffb0 	bl	8009dc2 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e62:	2110      	movs	r1, #16
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7ff ff64 	bl	8009d32 <USB_FlushTxFifo>
 8009e6a:	4607      	mov	r7, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7ff ff85 	bl	8009d7c <USB_FlushRxFifo>
 8009e72:	4307      	orrs	r7, r0
 8009e74:	f017 0fff 	tst.w	r7, #255	@ 0xff
 8009e78:	bf14      	ite	ne
 8009e7a:	f04f 0e01 	movne.w	lr, #1
 8009e7e:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8009e82:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e8c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e90:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e94:	2d00      	cmp	r5, #0
 8009e96:	d03b      	beq.n	8009f10 <USB_DevInit+0x140>
 8009e98:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 8009e9c:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e9e:	4610      	mov	r0, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ea0:	f04f 4a90 	mov.w	sl, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ea4:	f04f 6900 	mov.w	r9, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ea8:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8009eac:	e009      	b.n	8009ec2 <USB_DevInit+0xf2>
      if (i == 0U)
 8009eae:	b972      	cbnz	r2, 8009ece <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009eb0:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009eb4:	6108      	str	r0, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009eb6:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eba:	3201      	adds	r2, #1
 8009ebc:	3320      	adds	r3, #32
 8009ebe:	42aa      	cmp	r2, r5
 8009ec0:	d008      	beq.n	8009ed4 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	681f      	ldr	r7, [r3, #0]
 8009ec6:	2f00      	cmp	r7, #0
 8009ec8:	dbf1      	blt.n	8009eae <USB_DevInit+0xde>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009eca:	6018      	str	r0, [r3, #0]
 8009ecc:	e7f2      	b.n	8009eb4 <USB_DevInit+0xe4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ece:	f8c3 a000 	str.w	sl, [r3]
 8009ed2:	e7ef      	b.n	8009eb4 <USB_DevInit+0xe4>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ed4:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 8009ed8:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009eda:	4610      	mov	r0, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009edc:	f04f 4990 	mov.w	r9, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ee0:	f04f 6a00 	mov.w	sl, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ee4:	f64f 387f 	movw	r8, #64383	@ 0xfb7f
 8009ee8:	e009      	b.n	8009efe <USB_DevInit+0x12e>
      if (i == 0U)
 8009eea:	b172      	cbz	r2, 8009f0a <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eec:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ef0:	6108      	str	r0, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ef2:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ef6:	3201      	adds	r2, #1
 8009ef8:	3320      	adds	r3, #32
 8009efa:	42aa      	cmp	r2, r5
 8009efc:	d008      	beq.n	8009f10 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009efe:	4619      	mov	r1, r3
 8009f00:	681f      	ldr	r7, [r3, #0]
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	dbf1      	blt.n	8009eea <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f06:	6018      	str	r0, [r3, #0]
 8009f08:	e7f2      	b.n	8009ef0 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f0a:	f8c3 a000 	str.w	sl, [r3]
 8009f0e:	e7ef      	b.n	8009ef0 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f10:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8009f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f18:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f20:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8009f24:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8009f26:	f89d 3026 	ldrb.w	r3, [sp, #38]	@ 0x26
 8009f2a:	b91b      	cbnz	r3, 8009f34 <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f2c:	69a3      	ldr	r3, [r4, #24]
 8009f2e:	f043 0310 	orr.w	r3, r3, #16
 8009f32:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f34:	69a2      	ldr	r2, [r4, #24]
 8009f36:	4b0c      	ldr	r3, [pc, #48]	@ (8009f68 <USB_DevInit+0x198>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8009f3c:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8009f40:	b11b      	cbz	r3, 8009f4a <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f42:	69a3      	ldr	r3, [r4, #24]
 8009f44:	f043 0308 	orr.w	r3, r3, #8
 8009f48:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8009f4a:	2e01      	cmp	r6, #1
 8009f4c:	d004      	beq.n	8009f58 <USB_DevInit+0x188>
}
 8009f4e:	4670      	mov	r0, lr
 8009f50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f54:	b004      	add	sp, #16
 8009f56:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f58:	69a3      	ldr	r3, [r4, #24]
 8009f5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f5e:	f043 0304 	orr.w	r3, r3, #4
 8009f62:	61a3      	str	r3, [r4, #24]
 8009f64:	e7f3      	b.n	8009f4e <USB_DevInit+0x17e>
 8009f66:	bf00      	nop
 8009f68:	803c3800 	.word	0x803c3800

08009f6c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f6c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8009f70:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f74:	f013 0f02 	tst.w	r3, #2
 8009f78:	d105      	bne.n	8009f86 <USB_GetDevSpeed+0x1a>
    speed = 0xFU;
 8009f7a:	f013 0f06 	tst.w	r3, #6
 8009f7e:	bf0c      	ite	eq
 8009f80:	2000      	moveq	r0, #0
 8009f82:	200f      	movne	r0, #15
 8009f84:	4770      	bx	lr
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f86:	2002      	movs	r0, #2
}
 8009f88:	4770      	bx	lr

08009f8a <USB_ActivateEndpoint>:
{
 8009f8a:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8009f8c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8009f8e:	784b      	ldrb	r3, [r1, #1]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d022      	beq.n	8009fda <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f94:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
 8009f98:	f002 0e0f 	and.w	lr, r2, #15
 8009f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fa0:	fa03 f30e 	lsl.w	r3, r3, lr
 8009fa4:	4323      	orrs	r3, r4
 8009fa6:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009faa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009fae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8009fb2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009fb6:	d10e      	bne.n	8009fd6 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fb8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8009fbc:	688b      	ldr	r3, [r1, #8]
 8009fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fc2:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8009fc4:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fc6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fd2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009fda:	f8d0 581c 	ldr.w	r5, [r0, #2076]	@ 0x81c
 8009fde:	f002 0c0f 	and.w	ip, r2, #15
 8009fe2:	fa03 f30c 	lsl.w	r3, r3, ip
 8009fe6:	432b      	orrs	r3, r5
 8009fe8:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009fec:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009ff0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8009ff4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8009ff8:	d1ed      	bne.n	8009fd6 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ffa:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
 8009ffe:	688b      	ldr	r3, [r1, #8]
 800a000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a004:	4323      	orrs	r3, r4
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a006:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a008:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a00c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800a010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a018:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800a01c:	e7db      	b.n	8009fd6 <USB_ActivateEndpoint+0x4c>
	...

0800a020 <USB_DeactivateEndpoint>:
{
 800a020:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a022:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a024:	784a      	ldrb	r2, [r1, #1]
 800a026:	2a01      	cmp	r2, #1
 800a028:	d026      	beq.n	800a078 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a02a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a02e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800a032:	2a00      	cmp	r2, #0
 800a034:	db50      	blt.n	800a0d8 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a036:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800a03a:	780a      	ldrb	r2, [r1, #0]
 800a03c:	f002 020f 	and.w	r2, r2, #15
 800a040:	f04f 0c01 	mov.w	ip, #1
 800a044:	fa0c f202 	lsl.w	r2, ip, r2
 800a048:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800a04c:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a050:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800a054:	7809      	ldrb	r1, [r1, #0]
 800a056:	f001 010f 	and.w	r1, r1, #15
 800a05a:	fa0c fc01 	lsl.w	ip, ip, r1
 800a05e:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800a062:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a066:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 800a06a:	4a22      	ldr	r2, [pc, #136]	@ (800a0f4 <USB_DeactivateEndpoint+0xd4>)
 800a06c:	400a      	ands	r2, r1
 800a06e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 800a072:	2000      	movs	r0, #0
 800a074:	bc30      	pop	{r4, r5}
 800a076:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a078:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a07c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800a080:	2a00      	cmp	r2, #0
 800a082:	db1c      	blt.n	800a0be <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a084:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 800a088:	780a      	ldrb	r2, [r1, #0]
 800a08a:	f002 020f 	and.w	r2, r2, #15
 800a08e:	2401      	movs	r4, #1
 800a090:	fa04 f202 	lsl.w	r2, r4, r2
 800a094:	ea25 0202 	bic.w	r2, r5, r2
 800a098:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a09c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800a0a0:	7809      	ldrb	r1, [r1, #0]
 800a0a2:	f001 010f 	and.w	r1, r1, #15
 800a0a6:	408c      	lsls	r4, r1
 800a0a8:	ea22 0204 	bic.w	r2, r2, r4
 800a0ac:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a0b0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 800a0b4:	4a10      	ldr	r2, [pc, #64]	@ (800a0f8 <USB_DeactivateEndpoint+0xd8>)
 800a0b6:	400a      	ands	r2, r1
 800a0b8:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800a0bc:	e7d9      	b.n	800a072 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0be:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800a0c2:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800a0c6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0ca:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800a0ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a0d2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 800a0d6:	e7d5      	b.n	800a084 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0d8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800a0dc:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800a0e0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0e4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800a0e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a0ec:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800a0f0:	e7a1      	b.n	800a036 <USB_DeactivateEndpoint+0x16>
 800a0f2:	bf00      	nop
 800a0f4:	eff37800 	.word	0xeff37800
 800a0f8:	ec337800 	.word	0xec337800

0800a0fc <USB_EPStopXfer>:
{
 800a0fc:	b410      	push	{r4}
 800a0fe:	b083      	sub	sp, #12
 800a100:	4603      	mov	r3, r0
  __IO uint32_t count = 0U;
 800a102:	2200      	movs	r2, #0
 800a104:	9201      	str	r2, [sp, #4]
  if (ep->is_in == 1U)
 800a106:	7848      	ldrb	r0, [r1, #1]
 800a108:	2801      	cmp	r0, #1
 800a10a:	d00b      	beq.n	800a124 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a10c:	f503 6030 	add.w	r0, r3, #2816	@ 0xb00
 800a110:	780b      	ldrb	r3, [r1, #0]
 800a112:	015b      	lsls	r3, r3, #5
 800a114:	581a      	ldr	r2, [r3, r0]
 800a116:	2a00      	cmp	r2, #0
 800a118:	db26      	blt.n	800a168 <USB_EPStopXfer+0x6c>
  HAL_StatusTypeDef ret = HAL_OK;
 800a11a:	2000      	movs	r0, #0
}
 800a11c:	b003      	add	sp, #12
 800a11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a122:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a128:	780a      	ldrb	r2, [r1, #0]
 800a12a:	0152      	lsls	r2, r2, #5
 800a12c:	58d4      	ldr	r4, [r2, r3]
 800a12e:	2c00      	cmp	r4, #0
 800a130:	db01      	blt.n	800a136 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800a132:	2000      	movs	r0, #0
 800a134:	e7f2      	b.n	800a11c <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a136:	58d4      	ldr	r4, [r2, r3]
 800a138:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 800a13c:	50d4      	str	r4, [r2, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a13e:	780a      	ldrb	r2, [r1, #0]
 800a140:	0152      	lsls	r2, r2, #5
 800a142:	58d4      	ldr	r4, [r2, r3]
 800a144:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 800a148:	50d4      	str	r4, [r2, r3]
        if (count > 10000U)
 800a14a:	f242 7c10 	movw	ip, #10000	@ 0x2710
        count++;
 800a14e:	9a01      	ldr	r2, [sp, #4]
 800a150:	3201      	adds	r2, #1
 800a152:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 800a154:	9a01      	ldr	r2, [sp, #4]
 800a156:	4562      	cmp	r2, ip
 800a158:	d8e0      	bhi.n	800a11c <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a15a:	780a      	ldrb	r2, [r1, #0]
 800a15c:	0152      	lsls	r2, r2, #5
 800a15e:	58d2      	ldr	r2, [r2, r3]
 800a160:	2a00      	cmp	r2, #0
 800a162:	dbf4      	blt.n	800a14e <USB_EPStopXfer+0x52>
  HAL_StatusTypeDef ret = HAL_OK;
 800a164:	2000      	movs	r0, #0
 800a166:	e7d9      	b.n	800a11c <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a168:	581a      	ldr	r2, [r3, r0]
 800a16a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800a16e:	501a      	str	r2, [r3, r0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a170:	780b      	ldrb	r3, [r1, #0]
 800a172:	015b      	lsls	r3, r3, #5
 800a174:	581a      	ldr	r2, [r3, r0]
 800a176:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a17a:	501a      	str	r2, [r3, r0]
        if (count > 10000U)
 800a17c:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	3301      	adds	r3, #1
 800a184:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	4293      	cmp	r3, r2
 800a18a:	d806      	bhi.n	800a19a <USB_EPStopXfer+0x9e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a18c:	780b      	ldrb	r3, [r1, #0]
 800a18e:	015b      	lsls	r3, r3, #5
 800a190:	581b      	ldr	r3, [r3, r0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dbf4      	blt.n	800a180 <USB_EPStopXfer+0x84>
  HAL_StatusTypeDef ret = HAL_OK;
 800a196:	2000      	movs	r0, #0
 800a198:	e7c0      	b.n	800a11c <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 800a19a:	2001      	movs	r0, #1
 800a19c:	e7be      	b.n	800a11c <USB_EPStopXfer+0x20>

0800a19e <USB_WritePacket>:
{
 800a19e:	b410      	push	{r4}
 800a1a0:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800a1a4:	b974      	cbnz	r4, 800a1c4 <USB_WritePacket+0x26>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1a6:	3303      	adds	r3, #3
 800a1a8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d909      	bls.n	800a1c4 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1b0:	3201      	adds	r2, #1
 800a1b2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    for (i = 0U; i < count32b; i++)
 800a1b6:	2300      	movs	r3, #0
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1b8:	f851 2b04 	ldr.w	r2, [r1], #4
 800a1bc:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a1be:	3301      	adds	r3, #1
 800a1c0:	459c      	cmp	ip, r3
 800a1c2:	d8f9      	bhi.n	800a1b8 <USB_WritePacket+0x1a>
}
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_EPStartXfer>:
{
 800a1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ce:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800a1d0:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800a1d2:	784b      	ldrb	r3, [r1, #1]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d02d      	beq.n	800a234 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1d8:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800a1dc:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 800a1e0:	691d      	ldr	r5, [r3, #16]
 800a1e2:	f36f 0512 	bfc	r5, #0, #19
 800a1e6:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1e8:	691d      	ldr	r5, [r3, #16]
 800a1ea:	f36f 45dc 	bfc	r5, #19, #10
 800a1ee:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 800a1f0:	2c00      	cmp	r4, #0
 800a1f2:	f040 80c0 	bne.w	800a376 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len > 0U)
 800a1f6:	690c      	ldr	r4, [r1, #16]
 800a1f8:	b10c      	cbz	r4, 800a1fe <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 800a1fa:	688c      	ldr	r4, [r1, #8]
 800a1fc:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 800a1fe:	688c      	ldr	r4, [r1, #8]
 800a200:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a202:	691d      	ldr	r5, [r3, #16]
 800a204:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a208:	432c      	orrs	r4, r5
 800a20a:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a20c:	691c      	ldr	r4, [r3, #16]
 800a20e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a212:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800a214:	2a01      	cmp	r2, #1
 800a216:	f000 80d1 	beq.w	800a3bc <USB_EPStartXfer+0x1f0>
    if (ep->type == EP_TYPE_ISOC)
 800a21a:	790b      	ldrb	r3, [r1, #4]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	f000 80d3 	beq.w	800a3c8 <USB_EPStartXfer+0x1fc>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a222:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800a226:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a22a:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 800a22e:	2000      	movs	r0, #0
 800a230:	b003      	add	sp, #12
 800a232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800a234:	690b      	ldr	r3, [r1, #16]
 800a236:	bb73      	cbnz	r3, 800a296 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a238:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800a23c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800a240:	f36f 45dc 	bfc	r5, #19, #10
 800a244:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a248:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800a24c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800a250:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a254:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 800a258:	f36f 0512 	bfc	r5, #0, #19
 800a25c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 800a260:	2a01      	cmp	r2, #1
 800a262:	d052      	beq.n	800a30a <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a264:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800a268:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800a26c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a270:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a274:	790b      	ldrb	r3, [r1, #4]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d069      	beq.n	800a34e <USB_EPStartXfer+0x182>
        if (ep->xfer_len > 0U)
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0d6      	beq.n	800a22e <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a280:	f8d0 4834 	ldr.w	r4, [r0, #2100]	@ 0x834
 800a284:	780a      	ldrb	r2, [r1, #0]
 800a286:	f002 020f 	and.w	r2, r2, #15
 800a28a:	2301      	movs	r3, #1
 800a28c:	4093      	lsls	r3, r2
 800a28e:	4323      	orrs	r3, r4
 800a290:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800a294:	e7cb      	b.n	800a22e <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a296:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800a29a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29e:	691d      	ldr	r5, [r3, #16]
 800a2a0:	f36f 0512 	bfc	r5, #0, #19
 800a2a4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2a6:	691d      	ldr	r5, [r3, #16]
 800a2a8:	f36f 45dc 	bfc	r5, #19, #10
 800a2ac:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 800a2ae:	b97c      	cbnz	r4, 800a2d0 <USB_EPStartXfer+0x104>
        if (ep->xfer_len > ep->maxpacket)
 800a2b0:	688d      	ldr	r5, [r1, #8]
 800a2b2:	690e      	ldr	r6, [r1, #16]
 800a2b4:	42ae      	cmp	r6, r5
          ep->xfer_len = ep->maxpacket;
 800a2b6:	bf88      	it	hi
 800a2b8:	610d      	strhi	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2ba:	691d      	ldr	r5, [r3, #16]
 800a2bc:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 800a2c0:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2c2:	691e      	ldr	r6, [r3, #16]
 800a2c4:	690d      	ldr	r5, [r1, #16]
 800a2c6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a2ca:	4335      	orrs	r5, r6
 800a2cc:	611d      	str	r5, [r3, #16]
 800a2ce:	e7c7      	b.n	800a260 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2d0:	688e      	ldr	r6, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a2d2:	691f      	ldr	r7, [r3, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2d4:	690d      	ldr	r5, [r1, #16]
 800a2d6:	4435      	add	r5, r6
 800a2d8:	3d01      	subs	r5, #1
 800a2da:	fbb5 f5f6 	udiv	r5, r5, r6
 800a2de:	fa1f fc85 	uxth.w	ip, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a2e2:	4e40      	ldr	r6, [pc, #256]	@ (800a3e4 <USB_EPStartXfer+0x218>)
 800a2e4:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800a2e8:	433d      	orrs	r5, r7
 800a2ea:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 800a2ec:	790d      	ldrb	r5, [r1, #4]
 800a2ee:	2d01      	cmp	r5, #1
 800a2f0:	d1e7      	bne.n	800a2c2 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2f2:	691d      	ldr	r5, [r3, #16]
 800a2f4:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 800a2f8:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a2fa:	691e      	ldr	r6, [r3, #16]
 800a2fc:	ea4f 754c 	mov.w	r5, ip, lsl #29
 800a300:	f005 45c0 	and.w	r5, r5, #1610612736	@ 0x60000000
 800a304:	4335      	orrs	r5, r6
 800a306:	611d      	str	r5, [r3, #16]
 800a308:	e7db      	b.n	800a2c2 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 800a30a:	69cb      	ldr	r3, [r1, #28]
 800a30c:	b11b      	cbz	r3, 800a316 <USB_EPStartXfer+0x14a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a30e:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800a312:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 800a316:	790b      	ldrb	r3, [r1, #4]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d008      	beq.n	800a32e <USB_EPStartXfer+0x162>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a31c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800a320:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800a324:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a328:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 800a32c:	e77f      	b.n	800a22e <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a32e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800a332:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a336:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800a33a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 800a33e:	bf0c      	ite	eq
 800a340:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a344:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800a348:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 800a34c:	e7e6      	b.n	800a31c <USB_EPStartXfer+0x150>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a34e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800a352:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a356:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 800a35a:	bf0c      	ite	eq
 800a35c:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a360:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800a364:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a368:	9200      	str	r2, [sp, #0]
 800a36a:	8a0b      	ldrh	r3, [r1, #16]
 800a36c:	780a      	ldrb	r2, [r1, #0]
 800a36e:	68c9      	ldr	r1, [r1, #12]
 800a370:	f7ff ff15 	bl	800a19e <USB_WritePacket>
 800a374:	e75b      	b.n	800a22e <USB_EPStartXfer+0x62>
      if (ep->xfer_len == 0U)
 800a376:	690c      	ldr	r4, [r1, #16]
 800a378:	b954      	cbnz	r4, 800a390 <USB_EPStartXfer+0x1c4>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a37a:	691d      	ldr	r5, [r3, #16]
 800a37c:	688c      	ldr	r4, [r1, #8]
 800a37e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a382:	432c      	orrs	r4, r5
 800a384:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a386:	691c      	ldr	r4, [r3, #16]
 800a388:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a38c:	611c      	str	r4, [r3, #16]
 800a38e:	e741      	b.n	800a214 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a390:	688d      	ldr	r5, [r1, #8]
 800a392:	442c      	add	r4, r5
 800a394:	3c01      	subs	r4, #1
 800a396:	fbb4 f4f5 	udiv	r4, r4, r5
 800a39a:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a39c:	fb04 f505 	mul.w	r5, r4, r5
 800a3a0:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a3a2:	691e      	ldr	r6, [r3, #16]
 800a3a4:	4d0f      	ldr	r5, [pc, #60]	@ (800a3e4 <USB_EPStartXfer+0x218>)
 800a3a6:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
 800a3aa:	4334      	orrs	r4, r6
 800a3ac:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3ae:	691d      	ldr	r5, [r3, #16]
 800a3b0:	6a0c      	ldr	r4, [r1, #32]
 800a3b2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800a3b6:	432c      	orrs	r4, r5
 800a3b8:	611c      	str	r4, [r3, #16]
 800a3ba:	e72b      	b.n	800a214 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3bc:	68ca      	ldr	r2, [r1, #12]
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	f43f af2b 	beq.w	800a21a <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3c4:	615a      	str	r2, [r3, #20]
 800a3c6:	e728      	b.n	800a21a <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3c8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 800a3cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3d0:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800a3d4:	bf0c      	ite	eq
 800a3d6:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3da:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 800a3de:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 800a3e2:	e71e      	b.n	800a222 <USB_EPStartXfer+0x56>
 800a3e4:	1ff80000 	.word	0x1ff80000

0800a3e8 <USB_ReadPacket>:
{
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4606      	mov	r6, r0
  uint16_t remaining_bytes = len % 4U;
 800a3ec:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800a3f0:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800a3f4:	d01a      	beq.n	800a42c <USB_ReadPacket+0x44>
  uint8_t *pDest = dest;
 800a3f6:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800a3f8:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3fa:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800a404:	3301      	adds	r3, #1
 800a406:	459e      	cmp	lr, r3
 800a408:	d1f9      	bne.n	800a3fe <USB_ReadPacket+0x16>
 800a40a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  if (remaining_bytes != 0U)
 800a40e:	b165      	cbz	r5, 800a42a <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a410:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800a414:	6834      	ldr	r4, [r6, #0]
 800a416:	1941      	adds	r1, r0, r5
 800a418:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a41a:	fa24 f203 	lsr.w	r2, r4, r3
 800a41e:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 800a422:	3308      	adds	r3, #8
 800a424:	4288      	cmp	r0, r1
 800a426:	d1f8      	bne.n	800a41a <USB_ReadPacket+0x32>
      pDest++;
 800a428:	4608      	mov	r0, r1
}
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800a42c:	4608      	mov	r0, r1
 800a42e:	e7ee      	b.n	800a40e <USB_ReadPacket+0x26>

0800a430 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a430:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a432:	784a      	ldrb	r2, [r1, #1]
 800a434:	2a01      	cmp	r2, #1
 800a436:	d014      	beq.n	800a462 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a438:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a43c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800a440:	2a00      	cmp	r2, #0
 800a442:	db06      	blt.n	800a452 <USB_EPSetStall+0x22>
 800a444:	b12b      	cbz	r3, 800a452 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a446:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a44a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a44e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a452:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a45a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800a45e:	2000      	movs	r0, #0
 800a460:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a462:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a466:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	db06      	blt.n	800a47c <USB_EPSetStall+0x4c>
 800a46e:	b12b      	cbz	r3, 800a47c <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a470:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a474:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a478:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a47c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a484:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800a488:	e7e9      	b.n	800a45e <USB_EPSetStall+0x2e>

0800a48a <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a48a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a48c:	784a      	ldrb	r2, [r1, #1]
 800a48e:	2a01      	cmp	r2, #1
 800a490:	d00e      	beq.n	800a4b0 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a492:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a496:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a49a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a49e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4a2:	790b      	ldrb	r3, [r1, #4]
 800a4a4:	3b02      	subs	r3, #2
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d915      	bls.n	800a4d8 <USB_EPClearStall+0x4e>
}
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a4b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a4b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a4b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a4c0:	790b      	ldrb	r3, [r1, #4]
 800a4c2:	3b02      	subs	r3, #2
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d8f0      	bhi.n	800a4ac <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4ca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a4ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4d2:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 800a4d6:	e7e9      	b.n	800a4ac <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a4d8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a4dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800a4e4:	e7e2      	b.n	800a4ac <USB_EPClearStall+0x22>

0800a4e6 <USB_StopDevice>:
{
 800a4e6:	b510      	push	{r4, lr}
 800a4e8:	4604      	mov	r4, r0
  for (i = 0U; i < 15U; i++)
 800a4ea:	f500 6310 	add.w	r3, r0, #2304	@ 0x900
 800a4ee:	f500 6c2e 	add.w	ip, r0, #2784	@ 0xae0
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a4f2:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800a4f6:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a4f8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  for (i = 0U; i < 15U; i++)
 800a4fc:	3320      	adds	r3, #32
 800a4fe:	4563      	cmp	r3, ip
 800a500:	d1f9      	bne.n	800a4f6 <USB_StopDevice+0x10>
  USBx_DEVICE->DIEPMSK  = 0U;
 800a502:	2200      	movs	r2, #0
 800a504:	f8c4 2810 	str.w	r2, [r4, #2064]	@ 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 800a508:	f8c4 2814 	str.w	r2, [r4, #2068]	@ 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 800a50c:	f8c4 281c 	str.w	r2, [r4, #2076]	@ 0x81c
  ret = USB_FlushRxFifo(USBx);
 800a510:	4620      	mov	r0, r4
 800a512:	f7ff fc33 	bl	8009d7c <USB_FlushRxFifo>
  if (ret != HAL_OK)
 800a516:	b100      	cbz	r0, 800a51a <USB_StopDevice+0x34>
}
 800a518:	bd10      	pop	{r4, pc}
  ret = USB_FlushTxFifo(USBx,  0x10U);
 800a51a:	2110      	movs	r1, #16
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7ff fc08 	bl	8009d32 <USB_FlushTxFifo>
    return ret;
 800a522:	e7f9      	b.n	800a518 <USB_StopDevice+0x32>

0800a524 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a524:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a528:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a52c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a530:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800a534:	0109      	lsls	r1, r1, #4
 800a536:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 800a53a:	4319      	orrs	r1, r3
 800a53c:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800a540:	2000      	movs	r0, #0
 800a542:	4770      	bx	lr

0800a544 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a544:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800a548:	f023 0303 	bic.w	r3, r3, #3
 800a54c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a550:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a554:	f023 0302 	bic.w	r3, r3, #2
 800a558:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a55c:	2000      	movs	r0, #0
 800a55e:	4770      	bx	lr

0800a560 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a560:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 800a564:	f023 0303 	bic.w	r3, r3, #3
 800a568:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a56c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a570:	f043 0302 	orr.w	r3, r3, #2
 800a574:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a578:	2000      	movs	r0, #0
 800a57a:	4770      	bx	lr

0800a57c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a57c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a57e:	6980      	ldr	r0, [r0, #24]
}
 800a580:	4010      	ands	r0, r2
 800a582:	4770      	bx	lr

0800a584 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a584:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a588:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a58c:	69c0      	ldr	r0, [r0, #28]
 800a58e:	4018      	ands	r0, r3
}
 800a590:	0c00      	lsrs	r0, r0, #16
 800a592:	4770      	bx	lr

0800a594 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a594:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 800a598:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a59c:	69c0      	ldr	r0, [r0, #28]
 800a59e:	4018      	ands	r0, r3
}
 800a5a0:	b280      	uxth	r0, r0
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a5a8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5ac:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800a5b0:	6940      	ldr	r0, [r0, #20]
}
 800a5b2:	4010      	ands	r0, r2
 800a5b4:	4770      	bx	lr

0800a5b6 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a5b6:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5ba:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a5be:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a5c2:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800a5c6:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a5c8:	f001 010f 	and.w	r1, r1, #15
 800a5cc:	40cb      	lsrs	r3, r1
 800a5ce:	01db      	lsls	r3, r3, #7
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4313      	orrs	r3, r2
}
 800a5d4:	4018      	ands	r0, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a5d8:	6940      	ldr	r0, [r0, #20]
}
 800a5da:	f000 0001 	and.w	r0, r0, #1
 800a5de:	4770      	bx	lr

0800a5e0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5e0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800a5e4:	f36f 030a 	bfc	r3, #0, #11
 800a5e8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a5ec:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 800a5f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	4770      	bx	lr

0800a5fc <USB_EP0_OutStart>:
{
 800a5fc:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a5fe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a600:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <USB_EP0_OutStart+0x5c>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d903      	bls.n	800a60e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a606:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db16      	blt.n	800a63c <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a60e:	2400      	movs	r4, #0
 800a610:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a614:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a618:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800a61c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a620:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a624:	f044 0418 	orr.w	r4, r4, #24
 800a628:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a62c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800a630:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 800a634:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800a638:	2901      	cmp	r1, #1
 800a63a:	d003      	beq.n	800a644 <USB_EP0_OutStart+0x48>
}
 800a63c:	2000      	movs	r0, #0
 800a63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a642:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a644:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a648:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800a64c:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a650:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 800a654:	e7f2      	b.n	800a63c <USB_EP0_OutStart+0x40>
 800a656:	bf00      	nop
 800a658:	4f54300a 	.word	0x4f54300a

0800a65c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a65c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a65e:	490c      	ldr	r1, [pc, #48]	@ (800a690 <MX_FATFS_Init+0x34>)
 800a660:	480c      	ldr	r0, [pc, #48]	@ (800a694 <MX_FATFS_Init+0x38>)
 800a662:	f003 fdad 	bl	800e1c0 <FATFS_LinkDriver>
 800a666:	4b0c      	ldr	r3, [pc, #48]	@ (800a698 <MX_FATFS_Init+0x3c>)
 800a668:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  if(retSD != FR_OK)
 800a66a:	b940      	cbnz	r0, 800a67e <MX_FATFS_Init+0x22>
  {
  	printf("FATFS_LinkDriver() failed.\n");
  	Error_Handler();
  }

  retSD = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800a66c:	2200      	movs	r2, #0
 800a66e:	4908      	ldr	r1, [pc, #32]	@ (800a690 <MX_FATFS_Init+0x34>)
 800a670:	480a      	ldr	r0, [pc, #40]	@ (800a69c <MX_FATFS_Init+0x40>)
 800a672:	f003 fab9 	bl	800dbe8 <f_mount>
 800a676:	4b08      	ldr	r3, [pc, #32]	@ (800a698 <MX_FATFS_Init+0x3c>)
 800a678:	7018      	strb	r0, [r3, #0]
  if(retSD != FR_OK)
 800a67a:	b930      	cbnz	r0, 800a68a <MX_FATFS_Init+0x2e>
  {
  	Error_Handler();
  }
  /* USER CODE END Init */
}
 800a67c:	bd08      	pop	{r3, pc}
  	printf("FATFS_LinkDriver() failed.\n");
 800a67e:	4808      	ldr	r0, [pc, #32]	@ (800a6a0 <MX_FATFS_Init+0x44>)
 800a680:	f004 fe36 	bl	800f2f0 <puts>
  	Error_Handler();
 800a684:	f7fa fba0 	bl	8004dc8 <Error_Handler>
 800a688:	e7f0      	b.n	800a66c <MX_FATFS_Init+0x10>
  	Error_Handler();
 800a68a:	f7fa fb9d 	bl	8004dc8 <Error_Handler>
}
 800a68e:	e7f5      	b.n	800a67c <MX_FATFS_Init+0x20>
 800a690:	2000c7c4 	.word	0x2000c7c4
 800a694:	080127ec 	.word	0x080127ec
 800a698:	2000c7c8 	.word	0x2000c7c8
 800a69c:	2000c590 	.word	0x2000c590
 800a6a0:	08012720 	.word	0x08012720

0800a6a4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	4770      	bx	lr

0800a6a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a6a8:	b508      	push	{r3, lr}
 800a6aa:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a6ac:	460a      	mov	r2, r1
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4803      	ldr	r0, [pc, #12]	@ (800a6c0 <BSP_SD_ReadBlocks_DMA+0x18>)
 800a6b2:	f7fd f979 	bl	80079a8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a6b6:	3800      	subs	r0, #0
 800a6b8:	bf18      	it	ne
 800a6ba:	2001      	movne	r0, #1
 800a6bc:	bd08      	pop	{r3, pc}
 800a6be:	bf00      	nop
 800a6c0:	2000c4e4 	.word	0x2000c4e4

0800a6c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a6c4:	b508      	push	{r3, lr}
 800a6c6:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a6c8:	460a      	mov	r2, r1
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4803      	ldr	r0, [pc, #12]	@ (800a6dc <BSP_SD_WriteBlocks_DMA+0x18>)
 800a6ce:	f7fd fa07 	bl	8007ae0 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a6d2:	3800      	subs	r0, #0
 800a6d4:	bf18      	it	ne
 800a6d6:	2001      	movne	r0, #1
 800a6d8:	bd08      	pop	{r3, pc}
 800a6da:	bf00      	nop
 800a6dc:	2000c4e4 	.word	0x2000c4e4

0800a6e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a6e0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a6e2:	4803      	ldr	r0, [pc, #12]	@ (800a6f0 <BSP_SD_GetCardState+0x10>)
 800a6e4:	f7fd fd92 	bl	800820c <HAL_SD_GetCardState>
}
 800a6e8:	3804      	subs	r0, #4
 800a6ea:	bf18      	it	ne
 800a6ec:	2001      	movne	r0, #1
 800a6ee:	bd08      	pop	{r3, pc}
 800a6f0:	2000c4e4 	.word	0x2000c4e4

0800a6f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a6f4:	b508      	push	{r3, lr}
 800a6f6:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a6f8:	4801      	ldr	r0, [pc, #4]	@ (800a700 <BSP_SD_GetCardInfo+0xc>)
 800a6fa:	f7fd fcd0 	bl	800809e <HAL_SD_GetCardInfo>
}
 800a6fe:	bd08      	pop	{r3, pc}
 800a700:	2000c4e4 	.word	0x2000c4e4

0800a704 <BSP_SD_AbortCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 800a704:	4770      	bx	lr

0800a706 <HAL_SD_AbortCallback>:
{
 800a706:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800a708:	f7ff fffc 	bl	800a704 <BSP_SD_AbortCallback>
}
 800a70c:	bd08      	pop	{r3, pc}

0800a70e <HAL_SD_TxCpltCallback>:
{
 800a70e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800a710:	f000 f912 	bl	800a938 <BSP_SD_WriteCpltCallback>
}
 800a714:	bd08      	pop	{r3, pc}

0800a716 <HAL_SD_RxCpltCallback>:
{
 800a716:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800a718:	f000 f918 	bl	800a94c <BSP_SD_ReadCpltCallback>
}
 800a71c:	bd08      	pop	{r3, pc}

0800a71e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a71e:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800a720:	2301      	movs	r3, #1
 800a722:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a726:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a72a:	b002      	add	sp, #8
 800a72c:	4770      	bx	lr
	...

0800a730 <BSP_SD_Init>:
{
 800a730:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a732:	f7ff fff4 	bl	800a71e <BSP_SD_IsDetected>
 800a736:	2801      	cmp	r0, #1
 800a738:	d001      	beq.n	800a73e <BSP_SD_Init+0xe>
    return MSD_ERROR;
 800a73a:	2001      	movs	r0, #1
}
 800a73c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800a73e:	4807      	ldr	r0, [pc, #28]	@ (800a75c <BSP_SD_Init+0x2c>)
 800a740:	f7fd fc92 	bl	8008068 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a744:	2800      	cmp	r0, #0
 800a746:	d1f9      	bne.n	800a73c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a748:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a74c:	4803      	ldr	r0, [pc, #12]	@ (800a75c <BSP_SD_Init+0x2c>)
 800a74e:	f7fd fcb9 	bl	80080c4 <HAL_SD_ConfigWideBusOperation>
 800a752:	3800      	subs	r0, #0
 800a754:	bf18      	it	ne
 800a756:	2001      	movne	r0, #1
 800a758:	e7f0      	b.n	800a73c <BSP_SD_Init+0xc>
 800a75a:	bf00      	nop
 800a75c:	2000c4e4 	.word	0x2000c4e4

0800a760 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a760:	b508      	push	{r3, lr}

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a762:	f7ff ffe5 	bl	800a730 <BSP_SD_Init>
 800a766:	b110      	cbz	r0, 800a76e <SD_initialize+0xe>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a768:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <SD_initialize+0x30>)
 800a76a:	7818      	ldrb	r0, [r3, #0]
}
 800a76c:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 800a76e:	4b08      	ldr	r3, [pc, #32]	@ (800a790 <SD_initialize+0x30>)
 800a770:	2201      	movs	r2, #1
 800a772:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a774:	f7ff ffb4 	bl	800a6e0 <BSP_SD_GetCardState>
 800a778:	b920      	cbnz	r0, 800a784 <SD_initialize+0x24>
    Stat &= ~STA_NOINIT;
 800a77a:	4a05      	ldr	r2, [pc, #20]	@ (800a790 <SD_initialize+0x30>)
 800a77c:	7813      	ldrb	r3, [r2, #0]
 800a77e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a782:	7013      	strb	r3, [r2, #0]
  return Stat;
 800a784:	4a02      	ldr	r2, [pc, #8]	@ (800a790 <SD_initialize+0x30>)
 800a786:	7813      	ldrb	r3, [r2, #0]
 800a788:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800a78a:	7013      	strb	r3, [r2, #0]
 800a78c:	e7ec      	b.n	800a768 <SD_initialize+0x8>
 800a78e:	bf00      	nop
 800a790:	20000044 	.word	0x20000044

0800a794 <SD_CheckStatusWithTimeout>:
{
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4605      	mov	r5, r0
  uint32_t timer = HAL_GetTick();
 800a798:	f7fb f872 	bl	8005880 <HAL_GetTick>
 800a79c:	4604      	mov	r4, r0
  while(HAL_GetTick() - timer < timeout)
 800a79e:	f7fb f86f 	bl	8005880 <HAL_GetTick>
 800a7a2:	1b00      	subs	r0, r0, r4
 800a7a4:	42a8      	cmp	r0, r5
 800a7a6:	d205      	bcs.n	800a7b4 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7a8:	f7ff ff9a 	bl	800a6e0 <BSP_SD_GetCardState>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d1f6      	bne.n	800a79e <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e001      	b.n	800a7b8 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a7bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a7c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a7c8:	f7ff ffe4 	bl	800a794 <SD_CheckStatusWithTimeout>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	db30      	blt.n	800a832 <SD_read+0x76>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff ff67 	bl	800a6a8 <BSP_SD_ReadBlocks_DMA>
 800a7da:	b108      	cbz	r0, 800a7e0 <SD_read+0x24>
  DRESULT res = RES_ERROR;
 800a7dc:	2001      	movs	r0, #1
 800a7de:	e029      	b.n	800a834 <SD_read+0x78>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a7e0:	4b15      	ldr	r3, [pc, #84]	@ (800a838 <SD_read+0x7c>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a7e6:	f7fb f84b 	bl	8005880 <HAL_GetTick>
 800a7ea:	4604      	mov	r4, r0
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a7ec:	4d12      	ldr	r5, [pc, #72]	@ (800a838 <SD_read+0x7c>)
 800a7ee:	f247 562f 	movw	r6, #29999	@ 0x752f
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b923      	cbnz	r3, 800a800 <SD_read+0x44>
 800a7f6:	f7fb f843 	bl	8005880 <HAL_GetTick>
 800a7fa:	1b00      	subs	r0, r0, r4
 800a7fc:	42b0      	cmp	r0, r6
 800a7fe:	d9f8      	bls.n	800a7f2 <SD_read+0x36>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a800:	4b0d      	ldr	r3, [pc, #52]	@ (800a838 <SD_read+0x7c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	b90b      	cbnz	r3, 800a80a <SD_read+0x4e>
      {
        res = RES_ERROR;
 800a806:	2001      	movs	r0, #1
 800a808:	e014      	b.n	800a834 <SD_read+0x78>
      }
      else
      {
        ReadStatus = 0;
 800a80a:	4b0b      	ldr	r3, [pc, #44]	@ (800a838 <SD_read+0x7c>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a810:	f7fb f836 	bl	8005880 <HAL_GetTick>
 800a814:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a816:	f247 552f 	movw	r5, #29999	@ 0x752f
 800a81a:	f7fb f831 	bl	8005880 <HAL_GetTick>
 800a81e:	1b00      	subs	r0, r0, r4
 800a820:	42a8      	cmp	r0, r5
 800a822:	d804      	bhi.n	800a82e <SD_read+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a824:	f7ff ff5c 	bl	800a6e0 <BSP_SD_GetCardState>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1f6      	bne.n	800a81a <SD_read+0x5e>
 800a82c:	e002      	b.n	800a834 <SD_read+0x78>
  DRESULT res = RES_ERROR;
 800a82e:	2001      	movs	r0, #1
 800a830:	e000      	b.n	800a834 <SD_read+0x78>
    return res;
 800a832:	2001      	movs	r0, #1
        res = RES_OK;
    }
#endif

  return res;
}
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	bf00      	nop
 800a838:	2000c7cc 	.word	0x2000c7cc

0800a83c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	460c      	mov	r4, r1
 800a840:	4615      	mov	r5, r2
 800a842:	461e      	mov	r6, r3
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <SD_write+0x7c>)
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a84a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a84e:	f7ff ffa1 	bl	800a794 <SD_CheckStatusWithTimeout>
 800a852:	2800      	cmp	r0, #0
 800a854:	db2d      	blt.n	800a8b2 <SD_write+0x76>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a856:	4632      	mov	r2, r6
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff ff32 	bl	800a6c4 <BSP_SD_WriteBlocks_DMA>
 800a860:	b108      	cbz	r0, 800a866 <SD_write+0x2a>
  DRESULT res = RES_ERROR;
 800a862:	2001      	movs	r0, #1
 800a864:	e026      	b.n	800a8b4 <SD_write+0x78>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a866:	f7fb f80b 	bl	8005880 <HAL_GetTick>
 800a86a:	4604      	mov	r4, r0
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a86c:	4d12      	ldr	r5, [pc, #72]	@ (800a8b8 <SD_write+0x7c>)
 800a86e:	f247 562f 	movw	r6, #29999	@ 0x752f
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	b923      	cbnz	r3, 800a880 <SD_write+0x44>
 800a876:	f7fb f803 	bl	8005880 <HAL_GetTick>
 800a87a:	1b00      	subs	r0, r0, r4
 800a87c:	42b0      	cmp	r0, r6
 800a87e:	d9f8      	bls.n	800a872 <SD_write+0x36>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a880:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b8 <SD_write+0x7c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	b90b      	cbnz	r3, 800a88a <SD_write+0x4e>
      {
        res = RES_ERROR;
 800a886:	2001      	movs	r0, #1
 800a888:	e014      	b.n	800a8b4 <SD_write+0x78>
      }
      else
      {
        WriteStatus = 0;
 800a88a:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b8 <SD_write+0x7c>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a890:	f7fa fff6 	bl	8005880 <HAL_GetTick>
 800a894:	4604      	mov	r4, r0

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a896:	f247 552f 	movw	r5, #29999	@ 0x752f
 800a89a:	f7fa fff1 	bl	8005880 <HAL_GetTick>
 800a89e:	1b00      	subs	r0, r0, r4
 800a8a0:	42a8      	cmp	r0, r5
 800a8a2:	d804      	bhi.n	800a8ae <SD_write+0x72>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8a4:	f7ff ff1c 	bl	800a6e0 <BSP_SD_GetCardState>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1f6      	bne.n	800a89a <SD_write+0x5e>
 800a8ac:	e002      	b.n	800a8b4 <SD_write+0x78>
  DRESULT res = RES_ERROR;
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	e000      	b.n	800a8b4 <SD_write+0x78>
    return res;
 800a8b2:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
}
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000c7d0 	.word	0x2000c7d0

0800a8bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a8bc:	b530      	push	{r4, r5, lr}
 800a8be:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8c0:	4b13      	ldr	r3, [pc, #76]	@ (800a910 <SD_ioctl+0x54>)
 800a8c2:	7818      	ldrb	r0, [r3, #0]
 800a8c4:	f010 0401 	ands.w	r4, r0, #1
 800a8c8:	d11b      	bne.n	800a902 <SD_ioctl+0x46>
 800a8ca:	4615      	mov	r5, r2

  switch (cmd)
 800a8cc:	2903      	cmp	r1, #3
 800a8ce:	d81c      	bhi.n	800a90a <SD_ioctl+0x4e>
 800a8d0:	e8df f001 	tbb	[pc, r1]
 800a8d4:	100a0402 	.word	0x100a0402
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a8d8:	460c      	mov	r4, r1
 800a8da:	e013      	b.n	800a904 <SD_ioctl+0x48>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8dc:	4668      	mov	r0, sp
 800a8de:	f7ff ff09 	bl	800a6f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a8e2:	9b06      	ldr	r3, [sp, #24]
 800a8e4:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a8e6:	e00d      	b.n	800a904 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8e8:	4668      	mov	r0, sp
 800a8ea:	f7ff ff03 	bl	800a6f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a8ee:	9b07      	ldr	r3, [sp, #28]
 800a8f0:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800a8f2:	e007      	b.n	800a904 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8f4:	4668      	mov	r0, sp
 800a8f6:	f7ff fefd 	bl	800a6f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	0a5b      	lsrs	r3, r3, #9
 800a8fe:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800a900:	e000      	b.n	800a904 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a902:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800a904:	4620      	mov	r0, r4
 800a906:	b009      	add	sp, #36	@ 0x24
 800a908:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800a90a:	2404      	movs	r4, #4
 800a90c:	e7fa      	b.n	800a904 <SD_ioctl+0x48>
 800a90e:	bf00      	nop
 800a910:	20000044 	.word	0x20000044

0800a914 <SD_status>:
{
 800a914:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800a916:	4b07      	ldr	r3, [pc, #28]	@ (800a934 <SD_status+0x20>)
 800a918:	2201      	movs	r2, #1
 800a91a:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a91c:	f7ff fee0 	bl	800a6e0 <BSP_SD_GetCardState>
 800a920:	b920      	cbnz	r0, 800a92c <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 800a922:	4a04      	ldr	r2, [pc, #16]	@ (800a934 <SD_status+0x20>)
 800a924:	7813      	ldrb	r3, [r2, #0]
 800a926:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a92a:	7013      	strb	r3, [r2, #0]
  return Stat;
 800a92c:	4b01      	ldr	r3, [pc, #4]	@ (800a934 <SD_status+0x20>)
 800a92e:	7818      	ldrb	r0, [r3, #0]
}
 800a930:	bd08      	pop	{r3, pc}
 800a932:	bf00      	nop
 800a934:	20000044 	.word	0x20000044

0800a938 <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{

  WriteStatus = 1;
 800a938:	2301      	movs	r3, #1
 800a93a:	4a02      	ldr	r2, [pc, #8]	@ (800a944 <BSP_SD_WriteCpltCallback+0xc>)
 800a93c:	6013      	str	r3, [r2, #0]
  usbd_WriteStatus = 1;
 800a93e:	4a02      	ldr	r2, [pc, #8]	@ (800a948 <BSP_SD_WriteCpltCallback+0x10>)
 800a940:	6013      	str	r3, [r2, #0]
}
 800a942:	4770      	bx	lr
 800a944:	2000c7d0 	.word	0x2000c7d0
 800a948:	2000ccf0 	.word	0x2000ccf0

0800a94c <BSP_SD_ReadCpltCallback>:
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
  ReadStatus = 1;
 800a94c:	2301      	movs	r3, #1
 800a94e:	4a02      	ldr	r2, [pc, #8]	@ (800a958 <BSP_SD_ReadCpltCallback+0xc>)
 800a950:	6013      	str	r3, [r2, #0]
  usbd_ReadStatus = 1;
 800a952:	4a02      	ldr	r2, [pc, #8]	@ (800a95c <BSP_SD_ReadCpltCallback+0x10>)
 800a954:	6013      	str	r3, [r2, #0]
}
 800a956:	4770      	bx	lr
 800a958:	2000c7cc 	.word	0x2000c7cc
 800a95c:	2000ccec 	.word	0x2000ccec

0800a960 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a960:	230a      	movs	r3, #10
 800a962:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 800a964:	4800      	ldr	r0, [pc, #0]	@ (800a968 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800a966:	4770      	bx	lr
 800a968:	20000048 	.word	0x20000048

0800a96c <USBD_MSC_Init>:
{
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a970:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800a974:	f003 fece 	bl	800e714 <USBD_static_malloc>
  if (hmsc == NULL)
 800a978:	b378      	cbz	r0, 800a9da <USBD_MSC_Init+0x6e>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800a97a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a97e:	33b0      	adds	r3, #176	@ 0xb0
 800a980:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a984:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a988:	7c23      	ldrb	r3, [r4, #16]
 800a98a:	bb73      	cbnz	r3, 800a9ea <USBD_MSC_Init+0x7e>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a98c:	4d27      	ldr	r5, [pc, #156]	@ (800aa2c <USBD_MSC_Init+0xc0>)
 800a98e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a992:	2202      	movs	r2, #2
 800a994:	7829      	ldrb	r1, [r5, #0]
 800a996:	4620      	mov	r0, r4
 800a998:	f003 fee0 	bl	800e75c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a99c:	782b      	ldrb	r3, [r5, #0]
 800a99e:	f003 030f 	and.w	r3, r3, #15
 800a9a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9aa:	2501      	movs	r5, #1
 800a9ac:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a9b0:	4e1f      	ldr	r6, [pc, #124]	@ (800aa30 <USBD_MSC_Init+0xc4>)
 800a9b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	7831      	ldrb	r1, [r6, #0]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f003 fece 	bl	800e75c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a9c0:	7833      	ldrb	r3, [r6, #0]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9ce:	849d      	strh	r5, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 f9a1 	bl	800ad18 <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 800a9d6:	2000      	movs	r0, #0
}
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9da:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800a9de:	33b0      	adds	r3, #176	@ 0xb0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9e6:	2002      	movs	r0, #2
 800a9e8:	e7f6      	b.n	800a9d8 <USBD_MSC_Init+0x6c>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a9ea:	4d10      	ldr	r5, [pc, #64]	@ (800aa2c <USBD_MSC_Init+0xc0>)
 800a9ec:	2340      	movs	r3, #64	@ 0x40
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	7829      	ldrb	r1, [r5, #0]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f003 feb2 	bl	800e75c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a9f8:	782b      	ldrb	r3, [r5, #0]
 800a9fa:	f003 030f 	and.w	r3, r3, #15
 800a9fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa06:	2501      	movs	r5, #1
 800aa08:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800aa0c:	4e08      	ldr	r6, [pc, #32]	@ (800aa30 <USBD_MSC_Init+0xc4>)
 800aa0e:	2340      	movs	r3, #64	@ 0x40
 800aa10:	2202      	movs	r2, #2
 800aa12:	7831      	ldrb	r1, [r6, #0]
 800aa14:	4620      	mov	r0, r4
 800aa16:	f003 fea1 	bl	800e75c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800aa1a:	7833      	ldrb	r3, [r6, #0]
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa28:	849d      	strh	r5, [r3, #36]	@ 0x24
 800aa2a:	e7d1      	b.n	800a9d0 <USBD_MSC_Init+0x64>
 800aa2c:	20000045 	.word	0x20000045
 800aa30:	20000046 	.word	0x20000046

0800aa34 <USBD_MSC_DeInit>:
{
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800aa38:	4d19      	ldr	r5, [pc, #100]	@ (800aaa0 <USBD_MSC_DeInit+0x6c>)
 800aa3a:	7829      	ldrb	r1, [r5, #0]
 800aa3c:	f003 fe99 	bl	800e772 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800aa40:	782b      	ldrb	r3, [r5, #0]
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa4e:	2500      	movs	r5, #0
 800aa50:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800aa54:	4e13      	ldr	r6, [pc, #76]	@ (800aaa4 <USBD_MSC_DeInit+0x70>)
 800aa56:	7831      	ldrb	r1, [r6, #0]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f003 fe8a 	bl	800e772 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800aa5e:	7833      	ldrb	r3, [r6, #0]
 800aa60:	f003 030f 	and.w	r3, r3, #15
 800aa64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa6c:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa6e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800aa72:	33b0      	adds	r3, #176	@ 0xb0
 800aa74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800aa78:	b183      	cbz	r3, 800aa9c <USBD_MSC_DeInit+0x68>
    MSC_BOT_DeInit(pdev);
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 f99e 	bl	800adbc <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa80:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800aa84:	33b0      	adds	r3, #176	@ 0xb0
 800aa86:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800aa8a:	f003 fe47 	bl	800e71c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800aa8e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800aa92:	33b0      	adds	r3, #176	@ 0xb0
 800aa94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800aa98:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	20000045 	.word	0x20000045
 800aaa4:	20000046 	.word	0x20000046

0800aaa8 <USBD_MSC_Setup>:
{
 800aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaae:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800aab2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800aab6:	f8d3 72c0 	ldr.w	r7, [r3, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hmsc == NULL)
 800aac0:	2f00      	cmp	r7, #0
 800aac2:	f000 808e 	beq.w	800abe2 <USBD_MSC_Setup+0x13a>
 800aac6:	4604      	mov	r4, r0
 800aac8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaca:	780a      	ldrb	r2, [r1, #0]
 800aacc:	f012 0660 	ands.w	r6, r2, #96	@ 0x60
 800aad0:	d036      	beq.n	800ab40 <USBD_MSC_Setup+0x98>
 800aad2:	2e20      	cmp	r6, #32
 800aad4:	d17e      	bne.n	800abd4 <USBD_MSC_Setup+0x12c>
      switch (req->bRequest)
 800aad6:	7849      	ldrb	r1, [r1, #1]
 800aad8:	29fe      	cmp	r1, #254	@ 0xfe
 800aada:	d006      	beq.n	800aaea <USBD_MSC_Setup+0x42>
 800aadc:	29ff      	cmp	r1, #255	@ 0xff
 800aade:	d01e      	beq.n	800ab1e <USBD_MSC_Setup+0x76>
          USBD_CtlError(pdev, req);
 800aae0:	4629      	mov	r1, r5
 800aae2:	f001 f9e7 	bl	800beb4 <USBD_CtlError>
          ret = USBD_FAIL;
 800aae6:	2603      	movs	r6, #3
          break;
 800aae8:	e077      	b.n	800abda <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800aaea:	8869      	ldrh	r1, [r5, #2]
 800aaec:	b911      	cbnz	r1, 800aaf4 <USBD_MSC_Setup+0x4c>
 800aaee:	88e9      	ldrh	r1, [r5, #6]
 800aaf0:	2901      	cmp	r1, #1
 800aaf2:	d005      	beq.n	800ab00 <USBD_MSC_Setup+0x58>
            USBD_CtlError(pdev, req);
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f001 f9dc 	bl	800beb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800aafc:	2603      	movs	r6, #3
 800aafe:	e06c      	b.n	800abda <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ab00:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800ab04:	d0f6      	beq.n	800aaf4 <USBD_MSC_Setup+0x4c>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800ab06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	4798      	blx	r3
 800ab0e:	6038      	str	r0, [r7, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ab10:	2201      	movs	r2, #1
 800ab12:	4639      	mov	r1, r7
 800ab14:	4620      	mov	r0, r4
 800ab16:	f001 fd1c 	bl	800c552 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab1a:	2600      	movs	r6, #0
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ab1c:	e05d      	b.n	800abda <USBD_MSC_Setup+0x132>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ab1e:	886b      	ldrh	r3, [r5, #2]
 800ab20:	b943      	cbnz	r3, 800ab34 <USBD_MSC_Setup+0x8c>
 800ab22:	88eb      	ldrh	r3, [r5, #6]
 800ab24:	b933      	cbnz	r3, 800ab34 <USBD_MSC_Setup+0x8c>
 800ab26:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800ab2a:	d103      	bne.n	800ab34 <USBD_MSC_Setup+0x8c>
            MSC_BOT_Reset(pdev);
 800ab2c:	f000 f924 	bl	800ad78 <MSC_BOT_Reset>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab30:	2600      	movs	r6, #0
            MSC_BOT_Reset(pdev);
 800ab32:	e052      	b.n	800abda <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800ab34:	4629      	mov	r1, r5
 800ab36:	4620      	mov	r0, r4
 800ab38:	f001 f9bc 	bl	800beb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab3c:	2603      	movs	r6, #3
 800ab3e:	e04c      	b.n	800abda <USBD_MSC_Setup+0x132>
      switch (req->bRequest)
 800ab40:	f891 8001 	ldrb.w	r8, [r1, #1]
 800ab44:	f1b8 0f0b 	cmp.w	r8, #11
 800ab48:	d840      	bhi.n	800abcc <USBD_MSC_Setup+0x124>
 800ab4a:	e8df f008 	tbb	[pc, r8]
 800ab4e:	3006      	.short	0x3006
 800ab50:	3f3f3f3f 	.word	0x3f3f3f3f
 800ab54:	3f3f3f3f 	.word	0x3f3f3f3f
 800ab58:	2416      	.short	0x2416
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d003      	beq.n	800ab6c <USBD_MSC_Setup+0xc4>
            USBD_CtlError(pdev, req);
 800ab64:	f001 f9a6 	bl	800beb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab68:	2603      	movs	r6, #3
 800ab6a:	e036      	b.n	800abda <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f10d 0106 	add.w	r1, sp, #6
 800ab72:	f001 fcee 	bl	800c552 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	4646      	mov	r6, r8
 800ab78:	e02f      	b.n	800abda <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d003      	beq.n	800ab8c <USBD_MSC_Setup+0xe4>
            USBD_CtlError(pdev, req);
 800ab84:	f001 f996 	bl	800beb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab88:	2603      	movs	r6, #3
 800ab8a:	e026      	b.n	800abda <USBD_MSC_Setup+0x132>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	1d39      	adds	r1, r7, #4
 800ab90:	f001 fcdf 	bl	800c552 <USBD_CtlSendData>
 800ab94:	e021      	b.n	800abda <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab96:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d102      	bne.n	800aba6 <USBD_MSC_Setup+0xfe>
            hmsc->interface = (uint8_t)(req->wValue);
 800aba0:	788b      	ldrb	r3, [r1, #2]
 800aba2:	607b      	str	r3, [r7, #4]
 800aba4:	e019      	b.n	800abda <USBD_MSC_Setup+0x132>
            USBD_CtlError(pdev, req);
 800aba6:	f001 f985 	bl	800beb4 <USBD_CtlError>
            ret = USBD_FAIL;
 800abaa:	2603      	movs	r6, #3
 800abac:	e015      	b.n	800abda <USBD_MSC_Setup+0x132>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abae:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d110      	bne.n	800abda <USBD_MSC_Setup+0x132>
            if (req->wValue == USB_FEATURE_EP_HALT)
 800abb8:	884b      	ldrh	r3, [r1, #2]
 800abba:	b973      	cbnz	r3, 800abda <USBD_MSC_Setup+0x132>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800abbc:	7909      	ldrb	r1, [r1, #4]
 800abbe:	f003 fde0 	bl	800e782 <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800abc2:	7929      	ldrb	r1, [r5, #4]
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 f9d3 	bl	800af70 <MSC_BOT_CplClrFeature>
 800abca:	e006      	b.n	800abda <USBD_MSC_Setup+0x132>
          USBD_CtlError(pdev, req);
 800abcc:	f001 f972 	bl	800beb4 <USBD_CtlError>
          ret = USBD_FAIL;
 800abd0:	2603      	movs	r6, #3
          break;
 800abd2:	e002      	b.n	800abda <USBD_MSC_Setup+0x132>
      USBD_CtlError(pdev, req);
 800abd4:	f001 f96e 	bl	800beb4 <USBD_CtlError>
      ret = USBD_FAIL;
 800abd8:	2603      	movs	r6, #3
}
 800abda:	4630      	mov	r0, r6
 800abdc:	b002      	add	sp, #8
 800abde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_FAIL;
 800abe2:	2603      	movs	r6, #3
 800abe4:	e7f9      	b.n	800abda <USBD_MSC_Setup+0x132>

0800abe6 <USBD_MSC_DataIn>:
{
 800abe6:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 800abe8:	f000 f918 	bl	800ae1c <MSC_BOT_DataIn>
}
 800abec:	2000      	movs	r0, #0
 800abee:	bd08      	pop	{r3, pc}

0800abf0 <USBD_MSC_DataOut>:
{
 800abf0:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 800abf2:	f000 f935 	bl	800ae60 <MSC_BOT_DataOut>
}
 800abf6:	2000      	movs	r0, #0
 800abf8:	bd08      	pop	{r3, pc}
	...

0800abfc <USBD_MSC_GetHSCfgDesc>:
{
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ac00:	4e0b      	ldr	r6, [pc, #44]	@ (800ac30 <USBD_MSC_GetHSCfgDesc+0x34>)
 800ac02:	2181      	movs	r1, #129	@ 0x81
 800ac04:	4630      	mov	r0, r6
 800ac06:	f001 f92b 	bl	800be60 <USBD_GetEpDesc>
 800ac0a:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f001 f926 	bl	800be60 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800ac14:	b11c      	cbz	r4, 800ac1e <USBD_MSC_GetHSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800ac16:	2200      	movs	r2, #0
 800ac18:	7122      	strb	r2, [r4, #4]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800ac1e:	b118      	cbz	r0, 800ac28 <USBD_MSC_GetHSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800ac20:	2200      	movs	r2, #0
 800ac22:	7102      	strb	r2, [r0, #4]
 800ac24:	2202      	movs	r2, #2
 800ac26:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ac28:	2320      	movs	r3, #32
 800ac2a:	802b      	strh	r3, [r5, #0]
}
 800ac2c:	4800      	ldr	r0, [pc, #0]	@ (800ac30 <USBD_MSC_GetHSCfgDesc+0x34>)
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	20000054 	.word	0x20000054

0800ac34 <USBD_MSC_GetFSCfgDesc>:
{
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ac38:	4e0b      	ldr	r6, [pc, #44]	@ (800ac68 <USBD_MSC_GetFSCfgDesc+0x34>)
 800ac3a:	2181      	movs	r1, #129	@ 0x81
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f001 f90f 	bl	800be60 <USBD_GetEpDesc>
 800ac42:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ac44:	2101      	movs	r1, #1
 800ac46:	4630      	mov	r0, r6
 800ac48:	f001 f90a 	bl	800be60 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800ac4c:	b11c      	cbz	r4, 800ac56 <USBD_MSC_GetFSCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac4e:	2240      	movs	r2, #64	@ 0x40
 800ac50:	7122      	strb	r2, [r4, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800ac56:	b118      	cbz	r0, 800ac60 <USBD_MSC_GetFSCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac58:	2240      	movs	r2, #64	@ 0x40
 800ac5a:	7102      	strb	r2, [r0, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ac60:	2320      	movs	r3, #32
 800ac62:	802b      	strh	r3, [r5, #0]
}
 800ac64:	4800      	ldr	r0, [pc, #0]	@ (800ac68 <USBD_MSC_GetFSCfgDesc+0x34>)
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	20000054 	.word	0x20000054

0800ac6c <USBD_MSC_GetOtherSpeedCfgDesc>:
{
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ac70:	4e0b      	ldr	r6, [pc, #44]	@ (800aca0 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800ac72:	2181      	movs	r1, #129	@ 0x81
 800ac74:	4630      	mov	r0, r6
 800ac76:	f001 f8f3 	bl	800be60 <USBD_GetEpDesc>
 800ac7a:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f001 f8ee 	bl	800be60 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 800ac84:	b11c      	cbz	r4, 800ac8e <USBD_MSC_GetOtherSpeedCfgDesc+0x22>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac86:	2240      	movs	r2, #64	@ 0x40
 800ac88:	7122      	strb	r2, [r4, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 800ac8e:	b118      	cbz	r0, 800ac98 <USBD_MSC_GetOtherSpeedCfgDesc+0x2c>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac90:	2240      	movs	r2, #64	@ 0x40
 800ac92:	7102      	strb	r2, [r0, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ac98:	2320      	movs	r3, #32
 800ac9a:	802b      	strh	r3, [r5, #0]
}
 800ac9c:	4800      	ldr	r0, [pc, #0]	@ (800aca0 <USBD_MSC_GetOtherSpeedCfgDesc+0x34>)
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	20000054 	.word	0x20000054

0800aca4 <USBD_MSC_RegisterStorage>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
  if (fops == NULL)
 800aca4:	b139      	cbz	r1, 800acb6 <USBD_MSC_RegisterStorage+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800aca6:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800acaa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800acae:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4

  return (uint8_t)USBD_OK;
 800acb2:	2000      	movs	r0, #0
 800acb4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800acb6:	2003      	movs	r0, #3
}
 800acb8:	4770      	bx	lr
	...

0800acbc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800acbc:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acbe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800acc2:	33b0      	adds	r3, #176	@ 0xb0
 800acc4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800acc8:	b185      	cbz	r5, 800acec <MSC_BOT_Abort+0x30>
 800acca:	4604      	mov	r4, r0
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800accc:	f895 321c 	ldrb.w	r3, [r5, #540]	@ 0x21c
 800acd0:	b923      	cbnz	r3, 800acdc <MSC_BOT_Abort+0x20>
 800acd2:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800acd6:	b10b      	cbz	r3, 800acdc <MSC_BOT_Abort+0x20>
      (hmsc->cbw.dDataLength != 0U) &&
 800acd8:	7a6b      	ldrb	r3, [r5, #9]
 800acda:	b143      	cbz	r3, 800acee <MSC_BOT_Abort+0x32>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800acdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad10 <MSC_BOT_Abort+0x54>)
 800acde:	7819      	ldrb	r1, [r3, #0]
 800ace0:	4620      	mov	r0, r4
 800ace2:	f003 fd56 	bl	800e792 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ace6:	7a6b      	ldrb	r3, [r5, #9]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d005      	beq.n	800acf8 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
}
 800acec:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800acee:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <MSC_BOT_Abort+0x58>)
 800acf0:	7819      	ldrb	r1, [r3, #0]
 800acf2:	f003 fd4e 	bl	800e792 <USBD_LL_StallEP>
 800acf6:	e7f1      	b.n	800acdc <MSC_BOT_Abort+0x20>
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800acf8:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <MSC_BOT_Abort+0x54>)
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	4620      	mov	r0, r4
 800acfe:	f003 fd48 	bl	800e792 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800ad02:	4b04      	ldr	r3, [pc, #16]	@ (800ad14 <MSC_BOT_Abort+0x58>)
 800ad04:	7819      	ldrb	r1, [r3, #0]
 800ad06:	4620      	mov	r0, r4
 800ad08:	f003 fd43 	bl	800e792 <USBD_LL_StallEP>
 800ad0c:	e7ee      	b.n	800acec <MSC_BOT_Abort+0x30>
 800ad0e:	bf00      	nop
 800ad10:	20000046 	.word	0x20000046
 800ad14:	20000045 	.word	0x20000045

0800ad18 <MSC_BOT_Init>:
{
 800ad18:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad1a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ad1e:	33b0      	adds	r3, #176	@ 0xb0
 800ad20:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800ad24:	b315      	cbz	r5, 800ad6c <MSC_BOT_Init+0x54>
 800ad26:	4604      	mov	r4, r0
  hmsc->bot_state = USBD_BOT_IDLE;
 800ad28:	2000      	movs	r0, #0
 800ad2a:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ad2c:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0U;
 800ad2e:	f885 0261 	strb.w	r0, [r5, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800ad32:	f885 0260 	strb.w	r0, [r5, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ad36:	f885 0262 	strb.w	r0, [r5, #610]	@ 0x262
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800ad3a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800ad3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800ad4a:	4e09      	ldr	r6, [pc, #36]	@ (800ad70 <MSC_BOT_Init+0x58>)
 800ad4c:	7831      	ldrb	r1, [r6, #0]
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f003 fd17 	bl	800e782 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800ad54:	4b07      	ldr	r3, [pc, #28]	@ (800ad74 <MSC_BOT_Init+0x5c>)
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f003 fd12 	bl	800e782 <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ad5e:	231f      	movs	r3, #31
 800ad60:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800ad64:	7831      	ldrb	r1, [r6, #0]
 800ad66:	4620      	mov	r0, r4
 800ad68:	f003 fd33 	bl	800e7d2 <USBD_LL_PrepareReceive>
}
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000045 	.word	0x20000045
 800ad74:	20000046 	.word	0x20000046

0800ad78 <MSC_BOT_Reset>:
{
 800ad78:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad7a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ad7e:	33b0      	adds	r3, #176	@ 0xb0
 800ad80:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800ad84:	b1a5      	cbz	r5, 800adb0 <MSC_BOT_Reset+0x38>
 800ad86:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	722b      	strb	r3, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	726b      	strb	r3, [r5, #9]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800ad90:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <MSC_BOT_Reset+0x3c>)
 800ad92:	7819      	ldrb	r1, [r3, #0]
 800ad94:	f003 fd05 	bl	800e7a2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800ad98:	4e07      	ldr	r6, [pc, #28]	@ (800adb8 <MSC_BOT_Reset+0x40>)
 800ad9a:	7831      	ldrb	r1, [r6, #0]
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f003 fd00 	bl	800e7a2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ada2:	231f      	movs	r3, #31
 800ada4:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800ada8:	7831      	ldrb	r1, [r6, #0]
 800adaa:	4620      	mov	r0, r4
 800adac:	f003 fd11 	bl	800e7d2 <USBD_LL_PrepareReceive>
}
 800adb0:	bd70      	pop	{r4, r5, r6, pc}
 800adb2:	bf00      	nop
 800adb4:	20000046 	.word	0x20000046
 800adb8:	20000045 	.word	0x20000045

0800adbc <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adbc:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800adc0:	33b0      	adds	r3, #176	@ 0xb0
 800adc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 800adc6:	b10b      	cbz	r3, 800adcc <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 800adc8:	2200      	movs	r2, #0
 800adca:	721a      	strb	r2, [r3, #8]
}
 800adcc:	4770      	bx	lr
	...

0800add0 <MSC_BOT_SendCSW>:
{
 800add0:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800add2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800add6:	33b0      	adds	r3, #176	@ 0xb0
 800add8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800addc:	b1b5      	cbz	r5, 800ae0c <MSC_BOT_SendCSW+0x3c>
 800adde:	4604      	mov	r4, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ade0:	4b0b      	ldr	r3, [pc, #44]	@ (800ae10 <MSC_BOT_SendCSW+0x40>)
 800ade2:	f8c5 3230 	str.w	r3, [r5, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ade6:	f885 123c 	strb.w	r1, [r5, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800adea:	2300      	movs	r3, #0
 800adec:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800adee:	230d      	movs	r3, #13
 800adf0:	f505 720c 	add.w	r2, r5, #560	@ 0x230
 800adf4:	4907      	ldr	r1, [pc, #28]	@ (800ae14 <MSC_BOT_SendCSW+0x44>)
 800adf6:	7809      	ldrb	r1, [r1, #0]
 800adf8:	f003 fce3 	bl	800e7c2 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800adfc:	231f      	movs	r3, #31
 800adfe:	f505 7204 	add.w	r2, r5, #528	@ 0x210
 800ae02:	4905      	ldr	r1, [pc, #20]	@ (800ae18 <MSC_BOT_SendCSW+0x48>)
 800ae04:	7809      	ldrb	r1, [r1, #0]
 800ae06:	4620      	mov	r0, r4
 800ae08:	f003 fce3 	bl	800e7d2 <USBD_LL_PrepareReceive>
}
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	bf00      	nop
 800ae10:	53425355 	.word	0x53425355
 800ae14:	20000046 	.word	0x20000046
 800ae18:	20000045 	.word	0x20000045

0800ae1c <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae1c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ae20:	33b0      	adds	r3, #176	@ 0xb0
 800ae22:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800ae26:	b1c9      	cbz	r1, 800ae5c <MSC_BOT_DataIn+0x40>
{
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 800ae2c:	7a0b      	ldrb	r3, [r1, #8]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d007      	beq.n	800ae42 <MSC_BOT_DataIn+0x26>
 800ae32:	3b03      	subs	r3, #3
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d802      	bhi.n	800ae40 <MSC_BOT_DataIn+0x24>
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	f7ff ffc8 	bl	800add0 <MSC_BOT_SendCSW>
}
 800ae40:	bd10      	pop	{r4, pc}
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ae42:	f201 221f 	addw	r2, r1, #543	@ 0x21f
 800ae46:	f891 121d 	ldrb.w	r1, [r1, #541]	@ 0x21d
 800ae4a:	f000 f9b9 	bl	800b1c0 <SCSI_ProcessCmd>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	daf6      	bge.n	800ae40 <MSC_BOT_DataIn+0x24>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ae52:	2101      	movs	r1, #1
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7ff ffbb 	bl	800add0 <MSC_BOT_SendCSW>
 800ae5a:	e7f1      	b.n	800ae40 <MSC_BOT_DataIn+0x24>
 800ae5c:	4770      	bx	lr
	...

0800ae60 <MSC_BOT_DataOut>:
{
 800ae60:	b538      	push	{r3, r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae62:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800ae66:	33b0      	adds	r3, #176	@ 0xb0
 800ae68:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (hmsc == NULL)
 800ae6c:	b125      	cbz	r5, 800ae78 <MSC_BOT_DataOut+0x18>
 800ae6e:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 800ae70:	7a2b      	ldrb	r3, [r5, #8]
 800ae72:	b113      	cbz	r3, 800ae7a <MSC_BOT_DataOut+0x1a>
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d067      	beq.n	800af48 <MSC_BOT_DataOut+0xe8>
}
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ae7a:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 800ae7e:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800ae82:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800ae86:	f8c5 3238 	str.w	r3, [r5, #568]	@ 0x238
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800ae8a:	4b36      	ldr	r3, [pc, #216]	@ (800af64 <MSC_BOT_DataOut+0x104>)
 800ae8c:	7819      	ldrb	r1, [r3, #0]
 800ae8e:	f003 fc3a 	bl	800e706 <USBD_LL_GetRxDataSize>
 800ae92:	281f      	cmp	r0, #31
 800ae94:	d104      	bne.n	800aea0 <MSC_BOT_DataOut+0x40>
 800ae96:	f8d5 2210 	ldr.w	r2, [r5, #528]	@ 0x210
 800ae9a:	4b33      	ldr	r3, [pc, #204]	@ (800af68 <MSC_BOT_DataOut+0x108>)
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d00c      	beq.n	800aeba <MSC_BOT_DataOut+0x5a>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aea0:	2320      	movs	r3, #32
 800aea2:	2205      	movs	r2, #5
 800aea4:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 f89a 	bl	800afe2 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	726b      	strb	r3, [r5, #9]
    MSC_BOT_Abort(pdev);
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff ff02 	bl	800acbc <MSC_BOT_Abort>
 800aeb8:	e7de      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800aeba:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800aebe:	2901      	cmp	r1, #1
 800aec0:	d8ee      	bhi.n	800aea0 <MSC_BOT_DataOut+0x40>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800aec2:	f895 321e 	ldrb.w	r3, [r5, #542]	@ 0x21e
 800aec6:	3b01      	subs	r3, #1
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b0f      	cmp	r3, #15
 800aecc:	d8e8      	bhi.n	800aea0 <MSC_BOT_DataOut+0x40>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aece:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 f974 	bl	800b1c0 <SCSI_ProcessCmd>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	db24      	blt.n	800af26 <MSC_BOT_DataOut+0xc6>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800aedc:	7a2b      	ldrb	r3, [r5, #8]
 800aede:	3b01      	subs	r3, #1
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d9c8      	bls.n	800ae78 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 800aee6:	68eb      	ldr	r3, [r5, #12]
 800aee8:	b34b      	cbz	r3, 800af3e <MSC_BOT_DataOut+0xde>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeea:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 800aeee:	32b0      	adds	r2, #176	@ 0xb0
 800aef0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  if (hmsc == NULL)
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	d0bf      	beq.n	800ae78 <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 800aef8:	f8d2 0218 	ldr.w	r0, [r2, #536]	@ 0x218
  hmsc->csw.dDataResidue -= len;
 800aefc:	f8d2 1238 	ldr.w	r1, [r2, #568]	@ 0x238
 800af00:	1ac9      	subs	r1, r1, r3
 800af02:	f8c2 1238 	str.w	r1, [r2, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800af06:	2100      	movs	r1, #0
 800af08:	f882 123c 	strb.w	r1, [r2, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800af0c:	2104      	movs	r1, #4
 800af0e:	7211      	strb	r1, [r2, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800af10:	4283      	cmp	r3, r0
 800af12:	bf28      	it	cs
 800af14:	4603      	movcs	r3, r0
 800af16:	f105 0210 	add.w	r2, r5, #16
 800af1a:	4914      	ldr	r1, [pc, #80]	@ (800af6c <MSC_BOT_DataOut+0x10c>)
 800af1c:	7809      	ldrb	r1, [r1, #0]
 800af1e:	4620      	mov	r0, r4
 800af20:	f003 fc4f 	bl	800e7c2 <USBD_LL_Transmit>
 800af24:	e7a8      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800af26:	7a2b      	ldrb	r3, [r5, #8]
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d003      	beq.n	800af34 <MSC_BOT_DataOut+0xd4>
        MSC_BOT_Abort(pdev);
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff fec5 	bl	800acbc <MSC_BOT_Abort>
 800af32:	e7a1      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800af34:	2101      	movs	r1, #1
 800af36:	4620      	mov	r0, r4
 800af38:	f7ff ff4a 	bl	800add0 <MSC_BOT_SendCSW>
 800af3c:	e79c      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800af3e:	2100      	movs	r1, #0
 800af40:	4620      	mov	r0, r4
 800af42:	f7ff ff45 	bl	800add0 <MSC_BOT_SendCSW>
 800af46:	e797      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800af48:	f205 221f 	addw	r2, r5, #543	@ 0x21f
 800af4c:	f895 121d 	ldrb.w	r1, [r5, #541]	@ 0x21d
 800af50:	f000 f936 	bl	800b1c0 <SCSI_ProcessCmd>
 800af54:	2800      	cmp	r0, #0
 800af56:	da8f      	bge.n	800ae78 <MSC_BOT_DataOut+0x18>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800af58:	2101      	movs	r1, #1
 800af5a:	4620      	mov	r0, r4
 800af5c:	f7ff ff38 	bl	800add0 <MSC_BOT_SendCSW>
 800af60:	e78a      	b.n	800ae78 <MSC_BOT_DataOut+0x18>
 800af62:	bf00      	nop
 800af64:	20000045 	.word	0x20000045
 800af68:	43425355 	.word	0x43425355
 800af6c:	20000046 	.word	0x20000046

0800af70 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af70:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800af74:	33b0      	adds	r3, #176	@ 0xb0
 800af76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af7a:	b1bb      	cbz	r3, 800afac <MSC_BOT_CplClrFeature+0x3c>
{
 800af7c:	b510      	push	{r4, lr}
 800af7e:	4604      	mov	r4, r0
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800af80:	7a5b      	ldrb	r3, [r3, #9]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d008      	beq.n	800af98 <MSC_BOT_CplClrFeature+0x28>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800af86:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800af8a:	d004      	beq.n	800af96 <MSC_BOT_CplClrFeature+0x26>
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d002      	beq.n	800af96 <MSC_BOT_CplClrFeature+0x26>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800af90:	2101      	movs	r1, #1
 800af92:	f7ff ff1d 	bl	800add0 <MSC_BOT_SendCSW>
  }
  else
  {
    return;
  }
}
 800af96:	bd10      	pop	{r4, pc}
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <MSC_BOT_CplClrFeature+0x40>)
 800af9a:	7819      	ldrb	r1, [r3, #0]
 800af9c:	f003 fbf9 	bl	800e792 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800afa0:	4b04      	ldr	r3, [pc, #16]	@ (800afb4 <MSC_BOT_CplClrFeature+0x44>)
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	4620      	mov	r0, r4
 800afa6:	f003 fbf4 	bl	800e792 <USBD_LL_StallEP>
 800afaa:	e7f4      	b.n	800af96 <MSC_BOT_CplClrFeature+0x26>
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20000046 	.word	0x20000046
 800afb4:	20000045 	.word	0x20000045

0800afb8 <SCSI_UpdateBotData>:
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
  uint16_t len = length;

  if (hmsc == NULL)
 800afb8:	b170      	cbz	r0, 800afd8 <SCSI_UpdateBotData+0x20>
  {
    return -1;
  }

  hmsc->bot_data_length = len;
 800afba:	60c2      	str	r2, [r0, #12]

  while (len != 0U)
 800afbc:	b17a      	cbz	r2, 800afde <SCSI_UpdateBotData+0x26>
 800afbe:	188b      	adds	r3, r1, r2
 800afc0:	3a01      	subs	r2, #1
 800afc2:	b292      	uxth	r2, r2
 800afc4:	3211      	adds	r2, #17
 800afc6:	4402      	add	r2, r0
  {
    len--;
    hmsc->bot_data[len] = pBuff[len];
 800afc8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 800afcc:	f802 0d01 	strb.w	r0, [r2, #-1]!
  while (len != 0U)
 800afd0:	428b      	cmp	r3, r1
 800afd2:	d1f9      	bne.n	800afc8 <SCSI_UpdateBotData+0x10>
  }

  return 0;
 800afd4:	2000      	movs	r0, #0
 800afd6:	4770      	bx	lr
    return -1;
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	4770      	bx	lr
  return 0;
 800afde:	2000      	movs	r0, #0
}
 800afe0:	4770      	bx	lr

0800afe2 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe2:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 800afe6:	31b0      	adds	r1, #176	@ 0xb0
 800afe8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  if (hmsc == NULL)
 800afec:	b1a0      	cbz	r0, 800b018 <SCSI_SenseCode+0x36>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800afee:	f890 1261 	ldrb.w	r1, [r0, #609]	@ 0x261
 800aff2:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 800aff6:	f88c 2240 	strb.w	r2, [ip, #576]	@ 0x240
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800affa:	f88c 3244 	strb.w	r3, [ip, #580]	@ 0x244
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	f88c 3245 	strb.w	r3, [ip, #581]	@ 0x245
  hmsc->scsi_sense_tail++;
 800b004:	3101      	adds	r1, #1
 800b006:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b008:	2904      	cmp	r1, #4
 800b00a:	d002      	beq.n	800b012 <SCSI_SenseCode+0x30>
  hmsc->scsi_sense_tail++;
 800b00c:	f880 1261 	strb.w	r1, [r0, #609]	@ 0x261
 800b010:	4770      	bx	lr
    hmsc->scsi_sense_tail = 0U;
 800b012:	2300      	movs	r3, #0
 800b014:	f880 3261 	strb.w	r3, [r0, #609]	@ 0x261
}
 800b018:	4770      	bx	lr

0800b01a <SCSI_CheckAddressRange>:
{
 800b01a:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01c:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 800b020:	f104 0cb0 	add.w	ip, r4, #176	@ 0xb0
 800b024:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
  if (hmsc == NULL)
 800b028:	b174      	cbz	r4, 800b048 <SCSI_CheckAddressRange+0x2e>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b02a:	441a      	add	r2, r3
 800b02c:	f8d4 3268 	ldr.w	r3, [r4, #616]	@ 0x268
 800b030:	429a      	cmp	r2, r3
  return 0;
 800b032:	bf98      	it	ls
 800b034:	2000      	movls	r0, #0
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b036:	d800      	bhi.n	800b03a <SCSI_CheckAddressRange+0x20>
}
 800b038:	bd10      	pop	{r4, pc}
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b03a:	2321      	movs	r3, #33	@ 0x21
 800b03c:	2205      	movs	r2, #5
 800b03e:	f7ff ffd0 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b042:	f04f 30ff 	mov.w	r0, #4294967295
 800b046:	e7f7      	b.n	800b038 <SCSI_CheckAddressRange+0x1e>
    return -1;
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e7f4      	b.n	800b038 <SCSI_CheckAddressRange+0x1e>
	...

0800b050 <SCSI_ProcessRead>:
{
 800b050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b054:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800b058:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b05c:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 800b060:	2c00      	cmp	r4, #0
 800b062:	d044      	beq.n	800b0ee <SCSI_ProcessRead+0x9e>
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b068:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b06c:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 800b070:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800b074:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b078:	bf28      	it	cs
 800b07a:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b07e:	f104 0810 	add.w	r8, r4, #16
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b082:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b086:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 800b08a:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b094:	4641      	mov	r1, r8
 800b096:	4638      	mov	r0, r7
 800b098:	47c8      	blx	r9
 800b09a:	2800      	cmp	r0, #0
 800b09c:	db1e      	blt.n	800b0dc <SCSI_ProcessRead+0x8c>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b09e:	462b      	mov	r3, r5
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	4916      	ldr	r1, [pc, #88]	@ (800b0fc <SCSI_ProcessRead+0xac>)
 800b0a4:	7809      	ldrb	r1, [r1, #0]
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f003 fb8b 	bl	800e7c2 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b0ac:	f8b4 2264 	ldrh.w	r2, [r4, #612]	@ 0x264
 800b0b0:	fbb5 f2f2 	udiv	r2, r5, r2
 800b0b4:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b0be:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 800b0c8:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 800b0cc:	1b52      	subs	r2, r2, r5
 800b0ce:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 800b0d2:	b97b      	cbnz	r3, 800b0f4 <SCSI_ProcessRead+0xa4>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	7223      	strb	r3, [r4, #8]
  return 0;
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e00c      	b.n	800b0f6 <SCSI_ProcessRead+0xa6>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b0dc:	2311      	movs	r3, #17
 800b0de:	2204      	movs	r2, #4
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff7d 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ec:	e003      	b.n	800b0f6 <SCSI_ProcessRead+0xa6>
    return -1;
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	e000      	b.n	800b0f6 <SCSI_ProcessRead+0xa6>
  return 0;
 800b0f4:	2000      	movs	r0, #0
}
 800b0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000046 	.word	0x20000046

0800b100 <SCSI_ProcessWrite>:
{
 800b100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b104:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 800b108:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b10c:	f8d2 42c0 	ldr.w	r4, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 800b110:	2c00      	cmp	r4, #0
 800b112:	d04f      	beq.n	800b1b4 <SCSI_ProcessWrite+0xb4>
 800b114:	4606      	mov	r6, r0
 800b116:	4688      	mov	r8, r1
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b118:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b11c:	f8d4 5270 	ldr.w	r5, [r4, #624]	@ 0x270
 800b120:	fb03 f505 	mul.w	r5, r3, r5
  len = MIN(len, MSC_MEDIA_PACKET);
 800b124:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b128:	bf28      	it	cs
 800b12a:	f44f 7500 	movcs.w	r5, #512	@ 0x200
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b12e:	f104 0710 	add.w	r7, r4, #16
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b132:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b136:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 800b13a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b144:	4639      	mov	r1, r7
 800b146:	4640      	mov	r0, r8
 800b148:	47c8      	blx	r9
 800b14a:	2800      	cmp	r0, #0
 800b14c:	db1a      	blt.n	800b184 <SCSI_ProcessWrite+0x84>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b14e:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b152:	fbb5 f1f3 	udiv	r1, r5, r3
 800b156:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800b15a:	440a      	add	r2, r1
 800b15c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b160:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b164:	1a52      	subs	r2, r2, r1
 800b166:	f8c4 2270 	str.w	r2, [r4, #624]	@ 0x270
  hmsc->csw.dDataResidue -= len;
 800b16a:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 800b16e:	1b49      	subs	r1, r1, r5
 800b170:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
  if (hmsc->scsi_blk_len == 0U)
 800b174:	b97a      	cbnz	r2, 800b196 <SCSI_ProcessWrite+0x96>
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b176:	2100      	movs	r1, #0
 800b178:	4630      	mov	r0, r6
 800b17a:	f7ff fe29 	bl	800add0 <MSC_BOT_SendCSW>
  return 0;
 800b17e:	2000      	movs	r0, #0
}
 800b180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b184:	2303      	movs	r3, #3
 800b186:	2204      	movs	r2, #4
 800b188:	4641      	mov	r1, r8
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff ff29 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	e7f4      	b.n	800b180 <SCSI_ProcessWrite+0x80>
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b196:	fb02 f303 	mul.w	r3, r2, r3
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b19e:	bf28      	it	cs
 800b1a0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b1a4:	463a      	mov	r2, r7
 800b1a6:	4905      	ldr	r1, [pc, #20]	@ (800b1bc <SCSI_ProcessWrite+0xbc>)
 800b1a8:	7809      	ldrb	r1, [r1, #0]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f003 fb11 	bl	800e7d2 <USBD_LL_PrepareReceive>
  return 0;
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	e7e5      	b.n	800b180 <SCSI_ProcessWrite+0x80>
    return -1;
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	e7e2      	b.n	800b180 <SCSI_ProcessWrite+0x80>
 800b1ba:	bf00      	nop
 800b1bc:	20000045 	.word	0x20000045

0800b1c0 <SCSI_ProcessCmd>:
{
 800b1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c4:	b082      	sub	sp, #8
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1c6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800b1ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b1ce:	f8d3 42c0 	ldr.w	r4, [r3, #704]	@ 0x2c0
  if (hmsc == NULL)
 800b1d2:	2c00      	cmp	r4, #0
 800b1d4:	f000 8436 	beq.w	800ba44 <SCSI_ProcessCmd+0x884>
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	4615      	mov	r5, r2
  switch (cmd[0])
 800b1de:	7812      	ldrb	r2, [r2, #0]
 800b1e0:	2a5a      	cmp	r2, #90	@ 0x5a
 800b1e2:	d85f      	bhi.n	800b2a4 <SCSI_ProcessCmd+0xe4>
 800b1e4:	2a5a      	cmp	r2, #90	@ 0x5a
 800b1e6:	f200 8422 	bhi.w	800ba2e <SCSI_ProcessCmd+0x86e>
 800b1ea:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b1ee:	00a9      	.short	0x00a9
 800b1f0:	04200420 	.word	0x04200420
 800b1f4:	042000d7 	.word	0x042000d7
 800b1f8:	04200420 	.word	0x04200420
 800b1fc:	04200420 	.word	0x04200420
 800b200:	04200420 	.word	0x04200420
 800b204:	04200420 	.word	0x04200420
 800b208:	04200420 	.word	0x04200420
 800b20c:	04200420 	.word	0x04200420
 800b210:	01120420 	.word	0x01120420
 800b214:	04200420 	.word	0x04200420
 800b218:	04200420 	.word	0x04200420
 800b21c:	04200420 	.word	0x04200420
 800b220:	01890420 	.word	0x01890420
 800b224:	04200152 	.word	0x04200152
 800b228:	017c0420 	.word	0x017c0420
 800b22c:	04200420 	.word	0x04200420
 800b230:	04200420 	.word	0x04200420
 800b234:	042001b5 	.word	0x042001b5
 800b238:	042001ed 	.word	0x042001ed
 800b23c:	02240420 	.word	0x02240420
 800b240:	02f70420 	.word	0x02f70420
 800b244:	04200420 	.word	0x04200420
 800b248:	04200420 	.word	0x04200420
 800b24c:	04200407 	.word	0x04200407
 800b250:	04200420 	.word	0x04200420
 800b254:	04200420 	.word	0x04200420
 800b258:	04200420 	.word	0x04200420
 800b25c:	04200420 	.word	0x04200420
 800b260:	04200420 	.word	0x04200420
 800b264:	04200420 	.word	0x04200420
 800b268:	04200420 	.word	0x04200420
 800b26c:	04200420 	.word	0x04200420
 800b270:	04200420 	.word	0x04200420
 800b274:	04200420 	.word	0x04200420
 800b278:	04200420 	.word	0x04200420
 800b27c:	04200420 	.word	0x04200420
 800b280:	04200420 	.word	0x04200420
 800b284:	04200420 	.word	0x04200420
 800b288:	04200420 	.word	0x04200420
 800b28c:	04200420 	.word	0x04200420
 800b290:	04200420 	.word	0x04200420
 800b294:	04200420 	.word	0x04200420
 800b298:	04200420 	.word	0x04200420
 800b29c:	04200420 	.word	0x04200420
 800b2a0:	019f0420 	.word	0x019f0420
 800b2a4:	2aa8      	cmp	r2, #168	@ 0xa8
 800b2a6:	f000 8231 	beq.w	800b70c <SCSI_ProcessCmd+0x54c>
 800b2aa:	2aaa      	cmp	r2, #170	@ 0xaa
 800b2ac:	f000 8319 	beq.w	800b8e2 <SCSI_ProcessCmd+0x722>
 800b2b0:	2a9e      	cmp	r2, #158	@ 0x9e
 800b2b2:	f040 83bc 	bne.w	800ba2e <SCSI_ProcessCmd+0x86e>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800b2c0:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f040 81aa 	bne.w	800b624 <SCSI_ProcessCmd+0x464>
 800b2d0:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	f000 81a5 	beq.w	800b624 <SCSI_ProcessCmd+0x464>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b2da:	7aab      	ldrb	r3, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 800b2dc:	7aea      	ldrb	r2, [r5, #11]
 800b2de:	0412      	lsls	r2, r2, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b2e0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[13];
 800b2e4:	7b6b      	ldrb	r3, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	7b2b      	ldrb	r3, [r5, #12]
 800b2ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b2ee:	60e2      	str	r2, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b2f0:	b13a      	cbz	r2, 800b302 <SCSI_ProcessCmd+0x142>
 800b2f2:	f104 030f 	add.w	r3, r4, #15
 800b2f6:	441a      	add	r2, r3
    hmsc->bot_data[idx] = 0U;
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d1fb      	bne.n	800b2fa <SCSI_ProcessCmd+0x13a>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b302:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 800b306:	1e53      	subs	r3, r2, #1
 800b308:	0e19      	lsrs	r1, r3, #24
 800b30a:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b30c:	0c19      	lsrs	r1, r3, #16
 800b30e:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b310:	0a1b      	lsrs	r3, r3, #8
 800b312:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b314:	3a01      	subs	r2, #1
 800b316:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b318:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b31c:	2200      	movs	r2, #0
 800b31e:	7622      	strb	r2, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b320:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b322:	0a1a      	lsrs	r2, r3, #8
 800b324:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b326:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b328:	7aaa      	ldrb	r2, [r5, #10]
                          ((uint32_t)params[11] << 16) |
 800b32a:	7aeb      	ldrb	r3, [r5, #11]
 800b32c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b32e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                          (uint32_t)params[13];
 800b332:	7b6a      	ldrb	r2, [r5, #13]
                          ((uint32_t)params[12] <<  8) |
 800b334:	4313      	orrs	r3, r2
 800b336:	7b2a      	ldrb	r2, [r5, #12]
 800b338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b33c:	60e3      	str	r3, [r4, #12]
  return 0;
 800b33e:	e0db      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength != 0U)
 800b340:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b344:	b96a      	cbnz	r2, 800b362 <SCSI_ProcessCmd+0x1a2>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b346:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b34a:	2a02      	cmp	r2, #2
 800b34c:	d012      	beq.n	800b374 <SCSI_ProcessCmd+0x1b4>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b34e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	4638      	mov	r0, r7
 800b356:	4798      	blx	r3
 800b358:	4680      	mov	r8, r0
 800b35a:	b9a0      	cbnz	r0, 800b386 <SCSI_ProcessCmd+0x1c6>
  hmsc->bot_data_length = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	60e3      	str	r3, [r4, #12]
  return 0;
 800b360:	e0ca      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b362:	2320      	movs	r3, #32
 800b364:	2205      	movs	r2, #5
 800b366:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b36a:	f7ff fe3a 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b36e:	f04f 38ff 	mov.w	r8, #4294967295
 800b372:	e0c1      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b374:	233a      	movs	r3, #58	@ 0x3a
 800b376:	4639      	mov	r1, r7
 800b378:	f7ff fe33 	bl	800afe2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b37c:	2305      	movs	r3, #5
 800b37e:	7223      	strb	r3, [r4, #8]
    return -1;
 800b380:	f04f 38ff 	mov.w	r8, #4294967295
 800b384:	e0b8      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b386:	233a      	movs	r3, #58	@ 0x3a
 800b388:	2202      	movs	r2, #2
 800b38a:	4639      	mov	r1, r7
 800b38c:	4630      	mov	r0, r6
 800b38e:	f7ff fe28 	bl	800afe2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b392:	2305      	movs	r3, #5
 800b394:	7223      	strb	r3, [r4, #8]
    return -1;
 800b396:	f04f 38ff 	mov.w	r8, #4294967295
 800b39a:	e0ad      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength == 0U)
 800b39c:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 800b3a0:	b373      	cbz	r3, 800b400 <SCSI_ProcessCmd+0x240>
 800b3a2:	f104 030f 	add.w	r3, r4, #15
 800b3a6:	f104 0121 	add.w	r1, r4, #33	@ 0x21
    hmsc->bot_data[i] = 0U;
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d1fb      	bne.n	800b3ac <SCSI_ProcessCmd+0x1ec>
  hmsc->bot_data[0] = 0x70U;
 800b3b4:	2370      	movs	r3, #112	@ 0x70
 800b3b6:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b3b8:	230c      	movs	r3, #12
 800b3ba:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b3bc:	f894 3260 	ldrb.w	r3, [r4, #608]	@ 0x260
 800b3c0:	f894 2261 	ldrb.w	r2, [r4, #609]	@ 0x261
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d011      	beq.n	800b3ec <SCSI_ProcessCmd+0x22c>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b3c8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800b3cc:	f892 1240 	ldrb.w	r1, [r2, #576]	@ 0x240
 800b3d0:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b3d2:	f892 1244 	ldrb.w	r1, [r2, #580]	@ 0x244
 800b3d6:	7721      	strb	r1, [r4, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b3d8:	f892 2245 	ldrb.w	r2, [r2, #581]	@ 0x245
 800b3dc:	7762      	strb	r2, [r4, #29]
    hmsc->scsi_sense_head++;
 800b3de:	3301      	adds	r3, #1
 800b3e0:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b3e2:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0U;
 800b3e4:	bf08      	it	eq
 800b3e6:	2300      	moveq	r3, #0
 800b3e8:	f884 3260 	strb.w	r3, [r4, #608]	@ 0x260
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b3ec:	2312      	movs	r3, #18
 800b3ee:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b3f0:	792b      	ldrb	r3, [r5, #4]
 800b3f2:	2b12      	cmp	r3, #18
 800b3f4:	f200 8329 	bhi.w	800ba4a <SCSI_ProcessCmd+0x88a>
    hmsc->bot_data_length = params[4];
 800b3f8:	60e3      	str	r3, [r4, #12]
  return 0;
 800b3fa:	f04f 0800 	mov.w	r8, #0
 800b3fe:	e07b      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b400:	2320      	movs	r3, #32
 800b402:	2205      	movs	r2, #5
 800b404:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b408:	f7ff fdeb 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b40c:	f04f 38ff 	mov.w	r8, #4294967295
 800b410:	e072      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->cbw.dDataLength == 0U)
 800b412:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b416:	b17a      	cbz	r2, 800b438 <SCSI_ProcessCmd+0x278>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b418:	786a      	ldrb	r2, [r5, #1]
 800b41a:	f012 0f01 	tst.w	r2, #1
 800b41e:	d025      	beq.n	800b46c <SCSI_ProcessCmd+0x2ac>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b420:	78ab      	ldrb	r3, [r5, #2]
 800b422:	b193      	cbz	r3, 800b44a <SCSI_ProcessCmd+0x28a>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b424:	2b80      	cmp	r3, #128	@ 0x80
 800b426:	d118      	bne.n	800b45a <SCSI_ProcessCmd+0x29a>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b428:	2208      	movs	r2, #8
 800b42a:	49b4      	ldr	r1, [pc, #720]	@ (800b6fc <SCSI_ProcessCmd+0x53c>)
 800b42c:	4620      	mov	r0, r4
 800b42e:	f7ff fdc3 	bl	800afb8 <SCSI_UpdateBotData>
  return 0;
 800b432:	f04f 0800 	mov.w	r8, #0
 800b436:	e05f      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b438:	2320      	movs	r3, #32
 800b43a:	2205      	movs	r2, #5
 800b43c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b440:	f7ff fdcf 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b444:	f04f 38ff 	mov.w	r8, #4294967295
 800b448:	e056      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b44a:	2206      	movs	r2, #6
 800b44c:	49ac      	ldr	r1, [pc, #688]	@ (800b700 <SCSI_ProcessCmd+0x540>)
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff fdb2 	bl	800afb8 <SCSI_UpdateBotData>
  return 0;
 800b454:	f04f 0800 	mov.w	r8, #0
 800b458:	e04e      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b45a:	2324      	movs	r3, #36	@ 0x24
 800b45c:	2205      	movs	r2, #5
 800b45e:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b462:	f7ff fdbe 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b466:	f04f 38ff 	mov.w	r8, #4294967295
 800b46a:	e045      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b46c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b470:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b474:	69d9      	ldr	r1, [r3, #28]
 800b476:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 800b47a:	790b      	ldrb	r3, [r1, #4]
    if (params[4] <= len)
 800b47c:	3305      	adds	r3, #5
 800b47e:	792a      	ldrb	r2, [r5, #4]
    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b480:	429a      	cmp	r2, r3
 800b482:	bf28      	it	cs
 800b484:	461a      	movcs	r2, r3
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff fd96 	bl	800afb8 <SCSI_UpdateBotData>
  return 0;
 800b48c:	f04f 0800 	mov.w	r8, #0
 800b490:	e032      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b492:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b496:	2b01      	cmp	r3, #1
 800b498:	d009      	beq.n	800b4ae <SCSI_ProcessCmd+0x2ee>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b49a:	792b      	ldrb	r3, [r5, #4]
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d01c      	beq.n	800b4de <SCSI_ProcessCmd+0x31e>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d109      	bne.n	800b4bc <SCSI_ProcessCmd+0x2fc>
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b4a8:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 800b4ac:	e00b      	b.n	800b4c6 <SCSI_ProcessCmd+0x306>
 800b4ae:	792b      	ldrb	r3, [r5, #4]
 800b4b0:	f003 0303 	and.w	r3, r3, #3
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d00a      	beq.n	800b4ce <SCSI_ProcessCmd+0x30e>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d010      	beq.n	800b4de <SCSI_ProcessCmd+0x31e>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b4bc:	2b03      	cmp	r3, #3
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b4be:	bf04      	itt	eq
 800b4c0:	2300      	moveq	r3, #0
 800b4c2:	f884 3262 	strbeq.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60e3      	str	r3, [r4, #12]
  return 0;
 800b4ca:	4698      	mov	r8, r3
 800b4cc:	e014      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b4ce:	2324      	movs	r3, #36	@ 0x24
 800b4d0:	2205      	movs	r2, #5
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	f7ff fd85 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b4d8:	f04f 38ff 	mov.w	r8, #4294967295
 800b4dc:	e00c      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
 800b4e4:	e7ef      	b.n	800b4c6 <SCSI_ProcessCmd+0x306>
  if (params[4] == 0U)
 800b4e6:	792b      	ldrb	r3, [r5, #4]
 800b4e8:	3b00      	subs	r3, #0
 800b4ea:	bf18      	it	ne
 800b4ec:	2301      	movne	r3, #1
 800b4ee:	f884 3262 	strb.w	r3, [r4, #610]	@ 0x262
  hmsc->bot_data_length = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60e3      	str	r3, [r4, #12]
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800b4f6:	4698      	mov	r8, r3
}
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	b002      	add	sp, #8
 800b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	4638      	mov	r0, r7
 800b508:	4798      	blx	r3
 800b50a:	b120      	cbz	r0, 800b516 <SCSI_ProcessCmd+0x356>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800b50c:	4a7d      	ldr	r2, [pc, #500]	@ (800b704 <SCSI_ProcessCmd+0x544>)
 800b50e:	7893      	ldrb	r3, [r2, #2]
 800b510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b514:	7093      	strb	r3, [r2, #2]
  if (params[4] <= len)
 800b516:	792a      	ldrb	r2, [r5, #4]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b518:	2a04      	cmp	r2, #4
 800b51a:	bf28      	it	cs
 800b51c:	2204      	movcs	r2, #4
 800b51e:	4979      	ldr	r1, [pc, #484]	@ (800b704 <SCSI_ProcessCmd+0x544>)
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff fd49 	bl	800afb8 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800b526:	f04f 0800 	mov.w	r8, #0
      break;
 800b52a:	e7e5      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	4638      	mov	r0, r7
 800b534:	4798      	blx	r3
 800b536:	b120      	cbz	r0, 800b542 <SCSI_ProcessCmd+0x382>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800b538:	4a73      	ldr	r2, [pc, #460]	@ (800b708 <SCSI_ProcessCmd+0x548>)
 800b53a:	78d3      	ldrb	r3, [r2, #3]
 800b53c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b540:	70d3      	strb	r3, [r2, #3]
  if (params[8] <= len)
 800b542:	7a2a      	ldrb	r2, [r5, #8]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b544:	2a08      	cmp	r2, #8
 800b546:	bf28      	it	cs
 800b548:	2208      	movcs	r2, #8
 800b54a:	496f      	ldr	r1, [pc, #444]	@ (800b708 <SCSI_ProcessCmd+0x548>)
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7ff fd33 	bl	800afb8 <SCSI_UpdateBotData>
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800b552:	f04f 0800 	mov.w	r8, #0
      break;
 800b556:	e7cf      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b558:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f10d 0202 	add.w	r2, sp, #2
 800b562:	a901      	add	r1, sp, #4
 800b564:	4638      	mov	r0, r7
 800b566:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b568:	4680      	mov	r8, r0
 800b56a:	bb20      	cbnz	r0, 800b5b6 <SCSI_ProcessCmd+0x3f6>
 800b56c:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b570:	2b02      	cmp	r3, #2
 800b572:	d020      	beq.n	800b5b6 <SCSI_ProcessCmd+0x3f6>
 800b574:	f104 030f 	add.w	r3, r4, #15
 800b578:	f104 011b 	add.w	r1, r4, #27
    hmsc->bot_data[i] = 0U;
 800b57c:	2200      	movs	r2, #0
 800b57e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (i = 0U; i < 12U ; i++)
 800b582:	428b      	cmp	r3, r1
 800b584:	d1fb      	bne.n	800b57e <SCSI_ProcessCmd+0x3be>
  hmsc->bot_data[3] = 0x08U;
 800b586:	2308      	movs	r3, #8
 800b588:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b58a:	9a01      	ldr	r2, [sp, #4]
 800b58c:	1e53      	subs	r3, r2, #1
 800b58e:	0e19      	lsrs	r1, r3, #24
 800b590:	7521      	strb	r1, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b592:	0c19      	lsrs	r1, r3, #16
 800b594:	7561      	strb	r1, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	75a3      	strb	r3, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b59a:	3a01      	subs	r2, #1
 800b59c:	75e2      	strb	r2, [r4, #23]
  hmsc->bot_data[8] = 0x02U;
 800b59e:	2302      	movs	r3, #2
 800b5a0:	7623      	strb	r3, [r4, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b5a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b5aa:	0a1a      	lsrs	r2, r3, #8
 800b5ac:	76a2      	strb	r2, [r4, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b5ae:	76e3      	strb	r3, [r4, #27]
  hmsc->bot_data_length = 12U;
 800b5b0:	230c      	movs	r3, #12
 800b5b2:	60e3      	str	r3, [r4, #12]
      break;
 800b5b4:	e7a0      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b5b6:	233a      	movs	r3, #58	@ 0x3a
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7ff fd10 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b5c2:	f04f 38ff 	mov.w	r8, #4294967295
 800b5c6:	e797      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b5c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f504 7219 	add.w	r2, r4, #612	@ 0x264
 800b5d2:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b5da:	4680      	mov	r8, r0
 800b5dc:	b9c8      	cbnz	r0, 800b612 <SCSI_ProcessCmd+0x452>
 800b5de:	f894 3262 	ldrb.w	r3, [r4, #610]	@ 0x262
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d015      	beq.n	800b612 <SCSI_ProcessCmd+0x452>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b5e6:	f8d4 2268 	ldr.w	r2, [r4, #616]	@ 0x268
 800b5ea:	1e53      	subs	r3, r2, #1
 800b5ec:	0e19      	lsrs	r1, r3, #24
 800b5ee:	7421      	strb	r1, [r4, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b5f0:	0c19      	lsrs	r1, r3, #16
 800b5f2:	7461      	strb	r1, [r4, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b5f4:	0a1b      	lsrs	r3, r3, #8
 800b5f6:	74a3      	strb	r3, [r4, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b5f8:	3a01      	subs	r2, #1
 800b5fa:	74e2      	strb	r2, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b5fc:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b600:	2200      	movs	r2, #0
 800b602:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b604:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b606:	0a1a      	lsrs	r2, r3, #8
 800b608:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b60a:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data_length = 8U;
 800b60c:	2308      	movs	r3, #8
 800b60e:	60e3      	str	r3, [r4, #12]
  return 0;
 800b610:	e772      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b612:	233a      	movs	r3, #58	@ 0x3a
 800b614:	2202      	movs	r2, #2
 800b616:	4639      	mov	r1, r7
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff fce2 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b61e:	f04f 38ff 	mov.w	r8, #4294967295
 800b622:	e769      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b624:	233a      	movs	r3, #58	@ 0x3a
 800b626:	2202      	movs	r2, #2
 800b628:	4639      	mov	r1, r7
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7ff fcd9 	bl	800afe2 <SCSI_SenseCode>
    return -1;
 800b630:	f04f 38ff 	mov.w	r8, #4294967295
 800b634:	e760      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b636:	7a22      	ldrb	r2, [r4, #8]
 800b638:	bb9a      	cbnz	r2, 800b6a2 <SCSI_ProcessCmd+0x4e2>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b63a:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b63e:	2a00      	cmp	r2, #0
 800b640:	da38      	bge.n	800b6b4 <SCSI_ProcessCmd+0x4f4>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b642:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b646:	2a02      	cmp	r2, #2
 800b648:	d03d      	beq.n	800b6c6 <SCSI_ProcessCmd+0x506>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b64a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	4638      	mov	r0, r7
 800b652:	4798      	blx	r3
 800b654:	2800      	cmp	r0, #0
 800b656:	d13d      	bne.n	800b6d4 <SCSI_ProcessCmd+0x514>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b658:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b65a:	78ea      	ldrb	r2, [r5, #3]
 800b65c:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b65e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b662:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800b664:	431a      	orrs	r2, r3
 800b666:	792b      	ldrb	r3, [r5, #4]
 800b668:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b66c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b670:	79e9      	ldrb	r1, [r5, #7]
 800b672:	7a2b      	ldrb	r3, [r5, #8]
 800b674:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b678:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b67c:	4639      	mov	r1, r7
 800b67e:	4630      	mov	r0, r6
 800b680:	f7ff fccb 	bl	800b01a <SCSI_CheckAddressRange>
 800b684:	2800      	cmp	r0, #0
 800b686:	f2c0 81e3 	blt.w	800ba50 <SCSI_ProcessCmd+0x890>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b68a:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b68e:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b692:	fb02 f303 	mul.w	r3, r2, r3
 800b696:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d123      	bne.n	800b6e6 <SCSI_ProcessCmd+0x526>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b6a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6a6:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7ff fcd0 	bl	800b050 <SCSI_ProcessRead>
 800b6b0:	4680      	mov	r8, r0
 800b6b2:	e721      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6b4:	2320      	movs	r3, #32
 800b6b6:	2205      	movs	r2, #5
 800b6b8:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b6bc:	f7ff fc91 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b6c0:	f04f 38ff 	mov.w	r8, #4294967295
 800b6c4:	e718      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6c6:	233a      	movs	r3, #58	@ 0x3a
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7ff fc8a 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b6ce:	f04f 38ff 	mov.w	r8, #4294967295
 800b6d2:	e711      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6d4:	233a      	movs	r3, #58	@ 0x3a
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff fc81 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b6e0:	f04f 38ff 	mov.w	r8, #4294967295
 800b6e4:	e708      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6e6:	2320      	movs	r3, #32
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f7ff fc77 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b6f4:	f04f 38ff 	mov.w	r8, #4294967295
 800b6f8:	e6fe      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
 800b6fa:	bf00      	nop
 800b6fc:	200000b8 	.word	0x200000b8
 800b700:	200000c0 	.word	0x200000c0
 800b704:	200000b4 	.word	0x200000b4
 800b708:	200000ac 	.word	0x200000ac
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b70c:	7a22      	ldrb	r2, [r4, #8]
 800b70e:	2a00      	cmp	r2, #0
 800b710:	d139      	bne.n	800b786 <SCSI_ProcessCmd+0x5c6>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b712:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b716:	2a00      	cmp	r2, #0
 800b718:	da3e      	bge.n	800b798 <SCSI_ProcessCmd+0x5d8>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b71a:	f894 2262 	ldrb.w	r2, [r4, #610]	@ 0x262
 800b71e:	2a02      	cmp	r2, #2
 800b720:	d043      	beq.n	800b7aa <SCSI_ProcessCmd+0x5ea>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	4608      	mov	r0, r1
 800b72a:	4798      	blx	r3
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d142      	bne.n	800b7b6 <SCSI_ProcessCmd+0x5f6>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b730:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b732:	78ea      	ldrb	r2, [r5, #3]
 800b734:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b736:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b73a:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] <<  8) |
 800b73c:	431a      	orrs	r2, r3
 800b73e:	792b      	ldrb	r3, [r5, #4]
 800b740:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b744:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b748:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800b74a:	79eb      	ldrb	r3, [r5, #7]
 800b74c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b74e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800b752:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800b754:	430b      	orrs	r3, r1
 800b756:	7a29      	ldrb	r1, [r5, #8]
 800b758:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b75c:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b760:	4639      	mov	r1, r7
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff fc59 	bl	800b01a <SCSI_CheckAddressRange>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f2c0 8174 	blt.w	800ba56 <SCSI_ProcessCmd+0x896>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b76e:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b772:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b776:	fb02 f303 	mul.w	r3, r2, r3
 800b77a:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b77e:	429a      	cmp	r2, r3
 800b780:	d122      	bne.n	800b7c8 <SCSI_ProcessCmd+0x608>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b782:	2302      	movs	r3, #2
 800b784:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b78a:	60e3      	str	r3, [r4, #12]
  return SCSI_ProcessRead(pdev, lun);
 800b78c:	4639      	mov	r1, r7
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff fc5e 	bl	800b050 <SCSI_ProcessRead>
 800b794:	4680      	mov	r8, r0
 800b796:	e6af      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b798:	2320      	movs	r3, #32
 800b79a:	2205      	movs	r2, #5
 800b79c:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b7a0:	f7ff fc1f 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b7a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b7a8:	e6a6      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7aa:	233a      	movs	r3, #58	@ 0x3a
 800b7ac:	f7ff fc19 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b7b0:	f04f 38ff 	mov.w	r8, #4294967295
 800b7b4:	e6a0      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7b6:	233a      	movs	r3, #58	@ 0x3a
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff fc10 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b7c2:	f04f 38ff 	mov.w	r8, #4294967295
 800b7c6:	e697      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b7c8:	2320      	movs	r3, #32
 800b7ca:	2205      	movs	r2, #5
 800b7cc:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff fc06 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b7d6:	f04f 38ff 	mov.w	r8, #4294967295
 800b7da:	e68d      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b7dc:	7a22      	ldrb	r2, [r4, #8]
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	d17a      	bne.n	800b8d8 <SCSI_ProcessCmd+0x718>
    if (hmsc->cbw.dDataLength == 0U)
 800b7e2:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d048      	beq.n	800b87c <SCSI_ProcessCmd+0x6bc>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b7ea:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b7ee:	2a00      	cmp	r2, #0
 800b7f0:	db4d      	blt.n	800b88e <SCSI_ProcessCmd+0x6ce>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	4638      	mov	r0, r7
 800b7fa:	4798      	blx	r3
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d14f      	bne.n	800b8a0 <SCSI_ProcessCmd+0x6e0>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b800:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b804:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b808:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	4638      	mov	r0, r7
 800b810:	4798      	blx	r3
 800b812:	4680      	mov	r8, r0
 800b814:	2800      	cmp	r0, #0
 800b816:	d14c      	bne.n	800b8b2 <SCSI_ProcessCmd+0x6f2>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b818:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b81a:	78ea      	ldrb	r2, [r5, #3]
 800b81c:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b81e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b822:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800b824:	431a      	orrs	r2, r3
 800b826:	792b      	ldrb	r3, [r5, #4]
 800b828:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b82c:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b830:	79e9      	ldrb	r1, [r5, #7]
                         (uint32_t)params[8];
 800b832:	7a2b      	ldrb	r3, [r5, #8]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b838:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b83c:	4639      	mov	r1, r7
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff fbeb 	bl	800b01a <SCSI_CheckAddressRange>
 800b844:	2800      	cmp	r0, #0
 800b846:	f2c0 8109 	blt.w	800ba5c <SCSI_ProcessCmd+0x89c>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b84a:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b84e:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b852:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b856:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d132      	bne.n	800b8c4 <SCSI_ProcessCmd+0x704>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b85e:	2201      	movs	r2, #1
 800b860:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b866:	bf28      	it	cs
 800b868:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b86c:	f104 0210 	add.w	r2, r4, #16
 800b870:	497f      	ldr	r1, [pc, #508]	@ (800ba70 <SCSI_ProcessCmd+0x8b0>)
 800b872:	7809      	ldrb	r1, [r1, #0]
 800b874:	4630      	mov	r0, r6
 800b876:	f002 ffac 	bl	800e7d2 <USBD_LL_PrepareReceive>
  return 0;
 800b87a:	e63d      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b87c:	2320      	movs	r3, #32
 800b87e:	2205      	movs	r2, #5
 800b880:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b884:	f7ff fbad 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b888:	f04f 38ff 	mov.w	r8, #4294967295
 800b88c:	e634      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b88e:	2320      	movs	r3, #32
 800b890:	2205      	movs	r2, #5
 800b892:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b896:	f7ff fba4 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b89a:	f04f 38ff 	mov.w	r8, #4294967295
 800b89e:	e62b      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8a0:	233a      	movs	r3, #58	@ 0x3a
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff fb9b 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b8ac:	f04f 38ff 	mov.w	r8, #4294967295
 800b8b0:	e622      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b8b2:	2327      	movs	r3, #39	@ 0x27
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7ff fb92 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b8be:	f04f 38ff 	mov.w	r8, #4294967295
 800b8c2:	e619      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	2205      	movs	r2, #5
 800b8c8:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff fb88 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b8d2:	f04f 38ff 	mov.w	r8, #4294967295
 800b8d6:	e60f      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    return SCSI_ProcessWrite(pdev, lun);
 800b8d8:	4639      	mov	r1, r7
 800b8da:	f7ff fc11 	bl	800b100 <SCSI_ProcessWrite>
 800b8de:	4680      	mov	r8, r0
 800b8e0:	e60a      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b8e2:	7a22      	ldrb	r2, [r4, #8]
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	f040 8085 	bne.w	800b9f4 <SCSI_ProcessCmd+0x834>
    if (hmsc->cbw.dDataLength == 0U)
 800b8ea:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b8ee:	2a00      	cmp	r2, #0
 800b8f0:	d04e      	beq.n	800b990 <SCSI_ProcessCmd+0x7d0>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b8f2:	f994 221c 	ldrsb.w	r2, [r4, #540]	@ 0x21c
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	db53      	blt.n	800b9a2 <SCSI_ProcessCmd+0x7e2>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b8fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	4608      	mov	r0, r1
 800b902:	4798      	blx	r3
 800b904:	2800      	cmp	r0, #0
 800b906:	d155      	bne.n	800b9b4 <SCSI_ProcessCmd+0x7f4>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b908:	f8d6 32d4 	ldr.w	r3, [r6, #724]	@ 0x2d4
 800b90c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b910:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	4638      	mov	r0, r7
 800b918:	4798      	blx	r3
 800b91a:	4680      	mov	r8, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d154      	bne.n	800b9ca <SCSI_ProcessCmd+0x80a>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b920:	78ab      	ldrb	r3, [r5, #2]
                          ((uint32_t)params[3] << 16) |
 800b922:	78ea      	ldrb	r2, [r5, #3]
 800b924:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b926:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
                          (uint32_t)params[5];
 800b92a:	796b      	ldrb	r3, [r5, #5]
                          ((uint32_t)params[4] << 8) |
 800b92c:	431a      	orrs	r2, r3
 800b92e:	792b      	ldrb	r3, [r5, #4]
 800b930:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b934:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b938:	79a9      	ldrb	r1, [r5, #6]
                         ((uint32_t)params[7] << 16) |
 800b93a:	79eb      	ldrb	r3, [r5, #7]
 800b93c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b93e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (uint32_t)params[9];
 800b942:	7a69      	ldrb	r1, [r5, #9]
                         ((uint32_t)params[8] << 8) |
 800b944:	430b      	orrs	r3, r1
 800b946:	7a29      	ldrb	r1, [r5, #8]
 800b948:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b94c:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b950:	4639      	mov	r1, r7
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff fb61 	bl	800b01a <SCSI_CheckAddressRange>
 800b958:	2800      	cmp	r0, #0
 800b95a:	f2c0 8082 	blt.w	800ba62 <SCSI_ProcessCmd+0x8a2>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b95e:	f8b4 3264 	ldrh.w	r3, [r4, #612]	@ 0x264
 800b962:	f8d4 2270 	ldr.w	r2, [r4, #624]	@ 0x270
 800b966:	fb02 f303 	mul.w	r3, r2, r3
    if (hmsc->cbw.dDataLength != len)
 800b96a:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800b96e:	4293      	cmp	r3, r2
 800b970:	d136      	bne.n	800b9e0 <SCSI_ProcessCmd+0x820>
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b972:	2201      	movs	r2, #1
 800b974:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b97a:	bf28      	it	cs
 800b97c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b980:	f104 0210 	add.w	r2, r4, #16
 800b984:	493a      	ldr	r1, [pc, #232]	@ (800ba70 <SCSI_ProcessCmd+0x8b0>)
 800b986:	7809      	ldrb	r1, [r1, #0]
 800b988:	4630      	mov	r0, r6
 800b98a:	f002 ff22 	bl	800e7d2 <USBD_LL_PrepareReceive>
  return 0;
 800b98e:	e5b3      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b990:	2320      	movs	r3, #32
 800b992:	2205      	movs	r2, #5
 800b994:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b998:	f7ff fb23 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b99c:	f04f 38ff 	mov.w	r8, #4294967295
 800b9a0:	e5aa      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9a2:	2320      	movs	r3, #32
 800b9a4:	2205      	movs	r2, #5
 800b9a6:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b9aa:	f7ff fb1a 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b9ae:	f04f 38ff 	mov.w	r8, #4294967295
 800b9b2:	e5a1      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b9b4:	233a      	movs	r3, #58	@ 0x3a
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7ff fb11 	bl	800afe2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b9c0:	2305      	movs	r3, #5
 800b9c2:	7223      	strb	r3, [r4, #8]
      return -1;
 800b9c4:	f04f 38ff 	mov.w	r8, #4294967295
 800b9c8:	e596      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b9ca:	2327      	movs	r3, #39	@ 0x27
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff fb06 	bl	800afe2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b9d6:	2305      	movs	r3, #5
 800b9d8:	7223      	strb	r3, [r4, #8]
      return -1;
 800b9da:	f04f 38ff 	mov.w	r8, #4294967295
 800b9de:	e58b      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9e0:	2320      	movs	r3, #32
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	f894 121d 	ldrb.w	r1, [r4, #541]	@ 0x21d
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f7ff fafa 	bl	800afe2 <SCSI_SenseCode>
      return -1;
 800b9ee:	f04f 38ff 	mov.w	r8, #4294967295
 800b9f2:	e581      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    return SCSI_ProcessWrite(pdev, lun);
 800b9f4:	f7ff fb84 	bl	800b100 <SCSI_ProcessWrite>
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	e57d      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  if ((params[1] & 0x02U) == 0x02U)
 800b9fc:	786b      	ldrb	r3, [r5, #1]
 800b9fe:	f013 0f02 	tst.w	r3, #2
 800ba02:	d10c      	bne.n	800ba1e <SCSI_ProcessCmd+0x85e>
  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ba04:	f8d4 3270 	ldr.w	r3, [r4, #624]	@ 0x270
 800ba08:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	f7ff fb04 	bl	800b01a <SCSI_CheckAddressRange>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	db28      	blt.n	800ba68 <SCSI_ProcessCmd+0x8a8>
  hmsc->bot_data_length = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60e3      	str	r3, [r4, #12]
  return 0;
 800ba1a:	4698      	mov	r8, r3
 800ba1c:	e56c      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ba1e:	2324      	movs	r3, #36	@ 0x24
 800ba20:	2205      	movs	r2, #5
 800ba22:	4639      	mov	r1, r7
 800ba24:	f7ff fadd 	bl	800afe2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ba28:	f04f 38ff 	mov.w	r8, #4294967295
 800ba2c:	e564      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800ba2e:	2320      	movs	r3, #32
 800ba30:	2205      	movs	r2, #5
 800ba32:	4639      	mov	r1, r7
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff fad4 	bl	800afe2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	7263      	strb	r3, [r4, #9]
      ret = -1;
 800ba3e:	f04f 38ff 	mov.w	r8, #4294967295
      break;
 800ba42:	e559      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    return -1;
 800ba44:	f04f 38ff 	mov.w	r8, #4294967295
 800ba48:	e556      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
  return 0;
 800ba4a:	f04f 0800 	mov.w	r8, #0
 800ba4e:	e553      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800ba50:	f04f 38ff 	mov.w	r8, #4294967295
 800ba54:	e550      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800ba56:	f04f 38ff 	mov.w	r8, #4294967295
 800ba5a:	e54d      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800ba5c:	f04f 38ff 	mov.w	r8, #4294967295
 800ba60:	e54a      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
      return -1; /* error */
 800ba62:	f04f 38ff 	mov.w	r8, #4294967295
 800ba66:	e547      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
    return -1; /* error */
 800ba68:	f04f 38ff 	mov.w	r8, #4294967295
 800ba6c:	e544      	b.n	800b4f8 <SCSI_ProcessCmd+0x338>
 800ba6e:	bf00      	nop
 800ba70:	20000045 	.word	0x20000045

0800ba74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba74:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba76:	b190      	cbz	r0, 800ba9e <USBD_Init+0x2a>
 800ba78:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ba80:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ba84:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba88:	b109      	cbz	r1, 800ba8e <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800ba8a:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba8e:	2101      	movs	r1, #1
 800ba90:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ba94:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba96:	4618      	mov	r0, r3
 800ba98:	f002 fdf2 	bl	800e680 <USBD_LL_Init>

  return ret;
}
 800ba9c:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 800ba9e:	4805      	ldr	r0, [pc, #20]	@ (800bab4 <USBD_Init+0x40>)
 800baa0:	f003 fbb6 	bl	800f210 <iprintf>
 800baa4:	4804      	ldr	r0, [pc, #16]	@ (800bab8 <USBD_Init+0x44>)
 800baa6:	f003 fbb3 	bl	800f210 <iprintf>
 800baaa:	200a      	movs	r0, #10
 800baac:	f003 fbc2 	bl	800f234 <putchar>
    return USBD_FAIL;
 800bab0:	2003      	movs	r0, #3
 800bab2:	e7f3      	b.n	800ba9c <USBD_Init+0x28>
 800bab4:	0801273c 	.word	0x0801273c
 800bab8:	08012744 	.word	0x08012744

0800babc <USBD_DeInit>:
  *         De-Initialize the device library
  * @param  pdev: device instance
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800babc:	b510      	push	{r4, lr}
 800babe:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800bac0:	f002 fe44 	bl	800e74c <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bac4:	2301      	movs	r3, #1
 800bac6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 800baca:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800bace:	b11b      	cbz	r3, 800bad8 <USBD_DeInit+0x1c>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	7921      	ldrb	r1, [r4, #4]
 800bad4:	4620      	mov	r0, r4
 800bad6:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 800bad8:	2300      	movs	r3, #0
 800bada:	f8c4 32c4 	str.w	r3, [r4, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800bade:	f8c4 32b4 	str.w	r3, [r4, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 800bae2:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800bae6:	4620      	mov	r0, r4
 800bae8:	f002 fe20 	bl	800e72c <USBD_LL_DeInit>

  return ret;
}
 800baec:	bd10      	pop	{r4, pc}
	...

0800baf0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800baf0:	b510      	push	{r4, lr}
 800baf2:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800bafa:	b189      	cbz	r1, 800bb20 <USBD_RegisterClass+0x30>
 800bafc:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bafe:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb02:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800bb04:	b123      	cbz	r3, 800bb10 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb06:	f10d 0006 	add.w	r0, sp, #6
 800bb0a:	4798      	blx	r3
 800bb0c:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bb10:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 800bb14:	3301      	adds	r3, #1
 800bb16:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 800bb1a:	2000      	movs	r0, #0
}
 800bb1c:	b002      	add	sp, #8
 800bb1e:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800bb20:	4805      	ldr	r0, [pc, #20]	@ (800bb38 <USBD_RegisterClass+0x48>)
 800bb22:	f003 fb75 	bl	800f210 <iprintf>
 800bb26:	4805      	ldr	r0, [pc, #20]	@ (800bb3c <USBD_RegisterClass+0x4c>)
 800bb28:	f003 fb72 	bl	800f210 <iprintf>
 800bb2c:	200a      	movs	r0, #10
 800bb2e:	f003 fb81 	bl	800f234 <putchar>
    return USBD_FAIL;
 800bb32:	2003      	movs	r0, #3
 800bb34:	e7f2      	b.n	800bb1c <USBD_RegisterClass+0x2c>
 800bb36:	bf00      	nop
 800bb38:	0801273c 	.word	0x0801273c
 800bb3c:	0801275c 	.word	0x0801275c

0800bb40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb40:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb42:	f002 fdfb 	bl	800e73c <USBD_LL_Start>
}
 800bb46:	bd08      	pop	{r3, pc}

0800bb48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb48:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bb4e:	b113      	cbz	r3, 800bb56 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800bb54:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800bb56:	2000      	movs	r0, #0
 800bb58:	e7fc      	b.n	800bb54 <USBD_SetClassConfig+0xc>

0800bb5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb5a:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800bb64:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800bb66:	bf18      	it	ne
 800bb68:	2003      	movne	r0, #3
 800bb6a:	bd08      	pop	{r3, pc}

0800bb6c <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb70:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800bb74:	4628      	mov	r0, r5
 800bb76:	f000 f989 	bl	800be8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb80:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 800bb84:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb88:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 800bb8c:	f001 031f 	and.w	r3, r1, #31
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d007      	beq.n	800bba4 <USBD_LL_SetupStage+0x38>
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d00a      	beq.n	800bbae <USBD_LL_SetupStage+0x42>
 800bb98:	b973      	cbnz	r3, 800bbb8 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 f993 	bl	800bec8 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bba4:	4629      	mov	r1, r5
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 fb6c 	bl	800c284 <USBD_StdItfReq>
      break;
 800bbac:	e7f9      	b.n	800bba2 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbae:	4629      	mov	r1, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fba8 	bl	800c306 <USBD_StdEPReq>
      break;
 800bbb6:	e7f4      	b.n	800bba2 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbb8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f002 fde8 	bl	800e792 <USBD_LL_StallEP>
      break;
 800bbc2:	e7ee      	b.n	800bba2 <USBD_LL_SetupStage+0x36>

0800bbc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800bbc8:	460d      	mov	r5, r1
 800bbca:	bb61      	cbnz	r1, 800bc26 <USBD_LL_DataOutStage+0x62>
 800bbcc:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbce:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800bbd2:	2a03      	cmp	r2, #3
 800bbd4:	d001      	beq.n	800bbda <USBD_LL_DataOutStage+0x16>
        return ret;
      }
    }
  }

  return USBD_OK;
 800bbd6:	4608      	mov	r0, r1
}
 800bbd8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800bbda:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 800bbde:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 800bbe2:	4291      	cmp	r1, r2
 800bbe4:	d809      	bhi.n	800bbfa <USBD_LL_DataOutStage+0x36>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d00f      	beq.n	800bc10 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fccb 	bl	800c58c <USBD_CtlSendStatus>
  return USBD_OK;
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e7ee      	b.n	800bbd8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800bbfa:	1a89      	subs	r1, r1, r2
 800bbfc:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc00:	428a      	cmp	r2, r1
 800bc02:	bf28      	it	cs
 800bc04:	460a      	movcs	r2, r1
 800bc06:	4619      	mov	r1, r3
 800bc08:	f000 fcb8 	bl	800c57c <USBD_CtlContinueRx>
  return USBD_OK;
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e7e3      	b.n	800bbd8 <USBD_LL_DataOutStage+0x14>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d0ea      	beq.n	800bbf0 <USBD_LL_DataOutStage+0x2c>
              pdev->classId = idx;
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	4798      	blx	r3
 800bc24:	e7e4      	b.n	800bbf0 <USBD_LL_DataOutStage+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc26:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d001      	beq.n	800bc34 <USBD_LL_DataOutStage+0x70>
  return USBD_OK;
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7d1      	b.n	800bbd8 <USBD_LL_DataOutStage+0x14>
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc34:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bc38:	699a      	ldr	r2, [r3, #24]
 800bc3a:	b12a      	cbz	r2, 800bc48 <USBD_LL_DataOutStage+0x84>
          pdev->classId = idx;
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	4798      	blx	r3
      if (ret != USBD_OK)
 800bc46:	e7c7      	b.n	800bbd8 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800bc48:	2000      	movs	r0, #0
 800bc4a:	e7c5      	b.n	800bbd8 <USBD_LL_DataOutStage+0x14>

0800bc4c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc50:	460d      	mov	r5, r1
 800bc52:	2900      	cmp	r1, #0
 800bc54:	d14c      	bne.n	800bcf0 <USBD_LL_DataInStage+0xa4>
 800bc56:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc58:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800bc5c:	2a02      	cmp	r2, #2
 800bc5e:	d008      	beq.n	800bc72 <USBD_LL_DataInStage+0x26>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc60:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d049      	beq.n	800bcfc <USBD_LL_DataInStage+0xb0>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
        }
      }
    }
  }

  return USBD_OK;
 800bc6e:	4628      	mov	r0, r5
 800bc70:	e044      	b.n	800bcfc <USBD_LL_DataInStage+0xb0>
      if (pep->rem_length > pep->maxpacket)
 800bc72:	69c2      	ldr	r2, [r0, #28]
 800bc74:	6a01      	ldr	r1, [r0, #32]
 800bc76:	428a      	cmp	r2, r1
 800bc78:	d80e      	bhi.n	800bc98 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 800bc7a:	428a      	cmp	r2, r1
 800bc7c:	d018      	beq.n	800bcb0 <USBD_LL_DataInStage+0x64>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d027      	beq.n	800bcd8 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc88:	2180      	movs	r1, #128	@ 0x80
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f002 fd81 	bl	800e792 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fc86 	bl	800c5a2 <USBD_CtlReceiveStatus>
 800bc96:	e7e3      	b.n	800bc60 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800bc98:	1a52      	subs	r2, r2, r1
 800bc9a:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	f000 fc65 	bl	800c56c <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bca2:	2300      	movs	r3, #0
 800bca4:	461a      	mov	r2, r3
 800bca6:	4619      	mov	r1, r3
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f002 fd92 	bl	800e7d2 <USBD_LL_PrepareReceive>
 800bcae:	e7d7      	b.n	800bc60 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800bcb0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	d8e3      	bhi.n	800bc7e <USBD_LL_DataInStage+0x32>
            (pep->total_length >= pep->maxpacket) &&
 800bcb6:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d2df      	bcs.n	800bc7e <USBD_LL_DataInStage+0x32>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	f000 fc53 	bl	800c56c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bccc:	460b      	mov	r3, r1
 800bcce:	460a      	mov	r2, r1
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f002 fd7e 	bl	800e7d2 <USBD_LL_PrepareReceive>
 800bcd6:	e7c3      	b.n	800bc60 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bcd8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	2a00      	cmp	r2, #0
 800bce0:	d0d2      	beq.n	800bc88 <USBD_LL_DataInStage+0x3c>
              pdev->classId = 0U;
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	4620      	mov	r0, r4
 800bcec:	4798      	blx	r3
 800bcee:	e7cb      	b.n	800bc88 <USBD_LL_DataInStage+0x3c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d001      	beq.n	800bcfe <USBD_LL_DataInStage+0xb2>
  return USBD_OK;
 800bcfa:	2000      	movs	r0, #0
}
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bd02:	695a      	ldr	r2, [r3, #20]
 800bd04:	b12a      	cbz	r2, 800bd12 <USBD_LL_DataInStage+0xc6>
          pdev->classId = idx;
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	4798      	blx	r3
          if (ret != USBD_OK)
 800bd10:	e7f4      	b.n	800bcfc <USBD_LL_DataInStage+0xb0>
  return USBD_OK;
 800bd12:	2000      	movs	r0, #0
 800bd14:	e7f2      	b.n	800bcfc <USBD_LL_DataInStage+0xb0>

0800bd16 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd18:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd26:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd28:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd2c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd30:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bd34:	b1e3      	cbz	r3, 800bd70 <USBD_LL_Reset+0x5a>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	b1e3      	cbz	r3, 800bd74 <USBD_LL_Reset+0x5e>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4798      	blx	r3
      {
        ret = USBD_FAIL;
 800bd3e:	1e05      	subs	r5, r0, #0
 800bd40:	bf18      	it	ne
 800bd42:	2503      	movne	r5, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd44:	2340      	movs	r3, #64	@ 0x40
 800bd46:	2200      	movs	r2, #0
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f002 fd06 	bl	800e75c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd50:	2701      	movs	r7, #1
 800bd52:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd56:	2640      	movs	r6, #64	@ 0x40
 800bd58:	f8c4 6160 	str.w	r6, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd5c:	4633      	mov	r3, r6
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2180      	movs	r1, #128	@ 0x80
 800bd62:	4620      	mov	r0, r4
 800bd64:	f002 fcfa 	bl	800e75c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd68:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd6a:	6226      	str	r6, [r4, #32]

  return ret;
}
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800bd70:	2500      	movs	r5, #0
 800bd72:	e7e7      	b.n	800bd44 <USBD_LL_Reset+0x2e>
 800bd74:	2500      	movs	r5, #0
 800bd76:	e7e5      	b.n	800bd44 <USBD_LL_Reset+0x2e>

0800bd78 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800bd78:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	4770      	bx	lr

0800bd7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd7e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d004      	beq.n	800bd92 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bd88:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd92:	2304      	movs	r3, #4
 800bd94:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800bd98:	2000      	movs	r0, #0
 800bd9a:	4770      	bx	lr

0800bd9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd9c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d001      	beq.n	800bdaa <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800bda6:	2000      	movs	r0, #0
 800bda8:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800bdaa:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 800bdb4:	e7f7      	b.n	800bda6 <USBD_LL_Resume+0xa>

0800bdb6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdb6:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdb8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	d001      	beq.n	800bdc6 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800bdc6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0f9      	beq.n	800bdc2 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0f6      	beq.n	800bdc2 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800bdd4:	4798      	blx	r3
 800bdd6:	e7f4      	b.n	800bdc2 <USBD_LL_SOF+0xc>

0800bdd8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bdd8:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800bdda:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800bdde:	33ae      	adds	r3, #174	@ 0xae
 800bde0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800bde4:	b15a      	cbz	r2, 800bdfe <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	2b03      	cmp	r3, #3
 800bdee:	d001      	beq.n	800bdf4 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800bdf0:	2000      	movs	r0, #0
}
 800bdf2:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bdf4:	6a13      	ldr	r3, [r2, #32]
 800bdf6:	b123      	cbz	r3, 800be02 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bdf8:	4798      	blx	r3
  return USBD_OK;
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	e7f9      	b.n	800bdf2 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 800bdfe:	2003      	movs	r0, #3
 800be00:	e7f7      	b.n	800bdf2 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 800be02:	2000      	movs	r0, #0
 800be04:	e7f5      	b.n	800bdf2 <USBD_LL_IsoINIncomplete+0x1a>

0800be06 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be06:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800be08:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800be0c:	33ae      	adds	r3, #174	@ 0xae
 800be0e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800be12:	b15a      	cbz	r2, 800be2c <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d001      	beq.n	800be22 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800be1e:	2000      	movs	r0, #0
}
 800be20:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800be22:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800be24:	b123      	cbz	r3, 800be30 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be26:	4798      	blx	r3
  return USBD_OK;
 800be28:	2000      	movs	r0, #0
 800be2a:	e7f9      	b.n	800be20 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 800be2c:	2003      	movs	r0, #3
 800be2e:	e7f7      	b.n	800be20 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 800be30:	2000      	movs	r0, #0
 800be32:	e7f5      	b.n	800be20 <USBD_LL_IsoOUTIncomplete+0x1a>

0800be34 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800be34:	2000      	movs	r0, #0
 800be36:	4770      	bx	lr

0800be38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be38:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be3a:	2301      	movs	r3, #1
 800be3c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be40:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800be44:	b133      	cbz	r3, 800be54 <USBD_LL_DevDisconnected+0x1c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	7901      	ldrb	r1, [r0, #4]
 800be4a:	4798      	blx	r3
    {
      ret = USBD_FAIL;
 800be4c:	2800      	cmp	r0, #0
 800be4e:	bf18      	it	ne
 800be50:	2003      	movne	r0, #3
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800be52:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800be54:	2000      	movs	r0, #0
 800be56:	e7fc      	b.n	800be52 <USBD_LL_DevDisconnected+0x1a>

0800be58 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800be58:	2000      	movs	r0, #0
 800be5a:	4770      	bx	lr

0800be5c <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800be5c:	2000      	movs	r0, #0
 800be5e:	4770      	bx	lr

0800be60 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800be60:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800be64:	7803      	ldrb	r3, [r0, #0]
 800be66:	459c      	cmp	ip, r3
 800be68:	d803      	bhi.n	800be72 <USBD_GetEpDesc+0x12>
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800be6a:	2000      	movs	r0, #0
      }
    }
  }

  return (void *)pEpDesc;
}
 800be6c:	4770      	bx	lr
    while (ptr < desc->wTotalLength)
 800be6e:	459c      	cmp	ip, r3
 800be70:	d90a      	bls.n	800be88 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800be72:	7802      	ldrb	r2, [r0, #0]
 800be74:	4413      	add	r3, r2
 800be76:	b29b      	uxth	r3, r3
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be78:	4410      	add	r0, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be7a:	7842      	ldrb	r2, [r0, #1]
 800be7c:	2a05      	cmp	r2, #5
 800be7e:	d1f6      	bne.n	800be6e <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800be80:	7882      	ldrb	r2, [r0, #2]
 800be82:	428a      	cmp	r2, r1
 800be84:	d1f3      	bne.n	800be6e <USBD_GetEpDesc+0xe>
 800be86:	e7f1      	b.n	800be6c <USBD_GetEpDesc+0xc>
 800be88:	2000      	movs	r0, #0
 800be8a:	4770      	bx	lr

0800be8c <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 800be8c:	780b      	ldrb	r3, [r1, #0]
 800be8e:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 800be90:	784b      	ldrb	r3, [r1, #1]
 800be92:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be94:	78ca      	ldrb	r2, [r1, #3]
 800be96:	788b      	ldrb	r3, [r1, #2]
 800be98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 800be9c:	8043      	strh	r3, [r0, #2]
 800be9e:	794a      	ldrb	r2, [r1, #5]
 800bea0:	790b      	ldrb	r3, [r1, #4]
 800bea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 800bea6:	8083      	strh	r3, [r0, #4]
 800bea8:	79ca      	ldrb	r2, [r1, #7]
 800beaa:	798b      	ldrb	r3, [r1, #6]
 800beac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 800beb0:	80c3      	strh	r3, [r0, #6]
}
 800beb2:	4770      	bx	lr

0800beb4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb4:	b510      	push	{r4, lr}
 800beb6:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800beb8:	2180      	movs	r1, #128	@ 0x80
 800beba:	f002 fc6a 	bl	800e792 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bebe:	2100      	movs	r1, #0
 800bec0:	4620      	mov	r0, r4
 800bec2:	f002 fc66 	bl	800e792 <USBD_LL_StallEP>
}
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <USBD_StdDevReq>:
{
 800bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beca:	b083      	sub	sp, #12
 800becc:	4607      	mov	r7, r0
 800bece:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bed0:	780c      	ldrb	r4, [r1, #0]
 800bed2:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800bed6:	2c20      	cmp	r4, #32
 800bed8:	d006      	beq.n	800bee8 <USBD_StdDevReq+0x20>
 800beda:	2c40      	cmp	r4, #64	@ 0x40
 800bedc:	d004      	beq.n	800bee8 <USBD_StdDevReq+0x20>
 800bede:	b184      	cbz	r4, 800bf02 <USBD_StdDevReq+0x3a>
      USBD_CtlError(pdev, req);
 800bee0:	f7ff ffe8 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800bee4:	2400      	movs	r4, #0
      break;
 800bee6:	e009      	b.n	800befc <USBD_StdDevReq+0x34>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bee8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800beec:	33ae      	adds	r3, #174	@ 0xae
 800beee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	4631      	mov	r1, r6
 800bef6:	4638      	mov	r0, r7
 800bef8:	4798      	blx	r3
 800befa:	4604      	mov	r4, r0
}
 800befc:	4620      	mov	r0, r4
 800befe:	b003      	add	sp, #12
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800bf02:	784d      	ldrb	r5, [r1, #1]
 800bf04:	2d09      	cmp	r5, #9
 800bf06:	f200 81b8 	bhi.w	800c27a <USBD_StdDevReq+0x3b2>
 800bf0a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800bf0e:	0172      	.short	0x0172
 800bf10:	01b601a4 	.word	0x01b601a4
 800bf14:	01b60190 	.word	0x01b60190
 800bf18:	000a00ca 	.word	0x000a00ca
 800bf1c:	015201b6 	.word	0x015201b6
 800bf20:	00f1      	.short	0x00f1
  uint16_t len = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800bf28:	884a      	ldrh	r2, [r1, #2]
 800bf2a:	0a13      	lsrs	r3, r2, #8
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	2b06      	cmp	r3, #6
 800bf30:	f200 80aa 	bhi.w	800c088 <USBD_StdDevReq+0x1c0>
 800bf34:	e8df f003 	tbb	[pc, r3]
 800bf38:	a8321e04 	.word	0xa8321e04
 800bf3c:	8ca8      	.short	0x8ca8
 800bf3e:	99          	.byte	0x99
 800bf3f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f10d 0106 	add.w	r1, sp, #6
 800bf4a:	7c00      	ldrb	r0, [r0, #16]
 800bf4c:	4798      	blx	r3
  if (req->wLength != 0U)
 800bf4e:	88f3      	ldrh	r3, [r6, #6]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 80a2 	beq.w	800c09a <USBD_StdDevReq+0x1d2>
    if (len != 0U)
 800bf56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	f000 8098 	beq.w	800c090 <USBD_StdDevReq+0x1c8>
      len = MIN(len, req->wLength);
 800bf60:	429a      	cmp	r2, r3
 800bf62:	bf28      	it	cs
 800bf64:	461a      	movcs	r2, r3
 800bf66:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	f000 faf0 	bl	800c552 <USBD_CtlSendData>
 800bf72:	e7c3      	b.n	800befc <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf74:	7c03      	ldrb	r3, [r0, #16]
 800bf76:	b943      	cbnz	r3, 800bf8a <USBD_StdDevReq+0xc2>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bf7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7e:	f10d 0006 	add.w	r0, sp, #6
 800bf82:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf84:	2302      	movs	r3, #2
 800bf86:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bf88:	e7e1      	b.n	800bf4e <USBD_StdDevReq+0x86>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bf8a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800bf8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf90:	f10d 0006 	add.w	r0, sp, #6
 800bf94:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf96:	2302      	movs	r3, #2
 800bf98:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bf9a:	e7d8      	b.n	800bf4e <USBD_StdDevReq+0x86>
      switch ((uint8_t)(req->wValue))
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	2a05      	cmp	r2, #5
 800bfa0:	d852      	bhi.n	800c048 <USBD_StdDevReq+0x180>
 800bfa2:	e8df f002 	tbb	[pc, r2]
 800bfa6:	1003      	.short	0x1003
 800bfa8:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	b123      	cbz	r3, 800bfbe <USBD_StdDevReq+0xf6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfb4:	f10d 0106 	add.w	r1, sp, #6
 800bfb8:	7c00      	ldrb	r0, [r0, #16]
 800bfba:	4798      	blx	r3
  if (err != 0U)
 800bfbc:	e7c7      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	f7ff ff78 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800bfc4:	e79a      	b.n	800befc <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	b123      	cbz	r3, 800bfd8 <USBD_StdDevReq+0x110>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfce:	f10d 0106 	add.w	r1, sp, #6
 800bfd2:	7c00      	ldrb	r0, [r0, #16]
 800bfd4:	4798      	blx	r3
  if (err != 0U)
 800bfd6:	e7ba      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bfd8:	4631      	mov	r1, r6
 800bfda:	f7ff ff6b 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800bfde:	e78d      	b.n	800befc <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfe0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	b123      	cbz	r3, 800bff2 <USBD_StdDevReq+0x12a>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	f10d 0106 	add.w	r1, sp, #6
 800bfec:	7c00      	ldrb	r0, [r0, #16]
 800bfee:	4798      	blx	r3
  if (err != 0U)
 800bff0:	e7ad      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800bff2:	4631      	mov	r1, r6
 800bff4:	f7ff ff5e 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800bff8:	e780      	b.n	800befc <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bffa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	b123      	cbz	r3, 800c00c <USBD_StdDevReq+0x144>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c002:	f10d 0106 	add.w	r1, sp, #6
 800c006:	7c00      	ldrb	r0, [r0, #16]
 800c008:	4798      	blx	r3
  if (err != 0U)
 800c00a:	e7a0      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800c00c:	4631      	mov	r1, r6
 800c00e:	f7ff ff51 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c012:	e773      	b.n	800befc <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c014:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	b123      	cbz	r3, 800c026 <USBD_StdDevReq+0x15e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c01c:	f10d 0106 	add.w	r1, sp, #6
 800c020:	7c00      	ldrb	r0, [r0, #16]
 800c022:	4798      	blx	r3
  if (err != 0U)
 800c024:	e793      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800c026:	4631      	mov	r1, r6
 800c028:	f7ff ff44 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c02c:	e766      	b.n	800befc <USBD_StdDevReq+0x34>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c02e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	b123      	cbz	r3, 800c040 <USBD_StdDevReq+0x178>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c036:	f10d 0106 	add.w	r1, sp, #6
 800c03a:	7c00      	ldrb	r0, [r0, #16]
 800c03c:	4798      	blx	r3
  if (err != 0U)
 800c03e:	e786      	b.n	800bf4e <USBD_StdDevReq+0x86>
            USBD_CtlError(pdev, req);
 800c040:	4631      	mov	r1, r6
 800c042:	f7ff ff37 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c046:	e759      	b.n	800befc <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800c048:	4631      	mov	r1, r6
 800c04a:	f7ff ff33 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c04e:	e755      	b.n	800befc <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c050:	7c03      	ldrb	r3, [r0, #16]
 800c052:	b933      	cbnz	r3, 800c062 <USBD_StdDevReq+0x19a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c054:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05a:	f10d 0006 	add.w	r0, sp, #6
 800c05e:	4798      	blx	r3
  if (err != 0U)
 800c060:	e775      	b.n	800bf4e <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800c062:	4631      	mov	r1, r6
 800c064:	f7ff ff26 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c068:	e748      	b.n	800befc <USBD_StdDevReq+0x34>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c06a:	7c03      	ldrb	r3, [r0, #16]
 800c06c:	b943      	cbnz	r3, 800c080 <USBD_StdDevReq+0x1b8>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c06e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800c072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c074:	f10d 0006 	add.w	r0, sp, #6
 800c078:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c07a:	2307      	movs	r3, #7
 800c07c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c07e:	e766      	b.n	800bf4e <USBD_StdDevReq+0x86>
        USBD_CtlError(pdev, req);
 800c080:	4631      	mov	r1, r6
 800c082:	f7ff ff17 	bl	800beb4 <USBD_CtlError>
  if (err != 0U)
 800c086:	e739      	b.n	800befc <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800c088:	4631      	mov	r1, r6
 800c08a:	f7ff ff13 	bl	800beb4 <USBD_CtlError>
    return;
 800c08e:	e735      	b.n	800befc <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800c090:	4631      	mov	r1, r6
 800c092:	4638      	mov	r0, r7
 800c094:	f7ff ff0e 	bl	800beb4 <USBD_CtlError>
 800c098:	e730      	b.n	800befc <USBD_StdDevReq+0x34>
    (void)USBD_CtlSendStatus(pdev);
 800c09a:	4638      	mov	r0, r7
 800c09c:	f000 fa76 	bl	800c58c <USBD_CtlSendStatus>
 800c0a0:	e72c      	b.n	800befc <USBD_StdDevReq+0x34>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0a2:	888b      	ldrh	r3, [r1, #4]
 800c0a4:	b9fb      	cbnz	r3, 800c0e6 <USBD_StdDevReq+0x21e>
 800c0a6:	88cb      	ldrh	r3, [r1, #6]
 800c0a8:	b9eb      	cbnz	r3, 800c0e6 <USBD_StdDevReq+0x21e>
 800c0aa:	884b      	ldrh	r3, [r1, #2]
 800c0ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0ae:	d81a      	bhi.n	800c0e6 <USBD_StdDevReq+0x21e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800c0b4:	b2d2      	uxtb	r2, r2
 800c0b6:	2a03      	cmp	r2, #3
 800c0b8:	d00d      	beq.n	800c0d6 <USBD_StdDevReq+0x20e>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0ba:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 800c0bc:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f002 fb76 	bl	800e7b2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f000 fa60 	bl	800c58c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c0cc:	b135      	cbz	r5, 800c0dc <USBD_StdDevReq+0x214>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800c0d4:	e712      	b.n	800befc <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800c0d6:	f7ff feed 	bl	800beb4 <USBD_CtlError>
 800c0da:	e70f      	b.n	800befc <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	462c      	mov	r4, r5
 800c0e4:	e70a      	b.n	800befc <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f7ff fee3 	bl	800beb4 <USBD_CtlError>
 800c0ee:	e705      	b.n	800befc <USBD_StdDevReq+0x34>
  cfgidx = (uint8_t)(req->wValue);
 800c0f0:	788d      	ldrb	r5, [r1, #2]
 800c0f2:	4b63      	ldr	r3, [pc, #396]	@ (800c280 <USBD_StdDevReq+0x3b8>)
 800c0f4:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0f6:	2d01      	cmp	r5, #1
 800c0f8:	d80f      	bhi.n	800c11a <USBD_StdDevReq+0x252>
  switch (pdev->dev_state)
 800c0fa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d00e      	beq.n	800c122 <USBD_StdDevReq+0x25a>
 800c104:	2b03      	cmp	r3, #3
 800c106:	d026      	beq.n	800c156 <USBD_StdDevReq+0x28e>
      USBD_CtlError(pdev, req);
 800c108:	f7ff fed4 	bl	800beb4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c10c:	4b5c      	ldr	r3, [pc, #368]	@ (800c280 <USBD_StdDevReq+0x3b8>)
 800c10e:	7819      	ldrb	r1, [r3, #0]
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff fd22 	bl	800bb5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c116:	2403      	movs	r4, #3
      break;
 800c118:	e6f0      	b.n	800befc <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800c11a:	f7ff fecb 	bl	800beb4 <USBD_CtlError>
    return USBD_FAIL;
 800c11e:	2403      	movs	r4, #3
 800c120:	e6ec      	b.n	800befc <USBD_StdDevReq+0x34>
      if (cfgidx != 0U)
 800c122:	b1a5      	cbz	r5, 800c14e <USBD_StdDevReq+0x286>
        pdev->dev_config = cfgidx;
 800c124:	2101      	movs	r1, #1
 800c126:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c128:	f7ff fd0e 	bl	800bb48 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c12c:	4604      	mov	r4, r0
 800c12e:	b138      	cbz	r0, 800c140 <USBD_StdDevReq+0x278>
          USBD_CtlError(pdev, req);
 800c130:	4631      	mov	r1, r6
 800c132:	4638      	mov	r0, r7
 800c134:	f7ff febe 	bl	800beb4 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c138:	2302      	movs	r3, #2
 800c13a:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800c13e:	e6dd      	b.n	800befc <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800c140:	4638      	mov	r0, r7
 800c142:	f000 fa23 	bl	800c58c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c146:	2303      	movs	r3, #3
 800c148:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800c14c:	e6d6      	b.n	800befc <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800c14e:	f000 fa1d 	bl	800c58c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c152:	462c      	mov	r4, r5
 800c154:	e6d2      	b.n	800befc <USBD_StdDevReq+0x34>
      if (cfgidx == 0U)
 800c156:	b1cd      	cbz	r5, 800c18c <USBD_StdDevReq+0x2c4>
      else if (cfgidx != pdev->dev_config)
 800c158:	6841      	ldr	r1, [r0, #4]
 800c15a:	2901      	cmp	r1, #1
 800c15c:	d026      	beq.n	800c1ac <USBD_StdDevReq+0x2e4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c15e:	b2c9      	uxtb	r1, r1
 800c160:	f7ff fcfb 	bl	800bb5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c164:	4b46      	ldr	r3, [pc, #280]	@ (800c280 <USBD_StdDevReq+0x3b8>)
 800c166:	7819      	ldrb	r1, [r3, #0]
 800c168:	6079      	str	r1, [r7, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c16a:	4638      	mov	r0, r7
 800c16c:	f7ff fcec 	bl	800bb48 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c170:	4604      	mov	r4, r0
 800c172:	b1b8      	cbz	r0, 800c1a4 <USBD_StdDevReq+0x2dc>
          USBD_CtlError(pdev, req);
 800c174:	4631      	mov	r1, r6
 800c176:	4638      	mov	r0, r7
 800c178:	f7ff fe9c 	bl	800beb4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c17c:	7939      	ldrb	r1, [r7, #4]
 800c17e:	4638      	mov	r0, r7
 800c180:	f7ff fceb 	bl	800bb5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c184:	2302      	movs	r3, #2
 800c186:	f887 329c 	strb.w	r3, [r7, #668]	@ 0x29c
 800c18a:	e6b7      	b.n	800befc <USBD_StdDevReq+0x34>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c18c:	2302      	movs	r3, #2
 800c18e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c192:	2100      	movs	r1, #0
 800c194:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c196:	f7ff fce0 	bl	800bb5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c19a:	4638      	mov	r0, r7
 800c19c:	f000 f9f6 	bl	800c58c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a0:	462c      	mov	r4, r5
 800c1a2:	e6ab      	b.n	800befc <USBD_StdDevReq+0x34>
          (void)USBD_CtlSendStatus(pdev);
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f000 f9f1 	bl	800c58c <USBD_CtlSendStatus>
 800c1aa:	e6a7      	b.n	800befc <USBD_StdDevReq+0x34>
        (void)USBD_CtlSendStatus(pdev);
 800c1ac:	f000 f9ee 	bl	800c58c <USBD_CtlSendStatus>
 800c1b0:	e6a4      	b.n	800befc <USBD_StdDevReq+0x34>
  if (req->wLength != 1U)
 800c1b2:	88cb      	ldrh	r3, [r1, #6]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d10b      	bne.n	800c1d0 <USBD_StdDevReq+0x308>
    switch (pdev->dev_state)
 800c1b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d909      	bls.n	800c1d6 <USBD_StdDevReq+0x30e>
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d110      	bne.n	800c1e8 <USBD_StdDevReq+0x320>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	1d01      	adds	r1, r0, #4
 800c1ca:	f000 f9c2 	bl	800c552 <USBD_CtlSendData>
        break;
 800c1ce:	e695      	b.n	800befc <USBD_StdDevReq+0x34>
    USBD_CtlError(pdev, req);
 800c1d0:	f7ff fe70 	bl	800beb4 <USBD_CtlError>
 800c1d4:	e692      	b.n	800befc <USBD_StdDevReq+0x34>
    switch (pdev->dev_state)
 800c1d6:	b13b      	cbz	r3, 800c1e8 <USBD_StdDevReq+0x320>
        pdev->dev_default_config = 0U;
 800c1d8:	4601      	mov	r1, r0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f000 f9b6 	bl	800c552 <USBD_CtlSendData>
        break;
 800c1e6:	e689      	b.n	800befc <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f7ff fe62 	bl	800beb4 <USBD_CtlError>
        break;
 800c1f0:	e684      	b.n	800befc <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800c1f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d814      	bhi.n	800c226 <USBD_StdDevReq+0x35e>
      if (req->wLength != 0x2U)
 800c1fc:	88cb      	ldrh	r3, [r1, #6]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	d10d      	bne.n	800c21e <USBD_StdDevReq+0x356>
      if (pdev->dev_remote_wakeup != 0U)
 800c202:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800c206:	3b00      	subs	r3, #0
 800c208:	bf18      	it	ne
 800c20a:	2301      	movne	r3, #1
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	4601      	mov	r1, r0
 800c210:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c214:	2202      	movs	r2, #2
 800c216:	f000 f99c 	bl	800c552 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c21a:	462c      	mov	r4, r5
      break;
 800c21c:	e66e      	b.n	800befc <USBD_StdDevReq+0x34>
        USBD_CtlError(pdev, req);
 800c21e:	f7ff fe49 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c222:	462c      	mov	r4, r5
        break;
 800c224:	e66a      	b.n	800befc <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800c226:	f7ff fe45 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c22a:	462c      	mov	r4, r5
      break;
 800c22c:	e666      	b.n	800befc <USBD_StdDevReq+0x34>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c22e:	884b      	ldrh	r3, [r1, #2]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d004      	beq.n	800c23e <USBD_StdDevReq+0x376>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c234:	2b02      	cmp	r3, #2
 800c236:	d007      	beq.n	800c248 <USBD_StdDevReq+0x380>
    USBD_CtlError(pdev, req);
 800c238:	f7ff fe3c 	bl	800beb4 <USBD_CtlError>
 800c23c:	e65e      	b.n	800befc <USBD_StdDevReq+0x34>
    pdev->dev_remote_wakeup = 1U;
 800c23e:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c242:	f000 f9a3 	bl	800c58c <USBD_CtlSendStatus>
 800c246:	e659      	b.n	800befc <USBD_StdDevReq+0x34>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c248:	888b      	ldrh	r3, [r1, #4]
 800c24a:	0a1b      	lsrs	r3, r3, #8
 800c24c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c250:	f000 f99c 	bl	800c58c <USBD_CtlSendStatus>
 800c254:	e652      	b.n	800befc <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 800c256:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c25a:	3b01      	subs	r3, #1
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d809      	bhi.n	800c274 <USBD_StdDevReq+0x3ac>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c260:	884b      	ldrh	r3, [r1, #2]
 800c262:	2b01      	cmp	r3, #1
 800c264:	f47f ae4a 	bne.w	800befc <USBD_StdDevReq+0x34>
        pdev->dev_remote_wakeup = 0U;
 800c268:	2300      	movs	r3, #0
 800c26a:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c26e:	f000 f98d 	bl	800c58c <USBD_CtlSendStatus>
 800c272:	e643      	b.n	800befc <USBD_StdDevReq+0x34>
      USBD_CtlError(pdev, req);
 800c274:	f7ff fe1e 	bl	800beb4 <USBD_CtlError>
      break;
 800c278:	e640      	b.n	800befc <USBD_StdDevReq+0x34>
          USBD_CtlError(pdev, req);
 800c27a:	f7ff fe1b 	bl	800beb4 <USBD_CtlError>
          break;
 800c27e:	e63d      	b.n	800befc <USBD_StdDevReq+0x34>
 800c280:	2000c7d4 	.word	0x2000c7d4

0800c284 <USBD_StdItfReq>:
{
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	4606      	mov	r6, r0
 800c288:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c28a:	780b      	ldrb	r3, [r1, #0]
 800c28c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c290:	d008      	beq.n	800c2a4 <USBD_StdItfReq+0x20>
 800c292:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800c296:	2a40      	cmp	r2, #64	@ 0x40
 800c298:	d004      	beq.n	800c2a4 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800c29a:	f7ff fe0b 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c29e:	2500      	movs	r5, #0
}
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800c2a4:	f896 329c 	ldrb.w	r3, [r6, #668]	@ 0x29c
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d821      	bhi.n	800c2f2 <USBD_StdItfReq+0x6e>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2ae:	7921      	ldrb	r1, [r4, #4]
 800c2b0:	2901      	cmp	r1, #1
 800c2b2:	d905      	bls.n	800c2c0 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff fdfc 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2bc:	2500      	movs	r5, #0
 800c2be:	e7ef      	b.n	800c2a0 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7ff fdc9 	bl	800be58 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2c6:	b9d0      	cbnz	r0, 800c2fe <USBD_StdItfReq+0x7a>
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c8:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800c2cc:	689a      	ldr	r2, [r3, #8]
 800c2ce:	b1c2      	cbz	r2, 800c302 <USBD_StdItfReq+0x7e>
                pdev->classId = idx;
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c6 22d4 	str.w	r2, [r6, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4630      	mov	r0, r6
 800c2dc:	4798      	blx	r3
 800c2de:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2e0:	88e3      	ldrh	r3, [r4, #6]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1dc      	bne.n	800c2a0 <USBD_StdItfReq+0x1c>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d1da      	bne.n	800c2a0 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f000 f94e 	bl	800c58c <USBD_CtlSendStatus>
 800c2f0:	e7d6      	b.n	800c2a0 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff fddd 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2fa:	2500      	movs	r5, #0
          break;
 800c2fc:	e7d0      	b.n	800c2a0 <USBD_StdItfReq+0x1c>
 800c2fe:	2503      	movs	r5, #3
 800c300:	e7ce      	b.n	800c2a0 <USBD_StdItfReq+0x1c>
 800c302:	2503      	movs	r5, #3
 800c304:	e7cc      	b.n	800c2a0 <USBD_StdItfReq+0x1c>

0800c306 <USBD_StdEPReq>:
{
 800c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30a:	4606      	mov	r6, r0
 800c30c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800c30e:	888b      	ldrh	r3, [r1, #4]
 800c310:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c312:	780c      	ldrb	r4, [r1, #0]
 800c314:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800c318:	2c20      	cmp	r4, #32
 800c31a:	d008      	beq.n	800c32e <USBD_StdEPReq+0x28>
 800c31c:	2c40      	cmp	r4, #64	@ 0x40
 800c31e:	d006      	beq.n	800c32e <USBD_StdEPReq+0x28>
 800c320:	b1d4      	cbz	r4, 800c358 <USBD_StdEPReq+0x52>
      USBD_CtlError(pdev, req);
 800c322:	f7ff fdc7 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c326:	2400      	movs	r4, #0
}
 800c328:	4620      	mov	r0, r4
 800c32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c32e:	4639      	mov	r1, r7
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff fd93 	bl	800be5c <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c336:	4604      	mov	r4, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	f040 80dd 	bne.w	800c4f8 <USBD_StdEPReq+0x1f2>
        pdev->classId = idx;
 800c33e:	2300      	movs	r3, #0
 800c340:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800c344:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0ec      	beq.n	800c328 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c34e:	4629      	mov	r1, r5
 800c350:	4630      	mov	r0, r6
 800c352:	4798      	blx	r3
 800c354:	4604      	mov	r4, r0
 800c356:	e7e7      	b.n	800c328 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800c358:	f891 8001 	ldrb.w	r8, [r1, #1]
 800c35c:	f1b8 0f01 	cmp.w	r8, #1
 800c360:	d030      	beq.n	800c3c4 <USBD_StdEPReq+0xbe>
 800c362:	f1b8 0f03 	cmp.w	r8, #3
 800c366:	d005      	beq.n	800c374 <USBD_StdEPReq+0x6e>
 800c368:	f1b8 0f00 	cmp.w	r8, #0
 800c36c:	d063      	beq.n	800c436 <USBD_StdEPReq+0x130>
          USBD_CtlError(pdev, req);
 800c36e:	f7ff fda1 	bl	800beb4 <USBD_CtlError>
          break;
 800c372:	e7d9      	b.n	800c328 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800c374:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d004      	beq.n	800c388 <USBD_StdEPReq+0x82>
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d011      	beq.n	800c3a6 <USBD_StdEPReq+0xa0>
              USBD_CtlError(pdev, req);
 800c382:	f7ff fd97 	bl	800beb4 <USBD_CtlError>
              break;
 800c386:	e7cf      	b.n	800c328 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c388:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800c38c:	d007      	beq.n	800c39e <USBD_StdEPReq+0x98>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c38e:	4639      	mov	r1, r7
 800c390:	f002 f9ff 	bl	800e792 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c394:	2180      	movs	r1, #128	@ 0x80
 800c396:	4630      	mov	r0, r6
 800c398:	f002 f9fb 	bl	800e792 <USBD_LL_StallEP>
 800c39c:	e7c4      	b.n	800c328 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800c39e:	f7ff fd89 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c3a2:	4644      	mov	r4, r8
 800c3a4:	e7c0      	b.n	800c328 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3a6:	884b      	ldrh	r3, [r1, #2]
 800c3a8:	b923      	cbnz	r3, 800c3b4 <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3aa:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800c3ae:	d001      	beq.n	800c3b4 <USBD_StdEPReq+0xae>
 800c3b0:	88cb      	ldrh	r3, [r1, #6]
 800c3b2:	b11b      	cbz	r3, 800c3bc <USBD_StdEPReq+0xb6>
              (void)USBD_CtlSendStatus(pdev);
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f000 f8e9 	bl	800c58c <USBD_CtlSendStatus>
              break;
 800c3ba:	e7b5      	b.n	800c328 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3bc:	4639      	mov	r1, r7
 800c3be:	f002 f9e8 	bl	800e792 <USBD_LL_StallEP>
 800c3c2:	e7f7      	b.n	800c3b4 <USBD_StdEPReq+0xae>
          switch (pdev->dev_state)
 800c3c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d004      	beq.n	800c3d8 <USBD_StdEPReq+0xd2>
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d011      	beq.n	800c3f6 <USBD_StdEPReq+0xf0>
              USBD_CtlError(pdev, req);
 800c3d2:	f7ff fd6f 	bl	800beb4 <USBD_CtlError>
              break;
 800c3d6:	e7a7      	b.n	800c328 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3d8:	f017 087f 	ands.w	r8, r7, #127	@ 0x7f
 800c3dc:	d007      	beq.n	800c3ee <USBD_StdEPReq+0xe8>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f002 f9d7 	bl	800e792 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3e4:	2180      	movs	r1, #128	@ 0x80
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f002 f9d3 	bl	800e792 <USBD_LL_StallEP>
 800c3ec:	e79c      	b.n	800c328 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800c3ee:	f7ff fd61 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	4644      	mov	r4, r8
 800c3f4:	e798      	b.n	800c328 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3f6:	884b      	ldrh	r3, [r1, #2]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d195      	bne.n	800c328 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3fc:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800c400:	d115      	bne.n	800c42e <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800c402:	4630      	mov	r0, r6
 800c404:	f000 f8c2 	bl	800c58c <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c408:	4639      	mov	r1, r7
 800c40a:	4630      	mov	r0, r6
 800c40c:	f7ff fd26 	bl	800be5c <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c410:	2800      	cmp	r0, #0
 800c412:	d189      	bne.n	800c328 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800c414:	2300      	movs	r3, #0
 800c416:	f8c6 32d4 	str.w	r3, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800c41a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	@ 0x2b8
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d06b      	beq.n	800c4fc <USBD_StdEPReq+0x1f6>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c424:	4629      	mov	r1, r5
 800c426:	4630      	mov	r0, r6
 800c428:	4798      	blx	r3
 800c42a:	4604      	mov	r4, r0
 800c42c:	e77c      	b.n	800c328 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c42e:	4639      	mov	r1, r7
 800c430:	f002 f9b7 	bl	800e7a2 <USBD_LL_ClearStallEP>
 800c434:	e7e5      	b.n	800c402 <USBD_StdEPReq+0xfc>
          switch (pdev->dev_state)
 800c436:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800c43a:	b2d2      	uxtb	r2, r2
 800c43c:	2a02      	cmp	r2, #2
 800c43e:	d005      	beq.n	800c44c <USBD_StdEPReq+0x146>
 800c440:	2a03      	cmp	r2, #3
 800c442:	d017      	beq.n	800c474 <USBD_StdEPReq+0x16e>
              USBD_CtlError(pdev, req);
 800c444:	f7ff fd36 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c448:	4644      	mov	r4, r8
              break;
 800c44a:	e76d      	b.n	800c328 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c44c:	f017 047f 	ands.w	r4, r7, #127	@ 0x7f
 800c450:	d003      	beq.n	800c45a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c452:	f7ff fd2f 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c456:	4644      	mov	r4, r8
                break;
 800c458:	e766      	b.n	800c328 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c45a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c45e:	bf14      	ite	ne
 800c460:	f100 0114 	addne.w	r1, r0, #20
 800c464:	f500 71aa 	addeq.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800c468:	2300      	movs	r3, #0
 800c46a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c46c:	2202      	movs	r2, #2
 800c46e:	f000 f870 	bl	800c552 <USBD_CtlSendData>
              break;
 800c472:	e759      	b.n	800c328 <USBD_StdEPReq+0x22>
              if ((ep_addr & 0x80U) == 0x80U)
 800c474:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c478:	d11a      	bne.n	800c4b0 <USBD_StdEPReq+0x1aa>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c47a:	f007 030f 	and.w	r3, r7, #15
 800c47e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c482:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c486:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800c48a:	b373      	cbz	r3, 800c4ea <USBD_StdEPReq+0x1e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c48c:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c494:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c498:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c49c:	b9cf      	cbnz	r7, 800c4d2 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 f853 	bl	800c552 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ac:	4644      	mov	r4, r8
              break;
 800c4ae:	e73b      	b.n	800c328 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4b0:	f007 030f 	and.w	r3, r7, #15
 800c4b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c4b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c4bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c4be:	b183      	cbz	r3, 800c4e2 <USBD_StdEPReq+0x1dc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4c0:	f007 047f 	and.w	r4, r7, #127	@ 0x7f
 800c4c4:	3401      	adds	r4, #1
 800c4c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c4ca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4ce:	2f80      	cmp	r7, #128	@ 0x80
 800c4d0:	d0e5      	beq.n	800c49e <USBD_StdEPReq+0x198>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f002 f907 	bl	800e6e8 <USBD_LL_IsStallEP>
 800c4da:	b150      	cbz	r0, 800c4f2 <USBD_StdEPReq+0x1ec>
                pep->status = 0x0001U;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	e7df      	b.n	800c4a2 <USBD_StdEPReq+0x19c>
                  USBD_CtlError(pdev, req);
 800c4e2:	f7ff fce7 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e6:	4644      	mov	r4, r8
                  break;
 800c4e8:	e71e      	b.n	800c328 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800c4ea:	f7ff fce3 	bl	800beb4 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ee:	4644      	mov	r4, r8
                  break;
 800c4f0:	e71a      	b.n	800c328 <USBD_StdEPReq+0x22>
                pep->status = 0x0000U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	e7d4      	b.n	800c4a2 <USBD_StdEPReq+0x19c>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4f8:	2400      	movs	r4, #0
 800c4fa:	e715      	b.n	800c328 <USBD_StdEPReq+0x22>
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	e713      	b.n	800c328 <USBD_StdEPReq+0x22>

0800c500 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c500:	b330      	cbz	r0, 800c550 <USBD_GetString+0x50>
{
 800c502:	b410      	push	{r4}
 800c504:	4684      	mov	ip, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c506:	7800      	ldrb	r0, [r0, #0]
 800c508:	b148      	cbz	r0, 800c51e <USBD_GetString+0x1e>
  uint8_t *pbuff = buf;
 800c50a:	4663      	mov	r3, ip
  {
    len++;
    pbuff++;
 800c50c:	4618      	mov	r0, r3
  while (*pbuff != (uint8_t)'\0')
 800c50e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800c512:	2c00      	cmp	r4, #0
 800c514:	d1fa      	bne.n	800c50c <USBD_GetString+0xc>
    len++;
 800c516:	f1cc 0301 	rsb	r3, ip, #1
 800c51a:	4418      	add	r0, r3
 800c51c:	b2c0      	uxtb	r0, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c51e:	0040      	lsls	r0, r0, #1
 800c520:	3002      	adds	r0, #2
 800c522:	8010      	strh	r0, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800c524:	7008      	strb	r0, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c526:	2303      	movs	r3, #3
 800c528:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800c52a:	f89c 2000 	ldrb.w	r2, [ip]
 800c52e:	b162      	cbz	r2, 800c54a <USBD_GetString+0x4a>
 800c530:	4660      	mov	r0, ip
  idx++;
 800c532:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c534:	2400      	movs	r4, #0
    unicode[idx] = *pdesc;
 800c536:	54ca      	strb	r2, [r1, r3]
    idx++;
 800c538:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800c53a:	b2d2      	uxtb	r2, r2
 800c53c:	548c      	strb	r4, [r1, r2]
    idx++;
 800c53e:	3302      	adds	r3, #2
 800c540:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c542:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c546:	2a00      	cmp	r2, #0
 800c548:	d1f5      	bne.n	800c536 <USBD_GetString+0x36>
}
 800c54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	4770      	bx	lr

0800c552 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c552:	b508      	push	{r3, lr}
 800c554:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c556:	2202      	movs	r2, #2
 800c558:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c55c:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c55e:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c560:	460a      	mov	r2, r1
 800c562:	2100      	movs	r1, #0
 800c564:	f002 f92d 	bl	800e7c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c568:	2000      	movs	r0, #0
 800c56a:	bd08      	pop	{r3, pc}

0800c56c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c56c:	b508      	push	{r3, lr}
 800c56e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c570:	460a      	mov	r2, r1
 800c572:	2100      	movs	r1, #0
 800c574:	f002 f925 	bl	800e7c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c578:	2000      	movs	r0, #0
 800c57a:	bd08      	pop	{r3, pc}

0800c57c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c57c:	b508      	push	{r3, lr}
 800c57e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c580:	460a      	mov	r2, r1
 800c582:	2100      	movs	r1, #0
 800c584:	f002 f925 	bl	800e7d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c588:	2000      	movs	r0, #0
 800c58a:	bd08      	pop	{r3, pc}

0800c58c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c58c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c58e:	2204      	movs	r2, #4
 800c590:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c594:	2300      	movs	r3, #0
 800c596:	461a      	mov	r2, r3
 800c598:	4619      	mov	r1, r3
 800c59a:	f002 f912 	bl	800e7c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c59e:	2000      	movs	r0, #0
 800c5a0:	bd08      	pop	{r3, pc}

0800c5a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5a2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5a4:	2205      	movs	r2, #5
 800c5a6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	f002 f90f 	bl	800e7d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	bd08      	pop	{r3, pc}

0800c5b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5b8:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c5ba:	4b04      	ldr	r3, [pc, #16]	@ (800c5cc <disk_status+0x14>)
 800c5bc:	181a      	adds	r2, r3, r0
 800c5be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	7a10      	ldrb	r0, [r2, #8]
 800c5c8:	4798      	blx	r3
  return stat;
}
 800c5ca:	bd08      	pop	{r3, pc}
 800c5cc:	2000c800 	.word	0x2000c800

0800c5d0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800c5d0:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <disk_initialize+0x28>)
 800c5d2:	5c1b      	ldrb	r3, [r3, r0]
 800c5d4:	b973      	cbnz	r3, 800c5f4 <disk_initialize+0x24>
{
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c5da:	4b07      	ldr	r3, [pc, #28]	@ (800c5f8 <disk_initialize+0x28>)
 800c5dc:	181a      	adds	r2, r3, r0
 800c5de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	7a10      	ldrb	r0, [r2, #8]
 800c5e8:	4798      	blx	r3
    if(stat == RES_OK)
 800c5ea:	b910      	cbnz	r0, 800c5f2 <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 800c5ec:	4b02      	ldr	r3, [pc, #8]	@ (800c5f8 <disk_initialize+0x28>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 800c5f2:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800c5f4:	2000      	movs	r0, #0
}
 800c5f6:	4770      	bx	lr
 800c5f8:	2000c800 	.word	0x2000c800

0800c5fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c5fc:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c5fe:	4c05      	ldr	r4, [pc, #20]	@ (800c614 <disk_read+0x18>)
 800c600:	eb04 0c00 	add.w	ip, r4, r0
 800c604:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c608:	6860      	ldr	r0, [r4, #4]
 800c60a:	6884      	ldr	r4, [r0, #8]
 800c60c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c610:	47a0      	blx	r4
  return res;
}
 800c612:	bd10      	pop	{r4, pc}
 800c614:	2000c800 	.word	0x2000c800

0800c618 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c618:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c61a:	4c05      	ldr	r4, [pc, #20]	@ (800c630 <disk_write+0x18>)
 800c61c:	eb04 0c00 	add.w	ip, r4, r0
 800c620:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c624:	6860      	ldr	r0, [r4, #4]
 800c626:	68c4      	ldr	r4, [r0, #12]
 800c628:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c62c:	47a0      	blx	r4
  return res;
}
 800c62e:	bd10      	pop	{r4, pc}
 800c630:	2000c800 	.word	0x2000c800

0800c634 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c634:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c636:	4b05      	ldr	r3, [pc, #20]	@ (800c64c <disk_ioctl+0x18>)
 800c638:	eb03 0c00 	add.w	ip, r3, r0
 800c63c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c648:	4798      	blx	r3
  return res;
}
 800c64a:	bd08      	pop	{r3, pc}
 800c64c:	2000c800 	.word	0x2000c800

0800c650 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800c650:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800c652:	7882      	ldrb	r2, [r0, #2]
 800c654:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800c658:	7843      	ldrb	r3, [r0, #1]
 800c65a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800c65e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800c660:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c664:	4770      	bx	lr

0800c666 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800c666:	7001      	strb	r1, [r0, #0]
 800c668:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800c66a:	7043      	strb	r3, [r0, #1]
 800c66c:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c66e:	7083      	strb	r3, [r0, #2]
 800c670:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 800c672:	70c1      	strb	r1, [r0, #3]
}
 800c674:	4770      	bx	lr

0800c676 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800c676:	b13a      	cbz	r2, 800c688 <mem_cpy+0x12>
 800c678:	3801      	subs	r0, #1
 800c67a:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 800c67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c680:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800c684:	4291      	cmp	r1, r2
 800c686:	d1f9      	bne.n	800c67c <mem_cpy+0x6>
	}
}
 800c688:	4770      	bx	lr

0800c68a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800c68a:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800c68c:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800c690:	4290      	cmp	r0, r2
 800c692:	d1fb      	bne.n	800c68c <mem_set+0x2>
}
 800c694:	4770      	bx	lr
	...

0800c698 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c698:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800c69a:	4b22      	ldr	r3, [pc, #136]	@ (800c724 <chk_lock+0x8c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	b1f3      	cbz	r3, 800c6de <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6a0:	6802      	ldr	r2, [r0, #0]
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d00d      	beq.n	800c6c2 <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6a6:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 800c6a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c724 <chk_lock+0x8c>)
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	b32b      	cbz	r3, 800c6fa <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6ae:	6804      	ldr	r4, [r0, #0]
 800c6b0:	42a3      	cmp	r3, r4
 800c6b2:	d016      	beq.n	800c6e2 <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	d131      	bne.n	800c71c <chk_lock+0x84>
 800c6b8:	2902      	cmp	r1, #2
 800c6ba:	bf14      	ite	ne
 800c6bc:	2012      	movne	r0, #18
 800c6be:	2000      	moveq	r0, #0
 800c6c0:	e029      	b.n	800c716 <chk_lock+0x7e>
				Files[i].clu == dp->obj.sclust &&
 800c6c2:	4b18      	ldr	r3, [pc, #96]	@ (800c724 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	6883      	ldr	r3, [r0, #8]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d001      	beq.n	800c6d0 <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	e7eb      	b.n	800c6a8 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 800c6d0:	4b14      	ldr	r3, [pc, #80]	@ (800c724 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	6943      	ldr	r3, [r0, #20]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d011      	beq.n	800c6fe <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6da:	2200      	movs	r2, #0
 800c6dc:	e7e4      	b.n	800c6a8 <chk_lock+0x10>
			be = 1;
 800c6de:	2201      	movs	r2, #1
 800c6e0:	e7e2      	b.n	800c6a8 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800c6e2:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6e4:	695c      	ldr	r4, [r3, #20]
 800c6e6:	6883      	ldr	r3, [r0, #8]
 800c6e8:	429c      	cmp	r4, r3
 800c6ea:	d1e3      	bne.n	800c6b4 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 800c6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c724 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 800c6ee:	699c      	ldr	r4, [r3, #24]
 800c6f0:	6943      	ldr	r3, [r0, #20]
 800c6f2:	429c      	cmp	r4, r3
 800c6f4:	d1de      	bne.n	800c6b4 <chk_lock+0x1c>
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	e002      	b.n	800c700 <chk_lock+0x68>
			be = 1;
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	e7da      	b.n	800c6b4 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6fe:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c700:	b971      	cbnz	r1, 800c720 <chk_lock+0x88>
 800c702:	4b08      	ldr	r3, [pc, #32]	@ (800c724 <chk_lock+0x8c>)
 800c704:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c708:	8998      	ldrh	r0, [r3, #12]
 800c70a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800c70e:	bf14      	ite	ne
 800c710:	2000      	movne	r0, #0
 800c712:	2001      	moveq	r0, #1
 800c714:	0100      	lsls	r0, r0, #4
}
 800c716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71a:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c71c:	2000      	movs	r0, #0
 800c71e:	e7fa      	b.n	800c716 <chk_lock+0x7e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c720:	2010      	movs	r0, #16
 800c722:	e7f8      	b.n	800c716 <chk_lock+0x7e>
 800c724:	2000c7d8 	.word	0x2000c7d8

0800c728 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c728:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800c72a:	6802      	ldr	r2, [r0, #0]
 800c72c:	4b2b      	ldr	r3, [pc, #172]	@ (800c7dc <inc_lock+0xb4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d00c      	beq.n	800c74e <inc_lock+0x26>
 800c734:	4c29      	ldr	r4, [pc, #164]	@ (800c7dc <inc_lock+0xb4>)
 800c736:	6924      	ldr	r4, [r4, #16]
 800c738:	4294      	cmp	r4, r2
 800c73a:	d024      	beq.n	800c786 <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c73c:	f04f 0c00 	mov.w	ip, #0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d02f      	beq.n	800c7a4 <inc_lock+0x7c>
 800c744:	4b25      	ldr	r3, [pc, #148]	@ (800c7dc <inc_lock+0xb4>)
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	b353      	cbz	r3, 800c7a0 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c74a:	2000      	movs	r0, #0
 800c74c:	e019      	b.n	800c782 <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 800c74e:	4c23      	ldr	r4, [pc, #140]	@ (800c7dc <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800c750:	6865      	ldr	r5, [r4, #4]
 800c752:	6884      	ldr	r4, [r0, #8]
 800c754:	42a5      	cmp	r5, r4
 800c756:	d1ed      	bne.n	800c734 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 800c758:	4c20      	ldr	r4, [pc, #128]	@ (800c7dc <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800c75a:	68a5      	ldr	r5, [r4, #8]
 800c75c:	6944      	ldr	r4, [r0, #20]
 800c75e:	42a5      	cmp	r5, r4
 800c760:	d1e8      	bne.n	800c734 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c762:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c766:	2900      	cmp	r1, #0
 800c768:	d12d      	bne.n	800c7c6 <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c76a:	4b1c      	ldr	r3, [pc, #112]	@ (800c7dc <inc_lock+0xb4>)
 800c76c:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	3301      	adds	r3, #1
 800c774:	b29b      	uxth	r3, r3
 800c776:	4a19      	ldr	r2, [pc, #100]	@ (800c7dc <inc_lock+0xb4>)
 800c778:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800c77c:	8193      	strh	r3, [r2, #12]

	return i + 1;
 800c77e:	f10c 0001 	add.w	r0, ip, #1
}
 800c782:	bc30      	pop	{r4, r5}
 800c784:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 800c786:	4c15      	ldr	r4, [pc, #84]	@ (800c7dc <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800c788:	6965      	ldr	r5, [r4, #20]
 800c78a:	6884      	ldr	r4, [r0, #8]
 800c78c:	42a5      	cmp	r5, r4
 800c78e:	d1d5      	bne.n	800c73c <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 800c790:	4c12      	ldr	r4, [pc, #72]	@ (800c7dc <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800c792:	69a5      	ldr	r5, [r4, #24]
 800c794:	6944      	ldr	r4, [r0, #20]
 800c796:	42a5      	cmp	r5, r4
 800c798:	d1d0      	bne.n	800c73c <inc_lock+0x14>
 800c79a:	f04f 0c01 	mov.w	ip, #1
 800c79e:	e7e2      	b.n	800c766 <inc_lock+0x3e>
 800c7a0:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 800c7a4:	4d0d      	ldr	r5, [pc, #52]	@ (800c7dc <inc_lock+0xb4>)
 800c7a6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800c7aa:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800c7ae:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800c7b0:	6882      	ldr	r2, [r0, #8]
 800c7b2:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 800c7b4:	6942      	ldr	r2, [r0, #20]
 800c7b6:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	d0d4      	beq.n	800c76a <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c7c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7c4:	e7d7      	b.n	800c776 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c7c6:	4b05      	ldr	r3, [pc, #20]	@ (800c7dc <inc_lock+0xb4>)
 800c7c8:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800c7cc:	899b      	ldrh	r3, [r3, #12]
 800c7ce:	b913      	cbnz	r3, 800c7d6 <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c7d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c7d4:	e7cf      	b.n	800c776 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e7d3      	b.n	800c782 <inc_lock+0x5a>
 800c7da:	bf00      	nop
 800c7dc:	2000c7d8 	.word	0x2000c7d8

0800c7e0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c7e0:	3801      	subs	r0, #1
 800c7e2:	2801      	cmp	r0, #1
 800c7e4:	d810      	bhi.n	800c808 <dec_lock+0x28>
		n = Files[i].ctr;
 800c7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <dec_lock+0x40>)
 800c7e8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c7ec:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c7ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7f2:	d00b      	beq.n	800c80c <dec_lock+0x2c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800c7f4:	b17b      	cbz	r3, 800c816 <dec_lock+0x36>
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800c7fa:	4a09      	ldr	r2, [pc, #36]	@ (800c820 <dec_lock+0x40>)
 800c7fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800c800:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c802:	b143      	cbz	r3, 800c816 <dec_lock+0x36>
		res = FR_OK;
 800c804:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 800c806:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c808:	2002      	movs	r0, #2
 800c80a:	4770      	bx	lr
		Files[i].ctr = n;
 800c80c:	4b04      	ldr	r3, [pc, #16]	@ (800c820 <dec_lock+0x40>)
 800c80e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c812:	2200      	movs	r2, #0
 800c814:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c816:	0103      	lsls	r3, r0, #4
 800c818:	2000      	movs	r0, #0
 800c81a:	4a01      	ldr	r2, [pc, #4]	@ (800c820 <dec_lock+0x40>)
 800c81c:	50d0      	str	r0, [r2, r3]
 800c81e:	4770      	bx	lr
 800c820:	2000c7d8 	.word	0x2000c7d8

0800c824 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <clear_lock+0x24>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4298      	cmp	r0, r3
 800c82a:	d004      	beq.n	800c836 <clear_lock+0x12>
 800c82c:	4b06      	ldr	r3, [pc, #24]	@ (800c848 <clear_lock+0x24>)
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	4283      	cmp	r3, r0
 800c832:	d004      	beq.n	800c83e <clear_lock+0x1a>
	}
}
 800c834:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c836:	4b04      	ldr	r3, [pc, #16]	@ (800c848 <clear_lock+0x24>)
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	e7f6      	b.n	800c82c <clear_lock+0x8>
 800c83e:	4b02      	ldr	r3, [pc, #8]	@ (800c848 <clear_lock+0x24>)
 800c840:	2200      	movs	r2, #0
 800c842:	611a      	str	r2, [r3, #16]
}
 800c844:	e7f6      	b.n	800c834 <clear_lock+0x10>
 800c846:	bf00      	nop
 800c848:	2000c7d8 	.word	0x2000c7d8

0800c84c <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800c84c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c84e:	6983      	ldr	r3, [r0, #24]
 800c850:	3b02      	subs	r3, #2
 800c852:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800c854:	bf83      	ittte	hi
 800c856:	8943      	ldrhhi	r3, [r0, #10]
 800c858:	6ac0      	ldrhi	r0, [r0, #44]	@ 0x2c
 800c85a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c85e:	2000      	movls	r0, #0
}
 800c860:	4770      	bx	lr

0800c862 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c862:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c864:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c866:	0a49      	lsrs	r1, r1, #9
 800c868:	6800      	ldr	r0, [r0, #0]
 800c86a:	8940      	ldrh	r0, [r0, #10]
 800c86c:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c870:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c872:	b148      	cbz	r0, 800c888 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c874:	4281      	cmp	r1, r0
 800c876:	d305      	bcc.n	800c884 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 800c878:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c87a:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c87e:	2800      	cmp	r0, #0
 800c880:	d1f8      	bne.n	800c874 <clmt_clust+0x12>
 800c882:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 800c884:	6858      	ldr	r0, [r3, #4]
 800c886:	4408      	add	r0, r1
}
 800c888:	4770      	bx	lr

0800c88a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c88a:	4602      	mov	r2, r0
	BYTE sum = 0;
	UINT n = 11;
 800c88c:	f100 0c0b 	add.w	ip, r0, #11
	BYTE sum = 0;
 800c890:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c892:	01c3      	lsls	r3, r0, #7
 800c894:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800c898:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c89c:	fa51 f383 	uxtab	r3, r1, r3
 800c8a0:	b2d8      	uxtb	r0, r3
	} while (--n);
 800c8a2:	4562      	cmp	r2, ip
 800c8a4:	d1f5      	bne.n	800c892 <sum_sfn+0x8>
	return sum;
}
 800c8a6:	4770      	bx	lr

0800c8a8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8a8:	6801      	ldr	r1, [r0, #0]
 800c8aa:	b1d1      	cbz	r1, 800c8e2 <get_ldnumber+0x3a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8ac:	f891 c000 	ldrb.w	ip, [r1]
 800c8b0:	f1bc 0f1f 	cmp.w	ip, #31
 800c8b4:	d909      	bls.n	800c8ca <get_ldnumber+0x22>
 800c8b6:	460a      	mov	r2, r1
 800c8b8:	4663      	mov	r3, ip
 800c8ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8bc:	d014      	beq.n	800c8e8 <get_ldnumber+0x40>
 800c8be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c8c2:	2b1f      	cmp	r3, #31
 800c8c4:	d8f9      	bhi.n	800c8ba <get_ldnumber+0x12>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	4770      	bx	lr
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	4770      	bx	lr
			i = *tp++ - '0';
 800c8ce:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c8d0:	428a      	cmp	r2, r1
 800c8d2:	d002      	beq.n	800c8da <get_ldnumber+0x32>
	int vol = -1;
 800c8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d8:	4770      	bx	lr
					*path = ++tt;
 800c8da:	3201      	adds	r2, #1
 800c8dc:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4770      	bx	lr
	int vol = -1;
 800c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e6:	4770      	bx	lr
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c8e8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c8ec:	d0ef      	beq.n	800c8ce <get_ldnumber+0x26>
	int vol = -1;
 800c8ee:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 800c8f2:	4770      	bx	lr

0800c8f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	b198      	cbz	r0, 800c924 <validate+0x30>
 800c8fc:	6803      	ldr	r3, [r0, #0]
 800c8fe:	b19b      	cbz	r3, 800c928 <validate+0x34>
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	b1a2      	cbz	r2, 800c92e <validate+0x3a>
 800c904:	8881      	ldrh	r1, [r0, #4]
 800c906:	88da      	ldrh	r2, [r3, #6]
 800c908:	4291      	cmp	r1, r2
 800c90a:	d003      	beq.n	800c914 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800c90c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c90e:	2400      	movs	r4, #0
 800c910:	602c      	str	r4, [r5, #0]
	return res;
}
 800c912:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c914:	7858      	ldrb	r0, [r3, #1]
 800c916:	f7ff fe4f 	bl	800c5b8 <disk_status>
 800c91a:	f010 0001 	ands.w	r0, r0, #1
 800c91e:	d109      	bne.n	800c934 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c920:	6824      	ldr	r4, [r4, #0]
 800c922:	e7f5      	b.n	800c910 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c924:	2009      	movs	r0, #9
 800c926:	e7f3      	b.n	800c910 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c928:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800c92a:	2009      	movs	r0, #9
 800c92c:	e7f0      	b.n	800c910 <validate+0x1c>
 800c92e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c930:	2400      	movs	r4, #0
 800c932:	e7ed      	b.n	800c910 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c934:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c936:	2400      	movs	r4, #0
 800c938:	e7ea      	b.n	800c910 <validate+0x1c>

0800c93a <sync_window>:
{
 800c93a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c93e:	78c5      	ldrb	r5, [r0, #3]
 800c940:	b915      	cbnz	r5, 800c948 <sync_window+0xe>
}
 800c942:	4628      	mov	r0, r5
 800c944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c948:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800c94a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c94c:	f100 0834 	add.w	r8, r0, #52	@ 0x34
 800c950:	2301      	movs	r3, #1
 800c952:	4632      	mov	r2, r6
 800c954:	4641      	mov	r1, r8
 800c956:	7840      	ldrb	r0, [r0, #1]
 800c958:	f7ff fe5e 	bl	800c618 <disk_write>
 800c95c:	4605      	mov	r5, r0
 800c95e:	b9b8      	cbnz	r0, 800c990 <sync_window+0x56>
			fs->wflag = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c964:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c966:	1af3      	subs	r3, r6, r3
 800c968:	69e2      	ldr	r2, [r4, #28]
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d2e9      	bcs.n	800c942 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c96e:	78a7      	ldrb	r7, [r4, #2]
 800c970:	2f01      	cmp	r7, #1
 800c972:	d9e6      	bls.n	800c942 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 800c974:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 800c978:	69e3      	ldr	r3, [r4, #28]
 800c97a:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800c97c:	464b      	mov	r3, r9
 800c97e:	4632      	mov	r2, r6
 800c980:	4641      	mov	r1, r8
 800c982:	7860      	ldrb	r0, [r4, #1]
 800c984:	f7ff fe48 	bl	800c618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c988:	3f01      	subs	r7, #1
 800c98a:	2f01      	cmp	r7, #1
 800c98c:	d1f4      	bne.n	800c978 <sync_window+0x3e>
 800c98e:	e7d8      	b.n	800c942 <sync_window+0x8>
			res = FR_DISK_ERR;
 800c990:	2501      	movs	r5, #1
 800c992:	e7d6      	b.n	800c942 <sync_window+0x8>

0800c994 <move_window>:
{
 800c994:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c996:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c998:	428b      	cmp	r3, r1
 800c99a:	d101      	bne.n	800c9a0 <move_window+0xc>
	FRESULT res = FR_OK;
 800c99c:	2000      	movs	r0, #0
}
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800c9a4:	f7ff ffc9 	bl	800c93a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1f8      	bne.n	800c99e <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 800c9b4:	7860      	ldrb	r0, [r4, #1]
 800c9b6:	f7ff fe21 	bl	800c5fc <disk_read>
				res = FR_DISK_ERR;
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	bf1c      	itt	ne
 800c9be:	2001      	movne	r0, #1
 800c9c0:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 800c9c4:	6325      	str	r5, [r4, #48]	@ 0x30
 800c9c6:	e7ea      	b.n	800c99e <move_window+0xa>

0800c9c8 <get_fileinfo>:
{
 800c9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 800c9cc:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c9d4:	69c3      	ldr	r3, [r0, #28]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d079      	beq.n	800cace <get_fileinfo+0x106>
 800c9da:	4605      	mov	r5, r0
 800c9dc:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c9de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e4:	d01d      	beq.n	800ca22 <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c9e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9ea:	8818      	ldrh	r0, [r3, #0]
 800c9ec:	b198      	cbz	r0, 800ca16 <get_fileinfo+0x4e>
 800c9ee:	f101 0715 	add.w	r7, r1, #21
			i = j = 0;
 800c9f2:	2600      	movs	r6, #0
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c9f4:	46b1      	mov	r9, r6
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f001 fbe8 	bl	800e1cc <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c9fc:	b168      	cbz	r0, 800ca1a <get_fileinfo+0x52>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c9fe:	2eff      	cmp	r6, #255	@ 0xff
 800ca00:	d015      	beq.n	800ca2e <get_fileinfo+0x66>
				fno->fname[i++] = (TCHAR)w;
 800ca02:	3601      	adds	r6, #1
 800ca04:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca0c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d1f0      	bne.n	800c9f6 <get_fileinfo+0x2e>
 800ca14:	e002      	b.n	800ca1c <get_fileinfo+0x54>
			i = j = 0;
 800ca16:	2600      	movs	r6, #0
 800ca18:	e000      	b.n	800ca1c <get_fileinfo+0x54>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ca1a:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ca1c:	4426      	add	r6, r4
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ca22:	7da0      	ldrb	r0, [r4, #22]
	i = j = 0;
 800ca24:	f04f 0c00 	mov.w	ip, #0
 800ca28:	4662      	mov	r2, ip
			fno->altname[j++] = '.';
 800ca2a:	262e      	movs	r6, #46	@ 0x2e
 800ca2c:	e013      	b.n	800ca56 <get_fileinfo+0x8e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ca2e:	2600      	movs	r6, #0
 800ca30:	e7f4      	b.n	800ca1c <get_fileinfo+0x54>
			if (!lfv) fno->fname[j] = '.';
 800ca32:	b918      	cbnz	r0, 800ca3c <get_fileinfo+0x74>
 800ca34:	eb04 010c 	add.w	r1, r4, ip
 800ca38:	272e      	movs	r7, #46	@ 0x2e
 800ca3a:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800ca3c:	eb04 010c 	add.w	r1, r4, ip
 800ca40:	724e      	strb	r6, [r1, #9]
 800ca42:	f10c 0c01 	add.w	ip, ip, #1
 800ca46:	e010      	b.n	800ca6a <get_fileinfo+0xa2>
			fno->fname[j] = c;
 800ca48:	eb04 010c 	add.w	r1, r4, ip
 800ca4c:	758b      	strb	r3, [r1, #22]
		j++;
 800ca4e:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800ca52:	2a0b      	cmp	r2, #11
 800ca54:	d01e      	beq.n	800ca94 <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[i++];
 800ca56:	6a29      	ldr	r1, [r5, #32]
 800ca58:	5c8b      	ldrb	r3, [r1, r2]
 800ca5a:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d0f8      	beq.n	800ca52 <get_fileinfo+0x8a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	bf08      	it	eq
 800ca64:	23e5      	moveq	r3, #229	@ 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800ca66:	2a09      	cmp	r2, #9
 800ca68:	d0e3      	beq.n	800ca32 <get_fileinfo+0x6a>
		fno->altname[j] = c;
 800ca6a:	eb04 010c 	add.w	r1, r4, ip
 800ca6e:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1ec      	bne.n	800ca4e <get_fileinfo+0x86>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ca74:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 800ca78:	b2c9      	uxtb	r1, r1
 800ca7a:	2919      	cmp	r1, #25
 800ca7c:	d8e4      	bhi.n	800ca48 <get_fileinfo+0x80>
 800ca7e:	6a29      	ldr	r1, [r5, #32]
 800ca80:	7b0f      	ldrb	r7, [r1, #12]
 800ca82:	2a09      	cmp	r2, #9
 800ca84:	bf34      	ite	cc
 800ca86:	2108      	movcc	r1, #8
 800ca88:	2110      	movcs	r1, #16
 800ca8a:	420f      	tst	r7, r1
				c += 0x20;			/* To lower */
 800ca8c:	bf1c      	itt	ne
 800ca8e:	3320      	addne	r3, #32
 800ca90:	b2db      	uxtbne	r3, r3
 800ca92:	e7d9      	b.n	800ca48 <get_fileinfo+0x80>
	if (!lfv) {
 800ca94:	b940      	cbnz	r0, 800caa8 <get_fileinfo+0xe0>
		fno->fname[j] = 0;
 800ca96:	eb04 030c 	add.w	r3, r4, ip
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	759a      	strb	r2, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ca9e:	6a2b      	ldr	r3, [r5, #32]
 800caa0:	7b1b      	ldrb	r3, [r3, #12]
 800caa2:	4293      	cmp	r3, r2
 800caa4:	bf08      	it	eq
 800caa6:	4694      	moveq	ip, r2
	fno->altname[j] = 0;	/* Terminate the SFN */
 800caa8:	44a4      	add	ip, r4
 800caaa:	2300      	movs	r3, #0
 800caac:	f88c 3009 	strb.w	r3, [ip, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cab0:	6a2b      	ldr	r3, [r5, #32]
 800cab2:	7adb      	ldrb	r3, [r3, #11]
 800cab4:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cab6:	6a28      	ldr	r0, [r5, #32]
 800cab8:	301c      	adds	r0, #28
 800caba:	f7ff fdc9 	bl	800c650 <ld_dword>
 800cabe:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cac0:	6a28      	ldr	r0, [r5, #32]
 800cac2:	3016      	adds	r0, #22
 800cac4:	f7ff fdc4 	bl	800c650 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cac8:	80e0      	strh	r0, [r4, #6]
 800caca:	0c00      	lsrs	r0, r0, #16
 800cacc:	80a0      	strh	r0, [r4, #4]
}
 800cace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800cad4 <sync_fs>:
{
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4604      	mov	r4, r0
	res = sync_window(fs);
 800cad8:	f7ff ff2f 	bl	800c93a <sync_window>
	if (res == FR_OK) {
 800cadc:	b950      	cbnz	r0, 800caf4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cade:	7823      	ldrb	r3, [r4, #0]
 800cae0:	2b03      	cmp	r3, #3
 800cae2:	d008      	beq.n	800caf6 <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cae4:	2200      	movs	r2, #0
 800cae6:	4611      	mov	r1, r2
 800cae8:	7860      	ldrb	r0, [r4, #1]
 800caea:	f7ff fda3 	bl	800c634 <disk_ioctl>
 800caee:	3800      	subs	r0, #0
 800caf0:	bf18      	it	ne
 800caf2:	2001      	movne	r0, #1
}
 800caf4:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800caf6:	7923      	ldrb	r3, [r4, #4]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d1f3      	bne.n	800cae4 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 800cafc:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800cb00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb04:	2100      	movs	r1, #0
 800cb06:	4628      	mov	r0, r5
 800cb08:	f7ff fdbf 	bl	800c68a <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800cb0c:	2355      	movs	r3, #85	@ 0x55
 800cb0e:	f884 3232 	strb.w	r3, [r4, #562]	@ 0x232
	*ptr++ = (BYTE)val;
 800cb12:	23aa      	movs	r3, #170	@ 0xaa
 800cb14:	f884 3233 	strb.w	r3, [r4, #563]	@ 0x233
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb18:	490e      	ldr	r1, [pc, #56]	@ (800cb54 <sync_fs+0x80>)
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f7ff fda3 	bl	800c666 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb20:	490d      	ldr	r1, [pc, #52]	@ (800cb58 <sync_fs+0x84>)
 800cb22:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800cb26:	f7ff fd9e 	bl	800c666 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb2a:	6961      	ldr	r1, [r4, #20]
 800cb2c:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800cb30:	f7ff fd99 	bl	800c666 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb34:	6921      	ldr	r1, [r4, #16]
 800cb36:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800cb3a:	f7ff fd94 	bl	800c666 <st_dword>
			fs->winsect = fs->volbase + 1;
 800cb3e:	6a22      	ldr	r2, [r4, #32]
 800cb40:	3201      	adds	r2, #1
 800cb42:	6322      	str	r2, [r4, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb44:	2301      	movs	r3, #1
 800cb46:	4629      	mov	r1, r5
 800cb48:	7860      	ldrb	r0, [r4, #1]
 800cb4a:	f7ff fd65 	bl	800c618 <disk_write>
			fs->fsi_flag = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	7123      	strb	r3, [r4, #4]
 800cb52:	e7c7      	b.n	800cae4 <sync_fs+0x10>
 800cb54:	41615252 	.word	0x41615252
 800cb58:	61417272 	.word	0x61417272

0800cb5c <put_fat>:
{
 800cb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb60:	2901      	cmp	r1, #1
 800cb62:	f240 8082 	bls.w	800cc6a <put_fat+0x10e>
 800cb66:	4606      	mov	r6, r0
 800cb68:	460c      	mov	r4, r1
 800cb6a:	4615      	mov	r5, r2
 800cb6c:	6983      	ldr	r3, [r0, #24]
 800cb6e:	428b      	cmp	r3, r1
 800cb70:	d97f      	bls.n	800cc72 <put_fat+0x116>
		switch (fs->fs_type) {
 800cb72:	7803      	ldrb	r3, [r0, #0]
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d049      	beq.n	800cc0c <put_fat+0xb0>
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d05b      	beq.n	800cc34 <put_fat+0xd8>
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d17a      	bne.n	800cc76 <put_fat+0x11a>
			bc = (UINT)clst; bc += bc / 2;
 800cb80:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb84:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800cb86:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800cb8a:	f7ff ff03 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800cb8e:	4607      	mov	r7, r0
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d16b      	bne.n	800cc6c <put_fat+0x110>
			p = fs->win + bc++ % SS(fs);
 800cb94:	f106 0934 	add.w	r9, r6, #52	@ 0x34
 800cb98:	f108 0a01 	add.w	sl, r8, #1
 800cb9c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cba0:	f014 0f01 	tst.w	r4, #1
 800cba4:	d01a      	beq.n	800cbdc <put_fat+0x80>
 800cba6:	f819 3008 	ldrb.w	r3, [r9, r8]
 800cbaa:	f003 030f 	and.w	r3, r3, #15
 800cbae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800cbb2:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbba:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800cbbc:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f7ff fee7 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d157      	bne.n	800cc7a <put_fat+0x11e>
			p = fs->win + bc % SS(fs);
 800cbca:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800cbce:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cbd0:	f3c5 1207 	ubfx	r2, r5, #4, #8
 800cbd4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	70f3      	strb	r3, [r6, #3]
			break;
 800cbda:	e047      	b.n	800cc6c <put_fat+0x110>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cbdc:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbe4:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800cbe6:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800cbea:	4630      	mov	r0, r6
 800cbec:	f7ff fed2 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d144      	bne.n	800cc7e <put_fat+0x122>
			p = fs->win + bc % SS(fs);
 800cbf4:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800cbf8:	eb09 030a 	add.w	r3, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cbfc:	f3c5 2203 	ubfx	r2, r5, #8, #4
 800cc00:	f819 100a 	ldrb.w	r1, [r9, sl]
 800cc04:	f021 010f 	bic.w	r1, r1, #15
 800cc08:	430a      	orrs	r2, r1
 800cc0a:	e7e3      	b.n	800cbd4 <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cc0c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800cc0e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800cc12:	f7ff febf 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800cc16:	4607      	mov	r7, r0
 800cc18:	bb40      	cbnz	r0, 800cc6c <put_fat+0x110>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cc1a:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800cc1e:	0064      	lsls	r4, r4, #1
 800cc20:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800cc24:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800cc26:	551d      	strb	r5, [r3, r4]
 800cc28:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 800cc2c:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	70f3      	strb	r3, [r6, #3]
			break;
 800cc32:	e01b      	b.n	800cc6c <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc34:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800cc36:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800cc3a:	f7ff feab 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800cc3e:	4607      	mov	r7, r0
 800cc40:	b9a0      	cbnz	r0, 800cc6c <put_fat+0x110>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc42:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 800cc46:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800cc4a:	00a4      	lsls	r4, r4, #2
 800cc4c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800cc50:	441c      	add	r4, r3
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7ff fcfc 	bl	800c650 <ld_dword>
 800cc58:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc5c:	4329      	orrs	r1, r5
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f7ff fd01 	bl	800c666 <st_dword>
			fs->wflag = 1;
 800cc64:	2301      	movs	r3, #1
 800cc66:	70f3      	strb	r3, [r6, #3]
			break;
 800cc68:	e000      	b.n	800cc6c <put_fat+0x110>
	FRESULT res = FR_INT_ERR;
 800cc6a:	2702      	movs	r7, #2
}
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 800cc72:	2702      	movs	r7, #2
 800cc74:	e7fa      	b.n	800cc6c <put_fat+0x110>
		switch (fs->fs_type) {
 800cc76:	2702      	movs	r7, #2
 800cc78:	e7f8      	b.n	800cc6c <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	e7f6      	b.n	800cc6c <put_fat+0x110>
 800cc7e:	4607      	mov	r7, r0
	return res;
 800cc80:	e7f4      	b.n	800cc6c <put_fat+0x110>

0800cc82 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800cc82:	768a      	strb	r2, [r1, #26]
 800cc84:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 800cc88:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800cc8a:	7803      	ldrb	r3, [r0, #0]
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d000      	beq.n	800cc92 <st_clust+0x10>
}
 800cc90:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cc92:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800cc94:	750a      	strb	r2, [r1, #20]
 800cc96:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800cc98:	754a      	strb	r2, [r1, #21]
}
 800cc9a:	e7f9      	b.n	800cc90 <st_clust+0xe>

0800cc9c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc9c:	2901      	cmp	r1, #1
 800cc9e:	d956      	bls.n	800cd4e <get_fat+0xb2>
{
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800cca4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cca6:	69ab      	ldr	r3, [r5, #24]
 800cca8:	428b      	cmp	r3, r1
 800ccaa:	d952      	bls.n	800cd52 <get_fat+0xb6>
		switch (fs->fs_type) {
 800ccac:	782b      	ldrb	r3, [r5, #0]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d02a      	beq.n	800cd08 <get_fat+0x6c>
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d039      	beq.n	800cd2a <get_fat+0x8e>
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d14d      	bne.n	800cd56 <get_fat+0xba>
			bc = (UINT)clst; bc += bc / 2;
 800ccba:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccbe:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800ccc0:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f7ff fe65 	bl	800c994 <move_window>
 800ccca:	b110      	cbz	r0, 800ccd2 <get_fat+0x36>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	e040      	b.n	800cd54 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800ccd2:	1c77      	adds	r7, r6, #1
 800ccd4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800ccd8:	442e      	add	r6, r5
 800ccda:	f896 6034 	ldrb.w	r6, [r6, #52]	@ 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ccde:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800cce0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7ff fe55 	bl	800c994 <move_window>
 800ccea:	bbb0      	cbnz	r0, 800cd5a <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccec:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800ccf0:	442f      	add	r7, r5
 800ccf2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ccf6:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccfa:	f014 0f01 	tst.w	r4, #1
 800ccfe:	bf14      	ite	ne
 800cd00:	0900      	lsrne	r0, r0, #4
 800cd02:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 800cd06:	e025      	b.n	800cd54 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd08:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800cd0a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f7ff fe40 	bl	800c994 <move_window>
 800cd14:	bb20      	cbnz	r0, 800cd60 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd16:	3534      	adds	r5, #52	@ 0x34
 800cd18:	0064      	lsls	r4, r4, #1
 800cd1a:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 800cd1e:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800cd20:	785b      	ldrb	r3, [r3, #1]
 800cd22:	5d28      	ldrb	r0, [r5, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd24:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 800cd28:	e014      	b.n	800cd54 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd2a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800cd2c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800cd30:	4628      	mov	r0, r5
 800cd32:	f7ff fe2f 	bl	800c994 <move_window>
 800cd36:	b9b0      	cbnz	r0, 800cd66 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd38:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 800cd3c:	00a4      	lsls	r4, r4, #2
 800cd3e:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800cd42:	4420      	add	r0, r4
 800cd44:	f7ff fc84 	bl	800c650 <ld_dword>
 800cd48:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 800cd4c:	e002      	b.n	800cd54 <get_fat+0xb8>
		val = 1;	/* Internal error */
 800cd4e:	2001      	movs	r0, #1
}
 800cd50:	4770      	bx	lr
		val = 1;	/* Internal error */
 800cd52:	2001      	movs	r0, #1
}
 800cd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 800cd56:	2001      	movs	r0, #1
 800cd58:	e7fc      	b.n	800cd54 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5e:	e7f9      	b.n	800cd54 <get_fat+0xb8>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	e7f6      	b.n	800cd54 <get_fat+0xb8>
 800cd66:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 800cd6a:	e7f3      	b.n	800cd54 <get_fat+0xb8>

0800cd6c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd6c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800cd70:	d245      	bcs.n	800cdfe <dir_sdi+0x92>
{
 800cd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd76:	4606      	mov	r6, r0
 800cd78:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd7a:	f011 0f1f 	tst.w	r1, #31
 800cd7e:	d140      	bne.n	800ce02 <dir_sdi+0x96>
	FATFS *fs = dp->obj.fs;
 800cd80:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800cd84:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd86:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd88:	b93c      	cbnz	r4, 800cd9a <dir_sdi+0x2e>
 800cd8a:	f898 3000 	ldrb.w	r3, [r8]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d91f      	bls.n	800cdd2 <dir_sdi+0x66>
		clst = fs->dirbase;
 800cd92:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd96:	b1e3      	cbz	r3, 800cdd2 <dir_sdi+0x66>
 800cd98:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cd9a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800cd9e:	025f      	lsls	r7, r3, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800cda0:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 800cda4:	d310      	bcc.n	800cdc8 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cda6:	4621      	mov	r1, r4
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7ff ff77 	bl	800cc9c <get_fat>
 800cdae:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cdb4:	d029      	beq.n	800ce0a <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cdb6:	2801      	cmp	r0, #1
 800cdb8:	d929      	bls.n	800ce0e <dir_sdi+0xa2>
 800cdba:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cdbe:	4283      	cmp	r3, r0
 800cdc0:	d927      	bls.n	800ce12 <dir_sdi+0xa6>
			ofs -= csz;
 800cdc2:	1bed      	subs	r5, r5, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 800cdc4:	42af      	cmp	r7, r5
 800cdc6:	d9ee      	bls.n	800cda6 <dir_sdi+0x3a>
		dp->sect = clust2sect(fs, clst);
 800cdc8:	4621      	mov	r1, r4
 800cdca:	4640      	mov	r0, r8
 800cdcc:	f7ff fd3e 	bl	800c84c <clust2sect>
 800cdd0:	e006      	b.n	800cde0 <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cdd2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cdd6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800cdda:	d914      	bls.n	800ce06 <dir_sdi+0x9a>
		dp->sect = fs->dirbase;
 800cddc:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 800cde0:	61f0      	str	r0, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800cde2:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cde4:	b1b8      	cbz	r0, 800ce16 <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cde6:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 800cdea:	61f0      	str	r0, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cdec:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 800cdf0:	f3c5 0108 	ubfx	r1, r5, #0, #9
 800cdf4:	4441      	add	r1, r8
 800cdf6:	6231      	str	r1, [r6, #32]
	return FR_OK;
 800cdf8:	2000      	movs	r0, #0
}
 800cdfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 800cdfe:	2002      	movs	r0, #2
}
 800ce00:	4770      	bx	lr
		return FR_INT_ERR;
 800ce02:	2002      	movs	r0, #2
 800ce04:	e7f9      	b.n	800cdfa <dir_sdi+0x8e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ce06:	2002      	movs	r0, #2
 800ce08:	e7f7      	b.n	800cdfa <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	e7f5      	b.n	800cdfa <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ce0e:	2002      	movs	r0, #2
 800ce10:	e7f3      	b.n	800cdfa <dir_sdi+0x8e>
 800ce12:	2002      	movs	r0, #2
 800ce14:	e7f1      	b.n	800cdfa <dir_sdi+0x8e>
	if (!dp->sect) return FR_INT_ERR;
 800ce16:	2002      	movs	r0, #2
 800ce18:	e7ef      	b.n	800cdfa <dir_sdi+0x8e>

0800ce1a <create_chain>:
{
 800ce1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1e:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800ce20:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800ce22:	4688      	mov	r8, r1
 800ce24:	b939      	cbnz	r1, 800ce36 <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce26:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce28:	b195      	cbz	r5, 800ce50 <create_chain+0x36>
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	42ab      	cmp	r3, r5
 800ce2e:	bf98      	it	ls
 800ce30:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 800ce32:	462c      	mov	r4, r5
 800ce34:	e01b      	b.n	800ce6e <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce36:	f7ff ff31 	bl	800cc9c <get_fat>
 800ce3a:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce3c:	2801      	cmp	r0, #1
 800ce3e:	d946      	bls.n	800cece <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce40:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce44:	d048      	beq.n	800ced8 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce46:	69ba      	ldr	r2, [r7, #24]
 800ce48:	4282      	cmp	r2, r0
 800ce4a:	d845      	bhi.n	800ced8 <create_chain+0xbe>
		scl = clst;
 800ce4c:	4645      	mov	r5, r8
 800ce4e:	e7f0      	b.n	800ce32 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce50:	2501      	movs	r5, #1
 800ce52:	e7ee      	b.n	800ce32 <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce54:	4621      	mov	r1, r4
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff20 	bl	800cc9c <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	b170      	cbz	r0, 800ce7e <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce60:	2801      	cmp	r0, #1
 800ce62:	d039      	beq.n	800ced8 <create_chain+0xbe>
 800ce64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce68:	d036      	beq.n	800ced8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce6a:	42ac      	cmp	r4, r5
 800ce6c:	d033      	beq.n	800ced6 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 800ce6e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	d8ee      	bhi.n	800ce54 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800ce76:	2d01      	cmp	r5, #1
 800ce78:	d92b      	bls.n	800ced2 <create_chain+0xb8>
				ncl = 2;
 800ce7a:	2402      	movs	r4, #2
 800ce7c:	e7ea      	b.n	800ce54 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	4621      	mov	r1, r4
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7ff fe69 	bl	800cb5c <put_fat>
		if (res == FR_OK && clst != 0) {
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	b9c8      	cbnz	r0, 800cec2 <create_chain+0xa8>
 800ce8e:	f1b8 0f00 	cmp.w	r8, #0
 800ce92:	d10e      	bne.n	800ceb2 <create_chain+0x98>
		fs->last_clst = ncl;
 800ce94:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	3b02      	subs	r3, #2
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	bf9c      	itt	ls
 800cea0:	f102 32ff 	addls.w	r2, r2, #4294967295
 800cea4:	617a      	strls	r2, [r7, #20]
		fs->fsi_flag |= 1;
 800cea6:	793b      	ldrb	r3, [r7, #4]
 800cea8:	f043 0301 	orr.w	r3, r3, #1
 800ceac:	713b      	strb	r3, [r7, #4]
 800ceae:	4623      	mov	r3, r4
 800ceb0:	e012      	b.n	800ced8 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ceb2:	4622      	mov	r2, r4
 800ceb4:	4641      	mov	r1, r8
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	f7ff fe50 	bl	800cb5c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cebc:	4603      	mov	r3, r0
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d0e8      	beq.n	800ce94 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	bf14      	ite	ne
 800cec6:	2301      	movne	r3, #1
 800cec8:	f04f 33ff 	moveq.w	r3, #4294967295
 800cecc:	e004      	b.n	800ced8 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cece:	2301      	movs	r3, #1
 800ced0:	e002      	b.n	800ced8 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 800ced2:	2300      	movs	r3, #0
 800ced4:	e000      	b.n	800ced8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cede <remove_chain>:
{
 800cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee2:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800cee4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cee6:	2901      	cmp	r1, #1
 800cee8:	d931      	bls.n	800cf4e <remove_chain+0x70>
 800ceea:	4606      	mov	r6, r0
 800ceec:	4611      	mov	r1, r2
 800ceee:	69ab      	ldr	r3, [r5, #24]
 800cef0:	42a3      	cmp	r3, r4
 800cef2:	d92f      	bls.n	800cf54 <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cef4:	b90a      	cbnz	r2, 800cefa <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cef6:	2700      	movs	r7, #0
 800cef8:	e00a      	b.n	800cf10 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cefa:	f04f 32ff 	mov.w	r2, #4294967295
 800cefe:	4628      	mov	r0, r5
 800cf00:	f7ff fe2c 	bl	800cb5c <put_fat>
		if (res != FR_OK) return res;
 800cf04:	4684      	mov	ip, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d0f5      	beq.n	800cef6 <remove_chain+0x18>
 800cf0a:	e025      	b.n	800cf58 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cf0c:	42a2      	cmp	r2, r4
 800cf0e:	d923      	bls.n	800cf58 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cf10:	46a0      	mov	r8, r4
 800cf12:	4621      	mov	r1, r4
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7ff fec1 	bl	800cc9c <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	b1f8      	cbz	r0, 800cf5e <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cf1e:	2801      	cmp	r0, #1
 800cf20:	d020      	beq.n	800cf64 <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cf22:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf26:	d020      	beq.n	800cf6a <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cf28:	463a      	mov	r2, r7
 800cf2a:	4641      	mov	r1, r8
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f7ff fe15 	bl	800cb5c <put_fat>
			if (res != FR_OK) return res;
 800cf32:	4684      	mov	ip, r0
 800cf34:	b980      	cbnz	r0, 800cf58 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cf36:	696b      	ldr	r3, [r5, #20]
 800cf38:	69aa      	ldr	r2, [r5, #24]
 800cf3a:	1e91      	subs	r1, r2, #2
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	d2e5      	bcs.n	800cf0c <remove_chain+0x2e>
			fs->free_clst++;
 800cf40:	3301      	adds	r3, #1
 800cf42:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800cf44:	792b      	ldrb	r3, [r5, #4]
 800cf46:	f043 0301 	orr.w	r3, r3, #1
 800cf4a:	712b      	strb	r3, [r5, #4]
 800cf4c:	e7de      	b.n	800cf0c <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf4e:	f04f 0c02 	mov.w	ip, #2
 800cf52:	e001      	b.n	800cf58 <remove_chain+0x7a>
 800cf54:	f04f 0c02 	mov.w	ip, #2
}
 800cf58:	4660      	mov	r0, ip
 800cf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 800cf5e:	f04f 0c00 	mov.w	ip, #0
 800cf62:	e7f9      	b.n	800cf58 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cf64:	f04f 0c02 	mov.w	ip, #2
 800cf68:	e7f6      	b.n	800cf58 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cf6a:	f04f 0c01 	mov.w	ip, #1
 800cf6e:	e7f3      	b.n	800cf58 <remove_chain+0x7a>

0800cf70 <dir_next>:
{
 800cf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cf74:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cf76:	69c3      	ldr	r3, [r0, #28]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d06d      	beq.n	800d058 <dir_next+0xe8>
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	460f      	mov	r7, r1
 800cf80:	3520      	adds	r5, #32
 800cf82:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800cf86:	d269      	bcs.n	800d05c <dir_next+0xec>
	FATFS *fs = dp->obj.fs;
 800cf88:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cf8a:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800cf8e:	f1b8 0f00 	cmp.w	r8, #0
 800cf92:	d107      	bne.n	800cfa4 <dir_next+0x34>
		dp->sect++;				/* Next sector */
 800cf94:	3301      	adds	r3, #1
 800cf96:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800cf98:	6981      	ldr	r1, [r0, #24]
 800cf9a:	b971      	cbnz	r1, 800cfba <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cf9c:	8933      	ldrh	r3, [r6, #8]
 800cf9e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800cfa2:	d906      	bls.n	800cfb2 <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 800cfa4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cfa6:	3634      	adds	r6, #52	@ 0x34
 800cfa8:	4446      	add	r6, r8
 800cfaa:	6226      	str	r6, [r4, #32]
	return FR_OK;
 800cfac:	2000      	movs	r0, #0
}
 800cfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61c3      	str	r3, [r0, #28]
 800cfb6:	2004      	movs	r0, #4
 800cfb8:	e7f9      	b.n	800cfae <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cfba:	8973      	ldrh	r3, [r6, #10]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800cfc2:	d1ef      	bne.n	800cfa4 <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cfc4:	f7ff fe6a 	bl	800cc9c <get_fat>
 800cfc8:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	d948      	bls.n	800d060 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cfce:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cfd2:	d047      	beq.n	800d064 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cfd4:	69b3      	ldr	r3, [r6, #24]
 800cfd6:	4283      	cmp	r3, r0
 800cfd8:	d836      	bhi.n	800d048 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800cfda:	b18f      	cbz	r7, 800d000 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cfdc:	69a1      	ldr	r1, [r4, #24]
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7ff ff1b 	bl	800ce1a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d03e      	beq.n	800d068 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cfea:	2801      	cmp	r0, #1
 800cfec:	d03e      	beq.n	800d06c <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cfee:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cff2:	d03d      	beq.n	800d070 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff fca0 	bl	800c93a <sync_window>
 800cffa:	b128      	cbz	r0, 800d008 <dir_next+0x98>
 800cffc:	2001      	movs	r0, #1
 800cffe:	e7d6      	b.n	800cfae <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 800d000:	2300      	movs	r3, #0
 800d002:	61e3      	str	r3, [r4, #28]
 800d004:	2004      	movs	r0, #4
 800d006:	e7d2      	b.n	800cfae <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d00c:	2100      	movs	r1, #0
 800d00e:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 800d012:	f7ff fb3a 	bl	800c68a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d016:	4651      	mov	r1, sl
 800d018:	4630      	mov	r0, r6
 800d01a:	f7ff fc17 	bl	800c84c <clust2sect>
 800d01e:	6330      	str	r0, [r6, #48]	@ 0x30
 800d020:	8973      	ldrh	r3, [r6, #10]
 800d022:	b16b      	cbz	r3, 800d040 <dir_next+0xd0>
						fs->wflag = 1;
 800d024:	2701      	movs	r7, #1
 800d026:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d028:	4630      	mov	r0, r6
 800d02a:	f7ff fc86 	bl	800c93a <sync_window>
 800d02e:	bb08      	cbnz	r0, 800d074 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d030:	f109 0901 	add.w	r9, r9, #1
 800d034:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800d036:	3301      	adds	r3, #1
 800d038:	6333      	str	r3, [r6, #48]	@ 0x30
 800d03a:	8973      	ldrh	r3, [r6, #10]
 800d03c:	454b      	cmp	r3, r9
 800d03e:	d8f2      	bhi.n	800d026 <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 800d040:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800d042:	eba3 0309 	sub.w	r3, r3, r9
 800d046:	6333      	str	r3, [r6, #48]	@ 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800d048:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800d04c:	4651      	mov	r1, sl
 800d04e:	4630      	mov	r0, r6
 800d050:	f7ff fbfc 	bl	800c84c <clust2sect>
 800d054:	61e0      	str	r0, [r4, #28]
 800d056:	e7a5      	b.n	800cfa4 <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d058:	2004      	movs	r0, #4
 800d05a:	e7a8      	b.n	800cfae <dir_next+0x3e>
 800d05c:	2004      	movs	r0, #4
 800d05e:	e7a6      	b.n	800cfae <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d060:	2002      	movs	r0, #2
 800d062:	e7a4      	b.n	800cfae <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d064:	2001      	movs	r0, #1
 800d066:	e7a2      	b.n	800cfae <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d068:	2007      	movs	r0, #7
 800d06a:	e7a0      	b.n	800cfae <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d06c:	2002      	movs	r0, #2
 800d06e:	e79e      	b.n	800cfae <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d070:	2001      	movs	r0, #1
 800d072:	e79c      	b.n	800cfae <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d074:	2001      	movs	r0, #1
 800d076:	e79a      	b.n	800cfae <dir_next+0x3e>

0800d078 <dir_find>:
{
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	b087      	sub	sp, #28
 800d07e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800d080:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d082:	2100      	movs	r1, #0
 800d084:	f7ff fe72 	bl	800cd6c <dir_sdi>
	if (res != FR_OK) return res;
 800d088:	4602      	mov	r2, r0
 800d08a:	2800      	cmp	r0, #0
 800d08c:	f040 80c4 	bne.w	800d218 <dir_find+0x1a0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d090:	f04f 33ff 	mov.w	r3, #4294967295
 800d094:	632b      	str	r3, [r5, #48]	@ 0x30
 800d096:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800d09a:	46c1      	mov	r9, r8
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d09c:	469a      	mov	sl, r3
 800d09e:	46c3      	mov	fp, r8
		res = dir_next(dp, 0);	/* Next entry */
 800d0a0:	2700      	movs	r7, #0
 800d0a2:	e00a      	b.n	800d0ba <dir_find+0x42>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d0a4:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800d0a8:	46d9      	mov	r9, fp
		res = dir_next(dp, 0);	/* Next entry */
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f7ff ff5f 	bl	800cf70 <dir_next>
	} while (res == FR_OK);
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	f040 80af 	bne.w	800d218 <dir_find+0x1a0>
		res = move_window(fs, dp->sect);
 800d0ba:	69e9      	ldr	r1, [r5, #28]
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f7ff fc69 	bl	800c994 <move_window>
		if (res != FR_OK) break;
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f040 80a7 	bne.w	800d218 <dir_find+0x1a0>
		c = dp->dir[DIR_Name];
 800d0ca:	6a2c      	ldr	r4, [r5, #32]
 800d0cc:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80a1 	beq.w	800d216 <dir_find+0x19e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d0d4:	7ae2      	ldrb	r2, [r4, #11]
 800d0d6:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 800d0da:	71a9      	strb	r1, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d0dc:	2be5      	cmp	r3, #229	@ 0xe5
 800d0de:	d0e1      	beq.n	800d0a4 <dir_find+0x2c>
 800d0e0:	f012 0f08 	tst.w	r2, #8
 800d0e4:	d015      	beq.n	800d112 <dir_find+0x9a>
 800d0e6:	290f      	cmp	r1, #15
 800d0e8:	d1dc      	bne.n	800d0a4 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d0ea:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800d0ee:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800d0f2:	d1da      	bne.n	800d0aa <dir_find+0x32>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d0f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800d0f8:	d028      	beq.n	800d14c <dir_find+0xd4>
						sum = dp->dir[LDIR_Chksum];
 800d0fa:	f894 800d 	ldrb.w	r8, [r4, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d0fe:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d102:	696a      	ldr	r2, [r5, #20]
 800d104:	632a      	str	r2, [r5, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d106:	7b62      	ldrb	r2, [r4, #13]
 800d108:	4542      	cmp	r2, r8
 800d10a:	d024      	beq.n	800d156 <dir_find+0xde>
 800d10c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800d110:	e7cb      	b.n	800d0aa <dir_find+0x32>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d112:	290f      	cmp	r1, #15
 800d114:	d0e9      	beq.n	800d0ea <dir_find+0x72>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d116:	f1b9 0f00 	cmp.w	r9, #0
 800d11a:	d104      	bne.n	800d126 <dir_find+0xae>
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7ff fbb4 	bl	800c88a <sum_sfn>
 800d122:	4540      	cmp	r0, r8
 800d124:	d07c      	beq.n	800d220 <dir_find+0x1a8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d126:	f895 202f 	ldrb.w	r2, [r5, #47]	@ 0x2f
 800d12a:	f012 0201 	ands.w	r2, r2, #1
 800d12e:	d16b      	bne.n	800d208 <dir_find+0x190>
 800d130:	f105 0124 	add.w	r1, r5, #36	@ 0x24
	int r = 0;
 800d134:	f104 0c0b 	add.w	ip, r4, #11
		r = *d++ - *s++;
 800d138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d13c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d140:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800d142:	45a4      	cmp	ip, r4
 800d144:	d05f      	beq.n	800d206 <dir_find+0x18e>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0f6      	beq.n	800d138 <dir_find+0xc0>
 800d14a:	e05d      	b.n	800d208 <dir_find+0x190>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d14c:	4599      	cmp	r9, r3
 800d14e:	bf18      	it	ne
 800d150:	46d9      	movne	r9, fp
 800d152:	d1aa      	bne.n	800d0aa <dir_find+0x32>
 800d154:	e7d7      	b.n	800d106 <dir_find+0x8e>
	rv = rv << 8 | ptr[0];
 800d156:	7ee1      	ldrb	r1, [r4, #27]
 800d158:	7ea2      	ldrb	r2, [r4, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d15a:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800d15e:	d157      	bne.n	800d210 <dir_find+0x198>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d160:	68f2      	ldr	r2, [r6, #12]
 800d162:	9201      	str	r2, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d164:	7822      	ldrb	r2, [r4, #0]
 800d166:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d16a:	3a01      	subs	r2, #1
 800d16c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d170:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d174:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800d228 <dir_find+0x1b0>
 800d178:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d17a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d17e:	9603      	str	r6, [sp, #12]
 800d180:	9305      	str	r3, [sp, #20]
 800d182:	4616      	mov	r6, r2
 800d184:	9504      	str	r5, [sp, #16]
 800d186:	e006      	b.n	800d196 <dir_find+0x11e>
 800d188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d18c:	429d      	cmp	r5, r3
 800d18e:	d133      	bne.n	800d1f8 <dir_find+0x180>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d190:	4b24      	ldr	r3, [pc, #144]	@ (800d224 <dir_find+0x1ac>)
 800d192:	4599      	cmp	r9, r3
 800d194:	d01a      	beq.n	800d1cc <dir_find+0x154>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d196:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d19a:	18e2      	adds	r2, r4, r3
	rv = rv << 8 | ptr[0];
 800d19c:	7852      	ldrb	r2, [r2, #1]
 800d19e:	5ce5      	ldrb	r5, [r4, r3]
 800d1a0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
		if (wc) {
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d0ef      	beq.n	800d188 <dir_find+0x110>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d1a8:	2efe      	cmp	r6, #254	@ 0xfe
 800d1aa:	d825      	bhi.n	800d1f8 <dir_find+0x180>
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f001 f829 	bl	800e204 <ff_wtoupper>
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	1c73      	adds	r3, r6, #1
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	9b01      	ldr	r3, [sp, #4]
 800d1ba:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800d1be:	f001 f821 	bl	800e204 <ff_wtoupper>
 800d1c2:	4580      	cmp	r8, r0
 800d1c4:	d118      	bne.n	800d1f8 <dir_find+0x180>
			wc = uc;
 800d1c6:	4628      	mov	r0, r5
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d1c8:	9e00      	ldr	r6, [sp, #0]
 800d1ca:	e7e1      	b.n	800d190 <dir_find+0x118>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d1cc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d1d0:	9b05      	ldr	r3, [sp, #20]
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	9e03      	ldr	r6, [sp, #12]
 800d1d6:	9d04      	ldr	r5, [sp, #16]
 800d1d8:	7822      	ldrb	r2, [r4, #0]
 800d1da:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800d1de:	d004      	beq.n	800d1ea <dir_find+0x172>
 800d1e0:	b118      	cbz	r0, 800d1ea <dir_find+0x172>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d1e2:	9a01      	ldr	r2, [sp, #4]
 800d1e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d1e8:	b91a      	cbnz	r2, 800d1f2 <dir_find+0x17a>
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	fa5f f983 	uxtb.w	r9, r3
 800d1f0:	e75b      	b.n	800d0aa <dir_find+0x32>
 800d1f2:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800d1f6:	e758      	b.n	800d0aa <dir_find+0x32>
 800d1f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d1fc:	9e03      	ldr	r6, [sp, #12]
 800d1fe:	9d04      	ldr	r5, [sp, #16]
 800d200:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800d204:	e751      	b.n	800d0aa <dir_find+0x32>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d206:	b13b      	cbz	r3, 800d218 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d208:	f8c5 a030 	str.w	sl, [r5, #48]	@ 0x30
 800d20c:	46d9      	mov	r9, fp
 800d20e:	e74c      	b.n	800d0aa <dir_find+0x32>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d210:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800d214:	e749      	b.n	800d0aa <dir_find+0x32>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d216:	2204      	movs	r2, #4
}
 800d218:	4610      	mov	r0, r2
 800d21a:	b007      	add	sp, #28
 800d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = move_window(fs, dp->sect);
 800d220:	464a      	mov	r2, r9
 800d222:	e7f9      	b.n	800d218 <dir_find+0x1a0>
 800d224:	0801280d 	.word	0x0801280d
 800d228:	08012800 	.word	0x08012800

0800d22c <dir_register>:
{
 800d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	b08b      	sub	sp, #44	@ 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d232:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 800d236:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 800d23a:	f040 812e 	bne.w	800d49a <dir_register+0x26e>
 800d23e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d240:	6805      	ldr	r5, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d242:	68eb      	ldr	r3, [r5, #12]
 800d244:	881a      	ldrh	r2, [r3, #0]
 800d246:	b1e2      	cbz	r2, 800d282 <dir_register+0x56>
 800d248:	f04f 0a00 	mov.w	sl, #0
 800d24c:	f10a 0a01 	add.w	sl, sl, #1
 800d250:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800d254:	2a00      	cmp	r2, #0
 800d256:	d1f9      	bne.n	800d24c <dir_register+0x20>
	mem_cpy(sn, dp->fn, 12);
 800d258:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 800d25c:	220c      	movs	r2, #12
 800d25e:	4631      	mov	r1, r6
 800d260:	a807      	add	r0, sp, #28
 800d262:	f7ff fa08 	bl	800c676 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d266:	f89d b027 	ldrb.w	fp, [sp, #39]	@ 0x27
 800d26a:	f01b 0f01 	tst.w	fp, #1
 800d26e:	f000 813a 	beq.w	800d4e6 <dir_register+0x2ba>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d272:	2340      	movs	r3, #64	@ 0x40
 800d274:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800d278:	f04f 0801 	mov.w	r8, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d27c:	f04f 0920 	mov.w	r9, #32
 800d280:	e04b      	b.n	800d31a <dir_register+0xee>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d282:	f04f 0a00 	mov.w	sl, #0
 800d286:	e7e7      	b.n	800d258 <dir_register+0x2c>
 800d288:	4643      	mov	r3, r8
 800d28a:	af07      	add	r7, sp, #28
		seq = (UINT)sr;
 800d28c:	2207      	movs	r2, #7
 800d28e:	e002      	b.n	800d296 <dir_register+0x6a>
 800d290:	4643      	mov	r3, r8
 800d292:	e7fa      	b.n	800d28a <dir_register+0x5e>
		seq /= 16;
 800d294:	460b      	mov	r3, r1
		c = (BYTE)((seq % 16) + '0');
 800d296:	f003 000f 	and.w	r0, r3, #15
 800d29a:	f100 0130 	add.w	r1, r0, #48	@ 0x30
		if (c > '9') c += 7;
 800d29e:	2939      	cmp	r1, #57	@ 0x39
 800d2a0:	bf88      	it	hi
 800d2a2:	f100 0137 	addhi.w	r1, r0, #55	@ 0x37
		ns[i--] = c;
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	f807 1d01 	strb.w	r1, [r7, #-1]!
		seq /= 16;
 800d2ac:	0919      	lsrs	r1, r3, #4
	} while (seq);
 800d2ae:	2b0f      	cmp	r3, #15
 800d2b0:	d8f0      	bhi.n	800d294 <dir_register+0x68>
	ns[i] = '~';
 800d2b2:	217e      	movs	r1, #126	@ 0x7e
 800d2b4:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800d2b8:	446b      	add	r3, sp
 800d2ba:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d2be:	b16a      	cbz	r2, 800d2dc <dir_register+0xb0>
 800d2c0:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2ca:	2820      	cmp	r0, #32
 800d2cc:	d003      	beq.n	800d2d6 <dir_register+0xaa>
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d1f8      	bne.n	800d2c6 <dir_register+0x9a>
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	3323      	adds	r3, #35	@ 0x23
 800d2d8:	4423      	add	r3, r4
 800d2da:	e00e      	b.n	800d2fa <dir_register+0xce>
 800d2dc:	4613      	mov	r3, r2
 800d2de:	e7fa      	b.n	800d2d6 <dir_register+0xaa>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d2e0:	f102 0128 	add.w	r1, r2, #40	@ 0x28
 800d2e4:	4469      	add	r1, sp
 800d2e6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800d2ea:	3201      	adds	r2, #1
 800d2ec:	1c58      	adds	r0, r3, #1
 800d2ee:	7059      	strb	r1, [r3, #1]
	} while (j < 8);
 800d2f0:	3b22      	subs	r3, #34	@ 0x22
 800d2f2:	1b1b      	subs	r3, r3, r4
 800d2f4:	2b07      	cmp	r3, #7
 800d2f6:	d804      	bhi.n	800d302 <dir_register+0xd6>
 800d2f8:	4603      	mov	r3, r0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d2fa:	2a07      	cmp	r2, #7
 800d2fc:	d9f0      	bls.n	800d2e0 <dir_register+0xb4>
 800d2fe:	4649      	mov	r1, r9
 800d300:	e7f4      	b.n	800d2ec <dir_register+0xc0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d302:	4620      	mov	r0, r4
 800d304:	f7ff feb8 	bl	800d078 <dir_find>
			if (res != FR_OK) break;
 800d308:	4607      	mov	r7, r0
 800d30a:	2800      	cmp	r0, #0
 800d30c:	f040 80e7 	bne.w	800d4de <dir_register+0x2b2>
		for (n = 1; n < 100; n++) {
 800d310:	f108 0801 	add.w	r8, r8, #1
 800d314:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 800d318:	d020      	beq.n	800d35c <dir_register+0x130>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d31a:	68ef      	ldr	r7, [r5, #12]
	mem_cpy(dst, src, 11);
 800d31c:	220b      	movs	r2, #11
 800d31e:	a907      	add	r1, sp, #28
 800d320:	4630      	mov	r0, r6
 800d322:	f7ff f9a8 	bl	800c676 <mem_cpy>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d326:	f1b8 0f05 	cmp.w	r8, #5
 800d32a:	d9ad      	bls.n	800d288 <dir_register+0x5c>
		while (*lfn) {	/* Create a CRC */
 800d32c:	883a      	ldrh	r2, [r7, #0]
 800d32e:	2a00      	cmp	r2, #0
 800d330:	d0ae      	beq.n	800d290 <dir_register+0x64>
		sr = seq;
 800d332:	4643      	mov	r3, r8
 800d334:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 800d336:	f002 0001 	and.w	r0, r2, #1
 800d33a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				wc >>= 1;
 800d33e:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800d340:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800d344:	bf1c      	itt	ne
 800d346:	f483 3388 	eorne.w	r3, r3, #69632	@ 0x11000
 800d34a:	f083 0321 	eorne.w	r3, r3, #33	@ 0x21
			for (i = 0; i < 16; i++) {
 800d34e:	3901      	subs	r1, #1
 800d350:	d1f1      	bne.n	800d336 <dir_register+0x10a>
		while (*lfn) {	/* Create a CRC */
 800d352:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 800d356:	2a00      	cmp	r2, #0
 800d358:	d1ec      	bne.n	800d334 <dir_register+0x108>
 800d35a:	e796      	b.n	800d28a <dir_register+0x5e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d35c:	2707      	movs	r7, #7
 800d35e:	e09d      	b.n	800d49c <dir_register+0x270>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d360:	f04f 0901 	mov.w	r9, #1
	FATFS *fs = dp->obj.fs;
 800d364:	f8d4 a000 	ldr.w	sl, [r4]
	res = dir_sdi(dp, 0);
 800d368:	2100      	movs	r1, #0
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff fcfe 	bl	800cd6c <dir_sdi>
	if (res == FR_OK) {
 800d370:	4607      	mov	r7, r0
 800d372:	b9e8      	cbnz	r0, 800d3b0 <dir_register+0x184>
		n = 0;
 800d374:	f04f 0800 	mov.w	r8, #0
			res = dir_next(dp, 1);
 800d378:	f04f 0b01 	mov.w	fp, #1
 800d37c:	e009      	b.n	800d392 <dir_register+0x166>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d37e:	f108 0801 	add.w	r8, r8, #1
 800d382:	45c1      	cmp	r9, r8
 800d384:	d018      	beq.n	800d3b8 <dir_register+0x18c>
			res = dir_next(dp, 1);
 800d386:	4659      	mov	r1, fp
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff fdf1 	bl	800cf70 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d38e:	4607      	mov	r7, r0
 800d390:	b970      	cbnz	r0, 800d3b0 <dir_register+0x184>
			res = move_window(fs, dp->sect);
 800d392:	69e1      	ldr	r1, [r4, #28]
 800d394:	4650      	mov	r0, sl
 800d396:	f7ff fafd 	bl	800c994 <move_window>
			if (res != FR_OK) break;
 800d39a:	4607      	mov	r7, r0
 800d39c:	b940      	cbnz	r0, 800d3b0 <dir_register+0x184>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d39e:	6a23      	ldr	r3, [r4, #32]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2be5      	cmp	r3, #229	@ 0xe5
 800d3a4:	d0eb      	beq.n	800d37e <dir_register+0x152>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0e9      	beq.n	800d37e <dir_register+0x152>
				n = 0;					/* Not a blank entry. Restart to search */
 800d3aa:	f04f 0800 	mov.w	r8, #0
 800d3ae:	e7ea      	b.n	800d386 <dir_register+0x15a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3b0:	2f04      	cmp	r7, #4
 800d3b2:	d077      	beq.n	800d4a4 <dir_register+0x278>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d3b4:	2f00      	cmp	r7, #0
 800d3b6:	d171      	bne.n	800d49c <dir_register+0x270>
 800d3b8:	f1b9 0a01 	subs.w	sl, r9, #1
 800d3bc:	d119      	bne.n	800d3f2 <dir_register+0x1c6>
		res = move_window(fs, dp->sect);
 800d3be:	69e1      	ldr	r1, [r4, #28]
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7ff fae7 	bl	800c994 <move_window>
		if (res == FR_OK) {
 800d3c6:	4607      	mov	r7, r0
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d167      	bne.n	800d49c <dir_register+0x270>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	6a20      	ldr	r0, [r4, #32]
 800d3d2:	f7ff f95a 	bl	800c68a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d3d6:	220b      	movs	r2, #11
 800d3d8:	4631      	mov	r1, r6
 800d3da:	6a20      	ldr	r0, [r4, #32]
 800d3dc:	f7ff f94b 	bl	800c676 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d3e0:	6a22      	ldr	r2, [r4, #32]
 800d3e2:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800d3e6:	f003 0318 	and.w	r3, r3, #24
 800d3ea:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	70eb      	strb	r3, [r5, #3]
 800d3f0:	e054      	b.n	800d49c <dir_register+0x270>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d3f2:	6961      	ldr	r1, [r4, #20]
 800d3f4:	eba1 114a 	sub.w	r1, r1, sl, lsl #5
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f7ff fcb7 	bl	800cd6c <dir_sdi>
		if (res == FR_OK) {
 800d3fe:	4607      	mov	r7, r0
 800d400:	2800      	cmp	r0, #0
 800d402:	d14b      	bne.n	800d49c <dir_register+0x270>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d404:	4630      	mov	r0, r6
 800d406:	f7ff fa40 	bl	800c88a <sum_sfn>
 800d40a:	9001      	str	r0, [sp, #4]
	dir[LDIR_Type] = 0;
 800d40c:	f04f 0b00 	mov.w	fp, #0
 800d410:	9602      	str	r6, [sp, #8]
 800d412:	e019      	b.n	800d448 <dir_register+0x21c>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d414:	4638      	mov	r0, r7
 800d416:	e04e      	b.n	800d4b6 <dir_register+0x28a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d418:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d41c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d420:	4293      	cmp	r3, r2
 800d422:	d002      	beq.n	800d42a <dir_register+0x1fe>
 800d424:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 800d428:	b90b      	cbnz	r3, 800d42e <dir_register+0x202>
 800d42a:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d42e:	f881 9000 	strb.w	r9, [r1]
				fs->wflag = 1;
 800d432:	2301      	movs	r3, #1
 800d434:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d436:	4659      	mov	r1, fp
 800d438:	4620      	mov	r0, r4
 800d43a:	f7ff fd99 	bl	800cf70 <dir_next>
			} while (res == FR_OK && --nent);
 800d43e:	4607      	mov	r7, r0
 800d440:	bb60      	cbnz	r0, 800d49c <dir_register+0x270>
 800d442:	f1ba 0a01 	subs.w	sl, sl, #1
 800d446:	d026      	beq.n	800d496 <dir_register+0x26a>
				res = move_window(fs, dp->sect);
 800d448:	69e1      	ldr	r1, [r4, #28]
 800d44a:	4628      	mov	r0, r5
 800d44c:	f7ff faa2 	bl	800c994 <move_window>
				if (res != FR_OK) break;
 800d450:	4607      	mov	r7, r0
 800d452:	bb18      	cbnz	r0, 800d49c <dir_register+0x270>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d454:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800d458:	6a21      	ldr	r1, [r4, #32]
 800d45a:	fa5f f98a 	uxtb.w	r9, sl
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d462:	f04f 030f 	mov.w	r3, #15
 800d466:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800d468:	f881 b00c 	strb.w	fp, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46c:	f881 b01a 	strb.w	fp, [r1, #26]
	*ptr++ = (BYTE)val;
 800d470:	f881 b01b 	strb.w	fp, [r1, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d474:	f109 30ff 	add.w	r0, r9, #4294967295
 800d478:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800d47c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	s = wc = 0;
 800d480:	4a20      	ldr	r2, [pc, #128]	@ (800d504 <dir_register+0x2d8>)
 800d482:	f102 0c0d 	add.w	ip, r2, #13
 800d486:	465b      	mov	r3, fp
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d488:	f64f 76ff 	movw	r6, #65535	@ 0xffff
	*ptr++ = (BYTE)val; val >>= 8;
 800d48c:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800d490:	f8cd a00c 	str.w	sl, [sp, #12]
 800d494:	e012      	b.n	800d4bc <dir_register+0x290>
 800d496:	9e02      	ldr	r6, [sp, #8]
 800d498:	e791      	b.n	800d3be <dir_register+0x192>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d49a:	2706      	movs	r7, #6
}
 800d49c:	4638      	mov	r0, r7
 800d49e:	b00b      	add	sp, #44	@ 0x2c
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d4a4:	2707      	movs	r7, #7
 800d4a6:	e7f9      	b.n	800d49c <dir_register+0x270>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4a8:	7817      	ldrb	r7, [r2, #0]
 800d4aa:	eb01 0a07 	add.w	sl, r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d4ae:	f801 8007 	strb.w	r8, [r1, r7]
	*ptr++ = (BYTE)val;
 800d4b2:	f88a 8001 	strb.w	r8, [sl, #1]
	} while (++s < 13);
 800d4b6:	3201      	adds	r2, #1
 800d4b8:	4562      	cmp	r2, ip
 800d4ba:	d0ad      	beq.n	800d418 <dir_register+0x1ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d4bc:	42b3      	cmp	r3, r6
 800d4be:	d0f3      	beq.n	800d4a8 <dir_register+0x27c>
 800d4c0:	1c47      	adds	r7, r0, #1
 800d4c2:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4c6:	7810      	ldrb	r0, [r2, #0]
 800d4c8:	eb01 0a00 	add.w	sl, r1, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800d4cc:	540b      	strb	r3, [r1, r0]
 800d4ce:	0a18      	lsrs	r0, r3, #8
	*ptr++ = (BYTE)val;
 800d4d0:	f88a 0001 	strb.w	r0, [sl, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d19d      	bne.n	800d414 <dir_register+0x1e8>
 800d4d8:	4638      	mov	r0, r7
 800d4da:	4633      	mov	r3, r6
 800d4dc:	e7eb      	b.n	800d4b6 <dir_register+0x28a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d4de:	2804      	cmp	r0, #4
 800d4e0:	d1dc      	bne.n	800d49c <dir_register+0x270>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d4e2:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d4e6:	f01b 0f02 	tst.w	fp, #2
 800d4ea:	f43f af39 	beq.w	800d360 <dir_register+0x134>
 800d4ee:	f10a 090c 	add.w	r9, sl, #12
 800d4f2:	4b05      	ldr	r3, [pc, #20]	@ (800d508 <dir_register+0x2dc>)
 800d4f4:	fba3 3909 	umull	r3, r9, r3, r9
 800d4f8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800d4fc:	f109 0901 	add.w	r9, r9, #1
 800d500:	e730      	b.n	800d364 <dir_register+0x138>
 800d502:	bf00      	nop
 800d504:	08012800 	.word	0x08012800
 800d508:	4ec4ec4f 	.word	0x4ec4ec4f

0800d50c <check_fs>:
{
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d510:	2300      	movs	r3, #0
 800d512:	70c3      	strb	r3, [r0, #3]
 800d514:	f04f 33ff 	mov.w	r3, #4294967295
 800d518:	6303      	str	r3, [r0, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d51a:	f7ff fa3b 	bl	800c994 <move_window>
 800d51e:	bb48      	cbnz	r0, 800d574 <check_fs+0x68>
 800d520:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 800d522:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800d526:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800d52a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d52e:	b21b      	sxth	r3, r3
 800d530:	4a13      	ldr	r2, [pc, #76]	@ (800d580 <check_fs+0x74>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d120      	bne.n	800d578 <check_fs+0x6c>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d536:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800d53a:	2be9      	cmp	r3, #233	@ 0xe9
 800d53c:	d007      	beq.n	800d54e <check_fs+0x42>
 800d53e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d540:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800d544:	4a0f      	ldr	r2, [pc, #60]	@ (800d584 <check_fs+0x78>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d001      	beq.n	800d54e <check_fs+0x42>
	return 2;
 800d54a:	2502      	movs	r5, #2
 800d54c:	e015      	b.n	800d57a <check_fs+0x6e>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d54e:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 800d552:	f7ff f87d 	bl	800c650 <ld_dword>
 800d556:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800d55a:	4b0b      	ldr	r3, [pc, #44]	@ (800d588 <check_fs+0x7c>)
 800d55c:	4298      	cmp	r0, r3
 800d55e:	d00c      	beq.n	800d57a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d560:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 800d564:	f7ff f874 	bl	800c650 <ld_dword>
 800d568:	4d08      	ldr	r5, [pc, #32]	@ (800d58c <check_fs+0x80>)
 800d56a:	1b45      	subs	r5, r0, r5
 800d56c:	bf18      	it	ne
 800d56e:	2501      	movne	r5, #1
 800d570:	006d      	lsls	r5, r5, #1
 800d572:	e002      	b.n	800d57a <check_fs+0x6e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d574:	2504      	movs	r5, #4
 800d576:	e000      	b.n	800d57a <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d578:	2503      	movs	r5, #3
}
 800d57a:	4628      	mov	r0, r5
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	ffffaa55 	.word	0xffffaa55
 800d584:	009000eb 	.word	0x009000eb
 800d588:	00544146 	.word	0x00544146
 800d58c:	33544146 	.word	0x33544146

0800d590 <find_volume>:
{
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	b085      	sub	sp, #20
 800d596:	460e      	mov	r6, r1
 800d598:	4615      	mov	r5, r2
	*rfs = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800d59e:	f7ff f983 	bl	800c8a8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5a2:	1e07      	subs	r7, r0, #0
 800d5a4:	f2c0 810a 	blt.w	800d7bc <find_volume+0x22c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5a8:	4bb0      	ldr	r3, [pc, #704]	@ (800d86c <find_volume+0x2dc>)
 800d5aa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	f000 8109 	beq.w	800d7c6 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 800d5b4:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5b6:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d5ba:	7823      	ldrb	r3, [r4, #0]
 800d5bc:	b16b      	cbz	r3, 800d5da <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800d5be:	7860      	ldrb	r0, [r4, #1]
 800d5c0:	f7fe fffa 	bl	800c5b8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5c4:	f010 0f01 	tst.w	r0, #1
 800d5c8:	d107      	bne.n	800d5da <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5ca:	2d00      	cmp	r5, #0
 800d5cc:	f000 80f7 	beq.w	800d7be <find_volume+0x22e>
				return FR_WRITE_PROTECTED;
 800d5d0:	f010 0504 	ands.w	r5, r0, #4
 800d5d4:	bf18      	it	ne
 800d5d6:	250a      	movne	r5, #10
 800d5d8:	e0f1      	b.n	800d7be <find_volume+0x22e>
	fs->fs_type = 0;					/* Clear the file system object */
 800d5da:	2300      	movs	r3, #0
 800d5dc:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d5de:	b2f8      	uxtb	r0, r7
 800d5e0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d5e2:	f7fe fff5 	bl	800c5d0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d5e6:	f010 0601 	ands.w	r6, r0, #1
 800d5ea:	f040 80ee 	bne.w	800d7ca <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d5ee:	b11d      	cbz	r5, 800d5f8 <find_volume+0x68>
 800d5f0:	f010 0f04 	tst.w	r0, #4
 800d5f4:	f040 80eb 	bne.w	800d7ce <find_volume+0x23e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7ff ff86 	bl	800d50c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d600:	2802      	cmp	r0, #2
 800d602:	d07c      	beq.n	800d6fe <find_volume+0x16e>
	bsect = 0;
 800d604:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d606:	2804      	cmp	r0, #4
 800d608:	f000 80e3 	beq.w	800d7d2 <find_volume+0x242>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d60c:	2801      	cmp	r0, #1
 800d60e:	f200 80e2 	bhi.w	800d7d6 <find_volume+0x246>
	rv = rv << 8 | ptr[0];
 800d612:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800d616:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800d61a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d61e:	b21b      	sxth	r3, r3
 800d620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d624:	f040 80d9 	bne.w	800d7da <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 800d628:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800d62c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d630:	ea53 2802 	orrs.w	r8, r3, r2, lsl #8
 800d634:	d104      	bne.n	800d640 <find_volume+0xb0>
 800d636:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d63a:	f7ff f809 	bl	800c650 <ld_dword>
 800d63e:	4680      	mov	r8, r0
		fs->fsize = fasize;
 800d640:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d644:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d648:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d64c:	f109 33ff 	add.w	r3, r9, #4294967295
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b01      	cmp	r3, #1
 800d654:	f200 80c3 	bhi.w	800d7de <find_volume+0x24e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d658:	f894 7041 	ldrb.w	r7, [r4, #65]	@ 0x41
 800d65c:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d65e:	2f00      	cmp	r7, #0
 800d660:	f000 80bf 	beq.w	800d7e2 <find_volume+0x252>
 800d664:	1e7b      	subs	r3, r7, #1
 800d666:	423b      	tst	r3, r7
 800d668:	f040 80bd 	bne.w	800d7e6 <find_volume+0x256>
	rv = rv << 8 | ptr[0];
 800d66c:	f894 2046 	ldrb.w	r2, [r4, #70]	@ 0x46
 800d670:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d678:	fa0f fb83 	sxth.w	fp, r3
 800d67c:	469a      	mov	sl, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d67e:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d680:	f013 0f0f 	tst.w	r3, #15
 800d684:	f040 80b1 	bne.w	800d7ea <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 800d688:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d68c:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d690:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800d694:	d103      	bne.n	800d69e <find_volume+0x10e>
 800d696:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800d69a:	f7fe ffd9 	bl	800c650 <ld_dword>
	rv = rv << 8 | ptr[0];
 800d69e:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800d6a2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d6a6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800d6aa:	f000 80a0 	beq.w	800d7ee <find_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d6ae:	fb08 f909 	mul.w	r9, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d6b2:	eb03 121a 	add.w	r2, r3, sl, lsr #4
 800d6b6:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d6b8:	4290      	cmp	r0, r2
 800d6ba:	f0c0 809a 	bcc.w	800d7f2 <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d6be:	1a80      	subs	r0, r0, r2
 800d6c0:	fbb0 f1f7 	udiv	r1, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d6c4:	42b8      	cmp	r0, r7
 800d6c6:	f0c0 8096 	bcc.w	800d7f6 <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d6ca:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800d6ce:	4281      	cmp	r1, r0
 800d6d0:	f200 809d 	bhi.w	800d80e <find_volume+0x27e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d6d4:	f640 70f5 	movw	r0, #4085	@ 0xff5
 800d6d8:	4281      	cmp	r1, r0
 800d6da:	f240 80cf 	bls.w	800d87c <find_volume+0x2ec>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d6de:	3102      	adds	r1, #2
 800d6e0:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d6e2:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6e4:	442b      	add	r3, r5
 800d6e6:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d6e8:	442a      	add	r2, r5
 800d6ea:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6ec:	f1ba 0f00 	cmp.w	sl, #0
 800d6f0:	f000 8089 	beq.w	800d806 <find_volume+0x276>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6f4:	eb03 0209 	add.w	r2, r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d6f8:	004b      	lsls	r3, r1, #1
 800d6fa:	2102      	movs	r1, #2
 800d6fc:	e0d1      	b.n	800d8a2 <find_volume+0x312>
 800d6fe:	466f      	mov	r7, sp
 800d700:	f504 75fd 	add.w	r5, r4, #506	@ 0x1fa
 800d704:	f204 293a 	addw	r9, r4, #570	@ 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d708:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d70a:	f04f 0a00 	mov.w	sl, #0
 800d70e:	e005      	b.n	800d71c <find_volume+0x18c>
 800d710:	4650      	mov	r0, sl
 800d712:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d716:	3510      	adds	r5, #16
 800d718:	454d      	cmp	r5, r9
 800d71a:	d007      	beq.n	800d72c <find_volume+0x19c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d71c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0f5      	beq.n	800d710 <find_volume+0x180>
 800d724:	4628      	mov	r0, r5
 800d726:	f7fe ff93 	bl	800c650 <ld_dword>
 800d72a:	e7f2      	b.n	800d712 <find_volume+0x182>
 800d72c:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d730:	f04f 0903 	mov.w	r9, #3
 800d734:	e009      	b.n	800d74a <find_volume+0x1ba>
 800d736:	4629      	mov	r1, r5
 800d738:	4620      	mov	r0, r4
 800d73a:	f7ff fee7 	bl	800d50c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d73e:	2801      	cmp	r0, #1
 800d740:	f67f af67 	bls.w	800d612 <find_volume+0x82>
 800d744:	45b8      	cmp	r8, r7
 800d746:	f43f af5e 	beq.w	800d606 <find_volume+0x76>
			bsect = br[i];
 800d74a:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d74e:	2d00      	cmp	r5, #0
 800d750:	d1f1      	bne.n	800d736 <find_volume+0x1a6>
 800d752:	4648      	mov	r0, r9
 800d754:	e7f6      	b.n	800d744 <find_volume+0x1b4>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d756:	1c69      	adds	r1, r5, #1
 800d758:	4620      	mov	r0, r4
 800d75a:	f7ff f91b 	bl	800c994 <move_window>
 800d75e:	bb58      	cbnz	r0, 800d7b8 <find_volume+0x228>
			fs->fsi_flag = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800d764:	f894 2233 	ldrb.w	r2, [r4, #563]	@ 0x233
 800d768:	f894 3232 	ldrb.w	r3, [r4, #562]	@ 0x232
 800d76c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d770:	b21b      	sxth	r3, r3
 800d772:	4a3f      	ldr	r2, [pc, #252]	@ (800d870 <find_volume+0x2e0>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d001      	beq.n	800d77c <find_volume+0x1ec>
		fmt = FS_FAT32;
 800d778:	2103      	movs	r1, #3
 800d77a:	e09e      	b.n	800d8ba <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d77c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800d780:	f7fe ff66 	bl	800c650 <ld_dword>
 800d784:	4b3b      	ldr	r3, [pc, #236]	@ (800d874 <find_volume+0x2e4>)
 800d786:	4298      	cmp	r0, r3
 800d788:	d001      	beq.n	800d78e <find_volume+0x1fe>
		fmt = FS_FAT32;
 800d78a:	2103      	movs	r1, #3
 800d78c:	e095      	b.n	800d8ba <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d78e:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 800d792:	f7fe ff5d 	bl	800c650 <ld_dword>
 800d796:	4b38      	ldr	r3, [pc, #224]	@ (800d878 <find_volume+0x2e8>)
 800d798:	4298      	cmp	r0, r3
 800d79a:	d001      	beq.n	800d7a0 <find_volume+0x210>
		fmt = FS_FAT32;
 800d79c:	2103      	movs	r1, #3
 800d79e:	e08c      	b.n	800d8ba <find_volume+0x32a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7a0:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800d7a4:	f7fe ff54 	bl	800c650 <ld_dword>
 800d7a8:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d7aa:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800d7ae:	f7fe ff4f 	bl	800c650 <ld_dword>
 800d7b2:	6120      	str	r0, [r4, #16]
		fmt = FS_FAT32;
 800d7b4:	2103      	movs	r1, #3
 800d7b6:	e080      	b.n	800d8ba <find_volume+0x32a>
 800d7b8:	2103      	movs	r1, #3
 800d7ba:	e07e      	b.n	800d8ba <find_volume+0x32a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7bc:	250b      	movs	r5, #11
}
 800d7be:	4628      	mov	r0, r5
 800d7c0:	b005      	add	sp, #20
 800d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d7c6:	250c      	movs	r5, #12
 800d7c8:	e7f9      	b.n	800d7be <find_volume+0x22e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d7ca:	2503      	movs	r5, #3
 800d7cc:	e7f7      	b.n	800d7be <find_volume+0x22e>
		return FR_WRITE_PROTECTED;
 800d7ce:	250a      	movs	r5, #10
 800d7d0:	e7f5      	b.n	800d7be <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d7d2:	2501      	movs	r5, #1
 800d7d4:	e7f3      	b.n	800d7be <find_volume+0x22e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d7d6:	250d      	movs	r5, #13
 800d7d8:	e7f1      	b.n	800d7be <find_volume+0x22e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d7da:	250d      	movs	r5, #13
 800d7dc:	e7ef      	b.n	800d7be <find_volume+0x22e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7de:	250d      	movs	r5, #13
 800d7e0:	e7ed      	b.n	800d7be <find_volume+0x22e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7e2:	250d      	movs	r5, #13
 800d7e4:	e7eb      	b.n	800d7be <find_volume+0x22e>
 800d7e6:	250d      	movs	r5, #13
 800d7e8:	e7e9      	b.n	800d7be <find_volume+0x22e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d7ea:	250d      	movs	r5, #13
 800d7ec:	e7e7      	b.n	800d7be <find_volume+0x22e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7ee:	250d      	movs	r5, #13
 800d7f0:	e7e5      	b.n	800d7be <find_volume+0x22e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7f2:	250d      	movs	r5, #13
 800d7f4:	e7e3      	b.n	800d7be <find_volume+0x22e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d7f6:	250d      	movs	r5, #13
 800d7f8:	e7e1      	b.n	800d7be <find_volume+0x22e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d7fa:	250d      	movs	r5, #13
 800d7fc:	e7df      	b.n	800d7be <find_volume+0x22e>
 800d7fe:	250d      	movs	r5, #13
 800d800:	e7dd      	b.n	800d7be <find_volume+0x22e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d802:	250d      	movs	r5, #13
 800d804:	e7db      	b.n	800d7be <find_volume+0x22e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d806:	250d      	movs	r5, #13
 800d808:	e7d9      	b.n	800d7be <find_volume+0x22e>
 800d80a:	250d      	movs	r5, #13
 800d80c:	e7d7      	b.n	800d7be <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d80e:	1c8f      	adds	r7, r1, #2
 800d810:	61a7      	str	r7, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d812:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d814:	442b      	add	r3, r5
 800d816:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d818:	442a      	add	r2, r5
 800d81a:	62e2      	str	r2, [r4, #44]	@ 0x2c
	rv = rv << 8 | ptr[0];
 800d81c:	f894 205f 	ldrb.w	r2, [r4, #95]	@ 0x5f
 800d820:	f894 305e 	ldrb.w	r3, [r4, #94]	@ 0x5e
 800d824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d828:	fa1f fb8b 	uxth.w	fp, fp
 800d82c:	ea5b 0b03 	orrs.w	fp, fp, r3
 800d830:	d1e7      	bne.n	800d802 <find_volume+0x272>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d832:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800d836:	f7fe ff0b 	bl	800c650 <ld_dword>
 800d83a:	62a0      	str	r0, [r4, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d83c:	00bb      	lsls	r3, r7, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d83e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d842:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800d846:	d3d8      	bcc.n	800d7fa <find_volume+0x26a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d848:	f04f 33ff 	mov.w	r3, #4294967295
 800d84c:	6163      	str	r3, [r4, #20]
 800d84e:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800d850:	2380      	movs	r3, #128	@ 0x80
 800d852:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 800d854:	f894 2065 	ldrb.w	r2, [r4, #101]	@ 0x65
 800d858:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 800d85c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d860:	b21b      	sxth	r3, r3
 800d862:	2b01      	cmp	r3, #1
 800d864:	f43f af77 	beq.w	800d756 <find_volume+0x1c6>
		fmt = FS_FAT32;
 800d868:	2103      	movs	r1, #3
 800d86a:	e026      	b.n	800d8ba <find_volume+0x32a>
 800d86c:	2000c7fc 	.word	0x2000c7fc
 800d870:	ffffaa55 	.word	0xffffaa55
 800d874:	41615252 	.word	0x41615252
 800d878:	61417272 	.word	0x61417272
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d87c:	3102      	adds	r1, #2
 800d87e:	61a1      	str	r1, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d880:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d882:	442b      	add	r3, r5
 800d884:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d886:	442a      	add	r2, r5
 800d888:	62e2      	str	r2, [r4, #44]	@ 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d88a:	f1ba 0f00 	cmp.w	sl, #0
 800d88e:	d0bc      	beq.n	800d80a <find_volume+0x27a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d890:	eb03 0209 	add.w	r2, r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d894:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d898:	f001 0101 	and.w	r1, r1, #1
 800d89c:	eb01 0353 	add.w	r3, r1, r3, lsr #1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8a0:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d8a2:	62a2      	str	r2, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d8a4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d8a8:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 800d8ac:	d3a7      	bcc.n	800d7fe <find_volume+0x26e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	6163      	str	r3, [r4, #20]
 800d8b4:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800d8b6:	2380      	movs	r3, #128	@ 0x80
 800d8b8:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 800d8ba:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8bc:	4a05      	ldr	r2, [pc, #20]	@ (800d8d4 <find_volume+0x344>)
 800d8be:	8813      	ldrh	r3, [r2, #0]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	8013      	strh	r3, [r2, #0]
 800d8c6:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f7fe ffab 	bl	800c824 <clear_lock>
	return FR_OK;
 800d8ce:	4635      	mov	r5, r6
 800d8d0:	e775      	b.n	800d7be <find_volume+0x22e>
 800d8d2:	bf00      	nop
 800d8d4:	2000c7f8 	.word	0x2000c7f8

0800d8d8 <ld_clust>:
{
 800d8d8:	4602      	mov	r2, r0
	rv = rv << 8 | ptr[0];
 800d8da:	7ec8      	ldrb	r0, [r1, #27]
 800d8dc:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 800d8de:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 800d8e2:	7813      	ldrb	r3, [r2, #0]
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d000      	beq.n	800d8ea <ld_clust+0x12>
}
 800d8e8:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800d8ea:	7d4a      	ldrb	r2, [r1, #21]
 800d8ec:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d8ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	return cl;
 800d8f6:	e7f7      	b.n	800d8e8 <ld_clust+0x10>

0800d8f8 <follow_path>:
{
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	4683      	mov	fp, r0
	FATFS *fs = obj->fs;
 800d900:	f8d0 c000 	ldr.w	ip, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d904:	460b      	mov	r3, r1
 800d906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d90a:	2a2f      	cmp	r2, #47	@ 0x2f
 800d90c:	d0fa      	beq.n	800d904 <follow_path+0xc>
 800d90e:	2a5c      	cmp	r2, #92	@ 0x5c
 800d910:	d0f8      	beq.n	800d904 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800d912:	2200      	movs	r2, #0
 800d914:	f8cb 2008 	str.w	r2, [fp, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d918:	781a      	ldrb	r2, [r3, #0]
 800d91a:	2a1f      	cmp	r2, #31
 800d91c:	d903      	bls.n	800d926 <follow_path+0x2e>
 800d91e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d922:	9301      	str	r3, [sp, #4]
 800d924:	e0ef      	b.n	800db06 <follow_path+0x20e>
		dp->fn[NSFLAG] = NS_NONAME;
 800d926:	2380      	movs	r3, #128	@ 0x80
 800d928:	f88b 302f 	strb.w	r3, [fp, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d92c:	2100      	movs	r1, #0
 800d92e:	4658      	mov	r0, fp
 800d930:	f7ff fa1c 	bl	800cd6c <dir_sdi>
 800d934:	4601      	mov	r1, r0
}
 800d936:	4608      	mov	r0, r1
 800d938:	b005      	add	sp, #20
 800d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93e:	4605      	mov	r5, r0
 800d940:	3c01      	subs	r4, #1
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	191a      	adds	r2, r3, r4
 800d946:	e000      	b.n	800d94a <follow_path+0x52>
		w = p[si++];					/* Get a character */
 800d948:	460a      	mov	r2, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d94a:	1c51      	adds	r1, r2, #1
 800d94c:	7853      	ldrb	r3, [r2, #1]
 800d94e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d950:	d0fa      	beq.n	800d948 <follow_path+0x50>
 800d952:	2b5c      	cmp	r3, #92	@ 0x5c
 800d954:	d0f8      	beq.n	800d948 <follow_path+0x50>
 800d956:	9b02      	ldr	r3, [sp, #8]
 800d958:	f1c3 0301 	rsb	r3, r3, #1
 800d95c:	4413      	add	r3, r2
	*path = &p[si];						/* Return pointer to the next segment */
 800d95e:	9a01      	ldr	r2, [sp, #4]
 800d960:	441a      	add	r2, r3
 800d962:	9201      	str	r2, [sp, #4]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d964:	2c00      	cmp	r4, #0
 800d966:	f000 8129 	beq.w	800dbbc <follow_path+0x2c4>
 800d96a:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
 800d96e:	e022      	b.n	800d9b6 <follow_path+0xbe>
		lfn[di++] = w;					/* Store the Unicode character */
 800d970:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
 800d974:	1c63      	adds	r3, r4, #1
 800d976:	f817 0f01 	ldrb.w	r0, [r7, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800d97a:	281f      	cmp	r0, #31
 800d97c:	d917      	bls.n	800d9ae <follow_path+0xb6>
 800d97e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d980:	282f      	cmp	r0, #47	@ 0x2f
 800d982:	d0dc      	beq.n	800d93e <follow_path+0x46>
 800d984:	285c      	cmp	r0, #92	@ 0x5c
 800d986:	d0da      	beq.n	800d93e <follow_path+0x46>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d988:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800d98c:	d029      	beq.n	800d9e2 <follow_path+0xea>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d98e:	4649      	mov	r1, r9
 800d990:	f000 fc1c 	bl	800e1cc <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d994:	4602      	mov	r2, r0
 800d996:	b320      	cbz	r0, 800d9e2 <follow_path+0xea>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d998:	287f      	cmp	r0, #127	@ 0x7f
 800d99a:	d8e9      	bhi.n	800d970 <follow_path+0x78>
	while (*str && *str != chr) str++;
 800d99c:	2322      	movs	r3, #34	@ 0x22
 800d99e:	498f      	ldr	r1, [pc, #572]	@ (800dbdc <follow_path+0x2e4>)
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d01e      	beq.n	800d9e2 <follow_path+0xea>
 800d9a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1f9      	bne.n	800d9a0 <follow_path+0xa8>
 800d9ac:	e7e0      	b.n	800d970 <follow_path+0x78>
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	e7d5      	b.n	800d95e <follow_path+0x66>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9b2:	3c01      	subs	r4, #1
 800d9b4:	d012      	beq.n	800d9dc <follow_path+0xe4>
		w = lfn[di - 1];
 800d9b6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800d9ba:	2b20      	cmp	r3, #32
 800d9bc:	d0f9      	beq.n	800d9b2 <follow_path+0xba>
 800d9be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9c0:	d0f7      	beq.n	800d9b2 <follow_path+0xba>
	lfn[di] = 0;						/* LFN is created */
 800d9c2:	eb0a 0744 	add.w	r7, sl, r4, lsl #1
 800d9c6:	2600      	movs	r6, #0
 800d9c8:	f82a 6014 	strh.w	r6, [sl, r4, lsl #1]
	mem_set(dp->fn, ' ', 11);
 800d9cc:	220b      	movs	r2, #11
 800d9ce:	2120      	movs	r1, #32
 800d9d0:	f10b 0024 	add.w	r0, fp, #36	@ 0x24
 800d9d4:	f7fe fe59 	bl	800c68a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d9d8:	4633      	mov	r3, r6
 800d9da:	e005      	b.n	800d9e8 <follow_path+0xf0>
	lfn[di] = 0;						/* LFN is created */
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f8aa 3000 	strh.w	r3, [sl]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9e2:	2106      	movs	r1, #6
	return res;
 800d9e4:	e7a7      	b.n	800d936 <follow_path+0x3e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800d9ec:	2820      	cmp	r0, #32
 800d9ee:	d0fa      	beq.n	800d9e6 <follow_path+0xee>
 800d9f0:	282e      	cmp	r0, #46	@ 0x2e
 800d9f2:	d0f8      	beq.n	800d9e6 <follow_path+0xee>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d9f4:	2d1f      	cmp	r5, #31
 800d9f6:	bf8c      	ite	hi
 800d9f8:	2500      	movhi	r5, #0
 800d9fa:	2501      	movls	r5, #1
 800d9fc:	00ae      	lsls	r6, r5, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 800d9fe:	b10b      	cbz	r3, 800da04 <follow_path+0x10c>
 800da00:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800da04:	f837 2d02 	ldrh.w	r2, [r7, #-2]!
 800da08:	2a2e      	cmp	r2, #46	@ 0x2e
 800da0a:	d001      	beq.n	800da10 <follow_path+0x118>
 800da0c:	3c01      	subs	r4, #1
 800da0e:	d1f9      	bne.n	800da04 <follow_path+0x10c>
		w = lfn[si++];					/* Get an LFN character */
 800da10:	1c5d      	adds	r5, r3, #1
		if (!w) break;					/* Break on end of the LFN */
 800da12:	2800      	cmp	r0, #0
 800da14:	f000 80cc 	beq.w	800dbb0 <follow_path+0x2b8>
 800da18:	f04f 0900 	mov.w	r9, #0
 800da1c:	2708      	movs	r7, #8
 800da1e:	46c8      	mov	r8, r9
 800da20:	e008      	b.n	800da34 <follow_path+0x13c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da22:	42ac      	cmp	r4, r5
 800da24:	d00a      	beq.n	800da3c <follow_path+0x144>
			cf |= NS_LOSS | NS_LFN; continue;
 800da26:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN character */
 800da2a:	462b      	mov	r3, r5
 800da2c:	1c5d      	adds	r5, r3, #1
 800da2e:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800da32:	b360      	cbz	r0, 800da8e <follow_path+0x196>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da34:	2820      	cmp	r0, #32
 800da36:	d0f6      	beq.n	800da26 <follow_path+0x12e>
 800da38:	282e      	cmp	r0, #46	@ 0x2e
 800da3a:	d0f2      	beq.n	800da22 <follow_path+0x12a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800da3c:	45b8      	cmp	r8, r7
 800da3e:	d21d      	bcs.n	800da7c <follow_path+0x184>
 800da40:	42ac      	cmp	r4, r5
 800da42:	f000 80bf 	beq.w	800dbc4 <follow_path+0x2cc>
		if (w >= 0x80) {				/* Non ASCII character */
 800da46:	287f      	cmp	r0, #127	@ 0x7f
 800da48:	d878      	bhi.n	800db3c <follow_path+0x244>
		if (!w) break;					/* Break on end of the LFN */
 800da4a:	232b      	movs	r3, #43	@ 0x2b
 800da4c:	4a64      	ldr	r2, [pc, #400]	@ (800dbe0 <follow_path+0x2e8>)
	while (*str && *str != chr) str++;
 800da4e:	4298      	cmp	r0, r3
 800da50:	f000 8085 	beq.w	800db5e <follow_path+0x266>
 800da54:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1f8      	bne.n	800da4e <follow_path+0x156>
				if (IsUpper(w)) {		/* ASCII large capital */
 800da5c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da60:	b29b      	uxth	r3, r3
 800da62:	2b19      	cmp	r3, #25
 800da64:	f240 8086 	bls.w	800db74 <follow_path+0x27c>
					if (IsLower(w)) {	/* ASCII small capital */
 800da68:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b19      	cmp	r3, #25
 800da70:	d878      	bhi.n	800db64 <follow_path+0x26c>
						b |= 1; w -= 0x20;
 800da72:	f049 0901 	orr.w	r9, r9, #1
 800da76:	3820      	subs	r0, #32
 800da78:	b280      	uxth	r0, r0
 800da7a:	e073      	b.n	800db64 <follow_path+0x26c>
			if (ni == 11) {				/* Long extension */
 800da7c:	2f0b      	cmp	r7, #11
 800da7e:	d052      	beq.n	800db26 <follow_path+0x22e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800da80:	42ac      	cmp	r4, r5
 800da82:	f000 80a1 	beq.w	800dbc8 <follow_path+0x2d0>
 800da86:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
 800da8a:	f080 809d 	bcs.w	800dbc8 <follow_path+0x2d0>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da8e:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800da92:	2be5      	cmp	r3, #229	@ 0xe5
 800da94:	d04e      	beq.n	800db34 <follow_path+0x23c>
	if (ni == 8) b <<= 2;
 800da96:	2f08      	cmp	r7, #8
 800da98:	d073      	beq.n	800db82 <follow_path+0x28a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800da9a:	f009 030c 	and.w	r3, r9, #12
 800da9e:	2b0c      	cmp	r3, #12
 800daa0:	d003      	beq.n	800daaa <follow_path+0x1b2>
 800daa2:	f009 0203 	and.w	r2, r9, #3
 800daa6:	2a03      	cmp	r2, #3
 800daa8:	d101      	bne.n	800daae <follow_path+0x1b6>
 800daaa:	f046 0602 	orr.w	r6, r6, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800daae:	f016 0f02 	tst.w	r6, #2
 800dab2:	d109      	bne.n	800dac8 <follow_path+0x1d0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dab4:	f009 0203 	and.w	r2, r9, #3
 800dab8:	2a01      	cmp	r2, #1
 800daba:	bf08      	it	eq
 800dabc:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dac0:	2b04      	cmp	r3, #4
 800dac2:	bf08      	it	eq
 800dac4:	f046 0608 	orreq.w	r6, r6, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dac8:	f88b 602f 	strb.w	r6, [fp, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800dacc:	4658      	mov	r0, fp
 800dace:	f7ff fad3 	bl	800d078 <dir_find>
			ns = dp->fn[NSFLAG];
 800dad2:	f89b 202f 	ldrb.w	r2, [fp, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800dad6:	4601      	mov	r1, r0
 800dad8:	2800      	cmp	r0, #0
 800dada:	d15e      	bne.n	800db9a <follow_path+0x2a2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dadc:	f012 0f04 	tst.w	r2, #4
 800dae0:	f47f af29 	bne.w	800d936 <follow_path+0x3e>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dae4:	f89b 3006 	ldrb.w	r3, [fp, #6]
 800dae8:	f013 0f10 	tst.w	r3, #16
 800daec:	d05e      	beq.n	800dbac <follow_path+0x2b4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800daee:	9803      	ldr	r0, [sp, #12]
 800daf0:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800daf4:	f8db 3014 	ldr.w	r3, [fp, #20]
 800daf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafc:	4419      	add	r1, r3
 800dafe:	f7ff feeb 	bl	800d8d8 <ld_clust>
 800db02:	f8cb 0008 	str.w	r0, [fp, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800db06:	f8db 3000 	ldr.w	r3, [fp]
 800db0a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		w = p[si++];					/* Get a character */
 800db0e:	9f01      	ldr	r7, [sp, #4]
 800db10:	783d      	ldrb	r5, [r7, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800db12:	2d1f      	cmp	r5, #31
 800db14:	d952      	bls.n	800dbbc <follow_path+0x2c4>
 800db16:	f1aa 0802 	sub.w	r8, sl, #2
 800db1a:	9702      	str	r7, [sp, #8]
 800db1c:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800db1e:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800db20:	46a1      	mov	r9, r4
 800db22:	4628      	mov	r0, r5
 800db24:	e72c      	b.n	800d980 <follow_path+0x88>
				cf |= NS_LOSS | NS_LFN; break;
 800db26:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db2a:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800db2e:	2be5      	cmp	r3, #229	@ 0xe5
 800db30:	d1b3      	bne.n	800da9a <follow_path+0x1a2>
 800db32:	270b      	movs	r7, #11
 800db34:	2305      	movs	r3, #5
 800db36:	f88b 3024 	strb.w	r3, [fp, #36]	@ 0x24
 800db3a:	e7ac      	b.n	800da96 <follow_path+0x19e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800db3c:	2100      	movs	r1, #0
 800db3e:	f000 fb45 	bl	800e1cc <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db42:	4603      	mov	r3, r0
 800db44:	b910      	cbnz	r0, 800db4c <follow_path+0x254>
			cf |= NS_LFN;				/* Force create LFN entry */
 800db46:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db4a:	e008      	b.n	800db5e <follow_path+0x266>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db4c:	4a25      	ldr	r2, [pc, #148]	@ (800dbe4 <follow_path+0x2ec>)
 800db4e:	4413      	add	r3, r2
 800db50:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
 800db54:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db58:	2800      	cmp	r0, #0
 800db5a:	f47f af76 	bne.w	800da4a <follow_path+0x152>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800db5e:	f046 0603 	orr.w	r6, r6, #3
 800db62:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 800db64:	eb0b 0308 	add.w	r3, fp, r8
 800db68:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800db6c:	462b      	mov	r3, r5
		dp->fn[i++] = (BYTE)w;
 800db6e:	f108 0801 	add.w	r8, r8, #1
 800db72:	e75b      	b.n	800da2c <follow_path+0x134>
					b |= 2;
 800db74:	f049 0902 	orr.w	r9, r9, #2
 800db78:	e7f4      	b.n	800db64 <follow_path+0x26c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db7a:	f04f 0900 	mov.w	r9, #0
 800db7e:	2708      	movs	r7, #8
 800db80:	e7d8      	b.n	800db34 <follow_path+0x23c>
	if (ni == 8) b <<= 2;
 800db82:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800db86:	fa5f f983 	uxtb.w	r9, r3
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800db8a:	f003 030c 	and.w	r3, r3, #12
 800db8e:	2b0c      	cmp	r3, #12
 800db90:	d08b      	beq.n	800daaa <follow_path+0x1b2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800db92:	f016 0f02 	tst.w	r6, #2
 800db96:	d093      	beq.n	800dac0 <follow_path+0x1c8>
 800db98:	e796      	b.n	800dac8 <follow_path+0x1d0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db9a:	2804      	cmp	r0, #4
 800db9c:	f47f aecb 	bne.w	800d936 <follow_path+0x3e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dba0:	f012 0f04 	tst.w	r2, #4
 800dba4:	bf14      	ite	ne
 800dba6:	4601      	movne	r1, r0
 800dba8:	2105      	moveq	r1, #5
 800dbaa:	e6c4      	b.n	800d936 <follow_path+0x3e>
				res = FR_NO_PATH; break;
 800dbac:	2105      	movs	r1, #5
 800dbae:	e6c2      	b.n	800d936 <follow_path+0x3e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dbb0:	f89b 3024 	ldrb.w	r3, [fp, #36]	@ 0x24
 800dbb4:	2be5      	cmp	r3, #229	@ 0xe5
 800dbb6:	d0e0      	beq.n	800db7a <follow_path+0x282>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e7ea      	b.n	800db92 <follow_path+0x29a>
	lfn[di] = 0;						/* LFN is created */
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f8aa 3000 	strh.w	r3, [sl]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dbc2:	e70e      	b.n	800d9e2 <follow_path+0xea>
			if (ni == 11) {				/* Long extension */
 800dbc4:	2f0b      	cmp	r7, #11
 800dbc6:	d0ae      	beq.n	800db26 <follow_path+0x22e>
			b <<= 2; continue;
 800dbc8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800dbcc:	fa5f f989 	uxtb.w	r9, r9
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbd0:	4623      	mov	r3, r4
 800dbd2:	270b      	movs	r7, #11
 800dbd4:	f04f 0808 	mov.w	r8, #8
			b <<= 2; continue;
 800dbd8:	e728      	b.n	800da2c <follow_path+0x134>
 800dbda:	bf00      	nop
 800dbdc:	08012774 	.word	0x08012774
 800dbe0:	08012780 	.word	0x08012780
 800dbe4:	08012810 	.word	0x08012810

0800dbe8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	9001      	str	r0, [sp, #4]
 800dbee:	9100      	str	r1, [sp, #0]
 800dbf0:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dbf2:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dbf4:	a803      	add	r0, sp, #12
 800dbf6:	f7fe fe57 	bl	800c8a8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbfa:	1e04      	subs	r4, r0, #0
 800dbfc:	db1a      	blt.n	800dc34 <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dbfe:	4b11      	ldr	r3, [pc, #68]	@ (800dc44 <f_mount+0x5c>)
 800dc00:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800dc04:	b125      	cbz	r5, 800dc10 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dc06:	4628      	mov	r0, r5
 800dc08:	f7fe fe0c 	bl	800c824 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800dc10:	9b01      	ldr	r3, [sp, #4]
 800dc12:	b18b      	cbz	r3, 800dc38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dc14:	2200      	movs	r2, #0
 800dc16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dc18:	4a0a      	ldr	r2, [pc, #40]	@ (800dc44 <f_mount+0x5c>)
 800dc1a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc1e:	2e01      	cmp	r6, #1
 800dc20:	d002      	beq.n	800dc28 <f_mount+0x40>
 800dc22:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800dc24:	b004      	add	sp, #16
 800dc26:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dc28:	2200      	movs	r2, #0
 800dc2a:	a901      	add	r1, sp, #4
 800dc2c:	4668      	mov	r0, sp
 800dc2e:	f7ff fcaf 	bl	800d590 <find_volume>
	LEAVE_FF(fs, res);
 800dc32:	e7f7      	b.n	800dc24 <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc34:	200b      	movs	r0, #11
 800dc36:	e7f5      	b.n	800dc24 <f_mount+0x3c>
	FatFs[vol] = fs;					/* Register new fs object */
 800dc38:	2000      	movs	r0, #0
 800dc3a:	4b02      	ldr	r3, [pc, #8]	@ (800dc44 <f_mount+0x5c>)
 800dc3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dc40:	e7f0      	b.n	800dc24 <f_mount+0x3c>
 800dc42:	bf00      	nop
 800dc44:	2000c7fc 	.word	0x2000c7fc

0800dc48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc4c:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800dc50:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f000 80f7 	beq.w	800de46 <f_open+0x1fe>
 800dc58:	4614      	mov	r4, r2
 800dc5a:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc5c:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800dc60:	463a      	mov	r2, r7
 800dc62:	a982      	add	r1, sp, #520	@ 0x208
 800dc64:	a801      	add	r0, sp, #4
 800dc66:	f7ff fc93 	bl	800d590 <find_volume>
	if (res == FR_OK) {
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b130      	cbz	r0, 800dc7c <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dc6e:	2300      	movs	r3, #0
 800dc70:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800dc72:	4628      	mov	r0, r5
 800dc74:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800dc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800dc7c:	f8dd 8208 	ldr.w	r8, [sp, #520]	@ 0x208
 800dc80:	f8cd 820c 	str.w	r8, [sp, #524]	@ 0x20c
		INIT_NAMBUF(fs);
 800dc84:	ab02      	add	r3, sp, #8
 800dc86:	f8c8 300c 	str.w	r3, [r8, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc8a:	9901      	ldr	r1, [sp, #4]
 800dc8c:	a883      	add	r0, sp, #524	@ 0x20c
 800dc8e:	f7ff fe33 	bl	800d8f8 <follow_path>
		if (res == FR_OK) {
 800dc92:	4603      	mov	r3, r0
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f040 80fc 	bne.w	800de92 <f_open+0x24a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc9a:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f2c0 80f2 	blt.w	800de88 <f_open+0x240>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dca4:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 800dca8:	bf14      	ite	ne
 800dcaa:	2101      	movne	r1, #1
 800dcac:	2100      	moveq	r1, #0
 800dcae:	a883      	add	r0, sp, #524	@ 0x20c
 800dcb0:	f7fe fcf2 	bl	800c698 <chk_lock>
 800dcb4:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcb6:	f014 0f1c 	tst.w	r4, #28
 800dcba:	d071      	beq.n	800dda0 <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 800dcbc:	b950      	cbnz	r0, 800dcd4 <f_open+0x8c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dcbe:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800dcc2:	f013 0f11 	tst.w	r3, #17
 800dcc6:	f040 80b8 	bne.w	800de3a <f_open+0x1f2>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dcca:	f014 0f04 	tst.w	r4, #4
 800dcce:	d015      	beq.n	800dcfc <f_open+0xb4>
 800dcd0:	2508      	movs	r5, #8
 800dcd2:	e7cc      	b.n	800dc6e <f_open+0x26>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dcd4:	2b04      	cmp	r3, #4
 800dcd6:	d001      	beq.n	800dcdc <f_open+0x94>
					res = FR_DENIED;
 800dcd8:	461d      	mov	r5, r3
 800dcda:	e7c8      	b.n	800dc6e <f_open+0x26>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dcdc:	4b71      	ldr	r3, [pc, #452]	@ (800dea4 <f_open+0x25c>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	b123      	cbz	r3, 800dcec <f_open+0xa4>
 800dce2:	4b70      	ldr	r3, [pc, #448]	@ (800dea4 <f_open+0x25c>)
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	b10b      	cbz	r3, 800dcec <f_open+0xa4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dce8:	2512      	movs	r5, #18
 800dcea:	e7c0      	b.n	800dc6e <f_open+0x26>
 800dcec:	a883      	add	r0, sp, #524	@ 0x20c
 800dcee:	f7ff fa9d 	bl	800d22c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	f040 809f 	bne.w	800de36 <f_open+0x1ee>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dcf8:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dcfc:	f017 0f08 	tst.w	r7, #8
 800dd00:	d110      	bne.n	800dd24 <f_open+0xdc>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd02:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800dd06:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dd08:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800dd0a:	62b4      	str	r4, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd0c:	2f01      	cmp	r7, #1
 800dd0e:	bf94      	ite	ls
 800dd10:	2100      	movls	r1, #0
 800dd12:	2101      	movhi	r1, #1
 800dd14:	a883      	add	r0, sp, #524	@ 0x20c
 800dd16:	f7fe fd07 	bl	800c728 <inc_lock>
 800dd1a:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d14e      	bne.n	800ddbe <f_open+0x176>
 800dd20:	2502      	movs	r5, #2
 800dd22:	e7a4      	b.n	800dc6e <f_open+0x26>
				dw = GET_FATTIME();
 800dd24:	f7fc fcbe 	bl	800a6a4 <get_fattime>
 800dd28:	4681      	mov	r9, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd2a:	9c8b      	ldr	r4, [sp, #556]	@ 0x22c
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	f104 000e 	add.w	r0, r4, #14
 800dd32:	f7fe fc98 	bl	800c666 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd36:	4649      	mov	r1, r9
 800dd38:	f104 0016 	add.w	r0, r4, #22
 800dd3c:	f7fe fc93 	bl	800c666 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd40:	2320      	movs	r3, #32
 800dd42:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd44:	4621      	mov	r1, r4
 800dd46:	4640      	mov	r0, r8
 800dd48:	f7ff fdc6 	bl	800d8d8 <ld_clust>
 800dd4c:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd4e:	2200      	movs	r2, #0
 800dd50:	4621      	mov	r1, r4
 800dd52:	4640      	mov	r0, r8
 800dd54:	f7fe ff95 	bl	800cc82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd58:	2100      	movs	r1, #0
 800dd5a:	f104 001c 	add.w	r0, r4, #28
 800dd5e:	f7fe fc82 	bl	800c666 <st_dword>
					fs->wflag = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800dd68:	f1b9 0f00 	cmp.w	r9, #0
 800dd6c:	d102      	bne.n	800dd74 <f_open+0x12c>
				mode |= FA_MODIFIED;
 800dd6e:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
 800dd72:	e7c6      	b.n	800dd02 <f_open+0xba>
						dw = fs->winsect;
 800dd74:	f8d8 4030 	ldr.w	r4, [r8, #48]	@ 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800dd78:	2200      	movs	r2, #0
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	a883      	add	r0, sp, #524	@ 0x20c
 800dd7e:	f7ff f8ae 	bl	800cede <remove_chain>
						if (res == FR_OK) {
 800dd82:	b108      	cbz	r0, 800dd88 <f_open+0x140>
						res = remove_chain(&dj.obj, cl, 0);
 800dd84:	4605      	mov	r5, r0
 800dd86:	e772      	b.n	800dc6e <f_open+0x26>
							res = move_window(fs, dw);
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	f7fe fe02 	bl	800c994 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd90:	f109 33ff 	add.w	r3, r9, #4294967295
 800dd94:	f8c8 3010 	str.w	r3, [r8, #16]
		if (res == FR_OK) {
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d0e8      	beq.n	800dd6e <f_open+0x126>
							res = move_window(fs, dw);
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	e766      	b.n	800dc6e <f_open+0x26>
			if (res == FR_OK) {					/* Following succeeded */
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d14c      	bne.n	800de3e <f_open+0x1f6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dda4:	f89d 3212 	ldrb.w	r3, [sp, #530]	@ 0x212
 800dda8:	f013 0f10 	tst.w	r3, #16
 800ddac:	d149      	bne.n	800de42 <f_open+0x1fa>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ddae:	f014 0f02 	tst.w	r4, #2
 800ddb2:	d0a6      	beq.n	800dd02 <f_open+0xba>
 800ddb4:	f013 0f01 	tst.w	r3, #1
 800ddb8:	d0a3      	beq.n	800dd02 <f_open+0xba>
						res = FR_DENIED;
 800ddba:	2507      	movs	r5, #7
 800ddbc:	e757      	b.n	800dc6e <f_open+0x26>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	f7ff fd89 	bl	800d8d8 <ld_clust>
 800ddc6:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddc8:	f104 001c 	add.w	r0, r4, #28
 800ddcc:	f7fe fc40 	bl	800c650 <ld_dword>
 800ddd0:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddd6:	f8c6 8000 	str.w	r8, [r6]
			fp->obj.id = fs->id;
 800ddda:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ddde:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800dde0:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800dde2:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dde4:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dde6:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dde8:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 800ddec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddf0:	4648      	mov	r0, r9
 800ddf2:	f7fe fc4a 	bl	800c68a <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ddf6:	f017 0f20 	tst.w	r7, #32
 800ddfa:	f43f af3a 	beq.w	800dc72 <f_open+0x2a>
 800ddfe:	68f4      	ldr	r4, [r6, #12]
 800de00:	2c00      	cmp	r4, #0
 800de02:	f43f af36 	beq.w	800dc72 <f_open+0x2a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de06:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de08:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800de0c:	025f      	lsls	r7, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de0e:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de10:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 800de14:	d81c      	bhi.n	800de50 <f_open+0x208>
 800de16:	460b      	mov	r3, r1
 800de18:	e026      	b.n	800de68 <f_open+0x220>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de1a:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 800de1e:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de20:	2301      	movs	r3, #1
 800de22:	4649      	mov	r1, r9
 800de24:	f898 0001 	ldrb.w	r0, [r8, #1]
 800de28:	f7fe fbe8 	bl	800c5fc <disk_read>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f43f af20 	beq.w	800dc72 <f_open+0x2a>
 800de32:	2501      	movs	r5, #1
 800de34:	e71b      	b.n	800dc6e <f_open+0x26>
 800de36:	4605      	mov	r5, r0
 800de38:	e719      	b.n	800dc6e <f_open+0x26>
					res = FR_DENIED;
 800de3a:	2507      	movs	r5, #7
 800de3c:	e717      	b.n	800dc6e <f_open+0x26>
 800de3e:	4605      	mov	r5, r0
 800de40:	e715      	b.n	800dc6e <f_open+0x26>
					res = FR_NO_FILE;
 800de42:	2504      	movs	r5, #4
 800de44:	e713      	b.n	800dc6e <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 800de46:	2509      	movs	r5, #9
 800de48:	e713      	b.n	800dc72 <f_open+0x2a>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de4a:	1be4      	subs	r4, r4, r7
 800de4c:	42a7      	cmp	r7, r4
 800de4e:	d20a      	bcs.n	800de66 <f_open+0x21e>
					clst = get_fat(&fp->obj, clst);
 800de50:	4630      	mov	r0, r6
 800de52:	f7fe ff23 	bl	800cc9c <get_fat>
 800de56:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800de58:	2801      	cmp	r0, #1
 800de5a:	d912      	bls.n	800de82 <f_open+0x23a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de60:	d1f3      	bne.n	800de4a <f_open+0x202>
 800de62:	2501      	movs	r5, #1
 800de64:	e00e      	b.n	800de84 <f_open+0x23c>
 800de66:	4603      	mov	r3, r0
				fp->clust = clst;
 800de68:	61f3      	str	r3, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de6a:	f3c4 0308 	ubfx	r3, r4, #0, #9
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f43f aeff 	beq.w	800dc72 <f_open+0x2a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de74:	4640      	mov	r0, r8
 800de76:	f7fe fce9 	bl	800c84c <clust2sect>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d1cd      	bne.n	800de1a <f_open+0x1d2>
						res = FR_INT_ERR;
 800de7e:	2502      	movs	r5, #2
 800de80:	e6f5      	b.n	800dc6e <f_open+0x26>
					if (clst <= 1) res = FR_INT_ERR;
 800de82:	2502      	movs	r5, #2
				fp->clust = clst;
 800de84:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de86:	e6f2      	b.n	800dc6e <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de88:	f014 0f1c 	tst.w	r4, #28
 800de8c:	d107      	bne.n	800de9e <f_open+0x256>
				res = FR_INVALID_NAME;
 800de8e:	2306      	movs	r3, #6
 800de90:	e003      	b.n	800de9a <f_open+0x252>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de92:	f014 0f1c 	tst.w	r4, #28
 800de96:	f47f af1d 	bne.w	800dcd4 <f_open+0x8c>
						res = FR_INT_ERR;
 800de9a:	461d      	mov	r5, r3
 800de9c:	e6e7      	b.n	800dc6e <f_open+0x26>
				res = FR_INVALID_NAME;
 800de9e:	2306      	movs	r3, #6
 800dea0:	e71a      	b.n	800dcd8 <f_open+0x90>
 800dea2:	bf00      	nop
 800dea4:	2000c7d8 	.word	0x2000c7d8

0800dea8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	b087      	sub	sp, #28
 800deae:	4604      	mov	r4, r0
 800deb0:	460f      	mov	r7, r1
 800deb2:	4693      	mov	fp, r2
 800deb4:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800deb6:	2300      	movs	r3, #0
 800deb8:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800debc:	a905      	add	r1, sp, #20
 800debe:	f7fe fd19 	bl	800c8f4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dec2:	4606      	mov	r6, r0
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f040 80a9 	bne.w	800e01c <f_read+0x174>
 800deca:	7d66      	ldrb	r6, [r4, #21]
 800decc:	2e00      	cmp	r6, #0
 800dece:	f040 80a5 	bne.w	800e01c <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ded2:	7d23      	ldrb	r3, [r4, #20]
 800ded4:	f013 0901 	ands.w	r9, r3, #1
 800ded8:	f000 80bf 	beq.w	800e05a <f_read+0x1b2>
	remain = fp->obj.objsize - fp->fptr;
 800dedc:	68e3      	ldr	r3, [r4, #12]
 800dede:	69a2      	ldr	r2, [r4, #24]
 800dee0:	1a9b      	subs	r3, r3, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dee2:	459b      	cmp	fp, r3
 800dee4:	bf28      	it	cs
 800dee6:	469b      	movcs	fp, r3

	for ( ;  btr;								/* Repeat until all data read */
 800dee8:	f1bb 0f00 	cmp.w	fp, #0
 800deec:	f000 8096 	beq.w	800e01c <f_read+0x174>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800def0:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	f8cd 9008 	str.w	r9, [sp, #8]
 800defa:	9603      	str	r6, [sp, #12]
 800defc:	46ba      	mov	sl, r7
 800defe:	e055      	b.n	800dfac <f_read+0x104>
					if (fp->cltbl) {
 800df00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800df02:	b11b      	cbz	r3, 800df0c <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df04:	4620      	mov	r0, r4
 800df06:	f7fe fcac 	bl	800c862 <clmt_clust>
 800df0a:	e05f      	b.n	800dfcc <f_read+0x124>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800df0c:	69e1      	ldr	r1, [r4, #28]
 800df0e:	4620      	mov	r0, r4
 800df10:	f7fe fec4 	bl	800cc9c <get_fat>
 800df14:	e05a      	b.n	800dfcc <f_read+0x124>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800df16:	2602      	movs	r6, #2
 800df18:	7566      	strb	r6, [r4, #21]
 800df1a:	e07f      	b.n	800e01c <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df1c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800df20:	2301      	movs	r3, #1
 800df22:	7563      	strb	r3, [r4, #21]
 800df24:	464e      	mov	r6, r9
 800df26:	e079      	b.n	800e01c <f_read+0x174>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df28:	2602      	movs	r6, #2
 800df2a:	7566      	strb	r6, [r4, #21]
 800df2c:	e076      	b.n	800e01c <f_read+0x174>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800df2e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800df32:	2b00      	cmp	r3, #0
 800df34:	db01      	blt.n	800df3a <f_read+0x92>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800df36:	026d      	lsls	r5, r5, #9
				continue;
 800df38:	e02c      	b.n	800df94 <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800df3a:	6a20      	ldr	r0, [r4, #32]
 800df3c:	1bc0      	subs	r0, r0, r7
 800df3e:	42a8      	cmp	r0, r5
 800df40:	d2f9      	bcs.n	800df36 <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800df42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df46:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800df4a:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 800df4e:	f7fe fb92 	bl	800c676 <mem_cpy>
 800df52:	e7f0      	b.n	800df36 <f_read+0x8e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800df54:	6a22      	ldr	r2, [r4, #32]
 800df56:	42ba      	cmp	r2, r7
 800df58:	d00d      	beq.n	800df76 <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df5a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	db60      	blt.n	800e024 <f_read+0x17c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800df62:	2301      	movs	r3, #1
 800df64:	463a      	mov	r2, r7
 800df66:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800df6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800df6e:	f7fe fb45 	bl	800c5fc <disk_read>
 800df72:	2800      	cmp	r0, #0
 800df74:	d169      	bne.n	800e04a <f_read+0x1a2>
			fp->sect = sect;
 800df76:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df78:	69a1      	ldr	r1, [r4, #24]
 800df7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800df7e:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800df82:	455d      	cmp	r5, fp
 800df84:	bf28      	it	cs
 800df86:	465d      	movcs	r5, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800df88:	462a      	mov	r2, r5
 800df8a:	9b01      	ldr	r3, [sp, #4]
 800df8c:	4419      	add	r1, r3
 800df8e:	4650      	mov	r0, sl
 800df90:	f7fe fb71 	bl	800c676 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800df94:	44aa      	add	sl, r5
 800df96:	69a3      	ldr	r3, [r4, #24]
 800df98:	442b      	add	r3, r5
 800df9a:	61a3      	str	r3, [r4, #24]
 800df9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dfa0:	442b      	add	r3, r5
 800dfa2:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800dfa6:	ebbb 0b05 	subs.w	fp, fp, r5
 800dfaa:	d054      	beq.n	800e056 <f_read+0x1ae>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dfac:	69a1      	ldr	r1, [r4, #24]
 800dfae:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1e0      	bne.n	800df78 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dfb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800dfba:	f8b9 600a 	ldrh.w	r6, [r9, #10]
 800dfbe:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800dfc0:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 800dfc4:	d108      	bne.n	800dfd8 <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	d19a      	bne.n	800df00 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dfca:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dfcc:	2801      	cmp	r0, #1
 800dfce:	d9a2      	bls.n	800df16 <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dfd4:	d0a2      	beq.n	800df1c <f_read+0x74>
				fp->clust = clst;				/* Update current cluster */
 800dfd6:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfd8:	69e1      	ldr	r1, [r4, #28]
 800dfda:	4648      	mov	r0, r9
 800dfdc:	f7fe fc36 	bl	800c84c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d0a0      	beq.n	800df28 <f_read+0x80>
			sect += csect;
 800dfe6:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dfe8:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 800dfec:	d3b2      	bcc.n	800df54 <f_read+0xac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dfee:	ea4f 255b 	mov.w	r5, fp, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dff2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800dff6:	eb06 225b 	add.w	r2, r6, fp, lsr #9
 800dffa:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800dffc:	bf88      	it	hi
 800dffe:	1b9d      	subhi	r5, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e000:	462b      	mov	r3, r5
 800e002:	463a      	mov	r2, r7
 800e004:	4651      	mov	r1, sl
 800e006:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e00a:	f7fe faf7 	bl	800c5fc <disk_read>
 800e00e:	2800      	cmp	r0, #0
 800e010:	d08d      	beq.n	800df2e <f_read+0x86>
 800e012:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e016:	2301      	movs	r3, #1
 800e018:	7563      	strb	r3, [r4, #21]
 800e01a:	464e      	mov	r6, r9
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800e01c:	4630      	mov	r0, r6
 800e01e:	b007      	add	sp, #28
 800e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e024:	2301      	movs	r3, #1
 800e026:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e02a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e02e:	f7fe faf3 	bl	800c618 <disk_write>
 800e032:	b920      	cbnz	r0, 800e03e <f_read+0x196>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e034:	7d23      	ldrb	r3, [r4, #20]
 800e036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e03a:	7523      	strb	r3, [r4, #20]
 800e03c:	e791      	b.n	800df62 <f_read+0xba>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e03e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e042:	2301      	movs	r3, #1
 800e044:	7563      	strb	r3, [r4, #21]
 800e046:	464e      	mov	r6, r9
 800e048:	e7e8      	b.n	800e01c <f_read+0x174>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e04a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e04e:	2301      	movs	r3, #1
 800e050:	7563      	strb	r3, [r4, #21]
 800e052:	464e      	mov	r6, r9
 800e054:	e7e2      	b.n	800e01c <f_read+0x174>
 800e056:	9e03      	ldr	r6, [sp, #12]
 800e058:	e7e0      	b.n	800e01c <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e05a:	2607      	movs	r6, #7
 800e05c:	e7de      	b.n	800e01c <f_read+0x174>

0800e05e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e05e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e060:	b083      	sub	sp, #12
 800e062:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e064:	a901      	add	r1, sp, #4
 800e066:	f7fe fc45 	bl	800c8f4 <validate>
	if (res == FR_OK) {
 800e06a:	b978      	cbnz	r0, 800e08c <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e06c:	7d23      	ldrb	r3, [r4, #20]
 800e06e:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 800e072:	d00b      	beq.n	800e08c <f_sync+0x2e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e074:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e078:	d10a      	bne.n	800e090 <f_sync+0x32>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e07a:	f7fc fb13 	bl	800a6a4 <get_fattime>
 800e07e:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e080:	9e01      	ldr	r6, [sp, #4]
 800e082:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e084:	4630      	mov	r0, r6
 800e086:	f7fe fc85 	bl	800c994 <move_window>
				if (res == FR_OK) {
 800e08a:	b178      	cbz	r0, 800e0ac <f_sync+0x4e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800e08c:	b003      	add	sp, #12
 800e08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e090:	2301      	movs	r3, #1
 800e092:	6a22      	ldr	r2, [r4, #32]
 800e094:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	7840      	ldrb	r0, [r0, #1]
 800e09c:	f7fe fabc 	bl	800c618 <disk_write>
 800e0a0:	bb28      	cbnz	r0, 800e0ee <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0a2:	7d23      	ldrb	r3, [r4, #20]
 800e0a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0a8:	7523      	strb	r3, [r4, #20]
 800e0aa:	e7e6      	b.n	800e07a <f_sync+0x1c>
					dir = fp->dir_ptr;
 800e0ac:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e0ae:	7afb      	ldrb	r3, [r7, #11]
 800e0b0:	f043 0320 	orr.w	r3, r3, #32
 800e0b4:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e0b6:	68a2      	ldr	r2, [r4, #8]
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	f7fe fde1 	bl	800cc82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e0c0:	68e1      	ldr	r1, [r4, #12]
 800e0c2:	f107 001c 	add.w	r0, r7, #28
 800e0c6:	f7fe face 	bl	800c666 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	f107 0016 	add.w	r0, r7, #22
 800e0d0:	f7fe fac9 	bl	800c666 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	74bb      	strb	r3, [r7, #18]
	*ptr++ = (BYTE)val;
 800e0d8:	74fb      	strb	r3, [r7, #19]
					fs->wflag = 1;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f7fe fcf8 	bl	800cad4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e0e4:	7d23      	ldrb	r3, [r4, #20]
 800e0e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ea:	7523      	strb	r3, [r4, #20]
 800e0ec:	e7ce      	b.n	800e08c <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	e7cc      	b.n	800e08c <f_sync+0x2e>

0800e0f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e0f8:	f7ff ffb1 	bl	800e05e <f_sync>
	if (res == FR_OK)
 800e0fc:	b108      	cbz	r0, 800e102 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800e0fe:	b002      	add	sp, #8
 800e100:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e102:	a901      	add	r1, sp, #4
 800e104:	4620      	mov	r0, r4
 800e106:	f7fe fbf5 	bl	800c8f4 <validate>
		if (res == FR_OK) {
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d1f7      	bne.n	800e0fe <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e10e:	6920      	ldr	r0, [r4, #16]
 800e110:	f7fe fb66 	bl	800c7e0 <dec_lock>
			if (res == FR_OK)
 800e114:	2800      	cmp	r0, #0
 800e116:	d1f2      	bne.n	800e0fe <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800e118:	6020      	str	r0, [r4, #0]
 800e11a:	e7f0      	b.n	800e0fe <f_close+0xc>

0800e11c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e11c:	b530      	push	{r4, r5, lr}
 800e11e:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800e122:	9001      	str	r0, [sp, #4]
 800e124:	460c      	mov	r4, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e126:	2200      	movs	r2, #0
 800e128:	a983      	add	r1, sp, #524	@ 0x20c
 800e12a:	a801      	add	r0, sp, #4
 800e12c:	f7ff fa30 	bl	800d590 <find_volume>
	if (res == FR_OK) {
 800e130:	4605      	mov	r5, r0
 800e132:	b118      	cbz	r0, 800e13c <f_stat+0x20>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800e134:	4628      	mov	r0, r5
 800e136:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 800e13a:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj.obj.fs);
 800e13c:	9b83      	ldr	r3, [sp, #524]	@ 0x20c
 800e13e:	aa03      	add	r2, sp, #12
 800e140:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e142:	9901      	ldr	r1, [sp, #4]
 800e144:	a883      	add	r0, sp, #524	@ 0x20c
 800e146:	f7ff fbd7 	bl	800d8f8 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 800e14a:	4605      	mov	r5, r0
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d1f1      	bne.n	800e134 <f_stat+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e150:	f99d 323b 	ldrsb.w	r3, [sp, #571]	@ 0x23b
 800e154:	2b00      	cmp	r3, #0
 800e156:	db06      	blt.n	800e166 <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 800e158:	2c00      	cmp	r4, #0
 800e15a:	d0eb      	beq.n	800e134 <f_stat+0x18>
 800e15c:	4621      	mov	r1, r4
 800e15e:	a883      	add	r0, sp, #524	@ 0x20c
 800e160:	f7fe fc32 	bl	800c9c8 <get_fileinfo>
 800e164:	e7e6      	b.n	800e134 <f_stat+0x18>
				res = FR_INVALID_NAME;
 800e166:	2506      	movs	r5, #6
 800e168:	e7e4      	b.n	800e134 <f_stat+0x18>
	...

0800e16c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800e16c:	4b13      	ldr	r3, [pc, #76]	@ (800e1bc <FATFS_LinkDriverEx+0x50>)
 800e16e:	7a5b      	ldrb	r3, [r3, #9]
 800e170:	bb13      	cbnz	r3, 800e1b8 <FATFS_LinkDriverEx+0x4c>
{
 800e172:	b510      	push	{r4, lr}
 800e174:	4604      	mov	r4, r0
 800e176:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800e17a:	4b10      	ldr	r3, [pc, #64]	@ (800e1bc <FATFS_LinkDriverEx+0x50>)
 800e17c:	f893 c009 	ldrb.w	ip, [r3, #9]
 800e180:	fa5f fc8c 	uxtb.w	ip, ip
 800e184:	f04f 0e00 	mov.w	lr, #0
 800e188:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800e18c:	f893 c009 	ldrb.w	ip, [r3, #9]
 800e190:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800e194:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800e198:	7a5c      	ldrb	r4, [r3, #9]
 800e19a:	441c      	add	r4, r3
 800e19c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800e19e:	7a5a      	ldrb	r2, [r3, #9]
 800e1a0:	1c54      	adds	r4, r2, #1
 800e1a2:	b2e4      	uxtb	r4, r4
 800e1a4:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800e1a6:	3230      	adds	r2, #48	@ 0x30
 800e1a8:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800e1aa:	233a      	movs	r3, #58	@ 0x3a
 800e1ac:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800e1ae:	232f      	movs	r3, #47	@ 0x2f
 800e1b0:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800e1b2:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800e1b6:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800e1b8:	2001      	movs	r0, #1
}
 800e1ba:	4770      	bx	lr
 800e1bc:	2000c800 	.word	0x2000c800

0800e1c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1c0:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f7ff ffd2 	bl	800e16c <FATFS_LinkDriverEx>
}
 800e1c8:	bd08      	pop	{r3, pc}
	...

0800e1cc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e1cc:	287f      	cmp	r0, #127	@ 0x7f
 800e1ce:	d916      	bls.n	800e1fe <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e1d0:	b131      	cbz	r1, 800e1e0 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e1d2:	28ff      	cmp	r0, #255	@ 0xff
 800e1d4:	d812      	bhi.n	800e1fc <ff_convert+0x30>
 800e1d6:	3880      	subs	r0, #128	@ 0x80
 800e1d8:	4b09      	ldr	r3, [pc, #36]	@ (800e200 <ff_convert+0x34>)
 800e1da:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800e1de:	4770      	bx	lr
 800e1e0:	4a07      	ldr	r2, [pc, #28]	@ (800e200 <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e1e2:	2300      	movs	r3, #0
				if (chr == Tbl[c]) break;
 800e1e4:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e1e8:	4281      	cmp	r1, r0
 800e1ea:	d003      	beq.n	800e1f4 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	2b80      	cmp	r3, #128	@ 0x80
 800e1f2:	d1f7      	bne.n	800e1e4 <ff_convert+0x18>
			}
			c = (c + 0x80) & 0xFF;
 800e1f4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800e1f8:	b2c0      	uxtb	r0, r0
 800e1fa:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e1fc:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800e1fe:	4770      	bx	lr
 800e200:	08012b40 	.word	0x08012b40

0800e204 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e204:	b530      	push	{r4, r5, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e206:	4a22      	ldr	r2, [pc, #136]	@ (800e290 <ff_wtoupper+0x8c>)
 800e208:	4b22      	ldr	r3, [pc, #136]	@ (800e294 <ff_wtoupper+0x90>)
 800e20a:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800e20e:	bf38      	it	cc
 800e210:	461a      	movcc	r2, r3
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
		if (chr < bc + nc) {	/* In the block? */
 800e212:	4605      	mov	r5, r0
 800e214:	3204      	adds	r2, #4
		bc = *p++;								/* Get block base */
 800e216:	4694      	mov	ip, r2
 800e218:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 800e21c:	b1d9      	cbz	r1, 800e256 <ff_wtoupper+0x52>
 800e21e:	4288      	cmp	r0, r1
 800e220:	d319      	bcc.n	800e256 <ff_wtoupper+0x52>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e222:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800e226:	0a1c      	lsrs	r4, r3, #8
 800e228:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800e22a:	eb03 0e01 	add.w	lr, r3, r1
 800e22e:	4570      	cmp	r0, lr
 800e230:	db05      	blt.n	800e23e <ff_wtoupper+0x3a>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800e232:	3204      	adds	r2, #4
 800e234:	2c00      	cmp	r4, #0
 800e236:	d1ee      	bne.n	800e216 <ff_wtoupper+0x12>
 800e238:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
 800e23c:	e7ea      	b.n	800e214 <ff_wtoupper+0x10>
			switch (cmd) {
 800e23e:	2c08      	cmp	r4, #8
 800e240:	d809      	bhi.n	800e256 <ff_wtoupper+0x52>
 800e242:	e8df f004 	tbb	[pc, r4]
 800e246:	0905      	.short	0x0905
 800e248:	1815120f 	.word	0x1815120f
 800e24c:	1e1b      	.short	0x1e1b
 800e24e:	21          	.byte	0x21
 800e24f:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e250:	1a6d      	subs	r5, r5, r1
 800e252:	f832 0015 	ldrh.w	r0, [r2, r5, lsl #1]
	}

	return chr;
}
 800e256:	bd30      	pop	{r4, r5, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e258:	1a43      	subs	r3, r0, r1
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	1ac3      	subs	r3, r0, r3
 800e260:	b298      	uxth	r0, r3
 800e262:	e7f8      	b.n	800e256 <ff_wtoupper+0x52>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e264:	3810      	subs	r0, #16
 800e266:	b280      	uxth	r0, r0
 800e268:	e7f5      	b.n	800e256 <ff_wtoupper+0x52>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e26a:	3820      	subs	r0, #32
 800e26c:	b280      	uxth	r0, r0
 800e26e:	e7f2      	b.n	800e256 <ff_wtoupper+0x52>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e270:	3830      	subs	r0, #48	@ 0x30
 800e272:	b280      	uxth	r0, r0
 800e274:	e7ef      	b.n	800e256 <ff_wtoupper+0x52>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e276:	381a      	subs	r0, #26
 800e278:	b280      	uxth	r0, r0
 800e27a:	e7ec      	b.n	800e256 <ff_wtoupper+0x52>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e27c:	3008      	adds	r0, #8
 800e27e:	b280      	uxth	r0, r0
 800e280:	e7e9      	b.n	800e256 <ff_wtoupper+0x52>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e282:	3850      	subs	r0, #80	@ 0x50
 800e284:	b280      	uxth	r0, r0
 800e286:	e7e6      	b.n	800e256 <ff_wtoupper+0x52>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e288:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 800e28c:	b280      	uxth	r0, r0
 800e28e:	e7e2      	b.n	800e256 <ff_wtoupper+0x52>
 800e290:	08012890 	.word	0x08012890
 800e294:	0801294c 	.word	0x0801294c

0800e298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e298:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e29a:	2200      	movs	r2, #0
 800e29c:	490f      	ldr	r1, [pc, #60]	@ (800e2dc <MX_USB_DEVICE_Init+0x44>)
 800e29e:	4810      	ldr	r0, [pc, #64]	@ (800e2e0 <MX_USB_DEVICE_Init+0x48>)
 800e2a0:	f7fd fbe8 	bl	800ba74 <USBD_Init>
 800e2a4:	b970      	cbnz	r0, 800e2c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e2a6:	490f      	ldr	r1, [pc, #60]	@ (800e2e4 <MX_USB_DEVICE_Init+0x4c>)
 800e2a8:	480d      	ldr	r0, [pc, #52]	@ (800e2e0 <MX_USB_DEVICE_Init+0x48>)
 800e2aa:	f7fd fc21 	bl	800baf0 <USBD_RegisterClass>
 800e2ae:	b960      	cbnz	r0, 800e2ca <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e2b0:	490d      	ldr	r1, [pc, #52]	@ (800e2e8 <MX_USB_DEVICE_Init+0x50>)
 800e2b2:	480b      	ldr	r0, [pc, #44]	@ (800e2e0 <MX_USB_DEVICE_Init+0x48>)
 800e2b4:	f7fc fcf6 	bl	800aca4 <USBD_MSC_RegisterStorage>
 800e2b8:	b950      	cbnz	r0, 800e2d0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e2ba:	4809      	ldr	r0, [pc, #36]	@ (800e2e0 <MX_USB_DEVICE_Init+0x48>)
 800e2bc:	f7fd fc40 	bl	800bb40 <USBD_Start>
 800e2c0:	b948      	cbnz	r0, 800e2d6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e2c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e2c4:	f7f6 fd80 	bl	8004dc8 <Error_Handler>
 800e2c8:	e7ed      	b.n	800e2a6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800e2ca:	f7f6 fd7d 	bl	8004dc8 <Error_Handler>
 800e2ce:	e7ef      	b.n	800e2b0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800e2d0:	f7f6 fd7a 	bl	8004dc8 <Error_Handler>
 800e2d4:	e7f1      	b.n	800e2ba <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800e2d6:	f7f6 fd77 	bl	8004dc8 <Error_Handler>
}
 800e2da:	e7f2      	b.n	800e2c2 <MX_USB_DEVICE_Init+0x2a>
 800e2dc:	200000fc 	.word	0x200000fc
 800e2e0:	2000c80c 	.word	0x2000c80c
 800e2e4:	20000074 	.word	0x20000074
 800e2e8:	20000118 	.word	0x20000118

0800e2ec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e2ec:	2312      	movs	r3, #18
 800e2ee:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800e2f0:	4800      	ldr	r0, [pc, #0]	@ (800e2f4 <USBD_FS_DeviceDescriptor+0x8>)
 800e2f2:	4770      	bx	lr
 800e2f4:	200000e8 	.word	0x200000e8

0800e2f8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e2f8:	2304      	movs	r3, #4
 800e2fa:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800e2fc:	4800      	ldr	r0, [pc, #0]	@ (800e300 <USBD_FS_LangIDStrDescriptor+0x8>)
 800e2fe:	4770      	bx	lr
 800e300:	200000e4 	.word	0x200000e4

0800e304 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800e304:	b18a      	cbz	r2, 800e32a <IntToUnicode+0x26>
 800e306:	3101      	adds	r1, #1
 800e308:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800e30c:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800e310:	0f03      	lsrs	r3, r0, #28
 800e312:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800e316:	bf34      	ite	cc
 800e318:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e31a:	3337      	addcs	r3, #55	@ 0x37
 800e31c:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 800e320:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800e322:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 800e326:	4291      	cmp	r1, r2
 800e328:	d1f2      	bne.n	800e310 <IntToUnicode+0xc>
  }
}
 800e32a:	4770      	bx	lr

0800e32c <USBD_FS_SerialStrDescriptor>:
{
 800e32c:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800e32e:	231a      	movs	r3, #26
 800e330:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e332:	4b0c      	ldr	r3, [pc, #48]	@ (800e364 <USBD_FS_SerialStrDescriptor+0x38>)
 800e334:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 800e338:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800e33c:	18c0      	adds	r0, r0, r3
 800e33e:	d101      	bne.n	800e344 <USBD_FS_SerialStrDescriptor+0x18>
}
 800e340:	4809      	ldr	r0, [pc, #36]	@ (800e368 <USBD_FS_SerialStrDescriptor+0x3c>)
 800e342:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e344:	4b07      	ldr	r3, [pc, #28]	@ (800e364 <USBD_FS_SerialStrDescriptor+0x38>)
 800e346:	f8d3 5a14 	ldr.w	r5, [r3, #2580]	@ 0xa14
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e34a:	4c08      	ldr	r4, [pc, #32]	@ (800e36c <USBD_FS_SerialStrDescriptor+0x40>)
 800e34c:	2208      	movs	r2, #8
 800e34e:	4621      	mov	r1, r4
 800e350:	f7ff ffd8 	bl	800e304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e354:	2204      	movs	r2, #4
 800e356:	f104 0110 	add.w	r1, r4, #16
 800e35a:	4628      	mov	r0, r5
 800e35c:	f7ff ffd2 	bl	800e304 <IntToUnicode>
 800e360:	e7ee      	b.n	800e340 <USBD_FS_SerialStrDescriptor+0x14>
 800e362:	bf00      	nop
 800e364:	1fff7000 	.word	0x1fff7000
 800e368:	200000c8 	.word	0x200000c8
 800e36c:	200000ca 	.word	0x200000ca

0800e370 <USBD_FS_ProductStrDescriptor>:
{
 800e370:	b508      	push	{r3, lr}
 800e372:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e374:	4902      	ldr	r1, [pc, #8]	@ (800e380 <USBD_FS_ProductStrDescriptor+0x10>)
 800e376:	4803      	ldr	r0, [pc, #12]	@ (800e384 <USBD_FS_ProductStrDescriptor+0x14>)
 800e378:	f7fe f8c2 	bl	800c500 <USBD_GetString>
}
 800e37c:	4800      	ldr	r0, [pc, #0]	@ (800e380 <USBD_FS_ProductStrDescriptor+0x10>)
 800e37e:	bd08      	pop	{r3, pc}
 800e380:	2000cae8 	.word	0x2000cae8
 800e384:	08012788 	.word	0x08012788

0800e388 <USBD_FS_ManufacturerStrDescriptor>:
{
 800e388:	b510      	push	{r4, lr}
 800e38a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e38c:	4c03      	ldr	r4, [pc, #12]	@ (800e39c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800e38e:	4621      	mov	r1, r4
 800e390:	4803      	ldr	r0, [pc, #12]	@ (800e3a0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800e392:	f7fe f8b5 	bl	800c500 <USBD_GetString>
}
 800e396:	4620      	mov	r0, r4
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	bf00      	nop
 800e39c:	2000cae8 	.word	0x2000cae8
 800e3a0:	0801279c 	.word	0x0801279c

0800e3a4 <USBD_FS_ConfigStrDescriptor>:
{
 800e3a4:	b508      	push	{r3, lr}
 800e3a6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e3a8:	4902      	ldr	r1, [pc, #8]	@ (800e3b4 <USBD_FS_ConfigStrDescriptor+0x10>)
 800e3aa:	4803      	ldr	r0, [pc, #12]	@ (800e3b8 <USBD_FS_ConfigStrDescriptor+0x14>)
 800e3ac:	f7fe f8a8 	bl	800c500 <USBD_GetString>
}
 800e3b0:	4800      	ldr	r0, [pc, #0]	@ (800e3b4 <USBD_FS_ConfigStrDescriptor+0x10>)
 800e3b2:	bd08      	pop	{r3, pc}
 800e3b4:	2000cae8 	.word	0x2000cae8
 800e3b8:	080127b0 	.word	0x080127b0

0800e3bc <USBD_FS_InterfaceStrDescriptor>:
{
 800e3bc:	b508      	push	{r3, lr}
 800e3be:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e3c0:	4902      	ldr	r1, [pc, #8]	@ (800e3cc <USBD_FS_InterfaceStrDescriptor+0x10>)
 800e3c2:	4803      	ldr	r0, [pc, #12]	@ (800e3d0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800e3c4:	f7fe f89c 	bl	800c500 <USBD_GetString>
}
 800e3c8:	4800      	ldr	r0, [pc, #0]	@ (800e3cc <USBD_FS_InterfaceStrDescriptor+0x10>)
 800e3ca:	bd08      	pop	{r3, pc}
 800e3cc:	2000cae8 	.word	0x2000cae8
 800e3d0:	080127bc 	.word	0x080127bc

0800e3d4 <STORAGE_IsWriteProtected_FS>:
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	4770      	bx	lr

0800e3d8 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 800e3d8:	2000      	movs	r0, #0
 800e3da:	4770      	bx	lr

0800e3dc <STORAGE_Write_FS>:
{
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	460c      	mov	r4, r1
 800e3e0:	4615      	mov	r5, r2
 800e3e2:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e3e4:	f7fc f99b 	bl	800a71e <BSP_SD_IsDetected>
 800e3e8:	b1a0      	cbz	r0, 800e414 <STORAGE_Write_FS+0x38>
    BSP_SD_WriteBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800e3ea:	4632      	mov	r2, r6
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f7fc f968 	bl	800a6c4 <BSP_SD_WriteBlocks_DMA>
    while (usbd_WriteStatus == 0)
 800e3f4:	4a09      	ldr	r2, [pc, #36]	@ (800e41c <STORAGE_Write_FS+0x40>)
 800e3f6:	6813      	ldr	r3, [r2, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0fc      	beq.n	800e3f6 <STORAGE_Write_FS+0x1a>
    usbd_WriteStatus = 0;
 800e3fc:	4b07      	ldr	r3, [pc, #28]	@ (800e41c <STORAGE_Write_FS+0x40>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800e402:	4c07      	ldr	r4, [pc, #28]	@ (800e420 <STORAGE_Write_FS+0x44>)
 800e404:	f7fc f96c 	bl	800a6e0 <BSP_SD_GetCardState>
 800e408:	b118      	cbz	r0, 800e412 <STORAGE_Write_FS+0x36>
      if (timeout-- == 0)
 800e40a:	3c01      	subs	r4, #1
 800e40c:	d1fa      	bne.n	800e404 <STORAGE_Write_FS+0x28>
        return ret;
 800e40e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e412:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	e7fb      	b.n	800e412 <STORAGE_Write_FS+0x36>
 800e41a:	bf00      	nop
 800e41c:	2000ccf0 	.word	0x2000ccf0
 800e420:	000186a1 	.word	0x000186a1

0800e424 <STORAGE_Read_FS>:
{
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	460c      	mov	r4, r1
 800e428:	4615      	mov	r5, r2
 800e42a:	461e      	mov	r6, r3
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e42c:	f7fc f977 	bl	800a71e <BSP_SD_IsDetected>
 800e430:	b1a0      	cbz	r0, 800e45c <STORAGE_Read_FS+0x38>
    BSP_SD_ReadBlocks_DMA((uint32_t *) buf, blk_addr, blk_len);
 800e432:	4632      	mov	r2, r6
 800e434:	4629      	mov	r1, r5
 800e436:	4620      	mov	r0, r4
 800e438:	f7fc f936 	bl	800a6a8 <BSP_SD_ReadBlocks_DMA>
    while (usbd_ReadStatus == 0)
 800e43c:	4a09      	ldr	r2, [pc, #36]	@ (800e464 <STORAGE_Read_FS+0x40>)
 800e43e:	6813      	ldr	r3, [r2, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d0fc      	beq.n	800e43e <STORAGE_Read_FS+0x1a>
    usbd_ReadStatus = 0;
 800e444:	4b07      	ldr	r3, [pc, #28]	@ (800e464 <STORAGE_Read_FS+0x40>)
 800e446:	2200      	movs	r2, #0
 800e448:	601a      	str	r2, [r3, #0]
    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800e44a:	4c07      	ldr	r4, [pc, #28]	@ (800e468 <STORAGE_Read_FS+0x44>)
 800e44c:	f7fc f948 	bl	800a6e0 <BSP_SD_GetCardState>
 800e450:	b118      	cbz	r0, 800e45a <STORAGE_Read_FS+0x36>
      if (timeout-- == 0)
 800e452:	3c01      	subs	r4, #1
 800e454:	d1fa      	bne.n	800e44c <STORAGE_Read_FS+0x28>
        return ret;
 800e456:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295
 800e460:	e7fb      	b.n	800e45a <STORAGE_Read_FS+0x36>
 800e462:	bf00      	nop
 800e464:	2000ccec 	.word	0x2000ccec
 800e468:	000186a1 	.word	0x000186a1

0800e46c <STORAGE_IsReady_FS>:
{
 800e46c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e46e:	f7fc f956 	bl	800a71e <BSP_SD_IsDetected>
 800e472:	b188      	cbz	r0, 800e498 <STORAGE_IsReady_FS+0x2c>
    if (prev_status < 0)
 800e474:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b4 <STORAGE_IsReady_FS+0x48>)
 800e476:	f993 3000 	ldrsb.w	r3, [r3]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	db06      	blt.n	800e48c <STORAGE_IsReady_FS+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e47e:	f7fc f92f 	bl	800a6e0 <BSP_SD_GetCardState>
 800e482:	3800      	subs	r0, #0
 800e484:	bf18      	it	ne
 800e486:	2001      	movne	r0, #1
 800e488:	4240      	negs	r0, r0
}
 800e48a:	bd08      	pop	{r3, pc}
      BSP_SD_Init();
 800e48c:	f7fc f950 	bl	800a730 <BSP_SD_Init>
      prev_status = 0;
 800e490:	4b08      	ldr	r3, [pc, #32]	@ (800e4b4 <STORAGE_IsReady_FS+0x48>)
 800e492:	2200      	movs	r2, #0
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	e7f2      	b.n	800e47e <STORAGE_IsReady_FS+0x12>
  else if (prev_status == 0)
 800e498:	4b06      	ldr	r3, [pc, #24]	@ (800e4b4 <STORAGE_IsReady_FS+0x48>)
 800e49a:	f993 3000 	ldrsb.w	r3, [r3]
 800e49e:	b92b      	cbnz	r3, 800e4ac <STORAGE_IsReady_FS+0x40>
    prev_status = -1;
 800e4a0:	4b04      	ldr	r3, [pc, #16]	@ (800e4b4 <STORAGE_IsReady_FS+0x48>)
 800e4a2:	22ff      	movs	r2, #255	@ 0xff
 800e4a4:	701a      	strb	r2, [r3, #0]
  int8_t ret = -1;
 800e4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4aa:	e7ee      	b.n	800e48a <STORAGE_IsReady_FS+0x1e>
 800e4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b0:	e7eb      	b.n	800e48a <STORAGE_IsReady_FS+0x1e>
 800e4b2:	bf00      	nop
 800e4b4:	2000cce8 	.word	0x2000cce8

0800e4b8 <STORAGE_Init_FS>:
{
 800e4b8:	b508      	push	{r3, lr}
 BSP_SD_Init();
 800e4ba:	f7fc f939 	bl	800a730 <BSP_SD_Init>
}
 800e4be:	2000      	movs	r0, #0
 800e4c0:	bd08      	pop	{r3, pc}

0800e4c2 <STORAGE_GetCapacity_FS>:
{
 800e4c2:	b530      	push	{r4, r5, lr}
 800e4c4:	b089      	sub	sp, #36	@ 0x24
 800e4c6:	460d      	mov	r5, r1
 800e4c8:	4614      	mov	r4, r2
  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800e4ca:	f7fc f928 	bl	800a71e <BSP_SD_IsDetected>
 800e4ce:	b150      	cbz	r0, 800e4e6 <STORAGE_GetCapacity_FS+0x24>
    BSP_SD_GetCardInfo(&info);
 800e4d0:	4668      	mov	r0, sp
 800e4d2:	f7fc f90f 	bl	800a6f4 <BSP_SD_GetCardInfo>
    *block_num = info.LogBlockNbr - 1;
 800e4d6:	9b06      	ldr	r3, [sp, #24]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	602b      	str	r3, [r5, #0]
    *block_size = info.LogBlockSize;
 800e4dc:	9b07      	ldr	r3, [sp, #28]
 800e4de:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800e4e0:	2000      	movs	r0, #0
}
 800e4e2:	b009      	add	sp, #36	@ 0x24
 800e4e4:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;
 800e4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ea:	e7fa      	b.n	800e4e2 <STORAGE_GetCapacity_FS+0x20>

0800e4ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e4ec:	b530      	push	{r4, r5, lr}
 800e4ee:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	9303      	str	r3, [sp, #12]
 800e4f4:	9304      	str	r3, [sp, #16]
 800e4f6:	9305      	str	r3, [sp, #20]
 800e4f8:	9306      	str	r3, [sp, #24]
 800e4fa:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e4fc:	6803      	ldr	r3, [r0, #0]
 800e4fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e502:	d001      	beq.n	800e508 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e504:	b009      	add	sp, #36	@ 0x24
 800e506:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e508:	2500      	movs	r5, #0
 800e50a:	9501      	str	r5, [sp, #4]
 800e50c:	4c16      	ldr	r4, [pc, #88]	@ (800e568 <HAL_PCD_MspInit+0x7c>)
 800e50e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e510:	f043 0301 	orr.w	r3, r3, #1
 800e514:	6323      	str	r3, [r4, #48]	@ 0x30
 800e516:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e520:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e524:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e526:	2302      	movs	r3, #2
 800e528:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e52a:	2303      	movs	r3, #3
 800e52c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e52e:	230a      	movs	r3, #10
 800e530:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e532:	a903      	add	r1, sp, #12
 800e534:	480d      	ldr	r0, [pc, #52]	@ (800e56c <HAL_PCD_MspInit+0x80>)
 800e536:	f7f7 fc3b 	bl	8005db0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e53a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e53c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e540:	6363      	str	r3, [r4, #52]	@ 0x34
 800e542:	9502      	str	r5, [sp, #8]
 800e544:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e54a:	6463      	str	r3, [r4, #68]	@ 0x44
 800e54c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e54e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800e556:	462a      	mov	r2, r5
 800e558:	2107      	movs	r1, #7
 800e55a:	2043      	movs	r0, #67	@ 0x43
 800e55c:	f7f7 f9bc 	bl	80058d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e560:	2043      	movs	r0, #67	@ 0x43
 800e562:	f7f7 f9ef 	bl	8005944 <HAL_NVIC_EnableIRQ>
}
 800e566:	e7cd      	b.n	800e504 <HAL_PCD_MspInit+0x18>
 800e568:	40023800 	.word	0x40023800
 800e56c:	40020000 	.word	0x40020000

0800e570 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800e570:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 800e572:	6803      	ldr	r3, [r0, #0]
 800e574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e578:	d000      	beq.n	800e57c <HAL_PCD_MspDeInit+0xc>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800e57a:	bd08      	pop	{r3, pc}
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800e57c:	4a06      	ldr	r2, [pc, #24]	@ (800e598 <HAL_PCD_MspDeInit+0x28>)
 800e57e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800e580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e584:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800e586:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e58a:	4804      	ldr	r0, [pc, #16]	@ (800e59c <HAL_PCD_MspDeInit+0x2c>)
 800e58c:	f7f7 fd1a 	bl	8005fc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800e590:	2043      	movs	r0, #67	@ 0x43
 800e592:	f7f7 f9e5 	bl	8005960 <HAL_NVIC_DisableIRQ>
}
 800e596:	e7f0      	b.n	800e57a <HAL_PCD_MspDeInit+0xa>
 800e598:	40023800 	.word	0x40023800
 800e59c:	40020000 	.word	0x40020000

0800e5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5a2:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800e5a6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e5aa:	f7fd fadf 	bl	800bb6c <USBD_LL_SetupStage>
}
 800e5ae:	bd08      	pop	{r3, pc}

0800e5b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5b2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800e5b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e5ba:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800e5be:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e5c2:	f7fd faff 	bl	800bbc4 <USBD_LL_DataOutStage>
}
 800e5c6:	bd08      	pop	{r3, pc}

0800e5c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5ca:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800e5ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e5d2:	6a1a      	ldr	r2, [r3, #32]
 800e5d4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e5d8:	f7fd fb38 	bl	800bc4c <USBD_LL_DataInStage>
}
 800e5dc:	bd08      	pop	{r3, pc}

0800e5de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5de:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5e0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e5e4:	f7fd fbe7 	bl	800bdb6 <USBD_LL_SOF>
}
 800e5e8:	bd08      	pop	{r3, pc}

0800e5ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5ea:	b510      	push	{r4, lr}
 800e5ec:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e5ee:	79c1      	ldrb	r1, [r0, #7]
 800e5f0:	b111      	cbz	r1, 800e5f8 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e5f2:	2902      	cmp	r1, #2
 800e5f4:	d109      	bne.n	800e60a <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800e5f6:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5f8:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800e5fc:	f7fd fbbc 	bl	800bd78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e600:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800e604:	f7fd fb87 	bl	800bd16 <USBD_LL_Reset>
}
 800e608:	bd10      	pop	{r4, pc}
    Error_Handler();
 800e60a:	f7f6 fbdd 	bl	8004dc8 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e60e:	2101      	movs	r1, #1
 800e610:	e7f2      	b.n	800e5f8 <HAL_PCD_ResetCallback+0xe>
	...

0800e614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e614:	b510      	push	{r4, lr}
 800e616:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e618:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e61c:	f7fd fbaf 	bl	800bd7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e620:	6822      	ldr	r2, [r4, #0]
 800e622:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800e626:	f043 0301 	orr.w	r3, r3, #1
 800e62a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e62e:	7ae3      	ldrb	r3, [r4, #11]
 800e630:	b123      	cbz	r3, 800e63c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e632:	4a03      	ldr	r2, [pc, #12]	@ (800e640 <HAL_PCD_SuspendCallback+0x2c>)
 800e634:	6913      	ldr	r3, [r2, #16]
 800e636:	f043 0306 	orr.w	r3, r3, #6
 800e63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e63c:	bd10      	pop	{r4, pc}
 800e63e:	bf00      	nop
 800e640:	e000ed00 	.word	0xe000ed00

0800e644 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e646:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e64a:	f7fd fba7 	bl	800bd9c <USBD_LL_Resume>
}
 800e64e:	bd08      	pop	{r3, pc}

0800e650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e650:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e652:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e656:	f7fd fbd6 	bl	800be06 <USBD_LL_IsoOUTIncomplete>
}
 800e65a:	bd08      	pop	{r3, pc}

0800e65c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e65c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e65e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e662:	f7fd fbb9 	bl	800bdd8 <USBD_LL_IsoINIncomplete>
}
 800e666:	bd08      	pop	{r3, pc}

0800e668 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e668:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e66a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e66e:	f7fd fbe1 	bl	800be34 <USBD_LL_DevConnected>
}
 800e672:	bd08      	pop	{r3, pc}

0800e674 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e674:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e676:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800e67a:	f7fd fbdd 	bl	800be38 <USBD_LL_DevDisconnected>
}
 800e67e:	bd08      	pop	{r3, pc}

0800e680 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e680:	7802      	ldrb	r2, [r0, #0]
 800e682:	b10a      	cbz	r2, 800e688 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800e684:	2000      	movs	r0, #0
 800e686:	4770      	bx	lr
{
 800e688:	b510      	push	{r4, lr}
 800e68a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800e68c:	4815      	ldr	r0, [pc, #84]	@ (800e6e4 <USBD_LL_Init+0x64>)
 800e68e:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e692:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e696:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800e69a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e69c:	2304      	movs	r3, #4
 800e69e:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6a8:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6aa:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6ac:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6ae:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e6b0:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e6b2:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e6b4:	f7f7 fd51 	bl	800615a <HAL_PCD_Init>
 800e6b8:	b980      	cbnz	r0, 800e6dc <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e6ba:	4c0a      	ldr	r4, [pc, #40]	@ (800e6e4 <USBD_LL_Init+0x64>)
 800e6bc:	2180      	movs	r1, #128	@ 0x80
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7f8 fb6a 	bl	8006d98 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e6c4:	2240      	movs	r2, #64	@ 0x40
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7f8 fb40 	bl	8006d4e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e6ce:	2280      	movs	r2, #128	@ 0x80
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7f8 fb3b 	bl	8006d4e <HAL_PCDEx_SetTxFiFo>
}
 800e6d8:	2000      	movs	r0, #0
 800e6da:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800e6dc:	f7f6 fb74 	bl	8004dc8 <Error_Handler>
 800e6e0:	e7eb      	b.n	800e6ba <USBD_LL_Init+0x3a>
 800e6e2:	bf00      	nop
 800e6e4:	2000cf6c 	.word	0x2000cf6c

0800e6e8 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e6e8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800e6ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6f0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800e6f4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e6f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e6fc:	bf14      	ite	ne
 800e6fe:	7d98      	ldrbne	r0, [r3, #22]
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e700:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
  }
}
 800e704:	4770      	bx	lr

0800e706 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e706:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e708:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e70c:	f7f7 fea9 	bl	8006462 <HAL_PCD_EP_GetRxCount>
}
 800e710:	bd08      	pop	{r3, pc}
	...

0800e714 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800e714:	4800      	ldr	r0, [pc, #0]	@ (800e718 <USBD_static_malloc+0x4>)
 800e716:	4770      	bx	lr
 800e718:	2000ccf4 	.word	0x2000ccf4

0800e71c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800e71c:	4770      	bx	lr

0800e71e <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e71e:	b120      	cbz	r0, 800e72a <USBD_Get_USB_Status+0xc>
 800e720:	2802      	cmp	r0, #2
 800e722:	bf0c      	ite	eq
 800e724:	2001      	moveq	r0, #1
 800e726:	2003      	movne	r0, #3
 800e728:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800e72a:	4770      	bx	lr

0800e72c <USBD_LL_DeInit>:
{
 800e72c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 800e72e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e732:	f7f7 fd87 	bl	8006244 <HAL_PCD_DeInit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e736:	f7ff fff2 	bl	800e71e <USBD_Get_USB_Status>
}
 800e73a:	bd08      	pop	{r3, pc}

0800e73c <USBD_LL_Start>:
{
 800e73c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e73e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e742:	f7f7 fd96 	bl	8006272 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e746:	f7ff ffea 	bl	800e71e <USBD_Get_USB_Status>
}
 800e74a:	bd08      	pop	{r3, pc}

0800e74c <USBD_LL_Stop>:
{
 800e74c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800e74e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e752:	f7f7 fdb0 	bl	80062b6 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e756:	f7ff ffe2 	bl	800e71e <USBD_Get_USB_Status>
}
 800e75a:	bd08      	pop	{r3, pc}

0800e75c <USBD_LL_OpenEP>:
{
 800e75c:	b508      	push	{r3, lr}
 800e75e:	4694      	mov	ip, r2
 800e760:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e762:	4663      	mov	r3, ip
 800e764:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e768:	f7f7 fdde 	bl	8006328 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e76c:	f7ff ffd7 	bl	800e71e <USBD_Get_USB_Status>
}
 800e770:	bd08      	pop	{r3, pc}

0800e772 <USBD_LL_CloseEP>:
{
 800e772:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e774:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e778:	f7f7 fe19 	bl	80063ae <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e77c:	f7ff ffcf 	bl	800e71e <USBD_Get_USB_Status>
}
 800e780:	bd08      	pop	{r3, pc}

0800e782 <USBD_LL_FlushEP>:
{
 800e782:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e784:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e788:	f7f8 fac6 	bl	8006d18 <HAL_PCD_EP_Flush>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e78c:	f7ff ffc7 	bl	800e71e <USBD_Get_USB_Status>
}
 800e790:	bd08      	pop	{r3, pc}

0800e792 <USBD_LL_StallEP>:
{
 800e792:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e794:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e798:	f7f7 fe90 	bl	80064bc <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e79c:	f7ff ffbf 	bl	800e71e <USBD_Get_USB_Status>
}
 800e7a0:	bd08      	pop	{r3, pc}

0800e7a2 <USBD_LL_ClearStallEP>:
{
 800e7a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7a4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e7a8:	f7f7 fec9 	bl	800653e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ac:	f7ff ffb7 	bl	800e71e <USBD_Get_USB_Status>
}
 800e7b0:	bd08      	pop	{r3, pc}

0800e7b2 <USBD_LL_SetUSBAddress>:
{
 800e7b2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7b4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e7b8:	f7f7 fda3 	bl	8006302 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7bc:	f7ff ffaf 	bl	800e71e <USBD_Get_USB_Status>
}
 800e7c0:	bd08      	pop	{r3, pc}

0800e7c2 <USBD_LL_Transmit>:
{
 800e7c2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7c4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e7c8:	f7f7 fe54 	bl	8006474 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7cc:	f7ff ffa7 	bl	800e71e <USBD_Get_USB_Status>
}
 800e7d0:	bd08      	pop	{r3, pc}

0800e7d2 <USBD_LL_PrepareReceive>:
{
 800e7d2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7d4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800e7d8:	f7f7 fe1f 	bl	800641a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7dc:	f7ff ff9f 	bl	800e71e <USBD_Get_USB_Status>
}
 800e7e0:	bd08      	pop	{r3, pc}

0800e7e2 <__cvt>:
 800e7e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e6:	ec57 6b10 	vmov	r6, r7, d0
 800e7ea:	2f00      	cmp	r7, #0
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	463b      	mov	r3, r7
 800e7f2:	bfbb      	ittet	lt
 800e7f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e7f8:	461f      	movlt	r7, r3
 800e7fa:	2300      	movge	r3, #0
 800e7fc:	232d      	movlt	r3, #45	@ 0x2d
 800e7fe:	700b      	strb	r3, [r1, #0]
 800e800:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e802:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e806:	4691      	mov	r9, r2
 800e808:	f023 0820 	bic.w	r8, r3, #32
 800e80c:	bfbc      	itt	lt
 800e80e:	4632      	movlt	r2, r6
 800e810:	4616      	movlt	r6, r2
 800e812:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e816:	d005      	beq.n	800e824 <__cvt+0x42>
 800e818:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e81c:	d100      	bne.n	800e820 <__cvt+0x3e>
 800e81e:	3401      	adds	r4, #1
 800e820:	2102      	movs	r1, #2
 800e822:	e000      	b.n	800e826 <__cvt+0x44>
 800e824:	2103      	movs	r1, #3
 800e826:	ab03      	add	r3, sp, #12
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	ab02      	add	r3, sp, #8
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	ec47 6b10 	vmov	d0, r6, r7
 800e832:	4653      	mov	r3, sl
 800e834:	4622      	mov	r2, r4
 800e836:	f000 ffc3 	bl	800f7c0 <_dtoa_r>
 800e83a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e83e:	4605      	mov	r5, r0
 800e840:	d119      	bne.n	800e876 <__cvt+0x94>
 800e842:	f019 0f01 	tst.w	r9, #1
 800e846:	d00e      	beq.n	800e866 <__cvt+0x84>
 800e848:	eb00 0904 	add.w	r9, r0, r4
 800e84c:	2200      	movs	r2, #0
 800e84e:	2300      	movs	r3, #0
 800e850:	4630      	mov	r0, r6
 800e852:	4639      	mov	r1, r7
 800e854:	f7f2 f960 	bl	8000b18 <__aeabi_dcmpeq>
 800e858:	b108      	cbz	r0, 800e85e <__cvt+0x7c>
 800e85a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e85e:	2230      	movs	r2, #48	@ 0x30
 800e860:	9b03      	ldr	r3, [sp, #12]
 800e862:	454b      	cmp	r3, r9
 800e864:	d31e      	bcc.n	800e8a4 <__cvt+0xc2>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e86a:	1b5b      	subs	r3, r3, r5
 800e86c:	4628      	mov	r0, r5
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	b004      	add	sp, #16
 800e872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e87a:	eb00 0904 	add.w	r9, r0, r4
 800e87e:	d1e5      	bne.n	800e84c <__cvt+0x6a>
 800e880:	7803      	ldrb	r3, [r0, #0]
 800e882:	2b30      	cmp	r3, #48	@ 0x30
 800e884:	d10a      	bne.n	800e89c <__cvt+0xba>
 800e886:	2200      	movs	r2, #0
 800e888:	2300      	movs	r3, #0
 800e88a:	4630      	mov	r0, r6
 800e88c:	4639      	mov	r1, r7
 800e88e:	f7f2 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800e892:	b918      	cbnz	r0, 800e89c <__cvt+0xba>
 800e894:	f1c4 0401 	rsb	r4, r4, #1
 800e898:	f8ca 4000 	str.w	r4, [sl]
 800e89c:	f8da 3000 	ldr.w	r3, [sl]
 800e8a0:	4499      	add	r9, r3
 800e8a2:	e7d3      	b.n	800e84c <__cvt+0x6a>
 800e8a4:	1c59      	adds	r1, r3, #1
 800e8a6:	9103      	str	r1, [sp, #12]
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	e7d9      	b.n	800e860 <__cvt+0x7e>

0800e8ac <__exponent>:
 800e8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8ae:	2900      	cmp	r1, #0
 800e8b0:	bfba      	itte	lt
 800e8b2:	4249      	neglt	r1, r1
 800e8b4:	232d      	movlt	r3, #45	@ 0x2d
 800e8b6:	232b      	movge	r3, #43	@ 0x2b
 800e8b8:	2909      	cmp	r1, #9
 800e8ba:	7002      	strb	r2, [r0, #0]
 800e8bc:	7043      	strb	r3, [r0, #1]
 800e8be:	dd29      	ble.n	800e914 <__exponent+0x68>
 800e8c0:	f10d 0307 	add.w	r3, sp, #7
 800e8c4:	461d      	mov	r5, r3
 800e8c6:	270a      	movs	r7, #10
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	fbb1 f6f7 	udiv	r6, r1, r7
 800e8ce:	fb07 1416 	mls	r4, r7, r6, r1
 800e8d2:	3430      	adds	r4, #48	@ 0x30
 800e8d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e8d8:	460c      	mov	r4, r1
 800e8da:	2c63      	cmp	r4, #99	@ 0x63
 800e8dc:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	dcf1      	bgt.n	800e8c8 <__exponent+0x1c>
 800e8e4:	3130      	adds	r1, #48	@ 0x30
 800e8e6:	1e94      	subs	r4, r2, #2
 800e8e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e8ec:	1c41      	adds	r1, r0, #1
 800e8ee:	4623      	mov	r3, r4
 800e8f0:	42ab      	cmp	r3, r5
 800e8f2:	d30a      	bcc.n	800e90a <__exponent+0x5e>
 800e8f4:	f10d 0309 	add.w	r3, sp, #9
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	42ac      	cmp	r4, r5
 800e8fc:	bf88      	it	hi
 800e8fe:	2300      	movhi	r3, #0
 800e900:	3302      	adds	r3, #2
 800e902:	4403      	add	r3, r0
 800e904:	1a18      	subs	r0, r3, r0
 800e906:	b003      	add	sp, #12
 800e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e90e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e912:	e7ed      	b.n	800e8f0 <__exponent+0x44>
 800e914:	2330      	movs	r3, #48	@ 0x30
 800e916:	3130      	adds	r1, #48	@ 0x30
 800e918:	7083      	strb	r3, [r0, #2]
 800e91a:	70c1      	strb	r1, [r0, #3]
 800e91c:	1d03      	adds	r3, r0, #4
 800e91e:	e7f1      	b.n	800e904 <__exponent+0x58>

0800e920 <_printf_float>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	b08d      	sub	sp, #52	@ 0x34
 800e926:	460c      	mov	r4, r1
 800e928:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e92c:	4616      	mov	r6, r2
 800e92e:	461f      	mov	r7, r3
 800e930:	4605      	mov	r5, r0
 800e932:	f000 fe37 	bl	800f5a4 <_localeconv_r>
 800e936:	6803      	ldr	r3, [r0, #0]
 800e938:	9304      	str	r3, [sp, #16]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7f1 fcc0 	bl	80002c0 <strlen>
 800e940:	2300      	movs	r3, #0
 800e942:	930a      	str	r3, [sp, #40]	@ 0x28
 800e944:	f8d8 3000 	ldr.w	r3, [r8]
 800e948:	9005      	str	r0, [sp, #20]
 800e94a:	3307      	adds	r3, #7
 800e94c:	f023 0307 	bic.w	r3, r3, #7
 800e950:	f103 0208 	add.w	r2, r3, #8
 800e954:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e958:	f8d4 b000 	ldr.w	fp, [r4]
 800e95c:	f8c8 2000 	str.w	r2, [r8]
 800e960:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e964:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e968:	9307      	str	r3, [sp, #28]
 800e96a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e96e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e976:	4b9c      	ldr	r3, [pc, #624]	@ (800ebe8 <_printf_float+0x2c8>)
 800e978:	f04f 32ff 	mov.w	r2, #4294967295
 800e97c:	f7f2 f8fe 	bl	8000b7c <__aeabi_dcmpun>
 800e980:	bb70      	cbnz	r0, 800e9e0 <_printf_float+0xc0>
 800e982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e986:	4b98      	ldr	r3, [pc, #608]	@ (800ebe8 <_printf_float+0x2c8>)
 800e988:	f04f 32ff 	mov.w	r2, #4294967295
 800e98c:	f7f2 f8d8 	bl	8000b40 <__aeabi_dcmple>
 800e990:	bb30      	cbnz	r0, 800e9e0 <_printf_float+0xc0>
 800e992:	2200      	movs	r2, #0
 800e994:	2300      	movs	r3, #0
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f2 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800e99e:	b110      	cbz	r0, 800e9a6 <_printf_float+0x86>
 800e9a0:	232d      	movs	r3, #45	@ 0x2d
 800e9a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9a6:	4a91      	ldr	r2, [pc, #580]	@ (800ebec <_printf_float+0x2cc>)
 800e9a8:	4b91      	ldr	r3, [pc, #580]	@ (800ebf0 <_printf_float+0x2d0>)
 800e9aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e9ae:	bf8c      	ite	hi
 800e9b0:	4690      	movhi	r8, r2
 800e9b2:	4698      	movls	r8, r3
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	f02b 0304 	bic.w	r3, fp, #4
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	f04f 0900 	mov.w	r9, #0
 800e9c2:	9700      	str	r7, [sp, #0]
 800e9c4:	4633      	mov	r3, r6
 800e9c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f000 f9d2 	bl	800ed74 <_printf_common>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	f040 808d 	bne.w	800eaf0 <_printf_float+0x1d0>
 800e9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9da:	b00d      	add	sp, #52	@ 0x34
 800e9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e0:	4642      	mov	r2, r8
 800e9e2:	464b      	mov	r3, r9
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	f7f2 f8c8 	bl	8000b7c <__aeabi_dcmpun>
 800e9ec:	b140      	cbz	r0, 800ea00 <_printf_float+0xe0>
 800e9ee:	464b      	mov	r3, r9
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bfbc      	itt	lt
 800e9f4:	232d      	movlt	r3, #45	@ 0x2d
 800e9f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e9fa:	4a7e      	ldr	r2, [pc, #504]	@ (800ebf4 <_printf_float+0x2d4>)
 800e9fc:	4b7e      	ldr	r3, [pc, #504]	@ (800ebf8 <_printf_float+0x2d8>)
 800e9fe:	e7d4      	b.n	800e9aa <_printf_float+0x8a>
 800ea00:	6863      	ldr	r3, [r4, #4]
 800ea02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ea06:	9206      	str	r2, [sp, #24]
 800ea08:	1c5a      	adds	r2, r3, #1
 800ea0a:	d13b      	bne.n	800ea84 <_printf_float+0x164>
 800ea0c:	2306      	movs	r3, #6
 800ea0e:	6063      	str	r3, [r4, #4]
 800ea10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ea14:	2300      	movs	r3, #0
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	9303      	str	r3, [sp, #12]
 800ea1a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ea20:	ab09      	add	r3, sp, #36	@ 0x24
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	6861      	ldr	r1, [r4, #4]
 800ea26:	ec49 8b10 	vmov	d0, r8, r9
 800ea2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ea2e:	4628      	mov	r0, r5
 800ea30:	f7ff fed7 	bl	800e7e2 <__cvt>
 800ea34:	9b06      	ldr	r3, [sp, #24]
 800ea36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea38:	2b47      	cmp	r3, #71	@ 0x47
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	d129      	bne.n	800ea92 <_printf_float+0x172>
 800ea3e:	1cc8      	adds	r0, r1, #3
 800ea40:	db02      	blt.n	800ea48 <_printf_float+0x128>
 800ea42:	6863      	ldr	r3, [r4, #4]
 800ea44:	4299      	cmp	r1, r3
 800ea46:	dd41      	ble.n	800eacc <_printf_float+0x1ac>
 800ea48:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea4c:	fa5f fa8a 	uxtb.w	sl, sl
 800ea50:	3901      	subs	r1, #1
 800ea52:	4652      	mov	r2, sl
 800ea54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ea58:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea5a:	f7ff ff27 	bl	800e8ac <__exponent>
 800ea5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea60:	1813      	adds	r3, r2, r0
 800ea62:	2a01      	cmp	r2, #1
 800ea64:	4681      	mov	r9, r0
 800ea66:	6123      	str	r3, [r4, #16]
 800ea68:	dc02      	bgt.n	800ea70 <_printf_float+0x150>
 800ea6a:	6822      	ldr	r2, [r4, #0]
 800ea6c:	07d2      	lsls	r2, r2, #31
 800ea6e:	d501      	bpl.n	800ea74 <_printf_float+0x154>
 800ea70:	3301      	adds	r3, #1
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d0a2      	beq.n	800e9c2 <_printf_float+0xa2>
 800ea7c:	232d      	movs	r3, #45	@ 0x2d
 800ea7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea82:	e79e      	b.n	800e9c2 <_printf_float+0xa2>
 800ea84:	9a06      	ldr	r2, [sp, #24]
 800ea86:	2a47      	cmp	r2, #71	@ 0x47
 800ea88:	d1c2      	bne.n	800ea10 <_printf_float+0xf0>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1c0      	bne.n	800ea10 <_printf_float+0xf0>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e7bd      	b.n	800ea0e <_printf_float+0xee>
 800ea92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea96:	d9db      	bls.n	800ea50 <_printf_float+0x130>
 800ea98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea9c:	d118      	bne.n	800ead0 <_printf_float+0x1b0>
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	6863      	ldr	r3, [r4, #4]
 800eaa2:	dd0b      	ble.n	800eabc <_printf_float+0x19c>
 800eaa4:	6121      	str	r1, [r4, #16]
 800eaa6:	b913      	cbnz	r3, 800eaae <_printf_float+0x18e>
 800eaa8:	6822      	ldr	r2, [r4, #0]
 800eaaa:	07d0      	lsls	r0, r2, #31
 800eaac:	d502      	bpl.n	800eab4 <_printf_float+0x194>
 800eaae:	3301      	adds	r3, #1
 800eab0:	440b      	add	r3, r1
 800eab2:	6123      	str	r3, [r4, #16]
 800eab4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eab6:	f04f 0900 	mov.w	r9, #0
 800eaba:	e7db      	b.n	800ea74 <_printf_float+0x154>
 800eabc:	b913      	cbnz	r3, 800eac4 <_printf_float+0x1a4>
 800eabe:	6822      	ldr	r2, [r4, #0]
 800eac0:	07d2      	lsls	r2, r2, #31
 800eac2:	d501      	bpl.n	800eac8 <_printf_float+0x1a8>
 800eac4:	3302      	adds	r3, #2
 800eac6:	e7f4      	b.n	800eab2 <_printf_float+0x192>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e7f2      	b.n	800eab2 <_printf_float+0x192>
 800eacc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ead0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ead2:	4299      	cmp	r1, r3
 800ead4:	db05      	blt.n	800eae2 <_printf_float+0x1c2>
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	6121      	str	r1, [r4, #16]
 800eada:	07d8      	lsls	r0, r3, #31
 800eadc:	d5ea      	bpl.n	800eab4 <_printf_float+0x194>
 800eade:	1c4b      	adds	r3, r1, #1
 800eae0:	e7e7      	b.n	800eab2 <_printf_float+0x192>
 800eae2:	2900      	cmp	r1, #0
 800eae4:	bfd4      	ite	le
 800eae6:	f1c1 0202 	rsble	r2, r1, #2
 800eaea:	2201      	movgt	r2, #1
 800eaec:	4413      	add	r3, r2
 800eaee:	e7e0      	b.n	800eab2 <_printf_float+0x192>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	055a      	lsls	r2, r3, #21
 800eaf4:	d407      	bmi.n	800eb06 <_printf_float+0x1e6>
 800eaf6:	6923      	ldr	r3, [r4, #16]
 800eaf8:	4642      	mov	r2, r8
 800eafa:	4631      	mov	r1, r6
 800eafc:	4628      	mov	r0, r5
 800eafe:	47b8      	blx	r7
 800eb00:	3001      	adds	r0, #1
 800eb02:	d12b      	bne.n	800eb5c <_printf_float+0x23c>
 800eb04:	e767      	b.n	800e9d6 <_printf_float+0xb6>
 800eb06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb0a:	f240 80dd 	bls.w	800ecc8 <_printf_float+0x3a8>
 800eb0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eb12:	2200      	movs	r2, #0
 800eb14:	2300      	movs	r3, #0
 800eb16:	f7f1 ffff 	bl	8000b18 <__aeabi_dcmpeq>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d033      	beq.n	800eb86 <_printf_float+0x266>
 800eb1e:	4a37      	ldr	r2, [pc, #220]	@ (800ebfc <_printf_float+0x2dc>)
 800eb20:	2301      	movs	r3, #1
 800eb22:	4631      	mov	r1, r6
 800eb24:	4628      	mov	r0, r5
 800eb26:	47b8      	blx	r7
 800eb28:	3001      	adds	r0, #1
 800eb2a:	f43f af54 	beq.w	800e9d6 <_printf_float+0xb6>
 800eb2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eb32:	4543      	cmp	r3, r8
 800eb34:	db02      	blt.n	800eb3c <_printf_float+0x21c>
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	07d8      	lsls	r0, r3, #31
 800eb3a:	d50f      	bpl.n	800eb5c <_printf_float+0x23c>
 800eb3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb40:	4631      	mov	r1, r6
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b8      	blx	r7
 800eb46:	3001      	adds	r0, #1
 800eb48:	f43f af45 	beq.w	800e9d6 <_printf_float+0xb6>
 800eb4c:	f04f 0900 	mov.w	r9, #0
 800eb50:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb54:	f104 0a1a 	add.w	sl, r4, #26
 800eb58:	45c8      	cmp	r8, r9
 800eb5a:	dc09      	bgt.n	800eb70 <_printf_float+0x250>
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	079b      	lsls	r3, r3, #30
 800eb60:	f100 8103 	bmi.w	800ed6a <_printf_float+0x44a>
 800eb64:	68e0      	ldr	r0, [r4, #12]
 800eb66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb68:	4298      	cmp	r0, r3
 800eb6a:	bfb8      	it	lt
 800eb6c:	4618      	movlt	r0, r3
 800eb6e:	e734      	b.n	800e9da <_printf_float+0xba>
 800eb70:	2301      	movs	r3, #1
 800eb72:	4652      	mov	r2, sl
 800eb74:	4631      	mov	r1, r6
 800eb76:	4628      	mov	r0, r5
 800eb78:	47b8      	blx	r7
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	f43f af2b 	beq.w	800e9d6 <_printf_float+0xb6>
 800eb80:	f109 0901 	add.w	r9, r9, #1
 800eb84:	e7e8      	b.n	800eb58 <_printf_float+0x238>
 800eb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	dc39      	bgt.n	800ec00 <_printf_float+0x2e0>
 800eb8c:	4a1b      	ldr	r2, [pc, #108]	@ (800ebfc <_printf_float+0x2dc>)
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4631      	mov	r1, r6
 800eb92:	4628      	mov	r0, r5
 800eb94:	47b8      	blx	r7
 800eb96:	3001      	adds	r0, #1
 800eb98:	f43f af1d 	beq.w	800e9d6 <_printf_float+0xb6>
 800eb9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eba0:	ea59 0303 	orrs.w	r3, r9, r3
 800eba4:	d102      	bne.n	800ebac <_printf_float+0x28c>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	07d9      	lsls	r1, r3, #31
 800ebaa:	d5d7      	bpl.n	800eb5c <_printf_float+0x23c>
 800ebac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f af0d 	beq.w	800e9d6 <_printf_float+0xb6>
 800ebbc:	f04f 0a00 	mov.w	sl, #0
 800ebc0:	f104 0b1a 	add.w	fp, r4, #26
 800ebc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc6:	425b      	negs	r3, r3
 800ebc8:	4553      	cmp	r3, sl
 800ebca:	dc01      	bgt.n	800ebd0 <_printf_float+0x2b0>
 800ebcc:	464b      	mov	r3, r9
 800ebce:	e793      	b.n	800eaf8 <_printf_float+0x1d8>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	465a      	mov	r2, fp
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	47b8      	blx	r7
 800ebda:	3001      	adds	r0, #1
 800ebdc:	f43f aefb 	beq.w	800e9d6 <_printf_float+0xb6>
 800ebe0:	f10a 0a01 	add.w	sl, sl, #1
 800ebe4:	e7ee      	b.n	800ebc4 <_printf_float+0x2a4>
 800ebe6:	bf00      	nop
 800ebe8:	7fefffff 	.word	0x7fefffff
 800ebec:	08012c68 	.word	0x08012c68
 800ebf0:	08012c64 	.word	0x08012c64
 800ebf4:	08012c70 	.word	0x08012c70
 800ebf8:	08012c6c 	.word	0x08012c6c
 800ebfc:	08012c74 	.word	0x08012c74
 800ec00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec06:	4553      	cmp	r3, sl
 800ec08:	bfa8      	it	ge
 800ec0a:	4653      	movge	r3, sl
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	4699      	mov	r9, r3
 800ec10:	dc36      	bgt.n	800ec80 <_printf_float+0x360>
 800ec12:	f04f 0b00 	mov.w	fp, #0
 800ec16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec1a:	f104 021a 	add.w	r2, r4, #26
 800ec1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec20:	9306      	str	r3, [sp, #24]
 800ec22:	eba3 0309 	sub.w	r3, r3, r9
 800ec26:	455b      	cmp	r3, fp
 800ec28:	dc31      	bgt.n	800ec8e <_printf_float+0x36e>
 800ec2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec2c:	459a      	cmp	sl, r3
 800ec2e:	dc3a      	bgt.n	800eca6 <_printf_float+0x386>
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	07da      	lsls	r2, r3, #31
 800ec34:	d437      	bmi.n	800eca6 <_printf_float+0x386>
 800ec36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec38:	ebaa 0903 	sub.w	r9, sl, r3
 800ec3c:	9b06      	ldr	r3, [sp, #24]
 800ec3e:	ebaa 0303 	sub.w	r3, sl, r3
 800ec42:	4599      	cmp	r9, r3
 800ec44:	bfa8      	it	ge
 800ec46:	4699      	movge	r9, r3
 800ec48:	f1b9 0f00 	cmp.w	r9, #0
 800ec4c:	dc33      	bgt.n	800ecb6 <_printf_float+0x396>
 800ec4e:	f04f 0800 	mov.w	r8, #0
 800ec52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec56:	f104 0b1a 	add.w	fp, r4, #26
 800ec5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ec60:	eba3 0309 	sub.w	r3, r3, r9
 800ec64:	4543      	cmp	r3, r8
 800ec66:	f77f af79 	ble.w	800eb5c <_printf_float+0x23c>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	465a      	mov	r2, fp
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b8      	blx	r7
 800ec74:	3001      	adds	r0, #1
 800ec76:	f43f aeae 	beq.w	800e9d6 <_printf_float+0xb6>
 800ec7a:	f108 0801 	add.w	r8, r8, #1
 800ec7e:	e7ec      	b.n	800ec5a <_printf_float+0x33a>
 800ec80:	4642      	mov	r2, r8
 800ec82:	4631      	mov	r1, r6
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b8      	blx	r7
 800ec88:	3001      	adds	r0, #1
 800ec8a:	d1c2      	bne.n	800ec12 <_printf_float+0x2f2>
 800ec8c:	e6a3      	b.n	800e9d6 <_printf_float+0xb6>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	4631      	mov	r1, r6
 800ec92:	4628      	mov	r0, r5
 800ec94:	9206      	str	r2, [sp, #24]
 800ec96:	47b8      	blx	r7
 800ec98:	3001      	adds	r0, #1
 800ec9a:	f43f ae9c 	beq.w	800e9d6 <_printf_float+0xb6>
 800ec9e:	9a06      	ldr	r2, [sp, #24]
 800eca0:	f10b 0b01 	add.w	fp, fp, #1
 800eca4:	e7bb      	b.n	800ec1e <_printf_float+0x2fe>
 800eca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b8      	blx	r7
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d1c0      	bne.n	800ec36 <_printf_float+0x316>
 800ecb4:	e68f      	b.n	800e9d6 <_printf_float+0xb6>
 800ecb6:	9a06      	ldr	r2, [sp, #24]
 800ecb8:	464b      	mov	r3, r9
 800ecba:	4442      	add	r2, r8
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	47b8      	blx	r7
 800ecc2:	3001      	adds	r0, #1
 800ecc4:	d1c3      	bne.n	800ec4e <_printf_float+0x32e>
 800ecc6:	e686      	b.n	800e9d6 <_printf_float+0xb6>
 800ecc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eccc:	f1ba 0f01 	cmp.w	sl, #1
 800ecd0:	dc01      	bgt.n	800ecd6 <_printf_float+0x3b6>
 800ecd2:	07db      	lsls	r3, r3, #31
 800ecd4:	d536      	bpl.n	800ed44 <_printf_float+0x424>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	4642      	mov	r2, r8
 800ecda:	4631      	mov	r1, r6
 800ecdc:	4628      	mov	r0, r5
 800ecde:	47b8      	blx	r7
 800ece0:	3001      	adds	r0, #1
 800ece2:	f43f ae78 	beq.w	800e9d6 <_printf_float+0xb6>
 800ece6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecea:	4631      	mov	r1, r6
 800ecec:	4628      	mov	r0, r5
 800ecee:	47b8      	blx	r7
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	f43f ae70 	beq.w	800e9d6 <_printf_float+0xb6>
 800ecf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed02:	f7f1 ff09 	bl	8000b18 <__aeabi_dcmpeq>
 800ed06:	b9c0      	cbnz	r0, 800ed3a <_printf_float+0x41a>
 800ed08:	4653      	mov	r3, sl
 800ed0a:	f108 0201 	add.w	r2, r8, #1
 800ed0e:	4631      	mov	r1, r6
 800ed10:	4628      	mov	r0, r5
 800ed12:	47b8      	blx	r7
 800ed14:	3001      	adds	r0, #1
 800ed16:	d10c      	bne.n	800ed32 <_printf_float+0x412>
 800ed18:	e65d      	b.n	800e9d6 <_printf_float+0xb6>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	465a      	mov	r2, fp
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4628      	mov	r0, r5
 800ed22:	47b8      	blx	r7
 800ed24:	3001      	adds	r0, #1
 800ed26:	f43f ae56 	beq.w	800e9d6 <_printf_float+0xb6>
 800ed2a:	f108 0801 	add.w	r8, r8, #1
 800ed2e:	45d0      	cmp	r8, sl
 800ed30:	dbf3      	blt.n	800ed1a <_printf_float+0x3fa>
 800ed32:	464b      	mov	r3, r9
 800ed34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ed38:	e6df      	b.n	800eafa <_printf_float+0x1da>
 800ed3a:	f04f 0800 	mov.w	r8, #0
 800ed3e:	f104 0b1a 	add.w	fp, r4, #26
 800ed42:	e7f4      	b.n	800ed2e <_printf_float+0x40e>
 800ed44:	2301      	movs	r3, #1
 800ed46:	4642      	mov	r2, r8
 800ed48:	e7e1      	b.n	800ed0e <_printf_float+0x3ee>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	464a      	mov	r2, r9
 800ed4e:	4631      	mov	r1, r6
 800ed50:	4628      	mov	r0, r5
 800ed52:	47b8      	blx	r7
 800ed54:	3001      	adds	r0, #1
 800ed56:	f43f ae3e 	beq.w	800e9d6 <_printf_float+0xb6>
 800ed5a:	f108 0801 	add.w	r8, r8, #1
 800ed5e:	68e3      	ldr	r3, [r4, #12]
 800ed60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed62:	1a5b      	subs	r3, r3, r1
 800ed64:	4543      	cmp	r3, r8
 800ed66:	dcf0      	bgt.n	800ed4a <_printf_float+0x42a>
 800ed68:	e6fc      	b.n	800eb64 <_printf_float+0x244>
 800ed6a:	f04f 0800 	mov.w	r8, #0
 800ed6e:	f104 0919 	add.w	r9, r4, #25
 800ed72:	e7f4      	b.n	800ed5e <_printf_float+0x43e>

0800ed74 <_printf_common>:
 800ed74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed78:	4616      	mov	r6, r2
 800ed7a:	4698      	mov	r8, r3
 800ed7c:	688a      	ldr	r2, [r1, #8]
 800ed7e:	690b      	ldr	r3, [r1, #16]
 800ed80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed84:	4293      	cmp	r3, r2
 800ed86:	bfb8      	it	lt
 800ed88:	4613      	movlt	r3, r2
 800ed8a:	6033      	str	r3, [r6, #0]
 800ed8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed90:	4607      	mov	r7, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	b10a      	cbz	r2, 800ed9a <_printf_common+0x26>
 800ed96:	3301      	adds	r3, #1
 800ed98:	6033      	str	r3, [r6, #0]
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	0699      	lsls	r1, r3, #26
 800ed9e:	bf42      	ittt	mi
 800eda0:	6833      	ldrmi	r3, [r6, #0]
 800eda2:	3302      	addmi	r3, #2
 800eda4:	6033      	strmi	r3, [r6, #0]
 800eda6:	6825      	ldr	r5, [r4, #0]
 800eda8:	f015 0506 	ands.w	r5, r5, #6
 800edac:	d106      	bne.n	800edbc <_printf_common+0x48>
 800edae:	f104 0a19 	add.w	sl, r4, #25
 800edb2:	68e3      	ldr	r3, [r4, #12]
 800edb4:	6832      	ldr	r2, [r6, #0]
 800edb6:	1a9b      	subs	r3, r3, r2
 800edb8:	42ab      	cmp	r3, r5
 800edba:	dc26      	bgt.n	800ee0a <_printf_common+0x96>
 800edbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	3b00      	subs	r3, #0
 800edc4:	bf18      	it	ne
 800edc6:	2301      	movne	r3, #1
 800edc8:	0692      	lsls	r2, r2, #26
 800edca:	d42b      	bmi.n	800ee24 <_printf_common+0xb0>
 800edcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800edd0:	4641      	mov	r1, r8
 800edd2:	4638      	mov	r0, r7
 800edd4:	47c8      	blx	r9
 800edd6:	3001      	adds	r0, #1
 800edd8:	d01e      	beq.n	800ee18 <_printf_common+0xa4>
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	6922      	ldr	r2, [r4, #16]
 800edde:	f003 0306 	and.w	r3, r3, #6
 800ede2:	2b04      	cmp	r3, #4
 800ede4:	bf02      	ittt	eq
 800ede6:	68e5      	ldreq	r5, [r4, #12]
 800ede8:	6833      	ldreq	r3, [r6, #0]
 800edea:	1aed      	subeq	r5, r5, r3
 800edec:	68a3      	ldr	r3, [r4, #8]
 800edee:	bf0c      	ite	eq
 800edf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edf4:	2500      	movne	r5, #0
 800edf6:	4293      	cmp	r3, r2
 800edf8:	bfc4      	itt	gt
 800edfa:	1a9b      	subgt	r3, r3, r2
 800edfc:	18ed      	addgt	r5, r5, r3
 800edfe:	2600      	movs	r6, #0
 800ee00:	341a      	adds	r4, #26
 800ee02:	42b5      	cmp	r5, r6
 800ee04:	d11a      	bne.n	800ee3c <_printf_common+0xc8>
 800ee06:	2000      	movs	r0, #0
 800ee08:	e008      	b.n	800ee1c <_printf_common+0xa8>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	4652      	mov	r2, sl
 800ee0e:	4641      	mov	r1, r8
 800ee10:	4638      	mov	r0, r7
 800ee12:	47c8      	blx	r9
 800ee14:	3001      	adds	r0, #1
 800ee16:	d103      	bne.n	800ee20 <_printf_common+0xac>
 800ee18:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee20:	3501      	adds	r5, #1
 800ee22:	e7c6      	b.n	800edb2 <_printf_common+0x3e>
 800ee24:	18e1      	adds	r1, r4, r3
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	2030      	movs	r0, #48	@ 0x30
 800ee2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee2e:	4422      	add	r2, r4
 800ee30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee38:	3302      	adds	r3, #2
 800ee3a:	e7c7      	b.n	800edcc <_printf_common+0x58>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	4622      	mov	r2, r4
 800ee40:	4641      	mov	r1, r8
 800ee42:	4638      	mov	r0, r7
 800ee44:	47c8      	blx	r9
 800ee46:	3001      	adds	r0, #1
 800ee48:	d0e6      	beq.n	800ee18 <_printf_common+0xa4>
 800ee4a:	3601      	adds	r6, #1
 800ee4c:	e7d9      	b.n	800ee02 <_printf_common+0x8e>
	...

0800ee50 <_printf_i>:
 800ee50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee54:	7e0f      	ldrb	r7, [r1, #24]
 800ee56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee58:	2f78      	cmp	r7, #120	@ 0x78
 800ee5a:	4691      	mov	r9, r2
 800ee5c:	4680      	mov	r8, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	469a      	mov	sl, r3
 800ee62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee66:	d807      	bhi.n	800ee78 <_printf_i+0x28>
 800ee68:	2f62      	cmp	r7, #98	@ 0x62
 800ee6a:	d80a      	bhi.n	800ee82 <_printf_i+0x32>
 800ee6c:	2f00      	cmp	r7, #0
 800ee6e:	f000 80d1 	beq.w	800f014 <_printf_i+0x1c4>
 800ee72:	2f58      	cmp	r7, #88	@ 0x58
 800ee74:	f000 80b8 	beq.w	800efe8 <_printf_i+0x198>
 800ee78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee80:	e03a      	b.n	800eef8 <_printf_i+0xa8>
 800ee82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee86:	2b15      	cmp	r3, #21
 800ee88:	d8f6      	bhi.n	800ee78 <_printf_i+0x28>
 800ee8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee90 <_printf_i+0x40>)
 800ee8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee90:	0800eee9 	.word	0x0800eee9
 800ee94:	0800eefd 	.word	0x0800eefd
 800ee98:	0800ee79 	.word	0x0800ee79
 800ee9c:	0800ee79 	.word	0x0800ee79
 800eea0:	0800ee79 	.word	0x0800ee79
 800eea4:	0800ee79 	.word	0x0800ee79
 800eea8:	0800eefd 	.word	0x0800eefd
 800eeac:	0800ee79 	.word	0x0800ee79
 800eeb0:	0800ee79 	.word	0x0800ee79
 800eeb4:	0800ee79 	.word	0x0800ee79
 800eeb8:	0800ee79 	.word	0x0800ee79
 800eebc:	0800effb 	.word	0x0800effb
 800eec0:	0800ef27 	.word	0x0800ef27
 800eec4:	0800efb5 	.word	0x0800efb5
 800eec8:	0800ee79 	.word	0x0800ee79
 800eecc:	0800ee79 	.word	0x0800ee79
 800eed0:	0800f01d 	.word	0x0800f01d
 800eed4:	0800ee79 	.word	0x0800ee79
 800eed8:	0800ef27 	.word	0x0800ef27
 800eedc:	0800ee79 	.word	0x0800ee79
 800eee0:	0800ee79 	.word	0x0800ee79
 800eee4:	0800efbd 	.word	0x0800efbd
 800eee8:	6833      	ldr	r3, [r6, #0]
 800eeea:	1d1a      	adds	r2, r3, #4
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	6032      	str	r2, [r6, #0]
 800eef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eef8:	2301      	movs	r3, #1
 800eefa:	e09c      	b.n	800f036 <_printf_i+0x1e6>
 800eefc:	6833      	ldr	r3, [r6, #0]
 800eefe:	6820      	ldr	r0, [r4, #0]
 800ef00:	1d19      	adds	r1, r3, #4
 800ef02:	6031      	str	r1, [r6, #0]
 800ef04:	0606      	lsls	r6, r0, #24
 800ef06:	d501      	bpl.n	800ef0c <_printf_i+0xbc>
 800ef08:	681d      	ldr	r5, [r3, #0]
 800ef0a:	e003      	b.n	800ef14 <_printf_i+0xc4>
 800ef0c:	0645      	lsls	r5, r0, #25
 800ef0e:	d5fb      	bpl.n	800ef08 <_printf_i+0xb8>
 800ef10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	da03      	bge.n	800ef20 <_printf_i+0xd0>
 800ef18:	232d      	movs	r3, #45	@ 0x2d
 800ef1a:	426d      	negs	r5, r5
 800ef1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef20:	4858      	ldr	r0, [pc, #352]	@ (800f084 <_printf_i+0x234>)
 800ef22:	230a      	movs	r3, #10
 800ef24:	e011      	b.n	800ef4a <_printf_i+0xfa>
 800ef26:	6821      	ldr	r1, [r4, #0]
 800ef28:	6833      	ldr	r3, [r6, #0]
 800ef2a:	0608      	lsls	r0, r1, #24
 800ef2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef30:	d402      	bmi.n	800ef38 <_printf_i+0xe8>
 800ef32:	0649      	lsls	r1, r1, #25
 800ef34:	bf48      	it	mi
 800ef36:	b2ad      	uxthmi	r5, r5
 800ef38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef3a:	4852      	ldr	r0, [pc, #328]	@ (800f084 <_printf_i+0x234>)
 800ef3c:	6033      	str	r3, [r6, #0]
 800ef3e:	bf14      	ite	ne
 800ef40:	230a      	movne	r3, #10
 800ef42:	2308      	moveq	r3, #8
 800ef44:	2100      	movs	r1, #0
 800ef46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef4a:	6866      	ldr	r6, [r4, #4]
 800ef4c:	60a6      	str	r6, [r4, #8]
 800ef4e:	2e00      	cmp	r6, #0
 800ef50:	db05      	blt.n	800ef5e <_printf_i+0x10e>
 800ef52:	6821      	ldr	r1, [r4, #0]
 800ef54:	432e      	orrs	r6, r5
 800ef56:	f021 0104 	bic.w	r1, r1, #4
 800ef5a:	6021      	str	r1, [r4, #0]
 800ef5c:	d04b      	beq.n	800eff6 <_printf_i+0x1a6>
 800ef5e:	4616      	mov	r6, r2
 800ef60:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef64:	fb03 5711 	mls	r7, r3, r1, r5
 800ef68:	5dc7      	ldrb	r7, [r0, r7]
 800ef6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef6e:	462f      	mov	r7, r5
 800ef70:	42bb      	cmp	r3, r7
 800ef72:	460d      	mov	r5, r1
 800ef74:	d9f4      	bls.n	800ef60 <_printf_i+0x110>
 800ef76:	2b08      	cmp	r3, #8
 800ef78:	d10b      	bne.n	800ef92 <_printf_i+0x142>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	07df      	lsls	r7, r3, #31
 800ef7e:	d508      	bpl.n	800ef92 <_printf_i+0x142>
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	6861      	ldr	r1, [r4, #4]
 800ef84:	4299      	cmp	r1, r3
 800ef86:	bfde      	ittt	le
 800ef88:	2330      	movle	r3, #48	@ 0x30
 800ef8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef92:	1b92      	subs	r2, r2, r6
 800ef94:	6122      	str	r2, [r4, #16]
 800ef96:	f8cd a000 	str.w	sl, [sp]
 800ef9a:	464b      	mov	r3, r9
 800ef9c:	aa03      	add	r2, sp, #12
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4640      	mov	r0, r8
 800efa2:	f7ff fee7 	bl	800ed74 <_printf_common>
 800efa6:	3001      	adds	r0, #1
 800efa8:	d14a      	bne.n	800f040 <_printf_i+0x1f0>
 800efaa:	f04f 30ff 	mov.w	r0, #4294967295
 800efae:	b004      	add	sp, #16
 800efb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb4:	6823      	ldr	r3, [r4, #0]
 800efb6:	f043 0320 	orr.w	r3, r3, #32
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	4832      	ldr	r0, [pc, #200]	@ (800f088 <_printf_i+0x238>)
 800efbe:	2778      	movs	r7, #120	@ 0x78
 800efc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	6831      	ldr	r1, [r6, #0]
 800efc8:	061f      	lsls	r7, r3, #24
 800efca:	f851 5b04 	ldr.w	r5, [r1], #4
 800efce:	d402      	bmi.n	800efd6 <_printf_i+0x186>
 800efd0:	065f      	lsls	r7, r3, #25
 800efd2:	bf48      	it	mi
 800efd4:	b2ad      	uxthmi	r5, r5
 800efd6:	6031      	str	r1, [r6, #0]
 800efd8:	07d9      	lsls	r1, r3, #31
 800efda:	bf44      	itt	mi
 800efdc:	f043 0320 	orrmi.w	r3, r3, #32
 800efe0:	6023      	strmi	r3, [r4, #0]
 800efe2:	b11d      	cbz	r5, 800efec <_printf_i+0x19c>
 800efe4:	2310      	movs	r3, #16
 800efe6:	e7ad      	b.n	800ef44 <_printf_i+0xf4>
 800efe8:	4826      	ldr	r0, [pc, #152]	@ (800f084 <_printf_i+0x234>)
 800efea:	e7e9      	b.n	800efc0 <_printf_i+0x170>
 800efec:	6823      	ldr	r3, [r4, #0]
 800efee:	f023 0320 	bic.w	r3, r3, #32
 800eff2:	6023      	str	r3, [r4, #0]
 800eff4:	e7f6      	b.n	800efe4 <_printf_i+0x194>
 800eff6:	4616      	mov	r6, r2
 800eff8:	e7bd      	b.n	800ef76 <_printf_i+0x126>
 800effa:	6833      	ldr	r3, [r6, #0]
 800effc:	6825      	ldr	r5, [r4, #0]
 800effe:	6961      	ldr	r1, [r4, #20]
 800f000:	1d18      	adds	r0, r3, #4
 800f002:	6030      	str	r0, [r6, #0]
 800f004:	062e      	lsls	r6, r5, #24
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	d501      	bpl.n	800f00e <_printf_i+0x1be>
 800f00a:	6019      	str	r1, [r3, #0]
 800f00c:	e002      	b.n	800f014 <_printf_i+0x1c4>
 800f00e:	0668      	lsls	r0, r5, #25
 800f010:	d5fb      	bpl.n	800f00a <_printf_i+0x1ba>
 800f012:	8019      	strh	r1, [r3, #0]
 800f014:	2300      	movs	r3, #0
 800f016:	6123      	str	r3, [r4, #16]
 800f018:	4616      	mov	r6, r2
 800f01a:	e7bc      	b.n	800ef96 <_printf_i+0x146>
 800f01c:	6833      	ldr	r3, [r6, #0]
 800f01e:	1d1a      	adds	r2, r3, #4
 800f020:	6032      	str	r2, [r6, #0]
 800f022:	681e      	ldr	r6, [r3, #0]
 800f024:	6862      	ldr	r2, [r4, #4]
 800f026:	2100      	movs	r1, #0
 800f028:	4630      	mov	r0, r6
 800f02a:	f7f1 f8f9 	bl	8000220 <memchr>
 800f02e:	b108      	cbz	r0, 800f034 <_printf_i+0x1e4>
 800f030:	1b80      	subs	r0, r0, r6
 800f032:	6060      	str	r0, [r4, #4]
 800f034:	6863      	ldr	r3, [r4, #4]
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	2300      	movs	r3, #0
 800f03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f03e:	e7aa      	b.n	800ef96 <_printf_i+0x146>
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	4632      	mov	r2, r6
 800f044:	4649      	mov	r1, r9
 800f046:	4640      	mov	r0, r8
 800f048:	47d0      	blx	sl
 800f04a:	3001      	adds	r0, #1
 800f04c:	d0ad      	beq.n	800efaa <_printf_i+0x15a>
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	079b      	lsls	r3, r3, #30
 800f052:	d413      	bmi.n	800f07c <_printf_i+0x22c>
 800f054:	68e0      	ldr	r0, [r4, #12]
 800f056:	9b03      	ldr	r3, [sp, #12]
 800f058:	4298      	cmp	r0, r3
 800f05a:	bfb8      	it	lt
 800f05c:	4618      	movlt	r0, r3
 800f05e:	e7a6      	b.n	800efae <_printf_i+0x15e>
 800f060:	2301      	movs	r3, #1
 800f062:	4632      	mov	r2, r6
 800f064:	4649      	mov	r1, r9
 800f066:	4640      	mov	r0, r8
 800f068:	47d0      	blx	sl
 800f06a:	3001      	adds	r0, #1
 800f06c:	d09d      	beq.n	800efaa <_printf_i+0x15a>
 800f06e:	3501      	adds	r5, #1
 800f070:	68e3      	ldr	r3, [r4, #12]
 800f072:	9903      	ldr	r1, [sp, #12]
 800f074:	1a5b      	subs	r3, r3, r1
 800f076:	42ab      	cmp	r3, r5
 800f078:	dcf2      	bgt.n	800f060 <_printf_i+0x210>
 800f07a:	e7eb      	b.n	800f054 <_printf_i+0x204>
 800f07c:	2500      	movs	r5, #0
 800f07e:	f104 0619 	add.w	r6, r4, #25
 800f082:	e7f5      	b.n	800f070 <_printf_i+0x220>
 800f084:	08012c76 	.word	0x08012c76
 800f088:	08012c87 	.word	0x08012c87

0800f08c <std>:
 800f08c:	2300      	movs	r3, #0
 800f08e:	b510      	push	{r4, lr}
 800f090:	4604      	mov	r4, r0
 800f092:	e9c0 3300 	strd	r3, r3, [r0]
 800f096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f09a:	6083      	str	r3, [r0, #8]
 800f09c:	8181      	strh	r1, [r0, #12]
 800f09e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f0a0:	81c2      	strh	r2, [r0, #14]
 800f0a2:	6183      	str	r3, [r0, #24]
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	2208      	movs	r2, #8
 800f0a8:	305c      	adds	r0, #92	@ 0x5c
 800f0aa:	f000 fa73 	bl	800f594 <memset>
 800f0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e4 <std+0x58>)
 800f0b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e8 <std+0x5c>)
 800f0b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ec <std+0x60>)
 800f0b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f0f0 <std+0x64>)
 800f0bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f0be:	4b0d      	ldr	r3, [pc, #52]	@ (800f0f4 <std+0x68>)
 800f0c0:	6224      	str	r4, [r4, #32]
 800f0c2:	429c      	cmp	r4, r3
 800f0c4:	d006      	beq.n	800f0d4 <std+0x48>
 800f0c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f0ca:	4294      	cmp	r4, r2
 800f0cc:	d002      	beq.n	800f0d4 <std+0x48>
 800f0ce:	33d0      	adds	r3, #208	@ 0xd0
 800f0d0:	429c      	cmp	r4, r3
 800f0d2:	d105      	bne.n	800f0e0 <std+0x54>
 800f0d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0dc:	f000 bad6 	b.w	800f68c <__retarget_lock_init_recursive>
 800f0e0:	bd10      	pop	{r4, pc}
 800f0e2:	bf00      	nop
 800f0e4:	0800f36d 	.word	0x0800f36d
 800f0e8:	0800f38f 	.word	0x0800f38f
 800f0ec:	0800f3c7 	.word	0x0800f3c7
 800f0f0:	0800f3eb 	.word	0x0800f3eb
 800f0f4:	2000d450 	.word	0x2000d450

0800f0f8 <stdio_exit_handler>:
 800f0f8:	4a02      	ldr	r2, [pc, #8]	@ (800f104 <stdio_exit_handler+0xc>)
 800f0fa:	4903      	ldr	r1, [pc, #12]	@ (800f108 <stdio_exit_handler+0x10>)
 800f0fc:	4803      	ldr	r0, [pc, #12]	@ (800f10c <stdio_exit_handler+0x14>)
 800f0fe:	f000 b869 	b.w	800f1d4 <_fwalk_sglue>
 800f102:	bf00      	nop
 800f104:	20000138 	.word	0x20000138
 800f108:	08011291 	.word	0x08011291
 800f10c:	20000148 	.word	0x20000148

0800f110 <cleanup_stdio>:
 800f110:	6841      	ldr	r1, [r0, #4]
 800f112:	4b0c      	ldr	r3, [pc, #48]	@ (800f144 <cleanup_stdio+0x34>)
 800f114:	4299      	cmp	r1, r3
 800f116:	b510      	push	{r4, lr}
 800f118:	4604      	mov	r4, r0
 800f11a:	d001      	beq.n	800f120 <cleanup_stdio+0x10>
 800f11c:	f002 f8b8 	bl	8011290 <_fflush_r>
 800f120:	68a1      	ldr	r1, [r4, #8]
 800f122:	4b09      	ldr	r3, [pc, #36]	@ (800f148 <cleanup_stdio+0x38>)
 800f124:	4299      	cmp	r1, r3
 800f126:	d002      	beq.n	800f12e <cleanup_stdio+0x1e>
 800f128:	4620      	mov	r0, r4
 800f12a:	f002 f8b1 	bl	8011290 <_fflush_r>
 800f12e:	68e1      	ldr	r1, [r4, #12]
 800f130:	4b06      	ldr	r3, [pc, #24]	@ (800f14c <cleanup_stdio+0x3c>)
 800f132:	4299      	cmp	r1, r3
 800f134:	d004      	beq.n	800f140 <cleanup_stdio+0x30>
 800f136:	4620      	mov	r0, r4
 800f138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f13c:	f002 b8a8 	b.w	8011290 <_fflush_r>
 800f140:	bd10      	pop	{r4, pc}
 800f142:	bf00      	nop
 800f144:	2000d450 	.word	0x2000d450
 800f148:	2000d4b8 	.word	0x2000d4b8
 800f14c:	2000d520 	.word	0x2000d520

0800f150 <global_stdio_init.part.0>:
 800f150:	b510      	push	{r4, lr}
 800f152:	4b0b      	ldr	r3, [pc, #44]	@ (800f180 <global_stdio_init.part.0+0x30>)
 800f154:	4c0b      	ldr	r4, [pc, #44]	@ (800f184 <global_stdio_init.part.0+0x34>)
 800f156:	4a0c      	ldr	r2, [pc, #48]	@ (800f188 <global_stdio_init.part.0+0x38>)
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	4620      	mov	r0, r4
 800f15c:	2200      	movs	r2, #0
 800f15e:	2104      	movs	r1, #4
 800f160:	f7ff ff94 	bl	800f08c <std>
 800f164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f168:	2201      	movs	r2, #1
 800f16a:	2109      	movs	r1, #9
 800f16c:	f7ff ff8e 	bl	800f08c <std>
 800f170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f174:	2202      	movs	r2, #2
 800f176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17a:	2112      	movs	r1, #18
 800f17c:	f7ff bf86 	b.w	800f08c <std>
 800f180:	2000d588 	.word	0x2000d588
 800f184:	2000d450 	.word	0x2000d450
 800f188:	0800f0f9 	.word	0x0800f0f9

0800f18c <__sfp_lock_acquire>:
 800f18c:	4801      	ldr	r0, [pc, #4]	@ (800f194 <__sfp_lock_acquire+0x8>)
 800f18e:	f000 ba7e 	b.w	800f68e <__retarget_lock_acquire_recursive>
 800f192:	bf00      	nop
 800f194:	2000d591 	.word	0x2000d591

0800f198 <__sfp_lock_release>:
 800f198:	4801      	ldr	r0, [pc, #4]	@ (800f1a0 <__sfp_lock_release+0x8>)
 800f19a:	f000 ba79 	b.w	800f690 <__retarget_lock_release_recursive>
 800f19e:	bf00      	nop
 800f1a0:	2000d591 	.word	0x2000d591

0800f1a4 <__sinit>:
 800f1a4:	b510      	push	{r4, lr}
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	f7ff fff0 	bl	800f18c <__sfp_lock_acquire>
 800f1ac:	6a23      	ldr	r3, [r4, #32]
 800f1ae:	b11b      	cbz	r3, 800f1b8 <__sinit+0x14>
 800f1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b4:	f7ff bff0 	b.w	800f198 <__sfp_lock_release>
 800f1b8:	4b04      	ldr	r3, [pc, #16]	@ (800f1cc <__sinit+0x28>)
 800f1ba:	6223      	str	r3, [r4, #32]
 800f1bc:	4b04      	ldr	r3, [pc, #16]	@ (800f1d0 <__sinit+0x2c>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d1f5      	bne.n	800f1b0 <__sinit+0xc>
 800f1c4:	f7ff ffc4 	bl	800f150 <global_stdio_init.part.0>
 800f1c8:	e7f2      	b.n	800f1b0 <__sinit+0xc>
 800f1ca:	bf00      	nop
 800f1cc:	0800f111 	.word	0x0800f111
 800f1d0:	2000d588 	.word	0x2000d588

0800f1d4 <_fwalk_sglue>:
 800f1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d8:	4607      	mov	r7, r0
 800f1da:	4688      	mov	r8, r1
 800f1dc:	4614      	mov	r4, r2
 800f1de:	2600      	movs	r6, #0
 800f1e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1e4:	f1b9 0901 	subs.w	r9, r9, #1
 800f1e8:	d505      	bpl.n	800f1f6 <_fwalk_sglue+0x22>
 800f1ea:	6824      	ldr	r4, [r4, #0]
 800f1ec:	2c00      	cmp	r4, #0
 800f1ee:	d1f7      	bne.n	800f1e0 <_fwalk_sglue+0xc>
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d907      	bls.n	800f20c <_fwalk_sglue+0x38>
 800f1fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f200:	3301      	adds	r3, #1
 800f202:	d003      	beq.n	800f20c <_fwalk_sglue+0x38>
 800f204:	4629      	mov	r1, r5
 800f206:	4638      	mov	r0, r7
 800f208:	47c0      	blx	r8
 800f20a:	4306      	orrs	r6, r0
 800f20c:	3568      	adds	r5, #104	@ 0x68
 800f20e:	e7e9      	b.n	800f1e4 <_fwalk_sglue+0x10>

0800f210 <iprintf>:
 800f210:	b40f      	push	{r0, r1, r2, r3}
 800f212:	b507      	push	{r0, r1, r2, lr}
 800f214:	4906      	ldr	r1, [pc, #24]	@ (800f230 <iprintf+0x20>)
 800f216:	ab04      	add	r3, sp, #16
 800f218:	6808      	ldr	r0, [r1, #0]
 800f21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f21e:	6881      	ldr	r1, [r0, #8]
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	f001 fe99 	bl	8010f58 <_vfiprintf_r>
 800f226:	b003      	add	sp, #12
 800f228:	f85d eb04 	ldr.w	lr, [sp], #4
 800f22c:	b004      	add	sp, #16
 800f22e:	4770      	bx	lr
 800f230:	20000144 	.word	0x20000144

0800f234 <putchar>:
 800f234:	4b02      	ldr	r3, [pc, #8]	@ (800f240 <putchar+0xc>)
 800f236:	4601      	mov	r1, r0
 800f238:	6818      	ldr	r0, [r3, #0]
 800f23a:	6882      	ldr	r2, [r0, #8]
 800f23c:	f002 b8b2 	b.w	80113a4 <_putc_r>
 800f240:	20000144 	.word	0x20000144

0800f244 <_puts_r>:
 800f244:	6a03      	ldr	r3, [r0, #32]
 800f246:	b570      	push	{r4, r5, r6, lr}
 800f248:	6884      	ldr	r4, [r0, #8]
 800f24a:	4605      	mov	r5, r0
 800f24c:	460e      	mov	r6, r1
 800f24e:	b90b      	cbnz	r3, 800f254 <_puts_r+0x10>
 800f250:	f7ff ffa8 	bl	800f1a4 <__sinit>
 800f254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f256:	07db      	lsls	r3, r3, #31
 800f258:	d405      	bmi.n	800f266 <_puts_r+0x22>
 800f25a:	89a3      	ldrh	r3, [r4, #12]
 800f25c:	0598      	lsls	r0, r3, #22
 800f25e:	d402      	bmi.n	800f266 <_puts_r+0x22>
 800f260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f262:	f000 fa14 	bl	800f68e <__retarget_lock_acquire_recursive>
 800f266:	89a3      	ldrh	r3, [r4, #12]
 800f268:	0719      	lsls	r1, r3, #28
 800f26a:	d502      	bpl.n	800f272 <_puts_r+0x2e>
 800f26c:	6923      	ldr	r3, [r4, #16]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d135      	bne.n	800f2de <_puts_r+0x9a>
 800f272:	4621      	mov	r1, r4
 800f274:	4628      	mov	r0, r5
 800f276:	f000 f937 	bl	800f4e8 <__swsetup_r>
 800f27a:	b380      	cbz	r0, 800f2de <_puts_r+0x9a>
 800f27c:	f04f 35ff 	mov.w	r5, #4294967295
 800f280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f282:	07da      	lsls	r2, r3, #31
 800f284:	d405      	bmi.n	800f292 <_puts_r+0x4e>
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	059b      	lsls	r3, r3, #22
 800f28a:	d402      	bmi.n	800f292 <_puts_r+0x4e>
 800f28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f28e:	f000 f9ff 	bl	800f690 <__retarget_lock_release_recursive>
 800f292:	4628      	mov	r0, r5
 800f294:	bd70      	pop	{r4, r5, r6, pc}
 800f296:	2b00      	cmp	r3, #0
 800f298:	da04      	bge.n	800f2a4 <_puts_r+0x60>
 800f29a:	69a2      	ldr	r2, [r4, #24]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	dc17      	bgt.n	800f2d0 <_puts_r+0x8c>
 800f2a0:	290a      	cmp	r1, #10
 800f2a2:	d015      	beq.n	800f2d0 <_puts_r+0x8c>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	6022      	str	r2, [r4, #0]
 800f2aa:	7019      	strb	r1, [r3, #0]
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	60a3      	str	r3, [r4, #8]
 800f2b6:	2900      	cmp	r1, #0
 800f2b8:	d1ed      	bne.n	800f296 <_puts_r+0x52>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	da11      	bge.n	800f2e2 <_puts_r+0x9e>
 800f2be:	4622      	mov	r2, r4
 800f2c0:	210a      	movs	r1, #10
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f000 f8d2 	bl	800f46c <__swbuf_r>
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d0d7      	beq.n	800f27c <_puts_r+0x38>
 800f2cc:	250a      	movs	r5, #10
 800f2ce:	e7d7      	b.n	800f280 <_puts_r+0x3c>
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f000 f8ca 	bl	800f46c <__swbuf_r>
 800f2d8:	3001      	adds	r0, #1
 800f2da:	d1e7      	bne.n	800f2ac <_puts_r+0x68>
 800f2dc:	e7ce      	b.n	800f27c <_puts_r+0x38>
 800f2de:	3e01      	subs	r6, #1
 800f2e0:	e7e4      	b.n	800f2ac <_puts_r+0x68>
 800f2e2:	6823      	ldr	r3, [r4, #0]
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	6022      	str	r2, [r4, #0]
 800f2e8:	220a      	movs	r2, #10
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	e7ee      	b.n	800f2cc <_puts_r+0x88>
	...

0800f2f0 <puts>:
 800f2f0:	4b02      	ldr	r3, [pc, #8]	@ (800f2fc <puts+0xc>)
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	6818      	ldr	r0, [r3, #0]
 800f2f6:	f7ff bfa5 	b.w	800f244 <_puts_r>
 800f2fa:	bf00      	nop
 800f2fc:	20000144 	.word	0x20000144

0800f300 <sniprintf>:
 800f300:	b40c      	push	{r2, r3}
 800f302:	b530      	push	{r4, r5, lr}
 800f304:	4b18      	ldr	r3, [pc, #96]	@ (800f368 <sniprintf+0x68>)
 800f306:	1e0c      	subs	r4, r1, #0
 800f308:	681d      	ldr	r5, [r3, #0]
 800f30a:	b09d      	sub	sp, #116	@ 0x74
 800f30c:	da08      	bge.n	800f320 <sniprintf+0x20>
 800f30e:	238b      	movs	r3, #139	@ 0x8b
 800f310:	602b      	str	r3, [r5, #0]
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	b01d      	add	sp, #116	@ 0x74
 800f318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f31c:	b002      	add	sp, #8
 800f31e:	4770      	bx	lr
 800f320:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f324:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f328:	f04f 0300 	mov.w	r3, #0
 800f32c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f32e:	bf14      	ite	ne
 800f330:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f334:	4623      	moveq	r3, r4
 800f336:	9304      	str	r3, [sp, #16]
 800f338:	9307      	str	r3, [sp, #28]
 800f33a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f33e:	9002      	str	r0, [sp, #8]
 800f340:	9006      	str	r0, [sp, #24]
 800f342:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f346:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f348:	ab21      	add	r3, sp, #132	@ 0x84
 800f34a:	a902      	add	r1, sp, #8
 800f34c:	4628      	mov	r0, r5
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	f001 fcdc 	bl	8010d0c <_svfiprintf_r>
 800f354:	1c43      	adds	r3, r0, #1
 800f356:	bfbc      	itt	lt
 800f358:	238b      	movlt	r3, #139	@ 0x8b
 800f35a:	602b      	strlt	r3, [r5, #0]
 800f35c:	2c00      	cmp	r4, #0
 800f35e:	d0da      	beq.n	800f316 <sniprintf+0x16>
 800f360:	9b02      	ldr	r3, [sp, #8]
 800f362:	2200      	movs	r2, #0
 800f364:	701a      	strb	r2, [r3, #0]
 800f366:	e7d6      	b.n	800f316 <sniprintf+0x16>
 800f368:	20000144 	.word	0x20000144

0800f36c <__sread>:
 800f36c:	b510      	push	{r4, lr}
 800f36e:	460c      	mov	r4, r1
 800f370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f374:	f000 f93c 	bl	800f5f0 <_read_r>
 800f378:	2800      	cmp	r0, #0
 800f37a:	bfab      	itete	ge
 800f37c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f37e:	89a3      	ldrhlt	r3, [r4, #12]
 800f380:	181b      	addge	r3, r3, r0
 800f382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f386:	bfac      	ite	ge
 800f388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f38a:	81a3      	strhlt	r3, [r4, #12]
 800f38c:	bd10      	pop	{r4, pc}

0800f38e <__swrite>:
 800f38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f392:	461f      	mov	r7, r3
 800f394:	898b      	ldrh	r3, [r1, #12]
 800f396:	05db      	lsls	r3, r3, #23
 800f398:	4605      	mov	r5, r0
 800f39a:	460c      	mov	r4, r1
 800f39c:	4616      	mov	r6, r2
 800f39e:	d505      	bpl.n	800f3ac <__swrite+0x1e>
 800f3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f000 f910 	bl	800f5cc <_lseek_r>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	4632      	mov	r2, r6
 800f3ba:	463b      	mov	r3, r7
 800f3bc:	4628      	mov	r0, r5
 800f3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c2:	f000 b927 	b.w	800f614 <_write_r>

0800f3c6 <__sseek>:
 800f3c6:	b510      	push	{r4, lr}
 800f3c8:	460c      	mov	r4, r1
 800f3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ce:	f000 f8fd 	bl	800f5cc <_lseek_r>
 800f3d2:	1c43      	adds	r3, r0, #1
 800f3d4:	89a3      	ldrh	r3, [r4, #12]
 800f3d6:	bf15      	itete	ne
 800f3d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f3da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f3de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f3e2:	81a3      	strheq	r3, [r4, #12]
 800f3e4:	bf18      	it	ne
 800f3e6:	81a3      	strhne	r3, [r4, #12]
 800f3e8:	bd10      	pop	{r4, pc}

0800f3ea <__sclose>:
 800f3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ee:	f000 b8dd 	b.w	800f5ac <_close_r>

0800f3f2 <_vsniprintf_r>:
 800f3f2:	b530      	push	{r4, r5, lr}
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	b09b      	sub	sp, #108	@ 0x6c
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	da05      	bge.n	800f40c <_vsniprintf_r+0x1a>
 800f400:	238b      	movs	r3, #139	@ 0x8b
 800f402:	6003      	str	r3, [r0, #0]
 800f404:	f04f 30ff 	mov.w	r0, #4294967295
 800f408:	b01b      	add	sp, #108	@ 0x6c
 800f40a:	bd30      	pop	{r4, r5, pc}
 800f40c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f410:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f414:	f04f 0300 	mov.w	r3, #0
 800f418:	9319      	str	r3, [sp, #100]	@ 0x64
 800f41a:	bf14      	ite	ne
 800f41c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f420:	4623      	moveq	r3, r4
 800f422:	9302      	str	r3, [sp, #8]
 800f424:	9305      	str	r3, [sp, #20]
 800f426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f42a:	9100      	str	r1, [sp, #0]
 800f42c:	9104      	str	r1, [sp, #16]
 800f42e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f432:	4669      	mov	r1, sp
 800f434:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f436:	f001 fc69 	bl	8010d0c <_svfiprintf_r>
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	bfbc      	itt	lt
 800f43e:	238b      	movlt	r3, #139	@ 0x8b
 800f440:	602b      	strlt	r3, [r5, #0]
 800f442:	2c00      	cmp	r4, #0
 800f444:	d0e0      	beq.n	800f408 <_vsniprintf_r+0x16>
 800f446:	9b00      	ldr	r3, [sp, #0]
 800f448:	2200      	movs	r2, #0
 800f44a:	701a      	strb	r2, [r3, #0]
 800f44c:	e7dc      	b.n	800f408 <_vsniprintf_r+0x16>
	...

0800f450 <vsniprintf>:
 800f450:	b507      	push	{r0, r1, r2, lr}
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	4613      	mov	r3, r2
 800f456:	460a      	mov	r2, r1
 800f458:	4601      	mov	r1, r0
 800f45a:	4803      	ldr	r0, [pc, #12]	@ (800f468 <vsniprintf+0x18>)
 800f45c:	6800      	ldr	r0, [r0, #0]
 800f45e:	f7ff ffc8 	bl	800f3f2 <_vsniprintf_r>
 800f462:	b003      	add	sp, #12
 800f464:	f85d fb04 	ldr.w	pc, [sp], #4
 800f468:	20000144 	.word	0x20000144

0800f46c <__swbuf_r>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	460e      	mov	r6, r1
 800f470:	4614      	mov	r4, r2
 800f472:	4605      	mov	r5, r0
 800f474:	b118      	cbz	r0, 800f47e <__swbuf_r+0x12>
 800f476:	6a03      	ldr	r3, [r0, #32]
 800f478:	b90b      	cbnz	r3, 800f47e <__swbuf_r+0x12>
 800f47a:	f7ff fe93 	bl	800f1a4 <__sinit>
 800f47e:	69a3      	ldr	r3, [r4, #24]
 800f480:	60a3      	str	r3, [r4, #8]
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	071a      	lsls	r2, r3, #28
 800f486:	d501      	bpl.n	800f48c <__swbuf_r+0x20>
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	b943      	cbnz	r3, 800f49e <__swbuf_r+0x32>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 f82a 	bl	800f4e8 <__swsetup_r>
 800f494:	b118      	cbz	r0, 800f49e <__swbuf_r+0x32>
 800f496:	f04f 37ff 	mov.w	r7, #4294967295
 800f49a:	4638      	mov	r0, r7
 800f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	1a98      	subs	r0, r3, r2
 800f4a4:	6963      	ldr	r3, [r4, #20]
 800f4a6:	b2f6      	uxtb	r6, r6
 800f4a8:	4283      	cmp	r3, r0
 800f4aa:	4637      	mov	r7, r6
 800f4ac:	dc05      	bgt.n	800f4ba <__swbuf_r+0x4e>
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f001 feed 	bl	8011290 <_fflush_r>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d1ed      	bne.n	800f496 <__swbuf_r+0x2a>
 800f4ba:	68a3      	ldr	r3, [r4, #8]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	60a3      	str	r3, [r4, #8]
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	6022      	str	r2, [r4, #0]
 800f4c6:	701e      	strb	r6, [r3, #0]
 800f4c8:	6962      	ldr	r2, [r4, #20]
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d004      	beq.n	800f4da <__swbuf_r+0x6e>
 800f4d0:	89a3      	ldrh	r3, [r4, #12]
 800f4d2:	07db      	lsls	r3, r3, #31
 800f4d4:	d5e1      	bpl.n	800f49a <__swbuf_r+0x2e>
 800f4d6:	2e0a      	cmp	r6, #10
 800f4d8:	d1df      	bne.n	800f49a <__swbuf_r+0x2e>
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f001 fed7 	bl	8011290 <_fflush_r>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d0d9      	beq.n	800f49a <__swbuf_r+0x2e>
 800f4e6:	e7d6      	b.n	800f496 <__swbuf_r+0x2a>

0800f4e8 <__swsetup_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4b29      	ldr	r3, [pc, #164]	@ (800f590 <__swsetup_r+0xa8>)
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	b118      	cbz	r0, 800f4fc <__swsetup_r+0x14>
 800f4f4:	6a03      	ldr	r3, [r0, #32]
 800f4f6:	b90b      	cbnz	r3, 800f4fc <__swsetup_r+0x14>
 800f4f8:	f7ff fe54 	bl	800f1a4 <__sinit>
 800f4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f500:	0719      	lsls	r1, r3, #28
 800f502:	d422      	bmi.n	800f54a <__swsetup_r+0x62>
 800f504:	06da      	lsls	r2, r3, #27
 800f506:	d407      	bmi.n	800f518 <__swsetup_r+0x30>
 800f508:	2209      	movs	r2, #9
 800f50a:	602a      	str	r2, [r5, #0]
 800f50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f510:	81a3      	strh	r3, [r4, #12]
 800f512:	f04f 30ff 	mov.w	r0, #4294967295
 800f516:	e033      	b.n	800f580 <__swsetup_r+0x98>
 800f518:	0758      	lsls	r0, r3, #29
 800f51a:	d512      	bpl.n	800f542 <__swsetup_r+0x5a>
 800f51c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f51e:	b141      	cbz	r1, 800f532 <__swsetup_r+0x4a>
 800f520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f524:	4299      	cmp	r1, r3
 800f526:	d002      	beq.n	800f52e <__swsetup_r+0x46>
 800f528:	4628      	mov	r0, r5
 800f52a:	f000 ff19 	bl	8010360 <_free_r>
 800f52e:	2300      	movs	r3, #0
 800f530:	6363      	str	r3, [r4, #52]	@ 0x34
 800f532:	89a3      	ldrh	r3, [r4, #12]
 800f534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f538:	81a3      	strh	r3, [r4, #12]
 800f53a:	2300      	movs	r3, #0
 800f53c:	6063      	str	r3, [r4, #4]
 800f53e:	6923      	ldr	r3, [r4, #16]
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f043 0308 	orr.w	r3, r3, #8
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	6923      	ldr	r3, [r4, #16]
 800f54c:	b94b      	cbnz	r3, 800f562 <__swsetup_r+0x7a>
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f558:	d003      	beq.n	800f562 <__swsetup_r+0x7a>
 800f55a:	4621      	mov	r1, r4
 800f55c:	4628      	mov	r0, r5
 800f55e:	f001 fee5 	bl	801132c <__smakebuf_r>
 800f562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f566:	f013 0201 	ands.w	r2, r3, #1
 800f56a:	d00a      	beq.n	800f582 <__swsetup_r+0x9a>
 800f56c:	2200      	movs	r2, #0
 800f56e:	60a2      	str	r2, [r4, #8]
 800f570:	6962      	ldr	r2, [r4, #20]
 800f572:	4252      	negs	r2, r2
 800f574:	61a2      	str	r2, [r4, #24]
 800f576:	6922      	ldr	r2, [r4, #16]
 800f578:	b942      	cbnz	r2, 800f58c <__swsetup_r+0xa4>
 800f57a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f57e:	d1c5      	bne.n	800f50c <__swsetup_r+0x24>
 800f580:	bd38      	pop	{r3, r4, r5, pc}
 800f582:	0799      	lsls	r1, r3, #30
 800f584:	bf58      	it	pl
 800f586:	6962      	ldrpl	r2, [r4, #20]
 800f588:	60a2      	str	r2, [r4, #8]
 800f58a:	e7f4      	b.n	800f576 <__swsetup_r+0x8e>
 800f58c:	2000      	movs	r0, #0
 800f58e:	e7f7      	b.n	800f580 <__swsetup_r+0x98>
 800f590:	20000144 	.word	0x20000144

0800f594 <memset>:
 800f594:	4402      	add	r2, r0
 800f596:	4603      	mov	r3, r0
 800f598:	4293      	cmp	r3, r2
 800f59a:	d100      	bne.n	800f59e <memset+0xa>
 800f59c:	4770      	bx	lr
 800f59e:	f803 1b01 	strb.w	r1, [r3], #1
 800f5a2:	e7f9      	b.n	800f598 <memset+0x4>

0800f5a4 <_localeconv_r>:
 800f5a4:	4800      	ldr	r0, [pc, #0]	@ (800f5a8 <_localeconv_r+0x4>)
 800f5a6:	4770      	bx	lr
 800f5a8:	20000284 	.word	0x20000284

0800f5ac <_close_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	4d06      	ldr	r5, [pc, #24]	@ (800f5c8 <_close_r+0x1c>)
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	4608      	mov	r0, r1
 800f5b6:	602b      	str	r3, [r5, #0]
 800f5b8:	f7f6 f8b2 	bl	8005720 <_close>
 800f5bc:	1c43      	adds	r3, r0, #1
 800f5be:	d102      	bne.n	800f5c6 <_close_r+0x1a>
 800f5c0:	682b      	ldr	r3, [r5, #0]
 800f5c2:	b103      	cbz	r3, 800f5c6 <_close_r+0x1a>
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	2000d58c 	.word	0x2000d58c

0800f5cc <_lseek_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	@ (800f5ec <_lseek_r+0x20>)
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	602a      	str	r2, [r5, #0]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	f7f6 f8aa 	bl	8005734 <_lseek>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_lseek_r+0x1e>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_lseek_r+0x1e>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	2000d58c 	.word	0x2000d58c

0800f5f0 <_read_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d07      	ldr	r5, [pc, #28]	@ (800f610 <_read_r+0x20>)
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	4608      	mov	r0, r1
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	602a      	str	r2, [r5, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	f7f6 f874 	bl	80056ec <_read>
 800f604:	1c43      	adds	r3, r0, #1
 800f606:	d102      	bne.n	800f60e <_read_r+0x1e>
 800f608:	682b      	ldr	r3, [r5, #0]
 800f60a:	b103      	cbz	r3, 800f60e <_read_r+0x1e>
 800f60c:	6023      	str	r3, [r4, #0]
 800f60e:	bd38      	pop	{r3, r4, r5, pc}
 800f610:	2000d58c 	.word	0x2000d58c

0800f614 <_write_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	4d07      	ldr	r5, [pc, #28]	@ (800f634 <_write_r+0x20>)
 800f618:	4604      	mov	r4, r0
 800f61a:	4608      	mov	r0, r1
 800f61c:	4611      	mov	r1, r2
 800f61e:	2200      	movs	r2, #0
 800f620:	602a      	str	r2, [r5, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	f7f6 f86f 	bl	8005706 <_write>
 800f628:	1c43      	adds	r3, r0, #1
 800f62a:	d102      	bne.n	800f632 <_write_r+0x1e>
 800f62c:	682b      	ldr	r3, [r5, #0]
 800f62e:	b103      	cbz	r3, 800f632 <_write_r+0x1e>
 800f630:	6023      	str	r3, [r4, #0]
 800f632:	bd38      	pop	{r3, r4, r5, pc}
 800f634:	2000d58c 	.word	0x2000d58c

0800f638 <__errno>:
 800f638:	4b01      	ldr	r3, [pc, #4]	@ (800f640 <__errno+0x8>)
 800f63a:	6818      	ldr	r0, [r3, #0]
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	20000144 	.word	0x20000144

0800f644 <__libc_init_array>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	4d0d      	ldr	r5, [pc, #52]	@ (800f67c <__libc_init_array+0x38>)
 800f648:	4c0d      	ldr	r4, [pc, #52]	@ (800f680 <__libc_init_array+0x3c>)
 800f64a:	1b64      	subs	r4, r4, r5
 800f64c:	10a4      	asrs	r4, r4, #2
 800f64e:	2600      	movs	r6, #0
 800f650:	42a6      	cmp	r6, r4
 800f652:	d109      	bne.n	800f668 <__libc_init_array+0x24>
 800f654:	4d0b      	ldr	r5, [pc, #44]	@ (800f684 <__libc_init_array+0x40>)
 800f656:	4c0c      	ldr	r4, [pc, #48]	@ (800f688 <__libc_init_array+0x44>)
 800f658:	f002 f80a 	bl	8011670 <_init>
 800f65c:	1b64      	subs	r4, r4, r5
 800f65e:	10a4      	asrs	r4, r4, #2
 800f660:	2600      	movs	r6, #0
 800f662:	42a6      	cmp	r6, r4
 800f664:	d105      	bne.n	800f672 <__libc_init_array+0x2e>
 800f666:	bd70      	pop	{r4, r5, r6, pc}
 800f668:	f855 3b04 	ldr.w	r3, [r5], #4
 800f66c:	4798      	blx	r3
 800f66e:	3601      	adds	r6, #1
 800f670:	e7ee      	b.n	800f650 <__libc_init_array+0xc>
 800f672:	f855 3b04 	ldr.w	r3, [r5], #4
 800f676:	4798      	blx	r3
 800f678:	3601      	adds	r6, #1
 800f67a:	e7f2      	b.n	800f662 <__libc_init_array+0x1e>
 800f67c:	080130b4 	.word	0x080130b4
 800f680:	080130b4 	.word	0x080130b4
 800f684:	080130b4 	.word	0x080130b4
 800f688:	080130b8 	.word	0x080130b8

0800f68c <__retarget_lock_init_recursive>:
 800f68c:	4770      	bx	lr

0800f68e <__retarget_lock_acquire_recursive>:
 800f68e:	4770      	bx	lr

0800f690 <__retarget_lock_release_recursive>:
 800f690:	4770      	bx	lr

0800f692 <memcpy>:
 800f692:	440a      	add	r2, r1
 800f694:	4291      	cmp	r1, r2
 800f696:	f100 33ff 	add.w	r3, r0, #4294967295
 800f69a:	d100      	bne.n	800f69e <memcpy+0xc>
 800f69c:	4770      	bx	lr
 800f69e:	b510      	push	{r4, lr}
 800f6a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6a8:	4291      	cmp	r1, r2
 800f6aa:	d1f9      	bne.n	800f6a0 <memcpy+0xe>
 800f6ac:	bd10      	pop	{r4, pc}

0800f6ae <quorem>:
 800f6ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b2:	6903      	ldr	r3, [r0, #16]
 800f6b4:	690c      	ldr	r4, [r1, #16]
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	db7e      	blt.n	800f7ba <quorem+0x10c>
 800f6bc:	3c01      	subs	r4, #1
 800f6be:	f101 0814 	add.w	r8, r1, #20
 800f6c2:	00a3      	lsls	r3, r4, #2
 800f6c4:	f100 0514 	add.w	r5, r0, #20
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6ce:	9301      	str	r3, [sp, #4]
 800f6d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6e4:	d32e      	bcc.n	800f744 <quorem+0x96>
 800f6e6:	f04f 0a00 	mov.w	sl, #0
 800f6ea:	46c4      	mov	ip, r8
 800f6ec:	46ae      	mov	lr, r5
 800f6ee:	46d3      	mov	fp, sl
 800f6f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6f4:	b298      	uxth	r0, r3
 800f6f6:	fb06 a000 	mla	r0, r6, r0, sl
 800f6fa:	0c02      	lsrs	r2, r0, #16
 800f6fc:	0c1b      	lsrs	r3, r3, #16
 800f6fe:	fb06 2303 	mla	r3, r6, r3, r2
 800f702:	f8de 2000 	ldr.w	r2, [lr]
 800f706:	b280      	uxth	r0, r0
 800f708:	b292      	uxth	r2, r2
 800f70a:	1a12      	subs	r2, r2, r0
 800f70c:	445a      	add	r2, fp
 800f70e:	f8de 0000 	ldr.w	r0, [lr]
 800f712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f716:	b29b      	uxth	r3, r3
 800f718:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f71c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f720:	b292      	uxth	r2, r2
 800f722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f726:	45e1      	cmp	r9, ip
 800f728:	f84e 2b04 	str.w	r2, [lr], #4
 800f72c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f730:	d2de      	bcs.n	800f6f0 <quorem+0x42>
 800f732:	9b00      	ldr	r3, [sp, #0]
 800f734:	58eb      	ldr	r3, [r5, r3]
 800f736:	b92b      	cbnz	r3, 800f744 <quorem+0x96>
 800f738:	9b01      	ldr	r3, [sp, #4]
 800f73a:	3b04      	subs	r3, #4
 800f73c:	429d      	cmp	r5, r3
 800f73e:	461a      	mov	r2, r3
 800f740:	d32f      	bcc.n	800f7a2 <quorem+0xf4>
 800f742:	613c      	str	r4, [r7, #16]
 800f744:	4638      	mov	r0, r7
 800f746:	f001 f97d 	bl	8010a44 <__mcmp>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	db25      	blt.n	800f79a <quorem+0xec>
 800f74e:	4629      	mov	r1, r5
 800f750:	2000      	movs	r0, #0
 800f752:	f858 2b04 	ldr.w	r2, [r8], #4
 800f756:	f8d1 c000 	ldr.w	ip, [r1]
 800f75a:	fa1f fe82 	uxth.w	lr, r2
 800f75e:	fa1f f38c 	uxth.w	r3, ip
 800f762:	eba3 030e 	sub.w	r3, r3, lr
 800f766:	4403      	add	r3, r0
 800f768:	0c12      	lsrs	r2, r2, #16
 800f76a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f76e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f772:	b29b      	uxth	r3, r3
 800f774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f778:	45c1      	cmp	r9, r8
 800f77a:	f841 3b04 	str.w	r3, [r1], #4
 800f77e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f782:	d2e6      	bcs.n	800f752 <quorem+0xa4>
 800f784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f78c:	b922      	cbnz	r2, 800f798 <quorem+0xea>
 800f78e:	3b04      	subs	r3, #4
 800f790:	429d      	cmp	r5, r3
 800f792:	461a      	mov	r2, r3
 800f794:	d30b      	bcc.n	800f7ae <quorem+0x100>
 800f796:	613c      	str	r4, [r7, #16]
 800f798:	3601      	adds	r6, #1
 800f79a:	4630      	mov	r0, r6
 800f79c:	b003      	add	sp, #12
 800f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a2:	6812      	ldr	r2, [r2, #0]
 800f7a4:	3b04      	subs	r3, #4
 800f7a6:	2a00      	cmp	r2, #0
 800f7a8:	d1cb      	bne.n	800f742 <quorem+0x94>
 800f7aa:	3c01      	subs	r4, #1
 800f7ac:	e7c6      	b.n	800f73c <quorem+0x8e>
 800f7ae:	6812      	ldr	r2, [r2, #0]
 800f7b0:	3b04      	subs	r3, #4
 800f7b2:	2a00      	cmp	r2, #0
 800f7b4:	d1ef      	bne.n	800f796 <quorem+0xe8>
 800f7b6:	3c01      	subs	r4, #1
 800f7b8:	e7ea      	b.n	800f790 <quorem+0xe2>
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	e7ee      	b.n	800f79c <quorem+0xee>
	...

0800f7c0 <_dtoa_r>:
 800f7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c4:	69c7      	ldr	r7, [r0, #28]
 800f7c6:	b097      	sub	sp, #92	@ 0x5c
 800f7c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f7cc:	ec55 4b10 	vmov	r4, r5, d0
 800f7d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f7d2:	9107      	str	r1, [sp, #28]
 800f7d4:	4681      	mov	r9, r0
 800f7d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f7d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f7da:	b97f      	cbnz	r7, 800f7fc <_dtoa_r+0x3c>
 800f7dc:	2010      	movs	r0, #16
 800f7de:	f000 fe09 	bl	80103f4 <malloc>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f7e8:	b920      	cbnz	r0, 800f7f4 <_dtoa_r+0x34>
 800f7ea:	4ba9      	ldr	r3, [pc, #676]	@ (800fa90 <_dtoa_r+0x2d0>)
 800f7ec:	21ef      	movs	r1, #239	@ 0xef
 800f7ee:	48a9      	ldr	r0, [pc, #676]	@ (800fa94 <_dtoa_r+0x2d4>)
 800f7f0:	f001 fe58 	bl	80114a4 <__assert_func>
 800f7f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f7f8:	6007      	str	r7, [r0, #0]
 800f7fa:	60c7      	str	r7, [r0, #12]
 800f7fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f800:	6819      	ldr	r1, [r3, #0]
 800f802:	b159      	cbz	r1, 800f81c <_dtoa_r+0x5c>
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	604a      	str	r2, [r1, #4]
 800f808:	2301      	movs	r3, #1
 800f80a:	4093      	lsls	r3, r2
 800f80c:	608b      	str	r3, [r1, #8]
 800f80e:	4648      	mov	r0, r9
 800f810:	f000 fee6 	bl	80105e0 <_Bfree>
 800f814:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f818:	2200      	movs	r2, #0
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	1e2b      	subs	r3, r5, #0
 800f81e:	bfb9      	ittee	lt
 800f820:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f824:	9305      	strlt	r3, [sp, #20]
 800f826:	2300      	movge	r3, #0
 800f828:	6033      	strge	r3, [r6, #0]
 800f82a:	9f05      	ldr	r7, [sp, #20]
 800f82c:	4b9a      	ldr	r3, [pc, #616]	@ (800fa98 <_dtoa_r+0x2d8>)
 800f82e:	bfbc      	itt	lt
 800f830:	2201      	movlt	r2, #1
 800f832:	6032      	strlt	r2, [r6, #0]
 800f834:	43bb      	bics	r3, r7
 800f836:	d112      	bne.n	800f85e <_dtoa_r+0x9e>
 800f838:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f83a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f83e:	6013      	str	r3, [r2, #0]
 800f840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f844:	4323      	orrs	r3, r4
 800f846:	f000 855a 	beq.w	80102fe <_dtoa_r+0xb3e>
 800f84a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f84c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800faac <_dtoa_r+0x2ec>
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 855c 	beq.w	801030e <_dtoa_r+0xb4e>
 800f856:	f10a 0303 	add.w	r3, sl, #3
 800f85a:	f000 bd56 	b.w	801030a <_dtoa_r+0xb4a>
 800f85e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f862:	2200      	movs	r2, #0
 800f864:	ec51 0b17 	vmov	r0, r1, d7
 800f868:	2300      	movs	r3, #0
 800f86a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f86e:	f7f1 f953 	bl	8000b18 <__aeabi_dcmpeq>
 800f872:	4680      	mov	r8, r0
 800f874:	b158      	cbz	r0, 800f88e <_dtoa_r+0xce>
 800f876:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f878:	2301      	movs	r3, #1
 800f87a:	6013      	str	r3, [r2, #0]
 800f87c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f87e:	b113      	cbz	r3, 800f886 <_dtoa_r+0xc6>
 800f880:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f882:	4b86      	ldr	r3, [pc, #536]	@ (800fa9c <_dtoa_r+0x2dc>)
 800f884:	6013      	str	r3, [r2, #0]
 800f886:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fab0 <_dtoa_r+0x2f0>
 800f88a:	f000 bd40 	b.w	801030e <_dtoa_r+0xb4e>
 800f88e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f892:	aa14      	add	r2, sp, #80	@ 0x50
 800f894:	a915      	add	r1, sp, #84	@ 0x54
 800f896:	4648      	mov	r0, r9
 800f898:	f001 f984 	bl	8010ba4 <__d2b>
 800f89c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f8a0:	9002      	str	r0, [sp, #8]
 800f8a2:	2e00      	cmp	r6, #0
 800f8a4:	d078      	beq.n	800f998 <_dtoa_r+0x1d8>
 800f8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f8ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f8b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f8b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f8bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	4b76      	ldr	r3, [pc, #472]	@ (800faa0 <_dtoa_r+0x2e0>)
 800f8c6:	f7f0 fd07 	bl	80002d8 <__aeabi_dsub>
 800f8ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800fa78 <_dtoa_r+0x2b8>)
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	f7f0 feba 	bl	8000648 <__aeabi_dmul>
 800f8d4:	a36a      	add	r3, pc, #424	@ (adr r3, 800fa80 <_dtoa_r+0x2c0>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 fcff 	bl	80002dc <__adddf3>
 800f8de:	4604      	mov	r4, r0
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	f7f0 fe46 	bl	8000574 <__aeabi_i2d>
 800f8e8:	a367      	add	r3, pc, #412	@ (adr r3, 800fa88 <_dtoa_r+0x2c8>)
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f7f0 feab 	bl	8000648 <__aeabi_dmul>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7f0 fcef 	bl	80002dc <__adddf3>
 800f8fe:	4604      	mov	r4, r0
 800f900:	460d      	mov	r5, r1
 800f902:	f7f1 f951 	bl	8000ba8 <__aeabi_d2iz>
 800f906:	2200      	movs	r2, #0
 800f908:	4607      	mov	r7, r0
 800f90a:	2300      	movs	r3, #0
 800f90c:	4620      	mov	r0, r4
 800f90e:	4629      	mov	r1, r5
 800f910:	f7f1 f90c 	bl	8000b2c <__aeabi_dcmplt>
 800f914:	b140      	cbz	r0, 800f928 <_dtoa_r+0x168>
 800f916:	4638      	mov	r0, r7
 800f918:	f7f0 fe2c 	bl	8000574 <__aeabi_i2d>
 800f91c:	4622      	mov	r2, r4
 800f91e:	462b      	mov	r3, r5
 800f920:	f7f1 f8fa 	bl	8000b18 <__aeabi_dcmpeq>
 800f924:	b900      	cbnz	r0, 800f928 <_dtoa_r+0x168>
 800f926:	3f01      	subs	r7, #1
 800f928:	2f16      	cmp	r7, #22
 800f92a:	d852      	bhi.n	800f9d2 <_dtoa_r+0x212>
 800f92c:	4b5d      	ldr	r3, [pc, #372]	@ (800faa4 <_dtoa_r+0x2e4>)
 800f92e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f936:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f93a:	f7f1 f8f7 	bl	8000b2c <__aeabi_dcmplt>
 800f93e:	2800      	cmp	r0, #0
 800f940:	d049      	beq.n	800f9d6 <_dtoa_r+0x216>
 800f942:	3f01      	subs	r7, #1
 800f944:	2300      	movs	r3, #0
 800f946:	9310      	str	r3, [sp, #64]	@ 0x40
 800f948:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f94a:	1b9b      	subs	r3, r3, r6
 800f94c:	1e5a      	subs	r2, r3, #1
 800f94e:	bf45      	ittet	mi
 800f950:	f1c3 0301 	rsbmi	r3, r3, #1
 800f954:	9300      	strmi	r3, [sp, #0]
 800f956:	2300      	movpl	r3, #0
 800f958:	2300      	movmi	r3, #0
 800f95a:	9206      	str	r2, [sp, #24]
 800f95c:	bf54      	ite	pl
 800f95e:	9300      	strpl	r3, [sp, #0]
 800f960:	9306      	strmi	r3, [sp, #24]
 800f962:	2f00      	cmp	r7, #0
 800f964:	db39      	blt.n	800f9da <_dtoa_r+0x21a>
 800f966:	9b06      	ldr	r3, [sp, #24]
 800f968:	970d      	str	r7, [sp, #52]	@ 0x34
 800f96a:	443b      	add	r3, r7
 800f96c:	9306      	str	r3, [sp, #24]
 800f96e:	2300      	movs	r3, #0
 800f970:	9308      	str	r3, [sp, #32]
 800f972:	9b07      	ldr	r3, [sp, #28]
 800f974:	2b09      	cmp	r3, #9
 800f976:	d863      	bhi.n	800fa40 <_dtoa_r+0x280>
 800f978:	2b05      	cmp	r3, #5
 800f97a:	bfc4      	itt	gt
 800f97c:	3b04      	subgt	r3, #4
 800f97e:	9307      	strgt	r3, [sp, #28]
 800f980:	9b07      	ldr	r3, [sp, #28]
 800f982:	f1a3 0302 	sub.w	r3, r3, #2
 800f986:	bfcc      	ite	gt
 800f988:	2400      	movgt	r4, #0
 800f98a:	2401      	movle	r4, #1
 800f98c:	2b03      	cmp	r3, #3
 800f98e:	d863      	bhi.n	800fa58 <_dtoa_r+0x298>
 800f990:	e8df f003 	tbb	[pc, r3]
 800f994:	2b375452 	.word	0x2b375452
 800f998:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f99c:	441e      	add	r6, r3
 800f99e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f9a2:	2b20      	cmp	r3, #32
 800f9a4:	bfc1      	itttt	gt
 800f9a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f9aa:	409f      	lslgt	r7, r3
 800f9ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f9b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f9b4:	bfd6      	itet	le
 800f9b6:	f1c3 0320 	rsble	r3, r3, #32
 800f9ba:	ea47 0003 	orrgt.w	r0, r7, r3
 800f9be:	fa04 f003 	lslle.w	r0, r4, r3
 800f9c2:	f7f0 fdc7 	bl	8000554 <__aeabi_ui2d>
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f9cc:	3e01      	subs	r6, #1
 800f9ce:	9212      	str	r2, [sp, #72]	@ 0x48
 800f9d0:	e776      	b.n	800f8c0 <_dtoa_r+0x100>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e7b7      	b.n	800f946 <_dtoa_r+0x186>
 800f9d6:	9010      	str	r0, [sp, #64]	@ 0x40
 800f9d8:	e7b6      	b.n	800f948 <_dtoa_r+0x188>
 800f9da:	9b00      	ldr	r3, [sp, #0]
 800f9dc:	1bdb      	subs	r3, r3, r7
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	427b      	negs	r3, r7
 800f9e2:	9308      	str	r3, [sp, #32]
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f9e8:	e7c3      	b.n	800f972 <_dtoa_r+0x1b2>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9f0:	eb07 0b03 	add.w	fp, r7, r3
 800f9f4:	f10b 0301 	add.w	r3, fp, #1
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	9303      	str	r3, [sp, #12]
 800f9fc:	bfb8      	it	lt
 800f9fe:	2301      	movlt	r3, #1
 800fa00:	e006      	b.n	800fa10 <_dtoa_r+0x250>
 800fa02:	2301      	movs	r3, #1
 800fa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dd28      	ble.n	800fa5e <_dtoa_r+0x29e>
 800fa0c:	469b      	mov	fp, r3
 800fa0e:	9303      	str	r3, [sp, #12]
 800fa10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fa14:	2100      	movs	r1, #0
 800fa16:	2204      	movs	r2, #4
 800fa18:	f102 0514 	add.w	r5, r2, #20
 800fa1c:	429d      	cmp	r5, r3
 800fa1e:	d926      	bls.n	800fa6e <_dtoa_r+0x2ae>
 800fa20:	6041      	str	r1, [r0, #4]
 800fa22:	4648      	mov	r0, r9
 800fa24:	f000 fd9c 	bl	8010560 <_Balloc>
 800fa28:	4682      	mov	sl, r0
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d142      	bne.n	800fab4 <_dtoa_r+0x2f4>
 800fa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800faa8 <_dtoa_r+0x2e8>)
 800fa30:	4602      	mov	r2, r0
 800fa32:	f240 11af 	movw	r1, #431	@ 0x1af
 800fa36:	e6da      	b.n	800f7ee <_dtoa_r+0x2e>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	e7e3      	b.n	800fa04 <_dtoa_r+0x244>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e7d5      	b.n	800f9ec <_dtoa_r+0x22c>
 800fa40:	2401      	movs	r4, #1
 800fa42:	2300      	movs	r3, #0
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	9409      	str	r4, [sp, #36]	@ 0x24
 800fa48:	f04f 3bff 	mov.w	fp, #4294967295
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fa52:	2312      	movs	r3, #18
 800fa54:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa56:	e7db      	b.n	800fa10 <_dtoa_r+0x250>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa5c:	e7f4      	b.n	800fa48 <_dtoa_r+0x288>
 800fa5e:	f04f 0b01 	mov.w	fp, #1
 800fa62:	f8cd b00c 	str.w	fp, [sp, #12]
 800fa66:	465b      	mov	r3, fp
 800fa68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fa6c:	e7d0      	b.n	800fa10 <_dtoa_r+0x250>
 800fa6e:	3101      	adds	r1, #1
 800fa70:	0052      	lsls	r2, r2, #1
 800fa72:	e7d1      	b.n	800fa18 <_dtoa_r+0x258>
 800fa74:	f3af 8000 	nop.w
 800fa78:	636f4361 	.word	0x636f4361
 800fa7c:	3fd287a7 	.word	0x3fd287a7
 800fa80:	8b60c8b3 	.word	0x8b60c8b3
 800fa84:	3fc68a28 	.word	0x3fc68a28
 800fa88:	509f79fb 	.word	0x509f79fb
 800fa8c:	3fd34413 	.word	0x3fd34413
 800fa90:	08012ca5 	.word	0x08012ca5
 800fa94:	08012cbc 	.word	0x08012cbc
 800fa98:	7ff00000 	.word	0x7ff00000
 800fa9c:	08012c75 	.word	0x08012c75
 800faa0:	3ff80000 	.word	0x3ff80000
 800faa4:	08012e10 	.word	0x08012e10
 800faa8:	08012d14 	.word	0x08012d14
 800faac:	08012ca1 	.word	0x08012ca1
 800fab0:	08012c74 	.word	0x08012c74
 800fab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fab8:	6018      	str	r0, [r3, #0]
 800faba:	9b03      	ldr	r3, [sp, #12]
 800fabc:	2b0e      	cmp	r3, #14
 800fabe:	f200 80a1 	bhi.w	800fc04 <_dtoa_r+0x444>
 800fac2:	2c00      	cmp	r4, #0
 800fac4:	f000 809e 	beq.w	800fc04 <_dtoa_r+0x444>
 800fac8:	2f00      	cmp	r7, #0
 800faca:	dd33      	ble.n	800fb34 <_dtoa_r+0x374>
 800facc:	4b9c      	ldr	r3, [pc, #624]	@ (800fd40 <_dtoa_r+0x580>)
 800face:	f007 020f 	and.w	r2, r7, #15
 800fad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fad6:	ed93 7b00 	vldr	d7, [r3]
 800fada:	05f8      	lsls	r0, r7, #23
 800fadc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fae4:	d516      	bpl.n	800fb14 <_dtoa_r+0x354>
 800fae6:	4b97      	ldr	r3, [pc, #604]	@ (800fd44 <_dtoa_r+0x584>)
 800fae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800faec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800faf0:	f7f0 fed4 	bl	800089c <__aeabi_ddiv>
 800faf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faf8:	f004 040f 	and.w	r4, r4, #15
 800fafc:	2603      	movs	r6, #3
 800fafe:	4d91      	ldr	r5, [pc, #580]	@ (800fd44 <_dtoa_r+0x584>)
 800fb00:	b954      	cbnz	r4, 800fb18 <_dtoa_r+0x358>
 800fb02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fb06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb0a:	f7f0 fec7 	bl	800089c <__aeabi_ddiv>
 800fb0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb12:	e028      	b.n	800fb66 <_dtoa_r+0x3a6>
 800fb14:	2602      	movs	r6, #2
 800fb16:	e7f2      	b.n	800fafe <_dtoa_r+0x33e>
 800fb18:	07e1      	lsls	r1, r4, #31
 800fb1a:	d508      	bpl.n	800fb2e <_dtoa_r+0x36e>
 800fb1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fb20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb24:	f7f0 fd90 	bl	8000648 <__aeabi_dmul>
 800fb28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fb2c:	3601      	adds	r6, #1
 800fb2e:	1064      	asrs	r4, r4, #1
 800fb30:	3508      	adds	r5, #8
 800fb32:	e7e5      	b.n	800fb00 <_dtoa_r+0x340>
 800fb34:	f000 80af 	beq.w	800fc96 <_dtoa_r+0x4d6>
 800fb38:	427c      	negs	r4, r7
 800fb3a:	4b81      	ldr	r3, [pc, #516]	@ (800fd40 <_dtoa_r+0x580>)
 800fb3c:	4d81      	ldr	r5, [pc, #516]	@ (800fd44 <_dtoa_r+0x584>)
 800fb3e:	f004 020f 	and.w	r2, r4, #15
 800fb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fb4e:	f7f0 fd7b 	bl	8000648 <__aeabi_dmul>
 800fb52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb56:	1124      	asrs	r4, r4, #4
 800fb58:	2300      	movs	r3, #0
 800fb5a:	2602      	movs	r6, #2
 800fb5c:	2c00      	cmp	r4, #0
 800fb5e:	f040 808f 	bne.w	800fc80 <_dtoa_r+0x4c0>
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1d3      	bne.n	800fb0e <_dtoa_r+0x34e>
 800fb66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f000 8094 	beq.w	800fc9a <_dtoa_r+0x4da>
 800fb72:	4b75      	ldr	r3, [pc, #468]	@ (800fd48 <_dtoa_r+0x588>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	4620      	mov	r0, r4
 800fb78:	4629      	mov	r1, r5
 800fb7a:	f7f0 ffd7 	bl	8000b2c <__aeabi_dcmplt>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	f000 808b 	beq.w	800fc9a <_dtoa_r+0x4da>
 800fb84:	9b03      	ldr	r3, [sp, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f000 8087 	beq.w	800fc9a <_dtoa_r+0x4da>
 800fb8c:	f1bb 0f00 	cmp.w	fp, #0
 800fb90:	dd34      	ble.n	800fbfc <_dtoa_r+0x43c>
 800fb92:	4620      	mov	r0, r4
 800fb94:	4b6d      	ldr	r3, [pc, #436]	@ (800fd4c <_dtoa_r+0x58c>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	4629      	mov	r1, r5
 800fb9a:	f7f0 fd55 	bl	8000648 <__aeabi_dmul>
 800fb9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fba2:	f107 38ff 	add.w	r8, r7, #4294967295
 800fba6:	3601      	adds	r6, #1
 800fba8:	465c      	mov	r4, fp
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7f0 fce2 	bl	8000574 <__aeabi_i2d>
 800fbb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbb4:	f7f0 fd48 	bl	8000648 <__aeabi_dmul>
 800fbb8:	4b65      	ldr	r3, [pc, #404]	@ (800fd50 <_dtoa_r+0x590>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f7f0 fb8e 	bl	80002dc <__adddf3>
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fbc6:	2c00      	cmp	r4, #0
 800fbc8:	d16a      	bne.n	800fca0 <_dtoa_r+0x4e0>
 800fbca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbce:	4b61      	ldr	r3, [pc, #388]	@ (800fd54 <_dtoa_r+0x594>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f7f0 fb81 	bl	80002d8 <__aeabi_dsub>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fbde:	462a      	mov	r2, r5
 800fbe0:	4633      	mov	r3, r6
 800fbe2:	f7f0 ffc1 	bl	8000b68 <__aeabi_dcmpgt>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	f040 8298 	bne.w	801011c <_dtoa_r+0x95c>
 800fbec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbf0:	462a      	mov	r2, r5
 800fbf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbf6:	f7f0 ff99 	bl	8000b2c <__aeabi_dcmplt>
 800fbfa:	bb38      	cbnz	r0, 800fc4c <_dtoa_r+0x48c>
 800fbfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fc00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fc04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f2c0 8157 	blt.w	800feba <_dtoa_r+0x6fa>
 800fc0c:	2f0e      	cmp	r7, #14
 800fc0e:	f300 8154 	bgt.w	800feba <_dtoa_r+0x6fa>
 800fc12:	4b4b      	ldr	r3, [pc, #300]	@ (800fd40 <_dtoa_r+0x580>)
 800fc14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc18:	ed93 7b00 	vldr	d7, [r3]
 800fc1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	ed8d 7b00 	vstr	d7, [sp]
 800fc24:	f280 80e5 	bge.w	800fdf2 <_dtoa_r+0x632>
 800fc28:	9b03      	ldr	r3, [sp, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f300 80e1 	bgt.w	800fdf2 <_dtoa_r+0x632>
 800fc30:	d10c      	bne.n	800fc4c <_dtoa_r+0x48c>
 800fc32:	4b48      	ldr	r3, [pc, #288]	@ (800fd54 <_dtoa_r+0x594>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	ec51 0b17 	vmov	r0, r1, d7
 800fc3a:	f7f0 fd05 	bl	8000648 <__aeabi_dmul>
 800fc3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc42:	f7f0 ff87 	bl	8000b54 <__aeabi_dcmpge>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	f000 8266 	beq.w	8010118 <_dtoa_r+0x958>
 800fc4c:	2400      	movs	r4, #0
 800fc4e:	4625      	mov	r5, r4
 800fc50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc52:	4656      	mov	r6, sl
 800fc54:	ea6f 0803 	mvn.w	r8, r3
 800fc58:	2700      	movs	r7, #0
 800fc5a:	4621      	mov	r1, r4
 800fc5c:	4648      	mov	r0, r9
 800fc5e:	f000 fcbf 	bl	80105e0 <_Bfree>
 800fc62:	2d00      	cmp	r5, #0
 800fc64:	f000 80bd 	beq.w	800fde2 <_dtoa_r+0x622>
 800fc68:	b12f      	cbz	r7, 800fc76 <_dtoa_r+0x4b6>
 800fc6a:	42af      	cmp	r7, r5
 800fc6c:	d003      	beq.n	800fc76 <_dtoa_r+0x4b6>
 800fc6e:	4639      	mov	r1, r7
 800fc70:	4648      	mov	r0, r9
 800fc72:	f000 fcb5 	bl	80105e0 <_Bfree>
 800fc76:	4629      	mov	r1, r5
 800fc78:	4648      	mov	r0, r9
 800fc7a:	f000 fcb1 	bl	80105e0 <_Bfree>
 800fc7e:	e0b0      	b.n	800fde2 <_dtoa_r+0x622>
 800fc80:	07e2      	lsls	r2, r4, #31
 800fc82:	d505      	bpl.n	800fc90 <_dtoa_r+0x4d0>
 800fc84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc88:	f7f0 fcde 	bl	8000648 <__aeabi_dmul>
 800fc8c:	3601      	adds	r6, #1
 800fc8e:	2301      	movs	r3, #1
 800fc90:	1064      	asrs	r4, r4, #1
 800fc92:	3508      	adds	r5, #8
 800fc94:	e762      	b.n	800fb5c <_dtoa_r+0x39c>
 800fc96:	2602      	movs	r6, #2
 800fc98:	e765      	b.n	800fb66 <_dtoa_r+0x3a6>
 800fc9a:	9c03      	ldr	r4, [sp, #12]
 800fc9c:	46b8      	mov	r8, r7
 800fc9e:	e784      	b.n	800fbaa <_dtoa_r+0x3ea>
 800fca0:	4b27      	ldr	r3, [pc, #156]	@ (800fd40 <_dtoa_r+0x580>)
 800fca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcac:	4454      	add	r4, sl
 800fcae:	2900      	cmp	r1, #0
 800fcb0:	d054      	beq.n	800fd5c <_dtoa_r+0x59c>
 800fcb2:	4929      	ldr	r1, [pc, #164]	@ (800fd58 <_dtoa_r+0x598>)
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f7f0 fdf1 	bl	800089c <__aeabi_ddiv>
 800fcba:	4633      	mov	r3, r6
 800fcbc:	462a      	mov	r2, r5
 800fcbe:	f7f0 fb0b 	bl	80002d8 <__aeabi_dsub>
 800fcc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fcc6:	4656      	mov	r6, sl
 800fcc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fccc:	f7f0 ff6c 	bl	8000ba8 <__aeabi_d2iz>
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	f7f0 fc4f 	bl	8000574 <__aeabi_i2d>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	460b      	mov	r3, r1
 800fcda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcde:	f7f0 fafb 	bl	80002d8 <__aeabi_dsub>
 800fce2:	3530      	adds	r5, #48	@ 0x30
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fcec:	f806 5b01 	strb.w	r5, [r6], #1
 800fcf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcf4:	f7f0 ff1a 	bl	8000b2c <__aeabi_dcmplt>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d172      	bne.n	800fde2 <_dtoa_r+0x622>
 800fcfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd00:	4911      	ldr	r1, [pc, #68]	@ (800fd48 <_dtoa_r+0x588>)
 800fd02:	2000      	movs	r0, #0
 800fd04:	f7f0 fae8 	bl	80002d8 <__aeabi_dsub>
 800fd08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fd0c:	f7f0 ff0e 	bl	8000b2c <__aeabi_dcmplt>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	f040 80b4 	bne.w	800fe7e <_dtoa_r+0x6be>
 800fd16:	42a6      	cmp	r6, r4
 800fd18:	f43f af70 	beq.w	800fbfc <_dtoa_r+0x43c>
 800fd1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fd20:	4b0a      	ldr	r3, [pc, #40]	@ (800fd4c <_dtoa_r+0x58c>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	f7f0 fc90 	bl	8000648 <__aeabi_dmul>
 800fd28:	4b08      	ldr	r3, [pc, #32]	@ (800fd4c <_dtoa_r+0x58c>)
 800fd2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd2e:	2200      	movs	r2, #0
 800fd30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd34:	f7f0 fc88 	bl	8000648 <__aeabi_dmul>
 800fd38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd3c:	e7c4      	b.n	800fcc8 <_dtoa_r+0x508>
 800fd3e:	bf00      	nop
 800fd40:	08012e10 	.word	0x08012e10
 800fd44:	08012de8 	.word	0x08012de8
 800fd48:	3ff00000 	.word	0x3ff00000
 800fd4c:	40240000 	.word	0x40240000
 800fd50:	401c0000 	.word	0x401c0000
 800fd54:	40140000 	.word	0x40140000
 800fd58:	3fe00000 	.word	0x3fe00000
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f7f0 fc72 	bl	8000648 <__aeabi_dmul>
 800fd64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd68:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fd6a:	4656      	mov	r6, sl
 800fd6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd70:	f7f0 ff1a 	bl	8000ba8 <__aeabi_d2iz>
 800fd74:	4605      	mov	r5, r0
 800fd76:	f7f0 fbfd 	bl	8000574 <__aeabi_i2d>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd82:	f7f0 faa9 	bl	80002d8 <__aeabi_dsub>
 800fd86:	3530      	adds	r5, #48	@ 0x30
 800fd88:	f806 5b01 	strb.w	r5, [r6], #1
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	42a6      	cmp	r6, r4
 800fd92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd96:	f04f 0200 	mov.w	r2, #0
 800fd9a:	d124      	bne.n	800fde6 <_dtoa_r+0x626>
 800fd9c:	4baf      	ldr	r3, [pc, #700]	@ (801005c <_dtoa_r+0x89c>)
 800fd9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fda2:	f7f0 fa9b 	bl	80002dc <__adddf3>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdae:	f7f0 fedb 	bl	8000b68 <__aeabi_dcmpgt>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d163      	bne.n	800fe7e <_dtoa_r+0x6be>
 800fdb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdba:	49a8      	ldr	r1, [pc, #672]	@ (801005c <_dtoa_r+0x89c>)
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	f7f0 fa8b 	bl	80002d8 <__aeabi_dsub>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdca:	f7f0 feaf 	bl	8000b2c <__aeabi_dcmplt>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	f43f af14 	beq.w	800fbfc <_dtoa_r+0x43c>
 800fdd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fdd6:	1e73      	subs	r3, r6, #1
 800fdd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fdde:	2b30      	cmp	r3, #48	@ 0x30
 800fde0:	d0f8      	beq.n	800fdd4 <_dtoa_r+0x614>
 800fde2:	4647      	mov	r7, r8
 800fde4:	e03b      	b.n	800fe5e <_dtoa_r+0x69e>
 800fde6:	4b9e      	ldr	r3, [pc, #632]	@ (8010060 <_dtoa_r+0x8a0>)
 800fde8:	f7f0 fc2e 	bl	8000648 <__aeabi_dmul>
 800fdec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdf0:	e7bc      	b.n	800fd6c <_dtoa_r+0x5ac>
 800fdf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fdf6:	4656      	mov	r6, sl
 800fdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7f0 fd4c 	bl	800089c <__aeabi_ddiv>
 800fe04:	f7f0 fed0 	bl	8000ba8 <__aeabi_d2iz>
 800fe08:	4680      	mov	r8, r0
 800fe0a:	f7f0 fbb3 	bl	8000574 <__aeabi_i2d>
 800fe0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe12:	f7f0 fc19 	bl	8000648 <__aeabi_dmul>
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe22:	f7f0 fa59 	bl	80002d8 <__aeabi_dsub>
 800fe26:	f806 4b01 	strb.w	r4, [r6], #1
 800fe2a:	9d03      	ldr	r5, [sp, #12]
 800fe2c:	eba6 040a 	sub.w	r4, r6, sl
 800fe30:	42a5      	cmp	r5, r4
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	d133      	bne.n	800fea0 <_dtoa_r+0x6e0>
 800fe38:	f7f0 fa50 	bl	80002dc <__adddf3>
 800fe3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe40:	4604      	mov	r4, r0
 800fe42:	460d      	mov	r5, r1
 800fe44:	f7f0 fe90 	bl	8000b68 <__aeabi_dcmpgt>
 800fe48:	b9c0      	cbnz	r0, 800fe7c <_dtoa_r+0x6bc>
 800fe4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	4629      	mov	r1, r5
 800fe52:	f7f0 fe61 	bl	8000b18 <__aeabi_dcmpeq>
 800fe56:	b110      	cbz	r0, 800fe5e <_dtoa_r+0x69e>
 800fe58:	f018 0f01 	tst.w	r8, #1
 800fe5c:	d10e      	bne.n	800fe7c <_dtoa_r+0x6bc>
 800fe5e:	9902      	ldr	r1, [sp, #8]
 800fe60:	4648      	mov	r0, r9
 800fe62:	f000 fbbd 	bl	80105e0 <_Bfree>
 800fe66:	2300      	movs	r3, #0
 800fe68:	7033      	strb	r3, [r6, #0]
 800fe6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fe6c:	3701      	adds	r7, #1
 800fe6e:	601f      	str	r7, [r3, #0]
 800fe70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f000 824b 	beq.w	801030e <_dtoa_r+0xb4e>
 800fe78:	601e      	str	r6, [r3, #0]
 800fe7a:	e248      	b.n	801030e <_dtoa_r+0xb4e>
 800fe7c:	46b8      	mov	r8, r7
 800fe7e:	4633      	mov	r3, r6
 800fe80:	461e      	mov	r6, r3
 800fe82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe86:	2a39      	cmp	r2, #57	@ 0x39
 800fe88:	d106      	bne.n	800fe98 <_dtoa_r+0x6d8>
 800fe8a:	459a      	cmp	sl, r3
 800fe8c:	d1f8      	bne.n	800fe80 <_dtoa_r+0x6c0>
 800fe8e:	2230      	movs	r2, #48	@ 0x30
 800fe90:	f108 0801 	add.w	r8, r8, #1
 800fe94:	f88a 2000 	strb.w	r2, [sl]
 800fe98:	781a      	ldrb	r2, [r3, #0]
 800fe9a:	3201      	adds	r2, #1
 800fe9c:	701a      	strb	r2, [r3, #0]
 800fe9e:	e7a0      	b.n	800fde2 <_dtoa_r+0x622>
 800fea0:	4b6f      	ldr	r3, [pc, #444]	@ (8010060 <_dtoa_r+0x8a0>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	f7f0 fbd0 	bl	8000648 <__aeabi_dmul>
 800fea8:	2200      	movs	r2, #0
 800feaa:	2300      	movs	r3, #0
 800feac:	4604      	mov	r4, r0
 800feae:	460d      	mov	r5, r1
 800feb0:	f7f0 fe32 	bl	8000b18 <__aeabi_dcmpeq>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d09f      	beq.n	800fdf8 <_dtoa_r+0x638>
 800feb8:	e7d1      	b.n	800fe5e <_dtoa_r+0x69e>
 800feba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800febc:	2a00      	cmp	r2, #0
 800febe:	f000 80ea 	beq.w	8010096 <_dtoa_r+0x8d6>
 800fec2:	9a07      	ldr	r2, [sp, #28]
 800fec4:	2a01      	cmp	r2, #1
 800fec6:	f300 80cd 	bgt.w	8010064 <_dtoa_r+0x8a4>
 800feca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fecc:	2a00      	cmp	r2, #0
 800fece:	f000 80c1 	beq.w	8010054 <_dtoa_r+0x894>
 800fed2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fed6:	9c08      	ldr	r4, [sp, #32]
 800fed8:	9e00      	ldr	r6, [sp, #0]
 800feda:	9a00      	ldr	r2, [sp, #0]
 800fedc:	441a      	add	r2, r3
 800fede:	9200      	str	r2, [sp, #0]
 800fee0:	9a06      	ldr	r2, [sp, #24]
 800fee2:	2101      	movs	r1, #1
 800fee4:	441a      	add	r2, r3
 800fee6:	4648      	mov	r0, r9
 800fee8:	9206      	str	r2, [sp, #24]
 800feea:	f000 fc2d 	bl	8010748 <__i2b>
 800feee:	4605      	mov	r5, r0
 800fef0:	b166      	cbz	r6, 800ff0c <_dtoa_r+0x74c>
 800fef2:	9b06      	ldr	r3, [sp, #24]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	dd09      	ble.n	800ff0c <_dtoa_r+0x74c>
 800fef8:	42b3      	cmp	r3, r6
 800fefa:	9a00      	ldr	r2, [sp, #0]
 800fefc:	bfa8      	it	ge
 800fefe:	4633      	movge	r3, r6
 800ff00:	1ad2      	subs	r2, r2, r3
 800ff02:	9200      	str	r2, [sp, #0]
 800ff04:	9a06      	ldr	r2, [sp, #24]
 800ff06:	1af6      	subs	r6, r6, r3
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	9306      	str	r3, [sp, #24]
 800ff0c:	9b08      	ldr	r3, [sp, #32]
 800ff0e:	b30b      	cbz	r3, 800ff54 <_dtoa_r+0x794>
 800ff10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f000 80c6 	beq.w	80100a4 <_dtoa_r+0x8e4>
 800ff18:	2c00      	cmp	r4, #0
 800ff1a:	f000 80c0 	beq.w	801009e <_dtoa_r+0x8de>
 800ff1e:	4629      	mov	r1, r5
 800ff20:	4622      	mov	r2, r4
 800ff22:	4648      	mov	r0, r9
 800ff24:	f000 fcc8 	bl	80108b8 <__pow5mult>
 800ff28:	9a02      	ldr	r2, [sp, #8]
 800ff2a:	4601      	mov	r1, r0
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	4648      	mov	r0, r9
 800ff30:	f000 fc20 	bl	8010774 <__multiply>
 800ff34:	9902      	ldr	r1, [sp, #8]
 800ff36:	4680      	mov	r8, r0
 800ff38:	4648      	mov	r0, r9
 800ff3a:	f000 fb51 	bl	80105e0 <_Bfree>
 800ff3e:	9b08      	ldr	r3, [sp, #32]
 800ff40:	1b1b      	subs	r3, r3, r4
 800ff42:	9308      	str	r3, [sp, #32]
 800ff44:	f000 80b1 	beq.w	80100aa <_dtoa_r+0x8ea>
 800ff48:	9a08      	ldr	r2, [sp, #32]
 800ff4a:	4641      	mov	r1, r8
 800ff4c:	4648      	mov	r0, r9
 800ff4e:	f000 fcb3 	bl	80108b8 <__pow5mult>
 800ff52:	9002      	str	r0, [sp, #8]
 800ff54:	2101      	movs	r1, #1
 800ff56:	4648      	mov	r0, r9
 800ff58:	f000 fbf6 	bl	8010748 <__i2b>
 800ff5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff5e:	4604      	mov	r4, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 81d8 	beq.w	8010316 <_dtoa_r+0xb56>
 800ff66:	461a      	mov	r2, r3
 800ff68:	4601      	mov	r1, r0
 800ff6a:	4648      	mov	r0, r9
 800ff6c:	f000 fca4 	bl	80108b8 <__pow5mult>
 800ff70:	9b07      	ldr	r3, [sp, #28]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	4604      	mov	r4, r0
 800ff76:	f300 809f 	bgt.w	80100b8 <_dtoa_r+0x8f8>
 800ff7a:	9b04      	ldr	r3, [sp, #16]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f040 8097 	bne.w	80100b0 <_dtoa_r+0x8f0>
 800ff82:	9b05      	ldr	r3, [sp, #20]
 800ff84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f040 8093 	bne.w	80100b4 <_dtoa_r+0x8f4>
 800ff8e:	9b05      	ldr	r3, [sp, #20]
 800ff90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff94:	0d1b      	lsrs	r3, r3, #20
 800ff96:	051b      	lsls	r3, r3, #20
 800ff98:	b133      	cbz	r3, 800ffa8 <_dtoa_r+0x7e8>
 800ff9a:	9b00      	ldr	r3, [sp, #0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	9b06      	ldr	r3, [sp, #24]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	9306      	str	r3, [sp, #24]
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	9308      	str	r3, [sp, #32]
 800ffaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 81b8 	beq.w	8010322 <_dtoa_r+0xb62>
 800ffb2:	6923      	ldr	r3, [r4, #16]
 800ffb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffb8:	6918      	ldr	r0, [r3, #16]
 800ffba:	f000 fb79 	bl	80106b0 <__hi0bits>
 800ffbe:	f1c0 0020 	rsb	r0, r0, #32
 800ffc2:	9b06      	ldr	r3, [sp, #24]
 800ffc4:	4418      	add	r0, r3
 800ffc6:	f010 001f 	ands.w	r0, r0, #31
 800ffca:	f000 8082 	beq.w	80100d2 <_dtoa_r+0x912>
 800ffce:	f1c0 0320 	rsb	r3, r0, #32
 800ffd2:	2b04      	cmp	r3, #4
 800ffd4:	dd73      	ble.n	80100be <_dtoa_r+0x8fe>
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	f1c0 001c 	rsb	r0, r0, #28
 800ffdc:	4403      	add	r3, r0
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	9b06      	ldr	r3, [sp, #24]
 800ffe2:	4403      	add	r3, r0
 800ffe4:	4406      	add	r6, r0
 800ffe6:	9306      	str	r3, [sp, #24]
 800ffe8:	9b00      	ldr	r3, [sp, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dd05      	ble.n	800fffa <_dtoa_r+0x83a>
 800ffee:	9902      	ldr	r1, [sp, #8]
 800fff0:	461a      	mov	r2, r3
 800fff2:	4648      	mov	r0, r9
 800fff4:	f000 fcba 	bl	801096c <__lshift>
 800fff8:	9002      	str	r0, [sp, #8]
 800fffa:	9b06      	ldr	r3, [sp, #24]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	dd05      	ble.n	801000c <_dtoa_r+0x84c>
 8010000:	4621      	mov	r1, r4
 8010002:	461a      	mov	r2, r3
 8010004:	4648      	mov	r0, r9
 8010006:	f000 fcb1 	bl	801096c <__lshift>
 801000a:	4604      	mov	r4, r0
 801000c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801000e:	2b00      	cmp	r3, #0
 8010010:	d061      	beq.n	80100d6 <_dtoa_r+0x916>
 8010012:	9802      	ldr	r0, [sp, #8]
 8010014:	4621      	mov	r1, r4
 8010016:	f000 fd15 	bl	8010a44 <__mcmp>
 801001a:	2800      	cmp	r0, #0
 801001c:	da5b      	bge.n	80100d6 <_dtoa_r+0x916>
 801001e:	2300      	movs	r3, #0
 8010020:	9902      	ldr	r1, [sp, #8]
 8010022:	220a      	movs	r2, #10
 8010024:	4648      	mov	r0, r9
 8010026:	f000 fafd 	bl	8010624 <__multadd>
 801002a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801002c:	9002      	str	r0, [sp, #8]
 801002e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010032:	2b00      	cmp	r3, #0
 8010034:	f000 8177 	beq.w	8010326 <_dtoa_r+0xb66>
 8010038:	4629      	mov	r1, r5
 801003a:	2300      	movs	r3, #0
 801003c:	220a      	movs	r2, #10
 801003e:	4648      	mov	r0, r9
 8010040:	f000 faf0 	bl	8010624 <__multadd>
 8010044:	f1bb 0f00 	cmp.w	fp, #0
 8010048:	4605      	mov	r5, r0
 801004a:	dc6f      	bgt.n	801012c <_dtoa_r+0x96c>
 801004c:	9b07      	ldr	r3, [sp, #28]
 801004e:	2b02      	cmp	r3, #2
 8010050:	dc49      	bgt.n	80100e6 <_dtoa_r+0x926>
 8010052:	e06b      	b.n	801012c <_dtoa_r+0x96c>
 8010054:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801005a:	e73c      	b.n	800fed6 <_dtoa_r+0x716>
 801005c:	3fe00000 	.word	0x3fe00000
 8010060:	40240000 	.word	0x40240000
 8010064:	9b03      	ldr	r3, [sp, #12]
 8010066:	1e5c      	subs	r4, r3, #1
 8010068:	9b08      	ldr	r3, [sp, #32]
 801006a:	42a3      	cmp	r3, r4
 801006c:	db09      	blt.n	8010082 <_dtoa_r+0x8c2>
 801006e:	1b1c      	subs	r4, r3, r4
 8010070:	9b03      	ldr	r3, [sp, #12]
 8010072:	2b00      	cmp	r3, #0
 8010074:	f6bf af30 	bge.w	800fed8 <_dtoa_r+0x718>
 8010078:	9b00      	ldr	r3, [sp, #0]
 801007a:	9a03      	ldr	r2, [sp, #12]
 801007c:	1a9e      	subs	r6, r3, r2
 801007e:	2300      	movs	r3, #0
 8010080:	e72b      	b.n	800feda <_dtoa_r+0x71a>
 8010082:	9b08      	ldr	r3, [sp, #32]
 8010084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010086:	9408      	str	r4, [sp, #32]
 8010088:	1ae3      	subs	r3, r4, r3
 801008a:	441a      	add	r2, r3
 801008c:	9e00      	ldr	r6, [sp, #0]
 801008e:	9b03      	ldr	r3, [sp, #12]
 8010090:	920d      	str	r2, [sp, #52]	@ 0x34
 8010092:	2400      	movs	r4, #0
 8010094:	e721      	b.n	800feda <_dtoa_r+0x71a>
 8010096:	9c08      	ldr	r4, [sp, #32]
 8010098:	9e00      	ldr	r6, [sp, #0]
 801009a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801009c:	e728      	b.n	800fef0 <_dtoa_r+0x730>
 801009e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80100a2:	e751      	b.n	800ff48 <_dtoa_r+0x788>
 80100a4:	9a08      	ldr	r2, [sp, #32]
 80100a6:	9902      	ldr	r1, [sp, #8]
 80100a8:	e750      	b.n	800ff4c <_dtoa_r+0x78c>
 80100aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80100ae:	e751      	b.n	800ff54 <_dtoa_r+0x794>
 80100b0:	2300      	movs	r3, #0
 80100b2:	e779      	b.n	800ffa8 <_dtoa_r+0x7e8>
 80100b4:	9b04      	ldr	r3, [sp, #16]
 80100b6:	e777      	b.n	800ffa8 <_dtoa_r+0x7e8>
 80100b8:	2300      	movs	r3, #0
 80100ba:	9308      	str	r3, [sp, #32]
 80100bc:	e779      	b.n	800ffb2 <_dtoa_r+0x7f2>
 80100be:	d093      	beq.n	800ffe8 <_dtoa_r+0x828>
 80100c0:	9a00      	ldr	r2, [sp, #0]
 80100c2:	331c      	adds	r3, #28
 80100c4:	441a      	add	r2, r3
 80100c6:	9200      	str	r2, [sp, #0]
 80100c8:	9a06      	ldr	r2, [sp, #24]
 80100ca:	441a      	add	r2, r3
 80100cc:	441e      	add	r6, r3
 80100ce:	9206      	str	r2, [sp, #24]
 80100d0:	e78a      	b.n	800ffe8 <_dtoa_r+0x828>
 80100d2:	4603      	mov	r3, r0
 80100d4:	e7f4      	b.n	80100c0 <_dtoa_r+0x900>
 80100d6:	9b03      	ldr	r3, [sp, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	46b8      	mov	r8, r7
 80100dc:	dc20      	bgt.n	8010120 <_dtoa_r+0x960>
 80100de:	469b      	mov	fp, r3
 80100e0:	9b07      	ldr	r3, [sp, #28]
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	dd1e      	ble.n	8010124 <_dtoa_r+0x964>
 80100e6:	f1bb 0f00 	cmp.w	fp, #0
 80100ea:	f47f adb1 	bne.w	800fc50 <_dtoa_r+0x490>
 80100ee:	4621      	mov	r1, r4
 80100f0:	465b      	mov	r3, fp
 80100f2:	2205      	movs	r2, #5
 80100f4:	4648      	mov	r0, r9
 80100f6:	f000 fa95 	bl	8010624 <__multadd>
 80100fa:	4601      	mov	r1, r0
 80100fc:	4604      	mov	r4, r0
 80100fe:	9802      	ldr	r0, [sp, #8]
 8010100:	f000 fca0 	bl	8010a44 <__mcmp>
 8010104:	2800      	cmp	r0, #0
 8010106:	f77f ada3 	ble.w	800fc50 <_dtoa_r+0x490>
 801010a:	4656      	mov	r6, sl
 801010c:	2331      	movs	r3, #49	@ 0x31
 801010e:	f806 3b01 	strb.w	r3, [r6], #1
 8010112:	f108 0801 	add.w	r8, r8, #1
 8010116:	e59f      	b.n	800fc58 <_dtoa_r+0x498>
 8010118:	9c03      	ldr	r4, [sp, #12]
 801011a:	46b8      	mov	r8, r7
 801011c:	4625      	mov	r5, r4
 801011e:	e7f4      	b.n	801010a <_dtoa_r+0x94a>
 8010120:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 8101 	beq.w	801032e <_dtoa_r+0xb6e>
 801012c:	2e00      	cmp	r6, #0
 801012e:	dd05      	ble.n	801013c <_dtoa_r+0x97c>
 8010130:	4629      	mov	r1, r5
 8010132:	4632      	mov	r2, r6
 8010134:	4648      	mov	r0, r9
 8010136:	f000 fc19 	bl	801096c <__lshift>
 801013a:	4605      	mov	r5, r0
 801013c:	9b08      	ldr	r3, [sp, #32]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d05c      	beq.n	80101fc <_dtoa_r+0xa3c>
 8010142:	6869      	ldr	r1, [r5, #4]
 8010144:	4648      	mov	r0, r9
 8010146:	f000 fa0b 	bl	8010560 <_Balloc>
 801014a:	4606      	mov	r6, r0
 801014c:	b928      	cbnz	r0, 801015a <_dtoa_r+0x99a>
 801014e:	4b82      	ldr	r3, [pc, #520]	@ (8010358 <_dtoa_r+0xb98>)
 8010150:	4602      	mov	r2, r0
 8010152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010156:	f7ff bb4a 	b.w	800f7ee <_dtoa_r+0x2e>
 801015a:	692a      	ldr	r2, [r5, #16]
 801015c:	3202      	adds	r2, #2
 801015e:	0092      	lsls	r2, r2, #2
 8010160:	f105 010c 	add.w	r1, r5, #12
 8010164:	300c      	adds	r0, #12
 8010166:	f7ff fa94 	bl	800f692 <memcpy>
 801016a:	2201      	movs	r2, #1
 801016c:	4631      	mov	r1, r6
 801016e:	4648      	mov	r0, r9
 8010170:	f000 fbfc 	bl	801096c <__lshift>
 8010174:	f10a 0301 	add.w	r3, sl, #1
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	eb0a 030b 	add.w	r3, sl, fp
 801017e:	9308      	str	r3, [sp, #32]
 8010180:	9b04      	ldr	r3, [sp, #16]
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	462f      	mov	r7, r5
 8010188:	9306      	str	r3, [sp, #24]
 801018a:	4605      	mov	r5, r0
 801018c:	9b00      	ldr	r3, [sp, #0]
 801018e:	9802      	ldr	r0, [sp, #8]
 8010190:	4621      	mov	r1, r4
 8010192:	f103 3bff 	add.w	fp, r3, #4294967295
 8010196:	f7ff fa8a 	bl	800f6ae <quorem>
 801019a:	4603      	mov	r3, r0
 801019c:	3330      	adds	r3, #48	@ 0x30
 801019e:	9003      	str	r0, [sp, #12]
 80101a0:	4639      	mov	r1, r7
 80101a2:	9802      	ldr	r0, [sp, #8]
 80101a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80101a6:	f000 fc4d 	bl	8010a44 <__mcmp>
 80101aa:	462a      	mov	r2, r5
 80101ac:	9004      	str	r0, [sp, #16]
 80101ae:	4621      	mov	r1, r4
 80101b0:	4648      	mov	r0, r9
 80101b2:	f000 fc63 	bl	8010a7c <__mdiff>
 80101b6:	68c2      	ldr	r2, [r0, #12]
 80101b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ba:	4606      	mov	r6, r0
 80101bc:	bb02      	cbnz	r2, 8010200 <_dtoa_r+0xa40>
 80101be:	4601      	mov	r1, r0
 80101c0:	9802      	ldr	r0, [sp, #8]
 80101c2:	f000 fc3f 	bl	8010a44 <__mcmp>
 80101c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101c8:	4602      	mov	r2, r0
 80101ca:	4631      	mov	r1, r6
 80101cc:	4648      	mov	r0, r9
 80101ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80101d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80101d2:	f000 fa05 	bl	80105e0 <_Bfree>
 80101d6:	9b07      	ldr	r3, [sp, #28]
 80101d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80101da:	9e00      	ldr	r6, [sp, #0]
 80101dc:	ea42 0103 	orr.w	r1, r2, r3
 80101e0:	9b06      	ldr	r3, [sp, #24]
 80101e2:	4319      	orrs	r1, r3
 80101e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101e6:	d10d      	bne.n	8010204 <_dtoa_r+0xa44>
 80101e8:	2b39      	cmp	r3, #57	@ 0x39
 80101ea:	d027      	beq.n	801023c <_dtoa_r+0xa7c>
 80101ec:	9a04      	ldr	r2, [sp, #16]
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	dd01      	ble.n	80101f6 <_dtoa_r+0xa36>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	3331      	adds	r3, #49	@ 0x31
 80101f6:	f88b 3000 	strb.w	r3, [fp]
 80101fa:	e52e      	b.n	800fc5a <_dtoa_r+0x49a>
 80101fc:	4628      	mov	r0, r5
 80101fe:	e7b9      	b.n	8010174 <_dtoa_r+0x9b4>
 8010200:	2201      	movs	r2, #1
 8010202:	e7e2      	b.n	80101ca <_dtoa_r+0xa0a>
 8010204:	9904      	ldr	r1, [sp, #16]
 8010206:	2900      	cmp	r1, #0
 8010208:	db04      	blt.n	8010214 <_dtoa_r+0xa54>
 801020a:	9807      	ldr	r0, [sp, #28]
 801020c:	4301      	orrs	r1, r0
 801020e:	9806      	ldr	r0, [sp, #24]
 8010210:	4301      	orrs	r1, r0
 8010212:	d120      	bne.n	8010256 <_dtoa_r+0xa96>
 8010214:	2a00      	cmp	r2, #0
 8010216:	ddee      	ble.n	80101f6 <_dtoa_r+0xa36>
 8010218:	9902      	ldr	r1, [sp, #8]
 801021a:	9300      	str	r3, [sp, #0]
 801021c:	2201      	movs	r2, #1
 801021e:	4648      	mov	r0, r9
 8010220:	f000 fba4 	bl	801096c <__lshift>
 8010224:	4621      	mov	r1, r4
 8010226:	9002      	str	r0, [sp, #8]
 8010228:	f000 fc0c 	bl	8010a44 <__mcmp>
 801022c:	2800      	cmp	r0, #0
 801022e:	9b00      	ldr	r3, [sp, #0]
 8010230:	dc02      	bgt.n	8010238 <_dtoa_r+0xa78>
 8010232:	d1e0      	bne.n	80101f6 <_dtoa_r+0xa36>
 8010234:	07da      	lsls	r2, r3, #31
 8010236:	d5de      	bpl.n	80101f6 <_dtoa_r+0xa36>
 8010238:	2b39      	cmp	r3, #57	@ 0x39
 801023a:	d1da      	bne.n	80101f2 <_dtoa_r+0xa32>
 801023c:	2339      	movs	r3, #57	@ 0x39
 801023e:	f88b 3000 	strb.w	r3, [fp]
 8010242:	4633      	mov	r3, r6
 8010244:	461e      	mov	r6, r3
 8010246:	3b01      	subs	r3, #1
 8010248:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801024c:	2a39      	cmp	r2, #57	@ 0x39
 801024e:	d04e      	beq.n	80102ee <_dtoa_r+0xb2e>
 8010250:	3201      	adds	r2, #1
 8010252:	701a      	strb	r2, [r3, #0]
 8010254:	e501      	b.n	800fc5a <_dtoa_r+0x49a>
 8010256:	2a00      	cmp	r2, #0
 8010258:	dd03      	ble.n	8010262 <_dtoa_r+0xaa2>
 801025a:	2b39      	cmp	r3, #57	@ 0x39
 801025c:	d0ee      	beq.n	801023c <_dtoa_r+0xa7c>
 801025e:	3301      	adds	r3, #1
 8010260:	e7c9      	b.n	80101f6 <_dtoa_r+0xa36>
 8010262:	9a00      	ldr	r2, [sp, #0]
 8010264:	9908      	ldr	r1, [sp, #32]
 8010266:	f802 3c01 	strb.w	r3, [r2, #-1]
 801026a:	428a      	cmp	r2, r1
 801026c:	d028      	beq.n	80102c0 <_dtoa_r+0xb00>
 801026e:	9902      	ldr	r1, [sp, #8]
 8010270:	2300      	movs	r3, #0
 8010272:	220a      	movs	r2, #10
 8010274:	4648      	mov	r0, r9
 8010276:	f000 f9d5 	bl	8010624 <__multadd>
 801027a:	42af      	cmp	r7, r5
 801027c:	9002      	str	r0, [sp, #8]
 801027e:	f04f 0300 	mov.w	r3, #0
 8010282:	f04f 020a 	mov.w	r2, #10
 8010286:	4639      	mov	r1, r7
 8010288:	4648      	mov	r0, r9
 801028a:	d107      	bne.n	801029c <_dtoa_r+0xadc>
 801028c:	f000 f9ca 	bl	8010624 <__multadd>
 8010290:	4607      	mov	r7, r0
 8010292:	4605      	mov	r5, r0
 8010294:	9b00      	ldr	r3, [sp, #0]
 8010296:	3301      	adds	r3, #1
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	e777      	b.n	801018c <_dtoa_r+0x9cc>
 801029c:	f000 f9c2 	bl	8010624 <__multadd>
 80102a0:	4629      	mov	r1, r5
 80102a2:	4607      	mov	r7, r0
 80102a4:	2300      	movs	r3, #0
 80102a6:	220a      	movs	r2, #10
 80102a8:	4648      	mov	r0, r9
 80102aa:	f000 f9bb 	bl	8010624 <__multadd>
 80102ae:	4605      	mov	r5, r0
 80102b0:	e7f0      	b.n	8010294 <_dtoa_r+0xad4>
 80102b2:	f1bb 0f00 	cmp.w	fp, #0
 80102b6:	bfcc      	ite	gt
 80102b8:	465e      	movgt	r6, fp
 80102ba:	2601      	movle	r6, #1
 80102bc:	4456      	add	r6, sl
 80102be:	2700      	movs	r7, #0
 80102c0:	9902      	ldr	r1, [sp, #8]
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	2201      	movs	r2, #1
 80102c6:	4648      	mov	r0, r9
 80102c8:	f000 fb50 	bl	801096c <__lshift>
 80102cc:	4621      	mov	r1, r4
 80102ce:	9002      	str	r0, [sp, #8]
 80102d0:	f000 fbb8 	bl	8010a44 <__mcmp>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	dcb4      	bgt.n	8010242 <_dtoa_r+0xa82>
 80102d8:	d102      	bne.n	80102e0 <_dtoa_r+0xb20>
 80102da:	9b00      	ldr	r3, [sp, #0]
 80102dc:	07db      	lsls	r3, r3, #31
 80102de:	d4b0      	bmi.n	8010242 <_dtoa_r+0xa82>
 80102e0:	4633      	mov	r3, r6
 80102e2:	461e      	mov	r6, r3
 80102e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102e8:	2a30      	cmp	r2, #48	@ 0x30
 80102ea:	d0fa      	beq.n	80102e2 <_dtoa_r+0xb22>
 80102ec:	e4b5      	b.n	800fc5a <_dtoa_r+0x49a>
 80102ee:	459a      	cmp	sl, r3
 80102f0:	d1a8      	bne.n	8010244 <_dtoa_r+0xa84>
 80102f2:	2331      	movs	r3, #49	@ 0x31
 80102f4:	f108 0801 	add.w	r8, r8, #1
 80102f8:	f88a 3000 	strb.w	r3, [sl]
 80102fc:	e4ad      	b.n	800fc5a <_dtoa_r+0x49a>
 80102fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010300:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801035c <_dtoa_r+0xb9c>
 8010304:	b11b      	cbz	r3, 801030e <_dtoa_r+0xb4e>
 8010306:	f10a 0308 	add.w	r3, sl, #8
 801030a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801030c:	6013      	str	r3, [r2, #0]
 801030e:	4650      	mov	r0, sl
 8010310:	b017      	add	sp, #92	@ 0x5c
 8010312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010316:	9b07      	ldr	r3, [sp, #28]
 8010318:	2b01      	cmp	r3, #1
 801031a:	f77f ae2e 	ble.w	800ff7a <_dtoa_r+0x7ba>
 801031e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010320:	9308      	str	r3, [sp, #32]
 8010322:	2001      	movs	r0, #1
 8010324:	e64d      	b.n	800ffc2 <_dtoa_r+0x802>
 8010326:	f1bb 0f00 	cmp.w	fp, #0
 801032a:	f77f aed9 	ble.w	80100e0 <_dtoa_r+0x920>
 801032e:	4656      	mov	r6, sl
 8010330:	9802      	ldr	r0, [sp, #8]
 8010332:	4621      	mov	r1, r4
 8010334:	f7ff f9bb 	bl	800f6ae <quorem>
 8010338:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801033c:	f806 3b01 	strb.w	r3, [r6], #1
 8010340:	eba6 020a 	sub.w	r2, r6, sl
 8010344:	4593      	cmp	fp, r2
 8010346:	ddb4      	ble.n	80102b2 <_dtoa_r+0xaf2>
 8010348:	9902      	ldr	r1, [sp, #8]
 801034a:	2300      	movs	r3, #0
 801034c:	220a      	movs	r2, #10
 801034e:	4648      	mov	r0, r9
 8010350:	f000 f968 	bl	8010624 <__multadd>
 8010354:	9002      	str	r0, [sp, #8]
 8010356:	e7eb      	b.n	8010330 <_dtoa_r+0xb70>
 8010358:	08012d14 	.word	0x08012d14
 801035c:	08012c98 	.word	0x08012c98

08010360 <_free_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4605      	mov	r5, r0
 8010364:	2900      	cmp	r1, #0
 8010366:	d041      	beq.n	80103ec <_free_r+0x8c>
 8010368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801036c:	1f0c      	subs	r4, r1, #4
 801036e:	2b00      	cmp	r3, #0
 8010370:	bfb8      	it	lt
 8010372:	18e4      	addlt	r4, r4, r3
 8010374:	f000 f8e8 	bl	8010548 <__malloc_lock>
 8010378:	4a1d      	ldr	r2, [pc, #116]	@ (80103f0 <_free_r+0x90>)
 801037a:	6813      	ldr	r3, [r2, #0]
 801037c:	b933      	cbnz	r3, 801038c <_free_r+0x2c>
 801037e:	6063      	str	r3, [r4, #4]
 8010380:	6014      	str	r4, [r2, #0]
 8010382:	4628      	mov	r0, r5
 8010384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010388:	f000 b8e4 	b.w	8010554 <__malloc_unlock>
 801038c:	42a3      	cmp	r3, r4
 801038e:	d908      	bls.n	80103a2 <_free_r+0x42>
 8010390:	6820      	ldr	r0, [r4, #0]
 8010392:	1821      	adds	r1, r4, r0
 8010394:	428b      	cmp	r3, r1
 8010396:	bf01      	itttt	eq
 8010398:	6819      	ldreq	r1, [r3, #0]
 801039a:	685b      	ldreq	r3, [r3, #4]
 801039c:	1809      	addeq	r1, r1, r0
 801039e:	6021      	streq	r1, [r4, #0]
 80103a0:	e7ed      	b.n	801037e <_free_r+0x1e>
 80103a2:	461a      	mov	r2, r3
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	b10b      	cbz	r3, 80103ac <_free_r+0x4c>
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d9fa      	bls.n	80103a2 <_free_r+0x42>
 80103ac:	6811      	ldr	r1, [r2, #0]
 80103ae:	1850      	adds	r0, r2, r1
 80103b0:	42a0      	cmp	r0, r4
 80103b2:	d10b      	bne.n	80103cc <_free_r+0x6c>
 80103b4:	6820      	ldr	r0, [r4, #0]
 80103b6:	4401      	add	r1, r0
 80103b8:	1850      	adds	r0, r2, r1
 80103ba:	4283      	cmp	r3, r0
 80103bc:	6011      	str	r1, [r2, #0]
 80103be:	d1e0      	bne.n	8010382 <_free_r+0x22>
 80103c0:	6818      	ldr	r0, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	6053      	str	r3, [r2, #4]
 80103c6:	4408      	add	r0, r1
 80103c8:	6010      	str	r0, [r2, #0]
 80103ca:	e7da      	b.n	8010382 <_free_r+0x22>
 80103cc:	d902      	bls.n	80103d4 <_free_r+0x74>
 80103ce:	230c      	movs	r3, #12
 80103d0:	602b      	str	r3, [r5, #0]
 80103d2:	e7d6      	b.n	8010382 <_free_r+0x22>
 80103d4:	6820      	ldr	r0, [r4, #0]
 80103d6:	1821      	adds	r1, r4, r0
 80103d8:	428b      	cmp	r3, r1
 80103da:	bf04      	itt	eq
 80103dc:	6819      	ldreq	r1, [r3, #0]
 80103de:	685b      	ldreq	r3, [r3, #4]
 80103e0:	6063      	str	r3, [r4, #4]
 80103e2:	bf04      	itt	eq
 80103e4:	1809      	addeq	r1, r1, r0
 80103e6:	6021      	streq	r1, [r4, #0]
 80103e8:	6054      	str	r4, [r2, #4]
 80103ea:	e7ca      	b.n	8010382 <_free_r+0x22>
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	bf00      	nop
 80103f0:	2000d598 	.word	0x2000d598

080103f4 <malloc>:
 80103f4:	4b02      	ldr	r3, [pc, #8]	@ (8010400 <malloc+0xc>)
 80103f6:	4601      	mov	r1, r0
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	f000 b825 	b.w	8010448 <_malloc_r>
 80103fe:	bf00      	nop
 8010400:	20000144 	.word	0x20000144

08010404 <sbrk_aligned>:
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	4e0f      	ldr	r6, [pc, #60]	@ (8010444 <sbrk_aligned+0x40>)
 8010408:	460c      	mov	r4, r1
 801040a:	6831      	ldr	r1, [r6, #0]
 801040c:	4605      	mov	r5, r0
 801040e:	b911      	cbnz	r1, 8010416 <sbrk_aligned+0x12>
 8010410:	f001 f838 	bl	8011484 <_sbrk_r>
 8010414:	6030      	str	r0, [r6, #0]
 8010416:	4621      	mov	r1, r4
 8010418:	4628      	mov	r0, r5
 801041a:	f001 f833 	bl	8011484 <_sbrk_r>
 801041e:	1c43      	adds	r3, r0, #1
 8010420:	d103      	bne.n	801042a <sbrk_aligned+0x26>
 8010422:	f04f 34ff 	mov.w	r4, #4294967295
 8010426:	4620      	mov	r0, r4
 8010428:	bd70      	pop	{r4, r5, r6, pc}
 801042a:	1cc4      	adds	r4, r0, #3
 801042c:	f024 0403 	bic.w	r4, r4, #3
 8010430:	42a0      	cmp	r0, r4
 8010432:	d0f8      	beq.n	8010426 <sbrk_aligned+0x22>
 8010434:	1a21      	subs	r1, r4, r0
 8010436:	4628      	mov	r0, r5
 8010438:	f001 f824 	bl	8011484 <_sbrk_r>
 801043c:	3001      	adds	r0, #1
 801043e:	d1f2      	bne.n	8010426 <sbrk_aligned+0x22>
 8010440:	e7ef      	b.n	8010422 <sbrk_aligned+0x1e>
 8010442:	bf00      	nop
 8010444:	2000d594 	.word	0x2000d594

08010448 <_malloc_r>:
 8010448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801044c:	1ccd      	adds	r5, r1, #3
 801044e:	f025 0503 	bic.w	r5, r5, #3
 8010452:	3508      	adds	r5, #8
 8010454:	2d0c      	cmp	r5, #12
 8010456:	bf38      	it	cc
 8010458:	250c      	movcc	r5, #12
 801045a:	2d00      	cmp	r5, #0
 801045c:	4606      	mov	r6, r0
 801045e:	db01      	blt.n	8010464 <_malloc_r+0x1c>
 8010460:	42a9      	cmp	r1, r5
 8010462:	d904      	bls.n	801046e <_malloc_r+0x26>
 8010464:	230c      	movs	r3, #12
 8010466:	6033      	str	r3, [r6, #0]
 8010468:	2000      	movs	r0, #0
 801046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801046e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010544 <_malloc_r+0xfc>
 8010472:	f000 f869 	bl	8010548 <__malloc_lock>
 8010476:	f8d8 3000 	ldr.w	r3, [r8]
 801047a:	461c      	mov	r4, r3
 801047c:	bb44      	cbnz	r4, 80104d0 <_malloc_r+0x88>
 801047e:	4629      	mov	r1, r5
 8010480:	4630      	mov	r0, r6
 8010482:	f7ff ffbf 	bl	8010404 <sbrk_aligned>
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	4604      	mov	r4, r0
 801048a:	d158      	bne.n	801053e <_malloc_r+0xf6>
 801048c:	f8d8 4000 	ldr.w	r4, [r8]
 8010490:	4627      	mov	r7, r4
 8010492:	2f00      	cmp	r7, #0
 8010494:	d143      	bne.n	801051e <_malloc_r+0xd6>
 8010496:	2c00      	cmp	r4, #0
 8010498:	d04b      	beq.n	8010532 <_malloc_r+0xea>
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	4639      	mov	r1, r7
 801049e:	4630      	mov	r0, r6
 80104a0:	eb04 0903 	add.w	r9, r4, r3
 80104a4:	f000 ffee 	bl	8011484 <_sbrk_r>
 80104a8:	4581      	cmp	r9, r0
 80104aa:	d142      	bne.n	8010532 <_malloc_r+0xea>
 80104ac:	6821      	ldr	r1, [r4, #0]
 80104ae:	1a6d      	subs	r5, r5, r1
 80104b0:	4629      	mov	r1, r5
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7ff ffa6 	bl	8010404 <sbrk_aligned>
 80104b8:	3001      	adds	r0, #1
 80104ba:	d03a      	beq.n	8010532 <_malloc_r+0xea>
 80104bc:	6823      	ldr	r3, [r4, #0]
 80104be:	442b      	add	r3, r5
 80104c0:	6023      	str	r3, [r4, #0]
 80104c2:	f8d8 3000 	ldr.w	r3, [r8]
 80104c6:	685a      	ldr	r2, [r3, #4]
 80104c8:	bb62      	cbnz	r2, 8010524 <_malloc_r+0xdc>
 80104ca:	f8c8 7000 	str.w	r7, [r8]
 80104ce:	e00f      	b.n	80104f0 <_malloc_r+0xa8>
 80104d0:	6822      	ldr	r2, [r4, #0]
 80104d2:	1b52      	subs	r2, r2, r5
 80104d4:	d420      	bmi.n	8010518 <_malloc_r+0xd0>
 80104d6:	2a0b      	cmp	r2, #11
 80104d8:	d917      	bls.n	801050a <_malloc_r+0xc2>
 80104da:	1961      	adds	r1, r4, r5
 80104dc:	42a3      	cmp	r3, r4
 80104de:	6025      	str	r5, [r4, #0]
 80104e0:	bf18      	it	ne
 80104e2:	6059      	strne	r1, [r3, #4]
 80104e4:	6863      	ldr	r3, [r4, #4]
 80104e6:	bf08      	it	eq
 80104e8:	f8c8 1000 	streq.w	r1, [r8]
 80104ec:	5162      	str	r2, [r4, r5]
 80104ee:	604b      	str	r3, [r1, #4]
 80104f0:	4630      	mov	r0, r6
 80104f2:	f000 f82f 	bl	8010554 <__malloc_unlock>
 80104f6:	f104 000b 	add.w	r0, r4, #11
 80104fa:	1d23      	adds	r3, r4, #4
 80104fc:	f020 0007 	bic.w	r0, r0, #7
 8010500:	1ac2      	subs	r2, r0, r3
 8010502:	bf1c      	itt	ne
 8010504:	1a1b      	subne	r3, r3, r0
 8010506:	50a3      	strne	r3, [r4, r2]
 8010508:	e7af      	b.n	801046a <_malloc_r+0x22>
 801050a:	6862      	ldr	r2, [r4, #4]
 801050c:	42a3      	cmp	r3, r4
 801050e:	bf0c      	ite	eq
 8010510:	f8c8 2000 	streq.w	r2, [r8]
 8010514:	605a      	strne	r2, [r3, #4]
 8010516:	e7eb      	b.n	80104f0 <_malloc_r+0xa8>
 8010518:	4623      	mov	r3, r4
 801051a:	6864      	ldr	r4, [r4, #4]
 801051c:	e7ae      	b.n	801047c <_malloc_r+0x34>
 801051e:	463c      	mov	r4, r7
 8010520:	687f      	ldr	r7, [r7, #4]
 8010522:	e7b6      	b.n	8010492 <_malloc_r+0x4a>
 8010524:	461a      	mov	r2, r3
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	42a3      	cmp	r3, r4
 801052a:	d1fb      	bne.n	8010524 <_malloc_r+0xdc>
 801052c:	2300      	movs	r3, #0
 801052e:	6053      	str	r3, [r2, #4]
 8010530:	e7de      	b.n	80104f0 <_malloc_r+0xa8>
 8010532:	230c      	movs	r3, #12
 8010534:	6033      	str	r3, [r6, #0]
 8010536:	4630      	mov	r0, r6
 8010538:	f000 f80c 	bl	8010554 <__malloc_unlock>
 801053c:	e794      	b.n	8010468 <_malloc_r+0x20>
 801053e:	6005      	str	r5, [r0, #0]
 8010540:	e7d6      	b.n	80104f0 <_malloc_r+0xa8>
 8010542:	bf00      	nop
 8010544:	2000d598 	.word	0x2000d598

08010548 <__malloc_lock>:
 8010548:	4801      	ldr	r0, [pc, #4]	@ (8010550 <__malloc_lock+0x8>)
 801054a:	f7ff b8a0 	b.w	800f68e <__retarget_lock_acquire_recursive>
 801054e:	bf00      	nop
 8010550:	2000d590 	.word	0x2000d590

08010554 <__malloc_unlock>:
 8010554:	4801      	ldr	r0, [pc, #4]	@ (801055c <__malloc_unlock+0x8>)
 8010556:	f7ff b89b 	b.w	800f690 <__retarget_lock_release_recursive>
 801055a:	bf00      	nop
 801055c:	2000d590 	.word	0x2000d590

08010560 <_Balloc>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	69c6      	ldr	r6, [r0, #28]
 8010564:	4604      	mov	r4, r0
 8010566:	460d      	mov	r5, r1
 8010568:	b976      	cbnz	r6, 8010588 <_Balloc+0x28>
 801056a:	2010      	movs	r0, #16
 801056c:	f7ff ff42 	bl	80103f4 <malloc>
 8010570:	4602      	mov	r2, r0
 8010572:	61e0      	str	r0, [r4, #28]
 8010574:	b920      	cbnz	r0, 8010580 <_Balloc+0x20>
 8010576:	4b18      	ldr	r3, [pc, #96]	@ (80105d8 <_Balloc+0x78>)
 8010578:	4818      	ldr	r0, [pc, #96]	@ (80105dc <_Balloc+0x7c>)
 801057a:	216b      	movs	r1, #107	@ 0x6b
 801057c:	f000 ff92 	bl	80114a4 <__assert_func>
 8010580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010584:	6006      	str	r6, [r0, #0]
 8010586:	60c6      	str	r6, [r0, #12]
 8010588:	69e6      	ldr	r6, [r4, #28]
 801058a:	68f3      	ldr	r3, [r6, #12]
 801058c:	b183      	cbz	r3, 80105b0 <_Balloc+0x50>
 801058e:	69e3      	ldr	r3, [r4, #28]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010596:	b9b8      	cbnz	r0, 80105c8 <_Balloc+0x68>
 8010598:	2101      	movs	r1, #1
 801059a:	fa01 f605 	lsl.w	r6, r1, r5
 801059e:	1d72      	adds	r2, r6, #5
 80105a0:	0092      	lsls	r2, r2, #2
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 ff9c 	bl	80114e0 <_calloc_r>
 80105a8:	b160      	cbz	r0, 80105c4 <_Balloc+0x64>
 80105aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80105ae:	e00e      	b.n	80105ce <_Balloc+0x6e>
 80105b0:	2221      	movs	r2, #33	@ 0x21
 80105b2:	2104      	movs	r1, #4
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 ff93 	bl	80114e0 <_calloc_r>
 80105ba:	69e3      	ldr	r3, [r4, #28]
 80105bc:	60f0      	str	r0, [r6, #12]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1e4      	bne.n	801058e <_Balloc+0x2e>
 80105c4:	2000      	movs	r0, #0
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	6802      	ldr	r2, [r0, #0]
 80105ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105ce:	2300      	movs	r3, #0
 80105d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105d4:	e7f7      	b.n	80105c6 <_Balloc+0x66>
 80105d6:	bf00      	nop
 80105d8:	08012ca5 	.word	0x08012ca5
 80105dc:	08012d25 	.word	0x08012d25

080105e0 <_Bfree>:
 80105e0:	b570      	push	{r4, r5, r6, lr}
 80105e2:	69c6      	ldr	r6, [r0, #28]
 80105e4:	4605      	mov	r5, r0
 80105e6:	460c      	mov	r4, r1
 80105e8:	b976      	cbnz	r6, 8010608 <_Bfree+0x28>
 80105ea:	2010      	movs	r0, #16
 80105ec:	f7ff ff02 	bl	80103f4 <malloc>
 80105f0:	4602      	mov	r2, r0
 80105f2:	61e8      	str	r0, [r5, #28]
 80105f4:	b920      	cbnz	r0, 8010600 <_Bfree+0x20>
 80105f6:	4b09      	ldr	r3, [pc, #36]	@ (801061c <_Bfree+0x3c>)
 80105f8:	4809      	ldr	r0, [pc, #36]	@ (8010620 <_Bfree+0x40>)
 80105fa:	218f      	movs	r1, #143	@ 0x8f
 80105fc:	f000 ff52 	bl	80114a4 <__assert_func>
 8010600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010604:	6006      	str	r6, [r0, #0]
 8010606:	60c6      	str	r6, [r0, #12]
 8010608:	b13c      	cbz	r4, 801061a <_Bfree+0x3a>
 801060a:	69eb      	ldr	r3, [r5, #28]
 801060c:	6862      	ldr	r2, [r4, #4]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010614:	6021      	str	r1, [r4, #0]
 8010616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801061a:	bd70      	pop	{r4, r5, r6, pc}
 801061c:	08012ca5 	.word	0x08012ca5
 8010620:	08012d25 	.word	0x08012d25

08010624 <__multadd>:
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	690d      	ldr	r5, [r1, #16]
 801062a:	4607      	mov	r7, r0
 801062c:	460c      	mov	r4, r1
 801062e:	461e      	mov	r6, r3
 8010630:	f101 0c14 	add.w	ip, r1, #20
 8010634:	2000      	movs	r0, #0
 8010636:	f8dc 3000 	ldr.w	r3, [ip]
 801063a:	b299      	uxth	r1, r3
 801063c:	fb02 6101 	mla	r1, r2, r1, r6
 8010640:	0c1e      	lsrs	r6, r3, #16
 8010642:	0c0b      	lsrs	r3, r1, #16
 8010644:	fb02 3306 	mla	r3, r2, r6, r3
 8010648:	b289      	uxth	r1, r1
 801064a:	3001      	adds	r0, #1
 801064c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010650:	4285      	cmp	r5, r0
 8010652:	f84c 1b04 	str.w	r1, [ip], #4
 8010656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801065a:	dcec      	bgt.n	8010636 <__multadd+0x12>
 801065c:	b30e      	cbz	r6, 80106a2 <__multadd+0x7e>
 801065e:	68a3      	ldr	r3, [r4, #8]
 8010660:	42ab      	cmp	r3, r5
 8010662:	dc19      	bgt.n	8010698 <__multadd+0x74>
 8010664:	6861      	ldr	r1, [r4, #4]
 8010666:	4638      	mov	r0, r7
 8010668:	3101      	adds	r1, #1
 801066a:	f7ff ff79 	bl	8010560 <_Balloc>
 801066e:	4680      	mov	r8, r0
 8010670:	b928      	cbnz	r0, 801067e <__multadd+0x5a>
 8010672:	4602      	mov	r2, r0
 8010674:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <__multadd+0x84>)
 8010676:	480d      	ldr	r0, [pc, #52]	@ (80106ac <__multadd+0x88>)
 8010678:	21ba      	movs	r1, #186	@ 0xba
 801067a:	f000 ff13 	bl	80114a4 <__assert_func>
 801067e:	6922      	ldr	r2, [r4, #16]
 8010680:	3202      	adds	r2, #2
 8010682:	f104 010c 	add.w	r1, r4, #12
 8010686:	0092      	lsls	r2, r2, #2
 8010688:	300c      	adds	r0, #12
 801068a:	f7ff f802 	bl	800f692 <memcpy>
 801068e:	4621      	mov	r1, r4
 8010690:	4638      	mov	r0, r7
 8010692:	f7ff ffa5 	bl	80105e0 <_Bfree>
 8010696:	4644      	mov	r4, r8
 8010698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801069c:	3501      	adds	r5, #1
 801069e:	615e      	str	r6, [r3, #20]
 80106a0:	6125      	str	r5, [r4, #16]
 80106a2:	4620      	mov	r0, r4
 80106a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a8:	08012d14 	.word	0x08012d14
 80106ac:	08012d25 	.word	0x08012d25

080106b0 <__hi0bits>:
 80106b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80106b4:	4603      	mov	r3, r0
 80106b6:	bf36      	itet	cc
 80106b8:	0403      	lslcc	r3, r0, #16
 80106ba:	2000      	movcs	r0, #0
 80106bc:	2010      	movcc	r0, #16
 80106be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80106c2:	bf3c      	itt	cc
 80106c4:	021b      	lslcc	r3, r3, #8
 80106c6:	3008      	addcc	r0, #8
 80106c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106cc:	bf3c      	itt	cc
 80106ce:	011b      	lslcc	r3, r3, #4
 80106d0:	3004      	addcc	r0, #4
 80106d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106d6:	bf3c      	itt	cc
 80106d8:	009b      	lslcc	r3, r3, #2
 80106da:	3002      	addcc	r0, #2
 80106dc:	2b00      	cmp	r3, #0
 80106de:	db05      	blt.n	80106ec <__hi0bits+0x3c>
 80106e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80106e4:	f100 0001 	add.w	r0, r0, #1
 80106e8:	bf08      	it	eq
 80106ea:	2020      	moveq	r0, #32
 80106ec:	4770      	bx	lr

080106ee <__lo0bits>:
 80106ee:	6803      	ldr	r3, [r0, #0]
 80106f0:	4602      	mov	r2, r0
 80106f2:	f013 0007 	ands.w	r0, r3, #7
 80106f6:	d00b      	beq.n	8010710 <__lo0bits+0x22>
 80106f8:	07d9      	lsls	r1, r3, #31
 80106fa:	d421      	bmi.n	8010740 <__lo0bits+0x52>
 80106fc:	0798      	lsls	r0, r3, #30
 80106fe:	bf49      	itett	mi
 8010700:	085b      	lsrmi	r3, r3, #1
 8010702:	089b      	lsrpl	r3, r3, #2
 8010704:	2001      	movmi	r0, #1
 8010706:	6013      	strmi	r3, [r2, #0]
 8010708:	bf5c      	itt	pl
 801070a:	6013      	strpl	r3, [r2, #0]
 801070c:	2002      	movpl	r0, #2
 801070e:	4770      	bx	lr
 8010710:	b299      	uxth	r1, r3
 8010712:	b909      	cbnz	r1, 8010718 <__lo0bits+0x2a>
 8010714:	0c1b      	lsrs	r3, r3, #16
 8010716:	2010      	movs	r0, #16
 8010718:	b2d9      	uxtb	r1, r3
 801071a:	b909      	cbnz	r1, 8010720 <__lo0bits+0x32>
 801071c:	3008      	adds	r0, #8
 801071e:	0a1b      	lsrs	r3, r3, #8
 8010720:	0719      	lsls	r1, r3, #28
 8010722:	bf04      	itt	eq
 8010724:	091b      	lsreq	r3, r3, #4
 8010726:	3004      	addeq	r0, #4
 8010728:	0799      	lsls	r1, r3, #30
 801072a:	bf04      	itt	eq
 801072c:	089b      	lsreq	r3, r3, #2
 801072e:	3002      	addeq	r0, #2
 8010730:	07d9      	lsls	r1, r3, #31
 8010732:	d403      	bmi.n	801073c <__lo0bits+0x4e>
 8010734:	085b      	lsrs	r3, r3, #1
 8010736:	f100 0001 	add.w	r0, r0, #1
 801073a:	d003      	beq.n	8010744 <__lo0bits+0x56>
 801073c:	6013      	str	r3, [r2, #0]
 801073e:	4770      	bx	lr
 8010740:	2000      	movs	r0, #0
 8010742:	4770      	bx	lr
 8010744:	2020      	movs	r0, #32
 8010746:	4770      	bx	lr

08010748 <__i2b>:
 8010748:	b510      	push	{r4, lr}
 801074a:	460c      	mov	r4, r1
 801074c:	2101      	movs	r1, #1
 801074e:	f7ff ff07 	bl	8010560 <_Balloc>
 8010752:	4602      	mov	r2, r0
 8010754:	b928      	cbnz	r0, 8010762 <__i2b+0x1a>
 8010756:	4b05      	ldr	r3, [pc, #20]	@ (801076c <__i2b+0x24>)
 8010758:	4805      	ldr	r0, [pc, #20]	@ (8010770 <__i2b+0x28>)
 801075a:	f240 1145 	movw	r1, #325	@ 0x145
 801075e:	f000 fea1 	bl	80114a4 <__assert_func>
 8010762:	2301      	movs	r3, #1
 8010764:	6144      	str	r4, [r0, #20]
 8010766:	6103      	str	r3, [r0, #16]
 8010768:	bd10      	pop	{r4, pc}
 801076a:	bf00      	nop
 801076c:	08012d14 	.word	0x08012d14
 8010770:	08012d25 	.word	0x08012d25

08010774 <__multiply>:
 8010774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010778:	4617      	mov	r7, r2
 801077a:	690a      	ldr	r2, [r1, #16]
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	429a      	cmp	r2, r3
 8010780:	bfa8      	it	ge
 8010782:	463b      	movge	r3, r7
 8010784:	4689      	mov	r9, r1
 8010786:	bfa4      	itt	ge
 8010788:	460f      	movge	r7, r1
 801078a:	4699      	movge	r9, r3
 801078c:	693d      	ldr	r5, [r7, #16]
 801078e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	6879      	ldr	r1, [r7, #4]
 8010796:	eb05 060a 	add.w	r6, r5, sl
 801079a:	42b3      	cmp	r3, r6
 801079c:	b085      	sub	sp, #20
 801079e:	bfb8      	it	lt
 80107a0:	3101      	addlt	r1, #1
 80107a2:	f7ff fedd 	bl	8010560 <_Balloc>
 80107a6:	b930      	cbnz	r0, 80107b6 <__multiply+0x42>
 80107a8:	4602      	mov	r2, r0
 80107aa:	4b41      	ldr	r3, [pc, #260]	@ (80108b0 <__multiply+0x13c>)
 80107ac:	4841      	ldr	r0, [pc, #260]	@ (80108b4 <__multiply+0x140>)
 80107ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80107b2:	f000 fe77 	bl	80114a4 <__assert_func>
 80107b6:	f100 0414 	add.w	r4, r0, #20
 80107ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80107be:	4623      	mov	r3, r4
 80107c0:	2200      	movs	r2, #0
 80107c2:	4573      	cmp	r3, lr
 80107c4:	d320      	bcc.n	8010808 <__multiply+0x94>
 80107c6:	f107 0814 	add.w	r8, r7, #20
 80107ca:	f109 0114 	add.w	r1, r9, #20
 80107ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80107d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80107d6:	9302      	str	r3, [sp, #8]
 80107d8:	1beb      	subs	r3, r5, r7
 80107da:	3b15      	subs	r3, #21
 80107dc:	f023 0303 	bic.w	r3, r3, #3
 80107e0:	3304      	adds	r3, #4
 80107e2:	3715      	adds	r7, #21
 80107e4:	42bd      	cmp	r5, r7
 80107e6:	bf38      	it	cc
 80107e8:	2304      	movcc	r3, #4
 80107ea:	9301      	str	r3, [sp, #4]
 80107ec:	9b02      	ldr	r3, [sp, #8]
 80107ee:	9103      	str	r1, [sp, #12]
 80107f0:	428b      	cmp	r3, r1
 80107f2:	d80c      	bhi.n	801080e <__multiply+0x9a>
 80107f4:	2e00      	cmp	r6, #0
 80107f6:	dd03      	ble.n	8010800 <__multiply+0x8c>
 80107f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d055      	beq.n	80108ac <__multiply+0x138>
 8010800:	6106      	str	r6, [r0, #16]
 8010802:	b005      	add	sp, #20
 8010804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010808:	f843 2b04 	str.w	r2, [r3], #4
 801080c:	e7d9      	b.n	80107c2 <__multiply+0x4e>
 801080e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010812:	f1ba 0f00 	cmp.w	sl, #0
 8010816:	d01f      	beq.n	8010858 <__multiply+0xe4>
 8010818:	46c4      	mov	ip, r8
 801081a:	46a1      	mov	r9, r4
 801081c:	2700      	movs	r7, #0
 801081e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010822:	f8d9 3000 	ldr.w	r3, [r9]
 8010826:	fa1f fb82 	uxth.w	fp, r2
 801082a:	b29b      	uxth	r3, r3
 801082c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010830:	443b      	add	r3, r7
 8010832:	f8d9 7000 	ldr.w	r7, [r9]
 8010836:	0c12      	lsrs	r2, r2, #16
 8010838:	0c3f      	lsrs	r7, r7, #16
 801083a:	fb0a 7202 	mla	r2, sl, r2, r7
 801083e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010842:	b29b      	uxth	r3, r3
 8010844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010848:	4565      	cmp	r5, ip
 801084a:	f849 3b04 	str.w	r3, [r9], #4
 801084e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010852:	d8e4      	bhi.n	801081e <__multiply+0xaa>
 8010854:	9b01      	ldr	r3, [sp, #4]
 8010856:	50e7      	str	r7, [r4, r3]
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801085e:	3104      	adds	r1, #4
 8010860:	f1b9 0f00 	cmp.w	r9, #0
 8010864:	d020      	beq.n	80108a8 <__multiply+0x134>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	4647      	mov	r7, r8
 801086a:	46a4      	mov	ip, r4
 801086c:	f04f 0a00 	mov.w	sl, #0
 8010870:	f8b7 b000 	ldrh.w	fp, [r7]
 8010874:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010878:	fb09 220b 	mla	r2, r9, fp, r2
 801087c:	4452      	add	r2, sl
 801087e:	b29b      	uxth	r3, r3
 8010880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010884:	f84c 3b04 	str.w	r3, [ip], #4
 8010888:	f857 3b04 	ldr.w	r3, [r7], #4
 801088c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010890:	f8bc 3000 	ldrh.w	r3, [ip]
 8010894:	fb09 330a 	mla	r3, r9, sl, r3
 8010898:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801089c:	42bd      	cmp	r5, r7
 801089e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80108a2:	d8e5      	bhi.n	8010870 <__multiply+0xfc>
 80108a4:	9a01      	ldr	r2, [sp, #4]
 80108a6:	50a3      	str	r3, [r4, r2]
 80108a8:	3404      	adds	r4, #4
 80108aa:	e79f      	b.n	80107ec <__multiply+0x78>
 80108ac:	3e01      	subs	r6, #1
 80108ae:	e7a1      	b.n	80107f4 <__multiply+0x80>
 80108b0:	08012d14 	.word	0x08012d14
 80108b4:	08012d25 	.word	0x08012d25

080108b8 <__pow5mult>:
 80108b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108bc:	4615      	mov	r5, r2
 80108be:	f012 0203 	ands.w	r2, r2, #3
 80108c2:	4607      	mov	r7, r0
 80108c4:	460e      	mov	r6, r1
 80108c6:	d007      	beq.n	80108d8 <__pow5mult+0x20>
 80108c8:	4c25      	ldr	r4, [pc, #148]	@ (8010960 <__pow5mult+0xa8>)
 80108ca:	3a01      	subs	r2, #1
 80108cc:	2300      	movs	r3, #0
 80108ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108d2:	f7ff fea7 	bl	8010624 <__multadd>
 80108d6:	4606      	mov	r6, r0
 80108d8:	10ad      	asrs	r5, r5, #2
 80108da:	d03d      	beq.n	8010958 <__pow5mult+0xa0>
 80108dc:	69fc      	ldr	r4, [r7, #28]
 80108de:	b97c      	cbnz	r4, 8010900 <__pow5mult+0x48>
 80108e0:	2010      	movs	r0, #16
 80108e2:	f7ff fd87 	bl	80103f4 <malloc>
 80108e6:	4602      	mov	r2, r0
 80108e8:	61f8      	str	r0, [r7, #28]
 80108ea:	b928      	cbnz	r0, 80108f8 <__pow5mult+0x40>
 80108ec:	4b1d      	ldr	r3, [pc, #116]	@ (8010964 <__pow5mult+0xac>)
 80108ee:	481e      	ldr	r0, [pc, #120]	@ (8010968 <__pow5mult+0xb0>)
 80108f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80108f4:	f000 fdd6 	bl	80114a4 <__assert_func>
 80108f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108fc:	6004      	str	r4, [r0, #0]
 80108fe:	60c4      	str	r4, [r0, #12]
 8010900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010908:	b94c      	cbnz	r4, 801091e <__pow5mult+0x66>
 801090a:	f240 2171 	movw	r1, #625	@ 0x271
 801090e:	4638      	mov	r0, r7
 8010910:	f7ff ff1a 	bl	8010748 <__i2b>
 8010914:	2300      	movs	r3, #0
 8010916:	f8c8 0008 	str.w	r0, [r8, #8]
 801091a:	4604      	mov	r4, r0
 801091c:	6003      	str	r3, [r0, #0]
 801091e:	f04f 0900 	mov.w	r9, #0
 8010922:	07eb      	lsls	r3, r5, #31
 8010924:	d50a      	bpl.n	801093c <__pow5mult+0x84>
 8010926:	4631      	mov	r1, r6
 8010928:	4622      	mov	r2, r4
 801092a:	4638      	mov	r0, r7
 801092c:	f7ff ff22 	bl	8010774 <__multiply>
 8010930:	4631      	mov	r1, r6
 8010932:	4680      	mov	r8, r0
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff fe53 	bl	80105e0 <_Bfree>
 801093a:	4646      	mov	r6, r8
 801093c:	106d      	asrs	r5, r5, #1
 801093e:	d00b      	beq.n	8010958 <__pow5mult+0xa0>
 8010940:	6820      	ldr	r0, [r4, #0]
 8010942:	b938      	cbnz	r0, 8010954 <__pow5mult+0x9c>
 8010944:	4622      	mov	r2, r4
 8010946:	4621      	mov	r1, r4
 8010948:	4638      	mov	r0, r7
 801094a:	f7ff ff13 	bl	8010774 <__multiply>
 801094e:	6020      	str	r0, [r4, #0]
 8010950:	f8c0 9000 	str.w	r9, [r0]
 8010954:	4604      	mov	r4, r0
 8010956:	e7e4      	b.n	8010922 <__pow5mult+0x6a>
 8010958:	4630      	mov	r0, r6
 801095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801095e:	bf00      	nop
 8010960:	08012dd8 	.word	0x08012dd8
 8010964:	08012ca5 	.word	0x08012ca5
 8010968:	08012d25 	.word	0x08012d25

0801096c <__lshift>:
 801096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010970:	460c      	mov	r4, r1
 8010972:	6849      	ldr	r1, [r1, #4]
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	4607      	mov	r7, r0
 801097e:	4691      	mov	r9, r2
 8010980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010984:	f108 0601 	add.w	r6, r8, #1
 8010988:	42b3      	cmp	r3, r6
 801098a:	db0b      	blt.n	80109a4 <__lshift+0x38>
 801098c:	4638      	mov	r0, r7
 801098e:	f7ff fde7 	bl	8010560 <_Balloc>
 8010992:	4605      	mov	r5, r0
 8010994:	b948      	cbnz	r0, 80109aa <__lshift+0x3e>
 8010996:	4602      	mov	r2, r0
 8010998:	4b28      	ldr	r3, [pc, #160]	@ (8010a3c <__lshift+0xd0>)
 801099a:	4829      	ldr	r0, [pc, #164]	@ (8010a40 <__lshift+0xd4>)
 801099c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80109a0:	f000 fd80 	bl	80114a4 <__assert_func>
 80109a4:	3101      	adds	r1, #1
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	e7ee      	b.n	8010988 <__lshift+0x1c>
 80109aa:	2300      	movs	r3, #0
 80109ac:	f100 0114 	add.w	r1, r0, #20
 80109b0:	f100 0210 	add.w	r2, r0, #16
 80109b4:	4618      	mov	r0, r3
 80109b6:	4553      	cmp	r3, sl
 80109b8:	db33      	blt.n	8010a22 <__lshift+0xb6>
 80109ba:	6920      	ldr	r0, [r4, #16]
 80109bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109c0:	f104 0314 	add.w	r3, r4, #20
 80109c4:	f019 091f 	ands.w	r9, r9, #31
 80109c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109d0:	d02b      	beq.n	8010a2a <__lshift+0xbe>
 80109d2:	f1c9 0e20 	rsb	lr, r9, #32
 80109d6:	468a      	mov	sl, r1
 80109d8:	2200      	movs	r2, #0
 80109da:	6818      	ldr	r0, [r3, #0]
 80109dc:	fa00 f009 	lsl.w	r0, r0, r9
 80109e0:	4310      	orrs	r0, r2
 80109e2:	f84a 0b04 	str.w	r0, [sl], #4
 80109e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ea:	459c      	cmp	ip, r3
 80109ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80109f0:	d8f3      	bhi.n	80109da <__lshift+0x6e>
 80109f2:	ebac 0304 	sub.w	r3, ip, r4
 80109f6:	3b15      	subs	r3, #21
 80109f8:	f023 0303 	bic.w	r3, r3, #3
 80109fc:	3304      	adds	r3, #4
 80109fe:	f104 0015 	add.w	r0, r4, #21
 8010a02:	4560      	cmp	r0, ip
 8010a04:	bf88      	it	hi
 8010a06:	2304      	movhi	r3, #4
 8010a08:	50ca      	str	r2, [r1, r3]
 8010a0a:	b10a      	cbz	r2, 8010a10 <__lshift+0xa4>
 8010a0c:	f108 0602 	add.w	r6, r8, #2
 8010a10:	3e01      	subs	r6, #1
 8010a12:	4638      	mov	r0, r7
 8010a14:	612e      	str	r6, [r5, #16]
 8010a16:	4621      	mov	r1, r4
 8010a18:	f7ff fde2 	bl	80105e0 <_Bfree>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a26:	3301      	adds	r3, #1
 8010a28:	e7c5      	b.n	80109b6 <__lshift+0x4a>
 8010a2a:	3904      	subs	r1, #4
 8010a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a34:	459c      	cmp	ip, r3
 8010a36:	d8f9      	bhi.n	8010a2c <__lshift+0xc0>
 8010a38:	e7ea      	b.n	8010a10 <__lshift+0xa4>
 8010a3a:	bf00      	nop
 8010a3c:	08012d14 	.word	0x08012d14
 8010a40:	08012d25 	.word	0x08012d25

08010a44 <__mcmp>:
 8010a44:	690a      	ldr	r2, [r1, #16]
 8010a46:	4603      	mov	r3, r0
 8010a48:	6900      	ldr	r0, [r0, #16]
 8010a4a:	1a80      	subs	r0, r0, r2
 8010a4c:	b530      	push	{r4, r5, lr}
 8010a4e:	d10e      	bne.n	8010a6e <__mcmp+0x2a>
 8010a50:	3314      	adds	r3, #20
 8010a52:	3114      	adds	r1, #20
 8010a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a64:	4295      	cmp	r5, r2
 8010a66:	d003      	beq.n	8010a70 <__mcmp+0x2c>
 8010a68:	d205      	bcs.n	8010a76 <__mcmp+0x32>
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6e:	bd30      	pop	{r4, r5, pc}
 8010a70:	42a3      	cmp	r3, r4
 8010a72:	d3f3      	bcc.n	8010a5c <__mcmp+0x18>
 8010a74:	e7fb      	b.n	8010a6e <__mcmp+0x2a>
 8010a76:	2001      	movs	r0, #1
 8010a78:	e7f9      	b.n	8010a6e <__mcmp+0x2a>
	...

08010a7c <__mdiff>:
 8010a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	4689      	mov	r9, r1
 8010a82:	4606      	mov	r6, r0
 8010a84:	4611      	mov	r1, r2
 8010a86:	4648      	mov	r0, r9
 8010a88:	4614      	mov	r4, r2
 8010a8a:	f7ff ffdb 	bl	8010a44 <__mcmp>
 8010a8e:	1e05      	subs	r5, r0, #0
 8010a90:	d112      	bne.n	8010ab8 <__mdiff+0x3c>
 8010a92:	4629      	mov	r1, r5
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7ff fd63 	bl	8010560 <_Balloc>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	b928      	cbnz	r0, 8010aaa <__mdiff+0x2e>
 8010a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8010b9c <__mdiff+0x120>)
 8010aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8010aa4:	483e      	ldr	r0, [pc, #248]	@ (8010ba0 <__mdiff+0x124>)
 8010aa6:	f000 fcfd 	bl	80114a4 <__assert_func>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	b003      	add	sp, #12
 8010ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab8:	bfbc      	itt	lt
 8010aba:	464b      	movlt	r3, r9
 8010abc:	46a1      	movlt	r9, r4
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010ac4:	bfba      	itte	lt
 8010ac6:	461c      	movlt	r4, r3
 8010ac8:	2501      	movlt	r5, #1
 8010aca:	2500      	movge	r5, #0
 8010acc:	f7ff fd48 	bl	8010560 <_Balloc>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	b918      	cbnz	r0, 8010adc <__mdiff+0x60>
 8010ad4:	4b31      	ldr	r3, [pc, #196]	@ (8010b9c <__mdiff+0x120>)
 8010ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8010ada:	e7e3      	b.n	8010aa4 <__mdiff+0x28>
 8010adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010ae0:	6926      	ldr	r6, [r4, #16]
 8010ae2:	60c5      	str	r5, [r0, #12]
 8010ae4:	f109 0310 	add.w	r3, r9, #16
 8010ae8:	f109 0514 	add.w	r5, r9, #20
 8010aec:	f104 0e14 	add.w	lr, r4, #20
 8010af0:	f100 0b14 	add.w	fp, r0, #20
 8010af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	46d9      	mov	r9, fp
 8010b00:	f04f 0c00 	mov.w	ip, #0
 8010b04:	9b01      	ldr	r3, [sp, #4]
 8010b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	fa1f f38a 	uxth.w	r3, sl
 8010b14:	4619      	mov	r1, r3
 8010b16:	b283      	uxth	r3, r0
 8010b18:	1acb      	subs	r3, r1, r3
 8010b1a:	0c00      	lsrs	r0, r0, #16
 8010b1c:	4463      	add	r3, ip
 8010b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010b2c:	4576      	cmp	r6, lr
 8010b2e:	f849 3b04 	str.w	r3, [r9], #4
 8010b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010b36:	d8e5      	bhi.n	8010b04 <__mdiff+0x88>
 8010b38:	1b33      	subs	r3, r6, r4
 8010b3a:	3b15      	subs	r3, #21
 8010b3c:	f023 0303 	bic.w	r3, r3, #3
 8010b40:	3415      	adds	r4, #21
 8010b42:	3304      	adds	r3, #4
 8010b44:	42a6      	cmp	r6, r4
 8010b46:	bf38      	it	cc
 8010b48:	2304      	movcc	r3, #4
 8010b4a:	441d      	add	r5, r3
 8010b4c:	445b      	add	r3, fp
 8010b4e:	461e      	mov	r6, r3
 8010b50:	462c      	mov	r4, r5
 8010b52:	4544      	cmp	r4, r8
 8010b54:	d30e      	bcc.n	8010b74 <__mdiff+0xf8>
 8010b56:	f108 0103 	add.w	r1, r8, #3
 8010b5a:	1b49      	subs	r1, r1, r5
 8010b5c:	f021 0103 	bic.w	r1, r1, #3
 8010b60:	3d03      	subs	r5, #3
 8010b62:	45a8      	cmp	r8, r5
 8010b64:	bf38      	it	cc
 8010b66:	2100      	movcc	r1, #0
 8010b68:	440b      	add	r3, r1
 8010b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b6e:	b191      	cbz	r1, 8010b96 <__mdiff+0x11a>
 8010b70:	6117      	str	r7, [r2, #16]
 8010b72:	e79d      	b.n	8010ab0 <__mdiff+0x34>
 8010b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8010b78:	46e6      	mov	lr, ip
 8010b7a:	0c08      	lsrs	r0, r1, #16
 8010b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8010b80:	4471      	add	r1, lr
 8010b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010b86:	b289      	uxth	r1, r1
 8010b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010b8c:	f846 1b04 	str.w	r1, [r6], #4
 8010b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010b94:	e7dd      	b.n	8010b52 <__mdiff+0xd6>
 8010b96:	3f01      	subs	r7, #1
 8010b98:	e7e7      	b.n	8010b6a <__mdiff+0xee>
 8010b9a:	bf00      	nop
 8010b9c:	08012d14 	.word	0x08012d14
 8010ba0:	08012d25 	.word	0x08012d25

08010ba4 <__d2b>:
 8010ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ba8:	460f      	mov	r7, r1
 8010baa:	2101      	movs	r1, #1
 8010bac:	ec59 8b10 	vmov	r8, r9, d0
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	f7ff fcd5 	bl	8010560 <_Balloc>
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	b930      	cbnz	r0, 8010bc8 <__d2b+0x24>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	4b23      	ldr	r3, [pc, #140]	@ (8010c4c <__d2b+0xa8>)
 8010bbe:	4824      	ldr	r0, [pc, #144]	@ (8010c50 <__d2b+0xac>)
 8010bc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8010bc4:	f000 fc6e 	bl	80114a4 <__assert_func>
 8010bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bd0:	b10d      	cbz	r5, 8010bd6 <__d2b+0x32>
 8010bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010bd6:	9301      	str	r3, [sp, #4]
 8010bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8010bdc:	d023      	beq.n	8010c26 <__d2b+0x82>
 8010bde:	4668      	mov	r0, sp
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	f7ff fd84 	bl	80106ee <__lo0bits>
 8010be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bea:	b1d0      	cbz	r0, 8010c22 <__d2b+0x7e>
 8010bec:	f1c0 0320 	rsb	r3, r0, #32
 8010bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bf4:	430b      	orrs	r3, r1
 8010bf6:	40c2      	lsrs	r2, r0
 8010bf8:	6163      	str	r3, [r4, #20]
 8010bfa:	9201      	str	r2, [sp, #4]
 8010bfc:	9b01      	ldr	r3, [sp, #4]
 8010bfe:	61a3      	str	r3, [r4, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	bf0c      	ite	eq
 8010c04:	2201      	moveq	r2, #1
 8010c06:	2202      	movne	r2, #2
 8010c08:	6122      	str	r2, [r4, #16]
 8010c0a:	b1a5      	cbz	r5, 8010c36 <__d2b+0x92>
 8010c0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010c10:	4405      	add	r5, r0
 8010c12:	603d      	str	r5, [r7, #0]
 8010c14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010c18:	6030      	str	r0, [r6, #0]
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	b003      	add	sp, #12
 8010c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c22:	6161      	str	r1, [r4, #20]
 8010c24:	e7ea      	b.n	8010bfc <__d2b+0x58>
 8010c26:	a801      	add	r0, sp, #4
 8010c28:	f7ff fd61 	bl	80106ee <__lo0bits>
 8010c2c:	9b01      	ldr	r3, [sp, #4]
 8010c2e:	6163      	str	r3, [r4, #20]
 8010c30:	3020      	adds	r0, #32
 8010c32:	2201      	movs	r2, #1
 8010c34:	e7e8      	b.n	8010c08 <__d2b+0x64>
 8010c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010c3e:	6038      	str	r0, [r7, #0]
 8010c40:	6918      	ldr	r0, [r3, #16]
 8010c42:	f7ff fd35 	bl	80106b0 <__hi0bits>
 8010c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c4a:	e7e5      	b.n	8010c18 <__d2b+0x74>
 8010c4c:	08012d14 	.word	0x08012d14
 8010c50:	08012d25 	.word	0x08012d25

08010c54 <__ssputs_r>:
 8010c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c58:	688e      	ldr	r6, [r1, #8]
 8010c5a:	461f      	mov	r7, r3
 8010c5c:	42be      	cmp	r6, r7
 8010c5e:	680b      	ldr	r3, [r1, #0]
 8010c60:	4682      	mov	sl, r0
 8010c62:	460c      	mov	r4, r1
 8010c64:	4690      	mov	r8, r2
 8010c66:	d82d      	bhi.n	8010cc4 <__ssputs_r+0x70>
 8010c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010c70:	d026      	beq.n	8010cc0 <__ssputs_r+0x6c>
 8010c72:	6965      	ldr	r5, [r4, #20]
 8010c74:	6909      	ldr	r1, [r1, #16]
 8010c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c7a:	eba3 0901 	sub.w	r9, r3, r1
 8010c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c82:	1c7b      	adds	r3, r7, #1
 8010c84:	444b      	add	r3, r9
 8010c86:	106d      	asrs	r5, r5, #1
 8010c88:	429d      	cmp	r5, r3
 8010c8a:	bf38      	it	cc
 8010c8c:	461d      	movcc	r5, r3
 8010c8e:	0553      	lsls	r3, r2, #21
 8010c90:	d527      	bpl.n	8010ce2 <__ssputs_r+0x8e>
 8010c92:	4629      	mov	r1, r5
 8010c94:	f7ff fbd8 	bl	8010448 <_malloc_r>
 8010c98:	4606      	mov	r6, r0
 8010c9a:	b360      	cbz	r0, 8010cf6 <__ssputs_r+0xa2>
 8010c9c:	6921      	ldr	r1, [r4, #16]
 8010c9e:	464a      	mov	r2, r9
 8010ca0:	f7fe fcf7 	bl	800f692 <memcpy>
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cae:	81a3      	strh	r3, [r4, #12]
 8010cb0:	6126      	str	r6, [r4, #16]
 8010cb2:	6165      	str	r5, [r4, #20]
 8010cb4:	444e      	add	r6, r9
 8010cb6:	eba5 0509 	sub.w	r5, r5, r9
 8010cba:	6026      	str	r6, [r4, #0]
 8010cbc:	60a5      	str	r5, [r4, #8]
 8010cbe:	463e      	mov	r6, r7
 8010cc0:	42be      	cmp	r6, r7
 8010cc2:	d900      	bls.n	8010cc6 <__ssputs_r+0x72>
 8010cc4:	463e      	mov	r6, r7
 8010cc6:	6820      	ldr	r0, [r4, #0]
 8010cc8:	4632      	mov	r2, r6
 8010cca:	4641      	mov	r1, r8
 8010ccc:	f000 fb9e 	bl	801140c <memmove>
 8010cd0:	68a3      	ldr	r3, [r4, #8]
 8010cd2:	1b9b      	subs	r3, r3, r6
 8010cd4:	60a3      	str	r3, [r4, #8]
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	4433      	add	r3, r6
 8010cda:	6023      	str	r3, [r4, #0]
 8010cdc:	2000      	movs	r0, #0
 8010cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce2:	462a      	mov	r2, r5
 8010ce4:	f000 fc22 	bl	801152c <_realloc_r>
 8010ce8:	4606      	mov	r6, r0
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d1e0      	bne.n	8010cb0 <__ssputs_r+0x5c>
 8010cee:	6921      	ldr	r1, [r4, #16]
 8010cf0:	4650      	mov	r0, sl
 8010cf2:	f7ff fb35 	bl	8010360 <_free_r>
 8010cf6:	230c      	movs	r3, #12
 8010cf8:	f8ca 3000 	str.w	r3, [sl]
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d02:	81a3      	strh	r3, [r4, #12]
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295
 8010d08:	e7e9      	b.n	8010cde <__ssputs_r+0x8a>
	...

08010d0c <_svfiprintf_r>:
 8010d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d10:	4698      	mov	r8, r3
 8010d12:	898b      	ldrh	r3, [r1, #12]
 8010d14:	061b      	lsls	r3, r3, #24
 8010d16:	b09d      	sub	sp, #116	@ 0x74
 8010d18:	4607      	mov	r7, r0
 8010d1a:	460d      	mov	r5, r1
 8010d1c:	4614      	mov	r4, r2
 8010d1e:	d510      	bpl.n	8010d42 <_svfiprintf_r+0x36>
 8010d20:	690b      	ldr	r3, [r1, #16]
 8010d22:	b973      	cbnz	r3, 8010d42 <_svfiprintf_r+0x36>
 8010d24:	2140      	movs	r1, #64	@ 0x40
 8010d26:	f7ff fb8f 	bl	8010448 <_malloc_r>
 8010d2a:	6028      	str	r0, [r5, #0]
 8010d2c:	6128      	str	r0, [r5, #16]
 8010d2e:	b930      	cbnz	r0, 8010d3e <_svfiprintf_r+0x32>
 8010d30:	230c      	movs	r3, #12
 8010d32:	603b      	str	r3, [r7, #0]
 8010d34:	f04f 30ff 	mov.w	r0, #4294967295
 8010d38:	b01d      	add	sp, #116	@ 0x74
 8010d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3e:	2340      	movs	r3, #64	@ 0x40
 8010d40:	616b      	str	r3, [r5, #20]
 8010d42:	2300      	movs	r3, #0
 8010d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d46:	2320      	movs	r3, #32
 8010d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d50:	2330      	movs	r3, #48	@ 0x30
 8010d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010ef0 <_svfiprintf_r+0x1e4>
 8010d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d5a:	f04f 0901 	mov.w	r9, #1
 8010d5e:	4623      	mov	r3, r4
 8010d60:	469a      	mov	sl, r3
 8010d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d66:	b10a      	cbz	r2, 8010d6c <_svfiprintf_r+0x60>
 8010d68:	2a25      	cmp	r2, #37	@ 0x25
 8010d6a:	d1f9      	bne.n	8010d60 <_svfiprintf_r+0x54>
 8010d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8010d70:	d00b      	beq.n	8010d8a <_svfiprintf_r+0x7e>
 8010d72:	465b      	mov	r3, fp
 8010d74:	4622      	mov	r2, r4
 8010d76:	4629      	mov	r1, r5
 8010d78:	4638      	mov	r0, r7
 8010d7a:	f7ff ff6b 	bl	8010c54 <__ssputs_r>
 8010d7e:	3001      	adds	r0, #1
 8010d80:	f000 80a7 	beq.w	8010ed2 <_svfiprintf_r+0x1c6>
 8010d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d86:	445a      	add	r2, fp
 8010d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f000 809f 	beq.w	8010ed2 <_svfiprintf_r+0x1c6>
 8010d94:	2300      	movs	r3, #0
 8010d96:	f04f 32ff 	mov.w	r2, #4294967295
 8010d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d9e:	f10a 0a01 	add.w	sl, sl, #1
 8010da2:	9304      	str	r3, [sp, #16]
 8010da4:	9307      	str	r3, [sp, #28]
 8010da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dac:	4654      	mov	r4, sl
 8010dae:	2205      	movs	r2, #5
 8010db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db4:	484e      	ldr	r0, [pc, #312]	@ (8010ef0 <_svfiprintf_r+0x1e4>)
 8010db6:	f7ef fa33 	bl	8000220 <memchr>
 8010dba:	9a04      	ldr	r2, [sp, #16]
 8010dbc:	b9d8      	cbnz	r0, 8010df6 <_svfiprintf_r+0xea>
 8010dbe:	06d0      	lsls	r0, r2, #27
 8010dc0:	bf44      	itt	mi
 8010dc2:	2320      	movmi	r3, #32
 8010dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dc8:	0711      	lsls	r1, r2, #28
 8010dca:	bf44      	itt	mi
 8010dcc:	232b      	movmi	r3, #43	@ 0x2b
 8010dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8010dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dd8:	d015      	beq.n	8010e06 <_svfiprintf_r+0xfa>
 8010dda:	9a07      	ldr	r2, [sp, #28]
 8010ddc:	4654      	mov	r4, sl
 8010dde:	2000      	movs	r0, #0
 8010de0:	f04f 0c0a 	mov.w	ip, #10
 8010de4:	4621      	mov	r1, r4
 8010de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dea:	3b30      	subs	r3, #48	@ 0x30
 8010dec:	2b09      	cmp	r3, #9
 8010dee:	d94b      	bls.n	8010e88 <_svfiprintf_r+0x17c>
 8010df0:	b1b0      	cbz	r0, 8010e20 <_svfiprintf_r+0x114>
 8010df2:	9207      	str	r2, [sp, #28]
 8010df4:	e014      	b.n	8010e20 <_svfiprintf_r+0x114>
 8010df6:	eba0 0308 	sub.w	r3, r0, r8
 8010dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	9304      	str	r3, [sp, #16]
 8010e02:	46a2      	mov	sl, r4
 8010e04:	e7d2      	b.n	8010dac <_svfiprintf_r+0xa0>
 8010e06:	9b03      	ldr	r3, [sp, #12]
 8010e08:	1d19      	adds	r1, r3, #4
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	9103      	str	r1, [sp, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	bfbb      	ittet	lt
 8010e12:	425b      	neglt	r3, r3
 8010e14:	f042 0202 	orrlt.w	r2, r2, #2
 8010e18:	9307      	strge	r3, [sp, #28]
 8010e1a:	9307      	strlt	r3, [sp, #28]
 8010e1c:	bfb8      	it	lt
 8010e1e:	9204      	strlt	r2, [sp, #16]
 8010e20:	7823      	ldrb	r3, [r4, #0]
 8010e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e24:	d10a      	bne.n	8010e3c <_svfiprintf_r+0x130>
 8010e26:	7863      	ldrb	r3, [r4, #1]
 8010e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e2a:	d132      	bne.n	8010e92 <_svfiprintf_r+0x186>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	1d1a      	adds	r2, r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	9203      	str	r2, [sp, #12]
 8010e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e38:	3402      	adds	r4, #2
 8010e3a:	9305      	str	r3, [sp, #20]
 8010e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f00 <_svfiprintf_r+0x1f4>
 8010e40:	7821      	ldrb	r1, [r4, #0]
 8010e42:	2203      	movs	r2, #3
 8010e44:	4650      	mov	r0, sl
 8010e46:	f7ef f9eb 	bl	8000220 <memchr>
 8010e4a:	b138      	cbz	r0, 8010e5c <_svfiprintf_r+0x150>
 8010e4c:	9b04      	ldr	r3, [sp, #16]
 8010e4e:	eba0 000a 	sub.w	r0, r0, sl
 8010e52:	2240      	movs	r2, #64	@ 0x40
 8010e54:	4082      	lsls	r2, r0
 8010e56:	4313      	orrs	r3, r2
 8010e58:	3401      	adds	r4, #1
 8010e5a:	9304      	str	r3, [sp, #16]
 8010e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e60:	4824      	ldr	r0, [pc, #144]	@ (8010ef4 <_svfiprintf_r+0x1e8>)
 8010e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e66:	2206      	movs	r2, #6
 8010e68:	f7ef f9da 	bl	8000220 <memchr>
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d036      	beq.n	8010ede <_svfiprintf_r+0x1d2>
 8010e70:	4b21      	ldr	r3, [pc, #132]	@ (8010ef8 <_svfiprintf_r+0x1ec>)
 8010e72:	bb1b      	cbnz	r3, 8010ebc <_svfiprintf_r+0x1b0>
 8010e74:	9b03      	ldr	r3, [sp, #12]
 8010e76:	3307      	adds	r3, #7
 8010e78:	f023 0307 	bic.w	r3, r3, #7
 8010e7c:	3308      	adds	r3, #8
 8010e7e:	9303      	str	r3, [sp, #12]
 8010e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e82:	4433      	add	r3, r6
 8010e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e86:	e76a      	b.n	8010d5e <_svfiprintf_r+0x52>
 8010e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e8c:	460c      	mov	r4, r1
 8010e8e:	2001      	movs	r0, #1
 8010e90:	e7a8      	b.n	8010de4 <_svfiprintf_r+0xd8>
 8010e92:	2300      	movs	r3, #0
 8010e94:	3401      	adds	r4, #1
 8010e96:	9305      	str	r3, [sp, #20]
 8010e98:	4619      	mov	r1, r3
 8010e9a:	f04f 0c0a 	mov.w	ip, #10
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea4:	3a30      	subs	r2, #48	@ 0x30
 8010ea6:	2a09      	cmp	r2, #9
 8010ea8:	d903      	bls.n	8010eb2 <_svfiprintf_r+0x1a6>
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d0c6      	beq.n	8010e3c <_svfiprintf_r+0x130>
 8010eae:	9105      	str	r1, [sp, #20]
 8010eb0:	e7c4      	b.n	8010e3c <_svfiprintf_r+0x130>
 8010eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e7f0      	b.n	8010e9e <_svfiprintf_r+0x192>
 8010ebc:	ab03      	add	r3, sp, #12
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	462a      	mov	r2, r5
 8010ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8010efc <_svfiprintf_r+0x1f0>)
 8010ec4:	a904      	add	r1, sp, #16
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7fd fd2a 	bl	800e920 <_printf_float>
 8010ecc:	1c42      	adds	r2, r0, #1
 8010ece:	4606      	mov	r6, r0
 8010ed0:	d1d6      	bne.n	8010e80 <_svfiprintf_r+0x174>
 8010ed2:	89ab      	ldrh	r3, [r5, #12]
 8010ed4:	065b      	lsls	r3, r3, #25
 8010ed6:	f53f af2d 	bmi.w	8010d34 <_svfiprintf_r+0x28>
 8010eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010edc:	e72c      	b.n	8010d38 <_svfiprintf_r+0x2c>
 8010ede:	ab03      	add	r3, sp, #12
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4b05      	ldr	r3, [pc, #20]	@ (8010efc <_svfiprintf_r+0x1f0>)
 8010ee6:	a904      	add	r1, sp, #16
 8010ee8:	4638      	mov	r0, r7
 8010eea:	f7fd ffb1 	bl	800ee50 <_printf_i>
 8010eee:	e7ed      	b.n	8010ecc <_svfiprintf_r+0x1c0>
 8010ef0:	08012d7e 	.word	0x08012d7e
 8010ef4:	08012d88 	.word	0x08012d88
 8010ef8:	0800e921 	.word	0x0800e921
 8010efc:	08010c55 	.word	0x08010c55
 8010f00:	08012d84 	.word	0x08012d84

08010f04 <__sfputc_r>:
 8010f04:	6893      	ldr	r3, [r2, #8]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	b410      	push	{r4}
 8010f0c:	6093      	str	r3, [r2, #8]
 8010f0e:	da08      	bge.n	8010f22 <__sfputc_r+0x1e>
 8010f10:	6994      	ldr	r4, [r2, #24]
 8010f12:	42a3      	cmp	r3, r4
 8010f14:	db01      	blt.n	8010f1a <__sfputc_r+0x16>
 8010f16:	290a      	cmp	r1, #10
 8010f18:	d103      	bne.n	8010f22 <__sfputc_r+0x1e>
 8010f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f1e:	f7fe baa5 	b.w	800f46c <__swbuf_r>
 8010f22:	6813      	ldr	r3, [r2, #0]
 8010f24:	1c58      	adds	r0, r3, #1
 8010f26:	6010      	str	r0, [r2, #0]
 8010f28:	7019      	strb	r1, [r3, #0]
 8010f2a:	4608      	mov	r0, r1
 8010f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <__sfputs_r>:
 8010f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f34:	4606      	mov	r6, r0
 8010f36:	460f      	mov	r7, r1
 8010f38:	4614      	mov	r4, r2
 8010f3a:	18d5      	adds	r5, r2, r3
 8010f3c:	42ac      	cmp	r4, r5
 8010f3e:	d101      	bne.n	8010f44 <__sfputs_r+0x12>
 8010f40:	2000      	movs	r0, #0
 8010f42:	e007      	b.n	8010f54 <__sfputs_r+0x22>
 8010f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f48:	463a      	mov	r2, r7
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	f7ff ffda 	bl	8010f04 <__sfputc_r>
 8010f50:	1c43      	adds	r3, r0, #1
 8010f52:	d1f3      	bne.n	8010f3c <__sfputs_r+0xa>
 8010f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f58 <_vfiprintf_r>:
 8010f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5c:	460d      	mov	r5, r1
 8010f5e:	b09d      	sub	sp, #116	@ 0x74
 8010f60:	4614      	mov	r4, r2
 8010f62:	4698      	mov	r8, r3
 8010f64:	4606      	mov	r6, r0
 8010f66:	b118      	cbz	r0, 8010f70 <_vfiprintf_r+0x18>
 8010f68:	6a03      	ldr	r3, [r0, #32]
 8010f6a:	b90b      	cbnz	r3, 8010f70 <_vfiprintf_r+0x18>
 8010f6c:	f7fe f91a 	bl	800f1a4 <__sinit>
 8010f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f72:	07d9      	lsls	r1, r3, #31
 8010f74:	d405      	bmi.n	8010f82 <_vfiprintf_r+0x2a>
 8010f76:	89ab      	ldrh	r3, [r5, #12]
 8010f78:	059a      	lsls	r2, r3, #22
 8010f7a:	d402      	bmi.n	8010f82 <_vfiprintf_r+0x2a>
 8010f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f7e:	f7fe fb86 	bl	800f68e <__retarget_lock_acquire_recursive>
 8010f82:	89ab      	ldrh	r3, [r5, #12]
 8010f84:	071b      	lsls	r3, r3, #28
 8010f86:	d501      	bpl.n	8010f8c <_vfiprintf_r+0x34>
 8010f88:	692b      	ldr	r3, [r5, #16]
 8010f8a:	b99b      	cbnz	r3, 8010fb4 <_vfiprintf_r+0x5c>
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7fe faaa 	bl	800f4e8 <__swsetup_r>
 8010f94:	b170      	cbz	r0, 8010fb4 <_vfiprintf_r+0x5c>
 8010f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f98:	07dc      	lsls	r4, r3, #31
 8010f9a:	d504      	bpl.n	8010fa6 <_vfiprintf_r+0x4e>
 8010f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa0:	b01d      	add	sp, #116	@ 0x74
 8010fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa6:	89ab      	ldrh	r3, [r5, #12]
 8010fa8:	0598      	lsls	r0, r3, #22
 8010faa:	d4f7      	bmi.n	8010f9c <_vfiprintf_r+0x44>
 8010fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fae:	f7fe fb6f 	bl	800f690 <__retarget_lock_release_recursive>
 8010fb2:	e7f3      	b.n	8010f9c <_vfiprintf_r+0x44>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fb8:	2320      	movs	r3, #32
 8010fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fc2:	2330      	movs	r3, #48	@ 0x30
 8010fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011174 <_vfiprintf_r+0x21c>
 8010fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010fcc:	f04f 0901 	mov.w	r9, #1
 8010fd0:	4623      	mov	r3, r4
 8010fd2:	469a      	mov	sl, r3
 8010fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fd8:	b10a      	cbz	r2, 8010fde <_vfiprintf_r+0x86>
 8010fda:	2a25      	cmp	r2, #37	@ 0x25
 8010fdc:	d1f9      	bne.n	8010fd2 <_vfiprintf_r+0x7a>
 8010fde:	ebba 0b04 	subs.w	fp, sl, r4
 8010fe2:	d00b      	beq.n	8010ffc <_vfiprintf_r+0xa4>
 8010fe4:	465b      	mov	r3, fp
 8010fe6:	4622      	mov	r2, r4
 8010fe8:	4629      	mov	r1, r5
 8010fea:	4630      	mov	r0, r6
 8010fec:	f7ff ffa1 	bl	8010f32 <__sfputs_r>
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	f000 80a7 	beq.w	8011144 <_vfiprintf_r+0x1ec>
 8010ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ff8:	445a      	add	r2, fp
 8010ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8011000:	2b00      	cmp	r3, #0
 8011002:	f000 809f 	beq.w	8011144 <_vfiprintf_r+0x1ec>
 8011006:	2300      	movs	r3, #0
 8011008:	f04f 32ff 	mov.w	r2, #4294967295
 801100c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011010:	f10a 0a01 	add.w	sl, sl, #1
 8011014:	9304      	str	r3, [sp, #16]
 8011016:	9307      	str	r3, [sp, #28]
 8011018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801101c:	931a      	str	r3, [sp, #104]	@ 0x68
 801101e:	4654      	mov	r4, sl
 8011020:	2205      	movs	r2, #5
 8011022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011026:	4853      	ldr	r0, [pc, #332]	@ (8011174 <_vfiprintf_r+0x21c>)
 8011028:	f7ef f8fa 	bl	8000220 <memchr>
 801102c:	9a04      	ldr	r2, [sp, #16]
 801102e:	b9d8      	cbnz	r0, 8011068 <_vfiprintf_r+0x110>
 8011030:	06d1      	lsls	r1, r2, #27
 8011032:	bf44      	itt	mi
 8011034:	2320      	movmi	r3, #32
 8011036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801103a:	0713      	lsls	r3, r2, #28
 801103c:	bf44      	itt	mi
 801103e:	232b      	movmi	r3, #43	@ 0x2b
 8011040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011044:	f89a 3000 	ldrb.w	r3, [sl]
 8011048:	2b2a      	cmp	r3, #42	@ 0x2a
 801104a:	d015      	beq.n	8011078 <_vfiprintf_r+0x120>
 801104c:	9a07      	ldr	r2, [sp, #28]
 801104e:	4654      	mov	r4, sl
 8011050:	2000      	movs	r0, #0
 8011052:	f04f 0c0a 	mov.w	ip, #10
 8011056:	4621      	mov	r1, r4
 8011058:	f811 3b01 	ldrb.w	r3, [r1], #1
 801105c:	3b30      	subs	r3, #48	@ 0x30
 801105e:	2b09      	cmp	r3, #9
 8011060:	d94b      	bls.n	80110fa <_vfiprintf_r+0x1a2>
 8011062:	b1b0      	cbz	r0, 8011092 <_vfiprintf_r+0x13a>
 8011064:	9207      	str	r2, [sp, #28]
 8011066:	e014      	b.n	8011092 <_vfiprintf_r+0x13a>
 8011068:	eba0 0308 	sub.w	r3, r0, r8
 801106c:	fa09 f303 	lsl.w	r3, r9, r3
 8011070:	4313      	orrs	r3, r2
 8011072:	9304      	str	r3, [sp, #16]
 8011074:	46a2      	mov	sl, r4
 8011076:	e7d2      	b.n	801101e <_vfiprintf_r+0xc6>
 8011078:	9b03      	ldr	r3, [sp, #12]
 801107a:	1d19      	adds	r1, r3, #4
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	9103      	str	r1, [sp, #12]
 8011080:	2b00      	cmp	r3, #0
 8011082:	bfbb      	ittet	lt
 8011084:	425b      	neglt	r3, r3
 8011086:	f042 0202 	orrlt.w	r2, r2, #2
 801108a:	9307      	strge	r3, [sp, #28]
 801108c:	9307      	strlt	r3, [sp, #28]
 801108e:	bfb8      	it	lt
 8011090:	9204      	strlt	r2, [sp, #16]
 8011092:	7823      	ldrb	r3, [r4, #0]
 8011094:	2b2e      	cmp	r3, #46	@ 0x2e
 8011096:	d10a      	bne.n	80110ae <_vfiprintf_r+0x156>
 8011098:	7863      	ldrb	r3, [r4, #1]
 801109a:	2b2a      	cmp	r3, #42	@ 0x2a
 801109c:	d132      	bne.n	8011104 <_vfiprintf_r+0x1ac>
 801109e:	9b03      	ldr	r3, [sp, #12]
 80110a0:	1d1a      	adds	r2, r3, #4
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	9203      	str	r2, [sp, #12]
 80110a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110aa:	3402      	adds	r4, #2
 80110ac:	9305      	str	r3, [sp, #20]
 80110ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011184 <_vfiprintf_r+0x22c>
 80110b2:	7821      	ldrb	r1, [r4, #0]
 80110b4:	2203      	movs	r2, #3
 80110b6:	4650      	mov	r0, sl
 80110b8:	f7ef f8b2 	bl	8000220 <memchr>
 80110bc:	b138      	cbz	r0, 80110ce <_vfiprintf_r+0x176>
 80110be:	9b04      	ldr	r3, [sp, #16]
 80110c0:	eba0 000a 	sub.w	r0, r0, sl
 80110c4:	2240      	movs	r2, #64	@ 0x40
 80110c6:	4082      	lsls	r2, r0
 80110c8:	4313      	orrs	r3, r2
 80110ca:	3401      	adds	r4, #1
 80110cc:	9304      	str	r3, [sp, #16]
 80110ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d2:	4829      	ldr	r0, [pc, #164]	@ (8011178 <_vfiprintf_r+0x220>)
 80110d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110d8:	2206      	movs	r2, #6
 80110da:	f7ef f8a1 	bl	8000220 <memchr>
 80110de:	2800      	cmp	r0, #0
 80110e0:	d03f      	beq.n	8011162 <_vfiprintf_r+0x20a>
 80110e2:	4b26      	ldr	r3, [pc, #152]	@ (801117c <_vfiprintf_r+0x224>)
 80110e4:	bb1b      	cbnz	r3, 801112e <_vfiprintf_r+0x1d6>
 80110e6:	9b03      	ldr	r3, [sp, #12]
 80110e8:	3307      	adds	r3, #7
 80110ea:	f023 0307 	bic.w	r3, r3, #7
 80110ee:	3308      	adds	r3, #8
 80110f0:	9303      	str	r3, [sp, #12]
 80110f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110f4:	443b      	add	r3, r7
 80110f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80110f8:	e76a      	b.n	8010fd0 <_vfiprintf_r+0x78>
 80110fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80110fe:	460c      	mov	r4, r1
 8011100:	2001      	movs	r0, #1
 8011102:	e7a8      	b.n	8011056 <_vfiprintf_r+0xfe>
 8011104:	2300      	movs	r3, #0
 8011106:	3401      	adds	r4, #1
 8011108:	9305      	str	r3, [sp, #20]
 801110a:	4619      	mov	r1, r3
 801110c:	f04f 0c0a 	mov.w	ip, #10
 8011110:	4620      	mov	r0, r4
 8011112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011116:	3a30      	subs	r2, #48	@ 0x30
 8011118:	2a09      	cmp	r2, #9
 801111a:	d903      	bls.n	8011124 <_vfiprintf_r+0x1cc>
 801111c:	2b00      	cmp	r3, #0
 801111e:	d0c6      	beq.n	80110ae <_vfiprintf_r+0x156>
 8011120:	9105      	str	r1, [sp, #20]
 8011122:	e7c4      	b.n	80110ae <_vfiprintf_r+0x156>
 8011124:	fb0c 2101 	mla	r1, ip, r1, r2
 8011128:	4604      	mov	r4, r0
 801112a:	2301      	movs	r3, #1
 801112c:	e7f0      	b.n	8011110 <_vfiprintf_r+0x1b8>
 801112e:	ab03      	add	r3, sp, #12
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	462a      	mov	r2, r5
 8011134:	4b12      	ldr	r3, [pc, #72]	@ (8011180 <_vfiprintf_r+0x228>)
 8011136:	a904      	add	r1, sp, #16
 8011138:	4630      	mov	r0, r6
 801113a:	f7fd fbf1 	bl	800e920 <_printf_float>
 801113e:	4607      	mov	r7, r0
 8011140:	1c78      	adds	r0, r7, #1
 8011142:	d1d6      	bne.n	80110f2 <_vfiprintf_r+0x19a>
 8011144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011146:	07d9      	lsls	r1, r3, #31
 8011148:	d405      	bmi.n	8011156 <_vfiprintf_r+0x1fe>
 801114a:	89ab      	ldrh	r3, [r5, #12]
 801114c:	059a      	lsls	r2, r3, #22
 801114e:	d402      	bmi.n	8011156 <_vfiprintf_r+0x1fe>
 8011150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011152:	f7fe fa9d 	bl	800f690 <__retarget_lock_release_recursive>
 8011156:	89ab      	ldrh	r3, [r5, #12]
 8011158:	065b      	lsls	r3, r3, #25
 801115a:	f53f af1f 	bmi.w	8010f9c <_vfiprintf_r+0x44>
 801115e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011160:	e71e      	b.n	8010fa0 <_vfiprintf_r+0x48>
 8011162:	ab03      	add	r3, sp, #12
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	462a      	mov	r2, r5
 8011168:	4b05      	ldr	r3, [pc, #20]	@ (8011180 <_vfiprintf_r+0x228>)
 801116a:	a904      	add	r1, sp, #16
 801116c:	4630      	mov	r0, r6
 801116e:	f7fd fe6f 	bl	800ee50 <_printf_i>
 8011172:	e7e4      	b.n	801113e <_vfiprintf_r+0x1e6>
 8011174:	08012d7e 	.word	0x08012d7e
 8011178:	08012d88 	.word	0x08012d88
 801117c:	0800e921 	.word	0x0800e921
 8011180:	08010f33 	.word	0x08010f33
 8011184:	08012d84 	.word	0x08012d84

08011188 <__sflush_r>:
 8011188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011190:	0716      	lsls	r6, r2, #28
 8011192:	4605      	mov	r5, r0
 8011194:	460c      	mov	r4, r1
 8011196:	d454      	bmi.n	8011242 <__sflush_r+0xba>
 8011198:	684b      	ldr	r3, [r1, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	dc02      	bgt.n	80111a4 <__sflush_r+0x1c>
 801119e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dd48      	ble.n	8011236 <__sflush_r+0xae>
 80111a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111a6:	2e00      	cmp	r6, #0
 80111a8:	d045      	beq.n	8011236 <__sflush_r+0xae>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111b0:	682f      	ldr	r7, [r5, #0]
 80111b2:	6a21      	ldr	r1, [r4, #32]
 80111b4:	602b      	str	r3, [r5, #0]
 80111b6:	d030      	beq.n	801121a <__sflush_r+0x92>
 80111b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	0759      	lsls	r1, r3, #29
 80111be:	d505      	bpl.n	80111cc <__sflush_r+0x44>
 80111c0:	6863      	ldr	r3, [r4, #4]
 80111c2:	1ad2      	subs	r2, r2, r3
 80111c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80111c6:	b10b      	cbz	r3, 80111cc <__sflush_r+0x44>
 80111c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80111ca:	1ad2      	subs	r2, r2, r3
 80111cc:	2300      	movs	r3, #0
 80111ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	4628      	mov	r0, r5
 80111d4:	47b0      	blx	r6
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	d106      	bne.n	80111ea <__sflush_r+0x62>
 80111dc:	6829      	ldr	r1, [r5, #0]
 80111de:	291d      	cmp	r1, #29
 80111e0:	d82b      	bhi.n	801123a <__sflush_r+0xb2>
 80111e2:	4a2a      	ldr	r2, [pc, #168]	@ (801128c <__sflush_r+0x104>)
 80111e4:	40ca      	lsrs	r2, r1
 80111e6:	07d6      	lsls	r6, r2, #31
 80111e8:	d527      	bpl.n	801123a <__sflush_r+0xb2>
 80111ea:	2200      	movs	r2, #0
 80111ec:	6062      	str	r2, [r4, #4]
 80111ee:	04d9      	lsls	r1, r3, #19
 80111f0:	6922      	ldr	r2, [r4, #16]
 80111f2:	6022      	str	r2, [r4, #0]
 80111f4:	d504      	bpl.n	8011200 <__sflush_r+0x78>
 80111f6:	1c42      	adds	r2, r0, #1
 80111f8:	d101      	bne.n	80111fe <__sflush_r+0x76>
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	b903      	cbnz	r3, 8011200 <__sflush_r+0x78>
 80111fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011202:	602f      	str	r7, [r5, #0]
 8011204:	b1b9      	cbz	r1, 8011236 <__sflush_r+0xae>
 8011206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801120a:	4299      	cmp	r1, r3
 801120c:	d002      	beq.n	8011214 <__sflush_r+0x8c>
 801120e:	4628      	mov	r0, r5
 8011210:	f7ff f8a6 	bl	8010360 <_free_r>
 8011214:	2300      	movs	r3, #0
 8011216:	6363      	str	r3, [r4, #52]	@ 0x34
 8011218:	e00d      	b.n	8011236 <__sflush_r+0xae>
 801121a:	2301      	movs	r3, #1
 801121c:	4628      	mov	r0, r5
 801121e:	47b0      	blx	r6
 8011220:	4602      	mov	r2, r0
 8011222:	1c50      	adds	r0, r2, #1
 8011224:	d1c9      	bne.n	80111ba <__sflush_r+0x32>
 8011226:	682b      	ldr	r3, [r5, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d0c6      	beq.n	80111ba <__sflush_r+0x32>
 801122c:	2b1d      	cmp	r3, #29
 801122e:	d001      	beq.n	8011234 <__sflush_r+0xac>
 8011230:	2b16      	cmp	r3, #22
 8011232:	d11e      	bne.n	8011272 <__sflush_r+0xea>
 8011234:	602f      	str	r7, [r5, #0]
 8011236:	2000      	movs	r0, #0
 8011238:	e022      	b.n	8011280 <__sflush_r+0xf8>
 801123a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801123e:	b21b      	sxth	r3, r3
 8011240:	e01b      	b.n	801127a <__sflush_r+0xf2>
 8011242:	690f      	ldr	r7, [r1, #16]
 8011244:	2f00      	cmp	r7, #0
 8011246:	d0f6      	beq.n	8011236 <__sflush_r+0xae>
 8011248:	0793      	lsls	r3, r2, #30
 801124a:	680e      	ldr	r6, [r1, #0]
 801124c:	bf08      	it	eq
 801124e:	694b      	ldreq	r3, [r1, #20]
 8011250:	600f      	str	r7, [r1, #0]
 8011252:	bf18      	it	ne
 8011254:	2300      	movne	r3, #0
 8011256:	eba6 0807 	sub.w	r8, r6, r7
 801125a:	608b      	str	r3, [r1, #8]
 801125c:	f1b8 0f00 	cmp.w	r8, #0
 8011260:	dde9      	ble.n	8011236 <__sflush_r+0xae>
 8011262:	6a21      	ldr	r1, [r4, #32]
 8011264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011266:	4643      	mov	r3, r8
 8011268:	463a      	mov	r2, r7
 801126a:	4628      	mov	r0, r5
 801126c:	47b0      	blx	r6
 801126e:	2800      	cmp	r0, #0
 8011270:	dc08      	bgt.n	8011284 <__sflush_r+0xfc>
 8011272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801127a:	81a3      	strh	r3, [r4, #12]
 801127c:	f04f 30ff 	mov.w	r0, #4294967295
 8011280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011284:	4407      	add	r7, r0
 8011286:	eba8 0800 	sub.w	r8, r8, r0
 801128a:	e7e7      	b.n	801125c <__sflush_r+0xd4>
 801128c:	20400001 	.word	0x20400001

08011290 <_fflush_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	690b      	ldr	r3, [r1, #16]
 8011294:	4605      	mov	r5, r0
 8011296:	460c      	mov	r4, r1
 8011298:	b913      	cbnz	r3, 80112a0 <_fflush_r+0x10>
 801129a:	2500      	movs	r5, #0
 801129c:	4628      	mov	r0, r5
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	b118      	cbz	r0, 80112aa <_fflush_r+0x1a>
 80112a2:	6a03      	ldr	r3, [r0, #32]
 80112a4:	b90b      	cbnz	r3, 80112aa <_fflush_r+0x1a>
 80112a6:	f7fd ff7d 	bl	800f1a4 <__sinit>
 80112aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d0f3      	beq.n	801129a <_fflush_r+0xa>
 80112b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112b4:	07d0      	lsls	r0, r2, #31
 80112b6:	d404      	bmi.n	80112c2 <_fflush_r+0x32>
 80112b8:	0599      	lsls	r1, r3, #22
 80112ba:	d402      	bmi.n	80112c2 <_fflush_r+0x32>
 80112bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112be:	f7fe f9e6 	bl	800f68e <__retarget_lock_acquire_recursive>
 80112c2:	4628      	mov	r0, r5
 80112c4:	4621      	mov	r1, r4
 80112c6:	f7ff ff5f 	bl	8011188 <__sflush_r>
 80112ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112cc:	07da      	lsls	r2, r3, #31
 80112ce:	4605      	mov	r5, r0
 80112d0:	d4e4      	bmi.n	801129c <_fflush_r+0xc>
 80112d2:	89a3      	ldrh	r3, [r4, #12]
 80112d4:	059b      	lsls	r3, r3, #22
 80112d6:	d4e1      	bmi.n	801129c <_fflush_r+0xc>
 80112d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112da:	f7fe f9d9 	bl	800f690 <__retarget_lock_release_recursive>
 80112de:	e7dd      	b.n	801129c <_fflush_r+0xc>

080112e0 <__swhatbuf_r>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	460c      	mov	r4, r1
 80112e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112e8:	2900      	cmp	r1, #0
 80112ea:	b096      	sub	sp, #88	@ 0x58
 80112ec:	4615      	mov	r5, r2
 80112ee:	461e      	mov	r6, r3
 80112f0:	da0d      	bge.n	801130e <__swhatbuf_r+0x2e>
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80112f8:	f04f 0100 	mov.w	r1, #0
 80112fc:	bf14      	ite	ne
 80112fe:	2340      	movne	r3, #64	@ 0x40
 8011300:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011304:	2000      	movs	r0, #0
 8011306:	6031      	str	r1, [r6, #0]
 8011308:	602b      	str	r3, [r5, #0]
 801130a:	b016      	add	sp, #88	@ 0x58
 801130c:	bd70      	pop	{r4, r5, r6, pc}
 801130e:	466a      	mov	r2, sp
 8011310:	f000 f896 	bl	8011440 <_fstat_r>
 8011314:	2800      	cmp	r0, #0
 8011316:	dbec      	blt.n	80112f2 <__swhatbuf_r+0x12>
 8011318:	9901      	ldr	r1, [sp, #4]
 801131a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801131e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011322:	4259      	negs	r1, r3
 8011324:	4159      	adcs	r1, r3
 8011326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801132a:	e7eb      	b.n	8011304 <__swhatbuf_r+0x24>

0801132c <__smakebuf_r>:
 801132c:	898b      	ldrh	r3, [r1, #12]
 801132e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011330:	079d      	lsls	r5, r3, #30
 8011332:	4606      	mov	r6, r0
 8011334:	460c      	mov	r4, r1
 8011336:	d507      	bpl.n	8011348 <__smakebuf_r+0x1c>
 8011338:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	6123      	str	r3, [r4, #16]
 8011340:	2301      	movs	r3, #1
 8011342:	6163      	str	r3, [r4, #20]
 8011344:	b003      	add	sp, #12
 8011346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011348:	ab01      	add	r3, sp, #4
 801134a:	466a      	mov	r2, sp
 801134c:	f7ff ffc8 	bl	80112e0 <__swhatbuf_r>
 8011350:	9f00      	ldr	r7, [sp, #0]
 8011352:	4605      	mov	r5, r0
 8011354:	4639      	mov	r1, r7
 8011356:	4630      	mov	r0, r6
 8011358:	f7ff f876 	bl	8010448 <_malloc_r>
 801135c:	b948      	cbnz	r0, 8011372 <__smakebuf_r+0x46>
 801135e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011362:	059a      	lsls	r2, r3, #22
 8011364:	d4ee      	bmi.n	8011344 <__smakebuf_r+0x18>
 8011366:	f023 0303 	bic.w	r3, r3, #3
 801136a:	f043 0302 	orr.w	r3, r3, #2
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	e7e2      	b.n	8011338 <__smakebuf_r+0xc>
 8011372:	89a3      	ldrh	r3, [r4, #12]
 8011374:	6020      	str	r0, [r4, #0]
 8011376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801137a:	81a3      	strh	r3, [r4, #12]
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011382:	b15b      	cbz	r3, 801139c <__smakebuf_r+0x70>
 8011384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011388:	4630      	mov	r0, r6
 801138a:	f000 f86b 	bl	8011464 <_isatty_r>
 801138e:	b128      	cbz	r0, 801139c <__smakebuf_r+0x70>
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	f023 0303 	bic.w	r3, r3, #3
 8011396:	f043 0301 	orr.w	r3, r3, #1
 801139a:	81a3      	strh	r3, [r4, #12]
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	431d      	orrs	r5, r3
 80113a0:	81a5      	strh	r5, [r4, #12]
 80113a2:	e7cf      	b.n	8011344 <__smakebuf_r+0x18>

080113a4 <_putc_r>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	460d      	mov	r5, r1
 80113a8:	4614      	mov	r4, r2
 80113aa:	4606      	mov	r6, r0
 80113ac:	b118      	cbz	r0, 80113b6 <_putc_r+0x12>
 80113ae:	6a03      	ldr	r3, [r0, #32]
 80113b0:	b90b      	cbnz	r3, 80113b6 <_putc_r+0x12>
 80113b2:	f7fd fef7 	bl	800f1a4 <__sinit>
 80113b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113b8:	07d8      	lsls	r0, r3, #31
 80113ba:	d405      	bmi.n	80113c8 <_putc_r+0x24>
 80113bc:	89a3      	ldrh	r3, [r4, #12]
 80113be:	0599      	lsls	r1, r3, #22
 80113c0:	d402      	bmi.n	80113c8 <_putc_r+0x24>
 80113c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113c4:	f7fe f963 	bl	800f68e <__retarget_lock_acquire_recursive>
 80113c8:	68a3      	ldr	r3, [r4, #8]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	60a3      	str	r3, [r4, #8]
 80113d0:	da05      	bge.n	80113de <_putc_r+0x3a>
 80113d2:	69a2      	ldr	r2, [r4, #24]
 80113d4:	4293      	cmp	r3, r2
 80113d6:	db12      	blt.n	80113fe <_putc_r+0x5a>
 80113d8:	b2eb      	uxtb	r3, r5
 80113da:	2b0a      	cmp	r3, #10
 80113dc:	d00f      	beq.n	80113fe <_putc_r+0x5a>
 80113de:	6823      	ldr	r3, [r4, #0]
 80113e0:	1c5a      	adds	r2, r3, #1
 80113e2:	6022      	str	r2, [r4, #0]
 80113e4:	701d      	strb	r5, [r3, #0]
 80113e6:	b2ed      	uxtb	r5, r5
 80113e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113ea:	07da      	lsls	r2, r3, #31
 80113ec:	d405      	bmi.n	80113fa <_putc_r+0x56>
 80113ee:	89a3      	ldrh	r3, [r4, #12]
 80113f0:	059b      	lsls	r3, r3, #22
 80113f2:	d402      	bmi.n	80113fa <_putc_r+0x56>
 80113f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113f6:	f7fe f94b 	bl	800f690 <__retarget_lock_release_recursive>
 80113fa:	4628      	mov	r0, r5
 80113fc:	bd70      	pop	{r4, r5, r6, pc}
 80113fe:	4629      	mov	r1, r5
 8011400:	4622      	mov	r2, r4
 8011402:	4630      	mov	r0, r6
 8011404:	f7fe f832 	bl	800f46c <__swbuf_r>
 8011408:	4605      	mov	r5, r0
 801140a:	e7ed      	b.n	80113e8 <_putc_r+0x44>

0801140c <memmove>:
 801140c:	4288      	cmp	r0, r1
 801140e:	b510      	push	{r4, lr}
 8011410:	eb01 0402 	add.w	r4, r1, r2
 8011414:	d902      	bls.n	801141c <memmove+0x10>
 8011416:	4284      	cmp	r4, r0
 8011418:	4623      	mov	r3, r4
 801141a:	d807      	bhi.n	801142c <memmove+0x20>
 801141c:	1e43      	subs	r3, r0, #1
 801141e:	42a1      	cmp	r1, r4
 8011420:	d008      	beq.n	8011434 <memmove+0x28>
 8011422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801142a:	e7f8      	b.n	801141e <memmove+0x12>
 801142c:	4402      	add	r2, r0
 801142e:	4601      	mov	r1, r0
 8011430:	428a      	cmp	r2, r1
 8011432:	d100      	bne.n	8011436 <memmove+0x2a>
 8011434:	bd10      	pop	{r4, pc}
 8011436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801143a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801143e:	e7f7      	b.n	8011430 <memmove+0x24>

08011440 <_fstat_r>:
 8011440:	b538      	push	{r3, r4, r5, lr}
 8011442:	4d07      	ldr	r5, [pc, #28]	@ (8011460 <_fstat_r+0x20>)
 8011444:	2300      	movs	r3, #0
 8011446:	4604      	mov	r4, r0
 8011448:	4608      	mov	r0, r1
 801144a:	4611      	mov	r1, r2
 801144c:	602b      	str	r3, [r5, #0]
 801144e:	f7f4 f96a 	bl	8005726 <_fstat>
 8011452:	1c43      	adds	r3, r0, #1
 8011454:	d102      	bne.n	801145c <_fstat_r+0x1c>
 8011456:	682b      	ldr	r3, [r5, #0]
 8011458:	b103      	cbz	r3, 801145c <_fstat_r+0x1c>
 801145a:	6023      	str	r3, [r4, #0]
 801145c:	bd38      	pop	{r3, r4, r5, pc}
 801145e:	bf00      	nop
 8011460:	2000d58c 	.word	0x2000d58c

08011464 <_isatty_r>:
 8011464:	b538      	push	{r3, r4, r5, lr}
 8011466:	4d06      	ldr	r5, [pc, #24]	@ (8011480 <_isatty_r+0x1c>)
 8011468:	2300      	movs	r3, #0
 801146a:	4604      	mov	r4, r0
 801146c:	4608      	mov	r0, r1
 801146e:	602b      	str	r3, [r5, #0]
 8011470:	f7f4 f95e 	bl	8005730 <_isatty>
 8011474:	1c43      	adds	r3, r0, #1
 8011476:	d102      	bne.n	801147e <_isatty_r+0x1a>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	b103      	cbz	r3, 801147e <_isatty_r+0x1a>
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	bd38      	pop	{r3, r4, r5, pc}
 8011480:	2000d58c 	.word	0x2000d58c

08011484 <_sbrk_r>:
 8011484:	b538      	push	{r3, r4, r5, lr}
 8011486:	4d06      	ldr	r5, [pc, #24]	@ (80114a0 <_sbrk_r+0x1c>)
 8011488:	2300      	movs	r3, #0
 801148a:	4604      	mov	r4, r0
 801148c:	4608      	mov	r0, r1
 801148e:	602b      	str	r3, [r5, #0]
 8011490:	f7f4 f952 	bl	8005738 <_sbrk>
 8011494:	1c43      	adds	r3, r0, #1
 8011496:	d102      	bne.n	801149e <_sbrk_r+0x1a>
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	b103      	cbz	r3, 801149e <_sbrk_r+0x1a>
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	bd38      	pop	{r3, r4, r5, pc}
 80114a0:	2000d58c 	.word	0x2000d58c

080114a4 <__assert_func>:
 80114a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114a6:	4614      	mov	r4, r2
 80114a8:	461a      	mov	r2, r3
 80114aa:	4b09      	ldr	r3, [pc, #36]	@ (80114d0 <__assert_func+0x2c>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4605      	mov	r5, r0
 80114b0:	68d8      	ldr	r0, [r3, #12]
 80114b2:	b14c      	cbz	r4, 80114c8 <__assert_func+0x24>
 80114b4:	4b07      	ldr	r3, [pc, #28]	@ (80114d4 <__assert_func+0x30>)
 80114b6:	9100      	str	r1, [sp, #0]
 80114b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114bc:	4906      	ldr	r1, [pc, #24]	@ (80114d8 <__assert_func+0x34>)
 80114be:	462b      	mov	r3, r5
 80114c0:	f000 f870 	bl	80115a4 <fiprintf>
 80114c4:	f000 f880 	bl	80115c8 <abort>
 80114c8:	4b04      	ldr	r3, [pc, #16]	@ (80114dc <__assert_func+0x38>)
 80114ca:	461c      	mov	r4, r3
 80114cc:	e7f3      	b.n	80114b6 <__assert_func+0x12>
 80114ce:	bf00      	nop
 80114d0:	20000144 	.word	0x20000144
 80114d4:	08012d99 	.word	0x08012d99
 80114d8:	08012da6 	.word	0x08012da6
 80114dc:	08012dd4 	.word	0x08012dd4

080114e0 <_calloc_r>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	fba1 5402 	umull	r5, r4, r1, r2
 80114e6:	b934      	cbnz	r4, 80114f6 <_calloc_r+0x16>
 80114e8:	4629      	mov	r1, r5
 80114ea:	f7fe ffad 	bl	8010448 <_malloc_r>
 80114ee:	4606      	mov	r6, r0
 80114f0:	b928      	cbnz	r0, 80114fe <_calloc_r+0x1e>
 80114f2:	4630      	mov	r0, r6
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	220c      	movs	r2, #12
 80114f8:	6002      	str	r2, [r0, #0]
 80114fa:	2600      	movs	r6, #0
 80114fc:	e7f9      	b.n	80114f2 <_calloc_r+0x12>
 80114fe:	462a      	mov	r2, r5
 8011500:	4621      	mov	r1, r4
 8011502:	f7fe f847 	bl	800f594 <memset>
 8011506:	e7f4      	b.n	80114f2 <_calloc_r+0x12>

08011508 <__ascii_mbtowc>:
 8011508:	b082      	sub	sp, #8
 801150a:	b901      	cbnz	r1, 801150e <__ascii_mbtowc+0x6>
 801150c:	a901      	add	r1, sp, #4
 801150e:	b142      	cbz	r2, 8011522 <__ascii_mbtowc+0x1a>
 8011510:	b14b      	cbz	r3, 8011526 <__ascii_mbtowc+0x1e>
 8011512:	7813      	ldrb	r3, [r2, #0]
 8011514:	600b      	str	r3, [r1, #0]
 8011516:	7812      	ldrb	r2, [r2, #0]
 8011518:	1e10      	subs	r0, r2, #0
 801151a:	bf18      	it	ne
 801151c:	2001      	movne	r0, #1
 801151e:	b002      	add	sp, #8
 8011520:	4770      	bx	lr
 8011522:	4610      	mov	r0, r2
 8011524:	e7fb      	b.n	801151e <__ascii_mbtowc+0x16>
 8011526:	f06f 0001 	mvn.w	r0, #1
 801152a:	e7f8      	b.n	801151e <__ascii_mbtowc+0x16>

0801152c <_realloc_r>:
 801152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011530:	4607      	mov	r7, r0
 8011532:	4614      	mov	r4, r2
 8011534:	460d      	mov	r5, r1
 8011536:	b921      	cbnz	r1, 8011542 <_realloc_r+0x16>
 8011538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801153c:	4611      	mov	r1, r2
 801153e:	f7fe bf83 	b.w	8010448 <_malloc_r>
 8011542:	b92a      	cbnz	r2, 8011550 <_realloc_r+0x24>
 8011544:	f7fe ff0c 	bl	8010360 <_free_r>
 8011548:	4625      	mov	r5, r4
 801154a:	4628      	mov	r0, r5
 801154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011550:	f000 f841 	bl	80115d6 <_malloc_usable_size_r>
 8011554:	4284      	cmp	r4, r0
 8011556:	4606      	mov	r6, r0
 8011558:	d802      	bhi.n	8011560 <_realloc_r+0x34>
 801155a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801155e:	d8f4      	bhi.n	801154a <_realloc_r+0x1e>
 8011560:	4621      	mov	r1, r4
 8011562:	4638      	mov	r0, r7
 8011564:	f7fe ff70 	bl	8010448 <_malloc_r>
 8011568:	4680      	mov	r8, r0
 801156a:	b908      	cbnz	r0, 8011570 <_realloc_r+0x44>
 801156c:	4645      	mov	r5, r8
 801156e:	e7ec      	b.n	801154a <_realloc_r+0x1e>
 8011570:	42b4      	cmp	r4, r6
 8011572:	4622      	mov	r2, r4
 8011574:	4629      	mov	r1, r5
 8011576:	bf28      	it	cs
 8011578:	4632      	movcs	r2, r6
 801157a:	f7fe f88a 	bl	800f692 <memcpy>
 801157e:	4629      	mov	r1, r5
 8011580:	4638      	mov	r0, r7
 8011582:	f7fe feed 	bl	8010360 <_free_r>
 8011586:	e7f1      	b.n	801156c <_realloc_r+0x40>

08011588 <__ascii_wctomb>:
 8011588:	4603      	mov	r3, r0
 801158a:	4608      	mov	r0, r1
 801158c:	b141      	cbz	r1, 80115a0 <__ascii_wctomb+0x18>
 801158e:	2aff      	cmp	r2, #255	@ 0xff
 8011590:	d904      	bls.n	801159c <__ascii_wctomb+0x14>
 8011592:	228a      	movs	r2, #138	@ 0x8a
 8011594:	601a      	str	r2, [r3, #0]
 8011596:	f04f 30ff 	mov.w	r0, #4294967295
 801159a:	4770      	bx	lr
 801159c:	700a      	strb	r2, [r1, #0]
 801159e:	2001      	movs	r0, #1
 80115a0:	4770      	bx	lr
	...

080115a4 <fiprintf>:
 80115a4:	b40e      	push	{r1, r2, r3}
 80115a6:	b503      	push	{r0, r1, lr}
 80115a8:	4601      	mov	r1, r0
 80115aa:	ab03      	add	r3, sp, #12
 80115ac:	4805      	ldr	r0, [pc, #20]	@ (80115c4 <fiprintf+0x20>)
 80115ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80115b2:	6800      	ldr	r0, [r0, #0]
 80115b4:	9301      	str	r3, [sp, #4]
 80115b6:	f7ff fccf 	bl	8010f58 <_vfiprintf_r>
 80115ba:	b002      	add	sp, #8
 80115bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80115c0:	b003      	add	sp, #12
 80115c2:	4770      	bx	lr
 80115c4:	20000144 	.word	0x20000144

080115c8 <abort>:
 80115c8:	b508      	push	{r3, lr}
 80115ca:	2006      	movs	r0, #6
 80115cc:	f000 f834 	bl	8011638 <raise>
 80115d0:	2001      	movs	r0, #1
 80115d2:	f7f4 f885 	bl	80056e0 <_exit>

080115d6 <_malloc_usable_size_r>:
 80115d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115da:	1f18      	subs	r0, r3, #4
 80115dc:	2b00      	cmp	r3, #0
 80115de:	bfbc      	itt	lt
 80115e0:	580b      	ldrlt	r3, [r1, r0]
 80115e2:	18c0      	addlt	r0, r0, r3
 80115e4:	4770      	bx	lr

080115e6 <_raise_r>:
 80115e6:	291f      	cmp	r1, #31
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4605      	mov	r5, r0
 80115ec:	460c      	mov	r4, r1
 80115ee:	d904      	bls.n	80115fa <_raise_r+0x14>
 80115f0:	2316      	movs	r3, #22
 80115f2:	6003      	str	r3, [r0, #0]
 80115f4:	f04f 30ff 	mov.w	r0, #4294967295
 80115f8:	bd38      	pop	{r3, r4, r5, pc}
 80115fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115fc:	b112      	cbz	r2, 8011604 <_raise_r+0x1e>
 80115fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011602:	b94b      	cbnz	r3, 8011618 <_raise_r+0x32>
 8011604:	4628      	mov	r0, r5
 8011606:	f000 f831 	bl	801166c <_getpid_r>
 801160a:	4622      	mov	r2, r4
 801160c:	4601      	mov	r1, r0
 801160e:	4628      	mov	r0, r5
 8011610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011614:	f000 b818 	b.w	8011648 <_kill_r>
 8011618:	2b01      	cmp	r3, #1
 801161a:	d00a      	beq.n	8011632 <_raise_r+0x4c>
 801161c:	1c59      	adds	r1, r3, #1
 801161e:	d103      	bne.n	8011628 <_raise_r+0x42>
 8011620:	2316      	movs	r3, #22
 8011622:	6003      	str	r3, [r0, #0]
 8011624:	2001      	movs	r0, #1
 8011626:	e7e7      	b.n	80115f8 <_raise_r+0x12>
 8011628:	2100      	movs	r1, #0
 801162a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801162e:	4620      	mov	r0, r4
 8011630:	4798      	blx	r3
 8011632:	2000      	movs	r0, #0
 8011634:	e7e0      	b.n	80115f8 <_raise_r+0x12>
	...

08011638 <raise>:
 8011638:	4b02      	ldr	r3, [pc, #8]	@ (8011644 <raise+0xc>)
 801163a:	4601      	mov	r1, r0
 801163c:	6818      	ldr	r0, [r3, #0]
 801163e:	f7ff bfd2 	b.w	80115e6 <_raise_r>
 8011642:	bf00      	nop
 8011644:	20000144 	.word	0x20000144

08011648 <_kill_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	@ (8011668 <_kill_r+0x20>)
 801164c:	2300      	movs	r3, #0
 801164e:	4604      	mov	r4, r0
 8011650:	4608      	mov	r0, r1
 8011652:	4611      	mov	r1, r2
 8011654:	602b      	str	r3, [r5, #0]
 8011656:	f7f4 f83b 	bl	80056d0 <_kill>
 801165a:	1c43      	adds	r3, r0, #1
 801165c:	d102      	bne.n	8011664 <_kill_r+0x1c>
 801165e:	682b      	ldr	r3, [r5, #0]
 8011660:	b103      	cbz	r3, 8011664 <_kill_r+0x1c>
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop
 8011668:	2000d58c 	.word	0x2000d58c

0801166c <_getpid_r>:
 801166c:	f7f4 b82e 	b.w	80056cc <_getpid>

08011670 <_init>:
 8011670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011672:	bf00      	nop
 8011674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011676:	bc08      	pop	{r3}
 8011678:	469e      	mov	lr, r3
 801167a:	4770      	bx	lr

0801167c <_fini>:
 801167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801167e:	bf00      	nop
 8011680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011682:	bc08      	pop	{r3}
 8011684:	469e      	mov	lr, r3
 8011686:	4770      	bx	lr
